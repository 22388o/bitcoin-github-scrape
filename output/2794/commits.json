[
  {
    "sha": "5e50e8263f6b1295b3353d48c56eea6636c01a9c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZTUwZTgyNjNmNmIxMjk1YjMzNTNkNDhjNTZlZWE2NjM2YzAxYTlj",
    "commit": {
      "author": {
        "name": "Mike Hearn",
        "email": "hearn@google.com",
        "date": "2013-06-25T09:40:13Z"
      },
      "committer": {
        "name": "Mike Hearn",
        "email": "hearn@google.com",
        "date": "2013-06-25T09:40:13Z"
      },
      "message": "Update to LevelDB 1.12",
      "tree": {
        "sha": "8a683fae0b85d1a893a837a86b5039a810e6070c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a683fae0b85d1a893a837a86b5039a810e6070c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e50e8263f6b1295b3353d48c56eea6636c01a9c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e50e8263f6b1295b3353d48c56eea6636c01a9c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5e50e8263f6b1295b3353d48c56eea6636c01a9c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e50e8263f6b1295b3353d48c56eea6636c01a9c/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "79f6925facba6546987137f2c54948cad4dc69df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79f6925facba6546987137f2c54948cad4dc69df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/79f6925facba6546987137f2c54948cad4dc69df"
      }
    ],
    "stats": {
      "total": 358,
      "additions": 297,
      "deletions": 61
    },
    "files": [
      {
        "sha": "fc40194ab94f41405bd48d085b9f3fcbe1704234",
        "filename": "src/leveldb/AUTHORS",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/AUTHORS",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/AUTHORS",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/AUTHORS?ref=5e50e8263f6b1295b3353d48c56eea6636c01a9c",
        "patch": "@@ -6,3 +6,6 @@ Google Inc.\n # Initial version authors:\n Jeffrey Dean <jeff@google.com>\n Sanjay Ghemawat <sanjay@google.com>\n+\n+# Partial list of contributors:\n+Kevin Regan <kevin.d.regan@gmail.com>"
      },
      {
        "sha": "96af7765be41edc6b8e83c646efcdb3b9c99d025",
        "filename": "src/leveldb/Makefile",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/Makefile?ref=5e50e8263f6b1295b3353d48c56eea6636c01a9c",
        "patch": "@@ -12,7 +12,7 @@ OPT ?= -O2 -DNDEBUG       # (A) Production use (optimized mode)\n #-----------------------------------------------\n \n # detect what platform we're building on\n-$(shell CC=$(CC) CXX=$(CXX) TARGET_OS=$(TARGET_OS) \\\n+$(shell CC=\"$(CC)\" CXX=\"$(CXX)\" TARGET_OS=\"$(TARGET_OS)\" \\\n     ./build_detect_platform build_config.mk ./)\n # this file is generated by the previous line to set build flags and sources\n include build_config.mk\n@@ -42,6 +42,7 @@ TESTS = \\\n \tenv_test \\\n \tfilename_test \\\n \tfilter_block_test \\\n+\tissue178_test \\\n \tlog_test \\\n \tmemenv_test \\\n \tskiplist_test \\\n@@ -69,7 +70,7 @@ SHARED = $(SHARED1)\n else\n # Update db.h if you change these.\n SHARED_MAJOR = 1\n-SHARED_MINOR = 9\n+SHARED_MINOR = 12\n SHARED1 = libleveldb.$(PLATFORM_SHARED_EXT)\n SHARED2 = $(SHARED1).$(SHARED_MAJOR)\n SHARED3 = $(SHARED1).$(SHARED_MAJOR).$(SHARED_MINOR)\n@@ -146,6 +147,9 @@ filename_test: db/filename_test.o $(LIBOBJECTS) $(TESTHARNESS)\n filter_block_test: table/filter_block_test.o $(LIBOBJECTS) $(TESTHARNESS)\n \t$(CXX) $(LDFLAGS) table/filter_block_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)\n \n+issue178_test: issues/issue178_test.o $(LIBOBJECTS) $(TESTHARNESS)\n+\t$(CXX) $(LDFLAGS) issues/issue178_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)\n+\n log_test: db/log_test.o $(LIBOBJECTS) $(TESTHARNESS)\n \t$(CXX) $(LDFLAGS) db/log_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)\n "
      },
      {
        "sha": "7676d568011186c05d1011b8fb27d2ebca1b60fa",
        "filename": "src/leveldb/build_detect_platform",
        "status": "modified",
        "additions": 21,
        "deletions": 2,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/build_detect_platform",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/build_detect_platform",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/build_detect_platform?ref=5e50e8263f6b1295b3353d48c56eea6636c01a9c",
        "patch": "@@ -44,6 +44,10 @@ if test -z \"$CXX\"; then\n     CXX=g++\n fi\n \n+if test -z \"$TMPDIR\"; then\n+    TMPDIR=/tmp\n+fi\n+\n # Detect OS\n if test -z \"$TARGET_OS\"; then\n     TARGET_OS=`uname -s`\n@@ -169,8 +173,10 @@ if [ \"$CROSS_COMPILE\" = \"true\" ]; then\n     # Cross-compiling; do not try any compilation tests.\n     true\n else\n+    CXXOUTPUT=\"${TMPDIR}/leveldb_build_detect_platform-cxx.$$\"\n+\n     # If -std=c++0x works, use <cstdatomic>.  Otherwise use port_posix.h.\n-    $CXX $CXXFLAGS -std=c++0x -x c++ - -o /dev/null 2>/dev/null  <<EOF\n+    $CXX $CXXFLAGS -std=c++0x -x c++ - -o $CXXOUTPUT 2>/dev/null  <<EOF\n       #include <cstdatomic>\n       int main() {}\n EOF\n@@ -181,13 +187,26 @@ EOF\n         COMMON_FLAGS=\"$COMMON_FLAGS -DLEVELDB_PLATFORM_POSIX\"\n     fi\n \n+    # Test whether Snappy library is installed\n+    # http://code.google.com/p/snappy/\n+    $CXX $CXXFLAGS -x c++ - -o $CXXOUTPUT 2>/dev/null  <<EOF\n+      #include <snappy.h>\n+      int main() {}\n+EOF\n+    if [ \"$?\" = 0 ]; then\n+        COMMON_FLAGS=\"$COMMON_FLAGS -DSNAPPY\"\n+        PLATFORM_LIBS=\"$PLATFORM_LIBS -lsnappy\"\n+    fi\n+\n     # Test whether tcmalloc is available\n-    $CXX $CXXFLAGS -x c++ - -o /dev/null -ltcmalloc 2>/dev/null  <<EOF\n+    $CXX $CXXFLAGS -x c++ - -o $CXXOUTPUT -ltcmalloc 2>/dev/null  <<EOF\n       int main() {}\n EOF\n     if [ \"$?\" = 0 ]; then\n         PLATFORM_LIBS=\"$PLATFORM_LIBS -ltcmalloc\"\n     fi\n+\n+    rm -f $CXXOUTPUT 2>/dev/null\n fi\n \n PLATFORM_CCFLAGS=\"$PLATFORM_CCFLAGS $COMMON_FLAGS\""
      },
      {
        "sha": "395d3172ad3a16b24552057599c776228bf84917",
        "filename": "src/leveldb/db/db_impl.cc",
        "status": "modified",
        "additions": 29,
        "deletions": 11,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/db/db_impl.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/db/db_impl.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/db_impl.cc?ref=5e50e8263f6b1295b3353d48c56eea6636c01a9c",
        "patch": "@@ -35,6 +35,8 @@\n \n namespace leveldb {\n \n+const int kNumNonTableCacheFiles = 10;\n+\n // Information kept for every waiting writer\n struct DBImpl::Writer {\n   Status status;\n@@ -92,9 +94,9 @@ Options SanitizeOptions(const std::string& dbname,\n   Options result = src;\n   result.comparator = icmp;\n   result.filter_policy = (src.filter_policy != NULL) ? ipolicy : NULL;\n-  ClipToRange(&result.max_open_files,            20,     50000);\n-  ClipToRange(&result.write_buffer_size,         64<<10, 1<<30);\n-  ClipToRange(&result.block_size,                1<<10,  4<<20);\n+  ClipToRange(&result.max_open_files,    64 + kNumNonTableCacheFiles, 50000);\n+  ClipToRange(&result.write_buffer_size, 64<<10,                      1<<30);\n+  ClipToRange(&result.block_size,        1<<10,                       4<<20);\n   if (result.info_log == NULL) {\n     // Open a log file in the same directory as the db\n     src.env->CreateDir(dbname);  // In case it does not exist\n@@ -130,12 +132,13 @@ DBImpl::DBImpl(const Options& options, const std::string& dbname)\n       log_(NULL),\n       tmp_batch_(new WriteBatch),\n       bg_compaction_scheduled_(false),\n-      manual_compaction_(NULL) {\n+      manual_compaction_(NULL),\n+      consecutive_compaction_errors_(0) {\n   mem_->Ref();\n   has_imm_.Release_Store(NULL);\n \n   // Reserve ten files or so for other uses and give the rest to TableCache.\n-  const int table_cache_size = options.max_open_files - 10;\n+  const int table_cache_size = options.max_open_files - kNumNonTableCacheFiles;\n   table_cache_ = new TableCache(dbname_, &options_, table_cache_size);\n \n   versions_ = new VersionSet(dbname_, &options_, table_cache_,\n@@ -310,16 +313,24 @@ Status DBImpl::Recover(VersionEdit* edit) {\n     if (!s.ok()) {\n       return s;\n     }\n+    std::set<uint64_t> expected;\n+    versions_->AddLiveFiles(&expected);\n     uint64_t number;\n     FileType type;\n     std::vector<uint64_t> logs;\n     for (size_t i = 0; i < filenames.size(); i++) {\n-      if (ParseFileName(filenames[i], &number, &type)\n-          && type == kLogFile\n-          && ((number >= min_log) || (number == prev_log))) {\n-        logs.push_back(number);\n+      if (ParseFileName(filenames[i], &number, &type)) {\n+        expected.erase(number);\n+        if (type == kLogFile && ((number >= min_log) || (number == prev_log)))\n+          logs.push_back(number);\n       }\n     }\n+    if (!expected.empty()) {\n+      char buf[50];\n+      snprintf(buf, sizeof(buf), \"%d missing files; e.g.\",\n+               static_cast<int>(expected.size()));\n+      return Status::Corruption(buf, TableFileName(dbname_, *(expected.begin())));\n+    }\n \n     // Recover in the order in which the logs were generated\n     std::sort(logs.begin(), logs.end());\n@@ -611,6 +622,7 @@ void DBImpl::BackgroundCall() {\n     Status s = BackgroundCompaction();\n     if (s.ok()) {\n       // Success\n+      consecutive_compaction_errors_ = 0;\n     } else if (shutting_down_.Acquire_Load()) {\n       // Error most likely due to shutdown; do not wait\n     } else {\n@@ -622,7 +634,12 @@ void DBImpl::BackgroundCall() {\n       Log(options_.info_log, \"Waiting after background compaction error: %s\",\n           s.ToString().c_str());\n       mutex_.Unlock();\n-      env_->SleepForMicroseconds(1000000);\n+      ++consecutive_compaction_errors_;\n+      int seconds_to_sleep = 1;\n+      for (int i = 0; i < 3 && i < consecutive_compaction_errors_ - 1; ++i) {\n+        seconds_to_sleep *= 2;\n+      }\n+      env_->SleepForMicroseconds(seconds_to_sleep * 1000000);\n       mutex_.Lock();\n     }\n   }\n@@ -1268,10 +1285,11 @@ Status DBImpl::MakeRoomForWrite(bool force) {\n     } else if (imm_ != NULL) {\n       // We have filled up the current memtable, but the previous\n       // one is still being compacted, so we wait.\n+      Log(options_.info_log, \"Current memtable full; waiting...\\n\");\n       bg_cv_.Wait();\n     } else if (versions_->NumLevelFiles(0) >= config::kL0_StopWritesTrigger) {\n       // There are too many level-0 files.\n-      Log(options_.info_log, \"waiting...\\n\");\n+      Log(options_.info_log, \"Too many L0 files; waiting...\\n\");\n       bg_cv_.Wait();\n     } else {\n       // Attempt to switch to a new memtable and trigger compaction of old"
      },
      {
        "sha": "3c8d711ae06de2b41dc6d9a3717808947663c09b",
        "filename": "src/leveldb/db/db_impl.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/db/db_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/db/db_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/db_impl.h?ref=5e50e8263f6b1295b3353d48c56eea6636c01a9c",
        "patch": "@@ -163,6 +163,7 @@ class DBImpl : public DB {\n \n   // Have we encountered a background error in paranoid mode?\n   Status bg_error_;\n+  int consecutive_compaction_errors_;\n \n   // Per level compaction stats.  stats_[level] stores the stats for\n   // compactions that produced data for the specified \"level\"."
      },
      {
        "sha": "49aae04dbd3bac4b8d057fd490751f71a2d5b294",
        "filename": "src/leveldb/db/db_test.cc",
        "status": "modified",
        "additions": 75,
        "deletions": 10,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/db/db_test.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/db/db_test.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/db_test.cc?ref=5e50e8263f6b1295b3353d48c56eea6636c01a9c",
        "patch": "@@ -33,8 +33,11 @@ class AtomicCounter {\n  public:\n   AtomicCounter() : count_(0) { }\n   void Increment() {\n+    IncrementBy(1);\n+  }\n+  void IncrementBy(int count) {\n     MutexLock l(&mu_);\n-    count_++;\n+    count_ += count;\n   }\n   int Read() {\n     MutexLock l(&mu_);\n@@ -45,6 +48,10 @@ class AtomicCounter {\n     count_ = 0;\n   }\n };\n+\n+void DelayMilliseconds(int millis) {\n+  Env::Default()->SleepForMicroseconds(millis * 1000);\n+}\n }\n \n // Special Env used to delay background operations\n@@ -69,6 +76,7 @@ class SpecialEnv : public EnvWrapper {\n   AtomicCounter random_read_counter_;\n \n   AtomicCounter sleep_counter_;\n+  AtomicCounter sleep_time_counter_;\n \n   explicit SpecialEnv(Env* base) : EnvWrapper(base) {\n     delay_sstable_sync_.Release_Store(NULL);\n@@ -103,7 +111,7 @@ class SpecialEnv : public EnvWrapper {\n       Status Flush() { return base_->Flush(); }\n       Status Sync() {\n         while (env_->delay_sstable_sync_.Acquire_Load() != NULL) {\n-          env_->SleepForMicroseconds(100000);\n+          DelayMilliseconds(100);\n         }\n         return base_->Sync();\n       }\n@@ -174,8 +182,9 @@ class SpecialEnv : public EnvWrapper {\n \n   virtual void SleepForMicroseconds(int micros) {\n     sleep_counter_.Increment();\n-    target()->SleepForMicroseconds(micros);\n+    sleep_time_counter_.IncrementBy(micros);\n   }\n+\n };\n \n class DBTest {\n@@ -461,6 +470,20 @@ class DBTest {\n     }\n     return result;\n   }\n+\n+  bool DeleteAnSSTFile() {\n+    std::vector<std::string> filenames;\n+    ASSERT_OK(env_->GetChildren(dbname_, &filenames));\n+    uint64_t number;\n+    FileType type;\n+    for (size_t i = 0; i < filenames.size(); i++) {\n+      if (ParseFileName(filenames[i], &number, &type) && type == kTableFile) {\n+        ASSERT_OK(env_->DeleteFile(TableFileName(dbname_, number)));\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n };\n \n TEST(DBTest, Empty) {\n@@ -611,7 +634,7 @@ TEST(DBTest, GetEncountersEmptyLevel) {\n     }\n \n     // Step 4: Wait for compaction to finish\n-    env_->SleepForMicroseconds(1000000);\n+    DelayMilliseconds(1000);\n \n     ASSERT_EQ(NumTableFilesAtLevel(0), 0);\n   } while (ChangeOptions());\n@@ -1295,7 +1318,7 @@ TEST(DBTest, L0_CompactionBug_Issue44_a) {\n   Reopen();\n   Reopen();\n   ASSERT_EQ(\"(a->v)\", Contents());\n-  env_->SleepForMicroseconds(1000000);  // Wait for compaction to finish\n+  DelayMilliseconds(1000);  // Wait for compaction to finish\n   ASSERT_EQ(\"(a->v)\", Contents());\n }\n \n@@ -1311,7 +1334,7 @@ TEST(DBTest, L0_CompactionBug_Issue44_b) {\n   Put(\"\",\"\");\n   Reopen();\n   Put(\"\",\"\");\n-  env_->SleepForMicroseconds(1000000);  // Wait for compaction to finish\n+  DelayMilliseconds(1000);  // Wait for compaction to finish\n   Reopen();\n   Put(\"d\",\"dv\");\n   Reopen();\n@@ -1321,7 +1344,7 @@ TEST(DBTest, L0_CompactionBug_Issue44_b) {\n   Delete(\"b\");\n   Reopen();\n   ASSERT_EQ(\"(->)(c->cv)\", Contents());\n-  env_->SleepForMicroseconds(1000000);  // Wait for compaction to finish\n+  DelayMilliseconds(1000);  // Wait for compaction to finish\n   ASSERT_EQ(\"(->)(c->cv)\", Contents());\n }\n \n@@ -1506,6 +1529,30 @@ TEST(DBTest, NoSpace) {\n   ASSERT_GE(env_->sleep_counter_.Read(), 5);\n }\n \n+TEST(DBTest, ExponentialBackoff) {\n+  Options options = CurrentOptions();\n+  options.env = env_;\n+  Reopen(&options);\n+\n+  ASSERT_OK(Put(\"foo\", \"v1\"));\n+  ASSERT_EQ(\"v1\", Get(\"foo\"));\n+  Compact(\"a\", \"z\");\n+  env_->non_writable_.Release_Store(env_);  // Force errors for new files\n+  env_->sleep_counter_.Reset();\n+  env_->sleep_time_counter_.Reset();\n+  for (int i = 0; i < 5; i++) {\n+    dbfull()->TEST_CompactRange(2, NULL, NULL);\n+  }\n+  env_->non_writable_.Release_Store(NULL);\n+\n+  // Wait for compaction to finish\n+  DelayMilliseconds(1000);\n+\n+  ASSERT_GE(env_->sleep_counter_.Read(), 5);\n+  ASSERT_LT(env_->sleep_counter_.Read(), 10);\n+  ASSERT_GE(env_->sleep_time_counter_.Read(), 10e6);\n+}\n+\n TEST(DBTest, NonWritableFileSystem) {\n   Options options = CurrentOptions();\n   options.write_buffer_size = 1000;\n@@ -1519,7 +1566,7 @@ TEST(DBTest, NonWritableFileSystem) {\n     fprintf(stderr, \"iter %d; errors %d\\n\", i, errors);\n     if (!Put(\"foo\", big).ok()) {\n       errors++;\n-      env_->SleepForMicroseconds(100000);\n+      DelayMilliseconds(100);\n     }\n   }\n   ASSERT_GT(errors, 0);\n@@ -1567,6 +1614,24 @@ TEST(DBTest, ManifestWriteError) {\n   }\n }\n \n+TEST(DBTest, MissingSSTFile) {\n+  ASSERT_OK(Put(\"foo\", \"bar\"));\n+  ASSERT_EQ(\"bar\", Get(\"foo\"));\n+\n+  // Dump the memtable to disk.\n+  dbfull()->TEST_CompactMemTable();\n+  ASSERT_EQ(\"bar\", Get(\"foo\"));\n+\n+  Close();\n+  ASSERT_TRUE(DeleteAnSSTFile());\n+  Options options = CurrentOptions();\n+  options.paranoid_checks = true;\n+  Status s = TryReopen(&options);\n+  ASSERT_TRUE(!s.ok());\n+  ASSERT_TRUE(s.ToString().find(\"issing\") != std::string::npos)\n+      << s.ToString();\n+}\n+\n TEST(DBTest, FilesDeletedAfterCompaction) {\n   ASSERT_OK(Put(\"foo\", \"v2\"));\n   Compact(\"a\", \"z\");\n@@ -1711,13 +1776,13 @@ TEST(DBTest, MultiThreaded) {\n     }\n \n     // Let them run for a while\n-    env_->SleepForMicroseconds(kTestSeconds * 1000000);\n+    DelayMilliseconds(kTestSeconds * 1000);\n \n     // Stop the threads and wait for them to finish\n     mt.stop.Release_Store(&mt);\n     for (int id = 0; id < kNumThreads; id++) {\n       while (mt.thread_done[id].Acquire_Load() == NULL) {\n-        env_->SleepForMicroseconds(100000);\n+        DelayMilliseconds(100);\n       }\n     }\n   } while (ChangeOptions());"
      },
      {
        "sha": "20a7ca44626050c01b7bde718581c663d38f42a9",
        "filename": "src/leveldb/db/dbformat.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/db/dbformat.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/db/dbformat.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/dbformat.cc?ref=5e50e8263f6b1295b3353d48c56eea6636c01a9c",
        "patch": "@@ -26,7 +26,7 @@ std::string ParsedInternalKey::DebugString() const {\n            (unsigned long long) sequence,\n            int(type));\n   std::string result = \"'\";\n-  result += user_key.ToString();\n+  result += EscapeString(user_key.ToString());\n   result += buf;\n   return result;\n }"
      },
      {
        "sha": "5a26da4728f6a0934f12d37d84e845ef6a00e8af",
        "filename": "src/leveldb/db/filename_test.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/db/filename_test.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/db/filename_test.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/filename_test.cc?ref=5e50e8263f6b1295b3353d48c56eea6636c01a9c",
        "patch": "@@ -70,7 +70,7 @@ TEST(FileNameTest, Parse) {\n   for (int i = 0; i < sizeof(errors) / sizeof(errors[0]); i++) {\n     std::string f = errors[i];\n     ASSERT_TRUE(!ParseFileName(f, &number, &type)) << f;\n-  };\n+  }\n }\n \n TEST(FileNameTest, Construction) {"
      },
      {
        "sha": "4fd1ddef21011ffb379019b65ce64464ad8ca54c",
        "filename": "src/leveldb/db/version_set.cc",
        "status": "modified",
        "additions": 13,
        "deletions": 8,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/db/version_set.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/db/version_set.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/version_set.cc?ref=5e50e8263f6b1295b3353d48c56eea6636c01a9c",
        "patch": "@@ -1331,14 +1331,19 @@ Compaction* VersionSet::CompactRange(\n   }\n \n   // Avoid compacting too much in one shot in case the range is large.\n-  const uint64_t limit = MaxFileSizeForLevel(level);\n-  uint64_t total = 0;\n-  for (size_t i = 0; i < inputs.size(); i++) {\n-    uint64_t s = inputs[i]->file_size;\n-    total += s;\n-    if (total >= limit) {\n-      inputs.resize(i + 1);\n-      break;\n+  // But we cannot do this for level-0 since level-0 files can overlap\n+  // and we must not pick one file and drop another older file if the\n+  // two files overlap.\n+  if (level > 0) {\n+    const uint64_t limit = MaxFileSizeForLevel(level);\n+    uint64_t total = 0;\n+    for (size_t i = 0; i < inputs.size(); i++) {\n+      uint64_t s = inputs[i]->file_size;\n+      total += s;\n+      if (total >= limit) {\n+        inputs.resize(i + 1);\n+        break;\n+      }\n     }\n   }\n "
      },
      {
        "sha": "da8b11a8c05b054ef231ba34d88ef51ec1e55eb0",
        "filename": "src/leveldb/include/leveldb/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/include/leveldb/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/include/leveldb/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/include/leveldb/db.h?ref=5e50e8263f6b1295b3353d48c56eea6636c01a9c",
        "patch": "@@ -14,7 +14,7 @@ namespace leveldb {\n \n // Update Makefile if you change these\n static const int kMajorVersion = 1;\n-static const int kMinorVersion = 9;\n+static const int kMinorVersion = 12;\n \n struct Options;\n struct ReadOptions;"
      },
      {
        "sha": "1b1cf8bb28da5cf6a117ffdc4cb6527ef1585d6b",
        "filename": "src/leveldb/issues/issue178_test.cc",
        "status": "added",
        "additions": 92,
        "deletions": 0,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/issues/issue178_test.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/issues/issue178_test.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/issues/issue178_test.cc?ref=5e50e8263f6b1295b3353d48c56eea6636c01a9c",
        "patch": "@@ -0,0 +1,92 @@\n+// Copyright (c) 2013 The LevelDB Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style license that can be\n+// found in the LICENSE file. See the AUTHORS file for names of contributors.\n+\n+// Test for issue 178: a manual compaction causes deleted data to reappear.\n+#include <iostream>\n+#include <sstream>\n+#include <cstdlib>\n+\n+#include \"leveldb/db.h\"\n+#include \"leveldb/write_batch.h\"\n+#include \"util/testharness.h\"\n+\n+namespace {\n+\n+const int kNumKeys = 1100000;\n+\n+std::string Key1(int i) {\n+  char buf[100];\n+  snprintf(buf, sizeof(buf), \"my_key_%d\", i);\n+  return buf;\n+}\n+\n+std::string Key2(int i) {\n+  return Key1(i) + \"_xxx\";\n+}\n+\n+class Issue178 { };\n+\n+TEST(Issue178, Test) {\n+  // Get rid of any state from an old run.\n+  std::string dbpath = leveldb::test::TmpDir() + \"/leveldb_cbug_test\";\n+  DestroyDB(dbpath, leveldb::Options());\n+\n+  // Open database.  Disable compression since it affects the creation\n+  // of layers and the code below is trying to test against a very\n+  // specific scenario.\n+  leveldb::DB* db;\n+  leveldb::Options db_options;\n+  db_options.create_if_missing = true;\n+  db_options.compression = leveldb::kNoCompression;\n+  ASSERT_OK(leveldb::DB::Open(db_options, dbpath, &db));\n+\n+  // create first key range\n+  leveldb::WriteBatch batch;\n+  for (size_t i = 0; i < kNumKeys; i++) {\n+    batch.Put(Key1(i), \"value for range 1 key\");\n+  }\n+  ASSERT_OK(db->Write(leveldb::WriteOptions(), &batch));\n+\n+  // create second key range\n+  batch.Clear();\n+  for (size_t i = 0; i < kNumKeys; i++) {\n+    batch.Put(Key2(i), \"value for range 2 key\");\n+  }\n+  ASSERT_OK(db->Write(leveldb::WriteOptions(), &batch));\n+\n+  // delete second key range\n+  batch.Clear();\n+  for (size_t i = 0; i < kNumKeys; i++) {\n+    batch.Delete(Key2(i));\n+  }\n+  ASSERT_OK(db->Write(leveldb::WriteOptions(), &batch));\n+\n+  // compact database\n+  std::string start_key = Key1(0);\n+  std::string end_key = Key1(kNumKeys - 1);\n+  leveldb::Slice least(start_key.data(), start_key.size());\n+  leveldb::Slice greatest(end_key.data(), end_key.size());\n+\n+  // commenting out the line below causes the example to work correctly\n+  db->CompactRange(&least, &greatest);\n+\n+  // count the keys\n+  leveldb::Iterator* iter = db->NewIterator(leveldb::ReadOptions());\n+  size_t num_keys = 0;\n+  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {\n+    num_keys++;\n+  }\n+  delete iter;\n+  ASSERT_EQ(kNumKeys, num_keys) << \"Bad number of keys\";\n+\n+  // close database\n+  delete db;\n+  DestroyDB(dbpath, leveldb::Options());\n+}\n+\n+}  // anonymous namespace\n+\n+int main(int argc, char** argv) {\n+  return leveldb::test::RunAllTests();\n+}"
      },
      {
        "sha": "e667db40d0d5046da2d68d45f1e83f8529cefa4e",
        "filename": "src/leveldb/port/port.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/port/port.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/port/port.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/port/port.h?ref=5e50e8263f6b1295b3353d48c56eea6636c01a9c",
        "patch": "@@ -14,8 +14,6 @@\n #  include \"port/port_posix.h\"\n #elif defined(LEVELDB_PLATFORM_CHROMIUM)\n #  include \"port/port_chromium.h\"\n-#elif defined(LEVELDB_PLATFORM_WINDOWS)\n-#  include \"port/port_win.h\"\n #endif\n \n #endif  // STORAGE_LEVELDB_PORT_PORT_H_"
      },
      {
        "sha": "79ea9d9ee5fe8af28eb07f48b9534c2979fe842a",
        "filename": "src/leveldb/table/block.cc",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/table/block.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/table/block.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/table/block.cc?ref=5e50e8263f6b1295b3353d48c56eea6636c01a9c",
        "patch": "@@ -16,7 +16,7 @@\n namespace leveldb {\n \n inline uint32_t Block::NumRestarts() const {\n-  assert(size_ >= 2*sizeof(uint32_t));\n+  assert(size_ >= sizeof(uint32_t));\n   return DecodeFixed32(data_ + size_ - sizeof(uint32_t));\n }\n \n@@ -27,11 +27,12 @@ Block::Block(const BlockContents& contents)\n   if (size_ < sizeof(uint32_t)) {\n     size_ = 0;  // Error marker\n   } else {\n-    restart_offset_ = size_ - (1 + NumRestarts()) * sizeof(uint32_t);\n-    if (restart_offset_ > size_ - sizeof(uint32_t)) {\n-      // The size is too small for NumRestarts() and therefore\n-      // restart_offset_ wrapped around.\n+    size_t max_restarts_allowed = (size_-sizeof(uint32_t)) / sizeof(uint32_t);\n+    if (NumRestarts() > max_restarts_allowed) {\n+      // The size is too small for NumRestarts()\n       size_ = 0;\n+    } else {\n+      restart_offset_ = size_ - (1 + NumRestarts()) * sizeof(uint32_t);\n     }\n   }\n }\n@@ -253,7 +254,7 @@ class Block::Iter : public Iterator {\n };\n \n Iterator* Block::NewIterator(const Comparator* cmp) {\n-  if (size_ < 2*sizeof(uint32_t)) {\n+  if (size_ < sizeof(uint32_t)) {\n     return NewErrorIterator(Status::Corruption(\"bad block contents\"));\n   }\n   const uint32_t num_restarts = NumRestarts();"
      },
      {
        "sha": "71c1756e5f440c38c3e712e0359886fe22d6d5a0",
        "filename": "src/leveldb/table/table.cc",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/table/table.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/table/table.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/table/table.cc?ref=5e50e8263f6b1295b3353d48c56eea6636c01a9c",
        "patch": "@@ -228,7 +228,6 @@ Status Table::InternalGet(const ReadOptions& options, const Slice& k,\n         !filter->KeyMayMatch(handle.offset(), k)) {\n       // Not found\n     } else {\n-      Slice handle = iiter->value();\n       Iterator* block_iter = BlockReader(this, options, iiter->value());\n       block_iter->Seek(k);\n       if (block_iter->Valid()) {"
      },
      {
        "sha": "c723bf84cf5f55fae9b56ab324ebfdc83ba9be52",
        "filename": "src/leveldb/table/table_test.cc",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/table/table_test.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/table/table_test.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/table/table_test.cc?ref=5e50e8263f6b1295b3353d48c56eea6636c01a9c",
        "patch": "@@ -644,6 +644,36 @@ class Harness {\n   Constructor* constructor_;\n };\n \n+// Test empty table/block.\n+TEST(Harness, Empty) {\n+  for (int i = 0; i < kNumTestArgs; i++) {\n+    Init(kTestArgList[i]);\n+    Random rnd(test::RandomSeed() + 1);\n+    Test(&rnd);\n+  }\n+}\n+\n+// Special test for a block with no restart entries.  The C++ leveldb\n+// code never generates such blocks, but the Java version of leveldb\n+// seems to.\n+TEST(Harness, ZeroRestartPointsInBlock) {\n+  char data[sizeof(uint32_t)];\n+  memset(data, 0, sizeof(data));\n+  BlockContents contents;\n+  contents.data = Slice(data, sizeof(data));\n+  contents.cachable = false;\n+  contents.heap_allocated = false;\n+  Block block(contents);\n+  Iterator* iter = block.NewIterator(BytewiseComparator());\n+  iter->SeekToFirst();\n+  ASSERT_TRUE(!iter->Valid());\n+  iter->SeekToLast();\n+  ASSERT_TRUE(!iter->Valid());\n+  iter->Seek(\"foo\");\n+  ASSERT_TRUE(!iter->Valid());\n+  delete iter;\n+}\n+\n // Test the empty key\n TEST(Harness, SimpleEmptyKey) {\n   for (int i = 0; i < kNumTestArgs; i++) {"
      },
      {
        "sha": "8b197bc02a98e639dc72a58bd7de59603ab77cbc",
        "filename": "src/leveldb/util/cache.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/util/cache.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/util/cache.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/cache.cc?ref=5e50e8263f6b1295b3353d48c56eea6636c01a9c",
        "patch": "@@ -116,7 +116,6 @@ class HandleTable {\n       LRUHandle* h = list_[i];\n       while (h != NULL) {\n         LRUHandle* next = h->next_hash;\n-        Slice key = h->key();\n         uint32_t hash = h->hash;\n         LRUHandle** ptr = &new_list[hash & (new_length - 1)];\n         h->next_hash = *ptr;\n@@ -160,7 +159,6 @@ class LRUCache {\n   // mutex_ protects the following state.\n   port::Mutex mutex_;\n   size_t usage_;\n-  uint64_t last_id_;\n \n   // Dummy head of LRU list.\n   // lru.prev is newest entry, lru.next is oldest entry.\n@@ -170,8 +168,7 @@ class LRUCache {\n };\n \n LRUCache::LRUCache()\n-    : usage_(0),\n-      last_id_(0) {\n+    : usage_(0) {\n   // Make empty circular linked list\n   lru_.next = &lru_;\n   lru_.prev = &lru_;"
      },
      {
        "sha": "fb5726e33521d01270b481b93d9c5490c6f0b53f",
        "filename": "src/leveldb/util/coding_test.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/util/coding_test.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/util/coding_test.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/coding_test.cc?ref=5e50e8263f6b1295b3353d48c56eea6636c01a9c",
        "patch": "@@ -109,7 +109,7 @@ TEST(Coding, Varint64) {\n     values.push_back(power);\n     values.push_back(power-1);\n     values.push_back(power+1);\n-  };\n+  }\n \n   std::string s;\n   for (int i = 0; i < values.size(); i++) {"
      },
      {
        "sha": "a3f197da8cddff7e0af9a39a602bc437fcade2bd",
        "filename": "src/leveldb/util/env_posix.cc",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/util/env_posix.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/util/env_posix.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/env_posix.cc?ref=5e50e8263f6b1295b3353d48c56eea6636c01a9c",
        "patch": "@@ -1,7 +1,6 @@\n // Copyright (c) 2011 The LevelDB Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style license that can be\n // found in the LICENSE file. See the AUTHORS file for names of contributors.\n-#if !defined(LEVELDB_PLATFORM_WINDOWS)\n \n #include <deque>\n #include <set>\n@@ -386,7 +385,7 @@ class PosixEnv : public Env {\n   PosixEnv();\n   virtual ~PosixEnv() {\n     fprintf(stderr, \"Destroying Env::Default()\\n\");\n-    exit(1);\n+    abort();\n   }\n \n   virtual Status NewSequentialFile(const std::string& fname,\n@@ -467,23 +466,23 @@ class PosixEnv : public Env {\n       result = IOError(fname, errno);\n     }\n     return result;\n-  };\n+  }\n \n   virtual Status CreateDir(const std::string& name) {\n     Status result;\n     if (mkdir(name.c_str(), 0755) != 0) {\n       result = IOError(name, errno);\n     }\n     return result;\n-  };\n+  }\n \n   virtual Status DeleteDir(const std::string& name) {\n     Status result;\n     if (rmdir(name.c_str()) != 0) {\n       result = IOError(name, errno);\n     }\n     return result;\n-  };\n+  }\n \n   virtual Status GetFileSize(const std::string& fname, uint64_t* size) {\n     Status s;\n@@ -589,7 +588,7 @@ class PosixEnv : public Env {\n   void PthreadCall(const char* label, int result) {\n     if (result != 0) {\n       fprintf(stderr, \"pthread %s: %s\\n\", label, strerror(result));\n-      exit(1);\n+      abort();\n     }\n   }\n \n@@ -697,5 +696,3 @@ Env* Env::Default() {\n }\n \n }  // namespace leveldb\n-\n-#endif"
      },
      {
        "sha": "07cf022060d41ea2139a438886d268a92cb586af",
        "filename": "src/leveldb/util/hash.cc",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/util/hash.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/util/hash.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/hash.cc?ref=5e50e8263f6b1295b3353d48c56eea6636c01a9c",
        "patch": "@@ -6,6 +6,13 @@\n #include \"util/coding.h\"\n #include \"util/hash.h\"\n \n+// The FALLTHROUGH_INTENDED macro can be used to annotate implicit fall-through\n+// between switch labels. The real definition should be provided externally.\n+// This one is a fallback version for unsupported compilers.\n+#ifndef FALLTHROUGH_INTENDED\n+#define FALLTHROUGH_INTENDED do { } while (0)\n+#endif\n+\n namespace leveldb {\n \n uint32_t Hash(const char* data, size_t n, uint32_t seed) {\n@@ -28,10 +35,10 @@ uint32_t Hash(const char* data, size_t n, uint32_t seed) {\n   switch (limit - data) {\n     case 3:\n       h += data[2] << 16;\n-      // fall through\n+      FALLTHROUGH_INTENDED;\n     case 2:\n       h += data[1] << 8;\n-      // fall through\n+      FALLTHROUGH_INTENDED;\n     case 1:\n       h += data[0];\n       h *= m;"
      },
      {
        "sha": "9741b1afad930844f2ff047d244a4863e8c01613",
        "filename": "src/leveldb/util/posix_logger.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/util/posix_logger.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e50e8263f6b1295b3353d48c56eea6636c01a9c/src/leveldb/util/posix_logger.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/posix_logger.h?ref=5e50e8263f6b1295b3353d48c56eea6636c01a9c",
        "patch": "@@ -3,7 +3,7 @@\n // found in the LICENSE file. See the AUTHORS file for names of contributors.\n //\n // Logger implementation that can be shared by all environments\n-// where enough Posix functionality is available.\n+// where enough posix functionality is available.\n \n #ifndef STORAGE_LEVELDB_UTIL_POSIX_LOGGER_H_\n #define STORAGE_LEVELDB_UTIL_POSIX_LOGGER_H_"
      }
    ]
  }
]