promag,2016-03-27T21:52:50Z,"I was planning to submit a pull request to change this kind of _notifications_. The current solution is not very elegant and doesn't scale. The command line arguments should be clean.\n\nSo if you don't mind I'll try to explain here the idea using this example:\n\nUsage: `-notify ""mempool ! json ! zmqpub address=tcp://127.0.0.1:28332""`\n\nHere the notify argument creates one notification _pipeline",https://github.com/bitcoin/bitcoin/pull/7753#issuecomment-202152900,202152900,
dcousens,2016-03-27T23:34:55Z,concept ACK\n,https://github.com/bitcoin/bitcoin/pull/7753#issuecomment-202168895,202168895,
laanwj,2016-03-28T07:49:45Z,"@promag I'm all for making it more flexible, but what you're proposing sounds like the gstreamer syntax and that's IMO even harder to use than the current arguments. I've needed to do a few media pipelines in my PhD research but never managed to really master it.\n\nOur basic idea with the ZMQ notifications is that **one** notification system exists. From there on everything (e.g. forward to the n",https://github.com/bitcoin/bitcoin/pull/7753#issuecomment-202288790,202288790,
promag,2016-03-28T08:09:29Z,@laanwj yes gstreamer all over the comment. I'll move the discussion to a new issue.\n\nutACK.\n,https://github.com/bitcoin/bitcoin/pull/7753#issuecomment-202294474,202294474,
jonasschnelli,2016-03-28T18:31:21Z,"Awesome!\nNice work! I hope you have also plans to opensource the ncurses UI.\n\nSome ideas / conceptual questions:\n- How could a listener keep track of the overall mempool size without listening to a fresh start (listening from the beginning when the mempool was at a size of 0), also there is a risk of a delta in case you missed a notification in case you calculate the mempool overall size on th",https://github.com/bitcoin/bitcoin/pull/7753#issuecomment-202519306,202519306,
jonasschnelli,2016-03-28T18:34:37Z,Code Review utACK.\n,https://github.com/bitcoin/bitcoin/pull/7753#issuecomment-202521016,202521016,
promag,2016-03-28T19:14:27Z,> Adding the total mempool size in every mempool notification is probably to much?\n\n:+1: \n,https://github.com/bitcoin/bitcoin/pull/7753#issuecomment-202535950,202535950,
laanwj,2016-03-29T07:53:41Z,"> How could a listener keep track of the overall mempool size without listening to a fresh start (listening from the beginning when the mempool was at a size of 0), also there is a risk of a delta in case you missed a notification in case you calculate the mempool overall size on the ""listeners side"".\n\nWhat if you use the following sequence:\n- Start listening (queue up events)\n- Request `getra",https://github.com/bitcoin/bitcoin/pull/7753#issuecomment-202766457,202766457,
jonasschnelli,2016-03-29T13:03:10Z,Tested ACK 4e3039b41946ad7bbb1aff6b6df5b1e83348c942\nI also think the `addNotifier()`-refactor makes it much cleaner.\n,https://github.com/bitcoin/bitcoin/pull/7753#issuecomment-202882163,202882163,
paveljanik,2016-03-30T14:20:22Z,lightly tested ACK https://github.com/bitcoin/bitcoin/commit/4e3039b41946ad7bbb1aff6b6df5b1e83348c942\n,https://github.com/bitcoin/bitcoin/pull/7753#issuecomment-203454879,203454879,
laanwj,2016-04-06T13:38:01Z,"Ok added two commits:\n- The first adds a (currently, one to one) mapping between the mempool reasons from the mempool and those on the ZMQ interface.\n- The second is a slight refactoring to make all ZMQ publish notifiers register (and unregister) themselves for the events that they want to receive, instead of relying on the events being propagated manually though `CZMQNotificationInterface` @pro",https://github.com/bitcoin/bitcoin/pull/7753#issuecomment-206377099,206377099,
laanwj,2016-04-19T14:07:57Z,Rebased after #7762\n,https://github.com/bitcoin/bitcoin/pull/7753#issuecomment-211936563,211936563,
laanwj,2016-05-12T10:16:12Z,"Rebased, and changed the enums (both for the mempool and for the zmq protocol) to c++11 enums.\n",https://github.com/bitcoin/bitcoin/pull/7753#issuecomment-218716558,218716558,
paveljanik,2016-05-12T15:04:02Z,lightly tested ACK https://github.com/bitcoin/bitcoin/pull/7753/commits/1bbe3660ad9a375e2d2bb8c7fa8f38132774b656\n,https://github.com/bitcoin/bitcoin/pull/7753#issuecomment-218785796,218785796,
sipa,2016-05-25T16:20:57Z,Needs rebase.\n,https://github.com/bitcoin/bitcoin/pull/7753#issuecomment-221628798,221628798,
jonasschnelli,2016-06-10T09:15:32Z,Still needs rebase.\n,https://github.com/bitcoin/bitcoin/pull/7753#issuecomment-225132939,225132939,
jmcorgan,2016-08-19T01:50:52Z,ACK.  I have a rebased version of this branch at 'jmcorgan/2016_03_zmq_mempool_notifications'.\n,https://github.com/bitcoin/bitcoin/pull/7753#issuecomment-240906989,240906989,
jonasschnelli,2016-08-19T09:09:01Z,@jmcorgan feel free to open a PR of your rebases version and take over the lead.\n,https://github.com/bitcoin/bitcoin/pull/7753#issuecomment-240967788,240967788,
jmcorgan,2016-08-19T17:08:55Z,Continued in #8549 \n,https://github.com/bitcoin/bitcoin/pull/7753#issuecomment-241076298,241076298,
laanwj,2016-10-18T13:45:58Z,Closing in favor of #8549\n,https://github.com/bitcoin/bitcoin/pull/7753#issuecomment-254512164,254512164,
promag,2016-03-28T08:10:56Z,Feels a bit hacky.\n,https://github.com/bitcoin/bitcoin/pull/7753#discussion_r57553425,57553425,src/init.cpp
laanwj,2016-03-28T09:29:09Z,Better suggestions?\nAs I see ti there are two alternatives:\n- use the global mempool object (ugly)\n- pass the mempool in (slightly les ugly)\n\nAnother option would be to move the instantiation of the CZMQPublishMempoolNotifier(mempool) here. But I'd like as little zmq specific code in init. But it may be the least ugly option.\n,https://github.com/bitcoin/bitcoin/pull/7753#discussion_r57557447,57557447,src/init.cpp
jonasschnelli,2016-03-28T18:32:25Z,I think this implementation approach is reasonable and I also don't see a more elegant way to do this.\n,https://github.com/bitcoin/bitcoin/pull/7753#discussion_r57611094,57611094,src/init.cpp
promag,2016-03-28T19:12:27Z,Then I would rename `CreateWithArguments` to just `Create` and move the following from src/init.cpp to `Create`.\n\n```\nif (pzmqNotificationInterface) {\n    RegisterValidationInterface(pzmqNotificationInterface);\n}\n```\n\n**Edit**:\nBecause in your notifier you connect the signals so it also makes sense to connect the remaining signals here.\n,https://github.com/bitcoin/bitcoin/pull/7753#discussion_r57617043,57617043,src/init.cpp
laanwj,2016-04-05T09:33:41Z,"I agree, will move that line.\n",https://github.com/bitcoin/bitcoin/pull/7753#discussion_r58508662,58508662,src/init.cpp
sipa,2016-04-05T10:56:37Z,"This enum seems to be part of the ZMQ API, so we'll probably want some stability across versions. Things like MPR_EXPIRY and MPR_SIZELIMIT seem quite specific to the existing implementation.\n",https://github.com/bitcoin/bitcoin/pull/7753#discussion_r58518748,58518748,src/txmempool.h
sipa,2016-04-05T11:05:51Z,"I would prefer it if the value of the (internal) MemPoolRemovalReason did not leak into the ZMQ protocol, though that can be fixed later by introducing a new enum in the ZMQ definition.\n",https://github.com/bitcoin/bitcoin/pull/7753#discussion_r58519691,58519691,src/zmq/zmqpublishnotifier.cpp
laanwj,2016-04-05T11:07:32Z,"Yes, I'll add another enum here and add a mapping.\n",https://github.com/bitcoin/bitcoin/pull/7753#discussion_r58519885,58519885,src/zmq/zmqpublishnotifier.cpp
