[
  {
    "sha": "1f3bfa329f96b0e4564c410b539765909601ad1d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjNiZmEzMjlmOTZiMGU0NTY0YzQxMGI1Mzk3NjU5MDk2MDFhZDFk",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2013-08-26T02:16:19Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2013-08-26T02:16:19Z"
      },
      "message": "RPC: Remove 'getwork' deprecated mining protocol\n\nUse getblocktemplate instead.",
      "tree": {
        "sha": "8d94c09318633508eb7fa9317fac46613bdbdbd3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d94c09318633508eb7fa9317fac46613bdbdbd3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f3bfa329f96b0e4564c410b539765909601ad1d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f3bfa329f96b0e4564c410b539765909601ad1d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f3bfa329f96b0e4564c410b539765909601ad1d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f3bfa329f96b0e4564c410b539765909601ad1d/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "bb7d0fc12fcfbb2a91e39cb49f2a0873344dbae0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb7d0fc12fcfbb2a91e39cb49f2a0873344dbae0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb7d0fc12fcfbb2a91e39cb49f2a0873344dbae0"
      }
    ],
    "stats": {
      "total": 138,
      "additions": 7,
      "deletions": 131
    },
    "files": [
      {
        "sha": "cf6622e966880ca4745d175f4f452b76f0718307",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f3bfa329f96b0e4564c410b539765909601ad1d/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f3bfa329f96b0e4564c410b539765909601ad1d/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=1f3bfa329f96b0e4564c410b539765909601ad1d",
        "patch": "@@ -237,7 +237,6 @@ static const CRPCCommand vRPCCommands[] =\n     { \"listaddressgroupings\",   &listaddressgroupings,   false,     false },\n     { \"signmessage\",            &signmessage,            false,     false },\n     { \"verifymessage\",          &verifymessage,          false,     false },\n-    { \"getwork\",                &getwork,                true,      false },\n     { \"listaccounts\",           &listaccounts,           false,     false },\n     { \"settxfee\",               &settxfee,               false,     false },\n     { \"getblocktemplate\",       &getblocktemplate,       true,      false },\n@@ -900,7 +899,7 @@ void JSONRequest::parse(const Value& valRequest)\n     if (valMethod.type() != str_type)\n         throw JSONRPCError(RPC_INVALID_REQUEST, \"Method must be a string\");\n     strMethod = valMethod.get_str();\n-    if (strMethod != \"getwork\" && strMethod != \"getblocktemplate\")\n+    if (strMethod != \"getblocktemplate\")\n         printf(\"ThreadRPCServer method=%s\\n\", strMethod.c_str());\n \n     // Parse params"
      },
      {
        "sha": "7ac6949055d6f13a544f776faecb7c8add16e694",
        "filename": "src/bitcoinrpc.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f3bfa329f96b0e4564c410b539765909601ad1d/src/bitcoinrpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f3bfa329f96b0e4564c410b539765909601ad1d/src/bitcoinrpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.h?ref=1f3bfa329f96b0e4564c410b539765909601ad1d",
        "patch": "@@ -155,7 +155,6 @@ extern json_spirit::Value getgenerate(const json_spirit::Array& params, bool fHe\n extern json_spirit::Value setgenerate(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value gethashespersec(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getmininginfo(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getwork(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getblocktemplate(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value submitblock(const json_spirit::Array& params, bool fHelp);\n "
      },
      {
        "sha": "4d8754f115f7ee1ebab713e31c2316233448707a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f3bfa329f96b0e4564c410b539765909601ad1d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f3bfa329f96b0e4564c410b539765909601ad1d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1f3bfa329f96b0e4564c410b539765909601ad1d",
        "patch": "@@ -984,7 +984,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n     StartNode(threadGroup);\n \n-    // InitRPCMining is needed here so getwork/getblocktemplate in the GUI debug console works properly.\n+    // InitRPCMining is needed here so internal miner activation in the GUI debug console works properly.\n     InitRPCMining();\n     if (fServer)\n         StartRPCThreads();"
      },
      {
        "sha": "73dbfb64fcd1748d4e31dae4e13556559baa1102",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f3bfa329f96b0e4564c410b539765909601ad1d/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f3bfa329f96b0e4564c410b539765909601ad1d/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=1f3bfa329f96b0e4564c410b539765909601ad1d",
        "patch": "@@ -10,9 +10,6 @@\n \n \n \n-\n-\n-\n //////////////////////////////////////////////////////////////////////////////\n //\n // BitcoinMiner\n@@ -390,7 +387,7 @@ CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey)\n     return CreateNewBlock(scriptPubKey);\n }\n \n-void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce)\n+static void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce)\n {\n     // Update nExtraNonce\n     static uint256 hashPrevBlock;\n@@ -408,7 +405,7 @@ void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int&\n }\n \n \n-void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash1)\n+static void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash1)\n {\n     //\n     // Pre-build hash buffers\n@@ -454,7 +451,7 @@ void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash\n }\n \n \n-bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey)\n+static bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey)\n {\n     uint256 hash = pblock->GetHash();\n     uint256 hashTarget = CBigNum().SetCompact(pblock->nBits).getuint256();"
      },
      {
        "sha": "35cf23cdab05d9d6e44e985cd43d1f6dcd45a450",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f3bfa329f96b0e4564c410b539765909601ad1d/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f3bfa329f96b0e4564c410b539765909601ad1d/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=1f3bfa329f96b0e4564c410b539765909601ad1d",
        "patch": "@@ -13,12 +13,6 @@ void GenerateBitcoins(bool fGenerate, CWallet* pwallet);\n /** Generate a new block, without valid proof-of-work */\n CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn);\n CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey);\n-/** Modify the extranonce in a block */\n-void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n-/** Do mining precalculation */\n-void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash1);\n-/** Check mined block */\n-bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey);\n /** Base sha256 mining transform */\n void SHA256Transform(void* pstate, void* pinput, const void* pinit);\n "
      },
      {
        "sha": "312509c7b52a871992c5f31a0ba14daab2c8f1bf",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 115,
        "changes": 117,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f3bfa329f96b0e4564c410b539765909601ad1d/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f3bfa329f96b0e4564c410b539765909601ad1d/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=1f3bfa329f96b0e4564c410b539765909601ad1d",
        "patch": "@@ -12,13 +12,13 @@\n using namespace json_spirit;\n using namespace std;\n \n-// Key used by getwork/getblocktemplate miners.\n+// Key used by internal miner.\n // Allocated in InitRPCMining, free'd in ShutdownRPCMining\n static CReserveKey* pMiningKey = NULL;\n \n void InitRPCMining()\n {\n-    // getwork/getblocktemplate mining rewards paid here:\n+    // internal miner rewards paid here:\n     pMiningKey = new CReserveKey(pwalletMain);\n }\n \n@@ -99,119 +99,6 @@ Value getmininginfo(const Array& params, bool fHelp)\n }\n \n \n-Value getwork(const Array& params, bool fHelp)\n-{\n-    if (fHelp || params.size() > 1)\n-        throw runtime_error(\n-            \"getwork [data]\\n\"\n-            \"If [data] is not specified, returns formatted hash data to work on:\\n\"\n-            \"  \\\"midstate\\\" : precomputed hash state after hashing the first half of the data (DEPRECATED)\\n\" // deprecated\n-            \"  \\\"data\\\" : block data\\n\"\n-            \"  \\\"hash1\\\" : formatted hash buffer for second hash (DEPRECATED)\\n\" // deprecated\n-            \"  \\\"target\\\" : little endian hash target\\n\"\n-            \"If [data] is specified, tries to solve the block and returns true if it was successful.\");\n-\n-    if (vNodes.empty())\n-        throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, \"Bitcoin is not connected!\");\n-\n-    if (IsInitialBlockDownload())\n-        throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, \"Bitcoin is downloading blocks...\");\n-\n-    typedef map<uint256, pair<CBlock*, CScript> > mapNewBlock_t;\n-    static mapNewBlock_t mapNewBlock;    // FIXME: thread safety\n-    static vector<CBlockTemplate*> vNewBlockTemplate;\n-\n-    if (params.size() == 0)\n-    {\n-        // Update block\n-        static unsigned int nTransactionsUpdatedLast;\n-        static CBlockIndex* pindexPrev;\n-        static int64 nStart;\n-        static CBlockTemplate* pblocktemplate;\n-        if (pindexPrev != pindexBest ||\n-            (nTransactionsUpdated != nTransactionsUpdatedLast && GetTime() - nStart > 60))\n-        {\n-            if (pindexPrev != pindexBest)\n-            {\n-                // Deallocate old blocks since they're obsolete now\n-                mapNewBlock.clear();\n-                BOOST_FOREACH(CBlockTemplate* pblocktemplate, vNewBlockTemplate)\n-                    delete pblocktemplate;\n-                vNewBlockTemplate.clear();\n-            }\n-\n-            // Clear pindexPrev so future getworks make a new block, despite any failures from here on\n-            pindexPrev = NULL;\n-\n-            // Store the pindexBest used before CreateNewBlock, to avoid races\n-            nTransactionsUpdatedLast = nTransactionsUpdated;\n-            CBlockIndex* pindexPrevNew = pindexBest;\n-            nStart = GetTime();\n-\n-            // Create new block\n-            pblocktemplate = CreateNewBlockWithKey(*pMiningKey);\n-            if (!pblocktemplate)\n-                throw JSONRPCError(RPC_OUT_OF_MEMORY, \"Out of memory\");\n-            vNewBlockTemplate.push_back(pblocktemplate);\n-\n-            // Need to update only after we know CreateNewBlock succeeded\n-            pindexPrev = pindexPrevNew;\n-        }\n-        CBlock* pblock = &pblocktemplate->block; // pointer for convenience\n-\n-        // Update nTime\n-        UpdateTime(*pblock, pindexPrev);\n-        pblock->nNonce = 0;\n-\n-        // Update nExtraNonce\n-        static unsigned int nExtraNonce = 0;\n-        IncrementExtraNonce(pblock, pindexPrev, nExtraNonce);\n-\n-        // Save\n-        mapNewBlock[pblock->hashMerkleRoot] = make_pair(pblock, pblock->vtx[0].vin[0].scriptSig);\n-\n-        // Pre-build hash buffers\n-        char pmidstate[32];\n-        char pdata[128];\n-        char phash1[64];\n-        FormatHashBuffers(pblock, pmidstate, pdata, phash1);\n-\n-        uint256 hashTarget = CBigNum().SetCompact(pblock->nBits).getuint256();\n-\n-        Object result;\n-        result.push_back(Pair(\"midstate\", HexStr(BEGIN(pmidstate), END(pmidstate)))); // deprecated\n-        result.push_back(Pair(\"data\",     HexStr(BEGIN(pdata), END(pdata))));\n-        result.push_back(Pair(\"hash1\",    HexStr(BEGIN(phash1), END(phash1)))); // deprecated\n-        result.push_back(Pair(\"target\",   HexStr(BEGIN(hashTarget), END(hashTarget))));\n-        return result;\n-    }\n-    else\n-    {\n-        // Parse parameters\n-        vector<unsigned char> vchData = ParseHex(params[0].get_str());\n-        if (vchData.size() != 128)\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter\");\n-        CBlock* pdata = (CBlock*)&vchData[0];\n-\n-        // Byte reverse\n-        for (int i = 0; i < 128/4; i++)\n-            ((unsigned int*)pdata)[i] = ByteReverse(((unsigned int*)pdata)[i]);\n-\n-        // Get saved block\n-        if (!mapNewBlock.count(pdata->hashMerkleRoot))\n-            return false;\n-        CBlock* pblock = mapNewBlock[pdata->hashMerkleRoot].first;\n-\n-        pblock->nTime = pdata->nTime;\n-        pblock->nNonce = pdata->nNonce;\n-        pblock->vtx[0].vin[0].scriptSig = mapNewBlock[pdata->hashMerkleRoot].second;\n-        pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n-\n-        return CheckWork(pblock, *pwalletMain, *pMiningKey);\n-    }\n-}\n-\n-\n Value getblocktemplate(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)"
      }
    ]
  }
]