[
  {
    "sha": "e2d84e5cbb95dbbb99ef26547d670871b521f9ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMmQ4NGU1Y2JiOTVkYmJiOTllZjI2NTQ3ZDY3MDg3MWI1MjFmOWFj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-21T16:27:46Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-21T16:27:46Z"
      },
      "message": "[wallet] Fix wallet memory leaks",
      "tree": {
        "sha": "9ab3fb79f2f9e36b59059893540855c30f05ec0c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ab3fb79f2f9e36b59059893540855c30f05ec0c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2d84e5cbb95dbbb99ef26547d670871b521f9ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2d84e5cbb95dbbb99ef26547d670871b521f9ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e2d84e5cbb95dbbb99ef26547d670871b521f9ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2d84e5cbb95dbbb99ef26547d670871b521f9ac/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "420238d3103aa5c2e0ad29be840ba5d04b9d243e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/420238d3103aa5c2e0ad29be840ba5d04b9d243e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/420238d3103aa5c2e0ad29be840ba5d04b9d243e"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fd2668e4153a79dbb8fbd46e89c341fe86f3241f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2d84e5cbb95dbbb99ef26547d670871b521f9ac/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2d84e5cbb95dbbb99ef26547d670871b521f9ac/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e2d84e5cbb95dbbb99ef26547d670871b521f9ac",
        "patch": "@@ -3870,6 +3870,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n         DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx);\n         if (nZapWalletRet != DB_LOAD_OK) {\n             InitError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n+            delete tempWallet;\n             return NULL;\n         }\n \n@@ -3888,6 +3889,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n     {\n         if (nLoadWalletRet == DB_CORRUPT) {\n             InitError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n+            delete walletInstance;\n             return NULL;\n         }\n         else if (nLoadWalletRet == DB_NONCRITICAL_ERROR)\n@@ -3898,15 +3900,18 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n         }\n         else if (nLoadWalletRet == DB_TOO_NEW) {\n             InitError(strprintf(_(\"Error loading %s: Wallet requires newer version of %s\"), walletFile, _(PACKAGE_NAME)));\n+            delete walletInstance;\n             return NULL;\n         }\n         else if (nLoadWalletRet == DB_NEED_REWRITE)\n         {\n             InitError(strprintf(_(\"Wallet needed to be rewritten: restart %s to complete\"), _(PACKAGE_NAME)));\n+            delete walletInstance;\n             return NULL;\n         }\n         else {\n             InitError(strprintf(_(\"Error loading %s\"), walletFile));\n+            delete walletInstance;\n             return NULL;\n         }\n     }\n@@ -3925,6 +3930,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n         if (nMaxVersion < walletInstance->GetVersion())\n         {\n             InitError(_(\"Cannot downgrade wallet\"));\n+            delete walletInstance;\n             return NULL;\n         }\n         walletInstance->SetMaxVersion(nMaxVersion);\n@@ -3948,6 +3954,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n             walletInstance->SetDefaultKey(newDefaultKey);\n             if (!walletInstance->SetAddressBook(walletInstance->vchDefaultKey.GetID(), \"\", \"receive\")) {\n                 InitError(_(\"Cannot write default address\") += \"\\n\");\n+                delete walletInstance;\n                 return NULL;\n             }\n         }\n@@ -3958,10 +3965,12 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n         bool useHD = GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET);\n         if (walletInstance->IsHDEnabled() && !useHD) {\n             InitError(strprintf(_(\"Error loading %s: You can't disable HD on an already existing HD wallet\"), walletFile));\n+            delete walletInstance;\n             return NULL;\n         }\n         if (!walletInstance->IsHDEnabled() && useHD) {\n             InitError(strprintf(_(\"Error loading %s: You can't enable HD on an already existing non-HD wallet\"), walletFile));\n+            delete walletInstance;\n             return NULL;\n         }\n     }\n@@ -3991,6 +4000,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n             if (pindexRescan != block) {\n                 InitError(_(\"Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\"));\n+                delete walletInstance;\n                 return NULL;\n             }\n         }"
      }
    ]
  }
]