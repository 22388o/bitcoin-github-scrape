[
  {
    "sha": "ac80a5fa51777893d777cf9d454a6eb5a0ce3736",
    "node_id": "C_kwDOABII59oAKGFjODBhNWZhNTE3Nzc4OTNkNzc3Y2Y5ZDQ1NGE2ZWI1YTBjZTM3MzY",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-23T14:20:06Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-11-26T11:14:48Z"
      },
      "message": "fuzz: move FuzzedSock earlier in src/test/fuzz/util.h\n\nThis way it can be used in `ConsumeNode()`.",
      "tree": {
        "sha": "68baecdbb7f7b33a8c1f758be5f7b9223d564e23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68baecdbb7f7b33a8c1f758be5f7b9223d564e23"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac80a5fa51777893d777cf9d454a6eb5a0ce3736",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGgwasACgkQVN8G9ktV\ny7+lDx//al0+OdCh/mfUEIXHhGPg9uOBKgceAQ6maYmkgiIdFwVYZOHlb+BQvFMe\nfOly5PIg/B4V35r2CwfWR1us4AzeyGZzHuDm0JX4+N25kV5xYXWS/FlGtisneDtp\nVpkbi3JhmKDQQxFJe9hNx3gO5Z8t1gXksgY15ndu8LqUUUH43/bgMpeZ+xb4iCiw\nsm451TVhWfEdNuzUCg3B/syUsXjAJtE27LfTSj4tEmsnIW9vbxgWndtxmcst1GJ5\nPAUMOSELSkIkyBrtU7ZCoj6+ox1BfBRLlEj4e9ZpHYtSn11XdEECJ11KzVzG7b3a\nnK07UwrWXzVMgce03IW8p6DSaFIlc8Exb8Xt1Osbh6J624Yw9QbNh5sm286nTMlT\nLv23Q2gVUHTY0sxgsWij7y2khg31sI5Gh1/QnaEHqRpYsP82YiLM3iC0G+Y2pF9A\nW0s6KjpgCQ20gkR1udh7jDeiRU8EJmTznt+cSGrGJaT2zJTIfLu2qyrZQl+Jmt7E\nheeHRyvZxQm3i+N5Dm3jyvrkj0fojQpV3F3M8xneGnQsXBYfMIQ/mQoO2+YKLvNm\n6MnBoKaIPE0LVFizFifW55I6zbdlWlXj4yAMmzYlj11i6KoOVhfwIMv1dGWAYaJH\nt8IDNMGLUOwufn26khzb2GImRMw4zdjg1m0VAUf1ruE4Vmb1GTyFYjnf2bk9bDCH\nfQvI6cQSUAI68utBvcnlnAd8NQO8NwSghfLNuQcH9YQ4rTzT5DxH2mimx+BLsG/U\nEef/vixnH60Z2hfXXSFQ5hY815mQG6SoO8pAvROmTPcfA674f5otH0asQIhHm9iw\ns4PjRKNEK8FHw6zQdETicvnoRignhFkWPp7v1097bYrFH/iRzQgPaM9f83NSy7VX\n+vEm3MofardIV5Oi1rUeBLQ5Q6UO7Kd/wNPx5TLhdBXMZcBThvVuaCVnV7bqEygV\n7PV7QIakCClcHRNsAPX0E9+zfXUCdHs2fIEVx77acFYomX1Plir/FHMdVInH6clC\nwVuFzvAIeIUrnm0bKQj4Wn7S5Yy4klb6ucTwNwGLpJ+UBGgXb5nFcUGSLQEq4ly1\nByF/2RQm1NXixBGypp35dppQ/9E5k8t4LkifNiKJA6i4V0Z9ylWy5iFGvvMy0qQo\nV3anUqFP1KR3k+mdjML2k4A0DXFDCKOUwXRNGvykOmGihz8YSSDcWo5hlzCd2AW/\n1NSyHl40Xku9NPIgv7PU5gDIWaEoZatt4Y42ukIB299XUNzDC2e5i+RjyX2z3t8Q\nIZef1KxRoW1VK7frM62tjYxCuXiaOkJdzkeiNLYqWB/avKqqqvGYByR/n7NsYNdm\nWiNKZ6ytqsb9j9N1UoyaJ0Nqt0T1/w==\n=RN34\n-----END PGP SIGNATURE-----",
        "payload": "tree 68baecdbb7f7b33a8c1f758be5f7b9223d564e23\nparent 2a492d4ce5ec9663a05395141b1568a7ea261146\nauthor Vasil Dimov <vd@FreeBSD.org> 1619187606 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1637925288 +0100\n\nfuzz: move FuzzedSock earlier in src/test/fuzz/util.h\n\nThis way it can be used in `ConsumeNode()`.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac80a5fa51777893d777cf9d454a6eb5a0ce3736",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ac80a5fa51777893d777cf9d454a6eb5a0ce3736",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac80a5fa51777893d777cf9d454a6eb5a0ce3736/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a492d4ce5ec9663a05395141b1568a7ea261146",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a492d4ce5ec9663a05395141b1568a7ea261146",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a492d4ce5ec9663a05395141b1568a7ea261146"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 38,
      "deletions": 38
    },
    "files": [
      {
        "sha": "59a82a3076a3b226d520efcf64e088229106ad81",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 38,
        "deletions": 38,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac80a5fa51777893d777cf9d454a6eb5a0ce3736/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac80a5fa51777893d777cf9d454a6eb5a0ce3736/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=ac80a5fa51777893d777cf9d454a6eb5a0ce3736",
        "patch": "@@ -36,6 +36,44 @@\n #include <string>\n #include <vector>\n \n+class FuzzedSock : public Sock\n+{\n+    FuzzedDataProvider& m_fuzzed_data_provider;\n+\n+    /**\n+     * Data to return when `MSG_PEEK` is used as a `Recv()` flag.\n+     * If `MSG_PEEK` is used, then our `Recv()` returns some random data as usual, but on the next\n+     * `Recv()` call we must return the same data, thus we remember it here.\n+     */\n+    mutable std::optional<uint8_t> m_peek_data;\n+\n+public:\n+    explicit FuzzedSock(FuzzedDataProvider& fuzzed_data_provider);\n+\n+    ~FuzzedSock() override;\n+\n+    FuzzedSock& operator=(Sock&& other) override;\n+\n+    void Reset() override;\n+\n+    ssize_t Send(const void* data, size_t len, int flags) const override;\n+\n+    ssize_t Recv(void* buf, size_t len, int flags) const override;\n+\n+    int Connect(const sockaddr*, socklen_t) const override;\n+\n+    int GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const override;\n+\n+    bool Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred = nullptr) const override;\n+\n+    bool IsConnected(std::string& errmsg) const override;\n+};\n+\n+[[nodiscard]] inline FuzzedSock ConsumeSock(FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    return FuzzedSock{fuzzed_data_provider};\n+}\n+\n template <typename... Callables>\n size_t CallOneOf(FuzzedDataProvider& fuzzed_data_provider, Callables... callables)\n {\n@@ -384,42 +422,4 @@ void ReadFromStream(FuzzedDataProvider& fuzzed_data_provider, Stream& stream) no\n     }\n }\n \n-class FuzzedSock : public Sock\n-{\n-    FuzzedDataProvider& m_fuzzed_data_provider;\n-\n-    /**\n-     * Data to return when `MSG_PEEK` is used as a `Recv()` flag.\n-     * If `MSG_PEEK` is used, then our `Recv()` returns some random data as usual, but on the next\n-     * `Recv()` call we must return the same data, thus we remember it here.\n-     */\n-    mutable std::optional<uint8_t> m_peek_data;\n-\n-public:\n-    explicit FuzzedSock(FuzzedDataProvider& fuzzed_data_provider);\n-\n-    ~FuzzedSock() override;\n-\n-    FuzzedSock& operator=(Sock&& other) override;\n-\n-    void Reset() override;\n-\n-    ssize_t Send(const void* data, size_t len, int flags) const override;\n-\n-    ssize_t Recv(void* buf, size_t len, int flags) const override;\n-\n-    int Connect(const sockaddr*, socklen_t) const override;\n-\n-    int GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const override;\n-\n-    bool Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred = nullptr) const override;\n-\n-    bool IsConnected(std::string& errmsg) const override;\n-};\n-\n-[[nodiscard]] inline FuzzedSock ConsumeSock(FuzzedDataProvider& fuzzed_data_provider)\n-{\n-    return FuzzedSock{fuzzed_data_provider};\n-}\n-\n #endif // BITCOIN_TEST_FUZZ_UTIL_H"
      }
    ]
  },
  {
    "sha": "97790d2f20d1f60ad5678c67cbbdd7f05551f55d",
    "node_id": "C_kwDOABII59oAKDk3NzkwZDJmMjBkMWY2MGFkNTY3OGM2N2NiYmRkN2YwNTU1MWY1NWQ",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-23T13:15:23Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-11-29T08:19:17Z"
      },
      "message": "net: use Sock in CNode\n\nChange `CNode` to use a pointer to `Sock` instead of a bare `SOCKET`.\nThis will help mocking / testing / fuzzing more code.",
      "tree": {
        "sha": "4447b6327c3c712b11658f7d94eb33e21ef69051",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4447b6327c3c712b11658f7d94eb33e21ef69051"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/97790d2f20d1f60ad5678c67cbbdd7f05551f55d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGkjQYACgkQVN8G9ktV\ny7/iKR//eux9Lb4ybT6V9sUfQQXezPtxFzTFuM4uozYHCCyAwqE+pYa1b1pk5nNH\nLrWuMGLQOInH1mnMYTUjDGHiEIeKrSPM+x2FE2sWgFkWoWgg970wVJ4oDY3dGU3x\ntzjEe+unXM1LTQGxiXkMKi6dA/GpgLKN632uUZH0kZEE3utWbInpIzS7NL5IQaN6\nxbhcGdeXPfxOn2Hd+PtwqhoWbdubjnX+2Ky5KEYP4+HfGy8kUVJdVbP1W95JBEEV\nL3FAOF0SihTiR3oVpUWosSOwmDLwBBKDg6KIEIWmJlxPgeuGHZ4+NEThiGK289Zi\nQ/HyVrZ6oAWjQJmITdUSlIFqS8l39z4NbY6jYK/Ln9gO1fbIzUGx1Q+MfJZZ3mgQ\nfovTsq1EFIiZGZAmGpnGbpP1SR2/wsYJwc/Vo6mSTMzwvfMSsQ1Amx87XoPw/CPy\nfGufrYFJIywSVS/voJ3kXzqW3vx2uZtvG8h9Pcs+kX42ynX/iE2HoKaFdMiVRGI3\nn/eHPthlTbY24ICt+TyvglbYIVz5WQGM/lCQzmDX6OaoWm7xQnYJ/Ff0pTiTgbpk\ntVSuujvBe3ZIogxGFq75JAlFPpDxodEnwzm9X6FXveKldcpS5QTf4pE6+6Z4lBMZ\nPc1R3VgCtreNA/kP9c1kDyty9tCEMkjYOAg5LdVf8ZIKMUM9FGI77BCodqV3+FTq\nUdCfN2T0PbRddYpreHYew/cWPk2xoH7zc8WWu0LfPFiU3k6s2F5nfoiAWWs3XmiF\nfl63uqj6iSkAjOlrlsvhXLpz1Yn1YPSDOCnDy9/eP+j6wdRnn+cMOJZO6iZ2ZMO4\n2B0EVDyAcvlW53NBD75oeO8HLyAZOwNm1jd0GgxBnMd2UxqHR8ZcdxlPCPCB2rZq\npwu1st3pNsx9lshute/eMRCPqi0+DvztcrVMgHoNs2sPVP0MUeK0dZEAwIEQqrZa\ns0ZUP2MPQhdAL/7PlnBpO0Nm6smf6pRMH4MWt8tfQogoNEZBE3FyaBd+1ToPSPIH\nPtyxD8P86hvdfCEL7ZCLvSnkrkrTUcEv4Co+54Z3kqz9ypfjmdVYQQD1llS/0AzY\nJLo1JfvfyVdSy6BD/iAGk1q2uFNsUYnfRKLsIFZL9Kz4RAxslEl928MePB9XUl8w\n02Kqmm/OdZmELUXCDvAdyVFd+Zv3Mt7iOu8TTLmpTJA4XWEcjAebXyc0WQ10zaaf\nIPQ8PKs9ctct66Upi+TkzLnFuXqT9yTSnPU1kJQUWG3Vt7Hwum4bNJF72lzWGdD2\n//D8u/wjtA4iSA7H/nNxYAfTYQtOGJW1Huj3Y7Y/9WKFnmGK3117uEbEVvgfKWGP\nHhk/7oJgXIIwgFRRTAfTwl8xqxbIxA==\n=Gn+x\n-----END PGP SIGNATURE-----",
        "payload": "tree 4447b6327c3c712b11658f7d94eb33e21ef69051\nparent ac80a5fa51777893d777cf9d454a6eb5a0ce3736\nauthor Vasil Dimov <vd@FreeBSD.org> 1619183723 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1638173957 +0100\n\nnet: use Sock in CNode\n\nChange `CNode` to use a pointer to `Sock` instead of a bare `SOCKET`.\nThis will help mocking / testing / fuzzing more code.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97790d2f20d1f60ad5678c67cbbdd7f05551f55d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/97790d2f20d1f60ad5678c67cbbdd7f05551f55d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97790d2f20d1f60ad5678c67cbbdd7f05551f55d/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ac80a5fa51777893d777cf9d454a6eb5a0ce3736",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac80a5fa51777893d777cf9d454a6eb5a0ce3736",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac80a5fa51777893d777cf9d454a6eb5a0ce3736"
      }
    ],
    "stats": {
      "total": 87,
      "additions": 46,
      "deletions": 41
    },
    "files": [
      {
        "sha": "1f8ae2357189080ac29f18e2cfb7648cae5762c6",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 24,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97790d2f20d1f60ad5678c67cbbdd7f05551f55d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97790d2f20d1f60ad5678c67cbbdd7f05551f55d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=97790d2f20d1f60ad5678c67cbbdd7f05551f55d",
        "patch": "@@ -504,7 +504,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n     if (!addr_bind.IsValid()) {\n         addr_bind = GetBindAddress(sock->Get());\n     }\n-    CNode* pnode = new CNode(id, nLocalServices, sock->Release(), addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", conn_type, /* inbound_onion */ false);\n+    CNode* pnode = new CNode(id, nLocalServices, std::move(sock), addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", conn_type, /* inbound_onion */ false);\n     pnode->AddRef();\n \n     // We're making a new connection, harvest entropy from the time (and our peer count)\n@@ -517,10 +517,9 @@ void CNode::CloseSocketDisconnect()\n {\n     fDisconnect = true;\n     LOCK(cs_hSocket);\n-    if (hSocket != INVALID_SOCKET)\n-    {\n+    if (m_sock) {\n         LogPrint(BCLog::NET, \"disconnecting peer=%d\\n\", id);\n-        CloseSocket(hSocket);\n+        m_sock.reset();\n     }\n }\n \n@@ -799,9 +798,10 @@ size_t CConnman::SocketSendData(CNode& node) const\n         int nBytes = 0;\n         {\n             LOCK(node.cs_hSocket);\n-            if (node.hSocket == INVALID_SOCKET)\n+            if (!node.m_sock) {\n                 break;\n-            nBytes = send(node.hSocket, reinterpret_cast<const char*>(data.data()) + node.nSendOffset, data.size() - node.nSendOffset, MSG_NOSIGNAL | MSG_DONTWAIT);\n+            }\n+            nBytes = node.m_sock->Send(reinterpret_cast<const char*>(data.data()) + node.nSendOffset, data.size() - node.nSendOffset, MSG_NOSIGNAL | MSG_DONTWAIT);\n         }\n         if (nBytes > 0) {\n             node.nLastSend = GetTimeSeconds();\n@@ -1201,7 +1201,7 @@ void CConnman::CreateNodeFromAcceptedSocket(SOCKET hSocket,\n     }\n \n     const bool inbound_onion = std::find(m_onion_binds.begin(), m_onion_binds.end(), addr_bind) != m_onion_binds.end();\n-    CNode* pnode = new CNode(id, nodeServices, hSocket, addr, CalculateKeyedNetGroup(addr), nonce, addr_bind, \"\", ConnectionType::INBOUND, inbound_onion);\n+    CNode* pnode = new CNode(id, nodeServices, std::make_shared<Sock>(hSocket), addr, CalculateKeyedNetGroup(addr), nonce, addr_bind, \"\", ConnectionType::INBOUND, inbound_onion);\n     pnode->AddRef();\n     pnode->m_permissionFlags = permissionFlags;\n     pnode->m_prefer_evict = discouraged;\n@@ -1382,16 +1382,17 @@ bool CConnman::GenerateSelectSet(const std::vector<CNode*>& nodes,\n         }\n \n         LOCK(pnode->cs_hSocket);\n-        if (pnode->hSocket == INVALID_SOCKET)\n+        if (!pnode->m_sock) {\n             continue;\n+        }\n \n-        error_set.insert(pnode->hSocket);\n+        error_set.insert(pnode->m_sock->Get());\n         if (select_send) {\n-            send_set.insert(pnode->hSocket);\n+            send_set.insert(pnode->m_sock->Get());\n             continue;\n         }\n         if (select_recv) {\n-            recv_set.insert(pnode->hSocket);\n+            recv_set.insert(pnode->m_sock->Get());\n         }\n     }\n \n@@ -1562,11 +1563,12 @@ void CConnman::SocketHandlerConnected(const std::vector<CNode*>& nodes,\n         bool errorSet = false;\n         {\n             LOCK(pnode->cs_hSocket);\n-            if (pnode->hSocket == INVALID_SOCKET)\n+            if (!pnode->m_sock) {\n                 continue;\n-            recvSet = recv_set.count(pnode->hSocket) > 0;\n-            sendSet = send_set.count(pnode->hSocket) > 0;\n-            errorSet = error_set.count(pnode->hSocket) > 0;\n+            }\n+            recvSet = recv_set.count(pnode->m_sock->Get()) > 0;\n+            sendSet = send_set.count(pnode->m_sock->Get()) > 0;\n+            errorSet = error_set.count(pnode->m_sock->Get()) > 0;\n         }\n         if (recvSet || errorSet)\n         {\n@@ -1575,9 +1577,10 @@ void CConnman::SocketHandlerConnected(const std::vector<CNode*>& nodes,\n             int nBytes = 0;\n             {\n                 LOCK(pnode->cs_hSocket);\n-                if (pnode->hSocket == INVALID_SOCKET)\n+                if (!pnode->m_sock) {\n                     continue;\n-                nBytes = recv(pnode->hSocket, (char*)pchBuf, sizeof(pchBuf), MSG_DONTWAIT);\n+                }\n+                nBytes = pnode->m_sock->Recv(pchBuf, sizeof(pchBuf), MSG_DONTWAIT);\n             }\n             if (nBytes > 0)\n             {\n@@ -2971,8 +2974,9 @@ ServiceFlags CConnman::GetLocalServices() const\n \n unsigned int CConnman::GetReceiveFloodSize() const { return nReceiveFloodSize; }\n \n-CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress& addrBindIn, const std::string& addrNameIn, ConnectionType conn_type_in, bool inbound_onion)\n-    : nTimeConnected(GetTimeSeconds()),\n+CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, std::shared_ptr<Sock> sock, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress& addrBindIn, const std::string& addrNameIn, ConnectionType conn_type_in, bool inbound_onion)\n+    : m_sock{sock},\n+      nTimeConnected(GetTimeSeconds()),\n       addr(addrIn),\n       addrBind(addrBindIn),\n       m_addr_name{addrNameIn.empty() ? addr.ToStringIPPort() : addrNameIn},\n@@ -2984,7 +2988,6 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, SOCKET hSocketIn, const\n       nLocalServices(nLocalServicesIn)\n {\n     if (inbound_onion) assert(conn_type_in == ConnectionType::INBOUND);\n-    hSocket = hSocketIn;\n     if (conn_type_in != ConnectionType::BLOCK_RELAY) {\n         m_tx_relay = std::make_unique<TxRelay>();\n     }\n@@ -3003,10 +3006,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, SOCKET hSocketIn, const\n     m_serializer = std::make_unique<V1TransportSerializer>(V1TransportSerializer());\n }\n \n-CNode::~CNode()\n-{\n-    CloseSocket(hSocket);\n-}\n+CNode::~CNode() {}\n \n bool CConnman::NodeFullyConnected(const CNode* pnode)\n {"
      },
      {
        "sha": "4367e5fdccb620799ee35d682e37cf94e007e84a",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97790d2f20d1f60ad5678c67cbbdd7f05551f55d/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97790d2f20d1f60ad5678c67cbbdd7f05551f55d/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=97790d2f20d1f60ad5678c67cbbdd7f05551f55d",
        "patch": "@@ -401,7 +401,13 @@ class CNode\n \n     NetPermissionFlags m_permissionFlags{NetPermissionFlags::None};\n     std::atomic<ServiceFlags> nServices{NODE_NONE};\n-    SOCKET hSocket GUARDED_BY(cs_hSocket);\n+\n+    /**\n+     * Socket used for communication with the node.\n+     * May not own a Sock object (after `CloseSocketDisconnect()` or during tests).\n+     */\n+    std::shared_ptr<Sock> m_sock GUARDED_BY(cs_hSocket);\n+\n     /** Total size of all vSendMsg entries */\n     size_t nSendSize GUARDED_BY(cs_vSend){0};\n     /** Offset inside the first vSendMsg already sent */\n@@ -577,7 +583,7 @@ class CNode\n      * criterium in CConnman::AttemptToEvictConnection. */\n     std::atomic<std::chrono::microseconds> m_min_ping_time{std::chrono::microseconds::max()};\n \n-    CNode(NodeId id, ServiceFlags nLocalServicesIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress& addrBindIn, const std::string& addrNameIn, ConnectionType conn_type_in, bool inbound_onion);\n+    CNode(NodeId id, ServiceFlags nLocalServicesIn, std::shared_ptr<Sock> sock, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress& addrBindIn, const std::string& addrNameIn, ConnectionType conn_type_in, bool inbound_onion);\n     ~CNode();\n     CNode(const CNode&) = delete;\n     CNode& operator=(const CNode&) = delete;"
      },
      {
        "sha": "143ea49421dd3793f113341988ae1fba5cb38028",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97790d2f20d1f60ad5678c67cbbdd7f05551f55d/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97790d2f20d1f60ad5678c67cbbdd7f05551f55d/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=97790d2f20d1f60ad5678c67cbbdd7f05551f55d",
        "patch": "@@ -59,7 +59,7 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n \n     // Mock an outbound peer\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode1(id++, ServiceFlags(NODE_NETWORK | NODE_WITNESS), INVALID_SOCKET, addr1, /*nKeyedNetGroupIn=*/0, /*nLocalHostNonceIn=*/0, CAddress(), /*addrNameIn=*/\"\", ConnectionType::OUTBOUND_FULL_RELAY, /*inbound_onion=*/false);\n+    CNode dummyNode1(id++, ServiceFlags(NODE_NETWORK | NODE_WITNESS), nullptr, addr1, /*nKeyedNetGroupIn=*/0, /*nLocalHostNonceIn=*/0, CAddress(), /*addrNameIn=*/\"\", ConnectionType::OUTBOUND_FULL_RELAY, /*inbound_onion=*/false);\n     dummyNode1.SetCommonVersion(PROTOCOL_VERSION);\n \n     peerLogic->InitializeNode(&dummyNode1);\n@@ -108,7 +108,7 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n static void AddRandomOutboundPeer(std::vector<CNode*>& vNodes, PeerManager& peerLogic, ConnmanTestMsg& connman)\n {\n     CAddress addr(ip(g_insecure_rand_ctx.randbits(32)), NODE_NONE);\n-    vNodes.emplace_back(new CNode(id++, ServiceFlags(NODE_NETWORK | NODE_WITNESS), INVALID_SOCKET, addr, /*nKeyedNetGroupIn=*/0, /*nLocalHostNonceIn=*/0, CAddress(), /*addrNameIn=*/\"\", ConnectionType::OUTBOUND_FULL_RELAY, /*inbound_onion=*/false));\n+    vNodes.emplace_back(new CNode(id++, ServiceFlags(NODE_NETWORK | NODE_WITNESS), nullptr, addr, /*nKeyedNetGroupIn=*/0, /*nLocalHostNonceIn=*/0, CAddress(), /*addrNameIn=*/\"\", ConnectionType::OUTBOUND_FULL_RELAY, /*inbound_onion=*/false));\n     CNode &node = *vNodes.back();\n     node.SetCommonVersion(PROTOCOL_VERSION);\n \n@@ -212,7 +212,7 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     std::array<CNode*, 3> nodes;\n \n     banman->ClearBanned();\n-    nodes[0] = new CNode{id++, NODE_NETWORK, INVALID_SOCKET, addr[0], /*nKeyedNetGroupIn=*/0,\n+    nodes[0] = new CNode{id++, NODE_NETWORK, nullptr, addr[0], /*nKeyedNetGroupIn=*/0,\n                          /*nLocalHostNonceIn */ 0, CAddress(), /*addrNameIn=*/\"\",\n                          ConnectionType::INBOUND, /*inbound_onion=*/false};\n     nodes[0]->SetCommonVersion(PROTOCOL_VERSION);\n@@ -228,7 +228,7 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     BOOST_CHECK(nodes[0]->fDisconnect);\n     BOOST_CHECK(!banman->IsDiscouraged(other_addr)); // Different address, not discouraged\n \n-    nodes[1] = new CNode{id++, NODE_NETWORK, INVALID_SOCKET, addr[1], /*nKeyedNetGroupIn=*/1,\n+    nodes[1] = new CNode{id++, NODE_NETWORK, nullptr, addr[1], /*nKeyedNetGroupIn=*/1,\n                          /*nLocalHostNonceIn */ 1, CAddress(), /*addrNameIn=*/\"\",\n                          ConnectionType::INBOUND, /*inbound_onion=*/false};\n     nodes[1]->SetCommonVersion(PROTOCOL_VERSION);\n@@ -259,7 +259,7 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n \n     // Make sure non-IP peers are discouraged and disconnected properly.\n \n-    nodes[2] = new CNode{id++, NODE_NETWORK, INVALID_SOCKET, addr[2], /*nKeyedNetGroupIn=*/1,\n+    nodes[2] = new CNode{id++, NODE_NETWORK, nullptr, addr[2], /*nKeyedNetGroupIn=*/1,\n                          /*nLocalHostNonceIn */ 1, CAddress(), /*addrNameIn=*/\"\",\n                          ConnectionType::OUTBOUND_FULL_RELAY, /*inbound_onion=*/false};\n     nodes[2]->SetCommonVersion(PROTOCOL_VERSION);\n@@ -297,7 +297,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     SetMockTime(nStartTime); // Overrides future calls to GetTime()\n \n     CAddress addr(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode(id++, NODE_NETWORK, INVALID_SOCKET, addr, /*nKeyedNetGroupIn=*/4, /*nLocalHostNonceIn=*/4, CAddress(), /*addrNameIn=*/\"\", ConnectionType::INBOUND, /*inbound_onion=*/false);\n+    CNode dummyNode(id++, NODE_NETWORK, nullptr, addr, /*nKeyedNetGroupIn=*/4, /*nLocalHostNonceIn=*/4, CAddress(), /*addrNameIn=*/\"\", ConnectionType::INBOUND, /*inbound_onion=*/false);\n     dummyNode.SetCommonVersion(PROTOCOL_VERSION);\n     peerLogic->InitializeNode(&dummyNode);\n     dummyNode.fSuccessfullyConnected = true;"
      },
      {
        "sha": "63e6d26d5377cd246d6c88930d456f183aabcaf0",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97790d2f20d1f60ad5678c67cbbdd7f05551f55d/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97790d2f20d1f60ad5678c67cbbdd7f05551f55d/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=97790d2f20d1f60ad5678c67cbbdd7f05551f55d",
        "patch": "@@ -297,7 +297,7 @@ auto ConsumeNode(FuzzedDataProvider& fuzzed_data_provider, const std::optional<N\n {\n     const NodeId node_id = node_id_in.value_or(fuzzed_data_provider.ConsumeIntegral<NodeId>());\n     const ServiceFlags local_services = ConsumeWeakEnum(fuzzed_data_provider, ALL_SERVICE_FLAGS);\n-    const SOCKET socket = INVALID_SOCKET;\n+    auto sock = std::make_shared<FuzzedSock>(fuzzed_data_provider);\n     const CAddress address = ConsumeAddress(fuzzed_data_provider);\n     const uint64_t keyed_net_group = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\n     const uint64_t local_host_nonce = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\n@@ -306,9 +306,9 @@ auto ConsumeNode(FuzzedDataProvider& fuzzed_data_provider, const std::optional<N\n     const ConnectionType conn_type = fuzzed_data_provider.PickValueInArray(ALL_CONNECTION_TYPES);\n     const bool inbound_onion{conn_type == ConnectionType::INBOUND ? fuzzed_data_provider.ConsumeBool() : false};\n     if constexpr (ReturnUniquePtr) {\n-        return std::make_unique<CNode>(node_id, local_services, socket, address, keyed_net_group, local_host_nonce, addr_bind, addr_name, conn_type, inbound_onion);\n+        return std::make_unique<CNode>(node_id, local_services, sock, address, keyed_net_group, local_host_nonce, addr_bind, addr_name, conn_type, inbound_onion);\n     } else {\n-        return CNode{node_id, local_services, socket, address, keyed_net_group, local_host_nonce, addr_bind, addr_name, conn_type, inbound_onion};\n+        return CNode{node_id, local_services, sock, address, keyed_net_group, local_host_nonce, addr_bind, addr_name, conn_type, inbound_onion};\n     }\n }\n inline std::unique_ptr<CNode> ConsumeNodeAsUniquePtr(FuzzedDataProvider& fdp, const std::optional<NodeId>& node_id_in = std::nullopt) { return ConsumeNode<true>(fdp, node_id_in); }"
      },
      {
        "sha": "202ea36c4eb3053d459e1ddf44ea56ff557eecc6",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97790d2f20d1f60ad5678c67cbbdd7f05551f55d/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97790d2f20d1f60ad5678c67cbbdd7f05551f55d/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=97790d2f20d1f60ad5678c67cbbdd7f05551f55d",
        "patch": "@@ -43,7 +43,6 @@ BOOST_AUTO_TEST_CASE(cnode_listen_port)\n \n BOOST_AUTO_TEST_CASE(cnode_simple_test)\n {\n-    SOCKET hSocket = INVALID_SOCKET;\n     NodeId id = 0;\n \n     in_addr ipv4Addr;\n@@ -53,7 +52,7 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     std::string pszDest;\n \n     std::unique_ptr<CNode> pnode1 = std::make_unique<CNode>(\n-        id++, NODE_NETWORK, hSocket, addr,\n+        id++, NODE_NETWORK, nullptr, addr,\n         /* nKeyedNetGroupIn = */ 0,\n         /* nLocalHostNonceIn = */ 0,\n         CAddress(), pszDest, ConnectionType::OUTBOUND_FULL_RELAY,\n@@ -68,7 +67,7 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     BOOST_CHECK_EQUAL(pnode1->ConnectedThroughNetwork(), Network::NET_IPV4);\n \n     std::unique_ptr<CNode> pnode2 = std::make_unique<CNode>(\n-        id++, NODE_NETWORK, hSocket, addr,\n+        id++, NODE_NETWORK, nullptr, addr,\n         /* nKeyedNetGroupIn = */ 1,\n         /* nLocalHostNonceIn = */ 1,\n         CAddress(), pszDest, ConnectionType::INBOUND,\n@@ -83,7 +82,7 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     BOOST_CHECK_EQUAL(pnode2->ConnectedThroughNetwork(), Network::NET_IPV4);\n \n     std::unique_ptr<CNode> pnode3 = std::make_unique<CNode>(\n-        id++, NODE_NETWORK, hSocket, addr,\n+        id++, NODE_NETWORK, nullptr, addr,\n         /* nKeyedNetGroupIn = */ 0,\n         /* nLocalHostNonceIn = */ 0,\n         CAddress(), pszDest, ConnectionType::OUTBOUND_FULL_RELAY,\n@@ -98,7 +97,7 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     BOOST_CHECK_EQUAL(pnode3->ConnectedThroughNetwork(), Network::NET_IPV4);\n \n     std::unique_ptr<CNode> pnode4 = std::make_unique<CNode>(\n-        id++, NODE_NETWORK, hSocket, addr,\n+        id++, NODE_NETWORK, nullptr, addr,\n         /* nKeyedNetGroupIn = */ 1,\n         /* nLocalHostNonceIn = */ 1,\n         CAddress(), pszDest, ConnectionType::INBOUND,\n@@ -607,7 +606,7 @@ BOOST_AUTO_TEST_CASE(ipv4_peer_with_ipv6_addrMe_test)\n     in_addr ipv4AddrPeer;\n     ipv4AddrPeer.s_addr = 0xa0b0c001;\n     CAddress addr = CAddress(CService(ipv4AddrPeer, 7777), NODE_NETWORK);\n-    std::unique_ptr<CNode> pnode = std::make_unique<CNode>(0, NODE_NETWORK, INVALID_SOCKET, addr, /* nKeyedNetGroupIn */ 0, /* nLocalHostNonceIn */ 0, CAddress{}, /* pszDest */ std::string{}, ConnectionType::OUTBOUND_FULL_RELAY, /* inbound_onion */ false);\n+    std::unique_ptr<CNode> pnode = std::make_unique<CNode>(0, NODE_NETWORK, nullptr, addr, /* nKeyedNetGroupIn */ 0, /* nLocalHostNonceIn */ 0, CAddress{}, /* pszDest */ std::string{}, ConnectionType::OUTBOUND_FULL_RELAY, /* inbound_onion */ false);\n     pnode->fSuccessfullyConnected.store(true);\n \n     // the peer claims to be reaching us via IPv6"
      }
    ]
  },
  {
    "sha": "846e9952cf53256fc77dee68208c7c668030b7b9",
    "node_id": "C_kwDOABII59oAKDg0NmU5OTUyY2Y1MzI1NmZjNzdkZWU2ODIwOGM3YzY2ODAzMGI3Yjk",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-23T13:30:46Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-11-29T08:19:18Z"
      },
      "message": "scripted-diff: rename CNode::cs_hSocket to CNode::m_sock_mutex\n\n-BEGIN VERIFY SCRIPT-\nsed -i -e 's/cs_hSocket/m_sock_mutex/g' $(git grep -l cs_hSocket)\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "7faada95c3a22b4b068770a2474542acfb718a90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7faada95c3a22b4b068770a2474542acfb718a90"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/846e9952cf53256fc77dee68208c7c668030b7b9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGkjQcACgkQVN8G9ktV\ny79BYh//aVeL1mgeYrkC1G4dJJ655KCmnqLFmegNpTck2n1x8oOJZT//walzjgjS\nLOQZqlfkeyo4ldsKlUMl6zYVyeStps2xiuLA/mZmrKIPUrKoJDFrnQhZCE6Rv7yx\nv9r05op9g9QMslY/YvliSaIS6L2iCfxVP+JVUScohIZWJ7zeGZr/B6ttU2TwNLQZ\no66YaMzQoeBul7FJHN279FCfncTKnrJqLtTZ9UkMvyS7WYKLPjm6id3mTR1JD3MS\nMfe4WWrnAnZJhPazLES1dxri6XHsq5314scEK5HV9FfY2KJchIs+sYtXEUaqwrYP\nGgjsev8evoRgC9z+kB5s1SVt0C3mCHrD1oEv+J/gkK3yS8+cHXs7HnsbYLDLYyeY\ncSz7/SFw+9jEBpAjCwN+RgsrRtd+hDS613SegHK7kEAl+50wjL5orSKP1hhtr5gi\n25yiYZRpK644AMaCTUueN5CQV4Ia5lL2RLvSf7Jwnma20diNbcluuKM7l8Wjk/+7\nzLAkVcubQ9H4qVi+usfjdTij6+n95dQz8RKOjpaBtYyC+wyjqhW8ihHQAtaiN2FU\ntf8vh2dVy8Ah9+QHe3pUst6pFZeWTLYSK1d4e+ZJfUlG8b1oYG274Mg/qcyIbRN7\ni/beOVGRbDqC0cqZf7N0ShusjGjUFYByeA1Drns1a2NUwvJBeyAcbuxqPfYIF1/r\n3Fd+TX0L5sFqbC9vWNJH2m0haRYgE7P63zsZShAbqjcdMWCwy/FarFGTG6n+g0eE\na/R401wGXHWN8EfKotoWgaa7L6bbpswp6huZfsvdXswGlddU8gdvIC2uTySyevrx\niIumNO8+vob+wjP2hAaHP7HWZfNLKE/3zEXKwKy3pxKpSlOZV5sx2yjUyUU9jeCQ\nVKCdiwaYLAqWTvAck1slfzrJ5hDI5o1usMY84Xg7Vm31FfjNEHcG5uWYpku0RChX\nX8aMaVtRtaBZnn0OkBZBHdJgcpt2ABxE12XDqcBIcY8NHGUMAO9ZQfXLu9IaB13m\nxpKqRL02y8+bq9P1xf9oLUk+0nopkfrYtdprKSvHrwYxepi+AOjw429lTnjlgF1C\n1PDZHABRJyNnIhzPLpVcbtwgeYhnnqHXltRZr13AIGaLTQhlIhlSjKsiv9lX6wlY\nvsE2KWlHRks6GvQ9anbNIfbw/8quSochym2VS5lFfFLt/TajX/R4GAO39YM5bysr\ncq1TY/4jf1dGsVybzUBYazwE1Nn9lTySDNRhpfKhcn1DDyzw/F5oraiTkWKccC28\nHo5Z0vFzts9M4h9mloCxvSdNpTvUTCj5AKjdJGxPNK9QJnRCOu6+EL3gm/lTYsFl\nq+cJVcMwtd7ZXiNGphx6cKvxQVmwIw==\n=IPEd\n-----END PGP SIGNATURE-----",
        "payload": "tree 7faada95c3a22b4b068770a2474542acfb718a90\nparent 97790d2f20d1f60ad5678c67cbbdd7f05551f55d\nauthor Vasil Dimov <vd@FreeBSD.org> 1619184646 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1638173958 +0100\n\nscripted-diff: rename CNode::cs_hSocket to CNode::m_sock_mutex\n\n-BEGIN VERIFY SCRIPT-\nsed -i -e 's/cs_hSocket/m_sock_mutex/g' $(git grep -l cs_hSocket)\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/846e9952cf53256fc77dee68208c7c668030b7b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/846e9952cf53256fc77dee68208c7c668030b7b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/846e9952cf53256fc77dee68208c7c668030b7b9/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "97790d2f20d1f60ad5678c67cbbdd7f05551f55d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97790d2f20d1f60ad5678c67cbbdd7f05551f55d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/97790d2f20d1f60ad5678c67cbbdd7f05551f55d"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "9efe0d52fa09b47788e7aba330263f16f8f1a6d7",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/846e9952cf53256fc77dee68208c7c668030b7b9/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/846e9952cf53256fc77dee68208c7c668030b7b9/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=846e9952cf53256fc77dee68208c7c668030b7b9",
        "patch": "@@ -516,7 +516,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n void CNode::CloseSocketDisconnect()\n {\n     fDisconnect = true;\n-    LOCK(cs_hSocket);\n+    LOCK(m_sock_mutex);\n     if (m_sock) {\n         LogPrint(BCLog::NET, \"disconnecting peer=%d\\n\", id);\n         m_sock.reset();\n@@ -797,7 +797,7 @@ size_t CConnman::SocketSendData(CNode& node) const\n         assert(data.size() > node.nSendOffset);\n         int nBytes = 0;\n         {\n-            LOCK(node.cs_hSocket);\n+            LOCK(node.m_sock_mutex);\n             if (!node.m_sock) {\n                 break;\n             }\n@@ -1381,7 +1381,7 @@ bool CConnman::GenerateSelectSet(const std::vector<CNode*>& nodes,\n             select_send = !pnode->vSendMsg.empty();\n         }\n \n-        LOCK(pnode->cs_hSocket);\n+        LOCK(pnode->m_sock_mutex);\n         if (!pnode->m_sock) {\n             continue;\n         }\n@@ -1562,7 +1562,7 @@ void CConnman::SocketHandlerConnected(const std::vector<CNode*>& nodes,\n         bool sendSet = false;\n         bool errorSet = false;\n         {\n-            LOCK(pnode->cs_hSocket);\n+            LOCK(pnode->m_sock_mutex);\n             if (!pnode->m_sock) {\n                 continue;\n             }\n@@ -1576,7 +1576,7 @@ void CConnman::SocketHandlerConnected(const std::vector<CNode*>& nodes,\n             uint8_t pchBuf[0x10000];\n             int nBytes = 0;\n             {\n-                LOCK(pnode->cs_hSocket);\n+                LOCK(pnode->m_sock_mutex);\n                 if (!pnode->m_sock) {\n                     continue;\n                 }"
      },
      {
        "sha": "aacbae97d650dc6f512a2f2e7958c80b1b825819",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/846e9952cf53256fc77dee68208c7c668030b7b9/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/846e9952cf53256fc77dee68208c7c668030b7b9/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=846e9952cf53256fc77dee68208c7c668030b7b9",
        "patch": "@@ -406,7 +406,7 @@ class CNode\n      * Socket used for communication with the node.\n      * May not own a Sock object (after `CloseSocketDisconnect()` or during tests).\n      */\n-    std::shared_ptr<Sock> m_sock GUARDED_BY(cs_hSocket);\n+    std::shared_ptr<Sock> m_sock GUARDED_BY(m_sock_mutex);\n \n     /** Total size of all vSendMsg entries */\n     size_t nSendSize GUARDED_BY(cs_vSend){0};\n@@ -415,7 +415,7 @@ class CNode\n     uint64_t nSendBytes GUARDED_BY(cs_vSend){0};\n     std::deque<std::vector<unsigned char>> vSendMsg GUARDED_BY(cs_vSend);\n     Mutex cs_vSend;\n-    Mutex cs_hSocket;\n+    Mutex m_sock_mutex;\n     Mutex cs_vRecv;\n \n     RecursiveMutex cs_vProcessMsg;"
      }
    ]
  }
]