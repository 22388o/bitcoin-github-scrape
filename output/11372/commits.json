[
  {
    "sha": "32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMmU2OWZhMGRmOGZjMWNmYzhhYzRmODM4MWJjNTRiOGYzM2UxYzM4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-19T23:49:52Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-02-20T02:55:20Z"
      },
      "message": "Replace CBitcoinSecret with {Encode,Decode}Secret",
      "tree": {
        "sha": "cd00b30d48911729cef8bd436797177bd8ebeb33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd00b30d48911729cef8bd436797177bd8ebeb33"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b"
      }
    ],
    "stats": {
      "total": 180,
      "additions": 62,
      "deletions": 118
    },
    "files": [
      {
        "sha": "826fe630bc82190f38269c22f541224b6eea21a5",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 26,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38",
        "patch": "@@ -323,39 +323,35 @@ CTxDestination DecodeDestination(const std::string& str, const CChainParams& par\n }\n } // namespace\n \n-void CBitcoinSecret::SetKey(const CKey& vchSecret)\n+CKey DecodeSecret(const std::string& str)\n {\n-    assert(vchSecret.IsValid());\n-    SetData(Params().Base58Prefix(CChainParams::SECRET_KEY), vchSecret.begin(), vchSecret.size());\n-    if (vchSecret.IsCompressed())\n-        vchData.push_back(1);\n+    CKey key;\n+    std::vector<unsigned char> data;\n+    if (DecodeBase58Check(str, data)) {\n+        const std::vector<unsigned char>& privkey_prefix = Params().Base58Prefix(CChainParams::SECRET_KEY);\n+        if ((data.size() == 32 + privkey_prefix.size() || (data.size() == 33 + privkey_prefix.size() && data.back() == 1)) &&\n+            std::equal(privkey_prefix.begin(), privkey_prefix.end(), data.begin())) {\n+            bool compressed = data.size() == 33 + privkey_prefix.size();\n+            key.Set(data.begin() + privkey_prefix.size(), data.begin() + privkey_prefix.size() + 32, compressed);\n+        }\n+    }\n+    memory_cleanse(data.data(), data.size());\n+    return key;\n }\n \n-CKey CBitcoinSecret::GetKey()\n+std::string EncodeSecret(const CKey& key)\n {\n-    CKey ret;\n-    assert(vchData.size() >= 32);\n-    ret.Set(vchData.begin(), vchData.begin() + 32, vchData.size() > 32 && vchData[32] == 1);\n+    assert(key.IsValid());\n+    std::vector<unsigned char> data = Params().Base58Prefix(CChainParams::SECRET_KEY);\n+    data.insert(data.end(), key.begin(), key.end());\n+    if (key.IsCompressed()) {\n+        data.push_back(1);\n+    }\n+    std::string ret = EncodeBase58Check(data);\n+    memory_cleanse(data.data(), data.size());\n     return ret;\n }\n \n-bool CBitcoinSecret::IsValid() const\n-{\n-    bool fExpectedFormat = vchData.size() == 32 || (vchData.size() == 33 && vchData[32] == 1);\n-    bool fCorrectVersion = vchVersion == Params().Base58Prefix(CChainParams::SECRET_KEY);\n-    return fExpectedFormat && fCorrectVersion;\n-}\n-\n-bool CBitcoinSecret::SetString(const char* pszSecret)\n-{\n-    return CBase58Data::SetString(pszSecret) && IsValid();\n-}\n-\n-bool CBitcoinSecret::SetString(const std::string& strSecret)\n-{\n-    return SetString(strSecret.c_str());\n-}\n-\n std::string EncodeDestination(const CTxDestination& dest)\n {\n     return boost::apply_visitor(DestinationEncoder(Params()), dest);"
      },
      {
        "sha": "c3dea060b6817e4e0d973f7314f077c782d357e1",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 2,
        "deletions": 15,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38",
        "patch": "@@ -94,21 +94,8 @@ class CBase58Data\n     bool operator> (const CBase58Data& b58) const { return CompareTo(b58) >  0; }\n };\n \n-/**\n- * A base58-encoded secret key\n- */\n-class CBitcoinSecret : public CBase58Data\n-{\n-public:\n-    void SetKey(const CKey& vchSecret);\n-    CKey GetKey();\n-    bool IsValid() const;\n-    bool SetString(const char* pszSecret);\n-    bool SetString(const std::string& strSecret);\n-\n-    CBitcoinSecret(const CKey& vchSecret) { SetKey(vchSecret); }\n-    CBitcoinSecret() {}\n-};\n+CKey DecodeSecret(const std::string& str);\n+std::string EncodeSecret(const CKey& key);\n \n template<typename K, int Size, CChainParams::Base58Type Type> class CBitcoinExtKeyBase : public CBase58Data\n {"
      },
      {
        "sha": "4770635c6af61693d7095a77c624a5837cf98bb8",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38",
        "patch": "@@ -563,12 +563,10 @@ static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)\n     for (unsigned int kidx = 0; kidx < keysObj.size(); kidx++) {\n         if (!keysObj[kidx].isStr())\n             throw std::runtime_error(\"privatekey not a std::string\");\n-        CBitcoinSecret vchSecret;\n-        bool fGood = vchSecret.SetString(keysObj[kidx].getValStr());\n-        if (!fGood)\n+        CKey key = DecodeSecret(keysObj[kidx].getValStr());\n+        if (!key.IsValid()) {\n             throw std::runtime_error(\"privatekey not valid\");\n-\n-        CKey key = vchSecret.GetKey();\n+        }\n         tempKeystore.AddKey(key);\n     }\n "
      },
      {
        "sha": "8d62fbe5c27592850460bb78cc9f71de256fb116",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38",
        "patch": "@@ -224,13 +224,10 @@ UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n     std::string strPrivkey = request.params[0].get_str();\n     std::string strMessage = request.params[1].get_str();\n \n-    CBitcoinSecret vchSecret;\n-    bool fGood = vchSecret.SetString(strPrivkey);\n-    if (!fGood)\n+    CKey key = DecodeSecret(strPrivkey);\n+    if (!key.IsValid()) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n-    CKey key = vchSecret.GetKey();\n-    if (!key.IsValid())\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+    }\n \n     CHashWriter ss(SER_GETHASH, 0);\n     ss << strMessageMagic;"
      },
      {
        "sha": "d87d733609512afabae96e98acce1133e48d2b6e",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38",
        "patch": "@@ -896,13 +896,9 @@ UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n     const UniValue& keys = request.params[1].get_array();\n     for (unsigned int idx = 0; idx < keys.size(); ++idx) {\n         UniValue k = keys[idx];\n-        CBitcoinSecret vchSecret;\n-        if (!vchSecret.SetString(k.get_str())) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n-        }\n-        CKey key = vchSecret.GetKey();\n+        CKey key = DecodeSecret(k.get_str());\n         if (!key.IsValid()) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n         }\n         keystore.AddKey(key);\n     }"
      },
      {
        "sha": "56a81edfb450d355db6b84d9cd444887a7e5acd2",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 12,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38",
        "patch": "@@ -77,7 +77,7 @@ BOOST_AUTO_TEST_CASE(base58_DecodeBase58)\n BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n {\n     UniValue tests = read_json(std::string(json_tests::base58_keys_valid, json_tests::base58_keys_valid + sizeof(json_tests::base58_keys_valid)));\n-    CBitcoinSecret secret;\n+    CKey privkey;\n     CTxDestination destination;\n     SelectParams(CBaseChainParams::MAIN);\n \n@@ -97,9 +97,8 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n         if (isPrivkey) {\n             bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n             // Must be valid private key\n-            BOOST_CHECK_MESSAGE(secret.SetString(exp_base58string), \"!SetString:\"+ strTest);\n-            BOOST_CHECK_MESSAGE(secret.IsValid(), \"!IsValid:\" + strTest);\n-            CKey privkey = secret.GetKey();\n+            privkey = DecodeSecret(exp_base58string);\n+            BOOST_CHECK_MESSAGE(privkey.IsValid(), \"!IsValid:\" + strTest);\n             BOOST_CHECK_MESSAGE(privkey.IsCompressed() == isCompressed, \"compressed mismatch:\" + strTest);\n             BOOST_CHECK_MESSAGE(privkey.size() == exp_payload.size() && std::equal(privkey.begin(), privkey.end(), exp_payload.begin()), \"key mismatch:\" + strTest);\n \n@@ -129,8 +128,8 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n             }\n \n             // Public key must be invalid private key\n-            secret.SetString(exp_base58string);\n-            BOOST_CHECK_MESSAGE(!secret.IsValid(), \"IsValid pubkey as privkey:\" + strTest);\n+            privkey = DecodeSecret(exp_base58string);\n+            BOOST_CHECK_MESSAGE(!privkey.IsValid(), \"IsValid pubkey as privkey:\" + strTest);\n         }\n     }\n }\n@@ -158,9 +157,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n             CKey key;\n             key.Set(exp_payload.begin(), exp_payload.end(), isCompressed);\n             assert(key.IsValid());\n-            CBitcoinSecret secret;\n-            secret.SetKey(key);\n-            BOOST_CHECK_MESSAGE(secret.ToString() == exp_base58string, \"result mismatch: \" + strTest);\n+            BOOST_CHECK_MESSAGE(EncodeSecret(key) == exp_base58string, \"result mismatch: \" + strTest);\n         } else {\n             CTxDestination dest;\n             CScript exp_script(exp_payload.begin(), exp_payload.end());\n@@ -179,7 +176,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n BOOST_AUTO_TEST_CASE(base58_keys_invalid)\n {\n     UniValue tests = read_json(std::string(json_tests::base58_keys_invalid, json_tests::base58_keys_invalid + sizeof(json_tests::base58_keys_invalid))); // Negative testcases\n-    CBitcoinSecret secret;\n+    CKey privkey;\n     CTxDestination destination;\n \n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n@@ -197,8 +194,8 @@ BOOST_AUTO_TEST_CASE(base58_keys_invalid)\n             SelectParams(chain);\n             destination = DecodeDestination(exp_base58string);\n             BOOST_CHECK_MESSAGE(!IsValidDestination(destination), \"IsValid pubkey in mainnet:\" + strTest);\n-            secret.SetString(exp_base58string);\n-            BOOST_CHECK_MESSAGE(!secret.IsValid(), \"IsValid privkey in mainnet:\" + strTest);\n+            privkey = DecodeSecret(exp_base58string);\n+            BOOST_CHECK_MESSAGE(!privkey.IsValid(), \"IsValid privkey in mainnet:\" + strTest);\n         }\n     }\n }"
      },
      {
        "sha": "27a749045c2be789186f38d17835c5c4d92aee7d",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38",
        "patch": "@@ -85,10 +85,7 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize_with_tweak)\n BOOST_AUTO_TEST_CASE(bloom_create_insert_key)\n {\n     std::string strSecret = std::string(\"5Kg1gnAjaLfKiwhhPpGS3QfRg2m6awQvaj98JCZBZQ5SuS2F15C\");\n-    CBitcoinSecret vchSecret;\n-    BOOST_CHECK(vchSecret.SetString(strSecret));\n-\n-    CKey key = vchSecret.GetKey();\n+    CKey key = DecodeSecret(strSecret);\n     CPubKey pubkey = key.GetPubKey();\n     std::vector<unsigned char> vchPubKey(pubkey.begin(), pubkey.end());\n "
      },
      {
        "sha": "5a1464d653c2214b1b2d932d65f587ea40528ce7",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 15,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38",
        "patch": "@@ -32,21 +32,16 @@ BOOST_FIXTURE_TEST_SUITE(key_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(key_test1)\n {\n-    CBitcoinSecret bsecret1, bsecret2, bsecret1C, bsecret2C, baddress1;\n-    BOOST_CHECK( bsecret1.SetString (strSecret1));\n-    BOOST_CHECK( bsecret2.SetString (strSecret2));\n-    BOOST_CHECK( bsecret1C.SetString(strSecret1C));\n-    BOOST_CHECK( bsecret2C.SetString(strSecret2C));\n-    BOOST_CHECK(!baddress1.SetString(strAddressBad));\n-\n-    CKey key1  = bsecret1.GetKey();\n-    BOOST_CHECK(key1.IsCompressed() == false);\n-    CKey key2  = bsecret2.GetKey();\n-    BOOST_CHECK(key2.IsCompressed() == false);\n-    CKey key1C = bsecret1C.GetKey();\n-    BOOST_CHECK(key1C.IsCompressed() == true);\n-    CKey key2C = bsecret2C.GetKey();\n-    BOOST_CHECK(key2C.IsCompressed() == true);\n+    CKey key1  = DecodeSecret(strSecret1);\n+    BOOST_CHECK(key1.IsValid() && !key1.IsCompressed());\n+    CKey key2  = DecodeSecret(strSecret2);\n+    BOOST_CHECK(key2.IsValid() && !key2.IsCompressed());\n+    CKey key1C = DecodeSecret(strSecret1C);\n+    BOOST_CHECK(key1C.IsValid() && key1C.IsCompressed());\n+    CKey key2C = DecodeSecret(strSecret2C);\n+    BOOST_CHECK(key2C.IsValid() && key2C.IsCompressed());\n+    CKey bad_key = DecodeSecret(strAddressBad);\n+    BOOST_CHECK(!bad_key.IsValid());\n \n     CPubKey pubkey1  = key1. GetPubKey();\n     CPubKey pubkey2  = key2. GetPubKey();"
      },
      {
        "sha": "502d49d0aa723bb3ccc3d568bb8279b41d9e2b53",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 29,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38",
        "patch": "@@ -147,13 +147,8 @@ UniValue importprivkey(const JSONRPCRequest& request)\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n         }\n \n-        CBitcoinSecret vchSecret;\n-        bool fGood = vchSecret.SetString(strSecret);\n-\n-        if (!fGood) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n-\n-        CKey key = vchSecret.GetKey();\n-        if (!key.IsValid()) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        CKey key = DecodeSecret(strSecret);\n+        if (!key.IsValid()) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n \n         CPubKey pubkey = key.GetPubKey();\n         assert(key.VerifyPubKey(pubkey));\n@@ -554,9 +549,8 @@ UniValue importwallet(const JSONRPCRequest& request)\n             boost::split(vstr, line, boost::is_any_of(\" \"));\n             if (vstr.size() < 2)\n                 continue;\n-            CBitcoinSecret vchSecret;\n-            if (vchSecret.SetString(vstr[0])) {\n-                CKey key = vchSecret.GetKey();\n+            CKey key = DecodeSecret(vstr[0]);\n+            if (key.IsValid()) {\n                 CPubKey pubkey = key.GetPubKey();\n                 assert(key.VerifyPubKey(pubkey));\n                 CKeyID keyid = pubkey.GetID();\n@@ -659,7 +653,7 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n     if (!pwallet->GetKey(keyid, vchSecret)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Private key for address \" + strAddress + \" is not known\");\n     }\n-    return CBitcoinSecret(vchSecret).ToString();\n+    return EncodeSecret(vchSecret);\n }\n \n \n@@ -755,7 +749,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n         std::string strLabel;\n         CKey key;\n         if (pwallet->GetKey(keyid, key)) {\n-            file << strprintf(\"%s %s \", CBitcoinSecret(key).ToString(), strTime);\n+            file << strprintf(\"%s %s \", EncodeSecret(key), strTime);\n             if (GetWalletAddressesForKey(pwallet, keyid, strAddr, strLabel)) {\n                file << strprintf(\"label=%s\", strLabel);\n             } else if (keyid == masterKeyID) {\n@@ -911,17 +905,10 @@ UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int6\n                 for (size_t i = 0; i < keys.size(); i++) {\n                     const std::string& privkey = keys[i].get_str();\n \n-                    CBitcoinSecret vchSecret;\n-                    bool fGood = vchSecret.SetString(privkey);\n-\n-                    if (!fGood) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n-                    }\n-\n-                    CKey key = vchSecret.GetKey();\n+                    CKey key = DecodeSecret(privkey);\n \n                     if (!key.IsValid()) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n                     }\n \n                     CPubKey pubkey = key.GetPubKey();\n@@ -1018,16 +1005,10 @@ UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int6\n                 const std::string& strPrivkey = keys[0].get_str();\n \n                 // Checks.\n-                CBitcoinSecret vchSecret;\n-                bool fGood = vchSecret.SetString(strPrivkey);\n+                CKey key = DecodeSecret(strPrivkey);\n \n-                if (!fGood) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n-                }\n-\n-                CKey key = vchSecret.GetKey();\n                 if (!key.IsValid()) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n                 }\n \n                 CPubKey pubKey = key.GetPubKey();"
      }
    ]
  },
  {
    "sha": "ebfe217b15d21656a173e5c102f826d17c6c8be4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYmZlMjE3YjE1ZDIxNjU2YTE3M2U1YzEwMmY4MjZkMTdjNmM4YmU0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-20T00:13:46Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-02-20T02:55:21Z"
      },
      "message": "Stop using CBase58Data for ext keys",
      "tree": {
        "sha": "4a461f0b2f02f96935d87faef0fcd7c10feeb415",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a461f0b2f02f96935d87faef0fcd7c10feeb415"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ebfe217b15d21656a173e5c102f826d17c6c8be4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebfe217b15d21656a173e5c102f826d17c6c8be4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ebfe217b15d21656a173e5c102f826d17c6c8be4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebfe217b15d21656a173e5c102f826d17c6c8be4/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38"
      }
    ],
    "stats": {
      "total": 194,
      "additions": 56,
      "deletions": 138
    },
    "files": [
      {
        "sha": "b2c3161d146342f01b0a3c9445b24244642e4852",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 61,
        "changes": 108,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebfe217b15d21656a173e5c102f826d17c6c8be4/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebfe217b15d21656a173e5c102f826d17c6c8be4/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=ebfe217b15d21656a173e5c102f826d17c6c8be4",
        "patch": "@@ -152,67 +152,6 @@ bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRe\n     return DecodeBase58Check(str.c_str(), vchRet);\n }\n \n-CBase58Data::CBase58Data()\n-{\n-    vchVersion.clear();\n-    vchData.clear();\n-}\n-\n-void CBase58Data::SetData(const std::vector<unsigned char>& vchVersionIn, const void* pdata, size_t nSize)\n-{\n-    vchVersion = vchVersionIn;\n-    vchData.resize(nSize);\n-    if (!vchData.empty())\n-        memcpy(vchData.data(), pdata, nSize);\n-}\n-\n-void CBase58Data::SetData(const std::vector<unsigned char>& vchVersionIn, const unsigned char* pbegin, const unsigned char* pend)\n-{\n-    SetData(vchVersionIn, (void*)pbegin, pend - pbegin);\n-}\n-\n-bool CBase58Data::SetString(const char* psz, unsigned int nVersionBytes)\n-{\n-    std::vector<unsigned char> vchTemp;\n-    bool rc58 = DecodeBase58Check(psz, vchTemp);\n-    if ((!rc58) || (vchTemp.size() < nVersionBytes)) {\n-        vchData.clear();\n-        vchVersion.clear();\n-        return false;\n-    }\n-    vchVersion.assign(vchTemp.begin(), vchTemp.begin() + nVersionBytes);\n-    vchData.resize(vchTemp.size() - nVersionBytes);\n-    if (!vchData.empty())\n-        memcpy(vchData.data(), vchTemp.data() + nVersionBytes, vchData.size());\n-    memory_cleanse(vchTemp.data(), vchTemp.size());\n-    return true;\n-}\n-\n-bool CBase58Data::SetString(const std::string& str)\n-{\n-    return SetString(str.c_str());\n-}\n-\n-std::string CBase58Data::ToString() const\n-{\n-    std::vector<unsigned char> vch = vchVersion;\n-    vch.insert(vch.end(), vchData.begin(), vchData.end());\n-    return EncodeBase58Check(vch);\n-}\n-\n-int CBase58Data::CompareTo(const CBase58Data& b58) const\n-{\n-    if (vchVersion < b58.vchVersion)\n-        return -1;\n-    if (vchVersion > b58.vchVersion)\n-        return 1;\n-    if (vchData < b58.vchData)\n-        return -1;\n-    if (vchData > b58.vchData)\n-        return 1;\n-    return 0;\n-}\n-\n namespace\n {\n class DestinationEncoder : public boost::static_visitor<std::string>\n@@ -352,6 +291,53 @@ std::string EncodeSecret(const CKey& key)\n     return ret;\n }\n \n+CExtPubKey DecodeExtPubKey(const std::string& str)\n+{\n+    CExtPubKey key;\n+    std::vector<unsigned char> data;\n+    if (DecodeBase58Check(str, data)) {\n+        const std::vector<unsigned char>& prefix = Params().Base58Prefix(CChainParams::EXT_PUBLIC_KEY);\n+        if (data.size() == BIP32_EXTKEY_SIZE + prefix.size() && std::equal(prefix.begin(), prefix.end(), data.begin())) {\n+            key.Decode(data.data() + prefix.size());\n+        }\n+    }\n+    return key;\n+}\n+\n+std::string EncodeExtPubKey(const CExtPubKey& key)\n+{\n+    std::vector<unsigned char> data = Params().Base58Prefix(CChainParams::EXT_PUBLIC_KEY);\n+    size_t size = data.size();\n+    data.resize(size + BIP32_EXTKEY_SIZE);\n+    key.Encode(data.data() + size);\n+    std::string ret = EncodeBase58Check(data);\n+    return ret;\n+}\n+\n+CExtKey DecodeExtKey(const std::string& str)\n+{\n+    CExtKey key;\n+    std::vector<unsigned char> data;\n+    if (DecodeBase58Check(str, data)) {\n+        const std::vector<unsigned char>& prefix = Params().Base58Prefix(CChainParams::EXT_SECRET_KEY);\n+        if (data.size() == BIP32_EXTKEY_SIZE + prefix.size() && std::equal(prefix.begin(), prefix.end(), data.begin())) {\n+            key.Decode(data.data() + prefix.size());\n+        }\n+    }\n+    return key;\n+}\n+\n+std::string EncodeExtKey(const CExtKey& key)\n+{\n+    std::vector<unsigned char> data = Params().Base58Prefix(CChainParams::EXT_SECRET_KEY);\n+    size_t size = data.size();\n+    data.resize(size + BIP32_EXTKEY_SIZE);\n+    key.Encode(data.data() + size);\n+    std::string ret = EncodeBase58Check(data);\n+    memory_cleanse(data.data(), data.size());\n+    return ret;\n+}\n+\n std::string EncodeDestination(const CTxDestination& dest)\n {\n     return boost::apply_visitor(DestinationEncoder(Params()), dest);"
      },
      {
        "sha": "db33d0859c1f1e5a9054edcff3f3957d9d0f06c9",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 4,
        "deletions": 61,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebfe217b15d21656a173e5c102f826d17c6c8be4/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebfe217b15d21656a173e5c102f826d17c6c8be4/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=ebfe217b15d21656a173e5c102f826d17c6c8be4",
        "patch": "@@ -64,70 +64,13 @@ inline bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRe\n  */\n inline bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet);\n \n-/**\n- * Base class for all base58-encoded data\n- */\n-class CBase58Data\n-{\n-protected:\n-    //! the version byte(s)\n-    std::vector<unsigned char> vchVersion;\n-\n-    //! the actually encoded data\n-    typedef std::vector<unsigned char, zero_after_free_allocator<unsigned char> > vector_uchar;\n-    vector_uchar vchData;\n-\n-    CBase58Data();\n-    void SetData(const std::vector<unsigned char> &vchVersionIn, const void* pdata, size_t nSize);\n-    void SetData(const std::vector<unsigned char> &vchVersionIn, const unsigned char *pbegin, const unsigned char *pend);\n-\n-public:\n-    bool SetString(const char* psz, unsigned int nVersionBytes = 1);\n-    bool SetString(const std::string& str);\n-    std::string ToString() const;\n-    int CompareTo(const CBase58Data& b58) const;\n-\n-    bool operator==(const CBase58Data& b58) const { return CompareTo(b58) == 0; }\n-    bool operator<=(const CBase58Data& b58) const { return CompareTo(b58) <= 0; }\n-    bool operator>=(const CBase58Data& b58) const { return CompareTo(b58) >= 0; }\n-    bool operator< (const CBase58Data& b58) const { return CompareTo(b58) <  0; }\n-    bool operator> (const CBase58Data& b58) const { return CompareTo(b58) >  0; }\n-};\n-\n CKey DecodeSecret(const std::string& str);\n std::string EncodeSecret(const CKey& key);\n \n-template<typename K, int Size, CChainParams::Base58Type Type> class CBitcoinExtKeyBase : public CBase58Data\n-{\n-public:\n-    void SetKey(const K &key) {\n-        unsigned char vch[Size];\n-        key.Encode(vch);\n-        SetData(Params().Base58Prefix(Type), vch, vch+Size);\n-    }\n-\n-    K GetKey() {\n-        K ret;\n-        if (vchData.size() == Size) {\n-            // If base58 encoded data does not hold an ext key, return a !IsValid() key\n-            ret.Decode(vchData.data());\n-        }\n-        return ret;\n-    }\n-\n-    CBitcoinExtKeyBase(const K &key) {\n-        SetKey(key);\n-    }\n-\n-    CBitcoinExtKeyBase(const std::string& strBase58c) {\n-        SetString(strBase58c.c_str(), Params().Base58Prefix(Type).size());\n-    }\n-\n-    CBitcoinExtKeyBase() {}\n-};\n-\n-typedef CBitcoinExtKeyBase<CExtKey, BIP32_EXTKEY_SIZE, CChainParams::EXT_SECRET_KEY> CBitcoinExtKey;\n-typedef CBitcoinExtKeyBase<CExtPubKey, BIP32_EXTKEY_SIZE, CChainParams::EXT_PUBLIC_KEY> CBitcoinExtPubKey;\n+CExtKey DecodeExtKey(const std::string& str);\n+std::string EncodeExtKey(const CExtKey& extkey);\n+CExtPubKey DecodeExtPubKey(const std::string& str);\n+std::string EncodeExtPubKey(const CExtPubKey& extpubkey);\n \n std::string EncodeDestination(const CTxDestination& dest);\n CTxDestination DecodeDestination(const std::string& str);"
      },
      {
        "sha": "d4c29b2635c2eb95d28c88b4239a564953e886be",
        "filename": "src/test/bip32_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 12,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebfe217b15d21656a173e5c102f826d17c6c8be4/src/test/bip32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebfe217b15d21656a173e5c102f826d17c6c8be4/src/test/bip32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bip32_tests.cpp?ref=ebfe217b15d21656a173e5c102f826d17c6c8be4",
        "patch": "@@ -99,20 +99,12 @@ void RunTest(const TestVector &test) {\n         pubkey.Encode(data);\n \n         // Test private key\n-        CBitcoinExtKey b58key; b58key.SetKey(key);\n-        BOOST_CHECK(b58key.ToString() == derive.prv);\n-\n-        CBitcoinExtKey b58keyDecodeCheck(derive.prv);\n-        CExtKey checkKey = b58keyDecodeCheck.GetKey();\n-        assert(checkKey == key); //ensure a base58 decoded key also matches\n+        BOOST_CHECK(EncodeExtKey(key) == derive.prv);\n+        BOOST_CHECK(DecodeExtKey(derive.prv) == key); //ensure a base58 decoded key also matches\n \n         // Test public key\n-        CBitcoinExtPubKey b58pubkey; b58pubkey.SetKey(pubkey);\n-        BOOST_CHECK(b58pubkey.ToString() == derive.pub);\n-\n-        CBitcoinExtPubKey b58PubkeyDecodeCheck(derive.pub);\n-        CExtPubKey checkPubKey = b58PubkeyDecodeCheck.GetKey();\n-        assert(checkPubKey == pubkey); //ensure a base58 decoded pubkey also matches\n+        BOOST_CHECK(EncodeExtPubKey(pubkey) == derive.pub);\n+        BOOST_CHECK(DecodeExtPubKey(derive.pub) == pubkey); //ensure a base58 decoded pubkey also matches\n \n         // Derive new keys\n         CExtKey keyNew;"
      },
      {
        "sha": "bf6c0815fed4466ce30c0b177ce9d5cde881825b",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebfe217b15d21656a173e5c102f826d17c6c8be4/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebfe217b15d21656a173e5c102f826d17c6c8be4/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=ebfe217b15d21656a173e5c102f826d17c6c8be4",
        "patch": "@@ -736,10 +736,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n             CExtKey masterKey;\n             masterKey.SetMaster(key.begin(), key.size());\n \n-            CBitcoinExtKey b58extkey;\n-            b58extkey.SetKey(masterKey);\n-\n-            file << \"# extended private masterkey: \" << b58extkey.ToString() << \"\\n\\n\";\n+            file << \"# extended private masterkey: \" << EncodeExtKey(masterKey) << \"\\n\\n\";\n         }\n     }\n     for (std::vector<std::pair<int64_t, CKeyID> >::const_iterator it = vKeyBirth.begin(); it != vKeyBirth.end(); it++) {"
      }
    ]
  },
  {
    "sha": "119b0f85e2c8b9729228aad5d946144d57ad0f5b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTliMGY4NWUyYzhiOTcyOTIyOGFhZDVkOTQ2MTQ0ZDU3YWQwZjVi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-20T01:12:25Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-02-20T02:55:21Z"
      },
      "message": "Split key_io (address/key encodings) off from base58",
      "tree": {
        "sha": "995176b950d3a072f68e3f799d166362407c5c08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/995176b950d3a072f68e3f799d166362407c5c08"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/119b0f85e2c8b9729228aad5d946144d57ad0f5b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/119b0f85e2c8b9729228aad5d946144d57ad0f5b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/119b0f85e2c8b9729228aad5d946144d57ad0f5b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/119b0f85e2c8b9729228aad5d946144d57ad0f5b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ebfe217b15d21656a173e5c102f826d17c6c8be4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebfe217b15d21656a173e5c102f826d17c6c8be4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ebfe217b15d21656a173e5c102f826d17c6c8be4"
      }
    ],
    "stats": {
      "total": 556,
      "additions": 295,
      "deletions": 261
    },
    "files": [
      {
        "sha": "a213924a5f35d2e995a6f6f591364061c420d660",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -105,6 +105,7 @@ BITCOIN_CORE_H = \\\n   indirectmap.h \\\n   init.h \\\n   key.h \\\n+  key_io.h \\\n   keystore.h \\\n   dbwrapper.h \\\n   limitedmap.h \\\n@@ -327,6 +328,7 @@ libbitcoin_common_a_SOURCES = \\\n   core_read.cpp \\\n   core_write.cpp \\\n   key.cpp \\\n+  key_io.cpp \\\n   keystore.cpp \\\n   netaddress.cpp \\\n   netbase.cpp \\"
      },
      {
        "sha": "982e123a1d36f54c784287724cb757c281402c43",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 214,
        "changes": 214,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -4,20 +4,12 @@\n \n #include <base58.h>\n \n-#include <bech32.h>\n #include <hash.h>\n-#include <script/script.h>\n #include <uint256.h>\n-#include <utilstrencodings.h>\n \n-#include <boost/variant/apply_visitor.hpp>\n-#include <boost/variant/static_visitor.hpp>\n-\n-#include <algorithm>\n #include <assert.h>\n #include <string.h>\n \n-\n /** All alphanumeric characters except for \"0\", \"I\", \"O\", and \"l\" */\n static const char* pszBase58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n \n@@ -151,209 +143,3 @@ bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRe\n {\n     return DecodeBase58Check(str.c_str(), vchRet);\n }\n-\n-namespace\n-{\n-class DestinationEncoder : public boost::static_visitor<std::string>\n-{\n-private:\n-    const CChainParams& m_params;\n-\n-public:\n-    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n-\n-    std::string operator()(const CKeyID& id) const\n-    {\n-        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n-        data.insert(data.end(), id.begin(), id.end());\n-        return EncodeBase58Check(data);\n-    }\n-\n-    std::string operator()(const CScriptID& id) const\n-    {\n-        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-        data.insert(data.end(), id.begin(), id.end());\n-        return EncodeBase58Check(data);\n-    }\n-\n-    std::string operator()(const WitnessV0KeyHash& id) const\n-    {\n-        std::vector<unsigned char> data = {0};\n-        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n-        return bech32::Encode(m_params.Bech32HRP(), data);\n-    }\n-\n-    std::string operator()(const WitnessV0ScriptHash& id) const\n-    {\n-        std::vector<unsigned char> data = {0};\n-        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n-        return bech32::Encode(m_params.Bech32HRP(), data);\n-    }\n-\n-    std::string operator()(const WitnessUnknown& id) const\n-    {\n-        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n-            return {};\n-        }\n-        std::vector<unsigned char> data = {(unsigned char)id.version};\n-        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n-        return bech32::Encode(m_params.Bech32HRP(), data);\n-    }\n-\n-    std::string operator()(const CNoDestination& no) const { return {}; }\n-};\n-\n-CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n-{\n-    std::vector<unsigned char> data;\n-    uint160 hash;\n-    if (DecodeBase58Check(str, data)) {\n-        // base58-encoded Bitcoin addresses.\n-        // Public-key-hash-addresses have version 0 (or 111 testnet).\n-        // The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n-        const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n-        if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n-            std::copy(data.begin() + pubkey_prefix.size(), data.end(), hash.begin());\n-            return CKeyID(hash);\n-        }\n-        // Script-hash-addresses have version 5 (or 196 testnet).\n-        // The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n-        const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-        if (data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n-            std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());\n-            return CScriptID(hash);\n-        }\n-    }\n-    data.clear();\n-    auto bech = bech32::Decode(str);\n-    if (bech.second.size() > 0 && bech.first == params.Bech32HRP()) {\n-        // Bech32 decoding\n-        int version = bech.second[0]; // The first 5 bit symbol is the witness version (0-16)\n-        // The rest of the symbols are converted witness program bytes.\n-        if (ConvertBits<5, 8, false>(data, bech.second.begin() + 1, bech.second.end())) {\n-            if (version == 0) {\n-                {\n-                    WitnessV0KeyHash keyid;\n-                    if (data.size() == keyid.size()) {\n-                        std::copy(data.begin(), data.end(), keyid.begin());\n-                        return keyid;\n-                    }\n-                }\n-                {\n-                    WitnessV0ScriptHash scriptid;\n-                    if (data.size() == scriptid.size()) {\n-                        std::copy(data.begin(), data.end(), scriptid.begin());\n-                        return scriptid;\n-                    }\n-                }\n-                return CNoDestination();\n-            }\n-            if (version > 16 || data.size() < 2 || data.size() > 40) {\n-                return CNoDestination();\n-            }\n-            WitnessUnknown unk;\n-            unk.version = version;\n-            std::copy(data.begin(), data.end(), unk.program);\n-            unk.length = data.size();\n-            return unk;\n-        }\n-    }\n-    return CNoDestination();\n-}\n-} // namespace\n-\n-CKey DecodeSecret(const std::string& str)\n-{\n-    CKey key;\n-    std::vector<unsigned char> data;\n-    if (DecodeBase58Check(str, data)) {\n-        const std::vector<unsigned char>& privkey_prefix = Params().Base58Prefix(CChainParams::SECRET_KEY);\n-        if ((data.size() == 32 + privkey_prefix.size() || (data.size() == 33 + privkey_prefix.size() && data.back() == 1)) &&\n-            std::equal(privkey_prefix.begin(), privkey_prefix.end(), data.begin())) {\n-            bool compressed = data.size() == 33 + privkey_prefix.size();\n-            key.Set(data.begin() + privkey_prefix.size(), data.begin() + privkey_prefix.size() + 32, compressed);\n-        }\n-    }\n-    memory_cleanse(data.data(), data.size());\n-    return key;\n-}\n-\n-std::string EncodeSecret(const CKey& key)\n-{\n-    assert(key.IsValid());\n-    std::vector<unsigned char> data = Params().Base58Prefix(CChainParams::SECRET_KEY);\n-    data.insert(data.end(), key.begin(), key.end());\n-    if (key.IsCompressed()) {\n-        data.push_back(1);\n-    }\n-    std::string ret = EncodeBase58Check(data);\n-    memory_cleanse(data.data(), data.size());\n-    return ret;\n-}\n-\n-CExtPubKey DecodeExtPubKey(const std::string& str)\n-{\n-    CExtPubKey key;\n-    std::vector<unsigned char> data;\n-    if (DecodeBase58Check(str, data)) {\n-        const std::vector<unsigned char>& prefix = Params().Base58Prefix(CChainParams::EXT_PUBLIC_KEY);\n-        if (data.size() == BIP32_EXTKEY_SIZE + prefix.size() && std::equal(prefix.begin(), prefix.end(), data.begin())) {\n-            key.Decode(data.data() + prefix.size());\n-        }\n-    }\n-    return key;\n-}\n-\n-std::string EncodeExtPubKey(const CExtPubKey& key)\n-{\n-    std::vector<unsigned char> data = Params().Base58Prefix(CChainParams::EXT_PUBLIC_KEY);\n-    size_t size = data.size();\n-    data.resize(size + BIP32_EXTKEY_SIZE);\n-    key.Encode(data.data() + size);\n-    std::string ret = EncodeBase58Check(data);\n-    return ret;\n-}\n-\n-CExtKey DecodeExtKey(const std::string& str)\n-{\n-    CExtKey key;\n-    std::vector<unsigned char> data;\n-    if (DecodeBase58Check(str, data)) {\n-        const std::vector<unsigned char>& prefix = Params().Base58Prefix(CChainParams::EXT_SECRET_KEY);\n-        if (data.size() == BIP32_EXTKEY_SIZE + prefix.size() && std::equal(prefix.begin(), prefix.end(), data.begin())) {\n-            key.Decode(data.data() + prefix.size());\n-        }\n-    }\n-    return key;\n-}\n-\n-std::string EncodeExtKey(const CExtKey& key)\n-{\n-    std::vector<unsigned char> data = Params().Base58Prefix(CChainParams::EXT_SECRET_KEY);\n-    size_t size = data.size();\n-    data.resize(size + BIP32_EXTKEY_SIZE);\n-    key.Encode(data.data() + size);\n-    std::string ret = EncodeBase58Check(data);\n-    memory_cleanse(data.data(), data.size());\n-    return ret;\n-}\n-\n-std::string EncodeDestination(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(DestinationEncoder(Params()), dest);\n-}\n-\n-CTxDestination DecodeDestination(const std::string& str)\n-{\n-    return DecodeDestination(str, Params());\n-}\n-\n-bool IsValidDestinationString(const std::string& str, const CChainParams& params)\n-{\n-    return IsValidDestination(DecodeDestination(str, params));\n-}\n-\n-bool IsValidDestinationString(const std::string& str)\n-{\n-    return IsValidDestinationString(str, Params());\n-}"
      },
      {
        "sha": "8f2833bec9a944d2fe44b88c3a7b43dd59ab8169",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 2,
        "deletions": 21,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -14,12 +14,6 @@\n #ifndef BITCOIN_BASE58_H\n #define BITCOIN_BASE58_H\n \n-#include <chainparams.h>\n-#include <key.h>\n-#include <pubkey.h>\n-#include <script/standard.h>\n-#include <support/allocators/zeroafterfree.h>\n-\n #include <string>\n #include <vector>\n \n@@ -56,25 +50,12 @@ std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn);\n  * Decode a base58-encoded string (psz) that includes a checksum into a byte\n  * vector (vchRet), return true if decoding is successful\n  */\n-inline bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet);\n+bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet);\n \n /**\n  * Decode a base58-encoded string (str) that includes a checksum into a byte\n  * vector (vchRet), return true if decoding is successful\n  */\n-inline bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet);\n-\n-CKey DecodeSecret(const std::string& str);\n-std::string EncodeSecret(const CKey& key);\n-\n-CExtKey DecodeExtKey(const std::string& str);\n-std::string EncodeExtKey(const CExtKey& extkey);\n-CExtPubKey DecodeExtPubKey(const std::string& str);\n-std::string EncodeExtPubKey(const CExtPubKey& extpubkey);\n-\n-std::string EncodeDestination(const CTxDestination& dest);\n-CTxDestination DecodeDestination(const std::string& str);\n-bool IsValidDestinationString(const std::string& str);\n-bool IsValidDestinationString(const std::string& str, const CChainParams& params);\n+bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet);\n \n #endif // BITCOIN_BASE58_H"
      },
      {
        "sha": "fcd836fb450dcbefdcc5d542a6c2709fbaf8270b",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -6,11 +6,11 @@\n #include <config/bitcoin-config.h>\n #endif\n \n-#include <base58.h>\n #include <clientversion.h>\n #include <coins.h>\n #include <consensus/consensus.h>\n #include <core_io.h>\n+#include <key_io.h>\n #include <keystore.h>\n #include <policy/policy.h>\n #include <policy/rbf.h>"
      },
      {
        "sha": "91742b7d1b550fd20160bd9dcda4619d2f5d6959",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -4,9 +4,9 @@\n \n #include <core_io.h>\n \n-#include <base58.h>\n #include <consensus/consensus.h>\n #include <consensus/validation.h>\n+#include <key_io.h>\n #include <script/script.h>\n #include <script/standard.h>\n #include <serialize.h>"
      },
      {
        "sha": "82ae733006728706a4481b9e2a435d93eae6c0c3",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -4,9 +4,9 @@\n \n #include <httprpc.h>\n \n-#include <base58.h>\n #include <chainparams.h>\n #include <httpserver.h>\n+#include <key_io.h>\n #include <rpc/protocol.h>\n #include <rpc/server.h>\n #include <random.h>"
      },
      {
        "sha": "20df945d8def1ec16d081735cdc386f51442b450",
        "filename": "src/key_io.cpp",
        "status": "added",
        "additions": 223,
        "deletions": 0,
        "changes": 223,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/key_io.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/key_io.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key_io.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -0,0 +1,223 @@\n+// Copyright (c) 2014-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key_io.h>\n+\n+#include <base58.h>\n+#include <bech32.h>\n+#include <script/script.h>\n+#include <utilstrencodings.h>\n+\n+#include <boost/variant/apply_visitor.hpp>\n+#include <boost/variant/static_visitor.hpp>\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <algorithm>\n+\n+namespace\n+{\n+class DestinationEncoder : public boost::static_visitor<std::string>\n+{\n+private:\n+    const CChainParams& m_params;\n+\n+public:\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n+\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n+\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n+\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return {};\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n+    std::string operator()(const CNoDestination& no) const { return {}; }\n+};\n+\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n+{\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    if (DecodeBase58Check(str, data)) {\n+        // base58-encoded Bitcoin addresses.\n+        // Public-key-hash-addresses have version 0 (or 111 testnet).\n+        // The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n+        const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + pubkey_prefix.size(), data.end(), hash.begin());\n+            return CKeyID(hash);\n+        }\n+        // Script-hash-addresses have version 5 (or 196 testnet).\n+        // The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n+        const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        if (data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());\n+            return CScriptID(hash);\n+        }\n+    }\n+    data.clear();\n+    auto bech = bech32::Decode(str);\n+    if (bech.second.size() > 0 && bech.first == params.Bech32HRP()) {\n+        // Bech32 decoding\n+        int version = bech.second[0]; // The first 5 bit symbol is the witness version (0-16)\n+        // The rest of the symbols are converted witness program bytes.\n+        if (ConvertBits<5, 8, false>(data, bech.second.begin() + 1, bech.second.end())) {\n+            if (version == 0) {\n+                {\n+                    WitnessV0KeyHash keyid;\n+                    if (data.size() == keyid.size()) {\n+                        std::copy(data.begin(), data.end(), keyid.begin());\n+                        return keyid;\n+                    }\n+                }\n+                {\n+                    WitnessV0ScriptHash scriptid;\n+                    if (data.size() == scriptid.size()) {\n+                        std::copy(data.begin(), data.end(), scriptid.begin());\n+                        return scriptid;\n+                    }\n+                }\n+                return CNoDestination();\n+            }\n+            if (version > 16 || data.size() < 2 || data.size() > 40) {\n+                return CNoDestination();\n+            }\n+            WitnessUnknown unk;\n+            unk.version = version;\n+            std::copy(data.begin(), data.end(), unk.program);\n+            unk.length = data.size();\n+            return unk;\n+        }\n+    }\n+    return CNoDestination();\n+}\n+} // namespace\n+\n+CKey DecodeSecret(const std::string& str)\n+{\n+    CKey key;\n+    std::vector<unsigned char> data;\n+    if (DecodeBase58Check(str, data)) {\n+        const std::vector<unsigned char>& privkey_prefix = Params().Base58Prefix(CChainParams::SECRET_KEY);\n+        if ((data.size() == 32 + privkey_prefix.size() || (data.size() == 33 + privkey_prefix.size() && data.back() == 1)) &&\n+            std::equal(privkey_prefix.begin(), privkey_prefix.end(), data.begin())) {\n+            bool compressed = data.size() == 33 + privkey_prefix.size();\n+            key.Set(data.begin() + privkey_prefix.size(), data.begin() + privkey_prefix.size() + 32, compressed);\n+        }\n+    }\n+    memory_cleanse(data.data(), data.size());\n+    return key;\n+}\n+\n+std::string EncodeSecret(const CKey& key)\n+{\n+    assert(key.IsValid());\n+    std::vector<unsigned char> data = Params().Base58Prefix(CChainParams::SECRET_KEY);\n+    data.insert(data.end(), key.begin(), key.end());\n+    if (key.IsCompressed()) {\n+        data.push_back(1);\n+    }\n+    std::string ret = EncodeBase58Check(data);\n+    memory_cleanse(data.data(), data.size());\n+    return ret;\n+}\n+\n+CExtPubKey DecodeExtPubKey(const std::string& str)\n+{\n+    CExtPubKey key;\n+    std::vector<unsigned char> data;\n+    if (DecodeBase58Check(str, data)) {\n+        const std::vector<unsigned char>& prefix = Params().Base58Prefix(CChainParams::EXT_PUBLIC_KEY);\n+        if (data.size() == BIP32_EXTKEY_SIZE + prefix.size() && std::equal(prefix.begin(), prefix.end(), data.begin())) {\n+            key.Decode(data.data() + prefix.size());\n+        }\n+    }\n+    return key;\n+}\n+\n+std::string EncodeExtPubKey(const CExtPubKey& key)\n+{\n+    std::vector<unsigned char> data = Params().Base58Prefix(CChainParams::EXT_PUBLIC_KEY);\n+    size_t size = data.size();\n+    data.resize(size + BIP32_EXTKEY_SIZE);\n+    key.Encode(data.data() + size);\n+    std::string ret = EncodeBase58Check(data);\n+    return ret;\n+}\n+\n+CExtKey DecodeExtKey(const std::string& str)\n+{\n+    CExtKey key;\n+    std::vector<unsigned char> data;\n+    if (DecodeBase58Check(str, data)) {\n+        const std::vector<unsigned char>& prefix = Params().Base58Prefix(CChainParams::EXT_SECRET_KEY);\n+        if (data.size() == BIP32_EXTKEY_SIZE + prefix.size() && std::equal(prefix.begin(), prefix.end(), data.begin())) {\n+            key.Decode(data.data() + prefix.size());\n+        }\n+    }\n+    return key;\n+}\n+\n+std::string EncodeExtKey(const CExtKey& key)\n+{\n+    std::vector<unsigned char> data = Params().Base58Prefix(CChainParams::EXT_SECRET_KEY);\n+    size_t size = data.size();\n+    data.resize(size + BIP32_EXTKEY_SIZE);\n+    key.Encode(data.data() + size);\n+    std::string ret = EncodeBase58Check(data);\n+    memory_cleanse(data.data(), data.size());\n+    return ret;\n+}\n+\n+std::string EncodeDestination(const CTxDestination& dest)\n+{\n+    return boost::apply_visitor(DestinationEncoder(Params()), dest);\n+}\n+\n+CTxDestination DecodeDestination(const std::string& str)\n+{\n+    return DecodeDestination(str, Params());\n+}\n+\n+bool IsValidDestinationString(const std::string& str, const CChainParams& params)\n+{\n+    return IsValidDestination(DecodeDestination(str, params));\n+}\n+\n+bool IsValidDestinationString(const std::string& str)\n+{\n+    return IsValidDestinationString(str, Params());\n+}"
      },
      {
        "sha": "6fc9a8059a543b725283544e79cb1d406faf0351",
        "filename": "src/key_io.h",
        "status": "added",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/key_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/key_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key_io.h?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -0,0 +1,29 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KEYIO_H\n+#define BITCOIN_KEYIO_H\n+\n+#include <chainparams.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <script/standard.h>\n+\n+#include <string>\n+\n+CKey DecodeSecret(const std::string& str);\n+std::string EncodeSecret(const CKey& key);\n+\n+CExtKey DecodeExtKey(const std::string& str);\n+std::string EncodeExtKey(const CExtKey& extkey);\n+CExtPubKey DecodeExtPubKey(const std::string& str);\n+std::string EncodeExtPubKey(const CExtPubKey& extpubkey);\n+\n+std::string EncodeDestination(const CTxDestination& dest);\n+CTxDestination DecodeDestination(const std::string& str);\n+bool IsValidDestinationString(const std::string& str);\n+bool IsValidDestinationString(const std::string& str, const CChainParams& params);\n+\n+#endif // BITCOIN_KEYIO_H"
      },
      {
        "sha": "4f9a79d654546cee5f3dbe3981c45191b54a44d3",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -7,10 +7,9 @@\n #include <qt/guiutil.h>\n #include <qt/walletmodel.h>\n \n-#include <base58.h>\n+#include <key_io.h>\n #include <wallet/wallet.h>\n \n-\n #include <QFont>\n #include <QDebug>\n "
      },
      {
        "sha": "6a76358a7834561c2c81d0df633c6d1ba967a3eb",
        "filename": "src/qt/bitcoinaddressvalidator.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/bitcoinaddressvalidator.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/bitcoinaddressvalidator.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinaddressvalidator.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -4,7 +4,7 @@\n \n #include <qt/bitcoinaddressvalidator.h>\n \n-#include <base58.h>\n+#include <key_io.h>\n \n /* Base58 characters are:\n      \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\""
      },
      {
        "sha": "b83755ab3092e216423ecca43b53e73e3f0e564d",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -15,6 +15,7 @@\n \n #include <wallet/coincontrol.h>\n #include <init.h>\n+#include <key_io.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n #include <validation.h> // For mempool"
      },
      {
        "sha": "4aa5827761dccb382816042fb4144d883bb19513",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -9,7 +9,10 @@\n #include <qt/qvalidatedlineedit.h>\n #include <qt/walletmodel.h>\n \n+#include <base58.h>\n+#include <chainparams.h>\n #include <primitives/transaction.h>\n+#include <key_io.h>\n #include <init.h>\n #include <policy/policy.h>\n #include <protocol.h>"
      },
      {
        "sha": "357e98a53c6c5b632195a7ca9f22f248688c4fee",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -9,6 +9,7 @@\n \n #include <qt/paymentrequestplus.h>\n \n+#include <script/script.h>\n #include <util.h>\n \n #include <stdexcept>"
      },
      {
        "sha": "b1b60cf582dbd970d80a583dabf1f4ace73b6404",
        "filename": "src/qt/paymentrequestplus.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/paymentrequestplus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/paymentrequestplus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.h?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -10,7 +10,8 @@\n #include <qt/paymentrequest.pb.h>\n #pragma GCC diagnostic pop\n \n-#include <base58.h>\n+#include <amount.h>\n+#include <script/script.h>\n \n #include <openssl/x509.h>\n "
      },
      {
        "sha": "8ad4fa31f18ae719225049ee5a07ad236facd61e",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -8,9 +8,9 @@\n #include <qt/guiutil.h>\n #include <qt/optionsmodel.h>\n \n-#include <base58.h>\n #include <chainparams.h>\n #include <policy/policy.h>\n+#include <key_io.h>\n #include <ui_interface.h>\n #include <util.h>\n #include <wallet/wallet.h>"
      },
      {
        "sha": "db5a8a4ebec30bcc6fa7c43409d94f5238e00fd2",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -14,8 +14,8 @@\n #include <qt/platformstyle.h>\n #include <qt/sendcoinsentry.h>\n \n-#include <base58.h>\n #include <chainparams.h>\n+#include <key_io.h>\n #include <wallet/coincontrol.h>\n #include <validation.h> // mempool and minRelayTxFee\n #include <ui_interface.h>"
      },
      {
        "sha": "8dade8df7984eb97c921389e0e81392727fd5ced",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -10,8 +10,8 @@\n #include <qt/platformstyle.h>\n #include <qt/walletmodel.h>\n \n-#include <base58.h>\n #include <init.h>\n+#include <key_io.h>\n #include <validation.h> // For strMessageMagic\n #include <wallet/wallet.h>\n "
      },
      {
        "sha": "29ef4b4c9e7ec029fe71c4e7c25113d4d20aea1c",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -8,6 +8,7 @@\n #include <qt/test/paymentrequestdata.h>\n \n #include <amount.h>\n+#include <chainparams.h>\n #include <random.h>\n #include <script/script.h>\n #include <script/standard.h>"
      },
      {
        "sha": "5ba75cc91de34321d4d0a085d72cd5ab187a41e1",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -10,6 +10,7 @@\n #include <qt/transactiontablemodel.h>\n #include <qt/transactionview.h>\n #include <qt/walletmodel.h>\n+#include <key_io.h>\n #include <test/test_bitcoin.h>\n #include <validation.h>\n #include <wallet/wallet.h>"
      },
      {
        "sha": "a68488ac9be5b6fb431151ffcbea643cab9990fe",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -9,8 +9,8 @@\n #include <qt/paymentserver.h>\n #include <qt/transactionrecord.h>\n \n-#include <base58.h>\n #include <consensus/consensus.h>\n+#include <key_io.h>\n #include <validation.h>\n #include <script/script.h>\n #include <timedata.h>"
      },
      {
        "sha": "2830149655e0f4b12123c60415a69362c2b7120a",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -4,8 +4,8 @@\n \n #include <qt/transactionrecord.h>\n \n-#include <base58.h>\n #include <consensus/consensus.h>\n+#include <key_io.h>\n #include <validation.h>\n #include <timedata.h>\n #include <wallet/wallet.h>"
      },
      {
        "sha": "e7d9d276d70cda4edad3a9846de4145d0404ccac",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -14,8 +14,8 @@\n #include <qt/sendcoinsdialog.h>\n #include <qt/transactiontablemodel.h>\n \n-#include <base58.h>\n #include <chain.h>\n+#include <key_io.h>\n #include <keystore.h>\n #include <validation.h>\n #include <net.h> // for g_connman"
      },
      {
        "sha": "811996b98f7f92b853f2698c10d3228b0c66a616",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -5,6 +5,11 @@\n #ifndef BITCOIN_QT_WALLETMODEL_H\n #define BITCOIN_QT_WALLETMODEL_H\n \n+#include <amount.h>\n+#include <key.h>\n+#include <serialize.h>\n+#include <script/standard.h>\n+\n #include <qt/paymentrequestplus.h>\n #include <qt/walletmodeltransaction.h>\n "
      },
      {
        "sha": "3073a49d0db3c526cc56c85ba3c26dcfc6d0f799",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -3,7 +3,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <base58.h>\n #include <amount.h>\n #include <chain.h>\n #include <chainparams.h>\n@@ -13,6 +12,7 @@\n #include <core_io.h>\n #include <init.h>\n #include <validation.h>\n+#include <key_io.h>\n #include <miner.h>\n #include <net.h>\n #include <policy/fees.h>"
      },
      {
        "sha": "6f0913410399375406c0507cadda92ff8a749d69",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -3,12 +3,12 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <base58.h>\n #include <chain.h>\n #include <clientversion.h>\n #include <core_io.h>\n #include <crypto/ripemd160.h>\n #include <init.h>\n+#include <key_io.h>\n #include <validation.h>\n #include <httpserver.h>\n #include <net.h>"
      },
      {
        "sha": "8dcfb48e9ae137a9c96f7f0eb65dbf0a72b2ae7e",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -3,7 +3,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <base58.h>\n #include <chain.h>\n #include <coins.h>\n #include <consensus/validation.h>\n@@ -12,6 +11,7 @@\n #include <keystore.h>\n #include <validation.h>\n #include <validationinterface.h>\n+#include <key_io.h>\n #include <merkleblock.h>\n #include <net.h>\n #include <policy/policy.h>"
      },
      {
        "sha": "35401bf876b2570891c3c45c4d49c2f334ffb5a7",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -5,9 +5,9 @@\n \n #include <rpc/server.h>\n \n-#include <base58.h>\n #include <fs.h>\n #include <init.h>\n+#include <key_io.h>\n #include <random.h>\n #include <sync.h>\n #include <ui_interface.h>"
      },
      {
        "sha": "593962e7104eb99a36af56c8250e2133fe16150d",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <base58.h>\n+#include <key_io.h>\n #include <keystore.h>\n #include <pubkey.h>\n #include <rpc/protocol.h>"
      },
      {
        "sha": "63885a7affbb09a4a7908512e0f2d02a01877a03",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -9,6 +9,7 @@\n #include <test/data/base58_keys_valid.json.h>\n \n #include <key.h>\n+#include <key_io.h>\n #include <script/script.h>\n #include <test/test_bitcoin.h>\n #include <uint256.h>"
      },
      {
        "sha": "3c9ff1877dd8fda9964e6df06ab6e33132f11c6f",
        "filename": "src/test/bip32_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/test/bip32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/test/bip32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bip32_tests.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -4,8 +4,8 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include <base58.h>\n #include <key.h>\n+#include <key_io.h>\n #include <uint256.h>\n #include <util.h>\n #include <utilstrencodings.h>"
      },
      {
        "sha": "73c8eb5168abb941fdde90b93c1a0502b6237a43",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -4,9 +4,9 @@\n \n #include <bloom.h>\n \n-#include <base58.h>\n #include <clientversion.h>\n #include <key.h>\n+#include <key_io.h>\n #include <merkleblock.h>\n #include <primitives/block.h>\n #include <random.h>"
      },
      {
        "sha": "64c57f0705f00bf362a32e7a1b2702cf8a977cab",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -4,7 +4,7 @@\n \n #include <key.h>\n \n-#include <base58.h>\n+#include <key_io.h>\n #include <script/script.h>\n #include <uint256.h>\n #include <util.h>"
      },
      {
        "sha": "892e4f2dac98b43e10ec8e1ef178fa8ebd6ec971",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -5,8 +5,8 @@\n #include <rpc/server.h>\n #include <rpc/client.h>\n \n-#include <base58.h>\n #include <core_io.h>\n+#include <key_io.h>\n #include <netbase.h>\n \n #include <test/test_bitcoin.h>"
      },
      {
        "sha": "a2b7ce6b02a01247777f81741c2ce70b60fe9bf1",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <base58.h>\n #include <chain.h>\n+#include <key_io.h>\n #include <rpc/safemode.h>\n #include <rpc/server.h>\n #include <wallet/init.h>"
      },
      {
        "sha": "52b68e97ee1e71d75bf86bdd004f6a46ed743aa7",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -4,12 +4,12 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <amount.h>\n-#include <base58.h>\n #include <chain.h>\n #include <consensus/validation.h>\n #include <core_io.h>\n #include <httpserver.h>\n #include <validation.h>\n+#include <key_io.h>\n #include <net.h>\n #include <policy/feerate.h>\n #include <policy/fees.h>"
      },
      {
        "sha": "3b86fdc4854c74eb01c54e2926ba490af57b1ae7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -5,7 +5,6 @@\n \n #include <wallet/wallet.h>\n \n-#include <base58.h>\n #include <checkpoints.h>\n #include <chain.h>\n #include <wallet/coincontrol.h>\n@@ -14,6 +13,7 @@\n #include <fs.h>\n #include <wallet/init.h>\n #include <key.h>\n+#include <key_io.h>\n #include <keystore.h>\n #include <validation.h>\n #include <net.h>"
      },
      {
        "sha": "c14fbd1e8ca7c91bf0da22ee2b4194116af19010",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -5,10 +5,10 @@\n \n #include <wallet/walletdb.h>\n \n-#include <base58.h>\n #include <consensus/tx_verify.h>\n #include <consensus/validation.h>\n #include <fs.h>\n+#include <key_io.h>\n #include <protocol.h>\n #include <serialize.h>\n #include <sync.h>"
      }
    ]
  },
  {
    "sha": "92f1f8b3197c2ba3cf65556070509838098975a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MmYxZjhiMzE5N2MyYmEzY2Y2NTU1NjA3MDUwOTgzODA5ODk3NWE0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-20T23:57:44Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-02-20T02:55:21Z"
      },
      "message": "Split off key_io_tests from base58_tests",
      "tree": {
        "sha": "6096fc5d7b30a3ab33a633e721eed3a8a2259eae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6096fc5d7b30a3ab33a633e721eed3a8a2259eae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92f1f8b3197c2ba3cf65556070509838098975a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92f1f8b3197c2ba3cf65556070509838098975a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92f1f8b3197c2ba3cf65556070509838098975a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92f1f8b3197c2ba3cf65556070509838098975a4/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/119b0f85e2c8b9729228aad5d946144d57ad0f5b"
      }
    ],
    "stats": {
      "total": 298,
      "additions": 156,
      "deletions": 142
    },
    "files": [
      {
        "sha": "4ee9102519dff8615d37c5834de4eac4e0264c9f",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92f1f8b3197c2ba3cf65556070509838098975a4/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92f1f8b3197c2ba3cf65556070509838098975a4/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=92f1f8b3197c2ba3cf65556070509838098975a4",
        "patch": "@@ -9,13 +9,13 @@ TEST_SRCDIR = test\n TEST_BINARY=test/test_bitcoin$(EXEEXT)\n \n JSON_TEST_FILES = \\\n-  test/data/script_tests.json \\\n-  test/data/base58_keys_valid.json \\\n   test/data/base58_encode_decode.json \\\n-  test/data/base58_keys_invalid.json \\\n+  test/data/key_io_valid.json \\\n+  test/data/key_io_invalid.json \\\n+  test/data/script_tests.json \\\n+  test/data/sighash.json \\\n   test/data/tx_invalid.json \\\n-  test/data/tx_valid.json \\\n-  test/data/sighash.json\n+  test/data/tx_valid.json\n \n RAW_TEST_FILES =\n \n@@ -45,6 +45,7 @@ BITCOIN_TESTS =\\\n   test/DoS_tests.cpp \\\n   test/getarg_tests.cpp \\\n   test/hash_tests.cpp \\\n+  test/key_io_tests.cpp \\\n   test/key_tests.cpp \\\n   test/limitedmap_tests.cpp \\\n   test/dbwrapper_tests.cpp \\"
      },
      {
        "sha": "f90d4f90cb655ca2a19b5a909b892737d4da6015",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 137,
        "changes": 138,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92f1f8b3197c2ba3cf65556070509838098975a4/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92f1f8b3197c2ba3cf65556070509838098975a4/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=92f1f8b3197c2ba3cf65556070509838098975a4",
        "patch": "@@ -2,18 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <base58.h>\n-\n #include <test/data/base58_encode_decode.json.h>\n-#include <test/data/base58_keys_invalid.json.h>\n-#include <test/data/base58_keys_valid.json.h>\n \n-#include <key.h>\n-#include <key_io.h>\n-#include <script/script.h>\n+#include <base58.h>\n #include <test/test_bitcoin.h>\n-#include <uint256.h>\n-#include <util.h>\n #include <utilstrencodings.h>\n \n #include <univalue.h>\n@@ -74,132 +66,4 @@ BOOST_AUTO_TEST_CASE(base58_DecodeBase58)\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n }\n \n-// Goal: check that parsed keys match test payload\n-BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n-{\n-    UniValue tests = read_json(std::string(json_tests::base58_keys_valid, json_tests::base58_keys_valid + sizeof(json_tests::base58_keys_valid)));\n-    CKey privkey;\n-    CTxDestination destination;\n-    SelectParams(CBaseChainParams::MAIN);\n-\n-    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n-        UniValue test = tests[idx];\n-        std::string strTest = test.write();\n-        if (test.size() < 3) { // Allow for extra stuff (useful for comments)\n-            BOOST_ERROR(\"Bad test: \" << strTest);\n-            continue;\n-        }\n-        std::string exp_base58string = test[0].get_str();\n-        std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n-        const UniValue &metadata = test[2].get_obj();\n-        bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n-        SelectParams(find_value(metadata, \"chain\").get_str());\n-        bool try_case_flip = find_value(metadata, \"tryCaseFlip\").isNull() ? false : find_value(metadata, \"tryCaseFlip\").get_bool();\n-        if (isPrivkey) {\n-            bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n-            // Must be valid private key\n-            privkey = DecodeSecret(exp_base58string);\n-            BOOST_CHECK_MESSAGE(privkey.IsValid(), \"!IsValid:\" + strTest);\n-            BOOST_CHECK_MESSAGE(privkey.IsCompressed() == isCompressed, \"compressed mismatch:\" + strTest);\n-            BOOST_CHECK_MESSAGE(privkey.size() == exp_payload.size() && std::equal(privkey.begin(), privkey.end(), exp_payload.begin()), \"key mismatch:\" + strTest);\n-\n-            // Private key must be invalid public key\n-            destination = DecodeDestination(exp_base58string);\n-            BOOST_CHECK_MESSAGE(!IsValidDestination(destination), \"IsValid privkey as pubkey:\" + strTest);\n-        } else {\n-            // Must be valid public key\n-            destination = DecodeDestination(exp_base58string);\n-            CScript script = GetScriptForDestination(destination);\n-            BOOST_CHECK_MESSAGE(IsValidDestination(destination), \"!IsValid:\" + strTest);\n-            BOOST_CHECK_EQUAL(HexStr(script), HexStr(exp_payload));\n-\n-            // Try flipped case version\n-            for (char& c : exp_base58string) {\n-                if (c >= 'a' && c <= 'z') {\n-                    c = (c - 'a') + 'A';\n-                } else if (c >= 'A' && c <= 'Z') {\n-                    c = (c - 'A') + 'a';\n-                }\n-            }\n-            destination = DecodeDestination(exp_base58string);\n-            BOOST_CHECK_MESSAGE(IsValidDestination(destination) == try_case_flip, \"!IsValid case flipped:\" + strTest);\n-            if (IsValidDestination(destination)) {\n-                script = GetScriptForDestination(destination);\n-                BOOST_CHECK_EQUAL(HexStr(script), HexStr(exp_payload));\n-            }\n-\n-            // Public key must be invalid private key\n-            privkey = DecodeSecret(exp_base58string);\n-            BOOST_CHECK_MESSAGE(!privkey.IsValid(), \"IsValid pubkey as privkey:\" + strTest);\n-        }\n-    }\n-}\n-\n-// Goal: check that generated keys match test vectors\n-BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n-{\n-    UniValue tests = read_json(std::string(json_tests::base58_keys_valid, json_tests::base58_keys_valid + sizeof(json_tests::base58_keys_valid)));\n-\n-    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n-        UniValue test = tests[idx];\n-        std::string strTest = test.write();\n-        if (test.size() < 3) // Allow for extra stuff (useful for comments)\n-        {\n-            BOOST_ERROR(\"Bad test: \" << strTest);\n-            continue;\n-        }\n-        std::string exp_base58string = test[0].get_str();\n-        std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n-        const UniValue &metadata = test[2].get_obj();\n-        bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n-        SelectParams(find_value(metadata, \"chain\").get_str());\n-        if (isPrivkey) {\n-            bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n-            CKey key;\n-            key.Set(exp_payload.begin(), exp_payload.end(), isCompressed);\n-            assert(key.IsValid());\n-            BOOST_CHECK_MESSAGE(EncodeSecret(key) == exp_base58string, \"result mismatch: \" + strTest);\n-        } else {\n-            CTxDestination dest;\n-            CScript exp_script(exp_payload.begin(), exp_payload.end());\n-            ExtractDestination(exp_script, dest);\n-            std::string address = EncodeDestination(dest);\n-\n-            BOOST_CHECK_EQUAL(address, exp_base58string);\n-        }\n-    }\n-\n-    SelectParams(CBaseChainParams::MAIN);\n-}\n-\n-\n-// Goal: check that base58 parsing code is robust against a variety of corrupted data\n-BOOST_AUTO_TEST_CASE(base58_keys_invalid)\n-{\n-    UniValue tests = read_json(std::string(json_tests::base58_keys_invalid, json_tests::base58_keys_invalid + sizeof(json_tests::base58_keys_invalid))); // Negative testcases\n-    CKey privkey;\n-    CTxDestination destination;\n-\n-    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n-        UniValue test = tests[idx];\n-        std::string strTest = test.write();\n-        if (test.size() < 1) // Allow for extra stuff (useful for comments)\n-        {\n-            BOOST_ERROR(\"Bad test: \" << strTest);\n-            continue;\n-        }\n-        std::string exp_base58string = test[0].get_str();\n-\n-        // must be invalid as public and as private key\n-        for (auto chain : { CBaseChainParams::MAIN, CBaseChainParams::TESTNET, CBaseChainParams::REGTEST }) {\n-            SelectParams(chain);\n-            destination = DecodeDestination(exp_base58string);\n-            BOOST_CHECK_MESSAGE(!IsValidDestination(destination), \"IsValid pubkey in mainnet:\" + strTest);\n-            privkey = DecodeSecret(exp_base58string);\n-            BOOST_CHECK_MESSAGE(!privkey.IsValid(), \"IsValid privkey in mainnet:\" + strTest);\n-        }\n-    }\n-}\n-\n-\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "2056c7491c491bdab249ea193dd35f82a3731eb6",
        "filename": "src/test/data/key_io_invalid.json",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92f1f8b3197c2ba3cf65556070509838098975a4/src/test/data/key_io_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92f1f8b3197c2ba3cf65556070509838098975a4/src/test/data/key_io_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/key_io_invalid.json?ref=92f1f8b3197c2ba3cf65556070509838098975a4",
        "previous_filename": "src/test/data/base58_keys_invalid.json"
      },
      {
        "sha": "8418a6002da810ca44f7a84561777af3aa99ab5c",
        "filename": "src/test/data/key_io_valid.json",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92f1f8b3197c2ba3cf65556070509838098975a4/src/test/data/key_io_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92f1f8b3197c2ba3cf65556070509838098975a4/src/test/data/key_io_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/key_io_valid.json?ref=92f1f8b3197c2ba3cf65556070509838098975a4",
        "previous_filename": "src/test/data/base58_keys_valid.json"
      },
      {
        "sha": "1ac1e0015bf3e569c641680966cd42c2ae6642dc",
        "filename": "src/test/key_io_tests.cpp",
        "status": "added",
        "additions": 149,
        "deletions": 0,
        "changes": 149,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92f1f8b3197c2ba3cf65556070509838098975a4/src/test/key_io_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92f1f8b3197c2ba3cf65556070509838098975a4/src/test/key_io_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_io_tests.cpp?ref=92f1f8b3197c2ba3cf65556070509838098975a4",
        "patch": "@@ -0,0 +1,149 @@\n+// Copyright (c) 2011-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/data/key_io_invalid.json.h>\n+#include <test/data/key_io_valid.json.h>\n+\n+#include <key.h>\n+#include <key_io.h>\n+#include <script/script.h>\n+#include <utilstrencodings.h>\n+#include <test/test_bitcoin.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <univalue.h>\n+\n+extern UniValue read_json(const std::string& jsondata);\n+\n+BOOST_FIXTURE_TEST_SUITE(key_io_tests, BasicTestingSetup)\n+\n+// Goal: check that parsed keys match test payload\n+BOOST_AUTO_TEST_CASE(key_io_valid_parse)\n+{\n+    UniValue tests = read_json(std::string(json_tests::key_io_valid, json_tests::key_io_valid + sizeof(json_tests::key_io_valid)));\n+    CKey privkey;\n+    CTxDestination destination;\n+    SelectParams(CBaseChainParams::MAIN);\n+\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        UniValue test = tests[idx];\n+        std::string strTest = test.write();\n+        if (test.size() < 3) { // Allow for extra stuff (useful for comments)\n+            BOOST_ERROR(\"Bad test: \" << strTest);\n+            continue;\n+        }\n+        std::string exp_base58string = test[0].get_str();\n+        std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n+        const UniValue &metadata = test[2].get_obj();\n+        bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n+        SelectParams(find_value(metadata, \"chain\").get_str());\n+        bool try_case_flip = find_value(metadata, \"tryCaseFlip\").isNull() ? false : find_value(metadata, \"tryCaseFlip\").get_bool();\n+        if (isPrivkey) {\n+            bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n+            // Must be valid private key\n+            privkey = DecodeSecret(exp_base58string);\n+            BOOST_CHECK_MESSAGE(privkey.IsValid(), \"!IsValid:\" + strTest);\n+            BOOST_CHECK_MESSAGE(privkey.IsCompressed() == isCompressed, \"compressed mismatch:\" + strTest);\n+            BOOST_CHECK_MESSAGE(privkey.size() == exp_payload.size() && std::equal(privkey.begin(), privkey.end(), exp_payload.begin()), \"key mismatch:\" + strTest);\n+\n+            // Private key must be invalid public key\n+            destination = DecodeDestination(exp_base58string);\n+            BOOST_CHECK_MESSAGE(!IsValidDestination(destination), \"IsValid privkey as pubkey:\" + strTest);\n+        } else {\n+            // Must be valid public key\n+            destination = DecodeDestination(exp_base58string);\n+            CScript script = GetScriptForDestination(destination);\n+            BOOST_CHECK_MESSAGE(IsValidDestination(destination), \"!IsValid:\" + strTest);\n+            BOOST_CHECK_EQUAL(HexStr(script), HexStr(exp_payload));\n+\n+            // Try flipped case version\n+            for (char& c : exp_base58string) {\n+                if (c >= 'a' && c <= 'z') {\n+                    c = (c - 'a') + 'A';\n+                } else if (c >= 'A' && c <= 'Z') {\n+                    c = (c - 'A') + 'a';\n+                }\n+            }\n+            destination = DecodeDestination(exp_base58string);\n+            BOOST_CHECK_MESSAGE(IsValidDestination(destination) == try_case_flip, \"!IsValid case flipped:\" + strTest);\n+            if (IsValidDestination(destination)) {\n+                script = GetScriptForDestination(destination);\n+                BOOST_CHECK_EQUAL(HexStr(script), HexStr(exp_payload));\n+            }\n+\n+            // Public key must be invalid private key\n+            privkey = DecodeSecret(exp_base58string);\n+            BOOST_CHECK_MESSAGE(!privkey.IsValid(), \"IsValid pubkey as privkey:\" + strTest);\n+        }\n+    }\n+}\n+\n+// Goal: check that generated keys match test vectors\n+BOOST_AUTO_TEST_CASE(key_io_valid_gen)\n+{\n+    UniValue tests = read_json(std::string(json_tests::key_io_valid, json_tests::key_io_valid + sizeof(json_tests::key_io_valid)));\n+\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        UniValue test = tests[idx];\n+        std::string strTest = test.write();\n+        if (test.size() < 3) // Allow for extra stuff (useful for comments)\n+        {\n+            BOOST_ERROR(\"Bad test: \" << strTest);\n+            continue;\n+        }\n+        std::string exp_base58string = test[0].get_str();\n+        std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n+        const UniValue &metadata = test[2].get_obj();\n+        bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n+        SelectParams(find_value(metadata, \"chain\").get_str());\n+        if (isPrivkey) {\n+            bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n+            CKey key;\n+            key.Set(exp_payload.begin(), exp_payload.end(), isCompressed);\n+            assert(key.IsValid());\n+            BOOST_CHECK_MESSAGE(EncodeSecret(key) == exp_base58string, \"result mismatch: \" + strTest);\n+        } else {\n+            CTxDestination dest;\n+            CScript exp_script(exp_payload.begin(), exp_payload.end());\n+            ExtractDestination(exp_script, dest);\n+            std::string address = EncodeDestination(dest);\n+\n+            BOOST_CHECK_EQUAL(address, exp_base58string);\n+        }\n+    }\n+\n+    SelectParams(CBaseChainParams::MAIN);\n+}\n+\n+\n+// Goal: check that base58 parsing code is robust against a variety of corrupted data\n+BOOST_AUTO_TEST_CASE(key_io_invalid)\n+{\n+    UniValue tests = read_json(std::string(json_tests::key_io_invalid, json_tests::key_io_invalid + sizeof(json_tests::key_io_invalid))); // Negative testcases\n+    CKey privkey;\n+    CTxDestination destination;\n+\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        UniValue test = tests[idx];\n+        std::string strTest = test.write();\n+        if (test.size() < 1) // Allow for extra stuff (useful for comments)\n+        {\n+            BOOST_ERROR(\"Bad test: \" << strTest);\n+            continue;\n+        }\n+        std::string exp_base58string = test[0].get_str();\n+\n+        // must be invalid as public and as private key\n+        for (auto chain : { CBaseChainParams::MAIN, CBaseChainParams::TESTNET, CBaseChainParams::REGTEST }) {\n+            SelectParams(chain);\n+            destination = DecodeDestination(exp_base58string);\n+            BOOST_CHECK_MESSAGE(!IsValidDestination(destination), \"IsValid pubkey in mainnet:\" + strTest);\n+            privkey = DecodeSecret(exp_base58string);\n+            BOOST_CHECK_MESSAGE(!privkey.IsValid(), \"IsValid privkey in mainnet:\" + strTest);\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]