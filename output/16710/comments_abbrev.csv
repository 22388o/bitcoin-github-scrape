practicalswift,2019-08-24 14:49:13,"Concept ACK -- consistent use of `override` prevents bugs\n\n@hebasto Is this change complete in the sense that it addresses all instances of missing `override` in the code?\n\nNote that `clang`'s `-Winconsistent-missing-override` only checks for inconsistent `override` usage within a class. `gcc`:s `-Wsuggest-override` checks for missing overrides in general. `clang-tidy`:s `modernize-use-ove",https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-524556151,524556151,
DrahtBot,2019-08-24 14:53:00,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18857 (build: avoid repetitions when enabling warnings in configure.ac by vasild)\n* #17908 (qt: Remove QFont warnings wi",https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-524556412,524556412,
hebasto,2019-08-24 18:07:15,"@practicalswift \n> Note that `clang`'s `-Winconsistent-missing-override` only checks for inconsistent `override` usage **within a class**.\n\nI did know that. Thank you.\n",https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-524570183,524570183,
hebasto,2019-08-24 18:36:11,"@practicalswift \n> Is this change complete in the sense that it addresses all instances of missing `override` in the code?\n\nYes, it is (with the latest push).",https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-524571969,524571969,
practicalswift,2019-08-24 21:06:59,"ACK 6a8d284bf7595bd200cb27973a262c929cb72e14 -- diff looks correct\n\nThanks for making the change complete across the codebase.\n\nI think we should consider building with `-Werror=suggest-override` by default. But that is perhaps out of the scope this PR :-)",https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-524580267,524580267,
promag,2019-08-25 00:12:58,"Concept ACK.\n\n> But that is perhaps out of the scope this\n\nWhy? Otherwise this may be necessary again right?",https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-524589742,524589742,
hebasto,2019-08-25 04:48:04,"@practicalswift  @promag Thank you for your reviews.\n\n> I think we should consider building with `-Werror=suggest-override` by default.\n\nHow to skip warnings on `leveldb` subtree and `qt/paymentrequest.pb.h`?",https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-524600331,524600331,
practicalswift,2019-08-25 09:53:10,"> > But that is perhaps out of the scope this\n> \n> Why? Otherwise this may be necessary again right?\n\nTrue! If @hebasto wants to incorporate `-Werror=suggest-override` as part of this PR I'm first in line to give a warm ACK :-)",https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-524616551,524616551,
practicalswift,2019-08-25 09:56:33,"@hebasto \n\n> How to skip warnings on leveldb subtree and qt/paymentrequest.pb.h?\n\nCould you make use of `-isystem`? See examples in @Empact's PRs #14920 and #15112.",https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-524616750,524616750,
hebasto,2019-08-25 13:39:46,"@practicalswift \n> Could you make use of `-isystem`?\n\n@theuni https://github.com/bitcoin/bitcoin/pull/14920#issuecomment-452505849\n> I'm really not a fan of disabling warnings for 3rd party headers...\n\nI tend to agree with @theuni regarding `isystem` approach ~~, so I'm going to leave this PR as it is for now~~.",https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-524631273,524631273,
hebasto,2019-08-26 13:15:12,"@practicalswift @promag \n>> Why? Otherwise this may be necessary again right?\n>\n> True! If @hebasto wants to incorporate -Werror=suggest-override as part of this PR I'm first in line to give a warm ACK :-)\n\nThe latest push incorporates `-Wsuggest-override` as a compiler option.\n\nPR description has been updated.",https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-524855754,524855754,
hebasto,2019-08-27 17:42:21,Fixed MSVC build.,https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-525408362,525408362,
hebasto,2019-08-28 23:11:02,Fixed protobuf stuff.,https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-525956892,525956892,
hebasto,2019-08-29 11:51:39,@practicalswift Would you mind re-reviewing this PR?,https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-526151033,526151033,
hebasto,2019-08-30 04:08:00,Rebased.,https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-526447962,526447962,
laanwj,2019-09-30 11:52:25,"Concept ACK.\n\nNot convinced about `--enable-wleveldb`. Unless the warnings are purely silly, I think we should try to get these problems solved upstream not hide them.\n(and if you really want to have a different warning level for built-in dependencies, maybe make it general and cover secp256k1 too?)\n\n> I think we should consider building with -Werror=suggest-override by default. But that",https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-536527310,536527310,
hebasto,2019-10-01 18:06:10,"> Not convinced about `--enable-wleveldb`.\n\nIt seems there is a commit https://github.com/google/leveldb/commit/28e6d238be73e743c963fc0a26395b783a7565e2 to upstream related to `-Wsuggest-override`.\n\n> Unless the warnings are purely silly, I think we should try to get these problems solved upstream not hide them.\n\nE.g., #15539.",https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-537158548,537158548,
laanwj,2019-10-03 05:21:14,"> It seems there is a commit google/leveldb@28e6d23 to upstream related to -Wsuggest-override.\n\nNice, let's pull that in. It might be time to do a leveldb update from upstream anyhow for 0.20.\n\n> E.g., #15539.\n\nYes, would agree those are silly. I guess we could disable specific warnings for leveldb, if there's no change of them being solved, I just dislike the idea of a blanket disable",https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-537791694,537791694,
hebasto,2019-11-02 13:40:08,Rebased.,https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-549044812,549044812,
practicalswift,2019-11-02 14:38:59,"ACK 46047bc4e2bb9063e35fb56b17236eead4052ea8 -- diff looks correct\n\nThanks for keeping this PR rebased!",https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-549049487,549049487,
hebasto,2020-02-10 19:15:13,"Rebased and dropped a commit from #16722; see: https://github.com/bitcoin/bitcoin/pull/16722#issuecomment-584111086.\n\nThere are 3 warnings from the `src/leveldb` subtree only:\n```\n$ gcc --version | grep gcc\ngcc (Ubuntu 7.4.0-1ubuntu1~18.04.1) 7.4.0\n$ ./autogen.sh\n$ ./configure\n$ make -j 4 > /dev/null\n/usr/bin/ar: `u' modifier ignored since `D' is the default (see `U')\nar: `u' m",https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-584302542,584302542,
hebasto,2020-02-25 19:19:28,Rebased after #18034 has been merged.,https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-591022197,591022197,
practicalswift,2020-02-25 19:26:26,ACK ec530398dbb3138d26c4783f880e4efe439fc450 -- looks good: let's get this merged :),https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-591025468,591025468,
Empact,2020-02-27 23:08:36,Code Review ACK https://github.com/bitcoin/bitcoin/pull/16710/commits/ec530398dbb3138d26c4783f880e4efe439fc450 - also confirmed moves out of Q_SLOTS were appropriate.,https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-592223980,592223980,
MarcoFalke,2020-03-02 14:52:46,"I am fine with the `src/qt` changes, but I am not sure if it make sense to ""enforce"" this with a warning that spits out misleading information on older and buggy compilers.",https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-593440505,593440505,
theuni,2020-03-02 20:13:36,"It may make sense to use a bunch of test-cases to test whether or not we should enable this, and include those cases that are known to cause issues with buggy compilers. Then just say ""if your compiler can't handle all test-cases correctly, we'll just turn the warnings off wholesale"".\n\nIIRC the c++xy m4 test macro takes a similar approach.",https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-593595425,593595425,
hebasto,2020-03-02 20:36:34,"Updated ec530398dbb3138d26c4783f880e4efe439fc450 -> f33cc5446b3d8358fa274cfee0287b30f82ceaab ([pr16710.10](https://github.com/hebasto/bitcoin/commits/pr16710.10) -> [pr16710.11](https://github.com/hebasto/bitcoin/commits/pr16710.11), [compare](https://github.com/hebasto/bitcoin/compare/pr16710.10..pr16710.11)):\n\n- removed ignoring of GCC ""-Wsuggest-override"" diagnostic for `leveldb/env.h` head",https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-593608787,593608787,
hebasto,2020-03-02 20:43:48,"@theuni \n> It may make sense to use a bunch of test-cases to test whether or not we should enable this, and include those cases that are known to cause issues with buggy compilers. Then just say ""if your compiler can't handle all test-cases correctly, we'll just turn the warnings off wholesale"".\n> \n> IIRC the c++xy m4 test macro takes a similar approach.\n\nYes, m4 macro could test if `-Ws",https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-593612019,593612019,
practicalswift,2020-03-02 20:45:52,ACK f33cc5446b3d8358fa274cfee0287b30f82ceaab,https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-593612872,593612872,
hebasto,2020-03-02 20:50:31,"@MarcoFalke \n> I am fine with the `src/qt` changes, but I am not sure if it make sense to ""enforce"" this with a warning that spits out misleading information on older and buggy compilers.\n\nIf a false positive warning suppression approach seems too wordy, the last two commits could be dropped. In that case we will refuse benefits of `-Wsuggest-override`.",https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-593614773,593614773,
theuni,2020-03-02 22:12:15,"> But it seems overkill to ""turn the warnings off wholesale"". Especially considering that ""buggy"" GCC just fires some false-positive warnings, which could be easily suppressed in well-documented manner.\n\nIf a warning flag is known to be buggy and it can be detected, we should turn it off. It's perfectly reasonable imo to say ""If override warnings for this compiler are known to be broken, don't",https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-593650055,593650055,
hebasto,2020-03-02 22:41:32,"Updated f33cc5446b3d8358fa274cfee0287b30f82ceaab -> d09c985ac4c7289875529da68f4a0ed1f04361f6 ([pr16710.11](https://github.com/hebasto/bitcoin/commits/pr16710.11) -> [pr16710.12](https://github.com/hebasto/bitcoin/commits/pr16710.12), [compare](https://github.com/hebasto/bitcoin/compare/pr16710.11..pr16710.12)):\n\n- fixed MSVC build",https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-593661245,593661245,
practicalswift,2020-03-02 23:25:10,ACK d09c985ac4c7289875529da68f4a0ed1f04361f6,https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-593675551,593675551,
hebasto,2020-03-14 07:36:12,Rebased due to the conflict with #18204.,https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-599023198,599023198,
practicalswift,2020-03-14 08:20:12,ACK 2e9e8c8122c3c837e61f8b8b703a7807762ee550 -- patch looks correct,https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-599027194,599027194,
vasild,2020-04-24 10:26:33,"ACK 2e9e8c812, compiles with Clang 11.0.0.\n\nThe more `-W...` the better :)\n\nTo clarify: Clang does not support the newly added flag, so there we properly don't add it. It also compiles with gcc 9.3.0 where `-Wsuggest-override` is detected and used.",https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-618931686,618931686,
practicalswift,2020-04-24 12:50:02,Reviewers of this PR might be interested in reviewing #17895 which enables Clang's `-Wconditional-uninitialized` (warn on potential uninitialized reads).,https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-618988893,618988893,
hebasto,2020-05-08 07:41:16,Rebased due to the conflict with #18843.,https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-625685297,625685297,
MarcoFalke,2020-05-08 10:58:34,"What do you think about splitting out the gui changes from the build system changes? They are the bulk of the changes, but the easiest to review. Mostly move-only + adding the override, whereas the other changes are refactoring walletdb and changing the build stystem.",https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-625760894,625760894,
hebasto,2020-05-08 11:54:23,"@MarcoFalke \n> What do you think about splitting out the gui changes from the build system changes? They are the bulk of the changes, but the easiest to review. Mostly move-only + adding the override, whereas the other changes are refactoring walletdb and changing the build stystem.\n\nDone in #18914.",https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-625779683,625779683,
practicalswift,2020-05-09 06:11:20,ACK a96adef72a837c7988ee45990a69d9b15f0b7ef1,https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-626113224,626113224,
hebasto,2020-05-11 18:47:42,"Updated a96adef72a837c7988ee45990a69d9b15f0b7ef1 -> d44a13b4b2dac522e5f68ca5bdd9cd972ae6d5e9 ([pr16710.14](https://github.com/hebasto/bitcoin/commits/pr16710.14) -> [pr16710.15](https://github.com/hebasto/bitcoin/commits/pr16710.15)):\n\n- rebased\n- addressed @vasild's [comment](https://github.com/bitcoin/bitcoin/pull/16710#discussion_r423118228):\n> I would suggest to not enable the new flag",https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-626887028,626887028,
MarcoFalke,2020-05-11 19:27:17,"I don't think d44a13b4b2dac522e5f68ca5bdd9cd972ae6d5e9 is maintainable. How would devs with compilers that are not buggy figure out where to add the pragmas?\n\nI think the only thing that can be done is enable the warning for compilers that support it and skip it if the compiler does not support it fully and correctly.",https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-626909124,626909124,
vasild,2020-05-11 19:28:26,"ACK d44a13b4b\n\nThe current code contains just a few `final` methods so it is kind of ok to surround them with `#pragma suppress if gcc < 9.2`.\n\nHowever, every addition of a new `final` method would either produce a warning with gcc < 9.2 or require to be also surrounded by the `#pragma` stuff. I wonder if it would be better to only conditionally enable `-Wsuggest-override` in `configure.ac",https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-626909692,626909692,
hebasto,2020-05-12 09:10:56,"Updated d44a13b4b2dac522e5f68ca5bdd9cd972ae6d5e9 -> ea6849fe2fb53bfd50e3805b45746a36208b0781 ([pr16710.15](https://github.com/hebasto/bitcoin/commits/pr16710.15) -> [pr16710.16](https://github.com/hebasto/bitcoin/commits/pr16710.16), [diff](https://github.com/hebasto/bitcoin/compare/pr16710.15..pr16710.16)):\n\n- `-Wsuggest-override` and `-Werror=suggest-override` are enabled only for non-buggy ",https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-627216048,627216048,
hebasto,2020-05-12 09:13:10,"@theuni \n> > But it seems overkill to ""turn the warnings off wholesale"". Especially considering that ""buggy"" GCC just fires some false-positive warnings, which could be easily suppressed in well-documented manner.\n> \n> If a warning flag is known to be buggy and it can be detected, we should turn it off. It's perfectly reasonable imo to say ""If override warnings for this compiler are known to",https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-627217083,627217083,
hebasto,2020-05-12 10:08:14,"Updated ea6849fe2fb53bfd50e3805b45746a36208b0781 -> e6211d8b54338418575ffb762860c7634e10c977 ([pr16710.16](https://github.com/hebasto/bitcoin/commits/pr16710.16) -> [pr16710.17](https://github.com/hebasto/bitcoin/commits/pr16710.17), [diff](https://github.com/hebasto/bitcoin/compare/pr16710.16..pr16710.17)):\n\n- addressed @vasild's comments",https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-627245385,627245385,
hebasto,2020-05-12 15:09:48,"@fanquake Thank you for your review. TIL :)\n\nUpdated e6211d8b54338418575ffb762860c7634e10c977 -> 839add193b13c17a40f42ff69d973caeb800d3f2 ([pr16710.17](https://github.com/hebasto/bitcoin/commits/pr16710.17) -> [pr16710.18](https://github.com/hebasto/bitcoin/commits/pr16710.18), [diff](https://github.com/hebasto/bitcoin/compare/pr16710.17..pr16710.18)).\n\n- addressed @fanquake's [comment](ht",https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-627406029,627406029,
practicalswift,2020-05-12 15:11:02,ACK 839add193b13c17a40f42ff69d973caeb800d3f2 assuming Travis is happy: patch looks correct,https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-627406790,627406790,
vasild,2020-05-12 15:31:13,"ACK 839add193\n\nEven better! I confirm it works as intended with GCC 8.4, 9.3 and Clang 11.0.",https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-627419001,627419001,
MarcoFalke,2020-03-01 20:50:26,"This is final, but not virtual, so override is already implied. I am not sure why the compiler warns here?!",https://github.com/bitcoin/bitcoin/pull/16710#discussion_r386139557,386139557,src/script/descriptor.cpp
fanquake,2020-03-02 03:19:48,"GCC (Debian 8.3.0-6) will warn about this:\n```bash\n  CXX      script/libbitcoin_common_a-descriptor.o\nscript/descriptor.cpp:517:10: warning: 'virtual bool {anonymous}::AddressDescriptor::IsSolvable() const' can be marked override [-Wsuggest-override]\n     bool IsSolvable() const final { return false; }\n          ^~~~~~~~~~\n```\n\nHowever `clang-tidy` with [modernize-use-override](htt",https://github.com/bitcoin/bitcoin/pull/16710#discussion_r386181866,386181866,src/script/descriptor.cpp
hebasto,2020-03-02 08:15:35,"> This is final, but not virtual, so override is already implied. I am not sure why the compiler warns here?!\n\nThis GCC behavior fixed for 9.2 ([GCC Bugzilla – Bug 78010](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=78010)).",https://github.com/bitcoin/bitcoin/pull/16710#discussion_r386245806,386245806,src/script/descriptor.cpp
hebasto,2020-03-02 09:56:15,"> However `clang-tidy` with [modernize-use-override](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-override.html) will tell you that it, along with a bunch of the other overrides added here are redundant:\n\nThere is an [`AllowOverrideAndFinal`](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-override.html#cmdoption-arg-allowoverrideandfinal) option:\n> If set to non",https://github.com/bitcoin/bitcoin/pull/16710#discussion_r386293078,386293078,src/script/descriptor.cpp
hebasto,2020-03-02 20:44:46,Addressed in the latest [push](https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-593608787).,https://github.com/bitcoin/bitcoin/pull/16710#discussion_r386639439,386639439,src/script/descriptor.cpp
vasild,2020-05-11 15:20:14,"Enabling `-Wsuggest-override` produces new warnings (with gcc 10):\n\n```\n.../src/leveldb/db/c.cc: In function 'leveldb_filterpolicy_t* leveldb_filterpolicy_create_bloom(int)':\n.../src/leveldb/db/c.cc:474:17: warning: 'virtual const char* leveldb_filterpolicy_create_bloom(int)::Wrapper::Name() const' can be marked override [-Wsuggest-override]\n  474 |     const char* Name() const { return ",https://github.com/bitcoin/bitcoin/pull/16710#discussion_r423118228,423118228,configure.ac
hebasto,2020-05-11 18:48:16,[Updated](https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-626887028).,https://github.com/bitcoin/bitcoin/pull/16710#discussion_r423246306,423246306,configure.ac
vasild,2020-05-12 09:49:16,"nit: just ""... GCC version ..."" is ok too (remove ""compiler"" because ""GCC"" means ""GNU Compiler Collection"")",https://github.com/bitcoin/bitcoin/pull/16710#discussion_r423607091,423607091,configure.ac
vasild,2020-05-12 09:52:21,`s/WARN_CXXFLAGS/ERROR_CXXFLAGS/`,https://github.com/bitcoin/bitcoin/pull/16710#discussion_r423608934,423608934,configure.ac
hebasto,2020-05-12 10:08:35,[Updated](https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-627245385).,https://github.com/bitcoin/bitcoin/pull/16710#discussion_r423618268,423618268,configure.ac
hebasto,2020-05-12 10:08:48,[Updated](https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-627245385).,https://github.com/bitcoin/bitcoin/pull/16710#discussion_r423618378,423618378,configure.ac
fanquake,2020-05-12 13:17:14,"If we do keep this as is, let's drop this call to `AC_MSG_WARN` and the `AC_MSG_CHECKING` above. I don't think we need any extra, verbose out here. Especially since this will be the default case most people compiling going forward.",https://github.com/bitcoin/bitcoin/pull/16710#discussion_r423724173,423724173,configure.ac
hebasto,2020-05-12 15:10:14,[Updated](https://github.com/bitcoin/bitcoin/pull/16710#issuecomment-627406029).,https://github.com/bitcoin/bitcoin/pull/16710#discussion_r423812694,423812694,configure.ac
