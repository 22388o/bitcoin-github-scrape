[
  {
    "sha": "2cb460966a15595b8eb3c393a4ff47b7ab1011f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyY2I0NjA5NjZhMTU1OTViOGViM2MzOTNhNGZmNDdiN2FiMTAxMWY4",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2013-08-10T14:14:50Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2013-08-12T06:58:05Z"
      },
      "message": "display txfee in first sendCoinsDialog message box\n\nConflicts while rebasing with master:\n\tbitcoin-qt.pro\n\nSigned-off-by: Jonas Schnelli <jonas.schnelli@include7.ch>",
      "tree": {
        "sha": "2edf5cd10f71df93829fe2693f368040caf4f7fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2edf5cd10f71df93829fe2693f368040caf4f7fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2cb460966a15595b8eb3c393a4ff47b7ab1011f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cb460966a15595b8eb3c393a4ff47b7ab1011f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2cb460966a15595b8eb3c393a4ff47b7ab1011f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cb460966a15595b8eb3c393a4ff47b7ab1011f8/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6cc766fa55c0d74916d615c69689e9e798bf0aba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cc766fa55c0d74916d615c69689e9e798bf0aba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6cc766fa55c0d74916d615c69689e9e798bf0aba"
      }
    ],
    "stats": {
      "total": 250,
      "additions": 210,
      "deletions": 40
    },
    "files": [
      {
        "sha": "a8a6f5d332504ba9abb8c5b4da51620092629504",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cb460966a15595b8eb3c393a4ff47b7ab1011f8/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cb460966a15595b8eb3c393a4ff47b7ab1011f8/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=2cb460966a15595b8eb3c393a4ff47b7ab1011f8",
        "patch": "@@ -216,7 +216,8 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/threadsafety.h \\\n     src/limitedmap.h \\\n     src/qt/splashscreen.h \\\n-    src/qt/intro.h\n+    src/qt/intro.h \\\n+    src/qt/walletmodeltransaction.h\n \n SOURCES += src/qt/bitcoin.cpp \\\n     src/qt/bitcoingui.cpp \\\n@@ -288,7 +289,8 @@ SOURCES += src/qt/bitcoin.cpp \\\n     src/leveldb.cpp \\\n     src/txdb.cpp \\\n     src/qt/splashscreen.cpp \\\n-    src/qt/intro.cpp\n+    src/qt/intro.cpp \\\n+    src/qt/walletmodeltransaction.cpp\n \n RESOURCES += src/qt/bitcoin.qrc\n "
      },
      {
        "sha": "d933bfbfa39bd0e588254d14a76372e7659bb2f1",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 66,
        "deletions": 15,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cb460966a15595b8eb3c393a4ff47b7ab1011f8/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cb460966a15595b8eb3c393a4ff47b7ab1011f8/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=2cb460966a15595b8eb3c393a4ff47b7ab1011f8",
        "patch": "@@ -93,25 +93,26 @@ void SendCoinsDialog::on_sendButton_clicked()\n     QStringList formatted;\n     foreach(const SendCoinsRecipient &rcp, recipients)\n     {\n+        QString recipientElement = QString(\"<b>%1</b> \").arg(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, rcp.amount));\n+        recipientElement.append(tr(\"to\"));\n+\n+        if(rcp.label.length() > 0)\n+        {\n #if QT_VERSION < 0x050000\n-        formatted.append(tr(\"<b>%1</b> to %2 (%3)\").arg(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, rcp.amount), Qt::escape(rcp.label), rcp.address));\n+            recipientElement.append(QString(\" %1 <span style='font-size:8px;'>%2</span><br />\").arg(Qt::escape(rcp.label), rcp.address)); // add address with label\n #else\n-        formatted.append(tr(\"<b>%1</b> to %2 (%3)\").arg(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, rcp.amount), rcp.label.toHtmlEscaped(), rcp.address));\n+            recipientElement.append(QString(\" %1 <span style='font-size:8px;'>%2</span><br />\").arg(rcp.label.toHtmlEscaped(), rcp.address)); // add address with label\n #endif\n+        }\n+        else\n+        {\n+            recipientElement.append(QString(\" %1<br />\").arg(rcp.address)); // add address WITHOUT label\n+        }\n+        formatted.append(recipientElement);\n     }\n \n     fNewRecipientAllowed = false;\n \n-    QMessageBox::StandardButton retval = QMessageBox::question(this, tr(\"Confirm send coins\"),\n-                          tr(\"Are you sure you want to send %1?\").arg(formatted.join(tr(\" and \"))),\n-          QMessageBox::Yes|QMessageBox::Cancel,\n-          QMessageBox::Cancel);\n-\n-    if(retval != QMessageBox::Yes)\n-    {\n-        fNewRecipientAllowed = true;\n-        return;\n-    }\n \n     WalletModel::UnlockContext ctx(model->requestUnlock());\n     if(!ctx.isValid())\n@@ -121,8 +122,11 @@ void SendCoinsDialog::on_sendButton_clicked()\n         return;\n     }\n \n-    WalletModel::SendCoinsReturn sendstatus = model->sendCoins(recipients);\n-    switch(sendstatus.status)\n+    // prepare transaction for getting txFee earlier\n+    WalletModelTransaction currentTransaction(recipients);\n+    WalletModel::SendCoinsReturn prepareStatus = model->prepareTransaction(currentTransaction);\n+\n+    switch(prepareStatus.status)\n     {\n     case WalletModel::InvalidAddress:\n         QMessageBox::warning(this, tr(\"Send Coins\"),\n@@ -142,7 +146,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n     case WalletModel::AmountWithFeeExceedsBalance:\n         QMessageBox::warning(this, tr(\"Send Coins\"),\n             tr(\"The total exceeds your balance when the %1 transaction fee is included.\").\n-            arg(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, sendstatus.fee)),\n+            arg(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, currentTransaction.getTransactionFee())),\n             QMessageBox::Ok, QMessageBox::Ok);\n         break;\n     case WalletModel::DuplicateAddress:\n@@ -155,6 +159,51 @@ void SendCoinsDialog::on_sendButton_clicked()\n             tr(\"Error: Transaction creation failed!\"),\n             QMessageBox::Ok, QMessageBox::Ok);\n         break;\n+    case WalletModel::Aborted: // User aborted, nothing to do\n+        break;\n+    default:\n+        break;\n+    }\n+\n+    if(prepareStatus.status != WalletModel::OK) {\n+        fNewRecipientAllowed = true;\n+        return;\n+    }\n+\n+    qint64 txFee = currentTransaction.getTransactionFee();\n+    QString questionString = tr(\"Are you sure you want to send?\");\n+    questionString.append(\"<br /><br />%1\");\n+\n+    if(txFee > 0)\n+    {\n+        // append fee string if a fee is required\n+        questionString.append(\"<hr /><span style='color:#aa0000;'>\");\n+        questionString.append(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, txFee));\n+        questionString.append(\"</span> \");\n+        questionString.append(tr(\"added as transaction fee\"));\n+    }\n+    if(txFee > 0 || recipients.count() > 1)\n+    {\n+        // add total amount string if there are more then one recipients or a fee is required\n+        questionString.append(\"<hr />\");\n+        questionString.append(tr(\"Total Amount %1\").arg(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, currentTransaction.getTotalTransactionAmount()+txFee)));\n+    }\n+\n+    QMessageBox::StandardButton retval = QMessageBox::question(this, tr(\"Confirm send coins\"),\n+        questionString.arg(formatted.join(\"<br />\")),\n+        QMessageBox::Yes|QMessageBox::Cancel,\n+        QMessageBox::Cancel);\n+\n+    if(retval != QMessageBox::Yes)\n+    {\n+        fNewRecipientAllowed = true;\n+        return;\n+    }\n+\n+    // now send the prepared transaction\n+    WalletModel::SendCoinsReturn sendstatus = model->sendCoins(currentTransaction);\n+    switch(sendstatus.status)\n+    {\n     case WalletModel::TransactionCommitFailed:\n         QMessageBox::warning(this, tr(\"Send Coins\"),\n             tr(\"Error: The transaction was rejected. This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\"),\n@@ -165,6 +214,8 @@ void SendCoinsDialog::on_sendButton_clicked()\n     case WalletModel::OK:\n         accept();\n         break;\n+    default:\n+        break;\n     }\n     fNewRecipientAllowed = true;\n }"
      },
      {
        "sha": "2082c08f3a79178c2421841d464782576b5a5b24",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cb460966a15595b8eb3c393a4ff47b7ab1011f8/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cb460966a15595b8eb3c393a4ff47b7ab1011f8/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=2cb460966a15595b8eb3c393a4ff47b7ab1011f8",
        "patch": "@@ -9,6 +9,7 @@ namespace Ui {\n class WalletModel;\n class SendCoinsEntry;\n class SendCoinsRecipient;\n+class OptionsModel;\n \n QT_BEGIN_NAMESPACE\n class QUrl;"
      },
      {
        "sha": "ebd594f75f282fcf9fb23ebaa1d5994e192835aa",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 17,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cb460966a15595b8eb3c393a4ff47b7ab1011f8/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cb460966a15595b8eb3c393a4ff47b7ab1011f8/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=2cb460966a15595b8eb3c393a4ff47b7ab1011f8",
        "patch": "@@ -5,7 +5,6 @@\n #include \"transactiontablemodel.h\"\n \n #include \"ui_interface.h\"\n-#include \"wallet.h\"\n #include \"walletdb.h\" // for BackupWallet\n #include \"base58.h\"\n \n@@ -124,11 +123,14 @@ bool WalletModel::validateAddress(const QString &address)\n     return addressParsed.IsValid();\n }\n \n-WalletModel::SendCoinsReturn WalletModel::sendCoins(const QList<SendCoinsRecipient> &recipients)\n+WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransaction &transaction)\n {\n     qint64 total = 0;\n     QSet<QString> setAddress;\n     QString hex;\n+    qint64 nFeeRequired = 0;\n+\n+    QList<SendCoinsRecipient> recipients = transaction.getRecipients();\n \n     if(recipients.empty())\n     {\n@@ -163,12 +165,15 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(const QList<SendCoinsRecipie\n \n     if((total + nTransactionFee) > getBalance())\n     {\n-        return SendCoinsReturn(AmountWithFeeExceedsBalance, nTransactionFee);\n+        transaction.setTransactionFee(nTransactionFee);\n+        return SendCoinsReturn(AmountWithFeeExceedsBalance);\n     }\n \n     {\n         LOCK2(cs_main, wallet->cs_wallet);\n \n+        transaction.newPossibleKeyChange(wallet);\n+\n         // Sendmany\n         std::vector<std::pair<CScript, int64> > vecSend;\n         foreach(const SendCoinsRecipient &rcp, recipients)\n@@ -178,35 +183,49 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(const QList<SendCoinsRecipie\n             vecSend.push_back(make_pair(scriptPubKey, rcp.amount));\n         }\n \n-        CWalletTx wtx;\n-        CReserveKey keyChange(wallet);\n-        int64 nFeeRequired = 0;\n         std::string strFailReason;\n-        bool fCreated = wallet->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, strFailReason);\n+\n+        CWalletTx *newTx = transaction.getTransaction();\n+        CReserveKey *keyChange = transaction.getPossibleKeyChange();\n+        bool fCreated = wallet->CreateTransaction(vecSend, *newTx, *keyChange, nFeeRequired, strFailReason);\n+        transaction.setTransactionFee(nFeeRequired);\n \n         if(!fCreated)\n         {\n             if((total + nFeeRequired) > wallet->GetBalance())\n             {\n-                return SendCoinsReturn(AmountWithFeeExceedsBalance, nFeeRequired);\n+                return SendCoinsReturn(AmountWithFeeExceedsBalance);\n             }\n             emit message(tr(\"Send Coins\"), QString::fromStdString(strFailReason),\n                          CClientUIInterface::MSG_ERROR);\n             return TransactionCreationFailed;\n         }\n-        if(!uiInterface.ThreadSafeAskFee(nFeeRequired))\n-        {\n-            return Aborted;\n-        }\n-        if(!wallet->CommitTransaction(wtx, keyChange))\n+        hex = QString::fromStdString(newTx->GetHash().GetHex());\n+    }\n+\n+    return SendCoinsReturn(OK, hex);\n+}\n+\n+WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &transaction)\n+{\n+    QString hex;\n+    {\n         {\n-            return TransactionCommitFailed;\n+            LOCK2(cs_main, wallet->cs_wallet);\n+\n+            CWalletTx *newTx = transaction.getTransaction();\n+            CReserveKey *keyChange = transaction.getPossibleKeyChange();\n+\n+            if(!wallet->CommitTransaction(*newTx, *keyChange))\n+            {\n+                return TransactionCommitFailed;\n+            }\n+            hex = QString::fromStdString(newTx->GetHash().GetHex());\n         }\n-        hex = QString::fromStdString(wtx.GetHash().GetHex());\n     }\n \n     // Add addresses / update labels that we've sent to to the address book\n-    foreach(const SendCoinsRecipient &rcp, recipients)\n+    foreach(const SendCoinsRecipient &rcp, transaction.getRecipients())\n     {\n         std::string strAddress = rcp.address.toStdString();\n         CTxDestination dest = CBitcoinAddress(strAddress).Get();\n@@ -224,7 +243,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(const QList<SendCoinsRecipie\n         }\n     }\n \n-    return SendCoinsReturn(OK, 0, hex);\n+    return SendCoinsReturn(OK, hex);\n }\n \n OptionsModel *WalletModel::getOptionsModel()"
      },
      {
        "sha": "1bdfacabae400906f2f3dc9f3af2b3f256da4705",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cb460966a15595b8eb3c393a4ff47b7ab1011f8/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cb460966a15595b8eb3c393a4ff47b7ab1011f8/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=2cb460966a15595b8eb3c393a4ff47b7ab1011f8",
        "patch": "@@ -4,11 +4,14 @@\n #include <QObject>\n \n #include \"allocators.h\" /* for SecureString */\n+#include \"wallet.h\"\n+#include \"walletmodeltransaction.h\"\n \n class OptionsModel;\n class AddressTableModel;\n class TransactionTableModel;\n class CWallet;\n+class WalletModelTransaction;\n \n QT_BEGIN_NAMESPACE\n class QTimer;\n@@ -67,17 +70,17 @@ class WalletModel : public QObject\n     // Return status record for SendCoins, contains error id + information\n     struct SendCoinsReturn\n     {\n-        SendCoinsReturn(StatusCode status,\n-                         qint64 fee=0,\n-                         QString hex=QString()):\n-            status(status), fee(fee), hex(hex) {}\n+        SendCoinsReturn(StatusCode status, QString hex=QString()):\n+            status(status), hex(hex) {}\n         StatusCode status;\n-        qint64 fee; // is used in case status is \"AmountWithFeeExceedsBalance\"\n         QString hex; // is filled with the transaction hash if status is \"OK\"\n     };\n \n+    // prepare transaction for getting txfee before sending coins\n+    SendCoinsReturn prepareTransaction(WalletModelTransaction &transaction);\n+\n     // Send coins to a list of recipients\n-    SendCoinsReturn sendCoins(const QList<SendCoinsRecipient> &recipients);\n+    SendCoinsReturn sendCoins(WalletModelTransaction &transaction);\n \n     // Wallet encryption\n     bool setWalletEncrypted(bool encrypted, const SecureString &passphrase);"
      },
      {
        "sha": "5c5fef1df42f2eeb7fdf0bbf24ac12c08152b31a",
        "filename": "src/qt/walletmodeltransaction.cpp",
        "status": "added",
        "additions": 57,
        "deletions": 0,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cb460966a15595b8eb3c393a4ff47b7ab1011f8/src/qt/walletmodeltransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cb460966a15595b8eb3c393a4ff47b7ab1011f8/src/qt/walletmodeltransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.cpp?ref=2cb460966a15595b8eb3c393a4ff47b7ab1011f8",
        "patch": "@@ -0,0 +1,57 @@\n+#include \"walletmodeltransaction.h\"\n+\n+WalletModelTransaction::WalletModelTransaction(const QList<SendCoinsRecipient> &recipients) :\n+    recipients(recipients),\n+    walletTransaction(0),\n+    keyChange(0),\n+    fee(0)\n+{\n+    walletTransaction = new CWalletTx();\n+}\n+\n+WalletModelTransaction::~WalletModelTransaction()\n+{\n+    delete keyChange;\n+    delete walletTransaction;\n+}\n+\n+QList<SendCoinsRecipient> WalletModelTransaction::getRecipients()\n+{\n+    return recipients;\n+}\n+\n+CWalletTx *WalletModelTransaction::getTransaction()\n+{\n+    return walletTransaction;\n+}\n+\n+qint64 WalletModelTransaction::getTransactionFee()\n+{\n+    return fee;\n+}\n+\n+void WalletModelTransaction::setTransactionFee(qint64 newFee)\n+{\n+    fee=newFee;\n+}\n+\n+qint64 WalletModelTransaction::getTotalTransactionAmount()\n+{\n+    qint64 totalTransactionAmount = 0;\n+    foreach(const SendCoinsRecipient &rcp, recipients)\n+    {\n+        totalTransactionAmount+=rcp.amount;\n+    }\n+    return totalTransactionAmount;\n+}\n+\n+void WalletModelTransaction::newPossibleKeyChange(CWallet *wallet)\n+{\n+    keyChange = new CReserveKey(wallet);\n+}\n+\n+CReserveKey *WalletModelTransaction::getPossibleKeyChange()\n+{\n+    return keyChange;\n+}\n+"
      },
      {
        "sha": "57b4c839a1d81267230d7ac5ef167d92fc2d6e4b",
        "filename": "src/qt/walletmodeltransaction.h",
        "status": "added",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cb460966a15595b8eb3c393a4ff47b7ab1011f8/src/qt/walletmodeltransaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cb460966a15595b8eb3c393a4ff47b7ab1011f8/src/qt/walletmodeltransaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.h?ref=2cb460966a15595b8eb3c393a4ff47b7ab1011f8",
        "patch": "@@ -0,0 +1,37 @@\n+#ifndef WALLETMODELTRANSACTION_H\n+#define WALLETMODELTRANSACTION_H\n+\n+#include \"walletmodel.h\"\n+\n+class SendCoinsRecipient;\n+\n+/** Data model for a walletmodel transaction. */\n+class WalletModelTransaction\n+{\n+public:\n+    explicit WalletModelTransaction(const QList<SendCoinsRecipient> &recipients);\n+    ~WalletModelTransaction();\n+\n+    QList<SendCoinsRecipient> getRecipients();\n+\n+    CWalletTx *getTransaction();\n+\n+    void setTransactionFee(qint64 newFee);\n+    qint64 getTransactionFee();\n+\n+    qint64 getTotalTransactionAmount();\n+\n+    void newPossibleKeyChange(CWallet *wallet);\n+    CReserveKey *getPossibleKeyChange();\n+\n+private:\n+    const QList<SendCoinsRecipient> recipients;\n+    CWalletTx *walletTransaction;\n+    CReserveKey *keyChange;\n+    qint64 fee;\n+    \n+public slots:\n+    \n+};\n+\n+#endif // WALLETMODELTRANSACTION_H"
      }
    ]
  }
]