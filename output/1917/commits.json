[
  {
    "sha": "e4954b12971a3f9c0d9bddfbabbfba36d4e9a747",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNDk1NGIxMjk3MWEzZjljMGQ5YmRkZmJhYmJmYmEzNmQ0ZTlhNzQ3",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-10-08T19:18:04Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-10-08T19:51:59Z"
      },
      "message": "Handle incompatible BDB environments\n\nBefore, opening a -datadir that was created with a new\nversion of Berkeley DB would result in an un-caught DB_RUNRECOVERY\nexception.\n\nAfter these changes, the error is caught and the user is told\nthat there is a problem and is told how to try to recover from\nit.",
      "tree": {
        "sha": "f35c4e6865303331085554faa89a85b52739f4b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f35c4e6865303331085554faa89a85b52739f4b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e4954b12971a3f9c0d9bddfbabbfba36d4e9a747",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4954b12971a3f9c0d9bddfbabbfba36d4e9a747",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e4954b12971a3f9c0d9bddfbabbfba36d4e9a747",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4954b12971a3f9c0d9bddfbabbfba36d4e9a747/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a6be58d536c46d2ee2328ed827cb26d35656fbee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6be58d536c46d2ee2328ed827cb26d35656fbee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6be58d536c46d2ee2328ed827cb26d35656fbee"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 19,
      "deletions": 15
    },
    "files": [
      {
        "sha": "7ca9e349539a00db340a5c61d46ab8705756dd95",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 12,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4954b12971a3f9c0d9bddfbabbfba36d4e9a747/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4954b12971a3f9c0d9bddfbabbfba36d4e9a747/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=e4954b12971a3f9c0d9bddfbabbfba36d4e9a747",
        "patch": "@@ -34,19 +34,14 @@ void CDBEnv::EnvShutdown()\n         return;\n \n     fDbEnvInit = false;\n-    try\n-    {\n-        dbenv.close(0);\n-    }\n-    catch (const DbException& e)\n-    {\n-        printf(\"EnvShutdown exception: %s (%d)\\n\", e.what(), e.get_errno());\n-    }\n+    int ret = dbenv.close(0);\n+    if (ret != 0)\n+        printf(\"EnvShutdown exception: %s (%d)\\n\", DbEnv::strerror(ret), ret);\n     if (!fMockDb)\n         DbEnv(0).remove(GetDataDir().string().c_str(), 0);\n }\n \n-CDBEnv::CDBEnv() : dbenv(0)\n+CDBEnv::CDBEnv() : dbenv(DB_CXX_NO_EXCEPTIONS)\n {\n }\n \n@@ -100,8 +95,8 @@ bool CDBEnv::Open(boost::filesystem::path pathEnv_)\n                      DB_RECOVER    |\n                      nEnvFlags,\n                      S_IRUSR | S_IWUSR);\n-    if (ret > 0)\n-        return error(\"CDB() : error %d opening database environment\", ret);\n+    if (ret != 0)\n+        return error(\"CDB() : error %s (%d) opening database environment\", DbEnv::strerror(ret), ret);\n \n     fDbEnvInit = true;\n     fMockDb = false;\n@@ -191,7 +186,7 @@ CDB::CDB(const char *pszFile, const char* pszMode) :\n                             nFlags,    // Flags\n                             0);\n \n-            if (ret > 0)\n+            if (ret != 0)\n             {\n                 delete pdb;\n                 pdb = NULL;"
      },
      {
        "sha": "4d39efdf90e5e6d18e63c4fc0acc2b332036c5bb",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 3,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4954b12971a3f9c0d9bddfbabbfba36d4e9a747/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4954b12971a3f9c0d9bddfbabbfba36d4e9a747/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e4954b12971a3f9c0d9bddfbabbfba36d4e9a747",
        "patch": "@@ -439,8 +439,9 @@ bool AppInit2()\n     FILE* file = fopen(pathLockFile.string().c_str(), \"a\"); // empty lock file; created if it doesn't exist.\n     if (file) fclose(file);\n     static boost::interprocess::file_lock lock(pathLockFile.string().c_str());\n+    const char* pszDataDir = GetDataDir().string().c_str();\n     if (!lock.try_lock())\n-        return InitError(strprintf(_(\"Cannot obtain a lock on data directory %s.  Bitcoin is probably already running.\"), GetDataDir().string().c_str()));\n+        return InitError(strprintf(_(\"Cannot obtain a lock on data directory %s.  Bitcoin is probably already running.\"), pszDataDir));\n \n #if !defined(WIN32) && !defined(QT_GUI)\n     if (fDaemon)\n@@ -472,7 +473,7 @@ bool AppInit2()\n     if (!fLogTimestamps)\n         printf(\"Startup time: %s\\n\", DateTimeStrFormat(\"%x %H:%M:%S\", GetTime()).c_str());\n     printf(\"Default data directory %s\\n\", GetDefaultDataDir().string().c_str());\n-    printf(\"Used data directory %s\\n\", GetDataDir().string().c_str());\n+    printf(\"Used data directory %s\\n\", pszDataDir);\n     std::ostringstream strErrors;\n \n     if (fDaemon)\n@@ -588,6 +589,14 @@ bool AppInit2()\n \n     // ********************************************************* Step 6: load blockchain\n \n+    if (!bitdb.Open(GetDataDir()))\n+    {\n+        string msg = strprintf(_(\"Error initializing database environment %s!\"\n+                                 \" To recover, BACKUP THAT DIRECTORY, then remove\"\n+                                 \" everything from it except for wallet.dat.\"), pszDataDir);\n+        return InitError(msg);\n+    }\n+\n     if (GetBoolArg(\"-loadblockindextest\"))\n     {\n         CTxDB txdb(\"r\");\n@@ -600,7 +609,7 @@ bool AppInit2()\n     printf(\"Loading block index...\\n\");\n     nStart = GetTimeMillis();\n     if (!LoadBlockIndex())\n-        strErrors << _(\"Error loading blkindex.dat\") << \"\\n\";\n+        return InitError(_(\"Error loading blkindex.dat\"));\n \n     // as LoadBlockIndex can take several minutes, it's possible the user\n     // requested to kill bitcoin-qt during the last operation. If so, exit."
      }
    ]
  }
]