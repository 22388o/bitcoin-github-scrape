[
  {
    "sha": "8535460000ab50170c781cee9a0d1dca1fd6322f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTM1NDYwMDAwYWI1MDE3MGM3ODFjZWU5YTBkMWRjYTFmZDYzMjJm",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-04-11T07:05:00Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-04-22T00:54:50Z"
      },
      "message": "[validationinterface] Extend TransactionRemovedFromMempool with fIsConflicted\n\nClient may be interested in updating status of notified transaction\nwithout tracking a whole chain of anterior transactions conflicted,\nindependently of the reason (mempool or block).\n\nThis is only used in next commit.",
      "tree": {
        "sha": "15fb2d02752d2d22b4b8d9ae4c2cd58e4ae8835d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15fb2d02752d2d22b4b8d9ae4c2cd58e4ae8835d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8535460000ab50170c781cee9a0d1dca1fd6322f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8535460000ab50170c781cee9a0d1dca1fd6322f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8535460000ab50170c781cee9a0d1dca1fd6322f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8535460000ab50170c781cee9a0d1dca1fd6322f/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "b6a5dc90bfd4640cf9f914e59bf8e21cd265b51e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6a5dc90bfd4640cf9f914e59bf8e21cd265b51e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6a5dc90bfd4640cf9f914e59bf8e21cd265b51e"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 13,
      "deletions": 9
    },
    "files": [
      {
        "sha": "90384468aac014a18fd07ac714e2e31f8388ce87",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8535460000ab50170c781cee9a0d1dca1fd6322f/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8535460000ab50170c781cee9a0d1dca1fd6322f/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=8535460000ab50170c781cee9a0d1dca1fd6322f",
        "patch": "@@ -145,7 +145,7 @@ class NotificationsProxy : public CValidationInterface\n     {\n         m_notifications->transactionAddedToMempool(tx);\n     }\n-    void TransactionRemovedFromMempool(const CTransactionRef& tx) override\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, bool is_conflicted) override\n     {\n         m_notifications->transactionRemovedFromMempool(tx);\n     }"
      },
      {
        "sha": "9d331801d7f4c57695fb52b70ec439fe40fecce9",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8535460000ab50170c781cee9a0d1dca1fd6322f/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8535460000ab50170c781cee9a0d1dca1fd6322f/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=8535460000ab50170c781cee9a0d1dca1fd6322f",
        "patch": "@@ -410,7 +410,7 @@ void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n         // for any reason except being included in a block. Clients interested\n         // in transactions included in blocks can subscribe to the BlockConnected\n         // notification.\n-        GetMainSignals().TransactionRemovedFromMempool(it->GetSharedTx());\n+        GetMainSignals().TransactionRemovedFromMempool(it->GetSharedTx(), reason == MemPoolRemovalReason::CONFLICT);\n     }\n \n     const uint256 hash = it->GetTx().GetHash();"
      },
      {
        "sha": "6b47ef61811b3e9c7e8ef67f46966498b6821c7d",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8535460000ab50170c781cee9a0d1dca1fd6322f/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8535460000ab50170c781cee9a0d1dca1fd6322f/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=8535460000ab50170c781cee9a0d1dca1fd6322f",
        "patch": "@@ -199,13 +199,14 @@ void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n                           ptx->GetWitnessHash().ToString());\n }\n \n-void CMainSignals::TransactionRemovedFromMempool(const CTransactionRef &ptx) {\n-    auto event = [ptx, this] {\n-        m_internals->Iterate([&](CValidationInterface& callbacks) { callbacks.TransactionRemovedFromMempool(ptx); });\n+void CMainSignals::TransactionRemovedFromMempool(const CTransactionRef &ptx, bool fIsConflicted) {\n+    auto event = [ptx, fIsConflicted, this] {\n+        m_internals->Iterate([&](CValidationInterface& callbacks) { callbacks.TransactionRemovedFromMempool(ptx, fIsConflicted); });\n     };\n-    ENQUEUE_AND_LOG_EVENT(event, \"%s: txid=%s wtxid=%s\", __func__,\n+    ENQUEUE_AND_LOG_EVENT(event, \"%s: txid=%s wtxid=%s conflicted %s\", __func__,\n                           ptx->GetHash().ToString(),\n-                          ptx->GetWitnessHash().ToString());\n+                          ptx->GetWitnessHash().ToString(),\n+                          fIsConflicted);\n }\n \n void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex) {"
      },
      {
        "sha": "2359b296c882012b04bcb7c84defa8bdefac9a46",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8535460000ab50170c781cee9a0d1dca1fd6322f/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8535460000ab50170c781cee9a0d1dca1fd6322f/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=8535460000ab50170c781cee9a0d1dca1fd6322f",
        "patch": "@@ -127,9 +127,12 @@ class CValidationInterface {\n      * - BlockConnected(A)\n      * - BlockConnected(B)\n      *\n+     * If removal is due to a conflict, provided boolean will be true to inform\n+     * any client interested in changing tracking state of notified transaction.\n+     *\n      * Called on a background thread.\n      */\n-    virtual void TransactionRemovedFromMempool(const CTransactionRef &ptx) {}\n+    virtual void TransactionRemovedFromMempool(const CTransactionRef &ptx, bool fIsConflicted) {}\n     /**\n      * Notifies listeners of a block being connected.\n      * Provides a vector of transactions evicted from the mempool as a result.\n@@ -197,7 +200,7 @@ class CMainSignals {\n \n     void UpdatedBlockTip(const CBlockIndex *, const CBlockIndex *, bool fInitialDownload);\n     void TransactionAddedToMempool(const CTransactionRef &);\n-    void TransactionRemovedFromMempool(const CTransactionRef &);\n+    void TransactionRemovedFromMempool(const CTransactionRef &, bool fIsConflicted);\n     void BlockConnected(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex);\n     void BlockDisconnected(const std::shared_ptr<const CBlock> &, const CBlockIndex* pindex);\n     void ChainStateFlushed(const CBlockLocator &);"
      }
    ]
  },
  {
    "sha": "bdf40f33ea51b6b09d45911549361b49c6ceee87",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZGY0MGYzM2VhNTFiNmIwOWQ0NTkxMTU0OTM2MWI0OWM2Y2VlZTg3",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-04-11T21:50:07Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-04-22T01:03:31Z"
      },
      "message": "[wallet] Track transactions removed from mempool due to conflicts\n\nExtend conflict tracking for transaction of interest (either spending\nfrom us or paying to us) not directly connected to a previous wallet\ntransaction and as such not covered under blockConnected.\n\nRestore UI notifications for block conflicted transactions broke\ninadvertently by 7e89994.\n\nBlock conflicted transactions may see their CWalletTx::Confirmation\nstatus updated twice, once by BlockConnected and transactionRemovedFromMempool,\noverlap is necessary as first trigger may be due to the conflicting transaction\nincluded in a block at AddToWalletIfInvolvingMe and second one to\nmempool removal on its own sake.",
      "tree": {
        "sha": "02f7b435bf8a3f690eb735ca85a6e51e811672ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/02f7b435bf8a3f690eb735ca85a6e51e811672ce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bdf40f33ea51b6b09d45911549361b49c6ceee87",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdf40f33ea51b6b09d45911549361b49c6ceee87",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bdf40f33ea51b6b09d45911549361b49c6ceee87",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdf40f33ea51b6b09d45911549361b49c6ceee87/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "8535460000ab50170c781cee9a0d1dca1fd6322f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8535460000ab50170c781cee9a0d1dca1fd6322f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8535460000ab50170c781cee9a0d1dca1fd6322f"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 10,
      "deletions": 6
    },
    "files": [
      {
        "sha": "ad954eb767d72b999ed842e63f7a58ea42033c19",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdf40f33ea51b6b09d45911549361b49c6ceee87/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdf40f33ea51b6b09d45911549361b49c6ceee87/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=bdf40f33ea51b6b09d45911549361b49c6ceee87",
        "patch": "@@ -147,7 +147,7 @@ class NotificationsProxy : public CValidationInterface\n     }\n     void TransactionRemovedFromMempool(const CTransactionRef& tx, bool is_conflicted) override\n     {\n-        m_notifications->transactionRemovedFromMempool(tx);\n+        m_notifications->transactionRemovedFromMempool(tx, is_conflicted);\n     }\n     void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* index) override\n     {"
      },
      {
        "sha": "476eec6a6311c29f9a1498e2d80bf29f44e1f486",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdf40f33ea51b6b09d45911549361b49c6ceee87/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdf40f33ea51b6b09d45911549361b49c6ceee87/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=bdf40f33ea51b6b09d45911549361b49c6ceee87",
        "patch": "@@ -258,7 +258,7 @@ class Chain\n     public:\n         virtual ~Notifications() {}\n         virtual void transactionAddedToMempool(const CTransactionRef& tx) {}\n-        virtual void transactionRemovedFromMempool(const CTransactionRef& ptx) {}\n+        virtual void transactionRemovedFromMempool(const CTransactionRef& ptx, bool is_conflicted) {}\n         virtual void blockConnected(const CBlock& block, int height) {}\n         virtual void blockDisconnected(const CBlock& block, int height) {}\n         virtual void updatedBlockTip() {}"
      },
      {
        "sha": "1ff8cbe3604244a710c34ff58cf3201562a81c17",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdf40f33ea51b6b09d45911549361b49c6ceee87/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdf40f33ea51b6b09d45911549361b49c6ceee87/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bdf40f33ea51b6b09d45911549361b49c6ceee87",
        "patch": "@@ -1108,12 +1108,16 @@ void CWallet::transactionAddedToMempool(const CTransactionRef& ptx) {\n     }\n }\n \n-void CWallet::transactionRemovedFromMempool(const CTransactionRef &ptx) {\n+void CWallet::transactionRemovedFromMempool(const CTransactionRef &ptx, bool is_conflicted) {\n     LOCK(cs_wallet);\n     auto it = mapWallet.find(ptx->GetHash());\n     if (it != mapWallet.end()) {\n         it->second.fInMempool = false;\n     }\n+    if (is_conflicted) {\n+        CWalletTx::Confirmation confirm(CWalletTx::Status::CONFLICTED, /* block_height */ 0, /* block_hash */ {}, /* nIndex */ 0);\n+        SyncTransaction(ptx, confirm);\n+    }\n }\n \n void CWallet::blockConnected(const CBlock& block, int height)\n@@ -1127,7 +1131,7 @@ void CWallet::blockConnected(const CBlock& block, int height)\n     for (size_t index = 0; index < block.vtx.size(); index++) {\n         CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, height, block_hash, index);\n         SyncTransaction(block.vtx[index], confirm);\n-        transactionRemovedFromMempool(block.vtx[index]);\n+        transactionRemovedFromMempool(block.vtx[index], false);\n     }\n }\n "
      },
      {
        "sha": "9f6f66e8961dd8e928b9b269f6f59f4420597a27",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdf40f33ea51b6b09d45911549361b49c6ceee87/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdf40f33ea51b6b09d45911549361b49c6ceee87/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=bdf40f33ea51b6b09d45911549361b49c6ceee87",
        "patch": "@@ -907,8 +907,8 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n         //! USER_ABORT.\n         uint256 last_failed_block;\n     };\n-    ScanResult ScanForWalletTransactions(const uint256& start_block, int start_height, Optional<int> max_height, const WalletRescanReserver& reserver, bool fUpdate);\n-    void transactionRemovedFromMempool(const CTransactionRef &ptx) override;\n+    ScanResult ScanForWalletTransactions(const uint256& start_block, int start_height, Optional<int>max_height, const WalletRescanReserver& reserver, bool fUpdate);\n+    void transactionRemovedFromMempool(const CTransactionRef &ptxi, bool is_conflicted) override;\n     void ReacceptWalletTransactions() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void ResendWalletTransactions();\n     struct Balance {"
      }
    ]
  },
  {
    "sha": "0e5f7c06580287f0b8d919aa1ea11cee25095545",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZTVmN2MwNjU4MDI4N2YwYjhkOTE5YWExZWExMWNlZTI1MDk1NTQ1",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "antoine.riard@gmail.com",
        "date": "2020-04-11T22:24:11Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-04-22T01:03:44Z"
      },
      "message": "[rpcwallet] Add `conflicted` as transaction description field\n\nPrevious commit was extending conflicts tracking to ones triggered\nfrom mempool. These do not informed about txid of conflicting\ntransaction, so we need a way to learn about conflict status of\na wallet transaction.\n\nNew field is fulfilled for listtransactions, listsinceblock,\ngettransaction.",
      "tree": {
        "sha": "ed52cff17e300944ee96c1b45b7c3c4fea90cef5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed52cff17e300944ee96c1b45b7c3c4fea90cef5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0e5f7c06580287f0b8d919aa1ea11cee25095545",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e5f7c06580287f0b8d919aa1ea11cee25095545",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0e5f7c06580287f0b8d919aa1ea11cee25095545",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e5f7c06580287f0b8d919aa1ea11cee25095545/comments",
    "author": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": null,
    "parents": [
      {
        "sha": "bdf40f33ea51b6b09d45911549361b49c6ceee87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdf40f33ea51b6b09d45911549361b49c6ceee87",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bdf40f33ea51b6b09d45911549361b49c6ceee87"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "698b034bdb2f8a91c122d6c81ef708d487677805",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e5f7c06580287f0b8d919aa1ea11cee25095545/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e5f7c06580287f0b8d919aa1ea11cee25095545/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0e5f7c06580287f0b8d919aa1ea11cee25095545",
        "patch": "@@ -152,6 +152,8 @@ static void WalletTxToJSON(interfaces::Chain& chain, interfaces::Chain::Lock& lo\n     }\n     uint256 hash = wtx.GetHash();\n     entry.pushKV(\"txid\", hash.GetHex());\n+    if (wtx.isConflicted())\n+        entry.pushKV(\"conflicted\", true);\n     UniValue conflicts(UniValue::VARR);\n     for (const uint256& conflict : wtx.GetConflicts())\n         conflicts.push_back(conflict.GetHex());\n@@ -1366,6 +1368,7 @@ static const std::vector<RPCResult> TransactionDescriptionString()\n            {RPCResult::Type::NUM, \"blockindex\", \"The index of the transaction in the block that includes it.\"},\n            {RPCResult::Type::NUM_TIME, \"blocktime\", \"The block time expressed in \" + UNIX_EPOCH_TIME + \".\"},\n            {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id.\"},\n+           {RPCResult::Type::BOOL, \"conflicted\", \"Only present if transaction is conflicted\"},\n            {RPCResult::Type::ARR, \"walletconflicts\", \"Conflicting transaction ids.\",\n            {\n                {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id.\"},"
      }
    ]
  },
  {
    "sha": "e9ffced8bebe7451d5e8d97b5e88fbedb7675cc6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOWZmY2VkOGJlYmU3NDUxZDVlOGQ5N2I1ZTg4ZmJlZGI3Njc1Y2M2",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-04-01T19:32:43Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-04-22T01:03:44Z"
      },
      "message": "[functional] Test conflict on non-connected wallet transactions\n\nNon-connected is defined as a transactions for which parent or anterior\ntransactions are not tracked by wallet.\n\nThis test extension covers non-connected wallet transaction conflicted\nby a block connection.",
      "tree": {
        "sha": "46e193ca9c00df565cba1df539180e8194bc24c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46e193ca9c00df565cba1df539180e8194bc24c0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9ffced8bebe7451d5e8d97b5e88fbedb7675cc6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9ffced8bebe7451d5e8d97b5e88fbedb7675cc6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e9ffced8bebe7451d5e8d97b5e88fbedb7675cc6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9ffced8bebe7451d5e8d97b5e88fbedb7675cc6/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "0e5f7c06580287f0b8d919aa1ea11cee25095545",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e5f7c06580287f0b8d919aa1ea11cee25095545",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0e5f7c06580287f0b8d919aa1ea11cee25095545"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 59,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3c397c760b75f1343fb49f70d0fa71cef41810b6",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9ffced8bebe7451d5e8d97b5e88fbedb7675cc6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9ffced8bebe7451d5e8d97b5e88fbedb7675cc6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e9ffced8bebe7451d5e8d97b5e88fbedb7675cc6",
        "patch": "@@ -928,7 +928,7 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, CWalletTx::Co\n                     range.first++;\n                 }\n             }\n-        }\n+        } //TODO: if transaction is already signaled as conflicted\n \n         bool fExisted = mapWallet.count(tx.GetHash()) != 0;\n         if (fExisted && !fUpdate) return false;"
      },
      {
        "sha": "843511b4ee5d783718bfafbd6528398fb8e55399",
        "filename": "test/functional/wallet_txn_doublespend.py",
        "status": "modified",
        "additions": 58,
        "deletions": 0,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9ffced8bebe7451d5e8d97b5e88fbedb7675cc6/test/functional/wallet_txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9ffced8bebe7451d5e8d97b5e88fbedb7675cc6/test/functional/wallet_txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_doublespend.py?ref=e9ffced8bebe7451d5e8d97b5e88fbedb7675cc6",
        "patch": "@@ -12,6 +12,7 @@\n     disconnect_nodes,\n     find_output,\n )\n+from test_framework.messages import BIP125_SEQUENCE_NUMBER\n \n class TxnMallTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -139,5 +140,62 @@ def run_test(self):\n         # Node1's balance should be its initial balance (1250 for 25 block rewards) plus the doublespend:\n         assert_equal(self.nodes[1].getbalance(), 1250 + 1240)\n \n+        self.log.info(\"Test conflicted non-directly-connected wallet-txn\")\n+        # Following test limb check that if a transaction of concern conflicted due to its parent\n+        # or anterior transaction being conflicted, wallet is able to detect it, independently of\n+        # reason (either block or mempool)\n+\n+        # Get a \"blind\" address from node0\n+        connect_nodes(self.nodes[0], 1)\n+        node0_address_blind = self.nodes[0].getnewaddress()\n+        txid_origin = self.nodes[1].sendtoaddress(self.nodes[1].getnewaddress(), Decimal(\"10\"))\n+        self.nodes[1].generate(1)\n+        self.sync_blocks([self.nodes[0], self.nodes[1]])\n+\n+        # Build parent conflicted tx from node1 to node1\n+        nA = next(tx_out[\"vout\"] for tx_out in self.nodes[1].gettransaction(txid_origin)[\"details\"] if tx_out[\"amount\"] == Decimal(\"10\"))\n+        inputs_parent_conflicted_tx = []\n+        inputs_parent_conflicted_tx.append({\"txid\": txid_origin, \"vout\": nA, \"sequence\": BIP125_SEQUENCE_NUMBER})\n+        outputs_parent_conflicted_tx = {}\n+        outputs_parent_conflicted_tx[self.nodes[1].getnewaddress()] = Decimal(\"9.99998\")\n+\n+        # Broadcast parent conflicted tx\n+        parent_conflicted_tx = self.nodes[1].signrawtransactionwithwallet(self.nodes[1].createrawtransaction(inputs_parent_conflicted_tx, outputs_parent_conflicted_tx))\n+        parent_conflicted_txid = self.nodes[1].sendrawtransaction(parent_conflicted_tx[\"hex\"])\n+\n+        # Build children conflicted tx\n+        inputs_children_conflicted_tx = []\n+        inputs_children_conflicted_tx.append({\"txid\": parent_conflicted_txid, \"vout\": 0})\n+        outputs_children_conflicted_tx = {}\n+        outputs_children_conflicted_tx[node0_address_blind] = Decimal(\"9.99996\")\n+\n+        #Broadcast children conflicted tx\n+        node1s_children_conflicted_tx = self.nodes[1].signrawtransactionwithwallet(self.nodes[1].createrawtransaction(inputs_children_conflicted_tx, outputs_children_conflicted_tx))\n+        children_conflicted_txid = self.nodes[1].sendrawtransaction(node1s_children_conflicted_tx[\"hex\"])\n+        self.sync_mempools([self.nodes[0], self.nodes[1]])\n+\n+        # Verify node0 sees conflicted paying back\n+        node0s_children_conflicted_tx = self.nodes[0].gettransaction(children_conflicted_txid)\n+\n+        assert_equal(node0s_children_conflicted_tx[\"confirmations\"], 0)\n+        assert_equal(node0s_children_conflicted_tx[\"details\"][0][\"category\"], \"receive\")\n+\n+        # Build conflicting tx, double-spending parent conflicted\n+        inputs_conflicting_tx = []\n+        inputs_conflicting_tx.append({\"txid\": txid_origin, \"vout\": nA})\n+        outputs_conflicting_tx = {}\n+        outputs_conflicting_tx[self.nodes[1].getnewaddress()] = Decimal(\"9.99980\")\n+\n+        # Broadcast conflicting tx to node1 mempool and generate a block\n+        conflicting_tx = self.nodes[1].signrawtransactionwithwallet(self.nodes[1].createrawtransaction(inputs_conflicting_tx, outputs_conflicting_tx))\n+        self.nodes[1].sendrawtransaction(conflicting_tx[\"hex\"])\n+        self.nodes[1].generate(1)\n+        self.sync_blocks([self.nodes[0], self.nodes[1]])\n+\n+        # Verify node0 sees children as conflicted\n+        conflicted_tx = self.nodes[0].gettransaction(children_conflicted_txid)\n+\n+        assert_equal(conflicted_tx[\"conflicted\"], True)\n+\n if __name__ == '__main__':\n     TxnMallTest().main()"
      }
    ]
  }
]