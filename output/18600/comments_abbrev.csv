DrahtBot,2020-04-12 04:13:24,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18982 (wallet: Minimal fix to restore conflicted transaction notifications by ryanofsky)\n* #18354 (Use shared pointers o",https://github.com/bitcoin/bitcoin/pull/18600#issuecomment-612561562,612561562,
ariard,2020-04-22 01:05:44,"Rebased with few comments addressed.\n\nI hear you on this https://github.com/bitcoin/bitcoin/pull/18600#discussion_r412587833 @ryanofsky, I may have to pass down block height/hash through mempool code but at least that would make reasoning the same than it is today for `CONFLICTED` state.\n\nI also know you're not a great fan of these states, IMO I find pretty nice to have well-defined states",https://github.com/bitcoin/bitcoin/pull/18600#issuecomment-617487831,617487831,
ryanofsky,2020-04-22 04:04:22,"> I also know you're not a great fan of these states, IMO I find pretty nice to have well-defined states for wallet transactions and grepp'ing for `is*`/`set*` to know state transitions, but I agree too we may refine them to only `UNCONFIRMED/CONFIRMED`, conflicting is a per-input problem stricto sensu but I think that's outside PR scope ?\n\nI need to catch up on the newest comments and changes",https://github.com/bitcoin/bitcoin/pull/18600#issuecomment-617536160,617536160,
MarcoFalke,2020-04-29 22:59:32,Tests fail,https://github.com/bitcoin/bitcoin/pull/18600#issuecomment-621512219,621512219,
MarcoFalke,2020-05-13 14:31:22,Needs rebase due to conflict with #18878,https://github.com/bitcoin/bitcoin/pull/18600#issuecomment-628029131,628029131,
ryanofsky,2020-05-13 19:23:45,"> Needs rebase due to conflict with #18878\n\nChanges should be minor. Should just need to update lines like [`expect_wallet_notify([bump2])`](https://github.com/bitcoin/bitcoin/blob/51825aea7fa068877ea77e3121def58005df3510/test/functional/feature_notifications.py#L141) to `expect_wallet_notify([bump2, tx2])` for new transaction notifications",https://github.com/bitcoin/bitcoin/pull/18600#issuecomment-628196235,628196235,
MarcoFalke,2020-05-15 12:04:14,Moved milestone as per https://github.com/bitcoin/bitcoin/issues/18325#issuecomment-629196468,https://github.com/bitcoin/bitcoin/pull/18600#issuecomment-629196900,629196900,
ariard,2020-05-20 07:04:37,"@ryanofsky Finally getting back to this, \n\nAs of e9ffced, I think I removed 2) after this discussion https://github.com/bitcoin/bitcoin/pull/18600#discussion_r408516146.\n\nWith regards to (4) it's a direct dependency on (3), and used only to signal a 0-blockhash conflict to user. So dropping (3) would also drop (4). \n\nLooking on #18982 ",https://github.com/bitcoin/bitcoin/pull/18600#issuecomment-631279640,631279640,
ryanofsky,2020-05-20 23:14:51,"re: ariard https://github.com/bitcoin/bitcoin/pull/18600#issuecomment-631279640\nre: ryanofsky https://github.com/bitcoin/bitcoin/pull/18600#pullrequestreview-405898189\n\n> As of [e9ffced](https://github.com/bitcoin/bitcoin/commit/e9ffced8bebe7451d5e8d97b5e88fbedb7675cc6), I think I removed 2) after this discussion [#18600 (comment)](https://github.com/bitcoin/bitcoin/pull/18600#discussion_r40",https://github.com/bitcoin/bitcoin/pull/18600#issuecomment-631786344,631786344,
jonatack,2020-05-22 16:43:50,"> I actually think it'd be good to bring back behavior (2). We already have an [existing test for this case](https://github.com/bitcoin/bitcoin/blob/3eda7ea9ba724bfa53ad6f4f63af85fccb46da00/test/functional/feature_notifications.py#L104-L111) and I think after #18982 it should be safe and very easy to do as a followup.\n> \n> I also like your idea in [#18600 (comment)](https://github.com/bitcoin/",https://github.com/bitcoin/bitcoin/pull/18600#issuecomment-632794516,632794516,
DrahtBot,2020-06-02 22:30:42,<!--cf906140f33d8803c4a75a2196329ecb-->\n🐙 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).,https://github.com/bitcoin/bitcoin/pull/18600#issuecomment-637842067,637842067,
ryanofsky,2021-01-11 14:27:24,"Since this PR has merge conflicts and the underlying code has changed a lot, I'm marking it closed and up for grabs. This way if it's updated it can be a new PR with less comment history, and the comments in this PR can stay in line with diffs.\n\nThe main change implemented by this PR is treating wallet transactions that conflict with newly connected blocks as conflicted. There is more informat",https://github.com/bitcoin/bitcoin/pull/18600#issuecomment-757985581,757985581,
ryanofsky,2020-04-13 14:37:42,"In commit ""[validationinterface] Extend TransactionRemovedFromMempool with fIsConflicted"" (9eb9af6c56f52628cca4cc5241c0f88adb9f689d)\n\nShould just call this argument `conflicted` or `is_conflicted`",https://github.com/bitcoin/bitcoin/pull/18600#discussion_r407511482,407511482,src/interfaces/chain.cpp
ryanofsky,2020-04-13 14:46:53,"In commit ""[validationinterface] Extend TransactionRemovedFromMempool with fIsConflicted"" (9eb9af6c56f52628cca4cc5241c0f88adb9f689d)\n\nI'd think it'd be more straightforward to just pass along the reason instead of having the mempool interpret it on behalf of the wallet. But this is just a guess, and I think since @jnewbery proposed this, you both probably know the tradeoffs between `bool confl",https://github.com/bitcoin/bitcoin/pull/18600#discussion_r407516183,407516183,src/txmempool.cpp
ryanofsky,2020-04-13 15:39:10,"In commit ""[rpcwallet] Add `conflicted` as transaction description field"" (1af561a8f2bc93ac029b7304fb6da12e6094b860)\n\nI think this should probably be Status::UNCONFIRMED rather than Status::CONFLICTED. That should restore the original behavior before #16624 (a31be09bfd77eed497a8e251d31358e16e2f2eb1 +   7e89994133725125dddbfa8d45484e3b9ed51c6e) and avoid introducing an entirely new transaction ",https://github.com/bitcoin/bitcoin/pull/18600#discussion_r407544261,407544261,src/wallet/wallet.cpp
MarcoFalke,2020-04-13 15:50:34,"Maybe even just pass the original removal reason to the sink? Compressing `REPLACED` into a boolean called `conflicted` is not wrong, but maybe not the most straightforward either.",https://github.com/bitcoin/bitcoin/pull/18600#discussion_r407550301,407550301,src/interfaces/chain.cpp
MarcoFalke,2020-04-13 15:59:29,"Some comments might be better as log statements, to aid debugability. See https://github.com/bitcoin/bitcoin/tree/master/test/functional#general-test-writing-advice\n```suggestion\n        self.log.info('Verify node0 sees children as conflicted')\n```",https://github.com/bitcoin/bitcoin/pull/18600#discussion_r407555257,407555257,test/functional/wallet_txn_doublespend.py
ariard,2020-04-14 07:55:20,"Yes I hesitated at first to call it is_conflicted but it's still an implementation of a `CValidationInterface`  method so `fIsConflicted` is more reasonable so `is_ibd` should be `fInitialDownload` ?\n\n@MarcoFalke, you suggest doing the filtering in `NotificationsProxy` ? Shouldn't this be as lean as possible and just call notifications handler ? My motivation was avoiding linking mempool code ",https://github.com/bitcoin/bitcoin/pull/18600#discussion_r407937260,407937260,src/interfaces/chain.cpp
ariard,2020-04-14 08:07:56,"See above, on the practical-side I wanted to avoid linking mempool code in wallet. But we can overcome this, so real question, above fixing behavior, is if we pass `EXPIRY` or `SIZELIMIT` to the wallet, does it going to adapt its broadcast on this or take any other action ?\n\nRight now I think the wallet doesn't have any code to do this, so I think the discussion is worthwhile but beyond this P",https://github.com/bitcoin/bitcoin/pull/18600#discussion_r407944782,407944782,src/txmempool.cpp
ariard,2020-04-14 08:23:21,"Thanks for your comment, I didn't reverse to the previous behavior starting from the user viewpoint. Unconfirmed funds allow you to spend from then or consider likely-yours as part of your balance, but here we know, as of mempool state, they are conflicted and likely-but-not-certain not going to confirm. We don't want the user to take decisions based on funds he has not. You can spend from unconfi",https://github.com/bitcoin/bitcoin/pull/18600#discussion_r407954092,407954092,src/wallet/wallet.cpp
ariard,2020-04-14 08:32:18,"Can I turn every new comment as a log ? That would my personal flavor but that's hard to judge if it suits everyone. In practice, this advice maybe a bit loosely, I expect anyone to tweak tests as wish for debugging, that's easy and you may not want to observe same thing for everyone. ",https://github.com/bitcoin/bitcoin/pull/18600#discussion_r407959639,407959639,test/functional/wallet_txn_doublespend.py
MarcoFalke,2020-04-14 11:27:06,"I don't think you need to link any mempool code when you want access to the enum RemovalReason in the wallet.\n\nRight? cc @ryanofsky ",https://github.com/bitcoin/bitcoin/pull/18600#discussion_r408063282,408063282,src/interfaces/chain.cpp
MarcoFalke,2020-04-14 11:29:34,"I mean mostly for the comments that start a new ""section"" or ""paragraph"" or subtest/test case. In the failing logs you could then easily identify when the new test section begins.",https://github.com/bitcoin/bitcoin/pull/18600#discussion_r408064561,408064561,test/functional/wallet_txn_doublespend.py
ryanofsky,2020-04-15 00:42:58,"re: https://github.com/bitcoin/bitcoin/pull/18600#discussion_r407937260\n\n> Yes I hesitated at first to call it is_conflicted but it's still an implementation of a `CValidationInterface` method so `fIsConflicted` is more reasonable so `is_ibd` should be `fInitialDownload` ?\n\nJust following the naming conventions is ""[preferred in new code](https://github.com/bitcoin/bitcoin/blob/master/doc/",https://github.com/bitcoin/bitcoin/pull/18600#discussion_r408516146,408516146,src/interfaces/chain.cpp
ryanofsky,2020-04-15 00:43:14,"re: https://github.com/bitcoin/bitcoin/pull/18600#discussion_r407954092\n\n> Thanks for your comment, I didn't reverse to the previous behavior starting from the user viewpoint. Unconfirmed funds allow you to spend from then or consider likely-yours as part of your balance, but here we know, as of mempool state, they are conflicted and likely-but-not-certain not going to confirm. We don't want t",https://github.com/bitcoin/bitcoin/pull/18600#discussion_r408516222,408516222,src/wallet/wallet.cpp
ariard,2020-04-22 00:44:23," > avoid introducing an entirely new transaction state that wallet code has never had to deal with, where a transaction is conflicting with something not in a specific block.\n\nAh sorry reading this again, in fact in `transactionRemovedFromMempool` you may have case of transaction block conflicted but not covered by `BlockConnected` due to the conflicting transaction not involving us. \n\nLik",https://github.com/bitcoin/bitcoin/pull/18600#discussion_r412587833,412587833,src/wallet/wallet.cpp
ariard,2020-04-22 00:50:12,"I restrained conflict to block only, not including anymore mempool replacement which means API is far-more straightforward as wallet conflict == mempool conflict.\n\nIf we really  want to use consistent reason codes among clients, we may pull them out of txmempool.h in some node/*.h ?",https://github.com/bitcoin/bitcoin/pull/18600#discussion_r412589720,412589720,src/interfaces/chain.cpp
ryanofsky,2020-05-05 15:22:29,"re: https://github.com/bitcoin/bitcoin/pull/18600#discussion_r412589720\n\n> I restrained conflict to block only\n\nThanks, this seems ok now that the definition of conflicted here matches up with the MemPoolRemovalReason definition. I do think the API would be more useful and clear if it just passed the existing MemPoolRemovalReason value instead introducing a new way to communicate the same ",https://github.com/bitcoin/bitcoin/pull/18600#discussion_r420194547,420194547,src/interfaces/chain.cpp
ryanofsky,2020-05-05 15:23:29,"re: https://github.com/bitcoin/bitcoin/pull/18600#discussion_r407944782\n\n> Actually, digging into this, `MemPoolRemovalReason` purpose seems weak right now because we only use it in `removeUnchecked` to decide if we should trigger `TransactionsRemovedFromMempool` ?\n\nThis thread was continued https://github.com/bitcoin/bitcoin/pull/18600#discussion_r407550301 where Marco made a similar sugg",https://github.com/bitcoin/bitcoin/pull/18600#discussion_r420195260,420195260,src/txmempool.cpp
ryanofsky,2020-05-05 15:24:30,"re: https://github.com/bitcoin/bitcoin/pull/18600#discussion_r412587833\n\n> It's not a new state\n\nThe new state which this writes is:\n\n| `uint256 hashBlock` | `int nIndex` | interpretation                             |\n|---------------------|--------------|--------------------------------------------|\n| 0                   | -1           | conflicted since #16624, unconfirmed prior ",https://github.com/bitcoin/bitcoin/pull/18600#discussion_r420195993,420195993,src/wallet/wallet.cpp
ariard,2020-05-20 06:46:49,"Yes I agree on source code organization following the design. I think `MemPoolRemovalReason` may be dry-ed up in itself, IIRC it's not used beyond `::CONFLICTED`. But outside PR scope.",https://github.com/bitcoin/bitcoin/pull/18600#discussion_r427776758,427776758,src/interfaces/chain.cpp
ariard,2020-05-20 07:03:24,"You're right this approach by introducing a new state is broken. I think I've been confused by trying to solve #18325 and at same time try to harden conflict detection on non-connected wallet transaction.\n\nI think the safe approach is to pass block height and hash in `transactionsRemovedFromMempool` but in another PR to reason on its own.\n\nNote: IIRC we don't have undo conflict logic, that",https://github.com/bitcoin/bitcoin/pull/18600#discussion_r427784304,427784304,src/wallet/wallet.cpp
jonatack,2020-05-22 16:40:56,"> I mean mostly for the comments that start a new ""section"" or ""paragraph"" or subtest/test case. In the failing logs you could then easily identify when the new test section begins.\n\nYes! and logging like this also makes it clear where the slower tests are to possibly speed them up.",https://github.com/bitcoin/bitcoin/pull/18600#discussion_r429347629,429347629,test/functional/wallet_txn_doublespend.py
