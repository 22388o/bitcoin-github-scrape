[
  {
    "sha": "b52a27053850590e0ac8f1431a9aad50b7beffee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTJhMjcwNTM4NTA1OTBlMGFjOGYxNDMxYTlhYWQ1MGI3YmVmZmVl",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@exmulti.com",
        "date": "2012-05-14T16:21:03Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@redhat.com",
        "date": "2012-05-20T00:40:43Z"
      },
      "message": "Reorganize(): remove spurious TxnAbort()\n\nIf Reorganize() fails, then its caller, CBlock::SetBestChain(),\nwill call TxnAbort().\n\nRedundant TxnAbort() calls are harmless.  The second will return an\nerror return value, with no other side effects.  TxnAbort() return\nvalues are generally never checked.  The impact is nil.",
      "tree": {
        "sha": "4fe681735ccbcf248f5bbd7ea049884fad25d04e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4fe681735ccbcf248f5bbd7ea049884fad25d04e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b52a27053850590e0ac8f1431a9aad50b7beffee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b52a27053850590e0ac8f1431a9aad50b7beffee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b52a27053850590e0ac8f1431a9aad50b7beffee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b52a27053850590e0ac8f1431a9aad50b7beffee/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "cde87ee75cd95b076259e146705bf34b66cd83aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cde87ee75cd95b076259e146705bf34b66cd83aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cde87ee75cd95b076259e146705bf34b66cd83aa"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f516ad65b528ef957d3b5044da0948b2d0b93975",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b52a27053850590e0ac8f1431a9aad50b7beffee/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b52a27053850590e0ac8f1431a9aad50b7beffee/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b52a27053850590e0ac8f1431a9aad50b7beffee",
        "patch": "@@ -1438,7 +1438,6 @@ bool static Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)\n         if (!block.ConnectBlock(txdb, pindex))\n         {\n             // Invalid block\n-            txdb.TxnAbort();\n             return error(\"Reorganize() : ConnectBlock %s failed\", pindex->GetBlockHash().ToString().substr(0,20).c_str());\n         }\n "
      }
    ]
  },
  {
    "sha": "cd9696fc97fc06831c1edede62a063028f2afe75",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDk2OTZmYzk3ZmMwNjgzMWMxZWRlZGU2MmEwNjMwMjhmMmFmZTc1",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@exmulti.com",
        "date": "2012-05-14T01:37:39Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@redhat.com",
        "date": "2012-05-20T00:43:19Z"
      },
      "message": "Encapsulate BDB environment inside new CDBEnv class\n\nCleans up and organizes several scattered functions and variables related to\nthe BDB env.  Class CDBInit() existed to provide a\nguaranteed-via-C++-destructor cleanup of the db environment.\n\nA formal CDBEnv class provides all of this inside a single wrapper.",
      "tree": {
        "sha": "8a1ce2483296e0370a2986bb781c4f55d4f01e64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a1ce2483296e0370a2986bb781c4f55d4f01e64"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd9696fc97fc06831c1edede62a063028f2afe75",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd9696fc97fc06831c1edede62a063028f2afe75",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd9696fc97fc06831c1edede62a063028f2afe75",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd9696fc97fc06831c1edede62a063028f2afe75/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "b52a27053850590e0ac8f1431a9aad50b7beffee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b52a27053850590e0ac8f1431a9aad50b7beffee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b52a27053850590e0ac8f1431a9aad50b7beffee"
      }
    ],
    "stats": {
      "total": 188,
      "additions": 110,
      "deletions": 78
    },
    "files": [
      {
        "sha": "988c10caa2a79b8b0b82382ff1d7b31d8ab854ba",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 77,
        "deletions": 64,
        "changes": 141,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd9696fc97fc06831c1edede62a063028f2afe75/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd9696fc97fc06831c1edede62a063028f2afe75/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=cd9696fc97fc06831c1edede62a063028f2afe75",
        "patch": "@@ -26,14 +26,11 @@ unsigned int nWalletDBUpdated;\n // CDB\n //\n \n-CCriticalSection cs_db;\n-static bool fDbEnvInit = false;\n-bool fDetachDB = false;\n-DbEnv dbenv(0);\n+CDBEnv bitdb;\n map<string, int> mapFileUseCount;\n static map<string, Db*> mapDb;\n \n-static void EnvShutdown()\n+void CDBEnv::EnvShutdown()\n {\n     if (!fDbEnvInit)\n         return;\n@@ -50,18 +47,67 @@ static void EnvShutdown()\n     DbEnv(0).remove(GetDataDir().string().c_str(), 0);\n }\n \n-class CDBInit\n+CDBEnv::CDBEnv() : dbenv(0)\n {\n-public:\n-    CDBInit()\n-    {\n-    }\n-    ~CDBInit()\n-    {\n-        EnvShutdown();\n-    }\n }\n-instance_of_cdbinit;\n+\n+CDBEnv::~CDBEnv()\n+{\n+    EnvShutdown();\n+}\n+\n+void CDBEnv::Close()\n+{\n+    EnvShutdown();\n+}\n+\n+bool CDBEnv::Open(boost::filesystem::path pathEnv_)\n+{\n+    if (fDbEnvInit)\n+        return true;\n+\n+    if (fShutdown)\n+        return false;\n+\n+    pathEnv = pathEnv_;\n+    filesystem::path pathDataDir = pathEnv;\n+    filesystem::path pathLogDir = pathDataDir / \"database\";\n+    filesystem::create_directory(pathLogDir);\n+    filesystem::path pathErrorFile = pathDataDir / \"db.log\";\n+    printf(\"dbenv.open LogDir=%s ErrorFile=%s\\n\", pathLogDir.string().c_str(), pathErrorFile.string().c_str());\n+\n+    int nDbCache = GetArg(\"-dbcache\", 25);\n+    dbenv.set_lg_dir(pathLogDir.string().c_str());\n+    dbenv.set_cachesize(nDbCache / 1024, (nDbCache % 1024)*1048576, 1);\n+    dbenv.set_lg_bsize(1048576);\n+    dbenv.set_lg_max(10485760);\n+    dbenv.set_lk_max_locks(10000);\n+    dbenv.set_lk_max_objects(10000);\n+    dbenv.set_errfile(fopen(pathErrorFile.string().c_str(), \"a\")); /// debug\n+    dbenv.set_flags(DB_AUTO_COMMIT, 1);\n+    dbenv.set_flags(DB_TXN_WRITE_NOSYNC, 1);\n+    dbenv.log_set_config(DB_LOG_AUTO_REMOVE, 1);\n+    int ret = dbenv.open(pathDataDir.string().c_str(),\n+                     DB_CREATE     |\n+                     DB_INIT_LOCK  |\n+                     DB_INIT_LOG   |\n+                     DB_INIT_MPOOL |\n+                     DB_INIT_TXN   |\n+                     DB_THREAD     |\n+                     DB_RECOVER,\n+                     S_IRUSR | S_IWUSR);\n+    if (ret > 0)\n+        return error(\"CDB() : error %d opening database environment\", ret);\n+\n+    fDbEnvInit = true;\n+    return true;\n+}\n+\n+void CDBEnv::CheckpointLSN(std::string strFile)\n+{\n+    dbenv.txn_checkpoint(0, 0, 0);\n+    dbenv.lsn_reset(strFile.c_str(), 0);\n+}\n \n \n CDB::CDB(const char *pszFile, const char* pszMode) : pdb(NULL)\n@@ -77,48 +123,16 @@ CDB::CDB(const char *pszFile, const char* pszMode) : pdb(NULL)\n         nFlags |= DB_CREATE;\n \n     {\n-        LOCK(cs_db);\n-        if (!fDbEnvInit)\n-        {\n-            if (fShutdown)\n-                return;\n-            filesystem::path pathDataDir = GetDataDir();\n-            filesystem::path pathLogDir = pathDataDir / \"database\";\n-            filesystem::create_directory(pathLogDir);\n-            filesystem::path pathErrorFile = pathDataDir / \"db.log\";\n-            printf(\"dbenv.open LogDir=%s ErrorFile=%s\\n\", pathLogDir.string().c_str(), pathErrorFile.string().c_str());\n-\n-            int nDbCache = GetArg(\"-dbcache\", 25);\n-            dbenv.set_lg_dir(pathLogDir.string().c_str());\n-            dbenv.set_cachesize(nDbCache / 1024, (nDbCache % 1024)*1048576, 1);\n-            dbenv.set_lg_bsize(1048576);\n-            dbenv.set_lg_max(10485760);\n-            dbenv.set_lk_max_locks(10000);\n-            dbenv.set_lk_max_objects(10000);\n-            dbenv.set_errfile(fopen(pathErrorFile.string().c_str(), \"a\")); /// debug\n-            dbenv.set_flags(DB_TXN_WRITE_NOSYNC, 1);\n-            dbenv.set_flags(DB_AUTO_COMMIT, 1);\n-            dbenv.log_set_config(DB_LOG_AUTO_REMOVE, 1);\n-            ret = dbenv.open(pathDataDir.string().c_str(),\n-                             DB_CREATE     |\n-                             DB_INIT_LOCK  |\n-                             DB_INIT_LOG   |\n-                             DB_INIT_MPOOL |\n-                             DB_INIT_TXN   |\n-                             DB_THREAD     |\n-                             DB_RECOVER,\n-                             S_IRUSR | S_IWUSR);\n-            if (ret > 0)\n-                throw runtime_error(strprintf(\"CDB() : error %d opening database environment\", ret));\n-            fDbEnvInit = true;\n-        }\n+        LOCK(bitdb.cs_db);\n+        if (!bitdb.Open(GetDataDir()))\n+            throw runtime_error(\"env open failed\");\n \n         strFile = pszFile;\n         ++mapFileUseCount[strFile];\n         pdb = mapDb[strFile];\n         if (pdb == NULL)\n         {\n-            pdb = new Db(&dbenv, 0);\n+            pdb = new Db(&bitdb.dbenv, 0);\n \n             ret = pdb->open(NULL,      // Txn pointer\n                             pszFile,   // Filename\n@@ -132,7 +146,7 @@ CDB::CDB(const char *pszFile, const char* pszMode) : pdb(NULL)\n                 delete pdb;\n                 pdb = NULL;\n                 {\n-                     LOCK(cs_db);\n+                     LOCK(bitdb.cs_db);\n                     --mapFileUseCount[strFile];\n                 }\n                 strFile = \"\";\n@@ -170,18 +184,18 @@ void CDB::Close()\n     if (strFile == \"blkindex.dat\" && IsInitialBlockDownload())\n         nMinutes = 5;\n \n-    dbenv.txn_checkpoint(nMinutes ? GetArg(\"-dblogsize\", 100)*1024 : 0, nMinutes, 0);\n+    bitdb.dbenv.txn_checkpoint(nMinutes ? GetArg(\"-dblogsize\", 100)*1024 : 0, nMinutes, 0);\n \n     {\n-        LOCK(cs_db);\n+        LOCK(bitdb.cs_db);\n         --mapFileUseCount[strFile];\n     }\n }\n \n void CloseDb(const string& strFile)\n {\n     {\n-        LOCK(cs_db);\n+        LOCK(bitdb.cs_db);\n         if (mapDb[strFile] != NULL)\n         {\n             // Close the database handle\n@@ -198,21 +212,20 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n     while (!fShutdown)\n     {\n         {\n-            LOCK(cs_db);\n+            LOCK(bitdb.cs_db);\n             if (!mapFileUseCount.count(strFile) || mapFileUseCount[strFile] == 0)\n             {\n                 // Flush log data to the dat file\n                 CloseDb(strFile);\n-                dbenv.txn_checkpoint(0, 0, 0);\n-                dbenv.lsn_reset(strFile.c_str(), 0);\n+                bitdb.CheckpointLSN(strFile);\n                 mapFileUseCount.erase(strFile);\n \n                 bool fSuccess = true;\n                 printf(\"Rewriting %s...\\n\", strFile.c_str());\n                 string strFileRes = strFile + \".rewrite\";\n                 { // surround usage of db with extra {}\n                     CDB db(strFile.c_str(), \"r\");\n-                    Db* pdbCopy = new Db(&dbenv, 0);\n+                    Db* pdbCopy = new Db(&bitdb.dbenv, 0);\n     \n                     int ret = pdbCopy->open(NULL,                 // Txn pointer\n                                             strFileRes.c_str(),   // Filename\n@@ -270,10 +283,10 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                 }\n                 if (fSuccess)\n                 {\n-                    Db dbA(&dbenv, 0);\n+                    Db dbA(&bitdb.dbenv, 0);\n                     if (dbA.remove(strFile.c_str(), NULL, 0))\n                         fSuccess = false;\n-                    Db dbB(&dbenv, 0);\n+                    Db dbB(&bitdb.dbenv, 0);\n                     if (dbB.rename(strFileRes.c_str(), NULL, strFile.c_str(), 0))\n                         fSuccess = false;\n                 }\n@@ -288,12 +301,12 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n }\n \n \n-void DBFlush(bool fShutdown)\n+void CDBEnv::Flush(bool fShutdown)\n {\n     int64 nStart = GetTimeMillis();\n     // Flush log data to the actual data file\n     //  on all files that are not in use\n-    printf(\"DBFlush(%s)%s\\n\", fShutdown ? \"true\" : \"false\", fDbEnvInit ? \"\" : \" db not started\");\n+    printf(\"Flush(%s)%s\\n\", fShutdown ? \"true\" : \"false\", fDbEnvInit ? \"\" : \" db not started\");\n     if (!fDbEnvInit)\n         return;\n     {\n@@ -327,7 +340,7 @@ void DBFlush(bool fShutdown)\n             if (mapFileUseCount.empty())\n             {\n                 dbenv.log_archive(&listp, DB_ARCH_REMOVE);\n-                EnvShutdown();\n+                Close();\n             }\n         }\n     }"
      },
      {
        "sha": "e2983e07870a1e8e2ada4b67b6aaa563db52c52b",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 26,
        "deletions": 4,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd9696fc97fc06831c1edede62a063028f2afe75/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd9696fc97fc06831c1edede62a063028f2afe75/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=cd9696fc97fc06831c1edede62a063028f2afe75",
        "patch": "@@ -25,14 +25,36 @@ class CWallet;\n class CWalletTx;\n \n extern unsigned int nWalletDBUpdated;\n-extern bool fDetachDB;\n-extern DbEnv dbenv;\n \n-extern void DBFlush(bool fShutdown);\n void ThreadFlushWalletDB(void* parg);\n bool BackupWallet(const CWallet& wallet, const std::string& strDest);\n \n \n+class CDBEnv\n+{\n+private:\n+    bool fDetachDB;\n+    bool fDbEnvInit;\n+    boost::filesystem::path pathEnv;\n+\n+    void EnvShutdown();\n+\n+public:\n+    mutable CCriticalSection cs_db;\n+    DbEnv dbenv;\n+\n+    CDBEnv();\n+    ~CDBEnv();\n+    bool Open(boost::filesystem::path pathEnv_);\n+    void Close();\n+    void Flush(bool fShutdown);\n+    void CheckpointLSN(std::string strFile);\n+    void SetDetach(bool fDetachDB_) { fDetachDB = fDetachDB_; }\n+};\n+\n+extern CDBEnv bitdb;\n+\n+\n /** RAII class that provides access to a Berkeley database */\n class CDB\n {\n@@ -216,7 +238,7 @@ class CDB\n         if (!pdb)\n             return false;\n         DbTxn* ptxn = NULL;\n-        int ret = dbenv.txn_begin(GetTxn(), &ptxn, DB_TXN_WRITE_NOSYNC);\n+        int ret = bitdb.dbenv.txn_begin(GetTxn(), &ptxn, DB_TXN_WRITE_NOSYNC);\n         if (!ptxn || ret != 0)\n             return false;\n         vTxn.push_back(ptxn);"
      },
      {
        "sha": "809c07f375263dac248846d21130d22014be74ec",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd9696fc97fc06831c1edede62a063028f2afe75/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd9696fc97fc06831c1edede62a063028f2afe75/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=cd9696fc97fc06831c1edede62a063028f2afe75",
        "patch": "@@ -54,9 +54,9 @@ void Shutdown(void* parg)\n     {\n         fShutdown = true;\n         nTransactionsUpdated++;\n-        DBFlush(false);\n+        bitdb.Flush(false);\n         StopNode();\n-        DBFlush(true);\n+        bitdb.Flush(true);\n         boost::filesystem::remove(GetPidFile());\n         UnregisterWallet(pwalletMain);\n         delete pwalletMain;\n@@ -294,7 +294,7 @@ bool AppInit2()\n     }\n \n     fDebug = GetBoolArg(\"-debug\");\n-    fDetachDB = GetBoolArg(\"-detachdb\", false);\n+    bitdb.SetDetach(GetBoolArg(\"-detachdb\", false));\n \n #if !defined(WIN32) && !defined(QT_GUI)\n     fDaemon = GetBoolArg(\"-daemon\");"
      },
      {
        "sha": "4bdb7e23d137f8f8474ffdfa4029e44fd1f17fea",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd9696fc97fc06831c1edede62a063028f2afe75/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd9696fc97fc06831c1edede62a063028f2afe75/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=cd9696fc97fc06831c1edede62a063028f2afe75",
        "patch": "@@ -13,7 +13,6 @@ using namespace boost;\n \n static uint64 nAccountingEntryNumber = 0;\n \n-extern CCriticalSection cs_db;\n extern map<string, int> mapFileUseCount;\n extern void CloseDb(const string& strFile);\n \n@@ -350,7 +349,7 @@ void ThreadFlushWalletDB(void* parg)\n \n         if (nLastFlushed != nWalletDBUpdated && GetTime() - nLastWalletUpdate >= 2)\n         {\n-            TRY_LOCK(cs_db,lockDb);\n+            TRY_LOCK(bitdb.cs_db,lockDb);\n             if (lockDb)\n             {\n                 // Don't do this if any databases are in use\n@@ -373,8 +372,7 @@ void ThreadFlushWalletDB(void* parg)\n \n                         // Flush wallet.dat so it's self contained\n                         CloseDb(strFile);\n-                        dbenv.txn_checkpoint(0, 0, 0);\n-                        dbenv.lsn_reset(strFile.c_str(), 0);\n+                        bitdb.CheckpointLSN(strFile);\n \n                         mapFileUseCount.erase(mi++);\n                         printf(\"Flushed wallet.dat %\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n@@ -392,13 +390,12 @@ bool BackupWallet(const CWallet& wallet, const string& strDest)\n     while (!fShutdown)\n     {\n         {\n-            LOCK(cs_db);\n+            LOCK(bitdb.cs_db);\n             if (!mapFileUseCount.count(wallet.strWalletFile) || mapFileUseCount[wallet.strWalletFile] == 0)\n             {\n                 // Flush log data to the dat file\n                 CloseDb(wallet.strWalletFile);\n-                dbenv.txn_checkpoint(0, 0, 0);\n-                dbenv.lsn_reset(wallet.strWalletFile.c_str(), 0);\n+                bitdb.CheckpointLSN(wallet.strWalletFile);\n                 mapFileUseCount.erase(wallet.strWalletFile);\n \n                 // Copy wallet.dat"
      }
    ]
  },
  {
    "sha": "24b57e3c6a1e5c00e10ee19803dd86d821ffebb2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNGI1N2UzYzZhMWU1YzAwZTEwZWUxOTgwM2RkODZkODIxZmZlYmIy",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@exmulti.com",
        "date": "2012-05-14T16:33:34Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@redhat.com",
        "date": "2012-05-20T00:44:31Z"
      },
      "message": "Create CDBEnv::TxnBegin(), and use it in CDB::TxnBegin()",
      "tree": {
        "sha": "64e6784b3f45cddfe70e83eb0360b56340131844",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/64e6784b3f45cddfe70e83eb0360b56340131844"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/24b57e3c6a1e5c00e10ee19803dd86d821ffebb2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24b57e3c6a1e5c00e10ee19803dd86d821ffebb2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/24b57e3c6a1e5c00e10ee19803dd86d821ffebb2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24b57e3c6a1e5c00e10ee19803dd86d821ffebb2/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "cd9696fc97fc06831c1edede62a063028f2afe75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd9696fc97fc06831c1edede62a063028f2afe75",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd9696fc97fc06831c1edede62a063028f2afe75"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 11,
      "deletions": 3
    },
    "files": [
      {
        "sha": "aff5e367b4d3b5e7939fe80109e0df9ce0432ebc",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24b57e3c6a1e5c00e10ee19803dd86d821ffebb2/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24b57e3c6a1e5c00e10ee19803dd86d821ffebb2/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=24b57e3c6a1e5c00e10ee19803dd86d821ffebb2",
        "patch": "@@ -50,6 +50,15 @@ class CDBEnv\n     void Flush(bool fShutdown);\n     void CheckpointLSN(std::string strFile);\n     void SetDetach(bool fDetachDB_) { fDetachDB = fDetachDB_; }\n+\n+    DbTxn *TxnBegin(DbTxn *baseTxn, int flags=DB_TXN_WRITE_NOSYNC)\n+    {\n+        DbTxn* ptxn = NULL;\n+        int ret = dbenv.txn_begin(baseTxn, &ptxn, flags);\n+        if (!ptxn || ret != 0)\n+            return NULL;\n+        return ptxn;\n+    }\n };\n \n extern CDBEnv bitdb;\n@@ -237,9 +246,8 @@ class CDB\n     {\n         if (!pdb)\n             return false;\n-        DbTxn* ptxn = NULL;\n-        int ret = bitdb.dbenv.txn_begin(GetTxn(), &ptxn, DB_TXN_WRITE_NOSYNC);\n-        if (!ptxn || ret != 0)\n+        DbTxn* ptxn = bitdb.TxnBegin(GetTxn());\n+        if (!ptxn)\n             return false;\n         vTxn.push_back(ptxn);\n         return true;"
      }
    ]
  },
  {
    "sha": "8b1202c52c4d8f42c23b02a4cfdb097663e6e7b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YjEyMDJjNTJjNGQ4ZjQyYzIzYjAyYTRjZmRiMDk3NjYzZTZlN2Iw",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@exmulti.com",
        "date": "2012-05-14T16:39:29Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@redhat.com",
        "date": "2012-05-20T00:45:39Z"
      },
      "message": "Remove unused nested BDB transaction support",
      "tree": {
        "sha": "4243f6bb29d39a4ddd701e75e20054900ba0f88d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4243f6bb29d39a4ddd701e75e20054900ba0f88d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b1202c52c4d8f42c23b02a4cfdb097663e6e7b0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b1202c52c4d8f42c23b02a4cfdb097663e6e7b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8b1202c52c4d8f42c23b02a4cfdb097663e6e7b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b1202c52c4d8f42c23b02a4cfdb097663e6e7b0/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "24b57e3c6a1e5c00e10ee19803dd86d821ffebb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24b57e3c6a1e5c00e10ee19803dd86d821ffebb2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/24b57e3c6a1e5c00e10ee19803dd86d821ffebb2"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 19,
      "deletions": 31
    },
    "files": [
      {
        "sha": "21b1e0ae8e6d945b36e84f1896a9d3552f03008b",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b1202c52c4d8f42c23b02a4cfdb097663e6e7b0/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b1202c52c4d8f42c23b02a4cfdb097663e6e7b0/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=8b1202c52c4d8f42c23b02a4cfdb097663e6e7b0",
        "patch": "@@ -170,9 +170,9 @@ void CDB::Close()\n {\n     if (!pdb)\n         return;\n-    if (!vTxn.empty())\n-        vTxn.front()->abort();\n-    vTxn.clear();\n+    if (activeTxn)\n+        activeTxn->abort();\n+    activeTxn = NULL;\n     pdb = NULL;\n \n     // Flush database activity from memory pool to disk log"
      },
      {
        "sha": "7af4d5e1cd3ea3f855e835e775d9b03437ae4913",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 16,
        "deletions": 28,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b1202c52c4d8f42c23b02a4cfdb097663e6e7b0/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b1202c52c4d8f42c23b02a4cfdb097663e6e7b0/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=8b1202c52c4d8f42c23b02a4cfdb097663e6e7b0",
        "patch": "@@ -51,10 +51,10 @@ class CDBEnv\n     void CheckpointLSN(std::string strFile);\n     void SetDetach(bool fDetachDB_) { fDetachDB = fDetachDB_; }\n \n-    DbTxn *TxnBegin(DbTxn *baseTxn, int flags=DB_TXN_WRITE_NOSYNC)\n+    DbTxn *TxnBegin(int flags=DB_TXN_WRITE_NOSYNC)\n     {\n         DbTxn* ptxn = NULL;\n-        int ret = dbenv.txn_begin(baseTxn, &ptxn, flags);\n+        int ret = dbenv.txn_begin(NULL, &ptxn, flags);\n         if (!ptxn || ret != 0)\n             return NULL;\n         return ptxn;\n@@ -70,7 +70,7 @@ class CDB\n protected:\n     Db* pdb;\n     std::string strFile;\n-    std::vector<DbTxn*> vTxn;\n+    DbTxn *activeTxn;\n     bool fReadOnly;\n \n     explicit CDB(const char* pszFile, const char* pszMode=\"r+\");\n@@ -97,7 +97,7 @@ class CDB\n         // Read\n         Dbt datValue;\n         datValue.set_flags(DB_DBT_MALLOC);\n-        int ret = pdb->get(GetTxn(), &datKey, &datValue, 0);\n+        int ret = pdb->get(activeTxn, &datKey, &datValue, 0);\n         memset(datKey.get_data(), 0, datKey.get_size());\n         if (datValue.get_data() == NULL)\n             return false;\n@@ -133,7 +133,7 @@ class CDB\n         Dbt datValue(&ssValue[0], ssValue.size());\n \n         // Write\n-        int ret = pdb->put(GetTxn(), &datKey, &datValue, (fOverwrite ? 0 : DB_NOOVERWRITE));\n+        int ret = pdb->put(activeTxn, &datKey, &datValue, (fOverwrite ? 0 : DB_NOOVERWRITE));\n \n         // Clear memory in case it was a private key\n         memset(datKey.get_data(), 0, datKey.get_size());\n@@ -156,7 +156,7 @@ class CDB\n         Dbt datKey(&ssKey[0], ssKey.size());\n \n         // Erase\n-        int ret = pdb->del(GetTxn(), &datKey, 0);\n+        int ret = pdb->del(activeTxn, &datKey, 0);\n \n         // Clear memory\n         memset(datKey.get_data(), 0, datKey.get_size());\n@@ -176,7 +176,7 @@ class CDB\n         Dbt datKey(&ssKey[0], ssKey.size());\n \n         // Exists\n-        int ret = pdb->exists(GetTxn(), &datKey, 0);\n+        int ret = pdb->exists(activeTxn, &datKey, 0);\n \n         // Clear memory\n         memset(datKey.get_data(), 0, datKey.get_size());\n@@ -233,45 +233,33 @@ class CDB\n         return 0;\n     }\n \n-    DbTxn* GetTxn()\n-    {\n-        if (!vTxn.empty())\n-            return vTxn.back();\n-        else\n-            return NULL;\n-    }\n-\n public:\n     bool TxnBegin()\n     {\n-        if (!pdb)\n+        if (!pdb || activeTxn)\n             return false;\n-        DbTxn* ptxn = bitdb.TxnBegin(GetTxn());\n+        DbTxn* ptxn = bitdb.TxnBegin();\n         if (!ptxn)\n             return false;\n-        vTxn.push_back(ptxn);\n+        activeTxn = ptxn;\n         return true;\n     }\n \n     bool TxnCommit()\n     {\n-        if (!pdb)\n-            return false;\n-        if (vTxn.empty())\n+        if (!pdb || !activeTxn)\n             return false;\n-        int ret = vTxn.back()->commit(0);\n-        vTxn.pop_back();\n+        int ret = activeTxn->commit(0);\n+        activeTxn = NULL;\n         return (ret == 0);\n     }\n \n     bool TxnAbort()\n     {\n-        if (!pdb)\n-            return false;\n-        if (vTxn.empty())\n+        if (!pdb || !activeTxn)\n             return false;\n-        int ret = vTxn.back()->abort();\n-        vTxn.pop_back();\n+        int ret = activeTxn->abort();\n+        activeTxn = NULL;\n         return (ret == 0);\n     }\n "
      }
    ]
  },
  {
    "sha": "94e34fa0adb818baacdcb6408f0a92e07f3ce7df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NGUzNGZhMGFkYjgxOGJhYWNkY2I2NDA4ZjBhOTJlMDdmM2NlN2Rm",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@exmulti.com",
        "date": "2012-05-15T02:18:21Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@redhat.com",
        "date": "2012-05-20T00:45:39Z"
      },
      "message": "CDB::CDB: properly initialize activeTxn to NULL",
      "tree": {
        "sha": "43eb653df6852ebddeed5d3c0e689b1c28fdf55c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/43eb653df6852ebddeed5d3c0e689b1c28fdf55c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94e34fa0adb818baacdcb6408f0a92e07f3ce7df",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94e34fa0adb818baacdcb6408f0a92e07f3ce7df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/94e34fa0adb818baacdcb6408f0a92e07f3ce7df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94e34fa0adb818baacdcb6408f0a92e07f3ce7df/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "8b1202c52c4d8f42c23b02a4cfdb097663e6e7b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b1202c52c4d8f42c23b02a4cfdb097663e6e7b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b1202c52c4d8f42c23b02a4cfdb097663e6e7b0"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "08b66141819c581328e51326cc6430cd7ddf1c8a",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94e34fa0adb818baacdcb6408f0a92e07f3ce7df/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94e34fa0adb818baacdcb6408f0a92e07f3ce7df/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=94e34fa0adb818baacdcb6408f0a92e07f3ce7df",
        "patch": "@@ -110,7 +110,8 @@ void CDBEnv::CheckpointLSN(std::string strFile)\n }\n \n \n-CDB::CDB(const char *pszFile, const char* pszMode) : pdb(NULL)\n+CDB::CDB(const char *pszFile, const char* pszMode) :\n+    pdb(NULL), activeTxn(NULL)\n {\n     int ret;\n     if (pszFile == NULL)"
      }
    ]
  },
  {
    "sha": "ffe8b77a617efd802a9d4ba7e42b163fbd9a250b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZmU4Yjc3YTYxN2VmZDgwMmE5ZDRiYTdlNDJiMTYzZmJkOWEyNTBi",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@exmulti.com",
        "date": "2012-05-18T06:49:50Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@redhat.com",
        "date": "2012-05-20T00:46:52Z"
      },
      "message": "Further CDBEnv encapsulation work.",
      "tree": {
        "sha": "38bef9570c2b71b299cd5d54bfb6f178ce59cf32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38bef9570c2b71b299cd5d54bfb6f178ce59cf32"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ffe8b77a617efd802a9d4ba7e42b163fbd9a250b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffe8b77a617efd802a9d4ba7e42b163fbd9a250b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ffe8b77a617efd802a9d4ba7e42b163fbd9a250b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffe8b77a617efd802a9d4ba7e42b163fbd9a250b/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "94e34fa0adb818baacdcb6408f0a92e07f3ce7df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94e34fa0adb818baacdcb6408f0a92e07f3ce7df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94e34fa0adb818baacdcb6408f0a92e07f3ce7df"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 24,
      "deletions": 25
    },
    "files": [
      {
        "sha": "f0addda918231f8f244bf5ab01a0a7333d3cf0b4",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 13,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffe8b77a617efd802a9d4ba7e42b163fbd9a250b/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffe8b77a617efd802a9d4ba7e42b163fbd9a250b/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=ffe8b77a617efd802a9d4ba7e42b163fbd9a250b",
        "patch": "@@ -27,8 +27,6 @@ unsigned int nWalletDBUpdated;\n //\n \n CDBEnv bitdb;\n-map<string, int> mapFileUseCount;\n-static map<string, Db*> mapDb;\n \n void CDBEnv::EnvShutdown()\n {\n@@ -129,8 +127,8 @@ CDB::CDB(const char *pszFile, const char* pszMode) :\n             throw runtime_error(\"env open failed\");\n \n         strFile = pszFile;\n-        ++mapFileUseCount[strFile];\n-        pdb = mapDb[strFile];\n+        ++bitdb.mapFileUseCount[strFile];\n+        pdb = bitdb.mapDb[strFile];\n         if (pdb == NULL)\n         {\n             pdb = new Db(&bitdb.dbenv, 0);\n@@ -148,7 +146,7 @@ CDB::CDB(const char *pszFile, const char* pszMode) :\n                 pdb = NULL;\n                 {\n                      LOCK(bitdb.cs_db);\n-                    --mapFileUseCount[strFile];\n+                    --bitdb.mapFileUseCount[strFile];\n                 }\n                 strFile = \"\";\n                 throw runtime_error(strprintf(\"CDB() : can't open database file %s, error %d\", pszFile, ret));\n@@ -162,7 +160,7 @@ CDB::CDB(const char *pszFile, const char* pszMode) :\n                 fReadOnly = fTmp;\n             }\n \n-            mapDb[strFile] = pdb;\n+            bitdb.mapDb[strFile] = pdb;\n         }\n     }\n }\n@@ -189,14 +187,14 @@ void CDB::Close()\n \n     {\n         LOCK(bitdb.cs_db);\n-        --mapFileUseCount[strFile];\n+        --bitdb.mapFileUseCount[strFile];\n     }\n }\n \n-void CloseDb(const string& strFile)\n+void CDBEnv::CloseDb(const string& strFile)\n {\n     {\n-        LOCK(bitdb.cs_db);\n+        LOCK(cs_db);\n         if (mapDb[strFile] != NULL)\n         {\n             // Close the database handle\n@@ -214,12 +212,12 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n     {\n         {\n             LOCK(bitdb.cs_db);\n-            if (!mapFileUseCount.count(strFile) || mapFileUseCount[strFile] == 0)\n+            if (!bitdb.mapFileUseCount.count(strFile) || bitdb.mapFileUseCount[strFile] == 0)\n             {\n                 // Flush log data to the dat file\n-                CloseDb(strFile);\n+                bitdb.CloseDb(strFile);\n                 bitdb.CheckpointLSN(strFile);\n-                mapFileUseCount.erase(strFile);\n+                bitdb.mapFileUseCount.erase(strFile);\n \n                 bool fSuccess = true;\n                 printf(\"Rewriting %s...\\n\", strFile.c_str());\n@@ -276,7 +274,7 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                     if (fSuccess)\n                     {\n                         db.Close();\n-                        CloseDb(strFile);\n+                        bitdb.CloseDb(strFile);\n                         if (pdbCopy->close(0))\n                             fSuccess = false;\n                         delete pdbCopy;"
      },
      {
        "sha": "abc58c4b1edcd035e36fc5d7b94e8b4de7cf093c",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffe8b77a617efd802a9d4ba7e42b163fbd9a250b/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffe8b77a617efd802a9d4ba7e42b163fbd9a250b/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=ffe8b77a617efd802a9d4ba7e42b163fbd9a250b",
        "patch": "@@ -42,6 +42,8 @@ class CDBEnv\n public:\n     mutable CCriticalSection cs_db;\n     DbEnv dbenv;\n+    std::map<std::string, int> mapFileUseCount;\n+    std::map<std::string, Db*> mapDb;\n \n     CDBEnv();\n     ~CDBEnv();\n@@ -51,6 +53,8 @@ class CDBEnv\n     void CheckpointLSN(std::string strFile);\n     void SetDetach(bool fDetachDB_) { fDetachDB = fDetachDB_; }\n \n+    void CloseDb(const std::string& strFile);\n+\n     DbTxn *TxnBegin(int flags=DB_TXN_WRITE_NOSYNC)\n     {\n         DbTxn* ptxn = NULL;"
      },
      {
        "sha": "84dedbc88e2d827d9a3a82925429c581dd3c787f",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 12,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffe8b77a617efd802a9d4ba7e42b163fbd9a250b/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffe8b77a617efd802a9d4ba7e42b163fbd9a250b/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=ffe8b77a617efd802a9d4ba7e42b163fbd9a250b",
        "patch": "@@ -13,9 +13,6 @@ using namespace boost;\n \n static uint64 nAccountingEntryNumber = 0;\n \n-extern map<string, int> mapFileUseCount;\n-extern void CloseDb(const string& strFile);\n-\n //\n // CWalletDB\n //\n@@ -354,27 +351,27 @@ void ThreadFlushWalletDB(void* parg)\n             {\n                 // Don't do this if any databases are in use\n                 int nRefCount = 0;\n-                map<string, int>::iterator mi = mapFileUseCount.begin();\n-                while (mi != mapFileUseCount.end())\n+                map<string, int>::iterator mi = bitdb.mapFileUseCount.begin();\n+                while (mi != bitdb.mapFileUseCount.end())\n                 {\n                     nRefCount += (*mi).second;\n                     mi++;\n                 }\n \n                 if (nRefCount == 0 && !fShutdown)\n                 {\n-                    map<string, int>::iterator mi = mapFileUseCount.find(strFile);\n-                    if (mi != mapFileUseCount.end())\n+                    map<string, int>::iterator mi = bitdb.mapFileUseCount.find(strFile);\n+                    if (mi != bitdb.mapFileUseCount.end())\n                     {\n                         printf(\"Flushing wallet.dat\\n\");\n                         nLastFlushed = nWalletDBUpdated;\n                         int64 nStart = GetTimeMillis();\n \n                         // Flush wallet.dat so it's self contained\n-                        CloseDb(strFile);\n+                        bitdb.CloseDb(strFile);\n                         bitdb.CheckpointLSN(strFile);\n \n-                        mapFileUseCount.erase(mi++);\n+                        bitdb.mapFileUseCount.erase(mi++);\n                         printf(\"Flushed wallet.dat %\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n                     }\n                 }\n@@ -391,12 +388,12 @@ bool BackupWallet(const CWallet& wallet, const string& strDest)\n     {\n         {\n             LOCK(bitdb.cs_db);\n-            if (!mapFileUseCount.count(wallet.strWalletFile) || mapFileUseCount[wallet.strWalletFile] == 0)\n+            if (!bitdb.mapFileUseCount.count(wallet.strWalletFile) || bitdb.mapFileUseCount[wallet.strWalletFile] == 0)\n             {\n                 // Flush log data to the dat file\n-                CloseDb(wallet.strWalletFile);\n+                bitdb.CloseDb(wallet.strWalletFile);\n                 bitdb.CheckpointLSN(wallet.strWalletFile);\n-                mapFileUseCount.erase(wallet.strWalletFile);\n+                bitdb.mapFileUseCount.erase(wallet.strWalletFile);\n \n                 // Copy wallet.dat\n                 filesystem::path pathSrc = GetDataDir() / wallet.strWalletFile;"
      }
    ]
  }
]