promag,2018-08-22T00:41:23Z,Follow up of https://github.com/bitcoin/bitcoin/pull/13945#issuecomment-414859779,https://github.com/bitcoin/bitcoin/pull/14020#issuecomment-414867661,414867661,
isghe,2018-08-22T01:01:50Z,missing `hidden` category,https://github.com/bitcoin/bitcoin/pull/14020#issuecomment-414871362,414871362,
isghe,2018-08-22T01:04:14Z,missing `test` category (in Qt),https://github.com/bitcoin/bitcoin/pull/14020#issuecomment-414871761,414871761,
promag,2018-08-22T01:07:00Z,"> missing `hidden` category\n\nIt's hidden to the RPC client, and has special treatment in https://github.com/bitcoin/bitcoin/blob/2df11322faae555bd963a7610102b61049168333/src/rpc/server.cpp#L172 ",https://github.com/bitcoin/bitcoin/pull/14020#issuecomment-414872210,414872210,
isghe,2018-08-22T01:16:31Z,"How can be sure, external scripts analysing C/C++ Bitcoin source code, are immune to injection?",https://github.com/bitcoin/bitcoin/pull/14020#issuecomment-414873860,414873860,
isghe,2018-08-22T01:18:34Z,"I would prefer a C/C++ compile time security check, not an external script security check.",https://github.com/bitcoin/bitcoin/pull/14020#issuecomment-414874215,414874215,
promag,2018-08-22T01:23:47Z,"> missing `test` category (in Qt)\n\nI'm not following, in Qt?\n\n> How can be sure, external scripts analysing C/C++ Bitcoin source code, are immune to injection?\n\nWhat is subject to injection here?\n\n> I would prefer a C/C++ compile time security check, not an external script security check.\n\nThere is still room to that, this test file can check for other stuff, like output is sor",https://github.com/bitcoin/bitcoin/pull/14020#issuecomment-414875144,414875144,
isghe,2018-08-22T01:24:30Z,"worst, I understood only now: it looks it is working on `./bitcoin-cli help` output!",https://github.com/bitcoin/bitcoin/pull/14020#issuecomment-414875276,414875276,
isghe,2018-08-22T01:35:59Z,"> I'm not following, in Qt?\n\nI found this (as I wrote here https://github.com/bitcoin/bitcoin/pull/13945 in the `p.s: anyway I was able to catch the QT command rpcNestedTest.`)\n\nin file `src/qt/test/rpcnestedtests.cpp` line 32:\n``` C\nstatic const CRPCCommand vRPCCommands[] =\n{\n    { ""test"", ""rpcNestedTest"", &rpcNestedTest_rpc, {} },\n};\n```\nAnyway take care, I always configure",https://github.com/bitcoin/bitcoin/pull/14020#issuecomment-414877375,414877375,
promag,2018-08-22T01:37:22Z,"Oh, that doesn't matter IMO.",https://github.com/bitcoin/bitcoin/pull/14020#issuecomment-414877623,414877623,
l2a5b1,2018-08-22T12:04:08Z,"Thanks @promag! \n\nWould it be an idea to assert that the actual titles are valid (i.e. not map the titles back to categories)? \n\nI think this is more in spirit of a functional test and the test can then also assert that there are no true negatives (for example: `""== Hidden ==""`, `""== hidden ==""`, `""== blockchain ==""`,`""== ==""`).\n",https://github.com/bitcoin/bitcoin/pull/14020#issuecomment-415008741,415008741,
promag,2018-08-22T12:09:18Z,@251Labs I'll update.,https://github.com/bitcoin/bitcoin/pull/14020#issuecomment-415010025,415010025,
promag,2018-08-23T00:42:12Z,@251Labs updated.,https://github.com/bitcoin/bitcoin/pull/14020#issuecomment-415233949,415233949,
l2a5b1,2018-08-24T14:27:34Z,"utACK 6af6d9b\n\nThanks @promag! Maybe a small nit would be to assert against the full category title to catch potentially missing title suffixes (`==`). Other than this nit LGTM.\n",https://github.com/bitcoin/bitcoin/pull/14020#issuecomment-415775704,415775704,
isghe,2018-08-25T01:04:54Z,"I am not an expert about functional test, and their implementations; but I like to learn new things, that's why I am asking (maybe stupid) question.\n\nIn this kind of functional and deterministic test, wouldn't be easier simply to check the sha256 output?\n\n```\n$ ./src/bitcoin-cli help | sha256\n2ae3a94e05bbb98323f72f19272bde01f075db16c7e4357bc46815a1393cd44a\n```\n\nthanks :-)",https://github.com/bitcoin/bitcoin/pull/14020#issuecomment-415918381,415918381,
promag,2018-08-29T12:49:05Z,"I tend to prefer like this because\n - follows current convention\n - more little test files is more ""readable"" than less bigger test files\n - more files allows parallelization",https://github.com/bitcoin/bitcoin/pull/14020#issuecomment-416940347,416940347,
MarcoFalke,2018-08-25T13:55:56Z,Imo this could be combined into the feature_help test. Just adding a new function there `def rpc_help(self): ...` and moving the other code into `def cli_help(self): ...`.,https://github.com/bitcoin/bitcoin/pull/14020#discussion_r212799143,212799143,test/functional/test_runner.py
laanwj,2018-08-29T12:24:24Z,"hmm not sure about this, my first intuition was to agree with you but now I think RPC help and options help are sufficiently different concepts (and in code) to have as separate tests\nBut I'll leave it to @promag ",https://github.com/bitcoin/bitcoin/pull/14020#discussion_r213653814,213653814,test/functional/test_runner.py
MarcoFalke,2018-08-30T11:58:22Z,zmq is only available when installed. Should check for that like the other zmq tests?,https://github.com/bitcoin/bitcoin/pull/14020#discussion_r214002174,214002174,test/functional/rpc_help.py
