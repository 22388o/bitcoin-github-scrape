[
  {
    "sha": "bbbb6242b59e7269411b8d86809585b0d506ac65",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYmJiNjI0MmI1OWU3MjY5NDExYjhkODY4MDk1ODViMGQ1MDZhYzY1",
    "commit": {
      "author": {
        "name": "Prayank",
        "email": "prayank23@outlook.com",
        "date": "2020-09-11T20:10:40Z"
      },
      "committer": {
        "name": "Prayank",
        "email": "prayank23@outlook.com",
        "date": "2020-09-11T20:10:40Z"
      },
      "message": "Remove confusing connect_nodes global\n\nReplace connect_nodes(self.nodes[a], b) with self.connect_nodes(a, b) and remove the global connect_nodes",
      "tree": {
        "sha": "77e6091b2ae96e2bcd0a26008f0db0a0ab1c5a46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77e6091b2ae96e2bcd0a26008f0db0a0ab1c5a46"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bbbb6242b59e7269411b8d86809585b0d506ac65",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbbb6242b59e7269411b8d86809585b0d506ac65",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bbbb6242b59e7269411b8d86809585b0d506ac65",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbbb6242b59e7269411b8d86809585b0d506ac65/comments",
    "author": {
      "login": "prayank23",
      "id": 13405205,
      "node_id": "MDQ6VXNlcjEzNDA1MjA1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13405205?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prayank23",
      "html_url": "https://github.com/prayank23",
      "followers_url": "https://api.github.com/users/prayank23/followers",
      "following_url": "https://api.github.com/users/prayank23/following{/other_user}",
      "gists_url": "https://api.github.com/users/prayank23/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prayank23/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prayank23/subscriptions",
      "organizations_url": "https://api.github.com/users/prayank23/orgs",
      "repos_url": "https://api.github.com/users/prayank23/repos",
      "events_url": "https://api.github.com/users/prayank23/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prayank23/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "prayank23",
      "id": 13405205,
      "node_id": "MDQ6VXNlcjEzNDA1MjA1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13405205?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prayank23",
      "html_url": "https://github.com/prayank23",
      "followers_url": "https://api.github.com/users/prayank23/followers",
      "following_url": "https://api.github.com/users/prayank23/following{/other_user}",
      "gists_url": "https://api.github.com/users/prayank23/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prayank23/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prayank23/subscriptions",
      "organizations_url": "https://api.github.com/users/prayank23/orgs",
      "repos_url": "https://api.github.com/users/prayank23/repos",
      "events_url": "https://api.github.com/users/prayank23/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prayank23/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2d9934381bf89f1746f13cc5f86ae199eaa52bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2d9934381bf89f1746f13cc5f86ae199eaa52bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2d9934381bf89f1746f13cc5f86ae199eaa52bb"
      }
    ],
    "stats": {
      "total": 253,
      "additions": 105,
      "deletions": 148
    },
    "files": [
      {
        "sha": "8113a44758950ec998978f36a59ac3b49143c106",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -23,10 +23,7 @@\n     p2p_lock,\n )\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (\n-    assert_equal,\n-    connect_nodes,\n-)\n+from test_framework.util import assert_equal\n \n # P2PInterface is a class containing callbacks to be executed when a P2P\n # message is received from the node-under-test. Subclass P2PInterface and\n@@ -115,7 +112,7 @@ def setup_network(self):\n         # In this test, we're not connecting node2 to node0 or node1. Calls to\n         # sync_all() should not include node2, since we're not expecting it to\n         # sync.\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n         self.sync_all(self.nodes[0:2])\n \n     # Use setup_nodes() to customize the node start behaviour (for example if\n@@ -183,7 +180,7 @@ def run_test(self):\n         self.nodes[1].waitforblockheight(11)\n \n         self.log.info(\"Connect node2 and node1\")\n-        connect_nodes(self.nodes[1], 2)\n+        self.connect_nodes(1, 2)\n \n         self.log.info(\"Wait for node2 to receive all the blocks from node1\")\n         self.sync_all()"
      },
      {
        "sha": "8abfdef3a1d64d54fc49ecdc43d3e540e9153d26",
        "filename": "test/functional/feature_abortnode.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/feature_abortnode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/feature_abortnode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_abortnode.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -11,7 +11,7 @@\n \"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import get_datadir_path, connect_nodes\n+from test_framework.util import get_datadir_path\n import os\n \n \n@@ -36,7 +36,7 @@ def run_test(self):\n         # attempt.\n         self.nodes[1].generate(3)\n         with self.nodes[0].assert_debug_log([\"Failed to disconnect block\"]):\n-            connect_nodes(self.nodes[0], 1)\n+            self.connect_nodes(0, 1)\n             self.nodes[1].generate(1)\n \n             # Check that node0 aborted"
      },
      {
        "sha": "8a8a0c76145312b2ef80c0ccda415181754a291a",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -13,7 +13,6 @@\n     assert_equal,\n     assert_greater_than,\n     assert_greater_than_or_equal,\n-    connect_nodes,\n     satoshi_round,\n )\n \n@@ -232,9 +231,9 @@ def run_test(self):\n         # so the estimates would not be affected by the splitting transactions\n         self.start_node(1)\n         self.start_node(2)\n-        connect_nodes(self.nodes[1], 0)\n-        connect_nodes(self.nodes[0], 2)\n-        connect_nodes(self.nodes[2], 1)\n+        self.connect_nodes(1, 0)\n+        self.connect_nodes(0, 2)\n+        self.connect_nodes(2, 1)\n \n         self.sync_all()\n "
      },
      {
        "sha": "abf87e8f0c6d38e9a1021300d0280bb494cf9843",
        "filename": "test/functional/feature_minchainwork.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/feature_minchainwork.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/feature_minchainwork.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_minchainwork.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -18,7 +18,7 @@\n import time\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import connect_nodes, assert_equal\n+from test_framework.util import assert_equal\n \n # 2 hashes required per regtest block (with no difficulty adjustment)\n REGTEST_WORK_PER_BLOCK = 2\n@@ -39,7 +39,7 @@ def setup_network(self):\n         # block relay to inbound peers.\n         self.setup_nodes()\n         for i in range(self.num_nodes-1):\n-            connect_nodes(self.nodes[i+1], i)\n+            self.connect_nodes(i+1, i)\n \n     def run_test(self):\n         # Start building a chain on node0.  node2 shouldn't be able to sync until node1's"
      },
      {
        "sha": "af51805447c470ad9ebbf20b5815c481f18b4e2e",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -9,7 +9,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    connect_nodes,\n     disconnect_nodes,\n     hex_str_to_bytes,\n )\n@@ -75,7 +74,7 @@ def run_test(self):\n             self.log.info(\"test -walletnotify after rescan\")\n             # restart node to rescan to force wallet notifications\n             self.start_node(1)\n-            connect_nodes(self.nodes[0], 1)\n+            self.connect_nodes(0, 1)\n \n             self.wait_until(lambda: len(os.listdir(self.walletnotify_dir)) == block_count, timeout=10)\n \n@@ -131,7 +130,7 @@ def run_test(self):\n             self.nodes[0].generatetoaddress(1, ADDRESS_BCRT1_UNSPENDABLE)\n             assert_equal(self.nodes[0].gettransaction(bump2)[\"confirmations\"], 1)\n             assert_equal(tx2 in self.nodes[1].getrawmempool(), True)\n-            connect_nodes(self.nodes[0], 1)\n+            self.connect_nodes(0, 1)\n             self.sync_blocks()\n             self.expect_wallet_notify([bump2, tx2])\n             assert_equal(self.nodes[1].gettransaction(bump2)[\"confirmations\"], 1)"
      },
      {
        "sha": "6ef1cbe07b78f35291c3e1957246b74dcec21556",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 10,
        "deletions": 11,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -18,7 +18,6 @@\n     assert_equal,\n     assert_greater_than,\n     assert_raises_rpc_error,\n-    connect_nodes,\n     disconnect_nodes,\n )\n \n@@ -102,11 +101,11 @@ def setup_network(self):\n \n         self.prunedir = os.path.join(self.nodes[2].datadir, self.chain, 'blocks', '')\n \n-        connect_nodes(self.nodes[0], 1)\n-        connect_nodes(self.nodes[1], 2)\n-        connect_nodes(self.nodes[0], 2)\n-        connect_nodes(self.nodes[0], 3)\n-        connect_nodes(self.nodes[0], 4)\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(1, 2)\n+        self.connect_nodes(0, 2)\n+        self.connect_nodes(0, 3)\n+        self.connect_nodes(0, 4)\n         self.sync_blocks(self.nodes[0:5])\n \n     def setup_nodes(self):\n@@ -158,8 +157,8 @@ def create_chain_with_staleblocks(self):\n             mine_large_blocks(self.nodes[0], 25)\n \n             # Create connections in the order so both nodes can see the reorg at the same time\n-            connect_nodes(self.nodes[0], 1)\n-            connect_nodes(self.nodes[0], 2)\n+            self.connect_nodes(0, 1)\n+            self.connect_nodes(0, 2)\n             self.sync_blocks(self.nodes[0:3])\n \n         self.log.info(\"Usage can be over target because of high stale rate: %d\" % calc_usage(self.prunedir))\n@@ -195,8 +194,8 @@ def reorg_test(self):\n         self.nodes[1].generate(300)\n \n         self.log.info(\"Reconnect nodes\")\n-        connect_nodes(self.nodes[0], 1)\n-        connect_nodes(self.nodes[1], 2)\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(1, 2)\n         self.sync_blocks(self.nodes[0:3], timeout=120)\n \n         self.log.info(\"Verify height on node 2: %d\" % self.nodes[2].getblockcount())\n@@ -337,7 +336,7 @@ def wallet_test(self):\n         # check that wallet loads successfully when restarting a pruned node after IBD.\n         # this was reported to fail in #7494.\n         self.log.info(\"Syncing node 5 to test wallet\")\n-        connect_nodes(self.nodes[0], 5)\n+        self.connect_nodes(0, 5)\n         nds = [self.nodes[0], self.nodes[5]]\n         self.sync_blocks(nds, wait=5, timeout=300)\n         self.restart_node(5, extra_args=[\"-prune=550\"]) # restart to trigger rescan"
      },
      {
        "sha": "50d974f3237d084970b57f24a5799ac94cab333a",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -22,7 +22,6 @@\n     assert_equal,\n     assert_is_hex_string,\n     assert_raises_rpc_error,\n-    connect_nodes,\n     hex_str_to_bytes,\n     try_rpc,\n )\n@@ -80,7 +79,7 @@ def skip_test_if_missing_module(self):\n \n     def setup_network(self):\n         super().setup_network()\n-        connect_nodes(self.nodes[0], 2)\n+        self.connect_nodes(0, 2)\n         self.sync_all()\n \n     def success_mine(self, node, txid, sign, redeem_script=\"\"):"
      },
      {
        "sha": "23c9fc42edf05701c40a075a3759a2b65bf73de2",
        "filename": "test/functional/interface_zmq.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/interface_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/interface_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_zmq.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -8,7 +8,7 @@\n from test_framework.address import ADDRESS_BCRT1_UNSPENDABLE\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.messages import CTransaction, hash256\n-from test_framework.util import assert_equal, connect_nodes\n+from test_framework.util import assert_equal\n from io import BytesIO\n from time import sleep\n \n@@ -75,7 +75,7 @@ def test_basic(self):\n         rawtx = subs[3]\n \n         self.restart_node(0, [\"-zmqpub%s=%s\" % (sub.topic.decode(), address) for sub in [hashblock, hashtx, rawblock, rawtx]])\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n         for socket in sockets:\n             socket.connect(address)\n \n@@ -181,7 +181,7 @@ def test_reorg(self):\n         connect_blocks = self.nodes[1].generatetoaddress(2, ADDRESS_BCRT1_UNSPENDABLE)\n \n         # nodes[0] will reorg chain after connecting back nodes[1]\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n         self.sync_blocks() # tx in mempool valid but not advertised\n \n         # Should receive nodes[1] tip"
      },
      {
        "sha": "7f2349a49e306ccd5aa86f15dcce1b151464e3ec",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -45,7 +45,6 @@\n     assert_equal,\n     assert_greater_than_or_equal,\n     assert_raises_rpc_error,\n-    connect_nodes,\n     disconnect_nodes,\n )\n \n@@ -87,7 +86,7 @@ def run_test(self):\n         assert(len(self.nodes[0].getpeerinfo()) == 0)\n         assert(len(self.nodes[0].p2ps) == 0)\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), Decimal(\"12\"))\n-        connect_nodes(self.nodes[0], 2)\n+        self.connect_nodes(0, 2)\n \n         self.log.debug(\"Stop-start the nodes. Verify that node0 has the transactions in its mempool and node1 does not. Verify that node2 calculates its balance correctly after loading wallet transactions.\")\n         self.stop_nodes()"
      },
      {
        "sha": "8b5e52c8b2c7927ea665bce49fe8e6c6bcaf3565",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -25,7 +25,6 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n-    connect_nodes,\n )\n \n \n@@ -56,7 +55,7 @@ def mine_chain(self):\n         assert_equal(mining_info['currentblocktx'], 0)\n         assert_equal(mining_info['currentblockweight'], 4000)\n         self.restart_node(0)\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n \n     def run_test(self):\n         self.mine_chain()"
      },
      {
        "sha": "b7167c569c3907791ed895445692ce0a683cc2d3",
        "filename": "test/functional/p2p_blockfilters.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/p2p_blockfilters.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/p2p_blockfilters.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blockfilters.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -22,7 +22,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    connect_nodes,\n     disconnect_nodes,\n )\n \n@@ -90,7 +89,7 @@ def run_test(self):\n         assert_equal(len(response.headers), 1)\n \n         self.log.info(\"Reorg node 0 to a new chain.\")\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n         self.sync_blocks(timeout=600)\n \n         main_block_hash = self.nodes[0].getblockhash(1000)"
      },
      {
        "sha": "3088a8aa46288b34fd1a3e4401d42e1a3c7ea157",
        "filename": "test/functional/p2p_disconnect_ban.py",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/p2p_disconnect_ban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/p2p_disconnect_ban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_disconnect_ban.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -9,7 +9,6 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n-    connect_nodes,\n )\n \n class DisconnectBanTest(BitcoinTestFramework):\n@@ -19,8 +18,8 @@ def set_test_params(self):\n \n     def run_test(self):\n         self.log.info(\"Connect nodes both way\")\n-        connect_nodes(self.nodes[0], 1)\n-        connect_nodes(self.nodes[1], 0)\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(1, 0)\n \n         self.log.info(\"Test setban and listbanned RPCs\")\n \n@@ -78,8 +77,8 @@ def run_test(self):\n         # Clear ban lists\n         self.nodes[1].clearbanned()\n         self.log.info(\"Connect nodes both way\")\n-        connect_nodes(self.nodes[0], 1)\n-        connect_nodes(self.nodes[1], 0)\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(1, 0)\n \n         self.log.info(\"Test disconnectnode RPCs\")\n \n@@ -98,7 +97,7 @@ def run_test(self):\n         assert not [node for node in self.nodes[0].getpeerinfo() if node['addr'] == address1]\n \n         self.log.info(\"disconnectnode: successfully reconnect node\")\n-        connect_nodes(self.nodes[0], 1)  # reconnect the node\n+        self.connect_nodes(0, 1)  # reconnect the node\n         assert_equal(len(self.nodes[0].getpeerinfo()), 2)\n         assert [node for node in self.nodes[0].getpeerinfo() if node['addr'] == address1]\n "
      },
      {
        "sha": "e2a78199a13a739f63aea11402621dfc1ff8ef26",
        "filename": "test/functional/p2p_node_network_limited.py",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/p2p_node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/p2p_node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_node_network_limited.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -14,7 +14,6 @@\n from test_framework.util import (\n     assert_equal,\n     disconnect_nodes,\n-    connect_nodes,\n )\n \n \n@@ -60,7 +59,7 @@ def run_test(self):\n         assert_equal(int(self.nodes[0].getnetworkinfo()['localservices'], 16), expected_services)\n \n         self.log.info(\"Mine enough blocks to reach the NODE_NETWORK_LIMITED range.\")\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n         blocks = self.nodes[1].generatetoaddress(292, self.nodes[1].get_deterministic_priv_key().address)\n         self.sync_blocks([self.nodes[0], self.nodes[1]])\n \n@@ -85,7 +84,7 @@ def run_test(self):\n \n         # connect unsynced node 2 with pruned NODE_NETWORK_LIMITED peer\n         # because node 2 is in IBD and node 0 is a NODE_NETWORK_LIMITED peer, sync must not be possible\n-        connect_nodes(self.nodes[0], 2)\n+        self.connect_nodes(0, 2)\n         try:\n             self.sync_blocks([self.nodes[0], self.nodes[2]], timeout=5)\n         except:\n@@ -94,7 +93,7 @@ def run_test(self):\n         assert_equal(self.nodes[2].getblockheader(self.nodes[2].getbestblockhash())['height'], 0)\n \n         # now connect also to node 1 (non pruned)\n-        connect_nodes(self.nodes[1], 2)\n+        self.connect_nodes(1, 2)\n \n         # sync must be possible\n         self.sync_blocks()\n@@ -106,7 +105,7 @@ def run_test(self):\n         self.nodes[0].generatetoaddress(10, self.nodes[0].get_deterministic_priv_key().address)\n \n         # connect node1 (non pruned) with node0 (pruned) and check if the can sync\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n \n         # sync must be possible, node 1 is no longer in IBD and should therefore connect to node 0 (NODE_NETWORK_LIMITED)\n         self.sync_blocks([self.nodes[0], self.nodes[1]])"
      },
      {
        "sha": "0a7033459bae6549cd04f947662aac0c6f2ff47e",
        "filename": "test/functional/p2p_permissions.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/p2p_permissions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/p2p_permissions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_permissions.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -22,7 +22,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    connect_nodes,\n     p2p_port,\n )\n \n@@ -133,7 +132,7 @@ def check_tx_relay(self):\n         p2p_rebroadcast_wallet.send_txs_and_test([tx], self.nodes[1])\n \n         self.log.debug(\"Check that node[1] will send the tx to node[0] even though it is already in the mempool\")\n-        connect_nodes(self.nodes[1], 0)\n+        self.connect_nodes(1, 0)\n         with self.nodes[1].assert_debug_log([\"Force relaying tx {} from peer=0\".format(txid)]):\n             p2p_rebroadcast_wallet.send_txs_and_test([tx], self.nodes[1])\n             self.wait_until(lambda: txid in self.nodes[0].getrawmempool())\n@@ -150,7 +149,7 @@ def check_tx_relay(self):\n \n     def checkpermission(self, args, expectedPermissions, whitelisted):\n         self.restart_node(1, args)\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n         peerinfo = self.nodes[1].getpeerinfo()[0]\n         assert_equal(peerinfo['whitelisted'], whitelisted)\n         assert_equal(len(expectedPermissions), len(peerinfo['permissions']))"
      },
      {
        "sha": "3aa738738ccabc68ff75177d3ab654279fd9a8da",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -79,7 +79,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    connect_nodes,\n     disconnect_nodes,\n     softfork_active,\n     hex_str_to_bytes,\n@@ -232,8 +231,8 @@ def skip_test_if_missing_module(self):\n \n     def setup_network(self):\n         self.setup_nodes()\n-        connect_nodes(self.nodes[0], 1)\n-        connect_nodes(self.nodes[0], 2)\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n         self.sync_all()\n \n     # Helper functions\n@@ -559,7 +558,7 @@ def test_v0_outputs_arent_spendable(self):\n             # TODO: support multiple acceptable reject reasons.\n             test_witness_block(self.nodes[0], self.test_node, block, accepted=False, with_witness=False)\n \n-        connect_nodes(self.nodes[0], 2)\n+        self.connect_nodes(0, 2)\n \n         self.utxo.pop(0)\n         self.utxo.append(UTXO(txid, 2, value))\n@@ -1940,7 +1939,7 @@ def test_upgrade_after_activation(self):\n         \"\"\"Test the behavior of starting up a segwit-aware node after the softfork has activated.\"\"\"\n \n         self.restart_node(2, extra_args=[\"-segwitheight={}\".format(SEGWIT_HEIGHT)])\n-        connect_nodes(self.nodes[0], 2)\n+        self.connect_nodes(0, 2)\n \n         # We reconnect more than 100 blocks, give it plenty of time\n         self.sync_blocks(timeout=240)"
      },
      {
        "sha": "e7a05d8547ed3ade76bff3143a5601478991e7dd",
        "filename": "test/functional/p2p_unrequested_blocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/p2p_unrequested_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/p2p_unrequested_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_unrequested_blocks.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -60,7 +60,6 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n-    connect_nodes,\n )\n \n \n@@ -284,7 +283,7 @@ def run_test(self):\n         test_node.wait_for_disconnect()\n \n         # 9. Connect node1 to node0 and ensure it is able to sync\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n         self.sync_blocks([self.nodes[0], self.nodes[1]])\n         self.log.info(\"Successfully synced nodes 1 and 0\")\n "
      },
      {
        "sha": "cbcfed651ce236990f8488fe206f50e3a71db421",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -12,7 +12,6 @@\n     assert_greater_than,\n     assert_greater_than_or_equal,\n     assert_raises_rpc_error,\n-    connect_nodes,\n     count_bytes,\n     find_vout_for_address,\n )\n@@ -38,10 +37,10 @@ def skip_test_if_missing_module(self):\n     def setup_network(self):\n         self.setup_nodes()\n \n-        connect_nodes(self.nodes[0], 1)\n-        connect_nodes(self.nodes[1], 2)\n-        connect_nodes(self.nodes[0], 2)\n-        connect_nodes(self.nodes[0], 3)\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(1, 2)\n+        self.connect_nodes(0, 2)\n+        self.connect_nodes(0, 3)\n \n     def run_test(self):\n         self.log.info(\"Connect nodes, set fees, generate blocks, and sync\")"
      },
      {
        "sha": "b5ca4ac4f4d7497463e79feba068a8c80209bb53",
        "filename": "test/functional/rpc_getblockfilter.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/rpc_getblockfilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/rpc_getblockfilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getblockfilter.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -7,7 +7,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal, assert_is_hex_string, assert_raises_rpc_error,\n-    connect_nodes, disconnect_nodes\n+    disconnect_nodes,\n     )\n \n FILTER_TYPES = [\"basic\"]\n@@ -29,7 +29,7 @@ def run_test(self):\n         chain0_hashes = [self.nodes[0].getblockhash(block_height) for block_height in range(4)]\n \n         # Reorg node 0 to a new chain\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n         self.sync_blocks()\n \n         assert_equal(self.nodes[0].getblockcount(), 4)"
      },
      {
        "sha": "af65e479fa3b1ff31a1e6172148e2b52cece743b",
        "filename": "test/functional/rpc_invalidateblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/rpc_invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/rpc_invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_invalidateblock.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -6,10 +6,7 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.address import ADDRESS_BCRT1_UNSPENDABLE_DESCRIPTOR\n-from test_framework.util import (\n-    assert_equal,\n-    connect_nodes,\n-)\n+from test_framework.util import assert_equal\n \n \n class InvalidateTest(BitcoinTestFramework):\n@@ -32,7 +29,7 @@ def run_test(self):\n         assert_equal(self.nodes[1].getblockcount(), 6)\n \n         self.log.info(\"Connect nodes to force a reorg\")\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n         self.sync_blocks(self.nodes[0:2])\n         assert_equal(self.nodes[0].getblockcount(), 6)\n         badhash = self.nodes[1].getblockhash(2)\n@@ -43,7 +40,7 @@ def run_test(self):\n         assert_equal(self.nodes[0].getbestblockhash(), besthash_n0)\n \n         self.log.info(\"Make sure we won't reorg to a lower work chain:\")\n-        connect_nodes(self.nodes[1], 2)\n+        self.connect_nodes(1, 2)\n         self.log.info(\"Sync node 2 to node 1 so both have 6 blocks\")\n         self.sync_blocks(self.nodes[1:3])\n         assert_equal(self.nodes[2].getblockcount(), 6)"
      },
      {
        "sha": "293b700a68e6527d62d31582dbd49f8fa6febfab",
        "filename": "test/functional/rpc_net.py",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/rpc_net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/rpc_net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_net.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -24,7 +24,6 @@\n     assert_greater_than_or_equal,\n     assert_greater_than,\n     assert_raises_rpc_error,\n-    connect_nodes,\n     p2p_port,\n )\n \n@@ -53,8 +52,8 @@ def run_test(self):\n         # Get out of IBD for the minfeefilter and getpeerinfo tests.\n         self.nodes[0].generate(101)\n         # Connect nodes both ways.\n-        connect_nodes(self.nodes[0], 1)\n-        connect_nodes(self.nodes[1], 0)\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(1, 0)\n \n         self.test_connection_count()\n         self.test_getpeerinfo()\n@@ -117,8 +116,8 @@ def test_getnetworkinfo(self):\n         with self.nodes[0].assert_debug_log(expected_msgs=['SetNetworkActive: true\\n']):\n             self.nodes[0].setnetworkactive(state=True)\n         # Connect nodes both ways.\n-        connect_nodes(self.nodes[0], 1)\n-        connect_nodes(self.nodes[1], 0)\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(1, 0)\n \n         info = self.nodes[0].getnetworkinfo()\n         assert_equal(info['networkactive'], True)"
      },
      {
        "sha": "dd2608654725f2829db312bee58cdd9e8c1f9fbf",
        "filename": "test/functional/rpc_preciousblock.py",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/rpc_preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/rpc_preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_preciousblock.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -5,10 +5,7 @@\n \"\"\"Test the preciousblock RPC.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (\n-    assert_equal,\n-    connect_nodes,\n-)\n+from test_framework.util import assert_equal\n \n def unidirectional_node_sync_via_rpc(node_src, node_dest):\n     blocks_to_copy = []\n@@ -61,7 +58,7 @@ def run_test(self):\n         self.log.info(\"Connect nodes and check no reorg occurs\")\n         # Submit competing blocks via RPC so any reorg should occur before we proceed (no way to wait on inaction for p2p sync)\n         node_sync_via_rpc(self.nodes[0:2])\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n         assert_equal(self.nodes[0].getbestblockhash(), hashC)\n         assert_equal(self.nodes[1].getbestblockhash(), hashG)\n         self.log.info(\"Make Node0 prefer block G\")\n@@ -98,8 +95,8 @@ def run_test(self):\n         hashL = self.nodes[2].getbestblockhash()\n         self.log.info(\"Connect nodes and check no reorg occurs\")\n         node_sync_via_rpc(self.nodes[1:3])\n-        connect_nodes(self.nodes[1], 2)\n-        connect_nodes(self.nodes[0], 2)\n+        self.connect_nodes(1, 2)\n+        self.connect_nodes(0, 2)\n         assert_equal(self.nodes[0].getbestblockhash(), hashH)\n         assert_equal(self.nodes[1].getbestblockhash(), hashH)\n         assert_equal(self.nodes[2].getbestblockhash(), hashL)"
      },
      {
        "sha": "8fb4711e17a0f4e8b4c955104feca27abbf0b4fb",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -12,7 +12,6 @@\n     assert_equal,\n     assert_greater_than,\n     assert_raises_rpc_error,\n-    connect_nodes,\n     disconnect_nodes,\n     find_output,\n )\n@@ -80,8 +79,8 @@ def test_utxo_conversion(self):\n         wonline.unloadwallet()\n \n         # Reconnect\n-        connect_nodes(self.nodes[0], 1)\n-        connect_nodes(self.nodes[0], 2)\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n \n     def run_test(self):\n         # Create and fund a raw tx for sending 10 BTC"
      },
      {
        "sha": "acd40077752a6daf890318a884b5a74889ef6433",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -20,7 +20,6 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n-    connect_nodes,\n     hex_str_to_bytes,\n )\n \n@@ -60,7 +59,7 @@ def skip_test_if_missing_module(self):\n \n     def setup_network(self):\n         super().setup_network()\n-        connect_nodes(self.nodes[0], 2)\n+        self.connect_nodes(0, 2)\n \n     def run_test(self):\n         self.log.info('prepare some coins for multiple *rawtransaction commands')"
      },
      {
        "sha": "6f9280ee7037d5a83b438aed4a35d1e4fc5cc789",
        "filename": "test/functional/rpc_setban.py",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/rpc_setban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/rpc_setban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_setban.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -5,10 +5,7 @@\n \"\"\"Test the setban rpc call.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (\n-    connect_nodes,\n-    p2p_port\n-)\n+from test_framework.util import p2p_port\n \n class SetBanTests(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -18,7 +15,7 @@ def set_test_params(self):\n \n     def run_test(self):\n         # Node 0 connects to Node 1, check that the noban permission is not granted\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n         peerinfo = self.nodes[1].getpeerinfo()[0]\n         assert(not 'noban' in peerinfo['permissions'])\n \n@@ -32,14 +29,14 @@ def run_test(self):\n \n         # However, node 0 should be able to reconnect if it has noban permission\n         self.restart_node(1, ['-whitelist=127.0.0.1'])\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n         peerinfo = self.nodes[1].getpeerinfo()[0]\n         assert('noban' in peerinfo['permissions'])\n \n         # If we remove the ban, Node 0 should be able to reconnect even without noban permission\n         self.nodes[1].setban(\"127.0.0.1\", \"remove\")\n         self.restart_node(1, [])\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n         peerinfo = self.nodes[1].getpeerinfo()[0]\n         assert(not 'noban' in peerinfo['permissions'])\n "
      },
      {
        "sha": "7a0385869c51f1eaaa0ed998e52741c2963693e9",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -16,7 +16,6 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n-    connect_nodes,\n     disconnect_nodes,\n )\n \n@@ -161,7 +160,7 @@ def run_test(self):\n         self.nodes[1].sendrawtransaction(signed[\"hex\"])\n         self.nodes[1].generate(1)\n \n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n         self.sync_blocks()\n \n         # Verify that B and C's 10 BTC outputs are available for spending again because AB1 is now conflicted"
      },
      {
        "sha": "30ebcb3281967484a495f438c9bac9daa870a401",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -62,7 +62,6 @@\n     assert_equal,\n     assert_greater_than,\n     assert_raises_rpc_error,\n-    connect_nodes,\n )\n from test_framework.segwit_addr import (\n     encode,\n@@ -94,7 +93,7 @@ def setup_network(self):\n         # Fully mesh-connect nodes for faster mempool sync\n         for i, j in itertools.product(range(self.num_nodes), repeat=2):\n             if i > j:\n-                connect_nodes(self.nodes[i], j)\n+                self.connect_nodes(i, j)\n         self.sync_all()\n \n     def get_balances(self, key='trusted'):"
      },
      {
        "sha": "229c134a4b3f4af7f7a933a9eb43ecdb09d7a5b6",
        "filename": "test/functional/wallet_avoidreuse.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/wallet_avoidreuse.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/wallet_avoidreuse.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_avoidreuse.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -9,7 +9,6 @@\n     assert_approx,\n     assert_equal,\n     assert_raises_rpc_error,\n-    connect_nodes,\n )\n \n def reset_balance(node, discardaddr):\n@@ -111,7 +110,7 @@ def test_persistence(self):\n         assert_equal(self.nodes[1].getwalletinfo()[\"avoid_reuse\"], True)\n \n         self.restart_node(1)\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n \n         # Flags should still be node1.avoid_reuse=false, node2.avoid_reuse=true\n         assert_equal(self.nodes[0].getwalletinfo()[\"avoid_reuse\"], False)"
      },
      {
        "sha": "e05a356dcc6bfab0fee034eeeeef2aeff2a3a60e",
        "filename": "test/functional/wallet_backup.py",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/wallet_backup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/wallet_backup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_backup.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -39,7 +39,6 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n-    connect_nodes,\n )\n \n \n@@ -62,10 +61,10 @@ def skip_test_if_missing_module(self):\n \n     def setup_network(self):\n         self.setup_nodes()\n-        connect_nodes(self.nodes[0], 3)\n-        connect_nodes(self.nodes[1], 3)\n-        connect_nodes(self.nodes[2], 3)\n-        connect_nodes(self.nodes[2], 0)\n+        self.connect_nodes(0, 3)\n+        self.connect_nodes(1, 3)\n+        self.connect_nodes(2, 3)\n+        self.connect_nodes(2, 0)\n         self.sync_all()\n \n     def one_send(self, from_node, to_address):\n@@ -96,10 +95,10 @@ def start_three(self):\n         self.start_node(0)\n         self.start_node(1)\n         self.start_node(2)\n-        connect_nodes(self.nodes[0], 3)\n-        connect_nodes(self.nodes[1], 3)\n-        connect_nodes(self.nodes[2], 3)\n-        connect_nodes(self.nodes[2], 0)\n+        self.connect_nodes(0, 3)\n+        self.connect_nodes(1, 3)\n+        self.connect_nodes(2, 3)\n+        self.connect_nodes(2, 0)\n \n     def stop_three(self):\n         self.stop_node(0)"
      },
      {
        "sha": "51f6a9003ceb3edd14dedd0cafc4a424ca60cfd6",
        "filename": "test/functional/wallet_balance.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/wallet_balance.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/wallet_balance.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_balance.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -11,7 +11,6 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n-    connect_nodes,\n )\n \n \n@@ -262,7 +261,7 @@ def test_balances(*, fee_node_1=0):\n \n         # Now confirm tx_orig\n         self.restart_node(1, ['-persistmempool=0'])\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n         self.sync_blocks()\n         self.nodes[1].sendrawtransaction(tx_orig)\n         self.nodes[1].generatetoaddress(1, ADDRESS_WATCHONLY)"
      },
      {
        "sha": "89a2dbfc5bda346e7ec85b494f3b9a04f7f0c3d2",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 10,
        "deletions": 11,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -11,7 +11,6 @@\n     assert_equal,\n     assert_fee_amount,\n     assert_raises_rpc_error,\n-    connect_nodes,\n )\n from test_framework.wallet_util import test_address\n \n@@ -32,9 +31,9 @@ def setup_network(self):\n         self.setup_nodes()\n         # Only need nodes 0-2 running at start of test\n         self.stop_node(3)\n-        connect_nodes(self.nodes[0], 1)\n-        connect_nodes(self.nodes[1], 2)\n-        connect_nodes(self.nodes[0], 2)\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(1, 2)\n+        self.connect_nodes(0, 2)\n         self.sync_all(self.nodes[0:3])\n \n     def check_fee_amount(self, curr_balance, balance_with_fee, fee_per_byte, tx_size):\n@@ -281,7 +280,7 @@ def run_test(self):\n         assert_equal(self.nodes[0].getbalance(), node_0_bal)\n \n         self.start_node(3, self.nodes[3].extra_args)\n-        connect_nodes(self.nodes[0], 3)\n+        self.connect_nodes(0, 3)\n         self.sync_all()\n \n         # check if we can list zero value tx as available coins\n@@ -316,9 +315,9 @@ def run_test(self):\n         self.start_node(0, [\"-walletbroadcast=0\"])\n         self.start_node(1, [\"-walletbroadcast=0\"])\n         self.start_node(2, [\"-walletbroadcast=0\"])\n-        connect_nodes(self.nodes[0], 1)\n-        connect_nodes(self.nodes[1], 2)\n-        connect_nodes(self.nodes[0], 2)\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(1, 2)\n+        self.connect_nodes(0, 2)\n         self.sync_all(self.nodes[0:3])\n \n         txid_not_broadcast = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 2)\n@@ -343,9 +342,9 @@ def run_test(self):\n         self.start_node(0)\n         self.start_node(1)\n         self.start_node(2)\n-        connect_nodes(self.nodes[0], 1)\n-        connect_nodes(self.nodes[1], 2)\n-        connect_nodes(self.nodes[0], 2)\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(1, 2)\n+        self.connect_nodes(0, 2)\n         self.sync_blocks(self.nodes[0:3])\n \n         self.nodes[0].generate(1)"
      },
      {
        "sha": "6eafc2c17761150f51c6a0d3a086112ca9b654c4",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -10,7 +10,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    connect_nodes,\n     assert_raises_rpc_error,\n )\n \n@@ -99,7 +98,7 @@ def run_test(self):\n                 assert_equal(hd_info_2[\"hdkeypath\"], \"m/0'/0'/\" + str(i) + \"'\")\n             assert_equal(hd_info_2[\"hdmasterfingerprint\"], hd_fingerprint)\n         assert_equal(hd_add, hd_add_2)\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n         self.sync_all()\n \n         # Needs rescan\n@@ -115,7 +114,7 @@ def run_test(self):\n             os.path.join(self.nodes[1].datadir, self.chain, \"wallets\", \"wallet.dat\"),\n         )\n         self.start_node(1, extra_args=self.extra_args[1])\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n         self.sync_all()\n         # Wallet automatically scans blocks older than key on startup\n         assert_equal(self.nodes[1].getbalance(), NUM_HD_ADDS + 1)\n@@ -183,7 +182,7 @@ def run_test(self):\n             # Restart node 1 with keypool of 3 and a different wallet\n             self.nodes[1].createwallet(wallet_name='origin', blank=True)\n             self.restart_node(1, extra_args=['-keypool=3', '-wallet=origin'])\n-            connect_nodes(self.nodes[0], 1)\n+            self.connect_nodes(0, 1)\n \n             # sethdseed restoring and seeing txs to addresses out of the keypool\n             origin_rpc = self.nodes[1].get_wallet_rpc('origin')"
      },
      {
        "sha": "2a4c666ab18e48a82be5f9aa7863c9ce3cc78c94",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -22,7 +22,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.address import AddressType\n from test_framework.util import (\n-    connect_nodes,\n     assert_equal,\n     set_node_times,\n )\n@@ -166,7 +165,7 @@ def setup_network(self):\n \n         self.start_nodes()\n         for i in range(1, self.num_nodes):\n-            connect_nodes(self.nodes[i], 0)\n+            self.connect_nodes(i, 0)\n \n     def run_test(self):\n         # Create one transaction on node 0 with a unique amount for"
      },
      {
        "sha": "453a42e04bb798571bb2081257881591ca97a6eb",
        "filename": "test/functional/wallet_keypool_topup.py",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/wallet_keypool_topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/wallet_keypool_topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool_topup.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -14,10 +14,7 @@\n import shutil\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (\n-    assert_equal,\n-    connect_nodes,\n-)\n+from test_framework.util import assert_equal\n \n \n class KeypoolRestoreTest(BitcoinTestFramework):\n@@ -38,9 +35,9 @@ def run_test(self):\n         self.stop_node(1)\n         shutil.copyfile(wallet_path, wallet_backup_path)\n         self.start_node(1, self.extra_args[1])\n-        connect_nodes(self.nodes[0], 1)\n-        connect_nodes(self.nodes[0], 2)\n-        connect_nodes(self.nodes[0], 3)\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+        self.connect_nodes(0, 3)\n \n         for i, output_type in enumerate([\"legacy\", \"p2sh-segwit\", \"bech32\"]):\n \n@@ -72,7 +69,7 @@ def run_test(self):\n             self.stop_node(idx)\n             shutil.copyfile(wallet_backup_path, wallet_path)\n             self.start_node(idx, self.extra_args[idx])\n-            connect_nodes(self.nodes[0], idx)\n+            self.connect_nodes(0, idx)\n             self.sync_all()\n \n             self.log.info(\"Verify keypool is restored and balance is correct\")"
      },
      {
        "sha": "09a336b764e63a9debb06d38934bf18624dea0c5",
        "filename": "test/functional/wallet_listsinceblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/wallet_listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/wallet_listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listsinceblock.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -10,7 +10,6 @@\n     assert_array_result,\n     assert_equal,\n     assert_raises_rpc_error,\n-    connect_nodes,\n )\n \n from decimal import Decimal\n@@ -26,7 +25,7 @@ def skip_test_if_missing_module(self):\n     def run_test(self):\n         # All nodes are in IBD from genesis, so they'll need the miner (node2) to be an outbound connection, or have\n         # only one connection. (See fPreferredDownload in net_processing)\n-        connect_nodes(self.nodes[1], 2)\n+        self.connect_nodes(1, 2)\n         self.nodes[2].generate(101)\n         self.sync_all()\n "
      },
      {
        "sha": "d1c2ef56e4aca79bf41b79678e9c84cf971b81f8",
        "filename": "test/functional/wallet_reorgsrestore.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/wallet_reorgsrestore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/wallet_reorgsrestore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_reorgsrestore.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -20,7 +20,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n         assert_equal,\n-        connect_nodes,\n         disconnect_nodes,\n )\n \n@@ -40,7 +39,7 @@ def run_test(self):\n         # Disconnect node1 from others to reorg its chain later\n         disconnect_nodes(self.nodes[0], 1)\n         disconnect_nodes(self.nodes[1], 2)\n-        connect_nodes(self.nodes[0], 2)\n+        self.connect_nodes(0, 2)\n \n         # Send a tx to be unconfirmed later\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), Decimal(\"10\"))\n@@ -69,7 +68,7 @@ def run_test(self):\n         self.nodes[2].generate(9)\n \n         # Reconnect node0 and node2 and check that conflicted_txid is effectively conflicted\n-        connect_nodes(self.nodes[0], 2)\n+        self.connect_nodes(0, 2)\n         self.sync_blocks([self.nodes[0], self.nodes[2]])\n         conflicted = self.nodes[0].gettransaction(conflicted_txid)\n         conflicting = self.nodes[0].gettransaction(conflicting_txid)"
      },
      {
        "sha": "1ffa68b2cb549d5d2869f05c0d93d0a5a9e3cb85",
        "filename": "test/functional/wallet_txn_clone.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/wallet_txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/wallet_txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_clone.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -8,7 +8,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    connect_nodes,\n     disconnect_nodes,\n )\n from test_framework.messages import CTransaction, COIN\n@@ -118,7 +117,7 @@ def run_test(self):\n         self.nodes[2].generate(1)\n \n         # Reconnect the split network, and sync chain:\n-        connect_nodes(self.nodes[1], 2)\n+        self.connect_nodes(1, 2)\n         self.nodes[2].sendrawtransaction(node0_tx2[\"hex\"])\n         self.nodes[2].sendrawtransaction(tx2[\"hex\"])\n         self.nodes[2].generate(1)  # Mine another block to make sure we sync"
      },
      {
        "sha": "f27ee74d7f5e1423d3455d2ee2771a885d70b664",
        "filename": "test/functional/wallet_txn_doublespend.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/wallet_txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbb6242b59e7269411b8d86809585b0d506ac65/test/functional/wallet_txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_doublespend.py?ref=bbbb6242b59e7269411b8d86809585b0d506ac65",
        "patch": "@@ -8,7 +8,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    connect_nodes,\n     disconnect_nodes,\n     find_output,\n )\n@@ -116,7 +115,7 @@ def run_test(self):\n         self.nodes[2].generate(1)\n \n         # Reconnect the split network, and sync chain:\n-        connect_nodes(self.nodes[1], 2)\n+        self.connect_nodes(1, 2)\n         self.nodes[2].generate(1)  # Mine another block to make sure we sync\n         self.sync_blocks()\n         assert_equal(self.nodes[0].gettransaction(doublespend_txid)[\"confirmations\"], 2)"
      }
    ]
  }
]