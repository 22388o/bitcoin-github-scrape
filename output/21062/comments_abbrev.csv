DrahtBot,2021-02-02 08:03:10,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21148 (Split orphan handling from net_processing into txorphanage by ajtowns)\n* #21055 ([Bundle 3/n] Prune remaining g_c",https://github.com/bitcoin/bitcoin/pull/21062#issuecomment-771447185,771447185,
glozow,2021-02-02 15:32:29,Teeny rebase for the compiler warnings and changed from `std::optional<bool> m_accepted` to an enum `ResultType m_result_type` so there's no risk of throwing for bad optional access.,https://github.com/bitcoin/bitcoin/pull/21062#issuecomment-771718763,771718763,
glozow,2021-02-08 15:24:24,"Addressed @jnewbery comments and @ariard https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569330388 and removed the `ResultType::UNFINISHED` for now since it's unused. Leaving it as an enum because I think we agree that there's value in having more than 2 states, and the struct is the same size",https://github.com/bitcoin/bitcoin/pull/21062#issuecomment-775225948,775225948,
jnewbery,2021-02-08 17:32:29,"Code review ACK a9ff9c1ca0530e448341e9d24ecd5f8bc6f2ee42\n\nCirrus failure looks spurious, but I don't know how to restart it.",https://github.com/bitcoin/bitcoin/pull/21062#issuecomment-775314730,775314730,
glozow,2021-02-09 15:09:00,"> The third commit doesn't compile\n\nShould be fixed now 🤦 thanks @MarcoFalke! Fixed the constructors a bit as well to take out the unnecessary `TxValidationState` in the success case and Assume not valid in the failure case.",https://github.com/bitcoin/bitcoin/pull/21062#issuecomment-776009359,776009359,
MarcoFalke,2021-02-10 11:37:59,"Changes since previous review:\n\n* No longer pass redundant default-constructed state when valid\n* Remove uint8_t from `enum class`\n* Add `Assume(!state.IsValid());`\n* Make it compile\n\n\nACK 53e716ea119658c28935fee24eb50090907c500e 💿\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK 53e7",https://github.com/bitcoin/bitcoin/pull/21062#issuecomment-776648447,776648447,
jnewbery,2021-02-10 18:39:15,Code review ACK 53e716ea119658c28935fee24eb50090907c500e,https://github.com/bitcoin/bitcoin/pull/21062#issuecomment-776924507,776924507,
glozow,2021-02-10 23:34:56,"Opened followup #21146 to address style comments from @MarcoFalke and @ariard (oopsie for accidentally pushing here, please ignore that).",https://github.com/bitcoin/bitcoin/pull/21062#issuecomment-777108081,777108081,
ariard,2021-02-02 12:10:12,"15c82d3\n\nCan you drop the `state.IsInvalid()` here ? I think `TX_MISSING_INPUTS`always implies an invalid state (L664, `src/validation.cpp`).",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568552045,568552045,src/rpc/rawtransaction.cpp
ariard,2021-02-02 12:38:20,"abc6ff1\n\nWhat do you think about making `bypass_limits` part of the new `MempoolAcceptResult` ?\n\nActually we don't have _a_ mempool acceptance evaluation. The set of rules verified is already configurable by passing `bypass_limits=true` to ATMP. This flag will latch feerate and size checks (L729 and L1018 in `src/validation.cpp`). A consumer of this cleaner interface might be interested wi",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568568878,568568878,src/validation.cpp
ariard,2021-02-02 13:01:29,"abc6ff1\n\nI don't know about returning ""allowed""=false for `max_raw_tx_fee` violation. ""allowed"" is documented as ""If the mempool allows this tx to be inserted"". Your transaction might be mempool valid but doesn't pass the client belt-and-suspender, a different check. \n\nAlso it would be nice to return ""base"" and ""fees"" to let the transaction construction builder adapt the feerate to somethi",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568583132,568583132,src/rpc/rawtransaction.cpp
ariard,2021-02-02 13:24:27,"abc6ff1\n\nI don't think that's a good idea to encumber code path like `UpdateMempoolForReorg` with `std::optional`. If this `nullopt` will throw an exception. And we do have the failure/unfinished constructor allowing `m_accepted` to be initialized to nullopt, even if AFAICT such constructor is never called with `finished=bad`for now ? \n\nI know there is a discussion about `std::optional` us",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568597344,568597344,src/validation.cpp
ariard,2021-02-02 13:33:59,"abc6ff1\n\nNote, you might have a slight performance regression due to `emplace-back` memory allocation if container capacity is too small. Before this change, this potential reallocation wasn't the default.\n\nI think that's okay `replaced_transactions` was already existent in the most busiest code path `ProcessMessage`. ",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568603650,568603650,src/validation.cpp
ariard,2021-02-02 13:41:01,"abc6ff1\n\n""Evaluate a transaction mempool acceptance. If `test_accept`= false, add the transaction to the mempool"".",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568608455,568608455,src/validation.h
ariard,2021-02-02 13:42:16,"abc6ff1\n\nSee other comment about `std::optional` usage, but at least indicate what does `m_accept = false` mean.",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568609416,568609416,src/validation.h
ariard,2021-02-02 13:44:13,"abc6ff1\n\nAs this interface aims to be consumed by higher users, maybe comment those variables, like ""evicted transactions per BIP 125 rules"", ""Raw base fees expressed in satoshis"".\n\n",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568610708,568610708,src/validation.h
ariard,2021-02-02 13:51:56,"abc6ff1\n\nI think we should commit to a clearer terminology. Validity is always wholesome, a transaction or package is either valid or not. But validity is function of a mempool acceptance evaluation and this is configurable (`bypass_limit`), stateful (e.g mempool min feerate), depends if the transaction is part of a package, etc.\n\nIf we follow this line, maybe we should rename `m_accepted`",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568616246,568616246,src/validation.h
glozow,2021-02-02 14:07:35,"What do you think of changing `m_accepted` to an enum to encompass states beyond valid/invalid? Something like \n\n```c\nenum class ResultType : uint8_t {\n        UNSET, //!> Not fully validated, quit early for whatever reason.\n        INVALID, //!> Invalid.\n        VALID, //!> Valid.\n        VALID_BYPASSED, //!> some kind of limits bypassed\n}\n```\nThis would leave room for bypassi",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568627847,568627847,src/validation.cpp
glozow,2021-02-02 15:11:29,"I agree 😢 I was a bit naive when I wrote that. But it's not part of this PR, so maybe we can discuss elsewhere",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568679552,568679552,src/rpc/rawtransaction.cpp
glozow,2021-02-02 15:33:05,Added comments,https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568697583,568697583,src/validation.h
glozow,2021-02-02 15:33:37,Added!,https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568697968,568697968,src/validation.h
glozow,2021-02-02 15:34:07,"switched it back to `push_back` to adhere to my promise of ""pure refactor""",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568698350,568698350,src/validation.cpp
glozow,2021-02-02 15:34:43,Check now? I think it's better with enum ,https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568698793,568698793,src/validation.cpp
ariard,2021-02-03 11:03:06,"See my other comment but I would keep a binary state for validity. I don't think `TxValidationResult`/`BlockValidationResult` are great examples, it makes it harder to reason on once you multiply states. \n\nLet's keep this suggestion in mind for now, it's not a must for this PR. We'll see if we need to introduce something like this if we have situation where we have one aware caller and multipl",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569322797,569322797,src/validation.cpp
ariard,2021-02-03 11:05:51,Tracked #21074 ,https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569324575,569324575,src/rpc/rawtransaction.cpp
ariard,2021-02-03 11:12:53,"I think switching to `push_back` still do an automatic reallocation of the allocated storage if container capacity is too short. See https://www.cplusplus.com/reference/vector/vector/emplace_back/ and https://www.cplusplus.com/reference/vector/vector/push_back/.\n\nMy point was underscoring that the allocation was previously conditional of `m_replaced_transaction` pointer being opt-in by ATMP ca",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569328926,569328926,src/validation.cpp
ariard,2021-02-03 11:13:38,Can you added the unit in comment (satoshi) ? I swear once you start to deal with fee computation you spend your time thinking if you're dealing with apples or oranges :),https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569329362,569329362,src/validation.h
ariard,2021-02-03 11:15:18,"To be precise, I think `bypass_limits` also overrides some feerate check (L729 in `src/validation.cpp`).",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569330388,569330388,src/validation.h
ariard,2021-02-03 11:20:35,Do we really need an enum and can't we rely only on a boolean ? Maybe you can point me to a branch how you're using UNFINISHED because we don't use it with this PR ?,https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569333497,569333497,src/validation.cpp
glozow,2021-02-03 19:00:39,"Haven't published the branch yet but the idea is to return a `std::vector<MempoolAcceptResult>` from `ProcessNewPackage`, quit early when a tx fails, and set the not-fully-validated txns in the package to `UNFINISHED`. See [comment](https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567952639)?",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569667269,569667269,src/validation.cpp
ariard,2021-02-04 13:47:02,I think `UNFINISHED`/not_fully_validated to mark package partial failure doesn't bring further value compared to unvalid. Do you plan to consume this `UNFINISHED` in a special way ? Otherwise we can just extend `TxValidationResult` with a `PACKAGE_PARENT_FAILED` instead of yet-another-state variable.,https://github.com/bitcoin/bitcoin/pull/21062#discussion_r570234607,570234607,src/validation.cpp
glozow,2021-02-05 22:33:15,"I think in the future with Package Relay, we may want to punish nodes differently for invalidity in packages vs invalidity in transactions, and maybe cache failed transactions differently. Obviously this isn't set in stone, but I think it's better to not put package-specific validation info in `TxValidationState` - what do you think?",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r571286970,571286970,src/validation.cpp
jnewbery,2021-02-08 11:11:26,`result.push_back(std::move(result_0));` is the last line in both branches of the if/else. Would it be better to leave it outside the if/else?,https://github.com/bitcoin/bitcoin/pull/21062#discussion_r571962452,571962452,src/rpc/rawtransaction.cpp
ariard,2021-02-08 11:18:17,"I don't see a straightforward reason to punish faulty pacakge-relay peers from regular tx-relay ones, at least at the mempool level. If we don't have a motivation for `UNFINISHED`, let's remove it for now and defer its introduction when we actually hit the case ? Would be easier to argue at that point.",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r571966842,571966842,src/validation.cpp
jnewbery,2021-02-08 11:29:50,"Do we even need the local `nFees` variable, now that `ws.m_base_fees` is always set? Can you just pass a reference to `ws.m_base_fees` to `CheckInputs()`?",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r571973983,571973983,src/validation.cpp
jnewbery,2021-02-08 11:32:35,"I don't think the `std::optional` wrapper is adding anything here. Essentially all it does is add a boolean where false means the value is undefined and true means that it's defined. You're already saying that these fields are only defined if `m_result_type = ResultType::VALID`, so unless you think there's some reason to add this for safety or clarity, I wouldn't bother.",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r571975710,571975710,src/validation.h
jnewbery,2021-02-08 11:40:27,"The tristate here could be confusing for reviewers without the context of package acceptance. Perhaps this comment could be expanded a little. Something like:\n\n```suggestion\n        UNFINISHED, //!> Not fully validated. Only used for package mempool acceptance where an individual tx may not be fully validated if the package fails.\n```\n\nAlso consider adding an out-assertion to `AcceptTo",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r571980352,571980352,src/validation.h
jnewbery,2021-02-08 11:53:05,"You can set m_result_type in the initializer list:\n\n```suggestion\n        m_result_type(finished ? ResultType::INVALID : ResultType::UNFINISHED),\n        m_state(state), m_replaced_transactions(nullopt), m_base_fees(nullopt) {}\n```",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r571987374,571987374,src/validation.h
glozow,2021-02-08 14:44:45,"I think there should be a distinction between ""tx didn't replace any txns"" and ""tx was invalid and thus couldn't replace any txns,"" and it should be an error to try to look at `m_replaced_transactions` if the tx was invalid.",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572101522,572101522,src/validation.h
glozow,2021-02-08 15:26:05,"Resolved by removing `UNFINISHED`, I will plan to add this assertion and docs whenever we have more than 2 result types 👍 ",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572135029,572135029,src/validation.h
glozow,2021-02-08 15:26:17,"True, done",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572135198,572135198,src/validation.cpp
glozow,2021-02-08 15:26:59,(Will do this 👀 ),https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572135768,572135768,src/validation.h
jnewbery,2021-02-08 17:29:20,I guess this is because it's better to structure like this for package acceptance.,https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572232432,572232432,src/rpc/rawtransaction.cpp
jnewbery,2021-02-08 17:29:31,ok,https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572232588,572232588,src/validation.h
glozow,2021-02-08 17:33:36,"It makes more sense with the package all valid / 1 invalid tx branches, but not as much here. I suppose leaving it like this reduces the diff for later",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572235697,572235697,src/rpc/rawtransaction.cpp
glozow,2021-02-08 17:34:04,Addressed,https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572235986,572235986,src/validation.h
MarcoFalke,2021-02-09 09:25:47,"What is the point of setting the state when the default constructed one is already valid? It seems like a footgun to allow the caller to pass an invalid state here. At least, it should `ASSUME(state.IsValid());`.\n\nAlso, clang-format will like you more when you put the `:` in the next line:\n\n```\n    : m_result_type{...",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572721171,572721171,src/validation.h
MarcoFalke,2021-02-09 09:27:19,"nit: If ResultType is never serialized or used as an enum flag, you don't need to specify the underlying type. And I think the compiler will fill this to at least 32 bits inside the struct anyway, so it won't give you any space savings either.",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572722320,572722320,src/validation.h
MarcoFalke,2021-02-09 09:28:25,"The two `{}`, as well as `state` aren't args, but workspace variables. Is there any reason to not put them in the workspace?",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572723179,572723179,src/validation.cpp
MarcoFalke,2021-02-09 09:36:08,"This should say m_base_fees\n\n\n```\nvalidation.cpp:684:103: error: no member named 'm_base_fees' in '(anonymous namespace)::MemPoolAccept::Workspace'\n    if (!Consensus::CheckTxInputs(tx, state, m_view, g_chainman.m_blockman.GetSpendHeight(m_view), ws.m_base_fees)) {\n                                                                                                   ~~ ^\nvalidation.cpp:7",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572728783,572728783,src/validation.cpp
MarcoFalke,2021-02-09 09:38:07,"Ok, I see this is fixed in the next commit",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572730284,572730284,src/validation.cpp
glozow,2021-02-09 14:56:39,"You're right, there's no point in passing the state when it's successful",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572954305,572954305,src/validation.h
glozow,2021-02-09 15:06:24,Agh 🤦 bad rebase. ,https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572963483,572963483,src/validation.cpp
MarcoFalke,2021-02-10 11:39:33,"nit: Would be nice if this was const, so that compilation fails instead of getting a valgrind error on runtime if this is unset.",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r573659273,573659273,src/validation.h
MarcoFalke,2021-02-10 11:39:49,same for all other members?,https://github.com/bitcoin/bitcoin/pull/21062#discussion_r573659423,573659423,src/validation.h
MarcoFalke,2021-02-10 11:40:27,"Haven't tried, but I think this can be written shorter\n\n```suggestion\n        : m_result_type(ResultType::VALID), m_state{},\n```",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r573659801,573659801,src/validation.h
MarcoFalke,2021-02-10 11:42:47,"nit in 174cb5330af4b09f3a66974d3bae783ea43b190e: When touching the code it would be good if the correct style was used right away, instead of adding another commit afterward to fix it up once more. (This increases the `git blame` and `git log -S` depth)",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r573661048,573661048,src/validation.cpp
MarcoFalke,2021-02-10 11:44:37,nit 174cb5330af4b09f3a66974d3bae783ea43b190e: When touching a member variable in all places where it is used it could make sense to use the right name right away instead of using the wrong name first in all sites and then adding a commit to rename it. (Increases git blame depth),https://github.com/bitcoin/bitcoin/pull/21062#discussion_r573662097,573662097,src/validation.cpp
glozow,2021-02-10 18:26:38,"Mm, definitely - I will keep this in mind!",https://github.com/bitcoin/bitcoin/pull/21062#discussion_r573970128,573970128,src/validation.cpp
