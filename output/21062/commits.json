[
  {
    "sha": "9db10a55061e09021ff8ea1d6637d99f7959035f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZGIxMGE1NTA2MWUwOTAyMWZmOGVhMWQ2NjM3ZDk5Zjc5NTkwMzVm",
    "commit": {
      "author": {
        "name": "gzhao408",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-01-26T19:50:00Z"
      },
      "committer": {
        "name": "gzhao408",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-02-02T14:56:16Z"
      },
      "message": "[refactor] clean up logic in testmempoolaccept\n\nCleans up reundant code and reduces the diff of the next commit.",
      "tree": {
        "sha": "4bf700f1fc9d8c7a325112e00224a84c391751c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4bf700f1fc9d8c7a325112e00224a84c391751c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9db10a55061e09021ff8ea1d6637d99f7959035f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9db10a55061e09021ff8ea1d6637d99f7959035f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9db10a55061e09021ff8ea1d6637d99f7959035f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9db10a55061e09021ff8ea1d6637d99f7959035f/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f72d80b07af8ecbb2f9df1e87344eb465186f19d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f72d80b07af8ecbb2f9df1e87344eb465186f19d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f72d80b07af8ecbb2f9df1e87344eb465186f19d"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 16,
      "deletions": 21
    },
    "files": [
      {
        "sha": "31190ef9fc2d142c735c0e31ea0d275028579c62",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 21,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9db10a55061e09021ff8ea1d6637d99f7959035f/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9db10a55061e09021ff8ea1d6637d99f7959035f/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=9db10a55061e09021ff8ea1d6637d99f7959035f",
        "patch": "@@ -955,35 +955,30 @@ static RPCHelpMan testmempoolaccept()\n             nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n     }\n \n-    // Check that fee does not exceed maximum fee\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n-        result_0.pushKV(\"allowed\", false);\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        result.push_back(std::move(result_0));\n-        return result;\n-    }\n-    result_0.pushKV(\"allowed\", test_accept_res);\n-\n     // Only return the fee and vsize if the transaction would pass ATMP.\n     // These can be used to calculate the feerate.\n     if (test_accept_res) {\n-        result_0.pushKV(\"vsize\", virtual_size);\n-        UniValue fees(UniValue::VOBJ);\n-        fees.pushKV(\"base\", ValueFromAmount(fee));\n-        result_0.pushKV(\"fees\", fees);\n+        // Check that fee does not exceed maximum fee\n+        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n+            result_0.pushKV(\"allowed\", false);\n+            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n+        } else {\n+            result_0.pushKV(\"allowed\", true);\n+            result_0.pushKV(\"vsize\", virtual_size);\n+            UniValue fees(UniValue::VOBJ);\n+            fees.pushKV(\"base\", ValueFromAmount(fee));\n+            result_0.pushKV(\"fees\", fees);\n+        }\n+        result.push_back(std::move(result_0));\n     } else {\n-        if (state.IsInvalid()) {\n-            if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-                result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n-            } else {\n-                result_0.pushKV(\"reject-reason\", strprintf(\"%s\", state.GetRejectReason()));\n-            }\n+        result_0.pushKV(\"allowed\", false);\n+        if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n+            result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n         } else {\n             result_0.pushKV(\"reject-reason\", state.GetRejectReason());\n         }\n+        result.push_back(std::move(result_0));\n     }\n-\n-    result.push_back(std::move(result_0));\n     return result;\n },\n     };"
      }
    ]
  },
  {
    "sha": "f82baf0762f60c2ca5ffc339b095f9271d7c2f33",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODJiYWYwNzYyZjYwYzJjYTVmZmMzMzliMDk1ZjkyNzFkN2MyZjMz",
    "commit": {
      "author": {
        "name": "gzhao408",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-01-19T13:29:40Z"
      },
      "committer": {
        "name": "gzhao408",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-02-09T15:01:52Z"
      },
      "message": "[refactor] return MempoolAcceptResult\n\nThis creates a cleaner interface with ATMP, allows us to make results const,\nand makes accessing values that don't make sense (e.g. fee when tx is\ninvalid) an error.",
      "tree": {
        "sha": "4439a2ad3f6021a62be8bba8a8bf8da6d4b03174",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4439a2ad3f6021a62be8bba8a8bf8da6d4b03174"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f82baf0762f60c2ca5ffc339b095f9271d7c2f33",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f82baf0762f60c2ca5ffc339b095f9271d7c2f33",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f82baf0762f60c2ca5ffc339b095f9271d7c2f33",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f82baf0762f60c2ca5ffc339b095f9271d7c2f33/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9db10a55061e09021ff8ea1d6637d99f7959035f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9db10a55061e09021ff8ea1d6637d99f7959035f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9db10a55061e09021ff8ea1d6637d99f7959035f"
      }
    ],
    "stats": {
      "total": 198,
      "additions": 106,
      "deletions": 92
    },
    "files": [
      {
        "sha": "9f7d582e8a5d00c314dcbdaef876b988cbb641f5",
        "filename": "src/bench/block_assemble.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f82baf0762f60c2ca5ffc339b095f9271d7c2f33/src/bench/block_assemble.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f82baf0762f60c2ca5ffc339b095f9271d7c2f33/src/bench/block_assemble.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/block_assemble.cpp?ref=f82baf0762f60c2ca5ffc339b095f9271d7c2f33",
        "patch": "@@ -48,9 +48,8 @@ static void AssembleBlock(benchmark::Bench& bench)\n         LOCK(::cs_main); // Required for ::AcceptToMemoryPool.\n \n         for (const auto& txr : txs) {\n-            TxValidationState state;\n-            bool ret{::AcceptToMemoryPool(*test_setup.m_node.mempool, state, txr, nullptr /* plTxnReplaced */, false /* bypass_limits */)};\n-            assert(ret);\n+            const MempoolAcceptResult res = ::AcceptToMemoryPool(*test_setup.m_node.mempool, txr, false /* bypass_limits */);\n+            assert(res.m_result_type == MempoolAcceptResult::ResultType::VALID);\n         }\n     }\n "
      },
      {
        "sha": "ba80da287a330dcc4090cc748c8c6978f8240c4a",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f82baf0762f60c2ca5ffc339b095f9271d7c2f33/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f82baf0762f60c2ca5ffc339b095f9271d7c2f33/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=f82baf0762f60c2ca5ffc339b095f9271d7c2f33",
        "patch": "@@ -2178,10 +2178,10 @@ void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n         if (orphan_it == mapOrphanTransactions.end()) continue;\n \n         const CTransactionRef porphanTx = orphan_it->second.tx;\n-        TxValidationState state;\n-        std::list<CTransactionRef> removed_txn;\n+        const MempoolAcceptResult result = AcceptToMemoryPool(m_mempool, porphanTx, false /* bypass_limits */);\n+        const TxValidationState& state = result.m_state;\n \n-        if (AcceptToMemoryPool(m_mempool, state, porphanTx, &removed_txn, false /* bypass_limits */)) {\n+        if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n             LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n             RelayTransaction(orphanHash, porphanTx->GetWitnessHash(), m_connman);\n             for (unsigned int i = 0; i < porphanTx->vout.size(); i++) {\n@@ -2193,7 +2193,7 @@ void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n                 }\n             }\n             EraseOrphanTx(orphanHash);\n-            for (const CTransactionRef& removedTx : removed_txn) {\n+            for (const CTransactionRef& removedTx : result.m_replaced_transactions.value()) {\n                 AddToCompactExtraTransactions(removedTx);\n             }\n             break;\n@@ -3197,10 +3197,10 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             return;\n         }\n \n-        TxValidationState state;\n-        std::list<CTransactionRef> lRemovedTxn;\n+        const MempoolAcceptResult result = AcceptToMemoryPool(m_mempool, ptx, false /* bypass_limits */);\n+        const TxValidationState& state = result.m_state;\n \n-        if (AcceptToMemoryPool(m_mempool, state, ptx, &lRemovedTxn, false /* bypass_limits */)) {\n+        if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n             m_mempool.check(&::ChainstateActive().CoinsTip());\n             // As this version of the transaction was acceptable, we can forget about any\n             // requests for it.\n@@ -3223,7 +3223,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 tx.GetHash().ToString(),\n                 m_mempool.size(), m_mempool.DynamicMemoryUsage() / 1000);\n \n-            for (const CTransactionRef& removedTx : lRemovedTxn) {\n+            for (const CTransactionRef& removedTx : result.m_replaced_transactions.value()) {\n                 AddToCompactExtraTransactions(removedTx);\n             }\n "
      },
      {
        "sha": "6f5acf41e32855d1d673b5503e4949ccf0dccabc",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f82baf0762f60c2ca5ffc339b095f9271d7c2f33/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f82baf0762f60c2ca5ffc339b095f9271d7c2f33/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=f82baf0762f60c2ca5ffc339b095f9271d7c2f33",
        "patch": "@@ -50,22 +50,22 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n     }\n     if (!node.mempool->exists(hashTx)) {\n         // Transaction is not already in the mempool.\n-        TxValidationState state;\n         if (max_tx_fee > 0) {\n             // First, call ATMP with test_accept and check the fee. If ATMP\n             // fails here, return error immediately.\n-            CAmount fee{0};\n-            if (!AcceptToMemoryPool(*node.mempool, state, tx,\n-                nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee)) {\n-                return HandleATMPError(state, err_string);\n-            } else if (fee > max_tx_fee) {\n+            const MempoolAcceptResult result = AcceptToMemoryPool(*node.mempool, tx, false /* bypass_limits */,\n+                                                                  true /* test_accept */);\n+            if (result.m_result_type != MempoolAcceptResult::ResultType::VALID) {\n+                return HandleATMPError(result.m_state, err_string);\n+            } else if (result.m_base_fees.value() > max_tx_fee) {\n                 return TransactionError::MAX_FEE_EXCEEDED;\n             }\n         }\n         // Try to submit the transaction to the mempool.\n-        if (!AcceptToMemoryPool(*node.mempool, state, tx,\n-                nullptr /* plTxnReplaced */, false /* bypass_limits */)) {\n-            return HandleATMPError(state, err_string);\n+        const MempoolAcceptResult result = AcceptToMemoryPool(*node.mempool, tx, false /* bypass_limits */,\n+                                                              false /* test_accept */);\n+        if (result.m_result_type != MempoolAcceptResult::ResultType::VALID) {\n+            return HandleATMPError(result.m_state, err_string);\n         }\n \n         // Transaction was accepted to the mempool."
      },
      {
        "sha": "784a53e0605c97d76f4ba3b4d3c022781650393d",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 9,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f82baf0762f60c2ca5ffc339b095f9271d7c2f33/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f82baf0762f60c2ca5ffc339b095f9271d7c2f33/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=f82baf0762f60c2ca5ffc339b095f9271d7c2f33",
        "patch": "@@ -946,18 +946,13 @@ static RPCHelpMan testmempoolaccept()\n     result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n     result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n \n-    TxValidationState state;\n-    bool test_accept_res;\n-    CAmount fee{0};\n-    {\n-        LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n-    }\n+    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(mempool, std::move(tx),\n+                                                  false /* bypass_limits */, /* test_accept */ true));\n \n     // Only return the fee and vsize if the transaction would pass ATMP.\n     // These can be used to calculate the feerate.\n-    if (test_accept_res) {\n+    if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n+        const CAmount fee = accept_result.m_base_fees.value();\n         // Check that fee does not exceed maximum fee\n         if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n             result_0.pushKV(\"allowed\", false);\n@@ -972,6 +967,7 @@ static RPCHelpMan testmempoolaccept()\n         result.push_back(std::move(result_0));\n     } else {\n         result_0.pushKV(\"allowed\", false);\n+        const TxValidationState state = accept_result.m_state;\n         if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n             result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n         } else {"
      },
      {
        "sha": "9b0d2e3135f591ec0a52c512c298f3237b20f2f1",
        "filename": "src/test/txvalidation_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 10,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f82baf0762f60c2ca5ffc339b095f9271d7c2f33/src/test/txvalidation_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f82baf0762f60c2ca5ffc339b095f9271d7c2f33/src/test/txvalidation_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidation_tests.cpp?ref=f82baf0762f60c2ca5ffc339b095f9271d7c2f33",
        "patch": "@@ -30,25 +30,21 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n \n     BOOST_CHECK(CTransaction(coinbaseTx).IsCoinBase());\n \n-    TxValidationState state;\n-\n     LOCK(cs_main);\n \n     unsigned int initialPoolSize = m_node.mempool->size();\n+    const MempoolAcceptResult result = AcceptToMemoryPool(*m_node.mempool, MakeTransactionRef(coinbaseTx),\n+                true /* bypass_limits */);\n \n-    BOOST_CHECK_EQUAL(\n-            false,\n-            AcceptToMemoryPool(*m_node.mempool, state, MakeTransactionRef(coinbaseTx),\n-                nullptr /* plTxnReplaced */,\n-                true /* bypass_limits */));\n+    BOOST_CHECK(result.m_result_type == MempoolAcceptResult::ResultType::INVALID);\n \n     // Check that the transaction hasn't been added to mempool.\n     BOOST_CHECK_EQUAL(m_node.mempool->size(), initialPoolSize);\n \n     // Check that the validation state reflects the unsuccessful attempt.\n-    BOOST_CHECK(state.IsInvalid());\n-    BOOST_CHECK_EQUAL(state.GetRejectReason(), \"coinbase\");\n-    BOOST_CHECK(state.GetResult() == TxValidationResult::TX_CONSENSUS);\n+    BOOST_CHECK(result.m_state.IsInvalid());\n+    BOOST_CHECK_EQUAL(result.m_state.GetRejectReason(), \"coinbase\");\n+    BOOST_CHECK(result.m_state.GetResult() == TxValidationResult::TX_CONSENSUS);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "af0090cc10877df4cc4372db6adbc1fcdaec9928",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f82baf0762f60c2ca5ffc339b095f9271d7c2f33/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f82baf0762f60c2ca5ffc339b095f9271d7c2f33/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=f82baf0762f60c2ca5ffc339b095f9271d7c2f33",
        "patch": "@@ -28,9 +28,9 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n     const auto ToMemPool = [this](const CMutableTransaction& tx) {\n         LOCK(cs_main);\n \n-        TxValidationState state;\n-        return AcceptToMemoryPool(*m_node.mempool, state, MakeTransactionRef(tx),\n-            nullptr /* plTxnReplaced */, true /* bypass_limits */);\n+        const MempoolAcceptResult result = AcceptToMemoryPool(*m_node.mempool, MakeTransactionRef(tx),\n+            true /* bypass_limits */);\n+        return result.m_result_type == MempoolAcceptResult::ResultType::VALID;\n     };\n \n     // Create a double-spend of mature coinbase txn:"
      },
      {
        "sha": "6c18a9e1bb01bad6144199e33e694587deae22ee",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f82baf0762f60c2ca5ffc339b095f9271d7c2f33/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f82baf0762f60c2ca5ffc339b095f9271d7c2f33/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=f82baf0762f60c2ca5ffc339b095f9271d7c2f33",
        "patch": "@@ -283,15 +283,9 @@ BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n         // Add the txs to the tx pool\n         {\n             LOCK(cs_main);\n-            TxValidationState state;\n-            std::list<CTransactionRef> plTxnReplaced;\n             for (const auto& tx : txs) {\n-                BOOST_REQUIRE(AcceptToMemoryPool(\n-                    *m_node.mempool,\n-                    state,\n-                    tx,\n-                    &plTxnReplaced,\n-                    /* bypass_limits */ false));\n+                const MempoolAcceptResult result = AcceptToMemoryPool(*m_node.mempool, tx, false /* bypass_limits */);\n+                BOOST_REQUIRE(result.m_result_type == MempoolAcceptResult::ResultType::VALID);\n             }\n         }\n "
      },
      {
        "sha": "a1e57752d3b9ba45401035697bc803426aa46487",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 35,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f82baf0762f60c2ca5ffc339b095f9271d7c2f33/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f82baf0762f60c2ca5ffc339b095f9271d7c2f33/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=f82baf0762f60c2ca5ffc339b095f9271d7c2f33",
        "patch": "@@ -380,10 +380,8 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     auto it = disconnectpool.queuedTx.get<insertion_order>().rbegin();\n     while (it != disconnectpool.queuedTx.get<insertion_order>().rend()) {\n         // ignore validation errors in resurrected transactions\n-        TxValidationState stateDummy;\n         if (!fAddToMempool || (*it)->IsCoinBase() ||\n-            !AcceptToMemoryPool(mempool, stateDummy, *it,\n-                                nullptr /* plTxnReplaced */, true /* bypass_limits */)) {\n+            AcceptToMemoryPool(mempool, *it, true /* bypass_limits */).m_result_type != MempoolAcceptResult::ResultType::VALID) {\n             // If the transaction doesn't make it in to the mempool, remove any\n             // transactions that depend on it (which would now be orphans).\n             mempool.removeRecursive(**it, MemPoolRemovalReason::REORG);\n@@ -465,7 +463,7 @@ class MemPoolAccept\n         const CChainParams& m_chainparams;\n         TxValidationState &m_state;\n         const int64_t m_accept_time;\n-        std::list<CTransactionRef>* m_replaced_transactions;\n+        std::list<CTransactionRef> m_replaced_transactions;\n         const bool m_bypass_limits;\n         /*\n          * Return any outpoints which were not previously present in the coins\n@@ -476,11 +474,11 @@ class MemPoolAccept\n          */\n         std::vector<COutPoint>& m_coins_to_uncache;\n         const bool m_test_accept;\n-        CAmount* m_fee_out;\n+        CAmount m_fee_out;\n     };\n \n     // Single transaction acceptance\n-    bool AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    MempoolAcceptResult AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n private:\n     // All the intermediate state that gets passed between the various levels\n@@ -688,10 +686,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         return false; // state filled in by CheckTxInputs\n     }\n \n-    // If fee_out is passed, return the fee to the caller\n-    if (args.m_fee_out) {\n-        *args.m_fee_out = nFees;\n-    }\n+    args.m_fee_out = nFees;\n \n     // Check for non-standard pay-to-script-hash in inputs\n     const auto& params = args.m_chainparams.GetConsensus();\n@@ -1007,8 +1002,7 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n                 hash.ToString(),\n                 FormatMoney(nModifiedFees - nConflictingFees),\n                 (int)entry->GetTxSize() - (int)nConflictingSize);\n-        if (args.m_replaced_transactions)\n-            args.m_replaced_transactions->push_back(it->GetSharedTx());\n+        args.m_replaced_transactions.push_back(it->GetSharedTx());\n     }\n     m_pool.RemoveStaged(allConflicting, false, MemPoolRemovalReason::REPLACED);\n \n@@ -1031,46 +1025,51 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, workspace)) return MempoolAcceptResult(args.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(args.m_state);\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(args.m_state);\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        return MempoolAcceptResult(std::move(args.m_replaced_transactions), args.m_fee_out);\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, workspace)) return MempoolAcceptResult(args.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    return MempoolAcceptResult(std::move(args.m_replaced_transactions), args.m_fee_out);\n }\n \n } // anon namespace\n \n /** (try to) add transaction to memory pool with a specified acceptance time **/\n-static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static MempoolAcceptResult AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool,\n+                                                      const CTransactionRef &tx, int64_t nAcceptTime,\n+                                                      bool bypass_limits, bool test_accept)\n+                                                      EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n+    TxValidationState state;\n     std::vector<COutPoint> coins_to_uncache;\n-    MemPoolAccept::ATMPArgs args { chainparams, state, nAcceptTime, plTxnReplaced, bypass_limits, coins_to_uncache, test_accept, fee_out };\n-    bool res = MemPoolAccept(pool).AcceptSingleTransaction(tx, args);\n-    if (!res) {\n+    MemPoolAccept::ATMPArgs args { chainparams, state, nAcceptTime, {}, bypass_limits, coins_to_uncache, test_accept, {} };\n+\n+    const MempoolAcceptResult result = MemPoolAccept(pool).AcceptSingleTransaction(tx, args);\n+    if (result.m_result_type != MempoolAcceptResult::ResultType::VALID) {\n         // Remove coins that were not present in the coins cache before calling ATMPW;\n         // this is to prevent memory DoS in case we receive a large number of\n         // invalid transactions that attempt to overrun the in-memory coins cache\n@@ -1082,15 +1081,13 @@ static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPo\n     // After we've (potentially) uncached entries, ensure our coins cache is still within its size limits\n     BlockValidationState state_dummy;\n     ::ChainstateActive().FlushStateToDisk(chainparams, state_dummy, FlushStateMode::PERIODIC);\n-    return res;\n+    return result;\n }\n \n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept, CAmount* fee_out)\n+MempoolAcceptResult AcceptToMemoryPool(CTxMemPool& pool, const CTransactionRef &tx, bool bypass_limits, bool test_accept)\n {\n     const CChainParams& chainparams = Params();\n-    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, GetTime(), plTxnReplaced, bypass_limits, test_accept, fee_out);\n+    return AcceptToMemoryPoolWithTime(chainparams, pool, tx, GetTime(), bypass_limits, test_accept);\n }\n \n CTransactionRef GetTransaction(const CBlockIndex* const block_index, const CTxMemPool* const mempool, const uint256& hash, const Consensus::Params& consensusParams, uint256& hashBlock)\n@@ -5029,13 +5026,10 @@ bool LoadMempool(CTxMemPool& pool)\n             if (amountdelta) {\n                 pool.PrioritiseTransaction(tx->GetHash(), amountdelta);\n             }\n-            TxValidationState state;\n             if (nTime > nNow - nExpiryTimeout) {\n                 LOCK(cs_main);\n-                AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, nTime,\n-                                           nullptr /* plTxnReplaced */, false /* bypass_limits */,\n-                                           false /* test_accept */);\n-                if (state.IsValid()) {\n+                if (AcceptToMemoryPoolWithTime(chainparams, pool, tx, nTime, false /* bypass_limits */,\n+                                               false /* test_accept */).m_result_type == MempoolAcceptResult::ResultType::VALID) {\n                     ++count;\n                 } else {\n                     // mempool may contain the transaction already, e.g. from"
      },
      {
        "sha": "c737c113adaa9e9c9d79f1029fb3234f2f8400a8",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 42,
        "deletions": 7,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f82baf0762f60c2ca5ffc339b095f9271d7c2f33/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f82baf0762f60c2ca5ffc339b095f9271d7c2f33/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=f82baf0762f60c2ca5ffc339b095f9271d7c2f33",
        "patch": "@@ -12,6 +12,7 @@\n \n #include <amount.h>\n #include <coins.h>\n+#include <consensus/validation.h>\n #include <crypto/common.h> // for ReadLE64\n #include <fs.h>\n #include <optional.h>\n@@ -23,6 +24,7 @@\n #include <txdb.h>\n #include <versionbits.h>\n #include <serialize.h>\n+#include <util/check.h>\n #include <util/hasher.h>\n \n #include <atomic>\n@@ -46,7 +48,6 @@ class CConnman;\n class CScriptCheck;\n class CTxMemPool;\n class ChainstateManager;\n-class TxValidationState;\n struct ChainTxData;\n \n struct DisconnectedBlockTransactions;\n@@ -181,12 +182,46 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+*/\n+struct MempoolAcceptResult {\n+    /** Used to indicate the results of mempool validation,\n+    * including the possibility of unfinished validation.\n+    */\n+    enum class ResultType {\n+        VALID, //!> Fully validated, valid.\n+        INVALID, //!> Invalid.\n+    };\n+    ResultType m_result_type;\n+    TxValidationState m_state;\n+\n+    // The following fields are only present when m_result_type = ResultType::VALID\n+    /** Mempool transactions replaced by the tx per BIP 125 rules. */\n+    std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n+    /** Raw base fees. */\n+    std::optional<CAmount> m_base_fees;\n+\n+    /** Constructor for failure case */\n+    explicit MempoolAcceptResult(TxValidationState state)\n+        : m_result_type(ResultType::INVALID),\n+        m_state(state), m_replaced_transactions(nullopt), m_base_fees(nullopt) {\n+            Assume(!state.IsValid()); // Can be invalid or error\n+        }\n+\n+    /** Constructor for success case */\n+    explicit MempoolAcceptResult(std::list<CTransactionRef>&& replaced_txns, CAmount fees)\n+        : m_result_type(ResultType::VALID), m_state(TxValidationState{}),\n+        m_replaced_transactions(std::move(replaced_txns)), m_base_fees(fees) {}\n+};\n+\n+/**\n+ * (Try to) add a transaction to the memory pool.\n+ * @param[in]  bypass_limits   When true, don't enforce mempool fee limits.\n+ * @param[in]  test_accept     When true, run validation checks but don't submit to mempool.\n+ */\n+MempoolAcceptResult AcceptToMemoryPool(CTxMemPool& pool, const CTransactionRef& tx,\n+                                       bool bypass_limits, bool test_accept=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Get the BIP9 state for a given deployment at the current tip. */\n ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos);"
      }
    ]
  },
  {
    "sha": "174cb5330af4b09f3a66974d3bae783ea43b190e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzRjYjUzMzBhZjRiMDlmM2E2Njk3NGQzYmFlNzgzZWE0M2IxOTBl",
    "commit": {
      "author": {
        "name": "gzhao408",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-01-19T17:32:20Z"
      },
      "committer": {
        "name": "gzhao408",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-02-09T15:01:52Z"
      },
      "message": "[refactor] const ATMPArgs and non-const Workspace\n\nATMPArgs should contain const arguments for validation.\nThe Workspace should contain state that may change\nthroughout validation.",
      "tree": {
        "sha": "36832da190d5b9b80cd7fec82728d075fa2461c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36832da190d5b9b80cd7fec82728d075fa2461c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/174cb5330af4b09f3a66974d3bae783ea43b190e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/174cb5330af4b09f3a66974d3bae783ea43b190e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/174cb5330af4b09f3a66974d3bae783ea43b190e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/174cb5330af4b09f3a66974d3bae783ea43b190e/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f82baf0762f60c2ca5ffc339b095f9271d7c2f33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f82baf0762f60c2ca5ffc339b095f9271d7c2f33",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f82baf0762f60c2ca5ffc339b095f9271d7c2f33"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 24,
      "deletions": 30
    },
    "files": [
      {
        "sha": "fc6edbf440230a0be94b622a1c8550359e4a8e18",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 30,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/174cb5330af4b09f3a66974d3bae783ea43b190e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/174cb5330af4b09f3a66974d3bae783ea43b190e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=174cb5330af4b09f3a66974d3bae783ea43b190e",
        "patch": "@@ -461,9 +461,7 @@ class MemPoolAccept\n     // around easier.\n     struct ATMPArgs {\n         const CChainParams& m_chainparams;\n-        TxValidationState &m_state;\n         const int64_t m_accept_time;\n-        std::list<CTransactionRef> m_replaced_transactions;\n         const bool m_bypass_limits;\n         /*\n          * Return any outpoints which were not previously present in the coins\n@@ -474,7 +472,6 @@ class MemPoolAccept\n          */\n         std::vector<COutPoint>& m_coins_to_uncache;\n         const bool m_test_accept;\n-        CAmount m_fee_out;\n     };\n \n     // Single transaction acceptance\n@@ -489,14 +486,17 @@ class MemPoolAccept\n         CTxMemPool::setEntries m_all_conflicting;\n         CTxMemPool::setEntries m_ancestors;\n         std::unique_ptr<CTxMemPoolEntry> m_entry;\n+        std::list<CTransactionRef> m_replaced_transactions;\n \n         bool m_replacement_transaction;\n+        CAmount m_fee_out;\n         CAmount m_modified_fees;\n         CAmount m_conflicting_fees;\n         size_t m_conflicting_size;\n \n         const CTransactionRef& m_ptx;\n         const uint256& m_hash;\n+        TxValidationState m_state;\n     };\n \n     // Run the policy checks on a given transaction, excluding any script checks.\n@@ -507,18 +507,18 @@ class MemPoolAccept\n \n     // Run the script checks using our policy flags. As this can be slow, we should\n     // only invoke this on transactions that have otherwise passed policy checks.\n-    bool PolicyScriptChecks(ATMPArgs& args, const Workspace& ws, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n+    bool PolicyScriptChecks(const ATMPArgs& args, Workspace& ws, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n \n     // Re-run the script checks, using consensus flags, and try to cache the\n     // result in the scriptcache. This should be done after\n     // PolicyScriptChecks(). This requires that all inputs either be in our\n     // utxo set or in the mempool.\n-    bool ConsensusScriptChecks(ATMPArgs& args, const Workspace& ws, PrecomputedTransactionData &txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n+    bool ConsensusScriptChecks(const ATMPArgs& args, Workspace& ws, PrecomputedTransactionData &txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n \n     // Try to add the transaction to the mempool, removing any conflicts first.\n     // Returns true if the transaction is in the mempool after any size\n     // limiting is performed, false otherwise.\n-    bool Finalize(ATMPArgs& args, Workspace& ws) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n+    bool Finalize(const ATMPArgs& args, Workspace& ws) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n \n     // Compare a package's feerate against minimum allowed.\n     bool CheckFeeRate(size_t package_size, CAmount package_fee, TxValidationState& state) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs)\n@@ -556,12 +556,12 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     const uint256& hash = ws.m_hash;\n \n     // Copy/alias what we need out of args\n-    TxValidationState &state = args.m_state;\n     const int64_t nAcceptTime = args.m_accept_time;\n     const bool bypass_limits = args.m_bypass_limits;\n     std::vector<COutPoint>& coins_to_uncache = args.m_coins_to_uncache;\n \n     // Alias what we need out of ws\n+    TxValidationState &state = ws.m_state;\n     std::set<uint256>& setConflicts = ws.m_conflicts;\n     CTxMemPool::setEntries& allConflicting = ws.m_all_conflicting;\n     CTxMemPool::setEntries& setAncestors = ws.m_ancestors;\n@@ -681,13 +681,10 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     if (!CheckSequenceLocks(m_pool, tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &lp))\n         return state.Invalid(TxValidationResult::TX_PREMATURE_SPEND, \"non-BIP68-final\");\n \n-    CAmount nFees = 0;\n-    if (!Consensus::CheckTxInputs(tx, state, m_view, g_chainman.m_blockman.GetSpendHeight(m_view), nFees)) {\n+    if (!Consensus::CheckTxInputs(tx, state, m_view, g_chainman.m_blockman.GetSpendHeight(m_view), ws.m_fee_out)) {\n         return false; // state filled in by CheckTxInputs\n     }\n \n-    args.m_fee_out = nFees;\n-\n     // Check for non-standard pay-to-script-hash in inputs\n     const auto& params = args.m_chainparams.GetConsensus();\n     auto taproot_state = VersionBitsState(::ChainActive().Tip(), params, Consensus::DEPLOYMENT_TAPROOT, versionbitscache);\n@@ -702,7 +699,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     int64_t nSigOpsCost = GetTransactionSigOpCost(tx, m_view, STANDARD_SCRIPT_VERIFY_FLAGS);\n \n     // nModifiedFees includes any fee deltas from PrioritiseTransaction\n-    nModifiedFees = nFees;\n+    nModifiedFees = ws.m_fee_out;\n     m_pool.ApplyDelta(hash, nModifiedFees);\n \n     // Keep track of transactions that spend a coinbase, which we re-scan\n@@ -716,7 +713,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         }\n     }\n \n-    entry.reset(new CTxMemPoolEntry(ptx, nFees, nAcceptTime, ::ChainActive().Height(),\n+    entry.reset(new CTxMemPoolEntry(ptx, ws.m_fee_out, nAcceptTime, ::ChainActive().Height(),\n             fSpendsCoinbase, nSigOpsCost, lp));\n     unsigned int nSize = entry->GetTxSize();\n \n@@ -920,11 +917,10 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::PolicyScriptChecks(ATMPArgs& args, const Workspace& ws, PrecomputedTransactionData& txdata)\n+bool MemPoolAccept::PolicyScriptChecks(const ATMPArgs& args, Workspace& ws, PrecomputedTransactionData& txdata)\n {\n     const CTransaction& tx = *ws.m_ptx;\n-\n-    TxValidationState &state = args.m_state;\n+    TxValidationState &state = ws.m_state;\n \n     constexpr unsigned int scriptVerifyFlags = STANDARD_SCRIPT_VERIFY_FLAGS;\n \n@@ -947,12 +943,11 @@ bool MemPoolAccept::PolicyScriptChecks(ATMPArgs& args, const Workspace& ws, Prec\n     return true;\n }\n \n-bool MemPoolAccept::ConsensusScriptChecks(ATMPArgs& args, const Workspace& ws, PrecomputedTransactionData& txdata)\n+bool MemPoolAccept::ConsensusScriptChecks(const ATMPArgs& args, Workspace& ws, PrecomputedTransactionData& txdata)\n {\n     const CTransaction& tx = *ws.m_ptx;\n     const uint256& hash = ws.m_hash;\n-\n-    TxValidationState &state = args.m_state;\n+    TxValidationState &state = ws.m_state;\n     const CChainParams& chainparams = args.m_chainparams;\n \n     // Check again against the current block tip's script verification\n@@ -979,11 +974,11 @@ bool MemPoolAccept::ConsensusScriptChecks(ATMPArgs& args, const Workspace& ws, P\n     return true;\n }\n \n-bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n+bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n {\n     const CTransaction& tx = *ws.m_ptx;\n     const uint256& hash = ws.m_hash;\n-    TxValidationState &state = args.m_state;\n+    TxValidationState &state = ws.m_state;\n     const bool bypass_limits = args.m_bypass_limits;\n \n     CTxMemPool::setEntries& allConflicting = ws.m_all_conflicting;\n@@ -1002,7 +997,7 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n                 hash.ToString(),\n                 FormatMoney(nModifiedFees - nConflictingFees),\n                 (int)entry->GetTxSize() - (int)nConflictingSize);\n-        args.m_replaced_transactions.push_back(it->GetSharedTx());\n+        ws.m_replaced_transactions.push_back(it->GetSharedTx());\n     }\n     m_pool.RemoveStaged(allConflicting, false, MemPoolRemovalReason::REPLACED);\n \n@@ -1032,28 +1027,28 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace workspace(ptx);\n \n-    if (!PreChecks(args, workspace)) return MempoolAcceptResult(args.m_state);\n+    if (!PreChecks(args, workspace)) return MempoolAcceptResult(workspace.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(args.m_state);\n+    if (!PolicyScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(workspace.m_state);\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(args.m_state);\n+    if (!ConsensusScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(workspace.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(args.m_replaced_transactions), args.m_fee_out);\n+        return MempoolAcceptResult(std::move(workspace.m_replaced_transactions), workspace.m_fee_out);\n     }\n \n-    if (!Finalize(args, workspace)) return MempoolAcceptResult(args.m_state);\n+    if (!Finalize(args, workspace)) return MempoolAcceptResult(workspace.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(args.m_replaced_transactions), args.m_fee_out);\n+    return MempoolAcceptResult(std::move(workspace.m_replaced_transactions), workspace.m_fee_out);\n }\n \n } // anon namespace\n@@ -1064,9 +1059,8 @@ static MempoolAcceptResult AcceptToMemoryPoolWithTime(const CChainParams& chainp\n                                                       bool bypass_limits, bool test_accept)\n                                                       EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n-    TxValidationState state;\n     std::vector<COutPoint> coins_to_uncache;\n-    MemPoolAccept::ATMPArgs args { chainparams, state, nAcceptTime, {}, bypass_limits, coins_to_uncache, test_accept, {} };\n+    MemPoolAccept::ATMPArgs args { chainparams, nAcceptTime, bypass_limits, coins_to_uncache, test_accept };\n \n     const MempoolAcceptResult result = MemPoolAccept(pool).AcceptSingleTransaction(tx, args);\n     if (result.m_result_type != MempoolAcceptResult::ResultType::VALID) {"
      }
    ]
  },
  {
    "sha": "53e716ea119658c28935fee24eb50090907c500e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1M2U3MTZlYTExOTY1OGMyODkzNWZlZTI0ZWI1MDA5MDkwN2M1MDBl",
    "commit": {
      "author": {
        "name": "gzhao408",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-02-01T23:34:27Z"
      },
      "committer": {
        "name": "gzhao408",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-02-09T15:01:52Z"
      },
      "message": "[refactor] improve style for touched code",
      "tree": {
        "sha": "e056d28939ffc3547754d9ff5be2739b135c840e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e056d28939ffc3547754d9ff5be2739b135c840e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/53e716ea119658c28935fee24eb50090907c500e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53e716ea119658c28935fee24eb50090907c500e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/53e716ea119658c28935fee24eb50090907c500e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53e716ea119658c28935fee24eb50090907c500e/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "174cb5330af4b09f3a66974d3bae783ea43b190e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/174cb5330af4b09f3a66974d3bae783ea43b190e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/174cb5330af4b09f3a66974d3bae783ea43b190e"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 16,
      "deletions": 17
    },
    "files": [
      {
        "sha": "12ae8b88b555b01ff37afabc1c19402741491fc4",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 17,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53e716ea119658c28935fee24eb50090907c500e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53e716ea119658c28935fee24eb50090907c500e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=53e716ea119658c28935fee24eb50090907c500e",
        "patch": "@@ -489,7 +489,7 @@ class MemPoolAccept\n         std::list<CTransactionRef> m_replaced_transactions;\n \n         bool m_replacement_transaction;\n-        CAmount m_fee_out;\n+        CAmount m_base_fees;\n         CAmount m_modified_fees;\n         CAmount m_conflicting_fees;\n         size_t m_conflicting_size;\n@@ -561,7 +561,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     std::vector<COutPoint>& coins_to_uncache = args.m_coins_to_uncache;\n \n     // Alias what we need out of ws\n-    TxValidationState &state = ws.m_state;\n+    TxValidationState& state = ws.m_state;\n     std::set<uint256>& setConflicts = ws.m_conflicts;\n     CTxMemPool::setEntries& allConflicting = ws.m_all_conflicting;\n     CTxMemPool::setEntries& setAncestors = ws.m_ancestors;\n@@ -681,7 +681,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     if (!CheckSequenceLocks(m_pool, tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &lp))\n         return state.Invalid(TxValidationResult::TX_PREMATURE_SPEND, \"non-BIP68-final\");\n \n-    if (!Consensus::CheckTxInputs(tx, state, m_view, g_chainman.m_blockman.GetSpendHeight(m_view), ws.m_fee_out)) {\n+    if (!Consensus::CheckTxInputs(tx, state, m_view, g_chainman.m_blockman.GetSpendHeight(m_view), ws.m_base_fees)) {\n         return false; // state filled in by CheckTxInputs\n     }\n \n@@ -699,7 +699,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     int64_t nSigOpsCost = GetTransactionSigOpCost(tx, m_view, STANDARD_SCRIPT_VERIFY_FLAGS);\n \n     // nModifiedFees includes any fee deltas from PrioritiseTransaction\n-    nModifiedFees = ws.m_fee_out;\n+    nModifiedFees = ws.m_base_fees;\n     m_pool.ApplyDelta(hash, nModifiedFees);\n \n     // Keep track of transactions that spend a coinbase, which we re-scan\n@@ -713,7 +713,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         }\n     }\n \n-    entry.reset(new CTxMemPoolEntry(ptx, ws.m_fee_out, nAcceptTime, ::ChainActive().Height(),\n+    entry.reset(new CTxMemPoolEntry(ptx, ws.m_base_fees, nAcceptTime, ::ChainActive().Height(),\n             fSpendsCoinbase, nSigOpsCost, lp));\n     unsigned int nSize = entry->GetTxSize();\n \n@@ -920,7 +920,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n bool MemPoolAccept::PolicyScriptChecks(const ATMPArgs& args, Workspace& ws, PrecomputedTransactionData& txdata)\n {\n     const CTransaction& tx = *ws.m_ptx;\n-    TxValidationState &state = ws.m_state;\n+    TxValidationState& state = ws.m_state;\n \n     constexpr unsigned int scriptVerifyFlags = STANDARD_SCRIPT_VERIFY_FLAGS;\n \n@@ -947,7 +947,7 @@ bool MemPoolAccept::ConsensusScriptChecks(const ATMPArgs& args, Workspace& ws, P\n {\n     const CTransaction& tx = *ws.m_ptx;\n     const uint256& hash = ws.m_hash;\n-    TxValidationState &state = ws.m_state;\n+    TxValidationState& state = ws.m_state;\n     const CChainParams& chainparams = args.m_chainparams;\n \n     // Check again against the current block tip's script verification\n@@ -978,7 +978,7 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n {\n     const CTransaction& tx = *ws.m_ptx;\n     const uint256& hash = ws.m_hash;\n-    TxValidationState &state = ws.m_state;\n+    TxValidationState& state = ws.m_state;\n     const bool bypass_limits = args.m_bypass_limits;\n \n     CTxMemPool::setEntries& allConflicting = ws.m_all_conflicting;\n@@ -1025,30 +1025,30 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n-    Workspace workspace(ptx);\n+    Workspace ws(ptx);\n \n-    if (!PreChecks(args, workspace)) return MempoolAcceptResult(workspace.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(workspace.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(workspace.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(workspace.m_replaced_transactions), workspace.m_fee_out);\n+        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, workspace)) return MempoolAcceptResult(workspace.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(workspace.m_replaced_transactions), workspace.m_fee_out);\n+    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n }\n \n } // anon namespace\n@@ -1080,8 +1080,7 @@ static MempoolAcceptResult AcceptToMemoryPoolWithTime(const CChainParams& chainp\n \n MempoolAcceptResult AcceptToMemoryPool(CTxMemPool& pool, const CTransactionRef &tx, bool bypass_limits, bool test_accept)\n {\n-    const CChainParams& chainparams = Params();\n-    return AcceptToMemoryPoolWithTime(chainparams, pool, tx, GetTime(), bypass_limits, test_accept);\n+    return AcceptToMemoryPoolWithTime(Params(), pool, tx, GetTime(), bypass_limits, test_accept);\n }\n \n CTransactionRef GetTransaction(const CBlockIndex* const block_index, const CTxMemPool* const mempool, const uint256& hash, const Consensus::Params& consensusParams, uint256& hashBlock)"
      }
    ]
  }
]