[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/771447185",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#issuecomment-771447185",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21062",
    "id": 771447185,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTQ0NzE4NQ==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-02T08:03:10Z",
    "updated_at": "2021-02-11T06:47:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21148 (Split orphan handling from net_processing into txorphanage by ajtowns)\n* #21055 ([Bundle 3/n] Prune remaining g_chainman usage in validation functions by dongcarl)\n* #21003 (test: Move MakeNoLogFileContext to libtest_util, and use it in bench by MarcoFalke)\n* #20750 ([Bundle 2/n] Prune g_chainman usage in mempool-related validation functions by dongcarl)\n* #20158 (tree-wide: De-globalize ChainstateManager by dongcarl)\n* #19381 (Fix UBSan warnings triggered when loading corrupt mempool.dat files by rajarshimaitra)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/771447185/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/771718763",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#issuecomment-771718763",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21062",
    "id": 771718763,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTcxODc2Mw==",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?u=3e27bc6589085f3450be1b0e969d04008cc77565&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-02T15:32:29Z",
    "updated_at": "2021-02-02T15:32:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "Teeny rebase for the compiler warnings and changed from `std::optional<bool> m_accepted` to an enum `ResultType m_result_type` so there's no risk of throwing for bad optional access.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/771718763/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/775225948",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#issuecomment-775225948",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21062",
    "id": 775225948,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NTIyNTk0OA==",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?u=3e27bc6589085f3450be1b0e969d04008cc77565&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-08T15:24:24Z",
    "updated_at": "2021-02-08T15:24:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "Addressed @jnewbery comments and @ariard https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569330388 and removed the `ResultType::UNFINISHED` for now since it's unused. Leaving it as an enum because I think we agree that there's value in having more than 2 states, and the struct is the same size",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/775225948/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/775314730",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#issuecomment-775314730",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21062",
    "id": 775314730,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NTMxNDczMA==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-08T17:32:29Z",
    "updated_at": "2021-02-08T17:32:29Z",
    "author_association": "MEMBER",
    "body": "Code review ACK a9ff9c1ca0530e448341e9d24ecd5f8bc6f2ee42\r\n\r\nCirrus failure looks spurious, but I don't know how to restart it.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/775314730/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/776009359",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#issuecomment-776009359",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21062",
    "id": 776009359,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NjAwOTM1OQ==",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?u=3e27bc6589085f3450be1b0e969d04008cc77565&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-09T15:09:00Z",
    "updated_at": "2021-02-09T15:09:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "> The third commit doesn't compile\r\n\r\nShould be fixed now \ud83e\udd26 thanks @MarcoFalke! Fixed the constructors a bit as well to take out the unnecessary `TxValidationState` in the success case and Assume not valid in the failure case.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/776009359/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/776648447",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#issuecomment-776648447",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21062",
    "id": 776648447,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NjY0ODQ0Nw==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-10T11:37:59Z",
    "updated_at": "2021-02-10T11:37:59Z",
    "author_association": "MEMBER",
    "body": "Changes since previous review:\r\n\r\n* No longer pass redundant default-constructed state when valid\r\n* Remove uint8_t from `enum class`\r\n* Add `Assume(!state.IsValid());`\r\n* Make it compile\r\n\r\n\r\nACK 53e716ea119658c28935fee24eb50090907c500e \ud83d\udcbf\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nACK 53e716ea119658c28935fee24eb50090907c500e \ud83d\udcbf\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUh02Qv/VKTbpbQkoToYPmzKcSX5aJ+JAaQThI2/aGnpdgFnl/GdIVDyMcWHyygP\r\niduWhmF6BeEerKuctDAbfLB+EjeQdIr0xMa6lg5nkSsZTi0W+wn+5okOnngsjAzI\r\nJazlKJJGQj/WjUJof04cTtIfcT9ecLS9yN8TJ/W8EWnm+RpSCOMBgUvRfBgdCBXX\r\nGKs2xoxN6BT1ML5+y7qQQB2VyZE/DAEykbR6NhgaAIkrA5UZM6tP4t5/YTNtjoZq\r\nhBgKkesPqym/WjB/6LTEwannfiW/ACvpM3Czg5pPS1svMyMxT4LQh4rMDiF4U21x\r\napPhPIMwvGce1pdX6UwMuDhRdA0VE6y23rxjSjhZaA0ZEBOVEW2sYBCa9bVcROrY\r\n60WzJ2j6dYY2xIHJsYo5vG1LxjSrz42My50LLIKTBsihTg1LNst52KXZfFjozng6\r\n2gewYrzP0lJe/fyUf9BxNK1w9+mbd5kCJDR1VHxsu9Yc5B+4gVKmva4uFodLd+Yo\r\nHyw2/p/q\r\n=G4nn\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `5da03708a5e913024d3ccd093bac9c7a16f54f296f91a24b4c60d85316f124f4  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e8929401085da03708a5e913024d3ccd093bac9c7a16f54f296f91a24b4c60d85316f124f4f010dbf4e15db0297abe2a684975de5b53bb08fff0103c8356ef40dfbff63cf3e580d783345808f0206b93b3d3d98c555731e6b0f49120e1fad86ef43f689b91f47662d7b082b3ade308f1046023c583f008e624396f57e356b40083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6dfff010b288e3c7814103fb47988aea3ec2891108f020ab86ad5622ca023a96192d5172d8353bf74e7a3da7c023972bf1cc76eeb9aa1208f1046023b7b2f0089e3aa532c8ca59d10083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6dfff010c7037a66c44947013768d62a496b4d9f08f020a2bc3a33ffc1ca271ee1829e534c9b997bfabeb62e1d8d99e40e9e188c52cbbb08f1046023c583f008b992adbbe2925ab50083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267f010e57588942800f2d3137b761fc592e9ba08f120f6a0a76abf1b18c99ca2d115f473bb28af4a931f921c241abc939064d07c3bf008f1046023c583f008ef52417ebb44d66f0083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267)\r\n\r\n</details>\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/776648447/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/776924507",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#issuecomment-776924507",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21062",
    "id": 776924507,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NjkyNDUwNw==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-10T18:39:15Z",
    "updated_at": "2021-02-10T18:39:15Z",
    "author_association": "MEMBER",
    "body": "Code review ACK 53e716ea119658c28935fee24eb50090907c500e",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/776924507/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/777108081",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#issuecomment-777108081",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21062",
    "id": 777108081,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NzEwODA4MQ==",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?u=3e27bc6589085f3450be1b0e969d04008cc77565&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-10T23:34:56Z",
    "updated_at": "2021-02-10T23:34:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "Opened followup #21146 to address style comments from @MarcoFalke and @ariard (oopsie for accidentally pushing here, please ignore that).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/777108081/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568552045",
    "pull_request_review_id": 581277343,
    "id": 568552045,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODU1MjA0NQ==",
    "diff_hunk": "@@ -972,12 +972,8 @@ static RPCHelpMan testmempoolaccept()\n         fees.pushKV(\"base\", ValueFromAmount(fee));\n         result_0.pushKV(\"fees\", fees);\n     } else {\n-        if (state.IsInvalid()) {\n-            if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-                result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n-            } else {\n-                result_0.pushKV(\"reject-reason\", strprintf(\"%s\", state.GetRejectReason()));\n-            }\n+        if (state.IsInvalid() && state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {",
    "path": "src/rpc/rawtransaction.cpp",
    "position": null,
    "original_position": 10,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "15c82d3ae7fedac50192defd06b8095b172767ff",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "15c82d3\r\n\r\nCan you drop the `state.IsInvalid()` here ? I think `TX_MISSING_INPUTS`always implies an invalid state (L664, `src/validation.cpp`).",
    "created_at": "2021-02-02T12:10:12Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568552045",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568552045"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568552045"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568552045/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 975,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568568878",
    "pull_request_review_id": 581277343,
    "id": 568568878,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODU2ODg3OA==",
    "diff_hunk": "@@ -1031,46 +1025,51 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, workspace)) return MempoolAcceptResult(args.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(args.m_state);\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(args.m_state);\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        return MempoolAcceptResult(args.m_state, std::move(args.m_replaced_transactions), args.m_fee_out);",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 87,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "abc6ff1c02eae4da8deab777cff9c85247b99db2",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "abc6ff1\r\n\r\nWhat do you think about making `bypass_limits` part of the new `MempoolAcceptResult` ?\r\n\r\nActually we don't have _a_ mempool acceptance evaluation. The set of rules verified is already configurable by passing `bypass_limits=true` to ATMP. This flag will latch feerate and size checks (L729 and L1018 in `src/validation.cpp`). A consumer of this cleaner interface might be interested with the effective set of rules enforced. And consumer might not be ATMP caller who initially picked up the options.\r\n\r\nIt would be judicious if we introduce future configurable options in the future like `bypass_timelocks`.",
    "created_at": "2021-02-02T12:38:20Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568568878",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568568878"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568568878"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568568878/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1049,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568583132",
    "pull_request_review_id": 581277343,
    "id": 568583132,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODU4MzEzMg==",
    "diff_hunk": "@@ -946,32 +946,27 @@ static RPCHelpMan testmempoolaccept()\n     result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n     result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n \n-    TxValidationState state;\n-    bool test_accept_res;\n-    CAmount fee{0};\n-    {\n-        LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n-    }\n-\n-    // Check that fee does not exceed maximum fee\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n-        result_0.pushKV(\"allowed\", false);\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        result.push_back(std::move(result_0));\n-        return result;\n-    }\n-    result_0.pushKV(\"allowed\", test_accept_res);\n+    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(mempool, std::move(tx),\n+                                                  false /* bypass_limits */, /* test_accept */ true));\n \n     // Only return the fee and vsize if the transaction would pass ATMP.\n     // These can be used to calculate the feerate.\n-    if (test_accept_res) {\n-        result_0.pushKV(\"vsize\", virtual_size);\n-        UniValue fees(UniValue::VOBJ);\n-        fees.pushKV(\"base\", ValueFromAmount(fee));\n-        result_0.pushKV(\"fees\", fees);\n+    if (accept_result.m_accepted.value()) {\n+        const CAmount fee = accept_result.m_base_fees.value();\n+        // Check that fee does not exceed maximum fee\n+        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n+            result_0.pushKV(\"allowed\", false);\n+            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");",
    "path": "src/rpc/rawtransaction.cpp",
    "position": 36,
    "original_position": 36,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "abc6ff1c02eae4da8deab777cff9c85247b99db2",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "abc6ff1\r\n\r\nI don't know about returning \"allowed\"=false for `max_raw_tx_fee` violation. \"allowed\" is documented as \"If the mempool allows this tx to be inserted\". Your transaction might be mempool valid but doesn't pass the client belt-and-suspender, a different check. \r\n\r\nAlso it would be nice to return \"base\" and \"fees\" to let the transaction construction builder adapt the feerate to something passing `max_raw_tx_fee`.\r\n\r\nNote, that's independent from refactoring, more a undersight of #19339.",
    "created_at": "2021-02-02T13:01:29Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568583132",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568583132"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568583132"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568583132/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 959,
    "original_line": 959,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568597344",
    "pull_request_review_id": 581277343,
    "id": 568597344,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODU5NzM0NA==",
    "diff_hunk": "@@ -380,10 +380,8 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     auto it = disconnectpool.queuedTx.get<insertion_order>().rbegin();\n     while (it != disconnectpool.queuedTx.get<insertion_order>().rend()) {\n         // ignore validation errors in resurrected transactions\n-        TxValidationState stateDummy;\n         if (!fAddToMempool || (*it)->IsCoinBase() ||\n-            !AcceptToMemoryPool(mempool, stateDummy, *it,\n-                                nullptr /* plTxnReplaced */, true /* bypass_limits */)) {\n+            !AcceptToMemoryPool(mempool, *it, true /* bypass_limits */).m_accepted.value()) {",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 8,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "abc6ff1c02eae4da8deab777cff9c85247b99db2",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "abc6ff1\r\n\r\nI don't think that's a good idea to encumber code path like `UpdateMempoolForReorg` with `std::optional`. If this `nullopt` will throw an exception. And we do have the failure/unfinished constructor allowing `m_accepted` to be initialized to nullopt, even if AFAICT such constructor is never called with `finished=bad`for now ? \r\n\r\nI know there is a discussion about `std::optional` usage [here](https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557185885) but could we restrain its usage to only `m_base_fee`/`m_replaced_transaction` ? They would be `nullopt` if `m_accepted=false`.",
    "created_at": "2021-02-02T13:24:27Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568597344",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568597344"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568597344"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568597344/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 384,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568603650",
    "pull_request_review_id": 581277343,
    "id": 568603650,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODYwMzY1MA==",
    "diff_hunk": "@@ -1007,8 +1002,7 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n                 hash.ToString(),\n                 FormatMoney(nModifiedFees - nConflictingFees),\n                 (int)entry->GetTxSize() - (int)nConflictingSize);\n-        if (args.m_replaced_transactions)\n-            args.m_replaced_transactions->push_back(it->GetSharedTx());\n+        args.m_replaced_transactions.emplace_back(it->GetSharedTx());",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 53,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "abc6ff1c02eae4da8deab777cff9c85247b99db2",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "abc6ff1\r\n\r\nNote, you might have a slight performance regression due to `emplace-back` memory allocation if container capacity is too small. Before this change, this potential reallocation wasn't the default.\r\n\r\nI think that's okay `replaced_transactions` was already existent in the most busiest code path `ProcessMessage`. ",
    "created_at": "2021-02-02T13:33:59Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568603650",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568603650"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568603650"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568603650/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1005,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568608455",
    "pull_request_review_id": 581277343,
    "id": 568608455,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODYwODQ1NQ==",
    "diff_hunk": "@@ -181,12 +181,41 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+* When m_accepted = nullopt, the transaction was not fully validated\n+* (may be valid or invalid), e.g. when it is part of a package that\n+* failed validation for an earlier transaction.\n+*/\n+struct MempoolAcceptResult {\n+    // Tri-state\n+    std::optional<bool> m_accepted;\n+    TxValidationState m_state;\n+\n+    // Valid when m_accepted = true\n+    std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n+    std::optional<CAmount> m_base_fees;\n+\n+    /** Constructor for failure or unfinished case */\n+    explicit MempoolAcceptResult(TxValidationState state, bool finished=true) :\n+        m_state(state), m_replaced_transactions(nullopt), m_base_fees(nullopt) {\n+            m_accepted = finished ? std::optional<bool>(false) : nullopt;\n+        }\n+\n+    /** Constructor for success case */\n+    explicit MempoolAcceptResult(TxValidationState state,\n+                                 std::list<CTransactionRef>&& replaced_txns, CAmount fees) :\n+        m_accepted(true), m_state(state),\n+        m_replaced_transactions(std::move(replaced_txns)), m_base_fees(fees) {}\n+};\n+\n+/**\n+ * (Try to) add a transaction to the memory pool.",
    "path": "src/validation.h",
    "position": 68,
    "original_position": 57,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "abc6ff1c02eae4da8deab777cff9c85247b99db2",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "abc6ff1\r\n\r\n\"Evaluate a transaction mempool acceptance. If `test_accept`= false, add the transaction to the mempool\".",
    "created_at": "2021-02-02T13:41:01Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568608455",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568608455"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568608455"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568608455/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 219,
    "original_line": 219,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568609416",
    "pull_request_review_id": 581277343,
    "id": 568609416,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODYwOTQxNg==",
    "diff_hunk": "@@ -181,12 +181,41 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+* When m_accepted = nullopt, the transaction was not fully validated\n+* (may be valid or invalid), e.g. when it is part of a package that\n+* failed validation for an earlier transaction.",
    "path": "src/validation.h",
    "position": null,
    "original_position": 32,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "abc6ff1c02eae4da8deab777cff9c85247b99db2",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "abc6ff1\r\n\r\nSee other comment about `std::optional` usage, but at least indicate what does `m_accept = false` mean.",
    "created_at": "2021-02-02T13:42:16Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568609416",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568609416"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568609416"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568609416/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 190,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568610708",
    "pull_request_review_id": 581277343,
    "id": 568610708,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODYxMDcwOA==",
    "diff_hunk": "@@ -181,12 +181,41 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+* When m_accepted = nullopt, the transaction was not fully validated\n+* (may be valid or invalid), e.g. when it is part of a package that\n+* failed validation for an earlier transaction.\n+*/\n+struct MempoolAcceptResult {\n+    // Tri-state\n+    std::optional<bool> m_accepted;\n+    TxValidationState m_state;\n+\n+    // Valid when m_accepted = true\n+    std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n+    std::optional<CAmount> m_base_fees;",
    "path": "src/validation.h",
    "position": 52,
    "original_position": 41,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "abc6ff1c02eae4da8deab777cff9c85247b99db2",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "abc6ff1\r\n\r\nAs this interface aims to be consumed by higher users, maybe comment those variables, like \"evicted transactions per BIP 125 rules\", \"Raw base fees expressed in satoshis\".\r\n\r\n",
    "created_at": "2021-02-02T13:44:13Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568610708",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568610708"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568610708"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568610708/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 203,
    "original_line": 203,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568616246",
    "pull_request_review_id": 581277343,
    "id": 568616246,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODYxNjI0Ng==",
    "diff_hunk": "@@ -181,12 +181,41 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+* When m_accepted = nullopt, the transaction was not fully validated",
    "path": "src/validation.h",
    "position": null,
    "original_position": 30,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "abc6ff1c02eae4da8deab777cff9c85247b99db2",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "abc6ff1\r\n\r\nI think we should commit to a clearer terminology. Validity is always wholesome, a transaction or package is either valid or not. But validity is function of a mempool acceptance evaluation and this is configurable (`bypass_limit`), stateful (e.g mempool min feerate), depends if the transaction is part of a package, etc.\r\n\r\nIf we follow this line, maybe we should rename `m_accepted` to `m_valid` and have only binary state (true, false). The interface could be extended in the future to indicate it's part of a package, and we may have a TxValidationState for package children to inherit the invalidity (`PACKAGE_INVALID_PARENT`).",
    "created_at": "2021-02-02T13:51:56Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568616246",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568616246"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568616246"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568616246/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 188,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568627847",
    "pull_request_review_id": 581377350,
    "id": 568627847,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODYyNzg0Nw==",
    "diff_hunk": "@@ -1031,46 +1025,51 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, workspace)) return MempoolAcceptResult(args.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(args.m_state);\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(args.m_state);\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        return MempoolAcceptResult(args.m_state, std::move(args.m_replaced_transactions), args.m_fee_out);",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 87,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "abc6ff1c02eae4da8deab777cff9c85247b99db2",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "What do you think of changing `m_accepted` to an enum to encompass states beyond valid/invalid? Something like \r\n\r\n```c\r\nenum class ResultType : uint8_t {\r\n        UNSET, //!> Not fully validated, quit early for whatever reason.\r\n        INVALID, //!> Invalid.\r\n        VALID, //!> Valid.\r\n        VALID_BYPASSED, //!> some kind of limits bypassed\r\n}\r\n```\r\nThis would leave room for bypassing timelocks as well. We probably don't need to include more details than \"valid albeit some rules were bypassed,\" because the caller should already know what args they called ATMP with.",
    "created_at": "2021-02-02T14:07:35Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568627847",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568627847"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568627847"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568627847/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1049,
    "side": "RIGHT",
    "in_reply_to_id": 568568878
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568679552",
    "pull_request_review_id": 581446784,
    "id": 568679552,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODY3OTU1Mg==",
    "diff_hunk": "@@ -946,32 +946,27 @@ static RPCHelpMan testmempoolaccept()\n     result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n     result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n \n-    TxValidationState state;\n-    bool test_accept_res;\n-    CAmount fee{0};\n-    {\n-        LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n-    }\n-\n-    // Check that fee does not exceed maximum fee\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n-        result_0.pushKV(\"allowed\", false);\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        result.push_back(std::move(result_0));\n-        return result;\n-    }\n-    result_0.pushKV(\"allowed\", test_accept_res);\n+    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(mempool, std::move(tx),\n+                                                  false /* bypass_limits */, /* test_accept */ true));\n \n     // Only return the fee and vsize if the transaction would pass ATMP.\n     // These can be used to calculate the feerate.\n-    if (test_accept_res) {\n-        result_0.pushKV(\"vsize\", virtual_size);\n-        UniValue fees(UniValue::VOBJ);\n-        fees.pushKV(\"base\", ValueFromAmount(fee));\n-        result_0.pushKV(\"fees\", fees);\n+    if (accept_result.m_accepted.value()) {\n+        const CAmount fee = accept_result.m_base_fees.value();\n+        // Check that fee does not exceed maximum fee\n+        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n+            result_0.pushKV(\"allowed\", false);\n+            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");",
    "path": "src/rpc/rawtransaction.cpp",
    "position": 36,
    "original_position": 36,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "abc6ff1c02eae4da8deab777cff9c85247b99db2",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I agree \ud83d\ude22 I was a bit naive when I wrote that. But it's not part of this PR, so maybe we can discuss elsewhere",
    "created_at": "2021-02-02T15:11:29Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568679552",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568679552"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568679552"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568679552/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 959,
    "original_line": 959,
    "side": "RIGHT",
    "in_reply_to_id": 568583132
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568697583",
    "pull_request_review_id": 581470788,
    "id": 568697583,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODY5NzU4Mw==",
    "diff_hunk": "@@ -181,12 +181,41 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+* When m_accepted = nullopt, the transaction was not fully validated\n+* (may be valid or invalid), e.g. when it is part of a package that\n+* failed validation for an earlier transaction.\n+*/\n+struct MempoolAcceptResult {\n+    // Tri-state\n+    std::optional<bool> m_accepted;\n+    TxValidationState m_state;\n+\n+    // Valid when m_accepted = true\n+    std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n+    std::optional<CAmount> m_base_fees;",
    "path": "src/validation.h",
    "position": 52,
    "original_position": 41,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "abc6ff1c02eae4da8deab777cff9c85247b99db2",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Added comments",
    "created_at": "2021-02-02T15:33:05Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568697583",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568697583"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568697583"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568697583/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 203,
    "original_line": 203,
    "side": "RIGHT",
    "in_reply_to_id": 568610708
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568697968",
    "pull_request_review_id": 581471344,
    "id": 568697968,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODY5Nzk2OA==",
    "diff_hunk": "@@ -181,12 +181,41 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+* When m_accepted = nullopt, the transaction was not fully validated\n+* (may be valid or invalid), e.g. when it is part of a package that\n+* failed validation for an earlier transaction.\n+*/\n+struct MempoolAcceptResult {\n+    // Tri-state\n+    std::optional<bool> m_accepted;\n+    TxValidationState m_state;\n+\n+    // Valid when m_accepted = true\n+    std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n+    std::optional<CAmount> m_base_fees;\n+\n+    /** Constructor for failure or unfinished case */\n+    explicit MempoolAcceptResult(TxValidationState state, bool finished=true) :\n+        m_state(state), m_replaced_transactions(nullopt), m_base_fees(nullopt) {\n+            m_accepted = finished ? std::optional<bool>(false) : nullopt;\n+        }\n+\n+    /** Constructor for success case */\n+    explicit MempoolAcceptResult(TxValidationState state,\n+                                 std::list<CTransactionRef>&& replaced_txns, CAmount fees) :\n+        m_accepted(true), m_state(state),\n+        m_replaced_transactions(std::move(replaced_txns)), m_base_fees(fees) {}\n+};\n+\n+/**\n+ * (Try to) add a transaction to the memory pool.",
    "path": "src/validation.h",
    "position": 68,
    "original_position": 57,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "abc6ff1c02eae4da8deab777cff9c85247b99db2",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Added!",
    "created_at": "2021-02-02T15:33:37Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568697968",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568697968"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568697968"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568697968/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 219,
    "original_line": 219,
    "side": "RIGHT",
    "in_reply_to_id": 568608455
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568698350",
    "pull_request_review_id": 581471836,
    "id": 568698350,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODY5ODM1MA==",
    "diff_hunk": "@@ -1007,8 +1002,7 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n                 hash.ToString(),\n                 FormatMoney(nModifiedFees - nConflictingFees),\n                 (int)entry->GetTxSize() - (int)nConflictingSize);\n-        if (args.m_replaced_transactions)\n-            args.m_replaced_transactions->push_back(it->GetSharedTx());\n+        args.m_replaced_transactions.emplace_back(it->GetSharedTx());",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 53,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "abc6ff1c02eae4da8deab777cff9c85247b99db2",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "switched it back to `push_back` to adhere to my promise of \"pure refactor\"",
    "created_at": "2021-02-02T15:34:07Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568698350",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568698350"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568698350"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568698350/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1005,
    "side": "RIGHT",
    "in_reply_to_id": 568603650
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568698793",
    "pull_request_review_id": 581472474,
    "id": 568698793,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODY5ODc5Mw==",
    "diff_hunk": "@@ -380,10 +380,8 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     auto it = disconnectpool.queuedTx.get<insertion_order>().rbegin();\n     while (it != disconnectpool.queuedTx.get<insertion_order>().rend()) {\n         // ignore validation errors in resurrected transactions\n-        TxValidationState stateDummy;\n         if (!fAddToMempool || (*it)->IsCoinBase() ||\n-            !AcceptToMemoryPool(mempool, stateDummy, *it,\n-                                nullptr /* plTxnReplaced */, true /* bypass_limits */)) {\n+            !AcceptToMemoryPool(mempool, *it, true /* bypass_limits */).m_accepted.value()) {",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 8,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "abc6ff1c02eae4da8deab777cff9c85247b99db2",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Check now? I think it's better with enum ",
    "created_at": "2021-02-02T15:34:43Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568698793",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568698793"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568698793"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568698793/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 384,
    "side": "RIGHT",
    "in_reply_to_id": 568597344
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569322797",
    "pull_request_review_id": 582245103,
    "id": 569322797,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTMyMjc5Nw==",
    "diff_hunk": "@@ -1031,46 +1025,51 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, workspace)) return MempoolAcceptResult(args.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(args.m_state);\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(args.m_state);\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        return MempoolAcceptResult(args.m_state, std::move(args.m_replaced_transactions), args.m_fee_out);",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 87,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "abc6ff1c02eae4da8deab777cff9c85247b99db2",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "See my other comment but I would keep a binary state for validity. I don't think `TxValidationResult`/`BlockValidationResult` are great examples, it makes it harder to reason on once you multiply states. \r\n\r\nLet's keep this suggestion in mind for now, it's not a must for this PR. We'll see if we need to introduce something like this if we have situation where we have one aware caller and multiple blind consumers.",
    "created_at": "2021-02-03T11:03:06Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569322797",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569322797"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569322797"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569322797/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1049,
    "side": "RIGHT",
    "in_reply_to_id": 568568878
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569324575",
    "pull_request_review_id": 582247391,
    "id": 569324575,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTMyNDU3NQ==",
    "diff_hunk": "@@ -946,32 +946,27 @@ static RPCHelpMan testmempoolaccept()\n     result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n     result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n \n-    TxValidationState state;\n-    bool test_accept_res;\n-    CAmount fee{0};\n-    {\n-        LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n-    }\n-\n-    // Check that fee does not exceed maximum fee\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n-        result_0.pushKV(\"allowed\", false);\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        result.push_back(std::move(result_0));\n-        return result;\n-    }\n-    result_0.pushKV(\"allowed\", test_accept_res);\n+    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(mempool, std::move(tx),\n+                                                  false /* bypass_limits */, /* test_accept */ true));\n \n     // Only return the fee and vsize if the transaction would pass ATMP.\n     // These can be used to calculate the feerate.\n-    if (test_accept_res) {\n-        result_0.pushKV(\"vsize\", virtual_size);\n-        UniValue fees(UniValue::VOBJ);\n-        fees.pushKV(\"base\", ValueFromAmount(fee));\n-        result_0.pushKV(\"fees\", fees);\n+    if (accept_result.m_accepted.value()) {\n+        const CAmount fee = accept_result.m_base_fees.value();\n+        // Check that fee does not exceed maximum fee\n+        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n+            result_0.pushKV(\"allowed\", false);\n+            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");",
    "path": "src/rpc/rawtransaction.cpp",
    "position": 36,
    "original_position": 36,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "abc6ff1c02eae4da8deab777cff9c85247b99db2",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Tracked #21074 ",
    "created_at": "2021-02-03T11:05:51Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569324575",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569324575"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569324575"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569324575/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 959,
    "original_line": 959,
    "side": "RIGHT",
    "in_reply_to_id": 568583132
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569328926",
    "pull_request_review_id": 582252972,
    "id": 569328926,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTMyODkyNg==",
    "diff_hunk": "@@ -1007,8 +1002,7 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n                 hash.ToString(),\n                 FormatMoney(nModifiedFees - nConflictingFees),\n                 (int)entry->GetTxSize() - (int)nConflictingSize);\n-        if (args.m_replaced_transactions)\n-            args.m_replaced_transactions->push_back(it->GetSharedTx());\n+        args.m_replaced_transactions.emplace_back(it->GetSharedTx());",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 53,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "abc6ff1c02eae4da8deab777cff9c85247b99db2",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think switching to `push_back` still do an automatic reallocation of the allocated storage if container capacity is too short. See https://www.cplusplus.com/reference/vector/vector/emplace_back/ and https://www.cplusplus.com/reference/vector/vector/push_back/.\r\n\r\nMy point was underscoring that the allocation was previously conditional of `m_replaced_transaction` pointer being opt-in by ATMP caller. After this change it's not anymore. Again I don't think that matters that most. ",
    "created_at": "2021-02-03T11:12:53Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569328926",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569328926"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569328926"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569328926/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1005,
    "side": "RIGHT",
    "in_reply_to_id": 568603650
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569329362",
    "pull_request_review_id": 582253568,
    "id": 569329362,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTMyOTM2Mg==",
    "diff_hunk": "@@ -181,12 +181,41 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+* When m_accepted = nullopt, the transaction was not fully validated\n+* (may be valid or invalid), e.g. when it is part of a package that\n+* failed validation for an earlier transaction.\n+*/\n+struct MempoolAcceptResult {\n+    // Tri-state\n+    std::optional<bool> m_accepted;\n+    TxValidationState m_state;\n+\n+    // Valid when m_accepted = true\n+    std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n+    std::optional<CAmount> m_base_fees;",
    "path": "src/validation.h",
    "position": 52,
    "original_position": 41,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "abc6ff1c02eae4da8deab777cff9c85247b99db2",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Can you added the unit in comment (satoshi) ? I swear once you start to deal with fee computation you spend your time thinking if you're dealing with apples or oranges :)",
    "created_at": "2021-02-03T11:13:38Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569329362",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569329362"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569329362"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569329362/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 203,
    "original_line": 203,
    "side": "RIGHT",
    "in_reply_to_id": 568610708
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569330388",
    "pull_request_review_id": 582254874,
    "id": 569330388,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTMzMDM4OA==",
    "diff_hunk": "@@ -181,12 +181,41 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+* When m_accepted = nullopt, the transaction was not fully validated\n+* (may be valid or invalid), e.g. when it is part of a package that\n+* failed validation for an earlier transaction.\n+*/\n+struct MempoolAcceptResult {\n+    // Tri-state\n+    std::optional<bool> m_accepted;\n+    TxValidationState m_state;\n+\n+    // Valid when m_accepted = true\n+    std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n+    std::optional<CAmount> m_base_fees;\n+\n+    /** Constructor for failure or unfinished case */\n+    explicit MempoolAcceptResult(TxValidationState state, bool finished=true) :\n+        m_state(state), m_replaced_transactions(nullopt), m_base_fees(nullopt) {\n+            m_accepted = finished ? std::optional<bool>(false) : nullopt;\n+        }\n+\n+    /** Constructor for success case */\n+    explicit MempoolAcceptResult(TxValidationState state,\n+                                 std::list<CTransactionRef>&& replaced_txns, CAmount fees) :\n+        m_accepted(true), m_state(state),\n+        m_replaced_transactions(std::move(replaced_txns)), m_base_fees(fees) {}\n+};\n+\n+/**\n+ * (Try to) add a transaction to the memory pool.",
    "path": "src/validation.h",
    "position": 68,
    "original_position": 57,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "abc6ff1c02eae4da8deab777cff9c85247b99db2",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "To be precise, I think `bypass_limits` also overrides some feerate check (L729 in `src/validation.cpp`).",
    "created_at": "2021-02-03T11:15:18Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569330388",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569330388"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569330388"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569330388/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 219,
    "original_line": 219,
    "side": "RIGHT",
    "in_reply_to_id": 568608455
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569333497",
    "pull_request_review_id": 582258885,
    "id": 569333497,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTMzMzQ5Nw==",
    "diff_hunk": "@@ -380,10 +380,8 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     auto it = disconnectpool.queuedTx.get<insertion_order>().rbegin();\n     while (it != disconnectpool.queuedTx.get<insertion_order>().rend()) {\n         // ignore validation errors in resurrected transactions\n-        TxValidationState stateDummy;\n         if (!fAddToMempool || (*it)->IsCoinBase() ||\n-            !AcceptToMemoryPool(mempool, stateDummy, *it,\n-                                nullptr /* plTxnReplaced */, true /* bypass_limits */)) {\n+            !AcceptToMemoryPool(mempool, *it, true /* bypass_limits */).m_accepted.value()) {",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 8,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "abc6ff1c02eae4da8deab777cff9c85247b99db2",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Do we really need an enum and can't we rely only on a boolean ? Maybe you can point me to a branch how you're using UNFINISHED because we don't use it with this PR ?",
    "created_at": "2021-02-03T11:20:35Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569333497",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569333497"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569333497"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569333497/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 384,
    "side": "RIGHT",
    "in_reply_to_id": 568597344
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569667269",
    "pull_request_review_id": 582700613,
    "id": 569667269,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTY2NzI2OQ==",
    "diff_hunk": "@@ -380,10 +380,8 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     auto it = disconnectpool.queuedTx.get<insertion_order>().rbegin();\n     while (it != disconnectpool.queuedTx.get<insertion_order>().rend()) {\n         // ignore validation errors in resurrected transactions\n-        TxValidationState stateDummy;\n         if (!fAddToMempool || (*it)->IsCoinBase() ||\n-            !AcceptToMemoryPool(mempool, stateDummy, *it,\n-                                nullptr /* plTxnReplaced */, true /* bypass_limits */)) {\n+            !AcceptToMemoryPool(mempool, *it, true /* bypass_limits */).m_accepted.value()) {",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 8,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "abc6ff1c02eae4da8deab777cff9c85247b99db2",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Haven't published the branch yet but the idea is to return a `std::vector<MempoolAcceptResult>` from `ProcessNewPackage`, quit early when a tx fails, and set the not-fully-validated txns in the package to `UNFINISHED`. See [comment](https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567952639)?",
    "created_at": "2021-02-03T19:00:39Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569667269",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569667269"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569667269"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569667269/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 384,
    "side": "RIGHT",
    "in_reply_to_id": 568597344
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570234607",
    "pull_request_review_id": 583405851,
    "id": 570234607,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDIzNDYwNw==",
    "diff_hunk": "@@ -380,10 +380,8 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     auto it = disconnectpool.queuedTx.get<insertion_order>().rbegin();\n     while (it != disconnectpool.queuedTx.get<insertion_order>().rend()) {\n         // ignore validation errors in resurrected transactions\n-        TxValidationState stateDummy;\n         if (!fAddToMempool || (*it)->IsCoinBase() ||\n-            !AcceptToMemoryPool(mempool, stateDummy, *it,\n-                                nullptr /* plTxnReplaced */, true /* bypass_limits */)) {\n+            !AcceptToMemoryPool(mempool, *it, true /* bypass_limits */).m_accepted.value()) {",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 8,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "abc6ff1c02eae4da8deab777cff9c85247b99db2",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think `UNFINISHED`/not_fully_validated to mark package partial failure doesn't bring further value compared to unvalid. Do you plan to consume this `UNFINISHED` in a special way ? Otherwise we can just extend `TxValidationResult` with a `PACKAGE_PARENT_FAILED` instead of yet-another-state variable.",
    "created_at": "2021-02-04T13:47:02Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r570234607",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570234607"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r570234607"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570234607/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 384,
    "side": "RIGHT",
    "in_reply_to_id": 568597344
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571286970",
    "pull_request_review_id": 584753320,
    "id": 571286970,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTI4Njk3MA==",
    "diff_hunk": "@@ -380,10 +380,8 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     auto it = disconnectpool.queuedTx.get<insertion_order>().rbegin();\n     while (it != disconnectpool.queuedTx.get<insertion_order>().rend()) {\n         // ignore validation errors in resurrected transactions\n-        TxValidationState stateDummy;\n         if (!fAddToMempool || (*it)->IsCoinBase() ||\n-            !AcceptToMemoryPool(mempool, stateDummy, *it,\n-                                nullptr /* plTxnReplaced */, true /* bypass_limits */)) {\n+            !AcceptToMemoryPool(mempool, *it, true /* bypass_limits */).m_accepted.value()) {",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 8,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "abc6ff1c02eae4da8deab777cff9c85247b99db2",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think in the future with Package Relay, we may want to punish nodes differently for invalidity in packages vs invalidity in transactions, and maybe cache failed transactions differently. Obviously this isn't set in stone, but I think it's better to not put package-specific validation info in `TxValidationState` - what do you think?",
    "created_at": "2021-02-05T22:33:15Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r571286970",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571286970"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r571286970"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571286970/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 384,
    "side": "RIGHT",
    "in_reply_to_id": 568597344
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571962452",
    "pull_request_review_id": 585390485,
    "id": 571962452,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTk2MjQ1Mg==",
    "diff_hunk": "@@ -946,44 +946,35 @@ static RPCHelpMan testmempoolaccept()\n     result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n     result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n \n-    TxValidationState state;\n-    bool test_accept_res;\n-    CAmount fee{0};\n-    {\n-        LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n-    }\n-\n-    // Check that fee does not exceed maximum fee\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n-        result_0.pushKV(\"allowed\", false);\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        result.push_back(std::move(result_0));\n-        return result;\n-    }\n-    result_0.pushKV(\"allowed\", test_accept_res);\n+    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(mempool, std::move(tx),\n+                                                  false /* bypass_limits */, /* test_accept */ true));\n \n     // Only return the fee and vsize if the transaction would pass ATMP.\n     // These can be used to calculate the feerate.\n-    if (test_accept_res) {\n-        result_0.pushKV(\"vsize\", virtual_size);\n-        UniValue fees(UniValue::VOBJ);\n-        fees.pushKV(\"base\", ValueFromAmount(fee));\n-        result_0.pushKV(\"fees\", fees);\n+    if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n+        const CAmount fee = accept_result.m_base_fees.value();\n+        // Check that fee does not exceed maximum fee\n+        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n+            result_0.pushKV(\"allowed\", false);\n+            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n+        } else {\n+            result_0.pushKV(\"allowed\", true);\n+            result_0.pushKV(\"vsize\", virtual_size);\n+            UniValue fees(UniValue::VOBJ);\n+            fees.pushKV(\"base\", ValueFromAmount(fee));\n+            result_0.pushKV(\"fees\", fees);\n+        }\n+        result.push_back(std::move(result_0));",
    "path": "src/rpc/rawtransaction.cpp",
    "position": 44,
    "original_position": 44,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "bc992b7a394629137929647998149f18fea5ab29",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`result.push_back(std::move(result_0));` is the last line in both branches of the if/else. Would it be better to leave it outside the if/else?",
    "created_at": "2021-02-08T11:11:26Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r571962452",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571962452"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r571962452"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571962452/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 967,
    "original_line": 967,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571966842",
    "pull_request_review_id": 585396009,
    "id": 571966842,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTk2Njg0Mg==",
    "diff_hunk": "@@ -380,10 +380,8 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     auto it = disconnectpool.queuedTx.get<insertion_order>().rbegin();\n     while (it != disconnectpool.queuedTx.get<insertion_order>().rend()) {\n         // ignore validation errors in resurrected transactions\n-        TxValidationState stateDummy;\n         if (!fAddToMempool || (*it)->IsCoinBase() ||\n-            !AcceptToMemoryPool(mempool, stateDummy, *it,\n-                                nullptr /* plTxnReplaced */, true /* bypass_limits */)) {\n+            !AcceptToMemoryPool(mempool, *it, true /* bypass_limits */).m_accepted.value()) {",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 8,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "abc6ff1c02eae4da8deab777cff9c85247b99db2",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't see a straightforward reason to punish faulty pacakge-relay peers from regular tx-relay ones, at least at the mempool level. If we don't have a motivation for `UNFINISHED`, let's remove it for now and defer its introduction when we actually hit the case ? Would be easier to argue at that point.",
    "created_at": "2021-02-08T11:18:17Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r571966842",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571966842"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r571966842"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571966842/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 384,
    "side": "RIGHT",
    "in_reply_to_id": 568597344
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571973983",
    "pull_request_review_id": 585390485,
    "id": 571973983,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTk3Mzk4Mw==",
    "diff_hunk": "@@ -688,10 +686,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         return false; // state filled in by CheckTxInputs\n     }\n \n-    // If fee_out is passed, return the fee to the caller\n-    if (args.m_fee_out) {\n-        *args.m_fee_out = nFees;\n-    }\n+    ws.m_base_fees = nFees;",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 97,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "bc992b7a394629137929647998149f18fea5ab29",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Do we even need the local `nFees` variable, now that `ws.m_base_fees` is always set? Can you just pass a reference to `ws.m_base_fees` to `CheckInputs()`?",
    "created_at": "2021-02-08T11:29:50Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r571973983",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571973983"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r571973983"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571973983/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 689,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571975710",
    "pull_request_review_id": 585390485,
    "id": 571975710,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTk3NTcxMA==",
    "diff_hunk": "@@ -181,12 +181,47 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+*/\n+struct MempoolAcceptResult {\n+    /** Used to indicate the results of mempool validation,\n+    * including the possibility of unfinished validation.\n+    */\n+    enum class ResultType : uint8_t {\n+        UNFINISHED, //!> Not fully validated.\n+        VALID, //!> Fully validated, valid.\n+        INVALID, //!> Invalid.\n+    };\n+    ResultType m_result_type;\n+    TxValidationState m_state;\n+\n+    // The following fields are only present when m_result_type = ResultType::VALID\n+    /** Mempool transactions replaced by the tx per BIP 125 rules. */\n+    std::optional<std::list<CTransactionRef>> m_replaced_transactions;",
    "path": "src/validation.h",
    "position": 50,
    "original_position": 43,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "bc992b7a394629137929647998149f18fea5ab29",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't think the `std::optional` wrapper is adding anything here. Essentially all it does is add a boolean where false means the value is undefined and true means that it's defined. You're already saying that these fields are only defined if `m_result_type = ResultType::VALID`, so unless you think there's some reason to add this for safety or clarity, I wouldn't bother.",
    "created_at": "2021-02-08T11:32:35Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r571975710",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571975710"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r571975710"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571975710/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 201,
    "original_line": 201,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571980352",
    "pull_request_review_id": 585390485,
    "id": 571980352,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTk4MDM1Mg==",
    "diff_hunk": "@@ -181,12 +181,47 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+*/\n+struct MempoolAcceptResult {\n+    /** Used to indicate the results of mempool validation,\n+    * including the possibility of unfinished validation.\n+    */\n+    enum class ResultType : uint8_t {\n+        UNFINISHED, //!> Not fully validated.",
    "path": "src/validation.h",
    "position": null,
    "original_position": 34,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "bc992b7a394629137929647998149f18fea5ab29",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The tristate here could be confusing for reviewers without the context of package acceptance. Perhaps this comment could be expanded a little. Something like:\r\n\r\n```suggestion\r\n        UNFINISHED, //!> Not fully validated. Only used for package mempool acceptance where an individual tx may not be fully validated if the package fails.\r\n```\r\n\r\nAlso consider adding an out-assertion to `AcceptToMemoryPool()`:\r\n\r\n```\r\nMempoolAcceptResult AcceptToMemoryPool(CTxMemPool& pool, const CTransactionRef &tx, bool bypass_limits, bool test_accept)\r\n{\r\n    auto res = AcceptToMemoryPoolWithTime(Params(), pool, tx, GetTime(), bypass_limits, test_accept);\r\n    // For single tx acceptance, validation must not be partial.\r\n    assert(res.m_result_type == MempoolAcceptResult::ResultType::VALID ||\r\n           res.m_result_type == MempoolAcceptResult::ResultType::INVALID);  \r\n    return res;\r\n\r\n```",
    "created_at": "2021-02-08T11:40:27Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r571980352",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571980352"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r571980352"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571980352/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 192,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571987374",
    "pull_request_review_id": 585390485,
    "id": 571987374,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTk4NzM3NA==",
    "diff_hunk": "@@ -181,12 +181,47 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+*/\n+struct MempoolAcceptResult {\n+    /** Used to indicate the results of mempool validation,\n+    * including the possibility of unfinished validation.\n+    */\n+    enum class ResultType : uint8_t {\n+        UNFINISHED, //!> Not fully validated.\n+        VALID, //!> Fully validated, valid.\n+        INVALID, //!> Invalid.\n+    };\n+    ResultType m_result_type;\n+    TxValidationState m_state;\n+\n+    // The following fields are only present when m_result_type = ResultType::VALID\n+    /** Mempool transactions replaced by the tx per BIP 125 rules. */\n+    std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n+    /** Raw base fees. */\n+    std::optional<CAmount> m_base_fees;\n+\n+    /** Constructor for failure or unfinished case */\n+    explicit MempoolAcceptResult(TxValidationState state, bool finished=true) :\n+        m_state(state), m_replaced_transactions(nullopt), m_base_fees(nullopt) {\n+            m_result_type = finished ? ResultType::INVALID : ResultType::UNFINISHED;",
    "path": "src/validation.h",
    "position": null,
    "original_position": 50,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "bc992b7a394629137929647998149f18fea5ab29",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You can set m_result_type in the initializer list:\r\n\r\n```suggestion\r\n        m_result_type(finished ? ResultType::INVALID : ResultType::UNFINISHED),\r\n        m_state(state), m_replaced_transactions(nullopt), m_base_fees(nullopt) {}\r\n```",
    "created_at": "2021-02-08T11:53:05Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r571987374",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571987374"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r571987374"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571987374/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 207,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 208,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572101522",
    "pull_request_review_id": 585571203,
    "id": 572101522,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjEwMTUyMg==",
    "diff_hunk": "@@ -181,12 +181,47 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+*/\n+struct MempoolAcceptResult {\n+    /** Used to indicate the results of mempool validation,\n+    * including the possibility of unfinished validation.\n+    */\n+    enum class ResultType : uint8_t {\n+        UNFINISHED, //!> Not fully validated.\n+        VALID, //!> Fully validated, valid.\n+        INVALID, //!> Invalid.\n+    };\n+    ResultType m_result_type;\n+    TxValidationState m_state;\n+\n+    // The following fields are only present when m_result_type = ResultType::VALID\n+    /** Mempool transactions replaced by the tx per BIP 125 rules. */\n+    std::optional<std::list<CTransactionRef>> m_replaced_transactions;",
    "path": "src/validation.h",
    "position": 50,
    "original_position": 43,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "bc992b7a394629137929647998149f18fea5ab29",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think there should be a distinction between \"tx didn't replace any txns\" and \"tx was invalid and thus couldn't replace any txns,\" and it should be an error to try to look at `m_replaced_transactions` if the tx was invalid.",
    "created_at": "2021-02-08T14:44:45Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572101522",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572101522"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572101522"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572101522/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 201,
    "original_line": 201,
    "side": "RIGHT",
    "in_reply_to_id": 571975710
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572135029",
    "pull_request_review_id": 585616673,
    "id": 572135029,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjEzNTAyOQ==",
    "diff_hunk": "@@ -181,12 +181,47 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+*/\n+struct MempoolAcceptResult {\n+    /** Used to indicate the results of mempool validation,\n+    * including the possibility of unfinished validation.\n+    */\n+    enum class ResultType : uint8_t {\n+        UNFINISHED, //!> Not fully validated.",
    "path": "src/validation.h",
    "position": null,
    "original_position": 34,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "bc992b7a394629137929647998149f18fea5ab29",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Resolved by removing `UNFINISHED`, I will plan to add this assertion and docs whenever we have more than 2 result types \ud83d\udc4d ",
    "created_at": "2021-02-08T15:26:05Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572135029",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572135029"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572135029"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572135029/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 192,
    "side": "RIGHT",
    "in_reply_to_id": 571980352
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572135198",
    "pull_request_review_id": 585616874,
    "id": 572135198,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjEzNTE5OA==",
    "diff_hunk": "@@ -688,10 +686,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         return false; // state filled in by CheckTxInputs\n     }\n \n-    // If fee_out is passed, return the fee to the caller\n-    if (args.m_fee_out) {\n-        *args.m_fee_out = nFees;\n-    }\n+    ws.m_base_fees = nFees;",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 97,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "bc992b7a394629137929647998149f18fea5ab29",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "True, done",
    "created_at": "2021-02-08T15:26:17Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572135198",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572135198"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572135198"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572135198/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 689,
    "side": "RIGHT",
    "in_reply_to_id": 571973983
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572135768",
    "pull_request_review_id": 585617668,
    "id": 572135768,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjEzNTc2OA==",
    "diff_hunk": "@@ -181,12 +181,47 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+*/\n+struct MempoolAcceptResult {\n+    /** Used to indicate the results of mempool validation,\n+    * including the possibility of unfinished validation.\n+    */\n+    enum class ResultType : uint8_t {\n+        UNFINISHED, //!> Not fully validated.\n+        VALID, //!> Fully validated, valid.\n+        INVALID, //!> Invalid.\n+    };\n+    ResultType m_result_type;\n+    TxValidationState m_state;\n+\n+    // The following fields are only present when m_result_type = ResultType::VALID\n+    /** Mempool transactions replaced by the tx per BIP 125 rules. */\n+    std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n+    /** Raw base fees. */\n+    std::optional<CAmount> m_base_fees;\n+\n+    /** Constructor for failure or unfinished case */\n+    explicit MempoolAcceptResult(TxValidationState state, bool finished=true) :\n+        m_state(state), m_replaced_transactions(nullopt), m_base_fees(nullopt) {\n+            m_result_type = finished ? ResultType::INVALID : ResultType::UNFINISHED;",
    "path": "src/validation.h",
    "position": null,
    "original_position": 50,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "bc992b7a394629137929647998149f18fea5ab29",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "(Will do this \ud83d\udc40 )",
    "created_at": "2021-02-08T15:26:59Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572135768",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572135768"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572135768"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572135768/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 207,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 208,
    "side": "RIGHT",
    "in_reply_to_id": 571987374
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572232432",
    "pull_request_review_id": 585746528,
    "id": 572232432,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjIzMjQzMg==",
    "diff_hunk": "@@ -946,44 +946,35 @@ static RPCHelpMan testmempoolaccept()\n     result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n     result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n \n-    TxValidationState state;\n-    bool test_accept_res;\n-    CAmount fee{0};\n-    {\n-        LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n-    }\n-\n-    // Check that fee does not exceed maximum fee\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n-        result_0.pushKV(\"allowed\", false);\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        result.push_back(std::move(result_0));\n-        return result;\n-    }\n-    result_0.pushKV(\"allowed\", test_accept_res);\n+    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(mempool, std::move(tx),\n+                                                  false /* bypass_limits */, /* test_accept */ true));\n \n     // Only return the fee and vsize if the transaction would pass ATMP.\n     // These can be used to calculate the feerate.\n-    if (test_accept_res) {\n-        result_0.pushKV(\"vsize\", virtual_size);\n-        UniValue fees(UniValue::VOBJ);\n-        fees.pushKV(\"base\", ValueFromAmount(fee));\n-        result_0.pushKV(\"fees\", fees);\n+    if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n+        const CAmount fee = accept_result.m_base_fees.value();\n+        // Check that fee does not exceed maximum fee\n+        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n+            result_0.pushKV(\"allowed\", false);\n+            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n+        } else {\n+            result_0.pushKV(\"allowed\", true);\n+            result_0.pushKV(\"vsize\", virtual_size);\n+            UniValue fees(UniValue::VOBJ);\n+            fees.pushKV(\"base\", ValueFromAmount(fee));\n+            result_0.pushKV(\"fees\", fees);\n+        }\n+        result.push_back(std::move(result_0));",
    "path": "src/rpc/rawtransaction.cpp",
    "position": 44,
    "original_position": 44,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "bc992b7a394629137929647998149f18fea5ab29",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I guess this is because it's better to structure like this for package acceptance.",
    "created_at": "2021-02-08T17:29:20Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572232432",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572232432"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572232432"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572232432/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 967,
    "original_line": 967,
    "side": "RIGHT",
    "in_reply_to_id": 571962452
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572232588",
    "pull_request_review_id": 585746715,
    "id": 572232588,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjIzMjU4OA==",
    "diff_hunk": "@@ -181,12 +181,47 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+*/\n+struct MempoolAcceptResult {\n+    /** Used to indicate the results of mempool validation,\n+    * including the possibility of unfinished validation.\n+    */\n+    enum class ResultType : uint8_t {\n+        UNFINISHED, //!> Not fully validated.\n+        VALID, //!> Fully validated, valid.\n+        INVALID, //!> Invalid.\n+    };\n+    ResultType m_result_type;\n+    TxValidationState m_state;\n+\n+    // The following fields are only present when m_result_type = ResultType::VALID\n+    /** Mempool transactions replaced by the tx per BIP 125 rules. */\n+    std::optional<std::list<CTransactionRef>> m_replaced_transactions;",
    "path": "src/validation.h",
    "position": 50,
    "original_position": 43,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "bc992b7a394629137929647998149f18fea5ab29",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "ok",
    "created_at": "2021-02-08T17:29:31Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572232588",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572232588"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572232588"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572232588/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 201,
    "original_line": 201,
    "side": "RIGHT",
    "in_reply_to_id": 571975710
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572235697",
    "pull_request_review_id": 585750633,
    "id": 572235697,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjIzNTY5Nw==",
    "diff_hunk": "@@ -946,44 +946,35 @@ static RPCHelpMan testmempoolaccept()\n     result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n     result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n \n-    TxValidationState state;\n-    bool test_accept_res;\n-    CAmount fee{0};\n-    {\n-        LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n-    }\n-\n-    // Check that fee does not exceed maximum fee\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n-        result_0.pushKV(\"allowed\", false);\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        result.push_back(std::move(result_0));\n-        return result;\n-    }\n-    result_0.pushKV(\"allowed\", test_accept_res);\n+    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(mempool, std::move(tx),\n+                                                  false /* bypass_limits */, /* test_accept */ true));\n \n     // Only return the fee and vsize if the transaction would pass ATMP.\n     // These can be used to calculate the feerate.\n-    if (test_accept_res) {\n-        result_0.pushKV(\"vsize\", virtual_size);\n-        UniValue fees(UniValue::VOBJ);\n-        fees.pushKV(\"base\", ValueFromAmount(fee));\n-        result_0.pushKV(\"fees\", fees);\n+    if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n+        const CAmount fee = accept_result.m_base_fees.value();\n+        // Check that fee does not exceed maximum fee\n+        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n+            result_0.pushKV(\"allowed\", false);\n+            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n+        } else {\n+            result_0.pushKV(\"allowed\", true);\n+            result_0.pushKV(\"vsize\", virtual_size);\n+            UniValue fees(UniValue::VOBJ);\n+            fees.pushKV(\"base\", ValueFromAmount(fee));\n+            result_0.pushKV(\"fees\", fees);\n+        }\n+        result.push_back(std::move(result_0));",
    "path": "src/rpc/rawtransaction.cpp",
    "position": 44,
    "original_position": 44,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "bc992b7a394629137929647998149f18fea5ab29",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It makes more sense with the package all valid / 1 invalid tx branches, but not as much here. I suppose leaving it like this reduces the diff for later",
    "created_at": "2021-02-08T17:33:36Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572235697",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572235697"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572235697"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572235697/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 967,
    "original_line": 967,
    "side": "RIGHT",
    "in_reply_to_id": 571962452
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572235986",
    "pull_request_review_id": 585751055,
    "id": 572235986,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjIzNTk4Ng==",
    "diff_hunk": "@@ -181,12 +181,41 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+* When m_accepted = nullopt, the transaction was not fully validated\n+* (may be valid or invalid), e.g. when it is part of a package that\n+* failed validation for an earlier transaction.\n+*/\n+struct MempoolAcceptResult {\n+    // Tri-state\n+    std::optional<bool> m_accepted;\n+    TxValidationState m_state;\n+\n+    // Valid when m_accepted = true\n+    std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n+    std::optional<CAmount> m_base_fees;\n+\n+    /** Constructor for failure or unfinished case */\n+    explicit MempoolAcceptResult(TxValidationState state, bool finished=true) :\n+        m_state(state), m_replaced_transactions(nullopt), m_base_fees(nullopt) {\n+            m_accepted = finished ? std::optional<bool>(false) : nullopt;\n+        }\n+\n+    /** Constructor for success case */\n+    explicit MempoolAcceptResult(TxValidationState state,\n+                                 std::list<CTransactionRef>&& replaced_txns, CAmount fees) :\n+        m_accepted(true), m_state(state),\n+        m_replaced_transactions(std::move(replaced_txns)), m_base_fees(fees) {}\n+};\n+\n+/**\n+ * (Try to) add a transaction to the memory pool.",
    "path": "src/validation.h",
    "position": 68,
    "original_position": 57,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "abc6ff1c02eae4da8deab777cff9c85247b99db2",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Addressed",
    "created_at": "2021-02-08T17:34:04Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572235986",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572235986"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572235986"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572235986/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 219,
    "original_line": 219,
    "side": "RIGHT",
    "in_reply_to_id": 568608455
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572721171",
    "pull_request_review_id": 586336150,
    "id": 572721171,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjcyMTE3MQ==",
    "diff_hunk": "@@ -181,12 +181,45 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+*/\n+struct MempoolAcceptResult {\n+    /** Used to indicate the results of mempool validation,\n+    * including the possibility of unfinished validation.\n+    */\n+    enum class ResultType : uint8_t {\n+        VALID, //!> Fully validated, valid.\n+        INVALID, //!> Invalid.\n+    };\n+    ResultType m_result_type;\n+    TxValidationState m_state;\n+\n+    // The following fields are only present when m_result_type = ResultType::VALID\n+    /** Mempool transactions replaced by the tx per BIP 125 rules. */\n+    std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n+    /** Raw base fees. */\n+    std::optional<CAmount> m_base_fees;\n+\n+    /** Constructor for failure or unfinished case */\n+    explicit MempoolAcceptResult(TxValidationState state) :\n+        m_result_type(ResultType::INVALID),\n+        m_state(state), m_replaced_transactions(nullopt), m_base_fees(nullopt) {}\n+\n+    /** Constructor for success case */\n+    explicit MempoolAcceptResult(TxValidationState state,\n+                                 std::list<CTransactionRef>&& replaced_txns, CAmount fees) :\n+        m_result_type(ResultType::VALID), m_state(state),",
    "path": "src/validation.h",
    "position": null,
    "original_position": 54,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "1407daff4ac47fff78e4ecc3214ea364e84fe6ea",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "What is the point of setting the state when the default constructed one is already valid? It seems like a footgun to allow the caller to pass an invalid state here. At least, it should `ASSUME(state.IsValid());`.\r\n\r\nAlso, clang-format will like you more when you put the `:` in the next line:\r\n\r\n```\r\n    : m_result_type{...",
    "created_at": "2021-02-09T09:25:47Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572721171",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572721171"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572721171"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572721171/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 212,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572722320",
    "pull_request_review_id": 586336150,
    "id": 572722320,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjcyMjMyMA==",
    "diff_hunk": "@@ -181,12 +181,45 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+*/\n+struct MempoolAcceptResult {\n+    /** Used to indicate the results of mempool validation,\n+    * including the possibility of unfinished validation.\n+    */\n+    enum class ResultType : uint8_t {",
    "path": "src/validation.h",
    "position": null,
    "original_position": 33,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "1407daff4ac47fff78e4ecc3214ea364e84fe6ea",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: If ResultType is never serialized or used as an enum flag, you don't need to specify the underlying type. And I think the compiler will fill this to at least 32 bits inside the struct anyway, so it won't give you any space savings either.",
    "created_at": "2021-02-09T09:27:19Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572722320",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572722320"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572722320"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572722320/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 191,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572723179",
    "pull_request_review_id": 586336150,
    "id": 572723179,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjcyMzE3OQ==",
    "diff_hunk": "@@ -1031,46 +1025,51 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, workspace)) return MempoolAcceptResult(args.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(args.m_state);\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(args.m_state);\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        return MempoolAcceptResult(args.m_state, std::move(args.m_replaced_transactions), args.m_fee_out);\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, workspace)) return MempoolAcceptResult(args.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    return MempoolAcceptResult(args.m_state, std::move(args.m_replaced_transactions), args.m_fee_out);\n }\n \n } // anon namespace\n \n /** (try to) add transaction to memory pool with a specified acceptance time **/\n-static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static MempoolAcceptResult AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool,\n+                                                      const CTransactionRef &tx, int64_t nAcceptTime,\n+                                                      bool bypass_limits, bool test_accept)\n+                                                      EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n+    TxValidationState state;\n     std::vector<COutPoint> coins_to_uncache;\n-    MemPoolAccept::ATMPArgs args { chainparams, state, nAcceptTime, plTxnReplaced, bypass_limits, coins_to_uncache, test_accept, fee_out };\n-    bool res = MemPoolAccept(pool).AcceptSingleTransaction(tx, args);\n-    if (!res) {\n+    MemPoolAccept::ATMPArgs args { chainparams, state, nAcceptTime, {}, bypass_limits, coins_to_uncache, test_accept, {} };",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 115,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "1407daff4ac47fff78e4ecc3214ea364e84fe6ea",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The two `{}`, as well as `state` aren't args, but workspace variables. Is there any reason to not put them in the workspace?",
    "created_at": "2021-02-09T09:28:25Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572723179",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572723179"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572723179"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572723179/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1069,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572728783",
    "pull_request_review_id": 586336150,
    "id": 572728783,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjcyODc4Mw==",
    "diff_hunk": "@@ -489,14 +486,17 @@ class MemPoolAccept\n         CTxMemPool::setEntries m_all_conflicting;\n         CTxMemPool::setEntries m_ancestors;\n         std::unique_ptr<CTxMemPoolEntry> m_entry;\n+        std::list<CTransactionRef> m_replaced_transactions;\n \n         bool m_replacement_transaction;\n+        CAmount m_fee_out;",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 25,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "64fb76693899ab77e56d56cb83c9c261f76f6ea5",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This should say m_base_fees\r\n\r\n\r\n```\r\nvalidation.cpp:684:103: error: no member named 'm_base_fees' in '(anonymous namespace)::MemPoolAccept::Workspace'\r\n    if (!Consensus::CheckTxInputs(tx, state, m_view, g_chainman.m_blockman.GetSpendHeight(m_view), ws.m_base_fees)) {\r\n                                                                                                   ~~ ^\r\nvalidation.cpp:702:24: error: no member named 'm_base_fees' in '(anonymous namespace)::MemPoolAccept::Workspace'\r\n    nModifiedFees = ws.m_base_fees;\r\n                    ~~ ^\r\nvalidation.cpp:716:45: error: no member named 'm_base_fees' in '(anonymous namespace)::MemPoolAccept::Workspace'\r\n    entry.reset(new CTxMemPoolEntry(ptx, ws.m_base_fees, nAcceptTime, ::ChainActive().Height(),\r\n                                         ~~ ^\r\n3 errors generated.\r\n",
    "created_at": "2021-02-09T09:36:08Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572728783",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572728783"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572728783"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572728783/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 492,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572730284",
    "pull_request_review_id": 586347785,
    "id": 572730284,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjczMDI4NA==",
    "diff_hunk": "@@ -1031,46 +1025,51 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, workspace)) return MempoolAcceptResult(args.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(args.m_state);\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(args.m_state);\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        return MempoolAcceptResult(args.m_state, std::move(args.m_replaced_transactions), args.m_fee_out);\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, workspace)) return MempoolAcceptResult(args.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    return MempoolAcceptResult(args.m_state, std::move(args.m_replaced_transactions), args.m_fee_out);\n }\n \n } // anon namespace\n \n /** (try to) add transaction to memory pool with a specified acceptance time **/\n-static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static MempoolAcceptResult AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool,\n+                                                      const CTransactionRef &tx, int64_t nAcceptTime,\n+                                                      bool bypass_limits, bool test_accept)\n+                                                      EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n+    TxValidationState state;\n     std::vector<COutPoint> coins_to_uncache;\n-    MemPoolAccept::ATMPArgs args { chainparams, state, nAcceptTime, plTxnReplaced, bypass_limits, coins_to_uncache, test_accept, fee_out };\n-    bool res = MemPoolAccept(pool).AcceptSingleTransaction(tx, args);\n-    if (!res) {\n+    MemPoolAccept::ATMPArgs args { chainparams, state, nAcceptTime, {}, bypass_limits, coins_to_uncache, test_accept, {} };",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 115,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "1407daff4ac47fff78e4ecc3214ea364e84fe6ea",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ok, I see this is fixed in the next commit",
    "created_at": "2021-02-09T09:38:07Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572730284",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572730284"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572730284"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572730284/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1069,
    "side": "RIGHT",
    "in_reply_to_id": 572723179
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572954305",
    "pull_request_review_id": 586635946,
    "id": 572954305,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjk1NDMwNQ==",
    "diff_hunk": "@@ -181,12 +181,45 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+*/\n+struct MempoolAcceptResult {\n+    /** Used to indicate the results of mempool validation,\n+    * including the possibility of unfinished validation.\n+    */\n+    enum class ResultType : uint8_t {\n+        VALID, //!> Fully validated, valid.\n+        INVALID, //!> Invalid.\n+    };\n+    ResultType m_result_type;\n+    TxValidationState m_state;\n+\n+    // The following fields are only present when m_result_type = ResultType::VALID\n+    /** Mempool transactions replaced by the tx per BIP 125 rules. */\n+    std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n+    /** Raw base fees. */\n+    std::optional<CAmount> m_base_fees;\n+\n+    /** Constructor for failure or unfinished case */\n+    explicit MempoolAcceptResult(TxValidationState state) :\n+        m_result_type(ResultType::INVALID),\n+        m_state(state), m_replaced_transactions(nullopt), m_base_fees(nullopt) {}\n+\n+    /** Constructor for success case */\n+    explicit MempoolAcceptResult(TxValidationState state,\n+                                 std::list<CTransactionRef>&& replaced_txns, CAmount fees) :\n+        m_result_type(ResultType::VALID), m_state(state),",
    "path": "src/validation.h",
    "position": null,
    "original_position": 54,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "1407daff4ac47fff78e4ecc3214ea364e84fe6ea",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You're right, there's no point in passing the state when it's successful",
    "created_at": "2021-02-09T14:56:39Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572954305",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572954305"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572954305"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572954305/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 212,
    "side": "RIGHT",
    "in_reply_to_id": 572721171
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572963483",
    "pull_request_review_id": 586647516,
    "id": 572963483,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjk2MzQ4Mw==",
    "diff_hunk": "@@ -489,14 +486,17 @@ class MemPoolAccept\n         CTxMemPool::setEntries m_all_conflicting;\n         CTxMemPool::setEntries m_ancestors;\n         std::unique_ptr<CTxMemPoolEntry> m_entry;\n+        std::list<CTransactionRef> m_replaced_transactions;\n \n         bool m_replacement_transaction;\n+        CAmount m_fee_out;",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 25,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "64fb76693899ab77e56d56cb83c9c261f76f6ea5",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Agh \ud83e\udd26 bad rebase. ",
    "created_at": "2021-02-09T15:06:24Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572963483",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572963483"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r572963483"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572963483/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 492,
    "side": "RIGHT",
    "in_reply_to_id": 572728783
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573659273",
    "pull_request_review_id": 587516927,
    "id": 573659273,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzY1OTI3Mw==",
    "diff_hunk": "@@ -181,12 +182,46 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+*/\n+struct MempoolAcceptResult {\n+    /** Used to indicate the results of mempool validation,\n+    * including the possibility of unfinished validation.\n+    */\n+    enum class ResultType {\n+        VALID, //!> Fully validated, valid.\n+        INVALID, //!> Invalid.\n+    };\n+    ResultType m_result_type;",
    "path": "src/validation.h",
    "position": 45,
    "original_position": 45,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: Would be nice if this was const, so that compilation fails instead of getting a valgrind error on runtime if this is unset.",
    "created_at": "2021-02-10T11:39:33Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r573659273",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573659273"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r573659273"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573659273/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 196,
    "original_line": 196,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573659423",
    "pull_request_review_id": 587516927,
    "id": 573659423,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzY1OTQyMw==",
    "diff_hunk": "@@ -181,12 +182,46 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+*/\n+struct MempoolAcceptResult {\n+    /** Used to indicate the results of mempool validation,\n+    * including the possibility of unfinished validation.\n+    */\n+    enum class ResultType {\n+        VALID, //!> Fully validated, valid.\n+        INVALID, //!> Invalid.\n+    };\n+    ResultType m_result_type;\n+    TxValidationState m_state;",
    "path": "src/validation.h",
    "position": 46,
    "original_position": 46,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "same for all other members?",
    "created_at": "2021-02-10T11:39:49Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r573659423",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573659423"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r573659423"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573659423/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 197,
    "original_line": 197,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573659801",
    "pull_request_review_id": 587516927,
    "id": 573659801,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzY1OTgwMQ==",
    "diff_hunk": "@@ -181,12 +182,46 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+*/\n+struct MempoolAcceptResult {\n+    /** Used to indicate the results of mempool validation,\n+    * including the possibility of unfinished validation.\n+    */\n+    enum class ResultType {\n+        VALID, //!> Fully validated, valid.\n+        INVALID, //!> Invalid.\n+    };\n+    ResultType m_result_type;\n+    TxValidationState m_state;\n+\n+    // The following fields are only present when m_result_type = ResultType::VALID\n+    /** Mempool transactions replaced by the tx per BIP 125 rules. */\n+    std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n+    /** Raw base fees. */\n+    std::optional<CAmount> m_base_fees;\n+\n+    /** Constructor for failure case */\n+    explicit MempoolAcceptResult(TxValidationState state)\n+        : m_result_type(ResultType::INVALID),\n+        m_state(state), m_replaced_transactions(nullopt), m_base_fees(nullopt) {\n+            Assume(!state.IsValid()); // Can be invalid or error\n+        }\n+\n+    /** Constructor for success case */\n+    explicit MempoolAcceptResult(std::list<CTransactionRef>&& replaced_txns, CAmount fees)\n+        : m_result_type(ResultType::VALID), m_state(TxValidationState{}),",
    "path": "src/validation.h",
    "position": 63,
    "original_position": 63,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Haven't tried, but I think this can be written shorter\r\n\r\n```suggestion\r\n        : m_result_type(ResultType::VALID), m_state{},\r\n```",
    "created_at": "2021-02-10T11:40:27Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r573659801",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573659801"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r573659801"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573659801/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 214,
    "original_line": 214,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573661048",
    "pull_request_review_id": 587516927,
    "id": 573661048,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzY2MTA0OA==",
    "diff_hunk": "@@ -556,12 +556,12 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     const uint256& hash = ws.m_hash;\n \n     // Copy/alias what we need out of args\n-    TxValidationState &state = args.m_state;\n     const int64_t nAcceptTime = args.m_accept_time;\n     const bool bypass_limits = args.m_bypass_limits;\n     std::vector<COutPoint>& coins_to_uncache = args.m_coins_to_uncache;\n \n     // Alias what we need out of ws\n+    TxValidationState &state = ws.m_state;",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 68,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "174cb5330af4b09f3a66974d3bae783ea43b190e",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit in 174cb5330af4b09f3a66974d3bae783ea43b190e: When touching the code it would be good if the correct style was used right away, instead of adding another commit afterward to fix it up once more. (This increases the `git blame` and `git log -S` depth)",
    "created_at": "2021-02-10T11:42:47Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r573661048",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573661048"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r573661048"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573661048/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 564,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573662097",
    "pull_request_review_id": 587516927,
    "id": 573662097,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzY2MjA5Nw==",
    "diff_hunk": "@@ -702,7 +699,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     int64_t nSigOpsCost = GetTransactionSigOpCost(tx, m_view, STANDARD_SCRIPT_VERIFY_FLAGS);\n \n     // nModifiedFees includes any fee deltas from PrioritiseTransaction\n-    nModifiedFees = nFees;\n+    nModifiedFees = ws.m_fee_out;",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 92,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "174cb5330af4b09f3a66974d3bae783ea43b190e",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit 174cb5330af4b09f3a66974d3bae783ea43b190e: When touching a member variable in all places where it is used it could make sense to use the right name right away instead of using the wrong name first in all sites and then adding a commit to rename it. (Increases git blame depth)",
    "created_at": "2021-02-10T11:44:37Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r573662097",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573662097"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r573662097"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573662097/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 702,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573970128",
    "pull_request_review_id": 587919391,
    "id": 573970128,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mzk3MDEyOA==",
    "diff_hunk": "@@ -556,12 +556,12 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     const uint256& hash = ws.m_hash;\n \n     // Copy/alias what we need out of args\n-    TxValidationState &state = args.m_state;\n     const int64_t nAcceptTime = args.m_accept_time;\n     const bool bypass_limits = args.m_bypass_limits;\n     std::vector<COutPoint>& coins_to_uncache = args.m_coins_to_uncache;\n \n     // Alias what we need out of ws\n+    TxValidationState &state = ws.m_state;",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 68,
    "commit_id": "53e716ea119658c28935fee24eb50090907c500e",
    "original_commit_id": "174cb5330af4b09f3a66974d3bae783ea43b190e",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Mm, definitely - I will keep this in mind!",
    "created_at": "2021-02-10T18:26:38Z",
    "updated_at": "2021-02-10T19:11:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r573970128",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573970128"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r573970128"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573970128/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 564,
    "side": "RIGHT",
    "in_reply_to_id": 573661048
  }
]