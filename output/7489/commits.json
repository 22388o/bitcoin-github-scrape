[
  {
    "sha": "7539f1aae3b41279dc5d49e09f448a78a071e114",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTM5ZjFhYWUzYjQxMjc5ZGM1ZDQ5ZTA5ZjQ0OGE3OGEwNzFlMTE0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-02-09T11:37:05Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-02-09T11:37:05Z"
      },
      "message": "tests: Make proxy_test work on travis servers without IPv6",
      "tree": {
        "sha": "83045d741ac7fe5c157b609eed71dfc28794aef5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/83045d741ac7fe5c157b609eed71dfc28794aef5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7539f1aae3b41279dc5d49e09f448a78a071e114",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7539f1aae3b41279dc5d49e09f448a78a071e114",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7539f1aae3b41279dc5d49e09f448a78a071e114",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7539f1aae3b41279dc5d49e09f448a78a071e114/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b49a62379900762a39c2f00dcad764076426d954",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b49a62379900762a39c2f00dcad764076426d954",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b49a62379900762a39c2f00dcad764076426d954"
      }
    ],
    "stats": {
      "total": 89,
      "additions": 58,
      "deletions": 31
    },
    "files": [
      {
        "sha": "b3c65573ea3323b59f604a1189f08b3b554ff730",
        "filename": "qa/rpc-tests/proxy_test.py",
        "status": "modified",
        "additions": 43,
        "deletions": 31,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7539f1aae3b41279dc5d49e09f448a78a071e114/qa/rpc-tests/proxy_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7539f1aae3b41279dc5d49e09f448a78a071e114/qa/rpc-tests/proxy_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/proxy_test.py?ref=7539f1aae3b41279dc5d49e09f448a78a071e114",
        "patch": "@@ -7,6 +7,7 @@\n from test_framework.socks5 import Socks5Configuration, Socks5Command, Socks5Server, AddressType\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n+from test_framework.netutil import test_ipv6_local\n '''\n Test plan:\n - Start bitcoind's with different proxy configurations\n@@ -34,6 +35,7 @@\n \n class ProxyTest(BitcoinTestFramework):\n     def __init__(self):\n+        self.have_ipv6 = test_ipv6_local()\n         # Create two proxies on different ports\n         # ... one unauthenticated\n         self.conf1 = Socks5Configuration()\n@@ -45,29 +47,36 @@ def __init__(self):\n         self.conf2.addr = ('127.0.0.1', 14000 + (os.getpid() % 1000))\n         self.conf2.unauth = True\n         self.conf2.auth = True\n-        # ... one on IPv6 with similar configuration\n-        self.conf3 = Socks5Configuration()\n-        self.conf3.af = socket.AF_INET6\n-        self.conf3.addr = ('::1', 15000 + (os.getpid() % 1000))\n-        self.conf3.unauth = True\n-        self.conf3.auth = True\n+        if self.have_ipv6:\n+            # ... one on IPv6 with similar configuration\n+            self.conf3 = Socks5Configuration()\n+            self.conf3.af = socket.AF_INET6\n+            self.conf3.addr = ('::1', 15000 + (os.getpid() % 1000))\n+            self.conf3.unauth = True\n+            self.conf3.auth = True\n+        else:\n+            print \"Warning: testing without local IPv6 support\"\n \n         self.serv1 = Socks5Server(self.conf1)\n         self.serv1.start()\n         self.serv2 = Socks5Server(self.conf2)\n         self.serv2.start()\n-        self.serv3 = Socks5Server(self.conf3)\n-        self.serv3.start()\n+        if self.have_ipv6:\n+            self.serv3 = Socks5Server(self.conf3)\n+            self.serv3.start()\n \n     def setup_nodes(self):\n         # Note: proxies are not used to connect to local nodes\n         # this is because the proxy to use is based on CService.GetNetwork(), which return NET_UNROUTABLE for localhost\n-        return start_nodes(4, self.options.tmpdir, extra_args=[\n+        args = [\n             ['-listen', '-debug=net', '-debug=proxy', '-proxy=%s:%i' % (self.conf1.addr),'-proxyrandomize=1'], \n             ['-listen', '-debug=net', '-debug=proxy', '-proxy=%s:%i' % (self.conf1.addr),'-onion=%s:%i' % (self.conf2.addr),'-proxyrandomize=0'], \n             ['-listen', '-debug=net', '-debug=proxy', '-proxy=%s:%i' % (self.conf2.addr),'-proxyrandomize=1'], \n-            ['-listen', '-debug=net', '-debug=proxy', '-proxy=[%s]:%i' % (self.conf3.addr),'-proxyrandomize=0', '-noonion']\n-            ])\n+            []\n+            ]\n+        if self.have_ipv6:\n+            args[3] = ['-listen', '-debug=net', '-debug=proxy', '-proxy=[%s]:%i' % (self.conf3.addr),'-proxyrandomize=0', '-noonion']\n+        return start_nodes(4, self.options.tmpdir, extra_args=args)\n \n     def node_test(self, node, proxies, auth, test_onion=True):\n         rv = []\n@@ -84,18 +93,19 @@ def node_test(self, node, proxies, auth, test_onion=True):\n             assert_equal(cmd.password, None)\n         rv.append(cmd)\n \n-        # Test: outgoing IPv6 connection through node\n-        node.addnode(\"[1233:3432:2434:2343:3234:2345:6546:4534]:5443\", \"onetry\")\n-        cmd = proxies[1].queue.get()\n-        assert(isinstance(cmd, Socks5Command))\n-        # Note: bitcoind's SOCKS5 implementation only sends atyp DOMAINNAME, even if connecting directly to IPv4/IPv6\n-        assert_equal(cmd.atyp, AddressType.DOMAINNAME)\n-        assert_equal(cmd.addr, \"1233:3432:2434:2343:3234:2345:6546:4534\")\n-        assert_equal(cmd.port, 5443)\n-        if not auth:\n-            assert_equal(cmd.username, None)\n-            assert_equal(cmd.password, None)\n-        rv.append(cmd)\n+        if self.have_ipv6:\n+            # Test: outgoing IPv6 connection through node\n+            node.addnode(\"[1233:3432:2434:2343:3234:2345:6546:4534]:5443\", \"onetry\")\n+            cmd = proxies[1].queue.get()\n+            assert(isinstance(cmd, Socks5Command))\n+            # Note: bitcoind's SOCKS5 implementation only sends atyp DOMAINNAME, even if connecting directly to IPv4/IPv6\n+            assert_equal(cmd.atyp, AddressType.DOMAINNAME)\n+            assert_equal(cmd.addr, \"1233:3432:2434:2343:3234:2345:6546:4534\")\n+            assert_equal(cmd.port, 5443)\n+            if not auth:\n+                assert_equal(cmd.username, None)\n+                assert_equal(cmd.password, None)\n+            rv.append(cmd)\n \n         if test_onion:\n             # Test: outgoing onion connection through node\n@@ -135,10 +145,11 @@ def run_test(self):\n         rv = self.node_test(self.nodes[2], [self.serv2, self.serv2, self.serv2, self.serv2], True)\n         # Check that credentials as used for -proxyrandomize connections are unique\n         credentials = set((x.username,x.password) for x in rv)\n-        assert_equal(len(credentials), 4)\n+        assert_equal(len(credentials), len(rv))\n \n-        # proxy on IPv6 localhost\n-        self.node_test(self.nodes[3], [self.serv3, self.serv3, self.serv3, self.serv3], False, False)\n+        if self.have_ipv6:\n+            # proxy on IPv6 localhost\n+            self.node_test(self.nodes[3], [self.serv3, self.serv3, self.serv3, self.serv3], False, False)\n \n         def networks_dict(d):\n             r = {}\n@@ -167,11 +178,12 @@ def networks_dict(d):\n             assert_equal(n2[net]['proxy_randomize_credentials'], True)\n         assert_equal(n2['onion']['reachable'], True)\n \n-        n3 = networks_dict(self.nodes[3].getnetworkinfo())\n-        for net in ['ipv4','ipv6']:\n-            assert_equal(n3[net]['proxy'], '[%s]:%i' % (self.conf3.addr))\n-            assert_equal(n3[net]['proxy_randomize_credentials'], False)\n-        assert_equal(n3['onion']['reachable'], False)\n+        if self.have_ipv6:\n+            n3 = networks_dict(self.nodes[3].getnetworkinfo())\n+            for net in ['ipv4','ipv6']:\n+                assert_equal(n3[net]['proxy'], '[%s]:%i' % (self.conf3.addr))\n+                assert_equal(n3[net]['proxy_randomize_credentials'], False)\n+            assert_equal(n3['onion']['reachable'], False)\n \n if __name__ == '__main__':\n     ProxyTest().main()"
      },
      {
        "sha": "bfdef76ad1caf30773da4d3b741342fc3b2cd310",
        "filename": "qa/rpc-tests/test_framework/netutil.py",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7539f1aae3b41279dc5d49e09f448a78a071e114/qa/rpc-tests/test_framework/netutil.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7539f1aae3b41279dc5d49e09f448a78a071e114/qa/rpc-tests/test_framework/netutil.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/netutil.py?ref=7539f1aae3b41279dc5d49e09f448a78a071e114",
        "patch": "@@ -137,3 +137,18 @@ def addr_to_hex(addr):\n     else:\n         raise ValueError('Could not parse address %s' % addr)\n     return binascii.hexlify(bytearray(addr))\n+\n+def test_ipv6_local():\n+    '''\n+    Check for (local) IPv6 support.\n+    '''\n+    import socket\n+    # By using SOCK_DGRAM this will not actually make a connection, but it will\n+    # fail if there is no route to IPv6 localhost.\n+    have_ipv6 = True\n+    try:\n+        s = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\n+        s.connect(('::1', 0))\n+    except socket.error:\n+        have_ipv6 = False\n+    return have_ipv6"
      }
    ]
  }
]