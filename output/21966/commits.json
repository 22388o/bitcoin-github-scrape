[
  {
    "sha": "e40224d0c77674348bf0a518365208bc118f39a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNDAyMjRkMGM3NzY3NDM0OGJmMGE1MTgzNjUyMDhiYzExOGYzOWE0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-05-17T11:21:23Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-24T23:04:44Z"
      },
      "message": "Remove unused float serialization",
      "tree": {
        "sha": "34eb2a2d4d304b19dc48c418dc56bfaa3c130d20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/34eb2a2d4d304b19dc48c418dc56bfaa3c130d20"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e40224d0c77674348bf0a518365208bc118f39a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e40224d0c77674348bf0a518365208bc118f39a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e40224d0c77674348bf0a518365208bc118f39a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e40224d0c77674348bf0a518365208bc118f39a4/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b295395664bd37e26d168c329f238237b34aef8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b295395664bd37e26d168c329f238237b34aef8c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b295395664bd37e26d168c329f238237b34aef8c"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 15,
      "deletions": 69
    },
    "files": [
      {
        "sha": "c5a7d0ad3172b99f4aaad61ab1b386ce8acfecb9",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e40224d0c77674348bf0a518365208bc118f39a4/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e40224d0c77674348bf0a518365208bc118f39a4/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=e40224d0c77674348bf0a518365208bc118f39a4",
        "patch": "@@ -264,6 +264,7 @@ BITCOIN_CORE_H = \\\n   util/tokenpipe.h \\\n   util/trace.h \\\n   util/translation.h \\\n+  util/types.h \\\n   util/ui_change_type.h \\\n   util/url.h \\\n   util/vector.h \\"
      },
      {
        "sha": "276f643c7f1d7677513f77210fe0422818503dfa",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 3,
        "deletions": 16,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e40224d0c77674348bf0a518365208bc118f39a4/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e40224d0c77674348bf0a518365208bc118f39a4/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=e40224d0c77674348bf0a518365208bc118f39a4",
        "patch": "@@ -23,6 +23,7 @@\n \n #include <prevector.h>\n #include <span.h>\n+#include <util/types.h>\n \n /**\n  * The maximum size of a serialized object in bytes or number of elements\n@@ -129,27 +130,13 @@ inline uint64_t ser_double_to_uint64(double x)\n     static_assert(sizeof(tmp) == sizeof(x), \"double and uint64_t assumed to have the same size\");\n     return tmp;\n }\n-inline uint32_t ser_float_to_uint32(float x)\n-{\n-    uint32_t tmp;\n-    std::memcpy(&tmp, &x, sizeof(x));\n-    static_assert(sizeof(tmp) == sizeof(x), \"float and uint32_t assumed to have the same size\");\n-    return tmp;\n-}\n inline double ser_uint64_to_double(uint64_t y)\n {\n     double tmp;\n     std::memcpy(&tmp, &y, sizeof(y));\n     static_assert(sizeof(tmp) == sizeof(y), \"double and uint64_t assumed to have the same size\");\n     return tmp;\n }\n-inline float ser_uint32_to_float(uint32_t y)\n-{\n-    float tmp;\n-    std::memcpy(&tmp, &y, sizeof(y));\n-    static_assert(sizeof(tmp) == sizeof(y), \"float and uint32_t assumed to have the same size\");\n-    return tmp;\n-}\n \n \n /////////////////////////////////////////////////////////////////\n@@ -234,7 +221,7 @@ template<typename Stream> inline void Serialize(Stream& s, int32_t a ) { ser_wri\n template<typename Stream> inline void Serialize(Stream& s, uint32_t a) { ser_writedata32(s, a); }\n template<typename Stream> inline void Serialize(Stream& s, int64_t a ) { ser_writedata64(s, a); }\n template<typename Stream> inline void Serialize(Stream& s, uint64_t a) { ser_writedata64(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, float a   ) { ser_writedata32(s, ser_float_to_uint32(a)); }\n+template<typename Stream> inline void Serialize(Stream& s, float a   ) { static_assert(ALWAYS_FALSE<Stream>, \"Not implemented\"); }\n template<typename Stream> inline void Serialize(Stream& s, double a  ) { ser_writedata64(s, ser_double_to_uint64(a)); }\n template<typename Stream, int N> inline void Serialize(Stream& s, const char (&a)[N]) { s.write(a, N); }\n template<typename Stream, int N> inline void Serialize(Stream& s, const unsigned char (&a)[N]) { s.write(CharCast(a), N); }\n@@ -252,7 +239,7 @@ template<typename Stream> inline void Unserialize(Stream& s, int32_t& a ) { a =\n template<typename Stream> inline void Unserialize(Stream& s, uint32_t& a) { a = ser_readdata32(s); }\n template<typename Stream> inline void Unserialize(Stream& s, int64_t& a ) { a = ser_readdata64(s); }\n template<typename Stream> inline void Unserialize(Stream& s, uint64_t& a) { a = ser_readdata64(s); }\n-template<typename Stream> inline void Unserialize(Stream& s, float& a   ) { a = ser_uint32_to_float(ser_readdata32(s)); }\n+template<typename Stream> inline void Unserialize(Stream& s, float& a   ) { static_assert(ALWAYS_FALSE<Stream>, \"Not implemented\"); }\n template<typename Stream> inline void Unserialize(Stream& s, double& a  ) { a = ser_uint64_to_double(ser_readdata64(s)); }\n template<typename Stream, int N> inline void Unserialize(Stream& s, char (&a)[N]) { s.read(a, N); }\n template<typename Stream, int N> inline void Unserialize(Stream& s, unsigned char (&a)[N]) { s.read(CharCast(a), N); }"
      },
      {
        "sha": "f806c82d14b4c59bf50b79f5884b4fef027a416b",
        "filename": "src/test/fuzz/float.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e40224d0c77674348bf0a518365208bc118f39a4/src/test/fuzz/float.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e40224d0c77674348bf0a518365208bc118f39a4/src/test/fuzz/float.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/float.cpp?ref=e40224d0c77674348bf0a518365208bc118f39a4",
        "patch": "@@ -27,16 +27,4 @@ FUZZ_TARGET(float)\n         stream >> d_deserialized;\n         assert(d == d_deserialized);\n     }\n-\n-    {\n-        const float f = fuzzed_data_provider.ConsumeFloatingPoint<float>();\n-        (void)memusage::DynamicUsage(f);\n-        assert(ser_uint32_to_float(ser_float_to_uint32(f)) == f);\n-\n-        CDataStream stream(SER_NETWORK, INIT_PROTO_VERSION);\n-        stream << f;\n-        float f_deserialized;\n-        stream >> f_deserialized;\n-        assert(f == f_deserialized);\n-    }\n }"
      },
      {
        "sha": "ac8df782be85e373e632babf5da7491e5caf3f98",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e40224d0c77674348bf0a518365208bc118f39a4/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e40224d0c77674348bf0a518365208bc118f39a4/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=e40224d0c77674348bf0a518365208bc118f39a4",
        "patch": "@@ -513,7 +513,6 @@ void WriteToStream(FuzzedDataProvider& fuzzed_data_provider, Stream& stream) noe\n                 WRITE_TO_STREAM_CASE(uint32_t, fuzzed_data_provider.ConsumeIntegral<uint32_t>()),\n                 WRITE_TO_STREAM_CASE(int64_t, fuzzed_data_provider.ConsumeIntegral<int64_t>()),\n                 WRITE_TO_STREAM_CASE(uint64_t, fuzzed_data_provider.ConsumeIntegral<uint64_t>()),\n-                WRITE_TO_STREAM_CASE(float, fuzzed_data_provider.ConsumeFloatingPoint<float>()),\n                 WRITE_TO_STREAM_CASE(double, fuzzed_data_provider.ConsumeFloatingPoint<double>()),\n                 WRITE_TO_STREAM_CASE(std::string, fuzzed_data_provider.ConsumeRandomLengthString(32)),\n                 WRITE_TO_STREAM_CASE(std::vector<char>, ConsumeRandomLengthIntegralVector<char>(fuzzed_data_provider)));\n@@ -545,7 +544,6 @@ void ReadFromStream(FuzzedDataProvider& fuzzed_data_provider, Stream& stream) no\n                 READ_FROM_STREAM_CASE(uint32_t),\n                 READ_FROM_STREAM_CASE(int64_t),\n                 READ_FROM_STREAM_CASE(uint64_t),\n-                READ_FROM_STREAM_CASE(float),\n                 READ_FROM_STREAM_CASE(double),\n                 READ_FROM_STREAM_CASE(std::string),\n                 READ_FROM_STREAM_CASE(std::vector<char>));"
      },
      {
        "sha": "0fdf48182362c39b29be974c104b54037ae31496",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 39,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e40224d0c77674348bf0a518365208bc118f39a4/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e40224d0c77674348bf0a518365208bc118f39a4/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=e40224d0c77674348bf0a518365208bc118f39a4",
        "patch": "@@ -70,7 +70,6 @@ BOOST_AUTO_TEST_CASE(sizes)\n     BOOST_CHECK_EQUAL(sizeof(uint32_t), GetSerializeSize(uint32_t(0), 0));\n     BOOST_CHECK_EQUAL(sizeof(int64_t), GetSerializeSize(int64_t(0), 0));\n     BOOST_CHECK_EQUAL(sizeof(uint64_t), GetSerializeSize(uint64_t(0), 0));\n-    BOOST_CHECK_EQUAL(sizeof(float), GetSerializeSize(float(0), 0));\n     BOOST_CHECK_EQUAL(sizeof(double), GetSerializeSize(double(0), 0));\n     // Bool is serialized as char\n     BOOST_CHECK_EQUAL(sizeof(char), GetSerializeSize(bool(0), 0));\n@@ -85,30 +84,10 @@ BOOST_AUTO_TEST_CASE(sizes)\n     BOOST_CHECK_EQUAL(GetSerializeSize(uint32_t(0), 0), 4U);\n     BOOST_CHECK_EQUAL(GetSerializeSize(int64_t(0), 0), 8U);\n     BOOST_CHECK_EQUAL(GetSerializeSize(uint64_t(0), 0), 8U);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(float(0), 0), 4U);\n     BOOST_CHECK_EQUAL(GetSerializeSize(double(0), 0), 8U);\n     BOOST_CHECK_EQUAL(GetSerializeSize(bool(0), 0), 1U);\n }\n \n-BOOST_AUTO_TEST_CASE(floats_conversion)\n-{\n-    // Choose values that map unambiguously to binary floating point to avoid\n-    // rounding issues at the compiler side.\n-    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x00000000), 0.0F);\n-    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x3f000000), 0.5F);\n-    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x3f800000), 1.0F);\n-    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x40000000), 2.0F);\n-    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x40800000), 4.0F);\n-    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x44444444), 785.066650390625F);\n-\n-    BOOST_CHECK_EQUAL(ser_float_to_uint32(0.0F), 0x00000000U);\n-    BOOST_CHECK_EQUAL(ser_float_to_uint32(0.5F), 0x3f000000U);\n-    BOOST_CHECK_EQUAL(ser_float_to_uint32(1.0F), 0x3f800000U);\n-    BOOST_CHECK_EQUAL(ser_float_to_uint32(2.0F), 0x40000000U);\n-    BOOST_CHECK_EQUAL(ser_float_to_uint32(4.0F), 0x40800000U);\n-    BOOST_CHECK_EQUAL(ser_float_to_uint32(785.066650390625F), 0x44444444U);\n-}\n-\n BOOST_AUTO_TEST_CASE(doubles_conversion)\n {\n     // Choose values that map unambiguously to binary floating point to avoid\n@@ -135,26 +114,8 @@ Python code to generate the below hashes:\n     def dsha256(x):\n         return hashlib.sha256(hashlib.sha256(x).digest()).digest()\n \n-    reversed_hex(dsha256(''.join(struct.pack('<f', x) for x in range(0,1000)))) == '8e8b4cf3e4df8b332057e3e23af42ebc663b61e0495d5e7e32d85099d7f3fe0c'\n     reversed_hex(dsha256(''.join(struct.pack('<d', x) for x in range(0,1000)))) == '43d0c82591953c4eafe114590d392676a01585d25b25d433557f0d7878b23f96'\n */\n-BOOST_AUTO_TEST_CASE(floats)\n-{\n-    CDataStream ss(SER_DISK, 0);\n-    // encode\n-    for (int i = 0; i < 1000; i++) {\n-        ss << float(i);\n-    }\n-    BOOST_CHECK(Hash(ss) == uint256S(\"8e8b4cf3e4df8b332057e3e23af42ebc663b61e0495d5e7e32d85099d7f3fe0c\"));\n-\n-    // decode\n-    for (int i = 0; i < 1000; i++) {\n-        float j;\n-        ss >> j;\n-        BOOST_CHECK_MESSAGE(i == j, \"decoded:\" << j << \" expected:\" << i);\n-    }\n-}\n-\n BOOST_AUTO_TEST_CASE(doubles)\n {\n     CDataStream ss(SER_DISK, 0);"
      },
      {
        "sha": "0047b00026b48443e4897c25440ac5354503cead",
        "filename": "src/util/types.h",
        "status": "added",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e40224d0c77674348bf0a518365208bc118f39a4/src/util/types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e40224d0c77674348bf0a518365208bc118f39a4/src/util/types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/types.h?ref=e40224d0c77674348bf0a518365208bc118f39a4",
        "patch": "@@ -0,0 +1,11 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_TYPES_H\n+#define BITCOIN_UTIL_TYPES_H\n+\n+template <class>\n+inline constexpr bool ALWAYS_FALSE{false};\n+\n+#endif // BITCOIN_UTIL_TYPES_H"
      }
    ]
  },
  {
    "sha": "2be4cd94f4c7d92a4287971233a20d68db81c9c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYmU0Y2Q5NGY0YzdkOTJhNDI4Nzk3MTIzM2EyMGQ2OGRiODFjOWM5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-17T00:23:17Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-24T23:04:44Z"
      },
      "message": "Add platform-independent float encoder/decoder",
      "tree": {
        "sha": "ed74f36c80af1916ba06071bac01f683d7fad629",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed74f36c80af1916ba06071bac01f683d7fad629"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2be4cd94f4c7d92a4287971233a20d68db81c9c9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2be4cd94f4c7d92a4287971233a20d68db81c9c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2be4cd94f4c7d92a4287971233a20d68db81c9c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2be4cd94f4c7d92a4287971233a20d68db81c9c9/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e40224d0c77674348bf0a518365208bc118f39a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e40224d0c77674348bf0a518365208bc118f39a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e40224d0c77674348bf0a518365208bc118f39a4"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 82,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f3f58b41b7ef3e6d9a6d722def2f5b9ecc5284b7",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2be4cd94f4c7d92a4287971233a20d68db81c9c9/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2be4cd94f4c7d92a4287971233a20d68db81c9c9/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=2be4cd94f4c7d92a4287971233a20d68db81c9c9",
        "patch": "@@ -253,6 +253,7 @@ BITCOIN_CORE_H = \\\n   util/moneystr.h \\\n   util/rbf.h \\\n   util/readwritefile.h \\\n+  util/serfloat.h \\\n   util/settings.h \\\n   util/sock.h \\\n   util/spanparsing.h \\\n@@ -595,6 +596,7 @@ libbitcoin_util_a_SOURCES = \\\n   util/settings.cpp \\\n   util/thread.cpp \\\n   util/threadnames.cpp \\\n+  util/serfloat.cpp \\\n   util/spanparsing.cpp \\\n   util/strencodings.cpp \\\n   util/string.cpp \\"
      },
      {
        "sha": "8edca924cd7b82aa6a8adcc4746d18d994df5708",
        "filename": "src/util/serfloat.cpp",
        "status": "added",
        "additions": 64,
        "deletions": 0,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2be4cd94f4c7d92a4287971233a20d68db81c9c9/src/util/serfloat.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2be4cd94f4c7d92a4287971233a20d68db81c9c9/src/util/serfloat.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/serfloat.cpp?ref=2be4cd94f4c7d92a4287971233a20d68db81c9c9",
        "patch": "@@ -0,0 +1,64 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/serfloat.h>\n+\n+#include <cmath>\n+#include <limits>\n+\n+double DecodeDouble(uint64_t v) noexcept {\n+    static constexpr double NANVAL = std::numeric_limits<double>::quiet_NaN();\n+    static constexpr double INFVAL = std::numeric_limits<double>::infinity();\n+    double sign = 1.0;\n+    if (v & 0x8000000000000000) {\n+        sign = -1.0;\n+        v ^= 0x8000000000000000;\n+    }\n+    // Zero\n+    if (v == 0) return copysign(0.0, sign);\n+    // Infinity\n+    if (v == 0x7ff0000000000000) return copysign(INFVAL, sign);\n+    // Other numbers\n+    int exp = (v & 0x7FF0000000000000) >> 52;\n+    uint64_t man = v & 0xFFFFFFFFFFFFF;\n+    if (exp == 2047) {\n+        // NaN\n+        return NANVAL;\n+    } else if (exp == 0) {\n+        // Subnormal\n+        return copysign(ldexp((double)man, -1074), sign);\n+    } else {\n+        // Normal\n+        return copysign(ldexp((double)(man + 0x10000000000000), -1075 + exp), sign);\n+    }\n+}\n+\n+uint64_t EncodeDouble(double f) noexcept {\n+    int cls = std::fpclassify(f);\n+    uint64_t sign = 0;\n+    if (copysign(1.0, f) == -1.0) {\n+        f = -f;\n+        sign = 0x8000000000000000;\n+    }\n+    // Zero\n+    if (cls == FP_ZERO) return sign;\n+    // Infinity\n+    if (cls == FP_INFINITE) return sign | 0x7ff0000000000000;\n+    // NaN\n+    if (cls == FP_NAN) return 0x7ff8000000000000;\n+    // Other numbers\n+    int exp;\n+    uint64_t man = std::round(std::frexp(f, &exp) * 9007199254740992.0);\n+    if (exp < -1021) {\n+        // Too small to represent, encode 0\n+        if (exp < -1084) return sign;\n+        // Subnormal numbers\n+        return sign | (man >> (-1021 - exp));\n+    } else {\n+        // Too big to represent, encode infinity\n+        if (exp > 1024) return sign | 0x7ff0000000000000;\n+        // Normal numbers\n+        return sign | (((uint64_t)(1022 + exp)) << 52) | (man & 0xFFFFFFFFFFFFF);\n+    }\n+}"
      },
      {
        "sha": "4d912b0176e5084d3863a1f5757f2f35b68bcad2",
        "filename": "src/util/serfloat.h",
        "status": "added",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2be4cd94f4c7d92a4287971233a20d68db81c9c9/src/util/serfloat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2be4cd94f4c7d92a4287971233a20d68db81c9c9/src/util/serfloat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/serfloat.h?ref=2be4cd94f4c7d92a4287971233a20d68db81c9c9",
        "patch": "@@ -0,0 +1,16 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SERFLOAT_H\n+#define BITCOIN_UTIL_SERFLOAT_H\n+\n+#include <stdint.h>\n+\n+/* Encode a double using the IEEE 754 binary64 format. All NaNs are encoded as x86/ARM's\n+ * positive quiet NaN with payload 0. */\n+uint64_t EncodeDouble(double f) noexcept;\n+/* Reverse operation of DecodeDouble. DecodeDouble(EncodeDouble(f))==f unless isnan(f). */\n+double DecodeDouble(uint64_t v) noexcept;\n+\n+#endif // BITCOIN_UTIL_SERFLOAT_H"
      }
    ]
  },
  {
    "sha": "bda33f98e2f32f2411fb0a8f5fb4f0a32abdf7d4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZGEzM2Y5OGUyZjMyZjI0MTFmYjBhOGY1ZmI0ZjBhMzJhYmRmN2Q0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-17T00:46:26Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-24T23:04:44Z"
      },
      "message": "Add unit tests for serfloat module",
      "tree": {
        "sha": "bb41555d3062fca157ca6e93ee8891a07b158181",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb41555d3062fca157ca6e93ee8891a07b158181"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bda33f98e2f32f2411fb0a8f5fb4f0a32abdf7d4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bda33f98e2f32f2411fb0a8f5fb4f0a32abdf7d4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bda33f98e2f32f2411fb0a8f5fb4f0a32abdf7d4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bda33f98e2f32f2411fb0a8f5fb4f0a32abdf7d4/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2be4cd94f4c7d92a4287971233a20d68db81c9c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2be4cd94f4c7d92a4287971233a20d68db81c9c9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2be4cd94f4c7d92a4287971233a20d68db81c9c9"
      }
    ],
    "stats": {
      "total": 93,
      "additions": 93,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e5f9c4cb529a696c440c8c9cadfa95588d259b7a",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bda33f98e2f32f2411fb0a8f5fb4f0a32abdf7d4/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bda33f98e2f32f2411fb0a8f5fb4f0a32abdf7d4/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=bda33f98e2f32f2411fb0a8f5fb4f0a32abdf7d4",
        "patch": "@@ -121,6 +121,7 @@ BITCOIN_TESTS =\\\n   test/script_tests.cpp \\\n   test/script_standard_tests.cpp \\\n   test/scriptnum_tests.cpp \\\n+  test/serfloat_tests.cpp \\\n   test/serialize_tests.cpp \\\n   test/settings_tests.cpp \\\n   test/sighash_tests.cpp \\"
      },
      {
        "sha": "5b49488c5d4bbc08511ba9c48bbc4b43767e00db",
        "filename": "src/test/serfloat_tests.cpp",
        "status": "added",
        "additions": 92,
        "deletions": 0,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bda33f98e2f32f2411fb0a8f5fb4f0a32abdf7d4/src/test/serfloat_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bda33f98e2f32f2411fb0a8f5fb4f0a32abdf7d4/src/test/serfloat_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serfloat_tests.cpp?ref=bda33f98e2f32f2411fb0a8f5fb4f0a32abdf7d4",
        "patch": "@@ -0,0 +1,92 @@\n+// Copyright (c) 2014-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/util/setup_common.h>\n+#include <util/serfloat.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cmath>\n+#include <limits>\n+\n+BOOST_FIXTURE_TEST_SUITE(serfloat_tests, BasicTestingSetup)\n+\n+namespace {\n+\n+uint64_t TestDouble(double f) {\n+    uint64_t i = EncodeDouble(f);\n+    double f2 = DecodeDouble(i);\n+    if (std::isnan(f)) {\n+        // NaN is not guaranteed to round-trip exactly.\n+        BOOST_CHECK(std::isnan(f2));\n+    } else {\n+        // Everything else is.\n+        BOOST_CHECK(!std::isnan(f2));\n+        uint64_t i2 = EncodeDouble(f2);\n+        BOOST_CHECK_EQUAL(f, f2);\n+        BOOST_CHECK_EQUAL(i, i2);\n+    }\n+    return i;\n+}\n+\n+} // namespace\n+\n+BOOST_AUTO_TEST_CASE(double_serfloat_tests) {\n+    BOOST_CHECK_EQUAL(TestDouble(0.0), 0);\n+    BOOST_CHECK_EQUAL(TestDouble(-0.0), 0x8000000000000000);\n+    BOOST_CHECK_EQUAL(TestDouble(std::numeric_limits<double>::infinity()), 0x7ff0000000000000);\n+    BOOST_CHECK_EQUAL(TestDouble(-std::numeric_limits<double>::infinity()), 0xfff0000000000000);\n+\n+    if (std::numeric_limits<float>::is_iec559) {\n+        BOOST_CHECK_EQUAL(sizeof(double), 8);\n+        BOOST_CHECK_EQUAL(sizeof(uint64_t), 8);\n+        // Test extreme values\n+        TestDouble(std::numeric_limits<double>::min());\n+        TestDouble(-std::numeric_limits<double>::min());\n+        TestDouble(std::numeric_limits<double>::max());\n+        TestDouble(-std::numeric_limits<double>::max());\n+        TestDouble(std::numeric_limits<double>::lowest());\n+        TestDouble(-std::numeric_limits<double>::lowest());\n+        TestDouble(std::numeric_limits<double>::quiet_NaN());\n+        TestDouble(-std::numeric_limits<double>::quiet_NaN());\n+        TestDouble(std::numeric_limits<double>::signaling_NaN());\n+        TestDouble(-std::numeric_limits<double>::signaling_NaN());\n+        TestDouble(std::numeric_limits<double>::denorm_min());\n+        TestDouble(-std::numeric_limits<double>::denorm_min());\n+        // Test exact encoding: on currently supported platforms, EncodeDouble\n+        // should produce exactly the same as the in-memory representation for non-NaN.\n+        for (int j = 0; j < 1000; ++j) {\n+            // Iterate over 9 specific bits exhaustively; the others are chosen randomly.\n+            // These specific bits are the sign bit, and the 2 top and bottom bits of\n+            // exponent and mantissa in the IEEE754 binary64 format.\n+            for (int x = 0; x < 512; ++x) {\n+                uint64_t v = InsecureRandBits(64);\n+                v &= ~(uint64_t{1} << 0);\n+                if (x & 1) v |= (uint64_t{1} << 0);\n+                v &= ~(uint64_t{1} << 1);\n+                if (x & 2) v |= (uint64_t{1} << 1);\n+                v &= ~(uint64_t{1} << 50);\n+                if (x & 4) v |= (uint64_t{1} << 50);\n+                v &= ~(uint64_t{1} << 51);\n+                if (x & 8) v |= (uint64_t{1} << 51);\n+                v &= ~(uint64_t{1} << 52);\n+                if (x & 16) v |= (uint64_t{1} << 52);\n+                v &= ~(uint64_t{1} << 53);\n+                if (x & 32) v |= (uint64_t{1} << 53);\n+                v &= ~(uint64_t{1} << 61);\n+                if (x & 64) v |= (uint64_t{1} << 61);\n+                v &= ~(uint64_t{1} << 62);\n+                if (x & 128) v |= (uint64_t{1} << 62);\n+                v &= ~(uint64_t{1} << 63);\n+                if (x & 256) v |= (uint64_t{1} << 63);\n+                double f;\n+                memcpy(&f, &v, 8);\n+                uint64_t v2 = TestDouble(f);\n+                if (!std::isnan(f)) BOOST_CHECK_EQUAL(v, v2);\n+            }\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "afd964d70b6f7583ecf89c380f80db07f5b66a60",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZmQ5NjRkNzBiNmY3NTgzZWNmODljMzgwZjgwZGIwN2Y1YjY2YTYw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-17T01:09:20Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-24T23:15:02Z"
      },
      "message": "Convert existing float encoding tests",
      "tree": {
        "sha": "de45d53befecd13c48bfb22e8e7a9d2543941d07",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de45d53befecd13c48bfb22e8e7a9d2543941d07"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/afd964d70b6f7583ecf89c380f80db07f5b66a60",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afd964d70b6f7583ecf89c380f80db07f5b66a60",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/afd964d70b6f7583ecf89c380f80db07f5b66a60",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afd964d70b6f7583ecf89c380f80db07f5b66a60/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bda33f98e2f32f2411fb0a8f5fb4f0a32abdf7d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bda33f98e2f32f2411fb0a8f5fb4f0a32abdf7d4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bda33f98e2f32f2411fb0a8f5fb4f0a32abdf7d4"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 38,
      "deletions": 46
    },
    "files": [
      {
        "sha": "54e07b0f61b3a061ef068c33eeeae01ecf3a3f6c",
        "filename": "src/test/serfloat_tests.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 1,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afd964d70b6f7583ecf89c380f80db07f5b66a60/src/test/serfloat_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afd964d70b6f7583ecf89c380f80db07f5b66a60/src/test/serfloat_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serfloat_tests.cpp?ref=afd964d70b6f7583ecf89c380f80db07f5b66a60",
        "patch": "@@ -2,8 +2,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <hash.h>\n #include <test/util/setup_common.h>\n #include <util/serfloat.h>\n+#include <serialize.h>\n+#include <streams.h>\n \n #include <boost/test/unit_test.hpp>\n \n@@ -37,8 +40,14 @@ BOOST_AUTO_TEST_CASE(double_serfloat_tests) {\n     BOOST_CHECK_EQUAL(TestDouble(-0.0), 0x8000000000000000);\n     BOOST_CHECK_EQUAL(TestDouble(std::numeric_limits<double>::infinity()), 0x7ff0000000000000);\n     BOOST_CHECK_EQUAL(TestDouble(-std::numeric_limits<double>::infinity()), 0xfff0000000000000);\n+    BOOST_CHECK_EQUAL(TestDouble(0.5), 0x3fe0000000000000ULL);\n+    BOOST_CHECK_EQUAL(TestDouble(1.0), 0x3ff0000000000000ULL);\n+    BOOST_CHECK_EQUAL(TestDouble(2.0), 0x4000000000000000ULL);\n+    BOOST_CHECK_EQUAL(TestDouble(4.0), 0x4010000000000000ULL);\n+    BOOST_CHECK_EQUAL(TestDouble(785.066650390625), 0x4088888880000000ULL);\n \n-    if (std::numeric_limits<float>::is_iec559) {\n+    // Roundtrip test on IEC559-compatible systems\n+    if (std::numeric_limits<double>::is_iec559) {\n         BOOST_CHECK_EQUAL(sizeof(double), 8);\n         BOOST_CHECK_EQUAL(sizeof(uint64_t), 8);\n         // Test extreme values\n@@ -89,4 +98,32 @@ BOOST_AUTO_TEST_CASE(double_serfloat_tests) {\n     }\n }\n \n+/*\n+Python code to generate the below hashes:\n+\n+    def reversed_hex(x):\n+        return binascii.hexlify(''.join(reversed(x)))\n+    def dsha256(x):\n+        return hashlib.sha256(hashlib.sha256(x).digest()).digest()\n+\n+    reversed_hex(dsha256(''.join(struct.pack('<d', x) for x in range(0,1000)))) == '43d0c82591953c4eafe114590d392676a01585d25b25d433557f0d7878b23f96'\n+*/\n+BOOST_AUTO_TEST_CASE(doubles)\n+{\n+    CDataStream ss(SER_DISK, 0);\n+    // encode\n+    for (int i = 0; i < 1000; i++) {\n+        ss << EncodeDouble(i);\n+    }\n+    BOOST_CHECK(Hash(ss) == uint256S(\"43d0c82591953c4eafe114590d392676a01585d25b25d433557f0d7878b23f96\"));\n+\n+    // decode\n+    for (int i = 0; i < 1000; i++) {\n+        uint64_t val;\n+        ss >> val;\n+        double j = DecodeDouble(val);\n+        BOOST_CHECK_MESSAGE(i == j, \"decoded:\" << j << \" expected:\" << i);\n+    }\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "0812ef643e2dd3af47b014590ca169cd9173d6fd",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 45,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afd964d70b6f7583ecf89c380f80db07f5b66a60/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afd964d70b6f7583ecf89c380f80db07f5b66a60/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=afd964d70b6f7583ecf89c380f80db07f5b66a60",
        "patch": "@@ -88,51 +88,6 @@ BOOST_AUTO_TEST_CASE(sizes)\n     BOOST_CHECK_EQUAL(GetSerializeSize(bool(0), 0), 1U);\n }\n \n-BOOST_AUTO_TEST_CASE(doubles_conversion)\n-{\n-    // Choose values that map unambiguously to binary floating point to avoid\n-    // rounding issues at the compiler side.\n-    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x0000000000000000ULL), 0.0);\n-    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x3fe0000000000000ULL), 0.5);\n-    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x3ff0000000000000ULL), 1.0);\n-    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x4000000000000000ULL), 2.0);\n-    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x4010000000000000ULL), 4.0);\n-    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x4088888880000000ULL), 785.066650390625);\n-\n-    BOOST_CHECK_EQUAL(ser_double_to_uint64(0.0), 0x0000000000000000ULL);\n-    BOOST_CHECK_EQUAL(ser_double_to_uint64(0.5), 0x3fe0000000000000ULL);\n-    BOOST_CHECK_EQUAL(ser_double_to_uint64(1.0), 0x3ff0000000000000ULL);\n-    BOOST_CHECK_EQUAL(ser_double_to_uint64(2.0), 0x4000000000000000ULL);\n-    BOOST_CHECK_EQUAL(ser_double_to_uint64(4.0), 0x4010000000000000ULL);\n-    BOOST_CHECK_EQUAL(ser_double_to_uint64(785.066650390625), 0x4088888880000000ULL);\n-}\n-/*\n-Python code to generate the below hashes:\n-\n-    def reversed_hex(x):\n-        return binascii.hexlify(''.join(reversed(x)))\n-    def dsha256(x):\n-        return hashlib.sha256(hashlib.sha256(x).digest()).digest()\n-\n-    reversed_hex(dsha256(''.join(struct.pack('<d', x) for x in range(0,1000)))) == '43d0c82591953c4eafe114590d392676a01585d25b25d433557f0d7878b23f96'\n-*/\n-BOOST_AUTO_TEST_CASE(doubles)\n-{\n-    CDataStream ss(SER_DISK, 0);\n-    // encode\n-    for (int i = 0; i < 1000; i++) {\n-        ss << double(i);\n-    }\n-    BOOST_CHECK(Hash(ss) == uint256S(\"43d0c82591953c4eafe114590d392676a01585d25b25d433557f0d7878b23f96\"));\n-\n-    // decode\n-    for (int i = 0; i < 1000; i++) {\n-        double j;\n-        ss >> j;\n-        BOOST_CHECK_MESSAGE(i == j, \"decoded:\" << j << \" expected:\" << i);\n-    }\n-}\n-\n BOOST_AUTO_TEST_CASE(varints)\n {\n     // encode"
      }
    ]
  },
  {
    "sha": "fff1cae43af959a601cf2558cb3c77f3c2b1aa80",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZmYxY2FlNDNhZjk1OWE2MDFjZjI1NThjYjNjNzdmM2MyYjFhYTgw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-18T19:36:53Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-24T23:15:05Z"
      },
      "message": "Convert uses of double-serialization to {En,De}codeDouble",
      "tree": {
        "sha": "f84c771447fb072e76515d65179f4cd0dd5c31b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f84c771447fb072e76515d65179f4cd0dd5c31b1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fff1cae43af959a601cf2558cb3c77f3c2b1aa80",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fff1cae43af959a601cf2558cb3c77f3c2b1aa80",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fff1cae43af959a601cf2558cb3c77f3c2b1aa80",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fff1cae43af959a601cf2558cb3c77f3c2b1aa80/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "afd964d70b6f7583ecf89c380f80db07f5b66a60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afd964d70b6f7583ecf89c380f80db07f5b66a60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/afd964d70b6f7583ecf89c380f80db07f5b66a60"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 46,
      "deletions": 18
    },
    "files": [
      {
        "sha": "2ae5798ebec76fcc7db97c634aedb03c73158468",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 12,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fff1cae43af959a601cf2558cb3c77f3c2b1aa80/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fff1cae43af959a601cf2558cb3c77f3c2b1aa80/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=fff1cae43af959a601cf2558cb3c77f3c2b1aa80",
        "patch": "@@ -10,6 +10,7 @@\n #include <logging.h>\n #include <streams.h>\n #include <txmempool.h>\n+#include <util/serfloat.h>\n #include <util/system.h>\n \n static const char* FEE_ESTIMATES_FILENAME = \"fee_estimates.dat\";\n@@ -26,6 +27,25 @@ std::string StringForFeeEstimateHorizon(FeeEstimateHorizon horizon)\n     assert(false);\n }\n \n+namespace {\n+\n+struct EncodedDoubleFormatter\n+{\n+    template<typename Stream> void Ser(Stream &s, double v)\n+    {\n+        s << EncodeDouble(v);\n+    }\n+\n+    template<typename Stream> void Unser(Stream& s, double& v)\n+    {\n+        uint64_t encoded;\n+        s >> encoded;\n+        v = DecodeDouble(encoded);\n+    }\n+};\n+\n+} // namespace\n+\n /**\n  * We will instantiate an instance of this class to track transactions that were\n  * included in a block. We will lump transactions into a bucket according to their\n@@ -356,12 +376,12 @@ double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n \n void TxConfirmStats::Write(CAutoFile& fileout) const\n {\n-    fileout << decay;\n+    fileout << Using<EncodedDoubleFormatter>(decay);\n     fileout << scale;\n-    fileout << m_feerate_avg;\n-    fileout << txCtAvg;\n-    fileout << confAvg;\n-    fileout << failAvg;\n+    fileout << Using<VectorFormatter<EncodedDoubleFormatter>>(m_feerate_avg);\n+    fileout << Using<VectorFormatter<EncodedDoubleFormatter>>(txCtAvg);\n+    fileout << Using<VectorFormatter<VectorFormatter<EncodedDoubleFormatter>>>(confAvg);\n+    fileout << Using<VectorFormatter<VectorFormatter<EncodedDoubleFormatter>>>(failAvg);\n }\n \n void TxConfirmStats::Read(CAutoFile& filein, int nFileVersion, size_t numBuckets)\n@@ -372,7 +392,7 @@ void TxConfirmStats::Read(CAutoFile& filein, int nFileVersion, size_t numBuckets\n     size_t maxConfirms, maxPeriods;\n \n     // The current version will store the decay with each individual TxConfirmStats and also keep a scale factor\n-    filein >> decay;\n+    filein >> Using<EncodedDoubleFormatter>(decay);\n     if (decay <= 0 || decay >= 1) {\n         throw std::runtime_error(\"Corrupt estimates file. Decay must be between 0 and 1 (non-inclusive)\");\n     }\n@@ -381,15 +401,15 @@ void TxConfirmStats::Read(CAutoFile& filein, int nFileVersion, size_t numBuckets\n         throw std::runtime_error(\"Corrupt estimates file. Scale must be non-zero\");\n     }\n \n-    filein >> m_feerate_avg;\n+    filein >> Using<VectorFormatter<EncodedDoubleFormatter>>(m_feerate_avg);\n     if (m_feerate_avg.size() != numBuckets) {\n         throw std::runtime_error(\"Corrupt estimates file. Mismatch in feerate average bucket count\");\n     }\n-    filein >> txCtAvg;\n+    filein >> Using<VectorFormatter<EncodedDoubleFormatter>>(txCtAvg);\n     if (txCtAvg.size() != numBuckets) {\n         throw std::runtime_error(\"Corrupt estimates file. Mismatch in tx count bucket count\");\n     }\n-    filein >> confAvg;\n+    filein >> Using<VectorFormatter<VectorFormatter<EncodedDoubleFormatter>>>(confAvg);\n     maxPeriods = confAvg.size();\n     maxConfirms = scale * maxPeriods;\n \n@@ -402,7 +422,7 @@ void TxConfirmStats::Read(CAutoFile& filein, int nFileVersion, size_t numBuckets\n         }\n     }\n \n-    filein >> failAvg;\n+    filein >> Using<VectorFormatter<VectorFormatter<EncodedDoubleFormatter>>>(failAvg);\n     if (maxPeriods != failAvg.size()) {\n         throw std::runtime_error(\"Corrupt estimates file. Mismatch in confirms tracked for failures\");\n     }\n@@ -884,7 +904,7 @@ bool CBlockPolicyEstimator::Write(CAutoFile& fileout) const\n         else {\n             fileout << historicalFirst << historicalBest;\n         }\n-        fileout << buckets;\n+        fileout << Using<VectorFormatter<EncodedDoubleFormatter>>(buckets);\n         feeStats->Write(fileout);\n         shortStats->Write(fileout);\n         longStats->Write(fileout);\n@@ -920,7 +940,7 @@ bool CBlockPolicyEstimator::Read(CAutoFile& filein)\n                 throw std::runtime_error(\"Corrupt estimates file. Historical block range for estimates is invalid\");\n             }\n             std::vector<double> fileBuckets;\n-            filein >> fileBuckets;\n+            filein >> Using<VectorFormatter<EncodedDoubleFormatter>>(fileBuckets);\n             size_t numBuckets = fileBuckets.size();\n             if (numBuckets <= 1 || numBuckets > 1000) {\n                 throw std::runtime_error(\"Corrupt estimates file. Must have between 2 and 1000 feerate buckets\");"
      },
      {
        "sha": "e95d593b2275521d0ad79b14d60426f74013e779",
        "filename": "src/test/fuzz/float.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 6,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fff1cae43af959a601cf2558cb3c77f3c2b1aa80/src/test/fuzz/float.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fff1cae43af959a601cf2558cb3c77f3c2b1aa80/src/test/fuzz/float.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/float.cpp?ref=fff1cae43af959a601cf2558cb3c77f3c2b1aa80",
        "patch": "@@ -7,10 +7,13 @@\n #include <streams.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n+#include <util/serfloat.h>\n #include <version.h>\n \n #include <cassert>\n #include <cstdint>\n+#include <cmath>\n+#include <limits>\n \n FUZZ_TARGET(float)\n {\n@@ -19,12 +22,17 @@ FUZZ_TARGET(float)\n     {\n         const double d = fuzzed_data_provider.ConsumeFloatingPoint<double>();\n         (void)memusage::DynamicUsage(d);\n-        assert(ser_uint64_to_double(ser_double_to_uint64(d)) == d);\n \n-        CDataStream stream(SER_NETWORK, INIT_PROTO_VERSION);\n-        stream << d;\n-        double d_deserialized;\n-        stream >> d_deserialized;\n-        assert(d == d_deserialized);\n+        uint64_t encoded = EncodeDouble(d);\n+        if constexpr (std::numeric_limits<double>::is_iec559) {\n+            if (!std::isnan(d)) {\n+                uint64_t encoded_in_memory;\n+                std::copy((const unsigned char*)&d, (const unsigned char*)(&d + 1), (unsigned char*)&encoded_in_memory);\n+                assert(encoded_in_memory == encoded);\n+            }\n+        }\n+        double d_deserialized = DecodeDouble(encoded);\n+        assert(std::isnan(d) == std::isnan(d_deserialized));\n+        assert(std::isnan(d) || d == d_deserialized);\n     }\n }"
      }
    ]
  },
  {
    "sha": "66545da2008cd9e806e41b74522ded259cd64f86",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjU0NWRhMjAwOGNkOWU4MDZlNDFiNzQ1MjJkZWQyNTljZDY0Zjg2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-18T19:37:02Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-24T23:15:05Z"
      },
      "message": "Remove support for double serialization",
      "tree": {
        "sha": "0e735db6f3914d8938549e16ca55305b2535df5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0e735db6f3914d8938549e16ca55305b2535df5b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66545da2008cd9e806e41b74522ded259cd64f86",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66545da2008cd9e806e41b74522ded259cd64f86",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/66545da2008cd9e806e41b74522ded259cd64f86",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66545da2008cd9e806e41b74522ded259cd64f86/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fff1cae43af959a601cf2558cb3c77f3c2b1aa80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fff1cae43af959a601cf2558cb3c77f3c2b1aa80",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fff1cae43af959a601cf2558cb3c77f3c2b1aa80"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 0,
      "deletions": 43
    },
    "files": [
      {
        "sha": "2c25f04d086b38e829a3ee3143c7728a2748221b",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66545da2008cd9e806e41b74522ded259cd64f86/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66545da2008cd9e806e41b74522ded259cd64f86/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=66545da2008cd9e806e41b74522ded259cd64f86",
        "patch": "@@ -265,7 +265,6 @@ BITCOIN_CORE_H = \\\n   util/tokenpipe.h \\\n   util/trace.h \\\n   util/translation.h \\\n-  util/types.h \\\n   util/ui_change_type.h \\\n   util/url.h \\\n   util/vector.h \\"
      },
      {
        "sha": "7a254c3b67baa074443ffc0103aca993eb40bb30",
        "filename": "src/compat/assumptions.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66545da2008cd9e806e41b74522ded259cd64f86/src/compat/assumptions.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66545da2008cd9e806e41b74522ded259cd64f86/src/compat/assumptions.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/assumptions.h?ref=66545da2008cd9e806e41b74522ded259cd64f86",
        "patch": "@@ -36,11 +36,6 @@ static_assert(std::numeric_limits<double>::is_iec559, \"IEEE 754 double assumed\")\n // Example(s): Everywhere :-)\n static_assert(std::numeric_limits<unsigned char>::digits == 8, \"8-bit byte assumed\");\n \n-// Assumption: We assume floating-point widths.\n-// Example(s): Type punning in serialization code (ser_{float,double}_to_uint{32,64}).\n-static_assert(sizeof(float) == 4, \"32-bit float assumed\");\n-static_assert(sizeof(double) == 8, \"64-bit double assumed\");\n-\n // Assumption: We assume integer widths.\n // Example(s): GetSizeOfCompactSize and WriteCompactSize in the serialization\n //             code."
      },
      {
        "sha": "5ef846b9e913e7619b2a0ef459e3df8b9602e9f3",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 0,
        "deletions": 19,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66545da2008cd9e806e41b74522ded259cd64f86/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66545da2008cd9e806e41b74522ded259cd64f86/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=66545da2008cd9e806e41b74522ded259cd64f86",
        "patch": "@@ -23,7 +23,6 @@\n \n #include <prevector.h>\n #include <span.h>\n-#include <util/types.h>\n \n /**\n  * The maximum size of a serialized object in bytes or number of elements\n@@ -123,20 +122,6 @@ template<typename Stream> inline uint64_t ser_readdata64(Stream &s)\n     s.read((char*)&obj, 8);\n     return le64toh(obj);\n }\n-inline uint64_t ser_double_to_uint64(double x)\n-{\n-    uint64_t tmp;\n-    std::memcpy(&tmp, &x, sizeof(x));\n-    static_assert(sizeof(tmp) == sizeof(x), \"double and uint64_t assumed to have the same size\");\n-    return tmp;\n-}\n-inline double ser_uint64_to_double(uint64_t y)\n-{\n-    double tmp;\n-    std::memcpy(&tmp, &y, sizeof(y));\n-    static_assert(sizeof(tmp) == sizeof(y), \"double and uint64_t assumed to have the same size\");\n-    return tmp;\n-}\n \n \n /////////////////////////////////////////////////////////////////\n@@ -221,8 +206,6 @@ template<typename Stream> inline void Serialize(Stream& s, int32_t a ) { ser_wri\n template<typename Stream> inline void Serialize(Stream& s, uint32_t a) { ser_writedata32(s, a); }\n template<typename Stream> inline void Serialize(Stream& s, int64_t a ) { ser_writedata64(s, a); }\n template<typename Stream> inline void Serialize(Stream& s, uint64_t a) { ser_writedata64(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, float a   ) { static_assert(ALWAYS_FALSE<Stream>, \"Not implemented\"); }\n-template<typename Stream> inline void Serialize(Stream& s, double a  ) { ser_writedata64(s, ser_double_to_uint64(a)); }\n template<typename Stream, int N> inline void Serialize(Stream& s, const char (&a)[N]) { s.write(a, N); }\n template<typename Stream, int N> inline void Serialize(Stream& s, const unsigned char (&a)[N]) { s.write(CharCast(a), N); }\n template<typename Stream> inline void Serialize(Stream& s, const Span<const unsigned char>& span) { s.write(CharCast(span.data()), span.size()); }\n@@ -239,8 +222,6 @@ template<typename Stream> inline void Unserialize(Stream& s, int32_t& a ) { a =\n template<typename Stream> inline void Unserialize(Stream& s, uint32_t& a) { a = ser_readdata32(s); }\n template<typename Stream> inline void Unserialize(Stream& s, int64_t& a ) { a = ser_readdata64(s); }\n template<typename Stream> inline void Unserialize(Stream& s, uint64_t& a) { a = ser_readdata64(s); }\n-template<typename Stream> inline void Unserialize(Stream& s, float& a   ) { static_assert(ALWAYS_FALSE<Stream>, \"Not implemented\"); }\n-template<typename Stream> inline void Unserialize(Stream& s, double& a  ) { a = ser_uint64_to_double(ser_readdata64(s)); }\n template<typename Stream, int N> inline void Unserialize(Stream& s, char (&a)[N]) { s.read(a, N); }\n template<typename Stream, int N> inline void Unserialize(Stream& s, unsigned char (&a)[N]) { s.read(CharCast(a), N); }\n template<typename Stream> inline void Unserialize(Stream& s, Span<unsigned char>& span) { s.read(CharCast(span.data()), span.size()); }"
      },
      {
        "sha": "adef66a3ee01526c08c8a058c1bf1e9cb317ddc3",
        "filename": "src/test/fuzz/float.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66545da2008cd9e806e41b74522ded259cd64f86/src/test/fuzz/float.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66545da2008cd9e806e41b74522ded259cd64f86/src/test/fuzz/float.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/float.cpp?ref=66545da2008cd9e806e41b74522ded259cd64f86",
        "patch": "@@ -3,15 +3,12 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <memusage.h>\n-#include <serialize.h>\n-#include <streams.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <util/serfloat.h>\n #include <version.h>\n \n #include <cassert>\n-#include <cstdint>\n #include <cmath>\n #include <limits>\n "
      },
      {
        "sha": "cf7796e4ae475d4f633430ce636401911672dd2e",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66545da2008cd9e806e41b74522ded259cd64f86/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66545da2008cd9e806e41b74522ded259cd64f86/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=66545da2008cd9e806e41b74522ded259cd64f86",
        "patch": "@@ -513,7 +513,6 @@ void WriteToStream(FuzzedDataProvider& fuzzed_data_provider, Stream& stream) noe\n                 WRITE_TO_STREAM_CASE(uint32_t, fuzzed_data_provider.ConsumeIntegral<uint32_t>()),\n                 WRITE_TO_STREAM_CASE(int64_t, fuzzed_data_provider.ConsumeIntegral<int64_t>()),\n                 WRITE_TO_STREAM_CASE(uint64_t, fuzzed_data_provider.ConsumeIntegral<uint64_t>()),\n-                WRITE_TO_STREAM_CASE(double, fuzzed_data_provider.ConsumeFloatingPoint<double>()),\n                 WRITE_TO_STREAM_CASE(std::string, fuzzed_data_provider.ConsumeRandomLengthString(32)),\n                 WRITE_TO_STREAM_CASE(std::vector<char>, ConsumeRandomLengthIntegralVector<char>(fuzzed_data_provider)));\n         } catch (const std::ios_base::failure&) {\n@@ -544,7 +543,6 @@ void ReadFromStream(FuzzedDataProvider& fuzzed_data_provider, Stream& stream) no\n                 READ_FROM_STREAM_CASE(uint32_t),\n                 READ_FROM_STREAM_CASE(int64_t),\n                 READ_FROM_STREAM_CASE(uint64_t),\n-                READ_FROM_STREAM_CASE(double),\n                 READ_FROM_STREAM_CASE(std::string),\n                 READ_FROM_STREAM_CASE(std::vector<char>));\n         } catch (const std::ios_base::failure&) {"
      },
      {
        "sha": "58709178a49e5e268c48ac2561fac2563aeb7a0e",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66545da2008cd9e806e41b74522ded259cd64f86/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66545da2008cd9e806e41b74522ded259cd64f86/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=66545da2008cd9e806e41b74522ded259cd64f86",
        "patch": "@@ -70,7 +70,6 @@ BOOST_AUTO_TEST_CASE(sizes)\n     BOOST_CHECK_EQUAL(sizeof(uint32_t), GetSerializeSize(uint32_t(0), 0));\n     BOOST_CHECK_EQUAL(sizeof(int64_t), GetSerializeSize(int64_t(0), 0));\n     BOOST_CHECK_EQUAL(sizeof(uint64_t), GetSerializeSize(uint64_t(0), 0));\n-    BOOST_CHECK_EQUAL(sizeof(double), GetSerializeSize(double(0), 0));\n     // Bool is serialized as char\n     BOOST_CHECK_EQUAL(sizeof(char), GetSerializeSize(bool(0), 0));\n \n@@ -84,7 +83,6 @@ BOOST_AUTO_TEST_CASE(sizes)\n     BOOST_CHECK_EQUAL(GetSerializeSize(uint32_t(0), 0), 4U);\n     BOOST_CHECK_EQUAL(GetSerializeSize(int64_t(0), 0), 8U);\n     BOOST_CHECK_EQUAL(GetSerializeSize(uint64_t(0), 0), 8U);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(double(0), 0), 8U);\n     BOOST_CHECK_EQUAL(GetSerializeSize(bool(0), 0), 1U);\n }\n "
      },
      {
        "sha": "0047b00026b48443e4897c25440ac5354503cead",
        "filename": "src/util/types.h",
        "status": "removed",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fff1cae43af959a601cf2558cb3c77f3c2b1aa80/src/util/types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fff1cae43af959a601cf2558cb3c77f3c2b1aa80/src/util/types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/types.h?ref=fff1cae43af959a601cf2558cb3c77f3c2b1aa80",
        "patch": "@@ -1,11 +0,0 @@\n-// Copyright (c) 2021 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_UTIL_TYPES_H\n-#define BITCOIN_UTIL_TYPES_H\n-\n-template <class>\n-inline constexpr bool ALWAYS_FALSE{false};\n-\n-#endif // BITCOIN_UTIL_TYPES_H"
      }
    ]
  }
]