[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/841961633",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21966#issuecomment-841961633",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21966",
    "id": 841961633,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MTk2MTYzMw==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-17T03:43:56Z",
    "updated_at": "2021-05-26T06:30:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21981 (Remove unused float serialization by MarcoFalke)\n* #21969 (refactor: Switch serialize to uint8_t (Bundle 1/2) by MarcoFalke)\n* #10443 (Add fee_est tool for debugging fee estimation code by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/841961633/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/842179889",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21966#issuecomment-842179889",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21966",
    "id": 842179889,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MjE3OTg4OQ==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-17T09:40:30Z",
    "updated_at": "2021-05-17T09:40:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "Strong Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/842179889/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/842208191",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21966#issuecomment-842208191",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21966",
    "id": 842208191,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MjIwODE5MQ==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-17T10:23:59Z",
    "updated_at": "2021-05-17T10:25:14Z",
    "author_association": "MEMBER",
    "body": "While I think this is intriguing technically, I'm ~0 on this conceptually\r\n\r\nI think using floating point in places where 100% precision or portability across platforms is important is mistaken in the first place. This gives the wrong impression.\r\n\r\nIt raises deeper questions for me: do we really need floating point in Bitcoin at all? Narrower: do we really need to serialize/deserialize it?\r\n(clearly it's already not used for anything consensus critical)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/842208191/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/842210758",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21966#issuecomment-842210758",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21966",
    "id": 842210758,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MjIxMDc1OA==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-17T10:28:14Z",
    "updated_at": "2021-05-17T10:28:14Z",
    "author_association": "MEMBER",
    "body": "Haven't checked, but I presume it is only used for fees.dat?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/842210758/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/842218859",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21966#issuecomment-842218859",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21966",
    "id": 842218859,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MjIxODg1OQ==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-17T10:42:10Z",
    "updated_at": "2021-05-17T10:46:08Z",
    "author_association": "MEMBER",
    "body": "If so, I'd prefer to find an alternative way of serializing those values specifically (as fixed-point or numerator / denominator pairs of integers) and dropping the general float/double (de)serialization.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/842218859/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/842355965",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21966#issuecomment-842355965",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21966",
    "id": 842355965,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MjM1NTk2NQ==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-17T14:08:51Z",
    "updated_at": "2021-05-17T14:08:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Narrower: do we really need to serialize/deserialize it?\r\n\r\nAs MarcoFalke discovered `ser_float_to_uint32` and `ser_uint32_to_float` are currently unused (#21981), and AFAICT `TxConfirmStats::Write` and `TxConfirmStats::Read` are the only remaining users of `ser_double_to_uint64` and `ser_uint64_to_double`.\r\n\r\nLooks promising! :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/842355965/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/842528708",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21966#issuecomment-842528708",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21966",
    "id": 842528708,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MjUyODcwOA==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-17T18:10:28Z",
    "updated_at": "2021-05-17T18:10:28Z",
    "author_association": "MEMBER",
    "body": "@laanwj That\"s fair. I agree that avoiding serialization of floating point values directly is much more desirable.\n\nMy thinking here is that it effectively gives us a well-specified serialization with testable properties without needing to break compatibility with existing files.\n\nHow about rebasing this PR on top of #21981, and making it remove serialization support for `double` too in serialization.h, and instead make the feedata writing/reading code invoke EncodeDouble/DecodeDouble directly?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/842528708/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/842934929",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21966#issuecomment-842934929",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21966",
    "id": 842934929,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MjkzNDkyOQ==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-18T07:39:18Z",
    "updated_at": "2021-05-18T07:39:18Z",
    "author_association": "MEMBER",
    "body": "> How about rebasing this PR on top of #21981, and making it remove serialization support for double too in serialization.h, and instead make the feedata writing/reading code invoke EncodeDouble/DecodeDouble directly?\r\n\r\nI was about to comment this! Let's make this code private to the single case where it is used? It keeps the current format but also prevents future serialization of these types :smile: \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/842934929/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/843511988",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21966#issuecomment-843511988",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21966",
    "id": 843511988,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MzUxMTk4OA==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-18T19:55:40Z",
    "updated_at": "2021-05-18T19:55:40Z",
    "author_association": "MEMBER",
    "body": "@laanwj Done.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/843511988/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/843597240",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21966#issuecomment-843597240",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21966",
    "id": 843597240,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MzU5NzI0MA==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-18T22:06:33Z",
    "updated_at": "2021-05-18T22:06:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "cr ACK 892522deba52f35fe5b08e2d7aebeb80600f9cdc: patch looks correct :)\r\n\r\nVery happy to see `ser_double_to_uint64`/`ser_uint64_to_double` go and `src/compat/assumptions.h` shrink :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/843597240/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/843868492",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21966#issuecomment-843868492",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21966",
    "id": 843868492,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0Mzg2ODQ5Mg==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-19T08:23:35Z",
    "updated_at": "2021-05-26T07:55:22Z",
    "author_association": "MEMBER",
    "body": "Thanks! Happy to see this now.\r\n\r\n~~Code review ACK 892522deba52f35fe5b08e2d7aebeb80600f9cdc~~\r\nCode review re-ACK 66545da2008cd9e806e41b74522ded259cd64f86",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/843868492/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/848189719",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21966#issuecomment-848189719",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21966",
    "id": 848189719,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0ODE4OTcxOQ==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-25T19:09:58Z",
    "updated_at": "2021-05-25T19:09:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "cr re-ACK 66545da2008cd9e806e41b74522ded259cd64f86",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/848189719/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635795210",
    "pull_request_review_id": 663977901,
    "id": 635795210,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTc5NTIxMA==",
    "diff_hunk": "@@ -0,0 +1,92 @@\n+// Copyright (c) 2014-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/util/setup_common.h>\n+#include <util/serfloat.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cmath>\n+#include <limits>\n+\n+BOOST_FIXTURE_TEST_SUITE(serfloat_tests, BasicTestingSetup)\n+\n+namespace {\n+\n+uint64_t TestDouble(double f) {\n+    uint64_t i = EncodeDouble(f);\n+    double f2 = DecodeDouble(i);\n+    if (std::isnan(f)) {\n+        // NaN is not guaranteed to round-trip exactly.\n+        BOOST_CHECK(std::isnan(f2));\n+    } else {\n+        // Everything else is.\n+        BOOST_CHECK(!std::isnan(f2));\n+        uint64_t i2 = EncodeDouble(f2);\n+        BOOST_CHECK_EQUAL(f, f2);\n+        BOOST_CHECK_EQUAL(i, i2);",
    "path": "src/test/serfloat_tests.cpp",
    "position": 31,
    "original_position": 28,
    "commit_id": "66545da2008cd9e806e41b74522ded259cd64f86",
    "original_commit_id": "ae87a8aa4fc767f56cd6da0dfff3a91fcc22aae9",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "would it make sense to also assert equality with the \"legacy\" serialization helpers in both this unit test and the fuzz test?\r\n\r\nOtherwise we might run into a corrupted fees.dat after an upgrade. A problem worse than the problem this pull is trying to solve (making fees.dat architecture independent).",
    "created_at": "2021-05-20T06:15:59Z",
    "updated_at": "2021-05-20T06:15:59Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21966#discussion_r635795210",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21966",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635795210"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21966#discussion_r635795210"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21966"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635795210/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 31,
    "original_line": 31,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635797201",
    "pull_request_review_id": 663980389,
    "id": 635797201,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTc5NzIwMQ==",
    "diff_hunk": "@@ -0,0 +1,92 @@\n+// Copyright (c) 2014-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/util/setup_common.h>\n+#include <util/serfloat.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cmath>\n+#include <limits>\n+\n+BOOST_FIXTURE_TEST_SUITE(serfloat_tests, BasicTestingSetup)\n+\n+namespace {\n+\n+uint64_t TestDouble(double f) {\n+    uint64_t i = EncodeDouble(f);\n+    double f2 = DecodeDouble(i);\n+    if (std::isnan(f)) {\n+        // NaN is not guaranteed to round-trip exactly.\n+        BOOST_CHECK(std::isnan(f2));\n+    } else {\n+        // Everything else is.\n+        BOOST_CHECK(!std::isnan(f2));\n+        uint64_t i2 = EncodeDouble(f2);\n+        BOOST_CHECK_EQUAL(f, f2);\n+        BOOST_CHECK_EQUAL(i, i2);",
    "path": "src/test/serfloat_tests.cpp",
    "position": 31,
    "original_position": 28,
    "commit_id": "66545da2008cd9e806e41b74522ded259cd64f86",
    "original_commit_id": "ae87a8aa4fc767f56cd6da0dfff3a91fcc22aae9",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Oh sorry, I see that is what the \"should produce exactly the same as the in-memory representation for non-NaN\" test is doing.",
    "created_at": "2021-05-20T06:20:15Z",
    "updated_at": "2021-05-20T06:20:15Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21966#discussion_r635797201",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21966",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635797201"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21966#discussion_r635797201"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21966"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635797201/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 31,
    "original_line": 31,
    "side": "RIGHT",
    "in_reply_to_id": 635795210
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635798794",
    "pull_request_review_id": 663982285,
    "id": 635798794,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTc5ODc5NA==",
    "diff_hunk": "@@ -0,0 +1,92 @@\n+// Copyright (c) 2014-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/util/setup_common.h>\n+#include <util/serfloat.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cmath>\n+#include <limits>\n+\n+BOOST_FIXTURE_TEST_SUITE(serfloat_tests, BasicTestingSetup)\n+\n+namespace {\n+\n+uint64_t TestDouble(double f) {\n+    uint64_t i = EncodeDouble(f);\n+    double f2 = DecodeDouble(i);\n+    if (std::isnan(f)) {\n+        // NaN is not guaranteed to round-trip exactly.\n+        BOOST_CHECK(std::isnan(f2));\n+    } else {\n+        // Everything else is.\n+        BOOST_CHECK(!std::isnan(f2));\n+        uint64_t i2 = EncodeDouble(f2);\n+        BOOST_CHECK_EQUAL(f, f2);\n+        BOOST_CHECK_EQUAL(i, i2);",
    "path": "src/test/serfloat_tests.cpp",
    "position": 31,
    "original_position": 28,
    "commit_id": "66545da2008cd9e806e41b74522ded259cd64f86",
    "original_commit_id": "ae87a8aa4fc767f56cd6da0dfff3a91fcc22aae9",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Though, it looks like the fuzz test isn't fuzzing the in-memory representation, only the round-trip?",
    "created_at": "2021-05-20T06:23:25Z",
    "updated_at": "2021-05-20T06:23:25Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21966#discussion_r635798794",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21966",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635798794"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21966#discussion_r635798794"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21966"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635798794/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 31,
    "original_line": 31,
    "side": "RIGHT",
    "in_reply_to_id": 635795210
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635799512",
    "pull_request_review_id": 663983204,
    "id": 635799512,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTc5OTUxMg==",
    "diff_hunk": "@@ -0,0 +1,92 @@\n+// Copyright (c) 2014-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/util/setup_common.h>\n+#include <util/serfloat.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cmath>\n+#include <limits>\n+\n+BOOST_FIXTURE_TEST_SUITE(serfloat_tests, BasicTestingSetup)\n+\n+namespace {\n+\n+uint64_t TestDouble(double f) {\n+    uint64_t i = EncodeDouble(f);\n+    double f2 = DecodeDouble(i);\n+    if (std::isnan(f)) {\n+        // NaN is not guaranteed to round-trip exactly.\n+        BOOST_CHECK(std::isnan(f2));\n+    } else {\n+        // Everything else is.\n+        BOOST_CHECK(!std::isnan(f2));\n+        uint64_t i2 = EncodeDouble(f2);\n+        BOOST_CHECK_EQUAL(f, f2);\n+        BOOST_CHECK_EQUAL(i, i2);\n+    }\n+    return i;\n+}\n+\n+} // namespace\n+\n+BOOST_AUTO_TEST_CASE(double_serfloat_tests) {\n+    BOOST_CHECK_EQUAL(TestDouble(0.0), 0);\n+    BOOST_CHECK_EQUAL(TestDouble(-0.0), 0x8000000000000000);\n+    BOOST_CHECK_EQUAL(TestDouble(std::numeric_limits<double>::infinity()), 0x7ff0000000000000);\n+    BOOST_CHECK_EQUAL(TestDouble(-std::numeric_limits<double>::infinity()), 0xfff0000000000000);\n+\n+    if (std::numeric_limits<float>::is_iec559) {",
    "path": "src/test/serfloat_tests.cpp",
    "position": null,
    "original_position": 41,
    "commit_id": "66545da2008cd9e806e41b74522ded259cd64f86",
    "original_commit_id": "ae87a8aa4fc767f56cd6da0dfff3a91fcc22aae9",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Any reason to check for float, but then test double?",
    "created_at": "2021-05-20T06:24:57Z",
    "updated_at": "2021-05-20T06:24:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21966#discussion_r635799512",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21966",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635799512"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21966#discussion_r635799512"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21966"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635799512/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 41,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638348520",
    "pull_request_review_id": 667265642,
    "id": 638348520,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODM0ODUyMA==",
    "diff_hunk": "@@ -0,0 +1,92 @@\n+// Copyright (c) 2014-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/util/setup_common.h>\n+#include <util/serfloat.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cmath>\n+#include <limits>\n+\n+BOOST_FIXTURE_TEST_SUITE(serfloat_tests, BasicTestingSetup)\n+\n+namespace {\n+\n+uint64_t TestDouble(double f) {\n+    uint64_t i = EncodeDouble(f);\n+    double f2 = DecodeDouble(i);\n+    if (std::isnan(f)) {\n+        // NaN is not guaranteed to round-trip exactly.\n+        BOOST_CHECK(std::isnan(f2));\n+    } else {\n+        // Everything else is.\n+        BOOST_CHECK(!std::isnan(f2));\n+        uint64_t i2 = EncodeDouble(f2);\n+        BOOST_CHECK_EQUAL(f, f2);\n+        BOOST_CHECK_EQUAL(i, i2);",
    "path": "src/test/serfloat_tests.cpp",
    "position": 31,
    "original_position": 28,
    "commit_id": "66545da2008cd9e806e41b74522ded259cd64f86",
    "original_commit_id": "ae87a8aa4fc767f56cd6da0dfff3a91fcc22aae9",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Added back.",
    "created_at": "2021-05-24T23:15:30Z",
    "updated_at": "2021-05-24T23:15:30Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21966#discussion_r638348520",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21966",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638348520"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21966#discussion_r638348520"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21966"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638348520/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 31,
    "original_line": 31,
    "side": "RIGHT",
    "in_reply_to_id": 635795210
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638348644",
    "pull_request_review_id": 667265775,
    "id": 638348644,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODM0ODY0NA==",
    "diff_hunk": "@@ -0,0 +1,92 @@\n+// Copyright (c) 2014-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/util/setup_common.h>\n+#include <util/serfloat.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cmath>\n+#include <limits>\n+\n+BOOST_FIXTURE_TEST_SUITE(serfloat_tests, BasicTestingSetup)\n+\n+namespace {\n+\n+uint64_t TestDouble(double f) {\n+    uint64_t i = EncodeDouble(f);\n+    double f2 = DecodeDouble(i);\n+    if (std::isnan(f)) {\n+        // NaN is not guaranteed to round-trip exactly.\n+        BOOST_CHECK(std::isnan(f2));\n+    } else {\n+        // Everything else is.\n+        BOOST_CHECK(!std::isnan(f2));\n+        uint64_t i2 = EncodeDouble(f2);\n+        BOOST_CHECK_EQUAL(f, f2);\n+        BOOST_CHECK_EQUAL(i, i2);\n+    }\n+    return i;\n+}\n+\n+} // namespace\n+\n+BOOST_AUTO_TEST_CASE(double_serfloat_tests) {\n+    BOOST_CHECK_EQUAL(TestDouble(0.0), 0);\n+    BOOST_CHECK_EQUAL(TestDouble(-0.0), 0x8000000000000000);\n+    BOOST_CHECK_EQUAL(TestDouble(std::numeric_limits<double>::infinity()), 0x7ff0000000000000);\n+    BOOST_CHECK_EQUAL(TestDouble(-std::numeric_limits<double>::infinity()), 0xfff0000000000000);\n+\n+    if (std::numeric_limits<float>::is_iec559) {",
    "path": "src/test/serfloat_tests.cpp",
    "position": null,
    "original_position": 41,
    "commit_id": "66545da2008cd9e806e41b74522ded259cd64f86",
    "original_commit_id": "ae87a8aa4fc767f56cd6da0dfff3a91fcc22aae9",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The technical term for this would be an \"oops\". Fixed.",
    "created_at": "2021-05-24T23:15:52Z",
    "updated_at": "2021-05-24T23:15:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21966#discussion_r638348644",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21966",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638348644"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21966#discussion_r638348644"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21966"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638348644/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 41,
    "side": "RIGHT",
    "in_reply_to_id": 635799512
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639111357",
    "pull_request_review_id": 668248681,
    "id": 639111357,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTExMTM1Nw==",
    "diff_hunk": "@@ -19,24 +19,17 @@ FUZZ_TARGET(float)\n     {\n         const double d = fuzzed_data_provider.ConsumeFloatingPoint<double>();\n         (void)memusage::DynamicUsage(d);\n-        assert(ser_uint64_to_double(ser_double_to_uint64(d)) == d);\n \n-        CDataStream stream(SER_NETWORK, INIT_PROTO_VERSION);\n-        stream << d;\n-        double d_deserialized;\n-        stream >> d_deserialized;\n-        assert(d == d_deserialized);\n-    }\n-\n-    {\n-        const float f = fuzzed_data_provider.ConsumeFloatingPoint<float>();\n-        (void)memusage::DynamicUsage(f);\n-        assert(ser_uint32_to_float(ser_float_to_uint32(f)) == f);\n-\n-        CDataStream stream(SER_NETWORK, INIT_PROTO_VERSION);\n-        stream << f;\n-        float f_deserialized;\n-        stream >> f_deserialized;\n-        assert(f == f_deserialized);\n+        uint64_t encoded = EncodeDouble(d);\n+        if constexpr (std::numeric_limits<double>::is_iec559) {",
    "path": "src/test/fuzz/float.cpp",
    "position": 42,
    "original_position": 42,
    "commit_id": "66545da2008cd9e806e41b74522ded259cd64f86",
    "original_commit_id": "66545da2008cd9e806e41b74522ded259cd64f86",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Note to other reviewers: We assume this to hold `true` in `assumptions.h`:\r\n\r\n```\r\nstatic_assert(std::numeric_limits<double>::is_iec559, \"IEEE 754 double assumed\");\r\n```",
    "created_at": "2021-05-25T19:08:09Z",
    "updated_at": "2021-05-25T19:08:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21966#discussion_r639111357",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21966",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639111357"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21966#discussion_r639111357"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21966"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639111357/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 24,
    "original_line": 24,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639111540",
    "pull_request_review_id": 668248943,
    "id": 639111540,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTExMTU0MA==",
    "diff_hunk": "@@ -0,0 +1,129 @@\n+// Copyright (c) 2014-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <test/util/setup_common.h>\n+#include <util/serfloat.h>\n+#include <serialize.h>\n+#include <streams.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cmath>\n+#include <limits>\n+\n+BOOST_FIXTURE_TEST_SUITE(serfloat_tests, BasicTestingSetup)\n+\n+namespace {\n+\n+uint64_t TestDouble(double f) {\n+    uint64_t i = EncodeDouble(f);\n+    double f2 = DecodeDouble(i);\n+    if (std::isnan(f)) {\n+        // NaN is not guaranteed to round-trip exactly.\n+        BOOST_CHECK(std::isnan(f2));\n+    } else {\n+        // Everything else is.\n+        BOOST_CHECK(!std::isnan(f2));\n+        uint64_t i2 = EncodeDouble(f2);\n+        BOOST_CHECK_EQUAL(f, f2);\n+        BOOST_CHECK_EQUAL(i, i2);\n+    }\n+    return i;\n+}\n+\n+} // namespace\n+\n+BOOST_AUTO_TEST_CASE(double_serfloat_tests) {\n+    BOOST_CHECK_EQUAL(TestDouble(0.0), 0);\n+    BOOST_CHECK_EQUAL(TestDouble(-0.0), 0x8000000000000000);\n+    BOOST_CHECK_EQUAL(TestDouble(std::numeric_limits<double>::infinity()), 0x7ff0000000000000);\n+    BOOST_CHECK_EQUAL(TestDouble(-std::numeric_limits<double>::infinity()), 0xfff0000000000000);\n+    BOOST_CHECK_EQUAL(TestDouble(0.5), 0x3fe0000000000000ULL);\n+    BOOST_CHECK_EQUAL(TestDouble(1.0), 0x3ff0000000000000ULL);\n+    BOOST_CHECK_EQUAL(TestDouble(2.0), 0x4000000000000000ULL);\n+    BOOST_CHECK_EQUAL(TestDouble(4.0), 0x4010000000000000ULL);\n+    BOOST_CHECK_EQUAL(TestDouble(785.066650390625), 0x4088888880000000ULL);\n+\n+    // Roundtrip test on IEC559-compatible systems\n+    if (std::numeric_limits<double>::is_iec559) {",
    "path": "src/test/serfloat_tests.cpp",
    "position": 50,
    "original_position": 50,
    "commit_id": "66545da2008cd9e806e41b74522ded259cd64f86",
    "original_commit_id": "66545da2008cd9e806e41b74522ded259cd64f86",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Note to other reviewers: We assume this to hold `true` in `assumptions.h`:\r\n\r\n```\r\nstatic_assert(std::numeric_limits<double>::is_iec559, \"IEEE 754 double assumed\");\r\n```",
    "created_at": "2021-05-25T19:08:29Z",
    "updated_at": "2021-05-25T19:08:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21966#discussion_r639111540",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21966",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639111540"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21966#discussion_r639111540"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21966"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639111540/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 50,
    "original_line": 50,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639113267",
    "pull_request_review_id": 668251331,
    "id": 639113267,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTExMzI2Nw==",
    "diff_hunk": "@@ -0,0 +1,129 @@\n+// Copyright (c) 2014-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <test/util/setup_common.h>\n+#include <util/serfloat.h>\n+#include <serialize.h>\n+#include <streams.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cmath>\n+#include <limits>\n+\n+BOOST_FIXTURE_TEST_SUITE(serfloat_tests, BasicTestingSetup)\n+\n+namespace {\n+\n+uint64_t TestDouble(double f) {\n+    uint64_t i = EncodeDouble(f);\n+    double f2 = DecodeDouble(i);\n+    if (std::isnan(f)) {\n+        // NaN is not guaranteed to round-trip exactly.\n+        BOOST_CHECK(std::isnan(f2));\n+    } else {\n+        // Everything else is.\n+        BOOST_CHECK(!std::isnan(f2));\n+        uint64_t i2 = EncodeDouble(f2);\n+        BOOST_CHECK_EQUAL(f, f2);\n+        BOOST_CHECK_EQUAL(i, i2);\n+    }\n+    return i;\n+}\n+\n+} // namespace\n+\n+BOOST_AUTO_TEST_CASE(double_serfloat_tests) {\n+    BOOST_CHECK_EQUAL(TestDouble(0.0), 0);\n+    BOOST_CHECK_EQUAL(TestDouble(-0.0), 0x8000000000000000);\n+    BOOST_CHECK_EQUAL(TestDouble(std::numeric_limits<double>::infinity()), 0x7ff0000000000000);\n+    BOOST_CHECK_EQUAL(TestDouble(-std::numeric_limits<double>::infinity()), 0xfff0000000000000);\n+    BOOST_CHECK_EQUAL(TestDouble(0.5), 0x3fe0000000000000ULL);\n+    BOOST_CHECK_EQUAL(TestDouble(1.0), 0x3ff0000000000000ULL);\n+    BOOST_CHECK_EQUAL(TestDouble(2.0), 0x4000000000000000ULL);\n+    BOOST_CHECK_EQUAL(TestDouble(4.0), 0x4010000000000000ULL);\n+    BOOST_CHECK_EQUAL(TestDouble(785.066650390625), 0x4088888880000000ULL);\n+\n+    // Roundtrip test on IEC559-compatible systems\n+    if (std::numeric_limits<double>::is_iec559) {",
    "path": "src/test/serfloat_tests.cpp",
    "position": 50,
    "original_position": 50,
    "commit_id": "66545da2008cd9e806e41b74522ded259cd64f86",
    "original_commit_id": "66545da2008cd9e806e41b74522ded259cd64f86",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I should remove that assumption now, it's no longer needed.",
    "created_at": "2021-05-25T19:11:20Z",
    "updated_at": "2021-05-25T19:11:20Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21966#discussion_r639113267",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21966",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639113267"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21966#discussion_r639113267"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21966"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639113267/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 50,
    "original_line": 50,
    "side": "RIGHT",
    "in_reply_to_id": 639111540
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639125203",
    "pull_request_review_id": 668268144,
    "id": 639125203,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTEyNTIwMw==",
    "diff_hunk": "@@ -0,0 +1,129 @@\n+// Copyright (c) 2014-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <test/util/setup_common.h>\n+#include <util/serfloat.h>\n+#include <serialize.h>\n+#include <streams.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cmath>\n+#include <limits>\n+\n+BOOST_FIXTURE_TEST_SUITE(serfloat_tests, BasicTestingSetup)\n+\n+namespace {\n+\n+uint64_t TestDouble(double f) {\n+    uint64_t i = EncodeDouble(f);\n+    double f2 = DecodeDouble(i);\n+    if (std::isnan(f)) {\n+        // NaN is not guaranteed to round-trip exactly.\n+        BOOST_CHECK(std::isnan(f2));\n+    } else {\n+        // Everything else is.\n+        BOOST_CHECK(!std::isnan(f2));\n+        uint64_t i2 = EncodeDouble(f2);\n+        BOOST_CHECK_EQUAL(f, f2);\n+        BOOST_CHECK_EQUAL(i, i2);\n+    }\n+    return i;\n+}\n+\n+} // namespace\n+\n+BOOST_AUTO_TEST_CASE(double_serfloat_tests) {\n+    BOOST_CHECK_EQUAL(TestDouble(0.0), 0);\n+    BOOST_CHECK_EQUAL(TestDouble(-0.0), 0x8000000000000000);\n+    BOOST_CHECK_EQUAL(TestDouble(std::numeric_limits<double>::infinity()), 0x7ff0000000000000);\n+    BOOST_CHECK_EQUAL(TestDouble(-std::numeric_limits<double>::infinity()), 0xfff0000000000000);\n+    BOOST_CHECK_EQUAL(TestDouble(0.5), 0x3fe0000000000000ULL);\n+    BOOST_CHECK_EQUAL(TestDouble(1.0), 0x3ff0000000000000ULL);\n+    BOOST_CHECK_EQUAL(TestDouble(2.0), 0x4000000000000000ULL);\n+    BOOST_CHECK_EQUAL(TestDouble(4.0), 0x4010000000000000ULL);\n+    BOOST_CHECK_EQUAL(TestDouble(785.066650390625), 0x4088888880000000ULL);\n+\n+    // Roundtrip test on IEC559-compatible systems\n+    if (std::numeric_limits<double>::is_iec559) {",
    "path": "src/test/serfloat_tests.cpp",
    "position": 50,
    "original_position": 50,
    "commit_id": "66545da2008cd9e806e41b74522ded259cd64f86",
    "original_commit_id": "66545da2008cd9e806e41b74522ded259cd64f86",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think we need that assumption as long as we're doing floating-point division by zero? I still think we do that in `ConnectBlock`, `CreateTransaction`  and `EstimateMedianVal` :)",
    "created_at": "2021-05-25T19:30:32Z",
    "updated_at": "2021-05-25T19:30:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21966#discussion_r639125203",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21966",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639125203"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21966#discussion_r639125203"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21966"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639125203/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 50,
    "original_line": 50,
    "side": "RIGHT",
    "in_reply_to_id": 639111540
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639128383",
    "pull_request_review_id": 668272286,
    "id": 639128383,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTEyODM4Mw==",
    "diff_hunk": "@@ -0,0 +1,129 @@\n+// Copyright (c) 2014-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <test/util/setup_common.h>\n+#include <util/serfloat.h>\n+#include <serialize.h>\n+#include <streams.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cmath>\n+#include <limits>\n+\n+BOOST_FIXTURE_TEST_SUITE(serfloat_tests, BasicTestingSetup)\n+\n+namespace {\n+\n+uint64_t TestDouble(double f) {\n+    uint64_t i = EncodeDouble(f);\n+    double f2 = DecodeDouble(i);\n+    if (std::isnan(f)) {\n+        // NaN is not guaranteed to round-trip exactly.\n+        BOOST_CHECK(std::isnan(f2));\n+    } else {\n+        // Everything else is.\n+        BOOST_CHECK(!std::isnan(f2));\n+        uint64_t i2 = EncodeDouble(f2);\n+        BOOST_CHECK_EQUAL(f, f2);\n+        BOOST_CHECK_EQUAL(i, i2);\n+    }\n+    return i;\n+}\n+\n+} // namespace\n+\n+BOOST_AUTO_TEST_CASE(double_serfloat_tests) {\n+    BOOST_CHECK_EQUAL(TestDouble(0.0), 0);\n+    BOOST_CHECK_EQUAL(TestDouble(-0.0), 0x8000000000000000);\n+    BOOST_CHECK_EQUAL(TestDouble(std::numeric_limits<double>::infinity()), 0x7ff0000000000000);\n+    BOOST_CHECK_EQUAL(TestDouble(-std::numeric_limits<double>::infinity()), 0xfff0000000000000);\n+    BOOST_CHECK_EQUAL(TestDouble(0.5), 0x3fe0000000000000ULL);\n+    BOOST_CHECK_EQUAL(TestDouble(1.0), 0x3ff0000000000000ULL);\n+    BOOST_CHECK_EQUAL(TestDouble(2.0), 0x4000000000000000ULL);\n+    BOOST_CHECK_EQUAL(TestDouble(4.0), 0x4010000000000000ULL);\n+    BOOST_CHECK_EQUAL(TestDouble(785.066650390625), 0x4088888880000000ULL);\n+\n+    // Roundtrip test on IEC559-compatible systems\n+    if (std::numeric_limits<double>::is_iec559) {",
    "path": "src/test/serfloat_tests.cpp",
    "position": 50,
    "original_position": 50,
    "commit_id": "66545da2008cd9e806e41b74522ded259cd64f86",
    "original_commit_id": "66545da2008cd9e806e41b74522ded259cd64f86",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ah, good point.",
    "created_at": "2021-05-25T19:35:46Z",
    "updated_at": "2021-05-25T19:35:46Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21966#discussion_r639128383",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21966",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639128383"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21966#discussion_r639128383"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21966"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639128383/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 50,
    "original_line": 50,
    "side": "RIGHT",
    "in_reply_to_id": 639111540
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639485049",
    "pull_request_review_id": 668702773,
    "id": 639485049,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTQ4NTA0OQ==",
    "diff_hunk": "@@ -0,0 +1,129 @@\n+// Copyright (c) 2014-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <test/util/setup_common.h>\n+#include <util/serfloat.h>\n+#include <serialize.h>\n+#include <streams.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cmath>\n+#include <limits>\n+\n+BOOST_FIXTURE_TEST_SUITE(serfloat_tests, BasicTestingSetup)\n+\n+namespace {\n+\n+uint64_t TestDouble(double f) {\n+    uint64_t i = EncodeDouble(f);\n+    double f2 = DecodeDouble(i);\n+    if (std::isnan(f)) {\n+        // NaN is not guaranteed to round-trip exactly.\n+        BOOST_CHECK(std::isnan(f2));\n+    } else {\n+        // Everything else is.\n+        BOOST_CHECK(!std::isnan(f2));\n+        uint64_t i2 = EncodeDouble(f2);\n+        BOOST_CHECK_EQUAL(f, f2);\n+        BOOST_CHECK_EQUAL(i, i2);\n+    }\n+    return i;\n+}\n+\n+} // namespace\n+\n+BOOST_AUTO_TEST_CASE(double_serfloat_tests) {\n+    BOOST_CHECK_EQUAL(TestDouble(0.0), 0);\n+    BOOST_CHECK_EQUAL(TestDouble(-0.0), 0x8000000000000000);\n+    BOOST_CHECK_EQUAL(TestDouble(std::numeric_limits<double>::infinity()), 0x7ff0000000000000);\n+    BOOST_CHECK_EQUAL(TestDouble(-std::numeric_limits<double>::infinity()), 0xfff0000000000000);\n+    BOOST_CHECK_EQUAL(TestDouble(0.5), 0x3fe0000000000000ULL);\n+    BOOST_CHECK_EQUAL(TestDouble(1.0), 0x3ff0000000000000ULL);\n+    BOOST_CHECK_EQUAL(TestDouble(2.0), 0x4000000000000000ULL);\n+    BOOST_CHECK_EQUAL(TestDouble(4.0), 0x4010000000000000ULL);\n+    BOOST_CHECK_EQUAL(TestDouble(785.066650390625), 0x4088888880000000ULL);\n+\n+    // Roundtrip test on IEC559-compatible systems\n+    if (std::numeric_limits<double>::is_iec559) {",
    "path": "src/test/serfloat_tests.cpp",
    "position": 50,
    "original_position": 50,
    "commit_id": "66545da2008cd9e806e41b74522ded259cd64f86",
    "original_commit_id": "66545da2008cd9e806e41b74522ded259cd64f86",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe a weaker assumption could do there. In any case, it's out of scope for this PR. Happy to leave it as it is for the foreseeable future unless anyone has good reason to work on porting bitcoind to non-IEC559 platforms.\r\n\r\n(in which case I heartily suggest: please get rid of *all* floating point code. it shouldn't be necessary in financial-ish code)",
    "created_at": "2021-05-26T07:52:37Z",
    "updated_at": "2021-05-26T07:56:17Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21966#discussion_r639485049",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21966",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639485049"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21966#discussion_r639485049"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21966"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639485049/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 50,
    "original_line": 50,
    "side": "RIGHT",
    "in_reply_to_id": 639111540
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/646459605",
    "pull_request_review_id": 677237344,
    "id": 646459605,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NjQ1OTYwNQ==",
    "diff_hunk": "@@ -0,0 +1,92 @@\n+// Copyright (c) 2014-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/util/setup_common.h>\n+#include <util/serfloat.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cmath>\n+#include <limits>\n+\n+BOOST_FIXTURE_TEST_SUITE(serfloat_tests, BasicTestingSetup)\n+\n+namespace {\n+\n+uint64_t TestDouble(double f) {\n+    uint64_t i = EncodeDouble(f);\n+    double f2 = DecodeDouble(i);\n+    if (std::isnan(f)) {\n+        // NaN is not guaranteed to round-trip exactly.\n+        BOOST_CHECK(std::isnan(f2));\n+    } else {\n+        // Everything else is.\n+        BOOST_CHECK(!std::isnan(f2));\n+        uint64_t i2 = EncodeDouble(f2);\n+        BOOST_CHECK_EQUAL(f, f2);\n+        BOOST_CHECK_EQUAL(i, i2);",
    "path": "src/test/serfloat_tests.cpp",
    "position": 31,
    "original_position": 28,
    "commit_id": "66545da2008cd9e806e41b74522ded259cd64f86",
    "original_commit_id": "ae87a8aa4fc767f56cd6da0dfff3a91fcc22aae9",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ah thanks, though the `fuzzed_data_provider.ConsumeFloatingPoint` only consumes \"nice\" floats, not odd ones. So the fuzzer is only testing the happy path.",
    "created_at": "2021-06-07T10:22:08Z",
    "updated_at": "2021-06-07T10:22:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21966#discussion_r646459605",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21966",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/646459605"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21966#discussion_r646459605"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21966"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/646459605/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 31,
    "original_line": 31,
    "side": "RIGHT",
    "in_reply_to_id": 635795210
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/646519694",
    "pull_request_review_id": 677319328,
    "id": 646519694,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NjUxOTY5NA==",
    "diff_hunk": "@@ -0,0 +1,92 @@\n+// Copyright (c) 2014-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/util/setup_common.h>\n+#include <util/serfloat.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cmath>\n+#include <limits>\n+\n+BOOST_FIXTURE_TEST_SUITE(serfloat_tests, BasicTestingSetup)\n+\n+namespace {\n+\n+uint64_t TestDouble(double f) {\n+    uint64_t i = EncodeDouble(f);\n+    double f2 = DecodeDouble(i);\n+    if (std::isnan(f)) {\n+        // NaN is not guaranteed to round-trip exactly.\n+        BOOST_CHECK(std::isnan(f2));\n+    } else {\n+        // Everything else is.\n+        BOOST_CHECK(!std::isnan(f2));\n+        uint64_t i2 = EncodeDouble(f2);\n+        BOOST_CHECK_EQUAL(f, f2);\n+        BOOST_CHECK_EQUAL(i, i2);",
    "path": "src/test/serfloat_tests.cpp",
    "position": 31,
    "original_position": 28,
    "commit_id": "66545da2008cd9e806e41b74522ded259cd64f86",
    "original_commit_id": "ae87a8aa4fc767f56cd6da0dfff3a91fcc22aae9",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed in #22180 ",
    "created_at": "2021-06-07T11:56:31Z",
    "updated_at": "2021-06-07T11:56:31Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21966#discussion_r646519694",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21966",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/646519694"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21966#discussion_r646519694"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21966"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/646519694/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 31,
    "original_line": 31,
    "side": "RIGHT",
    "in_reply_to_id": 635795210
  }
]