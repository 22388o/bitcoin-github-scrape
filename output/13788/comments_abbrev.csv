laanwj,2018-07-30T13:34:09Z,"makes sense, utACK 4207c1b35c2e2ee1c9217cc7db3290a24c3b4b52",https://github.com/bitcoin/bitcoin/pull/13788#issuecomment-408864722,408864722,
achow101,2018-08-08T00:51:12Z,utACK 4207c1b35c2e2ee1c9217cc7db3290a24c3b4b52,https://github.com/bitcoin/bitcoin/pull/13788#issuecomment-411248503,411248503,
ken2812221,2018-08-08T03:45:36Z,ACK 4207c1b35c2e2ee1c9217cc7db3290a24c3b4b52,https://github.com/bitcoin/bitcoin/pull/13788#issuecomment-411275073,411275073,
sipa,2018-08-08T06:43:50Z,"The variables `enable_hwcrc`, `enable_sse41`, `enable_avx2`, and `enable_shani` do not control inclusion of assembly code, but C++ with intrinsics. See my comment here: https://github.com/bitcoin/bitcoin/issues/13759#issuecomment-411301168.\n\nOverall my preference would be to remove that compilation flag, as I don't know under what conditions I'd suggest someone disable it.",https://github.com/bitcoin/bitcoin/pull/13788#issuecomment-411303380,411303380,
laanwj,2018-08-08T11:34:27Z,"> do not control inclusion of assembly code, but C++ with intrinsic\n\nI think many people interpret asm as ""special instructions"", independent of whether these are emitted though inline assembly or intrinsics.\n\n> as I don't know under what conditions I'd suggest someone disable it.\n\nAlso not sure on this. Clearly they should be disabled if the compiler doesn't know the intrinsics, but t",https://github.com/bitcoin/bitcoin/pull/13788#issuecomment-411375443,411375443,
laanwj,2018-08-15T14:22:55Z,Removing 0.17.0 milestone,https://github.com/bitcoin/bitcoin/pull/13788#issuecomment-413213311,413213311,
laanwj,2018-11-23T07:31:32Z,"> Overall my preference would be to remove that compilation flag, as I don't know under what conditions I'd suggest someone disable it.\n\nRecently there was someone with an edge case in the IRC channel with regard to assembly, where they needed to disable it to build. So I think it would be a bad idea to remove it.\n\nEdit: ah this was @MarcoFalke:\n```\n2018-11-19 17:05:41     MarcoFalke  ",https://github.com/bitcoin/bitcoin/pull/13788#issuecomment-441170532,441170532,
MarcoFalke,2019-04-08T15:39:01Z,@luke-jr Is this still relevant after the recent discussion?,https://github.com/bitcoin/bitcoin/pull/13788#issuecomment-480884919,480884919,
luke-jr,2019-04-08T17:14:25Z,"I don't know of any recent discussion, unless you mean the one quoted by @laanwj 6 months ago...\n\nI don't see why it would cease to be relevant.",https://github.com/bitcoin/bitcoin/pull/13788#issuecomment-480921825,480921825,
laanwj,2019-04-08T17:27:41Z,Maybe would make sense to discuss this at the IRC meeting,https://github.com/bitcoin/bitcoin/pull/13788#issuecomment-480926657,480926657,
practicalswift,2019-04-09T07:55:08Z,"Concept ACK\n\nPlease don't remove `--disable-asm` -- I often find the need for it when working with ""non-vanilla compilation setups"" such as when trying out research prototypes/research compiler extensions. A recent example was this EffectiveSan case https://github.com/GJDuck/EffectiveSan/issues/2#issuecomment-454262478 where `--disable-asm` was needed.\n\nMore about EffectiveSan:\n* Gregory",https://github.com/bitcoin/bitcoin/pull/13788#issuecomment-481143930,481143930,
laanwj,2019-04-09T08:40:10Z,"> Please don't remove --disable-asm -- I often find the need for it when working with ""non-vanilla compilation setups"" such as when trying out research prototypes/research compiler extensions.\n\nSo does anyone agree with my idea of how disable-asm should be interpreted? It would, in your context, be the expected behavior too I think.\n\n> I think many people interpret asm as ""special instruct",https://github.com/bitcoin/bitcoin/pull/13788#issuecomment-481158759,481158759,
practicalswift,2019-04-09T09:01:09Z,"> I think many people interpret asm as ""special instructions"", independent of whether these are emitted though inline assembly or intrinsics.\n\n@laanwj Yes, agreed!",https://github.com/bitcoin/bitcoin/pull/13788#issuecomment-481166283,481166283,
luke-jr,2019-04-09T12:05:44Z,"Yes, that's the intent of this change.",https://github.com/bitcoin/bitcoin/pull/13788#issuecomment-481223269,481223269,
DrahtBot,2019-04-10T09:04:25Z,<!--a722867cd34abeea1fadc8d60700f111-->\nGitian builds for commit a238fccce84bcd5544e88bdc37bf5b9b387d2164 (master):\n * `7995af47876bf2c2a3599ed6c270ad5d...` [bitcoin-0.18.99-aarch64-linux-gnu-debug.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/a238fccce84bcd5544e88bdc37bf5b9b387d2164/bitcoin-0.18.99-aarch64-linux-gnu-debug.tar.gz)\n * `1a0d18c47a5258f98149417693e44c60...` [bitcoin-0.18.9,https://github.com/bitcoin/bitcoin/pull/13788#issuecomment-481606552,481606552,
sipa,2019-04-11T20:06:58Z,"If the goal is appeasing platforms where autodetection or these optimizations fail for some other reason, it makes sense to have the option include the intrinsics.\n\nI don't care too strongly about the naming.",https://github.com/bitcoin/bitcoin/pull/13788#issuecomment-482291888,482291888,
practicalswift,2019-04-26T13:45:11Z,"tACK 4207c1b35c2e2ee1c9217cc7db3290a24c3b4b52\n\nNow at two ACKs and two utACK:s -- perhaps ready for merge?\n\nThat would help me since I frequently find the need for a `--disable-asm` working the way this PR makes it do. Currently I have to emulate this behaviour by manually patching `configure.ac` :-)\n\n",https://github.com/bitcoin/bitcoin/pull/13788#issuecomment-487062240,487062240,
