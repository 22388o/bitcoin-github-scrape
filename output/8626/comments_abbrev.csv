netsafe,2016-08-30T06:09:18Z,I've originally found it for namecoin - all the detalis there https://github.com/namecoin/namecoin-core/pull/101\n,https://github.com/bitcoin/bitcoin/pull/8626#issuecomment-243342290,243342290,
jonasschnelli,2016-08-30T06:38:19Z,I think this change makes sense.\nBDB upstream documentation for the `DbEnv` constructor: https://docs.oracle.com/cd/E17276_01/html/api_reference/CXX/envcreate.html\n,https://github.com/bitcoin/bitcoin/pull/8626#issuecomment-243346886,243346886,
luke-jr,2016-08-30T07:21:30Z,"It might actually be a good idea to fail to build against BDB 6... it changed the license to AGPL, and so users will by default be infringing if they just use Bitcoin Core as-is this way (as AGPL requires providing source code to every peer).\n\nThat said, I don't really care strongly either way. Perhaps a clear warning somewhere would be better.\n",https://github.com/bitcoin/bitcoin/pull/8626#issuecomment-243354592,243354592,
netsafe,2016-08-30T07:25:45Z,"@luke-jr and the code _is_ open to every peer, actually - the peer is running an open-source Bitcoin core. What exact do you mean by infringing the license? I see no license is broken here http://www.oracle.com/technetwork/database/berkeleydb/downloads/oslicense-093458.html\n",https://github.com/bitcoin/bitcoin/pull/8626#issuecomment-243355446,243355446,
luke-jr,2016-08-30T07:33:19Z,"@netsafe It's not enough that _someone else_ is sharing the code; the person running the software would need to do so, or at least provide notice to each peer how to get it. Right now, Bitcoin Core doesn't do even the notice. That being said, skimming over the AGPL again it seems this requirement exists only for modified versions, so it's probably less of an issue than it seems at face value. But ",https://github.com/bitcoin/bitcoin/pull/8626#issuecomment-243357020,243357020,
netsafe,2016-08-30T07:41:28Z,"@luke-jr I'm not caring that deep too. As far as I understood this situation, AGPL will fire the way we're speaking **only if it's a client-server** architecture. But in a P2P case - which is a case for Bitcoin - all peers not just should have the same source code, but they're explicitly obliged to : or the network will fall apart because it's nodes won't be able to work together in the same way. ",https://github.com/bitcoin/bitcoin/pull/8626#issuecomment-243358616,243358616,
luke-jr,2016-08-30T07:45:45Z,"P2P is just ""everyone is a client and server to each other"". It's stronger with AGPL, not weaker.\n\nThere is absolutely no requirement for all nodes to be running the same source code, only that they be using the same consensus logic, which is a subset of the full program (and doesn't touch the BDB-related code at all).\n",https://github.com/bitcoin/bitcoin/pull/8626#issuecomment-243359515,243359515,
laanwj,2016-08-30T08:06:45Z,"> It might actually be a good idea to fail to build against BDB 6...\n\nLet's not get involved in copyfights here but focus on the technical side - apparently someone wants to fix building with BDB 6, and if the code changes are acceptable (and don't regress BDB 4/5 support), let's just accept that.\n",https://github.com/bitcoin/bitcoin/pull/8626#issuecomment-243364272,243364272,
netsafe,2016-08-30T08:24:52Z,@laanwj It does not breaks 4/5 BDB support - test build confirms it too\n\nOfficial docs http://docs.oracle.com/cd/E17076_02/html/api_reference/CXX/BDB-CXX_APIReference.pdf page 226 : \n\n> ```\n> #include <db_cxx.h>\n> ```\n> \n> class DbEnv {\n> public:\n>  DbEnv(u_int32 flags);\n>  ~DbEnv();\n>  DB_ENV *DbEnv::get_DB_ENV();\n>  const DB_ENV *DbEnv::get_const_DB_ENV() const;\n>  static DbEnv *Db,https://github.com/bitcoin/bitcoin/pull/8626#issuecomment-243368466,243368466,
paveljanik,2016-08-30T09:01:27Z,ACK https://github.com/bitcoin/bitcoin/pull/8626/commits/323a5fe06af43d3922a435e696d6c52acc6fade1\n,https://github.com/bitcoin/bitcoin/pull/8626#issuecomment-243377392,243377392,
netsafe,2016-08-30T09:09:38Z,"the configuration string that I'm using for Berkeley DB is - in `build_unix` folder : \n\n>   ../dist/configure --prefix=/usr --enable-dbm --enable-cxx --enable-compat185 --enable-server --enable-o_direct --with-cryptography=yes --enable-sql --enable-sql_compat --enable-sql_codegen --enable-stl --enable-localization\n\nversions 6.2.23, 5.3.28 and 4.8.30 are producing db_cxx.h that contains the sam",https://github.com/bitcoin/bitcoin/pull/8626#issuecomment-243379338,243379338,
laanwj,2016-08-30T10:19:11Z,utACK https://github.com/bitcoin/bitcoin/pull/8626/commits/323a5fe06af43d3922a435e696d6c52acc6fade1\n,https://github.com/bitcoin/bitcoin/pull/8626#issuecomment-243396657,243396657,
sipa,2016-08-30T13:14:19Z,utACK 323a5fe06af43d3922a435e696d6c52acc6fade1\n,https://github.com/bitcoin/bitcoin/pull/8626#issuecomment-243434283,243434283,
laanwj,2016-08-30T08:42:31Z,Would the c++11 keyword `nullptr` work here?\n,https://github.com/bitcoin/bitcoin/pull/8626#discussion_r76752907,76752907,src/wallet/db.cpp
netsafe,2016-08-30T08:50:15Z,"No, it must be zero _and_ explicitly of type u_int32_t : ""The flags parameter must be set to 0."" in the docs it's stated strictly\n",https://github.com/bitcoin/bitcoin/pull/8626#discussion_r76754097,76754097,src/wallet/db.cpp
laanwj,2016-08-30T10:18:24Z,"Oh right! I was misreading, you're not casting 0 to a pointer.\n",https://github.com/bitcoin/bitcoin/pull/8626#discussion_r76768161,76768161,src/wallet/db.cpp
