[
  {
    "sha": "7f9e9683a9525ac5dee9fa00c97d937063b3e886",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZjllOTY4M2E5NTI1YWM1ZGVlOWZhMDBjOTdkOTM3MDYzYjNlODg2",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-05-09T09:37:09Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-05-09T13:56:57Z"
      },
      "message": "Do not use cookie auth if -rpcauth set\n\nEnsure that the auth cookie is still generated in regtest if rpcpassword\nis not provided.",
      "tree": {
        "sha": "0a30c72b7d4d4fc2da6cae0b5d20676dee03d28e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a30c72b7d4d4fc2da6cae0b5d20676dee03d28e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f9e9683a9525ac5dee9fa00c97d937063b3e886",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAlzUMg8ACgkQQQEIES5+\nqB8w6w/9E1+4WI69TxY2fy4Ir0iTWYXbvWR7R8BUMehL2Y0Cbr2YMhSbr60xF8/g\nhqUECeVxDhEX4HptKfWwx3yTKzu9QqsVX9r8hcEG5AOAZXybe1NrsCvWQkc5QJdi\ny0wBQfMcbJHsjInKSTQvcseMcFZcb0BO4HAqXg7l6lCnxwpDX31w9ATB6p65S7pE\ntsUpb9Q66PFyGykt/OY3Zag74fzkZLDNz7aGs1o0hDbPy4Zeez7LV12Gh5ceuAnM\n+juUK7FsgSNvaJ4q/ALArmOajbAMMiYZuObjoIEuZbFzEDrOSNSuF8G29vlTlIGi\nyqMZPVQFslO77xjdOK5KnEPxuzUWEWqmP7L/hE9JFcCBOhhH5TcCa8DSvD8C9Xqe\nihelAm6ufkkr6+v+R0/FyAtk/6pQD6onyTqM4do1pYe/O7pAiKU6XZ55+fPx0Y/5\ndCwsYQaSCiev7TGeL5FxRgn89g2eTp+ywLKb4pSTQcGypHZIF7aIIS9VaO/2Gw4L\nzpb3quy7zy/XlR2ueFK4/uGbGu6XnvGe2YYs3QGICIqnERldf5/DL4yx+snxmjKp\ndXCtjgMJ0sh0L4icn58o1JU0CIHGlLIJRjau09D/A/5RkPIlzUJnnyGHFjLzYXZi\nSGKBtRqdNUg2G5OCMkX4Bs5GYXMdkPI+sy8WjC6zZ6Hq5DTCxlE=\n=qV/o\n-----END PGP SIGNATURE-----",
        "payload": "tree 0a30c72b7d4d4fc2da6cae0b5d20676dee03d28e\nparent 08788ce1701aed00fd2946f9a3b3e1f83526d4d2\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1557394629 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1557410217 +0300\n\nDo not use cookie auth if -rpcauth set\n\nEnsure that the auth cookie is still generated in regtest if rpcpassword\nis not provided.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f9e9683a9525ac5dee9fa00c97d937063b3e886",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f9e9683a9525ac5dee9fa00c97d937063b3e886",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f9e9683a9525ac5dee9fa00c97d937063b3e886/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "08788ce1701aed00fd2946f9a3b3e1f83526d4d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08788ce1701aed00fd2946f9a3b3e1f83526d4d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/08788ce1701aed00fd2946f9a3b3e1f83526d4d2"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 18,
      "deletions": 18
    },
    "files": [
      {
        "sha": "cdb11fdc4e453a2a7e53e7bc2b30cbd0cf0b7fad",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f9e9683a9525ac5dee9fa00c97d937063b3e886/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f9e9683a9525ac5dee9fa00c97d937063b3e886/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=7f9e9683a9525ac5dee9fa00c97d937063b3e886",
        "patch": "@@ -127,8 +127,6 @@ static bool multiUserAuthorized(std::string strUserPass)\n \n static bool RPCAuthorized(const std::string& strAuth, std::string& strAuthUsernameOut)\n {\n-    if (strRPCUserColonPass.empty()) // Belt-and-suspenders measure if InitRPCAuthentication was not called\n-        return false;\n     if (strAuth.substr(0, 6) != \"Basic \")\n         return false;\n     std::string strUserPass64 = strAuth.substr(6);\n@@ -138,11 +136,11 @@ static bool RPCAuthorized(const std::string& strAuth, std::string& strAuthUserna\n     if (strUserPass.find(':') != std::string::npos)\n         strAuthUsernameOut = strUserPass.substr(0, strUserPass.find(':'));\n \n-    //Check if authorized under single-user field\n-    if (TimingResistantEqual(strUserPass, strRPCUserColonPass)) {\n+    if (multiUserAuthorized(strUserPass)) {\n         return true;\n     }\n-    return multiUserAuthorized(strUserPass);\n+\n+    return !strRPCUserColonPass.empty() && TimingResistantEqual(strUserPass, strRPCUserColonPass);\n }\n \n static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n@@ -214,22 +212,24 @@ static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n \n static bool InitRPCAuthentication()\n {\n-    if (gArgs.GetArg(\"-rpcpassword\", \"\") == \"\")\n-    {\n-        LogPrintf(\"No rpcpassword set - using random cookie authentication.\\n\");\n-        if (!GenerateAuthCookie(&strRPCUserColonPass)) {\n-            uiInterface.ThreadSafeMessageBox(\n-                _(\"Error: A fatal internal error occurred, see debug.log for details\"), // Same message as AbortNode\n-                \"\", CClientUIInterface::MSG_ERROR);\n-            return false;\n+    if (!gArgs.GetArg(\"-rpcauth\", \"\").empty()) {\n+        LogPrintf(\"Using -rpcauth authentication.\\n\");\n+        if (gArgs.GetChainName() != CBaseChainParams::REGTEST) {\n+            return true;\n         }\n-    } else {\n-        LogPrintf(\"Config options rpcuser and rpcpassword will soon be deprecated. Locally-run instances may remove rpcuser to use cookie-based auth, or may be replaced with rpcauth. Please see share/rpcauth for rpcauth auth generation.\\n\");\n+    } else if (!gArgs.GetArg(\"-rpcpassword\", \"\").empty()) {\n+        LogPrintf(\"Config options -rpcuser and -rpcpassword will soon be deprecated. Please see share/rpcauth for -rpcauth auth generation.\\n\");\n         strRPCUserColonPass = gArgs.GetArg(\"-rpcuser\", \"\") + \":\" + gArgs.GetArg(\"-rpcpassword\", \"\");\n+        return true;\n+    } else {\n+        LogPrintf(\"Neither -rpcauth nor -rpcpassword set - using random cookie authentication.\\n\");\n     }\n-    if (gArgs.GetArg(\"-rpcauth\",\"\") != \"\")\n-    {\n-        LogPrintf(\"Using rpcauth authentication.\\n\");\n+\n+    if (!GenerateAuthCookie(&strRPCUserColonPass)) {\n+        uiInterface.ThreadSafeMessageBox(\n+            _(\"Error: A fatal internal error occurred, see debug.log for details\"), // Same message as AbortNode\n+            \"\", CClientUIInterface::MSG_ERROR);\n+        return false;\n     }\n     return true;\n }"
      }
    ]
  }
]