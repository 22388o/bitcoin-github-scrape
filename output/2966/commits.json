[
  {
    "sha": "0c55f1aed0c934cf6c3923e5c5babacb1ab52d77",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzU1ZjFhZWQwYzkzNGNmNmMzOTIzZTVjNWJhYmFjYjFhYjUyZDc3",
    "commit": {
      "author": {
        "name": "patrick s",
        "email": "patrick.strateman@gmail.com",
        "date": "2013-09-01T12:45:37Z"
      },
      "committer": {
        "name": "patrick s",
        "email": "patrick.strateman@gmail.com",
        "date": "2013-09-01T13:10:35Z"
      },
      "message": "Remove vtxPrev by replacing with depth first transversal pulling transactions from mapWallet.\n\nAll transactions in vtxPrev are present in mapWallet as well making vtxPrev pointless.",
      "tree": {
        "sha": "08f8db346c83f5b23e70664beed2e9b74753d73e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/08f8db346c83f5b23e70664beed2e9b74753d73e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c55f1aed0c934cf6c3923e5c5babacb1ab52d77",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c55f1aed0c934cf6c3923e5c5babacb1ab52d77",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c55f1aed0c934cf6c3923e5c5babacb1ab52d77",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c55f1aed0c934cf6c3923e5c5babacb1ab52d77/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f19eda1d5735c90ad76faa13186791f3033e67b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f19eda1d5735c90ad76faa13186791f3033e67b3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f19eda1d5735c90ad76faa13186791f3033e67b3"
      }
    ],
    "stats": {
      "total": 217,
      "additions": 131,
      "deletions": 86
    },
    "files": [
      {
        "sha": "f6973271dbfadf97683b0b8e1128f7cbf129d94b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 5,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c55f1aed0c934cf6c3923e5c5babacb1ab52d77/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c55f1aed0c934cf6c3923e5c5babacb1ab52d77/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0c55f1aed0c934cf6c3923e5c5babacb1ab52d77",
        "patch": "@@ -1113,15 +1113,54 @@ bool CWalletTx::AcceptWalletTransaction()\n     {\n         LOCK(mempool.cs);\n         // Add previous supporting transactions first\n-        BOOST_FOREACH(CMerkleTx& tx, vtxPrev)\n+        std::vector<uint256> vWorkQueue;\n+        set<uint256> setAlreadyQueued;\n+        \n+        BOOST_FOREACH(const CTxIn& txin, vin)\n         {\n-            if (!tx.IsCoinBase())\n+            if (setAlreadyQueued.count(txin.prevout.hash))\n+                continue;\n+            setAlreadyQueued.insert(txin.prevout.hash);\n+            \n+            vWorkQueue.push_back(txin.prevout.hash);\n+        }\n+        \n+        // build unconfirmed supporting transactions list top to bottom\n+        for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n+        {\n+            uint256 hash = vWorkQueue[i];\n+            \n+            map<uint256, CWalletTx>::const_iterator mi = pwallet->mapWallet.find(hash);\n+            \n+            // dependent transaction cannot be found\n+            if (mi == pwallet->mapWallet.end())\n+                continue;\n+            \n+            CWalletTx tx = (*mi).second;\n+            \n+            if (tx.IsInMainChain())\n+                continue;\n+            \n+            BOOST_FOREACH(const CTxIn& txin, tx.vin)\n             {\n-                uint256 hash = tx.GetHash();\n-                if (!mempool.exists(hash) && pcoinsTip->HaveCoins(hash))\n-                    tx.AcceptToMemoryPool(false);\n+                if (setAlreadyQueued.count(txin.prevout.hash))\n+                    continue;\n+                setAlreadyQueued.insert(txin.prevout.hash);\n+                \n+                vWorkQueue.push_back(txin.prevout.hash);\n             }\n         }\n+        \n+        reverse(vWorkQueue.begin(), vWorkQueue.end());\n+        \n+        for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n+        {\n+            uint256 hash = vWorkQueue[i];\n+            map<uint256, CWalletTx>::const_iterator mi = pwallet->mapWallet.find(hash);\n+            CWalletTx tx = (*mi).second;\n+            tx.AcceptToMemoryPool(false);\n+        }\n+        \n         return AcceptToMemoryPool(false);\n     }\n     return false;"
      },
      {
        "sha": "7df95a736fc130c26c8d589a793371100fd6fabd",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 57,
        "changes": 108,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c55f1aed0c934cf6c3923e5c5babacb1ab52d77/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c55f1aed0c934cf6c3923e5c5babacb1ab52d77/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=0c55f1aed0c934cf6c3923e5c5babacb1ab52d77",
        "patch": "@@ -729,56 +729,6 @@ void CWalletTx::GetAccountAmounts(const string& strAccount, int64& nReceived,\n     }\n }\n \n-void CWalletTx::AddSupportingTransactions()\n-{\n-    vtxPrev.clear();\n-\n-    const int COPY_DEPTH = 3;\n-    if (SetMerkleBranch() < COPY_DEPTH)\n-    {\n-        vector<uint256> vWorkQueue;\n-        BOOST_FOREACH(const CTxIn& txin, vin)\n-            vWorkQueue.push_back(txin.prevout.hash);\n-\n-        {\n-            LOCK(pwallet->cs_wallet);\n-            map<uint256, const CMerkleTx*> mapWalletPrev;\n-            set<uint256> setAlreadyDone;\n-            for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n-            {\n-                uint256 hash = vWorkQueue[i];\n-                if (setAlreadyDone.count(hash))\n-                    continue;\n-                setAlreadyDone.insert(hash);\n-\n-                CMerkleTx tx;\n-                map<uint256, CWalletTx>::const_iterator mi = pwallet->mapWallet.find(hash);\n-                if (mi != pwallet->mapWallet.end())\n-                {\n-                    tx = (*mi).second;\n-                    BOOST_FOREACH(const CMerkleTx& txWalletPrev, (*mi).second.vtxPrev)\n-                        mapWalletPrev[txWalletPrev.GetHash()] = &txWalletPrev;\n-                }\n-                else if (mapWalletPrev.count(hash))\n-                {\n-                    tx = *mapWalletPrev[hash];\n-                }\n-\n-                int nDepth = tx.SetMerkleBranch();\n-                vtxPrev.push_back(tx);\n-\n-                if (nDepth < COPY_DEPTH)\n-                {\n-                    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-                        vWorkQueue.push_back(txin.prevout.hash);\n-                }\n-            }\n-        }\n-    }\n-\n-    reverse(vtxPrev.begin(), vtxPrev.end());\n-}\n-\n bool CWalletTx::WriteToDisk()\n {\n     return CWalletDB(pwallet->strWalletFile).WriteTx(GetHash(), *this);\n@@ -872,12 +822,58 @@ void CWallet::ReacceptWalletTransactions()\n \n void CWalletTx::RelayWalletTransaction()\n {\n-    BOOST_FOREACH(const CMerkleTx& tx, vtxPrev)\n+\n+    // broadcast supporting transactions first\n+    std::vector<uint256> vWorkQueue;\n+    set<uint256> setAlreadyQueued;\n+    \n+    BOOST_FOREACH(const CTxIn& txin, vin)\n+    {\n+        if (setAlreadyQueued.count(txin.prevout.hash))\n+            continue;\n+        setAlreadyQueued.insert(txin.prevout.hash);\n+        \n+        vWorkQueue.push_back(txin.prevout.hash);\n+    }\n+    \n+    // build unconfirmed supporting transactions list\n+    for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n+    {\n+        uint256 hash = vWorkQueue[i];\n+        \n+        map<uint256, CWalletTx>::const_iterator mi = pwallet->mapWallet.find(hash);\n+        \n+        // dependent transaction cannot be found\n+        if (mi == pwallet->mapWallet.end())\n+            continue;\n+        \n+        CWalletTx tx = (*mi).second;\n+        \n+        if (tx.IsInMainChain())\n+            continue;\n+        \n+        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+        {\n+            if (setAlreadyQueued.count(txin.prevout.hash))\n+                continue;\n+            setAlreadyQueued.insert(txin.prevout.hash);\n+            \n+            vWorkQueue.push_back(txin.prevout.hash);\n+        }\n+    }\n+    \n+    // reverse for depth first iteration\n+    reverse(vWorkQueue.begin(), vWorkQueue.end());\n+    \n+    // broadcast supporting transactions\n+    for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n     {\n-        if (!tx.IsCoinBase())\n-            if (tx.GetDepthInMainChain() == 0)\n-                RelayTransaction((CTransaction)tx, tx.GetHash());\n+        uint256 hash = vWorkQueue[i];\n+        map<uint256, CWalletTx>::const_iterator mi = pwallet->mapWallet.find(hash);\n+        CWalletTx tx = (*mi).second;\n+        RelayTransaction((CTransaction)tx, tx.GetHash());\n     }\n+    \n     if (!IsCoinBase())\n     {\n         if (GetDepthInMainChain() == 0) {\n@@ -1311,9 +1307,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend,\n                     nFeeRet = max(nPayFee, nMinFee);\n                     continue;\n                 }\n-\n-                // Fill vtxPrev by copying from previous transactions vtxPrev\n-                wtxNew.AddSupportingTransactions();\n+                \n                 wtxNew.fTimeReceivedIsTxTime = true;\n \n                 break;"
      },
      {
        "sha": "4dcd8a7e061d80a1fb60086f59785b84eb2db012",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 36,
        "deletions": 24,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c55f1aed0c934cf6c3923e5c5babacb1ab52d77/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c55f1aed0c934cf6c3923e5c5babacb1ab52d77/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=0c55f1aed0c934cf6c3923e5c5babacb1ab52d77",
        "patch": "@@ -399,7 +399,6 @@ class CWalletTx : public CMerkleTx\n     const CWallet* pwallet;\n \n public:\n-    std::vector<CMerkleTx> vtxPrev;\n     mapValue_t mapValue;\n     std::vector<std::pair<std::string, std::string> > vOrderForm;\n     unsigned int fTimeReceivedIsTxTime;\n@@ -445,7 +444,6 @@ class CWalletTx : public CMerkleTx\n     void Init(const CWallet* pwalletIn)\n     {\n         pwallet = pwalletIn;\n-        vtxPrev.clear();\n         mapValue.clear();\n         vOrderForm.clear();\n         fTimeReceivedIsTxTime = false;\n@@ -494,6 +492,9 @@ class CWalletTx : public CMerkleTx\n         }\n \n         nSerSize += SerReadWrite(s, *(CMerkleTx*)this, nType, nVersion,ser_action);\n+        \n+        // vtxPrev is obsolete\n+        std::vector<CMerkleTx> vtxPrev;\n         READWRITE(vtxPrev);\n         READWRITE(mapValue);\n         READWRITE(vOrderForm);\n@@ -671,39 +672,51 @@ class CWalletTx : public CMerkleTx\n         // Quick answer in most cases\n         if (!IsFinalTx(*this))\n             return false;\n-        if (GetDepthInMainChain() >= 1)\n+        if (IsInMainChain())\n             return true;\n         if (!IsFromMe()) // using wtx's cached debit\n             return false;\n \n         // If no confirmations but it's from us, we can still\n         // consider it confirmed if all dependencies are confirmed\n-        std::map<uint256, const CMerkleTx*> mapPrev;\n-        std::vector<const CMerkleTx*> vWorkQueue;\n-        vWorkQueue.reserve(vtxPrev.size()+1);\n-        vWorkQueue.push_back(this);\n+        std::vector<uint256> vWorkQueue;\n+        set<uint256> setAlreadyQueued;\n+        \n+        BOOST_FOREACH(const CTxIn& txin, vin)\n+        {\n+            if (setAlreadyQueued.count(txin.prevout.hash))\n+                continue;\n+            setAlreadyQueued.insert(txin.prevout.hash);\n+            \n+            vWorkQueue.push_back(txin.prevout.hash);\n+        }\n+        \n         for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n         {\n-            const CMerkleTx* ptx = vWorkQueue[i];\n-\n-            if (!IsFinalTx(*ptx))\n+            uint256 hash = vWorkQueue[i];\n+            \n+            map<uint256, CWalletTx>::const_iterator mi = pwallet->mapWallet.find(hash);\n+            \n+            // dependent transactions cannot be found\n+            if (mi == pwallet->mapWallet.end())\n+                return false;\n+            \n+            CMerkleTx tx = (*mi).second;\n+            \n+            if (!IsFinalTx(tx))\n                 return false;\n-            if (ptx->GetDepthInMainChain() >= 1)\n+            if (tx.IsInMainChain())\n                 continue;\n-            if (!pwallet->IsFromMe(*ptx))\n+            if (!pwallet->IsFromMe(tx))\n                 return false;\n-\n-            if (mapPrev.empty())\n-            {\n-                BOOST_FOREACH(const CMerkleTx& tx, vtxPrev)\n-                    mapPrev[tx.GetHash()] = &tx;\n-            }\n-\n-            BOOST_FOREACH(const CTxIn& txin, ptx->vin)\n+            \n+            BOOST_FOREACH(const CTxIn& txin, tx.vin)\n             {\n-                if (!mapPrev.count(txin.prevout.hash))\n-                    return false;\n-                vWorkQueue.push_back(mapPrev[txin.prevout.hash]);\n+                if (setAlreadyQueued.count(txin.prevout.hash))\n+                    continue;\n+                setAlreadyQueued.insert(txin.prevout.hash);\n+                \n+                vWorkQueue.push_back(txin.prevout.hash);\n             }\n         }\n         return true;\n@@ -714,7 +727,6 @@ class CWalletTx : public CMerkleTx\n     int64 GetTxTime() const;\n     int GetRequestCount() const;\n \n-    void AddSupportingTransactions();\n     bool AcceptWalletTransaction();\n     void RelayWalletTransaction();\n };"
      }
    ]
  },
  {
    "sha": "8e74c205faaed7851e21170a4806f0023fe4e90b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZTc0YzIwNWZhYWVkNzg1MWUyMTE3MGE0ODA2ZjAwMjNmZTRlOTBi",
    "commit": {
      "author": {
        "name": "patrick s",
        "email": "patrick.strateman@gmail.com",
        "date": "2013-09-01T13:06:47Z"
      },
      "committer": {
        "name": "patrick s",
        "email": "patrick.strateman@gmail.com",
        "date": "2013-09-01T13:10:40Z"
      },
      "message": "Simplify implementation with ListUnconfirmedSupportingTransactions",
      "tree": {
        "sha": "078ca988f744cc1fc4caba3bd7e5163f1c3ff6fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/078ca988f744cc1fc4caba3bd7e5163f1c3ff6fd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8e74c205faaed7851e21170a4806f0023fe4e90b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e74c205faaed7851e21170a4806f0023fe4e90b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8e74c205faaed7851e21170a4806f0023fe4e90b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e74c205faaed7851e21170a4806f0023fe4e90b/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0c55f1aed0c934cf6c3923e5c5babacb1ab52d77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c55f1aed0c934cf6c3923e5c5babacb1ab52d77",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c55f1aed0c934cf6c3923e5c5babacb1ab52d77"
      }
    ],
    "stats": {
      "total": 97,
      "additions": 49,
      "deletions": 48
    },
    "files": [
      {
        "sha": "ecee768f4358f9c1cba2ab6ad5cfe0d34e344435",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e74c205faaed7851e21170a4806f0023fe4e90b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e74c205faaed7851e21170a4806f0023fe4e90b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=8e74c205faaed7851e21170a4806f0023fe4e90b",
        "patch": "@@ -1125,7 +1125,7 @@ bool CWalletTx::AcceptWalletTransaction()\n             vWorkQueue.push_back(txin.prevout.hash);\n         }\n         \n-        // build unconfirmed supporting transactions list top to bottom\n+        // build unconfirmed supporting transactions list\n         for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n         {\n             uint256 hash = vWorkQueue[i];\n@@ -1151,8 +1151,10 @@ bool CWalletTx::AcceptWalletTransaction()\n             }\n         }\n         \n+        // reverse for depth first iteration\n         reverse(vWorkQueue.begin(), vWorkQueue.end());\n         \n+        // attempt to add supporting transaction to the mempool\n         for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n         {\n             uint256 hash = vWorkQueue[i];"
      },
      {
        "sha": "49cd3971b0aa9789b66f283af04acc602df88f86",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 20,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e74c205faaed7851e21170a4806f0023fe4e90b/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e74c205faaed7851e21170a4806f0023fe4e90b/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=8e74c205faaed7851e21170a4806f0023fe4e90b",
        "patch": "@@ -822,7 +822,33 @@ void CWallet::ReacceptWalletTransactions()\n \n void CWalletTx::RelayWalletTransaction()\n {\n+    // broadcast supporting transactions first\n+    std::vector<uint256> vWorkQueue = ListUnconfirmedSupportingTransactions();\n+    \n+    // reverse for depth first iteration\n+    reverse(vWorkQueue.begin(), vWorkQueue.end());\n+    \n+    // broadcast supporting transactions\n+    for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n+    {\n+        uint256 hash = vWorkQueue[i];\n+        map<uint256, CWalletTx>::const_iterator mi = pwallet->mapWallet.find(hash);\n+        CWalletTx tx = (*mi).second;\n+        RelayTransaction((CTransaction)tx, tx.GetHash());\n+    }\n+    \n+    if (!IsCoinBase())\n+    {\n+        if (GetDepthInMainChain() == 0) {\n+            uint256 hash = GetHash();\n+            printf(\"Relaying wtx %s\\n\", hash.ToString().c_str());\n+            RelayTransaction((CTransaction)*this, hash);\n+        }\n+    }\n+}\n \n+std::vector<uint256> CWalletTx::ListUnconfirmedSupportingTransactions(bool *pfCompleteSet) const\n+{\n     // broadcast supporting transactions first\n     std::vector<uint256> vWorkQueue;\n     set<uint256> setAlreadyQueued;\n@@ -836,6 +862,9 @@ void CWalletTx::RelayWalletTransaction()\n         vWorkQueue.push_back(txin.prevout.hash);\n     }\n     \n+    if (pfCompleteSet)\n+        *pfCompleteSet = true;\n+    \n     // build unconfirmed supporting transactions list\n     for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n     {\n@@ -845,7 +874,11 @@ void CWalletTx::RelayWalletTransaction()\n         \n         // dependent transaction cannot be found\n         if (mi == pwallet->mapWallet.end())\n+        {\n+            if (pfCompleteSet)\n+                *pfCompleteSet = false;\n             continue;\n+        }\n         \n         CWalletTx tx = (*mi).second;\n         \n@@ -862,26 +895,7 @@ void CWalletTx::RelayWalletTransaction()\n         }\n     }\n     \n-    // reverse for depth first iteration\n-    reverse(vWorkQueue.begin(), vWorkQueue.end());\n-    \n-    // broadcast supporting transactions\n-    for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n-    {\n-        uint256 hash = vWorkQueue[i];\n-        map<uint256, CWalletTx>::const_iterator mi = pwallet->mapWallet.find(hash);\n-        CWalletTx tx = (*mi).second;\n-        RelayTransaction((CTransaction)tx, tx.GetHash());\n-    }\n-    \n-    if (!IsCoinBase())\n-    {\n-        if (GetDepthInMainChain() == 0) {\n-            uint256 hash = GetHash();\n-            printf(\"Relaying wtx %s\\n\", hash.ToString().c_str());\n-            RelayTransaction((CTransaction)*this, hash);\n-        }\n-    }\n+    return vWorkQueue;\n }\n \n void CWallet::ResendWalletTransactions()"
      },
      {
        "sha": "8b84d5f0cfee429231e9da45bda5b1f194a86cad",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 12,
        "deletions": 27,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e74c205faaed7851e21170a4806f0023fe4e90b/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e74c205faaed7851e21170a4806f0023fe4e90b/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=8e74c205faaed7851e21170a4806f0023fe4e90b",
        "patch": "@@ -679,45 +679,24 @@ class CWalletTx : public CMerkleTx\n \n         // If no confirmations but it's from us, we can still\n         // consider it confirmed if all dependencies are confirmed\n-        std::vector<uint256> vWorkQueue;\n-        set<uint256> setAlreadyQueued;\n         \n-        BOOST_FOREACH(const CTxIn& txin, vin)\n-        {\n-            if (setAlreadyQueued.count(txin.prevout.hash))\n-                continue;\n-            setAlreadyQueued.insert(txin.prevout.hash);\n-            \n-            vWorkQueue.push_back(txin.prevout.hash);\n-        }\n+        bool fCompleteSet = false;\n+        \n+        std::vector<uint256> vWorkQueue = ListUnconfirmedSupportingTransactions(&fCompleteSet);\n+        \n+        if (!fCompleteSet)\n+            return false;\n         \n         for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n         {\n             uint256 hash = vWorkQueue[i];\n-            \n             map<uint256, CWalletTx>::const_iterator mi = pwallet->mapWallet.find(hash);\n-            \n-            // dependent transactions cannot be found\n-            if (mi == pwallet->mapWallet.end())\n-                return false;\n-            \n             CMerkleTx tx = (*mi).second;\n             \n             if (!IsFinalTx(tx))\n                 return false;\n-            if (tx.IsInMainChain())\n-                continue;\n             if (!pwallet->IsFromMe(tx))\n                 return false;\n-            \n-            BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-            {\n-                if (setAlreadyQueued.count(txin.prevout.hash))\n-                    continue;\n-                setAlreadyQueued.insert(txin.prevout.hash);\n-                \n-                vWorkQueue.push_back(txin.prevout.hash);\n-            }\n         }\n         return true;\n     }\n@@ -729,6 +708,12 @@ class CWalletTx : public CMerkleTx\n \n     bool AcceptWalletTransaction();\n     void RelayWalletTransaction();\n+    \n+    // this function is lazy and only returns transactions in mapWallet\n+    // that means it potentially misses unconfirmed supporting transactions\n+    // which are not IsMine() or IsFromMe()\n+    // you've been warned\n+    std::vector<uint256> ListUnconfirmedSupportingTransactions(bool *pfCompleteSet=NULL) const;\n };\n \n "
      }
    ]
  },
  {
    "sha": "3a2d650e3bb0ff769e44e481301fe6ef7b12b2c7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTJkNjUwZTNiYjBmZjc2OWU0NGU0ODEzMDFmZTZlZjdiMTJiMmM3",
    "commit": {
      "author": {
        "name": "patrick s",
        "email": "patrick.strateman@gmail.com",
        "date": "2013-09-01T13:15:43Z"
      },
      "committer": {
        "name": "patrick s",
        "email": "patrick.strateman@gmail.com",
        "date": "2013-09-01T13:15:43Z"
      },
      "message": "Simplify CWalletTx::AcceptWalletTransaction",
      "tree": {
        "sha": "b672c9411f7f0a939b74c2db46eaeea073288000",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b672c9411f7f0a939b74c2db46eaeea073288000"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a2d650e3bb0ff769e44e481301fe6ef7b12b2c7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a2d650e3bb0ff769e44e481301fe6ef7b12b2c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a2d650e3bb0ff769e44e481301fe6ef7b12b2c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a2d650e3bb0ff769e44e481301fe6ef7b12b2c7/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8e74c205faaed7851e21170a4806f0023fe4e90b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e74c205faaed7851e21170a4806f0023fe4e90b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8e74c205faaed7851e21170a4806f0023fe4e90b"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 1,
      "deletions": 37
    },
    "files": [
      {
        "sha": "d70ca3706577213ea7e4d466b0c21c42c1ea730c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 37,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a2d650e3bb0ff769e44e481301fe6ef7b12b2c7/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a2d650e3bb0ff769e44e481301fe6ef7b12b2c7/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3a2d650e3bb0ff769e44e481301fe6ef7b12b2c7",
        "patch": "@@ -1113,43 +1113,7 @@ bool CWalletTx::AcceptWalletTransaction()\n     {\n         LOCK(mempool.cs);\n         // Add previous supporting transactions first\n-        std::vector<uint256> vWorkQueue;\n-        set<uint256> setAlreadyQueued;\n-        \n-        BOOST_FOREACH(const CTxIn& txin, vin)\n-        {\n-            if (setAlreadyQueued.count(txin.prevout.hash))\n-                continue;\n-            setAlreadyQueued.insert(txin.prevout.hash);\n-            \n-            vWorkQueue.push_back(txin.prevout.hash);\n-        }\n-        \n-        // build unconfirmed supporting transactions list\n-        for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n-        {\n-            uint256 hash = vWorkQueue[i];\n-            \n-            map<uint256, CWalletTx>::const_iterator mi = pwallet->mapWallet.find(hash);\n-            \n-            // dependent transaction cannot be found\n-            if (mi == pwallet->mapWallet.end())\n-                continue;\n-            \n-            CWalletTx tx = (*mi).second;\n-            \n-            if (tx.IsInMainChain())\n-                continue;\n-            \n-            BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-            {\n-                if (setAlreadyQueued.count(txin.prevout.hash))\n-                    continue;\n-                setAlreadyQueued.insert(txin.prevout.hash);\n-                \n-                vWorkQueue.push_back(txin.prevout.hash);\n-            }\n-        }\n+        std::vector<uint256> vWorkQueue = ListUnconfirmedSupportingTransactions();\n         \n         // reverse for depth first iteration\n         reverse(vWorkQueue.begin(), vWorkQueue.end());"
      }
    ]
  },
  {
    "sha": "4928066e982ea7203b2d14dfc75691be6cafdefc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OTI4MDY2ZTk4MmVhNzIwM2IyZDE0ZGZjNzU2OTFiZTZjYWZkZWZj",
    "commit": {
      "author": {
        "name": "patrick s",
        "email": "patrick.strateman@gmail.com",
        "date": "2013-09-01T13:16:46Z"
      },
      "committer": {
        "name": "patrick s",
        "email": "patrick.strateman@gmail.com",
        "date": "2013-09-01T13:16:46Z"
      },
      "message": "Dont attempt to put CoinBase transactions in mempool",
      "tree": {
        "sha": "f67dcb1d0083795e0adbff43904bb3ff2fd1ac26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f67dcb1d0083795e0adbff43904bb3ff2fd1ac26"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4928066e982ea7203b2d14dfc75691be6cafdefc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4928066e982ea7203b2d14dfc75691be6cafdefc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4928066e982ea7203b2d14dfc75691be6cafdefc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4928066e982ea7203b2d14dfc75691be6cafdefc/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a2d650e3bb0ff769e44e481301fe6ef7b12b2c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a2d650e3bb0ff769e44e481301fe6ef7b12b2c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a2d650e3bb0ff769e44e481301fe6ef7b12b2c7"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c537cfa5054e213e470719d0cec7200907f27c41",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4928066e982ea7203b2d14dfc75691be6cafdefc/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4928066e982ea7203b2d14dfc75691be6cafdefc/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4928066e982ea7203b2d14dfc75691be6cafdefc",
        "patch": "@@ -1124,7 +1124,8 @@ bool CWalletTx::AcceptWalletTransaction()\n             uint256 hash = vWorkQueue[i];\n             map<uint256, CWalletTx>::const_iterator mi = pwallet->mapWallet.find(hash);\n             CWalletTx tx = (*mi).second;\n-            tx.AcceptToMemoryPool(false);\n+            if (!tx.IsCoinBase())\n+                tx.AcceptToMemoryPool(false);\n         }\n         \n         return AcceptToMemoryPool(false);"
      }
    ]
  },
  {
    "sha": "a80864e8c8fe19101e54287a770769784ddafd17",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODA4NjRlOGM4ZmUxOTEwMWU1NDI4N2E3NzA3Njk3ODRkZGFmZDE3",
    "commit": {
      "author": {
        "name": "patrick s",
        "email": "patrick.strateman@gmail.com",
        "date": "2013-09-01T14:15:33Z"
      },
      "committer": {
        "name": "patrick s",
        "email": "patrick.strateman@gmail.com",
        "date": "2013-09-01T14:15:33Z"
      },
      "message": "move CWalletTx::AcceptWalletTransaction to wallet.cpp",
      "tree": {
        "sha": "1a64b5327cf43a2ee593268dcc3084390e7afefa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1a64b5327cf43a2ee593268dcc3084390e7afefa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a80864e8c8fe19101e54287a770769784ddafd17",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a80864e8c8fe19101e54287a770769784ddafd17",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a80864e8c8fe19101e54287a770769784ddafd17",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a80864e8c8fe19101e54287a770769784ddafd17/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4928066e982ea7203b2d14dfc75691be6cafdefc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4928066e982ea7203b2d14dfc75691be6cafdefc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4928066e982ea7203b2d14dfc75691be6cafdefc"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 25,
      "deletions": 27
    },
    "files": [
      {
        "sha": "ae96779b789db3f99aea4c4b919837abd92488b3",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 27,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a80864e8c8fe19101e54287a770769784ddafd17/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a80864e8c8fe19101e54287a770769784ddafd17/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a80864e8c8fe19101e54287a770769784ddafd17",
        "patch": "@@ -1107,33 +1107,6 @@ bool CMerkleTx::AcceptToMemoryPool(bool fLimitFree)\n }\n \n \n-\n-bool CWalletTx::AcceptWalletTransaction()\n-{\n-    {\n-        LOCK(mempool.cs);\n-        // Add previous supporting transactions first\n-        std::vector<uint256> vWorkQueue = ListUnconfirmedSupportingTransactions();\n-        \n-        // reverse for depth first iteration\n-        reverse(vWorkQueue.begin(), vWorkQueue.end());\n-        \n-        // attempt to add supporting transaction to the mempool\n-        for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n-        {\n-            uint256 hash = vWorkQueue[i];\n-            map<uint256, CWalletTx>::const_iterator mi = pwallet->mapWallet.find(hash);\n-            CWalletTx tx = (*mi).second;\n-            if (!tx.IsCoinBase())\n-                tx.AcceptToMemoryPool(false);\n-        }\n-        \n-        return AcceptToMemoryPool(false);\n-    }\n-    return false;\n-}\n-\n-\n // Return transaction in tx, and if it was found inside a block, its hash is placed in hashBlock\n bool GetTransaction(const uint256 &hash, CTransaction &txOut, uint256 &hashBlock, bool fAllowSlow)\n {"
      },
      {
        "sha": "82b7042bd470fb06c2fd44b95f5ccf9d6baa2f05",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a80864e8c8fe19101e54287a770769784ddafd17/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a80864e8c8fe19101e54287a770769784ddafd17/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=a80864e8c8fe19101e54287a770769784ddafd17",
        "patch": "@@ -734,6 +734,31 @@ bool CWalletTx::WriteToDisk()\n     return CWalletDB(pwallet->strWalletFile).WriteTx(GetHash(), *this);\n }\n \n+bool CWalletTx::AcceptWalletTransaction()\n+{\n+    {\n+        LOCK(mempool.cs);\n+        // Add previous supporting transactions first\n+        std::vector<uint256> vWorkQueue = ListUnconfirmedSupportingTransactions();\n+        \n+        // reverse for depth first iteration\n+        reverse(vWorkQueue.begin(), vWorkQueue.end());\n+        \n+        // attempt to add supporting transaction to the mempool\n+        for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n+        {\n+            uint256 hash = vWorkQueue[i];\n+            map<uint256, CWalletTx>::const_iterator mi = pwallet->mapWallet.find(hash);\n+            CWalletTx tx = (*mi).second;\n+            if (!tx.IsCoinBase())\n+                tx.AcceptToMemoryPool(false);\n+        }\n+        \n+        return AcceptToMemoryPool(false);\n+    }\n+    return false;\n+}\n+\n // Scan the block chain (starting in pindexStart) for transactions\n // from or to us. If fUpdate is true, found transactions that already\n // exist in the wallet will be updated."
      }
    ]
  }
]