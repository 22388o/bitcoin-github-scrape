DrahtBot,2020-03-15 19:12:33,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20323 (tests: Create or use existing properly initialized NodeContexts by dongcarl)\n* #20228 (addrman: Make addrman a to",https://github.com/bitcoin/bitcoin/pull/18354#issuecomment-599251772,599251772,
bvbfan,2020-03-16 13:46:06,"Simplify patch, make more fuzzing test\n```\n#!/bin/bash\nwhile [ 1 ]\ndo\n    src/bitcoin-cli -testnet loadwallet test\n    src/bitcoin-cli -testnet unloadwallet test3\n    src/bitcoin-cli -testnet loadwallet test2\n    src/bitcoin-cli -testnet unloadwallet test\n    src/bitcoin-cli -testnet loadwallet test3\n    src/bitcoin-cli -testnet unloadwallet test2\ndone\n```",https://github.com/bitcoin/bitcoin/pull/18354#issuecomment-599544782,599544782,
bvbfan,2020-03-17 06:49:45,Use future instead of raw loop for waiting pending callbacks. It still much matters to me compared to #18338 ,https://github.com/bitcoin/bitcoin/pull/18354#issuecomment-599906008,599906008,
bvbfan,2020-03-24 11:39:46,@promag same as your approach with more aggressive refactor + missing virtual desctructors.,https://github.com/bitcoin/bitcoin/pull/18354#issuecomment-603189889,603189889,
ryanofsky,2020-03-25 13:35:47,"Concept ACK, though this is making a lot of changes in a single commit. The changes will probably get simpler if #18338 is merged first, and maybe they can be broken up into smaller commits. Could consider rebasing on top of #18338 of you don't want to wait for it to be merged. I'd also encourage you to review #18338!",https://github.com/bitcoin/bitcoin/pull/18354#issuecomment-603842986,603842986,
ryanofsky,2020-03-25 13:48:50,"Oh, just saw this PR has expanded since I looked at it previously. I think some of the uses of shared_ptr / weak_ptr here like the new ones added in CWalletTx do not make sense. shared_ptr / weak_ptr only make sense when lifetime of the reference doesn't have a definite scope. For cases like CWalletTx where the wallet reference can't outlive the wallet, `CWallet&` makes more sense than `weak_ptr<C",https://github.com/bitcoin/bitcoin/pull/18354#issuecomment-603849568,603849568,
bvbfan,2020-03-25 17:41:52,"> shared_ptr / weak_ptr only make sense when lifetime of the reference doesn't have a definite scope.\n\nI agree, in plus it defines no ownership. I agree, that reference makes much more sense here, too\n\n",https://github.com/bitcoin/bitcoin/pull/18354#issuecomment-603984873,603984873,
bvbfan,2020-03-26 09:47:13,"Use Optional instead of weak_ptr, i can't reproduce CI errors, all tests + functional ones passes in Linux x64.",https://github.com/bitcoin/bitcoin/pull/18354#issuecomment-604330770,604330770,
MarcoFalke,2020-03-31 14:08:16,Loosk like there are some cleanups from https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-605920724 that can be addressed here,https://github.com/bitcoin/bitcoin/pull/18354#issuecomment-606650860,606650860,
bvbfan,2020-05-02 09:39:08,"Are you interested in this patch or you prefer to be closed?\nThe changes are:\n\n1. Validation interface uses shared pointers only\n2. Fix CValidationInterface and NetEventsInterface to use virtual destructors. Since there is no usage of creation and deletion via base pointer it does not have a problem but instead it's not correct design.\n3. RPC methods uses CWallet shared pointer only\n4.",https://github.com/bitcoin/bitcoin/pull/18354#issuecomment-622926731,622926731,
ryanofsky,2020-05-07 01:55:50,"Interestingly this change seems like a superset of #18742 by @MarcoFalke and #18791 by @promag and #18592 by @brakmic but it precedes all these other prs!\n\nFor the #18742 / #18791 overlap, I think there's a question about where it makes sense to use the shared pointer validationinterface callbacks, and where it makes sense to use the non-shared ones. Maybe it would be good to do what this PR d",https://github.com/bitcoin/bitcoin/pull/18354#issuecomment-624983709,624983709,
bvbfan,2020-05-15 15:07:32,"Revert optional ref. @ryanofsky none of those PRs are complete like this, i agree they have same approach. Using shared pointer is cheap enough to be pass by value.",https://github.com/bitcoin/bitcoin/pull/18354#issuecomment-629288136,629288136,
promag,2020-10-06 23:01:53,Is this still a bug fix? Do you think you can split in multiple commits?,https://github.com/bitcoin/bitcoin/pull/18354#issuecomment-704597420,704597420,
bvbfan,2020-10-07 06:29:04,"Hi @promag mostly it's not an issue, AFAIK. It has some side effects in Qt gui, it was fixed i think. Notification proxy can extend notification lifetime which isn't correct to me. As well as using shared pointers only to validation interface, missing virtual destructors to interface classes like NetEventsInterface (it's not a problem since it's not deleted through base pointer till now).\nI can ",https://github.com/bitcoin/bitcoin/pull/18354#issuecomment-704724453,704724453,
bvbfan,2020-10-07 12:30:01,Refactor pwallet to wallet (wallet* to wallet shared_ptr) is removed.,https://github.com/bitcoin/bitcoin/pull/18354#issuecomment-704902198,704902198,
DrahtBot,2020-12-01 09:44:34,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/18354#issuecomment-736359301,736359301,
MarcoFalke,2021-10-22 12:01:43,Needs rebase if still relevant,https://github.com/bitcoin/bitcoin/pull/18354#issuecomment-949565127,949565127,
bvbfan,2021-10-22 12:19:07,"I will investigate if it still needed, actually @ryanofsky does excellent work to well define shared interfaces ownership.",https://github.com/bitcoin/bitcoin/pull/18354#issuecomment-949578442,949578442,
ryanofsky,2020-03-16 14:17:11,"Why's this adding `|| m_are_callbacks_running`? In the case where m_callbacks_pending is empty and m_are_callbacks_running is true, won't ProcessQueue return immediately and the loop below be a busy loop consuming 100% of CPU?\n\nAlso could use `while (WITH_LOCK(m_cs_callbacks_pending, return ...)) {` instead of a lambda",https://github.com/bitcoin/bitcoin/pull/18354#discussion_r393055199,393055199,src/scheduler.cpp
ryanofsky,2020-03-16 14:24:50,"This is a partial fix for the bug, not a full fix. While calling BlockUntilSyncedToCurrentChain before reset makes it less likely the wallet pointer will be deleted while still in use, it's still possible for a blockconnected or other notification to be running when wallet.reset() is called below",https://github.com/bitcoin/bitcoin/pull/18354#discussion_r393063319,393063319,src/wallet/wallet.cpp
bvbfan,2020-03-16 16:59:20,That's guaranteed it https://github.com/bitcoin/bitcoin/pull/18354/commits/16e9578c1ecc3240282e136c378fb0433e775e41#diff-e8d9e22d9683f73a9fb8399be0dab640R93,https://github.com/bitcoin/bitcoin/pull/18354#discussion_r393173751,393173751,src/wallet/wallet.cpp
bvbfan,2020-03-16 17:01:05,"> Why's this adding || m_are_callbacks_running? In the case where m_callbacks_pending is empty and m_are_callbacks_running is true, won't ProcessQueue return immediately and the loop below be a busy loop consuming 100% of CPU?\n\nIt's same without `m_are_callbacks_running` i.e. while loop consume a lot of CPU. The change is to ensure notification thread is finish processing callback.",https://github.com/bitcoin/bitcoin/pull/18354#discussion_r393175374,393175374,src/scheduler.cpp
ryanofsky,2020-03-16 17:10:48,"As I understand it, the EmptyQueue call added there (in UnregisterValidationInterface) does nothing if `m_pscheduler->AreThreadsServicingQueue()` is true, which it always is, except during shutdown. So a notification could still be in progress and raw wallet pointer still in use after the UnregisterValidationInterface call and handler.reset() call and wallet.reset() call. Adding the BlockUntilSync",https://github.com/bitcoin/bitcoin/pull/18354#discussion_r393183034,393183034,src/wallet/wallet.cpp
ryanofsky,2020-03-16 17:28:27,"> > Why's this adding || m_are_callbacks_running? In the case where m_callbacks_pending is empty and m_are_callbacks_running is true, won't ProcessQueue return immediately and the loop below be a busy loop consuming 100% of CPU?\n\nOh, you're right. The current code is can busy-loop when the queue non-empty and running is true, though AreThreadsServicingQueue check makes this less likely to happ",https://github.com/bitcoin/bitcoin/pull/18354#discussion_r393193401,393193401,src/scheduler.cpp
bvbfan,2020-03-16 18:11:21,"Got'cha, you're right. I'll investigate for solution.",https://github.com/bitcoin/bitcoin/pull/18354#discussion_r393220993,393220993,src/scheduler.cpp
ryanofsky,2020-03-16 18:34:57,"> Got'cha, you're right. I'll investigate for solution.\n\nAgain would suggest closing this PR and using #18338 which I think is more consistent and less fragile fix",https://github.com/bitcoin/bitcoin/pull/18354#discussion_r393233993,393233993,src/scheduler.cpp
bvbfan,2020-03-16 18:35:04,`AreThreadsServicingQueue` is not needed at all. Its purpose is obsolete in the context.,https://github.com/bitcoin/bitcoin/pull/18354#discussion_r393234040,393234040,src/scheduler.cpp
