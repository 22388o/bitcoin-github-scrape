[
  {
    "sha": "9b97239276657750fb36c15264af352ab3e98128",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Yjk3MjM5Mjc2NjU3NzUwZmIzNmMxNTI2NGFmMzUyYWIzZTk4MTI4",
    "commit": {
      "author": {
        "name": "Anthony Fieroni",
        "email": "bvbfan@abv.bg",
        "date": "2020-03-24T11:18:16Z"
      },
      "committer": {
        "name": "Anthony Fieroni",
        "email": "bvbfan@abv.bg",
        "date": "2020-10-07T12:28:05Z"
      },
      "message": "Use shared pointer to validation interface\n\nSigned-off-by: Anthony Fieroni <bvbfan@abv.bg>",
      "tree": {
        "sha": "b31b92e1fcaefa105a5b647080bd13892695f407",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b31b92e1fcaefa105a5b647080bd13892695f407"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b97239276657750fb36c15264af352ab3e98128",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b97239276657750fb36c15264af352ab3e98128",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b97239276657750fb36c15264af352ab3e98128",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b97239276657750fb36c15264af352ab3e98128/comments",
    "author": {
      "login": "bvbfan",
      "id": 8323581,
      "node_id": "MDQ6VXNlcjgzMjM1ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8323581?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvbfan",
      "html_url": "https://github.com/bvbfan",
      "followers_url": "https://api.github.com/users/bvbfan/followers",
      "following_url": "https://api.github.com/users/bvbfan/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvbfan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvbfan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvbfan/subscriptions",
      "organizations_url": "https://api.github.com/users/bvbfan/orgs",
      "repos_url": "https://api.github.com/users/bvbfan/repos",
      "events_url": "https://api.github.com/users/bvbfan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvbfan/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "bvbfan",
      "id": 8323581,
      "node_id": "MDQ6VXNlcjgzMjM1ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8323581?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvbfan",
      "html_url": "https://github.com/bvbfan",
      "followers_url": "https://api.github.com/users/bvbfan/followers",
      "following_url": "https://api.github.com/users/bvbfan/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvbfan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvbfan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvbfan/subscriptions",
      "organizations_url": "https://api.github.com/users/bvbfan/orgs",
      "repos_url": "https://api.github.com/users/bvbfan/repos",
      "events_url": "https://api.github.com/users/bvbfan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvbfan/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "283a73d7eaea2907a6f7f800f529a0d6db53d7a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/283a73d7eaea2907a6f7f800f529a0d6db53d7a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/283a73d7eaea2907a6f7f800f529a0d6db53d7a6"
      }
    ],
    "stats": {
      "total": 310,
      "additions": 152,
      "deletions": 158
    },
    "files": [
      {
        "sha": "adb474a6e7f4f591d8450756421bb6017f3f2b32",
        "filename": "src/bench/wallet_balance.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b97239276657750fb36c15264af352ab3e98128/src/bench/wallet_balance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b97239276657750fb36c15264af352ab3e98128/src/bench/wallet_balance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/wallet_balance.cpp?ref=9b97239276657750fb36c15264af352ab3e98128",
        "patch": "@@ -26,28 +26,28 @@ static void WalletBalance(benchmark::Bench& bench, const bool set_dirty, const b\n \n     NodeContext node;\n     std::unique_ptr<interfaces::Chain> chain = interfaces::MakeChain(node);\n-    CWallet wallet{chain.get(), \"\", CreateMockWalletDatabase()};\n+    auto wallet = std::make_shared<CWallet>(chain.get(), \"\", CreateMockWalletDatabase());\n     {\n-        wallet.SetupLegacyScriptPubKeyMan();\n+        wallet->SetupLegacyScriptPubKeyMan();\n         bool first_run;\n-        if (wallet.LoadWallet(first_run) != DBErrors::LOAD_OK) assert(false);\n+        if (wallet->LoadWallet(first_run) != DBErrors::LOAD_OK) assert(false);\n     }\n-    auto handler = chain->handleNotifications({&wallet, [](CWallet*) {}});\n+    auto handler = chain->handleNotifications(wallet);\n \n-    const Optional<std::string> address_mine{add_mine ? Optional<std::string>{getnewaddress(wallet)} : nullopt};\n-    if (add_watchonly) importaddress(wallet, ADDRESS_WATCHONLY);\n+    const Optional<std::string> address_mine{add_mine ? Optional<std::string>{getnewaddress(*wallet)} : nullopt};\n+    if (add_watchonly) importaddress(*wallet, ADDRESS_WATCHONLY);\n \n     for (int i = 0; i < 100; ++i) {\n         generatetoaddress(test_setup.m_node, address_mine.get_value_or(ADDRESS_WATCHONLY));\n         generatetoaddress(test_setup.m_node, ADDRESS_WATCHONLY);\n     }\n     SyncWithValidationInterfaceQueue();\n \n-    auto bal = wallet.GetBalance(); // Cache\n+    auto bal = wallet->GetBalance(); // Cache\n \n     bench.run([&] {\n-        if (set_dirty) wallet.MarkDirty();\n-        bal = wallet.GetBalance();\n+        if (set_dirty) wallet->MarkDirty();\n+        bal = wallet->GetBalance();\n         if (add_mine) assert(bal.m_mine_trusted > 0);\n         if (add_watchonly) assert(bal.m_watchonly_trusted > 0);\n     });"
      },
      {
        "sha": "9cc12ebb0e63a9c2bc3ac1b934a09c7a7cd3a750",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b97239276657750fb36c15264af352ab3e98128/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b97239276657750fb36c15264af352ab3e98128/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=9b97239276657750fb36c15264af352ab3e98128",
        "patch": "@@ -299,9 +299,6 @@ void BaseIndex::Interrupt()\n \n void BaseIndex::Start()\n {\n-    // Need to register this ValidationInterface before running Init(), so that\n-    // callbacks are not missed if Init sets m_synced to true.\n-    RegisterValidationInterface(this);\n     if (!Init()) {\n         FatalError(\"%s: %s failed to initialize\", __func__, GetName());\n         return;\n@@ -313,8 +310,6 @@ void BaseIndex::Start()\n \n void BaseIndex::Stop()\n {\n-    UnregisterValidationInterface(this);\n-\n     if (m_thread_sync.joinable()) {\n         m_thread_sync.join();\n     }"
      },
      {
        "sha": "783b74737993f9844928706b4ca39bb164db2290",
        "filename": "src/index/blockfilterindex.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b97239276657750fb36c15264af352ab3e98128/src/index/blockfilterindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b97239276657750fb36c15264af352ab3e98128/src/index/blockfilterindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.cpp?ref=9b97239276657750fb36c15264af352ab3e98128",
        "patch": "@@ -90,7 +90,7 @@ struct DBHashKey {\n \n }; // namespace\n \n-static std::map<BlockFilterType, BlockFilterIndex> g_filter_indexes;\n+static std::map<BlockFilterType, std::shared_ptr<BlockFilterIndex>> g_filter_indexes;\n \n BlockFilterIndex::BlockFilterIndex(BlockFilterType filter_type,\n                                    size_t n_cache_size, bool f_memory, bool f_wipe)\n@@ -450,25 +450,25 @@ bool BlockFilterIndex::LookupFilterHashRange(int start_height, const CBlockIndex\n     return true;\n }\n \n-BlockFilterIndex* GetBlockFilterIndex(BlockFilterType filter_type)\n+std::shared_ptr<BlockFilterIndex> GetBlockFilterIndex(BlockFilterType filter_type)\n {\n     auto it = g_filter_indexes.find(filter_type);\n-    return it != g_filter_indexes.end() ? &it->second : nullptr;\n+    return it != g_filter_indexes.end() ? it->second : nullptr;\n }\n \n-void ForEachBlockFilterIndex(std::function<void (BlockFilterIndex&)> fn)\n+void ForEachBlockFilterIndex(std::function<void (std::shared_ptr<BlockFilterIndex>)> fn)\n {\n     for (auto& entry : g_filter_indexes) fn(entry.second);\n }\n \n bool InitBlockFilterIndex(BlockFilterType filter_type,\n                           size_t n_cache_size, bool f_memory, bool f_wipe)\n {\n-    auto result = g_filter_indexes.emplace(std::piecewise_construct,\n-                                           std::forward_as_tuple(filter_type),\n-                                           std::forward_as_tuple(filter_type,\n-                                                                 n_cache_size, f_memory, f_wipe));\n-    return result.second;\n+    if (g_filter_indexes.count(filter_type))\n+        return false;\n+    g_filter_indexes.emplace(filter_type, std::make_shared<BlockFilterIndex>(filter_type, n_cache_size,\n+                                                                             f_memory, f_wipe));\n+    return true;\n }\n \n bool DestroyBlockFilterIndex(BlockFilterType filter_type)"
      },
      {
        "sha": "4fd6f3fda55cdb4bf7ddccd6761f18ba9486507a",
        "filename": "src/index/blockfilterindex.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b97239276657750fb36c15264af352ab3e98128/src/index/blockfilterindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b97239276657750fb36c15264af352ab3e98128/src/index/blockfilterindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.h?ref=9b97239276657750fb36c15264af352ab3e98128",
        "patch": "@@ -81,10 +81,10 @@ class BlockFilterIndex final : public BaseIndex\n  * Get a block filter index by type. Returns nullptr if index has not been initialized or was\n  * already destroyed.\n  */\n-BlockFilterIndex* GetBlockFilterIndex(BlockFilterType filter_type);\n+std::shared_ptr<BlockFilterIndex> GetBlockFilterIndex(BlockFilterType filter_type);\n \n /** Iterate over all running block filter indexes, invoking fn on each. */\n-void ForEachBlockFilterIndex(std::function<void (BlockFilterIndex&)> fn);\n+void ForEachBlockFilterIndex(std::function<void (std::shared_ptr<BlockFilterIndex>)> fn);\n \n /**\n  * Initialize a block filter index for the given type if one does not already exist. Returns true if"
      },
      {
        "sha": "4a515394e2e312e05e0b2f919286962606e7d118",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b97239276657750fb36c15264af352ab3e98128/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b97239276657750fb36c15264af352ab3e98128/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=9b97239276657750fb36c15264af352ab3e98128",
        "patch": "@@ -14,7 +14,7 @@ constexpr char DB_BEST_BLOCK = 'B';\n constexpr char DB_TXINDEX = 't';\n constexpr char DB_TXINDEX_BLOCK = 'T';\n \n-std::unique_ptr<TxIndex> g_txindex;\n+std::shared_ptr<TxIndex> g_txindex;\n \n \n "
      },
      {
        "sha": "3fcd87e040cdf6b87ff9dd33305da8d8628100de",
        "filename": "src/index/txindex.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b97239276657750fb36c15264af352ab3e98128/src/index/txindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b97239276657750fb36c15264af352ab3e98128/src/index/txindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.h?ref=9b97239276657750fb36c15264af352ab3e98128",
        "patch": "@@ -49,6 +49,6 @@ class TxIndex final : public BaseIndex\n };\n \n /// The global transaction index, used in GetTransaction. May be null.\n-extern std::unique_ptr<TxIndex> g_txindex;\n+extern std::shared_ptr<TxIndex> g_txindex;\n \n #endif // BITCOIN_INDEX_TXINDEX_H"
      },
      {
        "sha": "3268633d82128f622de2cd97e6c349fdb4acfcc4",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 12,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b97239276657750fb36c15264af352ab3e98128/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b97239276657750fb36c15264af352ab3e98128/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9b97239276657750fb36c15264af352ab3e98128",
        "patch": "@@ -172,7 +172,9 @@ void Interrupt(NodeContext& node)\n     if (g_txindex) {\n         g_txindex->Interrupt();\n     }\n-    ForEachBlockFilterIndex([](BlockFilterIndex& index) { index.Interrupt(); });\n+    ForEachBlockFilterIndex([](std::shared_ptr<BlockFilterIndex> index) {\n+        index->Interrupt();\n+    });\n }\n \n void Shutdown(NodeContext& node)\n@@ -201,7 +203,7 @@ void Shutdown(NodeContext& node)\n \n     // Because these depend on each-other, we make sure that neither can be\n     // using the other before destroying them.\n-    if (node.peerman) UnregisterValidationInterface(node.peerman.get());\n+    if (node.peerman) UnregisterValidationInterface(node.peerman);\n     // Follow the lock order requirements:\n     // * CheckForStaleTipAndEvictPeers locks cs_main before indirectly calling GetExtraOutboundCount\n     //   which locks cs_vNodes.\n@@ -264,10 +266,14 @@ void Shutdown(NodeContext& node)\n \n     // Stop and delete all indexes only after flushing background callbacks.\n     if (g_txindex) {\n+        UnregisterValidationInterface(g_txindex);\n         g_txindex->Stop();\n         g_txindex.reset();\n     }\n-    ForEachBlockFilterIndex([](BlockFilterIndex& index) { index.Stop(); });\n+    ForEachBlockFilterIndex([](std::shared_ptr<BlockFilterIndex> index) {\n+        UnregisterValidationInterface(index);\n+        index->Stop();\n+    });\n     DestroyAllBlockFilterIndexes();\n \n     // Any future callbacks will be dropped. This should absolutely be safe - if\n@@ -293,20 +299,18 @@ void Shutdown(NodeContext& node)\n #if ENABLE_ZMQ\n     if (g_zmq_notification_interface) {\n         UnregisterValidationInterface(g_zmq_notification_interface);\n-        delete g_zmq_notification_interface;\n-        g_zmq_notification_interface = nullptr;\n+        g_zmq_notification_interface.reset();\n     }\n #endif\n \n-    node.chain_clients.clear();\n     UnregisterAllValidationInterfaces();\n     GetMainSignals().UnregisterBackgroundSignalScheduler();\n     globalVerifyHandle.reset();\n     ECC_Stop();\n     node.mempool.reset();\n     node.chainman = nullptr;\n     node.scheduler.reset();\n-\n+    node.chain_clients.clear();\n     try {\n         if (!fs::remove(GetPidFile(*node.args))) {\n             LogPrintf(\"%s: Unable to remove PID file: File does not exist\\n\", __func__);\n@@ -1405,7 +1409,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     ChainstateManager& chainman = *Assert(node.chainman);\n \n     node.peerman.reset(new PeerManager(chainparams, *node.connman, node.banman.get(), *node.scheduler, chainman, *node.mempool));\n-    RegisterValidationInterface(node.peerman.get());\n+    RegisterValidationInterface(node.peerman);\n \n     // sanitize comments per BIP-0014, format user agent and check total size\n     std::vector<std::string> uacomments;\n@@ -1519,7 +1523,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     }\n \n #if ENABLE_ZMQ\n-    g_zmq_notification_interface = CZMQNotificationInterface::Create();\n+    g_zmq_notification_interface.reset(CZMQNotificationInterface::Create());\n \n     if (g_zmq_notification_interface) {\n         RegisterValidationInterface(g_zmq_notification_interface);\n@@ -1801,15 +1805,20 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n \n     // ********************************************************* Step 8: start indexers\n     if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n-        g_txindex = MakeUnique<TxIndex>(nTxIndexCache, false, fReindex);\n+        g_txindex = std::make_shared<TxIndex>(nTxIndexCache, false, fReindex);\n+        RegisterValidationInterface(g_txindex);\n         g_txindex->Start();\n     }\n \n     for (const auto& filter_type : g_enabled_filter_types) {\n         InitBlockFilterIndex(filter_type, filter_index_cache, false, fReindex);\n-        GetBlockFilterIndex(filter_type)->Start();\n     }\n \n+    ForEachBlockFilterIndex([](std::shared_ptr<BlockFilterIndex> index) {\n+        RegisterValidationInterface(index);\n+        index->Start();\n+    });\n+\n     // ********************************************************* Step 9: load wallet\n     for (const auto& client : node.chain_clients) {\n         if (!client->load()) {\n@@ -1935,7 +1944,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     connOptions.nBestHeight = chain_active_height;\n     connOptions.uiInterface = &uiInterface;\n     connOptions.m_banman = node.banman.get();\n-    connOptions.m_msgproc = node.peerman.get();\n+    connOptions.m_msgproc = node.peerman;\n     connOptions.nSendBufferMaxSize = 1000 * args.GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER);\n     connOptions.nReceiveFloodSize = 1000 * args.GetArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER);\n     connOptions.m_added_nodes = args.GetArgs(\"-addnode\");"
      },
      {
        "sha": "67f4308fd1df29e13828021ae4dd8bf2a75c2fe6",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b97239276657750fb36c15264af352ab3e98128/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b97239276657750fb36c15264af352ab3e98128/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=9b97239276657750fb36c15264af352ab3e98128",
        "patch": "@@ -89,13 +89,13 @@ class NotificationsHandlerImpl : public Handler\n     explicit NotificationsHandlerImpl(std::shared_ptr<Chain::Notifications> notifications)\n         : m_proxy(std::make_shared<NotificationsProxy>(std::move(notifications)))\n     {\n-        RegisterSharedValidationInterface(m_proxy);\n+        RegisterValidationInterface(m_proxy);\n     }\n     ~NotificationsHandlerImpl() override { disconnect(); }\n     void disconnect() override\n     {\n         if (m_proxy) {\n-            UnregisterSharedValidationInterface(m_proxy);\n+            UnregisterValidationInterface(m_proxy);\n             m_proxy.reset();\n         }\n     }"
      },
      {
        "sha": "18f44bdd38d63ecf942cfac97f4e42ba2f88fc17",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b97239276657750fb36c15264af352ab3e98128/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b97239276657750fb36c15264af352ab3e98128/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=9b97239276657750fb36c15264af352ab3e98128",
        "patch": "@@ -209,7 +209,7 @@ class CConnman\n         int nMaxFeeler = 0;\n         int nBestHeight = 0;\n         CClientUIInterface* uiInterface = nullptr;\n-        NetEventsInterface* m_msgproc = nullptr;\n+        std::shared_ptr<NetEventsInterface> m_msgproc;\n         BanMan* m_banman = nullptr;\n         unsigned int nSendBufferMaxSize = 0;\n         unsigned int nReceiveFloodSize = 0;\n@@ -557,7 +557,7 @@ class CConnman\n     bool m_use_addrman_outgoing;\n     std::atomic<int> nBestHeight;\n     CClientUIInterface* clientInterface;\n-    NetEventsInterface* m_msgproc;\n+    std::shared_ptr<NetEventsInterface> m_msgproc;\n     /** Pointer to this node's banman. May be nullptr - check existence before dereferencing. */\n     BanMan* m_banman;\n "
      },
      {
        "sha": "bdb5ceaa8a06aa0bfc944bd40e33147ade2246ba",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b97239276657750fb36c15264af352ab3e98128/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b97239276657750fb36c15264af352ab3e98128/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=9b97239276657750fb36c15264af352ab3e98128",
        "patch": "@@ -2153,7 +2153,7 @@ static bool PrepareBlockFilterRequest(CNode& peer, const CChainParams& chain_par\n                                       BlockFilterType filter_type, uint32_t start_height,\n                                       const uint256& stop_hash, uint32_t max_height_diff,\n                                       const CBlockIndex*& stop_index,\n-                                      BlockFilterIndex*& filter_index)\n+                                      std::shared_ptr<BlockFilterIndex>& filter_index)\n {\n     const bool supported_filter_type =\n         (filter_type == BlockFilterType::BASIC &&\n@@ -2224,7 +2224,7 @@ static void ProcessGetCFilters(CNode& peer, CDataStream& vRecv, const CChainPara\n     const BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n \n     const CBlockIndex* stop_index;\n-    BlockFilterIndex* filter_index;\n+    std::shared_ptr<BlockFilterIndex> filter_index;\n     if (!PrepareBlockFilterRequest(peer, chain_params, filter_type, start_height, stop_hash,\n                                    MAX_GETCFILTERS_SIZE, stop_index, filter_index)) {\n         return;\n@@ -2266,7 +2266,7 @@ static void ProcessGetCFHeaders(CNode& peer, CDataStream& vRecv, const CChainPar\n     const BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n \n     const CBlockIndex* stop_index;\n-    BlockFilterIndex* filter_index;\n+    std::shared_ptr<BlockFilterIndex> filter_index;\n     if (!PrepareBlockFilterRequest(peer, chain_params, filter_type, start_height, stop_hash,\n                                    MAX_GETCFHEADERS_SIZE, stop_index, filter_index)) {\n         return;\n@@ -2320,7 +2320,7 @@ static void ProcessGetCFCheckPt(CNode& peer, CDataStream& vRecv, const CChainPar\n     const BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n \n     const CBlockIndex* stop_index;\n-    BlockFilterIndex* filter_index;\n+    std::shared_ptr<BlockFilterIndex> filter_index;\n     if (!PrepareBlockFilterRequest(peer, chain_params, filter_type, /*start_height=*/0, stop_hash,\n                                    /*max_height_diff=*/std::numeric_limits<uint32_t>::max(),\n                                    stop_index, filter_index)) {"
      },
      {
        "sha": "588651b7aca6ec05124831ef2ae1ec9109dd64e4",
        "filename": "src/node/context.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b97239276657750fb36c15264af352ab3e98128/src/node/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b97239276657750fb36c15264af352ab3e98128/src/node/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.h?ref=9b97239276657750fb36c15264af352ab3e98128",
        "patch": "@@ -36,7 +36,7 @@ class WalletClient;\n struct NodeContext {\n     std::unique_ptr<CConnman> connman;\n     std::unique_ptr<CTxMemPool> mempool;\n-    std::unique_ptr<PeerManager> peerman;\n+    std::shared_ptr<PeerManager> peerman;\n     ChainstateManager* chainman{nullptr}; // Currently a raw pointer because the memory is not managed by this struct\n     std::unique_ptr<BanMan> banman;\n     ArgsManager* args{nullptr}; // Currently a raw pointer because the memory is not managed by this struct"
      },
      {
        "sha": "17cbe177dd4488445becf71c2ea795f1301fff61",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b97239276657750fb36c15264af352ab3e98128/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b97239276657750fb36c15264af352ab3e98128/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=9b97239276657750fb36c15264af352ab3e98128",
        "patch": "@@ -2304,7 +2304,7 @@ static RPCHelpMan getblockfilter()\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown filtertype\");\n     }\n \n-    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    auto index = GetBlockFilterIndex(filtertype);\n     if (!index) {\n         throw JSONRPCError(RPC_MISC_ERROR, \"Index is not enabled for filtertype \" + filtertype_name);\n     }"
      },
      {
        "sha": "4c04225bbb665411d1fe3eab3d46dd2b9326499d",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b97239276657750fb36c15264af352ab3e98128/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b97239276657750fb36c15264af352ab3e98128/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=9b97239276657750fb36c15264af352ab3e98128",
        "patch": "@@ -972,9 +972,9 @@ static RPCHelpMan submitblock()\n \n     bool new_block;\n     auto sc = std::make_shared<submitblock_StateCatcher>(block.GetHash());\n-    RegisterSharedValidationInterface(sc);\n+    RegisterValidationInterface(sc);\n     bool accepted = EnsureChainman(request.context).ProcessNewBlock(Params(), blockptr, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n-    UnregisterSharedValidationInterface(sc);\n+    UnregisterValidationInterface(sc);\n     if (!new_block && accepted) {\n         return \"duplicate\";\n     }"
      },
      {
        "sha": "79aeb02613a3f2a897037ee19bca74e884a77eb0",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b97239276657750fb36c15264af352ab3e98128/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b97239276657750fb36c15264af352ab3e98128/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=9b97239276657750fb36c15264af352ab3e98128",
        "patch": "@@ -683,8 +683,8 @@ static RPCHelpMan getindexinfo()\n         result.pushKVs(SummaryToJSON(g_txindex->GetSummary(), index_name));\n     }\n \n-    ForEachBlockFilterIndex([&result, &index_name](const BlockFilterIndex& index) {\n-        result.pushKVs(SummaryToJSON(index.GetSummary(), index_name));\n+    ForEachBlockFilterIndex([&result, &index_name](std::shared_ptr<BlockFilterIndex> index) {\n+        result.pushKVs(SummaryToJSON(index->GetSummary(), index_name));\n     });\n \n     return result;"
      },
      {
        "sha": "b08aa28262fad6300daeaa61215af0d9513dbb6f",
        "filename": "src/test/blockfilter_index_tests.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 27,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b97239276657750fb36c15264af352ab3e98128/src/test/blockfilter_index_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b97239276657750fb36c15264af352ab3e98128/src/test/blockfilter_index_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_index_tests.cpp?ref=9b97239276657750fb36c15264af352ab3e98128",
        "patch": "@@ -23,11 +23,11 @@ struct BuildChainTestingSetup : public TestChain100Setup {\n     bool BuildChain(const CBlockIndex* pindex, const CScript& coinbase_script_pub_key, size_t length, std::vector<std::shared_ptr<CBlock>>& chain);\n };\n \n-static bool CheckFilterLookups(BlockFilterIndex& filter_index, const CBlockIndex* block_index,\n+static bool CheckFilterLookups(std::shared_ptr<BlockFilterIndex> filter_index, const CBlockIndex* block_index,\n                                uint256& last_header)\n {\n     BlockFilter expected_filter;\n-    if (!ComputeFilter(filter_index.GetFilterType(), block_index, expected_filter)) {\n+    if (!ComputeFilter(filter_index->GetFilterType(), block_index, expected_filter)) {\n         BOOST_ERROR(\"ComputeFilter failed on block \" << block_index->nHeight);\n         return false;\n     }\n@@ -37,10 +37,10 @@ static bool CheckFilterLookups(BlockFilterIndex& filter_index, const CBlockIndex\n     std::vector<BlockFilter> filters;\n     std::vector<uint256> filter_hashes;\n \n-    BOOST_CHECK(filter_index.LookupFilter(block_index, filter));\n-    BOOST_CHECK(filter_index.LookupFilterHeader(block_index, filter_header));\n-    BOOST_CHECK(filter_index.LookupFilterRange(block_index->nHeight, block_index, filters));\n-    BOOST_CHECK(filter_index.LookupFilterHashRange(block_index->nHeight, block_index,\n+    BOOST_CHECK(filter_index->LookupFilter(block_index, filter));\n+    BOOST_CHECK(filter_index->LookupFilterHeader(block_index, filter_header));\n+    BOOST_CHECK(filter_index->LookupFilterRange(block_index->nHeight, block_index, filters));\n+    BOOST_CHECK(filter_index->LookupFilterHashRange(block_index->nHeight, block_index,\n                                                    filter_hashes));\n \n     BOOST_CHECK_EQUAL(filters.size(), 1U);\n@@ -104,7 +104,7 @@ bool BuildChainTestingSetup::BuildChain(const CBlockIndex* pindex,\n \n BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n {\n-    BlockFilterIndex filter_index(BlockFilterType::BASIC, 1 << 20, true);\n+    auto filter_index = std::make_shared<BlockFilterIndex>(BlockFilterType::BASIC, 1 << 20, true);\n \n     uint256 last_header;\n \n@@ -120,23 +120,24 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n         for (const CBlockIndex* block_index = ::ChainActive().Genesis();\n              block_index != nullptr;\n              block_index = ::ChainActive().Next(block_index)) {\n-            BOOST_CHECK(!filter_index.LookupFilter(block_index, filter));\n-            BOOST_CHECK(!filter_index.LookupFilterHeader(block_index, filter_header));\n-            BOOST_CHECK(!filter_index.LookupFilterRange(block_index->nHeight, block_index, filters));\n-            BOOST_CHECK(!filter_index.LookupFilterHashRange(block_index->nHeight, block_index,\n+            BOOST_CHECK(!filter_index->LookupFilter(block_index, filter));\n+            BOOST_CHECK(!filter_index->LookupFilterHeader(block_index, filter_header));\n+            BOOST_CHECK(!filter_index->LookupFilterRange(block_index->nHeight, block_index, filters));\n+            BOOST_CHECK(!filter_index->LookupFilterHashRange(block_index->nHeight, block_index,\n                                                             filter_hashes));\n         }\n     }\n \n     // BlockUntilSyncedToCurrentChain should return false before index is started.\n-    BOOST_CHECK(!filter_index.BlockUntilSyncedToCurrentChain());\n+    BOOST_CHECK(!filter_index->BlockUntilSyncedToCurrentChain());\n \n-    filter_index.Start();\n+    RegisterValidationInterface(filter_index);\n+    filter_index->Start();\n \n     // Allow filter index to catch up with the block index.\n     constexpr int64_t timeout_ms = 10 * 1000;\n     int64_t time_start = GetTimeMillis();\n-    while (!filter_index.BlockUntilSyncedToCurrentChain()) {\n+    while (!filter_index->BlockUntilSyncedToCurrentChain()) {\n         BOOST_REQUIRE(time_start + timeout_ms > GetTimeMillis());\n         UninterruptibleSleep(std::chrono::milliseconds{100});\n     }\n@@ -181,7 +182,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n             block_index = LookupBlockIndex(block->GetHash());\n         }\n \n-        BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n+        BOOST_CHECK(filter_index->BlockUntilSyncedToCurrentChain());\n         CheckFilterLookups(filter_index, block_index, chainA_last_header);\n     }\n \n@@ -199,7 +200,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n             block_index = LookupBlockIndex(block->GetHash());\n         }\n \n-        BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n+        BOOST_CHECK(filter_index->BlockUntilSyncedToCurrentChain());\n         CheckFilterLookups(filter_index, block_index, chainB_last_header);\n     }\n \n@@ -213,7 +214,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n             block_index = LookupBlockIndex(block->GetHash());\n         }\n \n-        BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n+        BOOST_CHECK(filter_index->BlockUntilSyncedToCurrentChain());\n         CheckFilterLookups(filter_index, block_index, chainA_last_header);\n     }\n \n@@ -233,14 +234,14 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n              LOCK(cs_main);\n              block_index = LookupBlockIndex(chainA[i]->GetHash());\n          }\n-         BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n+         BOOST_CHECK(filter_index->BlockUntilSyncedToCurrentChain());\n          CheckFilterLookups(filter_index, block_index, chainA_last_header);\n \n          {\n              LOCK(cs_main);\n              block_index = LookupBlockIndex(chainB[i]->GetHash());\n          }\n-         BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n+         BOOST_CHECK(filter_index->BlockUntilSyncedToCurrentChain());\n          CheckFilterLookups(filter_index, block_index, chainB_last_header);\n      }\n \n@@ -252,8 +253,8 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n         LOCK(cs_main);\n         tip = ::ChainActive().Tip();\n     }\n-    BOOST_CHECK(filter_index.LookupFilterRange(0, tip, filters));\n-    BOOST_CHECK(filter_index.LookupFilterHashRange(0, tip, filter_hashes));\n+    BOOST_CHECK(filter_index->LookupFilterRange(0, tip, filters));\n+    BOOST_CHECK(filter_index->LookupFilterHashRange(0, tip, filter_hashes));\n \n     assert(tip->nHeight >= 0);\n     BOOST_CHECK_EQUAL(filters.size(), tip->nHeight + 1U);\n@@ -262,15 +263,14 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n     filters.clear();\n     filter_hashes.clear();\n \n-    filter_index.Interrupt();\n-    filter_index.Stop();\n+    filter_index->Interrupt();\n+    UnregisterValidationInterface(filter_index);\n+    filter_index->Stop();\n }\n \n BOOST_FIXTURE_TEST_CASE(blockfilter_index_init_destroy, BasicTestingSetup)\n {\n-    BlockFilterIndex* filter_index;\n-\n-    filter_index = GetBlockFilterIndex(BlockFilterType::BASIC);\n+    auto filter_index = GetBlockFilterIndex(BlockFilterType::BASIC);\n     BOOST_CHECK(filter_index == nullptr);\n \n     BOOST_CHECK(InitBlockFilterIndex(BlockFilterType::BASIC, 1 << 20, true, false));\n@@ -283,7 +283,9 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_init_destroy, BasicTestingSetup)\n     BOOST_CHECK(!InitBlockFilterIndex(BlockFilterType::BASIC, 1 << 20, true, false));\n \n     int iter_count = 0;\n-    ForEachBlockFilterIndex([&iter_count](BlockFilterIndex& _index) { iter_count++; });\n+    ForEachBlockFilterIndex([&iter_count](std::shared_ptr<BlockFilterIndex>) {\n+        iter_count++;\n+    });\n     BOOST_CHECK_EQUAL(iter_count, 1);\n \n     BOOST_CHECK(DestroyBlockFilterIndex(BlockFilterType::BASIC));"
      },
      {
        "sha": "b31966f204094205a3cc778002cc36a048f01fac",
        "filename": "src/test/txindex_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 10,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b97239276657750fb36c15264af352ab3e98128/src/test/txindex_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b97239276657750fb36c15264af352ab3e98128/src/test/txindex_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txindex_tests.cpp?ref=9b97239276657750fb36c15264af352ab3e98128",
        "patch": "@@ -14,38 +14,39 @@ BOOST_AUTO_TEST_SUITE(txindex_tests)\n \n BOOST_FIXTURE_TEST_CASE(txindex_initial_sync, TestChain100Setup)\n {\n-    TxIndex txindex(1 << 20, true);\n+    auto txindex = std::make_shared<TxIndex>(1 << 20, true);\n \n     CTransactionRef tx_disk;\n     uint256 block_hash;\n \n     // Transaction should not be found in the index before it is started.\n     for (const auto& txn : m_coinbase_txns) {\n-        BOOST_CHECK(!txindex.FindTx(txn->GetHash(), block_hash, tx_disk));\n+        BOOST_CHECK(!txindex->FindTx(txn->GetHash(), block_hash, tx_disk));\n     }\n \n     // BlockUntilSyncedToCurrentChain should return false before txindex is started.\n-    BOOST_CHECK(!txindex.BlockUntilSyncedToCurrentChain());\n+    BOOST_CHECK(!txindex->BlockUntilSyncedToCurrentChain());\n \n-    txindex.Start();\n+    RegisterValidationInterface(txindex);\n+    txindex->Start();\n \n     // Allow tx index to catch up with the block index.\n     constexpr int64_t timeout_ms = 10 * 1000;\n     int64_t time_start = GetTimeMillis();\n-    while (!txindex.BlockUntilSyncedToCurrentChain()) {\n+    while (!txindex->BlockUntilSyncedToCurrentChain()) {\n         BOOST_REQUIRE(time_start + timeout_ms > GetTimeMillis());\n         UninterruptibleSleep(std::chrono::milliseconds{100});\n     }\n \n     // Check that txindex excludes genesis block transactions.\n     const CBlock& genesis_block = Params().GenesisBlock();\n     for (const auto& txn : genesis_block.vtx) {\n-        BOOST_CHECK(!txindex.FindTx(txn->GetHash(), block_hash, tx_disk));\n+        BOOST_CHECK(!txindex->FindTx(txn->GetHash(), block_hash, tx_disk));\n     }\n \n     // Check that txindex has all txs that were in the chain before it started.\n     for (const auto& txn : m_coinbase_txns) {\n-        if (!txindex.FindTx(txn->GetHash(), block_hash, tx_disk)) {\n+        if (!txindex->FindTx(txn->GetHash(), block_hash, tx_disk)) {\n             BOOST_ERROR(\"FindTx failed\");\n         } else if (tx_disk->GetHash() != txn->GetHash()) {\n             BOOST_ERROR(\"Read incorrect tx\");\n@@ -59,16 +60,17 @@ BOOST_FIXTURE_TEST_CASE(txindex_initial_sync, TestChain100Setup)\n         const CBlock& block = CreateAndProcessBlock(no_txns, coinbase_script_pub_key);\n         const CTransaction& txn = *block.vtx[0];\n \n-        BOOST_CHECK(txindex.BlockUntilSyncedToCurrentChain());\n-        if (!txindex.FindTx(txn.GetHash(), block_hash, tx_disk)) {\n+        BOOST_CHECK(txindex->BlockUntilSyncedToCurrentChain());\n+        if (!txindex->FindTx(txn.GetHash(), block_hash, tx_disk)) {\n             BOOST_ERROR(\"FindTx failed\");\n         } else if (tx_disk->GetHash() != txn.GetHash()) {\n             BOOST_ERROR(\"Read incorrect tx\");\n         }\n     }\n \n     // shutdown sequence (c.f. Shutdown() in init.cpp)\n-    txindex.Stop();\n+    UnregisterValidationInterface(txindex);\n+    txindex->Stop();\n \n     // Let scheduler events finish running to avoid accessing any memory related to txindex after it is destructed\n     SyncWithValidationInterfaceQueue();"
      },
      {
        "sha": "e80268e6d4bd1ed821254030b2d983da01bb9229",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b97239276657750fb36c15264af352ab3e98128/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b97239276657750fb36c15264af352ab3e98128/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=9b97239276657750fb36c15264af352ab3e98128",
        "patch": "@@ -169,10 +169,10 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n \n     m_node.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     m_node.connman = MakeUnique<CConnman>(0x1337, 0x1337); // Deterministic randomness for tests.\n-    m_node.peerman = MakeUnique<PeerManager>(chainparams, *m_node.connman, m_node.banman.get(), *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n+    m_node.peerman = std::make_shared<PeerManager>(chainparams, *m_node.connman, m_node.banman.get(), *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n     {\n         CConnman::Options options;\n-        options.m_msgproc = m_node.peerman.get();\n+        options.m_msgproc = m_node.peerman;\n         m_node.connman->Init(options);\n     }\n }"
      },
      {
        "sha": "729ad820112904e7c7288f46dd77ba9a734f651d",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b97239276657750fb36c15264af352ab3e98128/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b97239276657750fb36c15264af352ab3e98128/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=9b97239276657750fb36c15264af352ab3e98128",
        "patch": "@@ -176,7 +176,7 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n         initial_tip = ::ChainActive().Tip();\n     }\n     auto sub = std::make_shared<TestSubscriber>(initial_tip->GetBlockHash());\n-    RegisterSharedValidationInterface(sub);\n+    RegisterValidationInterface(sub);\n \n     // create a bunch of threads that repeatedly process a block generated above at random\n     // this will create parallelism and randomness inside validation - the ValidationInterface\n@@ -206,7 +206,7 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     }\n     SyncWithValidationInterfaceQueue();\n \n-    UnregisterSharedValidationInterface(sub);\n+    UnregisterValidationInterface(sub);\n \n     LOCK(cs_main);\n     BOOST_CHECK_EQUAL(sub->m_expected_tip, ::ChainActive().Tip()->GetBlockHash());"
      },
      {
        "sha": "cc7bc77ae6fe8312f5782c49280dbcdc259733e8",
        "filename": "src/test/validationinterface_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b97239276657750fb36c15264af352ab3e98128/src/test/validationinterface_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b97239276657750fb36c15264af352ab3e98128/src/test/validationinterface_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validationinterface_tests.cpp?ref=9b97239276657750fb36c15264af352ab3e98128",
        "patch": "@@ -34,8 +34,8 @@ BOOST_AUTO_TEST_CASE(unregister_validation_interface_race)\n         // keep going for about 1 sec, which is 250k iterations\n         for (int i = 0; i < 250000; i++) {\n             auto sub = std::make_shared<TestSubscriberNoop>();\n-            RegisterSharedValidationInterface(sub);\n-            UnregisterSharedValidationInterface(sub);\n+            RegisterValidationInterface(sub);\n+            UnregisterValidationInterface(sub);\n         }\n         // tell the other thread we are done\n         generate = false;\n@@ -77,7 +77,7 @@ class TestInterface : public CValidationInterface\n BOOST_AUTO_TEST_CASE(unregister_all_during_call)\n {\n     bool destroyed = false;\n-    RegisterSharedValidationInterface(std::make_shared<TestInterface>(\n+    RegisterValidationInterface(std::make_shared<TestInterface>(\n         [&] {\n             // First call should decrements reference count 2 -> 1\n             UnregisterAllValidationInterfaces();"
      },
      {
        "sha": "5c7019a4c70d51987a9993f67574f3418d9d44d0",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 23,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b97239276657750fb36c15264af352ab3e98128/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b97239276657750fb36c15264af352ab3e98128/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=9b97239276657750fb36c15264af352ab3e98128",
        "patch": "@@ -50,10 +50,10 @@ struct MainSignalsInstance {\n         inserted.first->second->callbacks = std::move(callbacks);\n     }\n \n-    void Unregister(CValidationInterface* callbacks)\n+    void Unregister(std::shared_ptr<CValidationInterface> callbacks)\n     {\n         LOCK(m_mutex);\n-        auto it = m_map.find(callbacks);\n+        auto it = m_map.find(callbacks.get());\n         if (it != m_map.end()) {\n             if (!--it->second->count) m_list.erase(it->second);\n             m_map.erase(it);\n@@ -118,42 +118,31 @@ CMainSignals& GetMainSignals()\n     return g_signals;\n }\n \n-void RegisterSharedValidationInterface(std::shared_ptr<CValidationInterface> callbacks)\n+void RegisterValidationInterface(std::shared_ptr<CValidationInterface> callbacks)\n {\n     // Each connection captures the shared_ptr to ensure that each callback is\n     // executed before the subscriber is destroyed. For more details see #18338.\n+    assert(g_signals.m_internals);\n     g_signals.m_internals->Register(std::move(callbacks));\n }\n \n-void RegisterValidationInterface(CValidationInterface* callbacks)\n-{\n-    // Create a shared_ptr with a no-op deleter - CValidationInterface lifecycle\n-    // is managed by the caller.\n-    RegisterSharedValidationInterface({callbacks, [](CValidationInterface*){}});\n-}\n-\n-void UnregisterSharedValidationInterface(std::shared_ptr<CValidationInterface> callbacks)\n-{\n-    UnregisterValidationInterface(callbacks.get());\n-}\n-\n-void UnregisterValidationInterface(CValidationInterface* callbacks)\n+void UnregisterValidationInterface(std::shared_ptr<CValidationInterface> callbacks)\n {\n     if (g_signals.m_internals) {\n-        g_signals.m_internals->Unregister(callbacks);\n+        g_signals.m_internals->Unregister(std::move(callbacks));\n     }\n }\n \n void UnregisterAllValidationInterfaces()\n {\n-    if (!g_signals.m_internals) {\n-        return;\n+    if (g_signals.m_internals) {\n+        g_signals.m_internals->Clear();\n     }\n-    g_signals.m_internals->Clear();\n }\n \n void CallFunctionInValidationInterfaceQueue(std::function<void()> func)\n {\n+    assert(g_signals.m_internals);\n     g_signals.m_internals->m_schedulerClient.AddToProcessQueue(std::move(func));\n }\n \n@@ -189,7 +178,7 @@ void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockInd\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n-\n+    assert(m_internals);\n     auto event = [pindexNew, pindexFork, fInitialDownload, this] {\n         m_internals->Iterate([&](CValidationInterface& callbacks) { callbacks.UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload); });\n     };\n@@ -200,6 +189,7 @@ void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockInd\n }\n \n void CMainSignals::TransactionAddedToMempool(const CTransactionRef& tx, uint64_t mempool_sequence) {\n+    assert(m_internals);\n     auto event = [tx, mempool_sequence, this] {\n         m_internals->Iterate([&](CValidationInterface& callbacks) { callbacks.TransactionAddedToMempool(tx, mempool_sequence); });\n     };\n@@ -209,6 +199,7 @@ void CMainSignals::TransactionAddedToMempool(const CTransactionRef& tx, uint64_t\n }\n \n void CMainSignals::TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t mempool_sequence) {\n+    assert(m_internals);\n     auto event = [tx, reason, mempool_sequence, this] {\n         m_internals->Iterate([&](CValidationInterface& callbacks) { callbacks.TransactionRemovedFromMempool(tx, reason, mempool_sequence); });\n     };\n@@ -218,6 +209,7 @@ void CMainSignals::TransactionRemovedFromMempool(const CTransactionRef& tx, MemP\n }\n \n void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex) {\n+    assert(m_internals);\n     auto event = [pblock, pindex, this] {\n         m_internals->Iterate([&](CValidationInterface& callbacks) { callbacks.BlockConnected(pblock, pindex); });\n     };\n@@ -226,8 +218,8 @@ void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, c\n                           pindex->nHeight);\n }\n \n-void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex)\n-{\n+void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex) {\n+    assert(m_internals);\n     auto event = [pblock, pindex, this] {\n         m_internals->Iterate([&](CValidationInterface& callbacks) { callbacks.BlockDisconnected(pblock, pindex); });\n     };\n@@ -237,6 +229,7 @@ void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock\n }\n \n void CMainSignals::ChainStateFlushed(const CBlockLocator &locator) {\n+    assert(m_internals);\n     auto event = [locator, this] {\n         m_internals->Iterate([&](CValidationInterface& callbacks) { callbacks.ChainStateFlushed(locator); });\n     };\n@@ -245,12 +238,14 @@ void CMainSignals::ChainStateFlushed(const CBlockLocator &locator) {\n }\n \n void CMainSignals::BlockChecked(const CBlock& block, const BlockValidationState& state) {\n+    assert(m_internals);\n     LOG_EVENT(\"%s: block hash=%s state=%s\", __func__,\n               block.GetHash().ToString(), state.ToString());\n     m_internals->Iterate([&](CValidationInterface& callbacks) { callbacks.BlockChecked(block, state); });\n }\n \n void CMainSignals::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock> &block) {\n+    assert(m_internals);\n     LOG_EVENT(\"%s: block hash=%s\", __func__, block->GetHash().ToString());\n     m_internals->Iterate([&](CValidationInterface& callbacks) { callbacks.NewPoWValidBlock(pindex, block); });\n }"
      },
      {
        "sha": "3ee744d5a7e662354e48d774213e4e6a501d8ca0",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 5,
        "deletions": 14,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b97239276657750fb36c15264af352ab3e98128/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b97239276657750fb36c15264af352ab3e98128/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=9b97239276657750fb36c15264af352ab3e98128",
        "patch": "@@ -24,21 +24,12 @@ class CScheduler;\n enum class MemPoolRemovalReason;\n \n /** Register subscriber */\n-void RegisterValidationInterface(CValidationInterface* callbacks);\n-/** Unregister subscriber. DEPRECATED. This is not safe to use when the RPC server or main message handler thread is running. */\n-void UnregisterValidationInterface(CValidationInterface* callbacks);\n+void RegisterValidationInterface(std::shared_ptr<CValidationInterface> callbacks);\n+/** Unregister subscriber */\n+void UnregisterValidationInterface(std::shared_ptr<CValidationInterface> callbacks);\n /** Unregister all subscribers */\n void UnregisterAllValidationInterfaces();\n \n-// Alternate registration functions that release a shared_ptr after the last\n-// notification is sent. These are useful for race-free cleanup, since\n-// unregistration is nonblocking and can return before the last notification is\n-// processed.\n-/** Register subscriber */\n-void RegisterSharedValidationInterface(std::shared_ptr<CValidationInterface> callbacks);\n-/** Unregister subscriber */\n-void UnregisterSharedValidationInterface(std::shared_ptr<CValidationInterface> callbacks);\n-\n /**\n  * Pushes a function to callback onto the notification queue, guaranteeing any\n  * callbacks generated prior to now are finished when the function is called.\n@@ -181,8 +172,8 @@ class CMainSignals {\n private:\n     std::unique_ptr<MainSignalsInstance> m_internals;\n \n-    friend void ::RegisterSharedValidationInterface(std::shared_ptr<CValidationInterface>);\n-    friend void ::UnregisterValidationInterface(CValidationInterface*);\n+    friend void ::RegisterValidationInterface(std::shared_ptr<CValidationInterface>);\n+    friend void ::UnregisterValidationInterface(std::shared_ptr<CValidationInterface>);\n     friend void ::UnregisterAllValidationInterfaces();\n     friend void ::CallFunctionInValidationInterfaceQueue(std::function<void ()> func);\n "
      },
      {
        "sha": "43498185c2ae3f00d9126f0d3eddb882ae5643d6",
        "filename": "src/wallet/test/psbt_wallet_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b97239276657750fb36c15264af352ab3e98128/src/wallet/test/psbt_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b97239276657750fb36c15264af352ab3e98128/src/wallet/test/psbt_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/psbt_wallet_tests.cpp?ref=9b97239276657750fb36c15264af352ab3e98128",
        "patch": "@@ -15,19 +15,19 @@ BOOST_FIXTURE_TEST_SUITE(psbt_wallet_tests, WalletTestingSetup)\n \n BOOST_AUTO_TEST_CASE(psbt_updater_test)\n {\n-    auto spk_man = m_wallet.GetOrCreateLegacyScriptPubKeyMan();\n-    LOCK2(m_wallet.cs_wallet, spk_man->cs_KeyStore);\n+    auto spk_man = m_wallet->GetOrCreateLegacyScriptPubKeyMan();\n+    LOCK2(m_wallet->cs_wallet, spk_man->cs_KeyStore);\n \n     // Create prevtxs and add to wallet\n     CDataStream s_prev_tx1(ParseHex(\"0200000000010158e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd7501000000171600145f275f436b09a8cc9a2eb2a2f528485c68a56323feffffff02d8231f1b0100000017a914aed962d6654f9a2b36608eb9d64d2b260db4f1118700c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e88702483045022100a22edcc6e5bc511af4cc4ae0de0fcd75c7e04d8c1c3a8aa9d820ed4b967384ec02200642963597b9b1bc22c75e9f3e117284a962188bf5e8a74c895089046a20ad770121035509a48eb623e10aace8bfd0212fdb8a8e5af3c94b0b133b95e114cab89e4f7965000000\"), SER_NETWORK, PROTOCOL_VERSION);\n     CTransactionRef prev_tx1;\n     s_prev_tx1 >> prev_tx1;\n-    m_wallet.mapWallet.emplace(std::piecewise_construct, std::forward_as_tuple(prev_tx1->GetHash()), std::forward_as_tuple(&m_wallet, prev_tx1));\n+    m_wallet->mapWallet.emplace(std::piecewise_construct, std::forward_as_tuple(prev_tx1->GetHash()), std::forward_as_tuple(m_wallet.get(), prev_tx1));\n \n     CDataStream s_prev_tx2(ParseHex(\"0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f618765000000\"), SER_NETWORK, PROTOCOL_VERSION);\n     CTransactionRef prev_tx2;\n     s_prev_tx2 >> prev_tx2;\n-    m_wallet.mapWallet.emplace(std::piecewise_construct, std::forward_as_tuple(prev_tx2->GetHash()), std::forward_as_tuple(&m_wallet, prev_tx2));\n+    m_wallet->mapWallet.emplace(std::piecewise_construct, std::forward_as_tuple(prev_tx2->GetHash()), std::forward_as_tuple(m_wallet.get(), prev_tx2));\n \n     // Add scripts\n     CScript rs1;\n@@ -58,7 +58,7 @@ BOOST_AUTO_TEST_CASE(psbt_updater_test)\n \n     // Fill transaction with our data\n     bool complete = true;\n-    BOOST_REQUIRE_EQUAL(TransactionError::OK, m_wallet.FillPSBT(psbtx, complete, SIGHASH_ALL, false, true));\n+    BOOST_REQUIRE_EQUAL(TransactionError::OK, m_wallet->FillPSBT(psbtx, complete, SIGHASH_ALL, false, true));\n \n     // Get the final tx\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);"
      },
      {
        "sha": "ac8fb96fa256668033a7512e144f32944ca415ef",
        "filename": "src/wallet/test/wallet_test_fixture.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b97239276657750fb36c15264af352ab3e98128/src/wallet/test/wallet_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b97239276657750fb36c15264af352ab3e98128/src/wallet/test/wallet_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.cpp?ref=9b97239276657750fb36c15264af352ab3e98128",
        "patch": "@@ -6,10 +6,10 @@\n \n WalletTestingSetup::WalletTestingSetup(const std::string& chainName)\n     : TestingSetup(chainName),\n-      m_wallet(m_chain.get(), \"\", CreateMockWalletDatabase())\n+      m_wallet(std::make_shared<CWallet>(m_chain.get(), \"\", CreateMockWalletDatabase()))\n {\n     bool fFirstRun;\n-    m_wallet.LoadWallet(fFirstRun);\n-    m_chain_notifications_handler = m_chain->handleNotifications({ &m_wallet, [](CWallet*) {} });\n+    m_wallet->LoadWallet(fFirstRun);\n+    m_chain_notifications_handler = m_chain->handleNotifications(m_wallet);\n     m_wallet_client->registerRpcs();\n }"
      },
      {
        "sha": "b6e1803a2784d71e9bccc91f8362368e3e6a49a8",
        "filename": "src/wallet/test/wallet_test_fixture.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b97239276657750fb36c15264af352ab3e98128/src/wallet/test/wallet_test_fixture.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b97239276657750fb36c15264af352ab3e98128/src/wallet/test/wallet_test_fixture.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.h?ref=9b97239276657750fb36c15264af352ab3e98128",
        "patch": "@@ -22,7 +22,7 @@ struct WalletTestingSetup : public TestingSetup {\n \n     std::unique_ptr<interfaces::Chain> m_chain = interfaces::MakeChain(m_node);\n     std::unique_ptr<interfaces::WalletClient> m_wallet_client = interfaces::MakeWalletClient(*m_chain, *Assert(m_node.args));\n-    CWallet m_wallet;\n+    std::shared_ptr<CWallet> m_wallet;\n     std::unique_ptr<interfaces::Handler> m_chain_notifications_handler;\n };\n "
      },
      {
        "sha": "df925476f5ebb1a80b13a19cc09690f43672e698",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b97239276657750fb36c15264af352ab3e98128/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b97239276657750fb36c15264af352ab3e98128/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=9b97239276657750fb36c15264af352ab3e98128",
        "patch": "@@ -372,24 +372,24 @@ static int64_t AddTx(ChainstateManager& chainman, CWallet& wallet, uint32_t lock\n BOOST_AUTO_TEST_CASE(ComputeTimeSmart)\n {\n     // New transaction should use clock time if lower than block time.\n-    BOOST_CHECK_EQUAL(AddTx(*m_node.chainman, m_wallet, 1, 100, 120), 100);\n+    BOOST_CHECK_EQUAL(AddTx(*m_node.chainman, *m_wallet, 1, 100, 120), 100);\n \n     // Test that updating existing transaction does not change smart time.\n-    BOOST_CHECK_EQUAL(AddTx(*m_node.chainman, m_wallet, 1, 200, 220), 100);\n+    BOOST_CHECK_EQUAL(AddTx(*m_node.chainman, *m_wallet, 1, 200, 220), 100);\n \n     // New transaction should use clock time if there's no block time.\n-    BOOST_CHECK_EQUAL(AddTx(*m_node.chainman, m_wallet, 2, 300, 0), 300);\n+    BOOST_CHECK_EQUAL(AddTx(*m_node.chainman, *m_wallet, 2, 300, 0), 300);\n \n     // New transaction should use block time if lower than clock time.\n-    BOOST_CHECK_EQUAL(AddTx(*m_node.chainman, m_wallet, 3, 420, 400), 400);\n+    BOOST_CHECK_EQUAL(AddTx(*m_node.chainman, *m_wallet, 3, 420, 400), 400);\n \n     // New transaction should use latest entry time if higher than\n     // min(block time, clock time).\n-    BOOST_CHECK_EQUAL(AddTx(*m_node.chainman, m_wallet, 4, 500, 390), 400);\n+    BOOST_CHECK_EQUAL(AddTx(*m_node.chainman, *m_wallet, 4, 500, 390), 400);\n \n     // If there are future entries, new transaction should use time of the\n     // newest entry that is no more than 300 seconds ahead of the clock time.\n-    BOOST_CHECK_EQUAL(AddTx(*m_node.chainman, m_wallet, 5, 50, 600), 300);\n+    BOOST_CHECK_EQUAL(AddTx(*m_node.chainman, *m_wallet, 5, 50, 600), 300);\n \n     // Reset mock time for other tests.\n     SetMockTime(0);\n@@ -398,13 +398,13 @@ BOOST_AUTO_TEST_CASE(ComputeTimeSmart)\n BOOST_AUTO_TEST_CASE(LoadReceiveRequests)\n {\n     CTxDestination dest = PKHash();\n-    LOCK(m_wallet.cs_wallet);\n-    WalletBatch batch{m_wallet.GetDatabase()};\n-    m_wallet.AddDestData(batch, dest, \"misc\", \"val_misc\");\n-    m_wallet.AddDestData(batch, dest, \"rr0\", \"val_rr0\");\n-    m_wallet.AddDestData(batch, dest, \"rr1\", \"val_rr1\");\n+    LOCK(m_wallet->cs_wallet);\n+    WalletBatch batch{m_wallet->GetDatabase()};\n+    m_wallet->AddDestData(batch, dest, \"misc\", \"val_misc\");\n+    m_wallet->AddDestData(batch, dest, \"rr0\", \"val_rr0\");\n+    m_wallet->AddDestData(batch, dest, \"rr1\", \"val_rr1\");\n \n-    auto values = m_wallet.GetDestValues(\"rr\");\n+    auto values = m_wallet->GetDestValues(\"rr\");\n     BOOST_CHECK_EQUAL(values.size(), 2U);\n     BOOST_CHECK_EQUAL(values[0], \"val_rr0\");\n     BOOST_CHECK_EQUAL(values[1], \"val_rr1\");\n@@ -460,7 +460,7 @@ BOOST_AUTO_TEST_CASE(WatchOnlyPubKeys)\n {\n     CKey key;\n     CPubKey pubkey;\n-    LegacyScriptPubKeyMan* spk_man = m_wallet.GetOrCreateLegacyScriptPubKeyMan();\n+    LegacyScriptPubKeyMan* spk_man = m_wallet->GetOrCreateLegacyScriptPubKeyMan();\n \n     BOOST_CHECK(!spk_man->HaveWatchOnly());\n "
      },
      {
        "sha": "87c8854e3d89810efba85ae6a7e119b803f5bf83",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b97239276657750fb36c15264af352ab3e98128/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b97239276657750fb36c15264af352ab3e98128/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=9b97239276657750fb36c15264af352ab3e98128",
        "patch": "@@ -188,4 +188,4 @@ void CZMQNotificationInterface::BlockDisconnected(const std::shared_ptr<const CB\n     });\n }\n \n-CZMQNotificationInterface* g_zmq_notification_interface = nullptr;\n+std::shared_ptr<CZMQNotificationInterface> g_zmq_notification_interface;"
      },
      {
        "sha": "c902e0e41f2532fcaa4c09c145723c1b5c66d82c",
        "filename": "src/zmq/zmqnotificationinterface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b97239276657750fb36c15264af352ab3e98128/src/zmq/zmqnotificationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b97239276657750fb36c15264af352ab3e98128/src/zmq/zmqnotificationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.h?ref=9b97239276657750fb36c15264af352ab3e98128",
        "patch": "@@ -39,6 +39,6 @@ class CZMQNotificationInterface final : public CValidationInterface\n     std::list<std::unique_ptr<CZMQAbstractNotifier>> notifiers;\n };\n \n-extern CZMQNotificationInterface* g_zmq_notification_interface;\n+extern std::shared_ptr<CZMQNotificationInterface> g_zmq_notification_interface;\n \n #endif // BITCOIN_ZMQ_ZMQNOTIFICATIONINTERFACE_H"
      }
    ]
  },
  {
    "sha": "c45eb76e7ae17e4a2489b95bffac735621c02ef4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDVlYjc2ZTdhZTE3ZTRhMjQ4OWI5NWJmZmFjNzM1NjIxYzAyZWY0",
    "commit": {
      "author": {
        "name": "Anthony Fieroni",
        "email": "bvbfan@abv.bg",
        "date": "2020-10-07T12:03:50Z"
      },
      "committer": {
        "name": "Anthony Fieroni",
        "email": "bvbfan@abv.bg",
        "date": "2020-10-07T12:28:05Z"
      },
      "message": "Use weak reference to chain notification in validation interface proxy\n\nSigned-off-by: Anthony Fieroni <bvbfan@abv.bg>",
      "tree": {
        "sha": "dfe6a422a3a81a78b29462fc9c80a149e538f8a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dfe6a422a3a81a78b29462fc9c80a149e538f8a0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c45eb76e7ae17e4a2489b95bffac735621c02ef4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c45eb76e7ae17e4a2489b95bffac735621c02ef4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c45eb76e7ae17e4a2489b95bffac735621c02ef4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c45eb76e7ae17e4a2489b95bffac735621c02ef4/comments",
    "author": {
      "login": "bvbfan",
      "id": 8323581,
      "node_id": "MDQ6VXNlcjgzMjM1ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8323581?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvbfan",
      "html_url": "https://github.com/bvbfan",
      "followers_url": "https://api.github.com/users/bvbfan/followers",
      "following_url": "https://api.github.com/users/bvbfan/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvbfan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvbfan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvbfan/subscriptions",
      "organizations_url": "https://api.github.com/users/bvbfan/orgs",
      "repos_url": "https://api.github.com/users/bvbfan/repos",
      "events_url": "https://api.github.com/users/bvbfan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvbfan/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "bvbfan",
      "id": 8323581,
      "node_id": "MDQ6VXNlcjgzMjM1ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8323581?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvbfan",
      "html_url": "https://github.com/bvbfan",
      "followers_url": "https://api.github.com/users/bvbfan/followers",
      "following_url": "https://api.github.com/users/bvbfan/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvbfan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvbfan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvbfan/subscriptions",
      "organizations_url": "https://api.github.com/users/bvbfan/orgs",
      "repos_url": "https://api.github.com/users/bvbfan/repos",
      "events_url": "https://api.github.com/users/bvbfan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvbfan/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b97239276657750fb36c15264af352ab3e98128",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b97239276657750fb36c15264af352ab3e98128",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b97239276657750fb36c15264af352ab3e98128"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 23,
      "deletions": 12
    },
    "files": [
      {
        "sha": "774f02e212436729fde48050f15cee8105206a07",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 11,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c45eb76e7ae17e4a2489b95bffac735621c02ef4/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c45eb76e7ae17e4a2489b95bffac735621c02ef4/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=c45eb76e7ae17e4a2489b95bffac735621c02ef4",
        "patch": "@@ -56,37 +56,48 @@ bool FillBlock(const CBlockIndex* index, const FoundBlock& block, UniqueLock<Rec\n class NotificationsProxy : public CValidationInterface\n {\n public:\n-    explicit NotificationsProxy(std::shared_ptr<Chain::Notifications> notifications)\n-        : m_notifications(std::move(notifications)) {}\n+    explicit NotificationsProxy(std::weak_ptr<Chain::Notifications> notifications)\n+        : m_notifications(std::move(notifications))\n+    {\n+    }\n     virtual ~NotificationsProxy() = default;\n     void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t mempool_sequence) override\n     {\n-        m_notifications->transactionAddedToMempool(tx, mempool_sequence);\n+        if (auto notification = m_notifications.lock())\n+            notification->transactionAddedToMempool(tx, mempool_sequence);\n     }\n     void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t mempool_sequence) override\n     {\n-        m_notifications->transactionRemovedFromMempool(tx, reason, mempool_sequence);\n+        if (auto notification = m_notifications.lock())\n+            notification->transactionRemovedFromMempool(tx, reason, mempool_sequence);\n     }\n     void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* index) override\n     {\n-        m_notifications->blockConnected(*block, index->nHeight);\n+        if (auto notification = m_notifications.lock())\n+            notification->blockConnected(*block, index->nHeight);\n     }\n     void BlockDisconnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* index) override\n     {\n-        m_notifications->blockDisconnected(*block, index->nHeight);\n+        if (auto notification = m_notifications.lock())\n+            notification->blockDisconnected(*block, index->nHeight);\n     }\n     void UpdatedBlockTip(const CBlockIndex* index, const CBlockIndex* fork_index, bool is_ibd) override\n     {\n-        m_notifications->updatedBlockTip();\n+        if (auto notification = m_notifications.lock())\n+            notification->updatedBlockTip();\n+    }\n+    void ChainStateFlushed(const CBlockLocator& locator) override\n+    {\n+        if (auto notification = m_notifications.lock())\n+            notification->chainStateFlushed(locator);\n     }\n-    void ChainStateFlushed(const CBlockLocator& locator) override { m_notifications->chainStateFlushed(locator); }\n-    std::shared_ptr<Chain::Notifications> m_notifications;\n+    std::weak_ptr<Chain::Notifications> m_notifications;\n };\n \n class NotificationsHandlerImpl : public Handler\n {\n public:\n-    explicit NotificationsHandlerImpl(std::shared_ptr<Chain::Notifications> notifications)\n+    explicit NotificationsHandlerImpl(std::weak_ptr<Chain::Notifications> notifications)\n         : m_proxy(std::make_shared<NotificationsProxy>(std::move(notifications)))\n     {\n         RegisterValidationInterface(m_proxy);\n@@ -357,7 +368,7 @@ class ChainImpl : public Chain\n     {\n         ::uiInterface.ShowProgress(title, progress, resume_possible);\n     }\n-    std::unique_ptr<Handler> handleNotifications(std::shared_ptr<Notifications> notifications) override\n+    std::unique_ptr<Handler> handleNotifications(std::weak_ptr<Notifications> notifications) override\n     {\n         return MakeUnique<NotificationsHandlerImpl>(std::move(notifications));\n     }"
      },
      {
        "sha": "f9b1749456de0ed013d6398ecece18e532b30c2e",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c45eb76e7ae17e4a2489b95bffac735621c02ef4/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c45eb76e7ae17e4a2489b95bffac735621c02ef4/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=c45eb76e7ae17e4a2489b95bffac735621c02ef4",
        "patch": "@@ -251,7 +251,7 @@ class Chain\n     };\n \n     //! Register handler for notifications.\n-    virtual std::unique_ptr<Handler> handleNotifications(std::shared_ptr<Notifications> notifications) = 0;\n+    virtual std::unique_ptr<Handler> handleNotifications(std::weak_ptr<Notifications> notifications) = 0;\n \n     //! Wait for pending notifications to be processed unless block hash points to the current\n     //! chain tip."
      }
    ]
  },
  {
    "sha": "557b59670d1cf278fdf85ea83806fed3f05d1913",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NTdiNTk2NzBkMWNmMjc4ZmRmODVlYTgzODA2ZmVkM2YwNWQxOTEz",
    "commit": {
      "author": {
        "name": "Anthony Fieroni",
        "email": "bvbfan@abv.bg",
        "date": "2020-10-07T12:23:50Z"
      },
      "committer": {
        "name": "Anthony Fieroni",
        "email": "bvbfan@abv.bg",
        "date": "2020-10-07T12:28:05Z"
      },
      "message": "Make interface classes desctructor virtual\n\nSigned-off-by: Anthony Fieroni <bvbfan@abv.bg>",
      "tree": {
        "sha": "221b9f2311e00ff5e8923e590e888cab6053ba6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/221b9f2311e00ff5e8923e590e888cab6053ba6a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/557b59670d1cf278fdf85ea83806fed3f05d1913",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/557b59670d1cf278fdf85ea83806fed3f05d1913",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/557b59670d1cf278fdf85ea83806fed3f05d1913",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/557b59670d1cf278fdf85ea83806fed3f05d1913/comments",
    "author": {
      "login": "bvbfan",
      "id": 8323581,
      "node_id": "MDQ6VXNlcjgzMjM1ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8323581?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvbfan",
      "html_url": "https://github.com/bvbfan",
      "followers_url": "https://api.github.com/users/bvbfan/followers",
      "following_url": "https://api.github.com/users/bvbfan/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvbfan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvbfan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvbfan/subscriptions",
      "organizations_url": "https://api.github.com/users/bvbfan/orgs",
      "repos_url": "https://api.github.com/users/bvbfan/repos",
      "events_url": "https://api.github.com/users/bvbfan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvbfan/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "bvbfan",
      "id": 8323581,
      "node_id": "MDQ6VXNlcjgzMjM1ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8323581?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvbfan",
      "html_url": "https://github.com/bvbfan",
      "followers_url": "https://api.github.com/users/bvbfan/followers",
      "following_url": "https://api.github.com/users/bvbfan/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvbfan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvbfan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvbfan/subscriptions",
      "organizations_url": "https://api.github.com/users/bvbfan/orgs",
      "repos_url": "https://api.github.com/users/bvbfan/repos",
      "events_url": "https://api.github.com/users/bvbfan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvbfan/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c45eb76e7ae17e4a2489b95bffac735621c02ef4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c45eb76e7ae17e4a2489b95bffac735621c02ef4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c45eb76e7ae17e4a2489b95bffac735621c02ef4"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "1717724f5971a69423750bf19044822fff0f37bc",
        "filename": "src/index/base.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/557b59670d1cf278fdf85ea83806fed3f05d1913/src/index/base.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/557b59670d1cf278fdf85ea83806fed3f05d1913/src/index/base.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.h?ref=557b59670d1cf278fdf85ea83806fed3f05d1913",
        "patch": "@@ -102,7 +102,7 @@ class BaseIndex : public CValidationInterface\n \n public:\n     /// Destructor interrupts sync thread if running and blocks until it exits.\n-    virtual ~BaseIndex();\n+    ~BaseIndex() override;\n \n     /// Blocks the current thread until the index is caught up to the current\n     /// state of the block chain. This only blocks if the index has gotten in"
      },
      {
        "sha": "e1cecd7282f8bad5f3681a4a22e094011d980421",
        "filename": "src/index/txindex.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/557b59670d1cf278fdf85ea83806fed3f05d1913/src/index/txindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/557b59670d1cf278fdf85ea83806fed3f05d1913/src/index/txindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.h?ref=557b59670d1cf278fdf85ea83806fed3f05d1913",
        "patch": "@@ -37,7 +37,7 @@ class TxIndex final : public BaseIndex\n     explicit TxIndex(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n \n     // Destructor is declared because this class contains a unique_ptr to an incomplete type.\n-    virtual ~TxIndex() override;\n+    ~TxIndex() override;\n \n     /// Look up a transaction by hash.\n     ///"
      },
      {
        "sha": "b331bf8a9aa78264efe2fe5bd782045dcce5be69",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/557b59670d1cf278fdf85ea83806fed3f05d1913/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/557b59670d1cf278fdf85ea83806fed3f05d1913/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=557b59670d1cf278fdf85ea83806fed3f05d1913",
        "patch": "@@ -60,7 +60,7 @@ class NotificationsProxy : public CValidationInterface\n         : m_notifications(std::move(notifications))\n     {\n     }\n-    virtual ~NotificationsProxy() = default;\n+    ~NotificationsProxy() override = default;\n     void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t mempool_sequence) override\n     {\n         if (auto notification = m_notifications.lock())"
      },
      {
        "sha": "3cfeb95b57e5fbdecf79d11418974c0086b3f83b",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/557b59670d1cf278fdf85ea83806fed3f05d1913/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/557b59670d1cf278fdf85ea83806fed3f05d1913/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=557b59670d1cf278fdf85ea83806fed3f05d1913",
        "patch": "@@ -626,7 +626,7 @@ class NetEventsInterface\n      * Protected destructor so that instances can only be deleted by derived classes.\n      * If that restriction is no longer desired, this should be made public and virtual.\n      */\n-    ~NetEventsInterface() = default;\n+    virtual ~NetEventsInterface() = default;\n };\n \n enum"
      },
      {
        "sha": "7d72b2973f6c699cf7abd1fbb58d211e2499df26",
        "filename": "src/test/validationinterface_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/557b59670d1cf278fdf85ea83806fed3f05d1913/src/test/validationinterface_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/557b59670d1cf278fdf85ea83806fed3f05d1913/src/test/validationinterface_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validationinterface_tests.cpp?ref=557b59670d1cf278fdf85ea83806fed3f05d1913",
        "patch": "@@ -53,7 +53,7 @@ class TestInterface : public CValidationInterface\n         : m_on_call(std::move(on_call)), m_on_destroy(std::move(on_destroy))\n     {\n     }\n-    virtual ~TestInterface()\n+    ~TestInterface() override\n     {\n         if (m_on_destroy) m_on_destroy();\n     }"
      },
      {
        "sha": "0d4fbdd9e5e36e8d013cc69664d1070af9df85c4",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/557b59670d1cf278fdf85ea83806fed3f05d1913/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/557b59670d1cf278fdf85ea83806fed3f05d1913/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=557b59670d1cf278fdf85ea83806fed3f05d1913",
        "patch": "@@ -72,7 +72,7 @@ class CValidationInterface {\n      * Protected destructor so that instances can only be deleted by derived classes.\n      * If that restriction is no longer desired, this should be made public and virtual.\n      */\n-    ~CValidationInterface() = default;\n+    virtual ~CValidationInterface() = default;\n     /**\n      * Notifies listeners when the block chain tip advances.\n      *"
      }
    ]
  }
]