[
  {
    "sha": "dbabc451605f47ebd864f4bd17c4ddb65d9720db",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYmFiYzQ1MTYwNWY0N2ViZDg2NGY0YmQxN2M0ZGRiNjVkOTcyMGRi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-05-02T20:59:03Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-05-02T21:06:26Z"
      },
      "message": "Remove disabled opcodes from EvalScript",
      "tree": {
        "sha": "4d07ef881b83cf0dc8d8fa88614bfed6c878746e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d07ef881b83cf0dc8d8fa88614bfed6c878746e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dbabc451605f47ebd864f4bd17c4ddb65d9720db",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbabc451605f47ebd864f4bd17c4ddb65d9720db",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dbabc451605f47ebd864f4bd17c4ddb65d9720db",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbabc451605f47ebd864f4bd17c4ddb65d9720db/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d9dd0318e142341626619d4ec0d6eb505ee5d0fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9dd0318e142341626619d4ec0d6eb505ee5d0fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d9dd0318e142341626619d4ec0d6eb505ee5d0fe"
      }
    ],
    "stats": {
      "total": 142,
      "additions": 0,
      "deletions": 142
    },
    "files": [
      {
        "sha": "90d1395a124a1baf42629a8894229507f2c15973",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 142,
        "changes": 142,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbabc451605f47ebd864f4bd17c4ddb65d9720db/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbabc451605f47ebd864f4bd17c4ddb65d9720db/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=dbabc451605f47ebd864f4bd17c4ddb65d9720db",
        "patch": "@@ -659,64 +659,6 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                 break;\n \n \n-                //\n-                // Splice ops\n-                //\n-                case OP_CAT:\n-                {\n-                    // (x1 x2 -- out)\n-                    if (stack.size() < 2)\n-                        return false;\n-                    valtype& vch1 = stacktop(-2);\n-                    valtype& vch2 = stacktop(-1);\n-                    vch1.insert(vch1.end(), vch2.begin(), vch2.end());\n-                    popstack(stack);\n-                    if (stacktop(-1).size() > MAX_SCRIPT_ELEMENT_SIZE)\n-                        return false;\n-                }\n-                break;\n-\n-                case OP_SUBSTR:\n-                {\n-                    // (in begin size -- out)\n-                    if (stack.size() < 3)\n-                        return false;\n-                    valtype& vch = stacktop(-3);\n-                    int nBegin = CastToBigNum(stacktop(-2)).getint();\n-                    int nEnd = nBegin + CastToBigNum(stacktop(-1)).getint();\n-                    if (nBegin < 0 || nEnd < nBegin)\n-                        return false;\n-                    if (nBegin > (int)vch.size())\n-                        nBegin = vch.size();\n-                    if (nEnd > (int)vch.size())\n-                        nEnd = vch.size();\n-                    vch.erase(vch.begin() + nEnd, vch.end());\n-                    vch.erase(vch.begin(), vch.begin() + nBegin);\n-                    popstack(stack);\n-                    popstack(stack);\n-                }\n-                break;\n-\n-                case OP_LEFT:\n-                case OP_RIGHT:\n-                {\n-                    // (in size -- out)\n-                    if (stack.size() < 2)\n-                        return false;\n-                    valtype& vch = stacktop(-2);\n-                    int nSize = CastToBigNum(stacktop(-1)).getint();\n-                    if (nSize < 0)\n-                        return false;\n-                    if (nSize > (int)vch.size())\n-                        nSize = vch.size();\n-                    if (opcode == OP_LEFT)\n-                        vch.erase(vch.begin() + nSize, vch.end());\n-                    else\n-                        vch.erase(vch.begin(), vch.end() - nSize);\n-                    popstack(stack);\n-                }\n-                break;\n-\n                 case OP_SIZE:\n                 {\n                     // (in -- in size)\n@@ -728,54 +670,6 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                 break;\n \n \n-                //\n-                // Bitwise logic\n-                //\n-                case OP_INVERT:\n-                {\n-                    // (in - out)\n-                    if (stack.size() < 1)\n-                        return false;\n-                    valtype& vch = stacktop(-1);\n-                    for (unsigned int i = 0; i < vch.size(); i++)\n-                        vch[i] = ~vch[i];\n-                }\n-                break;\n-\n-                //\n-                // WARNING: These disabled opcodes exhibit unexpected behavior\n-                // when used on signed integers due to a bug in MakeSameSize()\n-                // [see definition of MakeSameSize() above].\n-                //\n-                case OP_AND:\n-                case OP_OR:\n-                case OP_XOR:\n-                {\n-                    // (x1 x2 - out)\n-                    if (stack.size() < 2)\n-                        return false;\n-                    valtype& vch1 = stacktop(-2);\n-                    valtype& vch2 = stacktop(-1);\n-                    MakeSameSize(vch1, vch2); // <-- NOT SAFE FOR SIGNED VALUES\n-                    if (opcode == OP_AND)\n-                    {\n-                        for (unsigned int i = 0; i < vch1.size(); i++)\n-                            vch1[i] &= vch2[i];\n-                    }\n-                    else if (opcode == OP_OR)\n-                    {\n-                        for (unsigned int i = 0; i < vch1.size(); i++)\n-                            vch1[i] |= vch2[i];\n-                    }\n-                    else if (opcode == OP_XOR)\n-                    {\n-                        for (unsigned int i = 0; i < vch1.size(); i++)\n-                            vch1[i] ^= vch2[i];\n-                    }\n-                    popstack(stack);\n-                }\n-                break;\n-\n                 case OP_EQUAL:\n                 case OP_EQUALVERIFY:\n                 //case OP_NOTEQUAL: // use OP_NUMNOTEQUAL\n@@ -810,8 +704,6 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                 //\n                 case OP_1ADD:\n                 case OP_1SUB:\n-                case OP_2MUL:\n-                case OP_2DIV:\n                 case OP_NEGATE:\n                 case OP_ABS:\n                 case OP_NOT:\n@@ -825,8 +717,6 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                     {\n                     case OP_1ADD:       bn += bnOne; break;\n                     case OP_1SUB:       bn -= bnOne; break;\n-                    case OP_2MUL:       bn <<= 1; break;\n-                    case OP_2DIV:       bn >>= 1; break;\n                     case OP_NEGATE:     bn = -bn; break;\n                     case OP_ABS:        if (bn < bnZero) bn = -bn; break;\n                     case OP_NOT:        bn = (bn == bnZero); break;\n@@ -840,11 +730,6 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n \n                 case OP_ADD:\n                 case OP_SUB:\n-                case OP_MUL:\n-                case OP_DIV:\n-                case OP_MOD:\n-                case OP_LSHIFT:\n-                case OP_RSHIFT:\n                 case OP_BOOLAND:\n                 case OP_BOOLOR:\n                 case OP_NUMEQUAL:\n@@ -873,33 +758,6 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                         bn = bn1 - bn2;\n                         break;\n \n-                    case OP_MUL:\n-                        if (!BN_mul(&bn, &bn1, &bn2, pctx))\n-                            return false;\n-                        break;\n-\n-                    case OP_DIV:\n-                        if (!BN_div(&bn, NULL, &bn1, &bn2, pctx))\n-                            return false;\n-                        break;\n-\n-                    case OP_MOD:\n-                        if (!BN_mod(&bn, &bn1, &bn2, pctx))\n-                            return false;\n-                        break;\n-\n-                    case OP_LSHIFT:\n-                        if (bn2 < bnZero || bn2 > CBigNum(2048))\n-                            return false;\n-                        bn = bn1 << bn2.getulong();\n-                        break;\n-\n-                    case OP_RSHIFT:\n-                        if (bn2 < bnZero || bn2 > CBigNum(2048))\n-                            return false;\n-                        bn = bn1 >> bn2.getulong();\n-                        break;\n-\n                     case OP_BOOLAND:             bn = (bn1 != bnZero && bn2 != bnZero); break;\n                     case OP_BOOLOR:              bn = (bn1 != bnZero || bn2 != bnZero); break;\n                     case OP_NUMEQUAL:            bn = (bn1 == bn2); break;"
      }
    ]
  }
]