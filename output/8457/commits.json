[
  {
    "sha": "f32de132b5da9e16764e387d6d80ec3387d6dcfd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMzJkZTEzMmI1ZGE5ZTE2NzY0ZTM4N2Q2ZDgwZWMzMzg3ZDZkY2Zk",
    "commit": {
      "author": {
        "name": "Pedro Branco",
        "email": "branco@uphold.com",
        "date": "2016-08-04T16:16:26Z"
      },
      "committer": {
        "name": "Pedro Branco",
        "email": "branco@uphold.com",
        "date": "2016-08-05T12:33:09Z"
      },
      "message": "Add block height support in rpc call getblock",
      "tree": {
        "sha": "7ef37576e3d75b6143ebb2f2e3bebb195847e3eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ef37576e3d75b6143ebb2f2e3bebb195847e3eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f32de132b5da9e16764e387d6d80ec3387d6dcfd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f32de132b5da9e16764e387d6d80ec3387d6dcfd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f32de132b5da9e16764e387d6d80ec3387d6dcfd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f32de132b5da9e16764e387d6d80ec3387d6dcfd/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "6e6ab2c3238264b34c0c83ebf703502f5ec72848",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e6ab2c3238264b34c0c83ebf703502f5ec72848",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6e6ab2c3238264b34c0c83ebf703502f5ec72848"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 35,
      "deletions": 6
    },
    "files": [
      {
        "sha": "34b1dd871f4555badbb586ffcd7d721b290a798d",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f32de132b5da9e16764e387d6d80ec3387d6dcfd/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f32de132b5da9e16764e387d6d80ec3387d6dcfd/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=f32de132b5da9e16764e387d6d80ec3387d6dcfd",
        "patch": "@@ -265,6 +265,20 @@ def run_test(self):\n         assert_equal(json_obj[0]['chainwork'],          rpc_block_json['chainwork'])\n         assert_equal(json_obj[0]['previousblockhash'],  rpc_block_json['previousblockhash'])\n \n+        #compare with normal RPC block response and support by block height\n+        rpc_block_json = self.nodes[0].getblock(str(json_obj[0]['height']))\n+        assert_equal(json_obj[0]['hash'],               rpc_block_json['hash'])\n+        assert_equal(json_obj[0]['confirmations'],      rpc_block_json['confirmations'])\n+        assert_equal(json_obj[0]['height'],             rpc_block_json['height'])\n+        assert_equal(json_obj[0]['version'],            rpc_block_json['version'])\n+        assert_equal(json_obj[0]['merkleroot'],         rpc_block_json['merkleroot'])\n+        assert_equal(json_obj[0]['time'],               rpc_block_json['time'])\n+        assert_equal(json_obj[0]['nonce'],              rpc_block_json['nonce'])\n+        assert_equal(json_obj[0]['bits'],               rpc_block_json['bits'])\n+        assert_equal(json_obj[0]['difficulty'],         rpc_block_json['difficulty'])\n+        assert_equal(json_obj[0]['chainwork'],          rpc_block_json['chainwork'])\n+        assert_equal(json_obj[0]['previousblockhash'],  rpc_block_json['previousblockhash'])\n+\n         #see if we can get 5 headers in one response\n         self.nodes[1].generate(5)\n         self.sync_all()"
      },
      {
        "sha": "3698a21f960d321add3150ff9628f7687181e4cb",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 6,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f32de132b5da9e16764e387d6d80ec3387d6dcfd/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f32de132b5da9e16764e387d6d80ec3387d6dcfd/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=f32de132b5da9e16764e387d6d80ec3387d6dcfd",
        "patch": "@@ -551,7 +551,7 @@ UniValue getblock(const UniValue& params, bool fHelp)\n             \"\\nIf verbose is false, returns a string that is serialized, hex-encoded data for block 'hash'.\\n\"\n             \"If verbose is true, returns an Object with information about block <hash>.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"hash\\\"          (string, required) The block hash\\n\"\n+            \"1. \\\"hash|height\\\"     (string | numeric, required) The block hash or the block height\\n\"\n             \"2. verbose           (boolean, optional, default=true) true for a json object, false for the hex encoded data\\n\"\n             \"\\nResult (for verbose = true):\\n\"\n             \"{\\n\"\n@@ -582,22 +582,37 @@ UniValue getblock(const UniValue& params, bool fHelp)\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getblock\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n             + HelpExampleRpc(\"getblock\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n+            + HelpExampleCli(\"getblock\", \"\\\"0\\\"\")\n+            + HelpExampleRpc(\"getblock\", \"\\\"0\\\"\")\n         );\n \n     LOCK(cs_main);\n \n     std::string strHash = params[0].get_str();\n-    uint256 hash(uint256S(strHash));\n \n     bool fVerbose = true;\n     if (params.size() > 1)\n         fVerbose = params[1].get_bool();\n \n-    if (mapBlockIndex.count(hash) == 0)\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n-\n     CBlock block;\n-    CBlockIndex* pblockindex = mapBlockIndex[hash];\n+    CBlockIndex* pblockindex;\n+    int32_t nHeight;\n+\n+    if (((strHash.size() != 64) || !IsHex(strHash)) && ParseInt32(strHash, &nHeight)) {\n+        pblockindex = chainActive[nHeight];\n+\n+        if (!pblockindex) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block height out of range\");\n+        }\n+    } else {\n+        uint256 hash(uint256S(strHash));\n+\n+        if (mapBlockIndex.count(hash) == 0) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+\n+        pblockindex = mapBlockIndex[hash];\n+    }\n \n     if (fHavePruned && !(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0)\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"Block not available (pruned data)\");"
      }
    ]
  }
]