laanwj,2016-08-04T18:48:38Z,"I don't like overloading the argument, making it ambiguous. It seems messy, and we don't do that anywhere else on the API.\nE.g. a long hash with no hexadecimal characters could be interpreted as a long number.\nThis would need to be a new RPC call `getbockbyheight` or so.\nThough even then I'm not convinced it's a worthwhile addition.\n",https://github.com/bitcoin/bitcoin/pull/8457#issuecomment-237647103,237647103,
pedrobranco,2016-08-05T10:07:55Z,"> This would need to be a new RPC call getbockbyheight or so.\n\nGiven that `getblock` is not called `getblockbyhash` was the reason that I've added the height support.\n\n> Though even then I'm not convinced it's a worthwhile addition.\n\nFor a new RPC I also share your opinion, about the `getblock` IMHO I think is useful for developers.\n",https://github.com/bitcoin/bitcoin/pull/8457#issuecomment-237813695,237813695,
jonasschnelli,2016-08-05T10:10:06Z,I think `getbockbyheight` could be handy. Concept ACK.\n,https://github.com/bitcoin/bitcoin/pull/8457#issuecomment-237814075,237814075,
promag,2016-08-05T10:34:40Z,"> I don't like overloading the argument, making it ambiguous.\n\nDisagree, there is a place for overloading in APIs. In this case blocks are usually referenced by height or hash.\n\nThere is also overloading in the protocol: `4   lock_time   uint32_t    A time (Unix epoch time) or block number. See the locktime parsing rules`.\n\n> It seems messy, and we don't do that anywhere else on the API.\n\n",https://github.com/bitcoin/bitcoin/pull/8457#issuecomment-237818518,237818518,
paveljanik,2016-08-05T10:55:16Z,"I like the concept of one RPC call. But unfortunately there is one big caveat. In the future (and because of probability even in not so distant one), we can have a block whose hash is a hexadecimal number parseable as a decimal one resulting in the uncertain block referenced. We can't afford to have uncertain result...\n\nSo NACK.\n\nSo if we want to have an API to get block by hash, we can have o",https://github.com/bitcoin/bitcoin/pull/8457#issuecomment-237822136,237822136,
pedrobranco,2016-08-05T11:54:54Z,"> we can have a block whose hash is a hexadecimal number parseable as a decimal one\n\nIMO it is possible to detect if a given input is a block hash, as it comes as string, and, given that block hashes have fixed length, I don't think that if we want get the block 5125122 we call like this:\n\n```\ngetblock 0000000000000000000000000000000000000000000000000000000005125122\n```\n\nSo it will push a ",https://github.com/bitcoin/bitcoin/pull/8457#issuecomment-237832001,237832001,
paveljanik,2016-08-05T11:57:13Z,Compare results of\n\n```\nbtc getblock 00c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\nbtc getblock c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\n```\n,https://github.com/bitcoin/bitcoin/pull/8457#issuecomment-237832369,237832369,
pedrobranco,2016-08-05T13:16:37Z,"@laanwj @promag @paveljanik WDYT of supporting something like this:\n- As is today (to be deprecated maybe):\n\n```\nbitcoin-cli getblock hash (verbose)\n```\n- With JSON input:\n\n```\nbitcoin-cli getblock '{ ""hash"": ""0x123"", ""verbose"": true}'\nbitcoin-cli getblock '{ ""block"": 1, ""verbose"": false}'\n```\n",https://github.com/bitcoin/bitcoin/pull/8457#issuecomment-237847394,237847394,
laanwj,2016-08-13T09:09:28Z,It's better. But still this is special casing to work around one specific round-trip. This opens the flood-gates to many more.\n\nTo solve this more generally I plan on working on a cute little extension RFC to the [JSONRPC 2.0 spec](http://www.jsonrpc.org/specification). See discussion in https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-239442267 .\n\nThis will add a simple form of (in-b,https://github.com/bitcoin/bitcoin/pull/8457#issuecomment-239611262,239611262,
pedrobranco,2016-08-22T10:11:01Z,"> In contrast to simple nesting of calls, which would be the alternative extension, this also allows for more complex composition, and re-use of values.\n\nNice JSONRPC feature, delegating the responsibility of forwarding the output from the RPC client to the RPC server, but in our case it will still have the wallet locks and performance issues.\n",https://github.com/bitcoin/bitcoin/pull/8457#issuecomment-241369646,241369646,
sipa,2016-08-22T16:18:52Z,@pedrobranco None of these calls should grab a wallet lock...\n,https://github.com/bitcoin/bitcoin/pull/8457#issuecomment-241466654,241466654,
pedrobranco,2016-08-22T16:29:27Z,"Sorry, I've meant locks on cs_main.\n",https://github.com/bitcoin/bitcoin/pull/8457#issuecomment-241469679,241469679,
luke-jr,2016-08-29T20:13:19Z,"1. JSON has distinct types for String and Number, and we use String for hashes, so Number is free to be overloaded for height if so desired.\n2. I think it's a security risk to support getblock by height directly. People shouldn't use height to refer to specific blocks, since reorgs can change the block at a given height.\n",https://github.com/bitcoin/bitcoin/pull/8457#issuecomment-243241146,243241146,
dcousens,2016-08-30T01:36:12Z,"@luke-jr granted, but sometimes a quick way to check for re-orgs on a locally managed chain is to compare various heights between the chains [local & bitcoind],  if they don't match up,  you can start to check for where the orphan-fork occurred.\n",https://github.com/bitcoin/bitcoin/pull/8457#issuecomment-243307973,243307973,
laanwj,2016-09-05T07:35:27Z,"> but in our case it will still have the wallet locks and performance issues.\n\nThat's an implementation detail and will likely go away in the future, and we should not design the RPC protocol around that. In any case what use-case to you have that requires shaving a few milliseconds from a getblock call? Have you benchmarked? I'm fairly sure most of the bottleneck is reading and parsing the bloc",https://github.com/bitcoin/bitcoin/pull/8457#issuecomment-244677759,244677759,
laanwj,2016-09-13T15:53:11Z,Closing this. See posts above for argumentation.\n,https://github.com/bitcoin/bitcoin/pull/8457#issuecomment-246729281,246729281,
