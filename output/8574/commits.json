[
  {
    "sha": "7184e25c80aa8b1629a700bb7a7e290ad0bb2792",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTg0ZTI1YzgwYWE4YjE2MjlhNzAwYmI3YTdlMjkwYWQwYmIyNzky",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-08-24T07:57:23Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-03-06T10:30:24Z"
      },
      "message": "[Wallet] refactor CWallet/CWalletDB/CDB\n\nTry to hide CDB/bitdb behinde CWalletDB.\nPrepare for full wallet database abstraction.",
      "tree": {
        "sha": "c197d4a5d4145703614f86c004aec164068d25f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c197d4a5d4145703614f86c004aec164068d25f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7184e25c80aa8b1629a700bb7a7e290ad0bb2792",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAli9OkIACgkQHrd2uwPH\nki3RfBAAo0z+su16CgxsTe3BHBiMp6qKZtIB9i3OiQJJpp2CED47zKa6qdxrW8o2\nWzNU1unDLNHqEvR0vbQ2tasoM6jX6Uz2Ri62HXCFHfwC7fzBqq4WCz4T7sl5+3Og\nibUiGZfRREhZWKCBcaUhPdzEe1ZHh1kA8XeEZ7gh1YD1JtNiPEkGvfKQBlMgbd+2\nbJkWA7wbYndRCLdZe+5UUxQavaFKz4IrDiEjCi5NPx+V84Ey+dGodxB+my5dSoHA\np9KT2WakaQrayGHz9qIIVmJYULa36o0av+JjgqAl+JeaZowamYU4j1PpEjkoQFSb\nq2FEuknR8Uuycn7tM8YZo794/h9fxboxPCnAeenupLt+36jFbQuUDvX5Y0E1YgY4\nA+tUu90xI/HHA2ViwgPNnccr02/fUBPidX9qM/QD7D0aCANnLK3BACoNgVQls6HZ\nGFmYqVlBNikC11mmikyUWbPxI9jM1tbnF/TDb2K8XinNc8VqLpz2dTC6UAwq8oSS\nzsXmrsoS/X/m4XENdm40GfBpZhThjwIfTNY7/AA7Cjn48unEAIIJS7ClvJvqNa1s\nZGZizeNsdnCz1lciYzilr5MevtVWIocAwEX9+f9ktYtCY40gEhyyfmpd1nFhcgNy\nmhLH2Up6Yhy+APj5MONBLLNgfr2TzViE4zMdrwyZQwNKw5ThYZw=\n=znSl\n-----END PGP SIGNATURE-----",
        "payload": "tree c197d4a5d4145703614f86c004aec164068d25f2\nparent fa625b078b018b5edf9833a602a002538ee83a45\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1472025443 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1488796224 +0100\n\n[Wallet] refactor CWallet/CWalletDB/CDB\n\nTry to hide CDB/bitdb behinde CWalletDB.\nPrepare for full wallet database abstraction.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7184e25c80aa8b1629a700bb7a7e290ad0bb2792",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7184e25c80aa8b1629a700bb7a7e290ad0bb2792",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7184e25c80aa8b1629a700bb7a7e290ad0bb2792/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa625b078b018b5edf9833a602a002538ee83a45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa625b078b018b5edf9833a602a002538ee83a45",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa625b078b018b5edf9833a602a002538ee83a45"
      }
    ],
    "stats": {
      "total": 389,
      "additions": 237,
      "deletions": 152
    },
    "files": [
      {
        "sha": "74d87f9d15c31aab5c3c93d8a768ec91865fa4b6",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 165,
        "deletions": 2,
        "changes": 167,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7184e25c80aa8b1629a700bb7a7e290ad0bb2792/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7184e25c80aa8b1629a700bb7a7e290ad0bb2792/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=7184e25c80aa8b1629a700bb7a7e290ad0bb2792",
        "patch": "@@ -18,6 +18,7 @@\n #endif\n \n #include <boost/filesystem.hpp>\n+#include <boost/foreach.hpp>\n #include <boost/thread.hpp>\n #include <boost/version.hpp>\n \n@@ -145,7 +146,7 @@ void CDBEnv::MakeMock()\n     fMockDb = true;\n }\n \n-CDBEnv::VerifyResult CDBEnv::Verify(const std::string& strFile, bool (*recoverFunc)(CDBEnv& dbenv, const std::string& strFile))\n+CDBEnv::VerifyResult CDBEnv::Verify(const std::string& strFile, bool (*recoverFunc)(const std::string& strFile))\n {\n     LOCK(cs_db);\n     assert(mapFileUseCount.count(strFile) == 0);\n@@ -158,10 +159,134 @@ CDBEnv::VerifyResult CDBEnv::Verify(const std::string& strFile, bool (*recoverFu\n         return RECOVER_FAIL;\n \n     // Try to recover:\n-    bool fRecovered = (*recoverFunc)(*this, strFile);\n+    bool fRecovered = (*recoverFunc)(strFile);\n     return (fRecovered ? RECOVER_OK : RECOVER_FAIL);\n }\n \n+bool CDB::Recover(const std::string& filename, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue))\n+{\n+    // Recovery procedure:\n+    // move wallet file to wallet.timestamp.bak\n+    // Call Salvage with fAggressive=true to\n+    // get as much data as possible.\n+    // Rewrite salvaged data to fresh wallet file\n+    // Set -rescan so any missing transactions will be\n+    // found.\n+    int64_t now = GetTime();\n+    std::string newFilename = strprintf(\"wallet.%d.bak\", now);\n+\n+    int result = bitdb.dbenv->dbrename(NULL, filename.c_str(), NULL,\n+                                       newFilename.c_str(), DB_AUTO_COMMIT);\n+    if (result == 0)\n+        LogPrintf(\"Renamed %s to %s\\n\", filename, newFilename);\n+    else\n+    {\n+        LogPrintf(\"Failed to rename %s to %s\\n\", filename, newFilename);\n+        return false;\n+    }\n+\n+    std::vector<CDBEnv::KeyValPair> salvagedData;\n+    bool fSuccess = bitdb.Salvage(newFilename, true, salvagedData);\n+    if (salvagedData.empty())\n+    {\n+        LogPrintf(\"Salvage(aggressive) found no records in %s.\\n\", newFilename);\n+        return false;\n+    }\n+    LogPrintf(\"Salvage(aggressive) found %u records\\n\", salvagedData.size());\n+\n+    std::unique_ptr<Db> pdbCopy(new Db(bitdb.dbenv, 0));\n+    int ret = pdbCopy->open(NULL,               // Txn pointer\n+                            filename.c_str(),   // Filename\n+                            \"main\",             // Logical db name\n+                            DB_BTREE,           // Database type\n+                            DB_CREATE,          // Flags\n+                            0);\n+    if (ret > 0)\n+    {\n+        LogPrintf(\"Cannot create database file %s\\n\", filename);\n+        return false;\n+    }\n+\n+    DbTxn* ptxn = bitdb.TxnBegin();\n+    BOOST_FOREACH(CDBEnv::KeyValPair& row, salvagedData)\n+    {\n+        if (recoverKVcallback)\n+        {\n+            CDataStream ssKey(row.first, SER_DISK, CLIENT_VERSION);\n+            CDataStream ssValue(row.second, SER_DISK, CLIENT_VERSION);\n+            string strType, strErr;\n+            if (!(*recoverKVcallback)(callbackDataIn, ssKey, ssValue))\n+                continue;\n+        }\n+        Dbt datKey(&row.first[0], row.first.size());\n+        Dbt datValue(&row.second[0], row.second.size());\n+        int ret2 = pdbCopy->put(ptxn, &datKey, &datValue, DB_NOOVERWRITE);\n+        if (ret2 > 0)\n+            fSuccess = false;\n+    }\n+    ptxn->commit(0);\n+    pdbCopy->close(0);\n+\n+    return fSuccess;\n+}\n+\n+bool CDB::VerifyEnvironment(const std::string& walletFile, const boost::filesystem::path& dataDir, std::string& errorStr)\n+{\n+    LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));\n+    LogPrintf(\"Using wallet %s\\n\", walletFile);\n+\n+    // Wallet file must be a plain filename without a directory\n+    if (walletFile != boost::filesystem::basename(walletFile) + boost::filesystem::extension(walletFile))\n+    {\n+        errorStr = strprintf(_(\"Wallet %s resides outside data directory %s\"), walletFile, dataDir.string());\n+        return false;\n+    }\n+\n+    if (!bitdb.Open(dataDir))\n+    {\n+        // try moving the database env out of the way\n+        boost::filesystem::path pathDatabase = dataDir / \"database\";\n+        boost::filesystem::path pathDatabaseBak = dataDir / strprintf(\"database.%d.bak\", GetTime());\n+        try {\n+            boost::filesystem::rename(pathDatabase, pathDatabaseBak);\n+            LogPrintf(\"Moved old %s to %s. Retrying.\\n\", pathDatabase.string(), pathDatabaseBak.string());\n+        } catch (const boost::filesystem::filesystem_error&) {\n+            // failure is ok (well, not really, but it's not worse than what we started with)\n+        }\n+\n+        // try again\n+        if (!bitdb.Open(dataDir)) {\n+            // if it still fails, it probably means we can't even create the database env\n+            errorStr = strprintf(_(\"Error initializing wallet database environment %s!\"), GetDataDir());\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n+bool CDB::VerifyDatabaseFile(const std::string& walletFile, const boost::filesystem::path& dataDir, std::string& warningStr, std::string& errorStr, bool (*recoverFunc)(const std::string& strFile))\n+{\n+    if (boost::filesystem::exists(dataDir / walletFile))\n+    {\n+        CDBEnv::VerifyResult r = bitdb.Verify(walletFile, recoverFunc);\n+        if (r == CDBEnv::RECOVER_OK)\n+        {\n+            warningStr = strprintf(_(\"Warning: Wallet file corrupt, data salvaged!\"\n+                                     \" Original %s saved as %s in %s; if\"\n+                                     \" your balance or transactions are incorrect you should\"\n+                                     \" restore from a backup.\"),\n+                                   walletFile, \"wallet.{timestamp}.bak\", dataDir);\n+        }\n+        if (r == CDBEnv::RECOVER_FAIL)\n+        {\n+            errorStr = strprintf(_(\"%s corrupt, salvage failed\"), walletFile);\n+            return false;\n+        }\n+    }\n+    // also return true if files does not exists\n+    return true;\n+}\n+\n /* End of headers, beginning of key/value data */\n static const char *HEADER_END = \"HEADER=END\";\n /* End of key/value data */\n@@ -473,3 +598,41 @@ void CDBEnv::Flush(bool fShutdown)\n         }\n     }\n }\n+\n+bool CDB::PeriodicFlush(std::string strFile)\n+{\n+    bool ret = false;\n+    TRY_LOCK(bitdb.cs_db,lockDb);\n+    if (lockDb)\n+    {\n+        // Don't do this if any databases are in use\n+        int nRefCount = 0;\n+        map<string, int>::iterator mi = bitdb.mapFileUseCount.begin();\n+        while (mi != bitdb.mapFileUseCount.end())\n+        {\n+            nRefCount += (*mi).second;\n+            mi++;\n+        }\n+\n+        if (nRefCount == 0)\n+        {\n+            boost::this_thread::interruption_point();\n+            map<string, int>::iterator mi = bitdb.mapFileUseCount.find(strFile);\n+            if (mi != bitdb.mapFileUseCount.end())\n+            {\n+                LogPrint(\"db\", \"Flushing %s\\n\", strFile);\n+                int64_t nStart = GetTimeMillis();\n+\n+                // Flush wallet file so it's self contained\n+                bitdb.CloseDb(strFile);\n+                bitdb.CheckpointLSN(strFile);\n+\n+                bitdb.mapFileUseCount.erase(mi++);\n+                LogPrint(\"db\", \"Flushed %s %dms\\n\", strFile, GetTimeMillis() - nStart);\n+                ret = true;\n+            }\n+        }\n+    }\n+\n+    return ret;\n+}"
      },
      {
        "sha": "19c54e314c918554a468241f7e8694de33c51f78",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7184e25c80aa8b1629a700bb7a7e290ad0bb2792/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7184e25c80aa8b1629a700bb7a7e290ad0bb2792/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=7184e25c80aa8b1629a700bb7a7e290ad0bb2792",
        "patch": "@@ -56,7 +56,7 @@ class CDBEnv\n     enum VerifyResult { VERIFY_OK,\n                         RECOVER_OK,\n                         RECOVER_FAIL };\n-    VerifyResult Verify(const std::string& strFile, bool (*recoverFunc)(CDBEnv& dbenv, const std::string& strFile));\n+    VerifyResult Verify(const std::string& strFile, bool (*recoverFunc)(const std::string& strFile));\n     /**\n      * Salvage data from a file that Verify says is bad.\n      * fAggressive sets the DB_AGGRESSIVE flag (see berkeley DB->verify() method documentation).\n@@ -104,6 +104,15 @@ class CDB\n public:\n     void Flush();\n     void Close();\n+    static bool Recover(const std::string& filename, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue));\n+\n+    /* flush the wallet passively (TRY_LOCK)\n+       ideal to be called periodically */\n+    static bool PeriodicFlush(std::string strFile);\n+    /* verifies the database environment */\n+    static bool VerifyEnvironment(const std::string& walletFile, const boost::filesystem::path& dataDir, std::string& errorStr);\n+    /* verifies the database file */\n+    static bool VerifyDatabaseFile(const std::string& walletFile, const boost::filesystem::path& dataDir, std::string& warningStr, std::string& errorStr, bool (*recoverFunc)(const std::string& strFile));\n \n private:\n     CDB(const CDB&);"
      },
      {
        "sha": "02af1bf10f82e2efdb29dc3ea7109989da4d7bb3",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 41,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7184e25c80aa8b1629a700bb7a7e290ad0bb2792/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7184e25c80aa8b1629a700bb7a7e290ad0bb2792/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=7184e25c80aa8b1629a700bb7a7e290ad0bb2792",
        "patch": "@@ -444,57 +444,30 @@ bool CWallet::Verify()\n     if (GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET))\n         return true;\n \n-    LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));\n-    std::string walletFile = GetArg(\"-wallet\", DEFAULT_WALLET_DAT);\n-\n-    LogPrintf(\"Using wallet %s\\n\", walletFile);\n     uiInterface.InitMessage(_(\"Verifying wallet...\"));\n+    std::string walletFile = GetArg(\"-wallet\", DEFAULT_WALLET_DAT);\n \n-    // Wallet file must be a plain filename without a directory\n-    if (walletFile != boost::filesystem::basename(walletFile) + boost::filesystem::extension(walletFile))\n-        return InitError(strprintf(_(\"Wallet %s resides outside data directory %s\"), walletFile, GetDataDir().string()));\n+    std::string strError;\n+    if (!CWalletDB::VerifyEnvironment(walletFile, GetDataDir().string(), strError))\n+        return InitError(strError);\n \n-    if (!bitdb.Open(GetDataDir()))\n-    {\n-        // try moving the database env out of the way\n-        boost::filesystem::path pathDatabase = GetDataDir() / \"database\";\n-        boost::filesystem::path pathDatabaseBak = GetDataDir() / strprintf(\"database.%d.bak\", GetTime());\n-        try {\n-            boost::filesystem::rename(pathDatabase, pathDatabaseBak);\n-            LogPrintf(\"Moved old %s to %s. Retrying.\\n\", pathDatabase.string(), pathDatabaseBak.string());\n-        } catch (const boost::filesystem::filesystem_error&) {\n-            // failure is ok (well, not really, but it's not worse than what we started with)\n-        }\n-        \n-        // try again\n-        if (!bitdb.Open(GetDataDir())) {\n-            // if it still fails, it probably means we can't even create the database env\n-            return InitError(strprintf(_(\"Error initializing wallet database environment %s!\"), GetDataDir()));\n-        }\n-    }\n-    \n     if (GetBoolArg(\"-salvagewallet\", false))\n     {\n         // Recover readable keypairs:\n-        if (!CWalletDB::Recover(bitdb, walletFile, true))\n+        CWallet dummyWallet;\n+        if (!CWalletDB::Recover(walletFile, (void *)&dummyWallet, CWalletDB::RecoverKeysOnlyFilter))\n             return false;\n     }\n-    \n-    if (boost::filesystem::exists(GetDataDir() / walletFile))\n+\n+    std::string strWarning;\n+    bool dbV = CWalletDB::VerifyDatabaseFile(walletFile, GetDataDir().string(), strWarning, strError);\n+    if (!strWarning.empty())\n+        InitWarning(strWarning);\n+    if (!dbV)\n     {\n-        CDBEnv::VerifyResult r = bitdb.Verify(walletFile, CWalletDB::Recover);\n-        if (r == CDBEnv::RECOVER_OK)\n-        {\n-            InitWarning(strprintf(_(\"Warning: Wallet file corrupt, data salvaged!\"\n-                                         \" Original %s saved as %s in %s; if\"\n-                                         \" your balance or transactions are incorrect you should\"\n-                                         \" restore from a backup.\"),\n-                walletFile, \"wallet.{timestamp}.bak\", GetDataDir()));\n-        }\n-        if (r == CDBEnv::RECOVER_FAIL)\n-            return InitError(strprintf(_(\"%s corrupt, salvage failed\"), walletFile));\n+        InitError(strError);\n+        return false;\n     }\n-    \n     return true;\n }\n "
      },
      {
        "sha": "f894a365ac2970d149b03a04bd6ef3ebecb83edb",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 106,
        "changes": 142,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7184e25c80aa8b1629a700bb7a7e290ad0bb2792/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7184e25c80aa8b1629a700bb7a7e290ad0bb2792/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=7184e25c80aa8b1629a700bb7a7e290ad0bb2792",
        "patch": "@@ -546,7 +546,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n     return true;\n }\n \n-static bool IsKeyType(string strType)\n+bool CWalletDB::IsKeyType(const std::string& strType)\n {\n     return (strType== \"key\" || strType == \"wkey\" ||\n             strType == \"mkey\" || strType == \"ckey\");\n@@ -804,129 +804,59 @@ void ThreadFlushWalletDB()\n \n         if (nLastFlushed != CWalletDB::GetUpdateCounter() && GetTime() - nLastWalletUpdate >= 2)\n         {\n-            TRY_LOCK(bitdb.cs_db,lockDb);\n-            if (lockDb)\n-            {\n-                // Don't do this if any databases are in use\n-                int nRefCount = 0;\n-                map<string, int>::iterator mi = bitdb.mapFileUseCount.begin();\n-                while (mi != bitdb.mapFileUseCount.end())\n-                {\n-                    nRefCount += (*mi).second;\n-                    mi++;\n-                }\n-\n-                if (nRefCount == 0)\n-                {\n-                    boost::this_thread::interruption_point();\n-                    const std::string& strFile = pwalletMain->strWalletFile;\n-                    map<string, int>::iterator _mi = bitdb.mapFileUseCount.find(strFile);\n-                    if (_mi != bitdb.mapFileUseCount.end())\n-                    {\n-                        LogPrint(\"db\", \"Flushing %s\\n\", strFile);\n-                        nLastFlushed = CWalletDB::GetUpdateCounter();\n-                        int64_t nStart = GetTimeMillis();\n-\n-                        // Flush wallet file so it's self contained\n-                        bitdb.CloseDb(strFile);\n-                        bitdb.CheckpointLSN(strFile);\n-\n-                        bitdb.mapFileUseCount.erase(_mi++);\n-                        LogPrint(\"db\", \"Flushed %s %dms\\n\", strFile, GetTimeMillis() - nStart);\n-                    }\n-                }\n-            }\n+            const std::string& strFile = pwalletMain->strWalletFile;\n+            if (CDB::PeriodicFlush(strFile))\n+                nLastFlushed = CWalletDB::GetUpdateCounter();\n         }\n     }\n }\n \n //\n // Try to (very carefully!) recover wallet file if there is a problem.\n //\n-bool CWalletDB::Recover(CDBEnv& dbenv, const std::string& filename, bool fOnlyKeys)\n-{\n-    // Recovery procedure:\n-    // move wallet file to wallet.timestamp.bak\n-    // Call Salvage with fAggressive=true to\n-    // get as much data as possible.\n-    // Rewrite salvaged data to fresh wallet file\n-    // Set -rescan so any missing transactions will be\n-    // found.\n-    int64_t now = GetTime();\n-    std::string newFilename = strprintf(\"wallet.%d.bak\", now);\n-\n-    int result = dbenv.dbenv->dbrename(NULL, filename.c_str(), NULL,\n-                                       newFilename.c_str(), DB_AUTO_COMMIT);\n-    if (result == 0)\n-        LogPrintf(\"Renamed %s to %s\\n\", filename, newFilename);\n-    else\n-    {\n-        LogPrintf(\"Failed to rename %s to %s\\n\", filename, newFilename);\n-        return false;\n-    }\n+bool CWalletDB::Recover(const std::string& filename, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue))\n+{\n+    return CDB::Recover(filename, callbackDataIn, recoverKVcallback);\n+}\n \n-    std::vector<CDBEnv::KeyValPair> salvagedData;\n-    bool fSuccess = dbenv.Salvage(newFilename, true, salvagedData);\n-    if (salvagedData.empty())\n+bool CWalletDB::Recover(const std::string& filename)\n+{\n+    // recover without a key filter callback\n+    // results in recovering all record types\n+    return CWalletDB::Recover(filename, NULL, NULL);\n+}\n+\n+bool CWalletDB::RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue)\n+{\n+    CWallet *dummyWallet = reinterpret_cast<CWallet*>(callbackData);\n+    CWalletScanState dummyWss;\n+    std::string strType, strErr;\n+    bool fReadOK;\n     {\n-        LogPrintf(\"Salvage(aggressive) found no records in %s.\\n\", newFilename);\n-        return false;\n+        // Required in LoadKeyMetadata():\n+        LOCK(dummyWallet->cs_wallet);\n+        fReadOK = ReadKeyValue(dummyWallet, ssKey, ssValue,\n+                               dummyWss, strType, strErr);\n     }\n-    LogPrintf(\"Salvage(aggressive) found %u records\\n\", salvagedData.size());\n-\n-    std::unique_ptr<Db> pdbCopy(new Db(dbenv.dbenv, 0));\n-    int ret = pdbCopy->open(NULL,               // Txn pointer\n-                            filename.c_str(),   // Filename\n-                            \"main\",             // Logical db name\n-                            DB_BTREE,           // Database type\n-                            DB_CREATE,          // Flags\n-                            0);\n-    if (ret > 0)\n+    if (!IsKeyType(strType) && strType != \"hdchain\")\n+        return false;\n+    if (!fReadOK)\n     {\n-        LogPrintf(\"Cannot create database file %s\\n\", filename);\n+        LogPrintf(\"WARNING: CWalletDB::Recover skipping %s: %s\\n\", strType, strErr);\n         return false;\n     }\n-    CWallet dummyWallet;\n-    CWalletScanState wss;\n \n-    DbTxn* ptxn = dbenv.TxnBegin();\n-    BOOST_FOREACH(CDBEnv::KeyValPair& row, salvagedData)\n-    {\n-        if (fOnlyKeys)\n-        {\n-            CDataStream ssKey(row.first, SER_DISK, CLIENT_VERSION);\n-            CDataStream ssValue(row.second, SER_DISK, CLIENT_VERSION);\n-            string strType, strErr;\n-            bool fReadOK;\n-            {\n-                // Required in LoadKeyMetadata():\n-                LOCK(dummyWallet.cs_wallet);\n-                fReadOK = ReadKeyValue(&dummyWallet, ssKey, ssValue,\n-                                        wss, strType, strErr);\n-            }\n-            if (!IsKeyType(strType) && strType != \"hdchain\")\n-                continue;\n-            if (!fReadOK)\n-            {\n-                LogPrintf(\"WARNING: CWalletDB::Recover skipping %s: %s\\n\", strType, strErr);\n-                continue;\n-            }\n-        }\n-        Dbt datKey(&row.first[0], row.first.size());\n-        Dbt datValue(&row.second[0], row.second.size());\n-        int ret2 = pdbCopy->put(ptxn, &datKey, &datValue, DB_NOOVERWRITE);\n-        if (ret2 > 0)\n-            fSuccess = false;\n-    }\n-    ptxn->commit(0);\n-    pdbCopy->close(0);\n+    return true;\n+}\n \n-    return fSuccess;\n+bool CWalletDB::VerifyEnvironment(const std::string& walletFile, const boost::filesystem::path& dataDir, std::string& errorStr)\n+{\n+    return CDB::VerifyEnvironment(walletFile, dataDir, errorStr);\n }\n \n-bool CWalletDB::Recover(CDBEnv& dbenv, const std::string& filename)\n+bool CWalletDB::VerifyDatabaseFile(const std::string& walletFile, const boost::filesystem::path& dataDir, std::string& warningStr, std::string& errorStr)\n {\n-    return CWalletDB::Recover(dbenv, filename, false);\n+    return CDB::VerifyDatabaseFile(walletFile, dataDir, errorStr, warningStr, CWalletDB::Recover);\n }\n \n bool CWalletDB::WriteDestData(const std::string &address, const std::string &key, const std::string &value)"
      },
      {
        "sha": "6b847cedbc1cb6554c8ec760556b6f42df960307",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7184e25c80aa8b1629a700bb7a7e290ad0bb2792/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7184e25c80aa8b1629a700bb7a7e290ad0bb2792/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=7184e25c80aa8b1629a700bb7a7e290ad0bb2792",
        "patch": "@@ -170,8 +170,18 @@ class CWalletDB : public CDB\n     DBErrors FindWalletTx(std::vector<uint256>& vTxHash, std::vector<CWalletTx>& vWtx);\n     DBErrors ZapWalletTx(std::vector<CWalletTx>& vWtx);\n     DBErrors ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut);\n-    static bool Recover(CDBEnv& dbenv, const std::string& filename, bool fOnlyKeys);\n-    static bool Recover(CDBEnv& dbenv, const std::string& filename);\n+    /* Try to (very carefully!) recover wallet database (with a possible key type filter) */\n+    static bool Recover(const std::string& filename, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue));\n+    /* Recover convenience-function to bypass the key filter callback, called when verify failes, recoveres everything */\n+    static bool Recover(const std::string& filename);\n+    /* Recover filter (used as callback), will only let keys (cryptographical keys) as KV/key-type pass through */\n+    static bool RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue);\n+    /* Function to determin if a certain KV/key-type is a key (cryptographical key) type */\n+    static bool IsKeyType(const std::string& strType);\n+    /* verifies the database environment */\n+    static bool VerifyEnvironment(const std::string& walletFile, const boost::filesystem::path& dataDir, std::string& errorStr);\n+    /* verifies the database file */\n+    static bool VerifyDatabaseFile(const std::string& walletFile, const boost::filesystem::path& dataDir, std::string& warningStr, std::string& errorStr);\n \n     //! write the hdchain model (external chain child index counter)\n     bool WriteHDChain(const CHDChain& chain);"
      }
    ]
  }
]