LarryRuane,2019-09-29 01:32:26,"**_Note_**: this comment is outdated; the scope of this PR has been reduced.\n\nRunning `bitcoind --reindex` causes the client to reread the `.bitcoin/blocks/blknnnnn.dat` files and re-derive all the index and chainstate information. It's similar to IBD but the client uses these local files rather than download blocks from the network. As `LoadExternalBlockFile()` reads each block from disk, it ",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-536238638,536238638,
LarryRuane,2019-09-30 04:42:46,"Thanks for the suggestion, @promag, done (force-pushed).",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-536398435,536398435,
LarryRuane,2019-09-30 05:40:22,"I forgot to update the `CBufferedFile` unit tests, just did that and another force-push.",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-536409070,536409070,
LarryRuane,2019-10-01 14:40:54,"I changed this PR to WIP because I thought of a further improvement, which I'll try to push by the end of the week. It will build on the existing two commits, so reviewing those wouldn't be a waste of time. Thanks in advance for any reviews and suggestions.",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-537068616,537068616,
DrahtBot,2019-10-03 20:46:17,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23438](https://github.com/bitcoin/bitcoin/pull/23438) (refactor: Use spans of std::byte in serialize by MarcoFalke)\n\nI",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-538121393,538121393,
LarryRuane,2019-10-11 16:32:39,"Testnet performance isn't important, but as a sanity check, I verified that the new code runs faster there too on my laptop. The time between `Reindexing block file blk00001.dat...` and `Reindexing finished` reduced from 10m21s to 7m13s.",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-541134716,541134716,
LarryRuane,2019-10-13 06:32:31,"@mzumsande, those are very good thoughts, thank you. I will study this further (and invite others to also). One nice thing about this design is that any amount of memory will work, in that it will be an improvement -- it is one of those classic space-time tradeoffs. The idea of making the buffer not have a hard-coded size is intriguing and promising. I think we would not go back to the pre-second ",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-541391295,541391295,
LarryRuane,2019-10-15 03:29:03,"I force-pushed a reorganization of the commits to make reviewing easier. I split the largest commit, **speed up reindex by reading out-of-order blocks from memory**, into two separate commits:\n1. Commit message: **initially deserialize only CBlockHeader, not CBlock**. Deserialize only a block header (only 32 bytes) initially, instead of a full block. The block header is all that's needed to tell",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-542020115,542020115,
MarcoFalke,2019-10-18 12:58:43,"Under what circumstances is a `-reindex` needed these days? Only when disabling `-prune`? Though, then you'll download from the network anyway.",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-543730430,543730430,
leishman,2019-10-21 01:11:53,"@MarcoFalke Building new indices is required if upgrading from pre-0.17 to post-0.17 (https://bitcoin.org/en/release/v0.17.0) with a txindex.\n\n>If your node has a txindex, the txindex db will be migrated the first time you run 0.17.0 or newer, which may take up to a few hours. Your node will not be functional until this migration completes.\n\nI haven't looked into whether this PR speeds up ",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-544313666,544313666,
laanwj,2019-10-30 11:40:57,"> @MarcoFalke Building new indices is required if upgrading from pre-0.17 to post-0.17 (https://bitcoin.org/en/release/v0.17.0) with a txindex.\n\nIsn't `-reindex-chainstate` enough in that case? I don't think that requres a rescan of the block files.\n",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-547861097,547861097,
LarryRuane,2019-10-30 21:34:01,"Rebased. I think running `--reindex` is also good when for whatever reason you don't trust your index files; for example, think files may be missing or may have been corrupted. It's true that in that case you could just re-IBD, but this is faster and less disruptive to peers.\n\nI wasn't sure how much variation there might be in the runtimes I posted here earlier, so to get a few more data point",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-548122336,548122336,
LarryRuane,2019-11-07 19:34:15,"Rebased to fix merge conflicts, force-pushed.",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-551230310,551230310,
LarryRuane,2019-11-21 17:41:02,"Rebased, force-pushed",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-557195051,557195051,
LarryRuane,2020-02-21 19:07:02,"Reviewers, please take a fresh look at the latest force-push; this PR is much better than before. I'll explain from scratch, so it's not necessary to read any of the previous comments in this PR.\n\nThe previous version of this PR included two separate changes (both affecting `-reindex`):\n* initially deserializing only the header instead of the entire block\n* when we find a block whose child",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-589791783,589791783,
LarryRuane,2020-03-03 19:27:53,"Just to clarify, the last bullet point in the [review club writeup](https://bitcoincore.reviews/16981.html): \n\n> Before this PR, we would always read entire blocks from disk into our buffer. If the predecessor of a block was not available, the blocks would have to be read again at a later point. This PR changes behavior such that initially only the 80 byte block header is read into the buffer,",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-594125403,594125403,
kallewoof,2020-03-04 09:26:43,~Btw https://bitcoincore.reviews/16981.html notes that this fixes a bug as well. I would really like if this bug-fix was its own separate commit (followed by the commit doing the actual runtime performance improvement).~,https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-594413086,594413086,
mzumsande,2020-03-04 10:16:14,"This seems to be a misunderstanding. I don't think that this PR fixes a bug, the sentence in question referred to the older PR #16577 which is already merged.",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-594436158,594436158,
kallewoof,2020-03-04 10:26:45,"OH. Yeah, that's what it says. I wasn't reading carefully enough.",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-594440844,594440844,
fjahr,2020-03-04 21:02:50,"Concept ACK, also reviewed the code and mostly satisfied. I think there is good potential for performance improvement here. I will wait with testing until the current comments are addressed.",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-594839172,594839172,
kallewoof,2020-03-07 02:13:15,"Edit: I forgot to mention; this node has txindex *enabled*.\n\n* [x] Benchmarks running on a50f956e304adc7c75428ec391f1a76a99c1ddde:\n```\n25.11s user 163.37s system 7% cpu 39:53.51 total\n25.59s user 162.06s system 7% cpu 39:43.73 total\n25.35s user 161.31s system 7% cpu 39:16.82 total\n24.98s user 162.59s system 7% cpu 39:06.45 total\n25.36s user 162.80s system 8% cpu 39:01.81 total\n``",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-596034040,596034040,
LarryRuane,2020-04-09 20:54:09,"@vasild, thanks for the timings, I like both of your suggestions ([here](https://github.com/bitcoin/bitcoin/pull/16981#discussion_r403694969) and [here](https://github.com/bitcoin/bitcoin/pull/16981#discussion_r403695617)) so I just force-pushed both of them. I also fixed the reindex functional test, which I hadn't noticed has been broken for a month.\n\nOops, I accidentally force-pushed a rebas",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-611747451,611747451,
vasild,2020-04-10 06:08:52,"ACK fbf708b8c\n\nCompiled and tested [locally](https://github.com/bitcoin/bitcoin/pull/16981#pullrequestreview-387813536).\n\nI viewed the changes introduced in the latest force-push (0e27461 -> fbf708b8c) using:\n```\ndiff -u <(git diff 0e27461~..0e27461) <(git diff fbf708b8c~..fbf708b8c)\n```\n\nDo you think it would be possible to demonstrate that it produces identical result as `maste",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-611894205,611894205,
LarryRuane,2020-04-12 19:55:40,"@vasild\n> Do you think it would be possible to demonstrate that it produces identical result as `master`? That is - reindex with `master`, dump the leveldb database from `blocks/index` in some textual form, reindex with this PR, dump again and compare the two dumps?\n\nThat's a good idea, but I can't find a tool to create such a dump. (Maybe that would be a nice addition to `contrib/`?)\n\nI",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-612667786,612667786,
LarryRuane,2020-04-12 20:26:46,"I had an idea for a further speedup, but it didn't work out as well as I had hoped. It's about 10% faster, but probably should not be merged because the added complexity isn't worth it. The branch is here (based on this PR's branch plus a single commit): https://github.com/LarryRuane/bitcoin/tree/reindex-speedup-thread\n\nThe idea is to move the delayed processing of child blocks (delayed becaus",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-612671455,612671455,
fjahr,2020-04-16 23:07:31,"Code looks good to me so far but I would like it more if the refactoring was in a separate commit and the commit message could go into more detail on how the performance improvement is achieved.\n\nBut I am currently also having trouble to reproduce the performance improvement itself. I am comparing the current master (d8dfcea5d956126fe0e2b1f36db74c8ef805e7ab) with this PR and I am using testnet",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-614941536,614941536,
LarryRuane,2020-04-18 02:51:58,"Thanks, @fjahr, good idea, I just force-pushed three commits to replace the previous single commit so the changes are separated out more clearly. \n\nI also just updated the description, which was outdated.\n\nI timed testnet and this PR was 4 minutes faster than latest master (with this PR based on latest master). On mainnet, it's more like 24 minutes. I think the difference is that testnet b",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-615544013,615544013,
fjahr,2020-04-19 22:13:38,"> One suggestion, if you could try it again, is to start `bitcoind` with the `-maxconnections=0`. I think each time you start `bitcoind` you can get a different set of peers, and different peers can put a different load on your node, so not having any peers reduces the variance, at least that's been my experience.\n\nSorry, I should have said that I already set `-maxconnections=0`, I tried to re",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-616233679,616233679,
LarryRuane,2020-07-13 05:38:25,"Force-pushed and rebased to fix merge conflicts. This PR had momentum for a while but that's faded. Reviewers may be put off by the number of comments, but the result of all the discussion is a much simpler PR. I believe all reviewers' comments have been addressed. I did make sure that the description (first comment) is up-to-date and accurate.\n\nI believe the tests may be the best aspect of th",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-657369436,657369436,
vasild,2020-07-13 18:28:10,"The fixup commit `fix CI failures, same changes as #18216` would better be squashed into whichever commit introduced the failures.",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-657719430,657719430,
LarryRuane,2020-07-13 23:36:42,"@vasild, good suggestion, done (squashed and force-pushed).\n\nI re-ran the timing experiments again since a lot has changed. I started the client with `maxconnections=0` (so it wouldn't be bothered by peers). I ran the experiments multiple times in a controlled environment, so the variation was very small. These are the times of the first phase of `-reindex` (reading the `blk?????.dat` files) o",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-657876663,657876663,
LarryRuane,2020-07-21 17:00:47,Force-pushed rebase to eliminate merge conflict.,https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-661983690,661983690,
LarryRuane,2020-07-24 15:24:47,"Force-push ([diff](https://github.com/bitcoin/bitcoin/compare/da17e6efeeebf0c3fd1ce103812eda1ec7c26772..5b1e92f539c24b6518f577b92874ccac0bbf617f)) to fix comment ([review suggestion](https://github.com/bitcoin/bitcoin/pull/16981#discussion_r459756399)), also took the opportunity to improve the test by checking for expected text in `debug.log`.",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-663593713,663593713,
jamesob,2020-07-24 15:47:31,Running a -reindex benchmark on this; will report back with results.,https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-663604250,663604250,
pinheadmz,2020-07-25 02:30:35,"Ran a pair of benchmark tests:\n\nWith PR: 1 hour, 8 minutes\n5b1e92f539c24b6518f577b92874ccac0bbf617f\n\n```\n2020-07-24T22:41:21Z Reindexing block file blk00000.dat...\n...\n2020-07-24T23:49:24Z Reindexing block file blk02165.dat...\n2020-07-24T23:49:27Z Loaded 126 blocks from external file in 2570ms\n2020-07-24T23:49:27Z Reindexing finished\n```\n\n\nWithout PR: 1 hour, 40 minutes",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-663796342,663796342,
hebasto,2020-07-25 14:42:13,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-663863053,663863053,
fjahr,2020-07-25 20:29:26,"ACK 5b1e92f539c24b6518f577b92874ccac0bbf617f\n\nI did a fresh re-review of the code. I currently don't have access to the machine [where I saw no speed-up before](https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-614941536) but I ran another test on a different machine and that confirms the benchmarks that others have seen here: 2:05h on current master vs. 1:22h with this PR.",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-663902935,663902935,
hebasto,2020-07-26 07:32:30,"Benchmarked and tested 5b1e92f539c24b6518f577b92874ccac0bbf617f on Linux Mint 20 (x86_64).\n\nSetup:\n- block height=640740\n- recent block file `blk02168.dat`\n- commad-line arguments: `-nonetworkactive -reindex`\n\n**master** (40a04814d130dfc9131af3f568eb44533e2bcbfc)\n```\n2020-07-25T14:56:14Z [main] Bitcoin Core version v0.20.99.0-40a04814d (release build)\n...\n2020-07-25T14:56:14Z",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-663951709,663951709,
hebasto,2020-07-26 13:06:46,"Also the resulted index sizes differ substantially:\n- master (40a04814d130dfc9131af3f568eb44533e2bcbfc):\n```\n$ ls -l\ntotal 168532\n-rw------- 1 hebasto hebasto 83614454 Jul 26 15:59 000003.log\n-rw------- 1 hebasto hebasto       27 Jul 26 15:59 000004.log\n-rw------- 1 hebasto hebasto 88941405 Jul 26 15:59 000005.ldb\n-rw------- 1 hebasto hebasto       16 Jul 26 14:15 CURRENT\n-rw----",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-663985777,663985777,
hebasto,2020-07-26 13:53:33,"I found the root of all differences in logs:\n- master (40a04814d130dfc9131af3f568eb44533e2bcbfc):\n```\n[loadblk] Reindexing block file blk00877.dat...\n...\n[loadblk] LoadExternalBlockFile: Processing out of order child 000000000000000001ee925f0e1570c6b61990ac9777fd4a73983b623494e894 of 000000000000000001d22f4d6a05420ba43ee2eb457efea06be8280f8a5f14d2\n[loadblk] LoadExternalBlockFile: Deser",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-663990865,663990865,
jamesob,2020-07-26 16:23:18,"I haven't looked closely at the changes here or the debug.log from these runs, but reindexing to 450,000 isn't showing much difference on my end between the HEAD of this branch and [the mergebase](https://github.com/bitcoin/bitcoin/commit/2c0c3f8e8ca6c64234b1861583f55da2bb385446).\n\n![image](https://user-images.githubusercontent.com/73197/88484131-8b479b00-cf3a-11ea-8aec-473fa8693081.png)\n",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-664008897,664008897,
hebasto,2020-07-26 17:25:00,"@jamesob \nWill try to describe a problem better. The `blocks/blk00877.dat` file is somehow broken on _my_ disk.\n\nThe master branch:\n- encounter an error in `blkdat >> block`\n- reports about an error with the ""Deserialize or I/O error...""\n- tries to read from the next position\n\nThis PR:\n- no error during `blkdat >> header`\n- a broken block (or just random bytes) just treated as ",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-664016897,664016897,
hebasto,2020-07-27 15:43:43,"May I suggest a patch:\n```diff\n--- a/src/validation.cpp\n+++ b/src/validation.cpp\n@@ -4719,6 +4719,7 @@ void LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n                 blkdat.Skip(nBlockPos + nSize - blkdat.GetPos());\n \n                 const uint256 hash = header.GetHash();\n+                if (!CheckProofOfWork(hash, header.nBits, chainparams.GetC",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-664474119,664474119,
LarryRuane,2020-07-28 20:06:12,"@jamesob:\n> ... reindexing to 450,000 isn't showing much difference on my end between the HEAD of this branch and the mergebase\n\nThat's strange. What does reindexing to 450,000 mean? I didn't know you can do that. Is it reindexing _up to_ that height, or only beyond that height?\n\nAre the `debug.log` files still available for those runs? I'd be curious to know when the message `Reindexing",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-665252207,665252207,
hebasto,2020-07-29 07:54:47,"I think the benchmarks for this PR should additionally provide ""Out of order block..."" log message count. The lower this count is the lower `-reindex` speedup should be expected.",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-665499996,665499996,
LarryRuane,2020-07-31 03:58:33,"@hebasto, thank you for doing all those tests. I did more testing (that's why I changed this PR to a Draft), and I'm now convinced there's no functionally important difference between master and this PR when there's data corruption in the `blk.dat` files. There can be a behavior and timing difference, but I don't think it matters. The behavior difference (as you have explained) is that if there's ",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-666901951,666901951,
hebasto,2020-07-31 09:45:37,"@LarryRuane\n\nYou described the scenario when a _block is corrupted_ within a block file.\nIn my situation (don't know how it was happened though) a block file has random/broken bytes but _all block are correct_ within it.\n\nTherefore, with the [suggested](https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-664474119) patch `--reindex` completes without getting blocks from peers.",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-667035766,667035766,
LarryRuane,2020-08-01 15:35:14,"> a block file has random/broken bytes but _all block are correct_ within it. \n\nCan you explain more? Where exactly is the corruption?",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-667549400,667549400,
hebasto,2020-08-01 15:46:46,"> > a block file has random/broken bytes but _all block are correct_ within it.\n> \n> Can you explain more? Where exactly is the corruption?\n\n[blk00877.dat.error](https://drive.google.com/file/d/1WSfWcHcmdA5NhgBI8HkvrLG11dH0bcgy/view?usp=sharing)",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-667550754,667550754,
LarryRuane,2020-08-04 15:06:16,"#### TL;DR\nI think the PR is good as it is can and should be merged.\n\n@hebasto, I understand exactly what's going on, and having that corrupted file really helped, thanks. Before explaining what I found, can you try a different fix, this will confirm my understanding. At [this point](https://github.com/LarryRuane/bitcoin/blob/5b1e92f539c24b6518f577b92874ccac0bbf617f/src/validation.cpp#L4730)",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-668652146,668652146,
LarryRuane,2020-08-05 16:20:48,"I benchmarked this latest version, and it's only 3% slower than the PR version. This latest version has the faster `FindByte()` and also resynchronizes with the byte stream in the (very common) case where, after deserializing only the header, the parent hasn't yet been seen. This is instead of depending on the `nSize` value (moving ahead by this much). This makes reindexing more tolerant of variou",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-669291519,669291519,
hebasto,2020-08-06 03:17:07,"@LarryRuane \n\n1. `FindByte()` speed up is great, but combining two different speed optimizing solutions in a single PR is not a good idea. I'd suggest to separate the `FindByte()` patch into a dedicated PR that will allow to measure each optimization approach individually.\n\n2. Resynchronizing on each out-of-order block (commenting out `nRewind = nBlockPos + nSize;`) indeed improves robustn",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-669658597,669658597,
LarryRuane,2020-08-07 15:12:15,"@hebasto, that makes sense, I took your suggestion. Force-pushed ([diff](https://github.com/bitcoin/bitcoin/compare/ab68fdfae59dea806493f8542486bbb4ae07a3cb..ad386f705cd2879dccfb3e1ce0dbcf5b6f8e1ad6)). The only slight change I made from your suggestion is this:\n```\nif (!CheckProofOfWork(hash, header.nBits, chainparams.GetConsensus())) continue;\n{\n    LOCK(cs_main);\n    (...)\n```\nlook",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-670565889,670565889,
hebasto,2020-08-07 15:38:50,"@LarryRuane \n\nThanks!\n\nTwo last commits with the same messages are confusing. Did you mean that they should be a single commit (that seems reasonable)?\n\n",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-670578322,670578322,
LarryRuane,2020-08-07 17:38:03,"> Two last commits with the same messages are confusing\n\nYes, that was a mistake, thanks for catching that. Force-pushed ([diff](https://github.com/bitcoin/bitcoin/compare/ab68fdfae59dea806493f8542486bbb4ae07a3cb..e5724b5fde855b67ff500e21f11274f12b5c893a)).",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-670630054,670630054,
hebasto,2020-08-07 21:05:25,Was writing a review on e5724b5fde855b67ff500e21f11274f12b5c893a and noticed a fresh push. What is its goal?,https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-670713050,670713050,
LarryRuane,2020-08-07 21:11:24,"@hebasto, you're too quick! Sorry, I confused myself with my lack of git skills... I just make a force-push to do a small cleanup ([diff](https://github.com/bitcoin/bitcoin/compare/e5724b5fde855b67ff500e21f11274f12b5c893a..84b995a9ef468e0badf7bc0378851ea8c698dfc7)) and ended up doing some extra commits by mistake. I had noticed that the `""-debug=reindex""` in the python test was unneeded, because t",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-670715066,670715066,
adamjonas,2020-08-16 00:31:23,"I ran another round of benchmarks of a reindex up to block 600_000 on 84b995a9ef468e0badf7bc0378851ea8c698dfc7 ~(it says ibd on the graph, but it's a reindex).~\n\n~There is a definite speedup but with a much wider range of peak memory usage:~\n[edit: I got this wrong. Will repost with the proper results.]",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-674462103,674462103,
LarryRuane,2020-08-24 05:03:22,"@pinheadmz, @hebasto, I just added another commit, please review. I discovered an additional minor performance improvement in the case where the block is already present in the block index (the message `Block Import: already had block ...` appears). This happens when you start with `-reindex` but the client stops before completing, and you start again without `-reindex`. I didn't attempt to measur",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-678904875,678904875,
pinheadmz,2020-08-25 17:13:09,"@LarryRuane top commit makes sense to me, no point in reading the block data if we already have it. I'm running another reindex now to test it out, and will also try to get an ""already had..."" message. Also digesting the suggestion by @hebasto to skip corrupted block headers. Am able to modify the test by adding ""corrupt"" bytes and make sure the process just skips the block instead of completely b",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-680156588,680156588,
hebasto,2020-09-12 17:23:01,"The latest commit 969366d07c8cfdf8ea56cdb2ae11f5c648152345 looks good, but it adds _another_ behavior change into this PR. I think it deserves its own PR to get the measurable effects from each improvement.",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-691519856,691519856,
LarryRuane,2020-09-13 16:59:21,"> The latest commit [969366d](https://github.com/bitcoin/bitcoin/commit/969366d07c8cfdf8ea56cdb2ae11f5c648152345) looks good, but it adds _another_ behavior change into this PR. I think it deserves its own PR to get the measurable effects from each improvement.\n\nI see it differently. In my view, there's only one behavior change, which is ""don't deserialize the full block unless necessary."" If ",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-691696570,691696570,
decryp2kanon,2020-12-10 06:34:39,Concept ACK ,https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-742274907,742274907,
LarryRuane,2021-02-08 23:05:58,"Rebased, no changes except to improve a few of the commit messages.",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-775522982,775522982,
LarryRuane,2021-06-14 03:58:06,Rebased to resolve merge conflicts.,https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-860345351,860345351,
LarryRuane,2021-07-28 00:50:08,"Force-pushed rebase for merge conflicts, and also, @hebasto, I had added a call to `CheckProofOfWork()` as you suggested in [this comment](https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-664474119) above, but I looked more carefully and found that this function is already called as part of importing each block (reindexing), so I removed that call as part of this rebase. It would help pe",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-887927953,887927953,
LarryRuane,2021-11-20 17:28:06,"Rebased (no changes to this PR's code), there were no conflicts but just because some people would like to review, nice to have a fresh base.",https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-974683066,974683066,
LarryRuane,2019-09-29 01:35:24,"This `LogPrint` probably should be combined with the (existing) one a few lines below before merging, but I wanted reviewers to be aware of when the new code is being run.",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r329333473,329333473,src/validation.cpp
LarryRuane,2019-09-29 01:40:43,"I don't know how to write a unit test for this PR (there are no existing unit tests for any of this area of the code), but `test/functional/wallet_basic.py` does run through the new code -- you can add an `assert(false)` here and that test fails, so that's at least something.",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r329333593,329333593,src/validation.cpp
LarryRuane,2019-10-09 15:29:02,"This is a much larger buffer (640 mb), but it only exists during the first phase of reindexing (when you see `Reindexing block...` in the debug log); after that, the `bitcoind` memory usage increases for other reasons anyway. During the first phase, memory (`VSZ` in the ps output) is about 2.4 gb on my system; afterwards (when it's logging `UpdateTip: new best...`), it's about 3.5 gb. The benefit ",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r333082059,333082059,src/init.cpp
LarryRuane,2019-10-09 15:30:57,"This method is unused, and really doesn't make sense. The buffer contents should match file (or, now, files) content, and this messes that up. If it's needed in the future, it can be re-thought.",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r333083169,333083169,src/streams.h
LarryRuane,2019-10-09 15:41:52,"These `pim` (out-of-order block found in-memory) and `pom` (out-of-order block not in memory) let reviewers see the effectiveness of the read caching during testing; they can be removed before merging. Here's a typical instance:\n```\n2019-10-09T15:28:17Z Loaded 839 blocks from external file in 11729ms pim 726 pom 95\n```\nThis means 821 (726+95) blocks were processed out-of-order, so 18 (839-",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r333088941,333088941,src/validation.cpp
mzumsande,2019-10-17 22:30:10,"Is it necessary to remove the `FILE` from the constructor? Couldn't you just initialize it with `nullptr` in the multi-file case and call `SetFile()` later, so that there need to be no syntax changes for the single-file case? It is also easy to create a `CBufferedFile` object and forget about `SetFile()`, leading to a memory access violation.",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r336254578,336254578,src/streams.h
mzumsande,2019-10-17 22:39:31,nit: This could be moved into the `if` block (same for -loadblock below),https://github.com/bitcoin/bitcoin/pull/16981#discussion_r336257157,336257157,src/init.cpp
mzumsande,2019-10-17 22:49:00,"I think the pim/pom statistics is useful, but maybe too special for the main log. You could use a separate `BCLog::REINDEX` message for that information.",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r336259458,336259458,src/validation.cpp
LarryRuane,2019-10-20 20:00:54,"@mzumsande, good idea, I restored that argument to the constructor.",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r336794478,336794478,src/streams.h
LarryRuane,2019-10-22 15:43:38,"Does it bother anyone else that this is `static`? This is global state, which, in general, equals evil. It must be static, given that it's declared here, since its state must persist across calls to this function (very often, a block and its parent are in different `blk` files). We could eliminate this global state by allocating this map in the caller of this function, `src/init.cpp: ThreadImport(",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r337597803,337597803,src/validation.cpp
kallewoof,2020-03-04 07:36:54,"I only understood this comment after I got to L#359.\n```suggestion\n    // The value at each offset is the byte offset (e.g. byte 1 in the file has the value 0x01, etc).\n```",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r387491322,387491322,src/test/streams_tests.cpp
kallewoof,2020-03-04 07:42:28,"You could do\n```C++\nBOOST_CHECK_THROW(bf.Skip(2), std::exception);\n```\n",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r387493207,387493207,src/test/streams_tests.cpp
emilengler,2020-03-04 17:44:04,nit: Could this 80 become a const? The block header might get bigger or smaller in future and this 80 could get missed.,https://github.com/bitcoin/bitcoin/pull/16981#discussion_r387828430,387828430,src/validation.cpp
sipa,2020-03-04 17:52:53,"I think this call is unnecessary. It's there in the old code to make sure there is consistency between the block length in the file, and the actually serialized data. Headers are always just 80 bytes, though, so this check isn't necessary here.",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r387833215,387833215,src/validation.cpp
sipa,2020-03-04 17:55:22,I think this is incorrect. If the size field of the block was corrupted this would cause us to potentially jump into nowhere. Do things still work (and still give a performance benefit...) if you change this to nBlockPos + 1?,https://github.com/bitcoin/bitcoin/pull/16981#discussion_r387834622,387834622,src/validation.cpp
narula,2020-03-04 18:30:53,"Skip() calls read(), which means (IIUC) that this change makes it so we are now doing a disk read while holding cs_main. Given this is reindexing this might not matter but worth noting. Is this a problem?",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r387853603,387853603,src/validation.cpp
fjahr,2020-03-04 20:57:05,"Also, I think this part could be more concise. I mean adding position + size just do subtract position below, seems a bit redundant.",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r387929685,387929685,src/validation.cpp
ajtowns,2020-03-05 05:05:39,"I think if `nSize` as read from disk is wrong, then\n\n(a) if it's smaller than the actual size of the block, `blkdat >> block` will currently throw which will spit out a `Deserialize or I/O error` and start trying again at the end of the `nSize` bytes -- so this behaviour should be near enough to the same, and this is fine\n\nand (b) if it's larger than the actual size of the block, the `nSiz",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r388080048,388080048,src/validation.cpp
LarryRuane,2020-03-05 16:16:46,"This kind of check occurs four places in this file (and was being done before this PR, for example line 256). I like the conciseness of your suggestion, but it loses the check of the exception string. (The test wouldn't detect if a completely different exception occurred.) Another advantage of checking the exception string is that it documents why the exception is thrown (could be in a comment, bu",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r388401714,388401714,src/test/streams_tests.cpp
LarryRuane,2020-03-05 16:44:06,"> I think this call is unnecessary. \n\nThanks, I'll remove it. (@emilengler's comment is no longer relevant.) It's similar to the way we don't call `SetLimit()` before deserializing into the 4-byte `nSize` just above.",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r388419751,388419751,src/validation.cpp
LarryRuane,2020-03-05 20:22:56,"These comments create a good opportunity for me to ask some questions about the existing design while doing this PR, hope that's okay. Please don't feel an obligation to answer these.\n\n- What's the purpose of the `MessageStart()` marker? It seems to allow the skipping over some arbitrary junk that follows a block before the start of the next [marker-nSize-block] sequence of bytes. What could c",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r388542805,388542805,src/validation.cpp
LarryRuane,2020-03-05 21:23:53,"> Skip() calls read()\n\nGood catch, and it's actually even worse, because if we process the block immediately (don't take the `Skip()` path), then we deserialize the entire block (`blkdat >> block`, just below), and that calls `read()` which can read the disk. But that's the less common path (only about 8%).\n\nAs someone said at review club, the node isn't fully up and running during reindex",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r388573910,388573910,src/validation.cpp
ajtowns,2020-03-06 03:05:48,"The main point of `-reindex` now is recovery after on-disk corruption, so I think it makes sense to be as robust to that as we can reasonably be?\n\nAs well as just random disk corruption, I think you can get problems if (a) you're downloading blocks and your power goes out before the data gets synced; I'd expect you might end up with something like ""...[marker][nSize=1MB][250kB of block data][6",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r388691811,388691811,src/validation.cpp
LarryRuane,2020-03-07 00:01:46,"No functional change here, just refactoring a check that's repeated 4 times. (It's a macro rather than a function so that the line numbers report correctly.) This macro is misnamed (since it's not part of Boost), but it's so close to `BOOST_CHECK_THROW()` that this is probably the least confusing name. (But I can change it.)",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r389199360,389199360,src/test/streams_tests.cpp
LarryRuane,2020-03-07 00:24:01,"I did an experiment yesterday in which I simulated corruption in one of the `blk??.dat` files, and as I suspected, all the blocks beyond the coorrupted block were never accepted (because their parents were missing). But the node then seemed to get all the missed blocks from peers, and at the end all seemed good.\n\nAnthony, your suggestion is similar to what this PR originally did before I reduc",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r389203643,389203643,src/validation.cpp
LarryRuane,2020-03-07 00:27:25,"On the topic of the size being corrupted, if the size field is set to a uniformly distributed random value (or zero, probably the most likely), that is caught (see the check `nSize < 80 || nSize > MAX_BLOCK_SERIALIZED_SIZE` above); the probability that the corrupted value will be in that range is less than 0.1%. So most data corruption there will be detected.",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r389204282,389204282,src/validation.cpp
LarryRuane,2020-03-07 00:30:17,"@narula, this addresses your concern about holding `cs_main` while reading disk.",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r389204803,389204803,src/validation.cpp
LarryRuane,2020-03-07 00:37:15,"I did verify that if I break this PR's code, this test doesn't pass. I know hardcoded constants are generally bad, but I think they're okay here, because the size of an empty `regtest` block is very unlikely to change, and if it does, this test will fail, and it should be pretty easy for someone to figure out why and fix the test. (That is, the test will not falsely succeed.)",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r389206063,389206063,test/functional/feature_reindex.py
vasild,2020-04-05 12:27:13,"This call to `SetLimit()` has been postponed down to [line 4706](https://github.com/bitcoin/bitcoin/pull/16981/files#diff-24efdb00bfbe56b140fb006b562cc70bR4706) where we read the block if it is in-order. There is no need to postpone it - reading the header should also not attempt a read beyond `nBlockPos + nSize` which is expected to be the end of the block.\n\nSo, I would suggest restore it her",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r403694969,403694969,src/validation.cpp
vasild,2020-04-05 12:32:55,"We don't store the blocks for later. Suggestion:\n```suggestion\n                    // Store positions of out of order blocks for later.\n```",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r403695617,403695617,src/validation.cpp
vasild,2020-04-05 14:36:07,"This `Skip()` can be skipped. What the PR does now is:\n\n1. Read from disk and deserialize the block header.\n2. Read from disk the remaining of the block with this `Skip()` call (just buffer it into `blkdat`).\n3. If it is out-of-order block, continue with the next block. Notice that even if the data we read from disk in 2. remains buffered in `blkdat`, we will never make use of it because w",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r403710433,403710433,src/validation.cpp
LarryRuane,2020-04-07 01:13:12,"Thanks, Vasil. Steps 1 and 2 (in your first list) are not separate disk reads; each disk read generally includes multiple blocks. The `CBufferedFile` object doesn't know (and has no way to know) where the block boundaries are, so it does as large a read as the buffer allows, which is about 4 MB (`MAX_BLOCK_SERIALIZED_SIZE = 4000000`). The buffer boundaries and block boundaries aren't synchronized ",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r404479673,404479673,src/validation.cpp
vasild,2020-04-07 12:41:16,"Uh, oh. You are right that `SetPos()` must be within what has already been read into the buffer (`CBufferedFile::vchBuf`). I tried timing the suggested patch and it was either the same or ~1 min slower than the PR. This is within noise, but maybe is because of what you describe above (`FindByte()` checking every byte).\n\n`CBufferedFile` is indeed not designed to skip through data (without readi",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r404776506,404776506,src/validation.cpp
pinheadmz,2020-07-23 21:23:03,"~How come you still use `read()` for this? You made the `memcpy` optional but if you are fast-forwarding past the buffer size, couldn't you still end up calling `Fill()` several times? Why not just add `nSize` to `nSrcPos` and `Seek()`?~\n\nNever mind, I see below you can keep the block in memory this way in case it *is* ready for processing. And the buffer size is big enough so my worry is moot",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r459735914,459735914,src/streams.h
pinheadmz,2020-07-23 21:58:47,no assert / `BOOST_CHECK` for this test?,https://github.com/bitcoin/bitcoin/pull/16981#discussion_r459751621,459751621,src/test/streams_tests.cpp
pinheadmz,2020-07-23 22:10:30,"nit: ""these are the first...""",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r459756399,459756399,test/functional/feature_reindex.py
LarryRuane,2020-07-24 03:23:32,"I agree that looks strange, but this `case` of the enclosing `switch` statement isn't an isolated test, we're within a 100-iteration loop. As the test continues to loop, any `Skip()` bug would cause the `BOOST_CHECK_EQUAL` at line 407 to fail (and also the other cases to fail since `currentPos` keeps track of where we should be in the stream).",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r459834947,459834947,src/test/streams_tests.cpp
luke-jr,2021-02-28 18:19:48,Rather not call our own macros `BOOST_*`...,https://github.com/bitcoin/bitcoin/pull/16981#discussion_r584336514,584336514,src/test/streams_tests.cpp
LarryRuane,2021-03-15 12:59:16,"> Rather not call our own macros `BOOST_*` ...\n\nGood point; I just removed this (new) macro because it's out of the scope for this PR, force-pushed (but didn't rebase).",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r594312678,594312678,src/test/streams_tests.cpp
LarryRuane,2021-03-15 13:05:34,"Update: I removed this new test macro, `BOOST_CHECK_THROW_STR()`, because it's out of scope for this PR.",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r594316847,594316847,src/test/streams_tests.cpp
stickies-v,2021-11-22 21:48:35,"It looks like we're deserializing the header twice now. CBlock already has a constructor that takes a CBlockHeader, so potentially we could use that for another minor performance improvement? However, I think that would prevent us from using the overloaded >> operator - but I'm not familiar with this at all. So, probably you'll want to keep it like this, but I'm just flagging in case anyone sees a",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r754659833,754659833,src/validation.cpp
stickies-v,2021-11-22 22:08:55,"Also, I think technically you could release/reacquire the lock before/after the block serialization, but I'm not sure if that would be a net positive improvement? I can imagine there will be a performance penalty for doing that.",https://github.com/bitcoin/bitcoin/pull/16981#discussion_r754671610,754671610,src/validation.cpp
