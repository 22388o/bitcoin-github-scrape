DrahtBot,2019-07-23 22:30:06,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16411](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16411.html) (Signet support by kallewoof)\n* [#16400](ht",https://github.com/bitcoin/bitcoin/pull/16443#issuecomment-514407351,514407351,
jamesob,2019-07-24 21:52:05,"Thanks for the feedback, @ryanofsky. I think I've incorporated all of it.",https://github.com/bitcoin/bitcoin/pull/16443#issuecomment-514813701,514813701,
sipa,2019-07-25 01:55:15,"`EXCLUSIVE_LOCK_REQUIRED` is checked at compile time, but only when the compiler has certain flags enabled (only on Clang, I believe).\n\n`AssertLockHeld` is checked at runtime when lock debugging is compiled in (available for all compilers, but only enabled in debug builds).",https://github.com/bitcoin/bitcoin/pull/16443#issuecomment-514863335,514863335,
ariard,2019-07-25 02:01:46,"Yes `EXCLUSIVE_LOCK_REQUIRED` is defined in `threadsafety.h` and is part of Clang static analysis on Mac OS X. But reviewing last commit, e.g in `ActivateBestChainStep` we only use `AssertLockHeld` but in fact we should use Clang attribute (or maybe both). Is there a consistent policy on which one to favour ?",https://github.com/bitcoin/bitcoin/pull/16443#issuecomment-514864651,514864651,
jamesob,2019-07-25 15:30:52,"Thanks for the look, @ariard. Feedback pushed.",https://github.com/bitcoin/bitcoin/pull/16443#issuecomment-515091980,515091980,
MarcoFalke,2019-07-26 10:51:26,https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#known-limitations,https://github.com/bitcoin/bitcoin/pull/16443#issuecomment-515408020,515408020,
MarcoFalke,2019-07-26 12:15:11,"In commit 53c8d59d18 refactor: have CCoins* data managed under CChainState\n```\n   - The initialization order in init.cpp is changed slightly: the coinsdb (leveldb)\n      creation is moved to be earlier than block index and genesis block loading,\n      though this shouldn't have any noticeable effect.\n```\nCould you elaborate a bit more why it is save to flush the chainstate when shutdow",https://github.com/bitcoin/bitcoin/pull/16443#issuecomment-515427932,515427932,
MarcoFalke,2019-07-26 12:35:45,"I am seeing segmentation faults when shutting down during init:\n\n```\n==4778== Thread 9 bitcoin-shutoff:\n==4778== Invalid read of size 4\n==4778==    at 0x4953BC: FlushBlockFile(bool) (validation.cpp:1548)\n==4778==    by 0x496B76: CChainState::FlushStateToDisk(CChainParams const&, CValidationState&, FlushStateMode, int) (validation.cpp:2061)\n==4778==    by 0x497AB5: CChainState::ForceF",https://github.com/bitcoin/bitcoin/pull/16443#issuecomment-515433681,515433681,
jamesob,2019-07-26 16:10:11,"Good catches, @MarcoFalke! I've [pushed fixes](https://github.com/bitcoin/bitcoin/compare/c860b44ce33f424de7f0fe5f96efa65c58bdb531..8cd527d72442e76cfc6dc848eb01b52f2a8f2d4c), including https://github.com/bitcoin/bitcoin/pull/16443/commits/e4b3247d4a67f248ff13bf43c378337ee993555b to solve the init bug you found. There are a few ways of addressing that one but I think an early exit from `FlushStateT",https://github.com/bitcoin/bitcoin/pull/16443#issuecomment-515511905,515511905,
ryanofsky,2019-07-26 17:41:09,"> In commit [53c8d59](https://github.com/bitcoin/bitcoin/commit/53c8d59d182684f33f944e3513b56d3be4f557d2) refactor: have CCoins* data managed under CChainState\n> \n> ```\n>    - The initialization order in init.cpp is changed slightly: the coinsdb (leveldb)\n>       creation is moved to be earlier than block index and genesis block loading,\n>       though this shouldn't have any noticeable ",https://github.com/bitcoin/bitcoin/pull/16443#issuecomment-515539883,515539883,
jamesob,2019-07-26 19:53:28,@ryanofsky @MarcoFalke good points. I've abandoned trying to reorder the init.cpp stuff and now have separated the construction of `CChainState` from `CoinsViews` to preserve the existing order. ,https://github.com/bitcoin/bitcoin/pull/16443#issuecomment-515579006,515579006,
MarcoFalke,2019-07-31 12:08:37,"ACK 4e307e5f5d676d01a94e1b645dcb0ee8574faf77 (only checked that my name is in the credits, did not look at the changes)\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK 4e307e5f5d676d01a94e1b645dcb0ee8574faf77 (only checked that my name is in the credits, did not look at the changes)\n-----BEGIN PGP",https://github.com/bitcoin/bitcoin/pull/16443#issuecomment-516820804,516820804,
jamesob,2019-08-06 18:08:57,I've pushed [changes](https://github.com/bitcoin/bitcoin/compare/4e307e5f5d676d01a94e1b645dcb0ee8574faf77..72258a94731d662122880eedc9b0e278a09d455c) ([`au.coins-under-chainstate.9`](https://github.com/jamesob/bitcoin/tree/au.coins-under-chainstate.9) -> [`au.coins-under-chainstate.10`](https://github.com/jamesob/bitcoin/tree/au.coins-under-chainstate.10)) that allow separate initialization of the ,https://github.com/bitcoin/bitcoin/pull/16443#issuecomment-518781752,518781752,
TheBlueMatt,2019-08-14 19:38:22,Does it make sense to go ahead and do some kind of ::ChainstateActive().CoinsTip(I_WANT_THE_FULLY_VALIDATED_ONE_ONLY vs IM_OK_WITH_ASSUMEVALID) distinction in this pr?,https://github.com/bitcoin/bitcoin/pull/16443#issuecomment-521388405,521388405,
MarcoFalke,2019-08-14 19:51:30,Why would you need such a distinction at the coins tip level? I'd rather have a ::ChainstateBackground() global.,https://github.com/bitcoin/bitcoin/pull/16443#issuecomment-521393134,521393134,
jamesob,2019-08-14 20:37:37,@TheBlueMatt no - right now there's no notion of an assumeutxo-valid chainstate. Later on when we want to acknowledge the possibility of multiple chainstates we'll do so through the [`ChainstateManager`](https://github.com/bitcoin/bitcoin/commit/bf4a50371448d4a995ccd8e0cf299986b96491fe#diff-349fbb003d5ae550a2e8fa658e475880R806) interface (as @Sjors noted). ,https://github.com/bitcoin/bitcoin/pull/16443#issuecomment-521409072,521409072,
MarcoFalke,2019-08-15 13:48:37,"partial ACK 087bdf7190\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK 087bdf7190\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiSqQv+PyvXoFWuFIO8A5dCEelRFbODvV6DCXgYAdsWbKLeJQL9djcqnVE1xNHS\nXI90uua6p2kjXYOxjDn9l4r3mGizgYJkbiJmjwJef++U8sj",https://github.com/bitcoin/bitcoin/pull/16443#issuecomment-521647395,521647395,
jamesob,2019-08-15 15:21:32,"[`au.coins-under-chainstate.10`](https://github.com/jamesob/bitcoin/tree/au.coins-under-chainstate.10) -> [`au.coins-under-chainstate.12`](https://github.com/jamesob/bitcoin/tree/au.coins-under-chainstate.12) \n- [(changes `10` -> `11`)](https://github.com/bitcoin/bitcoin/compare/cdf6afbbf1e15710ebbd26c02ccbd834db1431de..c41bcbd3ef6a61335c4e144633bc3ce6e52abcb7) \n- [(changes `11` -> `12`)](http",https://github.com/bitcoin/bitcoin/pull/16443#issuecomment-521680843,521680843,
Sjors,2019-08-15 16:18:09,reACK 582d2cd74754d6b9a2394616a9c82a89d2d71976,https://github.com/bitcoin/bitcoin/pull/16443#issuecomment-521701281,521701281,
MarcoFalke,2019-08-15 16:46:30,"ACK 582d2cd747\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK 582d2cd747\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUinvAv+MV+6LkNCYGqrYG1HI3cm/fQYw8DmpC0nsUHkaEDHCfaqTvAimUoXxveq\nzIb2gsCgbyujAM+zCTLlUBdE1v4stJ1fPMq57afluQNpEXrRSYttdy3",https://github.com/bitcoin/bitcoin/pull/16443#issuecomment-521711846,521711846,
MarcoFalke,2019-07-23 19:48:28,I'd prefer to make the call to `GetDataDir` in the cpp file.,https://github.com/bitcoin/bitcoin/pull/16443#discussion_r306501234,306501234,src/validation.h
MarcoFalke,2019-07-23 19:48:58,Why are you removing the comment that this data is protected by cs_main?,https://github.com/bitcoin/bitcoin/pull/16443#discussion_r306501435,306501435,src/validation.h
MarcoFalke,2019-07-23 19:50:29,"```suggestion\n    const CCoinsViewCache& coins_cache = ::ChainstateActive().CoinsTip();\n```",https://github.com/bitcoin/bitcoin/pull/16443#discussion_r306502062,306502062,src/validation.cpp
MarcoFalke,2019-07-23 19:52:30,"```suggestion\n    return *g_chainstate;\n```",https://github.com/bitcoin/bitcoin/pull/16443#discussion_r306502987,306502987,src/validation.cpp
MarcoFalke,2019-07-23 19:54:59,"```suggestion\n            const CCoinsViewCache& coins_cache = ::ChainstateActive().CoinsTip();\n```",https://github.com/bitcoin/bitcoin/pull/16443#discussion_r306504014,306504014,src/net_processing.cpp
ryanofsky,2019-07-24 18:11:09,"In commit ""refactor: pcoinsTip -> CChainState::CoinsTip()"" (9edf6537f13b61952f77ab62c2221c2b18d9561a)\n\nHere and in rpc/blockchain.cpp, if you're going to introduce a new variable, it seems better to make it a reference than a raw pointer. (IMO at least it is best to reserve c++ pointers for nullable cases to refer to objects that may or may not exist, and c++ references to refer to objects tha",https://github.com/bitcoin/bitcoin/pull/16443#discussion_r306949954,306949954,src/validation.cpp
ryanofsky,2019-07-24 18:14:28,"In commit ""refactor: pcoinsTip -> CChainState::CoinsTip()"" (9edf6537f13b61952f77ab62c2221c2b18d9561a)\n\n> Why are you removing the comment that this data is protected by cs_main?\n\nSeems resolved now (comment is just moved).",https://github.com/bitcoin/bitcoin/pull/16443#discussion_r306951381,306951381,src/validation.h
ryanofsky,2019-07-24 18:21:51,"In commit ""refactor: add CoinsViews class"" (e5d83bf15bbf1f9359dcb6146dc5f12ae61d8720)\n\nThis doesn't seem to compile. CCoinsViewDB at this point takes 3 arguments not 4. Also could avoid raw pointer management and `new` call with member initialization and `MakeUnique`:\n\n```c++\n: m_dbview(MakeUnique<CCoinsViewDB>(cache_size_bytes, in_memory, should_wipe))\n```\n\nMember initialization i",https://github.com/bitcoin/bitcoin/pull/16443#discussion_r306954646,306954646,src/validation.cpp
ryanofsky,2019-07-24 19:06:20,"In commit ""Cover UTXO set access with lock annotations"" (ceca2c92b79a8a2c5ae37d03e99de80ec55895c3)\n\nCommit message is a bit misleading imo, because this is adding a new lock, not just new annotations.\n\nBut more importantly, GetUTXOStats is acquiring and releasing cs_main internally, so this change seems like it is complicating locking and also locking too much. Maybe a change like the foll",https://github.com/bitcoin/bitcoin/pull/16443#discussion_r306974591,306974591,src/rpc/blockchain.cpp
ryanofsky,2019-07-24 19:30:58,"In commit ""refactor: have CCoins* data managed under CChainState"" (eed4e62ad6b162ff0d3e2b87eb8762a689678bca)\n\nCan you add a comment here about when it's appropriate to access `g_chainstate` variable directly, as opposed to calling `ChainstateActive()`? I see code in `init.cpp` is using both, but mostly the former, which is different than what I'd expect. I'd expect init code to just create a C",https://github.com/bitcoin/bitcoin/pull/16443#discussion_r306984125,306984125,src/validation.h
ryanofsky,2019-07-24 19:33:00,"In commit ""refactor: have CCoins* data managed under CChainState"" (eed4e62ad6b162ff0d3e2b87eb8762a689678bca)\n\nSuggest `x = MakeUnique<X>()` instead of `x.reset(new X())` to avoid raw pointers and new in C++, which are suspicious.",https://github.com/bitcoin/bitcoin/pull/16443#discussion_r306984839,306984839,src/validation.cpp
ryanofsky,2019-07-24 19:33:24,"In commit ""refactor: have CCoins* data managed under CChainState"" (eed4e62ad6b162ff0d3e2b87eb8762a689678bca)\n\nSuggest `x = MakeUnique<X>()` instead of `x.reset(new X())` to avoid raw pointers and new in C++, which are suspicious.",https://github.com/bitcoin/bitcoin/pull/16443#discussion_r306984979,306984979,src/init.cpp
ryanofsky,2019-07-24 19:33:41,"In commit ""refactor: have CCoins* data managed under CChainState"" (eed4e62ad6b162ff0d3e2b87eb8762a689678bca)\n\nSuggest `x = MakeUnique<X>()` instead of `x.reset(new X())` to avoid raw pointers and new in C++, which are suspicious.",https://github.com/bitcoin/bitcoin/pull/16443#discussion_r306985098,306985098,src/test/setup_common.cpp
ryanofsky,2019-07-24 19:38:11,"In commit ""refactor: have CCoins* data managed under CChainState"" (eed4e62ad6b162ff0d3e2b87eb8762a689678bca)\n\nCould you specify in the commit message whether this is changing initialization order in any significant way? It seems like utxo database is being loaded a lot earlier now.",https://github.com/bitcoin/bitcoin/pull/16443#discussion_r306986668,306986668,src/init.cpp
ryanofsky,2019-07-24 19:41:50,"In commit ""refactor: have CCoins* data managed under CChainState"" (eed4e62ad6b162ff0d3e2b87eb8762a689678bca)\n\nCan we get rid of these default values? It seems like they are not actually used anymore, and default booleans params  in general tend to make code trickier to read and mask bugs.",https://github.com/bitcoin/bitcoin/pull/16443#discussion_r306988095,306988095,src/txdb.h
jamesob,2019-07-24 20:08:25,"Good point - since it was easy to do, I've tacked on a commit that adds lock annotations to the equivalent CoinsViews members.",https://github.com/bitcoin/bitcoin/pull/16443#discussion_r306998642,306998642,src/validation.h
jamesob,2019-07-24 20:15:47,"Ah, oops - you're right. Shouldn't have tried to split those commits out.",https://github.com/bitcoin/bitcoin/pull/16443#discussion_r307001210,307001210,src/validation.cpp
jamesob,2019-07-24 20:25:24,"Ah that's a good point - I forgot that `GetUTXOStats` only briefly acquires cs_main to get the height for a certain blockhash; it (counterintuitively) doesn't need to hold cs_main to iterate through the coins db because leveldb's implicit use of snapshots with cursors. \n\nI think the `WITH_LOCK` usage above obeys the letter of the law but not the spirit since technically the coinsdb could be mo",https://github.com/bitcoin/bitcoin/pull/16443#discussion_r307005027,307005027,src/rpc/blockchain.cpp
ariard,2019-07-25 00:33:39,"nit: You could document this constructor, at least referring to doc fields in `CDBWrapper` declaration\n\nsuper-nit: Also at first read, I found `CoinsViews` name confusing because we already have `CoinsView`, we could have `CoinsViewSet`",https://github.com/bitcoin/bitcoin/pull/16443#discussion_r307074208,307074208,src/validation.h
ariard,2019-07-25 01:23:56,Did you remove it in last commit ? I still see it at d0e1e37,https://github.com/bitcoin/bitcoin/pull/16443#discussion_r307082309,307082309,src/validation.h
ariard,2019-07-25 01:27:07,Also comment in ATMP refers to it,https://github.com/bitcoin/bitcoin/pull/16443#discussion_r307082780,307082780,src/validation.h
ariard,2019-07-25 01:43:28,Hmmm is there any risk than having a default leveldb_name cause database collisions for different CChainState at some point ?,https://github.com/bitcoin/bitcoin/pull/16443#discussion_r307085455,307085455,src/validation.h
ariard,2019-07-25 01:45:50,"nit : I know these fields weren't documented as global, but maybe add comment explaining the aforementioned hierarchy between them",https://github.com/bitcoin/bitcoin/pull/16443#discussion_r307085845,307085845,src/validation.h
jamesob,2019-07-25 13:59:46,Good catch! Forgot to remove this after I split out the `CoinsTip()` rename commit.,https://github.com/bitcoin/bitcoin/pull/16443#discussion_r307311134,307311134,src/validation.h
jamesob,2019-07-25 14:14:57,"This seems like something that would be caught pretty easily in tests if the confusion ever did happen, and I'm not sure if repeating `""chainstate""` in a few different places inline is any better. That said I'm happy to make this change if others agree it seems worthwhile.",https://github.com/bitcoin/bitcoin/pull/16443#discussion_r307318877,307318877,src/validation.h
MarcoFalke,2019-07-26 12:35:21,Why are you removing the mempool lock annotation? Aren't the lock annotations in the header correct?,https://github.com/bitcoin/bitcoin/pull/16443#discussion_r307722194,307722194,src/validation.cpp
MarcoFalke,2019-07-26 12:35:30,Same,https://github.com/bitcoin/bitcoin/pull/16443#discussion_r307722259,307722259,src/validation.cpp
jamesob,2019-07-26 15:07:11,Ah you're right - dumb mistake on my part.,https://github.com/bitcoin/bitcoin/pull/16443#discussion_r307785654,307785654,src/validation.cpp
ariard,2019-07-31 00:09:29,"Based on above discussion on lock annotations, you may use also `AssertLockHeld` here and in `UpdateTip`\n(also `AcceptToMemoryPoolWithTime`, `DisconnectTip`, `ConnectTip`)",https://github.com/bitcoin/bitcoin/pull/16443#discussion_r308993272,308993272,src/validation.cpp
MarcoFalke,2019-07-31 12:20:13,"Again, would be nice if you explained why it is safe to flush the db when we were unable to replay the blocks or upgrading the db, ... $any_other_error",https://github.com/bitcoin/bitcoin/pull/16443#discussion_r309187924,309187924,src/init.cpp
jamesob,2019-08-06 18:04:18,"Good point. Instead of changing any of the `init` ordering and explaining with a comment, I've made further changes that split up initialization of the coinsdb and coinscache.",https://github.com/bitcoin/bitcoin/pull/16443#discussion_r311200204,311200204,src/init.cpp
Sjors,2019-08-13 14:13:16,"Note to other reviewers: `g_chainstate` is proposed to be retired in bf4a50371448d4a995ccd8e0cf299986b96491fe of the parent PR, by introducing a `ChainstateManager`. IIUC the current code would not respond well to having more than one `CChainState` instance. ",https://github.com/bitcoin/bitcoin/pull/16443#discussion_r313419729,313419729,src/validation.h
ariard,2019-08-14 21:24:18,"Don't know about this lock, there is no thread which reset `g_chainstate`, and if we shutdown before we init `g_chainstate` we should be still single-threaded. Anyway, taking a lock at shutdown shouldn't hurt",https://github.com/bitcoin/bitcoin/pull/16443#discussion_r314089892,314089892,src/init.cpp
ariard,2019-08-14 21:29:57,"nit: if you rebase, you may add a reference to this in commit message, at would ease understanding of changed since last time :)",https://github.com/bitcoin/bitcoin/pull/16443#discussion_r314092047,314092047,src/validation.h
MarcoFalke,2019-08-15 13:30:04,"in commit 087bdf7190 refactor: have CCoins* data managed under CChainState\n\n\nWhy is this comment changed? None of the other comments have trailing dots",https://github.com/bitcoin/bitcoin/pull/16443#discussion_r314307287,314307287,src/init.cpp
MarcoFalke,2019-08-15 13:43:40,"In commit 087bdf7190 refactor: have CCoins* data managed under CChainState\n\n\nWhy is this a pointer?",https://github.com/bitcoin/bitcoin/pull/16443#discussion_r314312693,314312693,src/validation.h
MarcoFalke,2019-08-15 13:43:45,Same,https://github.com/bitcoin/bitcoin/pull/16443#discussion_r314312733,314312733,src/validation.h
MarcoFalke,2019-08-15 13:44:55,"in commit 087bdf7190 refactor: have CCoins* data managed under CChainState\n\nNo need for `.get()`;\n\n(Same below)",https://github.com/bitcoin/bitcoin/pull/16443#discussion_r314313212,314313212,src/validation.h
MarcoFalke,2019-08-15 13:47:44,"in commit cdf6afbbf1\n\nPlease don't add lock annotations in the cpp file. They will overwrite the ones in the header file",https://github.com/bitcoin/bitcoin/pull/16443#discussion_r314314559,314314559,src/validation.cpp
MarcoFalke,2019-08-15 13:47:50,Same,https://github.com/bitcoin/bitcoin/pull/16443#discussion_r314314606,314314606,src/validation.cpp
jamesob,2019-08-15 14:52:33,"Oops, stupid mistake.",https://github.com/bitcoin/bitcoin/pull/16443#discussion_r314345681,314345681,src/validation.cpp
jamesob,2019-08-15 15:00:26,"Yeah, only added this to satisfy the new lock annotations on `CanFlushToDisk()`.",https://github.com/bitcoin/bitcoin/pull/16443#discussion_r314350052,314350052,src/init.cpp
jamesob,2019-08-15 15:21:52,"Updated the message, thanks.",https://github.com/bitcoin/bitcoin/pull/16443#discussion_r314361298,314361298,src/validation.h
