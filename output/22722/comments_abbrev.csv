prayank23,2021-08-17 08:37:07,"Concept ACK (Including mempoolMinFee)\n\n`estimatesmartfee` should become better (smart) after this change although I am not sure about the approach. Will test it today.",https://github.com/bitcoin/bitcoin/pull/22722#issuecomment-900105817,900105817,
kristapsk,2021-08-17 18:14:44,Concept ACK,https://github.com/bitcoin/bitcoin/pull/22722#issuecomment-900524714,900524714,
prayank23,2021-08-19 13:16:34,"Tried this on Pop!_OS with regtest. Initially had issues understanding how GetMinFee() works, Andrew Chow answered it in detail on stackexchange: https://bitcoin.stackexchange.com/questions/108126/getminfee-in-blockchain-cpp\n\nI saved `minrelaytxfee` 0.0002 similar to [/test/functional/feature_fee_estimation.py](https://github.com/bitcoin/bitcoin/blob/master/test/functional/feature_fee_estimati",https://github.com/bitcoin/bitcoin/pull/22722#issuecomment-901907447,901907447,
pranabp-bit,2021-08-23 08:16:31,"@prayank23 Thank you for the detailed review. Just wanted to confirm, are you suggesting to change `estimatesmartfee` such that is returns ""feerate_min"" and ""feerate_max"" ? If yes, then maybe I could try that later in a different PR.",https://github.com/bitcoin/bitcoin/pull/22722#issuecomment-903545887,903545887,
pranabp-bit,2021-08-23 12:06:42,"@darosior Thank you for the suggestion. But as of now, I only found one other call for the `estimateSmartFee` and it was in the [GetMinimumFeeRate function](https://github.com/bitcoin/bitcoin/blob/7fcf53f7b4524572d1d0c9a5fdc388e87eb02416/src/wallet/fees.cpp#L57). And this function returns the `feerate_needed` after considering the mempoolMinFee. So maybe we can keep this change limited to the `est",https://github.com/bitcoin/bitcoin/pull/22722#issuecomment-903704585,903704585,
darosior,2021-08-23 12:17:50,"> But as of now, I only found one other call\n\nSounds good to me, it's already a fix as is and we can always de-duplicate the `min(estimateSmarFee, mempoolMinFee)` logic in a folowup.",https://github.com/bitcoin/bitcoin/pull/22722#issuecomment-903712864,903712864,
prayank23,2021-08-23 12:42:59,"> are you suggesting to change estimatesmartfee such that is returns ""feerate_min"" and ""feerate_max"" ? If yes, then maybe I could try that later in a different PR.\n\nYes. We could do something similar in follow up to improve `estimatesmartfee`. However, I also wanted to share that results for `estimatesmartfee` even after this PR are not helpful or misleading in some cases. \n\nFor example: I",https://github.com/bitcoin/bitcoin/pull/22722#issuecomment-903729848,903729848,
instagibbs,2021-08-25 22:33:05,"concept ACK, can you please squash?",https://github.com/bitcoin/bitcoin/pull/22722#issuecomment-905920483,905920483,
pranabp-bit,2021-08-28 04:08:29,"I updated the test such that in the end, it sets the `minrelaytxfee` to a value which is 3 times the `estimatesmartfee(1)` called from the same node. So the test would be more robust against future changes than the previous one in which I set it directly to ""0.0003"". \nI have incorporated most of the suggestions I got, and some of them, I would take up as follow-up in the future.\nBut for now, d",https://github.com/bitcoin/bitcoin/pull/22722#issuecomment-907563896,907563896,
laanwj,2021-09-16 18:43:44,"Can you please change to a more descriptive PR title and commit message? ""update estimatesmartfee"" doesn't say much :smile: ",https://github.com/bitcoin/bitcoin/pull/22722#issuecomment-921152713,921152713,
instagibbs,2021-09-17 23:37:02,ACK https://github.com/pranabp-bit/bitcoin/pull/22722/commits/b2152f3ff21aeee185be6dcfcfcc73b28d989de2,https://github.com/bitcoin/bitcoin/pull/22722#issuecomment-922134649,922134649,
DrahtBot,2021-09-24 01:35:39,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23074](https://github.com/bitcoin/bitcoin/pull/23074) (Package-aware fee estimation by darosior)\n* [#22539](https://git",https://github.com/bitcoin/bitcoin/pull/22722#issuecomment-926279430,926279430,
jonatack,2021-08-17 08:19:50,"Suggestion, you could use braced initialization and `std::max` with an initializer list.\n```diff\n-    CFeeRate feeRate = fee_estimator.estimateSmartFee(conf_target, &feeCalc, conservative);\n-    CFeeRate min_mempool_feerate = mempool.GetMinFee(gArgs.GetArg(""-maxmempool"", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n-    if (feeRate < min_mempool_feerate) {\n-        feeRate = min_mempool_feerate",https://github.com/bitcoin/bitcoin/pull/22722#discussion_r690144369,690144369,src/rpc/mining.cpp
jonatack,2021-08-17 08:21:27,"```suggestion\n        self.log.info(""Test fee rate estimation after restarting node with high MempoolMinFee"")\n```",https://github.com/bitcoin/bitcoin/pull/22722#discussion_r690145620,690145620,test/functional/feature_fee_estimation.py
jonatack,2021-08-17 08:21:45,"nit, missing space\n```diff\n-        assert_greater_than_or_equal(feerate,float(mempoolMinFee))\n-        assert_greater_than_or_equal(feerate,float(minRelaytxFee))\n+        assert_greater_than_or_equal(feerate, float(mempoolMinFee))\n+        assert_greater_than_or_equal(feerate, float(minRelaytxFee))\n```",https://github.com/bitcoin/bitcoin/pull/22722#discussion_r690145848,690145848,test/functional/feature_fee_estimation.py
jonatack,2021-08-17 08:26:30,"can be `const`\n```suggestion\n    const NodeContext& node = EnsureAnyNodeContext(request.context);\n```",https://github.com/bitcoin/bitcoin/pull/22722#discussion_r690149493,690149493,src/rpc/mining.cpp
instagibbs,2021-08-26 02:35:54,can we programmatically make sure that this new minrelaytxfee value is higher than before to avoid regressions?,https://github.com/bitcoin/bitcoin/pull/22722#discussion_r696243572,696243572,test/functional/feature_fee_estimation.py
meshcollider,2021-09-28 02:57:24,Silent merge conflict: this needs to use `gArgs.GetIntArg` now (as of #22976),https://github.com/bitcoin/bitcoin/pull/22722#discussion_r717184557,717184557,src/rpc/mining.cpp
