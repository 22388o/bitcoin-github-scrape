[
  {
    "sha": "ea31caf6b4c182c6f10f136548f84e603800511c",
    "node_id": "C_kwDOABII59oAKGVhMzFjYWY2YjRjMTgyYzZmMTBmMTM2NTQ4Zjg0ZTYwMzgwMDUxMWM",
    "commit": {
      "author": {
        "name": "pranabp-bit",
        "email": "pranabp@iitk.ac.in",
        "date": "2021-08-14T02:52:43Z"
      },
      "committer": {
        "name": "pranabp-bit",
        "email": "pranabp@iitk.ac.in",
        "date": "2021-09-28T13:06:38Z"
      },
      "message": "update estimatesmartfee rpc to return max of estimateSmartFee, mempoolMinFee and minRelayTxFee.\n\nThis will provide better estimates which would be closer to fee paid in actual\ntransactions.\nThe test has also been changed such that when the node is restarted with a\nhigh mempoolMinFee, the estimatesmartfee still returns a feeRate greater\nthan or equal to the mempoolMinFee, minRelayTxFee.(just like the feeRate of actual transactions)",
      "tree": {
        "sha": "7f4087d38fa130756d3aae719b4f334598f946dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f4087d38fa130756d3aae719b4f334598f946dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea31caf6b4c182c6f10f136548f84e603800511c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea31caf6b4c182c6f10f136548f84e603800511c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea31caf6b4c182c6f10f136548f84e603800511c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea31caf6b4c182c6f10f136548f84e603800511c/comments",
    "author": {
      "login": "pranabp-bit",
      "id": 58358551,
      "node_id": "MDQ6VXNlcjU4MzU4NTUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/58358551?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pranabp-bit",
      "html_url": "https://github.com/pranabp-bit",
      "followers_url": "https://api.github.com/users/pranabp-bit/followers",
      "following_url": "https://api.github.com/users/pranabp-bit/following{/other_user}",
      "gists_url": "https://api.github.com/users/pranabp-bit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pranabp-bit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pranabp-bit/subscriptions",
      "organizations_url": "https://api.github.com/users/pranabp-bit/orgs",
      "repos_url": "https://api.github.com/users/pranabp-bit/repos",
      "events_url": "https://api.github.com/users/pranabp-bit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pranabp-bit/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pranabp-bit",
      "id": 58358551,
      "node_id": "MDQ6VXNlcjU4MzU4NTUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/58358551?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pranabp-bit",
      "html_url": "https://github.com/pranabp-bit",
      "followers_url": "https://api.github.com/users/pranabp-bit/followers",
      "following_url": "https://api.github.com/users/pranabp-bit/following{/other_user}",
      "gists_url": "https://api.github.com/users/pranabp-bit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pranabp-bit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pranabp-bit/subscriptions",
      "organizations_url": "https://api.github.com/users/pranabp-bit/orgs",
      "repos_url": "https://api.github.com/users/pranabp-bit/repos",
      "events_url": "https://api.github.com/users/pranabp-bit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pranabp-bit/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dccf3d25f9e78909eb7b3143e89a7c87fac25ab5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dccf3d25f9e78909eb7b3143e89a7c87fac25ab5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dccf3d25f9e78909eb7b3143e89a7c87fac25ab5"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 16,
      "deletions": 1
    },
    "files": [
      {
        "sha": "066a60b71b6aaab9de73134686d86f18f04f1732",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea31caf6b4c182c6f10f136548f84e603800511c/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea31caf6b4c182c6f10f136548f84e603800511c/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=ea31caf6b4c182c6f10f136548f84e603800511c",
        "patch": "@@ -1103,6 +1103,8 @@ static RPCHelpMan estimatesmartfee()\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n \n     CBlockPolicyEstimator& fee_estimator = EnsureAnyFeeEstimator(request.context);\n+    const NodeContext& node = EnsureAnyNodeContext(request.context);\n+    const CTxMemPool& mempool = EnsureMemPool(node);\n \n     unsigned int max_target = fee_estimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n     unsigned int conf_target = ParseConfirmTarget(request.params[0], max_target);\n@@ -1118,7 +1120,10 @@ static RPCHelpMan estimatesmartfee()\n     UniValue result(UniValue::VOBJ);\n     UniValue errors(UniValue::VARR);\n     FeeCalculation feeCalc;\n-    CFeeRate feeRate = fee_estimator.estimateSmartFee(conf_target, &feeCalc, conservative);\n+    CFeeRate feeRate{fee_estimator.estimateSmartFee(conf_target, &feeCalc, conservative)};\n+    CFeeRate min_mempool_feerate{mempool.GetMinFee(gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000)};\n+    CFeeRate min_relay_feerate{::minRelayTxFee};\n+    feeRate = std::max({feeRate, min_mempool_feerate, min_relay_feerate});\n     if (feeRate != CFeeRate(0)) {\n         result.pushKV(\"feerate\", ValueFromAmount(feeRate.GetFeePerK()));\n     } else {"
      },
      {
        "sha": "9c225dc6877c4f69378bc0c67b910f93baf95791",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea31caf6b4c182c6f10f136548f84e603800511c/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea31caf6b4c182c6f10f136548f84e603800511c/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=ea31caf6b4c182c6f10f136548f84e603800511c",
        "patch": "@@ -132,9 +132,13 @@ def check_smart_estimates(node, fees_seen):\n     delta = 1.0e-6  # account for rounding error\n     last_feerate = float(max(fees_seen))\n     all_smart_estimates = [node.estimatesmartfee(i) for i in range(1, 26)]\n+    mempoolMinFee = node.getmempoolinfo()['mempoolminfee']\n+    minRelaytxFee = node.getmempoolinfo()['minrelaytxfee']\n     for i, e in enumerate(all_smart_estimates):  # estimate is for i+1\n         feerate = float(e[\"feerate\"])\n         assert_greater_than(feerate, 0)\n+        assert_greater_than_or_equal(feerate, float(mempoolMinFee))\n+        assert_greater_than_or_equal(feerate, float(minRelaytxFee))\n \n         if feerate + delta < min(fees_seen) or feerate - delta > max(fees_seen):\n             raise AssertionError(f\"Estimated fee ({feerate}) out of range ({min(fees_seen)},{max(fees_seen)})\")\n@@ -275,6 +279,12 @@ def run_test(self):\n         self.log.info(\"Final estimates after emptying mempools\")\n         check_estimates(self.nodes[1], self.fees_per_kb)\n \n+        # check that the effective feerate is greater than or equal to the mempoolminfee even for high mempoolminfee\n+        self.log.info(\"Test fee rate estimation after restarting node with high MempoolMinFee\")\n+        high_val = 3*self.nodes[1].estimatesmartfee(1)['feerate']\n+        self.restart_node(1, extra_args=[f'-minrelaytxfee={high_val}'])\n+        check_estimates(self.nodes[1], self.fees_per_kb)\n+\n         self.log.info(\"Testing that fee estimation is disabled in blocksonly.\")\n         self.restart_node(0, [\"-blocksonly\"])\n         assert_raises_rpc_error(-32603, \"Fee estimation disabled\","
      }
    ]
  }
]