DrahtBot,2018-10-09T03:52:39Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14641](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14641.html) (RPC: Add min/max confirmation options to fu",https://github.com/bitcoin/bitcoin/pull/14437#issuecomment-428050798,428050798,
ryanofsky,2018-10-10T02:02:33Z,"Added 2 more small commits d0af21fab95ee453a1fee4242ceb89ca79d568eb -> a10e919db4c9f37f0bb60fd62a232abf8bd3dede ([pr/wchain.1](https://github.com/ryanofsky/bitcoin/commits/pr/wchain.1) -> [pr/wchain.2](https://github.com/ryanofsky/bitcoin/commits/pr/wchain.2), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wchain.1...pr/wchain.2)) from #10973 to fix the thread safety warnings (which are",https://github.com/bitcoin/bitcoin/pull/14437#issuecomment-428412523,428412523,
meshcollider,2018-10-12T14:29:03Z,Concept ACK :+1: ,https://github.com/bitcoin/bitcoin/pull/14437#issuecomment-429345250,429345250,
sipa,2018-10-12T19:39:31Z,"Is it intentional that the interfaces code uses a different coding style than the rest of the code?\n\nIf so, does this need documenting somewhere, and if not, can it be converted?",https://github.com/bitcoin/bitcoin/pull/14437#issuecomment-429439919,429439919,
practicalswift,2018-10-14T14:14:35Z,This PR does not seem to compile when rebased on `master` :-),https://github.com/bitcoin/bitcoin/pull/14437#issuecomment-429629886,429629886,
Sjors,2018-10-18T09:25:14Z,"Concept ACK. Thanks for splitting #10973 into more manageable sized PRs.\n\n* would be good to get @ken2812221's feedback on the `msvc-autogen.py` changes\n* I noticed d0af21fab95ee453a1fee4242ceb89ca79d568eb adds a bunch of methods to interfaces/chain.cpp. I assume those are moved from somewhere else, but I don't see their counterparts removed in this PR. Why is that?\n\nfc7442f compiles on ",https://github.com/bitcoin/bitcoin/pull/14437#issuecomment-430939356,430939356,
ryanofsky,2018-10-18T10:54:43Z,"> I noticed d0af21f adds a bunch of methods to interfaces/chain.cpp. I assume those are moved from somewhere else, but I don't see their counterparts removed in this PR. Why is that?\n\nThe new Chain d0af21fab95ee453a1fee4242ceb89ca79d568eb methods aren't moved from someplace else. They are fairly simple utility functions that wrap`CBlockIndex`/`chainActive` APIs so the wallet doesn't access cha",https://github.com/bitcoin/bitcoin/pull/14437#issuecomment-430964917,430964917,
ryanofsky,2018-10-18T11:06:57Z,"> would be good to get @ken2812221's feedback on the msvc-autogen.py changes\n\nken2812221 did previously review those changes: https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-418624533. They were in the first commit of the PR at that time: d487d953c9a10b11693ba8af62f5b54a77ec7686.\n\n\n",https://github.com/bitcoin/bitcoin/pull/14437#issuecomment-430967978,430967978,
ryanofsky,2018-11-01T21:16:05Z,"There were some comments in IRC that the PR description here might need to be improved. Would welcome any suggestions. #10973 has a more complete description of the direction this PR starts to go in.\n\nre: https://github.com/bitcoin/bitcoin/pull/14437#issuecomment-429439919\n> Is it intentional that the interfaces code uses a different coding style than the rest of the code?\n>\n> If so, doe",https://github.com/bitcoin/bitcoin/pull/14437#issuecomment-435190133,435190133,
MarcoFalke,2018-11-06T20:13:33Z,re-utACK 081accb875412f38718f2e40ed7bbdf15e6f4ef8 (Only change since previous utACK 0b2cf7c is rebase and adding the return in a void context),https://github.com/bitcoin/bitcoin/pull/14437#issuecomment-436392591,436392591,
ryanofsky,2018-11-07T15:54:59Z,"Thanks Marco, James, and Ken for the recent code reviews! James, I think I will steal your breakdown of commits and add it to the PR description.",https://github.com/bitcoin/bitcoin/pull/14437#issuecomment-436672386,436672386,
meshcollider,2018-11-11T11:04:17Z,"post-merge-utACK https://github.com/bitcoin/bitcoin/pull/14437/commits/ea961c3d7256c66146b4976ab1293db4a628c0de\n\nThis is looking good, thanks Russ! 🎉 ",https://github.com/bitcoin/bitcoin/pull/14437#issuecomment-437660651,437660651,
practicalswift,2018-10-11T20:25:27Z,"`chain` unused?\n\nEdit: Oh, used in a follow-up PR. Sorry!",https://github.com/bitcoin/bitcoin/pull/14437#discussion_r224592478,224592478,src/rpc/rawtransaction.cpp
practicalswift,2018-10-14T14:27:00Z,This triggers undefined behaviour if the optional `block_height` has not been initialised?,https://github.com/bitcoin/bitcoin/pull/14437#discussion_r224994715,224994715,src/wallet/wallet.cpp
practicalswift,2018-10-14T14:27:06Z,This triggers undefined behaviour if the optional `block_height` has not been initialised?,https://github.com/bitcoin/bitcoin/pull/14437#discussion_r224994718,224994718,src/wallet/wallet.cpp
practicalswift,2018-10-14T14:28:26Z,Collapse into `if` statement above?,https://github.com/bitcoin/bitcoin/pull/14437#discussion_r224994773,224994773,src/interfaces/chain.cpp
ryanofsky,2018-10-15T19:55:54Z,"> This triggers undefined behaviour if the optional block_height has not been initialised?\n\nYes, and previously it would segfault if pindex were null, but these things will not happen at the time this function is called. I think the code in this function is not beautiful and could be rewritten, but I'm trying here to change existing code as little as possible, so it is easier for reviewers to ",https://github.com/bitcoin/bitcoin/pull/14437#discussion_r225295837,225295837,src/wallet/wallet.cpp
ryanofsky,2018-10-15T19:56:14Z,See https://github.com/bitcoin/bitcoin/pull/14437#discussion_r225295837,https://github.com/bitcoin/bitcoin/pull/14437#discussion_r225295954,225295954,src/wallet/wallet.cpp
ken2812221,2018-10-18T09:39:21Z,I don't know why do you add `$(LIBBITCOIN_SERVER)` here. I can see one above.,https://github.com/bitcoin/bitcoin/pull/14437#discussion_r226237048,226237048,src/Makefile.am
ryanofsky,2018-10-18T17:26:00Z,"In commit ""Remove direct node->wallet calls in init.cpp"" (eb1709c1af21881283f3c3962ebabb5de9423a56)\n\n> I don't know why do you add $(LIBBITCOIN_SERVER) here. I can see one above.\n\nOur libraries are static and have circular dependencies, so for unix linkers which process libraries in command line order and only pull in subsets of object files needed to resolve previously unresolved symbols,",https://github.com/bitcoin/bitcoin/pull/14437#discussion_r226395545,226395545,src/Makefile.am
MarcoFalke,2018-11-02T17:30:37Z,"in commit e615ac5960\n\nnit: I'd prefer to use return even in the void context. It is more verbose but seems safer in context of future changes. (Feel free to ignore this style nit)",https://github.com/bitcoin/bitcoin/pull/14437#discussion_r230451182,230451182,src/interfaces/wallet.cpp
MarcoFalke,2018-11-02T19:16:34Z,just a comment in c4b750f510: These could segfault on a reorg,https://github.com/bitcoin/bitcoin/pull/14437#discussion_r230480869,230480869,src/interfaces/chain.cpp
MarcoFalke,2018-11-02T19:55:13Z,"in commit c4b750f510\n\nnit: Could state that `block->IsNull()` indicates a read-from-disk error.",https://github.com/bitcoin/bitcoin/pull/14437#discussion_r230490317,230490317,src/interfaces/chain.h
MarcoFalke,2018-11-02T20:02:56Z,"in commit c4b750f:\n\nWhy is this needed?",https://github.com/bitcoin/bitcoin/pull/14437#discussion_r230492241,230492241,src/wallet/rpcdump.cpp
MarcoFalke,2018-11-02T20:11:30Z,"in commit c4b750f:\n\nThe name of the argument is `block`, not `CBlock`? ",https://github.com/bitcoin/bitcoin/pull/14437#discussion_r230494455,230494455,src/wallet/rpcwallet.cpp
MarcoFalke,2018-11-02T20:16:15Z,"in commit c4b750f:\n\nIt is not immediately clear where this exceptions goes to. Crashes the node?\n\nI'd prefer if we sticked to jsonrpc exceptions in the rpc module, so that broken rpc code would not crash the node.",https://github.com/bitcoin/bitcoin/pull/14437#discussion_r230495711,230495711,src/wallet/rpcwallet.cpp
MarcoFalke,2018-11-02T20:39:40Z,"in commit 0b2cf7c3a8edd6feb4a8504675960c9cfcbc613c:\n\nCould add the runtime assert that the lock is taken?\n\n`AssertLockHeld`",https://github.com/bitcoin/bitcoin/pull/14437#discussion_r230501820,230501820,src/threadsafety.h
MarcoFalke,2018-11-05T20:31:08Z,"In commit c4b750f510d1913a6:\n\nThe named argument is `block`, not `CBlock`?",https://github.com/bitcoin/bitcoin/pull/14437#discussion_r230900731,230900731,src/wallet/wallet.cpp
ryanofsky,2018-11-05T22:51:36Z,"re: https://github.com/bitcoin/bitcoin/pull/14437#discussion_r230501820\n\nThat would make this depend on sync.h and require a bitcoin debug mutex instead of working with any mutex. It would also print a less useful file/line number than a standalone assert. Better imo to have separate locking primitives that each do one job well than to have a combined one that's worse at both jobs.\n",https://github.com/bitcoin/bitcoin/pull/14437#discussion_r230943966,230943966,src/threadsafety.h
promag,2018-11-07T10:58:38Z,This function doesn't read `-wallet`.,https://github.com/bitcoin/bitcoin/pull/14437#discussion_r231461962,231461962,src/wallet/wallet.h
promag,2018-11-07T11:03:07Z,"IMO this could have a better name, currently this chain client ""manages all wallets"".",https://github.com/bitcoin/bitcoin/pull/14437#discussion_r231463193,231463193,src/interfaces/wallet.cpp
practicalswift,2018-11-09T08:30:01Z,Could use `std::any_of`? :-),https://github.com/bitcoin/bitcoin/pull/14437#discussion_r232173026,232173026,src/init.cpp
meshcollider,2018-11-09T08:30:47Z,"@practicalswift just a meta-note, could you please put all your comments in one review rather than putting them all as separate comments?",https://github.com/bitcoin/bitcoin/pull/14437#discussion_r232173212,232173212,src/init.cpp
practicalswift,2018-11-09T08:54:15Z,@MeshCollider Sure! I'll do that going forward. Didn't think about the differences in workflow. Thanks for the suggestion!,https://github.com/bitcoin/bitcoin/pull/14437#discussion_r232178847,232178847,src/init.cpp
MarcoFalke,2018-11-09T15:04:13Z,"Also, I'd prefer if we didn't leave style feedback at all.\n\nOf course it could use std::any_of, or it could use a while loop, or do while loop, or... It is just a different color up to the author to choose and for everyone else to accept.",https://github.com/bitcoin/bitcoin/pull/14437#discussion_r232282815,232282815,src/init.cpp
practicalswift,2018-11-09T15:49:54Z,"@MarcoFalke I should have made clear that my comment was a ""nit"" :-)\n\nThe comparison you're making isn't fair: no one would suggest changing this to a `while` loop, but striving to use STL algorithms were possible is what the C++ Core Guidelines (with editors Bjarne Stroustrup and Herb Sutter) recommends:\n\n> ES.1: Prefer the standard library to other libraries and to “handcrafted code”\n>",https://github.com/bitcoin/bitcoin/pull/14437#discussion_r232299131,232299131,src/init.cpp
ryanofsky,2018-11-12T18:13:16Z,"> Could use std::any_of? :-)\n\nThis I think it would actually have to use std::all_of\n\n",https://github.com/bitcoin/bitcoin/pull/14437#discussion_r232761293,232761293,src/init.cpp
ryanofsky,2018-11-12T18:32:27Z,"re: https://github.com/bitcoin/bitcoin/pull/14437#discussion_r232173026\n\n> Could use std::any_of? :-)\n\nThis PR is already merged so I won't change this here. But it's an interesting suggestion. I might prefer `all_of` over `any_of` since the bool represents success, and success only happens if _all_ calls succeed.\n\nNote: one drawback to using any/all in a context like this is it makes ",https://github.com/bitcoin/bitcoin/pull/14437#discussion_r232767091,232767091,src/init.cpp
