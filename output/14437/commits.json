[
  {
    "sha": "7e2e62cf7c513bd7d8e784069c5534fda1c50c52",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZTJlNjJjZjdjNTEzYmQ3ZDhlNzg0MDY5YzU1MzRmZGExYzUwYzUy",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-05-30T19:55:17Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-11-06T15:44:40Z"
      },
      "message": "Add skeleton chain and client classes\n\nThis commit does not change behavior. It just adds new skeleton classes that\ndon't do anything and aren't instantiated yet.",
      "tree": {
        "sha": "7b2fe6a1f88af4c59e2e1bee7b2b6d4978b23594",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b2fe6a1f88af4c59e2e1bee7b2b6d4978b23594"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e2e62cf7c513bd7d8e784069c5534fda1c50c52",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e2e62cf7c513bd7d8e784069c5534fda1c50c52",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e2e62cf7c513bd7d8e784069c5534fda1c50c52",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e2e62cf7c513bd7d8e784069c5534fda1c50c52/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6af27b81572b7b8e08ebcfe7eb533f40c66be4af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6af27b81572b7b8e08ebcfe7eb533f40c66be4af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6af27b81572b7b8e08ebcfe7eb533f40c66be4af"
      }
    ],
    "stats": {
      "total": 106,
      "additions": 98,
      "deletions": 8
    },
    "files": [
      {
        "sha": "f351532f9d40ff10c7692b3090fae58f459295c9",
        "filename": "build_msvc/msvc-autogen.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e2e62cf7c513bd7d8e784069c5534fda1c50c52/build_msvc/msvc-autogen.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e2e62cf7c513bd7d8e784069c5534fda1c50c52/build_msvc/msvc-autogen.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/msvc-autogen.py?ref=7e2e62cf7c513bd7d8e784069c5534fda1c50c52",
        "patch": "@@ -16,10 +16,6 @@\n ]\n \n ignore_list = [\n-    'rpc/net.cpp',\n-    'interfaces/handler.cpp',\n-    'interfaces/node.cpp',\n-    'interfaces/wallet.cpp',\n ]\n \n lib_sources = {}\n@@ -32,7 +28,9 @@ def parse_makefile(makefile):\n             if current_lib:\n                 source = line.split()[0]\n                 if source.endswith('.cpp') and not source.startswith('$') and source not in ignore_list:\n-                    lib_sources[current_lib].append(source.replace('/', '\\\\'))\n+                    source_filename = source.replace('/', '\\\\')\n+                    object_filename = source.replace('/', '_')[:-4] + \".obj\"\n+                    lib_sources[current_lib].append((source_filename, object_filename))\n                 if not line.endswith('\\\\'):\n                     current_lib = ''\n                 continue\n@@ -51,8 +49,10 @@ def main():\n     for key, value in lib_sources.items():\n         vcxproj_filename = os.path.abspath(os.path.join(os.path.dirname(__file__), key, key + '.vcxproj'))\n         content = ''\n-        for source_filename in value:\n-            content += '    <ClCompile Include=\"..\\\\..\\\\src\\\\' + source_filename + '\" />\\n'\n+        for source_filename, object_filename in value:\n+            content += '    <ClCompile Include=\"..\\\\..\\\\src\\\\' + source_filename + '\">\\n'\n+            content += '      <ObjectFileName>$(IntDir)' + object_filename + '</ObjectFileName>\\n'\n+            content += '    </ClCompile>\\n'\n         with open(vcxproj_filename + '.in', 'r', encoding='utf-8') as vcxproj_in_file:\n             with open(vcxproj_filename, 'w', encoding='utf-8') as vcxproj_file:\n                 vcxproj_file.write(vcxproj_in_file.read().replace("
      },
      {
        "sha": "e2727ac5225b314dc5624fcaf25af40d610acd56",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e2e62cf7c513bd7d8e784069c5534fda1c50c52/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e2e62cf7c513bd7d8e784069c5534fda1c50c52/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=7e2e62cf7c513bd7d8e784069c5534fda1c50c52",
        "patch": "@@ -125,6 +125,7 @@ BITCOIN_CORE_H = \\\n   index/txindex.h \\\n   indirectmap.h \\\n   init.h \\\n+  interfaces/chain.h \\\n   interfaces/handler.h \\\n   interfaces/node.h \\\n   interfaces/wallet.h \\\n@@ -233,6 +234,7 @@ libbitcoin_server_a_SOURCES = \\\n   httpserver.cpp \\\n   index/base.cpp \\\n   index/txindex.cpp \\\n+  interfaces/chain.cpp \\\n   interfaces/handler.cpp \\\n   interfaces/node.cpp \\\n   init.cpp \\"
      },
      {
        "sha": "57d41df746b1d786708c6b107b487e687e33cd92",
        "filename": "src/interfaces/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e2e62cf7c513bd7d8e784069c5534fda1c50c52/src/interfaces/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e2e62cf7c513bd7d8e784069c5534fda1c50c52/src/interfaces/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/README.md?ref=7e2e62cf7c513bd7d8e784069c5534fda1c50c52",
        "patch": "@@ -4,7 +4,7 @@ The following interfaces are defined here:\n \n * [`Chain`](chain.h) \u2014 used by wallet to access blockchain and mempool state. Added in [#10973](https://github.com/bitcoin/bitcoin/pull/10973).\n \n-* [`Chain::Client`](chain.h) \u2014 used by node to start & stop `Chain` clients. Added in [#10973](https://github.com/bitcoin/bitcoin/pull/10973).\n+* [`ChainClient`](chain.h) \u2014 used by node to start & stop `Chain` clients. Added in [#10973](https://github.com/bitcoin/bitcoin/pull/10973).\n \n * [`Node`](node.h) \u2014 used by GUI to start & stop bitcoin node. Added in [#10244](https://github.com/bitcoin/bitcoin/pull/10244).\n "
      },
      {
        "sha": "28b36717d5d54f412f8ef085f5146bb6d5900be7",
        "filename": "src/interfaces/chain.cpp",
        "status": "added",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e2e62cf7c513bd7d8e784069c5534fda1c50c52/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e2e62cf7c513bd7d8e784069c5534fda1c50c52/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=7e2e62cf7c513bd7d8e784069c5534fda1c50c52",
        "patch": "@@ -0,0 +1,20 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <interfaces/chain.h>\n+\n+#include <util/system.h>\n+\n+namespace interfaces {\n+namespace {\n+\n+class ChainImpl : public Chain\n+{\n+};\n+\n+} // namespace\n+\n+std::unique_ptr<Chain> MakeChain() { return MakeUnique<ChainImpl>(); }\n+\n+} // namespace interfaces"
      },
      {
        "sha": "8a40cb4cda29a620a162c946d0fd181937a66f44",
        "filename": "src/interfaces/chain.h",
        "status": "added",
        "additions": 44,
        "deletions": 0,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e2e62cf7c513bd7d8e784069c5534fda1c50c52/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e2e62cf7c513bd7d8e784069c5534fda1c50c52/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=7e2e62cf7c513bd7d8e784069c5534fda1c50c52",
        "patch": "@@ -0,0 +1,44 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INTERFACES_CHAIN_H\n+#define BITCOIN_INTERFACES_CHAIN_H\n+\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+namespace interfaces {\n+\n+//! Interface for giving wallet processes access to blockchain state.\n+class Chain\n+{\n+public:\n+    virtual ~Chain() {}\n+};\n+\n+//! Interface to let node manage chain clients (wallets, or maybe tools for\n+//! monitoring and analysis in the future).\n+class ChainClient\n+{\n+public:\n+    virtual ~ChainClient() {}\n+};\n+\n+//! Return implementation of Chain interface.\n+std::unique_ptr<Chain> MakeChain();\n+\n+//! Return implementation of ChainClient interface for a wallet client. This\n+//! function will be undefined in builds where ENABLE_WALLET is false.\n+//!\n+//! Currently, wallets are the only chain clients. But in the future, other\n+//! types of chain clients could be added, such as tools for monitoring,\n+//! analysis, or fee estimation. These clients need to expose their own\n+//! MakeXXXClient functions returning their implementations of the ChainClient\n+//! interface.\n+std::unique_ptr<ChainClient> MakeWalletClient(Chain& chain, std::vector<std::string> wallet_filenames);\n+\n+} // namespace interfaces\n+\n+#endif // BITCOIN_INTERFACES_CHAIN_H"
      },
      {
        "sha": "e9f4669f4d9eaa2c34389500efb2c7a67e5445f9",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e2e62cf7c513bd7d8e784069c5534fda1c50c52/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e2e62cf7c513bd7d8e784069c5534fda1c50c52/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=7e2e62cf7c513bd7d8e784069c5534fda1c50c52",
        "patch": "@@ -7,6 +7,7 @@\n #include <amount.h>\n #include <chain.h>\n #include <consensus/validation.h>\n+#include <interfaces/chain.h>\n #include <interfaces/handler.h>\n #include <net.h>\n #include <policy/feerate.h>\n@@ -20,11 +21,17 @@\n #include <timedata.h>\n #include <ui_interface.h>\n #include <uint256.h>\n+#include <util/system.h>\n #include <validation.h>\n #include <wallet/feebumper.h>\n #include <wallet/fees.h>\n #include <wallet/wallet.h>\n \n+#include <memory>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n namespace interfaces {\n namespace {\n \n@@ -456,8 +463,25 @@ class WalletImpl : public Wallet\n     CWallet& m_wallet;\n };\n \n+class WalletClientImpl : public ChainClient\n+{\n+public:\n+    WalletClientImpl(Chain& chain, std::vector<std::string> wallet_filenames)\n+        : m_chain(chain), m_wallet_filenames(std::move(wallet_filenames))\n+    {\n+    }\n+\n+    Chain& m_chain;\n+    std::vector<std::string> m_wallet_filenames;\n+};\n+\n } // namespace\n \n std::unique_ptr<Wallet> MakeWallet(const std::shared_ptr<CWallet>& wallet) { return MakeUnique<WalletImpl>(wallet); }\n \n+std::unique_ptr<ChainClient> MakeWalletClient(Chain& chain, std::vector<std::string> wallet_filenames)\n+{\n+    return MakeUnique<WalletClientImpl>(chain, std::move(wallet_filenames));\n+}\n+\n } // namespace interfaces"
      }
    ]
  },
  {
    "sha": "8db11dd0b182a93042899651545cc21b34bf0742",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZGIxMWRkMGIxODJhOTMwNDI4OTk2NTE1NDVjYzIxYjM0YmYwNzQy",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-05-30T19:55:17Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-11-06T15:44:40Z"
      },
      "message": "Pass chain and client variables where needed\n\nThis commit does not change behavior. All it does is pass new function\nparameters.\n\nIt is easiest to review this change with:\n\n    git log -p -n1 -U0 --word-diff-regex=.",
      "tree": {
        "sha": "8165f7a88f2f56cca4d152c5e4fc0d2e5743bc54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8165f7a88f2f56cca4d152c5e4fc0d2e5743bc54"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8db11dd0b182a93042899651545cc21b34bf0742",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8db11dd0b182a93042899651545cc21b34bf0742",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8db11dd0b182a93042899651545cc21b34bf0742",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8db11dd0b182a93042899651545cc21b34bf0742/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e2e62cf7c513bd7d8e784069c5534fda1c50c52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e2e62cf7c513bd7d8e784069c5534fda1c50c52",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e2e62cf7c513bd7d8e784069c5534fda1c50c52"
      }
    ],
    "stats": {
      "total": 201,
      "additions": 138,
      "deletions": 63
    },
    "files": [
      {
        "sha": "8552ed34fd83d20cd436c859f3c78c5e61996f7b",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8db11dd0b182a93042899651545cc21b34bf0742/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8db11dd0b182a93042899651545cc21b34bf0742/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=8db11dd0b182a93042899651545cc21b34bf0742",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <bench/bench.h>\n+#include <interfaces/chain.h>\n #include <wallet/wallet.h>\n #include <wallet/coinselection.h>\n \n@@ -33,7 +34,8 @@ static void addCoin(const CAmount& nValue, const CWallet& wallet, std::vector<Ou\n // (https://github.com/bitcoin/bitcoin/issues/7883#issuecomment-224807484)\n static void CoinSelection(benchmark::State& state)\n {\n-    const CWallet wallet(WalletLocation(), WalletDatabase::CreateDummy());\n+    auto chain = interfaces::MakeChain();\n+    const CWallet wallet(*chain, WalletLocation(), WalletDatabase::CreateDummy());\n     LOCK(wallet.cs_wallet);\n \n     // Add coins.\n@@ -57,7 +59,8 @@ static void CoinSelection(benchmark::State& state)\n }\n \n typedef std::set<CInputCoin> CoinSet;\n-static const CWallet testWallet(WalletLocation(), WalletDatabase::CreateDummy());\n+static auto testChain = interfaces::MakeChain();\n+static const CWallet testWallet(*testChain, WalletLocation(), WalletDatabase::CreateDummy());\n std::vector<std::unique_ptr<CWalletTx>> wtxn;\n \n // Copied from src/wallet/test/coinselector_tests.cpp"
      },
      {
        "sha": "1306ba3821fde8bd80c1e6974544bd1e163a1b0d",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8db11dd0b182a93042899651545cc21b34bf0742/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8db11dd0b182a93042899651545cc21b34bf0742/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=8db11dd0b182a93042899651545cc21b34bf0742",
        "patch": "@@ -11,6 +11,7 @@\n #include <clientversion.h>\n #include <compat.h>\n #include <fs.h>\n+#include <interfaces/chain.h>\n #include <rpc/server.h>\n #include <init.h>\n #include <noui.h>\n@@ -58,6 +59,9 @@ static void WaitForShutdown()\n //\n static bool AppInit(int argc, char* argv[])\n {\n+    InitInterfaces interfaces;\n+    interfaces.chain = interfaces::MakeChain();\n+\n     bool fRet = false;\n \n     //\n@@ -164,7 +168,7 @@ static bool AppInit(int argc, char* argv[])\n             // If locking the data directory failed, exit immediately\n             return false;\n         }\n-        fRet = AppInitMain();\n+        fRet = AppInitMain(interfaces);\n     }\n     catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"AppInit()\");\n@@ -178,7 +182,7 @@ static bool AppInit(int argc, char* argv[])\n     } else {\n         WaitForShutdown();\n     }\n-    Shutdown();\n+    Shutdown(interfaces);\n \n     return fRet;\n }"
      },
      {
        "sha": "fa232d2dd085c4d90371bc1c55307a801a29ace4",
        "filename": "src/dummywallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8db11dd0b182a93042899651545cc21b34bf0742/src/dummywallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8db11dd0b182a93042899651545cc21b34bf0742/src/dummywallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dummywallet.cpp?ref=8db11dd0b182a93042899651545cc21b34bf0742",
        "patch": "@@ -15,8 +15,8 @@ class DummyWalletInit : public WalletInitInterface {\n     void AddWalletOptions() const override;\n     bool ParameterInteraction() const override {return true;}\n     void RegisterRPC(CRPCTable &) const override {}\n-    bool Verify() const override {return true;}\n-    bool Open() const override {LogPrintf(\"No wallet support compiled in!\\n\"); return true;}\n+    bool Verify(interfaces::Chain& chain) const override {return true;}\n+    bool Open(interfaces::Chain& chain) const override {LogPrintf(\"No wallet support compiled in!\\n\"); return true;}\n     void Start(CScheduler& scheduler) const override {}\n     void Flush() const override {}\n     void Stop() const override {}"
      },
      {
        "sha": "88d4d059f99277a8476498030259e86a9608de4c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8db11dd0b182a93042899651545cc21b34bf0742/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8db11dd0b182a93042899651545cc21b34bf0742/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8db11dd0b182a93042899651545cc21b34bf0742",
        "patch": "@@ -32,6 +32,7 @@\n #include <rpc/server.h>\n #include <rpc/register.h>\n #include <rpc/blockchain.h>\n+#include <rpc/util.h>\n #include <script/standard.h>\n #include <script/sigcache.h>\n #include <scheduler.h>\n@@ -157,7 +158,7 @@ void Interrupt()\n     }\n }\n \n-void Shutdown()\n+void Shutdown(InitInterfaces& interfaces)\n {\n     LogPrintf(\"%s: In progress...\\n\", __func__);\n     static CCriticalSection cs_Shutdown;\n@@ -1158,7 +1159,7 @@ bool AppInitLockDataDirectory()\n     return true;\n }\n \n-bool AppInitMain()\n+bool AppInitMain(InitInterfaces& interfaces)\n {\n     const CChainParams& chainparams = Params();\n     // ********************************************************* Step 4a: application initialization\n@@ -1226,6 +1227,7 @@ bool AppInitMain()\n      */\n     RegisterAllCoreRPCCommands(tableRPC);\n     g_wallet_init_interface.RegisterRPC(tableRPC);\n+    g_rpc_interfaces = &interfaces;\n #if ENABLE_ZMQ\n     RegisterZMQRPCCommands(tableRPC);\n #endif\n@@ -1243,7 +1245,7 @@ bool AppInitMain()\n     }\n \n     // ********************************************************* Step 5: verify wallet database integrity\n-    if (!g_wallet_init_interface.Verify()) return false;\n+    if (!g_wallet_init_interface.Verify(*interfaces.chain)) return false;\n \n     // ********************************************************* Step 6: network initialization\n     // Note that we absolutely cannot open any actual connections\n@@ -1562,7 +1564,7 @@ bool AppInitMain()\n     }\n \n     // ********************************************************* Step 9: load wallet\n-    if (!g_wallet_init_interface.Open()) return false;\n+    if (!g_wallet_init_interface.Open(*interfaces.chain)) return false;\n \n     // ********************************************************* Step 10: data directory maintenance\n "
      },
      {
        "sha": "1c59ca069edf2d706bc5c1bd5a36380e42bc1784",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 13,
        "deletions": 4,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8db11dd0b182a93042899651545cc21b34bf0742/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8db11dd0b182a93042899651545cc21b34bf0742/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=8db11dd0b182a93042899651545cc21b34bf0742",
        "patch": "@@ -10,8 +10,17 @@\n #include <string>\n #include <util/system.h>\n \n-class CScheduler;\n-class CWallet;\n+namespace interfaces {\n+class Chain;\n+class ChainClient;\n+} // namespace interfaces\n+\n+//! Pointers to interfaces used during init and destroyed on shutdown.\n+struct InitInterfaces\n+{\n+    std::unique_ptr<interfaces::Chain> chain;\n+    std::vector<std::unique_ptr<interfaces::ChainClient>> chain_clients;\n+};\n \n namespace boost\n {\n@@ -20,7 +29,7 @@ class thread_group;\n \n /** Interrupt threads */\n void Interrupt();\n-void Shutdown();\n+void Shutdown(InitInterfaces& interfaces);\n //!Initialize the logging infrastructure\n void InitLogging();\n //!Parameter interaction: change current parameters depending on various rules\n@@ -54,7 +63,7 @@ bool AppInitLockDataDirectory();\n  * @note This should only be done after daemonization. Call Shutdown() if this function fails.\n  * @pre Parameters should be parsed and config file should be read, AppInitLockDataDirectory should have been called.\n  */\n-bool AppInitMain();\n+bool AppInitMain(InitInterfaces& interfaces);\n \n /**\n  * Setup the arguments for gArgs"
      },
      {
        "sha": "1919e16a66761539a39f74627b91646e9f57d47b",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8db11dd0b182a93042899651545cc21b34bf0742/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8db11dd0b182a93042899651545cc21b34bf0742/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=8db11dd0b182a93042899651545cc21b34bf0742",
        "patch": "@@ -9,6 +9,7 @@\n #include <chain.h>\n #include <chainparams.h>\n #include <init.h>\n+#include <interfaces/chain.h>\n #include <interfaces/handler.h>\n #include <interfaces/wallet.h>\n #include <net.h>\n@@ -50,6 +51,8 @@ namespace {\n \n class NodeImpl : public Node\n {\n+public:\n+    NodeImpl() { m_interfaces.chain = MakeChain(); }\n     bool parseParameters(int argc, const char* const argv[], std::string& error) override\n     {\n         return gArgs.ParseParameters(argc, argv, error);\n@@ -68,11 +71,11 @@ class NodeImpl : public Node\n         return AppInitBasicSetup() && AppInitParameterInteraction() && AppInitSanityChecks() &&\n                AppInitLockDataDirectory();\n     }\n-    bool appInitMain() override { return AppInitMain(); }\n+    bool appInitMain() override { return AppInitMain(m_interfaces); }\n     void appShutdown() override\n     {\n         Interrupt();\n-        Shutdown();\n+        Shutdown(m_interfaces);\n     }\n     void startShutdown() override { StartShutdown(); }\n     bool shutdownRequested() override { return ShutdownRequested(); }\n@@ -291,6 +294,7 @@ class NodeImpl : public Node\n                     GuessVerificationProgress(Params().TxData(), block));\n             }));\n     }\n+    InitInterfaces m_interfaces;\n };\n \n } // namespace"
      },
      {
        "sha": "3e414df1f0acfac3add1a8ec6e1d089bbed0c12c",
        "filename": "src/qt/test/addressbooktests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8db11dd0b182a93042899651545cc21b34bf0742/src/qt/test/addressbooktests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8db11dd0b182a93042899651545cc21b34bf0742/src/qt/test/addressbooktests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.cpp?ref=8db11dd0b182a93042899651545cc21b34bf0742",
        "patch": "@@ -2,6 +2,7 @@\n #include <qt/test/util.h>\n #include <test/test_bitcoin.h>\n \n+#include <interfaces/chain.h>\n #include <interfaces/node.h>\n #include <qt/addressbookpage.h>\n #include <qt/addresstablemodel.h>\n@@ -56,7 +57,8 @@ void EditAddressAndSubmit(\n void TestAddAddressesToSendBook()\n {\n     TestChain100Setup test;\n-    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(WalletLocation(), WalletDatabase::CreateMock());\n+    auto chain = interfaces::MakeChain();\n+    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(*chain, WalletLocation(), WalletDatabase::CreateMock());\n     bool firstRun;\n     wallet->LoadWallet(firstRun);\n "
      },
      {
        "sha": "57ae2150c84c07977c6173eca2d9f924e3aa838c",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8db11dd0b182a93042899651545cc21b34bf0742/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8db11dd0b182a93042899651545cc21b34bf0742/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=8db11dd0b182a93042899651545cc21b34bf0742",
        "patch": "@@ -1,6 +1,7 @@\n #include <qt/test/wallettests.h>\n #include <qt/test/util.h>\n \n+#include <interfaces/chain.h>\n #include <interfaces/node.h>\n #include <base58.h>\n #include <qt/bitcoinamountfield.h>\n@@ -132,7 +133,8 @@ void TestGUI()\n     for (int i = 0; i < 5; ++i) {\n         test.CreateAndProcessBlock({}, GetScriptForRawPubKey(test.coinbaseKey.GetPubKey()));\n     }\n-    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(WalletLocation(), WalletDatabase::CreateMock());\n+    auto chain = interfaces::MakeChain();\n+    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(*chain, WalletLocation(), WalletDatabase::CreateMock());\n     bool firstRun;\n     wallet->LoadWallet(firstRun);\n     {"
      },
      {
        "sha": "fa886f657013cda3dd51ec2854a26e35c02d5197",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8db11dd0b182a93042899651545cc21b34bf0742/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8db11dd0b182a93042899651545cc21b34bf0742/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=8db11dd0b182a93042899651545cc21b34bf0742",
        "patch": "@@ -9,6 +9,7 @@\n #include <consensus/validation.h>\n #include <core_io.h>\n #include <index/txindex.h>\n+#include <init.h>\n #include <keystore.h>\n #include <validation.h>\n #include <validationinterface.h>\n@@ -20,6 +21,7 @@\n #include <primitives/transaction.h>\n #include <rpc/rawtransaction.h>\n #include <rpc/server.h>\n+#include <rpc/util.h>\n #include <script/script.h>\n #include <script/script_error.h>\n #include <script/sign.h>\n@@ -754,7 +756,7 @@ static UniValue combinerawtransaction(const JSONRPCRequest& request)\n     return EncodeHexTx(mergedTx);\n }\n \n-UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival, CBasicKeyStore *keystore, bool is_temp_keystore, const UniValue& hashType)\n+UniValue SignTransaction(interfaces::Chain& chain, CMutableTransaction& mtx, const UniValue& prevTxsUnival, CBasicKeyStore *keystore, bool is_temp_keystore, const UniValue& hashType)\n {\n     // Fetch previous transactions (inputs):\n     CCoinsView viewDummy;\n@@ -969,7 +971,7 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n         keystore.AddKey(key);\n     }\n \n-    return SignTransaction(mtx, request.params[2], &keystore, true, request.params[3]);\n+    return SignTransaction(*g_rpc_interfaces->chain, mtx, request.params[2], &keystore, true, request.params[3]);\n }\n \n UniValue signrawtransaction(const JSONRPCRequest& request)"
      },
      {
        "sha": "52d701d1c38839403228e511c3f67fc2ff0fc5b0",
        "filename": "src/rpc/rawtransaction.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8db11dd0b182a93042899651545cc21b34bf0742/src/rpc/rawtransaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8db11dd0b182a93042899651545cc21b34bf0742/src/rpc/rawtransaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.h?ref=8db11dd0b182a93042899651545cc21b34bf0742",
        "patch": "@@ -9,8 +9,12 @@ class CBasicKeyStore;\n struct CMutableTransaction;\n class UniValue;\n \n+namespace interfaces {\n+class Chain;\n+} // namespace interfaces\n+\n /** Sign a transaction with the given keystore and previous transactions */\n-UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxs, CBasicKeyStore *keystore, bool tempKeystore, const UniValue& hashType);\n+UniValue SignTransaction(interfaces::Chain& chain, CMutableTransaction& mtx, const UniValue& prevTxs, CBasicKeyStore *keystore, bool tempKeystore, const UniValue& hashType);\n \n /** Create a transaction from univalue parameters */\n CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniValue& outputs_in, const UniValue& locktime, const UniValue& rbf);"
      },
      {
        "sha": "ef2d14b90e9df910f08fb89edc6a6ee74c9df1ac",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8db11dd0b182a93042899651545cc21b34bf0742/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8db11dd0b182a93042899651545cc21b34bf0742/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=8db11dd0b182a93042899651545cc21b34bf0742",
        "patch": "@@ -9,6 +9,8 @@\n #include <tinyformat.h>\n #include <util/strencodings.h>\n \n+InitInterfaces* g_rpc_interfaces = nullptr;\n+\n // Converts a hex string to a public key if possible\n CPubKey HexToPubKey(const std::string& hex_in)\n {"
      },
      {
        "sha": "e21b5ba22afd806a6f0a5d657da6e5e3e5ee0bbb",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8db11dd0b182a93042899651545cc21b34bf0742/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8db11dd0b182a93042899651545cc21b34bf0742/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=8db11dd0b182a93042899651545cc21b34bf0742",
        "patch": "@@ -17,6 +17,12 @@\n class CKeyStore;\n class CPubKey;\n class CScript;\n+struct InitInterfaces;\n+\n+//! Pointers to interfaces that need to be accessible from RPC methods. Due to\n+//! limitations of the RPC framework, there's currently no direct way to pass in\n+//! state to RPC method implementations.\n+extern InitInterfaces* g_rpc_interfaces;\n \n CPubKey HexToPubKey(const std::string& hex_in);\n CPubKey AddrToPubKey(CKeyStore* const keystore, const std::string& addr_in);"
      },
      {
        "sha": "121b72a5f7fe9572fb0ad34ba31d53baea5b3996",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8db11dd0b182a93042899651545cc21b34bf0742/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8db11dd0b182a93042899651545cc21b34bf0742/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=8db11dd0b182a93042899651545cc21b34bf0742",
        "patch": "@@ -4,8 +4,11 @@\n \n #include <rpc/server.h>\n #include <rpc/client.h>\n+#include <rpc/util.h>\n \n #include <core_io.h>\n+#include <init.h>\n+#include <interfaces/chain.h>\n #include <key_io.h>\n #include <netbase.h>\n \n@@ -112,10 +115,14 @@ BOOST_AUTO_TEST_CASE(rpc_rawsign)\n     std::string notsigned = r.get_str();\n     std::string privkey1 = \"\\\"KzsXybp9jX64P5ekX1KUxRQ79Jht9uzW7LorgwE65i5rWACL6LQe\\\"\";\n     std::string privkey2 = \"\\\"Kyhdf5LuKTRx4ge69ybABsiUAWjVRK4XGxAKk2FQLp2HjGMy87Z4\\\"\";\n+    InitInterfaces interfaces;\n+    interfaces.chain = interfaces::MakeChain();\n+    g_rpc_interfaces = &interfaces;\n     r = CallRPC(std::string(\"signrawtransactionwithkey \")+notsigned+\" [] \"+prevout);\n     BOOST_CHECK(find_value(r.get_obj(), \"complete\").get_bool() == false);\n     r = CallRPC(std::string(\"signrawtransactionwithkey \")+notsigned+\" [\"+privkey1+\",\"+privkey2+\"] \"+prevout);\n     BOOST_CHECK(find_value(r.get_obj(), \"complete\").get_bool() == true);\n+    g_rpc_interfaces = nullptr;\n }\n \n BOOST_AUTO_TEST_CASE(rpc_createraw_op_return)"
      },
      {
        "sha": "5ae930490499faab7d2d1a9cab9d855b8e33e75c",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8db11dd0b182a93042899651545cc21b34bf0742/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8db11dd0b182a93042899651545cc21b34bf0742/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=8db11dd0b182a93042899651545cc21b34bf0742",
        "patch": "@@ -34,10 +34,10 @@ class WalletInit : public WalletInitInterface {\n     //! Responsible for reading and validating the -wallet arguments and verifying the wallet database.\n     //  This function will perform salvage on the wallet if requested, as long as only one wallet is\n     //  being loaded (WalletParameterInteraction forbids -salvagewallet, -zapwallettxes or -upgradewallet with multiwallet).\n-    bool Verify() const override;\n+    bool Verify(interfaces::Chain& chain) const override;\n \n     //! Load wallet databases.\n-    bool Open() const override;\n+    bool Open(interfaces::Chain& chain) const override;\n \n     //! Complete startup of wallets.\n     void Start(CScheduler& scheduler) const override;\n@@ -174,7 +174,7 @@ void WalletInit::RegisterRPC(CRPCTable &t) const\n     RegisterWalletRPCCommands(t);\n }\n \n-bool WalletInit::Verify() const\n+bool WalletInit::Verify(interfaces::Chain& chain) const\n {\n     if (gArgs.GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET)) {\n         return true;\n@@ -219,7 +219,7 @@ bool WalletInit::Verify() const\n \n         std::string error_string;\n         std::string warning_string;\n-        bool verify_success = CWallet::Verify(location, salvage_wallet, error_string, warning_string);\n+        bool verify_success = CWallet::Verify(chain, location, salvage_wallet, error_string, warning_string);\n         if (!error_string.empty()) InitError(error_string);\n         if (!warning_string.empty()) InitWarning(warning_string);\n         if (!verify_success) return false;\n@@ -228,15 +228,15 @@ bool WalletInit::Verify() const\n     return true;\n }\n \n-bool WalletInit::Open() const\n+bool WalletInit::Open(interfaces::Chain& chain) const\n {\n     if (gArgs.GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET)) {\n         LogPrintf(\"Wallet disabled!\\n\");\n         return true;\n     }\n \n     for (const std::string& walletFile : gArgs.GetArgs(\"-wallet\")) {\n-        std::shared_ptr<CWallet> pwallet = CWallet::CreateWalletFromFile(WalletLocation(walletFile));\n+        std::shared_ptr<CWallet> pwallet = CWallet::CreateWalletFromFile(chain, WalletLocation(walletFile));\n         if (!pwallet) {\n             return false;\n         }"
      },
      {
        "sha": "b8e874fec6b2c18e56844084a6252674e287adb6",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8db11dd0b182a93042899651545cc21b34bf0742/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8db11dd0b182a93042899651545cc21b34bf0742/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=8db11dd0b182a93042899651545cc21b34bf0742",
        "patch": "@@ -8,6 +8,7 @@\n #include <consensus/validation.h>\n #include <core_io.h>\n #include <httpserver.h>\n+#include <init.h>\n #include <validation.h>\n #include <key_io.h>\n #include <net.h>\n@@ -89,7 +90,7 @@ void EnsureWalletIsUnlocked(CWallet * const pwallet)\n     }\n }\n \n-static void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static void WalletTxToJSON(interfaces::Chain& chain, const CWalletTx& wtx, UniValue& entry) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     int confirms = wtx.GetDepthInMainChain();\n     entry.pushKV(\"confirmations\", confirms);\n@@ -1279,7 +1280,7 @@ static void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, int n\n             entry.pushKV(\"vout\", s.vout);\n             entry.pushKV(\"fee\", ValueFromAmount(-nFee));\n             if (fLong)\n-                WalletTxToJSON(wtx, entry);\n+                WalletTxToJSON(pwallet->chain(), wtx, entry);\n             entry.pushKV(\"abandoned\", wtx.isAbandoned());\n             ret.push_back(entry);\n         }\n@@ -1318,7 +1319,7 @@ static void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, int n\n             }\n             entry.pushKV(\"vout\", r.vout);\n             if (fLong)\n-                WalletTxToJSON(wtx, entry);\n+                WalletTxToJSON(pwallet->chain(), wtx, entry);\n             ret.push_back(entry);\n         }\n     }\n@@ -1665,7 +1666,7 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n     if (wtx.IsFromMe(filter))\n         entry.pushKV(\"fee\", ValueFromAmount(nFee));\n \n-    WalletTxToJSON(wtx, entry);\n+    WalletTxToJSON(pwallet->chain(), wtx, entry);\n \n     UniValue details(UniValue::VARR);\n     ListTransactions(pwallet, wtx, 0, false, details, filter);\n@@ -2420,11 +2421,11 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n     }\n \n     std::string warning;\n-    if (!CWallet::Verify(location, false, error, warning)) {\n+    if (!CWallet::Verify(*g_rpc_interfaces->chain, location, false, error, warning)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet file verification failed: \" + error);\n     }\n \n-    std::shared_ptr<CWallet> const wallet = CWallet::CreateWalletFromFile(location);\n+    std::shared_ptr<CWallet> const wallet = CWallet::CreateWalletFromFile(*g_rpc_interfaces->chain, location);\n     if (!wallet) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet loading failed.\");\n     }\n@@ -2472,11 +2473,11 @@ static UniValue createwallet(const JSONRPCRequest& request)\n     }\n \n     // Wallet::Verify will check if we're trying to create a wallet with a duplication name.\n-    if (!CWallet::Verify(location, false, error, warning)) {\n+    if (!CWallet::Verify(*g_rpc_interfaces->chain, location, false, error, warning)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet file verification failed: \" + error);\n     }\n \n-    std::shared_ptr<CWallet> const wallet = CWallet::CreateWalletFromFile(location, (disable_privatekeys ? (uint64_t)WALLET_FLAG_DISABLE_PRIVATE_KEYS : 0));\n+    std::shared_ptr<CWallet> const wallet = CWallet::CreateWalletFromFile(*g_rpc_interfaces->chain, location, (disable_privatekeys ? (uint64_t)WALLET_FLAG_DISABLE_PRIVATE_KEYS : 0));\n     if (!wallet) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet creation failed.\");\n     }\n@@ -3021,7 +3022,7 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n     LOCK2(cs_main, pwallet->cs_wallet);\n     EnsureWalletIsUnlocked(pwallet);\n \n-    return SignTransaction(mtx, request.params[1], pwallet, false, request.params[2]);\n+    return SignTransaction(pwallet->chain(), mtx, request.params[1], pwallet, false, request.params[2]);\n }\n \n static UniValue bumpfee(const JSONRPCRequest& request)"
      },
      {
        "sha": "5c65acf6019e5066227070c2303ab752a6a09aef",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8db11dd0b182a93042899651545cc21b34bf0742/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8db11dd0b182a93042899651545cc21b34bf0742/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=8db11dd0b182a93042899651545cc21b34bf0742",
        "patch": "@@ -28,7 +28,8 @@ std::vector<std::unique_ptr<CWalletTx>> wtxn;\n typedef std::set<CInputCoin> CoinSet;\n \n static std::vector<COutput> vCoins;\n-static CWallet testWallet(WalletLocation(), WalletDatabase::CreateDummy());\n+static auto testChain = interfaces::MakeChain();\n+static CWallet testWallet(*testChain, WalletLocation(), WalletDatabase::CreateDummy());\n static CAmount balance = 0;\n \n CoinEligibilityFilter filter_standard(1, 6, 0);"
      },
      {
        "sha": "97f4b0926f711c978070b308801e89f8d7d24256",
        "filename": "src/wallet/test/init_test_fixture.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8db11dd0b182a93042899651545cc21b34bf0742/src/wallet/test/init_test_fixture.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8db11dd0b182a93042899651545cc21b34bf0742/src/wallet/test/init_test_fixture.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/init_test_fixture.h?ref=8db11dd0b182a93042899651545cc21b34bf0742",
        "patch": "@@ -5,6 +5,7 @@\n #ifndef BITCOIN_WALLET_TEST_INIT_TEST_FIXTURE_H\n #define BITCOIN_WALLET_TEST_INIT_TEST_FIXTURE_H\n \n+#include <interfaces/chain.h>\n #include <test/test_bitcoin.h>\n \n \n@@ -16,6 +17,7 @@ struct InitWalletDirTestingSetup: public BasicTestingSetup {\n     fs::path m_datadir;\n     fs::path m_cwd;\n     std::map<std::string, fs::path> m_walletdir_path_cases;\n+    std::unique_ptr<interfaces::Chain> m_chain = interfaces::MakeChain();\n };\n \n #endif // BITCOIN_WALLET_TEST_INIT_TEST_FIXTURE_H"
      },
      {
        "sha": "b28f22f1b8eeec75a0aadca471b1f1a5af81eab0",
        "filename": "src/wallet/test/init_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8db11dd0b182a93042899651545cc21b34bf0742/src/wallet/test/init_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8db11dd0b182a93042899651545cc21b34bf0742/src/wallet/test/init_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/init_tests.cpp?ref=8db11dd0b182a93042899651545cc21b34bf0742",
        "patch": "@@ -17,7 +17,7 @@ BOOST_FIXTURE_TEST_SUITE(init_tests, InitWalletDirTestingSetup)\n BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_default)\n {\n     SetWalletDir(m_walletdir_path_cases[\"default\"]);\n-    bool result = g_wallet_init_interface.Verify();\n+    bool result = g_wallet_init_interface.Verify(*m_chain);\n     BOOST_CHECK(result == true);\n     fs::path walletdir = gArgs.GetArg(\"-walletdir\", \"\");\n     fs::path expected_path = fs::canonical(m_walletdir_path_cases[\"default\"]);\n@@ -27,7 +27,7 @@ BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_default)\n BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_custom)\n {\n     SetWalletDir(m_walletdir_path_cases[\"custom\"]);\n-    bool result = g_wallet_init_interface.Verify();\n+    bool result = g_wallet_init_interface.Verify(*m_chain);\n     BOOST_CHECK(result == true);\n     fs::path walletdir = gArgs.GetArg(\"-walletdir\", \"\");\n     fs::path expected_path = fs::canonical(m_walletdir_path_cases[\"custom\"]);\n@@ -37,28 +37,28 @@ BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_custom)\n BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_does_not_exist)\n {\n     SetWalletDir(m_walletdir_path_cases[\"nonexistent\"]);\n-    bool result = g_wallet_init_interface.Verify();\n+    bool result = g_wallet_init_interface.Verify(*m_chain);\n     BOOST_CHECK(result == false);\n }\n \n BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_is_not_directory)\n {\n     SetWalletDir(m_walletdir_path_cases[\"file\"]);\n-    bool result = g_wallet_init_interface.Verify();\n+    bool result = g_wallet_init_interface.Verify(*m_chain);\n     BOOST_CHECK(result == false);\n }\n \n BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_is_not_relative)\n {\n     SetWalletDir(m_walletdir_path_cases[\"relative\"]);\n-    bool result = g_wallet_init_interface.Verify();\n+    bool result = g_wallet_init_interface.Verify(*m_chain);\n     BOOST_CHECK(result == false);\n }\n \n BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_no_trailing)\n {\n     SetWalletDir(m_walletdir_path_cases[\"trailing\"]);\n-    bool result = g_wallet_init_interface.Verify();\n+    bool result = g_wallet_init_interface.Verify(*m_chain);\n     BOOST_CHECK(result == true);\n     fs::path walletdir = gArgs.GetArg(\"-walletdir\", \"\");\n     fs::path expected_path = fs::canonical(m_walletdir_path_cases[\"default\"]);\n@@ -68,7 +68,7 @@ BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_no_trailing)\n BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_no_trailing2)\n {\n     SetWalletDir(m_walletdir_path_cases[\"trailing2\"]);\n-    bool result = g_wallet_init_interface.Verify();\n+    bool result = g_wallet_init_interface.Verify(*m_chain);\n     BOOST_CHECK(result == true);\n     fs::path walletdir = gArgs.GetArg(\"-walletdir\", \"\");\n     fs::path expected_path = fs::canonical(m_walletdir_path_cases[\"default\"]);"
      },
      {
        "sha": "a5fb1db86c428ae58956b6fabdcbdc8e798a813f",
        "filename": "src/wallet/test/wallet_test_fixture.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8db11dd0b182a93042899651545cc21b34bf0742/src/wallet/test/wallet_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8db11dd0b182a93042899651545cc21b34bf0742/src/wallet/test/wallet_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.cpp?ref=8db11dd0b182a93042899651545cc21b34bf0742",
        "patch": "@@ -9,7 +9,7 @@\n #include <wallet/rpcwallet.h>\n \n WalletTestingSetup::WalletTestingSetup(const std::string& chainName):\n-    TestingSetup(chainName), m_wallet(WalletLocation(), WalletDatabase::CreateMock())\n+    TestingSetup(chainName), m_wallet(*m_chain, WalletLocation(), WalletDatabase::CreateMock())\n {\n     bool fFirstRun;\n     m_wallet.LoadWallet(fFirstRun);"
      },
      {
        "sha": "e6fe8c94735c13fdad1fdff1a1463e964b910599",
        "filename": "src/wallet/test/wallet_test_fixture.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8db11dd0b182a93042899651545cc21b34bf0742/src/wallet/test/wallet_test_fixture.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8db11dd0b182a93042899651545cc21b34bf0742/src/wallet/test/wallet_test_fixture.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.h?ref=8db11dd0b182a93042899651545cc21b34bf0742",
        "patch": "@@ -7,6 +7,8 @@\n \n #include <test/test_bitcoin.h>\n \n+#include <interfaces/chain.h>\n+#include <interfaces/wallet.h>\n #include <wallet/wallet.h>\n \n #include <memory>\n@@ -17,6 +19,7 @@ struct WalletTestingSetup: public TestingSetup {\n     explicit WalletTestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n     ~WalletTestingSetup();\n \n+    std::unique_ptr<interfaces::Chain> m_chain = interfaces::MakeChain();\n     CWallet m_wallet;\n };\n "
      },
      {
        "sha": "6d943d63a4011e9a0a9b976b59148512c72b0524",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 8,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8db11dd0b182a93042899651545cc21b34bf0742/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8db11dd0b182a93042899651545cc21b34bf0742/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=8db11dd0b182a93042899651545cc21b34bf0742",
        "patch": "@@ -34,6 +34,8 @@ static void AddKey(CWallet& wallet, const CKey& key)\n \n BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n {\n+    auto chain = interfaces::MakeChain();\n+\n     // Cap last block file size, and mine new block in a new block file.\n     CBlockIndex* const nullBlock = nullptr;\n     CBlockIndex* oldTip = chainActive.Tip();\n@@ -46,7 +48,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     // Verify ScanForWalletTransactions picks up transactions in both the old\n     // and new block files.\n     {\n-        CWallet wallet(WalletLocation(), WalletDatabase::CreateDummy());\n+        CWallet wallet(*chain, WalletLocation(), WalletDatabase::CreateDummy());\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(&wallet);\n         reserver.reserve();\n@@ -61,7 +63,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     // Verify ScanForWalletTransactions only picks transactions in the new block\n     // file.\n     {\n-        CWallet wallet(WalletLocation(), WalletDatabase::CreateDummy());\n+        CWallet wallet(*chain, WalletLocation(), WalletDatabase::CreateDummy());\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(&wallet);\n         reserver.reserve();\n@@ -73,7 +75,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     // before the missing block, and success for a key whose creation time is\n     // after.\n     {\n-        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(WalletLocation(), WalletDatabase::CreateDummy());\n+        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(*chain, WalletLocation(), WalletDatabase::CreateDummy());\n         AddWallet(wallet);\n         UniValue keys;\n         keys.setArray();\n@@ -115,6 +117,8 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n // than or equal to key birthday.\n BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n {\n+    auto chain = interfaces::MakeChain();\n+\n     // Create two blocks with same timestamp to verify that importwallet rescan\n     // will pick up both blocks, not just the first.\n     const int64_t BLOCK_TIME = chainActive.Tip()->GetBlockTimeMax() + 5;\n@@ -134,7 +138,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n \n     // Import key into wallet and call dumpwallet to create backup file.\n     {\n-        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(WalletLocation(), WalletDatabase::CreateDummy());\n+        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(*chain, WalletLocation(), WalletDatabase::CreateDummy());\n         LOCK(wallet->cs_wallet);\n         wallet->mapKeyMetadata[coinbaseKey.GetPubKey().GetID()].nCreateTime = KEY_TIME;\n         wallet->AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n@@ -150,7 +154,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n     // Call importwallet RPC and verify all blocks with timestamps >= BLOCK_TIME\n     // were scanned, and no prior blocks were scanned.\n     {\n-        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(WalletLocation(), WalletDatabase::CreateDummy());\n+        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(*chain, WalletLocation(), WalletDatabase::CreateDummy());\n \n         JSONRPCRequest request;\n         request.params.setArray();\n@@ -180,7 +184,8 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n // debit functions.\n BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n {\n-    CWallet wallet(WalletLocation(), WalletDatabase::CreateDummy());\n+    auto chain = interfaces::MakeChain();\n+    CWallet wallet(*chain, WalletLocation(), WalletDatabase::CreateDummy());\n     CWalletTx wtx(&wallet, m_coinbase_txns.back());\n     LOCK2(cs_main, wallet.cs_wallet);\n     wtx.hashBlock = chainActive.Tip()->GetBlockHash();\n@@ -273,7 +278,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n     ListCoinsTestingSetup()\n     {\n         CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n-        wallet = MakeUnique<CWallet>(WalletLocation(), WalletDatabase::CreateMock());\n+        wallet = MakeUnique<CWallet>(*m_chain, WalletLocation(), WalletDatabase::CreateMock());\n         bool firstRun;\n         wallet->LoadWallet(firstRun);\n         AddKey(*wallet, coinbaseKey);\n@@ -311,6 +316,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         return it->second;\n     }\n \n+    std::unique_ptr<interfaces::Chain> m_chain = interfaces::MakeChain();\n     std::unique_ptr<CWallet> wallet;\n };\n \n@@ -377,7 +383,8 @@ BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n \n BOOST_FIXTURE_TEST_CASE(wallet_disableprivkeys, TestChain100Setup)\n {\n-    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(WalletLocation(), WalletDatabase::CreateDummy());\n+    auto chain = interfaces::MakeChain();\n+    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(*chain, WalletLocation(), WalletDatabase::CreateDummy());\n     wallet->SetWalletFlag(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n     BOOST_CHECK(!wallet->TopUpKeyPool(1000));\n     CPubKey pubkey;"
      },
      {
        "sha": "7c9708cf5ed5b67dcc37a88e5824856c6ae3ba09",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8db11dd0b182a93042899651545cc21b34bf0742/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8db11dd0b182a93042899651545cc21b34bf0742/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8db11dd0b182a93042899651545cc21b34bf0742",
        "patch": "@@ -3825,7 +3825,7 @@ void CWallet::MarkPreSplitKeys()\n     }\n }\n \n-bool CWallet::Verify(const WalletLocation& location, bool salvage_wallet, std::string& error_string, std::string& warning_string)\n+bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, bool salvage_wallet, std::string& error_string, std::string& warning_string)\n {\n     // Do some checking on wallet path. It should be either a:\n     //\n@@ -3866,7 +3866,7 @@ bool CWallet::Verify(const WalletLocation& location, bool salvage_wallet, std::s\n \n     if (salvage_wallet) {\n         // Recover readable keypairs:\n-        CWallet dummyWallet(WalletLocation(), WalletDatabase::CreateDummy());\n+        CWallet dummyWallet(chain, WalletLocation(), WalletDatabase::CreateDummy());\n         std::string backup_filename;\n         if (!WalletBatch::Recover(wallet_path, (void *)&dummyWallet, WalletBatch::RecoverKeysOnlyFilter, backup_filename)) {\n             return false;\n@@ -3876,7 +3876,7 @@ bool CWallet::Verify(const WalletLocation& location, bool salvage_wallet, std::s\n     return WalletBatch::VerifyDatabaseFile(wallet_path, warning_string, error_string);\n }\n \n-std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const WalletLocation& location, uint64_t wallet_creation_flags)\n+std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain, const WalletLocation& location, uint64_t wallet_creation_flags)\n {\n     const std::string& walletFile = location.GetName();\n \n@@ -3886,7 +3886,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const WalletLocation& loc\n     if (gArgs.GetBoolArg(\"-zapwallettxes\", false)) {\n         uiInterface.InitMessage(_(\"Zapping all transactions from wallet...\"));\n \n-        std::unique_ptr<CWallet> tempWallet = MakeUnique<CWallet>(location, WalletDatabase::Create(location.GetPath()));\n+        std::unique_ptr<CWallet> tempWallet = MakeUnique<CWallet>(chain, location, WalletDatabase::Create(location.GetPath()));\n         DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx);\n         if (nZapWalletRet != DBErrors::LOAD_OK) {\n             InitError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n@@ -3900,7 +3900,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const WalletLocation& loc\n     bool fFirstRun = true;\n     // TODO: Can't use std::make_shared because we need a custom deleter but\n     // should be possible to use std::allocate_shared.\n-    std::shared_ptr<CWallet> walletInstance(new CWallet(location, WalletDatabase::Create(location.GetPath())), ReleaseWallet);\n+    std::shared_ptr<CWallet> walletInstance(new CWallet(chain, location, WalletDatabase::Create(location.GetPath())), ReleaseWallet);\n     DBErrors nLoadWalletRet = walletInstance->LoadWallet(fFirstRun);\n     if (nLoadWalletRet != DBErrors::LOAD_OK)\n     {"
      },
      {
        "sha": "32cd462c4c59acf5280980998c71bba54c226816",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 13,
        "deletions": 3,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8db11dd0b182a93042899651545cc21b34bf0742/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8db11dd0b182a93042899651545cc21b34bf0742/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=8db11dd0b182a93042899651545cc21b34bf0742",
        "patch": "@@ -33,6 +33,10 @@\n #include <utility>\n #include <vector>\n \n+namespace interfaces {\n+class Chain;\n+} // namespace interfaces\n+\n bool AddWallet(const std::shared_ptr<CWallet>& wallet);\n bool RemoveWallet(const std::shared_ptr<CWallet>& wallet);\n bool HasWallets();\n@@ -676,6 +680,9 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      */\n     bool AddWatchOnly(const CScript& dest) override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n+    /** Interface for accessing chain state. */\n+    interfaces::Chain& m_chain;\n+\n     /** Wallet location which includes wallet name (see WalletLocation). */\n     WalletLocation m_location;\n \n@@ -737,7 +744,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     unsigned int nMasterKeyMaxID = 0;\n \n     /** Construct wallet with specified name and database implementation. */\n-    CWallet(const WalletLocation& location, std::unique_ptr<WalletDatabase> database) : m_location(location), database(std::move(database))\n+    CWallet(interfaces::Chain& chain, const WalletLocation& location, std::unique_ptr<WalletDatabase> database) : m_chain(chain), m_location(location), database(std::move(database))\n     {\n     }\n \n@@ -759,6 +766,9 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     std::set<COutPoint> setLockedCoins GUARDED_BY(cs_wallet);\n \n+    /** Interface for accessing chain state. */\n+    interfaces::Chain& chain() const { return m_chain; }\n+\n     const CWalletTx* GetWalletTx(const uint256& hash) const;\n \n     //! check whether we are allowed to upgrade (or already support) to the named feature\n@@ -1057,10 +1067,10 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool MarkReplaced(const uint256& originalHash, const uint256& newHash);\n \n     //! Verify wallet naming and perform salvage on the wallet if required\n-    static bool Verify(const WalletLocation& location, bool salvage_wallet, std::string& error_string, std::string& warning_string);\n+    static bool Verify(interfaces::Chain& chain, const WalletLocation& location, bool salvage_wallet, std::string& error_string, std::string& warning_string);\n \n     /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n-    static std::shared_ptr<CWallet> CreateWalletFromFile(const WalletLocation& location, uint64_t wallet_creation_flags = 0);\n+    static std::shared_ptr<CWallet> CreateWalletFromFile(interfaces::Chain& chain, const WalletLocation& location, uint64_t wallet_creation_flags = 0);\n \n     /**\n      * Wallet post-init setup"
      },
      {
        "sha": "fb6dcf60d0304eca37b22c439b706be1596f1db8",
        "filename": "src/walletinitinterface.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8db11dd0b182a93042899651545cc21b34bf0742/src/walletinitinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8db11dd0b182a93042899651545cc21b34bf0742/src/walletinitinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletinitinterface.h?ref=8db11dd0b182a93042899651545cc21b34bf0742",
        "patch": "@@ -10,6 +10,10 @@\n class CScheduler;\n class CRPCTable;\n \n+namespace interfaces {\n+class Chain;\n+} // namespace interfaces\n+\n class WalletInitInterface {\n public:\n     /** Is the wallet component enabled */\n@@ -21,9 +25,9 @@ class WalletInitInterface {\n     /** Register wallet RPC*/\n     virtual void RegisterRPC(CRPCTable &) const = 0;\n     /** Verify wallets */\n-    virtual bool Verify() const = 0;\n+    virtual bool Verify(interfaces::Chain& chain) const = 0;\n     /** Open wallets*/\n-    virtual bool Open() const = 0;\n+    virtual bool Open(interfaces::Chain& chain) const = 0;\n     /** Start wallets*/\n     virtual void Start(CScheduler& scheduler) const = 0;\n     /** Flush Wallets*/"
      }
    ]
  },
  {
    "sha": "ea961c3d7256c66146b4976ab1293db4a628c0de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYTk2MWMzZDcyNTZjNjYxNDZiNDk3NmFiMTI5M2RiNGE2MjhjMGRl",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-09-28T18:13:29Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-11-06T15:44:40Z"
      },
      "message": "Remove direct node->wallet calls in init.cpp\n\nRoute calls during node initialization and shutdown that would happen between a\nnode process and wallet processes through the serializable `Chain::Client`\ninterface, rather than `WalletInitInterface` which is now simpler and only\ndeals with early initialization and parameter interaction.\n\nThis commit mostly does not change behavior. The only change is that the\n\"Wallet disabled!\" and \"No wallet support compiled in!\" messages are now logged\nearlier during startup.",
      "tree": {
        "sha": "ae47f0f47559d05007ebc63130f3099d9f003a5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae47f0f47559d05007ebc63130f3099d9f003a5e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea961c3d7256c66146b4976ab1293db4a628c0de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea961c3d7256c66146b4976ab1293db4a628c0de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea961c3d7256c66146b4976ab1293db4a628c0de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea961c3d7256c66146b4976ab1293db4a628c0de/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8db11dd0b182a93042899651545cc21b34bf0742",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8db11dd0b182a93042899651545cc21b34bf0742",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8db11dd0b182a93042899651545cc21b34bf0742"
      }
    ],
    "stats": {
      "total": 199,
      "additions": 114,
      "deletions": 85
    },
    "files": [
      {
        "sha": "8dd0d31839e6ab963014bb0bb1e136eaabc5a3f5",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea961c3d7256c66146b4976ab1293db4a628c0de/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea961c3d7256c66146b4976ab1293db4a628c0de/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=ea961c3d7256c66146b4976ab1293db4a628c0de",
        "patch": "@@ -467,6 +467,7 @@ endif\n bitcoind_LDADD = \\\n   $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_WALLET) \\\n+  $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_COMMON) \\\n   $(LIBUNIVALUE) \\\n   $(LIBBITCOIN_UTIL) \\"
      },
      {
        "sha": "9211a7596b8a47d10362809d2534d2c29cad9623",
        "filename": "src/dummywallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea961c3d7256c66146b4976ab1293db4a628c0de/src/dummywallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea961c3d7256c66146b4976ab1293db4a628c0de/src/dummywallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dummywallet.cpp?ref=ea961c3d7256c66146b4976ab1293db4a628c0de",
        "patch": "@@ -14,13 +14,7 @@ class DummyWalletInit : public WalletInitInterface {\n     bool HasWalletSupport() const override {return false;}\n     void AddWalletOptions() const override;\n     bool ParameterInteraction() const override {return true;}\n-    void RegisterRPC(CRPCTable &) const override {}\n-    bool Verify(interfaces::Chain& chain) const override {return true;}\n-    bool Open(interfaces::Chain& chain) const override {LogPrintf(\"No wallet support compiled in!\\n\"); return true;}\n-    void Start(CScheduler& scheduler) const override {}\n-    void Flush() const override {}\n-    void Stop() const override {}\n-    void Close() const override {}\n+    void Construct(InitInterfaces& interfaces) const override {LogPrintf(\"No wallet support compiled in!\\n\");}\n };\n \n void DummyWalletInit::AddWalletOptions() const"
      },
      {
        "sha": "3ab97be329613298d91df034d2fad0d7dd0dad14",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 7,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea961c3d7256c66146b4976ab1293db4a628c0de/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea961c3d7256c66146b4976ab1293db4a628c0de/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ea961c3d7256c66146b4976ab1293db4a628c0de",
        "patch": "@@ -19,6 +19,7 @@\n #include <fs.h>\n #include <httpserver.h>\n #include <httprpc.h>\n+#include <interfaces/chain.h>\n #include <index/txindex.h>\n #include <key.h>\n #include <validation.h>\n@@ -177,7 +178,9 @@ void Shutdown(InitInterfaces& interfaces)\n     StopREST();\n     StopRPC();\n     StopHTTPServer();\n-    g_wallet_init_interface.Flush();\n+    for (const auto& client : interfaces.chain_clients) {\n+        client->flush();\n+    }\n     StopMapPort();\n \n     // Because these depend on each-other, we make sure that neither can be\n@@ -240,7 +243,9 @@ void Shutdown(InitInterfaces& interfaces)\n         pcoinsdbview.reset();\n         pblocktree.reset();\n     }\n-    g_wallet_init_interface.Stop();\n+    for (const auto& client : interfaces.chain_clients) {\n+        client->stop();\n+    }\n \n #if ENABLE_ZMQ\n     if (g_zmq_notification_interface) {\n@@ -260,7 +265,7 @@ void Shutdown(InitInterfaces& interfaces)\n     UnregisterAllValidationInterfaces();\n     GetMainSignals().UnregisterBackgroundSignalScheduler();\n     GetMainSignals().UnregisterWithMempoolSignals(mempool);\n-    g_wallet_init_interface.Close();\n+    interfaces.chain_clients.clear();\n     globalVerifyHandle.reset();\n     ECC_Stop();\n     LogPrintf(\"%s: done\\n\", __func__);\n@@ -1222,11 +1227,19 @@ bool AppInitMain(InitInterfaces& interfaces)\n     GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n     GetMainSignals().RegisterWithMempoolSignals(mempool);\n \n+    // Create client interfaces for wallets that are supposed to be loaded\n+    // according to -wallet and -disablewallet options. This only constructs\n+    // the interfaces, it doesn't load wallet data. Wallets actually get loaded\n+    // when load() and start() interface methods are called below.\n+    g_wallet_init_interface.Construct(interfaces);\n+\n     /* Register RPC commands regardless of -server setting so they will be\n      * available in the GUI RPC console even if external calls are disabled.\n      */\n     RegisterAllCoreRPCCommands(tableRPC);\n-    g_wallet_init_interface.RegisterRPC(tableRPC);\n+    for (const auto& client : interfaces.chain_clients) {\n+        client->registerRpcs();\n+    }\n     g_rpc_interfaces = &interfaces;\n #if ENABLE_ZMQ\n     RegisterZMQRPCCommands(tableRPC);\n@@ -1245,7 +1258,11 @@ bool AppInitMain(InitInterfaces& interfaces)\n     }\n \n     // ********************************************************* Step 5: verify wallet database integrity\n-    if (!g_wallet_init_interface.Verify(*interfaces.chain)) return false;\n+    for (const auto& client : interfaces.chain_clients) {\n+        if (!client->verify()) {\n+            return false;\n+        }\n+    }\n \n     // ********************************************************* Step 6: network initialization\n     // Note that we absolutely cannot open any actual connections\n@@ -1564,7 +1581,11 @@ bool AppInitMain(InitInterfaces& interfaces)\n     }\n \n     // ********************************************************* Step 9: load wallet\n-    if (!g_wallet_init_interface.Open(*interfaces.chain)) return false;\n+    for (const auto& client : interfaces.chain_clients) {\n+        if (!client->load()) {\n+            return false;\n+        }\n+    }\n \n     // ********************************************************* Step 10: data directory maintenance\n \n@@ -1710,7 +1731,9 @@ bool AppInitMain(InitInterfaces& interfaces)\n     SetRPCWarmupFinished();\n     uiInterface.InitMessage(_(\"Done loading\"));\n \n-    g_wallet_init_interface.Start(scheduler);\n+    for (const auto& client : interfaces.chain_clients) {\n+        client->start(scheduler);\n+    }\n \n     return true;\n }"
      },
      {
        "sha": "30bc9f5f738536609e5f98ac1430ed89565a5338",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea961c3d7256c66146b4976ab1293db4a628c0de/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea961c3d7256c66146b4976ab1293db4a628c0de/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=ea961c3d7256c66146b4976ab1293db4a628c0de",
        "patch": "@@ -9,6 +9,8 @@\n #include <string>\n #include <vector>\n \n+class CScheduler;\n+\n namespace interfaces {\n \n //! Interface for giving wallet processes access to blockchain state.\n@@ -24,6 +26,24 @@ class ChainClient\n {\n public:\n     virtual ~ChainClient() {}\n+\n+    //! Register rpcs.\n+    virtual void registerRpcs() = 0;\n+\n+    //! Check for errors before loading.\n+    virtual bool verify() = 0;\n+\n+    //! Load saved state.\n+    virtual bool load() = 0;\n+\n+    //! Start client execution and provide a scheduler.\n+    virtual void start(CScheduler& scheduler) = 0;\n+\n+    //! Save state to disk.\n+    virtual void flush() = 0;\n+\n+    //! Shut down client.\n+    virtual void stop() = 0;\n };\n \n //! Return implementation of Chain interface."
      },
      {
        "sha": "a29440ee4a14232c922a4ba959a5253435c37ef6",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea961c3d7256c66146b4976ab1293db4a628c0de/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea961c3d7256c66146b4976ab1293db4a628c0de/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=ea961c3d7256c66146b4976ab1293db4a628c0de",
        "patch": "@@ -7,13 +7,16 @@\n #include <amount.h>\n #include <chain.h>\n #include <consensus/validation.h>\n+#include <init.h>\n #include <interfaces/chain.h>\n #include <interfaces/handler.h>\n #include <net.h>\n #include <policy/feerate.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n #include <primitives/transaction.h>\n+#include <rpc/server.h>\n+#include <scheduler.h>\n #include <script/ismine.h>\n #include <script/standard.h>\n #include <support/allocators/secure.h>\n@@ -25,7 +28,9 @@\n #include <validation.h>\n #include <wallet/feebumper.h>\n #include <wallet/fees.h>\n+#include <wallet/rpcwallet.h>\n #include <wallet/wallet.h>\n+#include <wallet/walletutil.h>\n \n #include <memory>\n #include <string>\n@@ -470,6 +475,13 @@ class WalletClientImpl : public ChainClient\n         : m_chain(chain), m_wallet_filenames(std::move(wallet_filenames))\n     {\n     }\n+    void registerRpcs() override { return RegisterWalletRPCCommands(::tableRPC); }\n+    bool verify() override { return VerifyWallets(m_chain, m_wallet_filenames); }\n+    bool load() override { return LoadWallets(m_chain, m_wallet_filenames); }\n+    void start(CScheduler& scheduler) override { return StartWallets(scheduler); }\n+    void flush() override { return FlushWallets(); }\n+    void stop() override { return StopWallets(); }\n+    ~WalletClientImpl() override { UnloadWallets(); }\n \n     Chain& m_chain;\n     std::vector<std::string> m_wallet_filenames;"
      },
      {
        "sha": "14d811c6cd741b549d5b891c7a8517236979666d",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 46,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea961c3d7256c66146b4976ab1293db4a628c0de/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea961c3d7256c66146b4976ab1293db4a628c0de/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=ea961c3d7256c66146b4976ab1293db4a628c0de",
        "patch": "@@ -5,6 +5,7 @@\n \n #include <chainparams.h>\n #include <init.h>\n+#include <interfaces/chain.h>\n #include <net.h>\n #include <scheduler.h>\n #include <outputtype.h>\n@@ -28,28 +29,8 @@ class WalletInit : public WalletInitInterface {\n     //! Wallets parameter interaction\n     bool ParameterInteraction() const override;\n \n-    //! Register wallet RPCs.\n-    void RegisterRPC(CRPCTable &tableRPC) const override;\n-\n-    //! Responsible for reading and validating the -wallet arguments and verifying the wallet database.\n-    //  This function will perform salvage on the wallet if requested, as long as only one wallet is\n-    //  being loaded (WalletParameterInteraction forbids -salvagewallet, -zapwallettxes or -upgradewallet with multiwallet).\n-    bool Verify(interfaces::Chain& chain) const override;\n-\n-    //! Load wallet databases.\n-    bool Open(interfaces::Chain& chain) const override;\n-\n-    //! Complete startup of wallets.\n-    void Start(CScheduler& scheduler) const override;\n-\n-    //! Flush all wallets in preparation for shutdown.\n-    void Flush() const override;\n-\n-    //! Stop all wallets. Wallets will be flushed first.\n-    void Stop() const override;\n-\n-    //! Close all wallets.\n-    void Close() const override;\n+    //! Add wallets that should be opened to list of init interfaces.\n+    void Construct(InitInterfaces& interfaces) const override;\n };\n \n const WalletInitInterface& g_wallet_init_interface = WalletInit();\n@@ -99,7 +80,6 @@ bool WalletInit::ParameterInteraction() const\n         return true;\n     }\n \n-    gArgs.SoftSetArg(\"-wallet\", \"\");\n     const bool is_multiwallet = gArgs.GetArgs(\"-wallet\").size() > 1;\n \n     if (gArgs.GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY) && gArgs.SoftSetBoolArg(\"-walletbroadcast\", false)) {\n@@ -165,21 +145,8 @@ bool WalletInit::ParameterInteraction() const\n     return true;\n }\n \n-void WalletInit::RegisterRPC(CRPCTable &t) const\n-{\n-    if (gArgs.GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET)) {\n-        return;\n-    }\n-\n-    RegisterWalletRPCCommands(t);\n-}\n-\n-bool WalletInit::Verify(interfaces::Chain& chain) const\n+bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wallet_files)\n {\n-    if (gArgs.GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET)) {\n-        return true;\n-    }\n-\n     if (gArgs.IsArgSet(\"-walletdir\")) {\n         fs::path wallet_dir = gArgs.GetArg(\"-walletdir\", \"\");\n         boost::system::error_code error;\n@@ -200,8 +167,6 @@ bool WalletInit::Verify(interfaces::Chain& chain) const\n \n     uiInterface.InitMessage(_(\"Verifying wallet(s)...\"));\n \n-    std::vector<std::string> wallet_files = gArgs.GetArgs(\"-wallet\");\n-\n     // Parameter interaction code should have thrown an error if -salvagewallet\n     // was enabled with more than wallet file, so the wallet_files size check\n     // here should have no effect.\n@@ -228,14 +193,19 @@ bool WalletInit::Verify(interfaces::Chain& chain) const\n     return true;\n }\n \n-bool WalletInit::Open(interfaces::Chain& chain) const\n+void WalletInit::Construct(InitInterfaces& interfaces) const\n {\n     if (gArgs.GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET)) {\n         LogPrintf(\"Wallet disabled!\\n\");\n-        return true;\n+        return;\n     }\n+    gArgs.SoftSetArg(\"-wallet\", \"\");\n+    interfaces.chain_clients.emplace_back(interfaces::MakeWalletClient(*interfaces.chain, gArgs.GetArgs(\"-wallet\")));\n+}\n \n-    for (const std::string& walletFile : gArgs.GetArgs(\"-wallet\")) {\n+bool LoadWallets(interfaces::Chain& chain, const std::vector<std::string>& wallet_files)\n+{\n+    for (const std::string& walletFile : wallet_files) {\n         std::shared_ptr<CWallet> pwallet = CWallet::CreateWalletFromFile(chain, WalletLocation(walletFile));\n         if (!pwallet) {\n             return false;\n@@ -246,7 +216,7 @@ bool WalletInit::Open(interfaces::Chain& chain) const\n     return true;\n }\n \n-void WalletInit::Start(CScheduler& scheduler) const\n+void StartWallets(CScheduler& scheduler)\n {\n     for (const std::shared_ptr<CWallet>& pwallet : GetWallets()) {\n         pwallet->postInitProcess();\n@@ -256,21 +226,21 @@ void WalletInit::Start(CScheduler& scheduler) const\n     scheduler.scheduleEvery(MaybeCompactWalletDB, 500);\n }\n \n-void WalletInit::Flush() const\n+void FlushWallets()\n {\n     for (const std::shared_ptr<CWallet>& pwallet : GetWallets()) {\n         pwallet->Flush(false);\n     }\n }\n \n-void WalletInit::Stop() const\n+void StopWallets()\n {\n     for (const std::shared_ptr<CWallet>& pwallet : GetWallets()) {\n         pwallet->Flush(true);\n     }\n }\n \n-void WalletInit::Close() const\n+void UnloadWallets()\n {\n     for (const std::shared_ptr<CWallet>& pwallet : GetWallets()) {\n         RemoveWallet(pwallet);"
      },
      {
        "sha": "3b828d57f928147b7f16fa58d8a76f1bc898f9d9",
        "filename": "src/wallet/test/init_test_fixture.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea961c3d7256c66146b4976ab1293db4a628c0de/src/wallet/test/init_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea961c3d7256c66146b4976ab1293db4a628c0de/src/wallet/test/init_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/init_test_fixture.cpp?ref=ea961c3d7256c66146b4976ab1293db4a628c0de",
        "patch": "@@ -8,6 +8,8 @@\n \n InitWalletDirTestingSetup::InitWalletDirTestingSetup(const std::string& chainName): BasicTestingSetup(chainName)\n {\n+    m_chain_client = MakeWalletClient(*m_chain, {});\n+\n     std::string sep;\n     sep += fs::path::preferred_separator;\n "
      },
      {
        "sha": "cd47b31da11c9676c5859d810918b478f0e1e144",
        "filename": "src/wallet/test/init_test_fixture.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea961c3d7256c66146b4976ab1293db4a628c0de/src/wallet/test/init_test_fixture.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea961c3d7256c66146b4976ab1293db4a628c0de/src/wallet/test/init_test_fixture.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/init_test_fixture.h?ref=ea961c3d7256c66146b4976ab1293db4a628c0de",
        "patch": "@@ -18,6 +18,7 @@ struct InitWalletDirTestingSetup: public BasicTestingSetup {\n     fs::path m_cwd;\n     std::map<std::string, fs::path> m_walletdir_path_cases;\n     std::unique_ptr<interfaces::Chain> m_chain = interfaces::MakeChain();\n+    std::unique_ptr<interfaces::ChainClient> m_chain_client;\n };\n \n #endif // BITCOIN_WALLET_TEST_INIT_TEST_FIXTURE_H"
      },
      {
        "sha": "5852d3ef84172fc4bd072463acc82352fe1e4fdf",
        "filename": "src/wallet/test/init_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea961c3d7256c66146b4976ab1293db4a628c0de/src/wallet/test/init_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea961c3d7256c66146b4976ab1293db4a628c0de/src/wallet/test/init_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/init_tests.cpp?ref=ea961c3d7256c66146b4976ab1293db4a628c0de",
        "patch": "@@ -17,7 +17,7 @@ BOOST_FIXTURE_TEST_SUITE(init_tests, InitWalletDirTestingSetup)\n BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_default)\n {\n     SetWalletDir(m_walletdir_path_cases[\"default\"]);\n-    bool result = g_wallet_init_interface.Verify(*m_chain);\n+    bool result = m_chain_client->verify();\n     BOOST_CHECK(result == true);\n     fs::path walletdir = gArgs.GetArg(\"-walletdir\", \"\");\n     fs::path expected_path = fs::canonical(m_walletdir_path_cases[\"default\"]);\n@@ -27,7 +27,7 @@ BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_default)\n BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_custom)\n {\n     SetWalletDir(m_walletdir_path_cases[\"custom\"]);\n-    bool result = g_wallet_init_interface.Verify(*m_chain);\n+    bool result = m_chain_client->verify();\n     BOOST_CHECK(result == true);\n     fs::path walletdir = gArgs.GetArg(\"-walletdir\", \"\");\n     fs::path expected_path = fs::canonical(m_walletdir_path_cases[\"custom\"]);\n@@ -37,28 +37,28 @@ BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_custom)\n BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_does_not_exist)\n {\n     SetWalletDir(m_walletdir_path_cases[\"nonexistent\"]);\n-    bool result = g_wallet_init_interface.Verify(*m_chain);\n+    bool result = m_chain_client->verify();\n     BOOST_CHECK(result == false);\n }\n \n BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_is_not_directory)\n {\n     SetWalletDir(m_walletdir_path_cases[\"file\"]);\n-    bool result = g_wallet_init_interface.Verify(*m_chain);\n+    bool result = m_chain_client->verify();\n     BOOST_CHECK(result == false);\n }\n \n BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_is_not_relative)\n {\n     SetWalletDir(m_walletdir_path_cases[\"relative\"]);\n-    bool result = g_wallet_init_interface.Verify(*m_chain);\n+    bool result = m_chain_client->verify();\n     BOOST_CHECK(result == false);\n }\n \n BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_no_trailing)\n {\n     SetWalletDir(m_walletdir_path_cases[\"trailing\"]);\n-    bool result = g_wallet_init_interface.Verify(*m_chain);\n+    bool result = m_chain_client->verify();\n     BOOST_CHECK(result == true);\n     fs::path walletdir = gArgs.GetArg(\"-walletdir\", \"\");\n     fs::path expected_path = fs::canonical(m_walletdir_path_cases[\"default\"]);\n@@ -68,7 +68,7 @@ BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_no_trailing)\n BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_no_trailing2)\n {\n     SetWalletDir(m_walletdir_path_cases[\"trailing2\"]);\n-    bool result = g_wallet_init_interface.Verify(*m_chain);\n+    bool result = m_chain_client->verify();\n     BOOST_CHECK(result == true);\n     fs::path walletdir = gArgs.GetArg(\"-walletdir\", \"\");\n     fs::path expected_path = fs::canonical(m_walletdir_path_cases[\"default\"]);"
      },
      {
        "sha": "2fb2140ac7f4a47881f8862f21fa7e8392a4e0bf",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea961c3d7256c66146b4976ab1293db4a628c0de/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea961c3d7256c66146b4976ab1293db4a628c0de/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=ea961c3d7256c66146b4976ab1293db4a628c0de",
        "patch": "@@ -37,6 +37,27 @@ namespace interfaces {\n class Chain;\n } // namespace interfaces\n \n+\n+//! Responsible for reading and validating the -wallet arguments and verifying the wallet database.\n+//  This function will perform salvage on the wallet if requested, as long as only one wallet is\n+//  being loaded (WalletParameterInteraction forbids -salvagewallet, -zapwallettxes or -upgradewallet with multiwallet).\n+bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wallet_files);\n+\n+//! Load wallet databases.\n+bool LoadWallets(interfaces::Chain& chain, const std::vector<std::string>& wallet_files);\n+\n+//! Complete startup of wallets.\n+void StartWallets(CScheduler& scheduler);\n+\n+//! Flush all wallets in preparation for shutdown.\n+void FlushWallets();\n+\n+//! Stop all wallets. Wallets will be flushed first.\n+void StopWallets();\n+\n+//! Close all wallets.\n+void UnloadWallets();\n+\n bool AddWallet(const std::shared_ptr<CWallet>& wallet);\n bool RemoveWallet(const std::shared_ptr<CWallet>& wallet);\n bool HasWallets();"
      },
      {
        "sha": "22aca659903c0ded79f0e72ff59c60a39b463578",
        "filename": "src/walletinitinterface.h",
        "status": "modified",
        "additions": 3,
        "deletions": 18,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea961c3d7256c66146b4976ab1293db4a628c0de/src/walletinitinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea961c3d7256c66146b4976ab1293db4a628c0de/src/walletinitinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletinitinterface.h?ref=ea961c3d7256c66146b4976ab1293db4a628c0de",
        "patch": "@@ -9,10 +9,7 @@\n \n class CScheduler;\n class CRPCTable;\n-\n-namespace interfaces {\n-class Chain;\n-} // namespace interfaces\n+struct InitInterfaces;\n \n class WalletInitInterface {\n public:\n@@ -22,20 +19,8 @@ class WalletInitInterface {\n     virtual void AddWalletOptions() const = 0;\n     /** Check wallet parameter interaction */\n     virtual bool ParameterInteraction() const = 0;\n-    /** Register wallet RPC*/\n-    virtual void RegisterRPC(CRPCTable &) const = 0;\n-    /** Verify wallets */\n-    virtual bool Verify(interfaces::Chain& chain) const = 0;\n-    /** Open wallets*/\n-    virtual bool Open(interfaces::Chain& chain) const = 0;\n-    /** Start wallets*/\n-    virtual void Start(CScheduler& scheduler) const = 0;\n-    /** Flush Wallets*/\n-    virtual void Flush() const = 0;\n-    /** Stop Wallets*/\n-    virtual void Stop() const = 0;\n-    /** Close wallets */\n-    virtual void Close() const = 0;\n+    /** Add wallets that should be opened to list of init interfaces. */\n+    virtual void Construct(InitInterfaces& interfaces) const = 0;\n \n     virtual ~WalletInitInterface() {}\n };"
      }
    ]
  },
  {
    "sha": "79d579f4e11b57f90fed314bccd25230f918729f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OWQ1NzlmNGUxMWI1N2Y5MGZlZDMxNGJjY2QyNTIzMGY5MTg3Mjlm",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-07-26T14:23:01Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-11-06T15:44:40Z"
      },
      "message": "Remove uses of cs_main in wallet code\n\nThis commit does not change behavior.\n\nIt is easiest to review this change with:\n\n    git log -p -n1 -U0",
      "tree": {
        "sha": "1886caa0cd9fdf2aaaa84ad7160472d87e0eb68c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1886caa0cd9fdf2aaaa84ad7160472d87e0eb68c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/79d579f4e11b57f90fed314bccd25230f918729f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79d579f4e11b57f90fed314bccd25230f918729f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/79d579f4e11b57f90fed314bccd25230f918729f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79d579f4e11b57f90fed314bccd25230f918729f/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea961c3d7256c66146b4976ab1293db4a628c0de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea961c3d7256c66146b4976ab1293db4a628c0de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea961c3d7256c66146b4976ab1293db4a628c0de"
      }
    ],
    "stats": {
      "total": 321,
      "additions": 227,
      "deletions": 94
    },
    "files": [
      {
        "sha": "2571a91031f98c3c475b7957fe746c7a9e49ab6c",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79d579f4e11b57f90fed314bccd25230f918729f/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79d579f4e11b57f90fed314bccd25230f918729f/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=79d579f4e11b57f90fed314bccd25230f918729f",
        "patch": "@@ -4,13 +4,37 @@\n \n #include <interfaces/chain.h>\n \n+#include <sync.h>\n #include <util/system.h>\n+#include <validation.h>\n+\n+#include <memory>\n+#include <utility>\n \n namespace interfaces {\n namespace {\n \n+class LockImpl : public Chain::Lock\n+{\n+};\n+\n+class LockingStateImpl : public LockImpl, public UniqueLock<CCriticalSection>\n+{\n+    using UniqueLock::UniqueLock;\n+};\n+\n class ChainImpl : public Chain\n {\n+public:\n+    std::unique_ptr<Chain::Lock> lock(bool try_lock) override\n+    {\n+        auto result = MakeUnique<LockingStateImpl>(::cs_main, \"cs_main\", __FILE__, __LINE__, try_lock);\n+        if (try_lock && result && !*result) return {};\n+        // std::move necessary on some compilers due to conversion from\n+        // LockingStateImpl to Lock pointer\n+        return std::move(result);\n+    }\n+    std::unique_ptr<Chain::Lock> assumeLocked() override { return MakeUnique<LockImpl>(); }\n };\n \n } // namespace"
      },
      {
        "sha": "fe5658de4b73c78ff2f14080b78b0f1fc6c16d23",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79d579f4e11b57f90fed314bccd25230f918729f/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79d579f4e11b57f90fed314bccd25230f918729f/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=79d579f4e11b57f90fed314bccd25230f918729f",
        "patch": "@@ -18,6 +18,26 @@ class Chain\n {\n public:\n     virtual ~Chain() {}\n+\n+    //! Interface for querying locked chain state, used by legacy code that\n+    //! assumes state won't change between calls. New code should avoid using\n+    //! the Lock interface and instead call higher-level Chain methods\n+    //! that return more information so the chain doesn't need to stay locked\n+    //! between calls.\n+    class Lock\n+    {\n+    public:\n+        virtual ~Lock() {}\n+    };\n+\n+    //! Return Lock interface. Chain is locked when this is called, and\n+    //! unlocked when the returned interface is freed.\n+    virtual std::unique_ptr<Lock> lock(bool try_lock = false) = 0;\n+\n+    //! Return Lock interface assuming chain is already locked. This\n+    //! method is temporary and is only used in a few places to avoid changing\n+    //! behavior while code is transitioned to use the Chain::Lock interface.\n+    virtual std::unique_ptr<Lock> assumeLocked() = 0;\n };\n \n //! Interface to let node manage chain clients (wallets, or maybe tools for"
      },
      {
        "sha": "d03daf88ddae345c7a2cacdaa9871a6e647b7172",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 19,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79d579f4e11b57f90fed314bccd25230f918729f/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79d579f4e11b57f90fed314bccd25230f918729f/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=79d579f4e11b57f90fed314bccd25230f918729f",
        "patch": "@@ -53,7 +53,8 @@ class PendingWalletTxImpl : public PendingWalletTx\n         WalletOrderForm order_form,\n         std::string& reject_reason) override\n     {\n-        LOCK2(cs_main, m_wallet.cs_wallet);\n+        auto locked_chain = m_wallet.chain().lock();\n+        LOCK(m_wallet.cs_wallet);\n         CValidationState state;\n         if (!m_wallet.CommitTransaction(m_tx, std::move(value_map), std::move(order_form), m_key, g_connman.get(), state)) {\n             reject_reason = state.GetRejectReason();\n@@ -209,22 +210,26 @@ class WalletImpl : public Wallet\n     }\n     void lockCoin(const COutPoint& output) override\n     {\n-        LOCK2(cs_main, m_wallet.cs_wallet);\n+        auto locked_chain = m_wallet.chain().lock();\n+        LOCK(m_wallet.cs_wallet);\n         return m_wallet.LockCoin(output);\n     }\n     void unlockCoin(const COutPoint& output) override\n     {\n-        LOCK2(cs_main, m_wallet.cs_wallet);\n+        auto locked_chain = m_wallet.chain().lock();\n+        LOCK(m_wallet.cs_wallet);\n         return m_wallet.UnlockCoin(output);\n     }\n     bool isLockedCoin(const COutPoint& output) override\n     {\n-        LOCK2(cs_main, m_wallet.cs_wallet);\n+        auto locked_chain = m_wallet.chain().lock();\n+        LOCK(m_wallet.cs_wallet);\n         return m_wallet.IsLockedCoin(output.hash, output.n);\n     }\n     void listLockedCoins(std::vector<COutPoint>& outputs) override\n     {\n-        LOCK2(cs_main, m_wallet.cs_wallet);\n+        auto locked_chain = m_wallet.chain().lock();\n+        LOCK(m_wallet.cs_wallet);\n         return m_wallet.ListLockedCoins(outputs);\n     }\n     std::unique_ptr<PendingWalletTx> createTransaction(const std::vector<CRecipient>& recipients,\n@@ -234,7 +239,8 @@ class WalletImpl : public Wallet\n         CAmount& fee,\n         std::string& fail_reason) override\n     {\n-        LOCK2(cs_main, m_wallet.cs_wallet);\n+        auto locked_chain = m_wallet.chain().lock();\n+        LOCK(m_wallet.cs_wallet);\n         auto pending = MakeUnique<PendingWalletTxImpl>(m_wallet);\n         if (!m_wallet.CreateTransaction(recipients, pending->m_tx, pending->m_key, fee, change_pos,\n                 fail_reason, coin_control, sign)) {\n@@ -245,7 +251,8 @@ class WalletImpl : public Wallet\n     bool transactionCanBeAbandoned(const uint256& txid) override { return m_wallet.TransactionCanBeAbandoned(txid); }\n     bool abandonTransaction(const uint256& txid) override\n     {\n-        LOCK2(cs_main, m_wallet.cs_wallet);\n+        auto locked_chain = m_wallet.chain().lock();\n+        LOCK(m_wallet.cs_wallet);\n         return m_wallet.AbandonTransaction(txid);\n     }\n     bool transactionCanBeBumped(const uint256& txid) override\n@@ -274,7 +281,8 @@ class WalletImpl : public Wallet\n     }\n     CTransactionRef getTx(const uint256& txid) override\n     {\n-        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        auto locked_chain = m_wallet.chain().lock();\n+        LOCK(m_wallet.cs_wallet);\n         auto mi = m_wallet.mapWallet.find(txid);\n         if (mi != m_wallet.mapWallet.end()) {\n             return mi->second.tx;\n@@ -283,7 +291,8 @@ class WalletImpl : public Wallet\n     }\n     WalletTx getWalletTx(const uint256& txid) override\n     {\n-        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        auto locked_chain = m_wallet.chain().lock();\n+        LOCK(m_wallet.cs_wallet);\n         auto mi = m_wallet.mapWallet.find(txid);\n         if (mi != m_wallet.mapWallet.end()) {\n             return MakeWalletTx(m_wallet, mi->second);\n@@ -292,7 +301,8 @@ class WalletImpl : public Wallet\n     }\n     std::vector<WalletTx> getWalletTxs() override\n     {\n-        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        auto locked_chain = m_wallet.chain().lock();\n+        LOCK(m_wallet.cs_wallet);\n         std::vector<WalletTx> result;\n         result.reserve(m_wallet.mapWallet.size());\n         for (const auto& entry : m_wallet.mapWallet) {\n@@ -304,7 +314,7 @@ class WalletImpl : public Wallet\n         interfaces::WalletTxStatus& tx_status,\n         int& num_blocks) override\n     {\n-        TRY_LOCK(::cs_main, locked_chain);\n+        auto locked_chain = m_wallet.chain().lock(true /* try_lock */);\n         if (!locked_chain) {\n             return false;\n         }\n@@ -326,7 +336,8 @@ class WalletImpl : public Wallet\n         bool& in_mempool,\n         int& num_blocks) override\n     {\n-        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        auto locked_chain = m_wallet.chain().lock();\n+        LOCK(m_wallet.cs_wallet);\n         auto mi = m_wallet.mapWallet.find(txid);\n         if (mi != m_wallet.mapWallet.end()) {\n             num_blocks = ::chainActive.Height();\n@@ -353,7 +364,7 @@ class WalletImpl : public Wallet\n     }\n     bool tryGetBalances(WalletBalances& balances, int& num_blocks) override\n     {\n-        TRY_LOCK(cs_main, locked_chain);\n+        auto locked_chain = m_wallet.chain().lock(true /* try_lock */);\n         if (!locked_chain) return false;\n         TRY_LOCK(m_wallet.cs_wallet, locked_wallet);\n         if (!locked_wallet) {\n@@ -370,27 +381,32 @@ class WalletImpl : public Wallet\n     }\n     isminetype txinIsMine(const CTxIn& txin) override\n     {\n-        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        auto locked_chain = m_wallet.chain().lock();\n+        LOCK(m_wallet.cs_wallet);\n         return m_wallet.IsMine(txin);\n     }\n     isminetype txoutIsMine(const CTxOut& txout) override\n     {\n-        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        auto locked_chain = m_wallet.chain().lock();\n+        LOCK(m_wallet.cs_wallet);\n         return m_wallet.IsMine(txout);\n     }\n     CAmount getDebit(const CTxIn& txin, isminefilter filter) override\n     {\n-        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        auto locked_chain = m_wallet.chain().lock();\n+        LOCK(m_wallet.cs_wallet);\n         return m_wallet.GetDebit(txin, filter);\n     }\n     CAmount getCredit(const CTxOut& txout, isminefilter filter) override\n     {\n-        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        auto locked_chain = m_wallet.chain().lock();\n+        LOCK(m_wallet.cs_wallet);\n         return m_wallet.GetCredit(txout, filter);\n     }\n     CoinsList listCoins() override\n     {\n-        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        auto locked_chain = m_wallet.chain().lock();\n+        LOCK(m_wallet.cs_wallet);\n         CoinsList result;\n         for (const auto& entry : m_wallet.ListCoins()) {\n             auto& group = result[entry.first];\n@@ -403,7 +419,8 @@ class WalletImpl : public Wallet\n     }\n     std::vector<WalletTxOut> getCoins(const std::vector<COutPoint>& outputs) override\n     {\n-        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        auto locked_chain = m_wallet.chain().lock();\n+        LOCK(m_wallet.cs_wallet);\n         std::vector<WalletTxOut> result;\n         result.reserve(outputs.size());\n         for (const auto& output : outputs) {"
      },
      {
        "sha": "f02fd8aea7f7fc06de1760fea09dffe655cbdd67",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79d579f4e11b57f90fed314bccd25230f918729f/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79d579f4e11b57f90fed314bccd25230f918729f/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=79d579f4e11b57f90fed314bccd25230f918729f",
        "patch": "@@ -143,7 +143,7 @@ void TestGUI()\n         wallet->AddKeyPubKey(test.coinbaseKey, test.coinbaseKey.GetPubKey());\n     }\n     {\n-        LOCK(cs_main);\n+        auto locked_chain = wallet->chain().lock();\n         WalletRescanReserver reserver(wallet.get());\n         reserver.reserve();\n         wallet->ScanForWalletTransactions(chainActive.Genesis(), nullptr, reserver, true);"
      },
      {
        "sha": "1fb7f13313628b3d0a57f0a505686eb2ea58b4ff",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79d579f4e11b57f90fed314bccd25230f918729f/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79d579f4e11b57f90fed314bccd25230f918729f/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=79d579f4e11b57f90fed314bccd25230f918729f",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <consensus/validation.h>\n+#include <interfaces/chain.h>\n #include <wallet/coincontrol.h>\n #include <wallet/feebumper.h>\n #include <wallet/fees.h>\n@@ -64,7 +65,8 @@ namespace feebumper {\n \n bool TransactionCanBeBumped(const CWallet* wallet, const uint256& txid)\n {\n-    LOCK2(cs_main, wallet->cs_wallet);\n+    auto locked_chain = wallet->chain().lock();\n+    LOCK(wallet->cs_wallet);\n     const CWalletTx* wtx = wallet->GetWalletTx(txid);\n     if (wtx == nullptr) return false;\n \n@@ -76,7 +78,8 @@ bool TransactionCanBeBumped(const CWallet* wallet, const uint256& txid)\n Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoinControl& coin_control, CAmount total_fee, std::vector<std::string>& errors,\n                          CAmount& old_fee, CAmount& new_fee, CMutableTransaction& mtx)\n {\n-    LOCK2(cs_main, wallet->cs_wallet);\n+    auto locked_chain = wallet->chain().lock();\n+    LOCK(wallet->cs_wallet);\n     errors.clear();\n     auto it = wallet->mapWallet.find(txid);\n     if (it == wallet->mapWallet.end()) {\n@@ -212,13 +215,15 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n }\n \n bool SignTransaction(CWallet* wallet, CMutableTransaction& mtx) {\n-    LOCK2(cs_main, wallet->cs_wallet);\n+    auto locked_chain = wallet->chain().lock();\n+    LOCK(wallet->cs_wallet);\n     return wallet->SignTransaction(mtx);\n }\n \n Result CommitTransaction(CWallet* wallet, const uint256& txid, CMutableTransaction&& mtx, std::vector<std::string>& errors, uint256& bumped_txid)\n {\n-    LOCK2(cs_main, wallet->cs_wallet);\n+    auto locked_chain = wallet->chain().lock();\n+    LOCK(wallet->cs_wallet);\n     if (!errors.empty()) {\n         return Result::MISC_ERROR;\n     }"
      },
      {
        "sha": "05e14fd64afca0e4a15134ca35c3d983b63a1f48",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 10,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79d579f4e11b57f90fed314bccd25230f918729f/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79d579f4e11b57f90fed314bccd25230f918729f/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=79d579f4e11b57f90fed314bccd25230f918729f",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chain.h>\n+#include <interfaces/chain.h>\n #include <key_io.h>\n #include <rpc/server.h>\n #include <validation.h>\n@@ -133,7 +134,8 @@ UniValue importprivkey(const JSONRPCRequest& request)\n     WalletRescanReserver reserver(pwallet);\n     bool fRescan = true;\n     {\n-        LOCK2(cs_main, pwallet->cs_wallet);\n+        auto locked_chain = pwallet->chain().lock();\n+        LOCK(pwallet->cs_wallet);\n \n         EnsureWalletIsUnlocked(pwallet);\n \n@@ -305,7 +307,8 @@ UniValue importaddress(const JSONRPCRequest& request)\n         fP2SH = request.params[3].get_bool();\n \n     {\n-        LOCK2(cs_main, pwallet->cs_wallet);\n+        auto locked_chain = pwallet->chain().lock();\n+        LOCK(pwallet->cs_wallet);\n \n         CTxDestination dest = DecodeDestination(request.params[0].get_str());\n         if (IsValidDestination(dest)) {\n@@ -362,7 +365,7 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n     unsigned int txnIndex = 0;\n     if (merkleBlock.txn.ExtractMatches(vMatch, vIndex) == merkleBlock.header.hashMerkleRoot) {\n \n-        LOCK(cs_main);\n+        auto locked_chain = pwallet->chain().lock();\n         const CBlockIndex* pindex = LookupBlockIndex(merkleBlock.header.GetHash());\n         if (!pindex || !chainActive.Contains(pindex)) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found in chain\");\n@@ -382,7 +385,8 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n     wtx.nIndex = txnIndex;\n     wtx.hashBlock = merkleBlock.header.GetHash();\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    auto locked_chain = pwallet->chain().lock();\n+    LOCK(pwallet->cs_wallet);\n \n     if (pwallet->IsMine(*wtx.tx)) {\n         pwallet->AddToWallet(wtx, false);\n@@ -412,7 +416,8 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"removeprunedfunds\", \"\\\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\\\"\")\n         );\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    auto locked_chain = pwallet->chain().lock();\n+    LOCK(pwallet->cs_wallet);\n \n     uint256 hash(ParseHashV(request.params[0], \"txid\"));\n     std::vector<uint256> vHash;\n@@ -483,7 +488,8 @@ UniValue importpubkey(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey is not a valid public key\");\n \n     {\n-        LOCK2(cs_main, pwallet->cs_wallet);\n+        auto locked_chain = pwallet->chain().lock();\n+        LOCK(pwallet->cs_wallet);\n \n         for (const auto& dest : GetAllDestinationsForKey(pubKey)) {\n             ImportAddress(pwallet, dest, strLabel);\n@@ -535,7 +541,8 @@ UniValue importwallet(const JSONRPCRequest& request)\n     int64_t nTimeBegin = 0;\n     bool fGood = true;\n     {\n-        LOCK2(cs_main, pwallet->cs_wallet);\n+        auto locked_chain = pwallet->chain().lock();\n+        LOCK(pwallet->cs_wallet);\n \n         EnsureWalletIsUnlocked(pwallet);\n \n@@ -653,7 +660,8 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"dumpprivkey\", \"\\\"myaddress\\\"\")\n         );\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    auto locked_chain = pwallet->chain().lock();\n+    LOCK(pwallet->cs_wallet);\n \n     EnsureWalletIsUnlocked(pwallet);\n \n@@ -700,7 +708,8 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"dumpwallet\", \"\\\"test\\\"\")\n         );\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    auto locked_chain = pwallet->chain().lock();\n+    LOCK(pwallet->cs_wallet);\n \n     EnsureWalletIsUnlocked(pwallet);\n \n@@ -1134,7 +1143,8 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     int64_t nLowestTimestamp = 0;\n     UniValue response(UniValue::VARR);\n     {\n-        LOCK2(cs_main, pwallet->cs_wallet);\n+        auto locked_chain = pwallet->chain().lock();\n+        LOCK(pwallet->cs_wallet);\n         EnsureWalletIsUnlocked(pwallet);\n \n         // Verify all timestamps are present before importing any keys."
      },
      {
        "sha": "8db7a82476284524a5a98d9caa701c57a3307e23",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 32,
        "changes": 95,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79d579f4e11b57f90fed314bccd25230f918729f/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79d579f4e11b57f90fed314bccd25230f918729f/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=79d579f4e11b57f90fed314bccd25230f918729f",
        "patch": "@@ -9,6 +9,7 @@\n #include <core_io.h>\n #include <httpserver.h>\n #include <init.h>\n+#include <interfaces/chain.h>\n #include <validation.h>\n #include <key_io.h>\n #include <net.h>\n@@ -374,7 +375,8 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    auto locked_chain = pwallet->chain().lock();\n+    LOCK(pwallet->cs_wallet);\n \n     CTxDestination dest = DecodeDestination(request.params[0].get_str());\n     if (!IsValidDestination(dest)) {\n@@ -456,7 +458,8 @@ static UniValue listaddressgroupings(const JSONRPCRequest& request)\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    auto locked_chain = pwallet->chain().lock();\n+    LOCK(pwallet->cs_wallet);\n \n     UniValue jsonGroupings(UniValue::VARR);\n     std::map<CTxDestination, CAmount> balances = pwallet->GetAddressBalances();\n@@ -509,7 +512,8 @@ static UniValue signmessage(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"signmessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", \\\"my message\\\"\")\n         );\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    auto locked_chain = pwallet->chain().lock();\n+    LOCK(pwallet->cs_wallet);\n \n     EnsureWalletIsUnlocked(pwallet);\n \n@@ -575,7 +579,8 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    auto locked_chain = pwallet->chain().lock();\n+    LOCK(pwallet->cs_wallet);\n \n     // Bitcoin address\n     CTxDestination dest = DecodeDestination(request.params[0].get_str());\n@@ -642,7 +647,8 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    auto locked_chain = pwallet->chain().lock();\n+    LOCK(pwallet->cs_wallet);\n \n     // Minimum confirmations\n     int nMinDepth = 1;\n@@ -708,7 +714,8 @@ static UniValue getbalance(const JSONRPCRequest& request)\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    auto locked_chain = pwallet->chain().lock();\n+    LOCK(pwallet->cs_wallet);\n \n     const UniValue& dummy_value = request.params[0];\n     if (!dummy_value.isNull() && dummy_value.get_str() != \"*\") {\n@@ -746,7 +753,8 @@ static UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    auto locked_chain = pwallet->chain().lock();\n+    LOCK(pwallet->cs_wallet);\n \n     return ValueFromAmount(pwallet->GetUnconfirmedBalance());\n }\n@@ -807,7 +815,8 @@ static UniValue sendmany(const JSONRPCRequest& request)\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    auto locked_chain = pwallet->chain().lock();\n+    LOCK(pwallet->cs_wallet);\n \n     if (pwallet->GetBroadcastTransactions() && !g_connman) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n@@ -946,7 +955,8 @@ static UniValue addmultisigaddress(const JSONRPCRequest& request)\n         throw std::runtime_error(msg);\n     }\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    auto locked_chain = pwallet->chain().lock();\n+    LOCK(pwallet->cs_wallet);\n \n     std::string label;\n     if (!request.params[2].isNull())\n@@ -1186,7 +1196,8 @@ static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    auto locked_chain = pwallet->chain().lock();\n+    LOCK(pwallet->cs_wallet);\n \n     return ListReceived(pwallet, request.params, false);\n }\n@@ -1230,7 +1241,8 @@ static UniValue listreceivedbylabel(const JSONRPCRequest& request)\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    auto locked_chain = pwallet->chain().lock();\n+    LOCK(pwallet->cs_wallet);\n \n     return ListReceived(pwallet, request.params, true);\n }\n@@ -1406,7 +1418,8 @@ UniValue listtransactions(const JSONRPCRequest& request)\n     UniValue ret(UniValue::VARR);\n \n     {\n-        LOCK2(cs_main, pwallet->cs_wallet);\n+        auto locked_chain = pwallet->chain().lock();\n+        LOCK(pwallet->cs_wallet);\n \n         const CWallet::TxItems & txOrdered = pwallet->wtxOrdered;\n \n@@ -1506,7 +1519,8 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    auto locked_chain = pwallet->chain().lock();\n+    LOCK(pwallet->cs_wallet);\n \n     const CBlockIndex* pindex = nullptr;    // Block index of the specified block or the common ancestor, if the block provided was in a deactivated chain.\n     const CBlockIndex* paltindex = nullptr; // Block index of the specified block, even if it's in a deactivated chain.\n@@ -1641,7 +1655,8 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    auto locked_chain = pwallet->chain().lock();\n+    LOCK(pwallet->cs_wallet);\n \n     uint256 hash(ParseHashV(request.params[0], \"txid\"));\n \n@@ -1708,7 +1723,8 @@ static UniValue abandontransaction(const JSONRPCRequest& request)\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    auto locked_chain = pwallet->chain().lock();\n+    LOCK(pwallet->cs_wallet);\n \n     uint256 hash(ParseHashV(request.params[0], \"txid\"));\n \n@@ -1747,7 +1763,8 @@ static UniValue backupwallet(const JSONRPCRequest& request)\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    auto locked_chain = pwallet->chain().lock();\n+    LOCK(pwallet->cs_wallet);\n \n     std::string strDest = request.params[0].get_str();\n     if (!pwallet->BackupWallet(strDest)) {\n@@ -1783,7 +1800,8 @@ static UniValue keypoolrefill(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Private keys are disabled for this wallet\");\n     }\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    auto locked_chain = pwallet->chain().lock();\n+    LOCK(pwallet->cs_wallet);\n \n     // 0 is interpreted by TopUpKeyPool() as the default keypool size given by -keypool\n     unsigned int kpSize = 0;\n@@ -1834,7 +1852,8 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n         );\n     }\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    auto locked_chain = pwallet->chain().lock();\n+    LOCK(pwallet->cs_wallet);\n \n     if (!pwallet->IsCrypted()) {\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n@@ -1912,7 +1931,8 @@ static UniValue walletpassphrasechange(const JSONRPCRequest& request)\n         );\n     }\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    auto locked_chain = pwallet->chain().lock();\n+    LOCK(pwallet->cs_wallet);\n \n     if (!pwallet->IsCrypted()) {\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrasechange was called.\");\n@@ -1968,7 +1988,8 @@ static UniValue walletlock(const JSONRPCRequest& request)\n         );\n     }\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    auto locked_chain = pwallet->chain().lock();\n+    LOCK(pwallet->cs_wallet);\n \n     if (!pwallet->IsCrypted()) {\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletlock was called.\");\n@@ -2014,7 +2035,8 @@ static UniValue encryptwallet(const JSONRPCRequest& request)\n         );\n     }\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    auto locked_chain = pwallet->chain().lock();\n+    LOCK(pwallet->cs_wallet);\n \n     if (pwallet->IsCrypted()) {\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an encrypted wallet, but encryptwallet was called.\");\n@@ -2088,7 +2110,8 @@ static UniValue lockunspent(const JSONRPCRequest& request)\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    auto locked_chain = pwallet->chain().lock();\n+    LOCK(pwallet->cs_wallet);\n \n     RPCTypeCheckArgument(request.params[0], UniValue::VBOOL);\n \n@@ -2198,7 +2221,8 @@ static UniValue listlockunspent(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"listlockunspent\", \"\")\n         );\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    auto locked_chain = pwallet->chain().lock();\n+    LOCK(pwallet->cs_wallet);\n \n     std::vector<COutPoint> vOutpts;\n     pwallet->ListLockedCoins(vOutpts);\n@@ -2239,7 +2263,8 @@ static UniValue settxfee(const JSONRPCRequest& request)\n         );\n     }\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    auto locked_chain = pwallet->chain().lock();\n+    LOCK(pwallet->cs_wallet);\n \n     CAmount nAmount = AmountFromValue(request.params[0]);\n     CFeeRate tx_fee_rate(nAmount, 1000);\n@@ -2294,7 +2319,8 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    auto locked_chain = pwallet->chain().lock();\n+    LOCK(pwallet->cs_wallet);\n \n     UniValue obj(UniValue::VOBJ);\n \n@@ -2563,7 +2589,8 @@ static UniValue resendwallettransactions(const JSONRPCRequest& request)\n     if (!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    auto locked_chain = pwallet->chain().lock();\n+    LOCK(pwallet->cs_wallet);\n \n     if (!pwallet->GetBroadcastTransactions()) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Wallet transaction broadcasting is disabled with -walletbroadcast\");\n@@ -2700,7 +2727,8 @@ static UniValue listunspent(const JSONRPCRequest& request)\n     UniValue results(UniValue::VARR);\n     std::vector<COutput> vecOutputs;\n     {\n-        LOCK2(cs_main, pwallet->cs_wallet);\n+        auto locked_chain = pwallet->chain().lock();\n+        LOCK(pwallet->cs_wallet);\n         pwallet->AvailableCoins(vecOutputs, !include_unsafe, nullptr, nMinimumAmount, nMaximumAmount, nMinimumSumAmount, nMaximumCount, nMinDepth, nMaxDepth);\n     }\n \n@@ -3019,7 +3047,8 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n     }\n \n     // Sign the transaction\n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    auto locked_chain = pwallet->chain().lock();\n+    LOCK(pwallet->cs_wallet);\n     EnsureWalletIsUnlocked(pwallet);\n \n     return SignTransaction(pwallet->chain(), mtx, request.params[1], pwallet, false, request.params[2]);\n@@ -3124,7 +3153,8 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    auto locked_chain = pwallet->chain().lock();\n+    LOCK(pwallet->cs_wallet);\n     EnsureWalletIsUnlocked(pwallet);\n \n \n@@ -3264,7 +3294,7 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n     CBlockIndex *pindexStop = nullptr;\n     CBlockIndex *pChainTip = nullptr;\n     {\n-        LOCK(cs_main);\n+        auto locked_chain = pwallet->chain().lock();\n         pindexStart = chainActive.Genesis();\n         pChainTip = chainActive.Tip();\n \n@@ -3288,7 +3318,7 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n \n     // We can't rescan beyond non-pruned blocks, stop and throw an error\n     if (fPruneMode) {\n-        LOCK(cs_main);\n+        auto locked_chain = pwallet->chain().lock();\n         CBlockIndex *block = pindexStop ? pindexStop : pChainTip;\n         while (block && block->nHeight >= pindexStart->nHeight) {\n             if (!(block->nStatus & BLOCK_HAVE_DATA)) {\n@@ -3688,7 +3718,8 @@ UniValue sethdseed(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, \"Cannot set a new HD seed while still in Initial Block Download\");\n     }\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    auto locked_chain = pwallet->chain().lock();\n+    LOCK(pwallet->cs_wallet);\n \n     // Do not do anything to non-HD wallets\n     if (!pwallet->IsHDEnabled()) {"
      },
      {
        "sha": "df3eaff18631aa103bf2af8ae1176887f537ed49",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79d579f4e11b57f90fed314bccd25230f918729f/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79d579f4e11b57f90fed314bccd25230f918729f/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=79d579f4e11b57f90fed314bccd25230f918729f",
        "patch": "@@ -11,6 +11,7 @@\n #include <vector>\n \n #include <consensus/validation.h>\n+#include <interfaces/chain.h>\n #include <rpc/server.h>\n #include <test/test_bitcoin.h>\n #include <validation.h>\n@@ -43,7 +44,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n     CBlockIndex* newTip = chainActive.Tip();\n \n-    LOCK(cs_main);\n+    auto locked_chain = chain->lock();\n \n     // Verify ScanForWalletTransactions picks up transactions in both the old\n     // and new block files.\n@@ -132,7 +133,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n     SetMockTime(KEY_TIME);\n     m_coinbase_txns.emplace_back(CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\n \n-    LOCK(cs_main);\n+    auto locked_chain = chain->lock();\n \n     std::string backup_file = (SetDataDir(\"importwallet_rescan\") / \"wallet.backup\").string();\n \n@@ -187,7 +188,8 @@ BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n     auto chain = interfaces::MakeChain();\n     CWallet wallet(*chain, WalletLocation(), WalletDatabase::CreateDummy());\n     CWalletTx wtx(&wallet, m_coinbase_txns.back());\n-    LOCK2(cs_main, wallet.cs_wallet);\n+    auto locked_chain = chain->lock();\n+    LOCK(wallet.cs_wallet);\n     wtx.hashBlock = chainActive.Tip()->GetBlockHash();\n     wtx.nIndex = 0;\n \n@@ -209,7 +211,7 @@ static int64_t AddTx(CWallet& wallet, uint32_t lockTime, int64_t mockTime, int64\n     SetMockTime(mockTime);\n     CBlockIndex* block = nullptr;\n     if (blockTime > 0) {\n-        LOCK(cs_main);\n+        auto locked_chain = wallet.chain().lock();\n         auto inserted = mapBlockIndex.emplace(GetRandHash(), new CBlockIndex);\n         assert(inserted.second);\n         const uint256& hash = inserted.first->first;\n@@ -317,6 +319,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n     }\n \n     std::unique_ptr<interfaces::Chain> m_chain = interfaces::MakeChain();\n+    std::unique_ptr<interfaces::Chain::Lock> m_locked_chain = m_chain->assumeLocked();  // Temporary. Removed in upcoming lock cleanup\n     std::unique_ptr<CWallet> wallet;\n };\n "
      },
      {
        "sha": "6e657bcdcd075bf4ed79521101bacb3acd6f2b7f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 24,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79d579f4e11b57f90fed314bccd25230f918729f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79d579f4e11b57f90fed314bccd25230f918729f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=79d579f4e11b57f90fed314bccd25230f918729f",
        "patch": "@@ -11,6 +11,7 @@\n #include <consensus/consensus.h>\n #include <consensus/validation.h>\n #include <fs.h>\n+#include <interfaces/chain.h>\n #include <key.h>\n #include <key_io.h>\n #include <keystore.h>\n@@ -1005,7 +1006,8 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const CBlockI\n \n bool CWallet::TransactionCanBeAbandoned(const uint256& hashTx) const\n {\n-    LOCK2(cs_main, cs_wallet);\n+    auto locked_chain = chain().lock();\n+    LOCK(cs_wallet);\n     const CWalletTx* wtx = GetWalletTx(hashTx);\n     return wtx && !wtx->isAbandoned() && wtx->GetDepthInMainChain() == 0 && !wtx->InMempool();\n }\n@@ -1022,7 +1024,8 @@ void CWallet::MarkInputsDirty(const CTransactionRef& tx)\n \n bool CWallet::AbandonTransaction(const uint256& hashTx)\n {\n-    LOCK2(cs_main, cs_wallet);\n+    auto locked_chain_recursive = chain().lock();  // Temporary. Removed in upcoming lock cleanup\n+    LOCK(cs_wallet);\n \n     WalletBatch batch(*database, \"r+\");\n \n@@ -1077,7 +1080,8 @@ bool CWallet::AbandonTransaction(const uint256& hashTx)\n \n void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n {\n-    LOCK2(cs_main, cs_wallet);\n+    auto locked_chain = chain().lock();\n+    LOCK(cs_wallet);\n \n     int conflictconfirms = 0;\n     CBlockIndex* pindex = LookupBlockIndex(hashBlock);\n@@ -1140,7 +1144,8 @@ void CWallet::SyncTransaction(const CTransactionRef& ptx, const CBlockIndex *pin\n }\n \n void CWallet::TransactionAddedToMempool(const CTransactionRef& ptx) {\n-    LOCK2(cs_main, cs_wallet);\n+    auto locked_chain = chain().lock();\n+    LOCK(cs_wallet);\n     SyncTransaction(ptx);\n \n     auto it = mapWallet.find(ptx->GetHash());\n@@ -1158,7 +1163,8 @@ void CWallet::TransactionRemovedFromMempool(const CTransactionRef &ptx) {\n }\n \n void CWallet::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) {\n-    LOCK2(cs_main, cs_wallet);\n+    auto locked_chain = chain().lock();\n+    LOCK(cs_wallet);\n     // TODO: Temporarily ensure that mempool removals are notified before\n     // connected transactions.  This shouldn't matter, but the abandoned\n     // state of transactions in our wallet is currently cleared when we\n@@ -1180,7 +1186,8 @@ void CWallet::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const\n }\n \n void CWallet::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) {\n-    LOCK2(cs_main, cs_wallet);\n+    auto locked_chain = chain().lock();\n+    LOCK(cs_wallet);\n \n     for (const CTransactionRef& ptx : pblock->vtx) {\n         SyncTransaction(ptx);\n@@ -1199,7 +1206,7 @@ void CWallet::BlockUntilSyncedToCurrentChain() {\n         // We could also take cs_wallet here, and call m_last_block_processed\n         // protected by cs_wallet instead of cs_main, but as long as we need\n         // cs_main here anyway, it's easier to just call it cs_main-protected.\n-        LOCK(cs_main);\n+        auto locked_chain = chain().lock();\n         const CBlockIndex* initialChainTip = chainActive.Tip();\n \n         if (m_last_block_processed && m_last_block_processed->GetAncestor(initialChainTip->nHeight) == initialChainTip) {\n@@ -1600,7 +1607,7 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n     // to be scanned.\n     CBlockIndex* startBlock = nullptr;\n     {\n-        LOCK(cs_main);\n+        auto locked_chain = chain().lock();\n         startBlock = chainActive.FindEarliestAtLeast(startTime - TIMESTAMP_WINDOW);\n         WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n     }\n@@ -1652,7 +1659,7 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlock\n         double progress_begin;\n         double progress_end;\n         {\n-            LOCK(cs_main);\n+            auto locked_chain = chain().lock();\n             progress_begin = GuessVerificationProgress(chainParams.TxData(), pindex);\n             if (pindexStop == nullptr) {\n                 tip = chainActive.Tip();\n@@ -1674,7 +1681,8 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlock\n \n             CBlock block;\n             if (ReadBlockFromDisk(block, pindex, Params().GetConsensus())) {\n-                LOCK2(cs_main, cs_wallet);\n+                auto locked_chain = chain().lock();\n+                LOCK(cs_wallet);\n                 if (pindex && !chainActive.Contains(pindex)) {\n                     // Abort scan if current block is no longer active, to prevent\n                     // marking transactions as coming from the wrong block.\n@@ -1691,7 +1699,7 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlock\n                 break;\n             }\n             {\n-                LOCK(cs_main);\n+                auto locked_chain = chain().lock();\n                 pindex = chainActive.Next(pindex);\n                 progress_current = GuessVerificationProgress(chainParams.TxData(), pindex);\n                 if (pindexStop == nullptr && tip != chainActive.Tip()) {\n@@ -1716,7 +1724,8 @@ void CWallet::ReacceptWalletTransactions()\n     // If transactions aren't being broadcasted, don't let them into local mempool either\n     if (!fBroadcastTransactions)\n         return;\n-    LOCK2(cs_main, cs_wallet);\n+    auto locked_chain = chain().lock();\n+    LOCK(cs_wallet);\n     std::map<int64_t, CWalletTx*> mapSorted;\n \n     // Sort pending wallet transactions based on their initial wallet insertion order\n@@ -2007,6 +2016,7 @@ void CWallet::ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman\n \n     // Rebroadcast unconfirmed txes older than 5 minutes before the last\n     // block was found:\n+    auto locked_chain = chain().assumeLocked();  // Temporary. Removed in upcoming lock cleanup\n     std::vector<uint256> relayed = ResendWalletTransactionsBefore(nBestBlockTime-5*60, connman);\n     if (!relayed.empty())\n         WalletLogPrintf(\"%s: rebroadcast %u unconfirmed transactions\\n\", __func__, relayed.size());\n@@ -2027,7 +2037,8 @@ CAmount CWallet::GetBalance(const isminefilter& filter, const int min_depth) con\n {\n     CAmount nTotal = 0;\n     {\n-        LOCK2(cs_main, cs_wallet);\n+        auto locked_chain = chain().lock();\n+        LOCK(cs_wallet);\n         for (const auto& entry : mapWallet)\n         {\n             const CWalletTx* pcoin = &entry.second;\n@@ -2044,7 +2055,8 @@ CAmount CWallet::GetUnconfirmedBalance() const\n {\n     CAmount nTotal = 0;\n     {\n-        LOCK2(cs_main, cs_wallet);\n+        auto locked_chain = chain().lock();\n+        LOCK(cs_wallet);\n         for (const auto& entry : mapWallet)\n         {\n             const CWalletTx* pcoin = &entry.second;\n@@ -2059,7 +2071,8 @@ CAmount CWallet::GetImmatureBalance() const\n {\n     CAmount nTotal = 0;\n     {\n-        LOCK2(cs_main, cs_wallet);\n+        auto locked_chain = chain().lock();\n+        LOCK(cs_wallet);\n         for (const auto& entry : mapWallet)\n         {\n             const CWalletTx* pcoin = &entry.second;\n@@ -2073,7 +2086,8 @@ CAmount CWallet::GetUnconfirmedWatchOnlyBalance() const\n {\n     CAmount nTotal = 0;\n     {\n-        LOCK2(cs_main, cs_wallet);\n+        auto locked_chain = chain().lock();\n+        LOCK(cs_wallet);\n         for (const auto& entry : mapWallet)\n         {\n             const CWalletTx* pcoin = &entry.second;\n@@ -2088,7 +2102,8 @@ CAmount CWallet::GetImmatureWatchOnlyBalance() const\n {\n     CAmount nTotal = 0;\n     {\n-        LOCK2(cs_main, cs_wallet);\n+        auto locked_chain = chain().lock();\n+        LOCK(cs_wallet);\n         for (const auto& entry : mapWallet)\n         {\n             const CWalletTx* pcoin = &entry.second;\n@@ -2106,7 +2121,8 @@ CAmount CWallet::GetImmatureWatchOnlyBalance() const\n // trusted.\n CAmount CWallet::GetLegacyBalance(const isminefilter& filter, int minDepth) const\n {\n-    LOCK2(cs_main, cs_wallet);\n+    auto locked_chain = chain().lock();\n+    LOCK(cs_wallet);\n \n     CAmount balance = 0;\n     for (const auto& entry : mapWallet) {\n@@ -2139,7 +2155,8 @@ CAmount CWallet::GetLegacyBalance(const isminefilter& filter, int minDepth) cons\n \n CAmount CWallet::GetAvailableBalance(const CCoinControl* coinControl) const\n {\n-    LOCK2(cs_main, cs_wallet);\n+    auto locked_chain = chain().lock();\n+    LOCK(cs_wallet);\n \n     CAmount balance = 0;\n     std::vector<COutput> vCoins;\n@@ -2499,7 +2516,8 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n \n     // Acquire the locks to prevent races to the new locked unspents between the\n     // CreateTransaction call and LockCoin calls (when lockUnspents is true).\n-    LOCK2(cs_main, cs_wallet);\n+    auto locked_chain = chain().lock();\n+    LOCK(cs_wallet);\n \n     CReserveKey reservekey(this);\n     CTransactionRef tx_new;\n@@ -2624,7 +2642,8 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n     int nBytes;\n     {\n         std::set<CInputCoin> setCoins;\n-        LOCK2(cs_main, cs_wallet);\n+        auto locked_chain = chain().lock();\n+        LOCK(cs_wallet);\n         {\n             std::vector<COutput> vAvailableCoins;\n             AvailableCoins(vAvailableCoins, true, &coin_control);\n@@ -2962,7 +2981,8 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm, CReserveKey& reservekey, CConnman* connman, CValidationState& state)\n {\n     {\n-        LOCK2(cs_main, cs_wallet);\n+        auto locked_chain = chain().lock();\n+        LOCK(cs_wallet);\n \n         CWalletTx wtxNew(this, std::move(tx));\n         wtxNew.mapValue = std::move(mapValue);\n@@ -3008,7 +3028,8 @@ bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::ve\n \n DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n {\n-    LOCK2(cs_main, cs_wallet);\n+    auto locked_chain = chain().lock();\n+    LOCK(cs_wallet);\n \n     fFirstRunRet = false;\n     DBErrors nLoadWalletRet = WalletBatch(*database,\"cr+\").LoadWallet(this);\n@@ -4010,6 +4031,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             return nullptr;\n         }\n \n+        auto locked_chain = chain.assumeLocked();  // Temporary. Removed in upcoming lock cleanup\n         walletInstance->ChainStateFlushed(chainActive.GetLocator());\n     } else if (wallet_creation_flags & WALLET_FLAG_DISABLE_PRIVATE_KEYS) {\n         // Make it impossible to disable private keys after creation\n@@ -4097,7 +4119,8 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     // Try to top up keypool. No-op if the wallet is locked.\n     walletInstance->TopUpKeyPool();\n \n-    LOCK2(cs_main, walletInstance->cs_wallet);\n+    auto locked_chain = chain.lock();\n+    LOCK(walletInstance->cs_wallet);\n \n     CBlockIndex *pindexRescan = chainActive.Genesis();\n     if (!gArgs.GetBoolArg(\"-rescan\", false))"
      }
    ]
  },
  {
    "sha": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODFhY2NiODc1NDEyZjM4NzE4ZjJlNDBlZDdiYmRmMTVlNmY0ZWY4",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-07-31T19:30:21Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-11-06T15:44:40Z"
      },
      "message": "Pass chain locked variables where needed\n\nThis commit does not change behavior. All it does is pass new function\nparameters.\n\nIt is easiest to review this change with:\n\n    git log -p -n1 -U0 --word-diff-regex=.",
      "tree": {
        "sha": "3984957eb798aa5ea1c07af07d54ed9f8c8723b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3984957eb798aa5ea1c07af07d54ed9f8c8723b3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/081accb875412f38718f2e40ed7bbdf15e6f4ef8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/081accb875412f38718f2e40ed7bbdf15e6f4ef8/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "79d579f4e11b57f90fed314bccd25230f918729f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79d579f4e11b57f90fed314bccd25230f918729f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/79d579f4e11b57f90fed314bccd25230f918729f"
      }
    ],
    "stats": {
      "total": 327,
      "additions": 175,
      "deletions": 152
    },
    "files": [
      {
        "sha": "672a557d4165cd59ce449eb5d5b137f1bbec70dc",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 21,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/081accb875412f38718f2e40ed7bbdf15e6f4ef8/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/081accb875412f38718f2e40ed7bbdf15e6f4ef8/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=081accb875412f38718f2e40ed7bbdf15e6f4ef8",
        "patch": "@@ -69,7 +69,7 @@ class PendingWalletTxImpl : public PendingWalletTx\n };\n \n //! Construct wallet tx struct.\n-static WalletTx MakeWalletTx(CWallet& wallet, const CWalletTx& wtx) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+WalletTx MakeWalletTx(interfaces::Chain::Lock& locked_chain, CWallet& wallet, const CWalletTx& wtx)\n {\n     WalletTx result;\n     result.tx = wtx.tx;\n@@ -87,7 +87,7 @@ static WalletTx MakeWalletTx(CWallet& wallet, const CWalletTx& wtx) EXCLUSIVE_LO\n                                                       IsMine(wallet, result.txout_address.back()) :\n                                                       ISMINE_NO);\n     }\n-    result.credit = wtx.GetCredit(ISMINE_ALL);\n+    result.credit = wtx.GetCredit(locked_chain, ISMINE_ALL);\n     result.debit = wtx.GetDebit(ISMINE_ALL);\n     result.change = wtx.GetChange();\n     result.time = wtx.GetTxTime();\n@@ -97,32 +97,38 @@ static WalletTx MakeWalletTx(CWallet& wallet, const CWalletTx& wtx) EXCLUSIVE_LO\n }\n \n //! Construct wallet tx status struct.\n-static WalletTxStatus MakeWalletTxStatus(const CWalletTx& wtx) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+WalletTxStatus MakeWalletTxStatus(interfaces::Chain::Lock& locked_chain, const CWalletTx& wtx)\n {\n+    LockAnnotation lock(::cs_main); // Temporary, for CheckFinalTx below. Removed in upcoming commit.\n+\n     WalletTxStatus result;\n     auto mi = ::mapBlockIndex.find(wtx.hashBlock);\n     CBlockIndex* block = mi != ::mapBlockIndex.end() ? mi->second : nullptr;\n     result.block_height = (block ? block->nHeight : std::numeric_limits<int>::max());\n-    result.blocks_to_maturity = wtx.GetBlocksToMaturity();\n-    result.depth_in_main_chain = wtx.GetDepthInMainChain();\n+    result.blocks_to_maturity = wtx.GetBlocksToMaturity(locked_chain);\n+    result.depth_in_main_chain = wtx.GetDepthInMainChain(locked_chain);\n     result.time_received = wtx.nTimeReceived;\n     result.lock_time = wtx.tx->nLockTime;\n     result.is_final = CheckFinalTx(*wtx.tx);\n-    result.is_trusted = wtx.IsTrusted();\n+    result.is_trusted = wtx.IsTrusted(locked_chain);\n     result.is_abandoned = wtx.isAbandoned();\n     result.is_coinbase = wtx.IsCoinBase();\n-    result.is_in_main_chain = wtx.IsInMainChain();\n+    result.is_in_main_chain = wtx.IsInMainChain(locked_chain);\n     return result;\n }\n \n //! Construct wallet TxOut struct.\n-static WalletTxOut MakeWalletTxOut(CWallet& wallet, const CWalletTx& wtx, int n, int depth) EXCLUSIVE_LOCKS_REQUIRED(cs_main, wallet.cs_wallet)\n+WalletTxOut MakeWalletTxOut(interfaces::Chain::Lock& locked_chain,\n+    CWallet& wallet,\n+    const CWalletTx& wtx,\n+    int n,\n+    int depth) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet)\n {\n     WalletTxOut result;\n     result.txout = wtx.tx->vout[n];\n     result.time = wtx.GetTxTime();\n     result.depth_in_main_chain = depth;\n-    result.is_spent = wallet.IsSpent(wtx.GetHash(), n);\n+    result.is_spent = wallet.IsSpent(locked_chain, wtx.GetHash(), n);\n     return result;\n }\n \n@@ -242,7 +248,7 @@ class WalletImpl : public Wallet\n         auto locked_chain = m_wallet.chain().lock();\n         LOCK(m_wallet.cs_wallet);\n         auto pending = MakeUnique<PendingWalletTxImpl>(m_wallet);\n-        if (!m_wallet.CreateTransaction(recipients, pending->m_tx, pending->m_key, fee, change_pos,\n+        if (!m_wallet.CreateTransaction(*locked_chain, recipients, pending->m_tx, pending->m_key, fee, change_pos,\n                 fail_reason, coin_control, sign)) {\n             return {};\n         }\n@@ -253,7 +259,7 @@ class WalletImpl : public Wallet\n     {\n         auto locked_chain = m_wallet.chain().lock();\n         LOCK(m_wallet.cs_wallet);\n-        return m_wallet.AbandonTransaction(txid);\n+        return m_wallet.AbandonTransaction(*locked_chain, txid);\n     }\n     bool transactionCanBeBumped(const uint256& txid) override\n     {\n@@ -295,7 +301,7 @@ class WalletImpl : public Wallet\n         LOCK(m_wallet.cs_wallet);\n         auto mi = m_wallet.mapWallet.find(txid);\n         if (mi != m_wallet.mapWallet.end()) {\n-            return MakeWalletTx(m_wallet, mi->second);\n+            return MakeWalletTx(*locked_chain, m_wallet, mi->second);\n         }\n         return {};\n     }\n@@ -306,7 +312,7 @@ class WalletImpl : public Wallet\n         std::vector<WalletTx> result;\n         result.reserve(m_wallet.mapWallet.size());\n         for (const auto& entry : m_wallet.mapWallet) {\n-            result.emplace_back(MakeWalletTx(m_wallet, entry.second));\n+            result.emplace_back(MakeWalletTx(*locked_chain, m_wallet, entry.second));\n         }\n         return result;\n     }\n@@ -327,7 +333,7 @@ class WalletImpl : public Wallet\n             return false;\n         }\n         num_blocks = ::chainActive.Height();\n-        tx_status = MakeWalletTxStatus(mi->second);\n+        tx_status = MakeWalletTxStatus(*locked_chain, mi->second);\n         return true;\n     }\n     WalletTx getWalletTxDetails(const uint256& txid,\n@@ -343,8 +349,8 @@ class WalletImpl : public Wallet\n             num_blocks = ::chainActive.Height();\n             in_mempool = mi->second.InMempool();\n             order_form = mi->second.vOrderForm;\n-            tx_status = MakeWalletTxStatus(mi->second);\n-            return MakeWalletTx(m_wallet, mi->second);\n+            tx_status = MakeWalletTxStatus(*locked_chain, mi->second);\n+            return MakeWalletTx(*locked_chain, m_wallet, mi->second);\n         }\n         return {};\n     }\n@@ -408,11 +414,11 @@ class WalletImpl : public Wallet\n         auto locked_chain = m_wallet.chain().lock();\n         LOCK(m_wallet.cs_wallet);\n         CoinsList result;\n-        for (const auto& entry : m_wallet.ListCoins()) {\n+        for (const auto& entry : m_wallet.ListCoins(*locked_chain)) {\n             auto& group = result[entry.first];\n             for (const auto& coin : entry.second) {\n-                group.emplace_back(\n-                    COutPoint(coin.tx->GetHash(), coin.i), MakeWalletTxOut(m_wallet, *coin.tx, coin.i, coin.nDepth));\n+                group.emplace_back(COutPoint(coin.tx->GetHash(), coin.i),\n+                    MakeWalletTxOut(*locked_chain, m_wallet, *coin.tx, coin.i, coin.nDepth));\n             }\n         }\n         return result;\n@@ -427,9 +433,9 @@ class WalletImpl : public Wallet\n             result.emplace_back();\n             auto it = m_wallet.mapWallet.find(output.hash);\n             if (it != m_wallet.mapWallet.end()) {\n-                int depth = it->second.GetDepthInMainChain();\n+                int depth = it->second.GetDepthInMainChain(*locked_chain);\n                 if (depth >= 0) {\n-                    result.back() = MakeWalletTxOut(m_wallet, it->second, output.n, depth);\n+                    result.back() = MakeWalletTxOut(*locked_chain, m_wallet, it->second, output.n, depth);\n                 }\n             }\n         }"
      },
      {
        "sha": "33acddc65cf462c6de5fc84a9301ddfce16993de",
        "filename": "src/threadsafety.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/081accb875412f38718f2e40ed7bbdf15e6f4ef8/src/threadsafety.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/081accb875412f38718f2e40ed7bbdf15e6f4ef8/src/threadsafety.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/threadsafety.h?ref=081accb875412f38718f2e40ed7bbdf15e6f4ef8",
        "patch": "@@ -54,4 +54,15 @@\n #define ASSERT_EXCLUSIVE_LOCK(...)\n #endif // __GNUC__\n \n+// Utility class for indicating to compiler thread analysis that a mutex is\n+// locked (when it couldn't be determined otherwise).\n+struct SCOPED_LOCKABLE LockAnnotation\n+{\n+    template <typename Mutex>\n+    explicit LockAnnotation(Mutex& mutex) EXCLUSIVE_LOCK_FUNCTION(mutex)\n+    {\n+    }\n+    ~LockAnnotation() UNLOCK_FUNCTION() {}\n+};\n+\n #endif // BITCOIN_THREADSAFETY_H"
      },
      {
        "sha": "7a71aea7155995142c64f1bef671d8344c965fb1",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/081accb875412f38718f2e40ed7bbdf15e6f4ef8/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/081accb875412f38718f2e40ed7bbdf15e6f4ef8/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=081accb875412f38718f2e40ed7bbdf15e6f4ef8",
        "patch": "@@ -19,7 +19,7 @@\n \n //! Check whether transaction has descendant in wallet or mempool, or has been\n //! mined, or conflicts with a mined transaction. Return a feebumper::Result.\n-static feebumper::Result PreconditionChecks(const CWallet* wallet, const CWalletTx& wtx, std::vector<std::string>& errors) EXCLUSIVE_LOCKS_REQUIRED(cs_main, wallet->cs_wallet)\n+static feebumper::Result PreconditionChecks(interfaces::Chain::Lock& locked_chain, const CWallet* wallet, const CWalletTx& wtx, std::vector<std::string>& errors) EXCLUSIVE_LOCKS_REQUIRED(wallet->cs_wallet)\n {\n     if (wallet->HasWalletSpend(wtx.GetHash())) {\n         errors.push_back(\"Transaction has descendants in the wallet\");\n@@ -35,7 +35,7 @@ static feebumper::Result PreconditionChecks(const CWallet* wallet, const CWallet\n         }\n     }\n \n-    if (wtx.GetDepthInMainChain() != 0) {\n+    if (wtx.GetDepthInMainChain(locked_chain) != 0) {\n         errors.push_back(\"Transaction has been mined, or is conflicted with a mined transaction\");\n         return feebumper::Result::WALLET_ERROR;\n     }\n@@ -71,7 +71,7 @@ bool TransactionCanBeBumped(const CWallet* wallet, const uint256& txid)\n     if (wtx == nullptr) return false;\n \n     std::vector<std::string> errors_dummy;\n-    feebumper::Result res = PreconditionChecks(wallet, *wtx, errors_dummy);\n+    feebumper::Result res = PreconditionChecks(*locked_chain, wallet, *wtx, errors_dummy);\n     return res == feebumper::Result::OK;\n }\n \n@@ -88,7 +88,7 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n     }\n     const CWalletTx& wtx = it->second;\n \n-    Result result = PreconditionChecks(wallet, wtx, errors);\n+    Result result = PreconditionChecks(*locked_chain, wallet, wtx, errors);\n     if (result != Result::OK) {\n         return result;\n     }\n@@ -235,7 +235,7 @@ Result CommitTransaction(CWallet* wallet, const uint256& txid, CMutableTransacti\n     CWalletTx& oldWtx = it->second;\n \n     // make sure the transaction still has no descendants and hasn't been mined in the meantime\n-    Result result = PreconditionChecks(wallet, oldWtx, errors);\n+    Result result = PreconditionChecks(*locked_chain, wallet, oldWtx, errors);\n     if (result != Result::OK) {\n         return result;\n     }"
      },
      {
        "sha": "e1e4fc51fe27f7dd67c7e64d2e883d93f250a54d",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/081accb875412f38718f2e40ed7bbdf15e6f4ef8/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/081accb875412f38718f2e40ed7bbdf15e6f4ef8/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=081accb875412f38718f2e40ed7bbdf15e6f4ef8",
        "patch": "@@ -732,7 +732,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n \n     std::map<CTxDestination, int64_t> mapKeyBirth;\n     const std::map<CKeyID, int64_t>& mapKeyPool = pwallet->GetAllReserveKeys();\n-    pwallet->GetKeyBirthTimes(mapKeyBirth);\n+    pwallet->GetKeyBirthTimes(*locked_chain, mapKeyBirth);\n \n     std::set<CScriptID> scripts = pwallet->GetCScripts();\n     // TODO: include scripts in GetKeyBirthTimes() output instead of separate"
      },
      {
        "sha": "5a89448e023a0dafe3c334cb6e69a8159ee19d96",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 31,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/081accb875412f38718f2e40ed7bbdf15e6f4ef8/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/081accb875412f38718f2e40ed7bbdf15e6f4ef8/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=081accb875412f38718f2e40ed7bbdf15e6f4ef8",
        "patch": "@@ -91,9 +91,9 @@ void EnsureWalletIsUnlocked(CWallet * const pwallet)\n     }\n }\n \n-static void WalletTxToJSON(interfaces::Chain& chain, const CWalletTx& wtx, UniValue& entry) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static void WalletTxToJSON(interfaces::Chain& chain, interfaces::Chain::Lock& locked_chain, const CWalletTx& wtx, UniValue& entry)\n {\n-    int confirms = wtx.GetDepthInMainChain();\n+    int confirms = wtx.GetDepthInMainChain(locked_chain);\n     entry.pushKV(\"confirmations\", confirms);\n     if (wtx.IsCoinBase())\n         entry.pushKV(\"generated\", true);\n@@ -103,7 +103,7 @@ static void WalletTxToJSON(interfaces::Chain& chain, const CWalletTx& wtx, UniVa\n         entry.pushKV(\"blockindex\", wtx.nIndex);\n         entry.pushKV(\"blocktime\", LookupBlockIndex(wtx.hashBlock)->GetBlockTime());\n     } else {\n-        entry.pushKV(\"trusted\", wtx.IsTrusted());\n+        entry.pushKV(\"trusted\", wtx.IsTrusted(locked_chain));\n     }\n     uint256 hash = wtx.GetHash();\n     entry.pushKV(\"txid\", hash.GetHex());\n@@ -292,7 +292,7 @@ static UniValue setlabel(const JSONRPCRequest& request)\n }\n \n \n-static CTransactionRef SendMoney(CWallet * const pwallet, const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, const CCoinControl& coin_control, mapValue_t mapValue)\n+static CTransactionRef SendMoney(interfaces::Chain::Lock& locked_chain, CWallet * const pwallet, const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, const CCoinControl& coin_control, mapValue_t mapValue)\n {\n     CAmount curBalance = pwallet->GetBalance();\n \n@@ -319,7 +319,7 @@ static CTransactionRef SendMoney(CWallet * const pwallet, const CTxDestination &\n     CRecipient recipient = {scriptPubKey, nValue, fSubtractFeeFromAmount};\n     vecSend.push_back(recipient);\n     CTransactionRef tx;\n-    if (!pwallet->CreateTransaction(vecSend, tx, reservekey, nFeeRequired, nChangePosRet, strError, coin_control)) {\n+    if (!pwallet->CreateTransaction(locked_chain, vecSend, tx, reservekey, nFeeRequired, nChangePosRet, strError, coin_control)) {\n         if (!fSubtractFeeFromAmount && nValue + nFeeRequired > curBalance)\n             strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s\", FormatMoney(nFeeRequired));\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n@@ -418,7 +418,7 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n \n     EnsureWalletIsUnlocked(pwallet);\n \n-    CTransactionRef tx = SendMoney(pwallet, dest, nAmount, fSubtractFeeFromAmount, coin_control, std::move(mapValue));\n+    CTransactionRef tx = SendMoney(*locked_chain, pwallet, dest, nAmount, fSubtractFeeFromAmount, coin_control, std::move(mapValue));\n     return tx->GetHash().GetHex();\n }\n \n@@ -462,7 +462,7 @@ static UniValue listaddressgroupings(const JSONRPCRequest& request)\n     LOCK(pwallet->cs_wallet);\n \n     UniValue jsonGroupings(UniValue::VARR);\n-    std::map<CTxDestination, CAmount> balances = pwallet->GetAddressBalances();\n+    std::map<CTxDestination, CAmount> balances = pwallet->GetAddressBalances(*locked_chain);\n     for (const std::set<CTxDestination>& grouping : pwallet->GetAddressGroupings()) {\n         UniValue jsonGrouping(UniValue::VARR);\n         for (const CTxDestination& address : grouping)\n@@ -579,6 +579,7 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n \n+    LockAnnotation lock(::cs_main); // Temporary, for CheckFinalTx below. Removed in upcoming commit.\n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n \n@@ -606,7 +607,7 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n \n         for (const CTxOut& txout : wtx.tx->vout)\n             if (txout.scriptPubKey == scriptPubKey)\n-                if (wtx.GetDepthInMainChain() >= nMinDepth)\n+                if (wtx.GetDepthInMainChain(*locked_chain) >= nMinDepth)\n                     nAmount += txout.nValue;\n     }\n \n@@ -647,6 +648,7 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n \n+    LockAnnotation lock(::cs_main); // Temporary, for CheckFinalTx below. Removed in upcoming commit.\n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n \n@@ -670,7 +672,7 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n         {\n             CTxDestination address;\n             if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*pwallet, address) && setAddress.count(address)) {\n-                if (wtx.GetDepthInMainChain() >= nMinDepth)\n+                if (wtx.GetDepthInMainChain(*locked_chain) >= nMinDepth)\n                     nAmount += txout.nValue;\n             }\n         }\n@@ -902,7 +904,7 @@ static UniValue sendmany(const JSONRPCRequest& request)\n     int nChangePosRet = -1;\n     std::string strFailReason;\n     CTransactionRef tx;\n-    bool fCreated = pwallet->CreateTransaction(vecSend, tx, keyChange, nFeeRequired, nChangePosRet, strFailReason, coin_control);\n+    bool fCreated = pwallet->CreateTransaction(*locked_chain, vecSend, tx, keyChange, nFeeRequired, nChangePosRet, strFailReason, coin_control);\n     if (!fCreated)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n     CValidationState state;\n@@ -1007,8 +1009,10 @@ struct tallyitem\n     }\n };\n \n-static UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool by_label) EXCLUSIVE_LOCKS_REQUIRED(cs_main, pwallet->cs_wallet)\n+static UniValue ListReceived(interfaces::Chain::Lock& locked_chain, CWallet * const pwallet, const UniValue& params, bool by_label) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n+    LockAnnotation lock(::cs_main); // Temporary, for CheckFinalTx below. Removed in upcoming commit.\n+\n     // Minimum confirmations\n     int nMinDepth = 1;\n     if (!params[0].isNull())\n@@ -1042,7 +1046,7 @@ static UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bo\n         if (wtx.IsCoinBase() || !CheckFinalTx(*wtx.tx))\n             continue;\n \n-        int nDepth = wtx.GetDepthInMainChain();\n+        int nDepth = wtx.GetDepthInMainChain(locked_chain);\n         if (nDepth < nMinDepth)\n             continue;\n \n@@ -1199,7 +1203,7 @@ static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n \n-    return ListReceived(pwallet, request.params, false);\n+    return ListReceived(*locked_chain, pwallet, request.params, false);\n }\n \n static UniValue listreceivedbylabel(const JSONRPCRequest& request)\n@@ -1244,7 +1248,7 @@ static UniValue listreceivedbylabel(const JSONRPCRequest& request)\n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n \n-    return ListReceived(pwallet, request.params, true);\n+    return ListReceived(*locked_chain, pwallet, request.params, true);\n }\n \n static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n@@ -1264,7 +1268,7 @@ static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n  * @param  ret        The UniValue into which the result is stored.\n  * @param  filter     The \"is mine\" filter bool.\n  */\n-static void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static void ListTransactions(interfaces::Chain::Lock& locked_chain, CWallet* const pwallet, const CWalletTx& wtx, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter)\n {\n     CAmount nFee;\n     std::list<COutputEntry> listReceived;\n@@ -1292,14 +1296,14 @@ static void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, int n\n             entry.pushKV(\"vout\", s.vout);\n             entry.pushKV(\"fee\", ValueFromAmount(-nFee));\n             if (fLong)\n-                WalletTxToJSON(pwallet->chain(), wtx, entry);\n+                WalletTxToJSON(pwallet->chain(), locked_chain, wtx, entry);\n             entry.pushKV(\"abandoned\", wtx.isAbandoned());\n             ret.push_back(entry);\n         }\n     }\n \n     // Received\n-    if (listReceived.size() > 0 && wtx.GetDepthInMainChain() >= nMinDepth)\n+    if (listReceived.size() > 0 && wtx.GetDepthInMainChain(locked_chain) >= nMinDepth)\n     {\n         for (const COutputEntry& r : listReceived)\n         {\n@@ -1314,9 +1318,9 @@ static void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, int n\n             MaybePushAddress(entry, r.destination);\n             if (wtx.IsCoinBase())\n             {\n-                if (wtx.GetDepthInMainChain() < 1)\n+                if (wtx.GetDepthInMainChain(locked_chain) < 1)\n                     entry.pushKV(\"category\", \"orphan\");\n-                else if (wtx.IsImmatureCoinBase())\n+                else if (wtx.IsImmatureCoinBase(locked_chain))\n                     entry.pushKV(\"category\", \"immature\");\n                 else\n                     entry.pushKV(\"category\", \"generate\");\n@@ -1331,7 +1335,7 @@ static void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, int n\n             }\n             entry.pushKV(\"vout\", r.vout);\n             if (fLong)\n-                WalletTxToJSON(pwallet->chain(), wtx, entry);\n+                WalletTxToJSON(pwallet->chain(), locked_chain, wtx, entry);\n             ret.push_back(entry);\n         }\n     }\n@@ -1427,7 +1431,7 @@ UniValue listtransactions(const JSONRPCRequest& request)\n         for (CWallet::TxItems::const_reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n         {\n             CWalletTx *const pwtx = (*it).second;\n-            ListTransactions(pwallet, *pwtx, 0, true, ret, filter);\n+            ListTransactions(*locked_chain, pwallet, *pwtx, 0, true, ret, filter);\n             if ((int)ret.size() >= (nCount+nFrom)) break;\n         }\n     }\n@@ -1563,8 +1567,8 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n     for (const std::pair<const uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n         CWalletTx tx = pairWtx.second;\n \n-        if (depth == -1 || tx.GetDepthInMainChain() < depth) {\n-            ListTransactions(pwallet, tx, 0, true, transactions, filter);\n+        if (depth == -1 || tx.GetDepthInMainChain(*locked_chain) < depth) {\n+            ListTransactions(*locked_chain, pwallet, tx, 0, true, transactions, filter);\n         }\n     }\n \n@@ -1581,7 +1585,7 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n             if (it != pwallet->mapWallet.end()) {\n                 // We want all transactions regardless of confirmation count to appear here,\n                 // even negative confirmation ones, hence the big negative.\n-                ListTransactions(pwallet, it->second, -100000000, true, removed, filter);\n+                ListTransactions(*locked_chain, pwallet, it->second, -100000000, true, removed, filter);\n             }\n         }\n         paltindex = paltindex->pprev;\n@@ -1672,7 +1676,7 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n     }\n     const CWalletTx& wtx = it->second;\n \n-    CAmount nCredit = wtx.GetCredit(filter);\n+    CAmount nCredit = wtx.GetCredit(*locked_chain, filter);\n     CAmount nDebit = wtx.GetDebit(filter);\n     CAmount nNet = nCredit - nDebit;\n     CAmount nFee = (wtx.IsFromMe(filter) ? wtx.tx->GetValueOut() - nDebit : 0);\n@@ -1681,10 +1685,10 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n     if (wtx.IsFromMe(filter))\n         entry.pushKV(\"fee\", ValueFromAmount(nFee));\n \n-    WalletTxToJSON(pwallet->chain(), wtx, entry);\n+    WalletTxToJSON(pwallet->chain(), *locked_chain, wtx, entry);\n \n     UniValue details(UniValue::VARR);\n-    ListTransactions(pwallet, wtx, 0, false, details, filter);\n+    ListTransactions(*locked_chain, pwallet, wtx, 0, false, details, filter);\n     entry.pushKV(\"details\", details);\n \n     std::string strHex = EncodeHexTx(*wtx.tx, RPCSerializationFlags());\n@@ -1731,7 +1735,7 @@ static UniValue abandontransaction(const JSONRPCRequest& request)\n     if (!pwallet->mapWallet.count(hash)) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n     }\n-    if (!pwallet->AbandonTransaction(hash)) {\n+    if (!pwallet->AbandonTransaction(*locked_chain, hash)) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction not eligible for abandonment\");\n     }\n \n@@ -2160,7 +2164,7 @@ static UniValue lockunspent(const JSONRPCRequest& request)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, vout index out of bounds\");\n         }\n \n-        if (pwallet->IsSpent(outpt.hash, outpt.n)) {\n+        if (pwallet->IsSpent(*locked_chain, outpt.hash, outpt.n)) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected unspent output\");\n         }\n \n@@ -2596,7 +2600,7 @@ static UniValue resendwallettransactions(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Wallet transaction broadcasting is disabled with -walletbroadcast\");\n     }\n \n-    std::vector<uint256> txids = pwallet->ResendWalletTransactionsBefore(GetTime(), g_connman.get());\n+    std::vector<uint256> txids = pwallet->ResendWalletTransactionsBefore(*locked_chain, GetTime(), g_connman.get());\n     UniValue result(UniValue::VARR);\n     for (const uint256& txid : txids)\n     {\n@@ -2729,7 +2733,7 @@ static UniValue listunspent(const JSONRPCRequest& request)\n     {\n         auto locked_chain = pwallet->chain().lock();\n         LOCK(pwallet->cs_wallet);\n-        pwallet->AvailableCoins(vecOutputs, !include_unsafe, nullptr, nMinimumAmount, nMaximumAmount, nMinimumSumAmount, nMaximumCount, nMinDepth, nMaxDepth);\n+        pwallet->AvailableCoins(*locked_chain, vecOutputs, !include_unsafe, nullptr, nMinimumAmount, nMaximumAmount, nMinimumSumAmount, nMaximumCount, nMinDepth, nMaxDepth);\n     }\n \n     LOCK(pwallet->cs_wallet);"
      },
      {
        "sha": "c6aac8aad5666df1fc24ca74cb12f19a5a649abb",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/081accb875412f38718f2e40ed7bbdf15e6f4ef8/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/081accb875412f38718f2e40ed7bbdf15e6f4ef8/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=081accb875412f38718f2e40ed7bbdf15e6f4ef8",
        "patch": "@@ -195,13 +195,13 @@ BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n \n     // Call GetImmatureCredit() once before adding the key to the wallet to\n     // cache the current immature credit amount, which is 0.\n-    BOOST_CHECK_EQUAL(wtx.GetImmatureCredit(), 0);\n+    BOOST_CHECK_EQUAL(wtx.GetImmatureCredit(*locked_chain), 0);\n \n     // Invalidate the cached value, add the key, and make sure a new immature\n     // credit amount is calculated.\n     wtx.MarkDirty();\n     wallet.AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n-    BOOST_CHECK_EQUAL(wtx.GetImmatureCredit(), 50*COIN);\n+    BOOST_CHECK_EQUAL(wtx.GetImmatureCredit(*locked_chain), 50*COIN);\n }\n \n static int64_t AddTx(CWallet& wallet, uint32_t lockTime, int64_t mockTime, int64_t blockTime)\n@@ -302,7 +302,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         int changePos = -1;\n         std::string error;\n         CCoinControl dummy;\n-        BOOST_CHECK(wallet->CreateTransaction({recipient}, tx, reservekey, fee, changePos, error, dummy));\n+        BOOST_CHECK(wallet->CreateTransaction(*m_locked_chain, {recipient}, tx, reservekey, fee, changePos, error, dummy));\n         CValidationState state;\n         BOOST_CHECK(wallet->CommitTransaction(tx, {}, {}, reservekey, nullptr, state));\n         CMutableTransaction blocktx;\n@@ -332,7 +332,7 @@ BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n     std::map<CTxDestination, std::vector<COutput>> list;\n     {\n         LOCK2(cs_main, wallet->cs_wallet);\n-        list = wallet->ListCoins();\n+        list = wallet->ListCoins(*m_locked_chain);\n     }\n     BOOST_CHECK_EQUAL(list.size(), 1U);\n     BOOST_CHECK_EQUAL(boost::get<CKeyID>(list.begin()->first).ToString(), coinbaseAddress);\n@@ -348,7 +348,7 @@ BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n     AddTx(CRecipient{GetScriptForRawPubKey({}), 1 * COIN, false /* subtract fee */});\n     {\n         LOCK2(cs_main, wallet->cs_wallet);\n-        list = wallet->ListCoins();\n+        list = wallet->ListCoins(*m_locked_chain);\n     }\n     BOOST_CHECK_EQUAL(list.size(), 1U);\n     BOOST_CHECK_EQUAL(boost::get<CKeyID>(list.begin()->first).ToString(), coinbaseAddress);\n@@ -358,7 +358,7 @@ BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n     {\n         LOCK2(cs_main, wallet->cs_wallet);\n         std::vector<COutput> available;\n-        wallet->AvailableCoins(available);\n+        wallet->AvailableCoins(*m_locked_chain, available);\n         BOOST_CHECK_EQUAL(available.size(), 2U);\n     }\n     for (const auto& group : list) {\n@@ -370,14 +370,14 @@ BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n     {\n         LOCK2(cs_main, wallet->cs_wallet);\n         std::vector<COutput> available;\n-        wallet->AvailableCoins(available);\n+        wallet->AvailableCoins(*m_locked_chain, available);\n         BOOST_CHECK_EQUAL(available.size(), 0U);\n     }\n     // Confirm ListCoins still returns same result as before, despite coins\n     // being locked.\n     {\n         LOCK2(cs_main, wallet->cs_wallet);\n-        list = wallet->ListCoins();\n+        list = wallet->ListCoins(*m_locked_chain);\n     }\n     BOOST_CHECK_EQUAL(list.size(), 1U);\n     BOOST_CHECK_EQUAL(boost::get<CKeyID>(list.begin()->first).ToString(), coinbaseAddress);"
      },
      {
        "sha": "8ea4c5c4957d1456ace2252780e756997ff49aeb",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 68,
        "deletions": 62,
        "changes": 130,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/081accb875412f38718f2e40ed7bbdf15e6f4ef8/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/081accb875412f38718f2e40ed7bbdf15e6f4ef8/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=081accb875412f38718f2e40ed7bbdf15e6f4ef8",
        "patch": "@@ -594,7 +594,7 @@ void CWallet::SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator> ran\n  * Outpoint is spent if any non-conflicted transaction\n  * spends it:\n  */\n-bool CWallet::IsSpent(const uint256& hash, unsigned int n) const\n+bool CWallet::IsSpent(interfaces::Chain::Lock& locked_chain, const uint256& hash, unsigned int n) const\n {\n     const COutPoint outpoint(hash, n);\n     std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range;\n@@ -605,7 +605,7 @@ bool CWallet::IsSpent(const uint256& hash, unsigned int n) const\n         const uint256& wtxid = it->second;\n         std::map<uint256, CWalletTx>::const_iterator mit = mapWallet.find(wtxid);\n         if (mit != mapWallet.end()) {\n-            int depth = mit->second.GetDepthInMainChain();\n+            int depth = mit->second.GetDepthInMainChain(locked_chain);\n             if (depth > 0  || (depth == 0 && !mit->second.isAbandoned()))\n                 return true; // Spent\n         }\n@@ -1009,7 +1009,7 @@ bool CWallet::TransactionCanBeAbandoned(const uint256& hashTx) const\n     auto locked_chain = chain().lock();\n     LOCK(cs_wallet);\n     const CWalletTx* wtx = GetWalletTx(hashTx);\n-    return wtx && !wtx->isAbandoned() && wtx->GetDepthInMainChain() == 0 && !wtx->InMempool();\n+    return wtx && !wtx->isAbandoned() && wtx->GetDepthInMainChain(*locked_chain) == 0 && !wtx->InMempool();\n }\n \n void CWallet::MarkInputsDirty(const CTransactionRef& tx)\n@@ -1022,7 +1022,7 @@ void CWallet::MarkInputsDirty(const CTransactionRef& tx)\n     }\n }\n \n-bool CWallet::AbandonTransaction(const uint256& hashTx)\n+bool CWallet::AbandonTransaction(interfaces::Chain::Lock& locked_chain, const uint256& hashTx)\n {\n     auto locked_chain_recursive = chain().lock();  // Temporary. Removed in upcoming lock cleanup\n     LOCK(cs_wallet);\n@@ -1036,7 +1036,7 @@ bool CWallet::AbandonTransaction(const uint256& hashTx)\n     auto it = mapWallet.find(hashTx);\n     assert(it != mapWallet.end());\n     CWalletTx& origtx = it->second;\n-    if (origtx.GetDepthInMainChain() != 0 || origtx.InMempool()) {\n+    if (origtx.GetDepthInMainChain(locked_chain) != 0 || origtx.InMempool()) {\n         return false;\n     }\n \n@@ -1049,7 +1049,7 @@ bool CWallet::AbandonTransaction(const uint256& hashTx)\n         auto it = mapWallet.find(now);\n         assert(it != mapWallet.end());\n         CWalletTx& wtx = it->second;\n-        int currentconfirm = wtx.GetDepthInMainChain();\n+        int currentconfirm = wtx.GetDepthInMainChain(locked_chain);\n         // If the orig tx was not in block, none of its spends can be\n         assert(currentconfirm <= 0);\n         // if (currentconfirm < 0) {Tx and spends are already conflicted, no need to abandon}\n@@ -1110,7 +1110,7 @@ void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n         auto it = mapWallet.find(now);\n         assert(it != mapWallet.end());\n         CWalletTx& wtx = it->second;\n-        int currentconfirm = wtx.GetDepthInMainChain();\n+        int currentconfirm = wtx.GetDepthInMainChain(*locked_chain);\n         if (conflictconfirms < currentconfirm) {\n             // Block is 'more conflicted' than current confirm; update.\n             // Mark transaction as conflicted with this block.\n@@ -1735,7 +1735,7 @@ void CWallet::ReacceptWalletTransactions()\n         CWalletTx& wtx = item.second;\n         assert(wtx.GetHash() == wtxid);\n \n-        int nDepth = wtx.GetDepthInMainChain();\n+        int nDepth = wtx.GetDepthInMainChain(*locked_chain);\n \n         if (!wtx.IsCoinBase() && (nDepth == 0 && !wtx.isAbandoned())) {\n             mapSorted.insert(std::make_pair(wtx.nOrderPos, &wtx));\n@@ -1746,18 +1746,18 @@ void CWallet::ReacceptWalletTransactions()\n     for (const std::pair<const int64_t, CWalletTx*>& item : mapSorted) {\n         CWalletTx& wtx = *(item.second);\n         CValidationState state;\n-        wtx.AcceptToMemoryPool(maxTxFee, state);\n+        wtx.AcceptToMemoryPool(*locked_chain, maxTxFee, state);\n     }\n }\n \n-bool CWalletTx::RelayWalletTransaction(CConnman* connman)\n+bool CWalletTx::RelayWalletTransaction(interfaces::Chain::Lock& locked_chain, CConnman* connman)\n {\n     assert(pwallet->GetBroadcastTransactions());\n-    if (!IsCoinBase() && !isAbandoned() && GetDepthInMainChain() == 0)\n+    if (!IsCoinBase() && !isAbandoned() && GetDepthInMainChain(locked_chain) == 0)\n     {\n         CValidationState state;\n         /* GetDepthInMainChain already catches known conflicts. */\n-        if (InMempool() || AcceptToMemoryPool(maxTxFee, state)) {\n+        if (InMempool() || AcceptToMemoryPool(locked_chain, maxTxFee, state)) {\n             pwallet->WalletLogPrintf(\"Relaying wtx %s\\n\", GetHash().ToString());\n             if (connman) {\n                 CInv inv(MSG_TX, GetHash());\n@@ -1815,10 +1815,10 @@ CAmount CWalletTx::GetDebit(const isminefilter& filter) const\n     return debit;\n }\n \n-CAmount CWalletTx::GetCredit(const isminefilter& filter) const\n+CAmount CWalletTx::GetCredit(interfaces::Chain::Lock& locked_chain, const isminefilter& filter) const\n {\n     // Must wait until coinbase is safely deep enough in the chain before valuing it\n-    if (IsImmatureCoinBase())\n+    if (IsImmatureCoinBase(locked_chain))\n         return 0;\n \n     CAmount credit = 0;\n@@ -1848,9 +1848,9 @@ CAmount CWalletTx::GetCredit(const isminefilter& filter) const\n     return credit;\n }\n \n-CAmount CWalletTx::GetImmatureCredit(bool fUseCache) const\n+CAmount CWalletTx::GetImmatureCredit(interfaces::Chain::Lock& locked_chain, bool fUseCache) const\n {\n-    if (IsImmatureCoinBase() && IsInMainChain()) {\n+    if (IsImmatureCoinBase(locked_chain) && IsInMainChain(locked_chain)) {\n         if (fUseCache && fImmatureCreditCached)\n             return nImmatureCreditCached;\n         nImmatureCreditCached = pwallet->GetCredit(*tx, ISMINE_SPENDABLE);\n@@ -1861,13 +1861,13 @@ CAmount CWalletTx::GetImmatureCredit(bool fUseCache) const\n     return 0;\n }\n \n-CAmount CWalletTx::GetAvailableCredit(bool fUseCache, const isminefilter& filter) const\n+CAmount CWalletTx::GetAvailableCredit(interfaces::Chain::Lock& locked_chain, bool fUseCache, const isminefilter& filter) const\n {\n     if (pwallet == nullptr)\n         return 0;\n \n     // Must wait until coinbase is safely deep enough in the chain before valuing it\n-    if (IsImmatureCoinBase())\n+    if (IsImmatureCoinBase(locked_chain))\n         return 0;\n \n     CAmount* cache = nullptr;\n@@ -1889,7 +1889,7 @@ CAmount CWalletTx::GetAvailableCredit(bool fUseCache, const isminefilter& filter\n     uint256 hashTx = GetHash();\n     for (unsigned int i = 0; i < tx->vout.size(); i++)\n     {\n-        if (!pwallet->IsSpent(hashTx, i))\n+        if (!pwallet->IsSpent(locked_chain, hashTx, i))\n         {\n             const CTxOut &txout = tx->vout[i];\n             nCredit += pwallet->GetCredit(txout, filter);\n@@ -1906,9 +1906,9 @@ CAmount CWalletTx::GetAvailableCredit(bool fUseCache, const isminefilter& filter\n     return nCredit;\n }\n \n-CAmount CWalletTx::GetImmatureWatchOnlyCredit(const bool fUseCache) const\n+CAmount CWalletTx::GetImmatureWatchOnlyCredit(interfaces::Chain::Lock& locked_chain, const bool fUseCache) const\n {\n-    if (IsImmatureCoinBase() && IsInMainChain()) {\n+    if (IsImmatureCoinBase(locked_chain) && IsInMainChain(locked_chain)) {\n         if (fUseCache && fImmatureWatchCreditCached)\n             return nImmatureWatchCreditCached;\n         nImmatureWatchCreditCached = pwallet->GetCredit(*tx, ISMINE_WATCH_ONLY);\n@@ -1933,12 +1933,14 @@ bool CWalletTx::InMempool() const\n     return fInMempool;\n }\n \n-bool CWalletTx::IsTrusted() const\n+bool CWalletTx::IsTrusted(interfaces::Chain::Lock& locked_chain) const\n {\n+    LockAnnotation lock(::cs_main); // Temporary, for CheckFinalTx below. Removed in upcoming commit.\n+\n     // Quick answer in most cases\n     if (!CheckFinalTx(*tx))\n         return false;\n-    int nDepth = GetDepthInMainChain();\n+    int nDepth = GetDepthInMainChain(locked_chain);\n     if (nDepth >= 1)\n         return true;\n     if (nDepth < 0)\n@@ -1973,7 +1975,7 @@ bool CWalletTx::IsEquivalentTo(const CWalletTx& _tx) const\n         return CTransaction(tx1) == CTransaction(tx2);\n }\n \n-std::vector<uint256> CWallet::ResendWalletTransactionsBefore(int64_t nTime, CConnman* connman)\n+std::vector<uint256> CWallet::ResendWalletTransactionsBefore(interfaces::Chain::Lock& locked_chain, int64_t nTime, CConnman* connman)\n {\n     std::vector<uint256> result;\n \n@@ -1992,7 +1994,7 @@ std::vector<uint256> CWallet::ResendWalletTransactionsBefore(int64_t nTime, CCon\n     for (const std::pair<const unsigned int, CWalletTx*>& item : mapSorted)\n     {\n         CWalletTx& wtx = *item.second;\n-        if (wtx.RelayWalletTransaction(connman))\n+        if (wtx.RelayWalletTransaction(locked_chain, connman))\n             result.push_back(wtx.GetHash());\n     }\n     return result;\n@@ -2017,7 +2019,7 @@ void CWallet::ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman\n     // Rebroadcast unconfirmed txes older than 5 minutes before the last\n     // block was found:\n     auto locked_chain = chain().assumeLocked();  // Temporary. Removed in upcoming lock cleanup\n-    std::vector<uint256> relayed = ResendWalletTransactionsBefore(nBestBlockTime-5*60, connman);\n+    std::vector<uint256> relayed = ResendWalletTransactionsBefore(*locked_chain, nBestBlockTime-5*60, connman);\n     if (!relayed.empty())\n         WalletLogPrintf(\"%s: rebroadcast %u unconfirmed transactions\\n\", __func__, relayed.size());\n }\n@@ -2042,8 +2044,8 @@ CAmount CWallet::GetBalance(const isminefilter& filter, const int min_depth) con\n         for (const auto& entry : mapWallet)\n         {\n             const CWalletTx* pcoin = &entry.second;\n-            if (pcoin->IsTrusted() && pcoin->GetDepthInMainChain() >= min_depth) {\n-                nTotal += pcoin->GetAvailableCredit(true, filter);\n+            if (pcoin->IsTrusted(*locked_chain) && pcoin->GetDepthInMainChain(*locked_chain) >= min_depth) {\n+                nTotal += pcoin->GetAvailableCredit(*locked_chain, true, filter);\n             }\n         }\n     }\n@@ -2060,8 +2062,8 @@ CAmount CWallet::GetUnconfirmedBalance() const\n         for (const auto& entry : mapWallet)\n         {\n             const CWalletTx* pcoin = &entry.second;\n-            if (!pcoin->IsTrusted() && pcoin->GetDepthInMainChain() == 0 && pcoin->InMempool())\n-                nTotal += pcoin->GetAvailableCredit();\n+            if (!pcoin->IsTrusted(*locked_chain) && pcoin->GetDepthInMainChain(*locked_chain) == 0 && pcoin->InMempool())\n+                nTotal += pcoin->GetAvailableCredit(*locked_chain);\n         }\n     }\n     return nTotal;\n@@ -2076,7 +2078,7 @@ CAmount CWallet::GetImmatureBalance() const\n         for (const auto& entry : mapWallet)\n         {\n             const CWalletTx* pcoin = &entry.second;\n-            nTotal += pcoin->GetImmatureCredit();\n+            nTotal += pcoin->GetImmatureCredit(*locked_chain);\n         }\n     }\n     return nTotal;\n@@ -2091,8 +2093,8 @@ CAmount CWallet::GetUnconfirmedWatchOnlyBalance() const\n         for (const auto& entry : mapWallet)\n         {\n             const CWalletTx* pcoin = &entry.second;\n-            if (!pcoin->IsTrusted() && pcoin->GetDepthInMainChain() == 0 && pcoin->InMempool())\n-                nTotal += pcoin->GetAvailableCredit(true, ISMINE_WATCH_ONLY);\n+            if (!pcoin->IsTrusted(*locked_chain) && pcoin->GetDepthInMainChain(*locked_chain) == 0 && pcoin->InMempool())\n+                nTotal += pcoin->GetAvailableCredit(*locked_chain, true, ISMINE_WATCH_ONLY);\n         }\n     }\n     return nTotal;\n@@ -2107,7 +2109,7 @@ CAmount CWallet::GetImmatureWatchOnlyBalance() const\n         for (const auto& entry : mapWallet)\n         {\n             const CWalletTx* pcoin = &entry.second;\n-            nTotal += pcoin->GetImmatureWatchOnlyCredit();\n+            nTotal += pcoin->GetImmatureWatchOnlyCredit(*locked_chain);\n         }\n     }\n     return nTotal;\n@@ -2121,14 +2123,15 @@ CAmount CWallet::GetImmatureWatchOnlyBalance() const\n // trusted.\n CAmount CWallet::GetLegacyBalance(const isminefilter& filter, int minDepth) const\n {\n+    LockAnnotation lock(::cs_main); // Temporary, for CheckFinalTx below. Removed in upcoming commit.\n     auto locked_chain = chain().lock();\n     LOCK(cs_wallet);\n \n     CAmount balance = 0;\n     for (const auto& entry : mapWallet) {\n         const CWalletTx& wtx = entry.second;\n-        const int depth = wtx.GetDepthInMainChain();\n-        if (depth < 0 || !CheckFinalTx(*wtx.tx) || wtx.IsImmatureCoinBase()) {\n+        const int depth = wtx.GetDepthInMainChain(*locked_chain);\n+        if (depth < 0 || !CheckFinalTx(*wtx.tx) || wtx.IsImmatureCoinBase(*locked_chain)) {\n             continue;\n         }\n \n@@ -2160,7 +2163,7 @@ CAmount CWallet::GetAvailableBalance(const CCoinControl* coinControl) const\n \n     CAmount balance = 0;\n     std::vector<COutput> vCoins;\n-    AvailableCoins(vCoins, true, coinControl);\n+    AvailableCoins(*locked_chain, vCoins, true, coinControl);\n     for (const COutput& out : vCoins) {\n         if (out.fSpendable) {\n             balance += out.tx->tx->vout[out.i].nValue;\n@@ -2169,7 +2172,7 @@ CAmount CWallet::GetAvailableBalance(const CCoinControl* coinControl) const\n     return balance;\n }\n \n-void CWallet::AvailableCoins(std::vector<COutput> &vCoins, bool fOnlySafe, const CCoinControl *coinControl, const CAmount &nMinimumAmount, const CAmount &nMaximumAmount, const CAmount &nMinimumSumAmount, const uint64_t nMaximumCount, const int nMinDepth, const int nMaxDepth) const\n+void CWallet::AvailableCoins(interfaces::Chain::Lock& locked_chain, std::vector<COutput> &vCoins, bool fOnlySafe, const CCoinControl *coinControl, const CAmount &nMinimumAmount, const CAmount &nMaximumAmount, const CAmount &nMinimumSumAmount, const uint64_t nMaximumCount, const int nMinDepth, const int nMaxDepth) const\n {\n     AssertLockHeld(cs_main);\n     AssertLockHeld(cs_wallet);\n@@ -2185,10 +2188,10 @@ void CWallet::AvailableCoins(std::vector<COutput> &vCoins, bool fOnlySafe, const\n         if (!CheckFinalTx(*pcoin->tx))\n             continue;\n \n-        if (pcoin->IsImmatureCoinBase())\n+        if (pcoin->IsImmatureCoinBase(locked_chain))\n             continue;\n \n-        int nDepth = pcoin->GetDepthInMainChain();\n+        int nDepth = pcoin->GetDepthInMainChain(locked_chain);\n         if (nDepth < 0)\n             continue;\n \n@@ -2197,7 +2200,7 @@ void CWallet::AvailableCoins(std::vector<COutput> &vCoins, bool fOnlySafe, const\n         if (nDepth == 0 && !pcoin->InMempool())\n             continue;\n \n-        bool safeTx = pcoin->IsTrusted();\n+        bool safeTx = pcoin->IsTrusted(locked_chain);\n \n         // We should not consider coins from transactions that are replacing\n         // other transactions.\n@@ -2247,7 +2250,7 @@ void CWallet::AvailableCoins(std::vector<COutput> &vCoins, bool fOnlySafe, const\n             if (IsLockedCoin(entry.first, i))\n                 continue;\n \n-            if (IsSpent(wtxid, i))\n+            if (IsSpent(locked_chain, wtxid, i))\n                 continue;\n \n             isminetype mine = IsMine(pcoin->tx->vout[i]);\n@@ -2278,15 +2281,15 @@ void CWallet::AvailableCoins(std::vector<COutput> &vCoins, bool fOnlySafe, const\n     }\n }\n \n-std::map<CTxDestination, std::vector<COutput>> CWallet::ListCoins() const\n+std::map<CTxDestination, std::vector<COutput>> CWallet::ListCoins(interfaces::Chain::Lock& locked_chain) const\n {\n     AssertLockHeld(cs_main);\n     AssertLockHeld(cs_wallet);\n \n     std::map<CTxDestination, std::vector<COutput>> result;\n     std::vector<COutput> availableCoins;\n \n-    AvailableCoins(availableCoins);\n+    AvailableCoins(locked_chain, availableCoins);\n \n     for (const COutput& coin : availableCoins) {\n         CTxDestination address;\n@@ -2301,7 +2304,7 @@ std::map<CTxDestination, std::vector<COutput>> CWallet::ListCoins() const\n     for (const COutPoint& output : lockedCoins) {\n         auto it = mapWallet.find(output.hash);\n         if (it != mapWallet.end()) {\n-            int depth = it->second.GetDepthInMainChain();\n+            int depth = it->second.GetDepthInMainChain(locked_chain);\n             if (depth >= 0 && output.n < it->second.tx->vout.size() &&\n                 IsMine(it->second.tx->vout[output.n]) == ISMINE_SPENDABLE) {\n                 CTxDestination address;\n@@ -2521,7 +2524,7 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n \n     CReserveKey reservekey(this);\n     CTransactionRef tx_new;\n-    if (!CreateTransaction(vecSend, tx_new, reservekey, nFeeRet, nChangePosInOut, strFailReason, coinControl, false)) {\n+    if (!CreateTransaction(*locked_chain, vecSend, tx_new, reservekey, nFeeRet, nChangePosInOut, strFailReason, coinControl, false)) {\n         return false;\n     }\n \n@@ -2580,7 +2583,7 @@ OutputType CWallet::TransactionChangeType(OutputType change_type, const std::vec\n     return m_default_address_type;\n }\n \n-bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransactionRef& tx, CReserveKey& reservekey, CAmount& nFeeRet,\n+bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std::vector<CRecipient>& vecSend, CTransactionRef& tx, CReserveKey& reservekey, CAmount& nFeeRet,\n                          int& nChangePosInOut, std::string& strFailReason, const CCoinControl& coin_control, bool sign)\n {\n     CAmount nValue = 0;\n@@ -2646,7 +2649,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n         LOCK(cs_wallet);\n         {\n             std::vector<COutput> vAvailableCoins;\n-            AvailableCoins(vAvailableCoins, true, &coin_control);\n+            AvailableCoins(*locked_chain, vAvailableCoins, true, &coin_control);\n             CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n \n             // Create change script that will be used if we need change\n@@ -3015,11 +3018,11 @@ bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::ve\n         if (fBroadcastTransactions)\n         {\n             // Broadcast\n-            if (!wtx.AcceptToMemoryPool(maxTxFee, state)) {\n+            if (!wtx.AcceptToMemoryPool(*locked_chain, maxTxFee, state)) {\n                 WalletLogPrintf(\"CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", FormatStateMessage(state));\n                 // TODO: if we expect the failure to be long term or permanent, instead delete wtx from the wallet and return failure.\n             } else {\n-                wtx.RelayWalletTransaction(connman);\n+                wtx.RelayWalletTransaction(*locked_chain, connman);\n             }\n         }\n     }\n@@ -3413,7 +3416,7 @@ int64_t CWallet::GetOldestKeyPoolTime()\n     return oldestKey;\n }\n \n-std::map<CTxDestination, CAmount> CWallet::GetAddressBalances()\n+std::map<CTxDestination, CAmount> CWallet::GetAddressBalances(interfaces::Chain::Lock& locked_chain)\n {\n     std::map<CTxDestination, CAmount> balances;\n \n@@ -3423,13 +3426,13 @@ std::map<CTxDestination, CAmount> CWallet::GetAddressBalances()\n         {\n             const CWalletTx *pcoin = &walletEntry.second;\n \n-            if (!pcoin->IsTrusted())\n+            if (!pcoin->IsTrusted(locked_chain))\n                 continue;\n \n-            if (pcoin->IsImmatureCoinBase())\n+            if (pcoin->IsImmatureCoinBase(locked_chain))\n                 continue;\n \n-            int nDepth = pcoin->GetDepthInMainChain();\n+            int nDepth = pcoin->GetDepthInMainChain(locked_chain);\n             if (nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? 0 : 1))\n                 continue;\n \n@@ -3441,7 +3444,7 @@ std::map<CTxDestination, CAmount> CWallet::GetAddressBalances()\n                 if(!ExtractDestination(pcoin->tx->vout[i].scriptPubKey, addr))\n                     continue;\n \n-                CAmount n = IsSpent(walletEntry.first, i) ? 0 : pcoin->tx->vout[i].nValue;\n+                CAmount n = IsSpent(locked_chain, walletEntry.first, i) ? 0 : pcoin->tx->vout[i].nValue;\n \n                 if (!balances.count(addr))\n                     balances[addr] = 0;\n@@ -3666,7 +3669,7 @@ void CWallet::ListLockedCoins(std::vector<COutPoint>& vOutpts) const\n \n /** @} */ // end of Actions\n \n-void CWallet::GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) const {\n+void CWallet::GetKeyBirthTimes(interfaces::Chain::Lock& locked_chain, std::map<CTxDestination, int64_t> &mapKeyBirth) const {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n     mapKeyBirth.clear();\n \n@@ -4119,6 +4122,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     // Try to top up keypool. No-op if the wallet is locked.\n     walletInstance->TopUpKeyPool();\n \n+    LockAnnotation lock(::cs_main); // Temporary, for FindForkInGlobalIndex below. Removed in upcoming commit.\n     auto locked_chain = chain.lock();\n     LOCK(walletInstance->cs_wallet);\n \n@@ -4255,7 +4259,7 @@ void CMerkleTx::SetMerkleBranch(const CBlockIndex* pindex, int posInBlock)\n     nIndex = posInBlock;\n }\n \n-int CMerkleTx::GetDepthInMainChain() const\n+int CMerkleTx::GetDepthInMainChain(interfaces::Chain::Lock& locked_chain) const\n {\n     if (hashUnset())\n         return 0;\n@@ -4270,23 +4274,25 @@ int CMerkleTx::GetDepthInMainChain() const\n     return ((nIndex == -1) ? (-1) : 1) * (chainActive.Height() - pindex->nHeight + 1);\n }\n \n-int CMerkleTx::GetBlocksToMaturity() const\n+int CMerkleTx::GetBlocksToMaturity(interfaces::Chain::Lock& locked_chain) const\n {\n     if (!IsCoinBase())\n         return 0;\n-    int chain_depth = GetDepthInMainChain();\n+    int chain_depth = GetDepthInMainChain(locked_chain);\n     assert(chain_depth >= 0); // coinbase tx should not be conflicted\n     return std::max(0, (COINBASE_MATURITY+1) - chain_depth);\n }\n \n-bool CMerkleTx::IsImmatureCoinBase() const\n+bool CMerkleTx::IsImmatureCoinBase(interfaces::Chain::Lock& locked_chain) const\n {\n     // note GetBlocksToMaturity is 0 for non-coinbase tx\n-    return GetBlocksToMaturity() > 0;\n+    return GetBlocksToMaturity(locked_chain) > 0;\n }\n \n-bool CWalletTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state)\n+bool CWalletTx::AcceptToMemoryPool(interfaces::Chain::Lock& locked_chain, const CAmount& nAbsurdFee, CValidationState& state)\n {\n+    LockAnnotation lock(::cs_main); // Temporary, for AcceptToMemoryPool below. Removed in upcoming commit.\n+\n     // We must set fInMempool here - while it will be re-set to true by the\n     // entered-mempool callback, if we did not there would be a race where a\n     // user could call sendmoney in a loop and hit spurious out of funds errors"
      },
      {
        "sha": "f96798201f1fad775b34e4841a185608dd171ab6",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 20,
        "deletions": 24,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/081accb875412f38718f2e40ed7bbdf15e6f4ef8/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/081accb875412f38718f2e40ed7bbdf15e6f4ef8/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=081accb875412f38718f2e40ed7bbdf15e6f4ef8",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_WALLET_WALLET_H\n \n #include <amount.h>\n+#include <interfaces/chain.h>\n #include <outputtype.h>\n #include <policy/feerate.h>\n #include <streams.h>\n@@ -33,11 +34,6 @@\n #include <utility>\n #include <vector>\n \n-namespace interfaces {\n-class Chain;\n-} // namespace interfaces\n-\n-\n //! Responsible for reading and validating the -wallet arguments and verifying the wallet database.\n //  This function will perform salvage on the wallet if requested, as long as only one wallet is\n //  being loaded (WalletParameterInteraction forbids -salvagewallet, -zapwallettxes or -upgradewallet with multiwallet).\n@@ -289,22 +285,22 @@ class CMerkleTx\n      *  0  : in memory pool, waiting to be included in a block\n      * >=1 : this many blocks deep in the main chain\n      */\n-    int GetDepthInMainChain() const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-    bool IsInMainChain() const EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return GetDepthInMainChain() > 0; }\n+    int GetDepthInMainChain(interfaces::Chain::Lock& locked_chain) const;\n+    bool IsInMainChain(interfaces::Chain::Lock& locked_chain) const { return GetDepthInMainChain(locked_chain) > 0; }\n \n     /**\n      * @return number of blocks to maturity for this transaction:\n      *  0 : is not a coinbase transaction, or is a mature coinbase transaction\n      * >0 : is a coinbase transaction which matures in this many blocks\n      */\n-    int GetBlocksToMaturity() const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    int GetBlocksToMaturity(interfaces::Chain::Lock& locked_chain) const;\n     bool hashUnset() const { return (hashBlock.IsNull() || hashBlock == ABANDON_HASH); }\n     bool isAbandoned() const { return (hashBlock == ABANDON_HASH); }\n     void setAbandoned() { hashBlock = ABANDON_HASH; }\n \n     const uint256& GetHash() const { return tx->GetHash(); }\n     bool IsCoinBase() const { return tx->IsCoinBase(); }\n-    bool IsImmatureCoinBase() const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool IsImmatureCoinBase(interfaces::Chain::Lock& locked_chain) const;\n };\n \n //Get the marginal bytes of spending the specified output\n@@ -483,14 +479,14 @@ class CWalletTx : public CMerkleTx\n \n     //! filter decides which addresses will count towards the debit\n     CAmount GetDebit(const isminefilter& filter) const;\n-    CAmount GetCredit(const isminefilter& filter) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-    CAmount GetImmatureCredit(bool fUseCache=true) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    CAmount GetCredit(interfaces::Chain::Lock& locked_chain, const isminefilter& filter) const;\n+    CAmount GetImmatureCredit(interfaces::Chain::Lock& locked_chain, bool fUseCache=true) const;\n     // TODO: Remove \"NO_THREAD_SAFETY_ANALYSIS\" and replace it with the correct\n     // annotation \"EXCLUSIVE_LOCKS_REQUIRED(cs_main, pwallet->cs_wallet)\". The\n     // annotation \"NO_THREAD_SAFETY_ANALYSIS\" was temporarily added to avoid\n     // having to resolve the issue of member access into incomplete type CWallet.\n-    CAmount GetAvailableCredit(bool fUseCache=true, const isminefilter& filter=ISMINE_SPENDABLE) const NO_THREAD_SAFETY_ANALYSIS;\n-    CAmount GetImmatureWatchOnlyCredit(const bool fUseCache=true) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    CAmount GetAvailableCredit(interfaces::Chain::Lock& locked_chain, bool fUseCache=true, const isminefilter& filter=ISMINE_SPENDABLE) const NO_THREAD_SAFETY_ANALYSIS;\n+    CAmount GetImmatureWatchOnlyCredit(interfaces::Chain::Lock& locked_chain, const bool fUseCache=true) const;\n     CAmount GetChange() const;\n \n     // Get the marginal bytes if spending the specified output from this transaction\n@@ -511,15 +507,15 @@ class CWalletTx : public CMerkleTx\n     bool IsEquivalentTo(const CWalletTx& tx) const;\n \n     bool InMempool() const;\n-    bool IsTrusted() const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool IsTrusted(interfaces::Chain::Lock& locked_chain) const;\n \n     int64_t GetTxTime() const;\n \n     // RelayWalletTransaction may only be called if fBroadcastTransactions!\n-    bool RelayWalletTransaction(CConnman* connman) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool RelayWalletTransaction(interfaces::Chain::Lock& locked_chain, CConnman* connman);\n \n     /** Pass this transaction to the mempool. Fails if absolute fee exceeds absurd fee. */\n-    bool AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool AcceptToMemoryPool(interfaces::Chain::Lock& locked_chain, const CAmount& nAbsurdFee, CValidationState& state);\n \n     // TODO: Remove \"NO_THREAD_SAFETY_ANALYSIS\" and replace it with the correct\n     // annotation \"EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\". The annotation\n@@ -798,12 +794,12 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     /**\n      * populate vCoins with vector of available COutputs.\n      */\n-    void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlySafe=true, const CCoinControl *coinControl = nullptr, const CAmount& nMinimumAmount = 1, const CAmount& nMaximumAmount = MAX_MONEY, const CAmount& nMinimumSumAmount = MAX_MONEY, const uint64_t nMaximumCount = 0, const int nMinDepth = 0, const int nMaxDepth = 9999999) const EXCLUSIVE_LOCKS_REQUIRED(cs_main, cs_wallet);\n+    void AvailableCoins(interfaces::Chain::Lock& locked_chain, std::vector<COutput>& vCoins, bool fOnlySafe=true, const CCoinControl *coinControl = nullptr, const CAmount& nMinimumAmount = 1, const CAmount& nMaximumAmount = MAX_MONEY, const CAmount& nMinimumSumAmount = MAX_MONEY, const uint64_t nMaximumCount = 0, const int nMinDepth = 0, const int nMaxDepth = 9999999) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /**\n      * Return list of available coins and locked coins grouped by non-change output address.\n      */\n-    std::map<CTxDestination, std::vector<COutput>> ListCoins() const EXCLUSIVE_LOCKS_REQUIRED(cs_main, cs_wallet);\n+    std::map<CTxDestination, std::vector<COutput>> ListCoins(interfaces::Chain::Lock& locked_chain) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /**\n      * Find non-change parent output.\n@@ -819,7 +815,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibilityFilter& eligibility_filter, std::vector<OutputGroup> groups,\n         std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CoinSelectionParams& coin_selection_params, bool& bnb_used) const;\n \n-    bool IsSpent(const uint256& hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_main, cs_wallet);\n+    bool IsSpent(interfaces::Chain::Lock& locked_chain, const uint256& hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     std::vector<OutputGroup> GroupOutputs(const std::vector<COutput>& outputs, bool single_coin) const;\n \n     bool IsLockedCoin(uint256 hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n@@ -883,7 +879,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);\n     bool EncryptWallet(const SecureString& strWalletPassphrase);\n \n-    void GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void GetKeyBirthTimes(interfaces::Chain::Lock& locked_chain, std::map<CTxDestination, int64_t> &mapKeyBirth) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     unsigned int ComputeTimeSmart(const CWalletTx& wtx) const;\n \n     /**\n@@ -905,7 +901,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     // ResendWalletTransactionsBefore may only be called if fBroadcastTransactions!\n-    std::vector<uint256> ResendWalletTransactionsBefore(int64_t nTime, CConnman* connman) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    std::vector<uint256> ResendWalletTransactionsBefore(interfaces::Chain::Lock& locked_chain, int64_t nTime, CConnman* connman);\n     CAmount GetBalance(const isminefilter& filter=ISMINE_SPENDABLE, const int min_depth=0) const;\n     CAmount GetUnconfirmedBalance() const;\n     CAmount GetImmatureBalance() const;\n@@ -928,7 +924,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      * selected by SelectCoins(); Also create the change output, when needed\n      * @note passing nChangePosInOut as -1 will result in setting a random position\n      */\n-    bool CreateTransaction(const std::vector<CRecipient>& vecSend, CTransactionRef& tx, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosInOut,\n+    bool CreateTransaction(interfaces::Chain::Lock& locked_chain, const std::vector<CRecipient>& vecSend, CTransactionRef& tx, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosInOut,\n                            std::string& strFailReason, const CCoinControl& coin_control, bool sign = true);\n     bool CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm, CReserveKey& reservekey, CConnman* connman, CValidationState& state);\n \n@@ -987,7 +983,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     const std::map<CKeyID, int64_t>& GetAllReserveKeys() const { return m_pool_key_to_index; }\n \n     std::set<std::set<CTxDestination>> GetAddressGroupings() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    std::map<CTxDestination, CAmount> GetAddressBalances() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    std::map<CTxDestination, CAmount> GetAddressBalances(interfaces::Chain::Lock& locked_chain);\n \n     std::set<CTxDestination> GetLabelAddresses(const std::string& label) const;\n \n@@ -1082,7 +1078,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool TransactionCanBeAbandoned(const uint256& hashTx) const;\n \n     /* Mark a transaction (and it in-wallet descendants) as abandoned so its inputs may be respent. */\n-    bool AbandonTransaction(const uint256& hashTx);\n+    bool AbandonTransaction(interfaces::Chain::Lock& locked_chain, const uint256& hashTx);\n \n     /** Mark a transaction as replaced by another transaction (e.g., BIP 125). */\n     bool MarkReplaced(const uint256& originalHash, const uint256& newHash);"
      }
    ]
  }
]