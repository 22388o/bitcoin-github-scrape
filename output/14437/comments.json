[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/428050798",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#issuecomment-428050798",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14437",
    "id": 428050798,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyODA1MDc5OA==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-09T03:52:39Z",
    "updated_at": "2018-11-08T08:17:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14641](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14641.html) (RPC: Add min/max confirmation options to fund transaction calls by promag)\n* [#14602](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14602.html) (Bugfix: Correctly calculate balances when min_conf is used, and for getbalance(\"*\") by luke-jr)\n* [#14582](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14582.html) (wallet: try -avoidpartialspends mode and use its result if fees do not change by kallewoof)\n* [#14530](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14530.html) (Use RPCHelpMan to generate RPC doc strings by MarcoFalke)\n* [#14411](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14411.html) ([wallet] Restore ability to list incoming transactions by label by ryanofsky)\n* [#14384](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14384.html) (Resolve validationinterface circular dependencies by 251Labs)\n* [#14121](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14121.html) (Index for BIP 157 block filters by jimpo)\n* [#13756](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/13756.html) (wallet: \"avoid_reuse\" wallet flag for improved privacy by kallewoof)\n* [#13612](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/13612.html) (Qt: Only call tryGetBalances in pollBalanceChanged if the result will be used. by tecnovert)\n* [#13582](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/13582.html) (Extract AppInitLoadBlockIndex from AppInitMain by Empact)\n* [#12508](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/12508.html) (IsAllFromMe by kallewoof)\n* [#11652](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/11652.html) (Add missing locks: validation.cpp + related by practicalswift)\n* [#9381](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/9381.html) (Remove CWalletTx merging logic from AddToWallet by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/428050798/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/428412523",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#issuecomment-428412523",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14437",
    "id": 428412523,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyODQxMjUyMw==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-10T02:02:33Z",
    "updated_at": "2018-10-10T02:02:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Added 2 more small commits d0af21fab95ee453a1fee4242ceb89ca79d568eb -> a10e919db4c9f37f0bb60fd62a232abf8bd3dede ([pr/wchain.1](https://github.com/ryanofsky/bitcoin/commits/pr/wchain.1) -> [pr/wchain.2](https://github.com/ryanofsky/bitcoin/commits/pr/wchain.2), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wchain.1...pr/wchain.2)) from #10973 to fix the thread safety warnings (which are harmless but treated like errors).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/428412523/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/429345250",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#issuecomment-429345250",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14437",
    "id": 429345250,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTM0NTI1MA==",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?u=447cdc9e2966cbee415545c8ff452954ee1209af&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-12T14:29:03Z",
    "updated_at": "2018-10-12T14:29:03Z",
    "author_association": "MEMBER",
    "body": "Concept ACK :+1: ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/429345250/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/429439919",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#issuecomment-429439919",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14437",
    "id": 429439919,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTQzOTkxOQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-12T19:39:31Z",
    "updated_at": "2018-10-12T19:39:31Z",
    "author_association": "MEMBER",
    "body": "Is it intentional that the interfaces code uses a different coding style than the rest of the code?\r\n\r\nIf so, does this need documenting somewhere, and if not, can it be converted?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/429439919/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/429629886",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#issuecomment-429629886",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14437",
    "id": 429629886,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTYyOTg4Ng==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-14T14:14:35Z",
    "updated_at": "2018-10-14T14:14:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "This PR does not seem to compile when rebased on `master` :-)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/429629886/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430939356",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#issuecomment-430939356",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14437",
    "id": 430939356,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDkzOTM1Ng==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-18T09:25:14Z",
    "updated_at": "2018-10-18T09:25:14Z",
    "author_association": "MEMBER",
    "body": "Concept ACK. Thanks for splitting #10973 into more manageable sized PRs.\r\n\r\n* would be good to get @ken2812221's feedback on the `msvc-autogen.py` changes\r\n* I noticed d0af21fab95ee453a1fee4242ceb89ca79d568eb adds a bunch of methods to interfaces/chain.cpp. I assume those are moved from somewhere else, but I don't see their counterparts removed in this PR. Why is that?\r\n\r\nfc7442f compiles on macOS 10.14, tests and bench pass, bitcoind and QT don't show any strange behavior.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430939356/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430964917",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#issuecomment-430964917",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14437",
    "id": 430964917,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDk2NDkxNw==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-18T10:54:43Z",
    "updated_at": "2018-10-18T10:55:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I noticed d0af21f adds a bunch of methods to interfaces/chain.cpp. I assume those are moved from somewhere else, but I don't see their counterparts removed in this PR. Why is that?\r\n\r\nThe new Chain d0af21fab95ee453a1fee4242ceb89ca79d568eb methods aren't moved from someplace else. They are fairly simple utility functions that wrap`CBlockIndex`/`chainActive` APIs so the wallet doesn't access chain state directly.\r\n\r\nAlso worth noting that d0af21fab95ee453a1fee4242ceb89ca79d568eb is the main commit in this PR. The other commits are basically just mechanical changes preparing for d0af21fab95ee453a1fee4242ceb89ca79d568eb.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430964917/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430967978",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#issuecomment-430967978",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14437",
    "id": 430967978,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDk2Nzk3OA==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-18T11:06:57Z",
    "updated_at": "2018-10-18T11:06:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "> would be good to get @ken2812221's feedback on the msvc-autogen.py changes\r\n\r\nken2812221 did previously review those changes: https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-418624533. They were in the first commit of the PR at that time: d487d953c9a10b11693ba8af62f5b54a77ec7686.\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430967978/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/435190133",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#issuecomment-435190133",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14437",
    "id": 435190133,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTE5MDEzMw==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-01T21:16:05Z",
    "updated_at": "2018-11-01T21:16:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "There were some comments in IRC that the PR description here might need to be improved. Would welcome any suggestions. #10973 has a more complete description of the direction this PR starts to go in.\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/14437#issuecomment-429439919\r\n> Is it intentional that the interfaces code uses a different coding style than the rest of the code?\r\n>\r\n> If so, does this need documenting somewhere, and if not, can it be converted?\r\n\r\nI'll create a PR to document the slight style change. It's used in gui code so I adopted it for #10244 and #10102, sticking with it in #10973 and here for consistency, and since I do like it.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/435190133/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/436392591",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#issuecomment-436392591",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14437",
    "id": 436392591,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjM5MjU5MQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-06T20:13:33Z",
    "updated_at": "2018-11-06T20:13:33Z",
    "author_association": "MEMBER",
    "body": "re-utACK 081accb875412f38718f2e40ed7bbdf15e6f4ef8 (Only change since previous utACK 0b2cf7c is rebase and adding the return in a void context)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/436392591/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/436672386",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#issuecomment-436672386",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14437",
    "id": 436672386,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjY3MjM4Ng==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-07T15:54:59Z",
    "updated_at": "2018-11-07T15:54:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks Marco, James, and Ken for the recent code reviews! James, I think I will steal your breakdown of commits and add it to the PR description.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/436672386/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/437660651",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#issuecomment-437660651",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14437",
    "id": 437660651,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzY2MDY1MQ==",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?u=447cdc9e2966cbee415545c8ff452954ee1209af&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-11T11:04:17Z",
    "updated_at": "2018-11-11T11:04:17Z",
    "author_association": "MEMBER",
    "body": "post-merge-utACK https://github.com/bitcoin/bitcoin/pull/14437/commits/ea961c3d7256c66146b4976ab1293db4a628c0de\r\n\r\nThis is looking good, thanks Russ! \ud83c\udf89 ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/437660651/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224592478",
    "pull_request_review_id": 163999835,
    "id": 224592478,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDU5MjQ3OA==",
    "diff_hunk": "@@ -754,7 +756,7 @@ static UniValue combinerawtransaction(const JSONRPCRequest& request)\n     return EncodeHexTx(mergedTx);\n }\n \n-UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival, CBasicKeyStore *keystore, bool is_temp_keystore, const UniValue& hashType)\n+UniValue SignTransaction(interfaces::Chain& chain, CMutableTransaction& mtx, const UniValue& prevTxsUnival, CBasicKeyStore *keystore, bool is_temp_keystore, const UniValue& hashType)",
    "path": "src/rpc/rawtransaction.cpp",
    "position": 21,
    "original_position": 21,
    "commit_id": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "original_commit_id": "a10e919db4c9f37f0bb60fd62a232abf8bd3dede",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`chain` unused?\r\n\r\nEdit: Oh, used in a follow-up PR. Sorry!",
    "created_at": "2018-10-11T20:25:27Z",
    "updated_at": "2018-11-06T19:07:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r224592478",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224592478"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r224592478"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224592478/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 759,
    "original_line": 759,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224994715",
    "pull_request_review_id": 164500751,
    "id": 224994715,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk5NDcxNQ==",
    "diff_hunk": "@@ -1594,113 +1596,133 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n     // Find starting block. May be null if nCreateTime is greater than the\n     // highest blockchain timestamp, in which case there is nothing that needs\n     // to be scanned.\n-    CBlockIndex* startBlock = nullptr;\n+    uint256 start_block;\n     {\n-        LOCK(cs_main);\n-        startBlock = chainActive.FindEarliestAtLeast(startTime - TIMESTAMP_WINDOW);\n-        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n-    }\n-\n-    if (startBlock) {\n-        const CBlockIndex* const failedBlock = ScanForWalletTransactions(startBlock, nullptr, reserver, update);\n-        if (failedBlock) {\n-            return failedBlock->GetBlockTimeMax() + TIMESTAMP_WINDOW + 1;\n+        auto locked_chain = chain().lock();\n+        const Optional<int> start_height = locked_chain->findFirstBlockWithTime(startTime - TIMESTAMP_WINDOW);\n+        const Optional<int> tip_height = locked_chain->getHeight();\n+        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, tip_height && start_height ? *tip_height - *start_height + 1 : 0);\n+        if (start_height) start_block = locked_chain->getBlockHash(*start_height);\n+    }\n+\n+    if (!start_block.IsNull()) {\n+        uint256 failed_block = ScanForWalletTransactions(start_block, {} /* stop block */, reserver, update);\n+        if (!failed_block.IsNull()) {\n+            int64_t time_max;\n+            if (!chain().findBlock(failed_block, nullptr /* CBlock */, nullptr /* time */, &time_max)) {\n+                throw std::logic_error(\"ScanForWalletTransactions returned invalid block hash\");\n+            }\n+            return time_max + TIMESTAMP_WINDOW + 1;\n         }\n     }\n     return startTime;\n }\n \n /**\n- * Scan the block chain (starting in pindexStart) for transactions\n+ * Scan the block chain (starting in start_block) for transactions\n  * from or to us. If fUpdate is true, found transactions that already\n  * exist in the wallet will be updated.\n  *\n  * Returns null if scan was successful. Otherwise, if a complete rescan was not\n  * possible (due to pruning or corruption), returns pointer to the most recent\n  * block that could not be scanned.\n  *\n- * If pindexStop is not a nullptr, the scan will stop at the block-index\n- * defined by pindexStop\n+ * If stop_block is not null, the scan will stop at the block-index\n+ * defined by stop_block\n  *\n- * Caller needs to make sure pindexStop (and the optional pindexStart) are on\n+ * Caller needs to make sure stop_block (and the optional start_block) are on\n  * the main chain after to the addition of any new keys you want to detect\n  * transactions for.\n  */\n-CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlockIndex* pindexStop, const WalletRescanReserver &reserver, bool fUpdate)\n+uint256 CWallet::ScanForWalletTransactions(const uint256& start_block, const uint256& stop_block, const WalletRescanReserver &reserver, bool fUpdate)\n {\n     int64_t nNow = GetTime();\n-    const CChainParams& chainParams = Params();\n \n     assert(reserver.isReserved());\n-    if (pindexStop) {\n-        assert(pindexStop->nHeight >= pindexStart->nHeight);\n-    }\n \n-    CBlockIndex* pindex = pindexStart;\n-    CBlockIndex* ret = nullptr;\n+    uint256 block_hash = start_block;\n+    uint256 ret;\n \n-    if (pindex) WalletLogPrintf(\"Rescan started from block %d...\\n\", pindex->nHeight);\n+    WalletLogPrintf(\"Rescan started from block %s...\\n\", start_block.ToString());\n \n     {\n         fAbortRescan = false;\n         ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n-        CBlockIndex* tip = nullptr;\n+        uint256 tip_hash;\n+        Optional<int> block_height;\n         double progress_begin;\n         double progress_end;\n         {\n-            LOCK(cs_main);\n-            progress_begin = GuessVerificationProgress(chainParams.TxData(), pindex);\n-            if (pindexStop == nullptr) {\n-                tip = chainActive.Tip();\n-                progress_end = GuessVerificationProgress(chainParams.TxData(), tip);\n+            auto locked_chain = chain().lock();\n+            if (Optional<int> tip_height = locked_chain->getHeight()) {\n+                tip_hash = locked_chain->getBlockHash(*tip_height);\n+            }\n+            block_height = locked_chain->getBlockHeight(block_hash);\n+            progress_begin = chain().guessVerificationProgress(block_hash);\n+            if (stop_block.IsNull()) {\n+                progress_end = chain().guessVerificationProgress(tip_hash);\n             } else {\n-                progress_end = GuessVerificationProgress(chainParams.TxData(), pindexStop);\n+                progress_end = chain().guessVerificationProgress(stop_block);\n             }\n         }\n         double progress_current = progress_begin;\n-        while (pindex && !fAbortRescan && !ShutdownRequested())\n+        while (block_height && !fAbortRescan && !ShutdownRequested())\n         {\n-            if (pindex->nHeight % 100 == 0 && progress_end - progress_begin > 0.0) {\n+            if (*block_height % 100 == 0 && progress_end - progress_begin > 0.0) {\n                 ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), std::max(1, std::min(99, (int)((progress_current - progress_begin) / (progress_end - progress_begin) * 100))));\n             }\n             if (GetTime() >= nNow + 60) {\n                 nNow = GetTime();\n-                WalletLogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n+                WalletLogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", *block_height, progress_current);\n             }\n \n             CBlock block;\n-            if (ReadBlockFromDisk(block, pindex, Params().GetConsensus())) {\n-                LOCK2(cs_main, cs_wallet);\n-                if (pindex && !chainActive.Contains(pindex)) {\n+            if (chain().findBlock(block_hash, &block) && !block.IsNull()) {\n+                auto locked_chain = chain().lock();\n+                LOCK(cs_wallet);\n+                if (!locked_chain->getBlockHeight(block_hash)) {\n                     // Abort scan if current block is no longer active, to prevent\n                     // marking transactions as coming from the wrong block.\n-                    ret = pindex;\n+                    ret = block_hash;\n                     break;\n                 }\n                 for (size_t posInBlock = 0; posInBlock < block.vtx.size(); ++posInBlock) {\n-                    SyncTransaction(block.vtx[posInBlock], pindex, posInBlock, fUpdate);\n+                    SyncTransaction(block.vtx[posInBlock], block_hash, posInBlock, fUpdate);\n                 }\n             } else {\n-                ret = pindex;\n+                ret = block_hash;\n             }\n-            if (pindex == pindexStop) {\n+            if (block_hash == stop_block) {\n                 break;\n             }\n             {\n-                LOCK(cs_main);\n-                pindex = chainActive.Next(pindex);\n-                progress_current = GuessVerificationProgress(chainParams.TxData(), pindex);\n-                if (pindexStop == nullptr && tip != chainActive.Tip()) {\n-                    tip = chainActive.Tip();\n+                const int prev_block_height = *block_height;\n+                const uint256 prev_block_hash = block_hash;\n+                const uint256 prev_tip_hash = tip_hash;\n+                block_height.reset();\n+                block_hash.SetNull();\n+                tip_hash.SetNull();\n+\n+                auto locked_chain = chain().lock();\n+                if (Optional<int> tip_height = locked_chain->getHeight()) {\n+                    if (locked_chain->getBlockHeight(prev_block_hash) && prev_block_height < *tip_height) {\n+                        block_height = prev_block_height + 1;\n+                        block_hash = locked_chain->getBlockHash(*block_height);\n+                    }\n+                    tip_hash = locked_chain->getBlockHash(*tip_height);\n+                }\n+\n+                progress_current = chain().guessVerificationProgress(block_hash);\n+                if (stop_block.IsNull() && prev_tip_hash != tip_hash) {\n                     // in case the tip has changed, update progress max\n-                    progress_end = GuessVerificationProgress(chainParams.TxData(), tip);\n+                    progress_end = chain().guessVerificationProgress(tip_hash);\n                 }\n             }\n         }\n-        if (pindex && fAbortRescan) {\n-            WalletLogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n-        } else if (pindex && ShutdownRequested()) {\n-            WalletLogPrintf(\"Rescan interrupted by shutdown request at block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n+        if (!block_hash.IsNull() && fAbortRescan) {\n+            WalletLogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", *block_height, progress_current);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 383,
    "commit_id": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "original_commit_id": "a10e919db4c9f37f0bb60fd62a232abf8bd3dede",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This triggers undefined behaviour if the optional `block_height` has not been initialised?",
    "created_at": "2018-10-14T14:27:00Z",
    "updated_at": "2018-11-06T19:07:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r224994715",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224994715"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r224994715"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224994715/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1723,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224994718",
    "pull_request_review_id": 164500755,
    "id": 224994718,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk5NDcxOA==",
    "diff_hunk": "@@ -1594,113 +1596,133 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n     // Find starting block. May be null if nCreateTime is greater than the\n     // highest blockchain timestamp, in which case there is nothing that needs\n     // to be scanned.\n-    CBlockIndex* startBlock = nullptr;\n+    uint256 start_block;\n     {\n-        LOCK(cs_main);\n-        startBlock = chainActive.FindEarliestAtLeast(startTime - TIMESTAMP_WINDOW);\n-        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n-    }\n-\n-    if (startBlock) {\n-        const CBlockIndex* const failedBlock = ScanForWalletTransactions(startBlock, nullptr, reserver, update);\n-        if (failedBlock) {\n-            return failedBlock->GetBlockTimeMax() + TIMESTAMP_WINDOW + 1;\n+        auto locked_chain = chain().lock();\n+        const Optional<int> start_height = locked_chain->findFirstBlockWithTime(startTime - TIMESTAMP_WINDOW);\n+        const Optional<int> tip_height = locked_chain->getHeight();\n+        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, tip_height && start_height ? *tip_height - *start_height + 1 : 0);\n+        if (start_height) start_block = locked_chain->getBlockHash(*start_height);\n+    }\n+\n+    if (!start_block.IsNull()) {\n+        uint256 failed_block = ScanForWalletTransactions(start_block, {} /* stop block */, reserver, update);\n+        if (!failed_block.IsNull()) {\n+            int64_t time_max;\n+            if (!chain().findBlock(failed_block, nullptr /* CBlock */, nullptr /* time */, &time_max)) {\n+                throw std::logic_error(\"ScanForWalletTransactions returned invalid block hash\");\n+            }\n+            return time_max + TIMESTAMP_WINDOW + 1;\n         }\n     }\n     return startTime;\n }\n \n /**\n- * Scan the block chain (starting in pindexStart) for transactions\n+ * Scan the block chain (starting in start_block) for transactions\n  * from or to us. If fUpdate is true, found transactions that already\n  * exist in the wallet will be updated.\n  *\n  * Returns null if scan was successful. Otherwise, if a complete rescan was not\n  * possible (due to pruning or corruption), returns pointer to the most recent\n  * block that could not be scanned.\n  *\n- * If pindexStop is not a nullptr, the scan will stop at the block-index\n- * defined by pindexStop\n+ * If stop_block is not null, the scan will stop at the block-index\n+ * defined by stop_block\n  *\n- * Caller needs to make sure pindexStop (and the optional pindexStart) are on\n+ * Caller needs to make sure stop_block (and the optional start_block) are on\n  * the main chain after to the addition of any new keys you want to detect\n  * transactions for.\n  */\n-CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlockIndex* pindexStop, const WalletRescanReserver &reserver, bool fUpdate)\n+uint256 CWallet::ScanForWalletTransactions(const uint256& start_block, const uint256& stop_block, const WalletRescanReserver &reserver, bool fUpdate)\n {\n     int64_t nNow = GetTime();\n-    const CChainParams& chainParams = Params();\n \n     assert(reserver.isReserved());\n-    if (pindexStop) {\n-        assert(pindexStop->nHeight >= pindexStart->nHeight);\n-    }\n \n-    CBlockIndex* pindex = pindexStart;\n-    CBlockIndex* ret = nullptr;\n+    uint256 block_hash = start_block;\n+    uint256 ret;\n \n-    if (pindex) WalletLogPrintf(\"Rescan started from block %d...\\n\", pindex->nHeight);\n+    WalletLogPrintf(\"Rescan started from block %s...\\n\", start_block.ToString());\n \n     {\n         fAbortRescan = false;\n         ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n-        CBlockIndex* tip = nullptr;\n+        uint256 tip_hash;\n+        Optional<int> block_height;\n         double progress_begin;\n         double progress_end;\n         {\n-            LOCK(cs_main);\n-            progress_begin = GuessVerificationProgress(chainParams.TxData(), pindex);\n-            if (pindexStop == nullptr) {\n-                tip = chainActive.Tip();\n-                progress_end = GuessVerificationProgress(chainParams.TxData(), tip);\n+            auto locked_chain = chain().lock();\n+            if (Optional<int> tip_height = locked_chain->getHeight()) {\n+                tip_hash = locked_chain->getBlockHash(*tip_height);\n+            }\n+            block_height = locked_chain->getBlockHeight(block_hash);\n+            progress_begin = chain().guessVerificationProgress(block_hash);\n+            if (stop_block.IsNull()) {\n+                progress_end = chain().guessVerificationProgress(tip_hash);\n             } else {\n-                progress_end = GuessVerificationProgress(chainParams.TxData(), pindexStop);\n+                progress_end = chain().guessVerificationProgress(stop_block);\n             }\n         }\n         double progress_current = progress_begin;\n-        while (pindex && !fAbortRescan && !ShutdownRequested())\n+        while (block_height && !fAbortRescan && !ShutdownRequested())\n         {\n-            if (pindex->nHeight % 100 == 0 && progress_end - progress_begin > 0.0) {\n+            if (*block_height % 100 == 0 && progress_end - progress_begin > 0.0) {\n                 ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), std::max(1, std::min(99, (int)((progress_current - progress_begin) / (progress_end - progress_begin) * 100))));\n             }\n             if (GetTime() >= nNow + 60) {\n                 nNow = GetTime();\n-                WalletLogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n+                WalletLogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", *block_height, progress_current);\n             }\n \n             CBlock block;\n-            if (ReadBlockFromDisk(block, pindex, Params().GetConsensus())) {\n-                LOCK2(cs_main, cs_wallet);\n-                if (pindex && !chainActive.Contains(pindex)) {\n+            if (chain().findBlock(block_hash, &block) && !block.IsNull()) {\n+                auto locked_chain = chain().lock();\n+                LOCK(cs_wallet);\n+                if (!locked_chain->getBlockHeight(block_hash)) {\n                     // Abort scan if current block is no longer active, to prevent\n                     // marking transactions as coming from the wrong block.\n-                    ret = pindex;\n+                    ret = block_hash;\n                     break;\n                 }\n                 for (size_t posInBlock = 0; posInBlock < block.vtx.size(); ++posInBlock) {\n-                    SyncTransaction(block.vtx[posInBlock], pindex, posInBlock, fUpdate);\n+                    SyncTransaction(block.vtx[posInBlock], block_hash, posInBlock, fUpdate);\n                 }\n             } else {\n-                ret = pindex;\n+                ret = block_hash;\n             }\n-            if (pindex == pindexStop) {\n+            if (block_hash == stop_block) {\n                 break;\n             }\n             {\n-                LOCK(cs_main);\n-                pindex = chainActive.Next(pindex);\n-                progress_current = GuessVerificationProgress(chainParams.TxData(), pindex);\n-                if (pindexStop == nullptr && tip != chainActive.Tip()) {\n-                    tip = chainActive.Tip();\n+                const int prev_block_height = *block_height;\n+                const uint256 prev_block_hash = block_hash;\n+                const uint256 prev_tip_hash = tip_hash;\n+                block_height.reset();\n+                block_hash.SetNull();\n+                tip_hash.SetNull();\n+\n+                auto locked_chain = chain().lock();\n+                if (Optional<int> tip_height = locked_chain->getHeight()) {\n+                    if (locked_chain->getBlockHeight(prev_block_hash) && prev_block_height < *tip_height) {\n+                        block_height = prev_block_height + 1;\n+                        block_hash = locked_chain->getBlockHash(*block_height);\n+                    }\n+                    tip_hash = locked_chain->getBlockHash(*tip_height);\n+                }\n+\n+                progress_current = chain().guessVerificationProgress(block_hash);\n+                if (stop_block.IsNull() && prev_tip_hash != tip_hash) {\n                     // in case the tip has changed, update progress max\n-                    progress_end = GuessVerificationProgress(chainParams.TxData(), tip);\n+                    progress_end = chain().guessVerificationProgress(tip_hash);\n                 }\n             }\n         }\n-        if (pindex && fAbortRescan) {\n-            WalletLogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n-        } else if (pindex && ShutdownRequested()) {\n-            WalletLogPrintf(\"Rescan interrupted by shutdown request at block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n+        if (!block_hash.IsNull() && fAbortRescan) {\n+            WalletLogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", *block_height, progress_current);\n+        } else if (!block_hash.IsNull() && ShutdownRequested()) {\n+            WalletLogPrintf(\"Rescan interrupted by shutdown request at block %d. Progress=%f\\n\", *block_height, progress_current);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 385,
    "commit_id": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "original_commit_id": "a10e919db4c9f37f0bb60fd62a232abf8bd3dede",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This triggers undefined behaviour if the optional `block_height` has not been initialised?",
    "created_at": "2018-10-14T14:27:06Z",
    "updated_at": "2018-11-06T19:07:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r224994718",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224994718"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r224994718"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224994718/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1725,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224994773",
    "pull_request_review_id": 164500810,
    "id": 224994773,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk5NDc3Mw==",
    "diff_hunk": "@@ -0,0 +1,186 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <interfaces/chain.h>\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <sync.h>\n+#include <threadsafety.h>\n+#include <uint256.h>\n+#include <util.h>\n+#include <validation.h>\n+\n+#include <memory>\n+#include <unordered_map>\n+#include <utility>\n+\n+namespace interfaces {\n+namespace {\n+\n+class LockImpl : public Chain::Lock\n+{\n+    Optional<int> getHeight() override\n+    {\n+        int height = ::chainActive.Height();\n+        if (height >= 0) {\n+            return height;\n+        }\n+        return nullopt;\n+    }\n+    Optional<int> getBlockHeight(const uint256& hash) override\n+    {\n+        auto it = ::mapBlockIndex.find(hash);\n+        if (it != ::mapBlockIndex.end() && it->second) {\n+            if (::chainActive.Contains(it->second)) {",
    "path": "src/interfaces/chain.cpp",
    "position": null,
    "original_position": 38,
    "commit_id": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "original_commit_id": "a10e919db4c9f37f0bb60fd62a232abf8bd3dede",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Collapse into `if` statement above?",
    "created_at": "2018-10-14T14:28:26Z",
    "updated_at": "2018-11-06T19:07:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r224994773",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224994773"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r224994773"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224994773/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 38,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225295837",
    "pull_request_review_id": 164869661,
    "id": 225295837,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTI5NTgzNw==",
    "diff_hunk": "@@ -1594,113 +1596,133 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n     // Find starting block. May be null if nCreateTime is greater than the\n     // highest blockchain timestamp, in which case there is nothing that needs\n     // to be scanned.\n-    CBlockIndex* startBlock = nullptr;\n+    uint256 start_block;\n     {\n-        LOCK(cs_main);\n-        startBlock = chainActive.FindEarliestAtLeast(startTime - TIMESTAMP_WINDOW);\n-        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n-    }\n-\n-    if (startBlock) {\n-        const CBlockIndex* const failedBlock = ScanForWalletTransactions(startBlock, nullptr, reserver, update);\n-        if (failedBlock) {\n-            return failedBlock->GetBlockTimeMax() + TIMESTAMP_WINDOW + 1;\n+        auto locked_chain = chain().lock();\n+        const Optional<int> start_height = locked_chain->findFirstBlockWithTime(startTime - TIMESTAMP_WINDOW);\n+        const Optional<int> tip_height = locked_chain->getHeight();\n+        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, tip_height && start_height ? *tip_height - *start_height + 1 : 0);\n+        if (start_height) start_block = locked_chain->getBlockHash(*start_height);\n+    }\n+\n+    if (!start_block.IsNull()) {\n+        uint256 failed_block = ScanForWalletTransactions(start_block, {} /* stop block */, reserver, update);\n+        if (!failed_block.IsNull()) {\n+            int64_t time_max;\n+            if (!chain().findBlock(failed_block, nullptr /* CBlock */, nullptr /* time */, &time_max)) {\n+                throw std::logic_error(\"ScanForWalletTransactions returned invalid block hash\");\n+            }\n+            return time_max + TIMESTAMP_WINDOW + 1;\n         }\n     }\n     return startTime;\n }\n \n /**\n- * Scan the block chain (starting in pindexStart) for transactions\n+ * Scan the block chain (starting in start_block) for transactions\n  * from or to us. If fUpdate is true, found transactions that already\n  * exist in the wallet will be updated.\n  *\n  * Returns null if scan was successful. Otherwise, if a complete rescan was not\n  * possible (due to pruning or corruption), returns pointer to the most recent\n  * block that could not be scanned.\n  *\n- * If pindexStop is not a nullptr, the scan will stop at the block-index\n- * defined by pindexStop\n+ * If stop_block is not null, the scan will stop at the block-index\n+ * defined by stop_block\n  *\n- * Caller needs to make sure pindexStop (and the optional pindexStart) are on\n+ * Caller needs to make sure stop_block (and the optional start_block) are on\n  * the main chain after to the addition of any new keys you want to detect\n  * transactions for.\n  */\n-CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlockIndex* pindexStop, const WalletRescanReserver &reserver, bool fUpdate)\n+uint256 CWallet::ScanForWalletTransactions(const uint256& start_block, const uint256& stop_block, const WalletRescanReserver &reserver, bool fUpdate)\n {\n     int64_t nNow = GetTime();\n-    const CChainParams& chainParams = Params();\n \n     assert(reserver.isReserved());\n-    if (pindexStop) {\n-        assert(pindexStop->nHeight >= pindexStart->nHeight);\n-    }\n \n-    CBlockIndex* pindex = pindexStart;\n-    CBlockIndex* ret = nullptr;\n+    uint256 block_hash = start_block;\n+    uint256 ret;\n \n-    if (pindex) WalletLogPrintf(\"Rescan started from block %d...\\n\", pindex->nHeight);\n+    WalletLogPrintf(\"Rescan started from block %s...\\n\", start_block.ToString());\n \n     {\n         fAbortRescan = false;\n         ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n-        CBlockIndex* tip = nullptr;\n+        uint256 tip_hash;\n+        Optional<int> block_height;\n         double progress_begin;\n         double progress_end;\n         {\n-            LOCK(cs_main);\n-            progress_begin = GuessVerificationProgress(chainParams.TxData(), pindex);\n-            if (pindexStop == nullptr) {\n-                tip = chainActive.Tip();\n-                progress_end = GuessVerificationProgress(chainParams.TxData(), tip);\n+            auto locked_chain = chain().lock();\n+            if (Optional<int> tip_height = locked_chain->getHeight()) {\n+                tip_hash = locked_chain->getBlockHash(*tip_height);\n+            }\n+            block_height = locked_chain->getBlockHeight(block_hash);\n+            progress_begin = chain().guessVerificationProgress(block_hash);\n+            if (stop_block.IsNull()) {\n+                progress_end = chain().guessVerificationProgress(tip_hash);\n             } else {\n-                progress_end = GuessVerificationProgress(chainParams.TxData(), pindexStop);\n+                progress_end = chain().guessVerificationProgress(stop_block);\n             }\n         }\n         double progress_current = progress_begin;\n-        while (pindex && !fAbortRescan && !ShutdownRequested())\n+        while (block_height && !fAbortRescan && !ShutdownRequested())\n         {\n-            if (pindex->nHeight % 100 == 0 && progress_end - progress_begin > 0.0) {\n+            if (*block_height % 100 == 0 && progress_end - progress_begin > 0.0) {\n                 ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), std::max(1, std::min(99, (int)((progress_current - progress_begin) / (progress_end - progress_begin) * 100))));\n             }\n             if (GetTime() >= nNow + 60) {\n                 nNow = GetTime();\n-                WalletLogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n+                WalletLogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", *block_height, progress_current);\n             }\n \n             CBlock block;\n-            if (ReadBlockFromDisk(block, pindex, Params().GetConsensus())) {\n-                LOCK2(cs_main, cs_wallet);\n-                if (pindex && !chainActive.Contains(pindex)) {\n+            if (chain().findBlock(block_hash, &block) && !block.IsNull()) {\n+                auto locked_chain = chain().lock();\n+                LOCK(cs_wallet);\n+                if (!locked_chain->getBlockHeight(block_hash)) {\n                     // Abort scan if current block is no longer active, to prevent\n                     // marking transactions as coming from the wrong block.\n-                    ret = pindex;\n+                    ret = block_hash;\n                     break;\n                 }\n                 for (size_t posInBlock = 0; posInBlock < block.vtx.size(); ++posInBlock) {\n-                    SyncTransaction(block.vtx[posInBlock], pindex, posInBlock, fUpdate);\n+                    SyncTransaction(block.vtx[posInBlock], block_hash, posInBlock, fUpdate);\n                 }\n             } else {\n-                ret = pindex;\n+                ret = block_hash;\n             }\n-            if (pindex == pindexStop) {\n+            if (block_hash == stop_block) {\n                 break;\n             }\n             {\n-                LOCK(cs_main);\n-                pindex = chainActive.Next(pindex);\n-                progress_current = GuessVerificationProgress(chainParams.TxData(), pindex);\n-                if (pindexStop == nullptr && tip != chainActive.Tip()) {\n-                    tip = chainActive.Tip();\n+                const int prev_block_height = *block_height;\n+                const uint256 prev_block_hash = block_hash;\n+                const uint256 prev_tip_hash = tip_hash;\n+                block_height.reset();\n+                block_hash.SetNull();\n+                tip_hash.SetNull();\n+\n+                auto locked_chain = chain().lock();\n+                if (Optional<int> tip_height = locked_chain->getHeight()) {\n+                    if (locked_chain->getBlockHeight(prev_block_hash) && prev_block_height < *tip_height) {\n+                        block_height = prev_block_height + 1;\n+                        block_hash = locked_chain->getBlockHash(*block_height);\n+                    }\n+                    tip_hash = locked_chain->getBlockHash(*tip_height);\n+                }\n+\n+                progress_current = chain().guessVerificationProgress(block_hash);\n+                if (stop_block.IsNull() && prev_tip_hash != tip_hash) {\n                     // in case the tip has changed, update progress max\n-                    progress_end = GuessVerificationProgress(chainParams.TxData(), tip);\n+                    progress_end = chain().guessVerificationProgress(tip_hash);\n                 }\n             }\n         }\n-        if (pindex && fAbortRescan) {\n-            WalletLogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n-        } else if (pindex && ShutdownRequested()) {\n-            WalletLogPrintf(\"Rescan interrupted by shutdown request at block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n+        if (!block_hash.IsNull() && fAbortRescan) {\n+            WalletLogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", *block_height, progress_current);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 383,
    "commit_id": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "original_commit_id": "a10e919db4c9f37f0bb60fd62a232abf8bd3dede",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> This triggers undefined behaviour if the optional block_height has not been initialised?\r\n\r\nYes, and previously it would segfault if pindex were null, but these things will not happen at the time this function is called. I think the code in this function is not beautiful and could be rewritten, but I'm trying here to change existing code as little as possible, so it is easier for reviewers to verify that that behavior is unchanged.",
    "created_at": "2018-10-15T19:55:54Z",
    "updated_at": "2018-11-06T19:07:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r225295837",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225295837"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r225295837"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225295837/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1723,
    "side": "RIGHT",
    "in_reply_to_id": 224994715
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225295954",
    "pull_request_review_id": 164869661,
    "id": 225295954,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTI5NTk1NA==",
    "diff_hunk": "@@ -1594,113 +1596,133 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n     // Find starting block. May be null if nCreateTime is greater than the\n     // highest blockchain timestamp, in which case there is nothing that needs\n     // to be scanned.\n-    CBlockIndex* startBlock = nullptr;\n+    uint256 start_block;\n     {\n-        LOCK(cs_main);\n-        startBlock = chainActive.FindEarliestAtLeast(startTime - TIMESTAMP_WINDOW);\n-        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n-    }\n-\n-    if (startBlock) {\n-        const CBlockIndex* const failedBlock = ScanForWalletTransactions(startBlock, nullptr, reserver, update);\n-        if (failedBlock) {\n-            return failedBlock->GetBlockTimeMax() + TIMESTAMP_WINDOW + 1;\n+        auto locked_chain = chain().lock();\n+        const Optional<int> start_height = locked_chain->findFirstBlockWithTime(startTime - TIMESTAMP_WINDOW);\n+        const Optional<int> tip_height = locked_chain->getHeight();\n+        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, tip_height && start_height ? *tip_height - *start_height + 1 : 0);\n+        if (start_height) start_block = locked_chain->getBlockHash(*start_height);\n+    }\n+\n+    if (!start_block.IsNull()) {\n+        uint256 failed_block = ScanForWalletTransactions(start_block, {} /* stop block */, reserver, update);\n+        if (!failed_block.IsNull()) {\n+            int64_t time_max;\n+            if (!chain().findBlock(failed_block, nullptr /* CBlock */, nullptr /* time */, &time_max)) {\n+                throw std::logic_error(\"ScanForWalletTransactions returned invalid block hash\");\n+            }\n+            return time_max + TIMESTAMP_WINDOW + 1;\n         }\n     }\n     return startTime;\n }\n \n /**\n- * Scan the block chain (starting in pindexStart) for transactions\n+ * Scan the block chain (starting in start_block) for transactions\n  * from or to us. If fUpdate is true, found transactions that already\n  * exist in the wallet will be updated.\n  *\n  * Returns null if scan was successful. Otherwise, if a complete rescan was not\n  * possible (due to pruning or corruption), returns pointer to the most recent\n  * block that could not be scanned.\n  *\n- * If pindexStop is not a nullptr, the scan will stop at the block-index\n- * defined by pindexStop\n+ * If stop_block is not null, the scan will stop at the block-index\n+ * defined by stop_block\n  *\n- * Caller needs to make sure pindexStop (and the optional pindexStart) are on\n+ * Caller needs to make sure stop_block (and the optional start_block) are on\n  * the main chain after to the addition of any new keys you want to detect\n  * transactions for.\n  */\n-CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlockIndex* pindexStop, const WalletRescanReserver &reserver, bool fUpdate)\n+uint256 CWallet::ScanForWalletTransactions(const uint256& start_block, const uint256& stop_block, const WalletRescanReserver &reserver, bool fUpdate)\n {\n     int64_t nNow = GetTime();\n-    const CChainParams& chainParams = Params();\n \n     assert(reserver.isReserved());\n-    if (pindexStop) {\n-        assert(pindexStop->nHeight >= pindexStart->nHeight);\n-    }\n \n-    CBlockIndex* pindex = pindexStart;\n-    CBlockIndex* ret = nullptr;\n+    uint256 block_hash = start_block;\n+    uint256 ret;\n \n-    if (pindex) WalletLogPrintf(\"Rescan started from block %d...\\n\", pindex->nHeight);\n+    WalletLogPrintf(\"Rescan started from block %s...\\n\", start_block.ToString());\n \n     {\n         fAbortRescan = false;\n         ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n-        CBlockIndex* tip = nullptr;\n+        uint256 tip_hash;\n+        Optional<int> block_height;\n         double progress_begin;\n         double progress_end;\n         {\n-            LOCK(cs_main);\n-            progress_begin = GuessVerificationProgress(chainParams.TxData(), pindex);\n-            if (pindexStop == nullptr) {\n-                tip = chainActive.Tip();\n-                progress_end = GuessVerificationProgress(chainParams.TxData(), tip);\n+            auto locked_chain = chain().lock();\n+            if (Optional<int> tip_height = locked_chain->getHeight()) {\n+                tip_hash = locked_chain->getBlockHash(*tip_height);\n+            }\n+            block_height = locked_chain->getBlockHeight(block_hash);\n+            progress_begin = chain().guessVerificationProgress(block_hash);\n+            if (stop_block.IsNull()) {\n+                progress_end = chain().guessVerificationProgress(tip_hash);\n             } else {\n-                progress_end = GuessVerificationProgress(chainParams.TxData(), pindexStop);\n+                progress_end = chain().guessVerificationProgress(stop_block);\n             }\n         }\n         double progress_current = progress_begin;\n-        while (pindex && !fAbortRescan && !ShutdownRequested())\n+        while (block_height && !fAbortRescan && !ShutdownRequested())\n         {\n-            if (pindex->nHeight % 100 == 0 && progress_end - progress_begin > 0.0) {\n+            if (*block_height % 100 == 0 && progress_end - progress_begin > 0.0) {\n                 ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), std::max(1, std::min(99, (int)((progress_current - progress_begin) / (progress_end - progress_begin) * 100))));\n             }\n             if (GetTime() >= nNow + 60) {\n                 nNow = GetTime();\n-                WalletLogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n+                WalletLogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", *block_height, progress_current);\n             }\n \n             CBlock block;\n-            if (ReadBlockFromDisk(block, pindex, Params().GetConsensus())) {\n-                LOCK2(cs_main, cs_wallet);\n-                if (pindex && !chainActive.Contains(pindex)) {\n+            if (chain().findBlock(block_hash, &block) && !block.IsNull()) {\n+                auto locked_chain = chain().lock();\n+                LOCK(cs_wallet);\n+                if (!locked_chain->getBlockHeight(block_hash)) {\n                     // Abort scan if current block is no longer active, to prevent\n                     // marking transactions as coming from the wrong block.\n-                    ret = pindex;\n+                    ret = block_hash;\n                     break;\n                 }\n                 for (size_t posInBlock = 0; posInBlock < block.vtx.size(); ++posInBlock) {\n-                    SyncTransaction(block.vtx[posInBlock], pindex, posInBlock, fUpdate);\n+                    SyncTransaction(block.vtx[posInBlock], block_hash, posInBlock, fUpdate);\n                 }\n             } else {\n-                ret = pindex;\n+                ret = block_hash;\n             }\n-            if (pindex == pindexStop) {\n+            if (block_hash == stop_block) {\n                 break;\n             }\n             {\n-                LOCK(cs_main);\n-                pindex = chainActive.Next(pindex);\n-                progress_current = GuessVerificationProgress(chainParams.TxData(), pindex);\n-                if (pindexStop == nullptr && tip != chainActive.Tip()) {\n-                    tip = chainActive.Tip();\n+                const int prev_block_height = *block_height;\n+                const uint256 prev_block_hash = block_hash;\n+                const uint256 prev_tip_hash = tip_hash;\n+                block_height.reset();\n+                block_hash.SetNull();\n+                tip_hash.SetNull();\n+\n+                auto locked_chain = chain().lock();\n+                if (Optional<int> tip_height = locked_chain->getHeight()) {\n+                    if (locked_chain->getBlockHeight(prev_block_hash) && prev_block_height < *tip_height) {\n+                        block_height = prev_block_height + 1;\n+                        block_hash = locked_chain->getBlockHash(*block_height);\n+                    }\n+                    tip_hash = locked_chain->getBlockHash(*tip_height);\n+                }\n+\n+                progress_current = chain().guessVerificationProgress(block_hash);\n+                if (stop_block.IsNull() && prev_tip_hash != tip_hash) {\n                     // in case the tip has changed, update progress max\n-                    progress_end = GuessVerificationProgress(chainParams.TxData(), tip);\n+                    progress_end = chain().guessVerificationProgress(tip_hash);\n                 }\n             }\n         }\n-        if (pindex && fAbortRescan) {\n-            WalletLogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n-        } else if (pindex && ShutdownRequested()) {\n-            WalletLogPrintf(\"Rescan interrupted by shutdown request at block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n+        if (!block_hash.IsNull() && fAbortRescan) {\n+            WalletLogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", *block_height, progress_current);\n+        } else if (!block_hash.IsNull() && ShutdownRequested()) {\n+            WalletLogPrintf(\"Rescan interrupted by shutdown request at block %d. Progress=%f\\n\", *block_height, progress_current);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 385,
    "commit_id": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "original_commit_id": "a10e919db4c9f37f0bb60fd62a232abf8bd3dede",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "See https://github.com/bitcoin/bitcoin/pull/14437#discussion_r225295837",
    "created_at": "2018-10-15T19:56:14Z",
    "updated_at": "2018-11-06T19:07:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r225295954",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225295954"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r225295954"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225295954/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1725,
    "side": "RIGHT",
    "in_reply_to_id": 224994718
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226237048",
    "pull_request_review_id": 166007217,
    "id": 226237048,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjIzNzA0OA==",
    "diff_hunk": "@@ -461,6 +464,7 @@ endif\n bitcoind_LDADD = \\\n   $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_WALLET) \\\n+  $(LIBBITCOIN_SERVER) \\",
    "path": "src/Makefile.am",
    "position": 20,
    "original_position": 28,
    "commit_id": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "original_commit_id": "a10e919db4c9f37f0bb60fd62a232abf8bd3dede",
    "user": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't know why do you add `$(LIBBITCOIN_SERVER)` here. I can see one above.",
    "created_at": "2018-10-18T09:39:21Z",
    "updated_at": "2018-11-06T19:07:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r226237048",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226237048"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r226237048"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226237048/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 470,
    "original_line": 470,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226395545",
    "pull_request_review_id": 164869661,
    "id": 226395545,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjM5NTU0NQ==",
    "diff_hunk": "@@ -461,6 +464,7 @@ endif\n bitcoind_LDADD = \\\n   $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_WALLET) \\\n+  $(LIBBITCOIN_SERVER) \\",
    "path": "src/Makefile.am",
    "position": 20,
    "original_position": 28,
    "commit_id": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "original_commit_id": "a10e919db4c9f37f0bb60fd62a232abf8bd3dede",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Remove direct node->wallet calls in init.cpp\" (eb1709c1af21881283f3c3962ebabb5de9423a56)\r\n\r\n> I don't know why do you add $(LIBBITCOIN_SERVER) here. I can see one above.\r\n\r\nOur libraries are static and have circular dependencies, so for unix linkers which process libraries in command line order and only pull in subsets of object files needed to resolve previously unresolved symbols, it's often necessary to list the same libraries multiple times. For background:\r\n\r\nhttps://stackoverflow.com/questions/45135/why-does-the-order-in-which-libraries-are-linked-sometimes-cause-errors-in-gcc\r\nhttps://eli.thegreenplace.net/2013/07/09/library-order-in-static-linking#circular-dependency\r\n\r\nIn this specific case, there's a mutual dependency between wallet and server libraries, and dropping server after wallet leads to:\r\n\r\n```\r\n  CXXLD    bitcoind\r\nlibbitcoin_wallet.a(libbitcoin_wallet_a-wallet.o): In function `interfaces::(anonymous namespace)::WalletImpl::handleUnload(std::function<void ()>)':\r\n/home/russ/src/bitcoin/src/interfaces/wallet.cpp:444: undefined reference to `interfaces::MakeHandler(boost::signals2::connection)'\r\nlibbitcoin_wallet.a(libbitcoin_wallet_a-wallet.o): In function `interfaces::(anonymous namespace)::WalletImpl::handleShowProgress(std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)>)':\r\n/home/russ/src/bitcoin/src/interfaces/wallet.cpp:448: undefined reference to `interfaces::MakeHandler(boost::signals2::connection)'\r\nlibbitcoin_wallet.a(libbitcoin_wallet_a-wallet.o): In function `interfaces::(anonymous namespace)::WalletImpl::handleStatusChanged(std::function<void ()>)':\r\n/home/russ/src/bitcoin/src/interfaces/wallet.cpp:452: undefined reference to `interfaces::MakeHandler(boost::signals2::connection)'\r\nlibbitcoin_wallet.a(libbitcoin_wallet_a-wallet.o): In function `interfaces::(anonymous namespace)::WalletImpl::handleAddressBookChanged(std::function<void (boost::variant<CNoDestination, CKeyID, CScriptID, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, ChangeType)>)':\r\n/home/russ/src/bitcoin/src/interfaces/wallet.cpp:456: undefined reference to `interfaces::MakeHandler(boost::signals2::connection)'\r\nlibbitcoin_wallet.a(libbitcoin_wallet_a-wallet.o): In function `interfaces::(anonymous namespace)::WalletImpl::handleTransactionChanged(std::function<void (uint256 const&, ChangeType)>)':\r\n/home/russ/src/bitcoin/src/interfaces/wallet.cpp:462: undefined reference to `interfaces::MakeHandler(boost::signals2::connection)'\r\nlibbitcoin_wallet.a(libbitcoin_wallet_a-wallet.o):/home/russ/src/bitcoin/src/interfaces/wallet.cpp:467: more undefined references to `interfaces::MakeHandler(boost::signals2::connection)' follow\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n```",
    "created_at": "2018-10-18T17:26:00Z",
    "updated_at": "2018-11-06T19:07:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r226395545",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226395545"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r226395545"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226395545/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 470,
    "original_line": 470,
    "side": "RIGHT",
    "in_reply_to_id": 226237048
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230451182",
    "pull_request_review_id": 171199537,
    "id": 230451182,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDQ1MTE4Mg==",
    "diff_hunk": "@@ -460,8 +494,32 @@ class WalletImpl : public Wallet\n     CWallet& m_wallet;\n };\n \n+class WalletClientImpl : public ChainClient\n+{\n+public:\n+    WalletClientImpl(Chain& chain, std::vector<std::string> wallet_filenames)\n+        : m_chain(chain), m_wallet_filenames(std::move(wallet_filenames))\n+    {\n+    }\n+    void registerRpcs() override { RegisterWalletRPCCommands(::tableRPC); }",
    "path": "src/interfaces/wallet.cpp",
    "position": null,
    "original_position": 339,
    "commit_id": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "original_commit_id": "c4b750f510d1913a6af6549b17bd3d89e211c62c",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "in commit e615ac5960\r\n\r\nnit: I'd prefer to use return even in the void context. It is more verbose but seems safer in context of future changes. (Feel free to ignore this style nit)",
    "created_at": "2018-11-02T17:30:37Z",
    "updated_at": "2018-11-06T19:07:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r230451182",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230451182"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r230451182"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230451182/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 504,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230480869",
    "pull_request_review_id": 171236710,
    "id": 230480869,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDQ4MDg2OQ==",
    "diff_hunk": "@@ -0,0 +1,172 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <interfaces/chain.h>\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <primitives/block.h>\n+#include <sync.h>\n+#include <uint256.h>\n+#include <util.h>\n+#include <validation.h>\n+\n+#include <memory>\n+#include <unordered_map>\n+#include <utility>\n+\n+namespace interfaces {\n+namespace {\n+\n+class LockImpl : public Chain::Lock\n+{\n+    Optional<int> getHeight() override\n+    {\n+        int height = ::chainActive.Height();\n+        if (height >= 0) {\n+            return height;\n+        }\n+        return nullopt;\n+    }\n+    Optional<int> getBlockHeight(const uint256& hash) override\n+    {\n+        auto it = ::mapBlockIndex.find(hash);\n+        if (it != ::mapBlockIndex.end() && it->second && ::chainActive.Contains(it->second)) {\n+            return it->second->nHeight;\n+        }\n+        return nullopt;\n+    }\n+    int getBlockDepth(const uint256& hash) override\n+    {\n+        const Optional<int> tip_height = getHeight();\n+        const Optional<int> height = getBlockHeight(hash);\n+        return tip_height && height ? *tip_height - *height + 1 : 0;\n+    }\n+    uint256 getBlockHash(int height) override { return ::chainActive[height]->GetBlockHash(); }",
    "path": "src/interfaces/chain.cpp",
    "position": null,
    "original_position": 46,
    "commit_id": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "original_commit_id": "c4b750f510d1913a6af6549b17bd3d89e211c62c",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "just a comment in c4b750f510: These could segfault on a reorg",
    "created_at": "2018-11-02T19:16:34Z",
    "updated_at": "2018-11-06T19:07:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r230480869",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230480869"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r230480869"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230480869/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 46,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230490317",
    "pull_request_review_id": 171236710,
    "id": 230490317,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDQ5MDMxNw==",
    "diff_hunk": "@@ -38,6 +105,16 @@ class Chain\n     //! method is temporary and is only used in a few places to avoid changing\n     //! behavior while code is transitioned to use the Chain::Lock interface.\n     virtual std::unique_ptr<Lock> assumeLocked() = 0;\n+\n+    //! Return whether node has the block and optionally return block metadata or contents.\n+    virtual bool findBlock(const uint256& hash,",
    "path": "src/interfaces/chain.h",
    "position": null,
    "original_position": 92,
    "commit_id": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "original_commit_id": "c4b750f510d1913a6af6549b17bd3d89e211c62c",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "in commit c4b750f510\r\n\r\nnit: Could state that `block->IsNull()` indicates a read-from-disk error.",
    "created_at": "2018-11-02T19:55:13Z",
    "updated_at": "2018-11-06T19:07:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r230490317",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230490317"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r230490317"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230490317/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 110,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230492241",
    "pull_request_review_id": 171236710,
    "id": 230492241,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDQ5MjI0MQ==",
    "diff_hunk": "@@ -538,6 +537,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n     }\n \n+    Optional<int> tip_height;",
    "path": "src/wallet/rpcdump.cpp",
    "position": null,
    "original_position": 14,
    "commit_id": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "original_commit_id": "c4b750f510d1913a6af6549b17bd3d89e211c62c",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "in commit c4b750f:\r\n\r\nWhy is this needed?",
    "created_at": "2018-11-02T20:02:56Z",
    "updated_at": "2018-11-06T19:07:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r230492241",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230492241"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r230492241"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230492241/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 540,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230494455",
    "pull_request_review_id": 171236710,
    "id": 230494455,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDQ5NDQ1NQ==",
    "diff_hunk": "@@ -101,7 +101,11 @@ static void WalletTxToJSON(interfaces::Chain& chain, interfaces::Chain::Lock& lo\n     {\n         entry.pushKV(\"blockhash\", wtx.hashBlock.GetHex());\n         entry.pushKV(\"blockindex\", wtx.nIndex);\n-        entry.pushKV(\"blocktime\", LookupBlockIndex(wtx.hashBlock)->GetBlockTime());\n+        int64_t block_time;\n+        if (!chain.findBlock(wtx.hashBlock, nullptr /* CBlock */, &block_time)) {",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 6,
    "commit_id": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "original_commit_id": "c4b750f510d1913a6af6549b17bd3d89e211c62c",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "in commit c4b750f:\r\n\r\nThe name of the argument is `block`, not `CBlock`? ",
    "created_at": "2018-11-02T20:11:30Z",
    "updated_at": "2018-11-06T19:07:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r230494455",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230494455"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r230494455"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230494455/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 105,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230495711",
    "pull_request_review_id": 171236710,
    "id": 230495711,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDQ5NTcxMQ==",
    "diff_hunk": "@@ -101,7 +101,11 @@ static void WalletTxToJSON(interfaces::Chain& chain, interfaces::Chain::Lock& lo\n     {\n         entry.pushKV(\"blockhash\", wtx.hashBlock.GetHex());\n         entry.pushKV(\"blockindex\", wtx.nIndex);\n-        entry.pushKV(\"blocktime\", LookupBlockIndex(wtx.hashBlock)->GetBlockTime());\n+        int64_t block_time;\n+        if (!chain.findBlock(wtx.hashBlock, nullptr /* CBlock */, &block_time)) {\n+            throw std::logic_error(\"invalid wallet transaction block hash\");",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 7,
    "commit_id": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "original_commit_id": "c4b750f510d1913a6af6549b17bd3d89e211c62c",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "in commit c4b750f:\r\n\r\nIt is not immediately clear where this exceptions goes to. Crashes the node?\r\n\r\nI'd prefer if we sticked to jsonrpc exceptions in the rpc module, so that broken rpc code would not crash the node.",
    "created_at": "2018-11-02T20:16:15Z",
    "updated_at": "2018-11-06T19:07:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r230495711",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230495711"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r230495711"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230495711/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 106,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230501820",
    "pull_request_review_id": 171236710,
    "id": 230501820,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDUwMTgyMA==",
    "diff_hunk": "@@ -54,4 +54,15 @@\n #define ASSERT_EXCLUSIVE_LOCK(...)\n #endif // __GNUC__\n \n+// Utility class for indicating to compiler thread analysis that a mutex is\n+// locked (when it couldn't be determined otherwise).\n+struct SCOPED_LOCKABLE LockAnnotation\n+{\n+    template <typename Mutex>\n+    explicit LockAnnotation(Mutex& mutex) EXCLUSIVE_LOCK_FUNCTION(mutex)\n+    {\n+    }",
    "path": "src/threadsafety.h",
    "position": 11,
    "original_position": 11,
    "commit_id": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "original_commit_id": "0b2cf7c3a8edd6feb4a8504675960c9cfcbc613c",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "in commit 0b2cf7c3a8edd6feb4a8504675960c9cfcbc613c:\r\n\r\nCould add the runtime assert that the lock is taken?\r\n\r\n`AssertLockHeld`",
    "created_at": "2018-11-02T20:39:40Z",
    "updated_at": "2018-11-06T19:07:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r230501820",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230501820"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r230501820"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230501820/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 64,
    "original_line": 64,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230900731",
    "pull_request_review_id": 171745555,
    "id": 230900731,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDkwMDczMQ==",
    "diff_hunk": "@@ -3741,7 +3754,8 @@ unsigned int CWallet::ComputeTimeSmart(const CWalletTx& wtx) const\n {\n     unsigned int nTimeSmart = wtx.nTimeReceived;\n     if (!wtx.hashUnset()) {\n-        if (const CBlockIndex* pindex = LookupBlockIndex(wtx.hashBlock)) {\n+        int64_t blocktime;\n+        if (chain().findBlock(wtx.hashBlock, nullptr /* CBlock */, &blocktime)) {",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 349,
    "commit_id": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "original_commit_id": "c4b750f510d1913a6af6549b17bd3d89e211c62c",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit c4b750f510d1913a6:\r\n\r\nThe named argument is `block`, not `CBlock`?",
    "created_at": "2018-11-05T20:31:08Z",
    "updated_at": "2018-11-06T19:07:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r230900731",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230900731"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r230900731"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230900731/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3758,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230943966",
    "pull_request_review_id": 171798528,
    "id": 230943966,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDk0Mzk2Ng==",
    "diff_hunk": "@@ -54,4 +54,15 @@\n #define ASSERT_EXCLUSIVE_LOCK(...)\n #endif // __GNUC__\n \n+// Utility class for indicating to compiler thread analysis that a mutex is\n+// locked (when it couldn't be determined otherwise).\n+struct SCOPED_LOCKABLE LockAnnotation\n+{\n+    template <typename Mutex>\n+    explicit LockAnnotation(Mutex& mutex) EXCLUSIVE_LOCK_FUNCTION(mutex)\n+    {\n+    }",
    "path": "src/threadsafety.h",
    "position": 11,
    "original_position": 11,
    "commit_id": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "original_commit_id": "0b2cf7c3a8edd6feb4a8504675960c9cfcbc613c",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/14437#discussion_r230501820\r\n\r\nThat would make this depend on sync.h and require a bitcoin debug mutex instead of working with any mutex. It would also print a less useful file/line number than a standalone assert. Better imo to have separate locking primitives that each do one job well than to have a combined one that's worse at both jobs.\r\n",
    "created_at": "2018-11-05T22:51:36Z",
    "updated_at": "2018-11-06T19:07:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r230943966",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230943966"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r230943966"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230943966/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 64,
    "original_line": 64,
    "side": "RIGHT",
    "in_reply_to_id": 230501820
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231461962",
    "pull_request_review_id": 172435866,
    "id": 231461962,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTQ2MTk2Mg==",
    "diff_hunk": "@@ -33,6 +34,26 @@\n #include <utility>\n #include <vector>\n \n+//! Responsible for reading and validating the -wallet arguments and verifying the wallet database.",
    "path": "src/wallet/wallet.h",
    "position": 12,
    "original_position": 12,
    "commit_id": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "original_commit_id": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This function doesn't read `-wallet`.",
    "created_at": "2018-11-07T10:58:38Z",
    "updated_at": "2018-11-07T11:05:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r231461962",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231461962"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r231461962"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231461962/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 37,
    "original_line": 37,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231463193",
    "pull_request_review_id": 172435866,
    "id": 231463193,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTQ2MzE5Mw==",
    "diff_hunk": "@@ -456,8 +491,32 @@ class WalletImpl : public Wallet\n     CWallet& m_wallet;\n };\n \n+class WalletClientImpl : public ChainClient",
    "path": "src/interfaces/wallet.cpp",
    "position": 320,
    "original_position": 320,
    "commit_id": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "original_commit_id": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "IMO this could have a better name, currently this chain client \"manages all wallets\".",
    "created_at": "2018-11-07T11:03:07Z",
    "updated_at": "2018-11-07T11:05:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r231463193",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231463193"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r231463193"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231463193/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 494,
    "original_line": 494,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232173026",
    "pull_request_review_id": 173311835,
    "id": 232173026,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjE3MzAyNg==",
    "diff_hunk": "@@ -1562,7 +1581,11 @@ bool AppInitMain()\n     }\n \n     // ********************************************************* Step 9: load wallet\n-    if (!g_wallet_init_interface.Open()) return false;\n+    for (const auto& client : interfaces.chain_clients) {",
    "path": "src/init.cpp",
    "position": 105,
    "original_position": 105,
    "commit_id": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "original_commit_id": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Could use `std::any_of`? :-)",
    "created_at": "2018-11-09T08:30:01Z",
    "updated_at": "2018-11-09T08:30:01Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r232173026",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232173026"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r232173026"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232173026/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1584,
    "original_line": 1584,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232173212",
    "pull_request_review_id": 173312061,
    "id": 232173212,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjE3MzIxMg==",
    "diff_hunk": "@@ -1562,7 +1581,11 @@ bool AppInitMain()\n     }\n \n     // ********************************************************* Step 9: load wallet\n-    if (!g_wallet_init_interface.Open()) return false;\n+    for (const auto& client : interfaces.chain_clients) {",
    "path": "src/init.cpp",
    "position": 105,
    "original_position": 105,
    "commit_id": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "original_commit_id": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@practicalswift just a meta-note, could you please put all your comments in one review rather than putting them all as separate comments?",
    "created_at": "2018-11-09T08:30:47Z",
    "updated_at": "2018-11-09T08:30:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r232173212",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232173212"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r232173212"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232173212/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1584,
    "original_line": 1584,
    "side": "RIGHT",
    "in_reply_to_id": 232173026
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232178847",
    "pull_request_review_id": 173318813,
    "id": 232178847,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjE3ODg0Nw==",
    "diff_hunk": "@@ -1562,7 +1581,11 @@ bool AppInitMain()\n     }\n \n     // ********************************************************* Step 9: load wallet\n-    if (!g_wallet_init_interface.Open()) return false;\n+    for (const auto& client : interfaces.chain_clients) {",
    "path": "src/init.cpp",
    "position": 105,
    "original_position": 105,
    "commit_id": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "original_commit_id": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@MeshCollider Sure! I'll do that going forward. Didn't think about the differences in workflow. Thanks for the suggestion!",
    "created_at": "2018-11-09T08:54:15Z",
    "updated_at": "2018-11-09T08:55:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r232178847",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232178847"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r232178847"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232178847/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1584,
    "original_line": 1584,
    "side": "RIGHT",
    "in_reply_to_id": 232173026
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232282815",
    "pull_request_review_id": 173448790,
    "id": 232282815,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjI4MjgxNQ==",
    "diff_hunk": "@@ -1562,7 +1581,11 @@ bool AppInitMain()\n     }\n \n     // ********************************************************* Step 9: load wallet\n-    if (!g_wallet_init_interface.Open()) return false;\n+    for (const auto& client : interfaces.chain_clients) {",
    "path": "src/init.cpp",
    "position": 105,
    "original_position": 105,
    "commit_id": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "original_commit_id": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Also, I'd prefer if we didn't leave style feedback at all.\r\n\r\nOf course it could use std::any_of, or it could use a while loop, or do while loop, or... It is just a different color up to the author to choose and for everyone else to accept.",
    "created_at": "2018-11-09T15:04:13Z",
    "updated_at": "2018-11-09T15:04:13Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r232282815",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232282815"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r232282815"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232282815/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1584,
    "original_line": 1584,
    "side": "RIGHT",
    "in_reply_to_id": 232173026
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232299131",
    "pull_request_review_id": 173469854,
    "id": 232299131,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjI5OTEzMQ==",
    "diff_hunk": "@@ -1562,7 +1581,11 @@ bool AppInitMain()\n     }\n \n     // ********************************************************* Step 9: load wallet\n-    if (!g_wallet_init_interface.Open()) return false;\n+    for (const auto& client : interfaces.chain_clients) {",
    "path": "src/init.cpp",
    "position": 105,
    "original_position": 105,
    "commit_id": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "original_commit_id": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@MarcoFalke I should have made clear that my comment was a \"nit\" :-)\r\n\r\nThe comparison you're making isn't fair: no one would suggest changing this to a `while` loop, but striving to use STL algorithms were possible is what the C++ Core Guidelines (with editors Bjarne Stroustrup and Herb Sutter) recommends:\r\n\r\n> ES.1: Prefer the standard library to other libraries and to \u201chandcrafted code\u201d\r\n>\r\n> Code using a library can be much easier to write than code working directly with language features, much shorter, tend to be of a higher level of abstraction, and the library code is presumably already tested. The ISO C++ Standard Library is among the most widely known and best tested libraries. It is available as part of all C++ Implementations.\r\n> \r\n> [\u2026]\r\n> ```\r\n> auto sum = accumulate(v, 0.0); // better\r\n> ```\r\n> but don\u2019t hand-code a well-known algorithm:\r\n> ```\r\n> int max = v.size();   // bad: verbose, purpose unstated\r\n> double sum = 0.0;\r\n> for (int i = 0; i < max; ++i)\r\n>     sum = sum + v[i];\r\n> ```\r\n>\r\n> https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es1-prefer-the-standard-library-to-other-libraries-and-to-handcrafted-code",
    "created_at": "2018-11-09T15:49:54Z",
    "updated_at": "2018-11-09T15:57:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r232299131",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232299131"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r232299131"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232299131/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1584,
    "original_line": 1584,
    "side": "RIGHT",
    "in_reply_to_id": 232173026
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232761293",
    "pull_request_review_id": 174030274,
    "id": 232761293,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjc2MTI5Mw==",
    "diff_hunk": "@@ -1562,7 +1581,11 @@ bool AppInitMain()\n     }\n \n     // ********************************************************* Step 9: load wallet\n-    if (!g_wallet_init_interface.Open()) return false;\n+    for (const auto& client : interfaces.chain_clients) {",
    "path": "src/init.cpp",
    "position": 105,
    "original_position": 105,
    "commit_id": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "original_commit_id": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> Could use std::any_of? :-)\r\n\r\nThis I think it would actually have to use std::all_of\r\n\r\n",
    "created_at": "2018-11-12T18:13:16Z",
    "updated_at": "2018-11-12T18:32:28Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r232761293",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232761293"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r232761293"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232761293/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1584,
    "original_line": 1584,
    "side": "RIGHT",
    "in_reply_to_id": 232173026
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232767091",
    "pull_request_review_id": 174030274,
    "id": 232767091,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjc2NzA5MQ==",
    "diff_hunk": "@@ -1562,7 +1581,11 @@ bool AppInitMain()\n     }\n \n     // ********************************************************* Step 9: load wallet\n-    if (!g_wallet_init_interface.Open()) return false;\n+    for (const auto& client : interfaces.chain_clients) {",
    "path": "src/init.cpp",
    "position": 105,
    "original_position": 105,
    "commit_id": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "original_commit_id": "081accb875412f38718f2e40ed7bbdf15e6f4ef8",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/14437#discussion_r232173026\r\n\r\n> Could use std::any_of? :-)\r\n\r\nThis PR is already merged so I won't change this here. But it's an interesting suggestion. I might prefer `all_of` over `any_of` since the bool represents success, and success only happens if _all_ calls succeed.\r\n\r\nNote: one drawback to using any/all in a context like this is it makes behavior non-deterministic, because the standard doesn't guarantee what order the calls will run in or whether calls will be skipped due to short-circuiting: https://stackoverflow.com/questions/47692180/is-stdany-of-required-to-follow-short-circuit-logic",
    "created_at": "2018-11-12T18:32:27Z",
    "updated_at": "2018-11-12T18:32:28Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r232767091",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232767091"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14437#discussion_r232767091"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232767091/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1584,
    "original_line": 1584,
    "side": "RIGHT",
    "in_reply_to_id": 232173026
  }
]