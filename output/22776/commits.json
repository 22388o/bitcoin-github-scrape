[
  {
    "sha": "f7c4f88a5e6551382cc5f46aab48524156dcc7b1",
    "node_id": "C_kwDOABII59oAKGY3YzRmODhhNWU2NTUxMzgyY2M1ZjQ2YWFiNDg1MjQxNTZkY2M3YjE",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2021-08-20T06:09:03Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2021-11-14T12:05:06Z"
      },
      "message": "rpc/wallet: add optional transactions array to getbalances\n\nOne or several optional transactions provided to getbalances iterates over the inputs and outputs, and tallies up the balance change for the given wallet. This can be useful e.g. when verifying that a coin join like transaction doesn't contain unexpected inputs that the wallet will then sign for unintentionally.",
      "tree": {
        "sha": "827a007121f2783c224556da8a96c5c477400603",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/827a007121f2783c224556da8a96c5c477400603"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f7c4f88a5e6551382cc5f46aab48524156dcc7b1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAmGQ+3MACgkQV692LbM1\nMyKiHg/9HhrSNV4pXS0WZoKzn+BRmMTVqvlkboFQ19mSfxvNZi2XeNvrshDKSF5d\nfIcyuXQN4izswUBoa04NiB9NchI3Z8ptipwonrWAvVODDFtSGRRP6MjJ19OXYuq3\nAmZe8VXL3tMDM/ZCMjfzVzbkj0vWdRO1/MjE20YN/Z4qdOFW2ezUL9wqpTJC3M+u\ncj6xCserfC9/Q2iEuDfX98zM3voEKcOSvyS9Aig2s4KJ5J5/eH/NKIyOzSAIgmdw\n/z4kXauwg+Kh9ATFP9QNix6bGSQTgSn3aAcOsIJcv62YGAI0Mndqe3hsuuYkTefW\n+0HahxpBJqgwPzb+Q4XhD0ftcSY1WiPEf8J64bn7DBzNCUcGex99Ilx2J7ki9aob\nLSxoo3QYiWxfkTrDSEcarHUQhzKr+DT11oHGhmCg3qUwYbjO3OnNChlhppWQjgcA\n7I3hEBFo+QITNVq2IWYlo4ONYBk2sVYA/2YMIWhs61GUu5rVI1iftXU4QW58uLRv\nObUGbVYiIuJ+z6URPLVZNRYAp3LiCfPhOuaHuhbaN624+akLXJZF3RoBJZe7bN1/\nGpe9gKH/nBGJjH/qM8xF8kuLOeaeeFhg2gyadPlNRMfJ3oHiE1CPArVSS7lO0COx\nbmNHp3evZBuf1u0kRKijaNH6hJ00J2OKBCpgXzVmDQEQFeoELso=\n=Ru6D\n-----END PGP SIGNATURE-----",
        "payload": "tree 827a007121f2783c224556da8a96c5c477400603\nparent 9d2895157ec0ff6e356f40c5fe84d3007fc991c1\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1629439743 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1636891506 +0900\n\nrpc/wallet: add optional transactions array to getbalances\n\nOne or several optional transactions provided to getbalances iterates over the inputs and outputs, and tallies up the balance change for the given wallet. This can be useful e.g. when verifying that a coin join like transaction doesn't contain unexpected inputs that the wallet will then sign for unintentionally.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7c4f88a5e6551382cc5f46aab48524156dcc7b1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f7c4f88a5e6551382cc5f46aab48524156dcc7b1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7c4f88a5e6551382cc5f46aab48524156dcc7b1/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9d2895157ec0ff6e356f40c5fe84d3007fc991c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d2895157ec0ff6e356f40c5fe84d3007fc991c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d2895157ec0ff6e356f40c5fe84d3007fc991c1"
      }
    ],
    "stats": {
      "total": 141,
      "additions": 139,
      "deletions": 2
    },
    "files": [
      {
        "sha": "9d8b1fcef714b429d9209d6730c478a1eea98c34",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7c4f88a5e6551382cc5f46aab48524156dcc7b1/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7c4f88a5e6551382cc5f46aab48524156dcc7b1/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=f7c4f88a5e6551382cc5f46aab48524156dcc7b1",
        "patch": "@@ -56,6 +56,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getbalance\", 1, \"minconf\" },\n     { \"getbalance\", 2, \"include_watchonly\" },\n     { \"getbalance\", 3, \"avoid_reuse\" },\n+    { \"getbalances\", 0, \"rawtxs\" },\n     { \"getblockhash\", 0, \"height\" },\n     { \"waitforblockheight\", 0, \"height\" },\n     { \"waitforblockheight\", 1, \"timeout\" },"
      },
      {
        "sha": "290516b7b152323d69d88c3eab549848d5415e27",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 2,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7c4f88a5e6551382cc5f46aab48524156dcc7b1/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7c4f88a5e6551382cc5f46aab48524156dcc7b1/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f7c4f88a5e6551382cc5f46aab48524156dcc7b1",
        "patch": "@@ -2408,8 +2408,14 @@ static RPCHelpMan getbalances()\n {\n     return RPCHelpMan{\n         \"getbalances\",\n-        \"Returns an object with all balances in \" + CURRENCY_UNIT + \".\\n\",\n-        {},\n+        \"Returns an object with all balances in \" + CURRENCY_UNIT + \", optionally including the balance change given one or more specified transactions.\\n\",\n+        {\n+            {\"rawtxs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"An array of hex strings of raw transactions.\\n\",\n+                {\n+                    {\"rawtx\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"\"},\n+                },\n+            },\n+        },\n         RPCResult{\n             RPCResult::Type::OBJ, \"\", \"\",\n             {\n@@ -2426,10 +2432,15 @@ static RPCHelpMan getbalances()\n                     {RPCResult::Type::STR_AMOUNT, \"untrusted_pending\", \"untrusted pending balance (outputs created by others that are in the mempool)\"},\n                     {RPCResult::Type::STR_AMOUNT, \"immature\", \"balance from immature coinbase outputs\"},\n                 }},\n+                {RPCResult::Type::OBJ, \"tx\", \"transaction info\",\n+                {\n+                    {RPCResult::Type::STR_AMOUNT, \"changes\", \"the change to the wallet's balance if/when this transaction was mined\"},\n+                }},\n             }\n             },\n         RPCExamples{\n             HelpExampleCli(\"getbalances\", \"\") +\n+            HelpExampleCli(\"getbalances\", \"0200000000010065cd1d000000001600148535ed13a48131b12eabb3f3804cc0c354b46f2b00000000\") +\n             HelpExampleRpc(\"getbalances\", \"\")},\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n@@ -2466,6 +2477,42 @@ static RPCHelpMan getbalances()\n         balances_watchonly.pushKV(\"immature\", ValueFromAmount(bal.m_watchonly_immature));\n         balances.pushKV(\"watchonly\", balances_watchonly);\n     }\n+\n+    if (!request.params[0].isNull()) {\n+        CAmount changes{0};\n+        std::set<COutPoint> spent;\n+\n+        const auto& txs = request.params[0].get_array();\n+        for (size_t i = 0; i < txs.size(); ++i) {\n+            CMutableTransaction mtx;\n+            if (!DecodeHexTx(mtx, txs[i].get_str(), /* try_no_witness */ true, /* try_witness */ true)) {\n+                throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Transaction hex string decoding failure.\");\n+            }\n+\n+            // Fetch debit; we are *spending* these; if the transaction is signed and\n+            // broadcast, we will lose everything in these\n+            for (const auto& txin : mtx.vin) {\n+                if (spent.count(txin.prevout)) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Transaction(s) are spending the same output more than once\");\n+                }\n+                spent.insert(txin.prevout);\n+                changes -= wallet.GetDebit(txin, ISMINE_SPENDABLE);\n+            }\n+\n+            // Iterate over outputs; we are *receiving* these, if the wallet considers\n+            // them \"mine\"; if the transaction is signed and broadcast, we will receive\n+            // everything in these\n+            for (const auto& txout : mtx.vout) {\n+                if (!wallet.IsMine(txout)) continue;\n+                changes += txout.nValue;\n+            }\n+        }\n+\n+        UniValue balances_transaction{UniValue::VOBJ};\n+        balances_transaction.pushKV(\"changes\", ValueFromAmount(changes));\n+        balances.pushKV(\"tx\", balances_transaction);\n+    }\n+\n     return balances;\n },\n     };"
      },
      {
        "sha": "e97f0bc122becf14352c94b75d20db560bccb23e",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7c4f88a5e6551382cc5f46aab48524156dcc7b1/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7c4f88a5e6551382cc5f46aab48524156dcc7b1/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=f7c4f88a5e6551382cc5f46aab48524156dcc7b1",
        "patch": "@@ -253,6 +253,7 @@\n     'wallet_bumpfee.py --descriptors',\n     'wallet_implicitsegwit.py --legacy-wallet',\n     'rpc_named_arguments.py',\n+    'wallet_balance_getbalances.py',\n     'wallet_listsinceblock.py --legacy-wallet',\n     'wallet_listsinceblock.py --descriptors',\n     'wallet_listdescriptors.py --descriptors',"
      },
      {
        "sha": "fca871eeee18b91ed3f28cefe1a5e0c6e4f2271a",
        "filename": "test/functional/wallet_balance_getbalances.py",
        "status": "added",
        "additions": 88,
        "deletions": 0,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7c4f88a5e6551382cc5f46aab48524156dcc7b1/test/functional/wallet_balance_getbalances.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7c4f88a5e6551382cc5f46aab48524156dcc7b1/test/functional/wallet_balance_getbalances.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_balance_getbalances.py?ref=f7c4f88a5e6551382cc5f46aab48524156dcc7b1",
        "patch": "@@ -0,0 +1,88 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test getbalances with a transaction included.\n+\"\"\"\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_approx,\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+class GetBalancesTxTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def setup_network(self, split=False):\n+        self.setup_nodes()\n+\n+    def run_test(self):\n+        node0 = self.nodes[0]\n+        node1 = self.nodes[1]\n+        self.connect_nodes(0, 1)\n+\n+        self.generate(node0, 1, sync_fun=self.no_op) # Leave IBD\n+\n+        node0.createwallet(wallet_name='w0')\n+        w0 = node0.get_wallet_rpc('w0')\n+        node1.createwallet(wallet_name='w1')\n+        w1 = node1.get_wallet_rpc('w1')\n+\n+        self.generatetoaddress(node0, COINBASE_MATURITY + 1, w0.getnewaddress())\n+        assert_equal(w0.getbalance(), 50.0)\n+        assert_equal(w1.getbalance(), 0.0)\n+\n+        address1 = w1.getnewaddress()\n+        address2 = w1.getnewaddress()\n+\n+        tx1 = node1.createrawtransaction([], [{address1: 5.0}])\n+        tx2 = node1.createrawtransaction([], [{address2: 10.0}])\n+\n+        # node0 should be unaffected\n+        assert_equal(w0.getbalances([tx1])[\"tx\"][\"changes\"], 0.0)\n+\n+        # node1 should see +5 balance\n+        assert_equal(w1.getbalances([tx1])[\"tx\"][\"changes\"], 5.0)\n+\n+        # node1 should see +15 balance for both transactions\n+        assert_equal(w1.getbalances([tx1, tx2])[\"tx\"][\"changes\"], 15.0)\n+\n+        # w0 funds transaction; it should now see a decrease in (tx fee and payment), and w1 should see the same as above\n+        funding = w0.fundrawtransaction(tx1)\n+        tx1 = funding[\"hex\"]\n+        bitcoin_fee = float(funding[\"fee\"])\n+\n+        # node0 sees fee + 5 btc decrease\n+        assert_approx(w0.getbalances([tx1])[\"tx\"][\"changes\"], -(5.0 + bitcoin_fee))\n+\n+        # node1 sees same as before\n+        assert_equal(w1.getbalances([tx1])[\"tx\"][\"changes\"], 5.0)\n+\n+        # same inputs (tx) more than once should error\n+        assert_raises_rpc_error(-8, \"Transaction(s) are spending the same output more than once\", w0.getbalances, [tx1,tx1])\n+\n+        # send tx1 to avoid reusing same UTXO below\n+        node1.sendrawtransaction(w0.signrawtransactionwithwallet(tx1)[\"hex\"])\n+        self.sync_all()\n+\n+        # w0 funds transaction 2; it should now see a decrease in (tx fee and payment), and w1 should see the same as above\n+        funding = w0.fundrawtransaction(tx2)\n+        tx2 = funding[\"hex\"]\n+        bitcoin_fee2 = float(funding[\"fee\"])\n+\n+        # node0 sees fees + 15 btc decrease\n+        assert_approx(w0.getbalances([tx1, tx2])[\"tx\"][\"changes\"], -(5.0 + bitcoin_fee + 10.0 + bitcoin_fee2))\n+\n+        # node1 sees same as before\n+        assert_equal(w1.getbalances([tx1, tx2])[\"tx\"][\"changes\"], 15.0)\n+\n+if __name__ == '__main__':\n+    GetBalancesTxTest().main()"
      }
    ]
  }
]