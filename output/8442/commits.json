[
  {
    "sha": "fa4439d3554435bdf0ef47861835f10d41bcdc1a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTQ0MzlkMzU1NDQzNWJkZjBlZjQ3ODYxODM1ZjEwZDQxYmNkYzFh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-07-31T13:35:46Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-08-01T10:33:20Z"
      },
      "message": "[qa] Rework hd wallet dump test",
      "tree": {
        "sha": "239f620b66c354cd915d16dbe436c45036a11712",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/239f620b66c354cd915d16dbe436c45036a11712"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa4439d3554435bdf0ef47861835f10d41bcdc1a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4439d3554435bdf0ef47861835f10d41bcdc1a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4439d3554435bdf0ef47861835f10d41bcdc1a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4439d3554435bdf0ef47861835f10d41bcdc1a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea268747b6d417a406977e9b4931badce29b9d7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea268747b6d417a406977e9b4931badce29b9d7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea268747b6d417a406977e9b4931badce29b9d7a"
      }
    ],
    "stats": {
      "total": 144,
      "additions": 64,
      "deletions": 80
    },
    "files": [
      {
        "sha": "6028d2c20b19178b60b224cb8b144389a12a47ef",
        "filename": "qa/rpc-tests/wallet-dump.py",
        "status": "modified",
        "additions": 64,
        "deletions": 80,
        "changes": 144,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4439d3554435bdf0ef47861835f10d41bcdc1a/qa/rpc-tests/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4439d3554435bdf0ef47861835f10d41bcdc1a/qa/rpc-tests/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet-dump.py?ref=fa4439d3554435bdf0ef47861835f10d41bcdc1a",
        "patch": "@@ -4,9 +4,52 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-import os\n-import shutil\n+from test_framework.util import (start_nodes, start_node, assert_equal, bitcoind_processes)\n+\n+\n+def read_dump(file_name, addrs, hd_master_addr_old):\n+    \"\"\"\n+    Read the given dump, count the addrs that match, count change and reserve.\n+    Also check that the old hd_master is inactive\n+    \"\"\"\n+    with open(file_name) as inputfile:\n+        found_addr = 0\n+        found_addr_chg = 0\n+        found_addr_rsv = 0\n+        hd_master_addr_ret = None\n+        for line in inputfile:\n+            # only read non comment lines\n+            if line[0] != \"#\" and len(line) > 10:\n+                # split out some data\n+                key_label, comment = line.split(\"#\")\n+                # key = key_label.split(\" \")[0]\n+                keytype = key_label.split(\" \")[2]\n+                if len(comment) > 1:\n+                    addr_keypath = comment.split(\" addr=\")[1]\n+                    addr = addr_keypath.split(\" \")[0]\n+                    keypath = None\n+                    if keytype == \"inactivehdmaster=1\":\n+                        # ensure the old master is still available\n+                        assert(hd_master_addr_old == addr)\n+                    elif keytype == \"hdmaster=1\":\n+                        # ensure we have generated a new hd master key\n+                        assert(hd_master_addr_old != addr)\n+                        hd_master_addr_ret = addr\n+                    else:\n+                        keypath = addr_keypath.rstrip().split(\"hdkeypath=\")[1]\n+\n+                    # count key types\n+                    for addrObj in addrs:\n+                        if addrObj['address'] == addr and addrObj['hdkeypath'] == keypath and keytype == \"label=\":\n+                            found_addr += 1\n+                            break\n+                        elif keytype == \"change=1\":\n+                            found_addr_chg += 1\n+                            break\n+                        elif keytype == \"reserve=1\":\n+                            found_addr_rsv += 1\n+                            break\n+        return found_addr, found_addr_chg, found_addr_rsv, hd_master_addr_ret\n \n \n class WalletDumpTest(BitcoinTestFramework):\n@@ -15,106 +58,47 @@ def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = False\n         self.num_nodes = 1\n+        self.extra_args = [[\"-keypool=90\"]]\n \n     def setup_network(self, split=False):\n-        extra_args = [[\"-keypool=100\"]]\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n \n     def run_test (self):\n         tmpdir = self.options.tmpdir\n \n-        #generate 20 addresses to compare against the dump\n+        # generate 20 addresses to compare against the dump\n         test_addr_count = 20\n         addrs = []\n         for i in range(0,test_addr_count):\n             addr = self.nodes[0].getnewaddress()\n             vaddr= self.nodes[0].validateaddress(addr) #required to get hd keypath\n             addrs.append(vaddr)\n+        # Should be a no-op:\n+        self.nodes[0].keypoolrefill()\n \n         # dump unencrypted wallet\n         self.nodes[0].dumpwallet(tmpdir + \"/node0/wallet.unencrypted.dump\")\n \n-        #open file\n-        inputfile = open(tmpdir + \"/node0/wallet.unencrypted.dump\")\n-        found_addr = 0\n-        found_addr_chg = 0\n-        found_addr_rsv = 0\n-        hdmasteraddr = \"\"\n-        for line in inputfile:\n-            #only read non comment lines\n-            if line[0] != \"#\" and len(line) > 10:\n-                #split out some data\n-                keyLabel, comment = line.split(\"#\")\n-                key = keyLabel.split(\" \")[0]\n-                keytype = keyLabel.split(\" \")[2]\n-                if len(comment) > 1:\n-                    addrKeypath = comment.split(\" addr=\")[1]\n-                    addr = addrKeypath.split(\" \")[0]\n-                    keypath = \"\"\n-                    if keytype != \"hdmaster=1\":\n-                        keypath = addrKeypath.rstrip().split(\"hdkeypath=\")[1]\n-                    else:\n-                        #keep hd master for later comp.\n-                        hdmasteraddr = addr\n-\n-                    #count key types\n-                    for addrObj in addrs:\n-                        if (addrObj['address'] == addr and addrObj['hdkeypath'] == keypath and keytype == \"label=\"):\n-                            found_addr+=1\n-                            break\n-                        elif (keytype == \"change=1\"):\n-                            found_addr_chg+=1\n-                            break\n-                        elif (keytype == \"reserve=1\"):\n-                            found_addr_rsv+=1\n-                            break\n-        assert(found_addr == test_addr_count) #all keys must be in the dump\n-        assert(found_addr_chg == 50) #50 blocks where mined\n-        assert(found_addr_rsv == 100) #100 reserve keys (keypool)\n+        found_addr, found_addr_chg, found_addr_rsv, hd_master_addr_unenc = \\\n+            read_dump(tmpdir + \"/node0/wallet.unencrypted.dump\", addrs, None)\n+        assert_equal(found_addr, test_addr_count)  # all keys must be in the dump\n+        assert_equal(found_addr_chg, 50)  # 50 blocks where mined\n+        assert_equal(found_addr_rsv, 90 + 1)  # keypool size (TODO: fix off-by-one)\n \n         #encrypt wallet, restart, unlock and dump\n         self.nodes[0].encryptwallet('test')\n         bitcoind_processes[0].wait()\n-        self.nodes[0] = start_node(0, self.options.tmpdir)\n+        self.nodes[0] = start_node(0, self.options.tmpdir, self.extra_args[0])\n         self.nodes[0].walletpassphrase('test', 10)\n+        # Should be a no-op:\n+        self.nodes[0].keypoolrefill()\n         self.nodes[0].dumpwallet(tmpdir + \"/node0/wallet.encrypted.dump\")\n \n-        #open dump done with an encrypted wallet\n-        inputfile = open(tmpdir + \"/node0/wallet.encrypted.dump\")\n-        found_addr = 0\n-        found_addr_chg = 0\n-        found_addr_rsv = 0\n-        for line in inputfile:\n-            if line[0] != \"#\" and len(line) > 10:\n-                keyLabel, comment = line.split(\"#\")\n-                key = keyLabel.split(\" \")[0]\n-                keytype = keyLabel.split(\" \")[2]\n-                if len(comment) > 1:\n-                    addrKeypath = comment.split(\" addr=\")[1]\n-                    addr = addrKeypath.split(\" \")[0]\n-                    keypath = \"\"\n-                    if keytype != \"hdmaster=1\":\n-                        keypath = addrKeypath.rstrip().split(\"hdkeypath=\")[1]\n-                    else:\n-                        #ensure we have generated a new hd master key\n-                        assert(hdmasteraddr != addr)\n-                    if keytype == \"inactivehdmaster=1\":\n-                        #ensure the old master is still available\n-                        assert(hdmasteraddr == addr)\n-                    for addrObj in addrs:\n-                        if (addrObj['address'] == addr and addrObj['hdkeypath'] == keypath and keytype == \"label=\"):\n-                            found_addr+=1\n-                            break\n-                        elif (keytype == \"change=1\"):\n-                            found_addr_chg+=1\n-                            break\n-                        elif (keytype == \"reserve=1\"):\n-                            found_addr_rsv+=1\n-                            break\n-\n-        assert(found_addr == test_addr_count)\n-        assert(found_addr_chg == 150) #old reserve keys are marked as change now\n-        assert(found_addr_rsv == 100) #keypool size\n+        found_addr, found_addr_chg, found_addr_rsv, hd_master_addr_enc = \\\n+            read_dump(tmpdir + \"/node0/wallet.encrypted.dump\", addrs, hd_master_addr_unenc)\n+        assert_equal(found_addr, test_addr_count)\n+        assert_equal(found_addr_chg, 90 + 1 + 50)  # old reserve keys are marked as change now\n+        assert_equal(found_addr_rsv, 90 + 1)  # keypool size (TODO: fix off-by-one)\n \n if __name__ == '__main__':\n     WalletDumpTest().main ()"
      }
    ]
  }
]