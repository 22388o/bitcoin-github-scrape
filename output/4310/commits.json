[
  {
    "sha": "7a9e0b6460037b72376af293dc87acafe4fca831",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTllMGI2NDYwMDM3YjcyMzc2YWYyOTNkYzg3YWNhZmU0ZmNhODMx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-08T23:27:56Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-08T23:27:56Z"
      },
      "message": "Move checkpoint based heuristic checks to AcceptBlockHeader",
      "tree": {
        "sha": "6f3ab0a330e265e3e89cebc58a20ceb82789f2d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6f3ab0a330e265e3e89cebc58a20ceb82789f2d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a9e0b6460037b72376af293dc87acafe4fca831",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a9e0b6460037b72376af293dc87acafe4fca831",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a9e0b6460037b72376af293dc87acafe4fca831",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a9e0b6460037b72376af293dc87acafe4fca831/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ff35a0565a6903464d1dfaaf02360d5c5e70c0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ff35a0565a6903464d1dfaaf02360d5c5e70c0f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ff35a0565a6903464d1dfaaf02360d5c5e70c0f"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 22,
      "deletions": 22
    },
    "files": [
      {
        "sha": "cf8c436dedf62bba323ea4c4b4184b0a58756751",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 22,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a9e0b6460037b72376af293dc87acafe4fca831/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a9e0b6460037b72376af293dc87acafe4fca831/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7a9e0b6460037b72376af293dc87acafe4fca831",
        "patch": "@@ -2329,28 +2329,6 @@ bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool f\n         return state.Invalid(error(\"CheckBlockHeader() : block timestamp too far in the future\"),\n                              REJECT_INVALID, \"time-too-new\");\n \n-    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);\n-    if (pcheckpoint && block.hashPrevBlock != (chainActive.Tip() ? chainActive.Tip()->GetBlockHash() : uint256(0)))\n-    {\n-        // Extra checks to prevent \"fill up memory by spamming with bogus blocks\"\n-        int64_t deltaTime = block.GetBlockTime() - pcheckpoint->nTime;\n-        if (deltaTime < 0)\n-        {\n-            return state.DoS(100, error(\"CheckBlockHeader() : block with timestamp before last checkpoint\"),\n-                             REJECT_CHECKPOINT, \"time-too-old\");\n-        }\n-        bool fOverflow = false;\n-        uint256 bnNewBlock;\n-        bnNewBlock.SetCompact(block.nBits, NULL, &fOverflow);\n-        uint256 bnRequired;\n-        bnRequired.SetCompact(ComputeMinWork(pcheckpoint->nBits, deltaTime));\n-        if (fOverflow || bnNewBlock > bnRequired)\n-        {\n-            return state.DoS(100, error(\"CheckBlockHeader() : block with too little proof-of-work\"),\n-                             REJECT_INVALID, \"bad-diffbits\");\n-        }\n-    }\n-\n     return true;\n }\n \n@@ -2426,6 +2404,28 @@ bool AcceptBlockHeader(CBlockHeader& block, CValidationState& state, CBlockIndex\n             return state.Invalid(error(\"AcceptBlock() : block is marked invalid\"), 0, \"duplicate\");\n     }\n \n+    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);\n+    if (pcheckpoint && block.hashPrevBlock != (chainActive.Tip() ? chainActive.Tip()->GetBlockHash() : uint256(0)))\n+    {\n+        // Extra checks to prevent \"fill up memory by spamming with bogus blocks\"\n+        int64_t deltaTime = block.GetBlockTime() - pcheckpoint->nTime;\n+        if (deltaTime < 0)\n+        {\n+            return state.DoS(100, error(\"CheckBlockHeader() : block with timestamp before last checkpoint\"),\n+                             REJECT_CHECKPOINT, \"time-too-old\");\n+        }\n+        bool fOverflow = false;\n+        uint256 bnNewBlock;\n+        bnNewBlock.SetCompact(block.nBits, NULL, &fOverflow);\n+        uint256 bnRequired;\n+        bnRequired.SetCompact(ComputeMinWork(pcheckpoint->nBits, deltaTime));\n+        if (fOverflow || bnNewBlock > bnRequired)\n+        {\n+            return state.DoS(100, error(\"CheckBlockHeader() : block with too little proof-of-work\"),\n+                             REJECT_INVALID, \"bad-diffbits\");\n+        }\n+    }\n+\n     // Get prev block index\n     CBlockIndex* pindexPrev = NULL;\n     int nHeight = 0;"
      }
    ]
  }
]