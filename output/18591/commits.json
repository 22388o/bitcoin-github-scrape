[
  {
    "sha": "7cbfebbf3df0d26f518811e0bfb7abf270c83e37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Y2JmZWJiZjNkZjBkMjZmNTE4ODExZTBiZmI3YWJmMjcwYzgzZTM3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-04-11T05:17:04Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-04-11T09:15:20Z"
      },
      "message": "Update ax_cxx_compile_stdcxx.m4",
      "tree": {
        "sha": "b774188e2f819180bf3d8b376bcffdf2a4f0ea9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b774188e2f819180bf3d8b376bcffdf2a4f0ea9a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7cbfebbf3df0d26f518811e0bfb7abf270c83e37",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cbfebbf3df0d26f518811e0bfb7abf270c83e37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7cbfebbf3df0d26f518811e0bfb7abf270c83e37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cbfebbf3df0d26f518811e0bfb7abf270c83e37/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3eb8b1c3924c1d14c1a4234eb5360f32808b86dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3eb8b1c3924c1d14c1a4234eb5360f32808b86dc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3eb8b1c3924c1d14c1a4234eb5360f32808b86dc"
      }
    ],
    "stats": {
      "total": 457,
      "additions": 420,
      "deletions": 37
    },
    "files": [
      {
        "sha": "43087b2e6889ec6f8ebd2f8ba77f4a9a716f8ac2",
        "filename": "build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "status": "modified",
        "additions": 419,
        "deletions": 36,
        "changes": 455,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cbfebbf3df0d26f518811e0bfb7abf270c83e37/build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cbfebbf3df0d26f518811e0bfb7abf270c83e37/build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_cxx_compile_stdcxx.m4?ref=7cbfebbf3df0d26f518811e0bfb7abf270c83e37",
        "patch": "@@ -1,5 +1,5 @@\n # ===========================================================================\n-#   http://www.gnu.org/software/autoconf-archive/ax_cxx_compile_stdcxx.html\n+#  https://www.gnu.org/software/autoconf-archive/ax_cxx_compile_stdcxx.html\n # ===========================================================================\n #\n # SYNOPSIS\n@@ -33,21 +33,23 @@\n #   Copyright (c) 2014, 2015 Google Inc.; contributed by Alexey Sokolov <sokolov@google.com>\n #   Copyright (c) 2015 Paul Norman <penorman@mac.com>\n #   Copyright (c) 2015 Moritz Klammler <moritz@klammler.eu>\n+#   Copyright (c) 2016, 2018 Krzesimir Nowak <qdlacz@gmail.com>\n+#   Copyright (c) 2019 Enji Cooper <yaneurabeya@gmail.com>\n #\n #   Copying and distribution of this file, with or without modification, are\n #   permitted in any medium without royalty provided the copyright notice\n #   and this notice are preserved.  This file is offered as-is, without any\n #   warranty.\n \n-#serial 4\n+#serial 11\n \n dnl  This macro is based on the code from the AX_CXX_COMPILE_STDCXX_11 macro\n dnl  (serial version number 13).\n \n AC_DEFUN([AX_CXX_COMPILE_STDCXX], [dnl\n-  m4_if([$1], [11], [],\n-        [$1], [14], [],\n-        [$1], [17], [m4_fatal([support for C++17 not yet implemented in AX_CXX_COMPILE_STDCXX])],\n+  m4_if([$1], [11], [ax_cxx_compile_alternatives=\"11 0x\"],\n+        [$1], [14], [ax_cxx_compile_alternatives=\"14 1y\"],\n+        [$1], [17], [ax_cxx_compile_alternatives=\"17 1z\"],\n         [m4_fatal([invalid first argument `$1' to AX_CXX_COMPILE_STDCXX])])dnl\n   m4_if([$2], [], [],\n         [$2], [ext], [],\n@@ -57,26 +59,13 @@ AC_DEFUN([AX_CXX_COMPILE_STDCXX], [dnl\n         [$3], [mandatory], [ax_cxx_compile_cxx$1_required=true],\n         [$3], [optional], [ax_cxx_compile_cxx$1_required=false],\n         [m4_fatal([invalid third argument `$3' to AX_CXX_COMPILE_STDCXX])])\n-  m4_if([$4], [], [ax_cxx_compile_cxx$1_try_default=true],\n-        [$4], [default], [ax_cxx_compile_cxx$1_try_default=true],\n-        [$4], [nodefault], [ax_cxx_compile_cxx$1_try_default=false],\n-        [m4_fatal([invalid fourth argument `$4' to AX_CXX_COMPILE_STDCXX])])\n   AC_LANG_PUSH([C++])dnl\n   ac_success=no\n \n-  m4_if([$4], [nodefault], [], [dnl\n-  AC_CACHE_CHECK(whether $CXX supports C++$1 features by default,\n-  ax_cv_cxx_compile_cxx$1,\n-  [AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],\n-    [ax_cv_cxx_compile_cxx$1=yes],\n-    [ax_cv_cxx_compile_cxx$1=no])])\n-  if test x$ax_cv_cxx_compile_cxx$1 = xyes; then\n-    ac_success=yes\n-  fi])\n-\n   m4_if([$2], [noext], [], [dnl\n   if test x$ac_success = xno; then\n-    for switch in -std=gnu++$1 -std=gnu++0x; do\n+    for alternative in ${ax_cxx_compile_alternatives}; do\n+      switch=\"-std=gnu++${alternative}\"\n       cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx$1_$switch])\n       AC_CACHE_CHECK(whether $CXX supports C++$1 features with $switch,\n                      $cachevar,\n@@ -102,22 +91,27 @@ AC_DEFUN([AX_CXX_COMPILE_STDCXX], [dnl\n     dnl HP's aCC needs +std=c++11 according to:\n     dnl http://h21007.www2.hp.com/portal/download/files/unprot/aCxx/PDF_Release_Notes/769149-001.pdf\n     dnl Cray's crayCC needs \"-h std=c++11\"\n-    for switch in -std=c++$1 -std=c++0x +std=c++$1 \"-h std=c++$1\"; do\n-      cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx$1_$switch])\n-      AC_CACHE_CHECK(whether $CXX supports C++$1 features with $switch,\n-                     $cachevar,\n-        [ac_save_CXX=\"$CXX\"\n-         CXX=\"$CXX $switch\"\n-         AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],\n-          [eval $cachevar=yes],\n-          [eval $cachevar=no])\n-         CXX=\"$ac_save_CXX\"])\n-      if eval test x\\$$cachevar = xyes; then\n-        CXX=\"$CXX $switch\"\n-        if test -n \"$CXXCPP\" ; then\n-          CXXCPP=\"$CXXCPP $switch\"\n+    for alternative in ${ax_cxx_compile_alternatives}; do\n+      for switch in -std=c++${alternative} +std=c++${alternative} \"-h std=c++${alternative}\"; do\n+        cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx$1_$switch])\n+        AC_CACHE_CHECK(whether $CXX supports C++$1 features with $switch,\n+                       $cachevar,\n+          [ac_save_CXX=\"$CXX\"\n+           CXX=\"$CXX $switch\"\n+           AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],\n+            [eval $cachevar=yes],\n+            [eval $cachevar=no])\n+           CXX=\"$ac_save_CXX\"])\n+        if eval test x\\$$cachevar = xyes; then\n+          CXX=\"$CXX $switch\"\n+          if test -n \"$CXXCPP\" ; then\n+            CXXCPP=\"$CXXCPP $switch\"\n+          fi\n+          ac_success=yes\n+          break\n         fi\n-        ac_success=yes\n+      done\n+      if test x$ac_success = xyes; then\n         break\n       fi\n     done\n@@ -154,6 +148,11 @@ m4_define([_AX_CXX_COMPILE_STDCXX_testbody_14],\n   _AX_CXX_COMPILE_STDCXX_testbody_new_in_14\n )\n \n+m4_define([_AX_CXX_COMPILE_STDCXX_testbody_17],\n+  _AX_CXX_COMPILE_STDCXX_testbody_new_in_11\n+  _AX_CXX_COMPILE_STDCXX_testbody_new_in_14\n+  _AX_CXX_COMPILE_STDCXX_testbody_new_in_17\n+)\n \n dnl  Tests for new features in C++11\n \n@@ -191,11 +190,13 @@ namespace cxx11\n \n     struct Base\n     {\n+      virtual ~Base() {}\n       virtual void f() {}\n     };\n \n     struct Derived : public Base\n     {\n+      virtual ~Derived() override {}\n       virtual void f() override {}\n     };\n \n@@ -524,7 +525,7 @@ namespace cxx14\n \n   }\n \n-  namespace test_digit_seperators\n+  namespace test_digit_separators\n   {\n \n     constexpr auto ten_million = 100'000'000;\n@@ -566,3 +567,385 @@ namespace cxx14\n #endif  // __cplusplus >= 201402L\n \n ]])\n+\n+\n+dnl  Tests for new features in C++17\n+\n+m4_define([_AX_CXX_COMPILE_STDCXX_testbody_new_in_17], [[\n+\n+// If the compiler admits that it is not ready for C++17, why torture it?\n+// Hopefully, this will speed up the test.\n+\n+#ifndef __cplusplus\n+\n+#error \"This is not a C++ compiler\"\n+\n+#elif __cplusplus < 201703L\n+\n+#error \"This is not a C++17 compiler\"\n+\n+#else\n+\n+#include <initializer_list>\n+#include <utility>\n+#include <type_traits>\n+\n+namespace cxx17\n+{\n+\n+  namespace test_constexpr_lambdas\n+  {\n+\n+    constexpr int foo = [](){return 42;}();\n+\n+  }\n+\n+  namespace test::nested_namespace::definitions\n+  {\n+\n+  }\n+\n+  namespace test_fold_expression\n+  {\n+\n+    template<typename... Args>\n+    int multiply(Args... args)\n+    {\n+      return (args * ... * 1);\n+    }\n+\n+    template<typename... Args>\n+    bool all(Args... args)\n+    {\n+      return (args && ...);\n+    }\n+\n+  }\n+\n+  namespace test_extended_static_assert\n+  {\n+\n+    static_assert (true);\n+\n+  }\n+\n+  namespace test_auto_brace_init_list\n+  {\n+\n+    auto foo = {5};\n+    auto bar {5};\n+\n+    static_assert(std::is_same<std::initializer_list<int>, decltype(foo)>::value);\n+    static_assert(std::is_same<int, decltype(bar)>::value);\n+  }\n+\n+  namespace test_typename_in_template_template_parameter\n+  {\n+\n+    template<template<typename> typename X> struct D;\n+\n+  }\n+\n+  namespace test_fallthrough_nodiscard_maybe_unused_attributes\n+  {\n+\n+    int f1()\n+    {\n+      return 42;\n+    }\n+\n+    [[nodiscard]] int f2()\n+    {\n+      [[maybe_unused]] auto unused = f1();\n+\n+      switch (f1())\n+      {\n+      case 17:\n+        f1();\n+        [[fallthrough]];\n+      case 42:\n+        f1();\n+      }\n+      return f1();\n+    }\n+\n+  }\n+\n+  namespace test_extended_aggregate_initialization\n+  {\n+\n+    struct base1\n+    {\n+      int b1, b2 = 42;\n+    };\n+\n+    struct base2\n+    {\n+      base2() {\n+        b3 = 42;\n+      }\n+      int b3;\n+    };\n+\n+    struct derived : base1, base2\n+    {\n+        int d;\n+    };\n+\n+    derived d1 {{1, 2}, {}, 4};  // full initialization\n+    derived d2 {{}, {}, 4};      // value-initialized bases\n+\n+  }\n+\n+  namespace test_general_range_based_for_loop\n+  {\n+\n+    struct iter\n+    {\n+      int i;\n+\n+      int& operator* ()\n+      {\n+        return i;\n+      }\n+\n+      const int& operator* () const\n+      {\n+        return i;\n+      }\n+\n+      iter& operator++()\n+      {\n+        ++i;\n+        return *this;\n+      }\n+    };\n+\n+    struct sentinel\n+    {\n+      int i;\n+    };\n+\n+    bool operator== (const iter& i, const sentinel& s)\n+    {\n+      return i.i == s.i;\n+    }\n+\n+    bool operator!= (const iter& i, const sentinel& s)\n+    {\n+      return !(i == s);\n+    }\n+\n+    struct range\n+    {\n+      iter begin() const\n+      {\n+        return {0};\n+      }\n+\n+      sentinel end() const\n+      {\n+        return {5};\n+      }\n+    };\n+\n+    void f()\n+    {\n+      range r {};\n+\n+      for (auto i : r)\n+      {\n+        [[maybe_unused]] auto v = i;\n+      }\n+    }\n+\n+  }\n+\n+  namespace test_lambda_capture_asterisk_this_by_value\n+  {\n+\n+    struct t\n+    {\n+      int i;\n+      int foo()\n+      {\n+        return [*this]()\n+        {\n+          return i;\n+        }();\n+      }\n+    };\n+\n+  }\n+\n+  namespace test_enum_class_construction\n+  {\n+\n+    enum class byte : unsigned char\n+    {};\n+\n+    byte foo {42};\n+\n+  }\n+\n+  namespace test_constexpr_if\n+  {\n+\n+    template <bool cond>\n+    int f ()\n+    {\n+      if constexpr(cond)\n+      {\n+        return 13;\n+      }\n+      else\n+      {\n+        return 42;\n+      }\n+    }\n+\n+  }\n+\n+  namespace test_selection_statement_with_initializer\n+  {\n+\n+    int f()\n+    {\n+      return 13;\n+    }\n+\n+    int f2()\n+    {\n+      if (auto i = f(); i > 0)\n+      {\n+        return 3;\n+      }\n+\n+      switch (auto i = f(); i + 4)\n+      {\n+      case 17:\n+        return 2;\n+\n+      default:\n+        return 1;\n+      }\n+    }\n+\n+  }\n+\n+  namespace test_template_argument_deduction_for_class_templates\n+  {\n+\n+    template <typename T1, typename T2>\n+    struct pair\n+    {\n+      pair (T1 p1, T2 p2)\n+        : m1 {p1},\n+          m2 {p2}\n+      {}\n+\n+      T1 m1;\n+      T2 m2;\n+    };\n+\n+    void f()\n+    {\n+      [[maybe_unused]] auto p = pair{13, 42u};\n+    }\n+\n+  }\n+\n+  namespace test_non_type_auto_template_parameters\n+  {\n+\n+    template <auto n>\n+    struct B\n+    {};\n+\n+    B<5> b1;\n+    B<'a'> b2;\n+\n+  }\n+\n+  namespace test_structured_bindings\n+  {\n+\n+    int arr[2] = { 1, 2 };\n+    std::pair<int, int> pr = { 1, 2 };\n+\n+    auto f1() -> int(&)[2]\n+    {\n+      return arr;\n+    }\n+\n+    auto f2() -> std::pair<int, int>&\n+    {\n+      return pr;\n+    }\n+\n+    struct S\n+    {\n+      int x1 : 2;\n+      volatile double y1;\n+    };\n+\n+    S f3()\n+    {\n+      return {};\n+    }\n+\n+    auto [ x1, y1 ] = f1();\n+    auto& [ xr1, yr1 ] = f1();\n+    auto [ x2, y2 ] = f2();\n+    auto& [ xr2, yr2 ] = f2();\n+    const auto [ x3, y3 ] = f3();\n+\n+  }\n+\n+  namespace test_exception_spec_type_system\n+  {\n+\n+    struct Good {};\n+    struct Bad {};\n+\n+    void g1() noexcept;\n+    void g2();\n+\n+    template<typename T>\n+    Bad\n+    f(T*, T*);\n+\n+    template<typename T1, typename T2>\n+    Good\n+    f(T1*, T2*);\n+\n+    static_assert (std::is_same_v<Good, decltype(f(g1, g2))>);\n+\n+  }\n+\n+  namespace test_inline_variables\n+  {\n+\n+    template<class T> void f(T)\n+    {}\n+\n+    template<class T> inline T g(T)\n+    {\n+      return T{};\n+    }\n+\n+    template<> inline void f<>(int)\n+    {}\n+\n+    template<> int g<>(int)\n+    {\n+      return 5;\n+    }\n+\n+  }\n+\n+}  // namespace cxx17\n+\n+#endif  // __cplusplus < 201703L\n+\n+]])"
      },
      {
        "sha": "6bc64c0fea59ef73b5e5b14f7e738c5a45052bb1",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cbfebbf3df0d26f518811e0bfb7abf270c83e37/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cbfebbf3df0d26f518811e0bfb7abf270c83e37/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=7cbfebbf3df0d26f518811e0bfb7abf270c83e37",
        "patch": "@@ -62,7 +62,7 @@ case $host in\n   ;;\n esac\n dnl Require C++11 compiler (no GNU extensions)\n-AX_CXX_COMPILE_STDCXX([11], [noext], [mandatory], [nodefault])\n+AX_CXX_COMPILE_STDCXX([11], [noext], [mandatory])\n dnl Check if -latomic is required for <std::atomic>\n CHECK_ATOMIC\n "
      }
    ]
  },
  {
    "sha": "0fbde488b24f62b4bbbde216647941dcac65c81a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZmJkZTQ4OGIyNGY2MmI0YmJiZGUyMTY2NDc5NDFkY2FjNjVjODFh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-03-29T23:08:45Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-04-11T09:15:25Z"
      },
      "message": "Support conversion between Spans of compatible types",
      "tree": {
        "sha": "1130a22d0ffe0d26d34b219e3b966b271b8bc56a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1130a22d0ffe0d26d34b219e3b966b271b8bc56a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0fbde488b24f62b4bbbde216647941dcac65c81a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fbde488b24f62b4bbbde216647941dcac65c81a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0fbde488b24f62b4bbbde216647941dcac65c81a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fbde488b24f62b4bbbde216647941dcac65c81a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7cbfebbf3df0d26f518811e0bfb7abf270c83e37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cbfebbf3df0d26f518811e0bfb7abf270c83e37",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7cbfebbf3df0d26f518811e0bfb7abf270c83e37"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 19,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a7e0020b9aac93aaa1e3709b28327bf2693e1018",
        "filename": "src/span.h",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fbde488b24f62b4bbbde216647941dcac65c81a/src/span.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fbde488b24f62b4bbbde216647941dcac65c81a/src/span.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/span.h?ref=0fbde488b24f62b4bbbde216647941dcac65c81a",
        "patch": "@@ -25,6 +25,23 @@ class Span\n     constexpr Span(C* data, std::ptrdiff_t size) noexcept : m_data(data), m_size(size) {}\n     constexpr Span(C* data, C* end) noexcept : m_data(data), m_size(end - data) {}\n \n+    /** Implicit conversion of spans between compatible types.\n+     *\n+     *  Specifically, if a pointer to an array of type O can be implicitly converted to a pointer to an array of type\n+     *  C, then permit implicit conversion of Span<O> to Span<C>. This matches the behavior of the corresponding\n+     *  C++20 std::span constructor.\n+     *\n+     *  For example this means that a Span<T> can be converted into a Span<const T>.\n+     */\n+    template <typename O, typename std::enable_if<std::is_convertible<O (*)[], C (*)[]>::value, int>::type = 0>\n+    constexpr Span(const Span<O>& other) noexcept : m_data(other.m_data), m_size(other.m_size) {}\n+\n+    /** Default copy constructor. */\n+    constexpr Span(const Span&) noexcept = default;\n+\n+    /** Default assignment operator. */\n+    Span& operator=(const Span& other) noexcept = default;\n+\n     constexpr C* data() const noexcept { return m_data; }\n     constexpr C* begin() const noexcept { return m_data; }\n     constexpr C* end() const noexcept { return m_data + m_size; }\n@@ -44,6 +61,8 @@ class Span\n     friend constexpr bool operator<=(const Span& a, const Span& b) noexcept { return !(b < a); }\n     friend constexpr bool operator>(const Span& a, const Span& b) noexcept { return (b < a); }\n     friend constexpr bool operator>=(const Span& a, const Span& b) noexcept { return !(a < b); }\n+\n+    template <typename O> friend class Span;\n };\n \n /** Create a span to a container exposing data() and size()."
      }
    ]
  },
  {
    "sha": "7829685e27aae25efb32e07368175c8f664b2218",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODI5Njg1ZTI3YWFlMjVlZmIzMmUwNzM2ODE3NWM4ZjY2NGIyMjE4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-04-11T07:30:43Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-04-11T09:15:25Z"
      },
      "message": "Add configure option for c++17",
      "tree": {
        "sha": "5c9732f13b8fca67f20dd9eff0e790ace70088b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c9732f13b8fca67f20dd9eff0e790ace70088b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7829685e27aae25efb32e07368175c8f664b2218",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7829685e27aae25efb32e07368175c8f664b2218",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7829685e27aae25efb32e07368175c8f664b2218",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7829685e27aae25efb32e07368175c8f664b2218/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0fbde488b24f62b4bbbde216647941dcac65c81a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fbde488b24f62b4bbbde216647941dcac65c81a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0fbde488b24f62b4bbbde216647941dcac65c81a"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 14,
      "deletions": 2
    },
    "files": [
      {
        "sha": "37fec20522c8eaba3630931896be202079eacbc2",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7829685e27aae25efb32e07368175c8f664b2218/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7829685e27aae25efb32e07368175c8f664b2218/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=7829685e27aae25efb32e07368175c8f664b2218",
        "patch": "@@ -61,8 +61,20 @@ case $host in\n      lt_cv_deplibs_check_method=\"pass_all\"\n   ;;\n esac\n-dnl Require C++11 compiler (no GNU extensions)\n-AX_CXX_COMPILE_STDCXX([11], [noext], [mandatory])\n+\n+AC_ARG_ENABLE([c++17],\n+  [AS_HELP_STRING([--enable-c++17],\n+  [enable compilation in c++17 mode (disabled by default)])],\n+  [use_cxx17=$enableval],\n+  [use_cxx17=no])\n+\n+dnl Require C++11 or C++17 compiler (no GNU extensions)\n+if test \"x$use_cxx17\" = xyes; then\n+  AX_CXX_COMPILE_STDCXX([17], [noext], [mandatory])\n+else\n+  AX_CXX_COMPILE_STDCXX([11], [noext], [mandatory])\n+fi\n+\n dnl Check if -latomic is required for <std::atomic>\n CHECK_ATOMIC\n "
      }
    ]
  },
  {
    "sha": "c31cbe7cfefc18123eb85ffb2ce509748435efde",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzFjYmU3Y2ZlZmMxODEyM2ViODVmZmIyY2U1MDk3NDg0MzVlZmRl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-04-11T07:40:44Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-04-11T18:30:27Z"
      },
      "message": "Add C++17 test to Travis",
      "tree": {
        "sha": "a1d30925c2b2356e87cf875228a385cddef1155f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a1d30925c2b2356e87cf875228a385cddef1155f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c31cbe7cfefc18123eb85ffb2ce509748435efde",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c31cbe7cfefc18123eb85ffb2ce509748435efde",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c31cbe7cfefc18123eb85ffb2ce509748435efde",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c31cbe7cfefc18123eb85ffb2ce509748435efde/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7829685e27aae25efb32e07368175c8f664b2218",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7829685e27aae25efb32e07368175c8f664b2218",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7829685e27aae25efb32e07368175c8f664b2218"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 18,
      "deletions": 0
    },
    "files": [
      {
        "sha": "def4875191ae645c16724217414323bda7a32831",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c31cbe7cfefc18123eb85ffb2ce509748435efde/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c31cbe7cfefc18123eb85ffb2ce509748435efde/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=c31cbe7cfefc18123eb85ffb2ce509748435efde",
        "patch": "@@ -148,6 +148,11 @@ jobs:\n       env: >-\n         FILE_ENV=\"./ci/test/00_setup_env_native_valgrind.sh\"\n \n+    - stage: test\n+      name: 'x86_64 Linux  [GOAL: install]  [bionic]  [no depends, only system libs, c++17]'\n+      env: >-\n+        FILE_ENV=\"./ci/test/00_setup_env_native_cxx17.sh\"\n+\n     - stage: test\n       name: 'x86_64 Linux  [GOAL: install]  [focal]  [no depends, only system libs, sanitizers: fuzzer,address,undefined]'\n       env: >-"
      },
      {
        "sha": "9a75276420fe157414f7b2eedb7721fb535b90b7",
        "filename": "ci/test/00_setup_env_native_cxx17.sh",
        "status": "added",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c31cbe7cfefc18123eb85ffb2ce509748435efde/ci/test/00_setup_env_native_cxx17.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c31cbe7cfefc18123eb85ffb2ce509748435efde/ci/test/00_setup_env_native_cxx17.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_cxx17.sh?ref=c31cbe7cfefc18123eb85ffb2ce509748435efde",
        "patch": "@@ -0,0 +1,13 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C.UTF-8\n+\n+export CONTAINER_NAME=ci_native_cxx17\n+export PACKAGES=\"python3-zmq libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev\"\n+export NO_DEPENDS=1\n+export GOAL=\"install\"\n+export BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --enable-c++17\""
      }
    ]
  }
]