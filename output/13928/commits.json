[
  {
    "sha": "cf9ed307e6efd2b63d54c74ca8bdd236028fd9dc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjllZDMwN2U2ZWZkMmI2M2Q1NGM3NGNhOGJkZDIzNjAyOGZkOWRj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-09T17:27:45Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-09T17:25:36Z"
      },
      "message": "qa: blocktools enforce named args for amount",
      "tree": {
        "sha": "e4654d7097141480a4d3f769e8edc64315d22062",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e4654d7097141480a4d3f769e8edc64315d22062"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf9ed307e6efd2b63d54c74ca8bdd236028fd9dc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJbbHkQAAoJEM4rdWl+aaVIxDwMAKj/Ge5BG3V/+OLCAC40fb44\nCEs6c8EjAOa2064VoTeSf22zxdzDPwSZIT9KEkjYdAjROMkwHfIjYw2zjrrj4F/F\n2gvkxJazlcpbl4xMAA5bNviAELIajP5iGFNZ9ckwiNqT59XJhNfCkoXghedRf4yB\nvwXCYuJF0fv717c61PYyeQ6vQJjF7HTU+HlX5IoU5ZAImpS1n8QP4+BFJeHQnrvz\niO2VqZXCXIEMf+nKh7KfucMzkwVV+77TWdsc57+5Uo66X7sOHZ6Yl3H1q3xCpAtV\nHQ/xxiGXGHtGfk2VW0S1IhrRRSrrwrwsTnKCZSofG8wTBsZmEvPCJeLEZIcJvqTP\nrRFmsMTwZ8wDukeuDWDGcqvLqpx/d5V1xjXWtTFrAd6dPrWEqoty2WGX3dgZnwd0\nnzx8y9Xe8IAeOiKzU9/mupxpx8oZI495hSFV4UPWaOGoEuddHbgDw399OH2euuXT\n7dZJemZtnW9zBPlHvUBpF+Cf84eWbutoJjrH/phtDg==\n=ylWJ\n-----END PGP SIGNATURE-----",
        "payload": "tree e4654d7097141480a4d3f769e8edc64315d22062\nparent f66e1c793eda7a6143fd03400c98512a9b6f00c7\nauthor MarcoFalke <falke.marco@gmail.com> 1533835665 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1533835536 -0400\n\nqa: blocktools enforce named args for amount\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf9ed307e6efd2b63d54c74ca8bdd236028fd9dc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cf9ed307e6efd2b63d54c74ca8bdd236028fd9dc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf9ed307e6efd2b63d54c74ca8bdd236028fd9dc/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f66e1c793eda7a6143fd03400c98512a9b6f00c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f66e1c793eda7a6143fd03400c98512a9b6f00c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f66e1c793eda7a6143fd03400c98512a9b6f00c7"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 37,
      "deletions": 41
    },
    "files": [
      {
        "sha": "071ffbd426d27aa07cbcc30d8ebd1315c3f29240",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf9ed307e6efd2b63d54c74ca8bdd236028fd9dc/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf9ed307e6efd2b63d54c74ca8bdd236028fd9dc/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=cf9ed307e6efd2b63d54c74ca8bdd236028fd9dc",
        "patch": "@@ -65,7 +65,7 @@ def run_test(self):\n         self.log.info(\"Test that an invalid-according-to-CLTV transaction can still appear in a block\")\n \n         spendtx = create_transaction(self.nodes[0], self.coinbase_txids[0],\n-                self.nodeaddress, 1.0)\n+                self.nodeaddress, amount=1.0)\n         cltv_invalidate(spendtx)\n         spendtx.rehash()\n \n@@ -100,7 +100,7 @@ def run_test(self):\n         block.nVersion = 4\n \n         spendtx = create_transaction(self.nodes[0], self.coinbase_txids[1],\n-                self.nodeaddress, 1.0)\n+                self.nodeaddress, amount=1.0)\n         cltv_invalidate(spendtx)\n         spendtx.rehash()\n "
      },
      {
        "sha": "af14feb4719156583470783383e0a8cf355c3af8",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf9ed307e6efd2b63d54c74ca8bdd236028fd9dc/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf9ed307e6efd2b63d54c74ca8bdd236028fd9dc/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=cf9ed307e6efd2b63d54c74ca8bdd236028fd9dc",
        "patch": "@@ -94,23 +94,22 @@ def sign_transaction(node, unsignedtx):\n     return tx\n \n def create_bip112special(node, input, txversion, address):\n-    tx = create_transaction(node, input, address, Decimal(\"49.98\"))\n+    tx = create_transaction(node, input, address, amount=Decimal(\"49.98\"))\n     tx.nVersion = txversion\n     signtx = sign_transaction(node, tx)\n     signtx.vin[0].scriptSig = CScript([-1, OP_CHECKSEQUENCEVERIFY, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n     return signtx\n \n def send_generic_input_tx(node, coinbases, address):\n-    amount = Decimal(\"49.99\")\n-    return node.sendrawtransaction(ToHex(sign_transaction(node, create_transaction(node, node.getblock(coinbases.pop())['tx'][0], address, amount))))\n+    return node.sendrawtransaction(ToHex(sign_transaction(node, create_transaction(node, node.getblock(coinbases.pop())['tx'][0], address, amount=Decimal(\"49.99\")))))\n \n def create_bip68txs(node, bip68inputs, txversion, address, locktime_delta=0):\n     \"\"\"Returns a list of bip68 transactions with different bits set.\"\"\"\n     txs = []\n     assert(len(bip68inputs) >= 16)\n     for i, (sdf, srhb, stf, srlb) in enumerate(product(*[[True, False]] * 4)):\n         locktime = relative_locktime(sdf, srhb, stf, srlb)\n-        tx = create_transaction(node, bip68inputs[i], address, Decimal(\"49.98\"))\n+        tx = create_transaction(node, bip68inputs[i], address, amount=Decimal(\"49.98\"))\n         tx.nVersion = txversion\n         tx.vin[0].nSequence = locktime + locktime_delta\n         tx = sign_transaction(node, tx)\n@@ -125,7 +124,7 @@ def create_bip112txs(node, bip112inputs, varyOP_CSV, txversion, address, locktim\n     assert(len(bip112inputs) >= 16)\n     for i, (sdf, srhb, stf, srlb) in enumerate(product(*[[True, False]] * 4)):\n         locktime = relative_locktime(sdf, srhb, stf, srlb)\n-        tx = create_transaction(node, bip112inputs[i], address, Decimal(\"49.98\"))\n+        tx = create_transaction(node, bip112inputs[i], address, amount=Decimal(\"49.98\"))\n         if (varyOP_CSV):  # if varying OP_CSV, nSequence is fixed\n             tx.vin[0].nSequence = BASE_RELATIVE_LOCKTIME + locktime_delta\n         else:  # vary nSequence instead, OP_CSV is fixed\n@@ -269,10 +268,10 @@ def run_test(self):\n \n         # Test both version 1 and version 2 transactions for all tests\n         # BIP113 test transaction will be modified before each use to put in appropriate block time\n-        bip113tx_v1 = create_transaction(self.nodes[0], bip113input, self.nodeaddress, Decimal(\"49.98\"))\n+        bip113tx_v1 = create_transaction(self.nodes[0], bip113input, self.nodeaddress, amount=Decimal(\"49.98\"))\n         bip113tx_v1.vin[0].nSequence = 0xFFFFFFFE\n         bip113tx_v1.nVersion = 1\n-        bip113tx_v2 = create_transaction(self.nodes[0], bip113input, self.nodeaddress, Decimal(\"49.98\"))\n+        bip113tx_v2 = create_transaction(self.nodes[0], bip113input, self.nodeaddress, amount=Decimal(\"49.98\"))\n         bip113tx_v2.vin[0].nSequence = 0xFFFFFFFE\n         bip113tx_v2.nVersion = 2\n "
      },
      {
        "sha": "3a9639afc12439a33d6ea0c6b9a03b7659e35318",
        "filename": "test/functional/feature_dersig.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf9ed307e6efd2b63d54c74ca8bdd236028fd9dc/test/functional/feature_dersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf9ed307e6efd2b63d54c74ca8bdd236028fd9dc/test/functional/feature_dersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dersig.py?ref=cf9ed307e6efd2b63d54c74ca8bdd236028fd9dc",
        "patch": "@@ -54,7 +54,7 @@ def run_test(self):\n         self.log.info(\"Test that a transaction with non-DER signature can still appear in a block\")\n \n         spendtx = create_transaction(self.nodes[0], self.coinbase_txids[0],\n-                self.nodeaddress, 1.0)\n+                self.nodeaddress, amount=1.0)\n         unDERify(spendtx)\n         spendtx.rehash()\n \n@@ -91,7 +91,7 @@ def run_test(self):\n         block.nVersion = 3\n \n         spendtx = create_transaction(self.nodes[0], self.coinbase_txids[1],\n-                self.nodeaddress, 1.0)\n+                self.nodeaddress, amount=1.0)\n         unDERify(spendtx)\n         spendtx.rehash()\n \n@@ -127,8 +127,7 @@ def run_test(self):\n                 assert b'Non-canonical DER signature' in self.nodes[0].p2p.last_message[\"reject\"].reason\n \n         self.log.info(\"Test that a version 3 block with a DERSIG-compliant transaction is accepted\")\n-        block.vtx[1] = create_transaction(self.nodes[0],\n-                self.coinbase_txids[1], self.nodeaddress, 1.0)\n+        block.vtx[1] = create_transaction(self.nodes[0], self.coinbase_txids[1], self.nodeaddress, amount=1.0)\n         block.hashMerkleRoot = block.calc_merkle_root()\n         block.rehash()\n         block.solve()"
      },
      {
        "sha": "179e1c897f77d39e923c6059885973203f080f8f",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf9ed307e6efd2b63d54c74ca8bdd236028fd9dc/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf9ed307e6efd2b63d54c74ca8bdd236028fd9dc/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=cf9ed307e6efd2b63d54c74ca8bdd236028fd9dc",
        "patch": "@@ -60,31 +60,31 @@ def run_test(self):\n         self.lastblocktime = int(time.time()) + 429\n \n         self.log.info(\"Test 1: NULLDUMMY compliant base transactions should be accepted to mempool and mined before activation [430]\")\n-        test1txs = [create_transaction(self.nodes[0], coinbase_txid[0], self.ms_address, 49)]\n+        test1txs = [create_transaction(self.nodes[0], coinbase_txid[0], self.ms_address, amount=49)]\n         txid1 = self.nodes[0].sendrawtransaction(bytes_to_hex_str(test1txs[0].serialize_with_witness()), True)\n-        test1txs.append(create_transaction(self.nodes[0], txid1, self.ms_address, 48))\n+        test1txs.append(create_transaction(self.nodes[0], txid1, self.ms_address, amount=48))\n         txid2 = self.nodes[0].sendrawtransaction(bytes_to_hex_str(test1txs[1].serialize_with_witness()), True)\n-        test1txs.append(create_transaction(self.nodes[0], coinbase_txid[1], self.wit_ms_address, 49))\n+        test1txs.append(create_transaction(self.nodes[0], coinbase_txid[1], self.wit_ms_address, amount=49))\n         txid3 = self.nodes[0].sendrawtransaction(bytes_to_hex_str(test1txs[2].serialize_with_witness()), True)\n         self.block_submit(self.nodes[0], test1txs, False, True)\n \n         self.log.info(\"Test 2: Non-NULLDUMMY base multisig transaction should not be accepted to mempool before activation\")\n-        test2tx = create_transaction(self.nodes[0], txid2, self.ms_address, 47)\n+        test2tx = create_transaction(self.nodes[0], txid2, self.ms_address, amount=47)\n         trueDummy(test2tx)\n         assert_raises_rpc_error(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test2tx.serialize_with_witness()), True)\n \n         self.log.info(\"Test 3: Non-NULLDUMMY base transactions should be accepted in a block before activation [431]\")\n         self.block_submit(self.nodes[0], [test2tx], False, True)\n \n         self.log.info(\"Test 4: Non-NULLDUMMY base multisig transaction is invalid after activation\")\n-        test4tx = create_transaction(self.nodes[0], test2tx.hash, self.address, 46)\n+        test4tx = create_transaction(self.nodes[0], test2tx.hash, self.address, amount=46)\n         test6txs=[CTransaction(test4tx)]\n         trueDummy(test4tx)\n         assert_raises_rpc_error(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test4tx.serialize_with_witness()), True)\n         self.block_submit(self.nodes[0], [test4tx])\n \n         self.log.info(\"Test 5: Non-NULLDUMMY P2WSH multisig transaction invalid after activation\")\n-        test5tx = create_transaction(self.nodes[0], txid3, self.wit_address, 48)\n+        test5tx = create_transaction(self.nodes[0], txid3, self.wit_address, amount=48)\n         test6txs.append(CTransaction(test5tx))\n         test5tx.wit.vtxinwit[0].scriptWitness.stack[0] = b'\\x01'\n         assert_raises_rpc_error(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test5tx.serialize_with_witness()), True)"
      },
      {
        "sha": "5abd0062828324bba24d5435b96c0a2d8dee3aff",
        "filename": "test/functional/mempool_reorg.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf9ed307e6efd2b63d54c74ca8bdd236028fd9dc/test/functional/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf9ed307e6efd2b63d54c74ca8bdd236028fd9dc/test/functional/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_reorg.py?ref=cf9ed307e6efd2b63d54c74ca8bdd236028fd9dc",
        "patch": "@@ -40,9 +40,9 @@ def run_test(self):\n         # and make sure the mempool code behaves correctly.\n         b = [ self.nodes[0].getblockhash(n) for n in range(101, 105) ]\n         coinbase_txids = [ self.nodes[0].getblock(h)['tx'][0] for h in b ]\n-        spend_101_raw = create_raw_transaction(self.nodes[0], coinbase_txids[1], node1_address, 49.99)\n-        spend_102_raw = create_raw_transaction(self.nodes[0], coinbase_txids[2], node0_address, 49.99)\n-        spend_103_raw = create_raw_transaction(self.nodes[0], coinbase_txids[3], node0_address, 49.99)\n+        spend_101_raw = create_raw_transaction(self.nodes[0], coinbase_txids[1], node1_address, amount=49.99)\n+        spend_102_raw = create_raw_transaction(self.nodes[0], coinbase_txids[2], node0_address, amount=49.99)\n+        spend_103_raw = create_raw_transaction(self.nodes[0], coinbase_txids[3], node0_address, amount=49.99)\n \n         # Create a transaction which is time-locked to two blocks in the future\n         timelock_tx = self.nodes[0].createrawtransaction([{\"txid\": coinbase_txids[0], \"vout\": 0}], {node0_address: 49.99})\n@@ -58,11 +58,11 @@ def run_test(self):\n         spend_103_id = self.nodes[0].sendrawtransaction(spend_103_raw)\n         self.nodes[0].generate(1)\n         # Time-locked transaction is still too immature to spend\n-        assert_raises_rpc_error(-26,'non-final', self.nodes[0].sendrawtransaction, timelock_tx)\n+        assert_raises_rpc_error(-26, 'non-final', self.nodes[0].sendrawtransaction, timelock_tx)\n \n         # Create 102_1 and 103_1:\n-        spend_102_1_raw = create_raw_transaction(self.nodes[0], spend_102_id, node1_address, 49.98)\n-        spend_103_1_raw = create_raw_transaction(self.nodes[0], spend_103_id, node1_address, 49.98)\n+        spend_102_1_raw = create_raw_transaction(self.nodes[0], spend_102_id, node1_address, amount=49.98)\n+        spend_103_1_raw = create_raw_transaction(self.nodes[0], spend_103_id, node1_address, amount=49.98)\n \n         # Broadcast and mine 103_1:\n         spend_103_1_id = self.nodes[0].sendrawtransaction(spend_103_1_raw)"
      },
      {
        "sha": "c773c56f1b400d1a1709e0e49861cf1bf702e36e",
        "filename": "test/functional/mempool_resurrect.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf9ed307e6efd2b63d54c74ca8bdd236028fd9dc/test/functional/mempool_resurrect.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf9ed307e6efd2b63d54c74ca8bdd236028fd9dc/test/functional/mempool_resurrect.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_resurrect.py?ref=cf9ed307e6efd2b63d54c74ca8bdd236028fd9dc",
        "patch": "@@ -26,16 +26,16 @@ def run_test(self):\n         # Mine a new block\n         # ... make sure all the transactions are confirmed again.\n \n-        b = [ self.nodes[0].getblockhash(n) for n in range(1, 4) ]\n-        coinbase_txids = [ self.nodes[0].getblock(h)['tx'][0] for h in b ]\n-        spends1_raw = [ create_raw_transaction(self.nodes[0], txid, node0_address, 49.99) for txid in coinbase_txids ]\n-        spends1_id = [ self.nodes[0].sendrawtransaction(tx) for tx in spends1_raw ]\n+        b = [self.nodes[0].getblockhash(n) for n in range(1, 4)]\n+        coinbase_txids = [self.nodes[0].getblock(h)['tx'][0] for h in b]\n+        spends1_raw = [create_raw_transaction(self.nodes[0], txid, node0_address, amount=49.99) for txid in coinbase_txids]\n+        spends1_id = [self.nodes[0].sendrawtransaction(tx) for tx in spends1_raw]\n \n         blocks = []\n         blocks.extend(self.nodes[0].generate(1))\n \n-        spends2_raw = [ create_raw_transaction(self.nodes[0], txid, node0_address, 49.98) for txid in spends1_id ]\n-        spends2_id = [ self.nodes[0].sendrawtransaction(tx) for tx in spends2_raw ]\n+        spends2_raw = [create_raw_transaction(self.nodes[0], txid, node0_address, amount=49.98) for txid in spends1_id]\n+        spends2_id = [self.nodes[0].sendrawtransaction(tx) for tx in spends2_raw]\n \n         blocks.extend(self.nodes[0].generate(1))\n "
      },
      {
        "sha": "4811c98e9023cace826c75446203e91e40c65a3b",
        "filename": "test/functional/mempool_spend_coinbase.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf9ed307e6efd2b63d54c74ca8bdd236028fd9dc/test/functional/mempool_spend_coinbase.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf9ed307e6efd2b63d54c74ca8bdd236028fd9dc/test/functional/mempool_spend_coinbase.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_spend_coinbase.py?ref=cf9ed307e6efd2b63d54c74ca8bdd236028fd9dc",
        "patch": "@@ -30,9 +30,9 @@ def run_test(self):\n         # Coinbase at height chain_height-100+1 ok in mempool, should\n         # get mined. Coinbase at height chain_height-100+2 is\n         # is too immature to spend.\n-        b = [ self.nodes[0].getblockhash(n) for n in range(101, 103) ]\n-        coinbase_txids = [ self.nodes[0].getblock(h)['tx'][0] for h in b ]\n-        spends_raw = [ create_raw_transaction(self.nodes[0], txid, node0_address, 49.99) for txid in coinbase_txids ]\n+        b = [self.nodes[0].getblockhash(n) for n in range(101, 103)]\n+        coinbase_txids = [self.nodes[0].getblock(h)['tx'][0] for h in b]\n+        spends_raw = [create_raw_transaction(self.nodes[0], txid, node0_address, amount=49.99) for txid in coinbase_txids]\n \n         spend_101_id = self.nodes[0].sendrawtransaction(spends_raw[0])\n "
      },
      {
        "sha": "987ade4044fae1f042fff2669245234a03675e3c",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf9ed307e6efd2b63d54c74ca8bdd236028fd9dc/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf9ed307e6efd2b63d54c74ca8bdd236028fd9dc/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=cf9ed307e6efd2b63d54c74ca8bdd236028fd9dc",
        "patch": "@@ -118,7 +118,7 @@ def create_coinbase(height, pubkey=None):\n     coinbase.calc_sha256()\n     return coinbase\n \n-def create_tx_with_script(prevtx, n, script_sig=b\"\", amount=1, script_pub_key=CScript()):\n+def create_tx_with_script(prevtx, n, script_sig=b\"\", *, amount, script_pub_key=CScript()):\n     \"\"\"Return one-input, one-output transaction object\n        spending the prevtx's n-th output with the given amount.\n \n@@ -131,26 +131,24 @@ def create_tx_with_script(prevtx, n, script_sig=b\"\", amount=1, script_pub_key=CS\n     tx.calc_sha256()\n     return tx\n \n-def create_transaction(node, txid, to_address, amount):\n+def create_transaction(node, txid, to_address, *, amount):\n     \"\"\" Return signed transaction spending the first output of the\n         input txid. Note that the node must be able to sign for the\n         output that is being spent, and the node must not be running\n         multiple wallets.\n     \"\"\"\n-    raw_tx = create_raw_transaction(node, txid, to_address, amount)\n+    raw_tx = create_raw_transaction(node, txid, to_address, amount=amount)\n     tx = CTransaction()\n     tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx)))\n     return tx\n \n-def create_raw_transaction(node, txid, to_address, amount):\n+def create_raw_transaction(node, txid, to_address, *, amount):\n     \"\"\" Return raw signed transaction spending the first output of the\n         input txid. Note that the node must be able to sign for the\n         output that is being spent, and the node must not be running\n         multiple wallets.\n     \"\"\"\n-    inputs = [{\"txid\": txid, \"vout\": 0}]\n-    outputs = {to_address: amount}\n-    rawtx = node.createrawtransaction(inputs, outputs)\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={to_address: amount})\n     signresult = node.signrawtransactionwithwallet(rawtx)\n     assert_equal(signresult[\"complete\"], True)\n     return signresult['hex']"
      }
    ]
  }
]