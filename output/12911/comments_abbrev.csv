achow101,2018-04-08T04:06:32Z,"Concept NACK. `amount` is not guaranteed to be correct (default 0) for non-segwit inputs if users are specifying their own UTXOs. Since the input amount is not required for non-segwit inputs, it will be 0 and the fee will be negative. Furthermore, even if `complete=true`, we do not necessarily have all of the UTXOs that are being spent from so even then we can't accurately calculate the input amou",https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-379518550,379518550,
kallewoof,2018-04-08T04:33:10Z,@achow101 Are you against even if it only displays fee when all input amounts are known? (I.e. add check instead of using fComplete),https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-379519521,379519521,
achow101,2018-04-08T07:20:15Z,I'm not against it if the input amounts are known.,https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-379527218,379527218,
kallewoof,2018-04-08T21:50:18Z,@achow101 I believe I cover all cases of it being known/unknown with the updated code.,https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-379585583,379585583,
promag,2018-04-08T22:25:00Z,"Concept ACK.\n\nThings to do:\n - [x] update to help message referring new response key;\n - [x] update existing tests or add new ones;\n - [x] release note.",https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-379587758,379587758,
kallewoof,2018-04-08T23:54:28Z,"@promag Thanks, done. :)",https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-379592942,379592942,
promag,2018-04-09T00:04:11Z,"LGTM, will test later.",https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-379593668,379593668,
kallewoof,2018-04-09T05:44:18Z,"I pushed another commit (a35bc32) which also shows fee rate (both in btc/kb and sat/b), as someone requested it. Will squash unless people speak against the idea.",https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-379639081,379639081,
promag,2018-04-09T07:15:38Z,Fee rate is something the user can easily compute with the fee and hex size. Not sure about that.,https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-379657295,379657295,
kallewoof,2018-04-09T07:21:46Z,"@promag I agree it can be easily derived, but not sure there's any drawbacks to printing it either...",https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-379658665,379658665,
promag,2018-04-09T11:17:43Z,@kallewoof maybe just display in one unit only? And if it goes forward maybe add the same fee rate to `fundrawtransaction`?,https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-379718061,379718061,
kallewoof,2018-04-10T02:16:34Z,@promag Done.,https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-379951930,379951930,
sipa,2018-04-10T16:39:54Z,"I'm not sure this is the right place. Hopefully you know the fee/feerate before deciding to sign something, and the fact that `signrawtransaction` happens to have all the necessary information (sometimes) is more an implementation accident than inherent to its function.\n\nIs there a pressing use case? Otherwise I would argue to instead move PSBT forward, and add an RPC to analyse a PSBT which c",https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-380167908,380167908,
kallewoof,2018-04-11T04:42:02Z,"@sipa That is exactly the problem: I misread the input value and ended up throwing ~$10 away, which triggered my creating this PR.\n\nNote that the feerate is also listed in `fundrawtransaction` -- adding it to `signrawtransaction` seems like a natural complement.",https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-380325161,380325161,
NicolasDorier,2018-06-27T06:50:50Z,"I think an alternative fix to this problem, to make sure the user don't shoot himself in the foot is to have a `signrawtransactionwithwallet` parameter which cross check that what is sign is what is expected.\n\nFor example `signrawtransactionwithwallet hex=<hex> expect={""destinations"": [ { ""Address"": ""blah"", ""Value"": 1000 }], ""maxFee"": 100 }`\n\nThis would actually simplify greatly calling co",https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-400562296,400562296,
NicolasDorier,2018-06-27T07:07:35Z,"Talked with @kallewoof :\n\nAn easy alternative I was pointing out was also just a simple `expectedMaxFee=` parameter would be widely useful.\n\nHowever, he pointed me out that `fundrawtransaction` actually show the fees. I think it makes sense to support on `signtransaction` if `fundrawtransaction` do it already.\n\nConcept ACK.",https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-400566023,400566023,
kallewoof,2018-06-27T07:27:26Z,"A way to verify fees right now is to use fundrawtransaction on the resulting transaction:\n1. `createrawtransaction` with inputs and outputs\n2. Sign it using `signrawtransaction`\n3. Decode the results, using `vsize` as basis for fee\n4. Adjust outputs, reducing by the chosen fee\n5. Call `fundrawtransaction` on the result with option `{\""feeRate\"":CHOSENFEERATE}`\n6. If returned hex is the",https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-400570769,400570769,
DrahtBot,2018-07-22T23:50:08Z,"<!--5d09a71f8925f3f132321140b44b946d-->The last travis run for this pull request was 73 days ago and is thus outdated. To trigger a fresh travis build, this pull request should be closed and re-opened.",https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-406906737,406906737,
DrahtBot,2018-09-21T13:21:36Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18115 (wallet: Pass in transactions and messages for signing instead of exporting the private keys by achow101)\n* #16549",https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-423528779,423528779,
NicolasDorier,2019-04-02T06:14:03Z,Code review ACK. This is very useful.,https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-478859166,478859166,
kallewoof,2019-04-15T02:01:38Z,@MarcoFalke DrahtBot is not realizing this PR no longer needs rebasing.,https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-483083068,483083068,
DrahtBot,2020-03-09T21:21:26Z,<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/fa733bbd78add587e19f0175ab9c127a8c27e024/CONTRIBUTING.md#rebasing-changes).,https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-596786050,596786050,
kallewoof,2020-03-10T01:52:46Z,"This used to be a fairly straightforward patch, but after #18115 this becomes way too complex to warrant the change.",https://github.com/bitcoin/bitcoin/pull/12911#issuecomment-596860856,596860856,
promag,2018-04-09T00:00:05Z,Wrong alignment.,https://github.com/bitcoin/bitcoin/pull/12911#discussion_r179966881,179966881,src/rpc/rawtransaction.cpp
kallewoof,2018-04-09T00:03:31Z,Fixed,https://github.com/bitcoin/bitcoin/pull/12911#discussion_r179967001,179967001,src/rpc/rawtransaction.cpp
sipa,2018-11-14T23:12:20Z,"You should also set `known_input = false` when `sigdata.witness` below is false (unless it's known that every input is spending a witness output, there is no guarantee that providing incorrect amounts will result in invalid signatures).",https://github.com/bitcoin/bitcoin/pull/12911#discussion_r233657481,233657481,src/rpc/rawtransaction.cpp
kallewoof,2018-11-15T05:06:54Z,"I'm not sure what you mean by ""providing incorrect amounts"". This is directly from the UTXO set of the node itself. When would it tell itself incorrect amounts?",https://github.com/bitcoin/bitcoin/pull/12911#discussion_r233713257,233713257,src/rpc/rawtransaction.cpp
sipa,2018-11-15T19:38:46Z,"`view` is not the node's UTXO set, but a local variable which holds a few cached UTXO entries. Those *can* come from the UTXO set or mempool, but could also have been provided by the user (see the `prevTxsUnival` input argument to this function).",https://github.com/bitcoin/bitcoin/pull/12911#discussion_r233981496,233981496,src/rpc/rawtransaction.cpp
kallewoof,2018-11-16T01:34:40Z,"Makes sense, thanks. I updated the code to only work with segwit inputs (i.e. added the change you requested).",https://github.com/bitcoin/bitcoin/pull/12911#discussion_r234066344,234066344,src/rpc/rawtransaction.cpp
NicolasDorier,2019-04-11T03:37:39Z,"should use the virtual size, not the tx size",https://github.com/bitcoin/bitcoin/pull/12911#discussion_r274247620,274247620,src/rpc/rawtransaction_util.cpp
kallewoof,2019-04-11T05:25:24Z,"@NicolasDorier I changed to use vsize:\n```\n{\n  ""hex"": ""0200000000010104f1e2bcda677ec9c76c4201ce5ab1dec28b2127fa5cc1a0555401887ed1a49b00000000171600143f7d5c060647cf38a896d2b0ad77004526eead1bfeffffff02109242060100000017a914b7036cfe5ee607f473630a51911f60f99c85260f870065cd1d0000000017a914bd8a3d83ca6e3cfa74386c0e61374a62e7eba4178702473044022058bf8809ebd3816a8270d0bd740a26f962d8deab02a7a46c008b4de",https://github.com/bitcoin/bitcoin/pull/12911#discussion_r274261650,274261650,src/rpc/rawtransaction_util.cpp
