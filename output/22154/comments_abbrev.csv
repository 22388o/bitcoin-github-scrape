DrahtBot,2021-06-05 05:28:34,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #22260 (Make bech32m the default, except where needed. Update GUI checkbox. by Sjors)\n* #21500 (wallet, rpc: add an optio",https://github.com/bitcoin/bitcoin/pull/22154#issuecomment-855186772,855186772,
fjahr,2021-06-13 20:11:48,utACK 05ff76c3aad6905d984ba1764c8045ca530fbf8f,https://github.com/bitcoin/bitcoin/pull/22154#issuecomment-860264172,860264172,
Sjors,2021-06-17 09:19:37,re-utACK f70d55c136d9fc0bc986cc86e619570e0417d188,https://github.com/bitcoin/bitcoin/pull/22154#issuecomment-863078439,863078439,
practicalswift,2021-06-17 19:53:26,Concept ACK,https://github.com/bitcoin/bitcoin/pull/22154#issuecomment-863520459,863520459,
Sjors,2021-06-18 13:39:55,re-utACK f33361c17f3937ee8819fcea76548e19f6ac6558,https://github.com/bitcoin/bitcoin/pull/22154#issuecomment-864047177,864047177,
fjahr,2021-06-20 19:31:03,"re-ACK f33361c\n\nThe only changes since my last review was a reorganization of the code changes in `TransactionChangeType()` and ensuring there that `BECH32` address types are also available before using them. That commit was also slightly renamed.",https://github.com/bitcoin/bitcoin/pull/22154#issuecomment-864601279,864601279,
laanwj,2021-06-21 07:03:08,"Code review ACK f33361c17f3937ee8819fcea76548e19f6ac6558\nre-review ACK 754f134a50cc56cdf0baf996d909c992770fcc97\n\nI think the potential RPC error message translation issue mentioned in https://github.com/bitcoin/bitcoin/pull/22154#discussion_r653415459 needs to be addressed at some point, but also think it's not a blocker for 22.0.",https://github.com/bitcoin/bitcoin/pull/22154#issuecomment-864782210,864782210,
meshcollider,2021-06-23 01:50:12,"I get an error in wallet_taproot.py:\n```python\nRemaining jobs: [wallet_taproot.py]\n1/1 - wallet_taproot.py failed, Duration: 1 s\n\nstdout:\n2021-06-23T01:47:26.095000Z TestFramework (INFO): Initializing test directory /tmp/test_runner_₿_🏃_20210623_134725/wallet_taproot_0\n2021-06-23T01:47:26.359000Z TestFramework (INFO): Creating wallets...\n2021-06-23T01:47:26.605000Z TestFramework (I",https://github.com/bitcoin/bitcoin/pull/22154#issuecomment-866458586,866458586,
achow101,2021-06-23 01:57:08,"Silent merge conflict, rebased and fixed.",https://github.com/bitcoin/bitcoin/pull/22154#issuecomment-866460967,866460967,
Sjors,2021-06-23 12:36:36,re-utACK 754f134: only change is switching to `bech32m` in two `wallet_taproot.py` test cases.,https://github.com/bitcoin/bitcoin/pull/22154#issuecomment-866797850,866797850,
achow101,2021-06-23 22:59:16,"> When should `bech32m` be added to the `-addresstype` and `-changetype` wallet config option helps?\n\nWhen we make bech32m descriptors by default.",https://github.com/bitcoin/bitcoin/pull/22154#issuecomment-867212574,867212574,
fjahr,2021-06-23 23:03:46,"re-ACK 754f134a50cc56cdf0baf996d909c992770fcc97\n\nConfirmed only changes were rebasing and fixing `wallet_taproot.py`.",https://github.com/bitcoin/bitcoin/pull/22154#issuecomment-867214167,867214167,
Sjors,2021-06-24 17:52:59,I rebased my followup in #22260 (which probably works best if you don't set `-addresstype`),https://github.com/bitcoin/bitcoin/pull/22154#issuecomment-867837701,867837701,
sipa,2021-06-05 17:24:12,Do we intend to ever create those through this RPC? I think you'd use `deriveaddress` or so instead.,https://github.com/bitcoin/bitcoin/pull/22154#discussion_r646014986,646014986,src/rpc/misc.cpp
achow101,2021-06-06 19:41:36,Probably not. Changed the message.,https://github.com/bitcoin/bitcoin/pull/22154#discussion_r646178016,646178016,src/rpc/misc.cpp
fjahr,2021-06-10 23:02:19,nit: could use `constexpr` I think,https://github.com/bitcoin/bitcoin/pull/22154#discussion_r649585829,649585829,src/wallet/scriptpubkeyman.h
fjahr,2021-06-10 23:37:23,"Hm, these error messages could be more clear, even if they are only temporary since they will be probably what people might run into with 0.22. Maybe return something similar as the log info above in both cases if the in this case?",https://github.com/bitcoin/bitcoin/pull/22154#discussion_r649597195,649597195,test/functional/wallet_address_types.py
fjahr,2021-06-10 23:37:38,addresses,https://github.com/bitcoin/bitcoin/pull/22154#discussion_r649597262,649597262,test/functional/wallet_address_types.py
fjahr,2021-06-13 00:08:01,"Have you thought about placing asserts in `LegacyScriptPubKeyMan::KeepDestination`, `LegacyScriptPubKeyMan::GetKeyFromPool`, and `LegacyScriptPubKeyMan::LearnRelatedScripts`?",https://github.com/bitcoin/bitcoin/pull/22154#discussion_r650449568,650449568,src/wallet/scriptpubkeyman.cpp
fjahr,2021-06-13 00:12:02,Can be `const`,https://github.com/bitcoin/bitcoin/pull/22154#discussion_r650449876,650449876,src/wallet/wallet.cpp
achow101,2021-06-13 01:04:43,Tried that but it doesn't work.,https://github.com/bitcoin/bitcoin/pull/22154#discussion_r650453322,650453322,src/wallet/scriptpubkeyman.h
sipa,2021-06-13 01:44:36,"You can't `constexpr` things that need allocation. You could use an array instead of an unordered_set, and use `std::find` to look up (which will likely be faster too, due to the tiny size), but it really doesn't matter here.",https://github.com/bitcoin/bitcoin/pull/22154#discussion_r650455933,650455933,src/wallet/scriptpubkeyman.h
achow101,2021-06-13 01:48:24,I've added a commit which allows `GetReservedDestination` to return real error messages. So this is now `No bech32m addresses available`.,https://github.com/bitcoin/bitcoin/pull/22154#discussion_r650456180,650456180,test/functional/wallet_address_types.py
achow101,2021-06-13 01:48:29,Fixed,https://github.com/bitcoin/bitcoin/pull/22154#discussion_r650456184,650456184,test/functional/wallet_address_types.py
achow101,2021-06-13 01:50:23,Added asserts for all of the `LegacyScriptPubKeyMan` functions which take an `OutputType`.,https://github.com/bitcoin/bitcoin/pull/22154#discussion_r650456334,650456334,src/wallet/scriptpubkeyman.cpp
achow101,2021-06-13 01:50:27,Done,https://github.com/bitcoin/bitcoin/pull/22154#discussion_r650456336,650456336,src/wallet/wallet.cpp
Sjors,2021-06-16 13:21:39,"a1373469af96bf77bad65415c4b456f182dbc3fe : is this just belt and suspenders? When I do `getnewaddress Test bech32m` on legacy wallet for this commit, it's caught earlier and returns `No bech32m addresses available`. That's because `CWallet::GetNewDestination` tries `GetScriptPubKeyMan` first for the requested type.",https://github.com/bitcoin/bitcoin/pull/22154#discussion_r652682773,652682773,src/wallet/scriptpubkeyman.cpp
Sjors,2021-06-16 13:32:03,"As an extra safety measure, maybe double-check that Taproot is active like in #22156",https://github.com/bitcoin/bitcoin/pull/22154#discussion_r652692353,652692353,src/wallet/wallet.cpp
achow101,2021-06-16 16:37:50,"Yes, just belt and suspenders.",https://github.com/bitcoin/bitcoin/pull/22154#discussion_r652861459,652861459,src/wallet/scriptpubkeyman.cpp
achow101,2021-06-16 16:41:05,"Since this is generic for future segwit versions, I'm not sure doing that makes sense. For taproot specifically, there won't be a bech32m `ScriptPubKeyMan` until taproot activates anyways.",https://github.com/bitcoin/bitcoin/pull/22154#discussion_r652863698,652863698,src/wallet/wallet.cpp
Sjors,2021-06-16 20:05:13,"This assumes there is always a bech32 descriptor, which may not be the case if you're using a custom taproot descriptor without fallback.\n\n```patch\ndiff --git a/src/wallet/wallet.cpp b/src/wallet/wallet.cpp\nindex 3eca506f08..c0b28acd47 100644\n--- a/src/wallet/wallet.cpp\n+++ b/src/wallet/wallet.cpp\n@@ -1911,9 +1911,11 @@ OutputType CWallet::TransactionChangeType(const std::optional<Ou",https://github.com/bitcoin/bitcoin/pull/22154#discussion_r653006563,653006563,src/wallet/wallet.cpp
achow101,2021-06-16 20:56:33,"The original code did not check for a bech32 `ScriptPubKeyMan`, but I have added that check. I did not include the `else` suggested in your diff as that would be incorrect.",https://github.com/bitcoin/bitcoin/pull/22154#discussion_r653048065,653048065,src/wallet/wallet.cpp
MarcoFalke,2021-06-17 09:56:16,"4bf448fc2528d9df371b2ca6e9b13319441a21e5: I don't understand what the `witnessversion >= 1` is doing.\n\nAssuming `witnessversion` is `2`, then a bech32m address will be selected (possibly a taproot address). However, if the `witnessversion` is `0`, even with a taproot wallet, a segwit_0 address will be enforced. This seems inconsistent and confusing, unless I am missing something?",https://github.com/bitcoin/bitcoin/pull/22154#discussion_r653414204,653414204,src/wallet/wallet.cpp
MarcoFalke,2021-06-17 09:57:57,"Not sure how difficult it would be to fix, but the general idea for translations is to pass up the bilingual string and let the caller pick the right version. Otherwise the RPC responses (and debug log) might be partially translated. Functional test might fail when run with the gui.",https://github.com/bitcoin/bitcoin/pull/22154#discussion_r653415459,653415459,src/wallet/wallet.cpp
MarcoFalke,2021-06-17 10:02:00,"Also, if the first output is a witnessversion_0 and the second a witnessversion_1, this function will incorrectly return witnessversion_0?",https://github.com/bitcoin/bitcoin/pull/22154#discussion_r653418503,653418503,src/wallet/wallet.cpp
Sjors,2021-06-17 14:40:11,This opportunistic change code was initially intended to _upgrade_ change addresses to `bech32` if there was no privacy downside. With this new change it seems that we _downgrade_ a v1+ witness to v0 just in order to blend in. I'm also not sure if we should do that. It could actually hurt privacy when that v0 change address is spent later on and combined with a v1 input.,https://github.com/bitcoin/bitcoin/pull/22154#discussion_r653630920,653630920,src/wallet/wallet.cpp
achow101,2021-06-17 16:58:53,"Indeed. I've changed this to just return `BECH32M` or `BECH32` depending on what is available, with a preference for `BECH32M`.\n\nHowever I think this function (and generally how change address type is determined) should be revisited because not all address types are available in descriptor wallets. But I think that is out of scope for this PR.",https://github.com/bitcoin/bitcoin/pull/22154#discussion_r653755823,653755823,src/wallet/wallet.cpp
achow101,2021-06-17 17:00:26,I think that will be a bit invasive since several of the functions involved use `std::string error` rather than `bilingual_str`. Perhaps for a followup.,https://github.com/bitcoin/bitcoin/pull/22154#discussion_r653757531,653757531,src/wallet/wallet.cpp
laanwj,2021-06-18 17:54:18,"Yes, if you're going to translate anything, it's better to use `bilingual_str`. I would prefer to do this right in the first go, instead of having another follow-up commit to prevent RPC messages from being translated.\n\nAlternatively just leave this untranslated for now. This is marked for 22.0 and we've passed the translation string freeze.",https://github.com/bitcoin/bitcoin/pull/22154#discussion_r654597200,654597200,src/wallet/wallet.cpp
achow101,2021-06-18 18:11:14,"For the strings I added, I was just following the pattern already in use in these functions. For this change in particular, it was to make the style unified. Unless this is considered a blocker, I'm going to leave it as is.",https://github.com/bitcoin/bitcoin/pull/22154#discussion_r654605409,654605409,src/wallet/wallet.cpp
laanwj,2021-06-21 06:42:22,Ok…,https://github.com/bitcoin/bitcoin/pull/22154#discussion_r655112610,655112610,src/wallet/wallet.cpp
jonatack,2021-06-23 21:40:13,"In commit 87a0e7a3b7c0ffd5, src/script/descriptor.cpp should include `outputtype.h` where `OutputTypeFromDestination()` is moved.\n```diff\n--- a/src/script/descriptor.cpp\n+++ b/src/script/descriptor.cpp\n@@ -5,6 +5,7 @@\n #include <script/descriptor.h>\n \n #include <key_io.h>\n+#include <outputtype.h>\n #include <pubkey.h>\n #include <script/script.h>\n #include <script/standard.h>\",https://github.com/bitcoin/bitcoin/pull/22154#discussion_r657480284,657480284,src/script/descriptor.cpp
jonatack,2021-06-23 22:11:30,s/addreses/addresses/ should be fixed one commit earlier in 87a0e7a ,https://github.com/bitcoin/bitcoin/pull/22154#discussion_r657495169,657495169,test/functional/wallet_address_types.py
