[
  {
    "sha": "177c15d2f7cd5406ddbce8217fc023057539b828",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzdjMTVkMmY3Y2Q1NDA2ZGRiY2U4MjE3ZmMwMjMwNTc1MzliODI4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-04T20:37:41Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-23T01:53:11Z"
      },
      "message": "Limit LegacyScriptPubKeyMan address types\n\nMake sure that LegacyScriptPubKeyMan can only be used for legacy,\np2sh-segwit, and bech32 address types.",
      "tree": {
        "sha": "8a06ff84feb783bf06edb5dab49a8af7b18fcd64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a06ff84feb783bf06edb5dab49a8af7b18fcd64"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/177c15d2f7cd5406ddbce8217fc023057539b828",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/177c15d2f7cd5406ddbce8217fc023057539b828",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/177c15d2f7cd5406ddbce8217fc023057539b828",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/177c15d2f7cd5406ddbce8217fc023057539b828/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c93e123dc72bfc1bd2c637fdcd032e570d53a7bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c93e123dc72bfc1bd2c637fdcd032e570d53a7bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c93e123dc72bfc1bd2c637fdcd032e570d53a7bd"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 17,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4212b6f34a4b7ac07d90771e09c1130fe130d94d",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/177c15d2f7cd5406ddbce8217fc023057539b828/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/177c15d2f7cd5406ddbce8217fc023057539b828/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=177c15d2f7cd5406ddbce8217fc023057539b828",
        "patch": "@@ -22,6 +22,11 @@ const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;\n \n bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n {\n+    if (LEGACY_OUTPUT_TYPES.count(type) == 0) {\n+        error = _(\"Error: Legacy wallets only support the \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\" address types\").translated;\n+        return false;\n+    }\n+\n     LOCK(cs_KeyStore);\n     error.clear();\n \n@@ -291,6 +296,10 @@ bool LegacyScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBat\n \n bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n {\n+    if (LEGACY_OUTPUT_TYPES.count(type) == 0) {\n+        return false;\n+    }\n+\n     LOCK(cs_KeyStore);\n     if (!CanGetAddresses(internal)) {\n         return false;"
      },
      {
        "sha": "3c6a29e5d16d1fb597df951493e14e1842920ffe",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/177c15d2f7cd5406ddbce8217fc023057539b828/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/177c15d2f7cd5406ddbce8217fc023057539b828/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=177c15d2f7cd5406ddbce8217fc023057539b828",
        "patch": "@@ -254,6 +254,13 @@ class ScriptPubKeyMan\n     boost::signals2::signal<void ()> NotifyCanGetAddressesChanged;\n };\n \n+/** OutputTypes supported by the LegacyScriptPubKeyMan */\n+static const std::unordered_set<OutputType> LEGACY_OUTPUT_TYPES {\n+    OutputType::LEGACY,\n+    OutputType::P2SH_SEGWIT,\n+    OutputType::BECH32,\n+};\n+\n class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n {\n private:"
      },
      {
        "sha": "63d0f4cf414e1da163fb2170a0121dfda537c3ec",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/177c15d2f7cd5406ddbce8217fc023057539b828/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/177c15d2f7cd5406ddbce8217fc023057539b828/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=177c15d2f7cd5406ddbce8217fc023057539b828",
        "patch": "@@ -3033,7 +3033,7 @@ void CWallet::SetupLegacyScriptPubKeyMan()\n     }\n \n     auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new LegacyScriptPubKeyMan(*this));\n-    for (const auto& type : OUTPUT_TYPES) {\n+    for (const auto& type : LEGACY_OUTPUT_TYPES) {\n         m_internal_spk_managers[type] = spk_manager.get();\n         m_external_spk_managers[type] = spk_manager.get();\n     }"
      }
    ]
  },
  {
    "sha": "0262536c34567743e527dad46912c9ba493252cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMjYyNTM2YzM0NTY3NzQzZTUyN2RhZDQ2OTEyYzliYTQ5MzI1MmNk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-04T20:38:47Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-23T01:53:11Z"
      },
      "message": "Add OutputType::BECH32M\n\nBech32m addresses need their own OutputType\n\nWe are not ready to create DescriptorScriptPubKeyMans which produce\nbech32m addresses. So don't allow generating them.",
      "tree": {
        "sha": "46bf2bac96cdb0bd7a5a960d573e0a6dd175bed9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46bf2bac96cdb0bd7a5a960d573e0a6dd175bed9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0262536c34567743e527dad46912c9ba493252cd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0262536c34567743e527dad46912c9ba493252cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0262536c34567743e527dad46912c9ba493252cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0262536c34567743e527dad46912c9ba493252cd/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "177c15d2f7cd5406ddbce8217fc023057539b828",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/177c15d2f7cd5406ddbce8217fc023057539b828",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/177c15d2f7cd5406ddbce8217fc023057539b828"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 21,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9748fe24c7d14e2282147c038b2fe01b370f4279",
        "filename": "src/outputtype.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0262536c34567743e527dad46912c9ba493252cd/src/outputtype.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0262536c34567743e527dad46912c9ba493252cd/src/outputtype.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.cpp?ref=0262536c34567743e527dad46912c9ba493252cd",
        "patch": "@@ -18,6 +18,7 @@\n static const std::string OUTPUT_TYPE_STRING_LEGACY = \"legacy\";\n static const std::string OUTPUT_TYPE_STRING_P2SH_SEGWIT = \"p2sh-segwit\";\n static const std::string OUTPUT_TYPE_STRING_BECH32 = \"bech32\";\n+static const std::string OUTPUT_TYPE_STRING_BECH32M = \"bech32m\";\n \n bool ParseOutputType(const std::string& type, OutputType& output_type)\n {\n@@ -30,6 +31,9 @@ bool ParseOutputType(const std::string& type, OutputType& output_type)\n     } else if (type == OUTPUT_TYPE_STRING_BECH32) {\n         output_type = OutputType::BECH32;\n         return true;\n+    } else if (type == OUTPUT_TYPE_STRING_BECH32M) {\n+        output_type = OutputType::BECH32M;\n+        return true;\n     }\n     return false;\n }\n@@ -40,6 +44,7 @@ const std::string& FormatOutputType(OutputType type)\n     case OutputType::LEGACY: return OUTPUT_TYPE_STRING_LEGACY;\n     case OutputType::P2SH_SEGWIT: return OUTPUT_TYPE_STRING_P2SH_SEGWIT;\n     case OutputType::BECH32: return OUTPUT_TYPE_STRING_BECH32;\n+    case OutputType::BECH32M: return OUTPUT_TYPE_STRING_BECH32M;\n     } // no default case, so the compiler can warn about missing cases\n     assert(false);\n }\n@@ -59,6 +64,7 @@ CTxDestination GetDestinationForKey(const CPubKey& key, OutputType type)\n             return witdest;\n         }\n     }\n+    case OutputType::BECH32M: {} // This function should never be used with BECH32M, so let it assert\n     } // no default case, so the compiler can warn about missing cases\n     assert(false);\n }\n@@ -98,6 +104,7 @@ CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore,\n             return ScriptHash(witprog);\n         }\n     }\n+    case OutputType::BECH32M: {} // This function should not be used for BECH32M, so let it assert\n     } // no default case, so the compiler can warn about missing cases\n     assert(false);\n }"
      },
      {
        "sha": "8727d3f543b711339bf3329afc1908fe9a7342e3",
        "filename": "src/outputtype.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0262536c34567743e527dad46912c9ba493252cd/src/outputtype.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0262536c34567743e527dad46912c9ba493252cd/src/outputtype.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.h?ref=0262536c34567743e527dad46912c9ba493252cd",
        "patch": "@@ -18,12 +18,14 @@ enum class OutputType {\n     LEGACY,\n     P2SH_SEGWIT,\n     BECH32,\n+    BECH32M,\n };\n \n static constexpr auto OUTPUT_TYPES = std::array{\n     OutputType::LEGACY,\n     OutputType::P2SH_SEGWIT,\n     OutputType::BECH32,\n+    OutputType::BECH32M,\n };\n \n [[nodiscard]] bool ParseOutputType(const std::string& str, OutputType& output_type);"
      },
      {
        "sha": "dedd40694e806b51ccb5f22b561b1daa9e1a5f04",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0262536c34567743e527dad46912c9ba493252cd/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0262536c34567743e527dad46912c9ba493252cd/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=0262536c34567743e527dad46912c9ba493252cd",
        "patch": "@@ -1889,6 +1889,12 @@ bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const\n \n bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key, OutputType addr_type)\n {\n+    if (addr_type == OutputType::BECH32M) {\n+        // Don't allow setting up taproot descriptors yet\n+        // TODO: Allow setting up taproot descriptors\n+        return false;\n+    }\n+\n     LOCK(cs_desc_man);\n     assert(m_storage.IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n \n@@ -1918,6 +1924,7 @@ bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_\n         desc_prefix = \"wpkh(\" + xpub + \"/84'\";\n         break;\n     }\n+    case OutputType::BECH32M: assert(false); // TODO: Setup taproot descriptor\n     } // no default case, so the compiler can warn about missing cases\n     assert(!desc_prefix.empty());\n "
      },
      {
        "sha": "fbda77ed62c49d10715d52849c8414ad9bb32f27",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0262536c34567743e527dad46912c9ba493252cd/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0262536c34567743e527dad46912c9ba493252cd/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0262536c34567743e527dad46912c9ba493252cd",
        "patch": "@@ -3086,6 +3086,11 @@ void CWallet::SetupDescriptorScriptPubKeyMans()\n \n         for (bool internal : {false, true}) {\n             for (OutputType t : OUTPUT_TYPES) {\n+                if (t == OutputType::BECH32M) {\n+                    // Skip taproot (bech32m) for now\n+                    // TODO: Setup taproot (bech32m) descriptors by default\n+                    continue;\n+                }\n                 auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, internal));\n                 if (IsCrypted()) {\n                     if (IsLocked()) {"
      }
    ]
  },
  {
    "sha": "699dfcd8ad9487a4e04c1ffc68211e84e126b3d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OTlkZmNkOGFkOTQ4N2E0ZTA0YzFmZmM2ODIxMWU4NGUxMjZiM2Qy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-04T20:40:48Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-23T01:53:11Z"
      },
      "message": "Opportunistically use bech32m change addresses if available\n\nIf a transaction as a segwit output, use a bech32m change address if\nthey are available. If not, fallback to bech32. If bech32 change\naddresses are unavailable, fallback to the default address type.",
      "tree": {
        "sha": "32cb7d69dc0bcbe38064a0a429047960bb5c6b1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32cb7d69dc0bcbe38064a0a429047960bb5c6b1b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/699dfcd8ad9487a4e04c1ffc68211e84e126b3d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/699dfcd8ad9487a4e04c1ffc68211e84e126b3d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/699dfcd8ad9487a4e04c1ffc68211e84e126b3d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/699dfcd8ad9487a4e04c1ffc68211e84e126b3d2/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0262536c34567743e527dad46912c9ba493252cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0262536c34567743e527dad46912c9ba493252cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0262536c34567743e527dad46912c9ba493252cd"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 7,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0f693026971323b15f96a007719a584b32b79347",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/699dfcd8ad9487a4e04c1ffc68211e84e126b3d2/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/699dfcd8ad9487a4e04c1ffc68211e84e126b3d2/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=699dfcd8ad9487a4e04c1ffc68211e84e126b3d2",
        "patch": "@@ -1909,7 +1909,13 @@ OutputType CWallet::TransactionChangeType(const std::optional<OutputType>& chang\n         int witnessversion = 0;\n         std::vector<unsigned char> witnessprogram;\n         if (recipient.scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram)) {\n-            return OutputType::BECH32;\n+            if (GetScriptPubKeyMan(OutputType::BECH32M, true)) {\n+                return OutputType::BECH32M;\n+            } else if (GetScriptPubKeyMan(OutputType::BECH32, true)) {\n+                return OutputType::BECH32;\n+            } else {\n+                return m_default_address_type;\n+            }\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "6dbe4d10728f882986ed0d9ed77bc736f051c662",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZGJlNGQxMDcyOGY4ODI5ODZlZDBkOWVkNzdiYzczNmYwNTFjNjYy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-04T20:42:33Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-23T01:57:04Z"
      },
      "message": "Use BECH32M for tr() desc, WitV1Taproot, and WitUnknown CTxDests\n\nThe tr() descriptor, WitnessV1Taproot CTxDestination, and\nWitnessUnknown CTxDestination are OutputType::BECH32M so they should\nreport as such.",
      "tree": {
        "sha": "7c8aa8e4b4b15c9840b97be75ef4aff263374345",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c8aa8e4b4b15c9840b97be75ef4aff263374345"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6dbe4d10728f882986ed0d9ed77bc736f051c662",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6dbe4d10728f882986ed0d9ed77bc736f051c662",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6dbe4d10728f882986ed0d9ed77bc736f051c662",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6dbe4d10728f882986ed0d9ed77bc736f051c662/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "699dfcd8ad9487a4e04c1ffc68211e84e126b3d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/699dfcd8ad9487a4e04c1ffc68211e84e126b3d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/699dfcd8ad9487a4e04c1ffc68211e84e126b3d2"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 9,
      "deletions": 7
    },
    "files": [
      {
        "sha": "5da249b7f9e93687171bbb973949811ae904e7e2",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbe4d10728f882986ed0d9ed77bc736f051c662/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbe4d10728f882986ed0d9ed77bc736f051c662/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=6dbe4d10728f882986ed0d9ed77bc736f051c662",
        "patch": "@@ -646,11 +646,13 @@ static std::optional<OutputType> OutputTypeFromDestination(const CTxDestination&\n         return OutputType::LEGACY;\n     }\n     if (std::holds_alternative<WitnessV0KeyHash>(dest) ||\n-        std::holds_alternative<WitnessV0ScriptHash>(dest) ||\n-        std::holds_alternative<WitnessV1Taproot>(dest) ||\n-        std::holds_alternative<WitnessUnknown>(dest)) {\n+        std::holds_alternative<WitnessV0ScriptHash>(dest)) {\n         return OutputType::BECH32;\n     }\n+    if (std::holds_alternative<WitnessV1Taproot>(dest) ||\n+        std::holds_alternative<WitnessUnknown>(dest)) {\n+        return OutputType::BECH32M;\n+    }\n     return std::nullopt;\n }\n \n@@ -874,7 +876,7 @@ class TRDescriptor final : public DescriptorImpl\n     {\n         assert(m_subdescriptor_args.size() == m_depths.size());\n     }\n-    std::optional<OutputType> GetOutputType() const override { return OutputType::BECH32; }\n+    std::optional<OutputType> GetOutputType() const override { return OutputType::BECH32M; }\n     bool IsSingleType() const final { return true; }\n };\n "
      },
      {
        "sha": "b085a6eab63562847d5e679c8ff0ae2d266ddbdf",
        "filename": "test/functional/wallet_taproot.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbe4d10728f882986ed0d9ed77bc736f051c662/test/functional/wallet_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbe4d10728f882986ed0d9ed77bc736f051c662/test/functional/wallet_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_taproot.py?ref=6dbe4d10728f882986ed0d9ed77bc736f051c662",
        "patch": "@@ -226,7 +226,7 @@ def do_test_addr(self, comment, pattern, privmap, treefn, keys):\n         result = self.addr_gen.importdescriptors([{\"desc\": desc_pub, \"active\": True, \"timestamp\": \"now\"}])\n         assert(result[0]['success'])\n         for i in range(4):\n-            addr_g = self.addr_gen.getnewaddress(address_type='bech32')\n+            addr_g = self.addr_gen.getnewaddress(address_type='bech32m')\n             if treefn is not None:\n                 addr_r = self.make_addr(treefn, keys, i)\n                 assert_equal(addr_g, addr_r)\n@@ -259,7 +259,7 @@ def do_test_sendtoaddress(self, comment, pattern, privmap, treefn, keys_pay, key\n         result = self.rpc_online.importdescriptors([{\"desc\": desc_change, \"active\": True, \"timestamp\": \"now\", \"internal\": True}])\n         assert(result[0]['success'])\n         for i in range(4):\n-            addr_g = self.rpc_online.getnewaddress(address_type='bech32')\n+            addr_g = self.rpc_online.getnewaddress(address_type='bech32m')\n             if treefn is not None:\n                 addr_r = self.make_addr(treefn, keys_pay, i)\n                 assert_equal(addr_g, addr_r)\n@@ -290,7 +290,7 @@ def do_test_psbt(self, comment, pattern, privmap, treefn, keys_pay, keys_change)\n         result = self.psbt_offline.importdescriptors([{\"desc\": desc_change, \"active\": True, \"timestamp\": \"now\", \"internal\": True}])\n         assert(result[0]['success'])\n         for i in range(4):\n-            addr_g = self.psbt_online.getnewaddress(address_type='bech32')\n+            addr_g = self.psbt_online.getnewaddress(address_type='bech32m')\n             if treefn is not None:\n                 addr_r = self.make_addr(treefn, keys_pay, i)\n                 assert_equal(addr_g, addr_r)"
      }
    ]
  },
  {
    "sha": "87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4N2EwZTdhM2I3YzBmZmQ1NDVlNTM3YmQ0OTdjZGMzZTY3ZDA0NWY2",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-04T21:35:47Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-23T01:57:04Z"
      },
      "message": "Disallow bech32m addresses for legacy wallet things\n\nWe don't want the legacy wallet to ever have bech32m addresses so don't\nallow importing them. This includes addmultisigaddress as that is a\nlegacy wallet only RPC\n\nAdditionally, bech32m multisigs are not available yet, so disallow them\nin createmultisig.",
      "tree": {
        "sha": "0b7a64337d330fcbeefe685b2808fa573f375e71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b7a64337d330fcbeefe685b2808fa573f375e71"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6dbe4d10728f882986ed0d9ed77bc736f051c662",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6dbe4d10728f882986ed0d9ed77bc736f051c662",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6dbe4d10728f882986ed0d9ed77bc736f051c662"
      }
    ],
    "stats": {
      "total": 154,
      "additions": 113,
      "deletions": 41
    },
    "files": [
      {
        "sha": "8ede7b99745ba56ee8b1f111516e8e4de78e0525",
        "filename": "src/outputtype.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/src/outputtype.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/src/outputtype.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.cpp?ref=87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
        "patch": "@@ -108,3 +108,19 @@ CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore,\n     } // no default case, so the compiler can warn about missing cases\n     assert(false);\n }\n+\n+std::optional<OutputType> OutputTypeFromDestination(const CTxDestination& dest) {\n+    if (std::holds_alternative<PKHash>(dest) ||\n+        std::holds_alternative<ScriptHash>(dest)) {\n+        return OutputType::LEGACY;\n+    }\n+    if (std::holds_alternative<WitnessV0KeyHash>(dest) ||\n+        std::holds_alternative<WitnessV0ScriptHash>(dest)) {\n+        return OutputType::BECH32;\n+    }\n+    if (std::holds_alternative<WitnessV1Taproot>(dest) ||\n+        std::holds_alternative<WitnessUnknown>(dest)) {\n+        return OutputType::BECH32M;\n+    }\n+    return std::nullopt;\n+}"
      },
      {
        "sha": "2b83235cd018ee127d4898a34a31abff4d59d67c",
        "filename": "src/outputtype.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/src/outputtype.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/src/outputtype.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.h?ref=87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
        "patch": "@@ -47,4 +47,7 @@ std::vector<CTxDestination> GetAllDestinationsForKey(const CPubKey& key);\n  */\n CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore, const CScript& script, OutputType);\n \n+/** Get the OutputType for a CTxDestination */\n+std::optional<OutputType> OutputTypeFromDestination(const CTxDestination& dest);\n+\n #endif // BITCOIN_OUTPUTTYPE_H"
      },
      {
        "sha": "5178ce60e80bcbc5a13129305abcd37ce81f441b",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
        "patch": "@@ -131,6 +131,9 @@ static RPCHelpMan createmultisig()\n         if (!ParseOutputType(request.params[2].get_str(), output_type)) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[2].get_str()));\n         }\n+        if (output_type == OutputType::BECH32M) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"createmultisig cannot create bech32m multisig addresses\");\n+        }\n     }\n \n     // Construct using pay-to-script-hash:"
      },
      {
        "sha": "d796ed26aac765008e34cdb93b22142ba9b01a23",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
        "patch": "@@ -640,22 +640,6 @@ class DescriptorImpl : public Descriptor\n     std::optional<OutputType> GetOutputType() const override { return std::nullopt; }\n };\n \n-static std::optional<OutputType> OutputTypeFromDestination(const CTxDestination& dest) {\n-    if (std::holds_alternative<PKHash>(dest) ||\n-        std::holds_alternative<ScriptHash>(dest)) {\n-        return OutputType::LEGACY;\n-    }\n-    if (std::holds_alternative<WitnessV0KeyHash>(dest) ||\n-        std::holds_alternative<WitnessV0ScriptHash>(dest)) {\n-        return OutputType::BECH32;\n-    }\n-    if (std::holds_alternative<WitnessV1Taproot>(dest) ||\n-        std::holds_alternative<WitnessUnknown>(dest)) {\n-        return OutputType::BECH32M;\n-    }\n-    return std::nullopt;\n-}\n-\n /** A parsed addr(A) descriptor. */\n class AddressDescriptor final : public DescriptorImpl\n {"
      },
      {
        "sha": "35649ab02ce6102806667727b95f8433b1c8a1aa",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
        "patch": "@@ -286,6 +286,9 @@ RPCHelpMan importaddress()\n             if (fP2SH) {\n                 throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Cannot use the p2sh flag with an address - use a script instead\");\n             }\n+            if (OutputTypeFromDestination(dest) == OutputType::BECH32M) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Bech32m addresses cannot be imported into legacy wallets\");\n+            }\n \n             pwallet->MarkDirty();\n \n@@ -962,6 +965,9 @@ static UniValue ProcessImportLegacy(ImportData& import_data, std::map<CKeyID, CP\n         if (!IsValidDestination(dest)) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address \\\"\" + output + \"\\\"\");\n         }\n+        if (OutputTypeFromDestination(dest) == OutputType::BECH32M) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Bech32m addresses cannot be imported into legacy wallets\");\n+        }\n         script = GetScriptForDestination(dest);\n     } else {\n         if (!IsHex(output)) {\n@@ -1086,6 +1092,9 @@ static UniValue ProcessImportDescriptor(ImportData& import_data, std::map<CKeyID\n     if (!parsed_desc) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n     }\n+    if (parsed_desc->GetOutputType() == OutputType::BECH32M) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Bech32m descriptors cannot be imported into legacy wallets\");\n+    }\n \n     have_solving_data = parsed_desc->IsSolvable();\n     const bool watch_only = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;"
      },
      {
        "sha": "951f575c2f1c5eda7e33dee1e60945e3cf69528a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
        "patch": "@@ -269,6 +269,9 @@ static RPCHelpMan getnewaddress()\n         if (!ParseOutputType(request.params[1].get_str(), output_type)) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[1].get_str()));\n         }\n+        if (output_type == OutputType::BECH32M && pwallet->GetLegacyScriptPubKeyMan()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Legacy wallets cannot provide bech32m addresses\");\n+        }\n     }\n \n     CTxDestination dest;\n@@ -313,6 +316,9 @@ static RPCHelpMan getrawchangeaddress()\n         if (!ParseOutputType(request.params[0].get_str(), output_type)) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[0].get_str()));\n         }\n+        if (output_type == OutputType::BECH32M && pwallet->GetLegacyScriptPubKeyMan()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Legacy wallets cannot provide bech32m addresses\");\n+        }\n     }\n \n     CTxDestination dest;\n@@ -1004,6 +1010,9 @@ static RPCHelpMan addmultisigaddress()\n         if (!ParseOutputType(request.params[3].get_str(), output_type)) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[3].get_str()));\n         }\n+        if (output_type == OutputType::BECH32M) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Bech32m multisig addresses cannot be created with legacy wallets\");\n+        }\n     }\n \n     // Construct using pay-to-script-hash:"
      },
      {
        "sha": "2f7729a901a4574ecd5463e929d4850d7de907b2",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
        "patch": "@@ -26,6 +26,7 @@ bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestinat\n         error = _(\"Error: Legacy wallets only support the \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\" address types\").translated;\n         return false;\n     }\n+    assert(type != OutputType::BECH32M);\n \n     LOCK(cs_KeyStore);\n     error.clear();\n@@ -299,6 +300,7 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     if (LEGACY_OUTPUT_TYPES.count(type) == 0) {\n         return false;\n     }\n+    assert(type != OutputType::BECH32M);\n \n     LOCK(cs_KeyStore);\n     if (!CanGetAddresses(internal)) {\n@@ -1303,6 +1305,7 @@ void LegacyScriptPubKeyMan::AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const\n \n void LegacyScriptPubKeyMan::KeepDestination(int64_t nIndex, const OutputType& type)\n {\n+    assert(type != OutputType::BECH32M);\n     // Remove from key pool\n     WalletBatch batch(m_storage.GetDatabase());\n     batch.ErasePool(nIndex);\n@@ -1336,6 +1339,7 @@ void LegacyScriptPubKeyMan::ReturnDestination(int64_t nIndex, bool fInternal, co\n \n bool LegacyScriptPubKeyMan::GetKeyFromPool(CPubKey& result, const OutputType type, bool internal)\n {\n+    assert(type != OutputType::BECH32M);\n     if (!CanGetAddresses(internal)) {\n         return false;\n     }\n@@ -1404,6 +1408,7 @@ bool LegacyScriptPubKeyMan::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& key\n \n void LegacyScriptPubKeyMan::LearnRelatedScripts(const CPubKey& key, OutputType type)\n {\n+    assert(type != OutputType::BECH32M);\n     if (key.IsCompressed() && (type == OutputType::P2SH_SEGWIT || type == OutputType::BECH32)) {\n         CTxDestination witdest = WitnessV0KeyHash(key.GetID());\n         CScript witprog = GetScriptForDestination(witdest);"
      },
      {
        "sha": "816ec674925f6a95f6b6a34239ea8f9303c41e0d",
        "filename": "test/functional/rpc_createmultisig.py",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/test/functional/rpc_createmultisig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/test/functional/rpc_createmultisig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_createmultisig.py?ref=87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
        "patch": "@@ -97,6 +97,9 @@ def run_test(self):\n             sorted_key_desc = descsum_create('sh(multi(2,{}))'.format(sorted_key_str))\n             assert_equal(self.nodes[0].deriveaddresses(sorted_key_desc)[0], t['address'])\n \n+        # Check that bech32m is currently not allowed\n+        assert_raises_rpc_error(-5, \"createmultisig cannot create bech32m multisig addresses\", self.nodes[0].createmultisig, 2, self.pub, \"bech32m\")\n+\n     def check_addmultisigaddress_errors(self):\n         if self.options.descriptors:\n             return\n@@ -108,6 +111,10 @@ def check_addmultisigaddress_errors(self):\n             self.nodes[0].importaddress(a)\n         assert_raises_rpc_error(-5, 'no full public key for address', lambda: self.nodes[0].addmultisigaddress(nrequired=1, keys=addresses))\n \n+        # Bech32m address type is disallowed for legacy wallets\n+        pubs = [self.nodes[1].getaddressinfo(addr)[\"pubkey\"] for addr in addresses]\n+        assert_raises_rpc_error(-5, \"Bech32m multisig addresses cannot be created with legacy wallets\", self.nodes[0].addmultisigaddress, 2, pubs, \"\", \"bech32m\")\n+\n     def checkbalances(self):\n         node0, node1, node2 = self.nodes\n         node0.generate(COINBASE_MATURITY)"
      },
      {
        "sha": "b05fedcfc761ccd750a5b25d56f66138de978158",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
        "patch": "@@ -373,5 +373,15 @@ def run_test(self):\n         self.test_address(4, self.nodes[4].getrawchangeaddress(), multisig=False, typ='p2sh-segwit')\n         self.test_address(4, self.nodes[4].getrawchangeaddress('bech32'), multisig=False, typ='bech32')\n \n+        if self.options.descriptors:\n+            self.log.info(\"Descriptor wallets do not have bech32m addreses by default yet\")\n+            # TODO: Remove this when they do\n+            assert_raises_rpc_error(-12, \"Error: No bech32m addresses available\", self.nodes[0].getnewaddress, \"\", \"bech32m\")\n+            assert_raises_rpc_error(-12, \"Error: Keypool ran out, please call keypoolrefill first\", self.nodes[0].getrawchangeaddress, \"bech32m\")\n+        else:\n+            self.log.info(\"Legacy wallets cannot make bech32m addresses\")\n+            assert_raises_rpc_error(-8, \"Legacy wallets cannot provide bech32m addresses\", self.nodes[0].getnewaddress, \"\", \"bech32m\")\n+            assert_raises_rpc_error(-8, \"Legacy wallets cannot provide bech32m addresses\", self.nodes[0].getrawchangeaddress, \"bech32m\")\n+\n if __name__ == '__main__':\n     AddressTypeTest().main()"
      },
      {
        "sha": "b5afc3785ee91ea4caba6631527d102572e51c22",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
        "patch": "@@ -420,6 +420,9 @@ def run_test(self):\n             # This will raise an exception for importing an invalid pubkey\n             assert_raises_rpc_error(-5, \"Pubkey is not a valid public key\", self.nodes[0].importpubkey, \"5361746f736869204e616b616d6f746f\")\n \n+            # Bech32m addresses cannot be imported into a legacy wallet\n+            assert_raises_rpc_error(-5, \"Bech32m addresses cannot be imported into legacy wallets\", self.nodes[0].importaddress, \"bcrt1p0xlxvlhemja6c4dqv22uapctqupfhlxm9h8z3k2e72q4k9hcz7vqc8gma6\")\n+\n             # Import address and private key to check correct behavior of spendable unspents\n             # 1. Send some coins to generate new UTXO\n             address_to_import = self.nodes[2].getnewaddress()"
      },
      {
        "sha": "baeac655dfdeb048bb91d174476625de4139dd34",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
        "patch": "@@ -746,6 +746,27 @@ def run_test(self):\n         assert 'hdmasterfingerprint' not in pub_import_info\n         assert 'hdkeypath' not in pub_import_info\n \n+        # Bech32m addresses and descriptors cannot be imported\n+        self.log.info(\"Bech32m addresses and descriptors cannot be imported\")\n+        self.test_importmulti(\n+            {\n+                \"scriptPubKey\": {\"address\": \"bcrt1p0xlxvlhemja6c4dqv22uapctqupfhlxm9h8z3k2e72q4k9hcz7vqc8gma6\"},\n+                \"timestamp\": \"now\",\n+            },\n+            success=False,\n+            error_code=-5,\n+            error_message=\"Bech32m addresses cannot be imported into legacy wallets\",\n+        )\n+        self.test_importmulti(\n+            {\n+                \"desc\": descsum_create(\"tr({})\".format(pub)),\n+                \"timestamp\": \"now\",\n+            },\n+            success=False,\n+            error_code=-5,\n+            error_message=\"Bech32m descriptors cannot be imported into legacy wallets\",\n+        )\n+\n         # Import some public keys to the keypool of a no privkey wallet\n         self.log.info(\"Adding pubkey to keypool of disableprivkey wallet\")\n         self.nodes[1].createwallet(wallet_name=\"noprivkeys\", disable_private_keys=True)"
      },
      {
        "sha": "a571454acf50ad3d8b130cf31d77fd5c3814d22a",
        "filename": "test/functional/wallet_labels.py",
        "status": "modified",
        "additions": 27,
        "deletions": 25,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/test/functional/wallet_labels.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/test/functional/wallet_labels.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_labels.py?ref=87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
        "patch": "@@ -135,31 +135,33 @@ def run_test(self):\n         # in the label. This is a no-op.\n         change_label(node, labels[2].addresses[0], labels[2], labels[2])\n \n-        self.log.info('Check watchonly labels')\n-        node.createwallet(wallet_name='watch_only', disable_private_keys=True)\n-        wallet_watch_only = node.get_wallet_rpc('watch_only')\n-        BECH32_VALID = {\n-            '\u2714\ufe0f_VER15_PROG40': 'bcrt10qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqxkg7fn',\n-            '\u2714\ufe0f_VER16_PROG03': 'bcrt1sqqqqq8uhdgr',\n-            '\u2714\ufe0f_VER16_PROB02': 'bcrt1sqqqq4wstyw',\n-        }\n-        BECH32_INVALID = {\n-            '\u274c_VER15_PROG41': 'bcrt1sqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqajlxj8',\n-            '\u274c_VER16_PROB01': 'bcrt1sqq5r4036',\n-        }\n-        for l in BECH32_VALID:\n-            ad = BECH32_VALID[l]\n-            wallet_watch_only.importaddress(label=l, rescan=False, address=ad)\n-            node.generatetoaddress(1, ad)\n-            assert_equal(wallet_watch_only.getaddressesbylabel(label=l), {ad: {'purpose': 'receive'}})\n-            assert_equal(wallet_watch_only.getreceivedbylabel(label=l), 0)\n-        for l in BECH32_INVALID:\n-            ad = BECH32_INVALID[l]\n-            assert_raises_rpc_error(\n-                -5,\n-                \"Address is not valid\" if self.options.descriptors else \"Invalid Bitcoin address or script\",\n-                lambda: wallet_watch_only.importaddress(label=l, rescan=False, address=ad),\n-            )\n+        if self.options.descriptors:\n+            # This is a descriptor wallet test because of segwit v1+ addresses\n+            self.log.info('Check watchonly labels')\n+            node.createwallet(wallet_name='watch_only', disable_private_keys=True)\n+            wallet_watch_only = node.get_wallet_rpc('watch_only')\n+            BECH32_VALID = {\n+                '\u2714\ufe0f_VER15_PROG40': 'bcrt10qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqxkg7fn',\n+                '\u2714\ufe0f_VER16_PROG03': 'bcrt1sqqqqq8uhdgr',\n+                '\u2714\ufe0f_VER16_PROB02': 'bcrt1sqqqq4wstyw',\n+            }\n+            BECH32_INVALID = {\n+                '\u274c_VER15_PROG41': 'bcrt1sqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqajlxj8',\n+                '\u274c_VER16_PROB01': 'bcrt1sqq5r4036',\n+            }\n+            for l in BECH32_VALID:\n+                ad = BECH32_VALID[l]\n+                wallet_watch_only.importaddress(label=l, rescan=False, address=ad)\n+                node.generatetoaddress(1, ad)\n+                assert_equal(wallet_watch_only.getaddressesbylabel(label=l), {ad: {'purpose': 'receive'}})\n+                assert_equal(wallet_watch_only.getreceivedbylabel(label=l), 0)\n+            for l in BECH32_INVALID:\n+                ad = BECH32_INVALID[l]\n+                assert_raises_rpc_error(\n+                    -5,\n+                    \"Address is not valid\" if self.options.descriptors else \"Invalid Bitcoin address or script\",\n+                    lambda: wallet_watch_only.importaddress(label=l, rescan=False, address=ad),\n+                )\n \n \n class Label:"
      }
    ]
  },
  {
    "sha": "754f134a50cc56cdf0baf996d909c992770fcc97",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTRmMTM0YTUwY2M1NmNkZjBiYWY5OTZkOTA5Yzk5Mjc3MGZjYzk3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-13T01:36:05Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-23T01:57:04Z"
      },
      "message": "wallet: Add error message to GetReservedDestination\n\nAdds an error output parameter to all GetReservedDestination functions\nso that callers can get the actual reason that a change address could\nnot be fetched. This more closely matches GetNewDestination. This allows\nfor more granular error messages, such as one that indicates that\nbech32m addresses cannot be generated yet.",
      "tree": {
        "sha": "6254beb3d43175e1383014a1f80daa10c60b42cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6254beb3d43175e1383014a1f80daa10c60b42cc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/754f134a50cc56cdf0baf996d909c992770fcc97",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/754f134a50cc56cdf0baf996d909c992770fcc97",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/754f134a50cc56cdf0baf996d909c992770fcc97",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/754f134a50cc56cdf0baf996d909c992770fcc97/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 21,
      "deletions": 18
    },
    "files": [
      {
        "sha": "44c3912544b2c70291099102ca19ef7cd8fb21ec",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/754f134a50cc56cdf0baf996d909c992770fcc97/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/754f134a50cc56cdf0baf996d909c992770fcc97/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=754f134a50cc56cdf0baf996d909c992770fcc97",
        "patch": "@@ -295,19 +295,22 @@ bool LegacyScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBat\n     return true;\n }\n \n-bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool, std::string& error)\n {\n     if (LEGACY_OUTPUT_TYPES.count(type) == 0) {\n+        error = _(\"Error: Legacy wallets only support the \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\" address types\").translated;\n         return false;\n     }\n     assert(type != OutputType::BECH32M);\n \n     LOCK(cs_KeyStore);\n     if (!CanGetAddresses(internal)) {\n+        error = _(\"Error: Keypool ran out, please call keypoolrefill first\").translated;\n         return false;\n     }\n \n     if (!ReserveKeyFromKeyPool(index, keypool, internal)) {\n+        error = _(\"Error: Keypool ran out, please call keypoolrefill first\").translated;\n         return false;\n     }\n     address = GetDestinationForKey(keypool.vchPubKey, type);\n@@ -1720,10 +1723,9 @@ bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, Walle\n     return true;\n }\n \n-bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool, std::string& error)\n {\n     LOCK(cs_desc_man);\n-    std::string error;\n     bool result = GetNewDestination(type, address, error);\n     index = m_wallet_descriptor.next_index - 1;\n     return result;"
      },
      {
        "sha": "b2ca354b0a24066c192842c386aa53e4462dca22",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/754f134a50cc56cdf0baf996d909c992770fcc97/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/754f134a50cc56cdf0baf996d909c992770fcc97/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=754f134a50cc56cdf0baf996d909c992770fcc97",
        "patch": "@@ -181,7 +181,7 @@ class ScriptPubKeyMan\n     virtual bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) { return false; }\n     virtual bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch) { return false; }\n \n-    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool, std::string& error) { return false; }\n     virtual void KeepDestination(int64_t index, const OutputType& type) {}\n     virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n \n@@ -364,7 +364,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) override;\n     bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch) override;\n \n-    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) override;\n+    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool, std::string& error) override;\n     void KeepDestination(int64_t index, const OutputType& type) override;\n     void ReturnDestination(int64_t index, bool internal, const CTxDestination&) override;\n \n@@ -573,7 +573,7 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) override;\n     bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch) override;\n \n-    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) override;\n+    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool, std::string& error) override;\n     void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) override;\n \n     // Tops up the descriptor cache and m_map_script_pub_keys. The cache is stored in the wallet file"
      },
      {
        "sha": "6a8df437ae8efcac2f20ee4b512772f9df761aab",
        "filename": "src/wallet/spend.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/754f134a50cc56cdf0baf996d909c992770fcc97/src/wallet/spend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/754f134a50cc56cdf0baf996d909c992770fcc97/src/wallet/spend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.cpp?ref=754f134a50cc56cdf0baf996d909c992770fcc97",
        "patch": "@@ -618,8 +618,9 @@ bool CWallet::CreateTransactionInternal(\n         // Reserve a new key pair from key pool. If it fails, provide a dummy\n         // destination in case we don't need change.\n         CTxDestination dest;\n-        if (!reservedest.GetReservedDestination(dest, true)) {\n-            error = _(\"Transaction needs a change address, but we can't generate it. Please call keypoolrefill first.\");\n+        std::string dest_err;\n+        if (!reservedest.GetReservedDestination(dest, true, dest_err)) {\n+            error = strprintf(_(\"Transaction needs a change address, but we can't generate it. %s\"), dest_err);\n         }\n         scriptChange = GetScriptForDestination(dest);\n         // A valid destination implies a change script (and"
      },
      {
        "sha": "c2586b60b8167f3660b72e6049a1ea15b9c0cb63",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/754f134a50cc56cdf0baf996d909c992770fcc97/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/754f134a50cc56cdf0baf996d909c992770fcc97/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=754f134a50cc56cdf0baf996d909c992770fcc97",
        "patch": "@@ -2118,7 +2118,7 @@ bool CWallet::GetNewDestination(const OutputType type, const std::string label,\n         spk_man->TopUp();\n         result = spk_man->GetNewDestination(type, dest, error);\n     } else {\n-        error = strprintf(\"Error: No %s addresses available.\", FormatOutputType(type));\n+        error = strprintf(_(\"Error: No %s addresses available.\"), FormatOutputType(type)).translated;\n     }\n     if (result) {\n         SetAddressBook(dest, label, \"receive\");\n@@ -2133,8 +2133,7 @@ bool CWallet::GetNewChangeDestination(const OutputType type, CTxDestination& des\n     error.clear();\n \n     ReserveDestination reservedest(this, type);\n-    if (!reservedest.GetReservedDestination(dest, true)) {\n-        error = _(\"Error: Keypool ran out, please call keypoolrefill first\").translated;\n+    if (!reservedest.GetReservedDestination(dest, true, error)) {\n         return false;\n     }\n \n@@ -2181,10 +2180,11 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n     return result;\n }\n \n-bool ReserveDestination::GetReservedDestination(CTxDestination& dest, bool internal)\n+bool ReserveDestination::GetReservedDestination(CTxDestination& dest, bool internal, std::string& error)\n {\n     m_spk_man = pwallet->GetScriptPubKeyMan(type, internal);\n     if (!m_spk_man) {\n+        error = strprintf(_(\"Error: No %s addresses available.\"), FormatOutputType(type)).translated;\n         return false;\n     }\n \n@@ -2194,7 +2194,7 @@ bool ReserveDestination::GetReservedDestination(CTxDestination& dest, bool inter\n         m_spk_man->TopUp();\n \n         CKeyPool keypool;\n-        if (!m_spk_man->GetReservedDestination(type, internal, address, nIndex, keypool)) {\n+        if (!m_spk_man->GetReservedDestination(type, internal, address, nIndex, keypool, error)) {\n             return false;\n         }\n         fInternal = keypool.fInternal;"
      },
      {
        "sha": "b63938c5f1b5e77f562adf715f507b45b8f98f3b",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/754f134a50cc56cdf0baf996d909c992770fcc97/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/754f134a50cc56cdf0baf996d909c992770fcc97/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=754f134a50cc56cdf0baf996d909c992770fcc97",
        "patch": "@@ -181,7 +181,7 @@ class ReserveDestination\n     }\n \n     //! Reserve an address\n-    bool GetReservedDestination(CTxDestination& pubkey, bool internal);\n+    bool GetReservedDestination(CTxDestination& pubkey, bool internal, std::string& error);\n     //! Return reserved address\n     void ReturnDestination();\n     //! Keep the address. Do not return it's key to the keypool when this object goes out of scope"
      },
      {
        "sha": "fa98c441521db5d148d8c765ad28939f3c405b03",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/754f134a50cc56cdf0baf996d909c992770fcc97/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/754f134a50cc56cdf0baf996d909c992770fcc97/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=754f134a50cc56cdf0baf996d909c992770fcc97",
        "patch": "@@ -551,7 +551,7 @@ def test_locked_wallet(self):\n         # creating the key must be impossible because the wallet is locked\n         outputs = {self.nodes[0].getnewaddress():1.1}\n         rawtx = self.nodes[1].createrawtransaction(inputs, outputs)\n-        assert_raises_rpc_error(-4, \"Transaction needs a change address, but we can't generate it. Please call keypoolrefill first.\", self.nodes[1].fundrawtransaction, rawtx)\n+        assert_raises_rpc_error(-4, \"Transaction needs a change address, but we can't generate it.\", self.nodes[1].fundrawtransaction, rawtx)\n \n         # Refill the keypool.\n         self.nodes[1].walletpassphrase(\"test\", 100)"
      },
      {
        "sha": "9b97d08424d54736df25e7c7ab3f4ad7beb93b44",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/754f134a50cc56cdf0baf996d909c992770fcc97/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/754f134a50cc56cdf0baf996d909c992770fcc97/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=754f134a50cc56cdf0baf996d909c992770fcc97",
        "patch": "@@ -374,10 +374,10 @@ def run_test(self):\n         self.test_address(4, self.nodes[4].getrawchangeaddress('bech32'), multisig=False, typ='bech32')\n \n         if self.options.descriptors:\n-            self.log.info(\"Descriptor wallets do not have bech32m addreses by default yet\")\n+            self.log.info(\"Descriptor wallets do not have bech32m addresses by default yet\")\n             # TODO: Remove this when they do\n             assert_raises_rpc_error(-12, \"Error: No bech32m addresses available\", self.nodes[0].getnewaddress, \"\", \"bech32m\")\n-            assert_raises_rpc_error(-12, \"Error: Keypool ran out, please call keypoolrefill first\", self.nodes[0].getrawchangeaddress, \"bech32m\")\n+            assert_raises_rpc_error(-12, \"Error: No bech32m addresses available\", self.nodes[0].getrawchangeaddress, \"bech32m\")\n         else:\n             self.log.info(\"Legacy wallets cannot make bech32m addresses\")\n             assert_raises_rpc_error(-8, \"Legacy wallets cannot provide bech32m addresses\", self.nodes[0].getnewaddress, \"\", \"bech32m\")"
      },
      {
        "sha": "28bfc9116f6abc03d0040b07031b5c2f71ab69eb",
        "filename": "test/functional/wallet_keypool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/754f134a50cc56cdf0baf996d909c992770fcc97/test/functional/wallet_keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/754f134a50cc56cdf0baf996d909c992770fcc97/test/functional/wallet_keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool.py?ref=754f134a50cc56cdf0baf996d909c992770fcc97",
        "patch": "@@ -161,7 +161,7 @@ def run_test(self):\n \n         # Using a fee rate (10 sat / byte) well above the minimum relay rate\n         # creating a 5,000 sat transaction with change should not be possible\n-        assert_raises_rpc_error(-4, \"Transaction needs a change address, but we can't generate it. Please call keypoolrefill first.\", w2.walletcreatefundedpsbt, inputs=[], outputs=[{addr.pop(): 0.00005000}], options={\"subtractFeeFromOutputs\": [0], \"feeRate\": 0.00010})\n+        assert_raises_rpc_error(-4, \"Transaction needs a change address, but we can't generate it.\", w2.walletcreatefundedpsbt, inputs=[], outputs=[{addr.pop(): 0.00005000}], options={\"subtractFeeFromOutputs\": [0], \"feeRate\": 0.00010})\n \n         # creating a 10,000 sat transaction without change, with a manual input, should still be possible\n         res = w2.walletcreatefundedpsbt(inputs=w2.listunspent(), outputs=[{destination: 0.00010000}], options={\"subtractFeeFromOutputs\": [0], \"feeRate\": 0.00010})"
      }
    ]
  }
]