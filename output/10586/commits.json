[
  {
    "sha": "349f283733770978b46c06f46ed45d44a49747ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDlmMjgzNzMzNzcwOTc4YjQ2YzA2ZjQ2ZWQ0NWQ0NGE0OTc0N2Nh",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-13T14:41:14Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-18T11:49:47Z"
      },
      "message": "remove default argument from GetMinimumFee",
      "tree": {
        "sha": "58c4572de599cc778b6336735fd3acb0d98e5a81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/58c4572de599cc778b6336735fd3acb0d98e5a81"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/349f283733770978b46c06f46ed45d44a49747ca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/349f283733770978b46c06f46ed45d44a49747ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/349f283733770978b46c06f46ed45d44a49747ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/349f283733770978b46c06f46ed45d44a49747ca/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cafe24f039e117d53288387c2720f44f27deecd0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cafe24f039e117d53288387c2720f44f27deecd0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cafe24f039e117d53288387c2720f44f27deecd0"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7b85df17bbca63625ee62db7d34fc8fafaefaad4",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/349f283733770978b46c06f46ed45d44a49747ca/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/349f283733770978b46c06f46ed45d44a49747ca/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=349f283733770978b46c06f46ed45d44a49747ca",
        "patch": "@@ -510,7 +510,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n                 nBytes -= 34;\n \n         // Fee\n-        nPayFee = CWallet::GetMinimumFee(nBytes, coinControl->nConfirmTarget, ::mempool, ::feeEstimator);\n+        nPayFee = CWallet::GetMinimumFee(nBytes, coinControl->nConfirmTarget, ::mempool, ::feeEstimator, nullptr /* FeeCalculation */, false /* ignoreGlobalPayTxFee */);\n \n         if (nPayAmount > 0)\n         {"
      },
      {
        "sha": "112629bf9b599d3d601e79055afa405f68cc27ee",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/349f283733770978b46c06f46ed45d44a49747ca/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/349f283733770978b46c06f46ed45d44a49747ca/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=349f283733770978b46c06f46ed45d44a49747ca",
        "patch": "@@ -2722,7 +2722,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 if (coinControl && coinControl->nConfirmTarget > 0)\n                     currentConfirmationTarget = coinControl->nConfirmTarget;\n \n-                CAmount nFeeNeeded = GetMinimumFee(nBytes, currentConfirmationTarget, ::mempool, ::feeEstimator, &feeCalc);\n+                CAmount nFeeNeeded = GetMinimumFee(nBytes, currentConfirmationTarget, ::mempool, ::feeEstimator, &feeCalc, false /* ignoreGlobalPayTxFee */);\n                 if (coinControl && coinControl->fOverrideFeeRate)\n                     nFeeNeeded = coinControl->nFeeRate.GetFee(nBytes);\n "
      },
      {
        "sha": "52a0b95007013c7be155e298e1d18fda17691681",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/349f283733770978b46c06f46ed45d44a49747ca/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/349f283733770978b46c06f46ed45d44a49747ca/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=349f283733770978b46c06f46ed45d44a49747ca",
        "patch": "@@ -960,7 +960,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * Estimate the minimum fee considering user set parameters\n      * and the required fee\n      */\n-    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc = nullptr, bool ignoreGlobalPayTxFee = false);\n+    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc, bool ignoreGlobalPayTxFee);\n     /**\n      * Return the minimum required fee taking into account the\n      * floating relay fee and user set minimum transaction fee"
      }
    ]
  },
  {
    "sha": "bb014427ff62a696c48aee8dc27113d5b9cab40d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjAxNDQyN2ZmNjJhNjk2YzQ4YWVlOGRjMjcxMTNkNWI5Y2FiNDBk",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-13T15:28:30Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-18T12:05:13Z"
      },
      "message": "Introduce a fee estimate mode.\n\nGetMinimumFee now passes the conservative argument into estimateSmartFee.\nCall CalculateEstimateType(mode) before calling GetMinimumFee or estimateSmartFee to determine the value of this argument.\nCCoinControl can now be used to control this mode.",
      "tree": {
        "sha": "f46d2ce9185294e7898b8f6f44addc6a3c1c74d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f46d2ce9185294e7898b8f6f44addc6a3c1c74d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb014427ff62a696c48aee8dc27113d5b9cab40d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb014427ff62a696c48aee8dc27113d5b9cab40d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb014427ff62a696c48aee8dc27113d5b9cab40d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb014427ff62a696c48aee8dc27113d5b9cab40d/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "349f283733770978b46c06f46ed45d44a49747ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/349f283733770978b46c06f46ed45d44a49747ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/349f283733770978b46c06f46ed45d44a49747ca"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 39,
      "deletions": 8
    },
    "files": [
      {
        "sha": "ae1bfaa2be84ddfa223fabedffc73c4976e4a464",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb014427ff62a696c48aee8dc27113d5b9cab40d/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb014427ff62a696c48aee8dc27113d5b9cab40d/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=bb014427ff62a696c48aee8dc27113d5b9cab40d",
        "patch": "@@ -490,6 +490,8 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         else nBytesInputs += 148;\n     }\n \n+    bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET);\n+\n     // calculation\n     if (nQuantity > 0)\n     {\n@@ -510,7 +512,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n                 nBytes -= 34;\n \n         // Fee\n-        nPayFee = CWallet::GetMinimumFee(nBytes, coinControl->nConfirmTarget, ::mempool, ::feeEstimator, nullptr /* FeeCalculation */, false /* ignoreGlobalPayTxFee */);\n+        nPayFee = CWallet::GetMinimumFee(nBytes, coinControl->nConfirmTarget, ::mempool, ::feeEstimator, nullptr /* FeeCalculation */, false /* ignoreGlobalPayTxFee */, conservative_estimate);\n \n         if (nPayAmount > 0)\n         {\n@@ -588,7 +590,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     if (payTxFee.GetFeePerK() > 0)\n         dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), payTxFee.GetFeePerK()) / 1000;\n     else {\n-        dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), ::feeEstimator.estimateSmartFee(coinControl->nConfirmTarget, NULL, ::mempool).GetFeePerK()) / 1000;\n+        dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), ::feeEstimator.estimateSmartFee(coinControl->nConfirmTarget, NULL, ::mempool, conservative_estimate).GetFeePerK()) / 1000;\n     }\n     QString toolTip4 = tr(\"Can vary +/- %1 satoshi(s) per input.\").arg(dFeeVary);\n "
      },
      {
        "sha": "d9439fe248c41dcce600211a88bb7bc74e629d76",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb014427ff62a696c48aee8dc27113d5b9cab40d/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb014427ff62a696c48aee8dc27113d5b9cab40d/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=bb014427ff62a696c48aee8dc27113d5b9cab40d",
        "patch": "@@ -652,7 +652,8 @@ void SendCoinsDialog::updateSmartFeeLabel()\n \n     int nBlocksToConfirm = ui->sliderSmartFee->maximum() - ui->sliderSmartFee->value() + 2;\n     FeeCalculation feeCalc;\n-    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocksToConfirm, &feeCalc, ::mempool);\n+    bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET);\n+    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocksToConfirm, &feeCalc, ::mempool, conservative_estimate);\n     if (feeRate <= CFeeRate(0)) // not enough data => minfee\n     {\n         ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(),"
      },
      {
        "sha": "e64562ba50fd535cfcbb563889eaf025605f68ac",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb014427ff62a696c48aee8dc27113d5b9cab40d/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb014427ff62a696c48aee8dc27113d5b9cab40d/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=bb014427ff62a696c48aee8dc27113d5b9cab40d",
        "patch": "@@ -26,6 +26,8 @@ class CCoinControl\n     int nConfirmTarget;\n     //! Signal BIP-125 replace by fee.\n     bool signalRbf;\n+    //! Fee estimation mode to control arguments to estimateSmartFee\n+    FeeEstimateMode m_fee_mode;\n \n     CCoinControl()\n     {\n@@ -42,6 +44,7 @@ class CCoinControl\n         fOverrideFeeRate = false;\n         nConfirmTarget = 0;\n         signalRbf = fWalletRbf;\n+        m_fee_mode = FeeEstimateMode::UNSET;\n     }\n \n     bool HasSelected() const"
      },
      {
        "sha": "a36f6798f0f48b97e75fc7855f0c288572dcb7f0",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb014427ff62a696c48aee8dc27113d5b9cab40d/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb014427ff62a696c48aee8dc27113d5b9cab40d/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=bb014427ff62a696c48aee8dc27113d5b9cab40d",
        "patch": "@@ -165,7 +165,8 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConf\n         nNewFee = totalFee;\n         nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n     } else {\n-        nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, ::feeEstimator, nullptr, ignoreGlobalPayTxFee);\n+        bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET);\n+        nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, ::feeEstimator, nullptr /* FeeCalculation */, ignoreGlobalPayTxFee, conservative_estimate);\n         nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);\n \n         // New fee rate must be at least old rate + minimum incremental relay rate"
      },
      {
        "sha": "024d03d0686e43e37a521be77d678ae05572b1b1",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 3,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb014427ff62a696c48aee8dc27113d5b9cab40d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb014427ff62a696c48aee8dc27113d5b9cab40d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bb014427ff62a696c48aee8dc27113d5b9cab40d",
        "patch": "@@ -2722,7 +2722,10 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 if (coinControl && coinControl->nConfirmTarget > 0)\n                     currentConfirmationTarget = coinControl->nConfirmTarget;\n \n-                CAmount nFeeNeeded = GetMinimumFee(nBytes, currentConfirmationTarget, ::mempool, ::feeEstimator, &feeCalc, false /* ignoreGlobalPayTxFee */);\n+                // Allow to override the default fee estimate mode over the CoinControl instance\n+                bool conservative_estimate = CalculateEstimateType(coinControl ? coinControl->m_fee_mode : FeeEstimateMode::UNSET);\n+\n+                CAmount nFeeNeeded = GetMinimumFee(nBytes, currentConfirmationTarget, ::mempool, ::feeEstimator, &feeCalc, false /* ignoreGlobalPayTxFee */, conservative_estimate);\n                 if (coinControl && coinControl->fOverrideFeeRate)\n                     nFeeNeeded = coinControl->nFeeRate.GetFee(nBytes);\n \n@@ -2903,13 +2906,13 @@ CAmount CWallet::GetRequiredFee(unsigned int nTxBytes)\n     return std::max(minTxFee.GetFee(nTxBytes), ::minRelayTxFee.GetFee(nTxBytes));\n }\n \n-CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc, bool ignoreGlobalPayTxFee)\n+CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc, bool ignoreGlobalPayTxFee, bool conservative_estimate)\n {\n     // payTxFee is the user-set global for desired feerate\n     CAmount nFeeNeeded = payTxFee.GetFee(nTxBytes);\n     // User didn't set: use -txconfirmtarget to estimate...\n     if (nFeeNeeded == 0 || ignoreGlobalPayTxFee) {\n-        nFeeNeeded = estimator.estimateSmartFee(nConfirmTarget, feeCalc, pool, true).GetFee(nTxBytes);\n+        nFeeNeeded = estimator.estimateSmartFee(nConfirmTarget, feeCalc, pool, conservative_estimate).GetFee(nTxBytes);\n         // ... unless we don't have enough mempool data for estimatefee, then use fallbackFee\n         if (nFeeNeeded == 0) {\n             nFeeNeeded = fallbackFee.GetFee(nTxBytes);\n@@ -4145,3 +4148,14 @@ bool CMerkleTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState&\n {\n     return ::AcceptToMemoryPool(mempool, state, tx, true, NULL, NULL, false, nAbsurdFee);\n }\n+\n+bool CalculateEstimateType(FeeEstimateMode mode) {\n+    switch (mode) {\n+    case FeeEstimateMode::UNSET:\n+    case FeeEstimateMode::CONSERVATIVE:\n+        return true;\n+    case FeeEstimateMode::ECONOMICAL:\n+        return false;\n+    }\n+    return true;\n+}"
      },
      {
        "sha": "1c27457b662f1468fcf0f3d0eac6aab5b9727bd8",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb014427ff62a696c48aee8dc27113d5b9cab40d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb014427ff62a696c48aee8dc27113d5b9cab40d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=bb014427ff62a696c48aee8dc27113d5b9cab40d",
        "patch": "@@ -960,7 +960,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * Estimate the minimum fee considering user set parameters\n      * and the required fee\n      */\n-    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc, bool ignoreGlobalPayTxFee);\n+    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc, bool ignoreGlobalPayTxFee, bool conservative_estimate);\n     /**\n      * Return the minimum required fee taking into account the\n      * floating relay fee and user set minimum transaction fee\n@@ -1208,4 +1208,14 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const ContainerType &coins\n     }\n     return true;\n }\n+\n+/* Used to determine type of fee estimation requested */\n+enum class FeeEstimateMode {\n+    UNSET,        //! Use default settings based on other criteria\n+    ECONOMICAL,   //! Force estimateSmartFee to use non-conservative estimates\n+    CONSERVATIVE, //! Force estimateSmartFee to use conservative estimates\n+ };\n+\n+bool CalculateEstimateType(FeeEstimateMode mode);\n+\n #endif // BITCOIN_WALLET_WALLET_H"
      }
    ]
  },
  {
    "sha": "c54a9acd0f1b83bb4b4f662d1a873755f6fe434f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTRhOWFjZDBmMWI4M2JiNGI0ZjY2MmQxYTg3Mzc1NWY2ZmU0MzRm",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-13T17:44:52Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-18T12:06:16Z"
      },
      "message": "remove default argument from estimateSmartFee",
      "tree": {
        "sha": "41b90f168b7d432307b9f023b2a839cbe288cd6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41b90f168b7d432307b9f023b2a839cbe288cd6d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c54a9acd0f1b83bb4b4f662d1a873755f6fe434f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c54a9acd0f1b83bb4b4f662d1a873755f6fe434f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c54a9acd0f1b83bb4b4f662d1a873755f6fe434f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c54a9acd0f1b83bb4b4f662d1a873755f6fe434f/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb014427ff62a696c48aee8dc27113d5b9cab40d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb014427ff62a696c48aee8dc27113d5b9cab40d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb014427ff62a696c48aee8dc27113d5b9cab40d"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "468a5983a43a17e6b4d7b6c44dbf3ec3145bd77e",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c54a9acd0f1b83bb4b4f662d1a873755f6fe434f/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c54a9acd0f1b83bb4b4f662d1a873755f6fe434f/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=c54a9acd0f1b83bb4b4f662d1a873755f6fe434f",
        "patch": "@@ -197,7 +197,7 @@ class CBlockPolicyEstimator\n      *  the closest target where one can be given.  'conservative' estimates are\n      *  valid over longer time horizons also.\n      */\n-    CFeeRate estimateSmartFee(int confTarget, FeeCalculation *feeCalc, const CTxMemPool& pool, bool conservative = true) const;\n+    CFeeRate estimateSmartFee(int confTarget, FeeCalculation *feeCalc, const CTxMemPool& pool, bool conservative) const;\n \n     /** Return a specific fee estimate calculation with a given success\n      * threshold and time horizon, and optionally return detailed data about"
      },
      {
        "sha": "8cdd392109633bff26cfb35f66d5f09bc8e8b0e9",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c54a9acd0f1b83bb4b4f662d1a873755f6fe434f/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c54a9acd0f1b83bb4b4f662d1a873755f6fe434f/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=c54a9acd0f1b83bb4b4f662d1a873755f6fe434f",
        "patch": "@@ -184,8 +184,8 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     mpool.TrimToSize(1);\n     BOOST_CHECK(mpool.GetMinFee(1).GetFeePerK() > feeV[5]);\n     for (int i = 1; i < 10; i++) {\n-        BOOST_CHECK(feeEst.estimateSmartFee(i, NULL, mpool).GetFeePerK() >= feeEst.estimateRawFee(i, 0.85, FeeEstimateHorizon::MED_HALFLIFE).GetFeePerK());\n-        BOOST_CHECK(feeEst.estimateSmartFee(i, NULL, mpool).GetFeePerK() >= mpool.GetMinFee(1).GetFeePerK());\n+        BOOST_CHECK(feeEst.estimateSmartFee(i, NULL, mpool, true).GetFeePerK() >= feeEst.estimateRawFee(i, 0.85, FeeEstimateHorizon::MED_HALFLIFE).GetFeePerK());\n+        BOOST_CHECK(feeEst.estimateSmartFee(i, NULL, mpool, true).GetFeePerK() >= mpool.GetMinFee(1).GetFeePerK());\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "2c0d5464e2ebfd899354f445e508b4e2f591d183",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYzBkNTQ2NGUyZWJmZDg5OTM1NGY0NDVlNTA4YjRlMmY1OTFkMTgz",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-13T18:02:55Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-18T12:12:33Z"
      },
      "message": "Change default fee estimation mode.\n\nFee estimates will default to be non-conservative if the transaction in question is opt-in-RBF.",
      "tree": {
        "sha": "154d793cbdc464c94808ab8278cb1fb4cb42de11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/154d793cbdc464c94808ab8278cb1fb4cb42de11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c0d5464e2ebfd899354f445e508b4e2f591d183",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c0d5464e2ebfd899354f445e508b4e2f591d183",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2c0d5464e2ebfd899354f445e508b4e2f591d183",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c0d5464e2ebfd899354f445e508b4e2f591d183/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c54a9acd0f1b83bb4b4f662d1a873755f6fe434f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c54a9acd0f1b83bb4b4f662d1a873755f6fe434f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c54a9acd0f1b83bb4b4f662d1a873755f6fe434f"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 10,
      "deletions": 6
    },
    "files": [
      {
        "sha": "e2b767a0666d9eeea0c9f44b63ee6c88965eb8ef",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c0d5464e2ebfd899354f445e508b4e2f591d183/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c0d5464e2ebfd899354f445e508b4e2f591d183/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=2c0d5464e2ebfd899354f445e508b4e2f591d183",
        "patch": "@@ -490,7 +490,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         else nBytesInputs += 148;\n     }\n \n-    bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET);\n+    bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET, coinControl->signalRbf);\n \n     // calculation\n     if (nQuantity > 0)"
      },
      {
        "sha": "27634eb179ba0b9fe2d86fb389128da62d5fa568",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c0d5464e2ebfd899354f445e508b4e2f591d183/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c0d5464e2ebfd899354f445e508b4e2f591d183/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=2c0d5464e2ebfd899354f445e508b4e2f591d183",
        "patch": "@@ -166,6 +166,8 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n         connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(updateFeeSectionControls()));\n         connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(updateGlobalFeeVariables()));\n         connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(coinControlUpdateLabels()));\n+        connect(ui->optInRBF, SIGNAL(stateChanged(int)), this, SLOT(updateSmartFeeLabel()));\n+        connect(ui->optInRBF, SIGNAL(stateChanged(int)), this, SLOT(coinControlUpdateLabels()));\n         ui->customFee->setSingleStep(CWallet::GetRequiredFee(1000));\n         updateFeeSectionControls();\n         updateMinFeeLabel();\n@@ -652,7 +654,7 @@ void SendCoinsDialog::updateSmartFeeLabel()\n \n     int nBlocksToConfirm = ui->sliderSmartFee->maximum() - ui->sliderSmartFee->value() + 2;\n     FeeCalculation feeCalc;\n-    bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET);\n+    bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET, ui->optInRBF->isChecked());\n     CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocksToConfirm, &feeCalc, ::mempool, conservative_estimate);\n     if (feeRate <= CFeeRate(0)) // not enough data => minfee\n     {\n@@ -828,6 +830,7 @@ void SendCoinsDialog::coinControlUpdateLabels()\n     } else {\n         CoinControlDialog::coinControl->nConfirmTarget = model->getDefaultConfirmTarget();\n     }\n+    CoinControlDialog::coinControl->signalRbf = ui->optInRBF->isChecked();\n \n     for(int i = 0; i < ui->entries->count(); ++i)\n     {"
      },
      {
        "sha": "a25530d8bdbc99b3f6f945a4d791d7c904fb64c1",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c0d5464e2ebfd899354f445e508b4e2f591d183/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c0d5464e2ebfd899354f445e508b4e2f591d183/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=2c0d5464e2ebfd899354f445e508b4e2f591d183",
        "patch": "@@ -165,7 +165,7 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConf\n         nNewFee = totalFee;\n         nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n     } else {\n-        bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET);\n+        bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET, newTxReplaceable);\n         nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, ::feeEstimator, nullptr /* FeeCalculation */, ignoreGlobalPayTxFee, conservative_estimate);\n         nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);\n "
      },
      {
        "sha": "bd04fcd19a90b3c6222ffaa9dd7909621dc8b9fb",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c0d5464e2ebfd899354f445e508b4e2f591d183/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c0d5464e2ebfd899354f445e508b4e2f591d183/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2c0d5464e2ebfd899354f445e508b4e2f591d183",
        "patch": "@@ -2723,7 +2723,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                     currentConfirmationTarget = coinControl->nConfirmTarget;\n \n                 // Allow to override the default fee estimate mode over the CoinControl instance\n-                bool conservative_estimate = CalculateEstimateType(coinControl ? coinControl->m_fee_mode : FeeEstimateMode::UNSET);\n+                bool conservative_estimate = CalculateEstimateType(coinControl ? coinControl->m_fee_mode : FeeEstimateMode::UNSET, rbf);\n \n                 CAmount nFeeNeeded = GetMinimumFee(nBytes, currentConfirmationTarget, ::mempool, ::feeEstimator, &feeCalc, false /* ignoreGlobalPayTxFee */, conservative_estimate);\n                 if (coinControl && coinControl->fOverrideFeeRate)\n@@ -4149,9 +4149,10 @@ bool CMerkleTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState&\n     return ::AcceptToMemoryPool(mempool, state, tx, true, NULL, NULL, false, nAbsurdFee);\n }\n \n-bool CalculateEstimateType(FeeEstimateMode mode) {\n+bool CalculateEstimateType(FeeEstimateMode mode, bool opt_in_rbf) {\n     switch (mode) {\n     case FeeEstimateMode::UNSET:\n+        return !opt_in_rbf; // Allow for lower fees if RBF is an option\n     case FeeEstimateMode::CONSERVATIVE:\n         return true;\n     case FeeEstimateMode::ECONOMICAL:"
      },
      {
        "sha": "018262117e9ad52bcb0332f91503d22653db69f3",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c0d5464e2ebfd899354f445e508b4e2f591d183/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c0d5464e2ebfd899354f445e508b4e2f591d183/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=2c0d5464e2ebfd899354f445e508b4e2f591d183",
        "patch": "@@ -1216,6 +1216,6 @@ enum class FeeEstimateMode {\n     CONSERVATIVE, //! Force estimateSmartFee to use conservative estimates\n  };\n \n-bool CalculateEstimateType(FeeEstimateMode mode);\n+bool CalculateEstimateType(FeeEstimateMode mode, bool opt_in_rbf);\n \n #endif // BITCOIN_WALLET_WALLET_H"
      }
    ]
  }
]