[
  {
    "sha": "4f44cb616d98a0e17ae0599e5a58f50f3be2910b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZjQ0Y2I2MTZkOThhMGUxN2FlMDU5OWU1YTU4ZjUwZjNiZTI5MTBi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-06-29T15:29:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-06-29T15:35:54Z"
      },
      "message": "qt: Network-specific example address\n\nGenerate an (invalid) example address for in the bitcoin address\nwidgets, based on the network prefix, instead of hardcoding a mainnet\naddress.\n\n- `1NS17iag9jJgTHD1VXjvLCEnZuQ3rJDE9L` for mainnet (same as now)\n- `n2wxQmfexkjwEPgdD6iJA7T7RtzkmHxhFc` for testnet",
      "tree": {
        "sha": "e33d745453594dfe47ed9b4e612c579b10380514",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e33d745453594dfe47ed9b4e612c579b10380514"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f44cb616d98a0e17ae0599e5a58f50f3be2910b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f44cb616d98a0e17ae0599e5a58f50f3be2910b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4f44cb616d98a0e17ae0599e5a58f50f3be2910b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f44cb616d98a0e17ae0599e5a58f50f3be2910b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a87eb0e4b476c37ed6e013f35a6aa5ef4ecf34e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a87eb0e4b476c37ed6e013f35a6aa5ef4ecf34e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a87eb0e4b476c37ed6e013f35a6aa5ef4ecf34e"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 19,
      "deletions": 1
    },
    "files": [
      {
        "sha": "947a4c6821d842bb1a0ad9a859dcf61b7cdecd4c",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 1,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f44cb616d98a0e17ae0599e5a58f50f3be2910b/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f44cb616d98a0e17ae0599e5a58f50f3be2910b/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=4f44cb616d98a0e17ae0599e5a58f50f3be2910b",
        "patch": "@@ -107,6 +107,23 @@ QFont fixedPitchFont()\n #endif\n }\n \n+// Just some dummy data to generate an convincing random-looking (but consistent) address\n+static const uint8_t dummydata[] = {0xeb,0x15,0x23,0x1d,0xfc,0xeb,0x60,0x92,0x58,0x86,0xb6,0x7d,0x06,0x52,0x99,0x92,0x59,0x15,0xae,0xb1,0x72,0xc0,0x66,0x47};\n+\n+// Generate a dummy address with invalid CRC, starting with the network prefix.\n+static std::string DummyAddress(const CChainParams &params)\n+{\n+    std::vector<unsigned char> sourcedata = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+    sourcedata.insert(sourcedata.end(), dummydata, dummydata + sizeof(dummydata));\n+    for(int i=0; i<256; ++i) { // Try every trailing byte\n+        std::string s = EncodeBase58(begin_ptr(sourcedata), end_ptr(sourcedata));\n+        if (!CBitcoinAddress(s).IsValid())\n+            return s;\n+        sourcedata[sourcedata.size()-1] += 1;\n+    }\n+    return \"\";\n+}\n+\n void setupAddressWidget(QValidatedLineEdit *widget, QWidget *parent)\n {\n     parent->setFocusProxy(widget);\n@@ -115,7 +132,8 @@ void setupAddressWidget(QValidatedLineEdit *widget, QWidget *parent)\n #if QT_VERSION >= 0x040700\n     // We don't want translators to use own addresses in translations\n     // and this is the only place, where this address is supplied.\n-    widget->setPlaceholderText(QObject::tr(\"Enter a Bitcoin address (e.g. %1)\").arg(\"1NS17iag9jJgTHD1VXjvLCEnZuQ3rJDE9L\"));\n+    widget->setPlaceholderText(QObject::tr(\"Enter a Bitcoin address (e.g. %1)\").arg(\n+        QString::fromStdString(DummyAddress(Params()))));\n #endif\n     widget->setValidator(new BitcoinAddressEntryValidator(parent));\n     widget->setCheckValidator(new BitcoinAddressCheckValidator(parent));"
      }
    ]
  }
]