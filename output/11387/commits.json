[
  {
    "sha": "81aebaf30651382481ff1bd26b97f0eb4e12d031",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MWFlYmFmMzA2NTEzODI0ODFmZjFiZDI2Yjk3ZjBlYjRlMTJkMDMx",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-20T23:18:18Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-22T23:08:08Z"
      },
      "message": "tor: pass in Tor control port rather than using globals\n\nAlso, rather than adding to the existing unused parameters\n(threadGroup, scheduler), remove them and their header dependencies.",
      "tree": {
        "sha": "4317a015525da7a449e1ba6ba5b8247372d2462c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4317a015525da7a449e1ba6ba5b8247372d2462c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/81aebaf30651382481ff1bd26b97f0eb4e12d031",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81aebaf30651382481ff1bd26b97f0eb4e12d031",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/81aebaf30651382481ff1bd26b97f0eb4e12d031",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81aebaf30651382481ff1bd26b97f0eb4e12d031/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "877678710800a4d78afc12519424f232f1a583d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/877678710800a4d78afc12519424f232f1a583d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/877678710800a4d78afc12519424f232f1a583d3"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 22,
      "deletions": 12
    },
    "files": [
      {
        "sha": "afbd8d757b56c95ef0a594c031058c2d086c95ff",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81aebaf30651382481ff1bd26b97f0eb4e12d031/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81aebaf30651382481ff1bd26b97f0eb4e12d031/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=81aebaf30651382481ff1bd26b97f0eb4e12d031",
        "patch": "@@ -1350,6 +1350,13 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     fDiscover = gArgs.GetBoolArg(\"-discover\", true);\n     fRelayTxes = !gArgs.GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY);\n \n+    int listen_port = chainparams.GetDefaultPort();\n+    assert(listen_port <= 0xffff);\n+    listen_port = gArgs.GetArg(\"-port\", listen_port);\n+    if (listen_port > 0xffff) {\n+        return InitError(strprintf(_(\"Invalid port specified in -port: '%s'\"), listen_port));\n+    }\n+\n     for (const std::string& strAddr : gArgs.GetArgs(\"-externalip\")) {\n         CService addrLocal;\n         if (Lookup(strAddr.c_str(), addrLocal, GetListenPort(), fNameLookup) && addrLocal.IsValid())\n@@ -1645,7 +1652,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     LogPrintf(\"mapBlockIndex.size() = %u\\n\",   mapBlockIndex.size());\n     LogPrintf(\"nBestHeight = %d\\n\",                   chainActive.Height());\n     if (gArgs.GetBoolArg(\"-listenonion\", DEFAULT_LISTEN_ONION))\n-        StartTorControl(threadGroup, scheduler);\n+        StartTorControl(gArgs.GetArg(\"-torcontrol\", DEFAULT_TOR_CONTROL), listen_port);\n \n     Discover(threadGroup);\n "
      },
      {
        "sha": "00593e7d6d6ed4a13b7cbfcba80bd70075f08ffa",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81aebaf30651382481ff1bd26b97f0eb4e12d031/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81aebaf30651382481ff1bd26b97f0eb4e12d031/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=81aebaf30651382481ff1bd26b97f0eb4e12d031",
        "patch": "@@ -20,6 +20,7 @@\n #include <boost/algorithm/string/split.hpp>\n #include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/replace.hpp>\n+#include <boost/thread.hpp>\n \n #include <event2/bufferevent.h>\n #include <event2/buffer.h>\n@@ -411,7 +412,7 @@ static bool WriteBinaryFile(const fs::path &filename, const std::string &data)\n class TorController\n {\n public:\n-    TorController(struct event_base* base, const std::string& target);\n+    TorController(struct event_base* base, const std::string& target, uint16_t default_port);\n     ~TorController();\n \n     /** Get name fo file to store private key in */\n@@ -429,6 +430,7 @@ class TorController\n     struct event *reconnect_ev;\n     float reconnect_timeout;\n     CService service;\n+    uint16_t m_listen_port;\n     /** Cookie for SAFECOOKIE auth */\n     std::vector<uint8_t> cookie;\n     /** ClientNonce for SAFECOOKIE auth */\n@@ -451,10 +453,10 @@ class TorController\n     static void reconnect_cb(evutil_socket_t fd, short what, void *arg);\n };\n \n-TorController::TorController(struct event_base* _base, const std::string& _target):\n+TorController::TorController(struct event_base* _base, const std::string& _target, uint16_t default_port):\n     base(_base),\n     target(_target), conn(base), reconnect(true), reconnect_ev(0),\n-    reconnect_timeout(RECONNECT_TIMEOUT_START)\n+    reconnect_timeout(RECONNECT_TIMEOUT_START), m_listen_port(default_port)\n {\n     reconnect_ev = event_new(base, -1, 0, reconnect_cb, this);\n     if (!reconnect_ev)\n@@ -502,7 +504,7 @@ void TorController::add_onion_cb(TorControlConnection& _conn, const TorControlRe\n             }\n             return;\n         }\n-        service = LookupNumeric(std::string(service_id+\".onion\").c_str(), GetListenPort());\n+        service = LookupNumeric(std::string(service_id+\".onion\").c_str(), m_listen_port);\n         LogPrintf(\"tor: Got service ID %s, advertising service %s\\n\", service_id, service.ToString());\n         if (WriteBinaryFile(GetPrivateKeyFile(), private_key)) {\n             LogPrint(BCLog::TOR, \"tor: Cached service private key to %s\\n\", GetPrivateKeyFile().string());\n@@ -538,7 +540,7 @@ void TorController::auth_cb(TorControlConnection& _conn, const TorControlReply&\n         // Request hidden service, redirect port.\n         // Note that the 'virtual' port doesn't have to be the same as our internal port, but this is just a convenient\n         // choice.  TODO; refactor the shutdown sequence some day.\n-        _conn.Command(strprintf(\"ADD_ONION %s Port=%i,127.0.0.1:%i\", private_key, GetListenPort(), GetListenPort()),\n+        _conn.Command(strprintf(\"ADD_ONION %s Port=%i,127.0.0.1:%i\", private_key, m_listen_port, m_listen_port),\n             boost::bind(&TorController::add_onion_cb, this, _1, _2));\n     } else {\n         LogPrintf(\"tor: Authentication failed\\n\");\n@@ -733,14 +735,14 @@ void TorController::reconnect_cb(evutil_socket_t fd, short what, void *arg)\n static struct event_base *gBase;\n static boost::thread torControlThread;\n \n-static void TorControlThread()\n+static void TorControlThread(const std::string& target, uint16_t default_port)\n {\n-    TorController ctrl(gBase, gArgs.GetArg(\"-torcontrol\", DEFAULT_TOR_CONTROL));\n+    TorController ctrl(gBase, target, default_port);\n \n     event_base_dispatch(gBase);\n }\n \n-void StartTorControl(boost::thread_group& threadGroup, CScheduler& scheduler)\n+void StartTorControl(const std::string& target, uint16_t default_port)\n {\n     assert(!gBase);\n #ifdef WIN32\n@@ -754,7 +756,7 @@ void StartTorControl(boost::thread_group& threadGroup, CScheduler& scheduler)\n         return;\n     }\n \n-    torControlThread = boost::thread(boost::bind(&TraceThread<void (*)()>, \"torcontrol\", &TorControlThread));\n+    torControlThread = boost::thread(&TraceThread<std::function<void()> >, \"torcontrol\", std::bind(&TorControlThread, target, default_port));\n }\n \n void InterruptTorControl()"
      },
      {
        "sha": "246164adf4de91fdb44ea12e10bd3829aecb1123",
        "filename": "src/torcontrol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81aebaf30651382481ff1bd26b97f0eb4e12d031/src/torcontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81aebaf30651382481ff1bd26b97f0eb4e12d031/src/torcontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.h?ref=81aebaf30651382481ff1bd26b97f0eb4e12d031",
        "patch": "@@ -8,12 +8,13 @@\n #ifndef BITCOIN_TORCONTROL_H\n #define BITCOIN_TORCONTROL_H\n \n-#include \"scheduler.h\"\n+#include <stdint.h>\n+#include <string>\n \n extern const std::string DEFAULT_TOR_CONTROL;\n static const bool DEFAULT_LISTEN_ONION = true;\n \n-void StartTorControl(boost::thread_group& threadGroup, CScheduler& scheduler);\n+void StartTorControl(const std::string& target, uint16_t default_port);\n void InterruptTorControl();\n void StopTorControl();\n "
      }
    ]
  },
  {
    "sha": "02587340540811c9af343ce7436f9b9592a0762f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMjU4NzM0MDU0MDgxMWM5YWYzNDNjZTc0MzZmOWI5NTkyYTA3NjJm",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-20T23:24:48Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-22T23:08:08Z"
      },
      "message": "net: pass listen port into MapPort/Discover rather than using globals.\n\nThis also allows the port-less AddLocal overload to be removed.",
      "tree": {
        "sha": "ff76746984df7052d82d683bf7e162eacb8c6cf5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff76746984df7052d82d683bf7e162eacb8c6cf5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02587340540811c9af343ce7436f9b9592a0762f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02587340540811c9af343ce7436f9b9592a0762f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/02587340540811c9af343ce7436f9b9592a0762f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02587340540811c9af343ce7436f9b9592a0762f/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "81aebaf30651382481ff1bd26b97f0eb4e12d031",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81aebaf30651382481ff1bd26b97f0eb4e12d031",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/81aebaf30651382481ff1bd26b97f0eb4e12d031"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 16,
      "deletions": 21
    },
    "files": [
      {
        "sha": "2a673ab6e1beeb6dee284d16878d984a90a5fe30",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02587340540811c9af343ce7436f9b9592a0762f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02587340540811c9af343ce7436f9b9592a0762f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=02587340540811c9af343ce7436f9b9592a0762f",
        "patch": "@@ -189,7 +189,7 @@ void Shutdown()\n #ifdef ENABLE_WALLET\n     FlushWallets();\n #endif\n-    MapPort(false);\n+    MapPort(false, 0);\n \n     // Because these depend on each-other, we make sure that neither can be\n     // using the other before destroying them.\n@@ -1651,13 +1651,14 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     //// debug print\n     LogPrintf(\"mapBlockIndex.size() = %u\\n\",   mapBlockIndex.size());\n     LogPrintf(\"nBestHeight = %d\\n\",                   chainActive.Height());\n+\n     if (gArgs.GetBoolArg(\"-listenonion\", DEFAULT_LISTEN_ONION))\n         StartTorControl(gArgs.GetArg(\"-torcontrol\", DEFAULT_TOR_CONTROL), listen_port);\n \n-    Discover(threadGroup);\n+    Discover(listen_port);\n \n     // Map ports with UPnP\n-    MapPort(gArgs.GetBoolArg(\"-upnp\", DEFAULT_UPNP));\n+    MapPort(gArgs.GetBoolArg(\"-upnp\", DEFAULT_UPNP), listen_port);\n \n     CConnman::Options connOptions;\n     connOptions.nLocalServices = nLocalServices;"
      },
      {
        "sha": "afd1809d3232fa2acf587d9b53765a1895524d08",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 15,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02587340540811c9af343ce7436f9b9592a0762f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02587340540811c9af343ce7436f9b9592a0762f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=02587340540811c9af343ce7436f9b9592a0762f",
        "patch": "@@ -227,11 +227,6 @@ bool AddLocal(const CService& addr, int nScore)\n     return true;\n }\n \n-bool AddLocal(const CNetAddr &addr, int nScore)\n-{\n-    return AddLocal(CService(addr, GetListenPort()), nScore);\n-}\n-\n bool RemoveLocal(const CService& addr)\n {\n     LOCK(cs_mapLocalHost);\n@@ -1435,9 +1430,9 @@ void CConnman::WakeMessageHandler()\n \n \n #ifdef USE_UPNP\n-void ThreadMapPort()\n+void ThreadMapPort(uint16_t map_port)\n {\n-    std::string port = strprintf(\"%u\", GetListenPort());\n+    std::string port = strprintf(\"%u\", map_port);\n     const char * multicastif = nullptr;\n     const char * minissdpdpath = nullptr;\n     struct UPNPDev * devlist = nullptr;\n@@ -1475,7 +1470,7 @@ void ThreadMapPort()\n                     CNetAddr resolved;\n                     if(LookupHost(externalIPAddress, resolved, false)) {\n                         LogPrintf(\"UPnP: ExternalIPAddress = %s\\n\", resolved.ToString().c_str());\n-                        AddLocal(resolved, LOCAL_UPNP);\n+                        AddLocal(CService(resolved, map_port), LOCAL_UPNP);\n                     }\n                 }\n                 else\n@@ -1522,7 +1517,7 @@ void ThreadMapPort()\n     }\n }\n \n-void MapPort(bool fUseUPnP)\n+void MapPort(bool fUseUPnP, uint16_t port)\n {\n     static boost::thread* upnp_thread = nullptr;\n \n@@ -1533,7 +1528,7 @@ void MapPort(bool fUseUPnP)\n             upnp_thread->join();\n             delete upnp_thread;\n         }\n-        upnp_thread = new boost::thread(boost::bind(&TraceThread<void (*)()>, \"upnp\", &ThreadMapPort));\n+        upnp_thread = new boost::thread(&TraceThread<std::function<void()> >, \"net\", std::bind(&ThreadMapPort, port));\n     }\n     else if (upnp_thread) {\n         upnp_thread->interrupt();\n@@ -1544,7 +1539,7 @@ void MapPort(bool fUseUPnP)\n }\n \n #else\n-void MapPort(bool)\n+void MapPort(bool fUseUPnP, uint16_t port)\n {\n     // Intentionally left blank.\n }\n@@ -2122,7 +2117,7 @@ bool CConnman::BindListenPort(const CService &addrBind, std::string& strError, b\n     return true;\n }\n \n-void Discover(boost::thread_group& threadGroup)\n+void Discover(uint16_t port)\n {\n     if (!fDiscover)\n         return;\n@@ -2137,7 +2132,7 @@ void Discover(boost::thread_group& threadGroup)\n         {\n             for (const CNetAddr &addr : vaddr)\n             {\n-                if (AddLocal(addr, LOCAL_IF))\n+                if (AddLocal(CService(addr, port), LOCAL_IF))\n                     LogPrintf(\"%s: %s - %s\\n\", __func__, pszHostName, addr.ToString());\n             }\n         }\n@@ -2157,14 +2152,14 @@ void Discover(boost::thread_group& threadGroup)\n             {\n                 struct sockaddr_in* s4 = (struct sockaddr_in*)(ifa->ifa_addr);\n                 CNetAddr addr(s4->sin_addr);\n-                if (AddLocal(addr, LOCAL_IF))\n+                if (AddLocal(CService(addr, port), LOCAL_IF))\n                     LogPrintf(\"%s: IPv4 %s: %s\\n\", __func__, ifa->ifa_name, addr.ToString());\n             }\n             else if (ifa->ifa_addr->sa_family == AF_INET6)\n             {\n                 struct sockaddr_in6* s6 = (struct sockaddr_in6*)(ifa->ifa_addr);\n                 CNetAddr addr(s6->sin6_addr);\n-                if (AddLocal(addr, LOCAL_IF))\n+                if (AddLocal(CService(addr, port), LOCAL_IF))\n                     LogPrintf(\"%s: IPv6 %s: %s\\n\", __func__, ifa->ifa_name, addr.ToString());\n             }\n         }"
      },
      {
        "sha": "9ce82b7f7c6c16d118dd871ac5ab39b93dd8153b",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02587340540811c9af343ce7436f9b9592a0762f/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02587340540811c9af343ce7436f9b9592a0762f/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=02587340540811c9af343ce7436f9b9592a0762f",
        "patch": "@@ -422,8 +422,8 @@ class CConnman\n     std::thread threadMessageHandler;\n };\n extern std::unique_ptr<CConnman> g_connman;\n-void Discover(boost::thread_group& threadGroup);\n-void MapPort(bool fUseUPnP);\n+void Discover(uint16_t port);\n+void MapPort(bool fUseUPnP, uint16_t port);\n unsigned short GetListenPort();\n bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n \n@@ -471,7 +471,6 @@ void SetLimited(enum Network net, bool fLimited = true);\n bool IsLimited(enum Network net);\n bool IsLimited(const CNetAddr& addr);\n bool AddLocal(const CService& addr, int nScore = LOCAL_NONE);\n-bool AddLocal(const CNetAddr& addr, int nScore = LOCAL_NONE);\n bool RemoveLocal(const CService& addr);\n bool SeenLocal(const CService& addr);\n bool IsLocal(const CService& addr);"
      }
    ]
  },
  {
    "sha": "6f2372d8ab588495e972f7bad1536e3f10abb7dd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjIzNzJkOGFiNTg4NDk1ZTk3MmY3YmFkMTUzNmUzZjEwYWJiN2Rk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-20T23:58:15Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-22T23:09:26Z"
      },
      "message": "net: pass listen port into CConnman and remove global GetListenPort\n\nThe global test is removed because it's no longer relevant. Overriding via the\n-port config option is tested extensively via python tests.",
      "tree": {
        "sha": "aef6ace81f28e3e1d1300c2876516815576e9e11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aef6ace81f28e3e1d1300c2876516815576e9e11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f2372d8ab588495e972f7bad1536e3f10abb7dd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f2372d8ab588495e972f7bad1536e3f10abb7dd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f2372d8ab588495e972f7bad1536e3f10abb7dd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f2372d8ab588495e972f7bad1536e3f10abb7dd/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02587340540811c9af343ce7436f9b9592a0762f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02587340540811c9af343ce7436f9b9592a0762f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02587340540811c9af343ce7436f9b9592a0762f"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 23,
      "deletions": 29
    },
    "files": [
      {
        "sha": "9a8c9b8d82eddcd4f4f01dc89baee3e402a0c521",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f2372d8ab588495e972f7bad1536e3f10abb7dd/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f2372d8ab588495e972f7bad1536e3f10abb7dd/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6f2372d8ab588495e972f7bad1536e3f10abb7dd",
        "patch": "@@ -1359,7 +1359,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     for (const std::string& strAddr : gArgs.GetArgs(\"-externalip\")) {\n         CService addrLocal;\n-        if (Lookup(strAddr.c_str(), addrLocal, GetListenPort(), fNameLookup) && addrLocal.IsValid())\n+        if (Lookup(strAddr.c_str(), addrLocal, listen_port, fNameLookup) && addrLocal.IsValid())\n             AddLocal(addrLocal, LOCAL_MANUAL);\n         else\n             return InitError(ResolveErrMsg(\"externalip\", strAddr));\n@@ -1676,10 +1676,11 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     connOptions.nMaxOutboundTimeframe = nMaxOutboundTimeframe;\n     connOptions.nMaxOutboundLimit = nMaxOutboundLimit;\n+    connOptions.m_default_listen_port = listen_port;\n \n     for (const std::string& strBind : gArgs.GetArgs(\"-bind\")) {\n         CService addrBind;\n-        if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false)) {\n+        if (!Lookup(strBind.c_str(), addrBind, listen_port, false)) {\n             return InitError(ResolveErrMsg(\"bind\", strBind));\n         }\n         connOptions.vBinds.push_back(addrBind);"
      },
      {
        "sha": "6d1a6520c7cfe73a7eb240729383939b0ec7d66b",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f2372d8ab588495e972f7bad1536e3f10abb7dd/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f2372d8ab588495e972f7bad1536e3f10abb7dd/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=6f2372d8ab588495e972f7bad1536e3f10abb7dd",
        "patch": "@@ -95,11 +95,6 @@ void CConnman::AddOneShot(const std::string& strDest)\n     vOneShots.push_back(strDest);\n }\n \n-unsigned short GetListenPort()\n-{\n-    return (unsigned short)(gArgs.GetArg(\"-port\", Params().GetDefaultPort()));\n-}\n-\n // find 'best' local address for a particular peer\n bool GetLocal(CService& addr, const CNetAddr *paddrPeer)\n {\n@@ -149,9 +144,9 @@ static std::vector<CAddress> convertSeed6(const std::vector<SeedSpec6> &vSeedsIn\n // Otherwise, return the unroutable 0.0.0.0 but filled in with\n // the normal parameters, since the IP may be changed to a useful\n // one by discovery.\n-CAddress GetLocalAddress(const CNetAddr *paddrPeer, ServiceFlags nLocalServices)\n+CAddress GetLocalAddress(const CNetAddr *paddrPeer, ServiceFlags nLocalServices, uint16_t default_listen_port)\n {\n-    CAddress ret(CService(CNetAddr(),GetListenPort()), nLocalServices);\n+    CAddress ret(CService(CNetAddr(), default_listen_port), nLocalServices);\n     CService addr;\n     if (GetLocal(addr, paddrPeer))\n     {\n@@ -178,11 +173,11 @@ bool IsPeerAddrLocalGood(CNode *pnode)\n }\n \n // pushes our own address to a peer\n-void AdvertiseLocal(CNode *pnode)\n+void AdvertiseLocal(CNode *pnode, uint16_t default_listen_port)\n {\n     if (fListen && pnode->fSuccessfullyConnected)\n     {\n-        CAddress addrLocal = GetLocalAddress(&pnode->addr, pnode->GetLocalServices());\n+        CAddress addrLocal = GetLocalAddress(&pnode->addr, pnode->GetLocalServices(), default_listen_port);\n         // If discovery is enabled, sometimes give our peer the address it\n         // tells us that it sees us as in case it has a better idea of our\n         // address than we do.\n@@ -2235,8 +2230,8 @@ bool CConnman::InitBinds(const std::vector<CService>& binds, const std::vector<C\n     if (binds.empty() && whiteBinds.empty()) {\n         struct in_addr inaddr_any;\n         inaddr_any.s_addr = INADDR_ANY;\n-        fBound |= Bind(CService(in6addr_any, GetListenPort()), BF_NONE);\n-        fBound |= Bind(CService(inaddr_any, GetListenPort()), !fBound ? BF_REPORT_ERROR : BF_NONE);\n+        fBound |= Bind(CService(in6addr_any, m_default_listen_port), BF_NONE);\n+        fBound |= Bind(CService(inaddr_any, m_default_listen_port), !fBound ? BF_REPORT_ERROR : BF_NONE);\n     }\n     return fBound;\n }\n@@ -2662,6 +2657,11 @@ ServiceFlags CConnman::GetLocalServices() const\n     return nLocalServices;\n }\n \n+uint16_t CConnman::GetDefaultListenPort() const\n+{\n+    return m_default_listen_port;\n+}\n+\n void CConnman::SetBestHeight(int height)\n {\n     nBestHeight.store(height, std::memory_order_release);"
      },
      {
        "sha": "f9d50432dfd7197c1fd373f7aa66bddd544b1d61",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f2372d8ab588495e972f7bad1536e3f10abb7dd/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f2372d8ab588495e972f7bad1536e3f10abb7dd/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=6f2372d8ab588495e972f7bad1536e3f10abb7dd",
        "patch": "@@ -148,6 +148,7 @@ class CConnman\n         bool m_use_addrman_outgoing = true;\n         std::vector<std::string> m_specified_outgoing;\n         std::vector<std::string> m_added_nodes;\n+        uint16_t m_default_listen_port = 0;\n     };\n \n     void Init(const Options& connOptions) {\n@@ -166,6 +167,7 @@ class CConnman\n         nMaxOutboundLimit = connOptions.nMaxOutboundLimit;\n         vWhitelistedRange = connOptions.vWhitelistedRange;\n         vAddedNodes = connOptions.m_added_nodes;\n+        m_default_listen_port = connOptions.m_default_listen_port;\n     }\n \n     CConnman(uint64_t seed0, uint64_t seed1);\n@@ -265,6 +267,7 @@ class CConnman\n     bool DisconnectNode(NodeId id);\n \n     ServiceFlags GetLocalServices() const;\n+    uint16_t GetDefaultListenPort() const;\n \n     //!set the max outbound target in bytes\n     void SetMaxOutboundTarget(uint64_t limit);\n@@ -371,6 +374,8 @@ class CConnman\n     unsigned int nSendBufferMaxSize;\n     unsigned int nReceiveFloodSize;\n \n+    uint16_t m_default_listen_port;\n+\n     std::vector<ListenSocket> vhListenSocket;\n     std::atomic<bool> fNetworkActive;\n     banmap_t setBanned;\n@@ -424,7 +429,6 @@ class CConnman\n extern std::unique_ptr<CConnman> g_connman;\n void Discover(uint16_t port);\n void MapPort(bool fUseUPnP, uint16_t port);\n-unsigned short GetListenPort();\n bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n \n struct CombinerAll\n@@ -466,7 +470,7 @@ enum\n };\n \n bool IsPeerAddrLocalGood(CNode *pnode);\n-void AdvertiseLocal(CNode *pnode);\n+void AdvertiseLocal(CNode *pnode, uint16_t default_listen_port);\n void SetLimited(enum Network net, bool fLimited = true);\n bool IsLimited(enum Network net);\n bool IsLimited(const CNetAddr& addr);\n@@ -477,7 +481,7 @@ bool IsLocal(const CService& addr);\n bool GetLocal(CService &addr, const CNetAddr *paddrPeer = nullptr);\n bool IsReachable(enum Network net);\n bool IsReachable(const CNetAddr &addr);\n-CAddress GetLocalAddress(const CNetAddr *paddrPeer, ServiceFlags nLocalServices);\n+CAddress GetLocalAddress(const CNetAddr *paddrPeer, ServiceFlags nLocalServices, uint16_t default_listen_port);\n \n \n extern bool fDiscover;"
      },
      {
        "sha": "0efc0adb18af1308124a8ef1491216336e0fd18a",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f2372d8ab588495e972f7bad1536e3f10abb7dd/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f2372d8ab588495e972f7bad1536e3f10abb7dd/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=6f2372d8ab588495e972f7bad1536e3f10abb7dd",
        "patch": "@@ -1329,7 +1329,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // Advertise our address\n             if (fListen && !IsInitialBlockDownload())\n             {\n-                CAddress addr = GetLocalAddress(&pfrom->addr, pfrom->GetLocalServices());\n+                CAddress addr = GetLocalAddress(&pfrom->addr, pfrom->GetLocalServices(), connman->GetDefaultListenPort());\n                 FastRandomContext insecure_rand;\n                 if (addr.IsRoutable())\n                 {\n@@ -2828,7 +2828,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto, std::atomic<bool>& interruptM\n         // Address refresh broadcast\n         int64_t nNow = GetTimeMicros();\n         if (!IsInitialBlockDownload() && pto->nNextLocalAddrSend < nNow) {\n-            AdvertiseLocal(pto);\n+            AdvertiseLocal(pto, connman->GetDefaultListenPort());\n             pto->nNextLocalAddrSend = PoissonNextSend(nNow, AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL);\n         }\n "
      },
      {
        "sha": "1ba72128501328bd01c144f600c41dcf65ca38f9",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f2372d8ab588495e972f7bad1536e3f10abb7dd/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f2372d8ab588495e972f7bad1536e3f10abb7dd/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=6f2372d8ab588495e972f7bad1536e3f10abb7dd",
        "patch": "@@ -73,17 +73,6 @@ CDataStream AddrmanToStream(CAddrManSerializationMock& _addrman)\n \n BOOST_FIXTURE_TEST_SUITE(net_tests, BasicTestingSetup)\n \n-BOOST_AUTO_TEST_CASE(cnode_listen_port)\n-{\n-    // test default\n-    unsigned short port = GetListenPort();\n-    BOOST_CHECK(port == Params().GetDefaultPort());\n-    // test set port\n-    unsigned short altPort = 12345;\n-    gArgs.SoftSetArg(\"-port\", std::to_string(altPort));\n-    port = GetListenPort();\n-    BOOST_CHECK(port == altPort);\n-}\n \n BOOST_AUTO_TEST_CASE(caddrdb_read)\n {"
      }
    ]
  },
  {
    "sha": "10c496c156d11c1578832422a0b68a99d190b098",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMGM0OTZjMTU2ZDExYzE1Nzg4MzI0MjJhMGI2OGE5OWQxOTBiMDk4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-20T23:59:47Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-22T23:09:26Z"
      },
      "message": "net: pass in default outgoing port",
      "tree": {
        "sha": "9b9e3bc42231d23fe8bdc22e690dad6af4796d50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b9e3bc42231d23fe8bdc22e690dad6af4796d50"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10c496c156d11c1578832422a0b68a99d190b098",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10c496c156d11c1578832422a0b68a99d190b098",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10c496c156d11c1578832422a0b68a99d190b098",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10c496c156d11c1578832422a0b68a99d190b098/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f2372d8ab588495e972f7bad1536e3f10abb7dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f2372d8ab588495e972f7bad1536e3f10abb7dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f2372d8ab588495e972f7bad1536e3f10abb7dd"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 9,
      "deletions": 5
    },
    "files": [
      {
        "sha": "836687d50a8db990b04c05fd41d4bc6bacf85e4a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10c496c156d11c1578832422a0b68a99d190b098/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10c496c156d11c1578832422a0b68a99d190b098/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=10c496c156d11c1578832422a0b68a99d190b098",
        "patch": "@@ -1677,6 +1677,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     connOptions.nMaxOutboundTimeframe = nMaxOutboundTimeframe;\n     connOptions.nMaxOutboundLimit = nMaxOutboundLimit;\n     connOptions.m_default_listen_port = listen_port;\n+    connOptions.m_default_outbound_port = chainparams.GetDefaultPort();\n \n     for (const std::string& strBind : gArgs.GetArgs(\"-bind\")) {\n         CService addrBind;"
      },
      {
        "sha": "294f50e9becd1ffbb3fb60ef0f436a1eda84a078",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10c496c156d11c1578832422a0b68a99d190b098/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10c496c156d11c1578832422a0b68a99d190b098/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=10c496c156d11c1578832422a0b68a99d190b098",
        "patch": "@@ -378,7 +378,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n     // Connect\n     SOCKET hSocket;\n     bool proxyConnectionFailed = false;\n-    if (pszDest ? ConnectSocketByName(addrConnect, hSocket, pszDest, Params().GetDefaultPort(), nConnectTimeout, &proxyConnectionFailed) :\n+    if (pszDest ? ConnectSocketByName(addrConnect, hSocket, pszDest, m_default_outbound_port, nConnectTimeout, &proxyConnectionFailed) :\n                   ConnectSocket(addrConnect, hSocket, nConnectTimeout, &proxyConnectionFailed))\n     {\n         if (!IsSelectableSocket(hSocket)) {\n@@ -1605,7 +1605,7 @@ void CConnman::ThreadDNSAddressSeed()\n                 for (const CNetAddr& ip : vIPs)\n                 {\n                     int nOneDay = 24*3600;\n-                    CAddress addr = CAddress(CService(ip, Params().GetDefaultPort()), requiredServiceBits);\n+                    CAddress addr = CAddress(CService(ip, m_default_outbound_port), requiredServiceBits);\n                     addr.nTime = GetTime() - 3*nOneDay - GetRand(4*nOneDay); // use a random age between 3 and 7 days old\n                     vAdd.push_back(addr);\n                     found++;\n@@ -1807,7 +1807,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             }\n \n             // do not allow non-default ports, unless after 50 invalid addresses selected already\n-            if (addr.GetPort() != Params().GetDefaultPort() && nTries < 50)\n+            if (addr.GetPort() != m_default_outbound_port && nTries < 50)\n                 continue;\n \n             addrConnect = addr;\n@@ -1865,7 +1865,7 @@ std::vector<AddedNodeInfo> CConnman::GetAddedNodeInfo()\n     }\n \n     for (const std::string& strAddNode : lAddresses) {\n-        CService service(LookupNumeric(strAddNode.c_str(), Params().GetDefaultPort()));\n+        CService service(LookupNumeric(strAddNode.c_str(), m_default_outbound_port));\n         if (service.IsValid()) {\n             // strAddNode is an IP:port\n             auto it = mapConnected.find(service);\n@@ -1905,7 +1905,7 @@ void CConnman::ThreadOpenAddedConnections()\n                 // If strAddedNode is an IP/port, decode it immediately, so\n                 // OpenNetworkConnection can detect existing connections to that IP/port.\n                 tried = true;\n-                CService service(LookupNumeric(info.strAddedNode.c_str(), Params().GetDefaultPort()));\n+                CService service(LookupNumeric(info.strAddedNode.c_str(), m_default_outbound_port));\n                 OpenNetworkConnection(CAddress(service, NODE_NONE), false, &grant, info.strAddedNode.c_str(), false, false, true);\n                 if (!interruptNet.sleep_for(std::chrono::milliseconds(500)))\n                     return;"
      },
      {
        "sha": "a1365ea59ede08966df503379720d0e09727a0d0",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10c496c156d11c1578832422a0b68a99d190b098/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10c496c156d11c1578832422a0b68a99d190b098/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=10c496c156d11c1578832422a0b68a99d190b098",
        "patch": "@@ -149,6 +149,7 @@ class CConnman\n         std::vector<std::string> m_specified_outgoing;\n         std::vector<std::string> m_added_nodes;\n         uint16_t m_default_listen_port = 0;\n+        uint16_t m_default_outbound_port = 0;\n     };\n \n     void Init(const Options& connOptions) {\n@@ -168,6 +169,7 @@ class CConnman\n         vWhitelistedRange = connOptions.vWhitelistedRange;\n         vAddedNodes = connOptions.m_added_nodes;\n         m_default_listen_port = connOptions.m_default_listen_port;\n+        m_default_outbound_port = connOptions.m_default_outbound_port;\n     }\n \n     CConnman(uint64_t seed0, uint64_t seed1);\n@@ -375,6 +377,7 @@ class CConnman\n     unsigned int nReceiveFloodSize;\n \n     uint16_t m_default_listen_port;\n+    uint16_t m_default_outbound_port;\n \n     std::vector<ListenSocket> vhListenSocket;\n     std::atomic<bool> fNetworkActive;"
      }
    ]
  }
]