[
  {
    "sha": "af82884ab7c485c8b4c5ac93c308127c39c196be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZjgyODg0YWI3YzQ4NWM4YjRjNWFjOTNjMzA4MTI3YzM5YzE5NmJl",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2014-10-29T17:08:31Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2014-11-04T15:01:09Z"
      },
      "message": "Add \"warmup mode\" for RPC server.\n\nStart the RPC server before doing all the (expensive) startup\ninitialisations like loading the block index.  Until the node is ready,\nreturn all calls immediately with a new error signalling \"in warmup\"\nwith an appropriate status message (similar to the init message).\n\nThis is useful for RPC clients to know that the server is there (e. g.,\nthey don't have to start it) but not yet available.  It is used in\nNamecoin and Huntercoin already for some time, and there exists a UI\nhooked onto the RPC interface that actively uses this to its advantage.",
      "tree": {
        "sha": "766428da14b53e4902c87fd3fb05a1c0d1acd87a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/766428da14b53e4902c87fd3fb05a1c0d1acd87a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/af82884ab7c485c8b4c5ac93c308127c39c196be",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af82884ab7c485c8b4c5ac93c308127c39c196be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/af82884ab7c485c8b4c5ac93c308127c39c196be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af82884ab7c485c8b4c5ac93c308127c39c196be/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be32b5212b6ab4460080ec5ff55e2bf882259e5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be32b5212b6ab4460080ec5ff55e2bf882259e5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be32b5212b6ab4460080ec5ff55e2bf882259e5e"
      }
    ],
    "stats": {
      "total": 142,
      "additions": 110,
      "deletions": 32
    },
    "files": [
      {
        "sha": "6aaea677901aec25149bcde891400daff4c82f04",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af82884ab7c485c8b4c5ac93c308127c39c196be/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af82884ab7c485c8b4c5ac93c308127c39c196be/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=af82884ab7c485c8b4c5ac93c308127c39c196be",
        "patch": "@@ -84,3 +84,14 @@ Using wildcards will result in the rule being rejected with the following error\n \n     Error: Invalid -rpcallowip subnet specification: *. Valid are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24).\n \n+RPC Server \"Warm-Up\" Mode\n+=========================\n+\n+The RPC server is started earlier now, before most of the expensive\n+intialisations like loading the block index.  It is available now almost\n+immediately after starting the process.  However, until all initialisations\n+are done, it always returns an immediate error with code -28 to all calls.\n+\n+This new behaviour can be useful for clients to know that a server is already\n+started and will be available soon (for instance, so that they do not\n+have to start it themselves)."
      },
      {
        "sha": "11840e62a8d3be4064483130051115f8ff0bccaa",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 30,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af82884ab7c485c8b4c5ac93c308127c39c196be/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af82884ab7c485c8b4c5ac93c308127c39c196be/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=af82884ab7c485c8b4c5ac93c308127c39c196be",
        "patch": "@@ -46,6 +46,21 @@ std::string HelpMessageCli()\n //\n // Start\n //\n+\n+//\n+// Exception thrown on connection error.  This error is used to determine\n+// when to wait if -rpcwait is given.\n+//\n+class CConnectionFailed : public std::runtime_error\n+{\n+public:\n+\n+    explicit inline CConnectionFailed(const std::string& msg) :\n+        std::runtime_error(msg)\n+    {}\n+\n+};\n+\n static bool AppInitRPC(int argc, char* argv[])\n {\n     //\n@@ -101,15 +116,9 @@ Object CallRPC(const string& strMethod, const Array& params)\n     SSLIOStreamDevice<asio::ip::tcp> d(sslStream, fUseSSL);\n     iostreams::stream< SSLIOStreamDevice<asio::ip::tcp> > stream(d);\n \n-    bool fWait = GetBoolArg(\"-rpcwait\", false); // -rpcwait means try until server has started\n-    do {\n-        bool fConnected = d.connect(GetArg(\"-rpcconnect\", \"127.0.0.1\"), GetArg(\"-rpcport\", itostr(BaseParams().RPCPort())));\n-        if (fConnected) break;\n-        if (fWait)\n-            MilliSleep(1000);\n-        else\n-            throw runtime_error(\"couldn't connect to server\");\n-    } while (fWait);\n+    const bool fConnected = d.connect(GetArg(\"-rpcconnect\", \"127.0.0.1\"), GetArg(\"-rpcport\", itostr(BaseParams().RPCPort())));\n+    if (!fConnected)\n+        throw CConnectionFailed(\"couldn't connect to server\");\n \n     // HTTP basic authentication\n     string strUserPass64 = EncodeBase64(mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"]);\n@@ -168,27 +177,43 @@ int CommandLineRPC(int argc, char *argv[])\n         std::vector<std::string> strParams(&argv[2], &argv[argc]);\n         Array params = RPCConvertValues(strMethod, strParams);\n \n-        // Execute\n-        Object reply = CallRPC(strMethod, params);\n-\n-        // Parse reply\n-        const Value& result = find_value(reply, \"result\");\n-        const Value& error  = find_value(reply, \"error\");\n-\n-        if (error.type() != null_type) {\n-            // Error\n-            strPrint = \"error: \" + write_string(error, false);\n-            int code = find_value(error.get_obj(), \"code\").get_int();\n-            nRet = abs(code);\n-        } else {\n-            // Result\n-            if (result.type() == null_type)\n-                strPrint = \"\";\n-            else if (result.type() == str_type)\n-                strPrint = result.get_str();\n-            else\n-                strPrint = write_string(result, true);\n-        }\n+        // Execute and handle connection failures with -rpcwait\n+        const bool fWait = GetBoolArg(\"-rpcwait\", false);\n+        do {\n+            try {\n+                const Object reply = CallRPC(strMethod, params);\n+\n+                // Parse reply\n+                const Value& result = find_value(reply, \"result\");\n+                const Value& error  = find_value(reply, \"error\");\n+\n+                if (error.type() != null_type) {\n+                    // Error\n+                    const int code = find_value(error.get_obj(), \"code\").get_int();\n+                    if (fWait && code == RPC_IN_WARMUP)\n+                        throw CConnectionFailed(\"server in warmup\");\n+                    strPrint = \"error: \" + write_string(error, false);\n+                    nRet = abs(code);\n+                } else {\n+                    // Result\n+                    if (result.type() == null_type)\n+                        strPrint = \"\";\n+                    else if (result.type() == str_type)\n+                        strPrint = result.get_str();\n+                    else\n+                        strPrint = write_string(result, true);\n+                }\n+\n+                // Connection succeeded, no need to retry.\n+                break;\n+            }\n+            catch (const CConnectionFailed& e) {\n+                if (fWait)\n+                    MilliSleep(1000);\n+                else\n+                    throw;\n+            }\n+        } while (fWait);\n     }\n     catch (boost::thread_interrupted) {\n         throw;"
      },
      {
        "sha": "fe58c68fdac68b9600fa301e7aae9ebf92f93c7a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af82884ab7c485c8b4c5ac93c308127c39c196be/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af82884ab7c485c8b4c5ac93c308127c39c196be/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=af82884ab7c485c8b4c5ac93c308127c39c196be",
        "patch": "@@ -752,6 +752,17 @@ bool AppInit2(boost::thread_group& threadGroup)\n             threadGroup.create_thread(&ThreadScriptCheck);\n     }\n \n+    /* Start the RPC server already.  It will be started in \"warmup\" mode\n+     * and not really process calls already (but it will signify connections\n+     * that the server is there and will be ready later).  Warmup mode will\n+     * be disabled when initialisation is finished.\n+     */\n+    if (fServer)\n+    {\n+        uiInterface.InitMessage.connect(SetRPCWarmupStatus);\n+        StartRPCThreads();\n+    }\n+\n     int64_t nStart;\n \n     // ********************************************************* Step 5: verify wallet database integrity\n@@ -1248,8 +1259,6 @@ bool AppInit2(boost::thread_group& threadGroup)\n #endif\n \n     StartNode(threadGroup);\n-    if (fServer)\n-        StartRPCThreads();\n \n #ifdef ENABLE_WALLET\n     // Generate coins in the background\n@@ -1259,6 +1268,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n     // ********************************************************* Step 11: finished\n \n+    SetRPCWarmupFinished();\n     uiInterface.InitMessage(_(\"Done loading\"));\n \n #ifdef ENABLE_WALLET"
      },
      {
        "sha": "f0d0f3445cd44b2756e5574f6e262db2c1392c32",
        "filename": "src/rpcprotocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af82884ab7c485c8b4c5ac93c308127c39c196be/src/rpcprotocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af82884ab7c485c8b4c5ac93c308127c39c196be/src/rpcprotocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.h?ref=af82884ab7c485c8b4c5ac93c308127c39c196be",
        "patch": "@@ -52,6 +52,7 @@ enum RPCErrorCode\n     RPC_VERIFY_ERROR                = -25, // General error during transaction or block submission\n     RPC_VERIFY_REJECTED             = -26, // Transaction or block was rejected by network rules\n     RPC_VERIFY_ALREADY_IN_CHAIN     = -27, // Transaction already in chain\n+    RPC_IN_WARMUP                   = -28, // Client still warming up\n \n     // Aliases for backward compatibility\n     RPC_TRANSACTION_ERROR           = RPC_VERIFY_ERROR,"
      },
      {
        "sha": "cc80887ba4dca07de4325d11584469c48741556c",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af82884ab7c485c8b4c5ac93c308127c39c196be/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af82884ab7c485c8b4c5ac93c308127c39c196be/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=af82884ab7c485c8b4c5ac93c308127c39c196be",
        "patch": "@@ -34,6 +34,10 @@ using namespace std;\n static std::string strRPCUserColonPass;\n \n static bool fRPCRunning = false;\n+static bool fRPCInWarmup = true;\n+static std::string rpcWarmupStatus(\"RPC server started\");\n+static CCriticalSection cs_rpcWarmup;\n+\n //! These are created by StartRPCThreads, destroyed in StopRPCThreads\n static asio::io_service* rpc_io_service = NULL;\n static map<string, boost::shared_ptr<deadline_timer> > deadlineTimers;\n@@ -744,6 +748,19 @@ bool IsRPCRunning()\n     return fRPCRunning;\n }\n \n+void SetRPCWarmupStatus(const std::string& newStatus)\n+{\n+    LOCK(cs_rpcWarmup);\n+    rpcWarmupStatus = newStatus;\n+}\n+\n+void SetRPCWarmupFinished()\n+{\n+    LOCK(cs_rpcWarmup);\n+    assert(fRPCInWarmup);\n+    fRPCInWarmup = false;\n+}\n+\n void RPCRunHandler(const boost::system::error_code& err, boost::function<void(void)> func)\n {\n     if (!err)\n@@ -870,6 +887,13 @@ static bool HTTPReq_JSONRPC(AcceptedConnection *conn,\n         if (!read_string(strRequest, valRequest))\n             throw JSONRPCError(RPC_PARSE_ERROR, \"Parse error\");\n \n+        // Return immediately if in warmup\n+        {\n+            LOCK(cs_rpcWarmup);\n+            if (fRPCInWarmup)\n+                throw JSONRPCError(RPC_IN_WARMUP, rpcWarmupStatus);\n+        }\n+\n         string strReply;\n \n         // singleton request"
      },
      {
        "sha": "2a258dd89a918ada1c45aec8e9a1f78ac9d05d11",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af82884ab7c485c8b4c5ac93c308127c39c196be/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af82884ab7c485c8b4c5ac93c308127c39c196be/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=af82884ab7c485c8b4c5ac93c308127c39c196be",
        "patch": "@@ -45,6 +45,13 @@ void StopRPCThreads();\n /* Query whether RPC is running */\n bool IsRPCRunning();\n \n+/* Set the RPC warmup status.  When this is done, all RPC calls will error out\n+ * immediately with RPC_IN_WARMUP.\n+ */\n+void SetRPCWarmupStatus(const std::string& newStatus);\n+/* Mark warmup as done.  RPC calls will be processed from now on.  */\n+void SetRPCWarmupFinished();\n+\n /**\n  * Type-check arguments; throws JSONRPCError if wrong type given. Does not check that\n  * the right number of arguments are passed, just that any passed are the correct type."
      }
    ]
  }
]