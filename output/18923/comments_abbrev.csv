MarcoFalke,2020-05-09 13:13:37,"Can be tested by applying the following diff and observing a *failing* test:\n\n```diff\ndiff --git a/test/functional/wallet_dump.py b/test/functional/wallet_dump.py\nindex 6bfb468823..f30589761a 100755\n--- a/test/functional/wallet_dump.py\n+++ b/test/functional/wallet_dump.py\n@@ -190,7 +190,7 @@ class WalletDumpTest(BitcoinTestFramework):\n         assert_raises_rpc_error(-8, ""already e",https://github.com/bitcoin/bitcoin/pull/18923#issuecomment-626174422,626174422,
DrahtBot,2020-05-10 03:16:39,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19461 (multiprocess: Add bitcoin-gui -ipcconnect option by ryanofsky)\n* #19460 (multiprocess: Add bitcoin-wallet -ipccon",https://github.com/bitcoin/bitcoin/pull/18923#issuecomment-626266632,626266632,
fanquake,2020-06-06 06:06:49,Concept ACK,https://github.com/bitcoin/bitcoin/pull/18923#issuecomment-639990516,639990516,
MarcoFalke,2020-06-08 12:42:18,commit id 00000d4 was lost in a rebase,https://github.com/bitcoin/bitcoin/pull/18923#issuecomment-640578704,640578704,
MarcoFalke,2020-06-14 18:50:10,I've split out the first commits into #19277 ,https://github.com/bitcoin/bitcoin/pull/18923#issuecomment-643806589,643806589,
MarcoFalke,2020-07-04 18:01:11,Rebased,https://github.com/bitcoin/bitcoin/pull/18923#issuecomment-653794748,653794748,
ryanofsky,2020-05-29 11:49:09,"In commit ""wallet: Pass unused argsman to StartWallets()"" (faccdaba583288273399481b1f7892a910080fda)\n\nNot a big deal and I can fix it later, but this is a bit broken with #10102 because it is trying to pass a whole argsman object from the node to wallet process just to pass a single bool. (See ""Interface method parameter and return types should either be serializable or be other interface clas",https://github.com/bitcoin/bitcoin/pull/18923#discussion_r432431414,432431414,src/interfaces/wallet.cpp
MarcoFalke,2020-05-29 12:49:23,"Thanks, tried to implement your suggestion in branch 9ddddd2d927b3a752e4698c4771fc68cdc2d9698",https://github.com/bitcoin/bitcoin/pull/18923#discussion_r432459927,432459927,src/interfaces/wallet.cpp
ryanofsky,2020-05-29 13:33:50,"> Thanks, tried to implement your suggestion in branch [9ddddd2](https://github.com/bitcoin/bitcoin/commit/9ddddd2d927b3a752e4698c4771fc68cdc2d9698)\n\nBranch looks good. Current version is fine too in case you prefer that or the suggestion doesn't work.\n\n I was thinking maybe the best another approach after #19096 would be to add an ArgsManager pointer to the WalletContext struct, and initi",https://github.com/bitcoin/bitcoin/pull/18923#discussion_r432485336,432485336,src/interfaces/wallet.cpp
MarcoFalke,2020-06-05 17:21:11,"> add an ArgsManager pointer to the WalletContext struct\n\nthx, done",https://github.com/bitcoin/bitcoin/pull/18923#discussion_r436057683,436057683,src/interfaces/wallet.cpp
ryanofsky,2020-06-05 18:27:09,"In commit ""test: Avoid overwriting the NodeContext member of the testing setup"" (fa00c37cba98794c1c12c4b77e885d831d9bf183)\n\nWow, good catches. I wonder if there was a compiler warning we could enable that would have caught these.",https://github.com/bitcoin/bitcoin/pull/18923#discussion_r436093574,436093574,src/wallet/test/init_test_fixture.h
ryanofsky,2020-06-05 18:46:26,"In commit ""wallet: Pass unused args to WalletClientImpl"" (fa38755d2fc444589ae506e4edd8597ab25e55e9)\n\nSlight preference for calling this `AssertNotNull` instead of `Ensure` just because it could wind up being used widely, and it'd be nice for it to be obvious what it does.\n\nAlso for code review purposes, C++ programmers are already pretty trained to know that `*ptr` is dangerous and can kil",https://github.com/bitcoin/bitcoin/pull/18923#discussion_r436102933,436102933,src/util/check.h
ryanofsky,2020-06-09 17:15:02,"In commit ""util: Add Assert identity function"" (fa54cf107319609ff44de960b987bd09b46945d0)\n\nThinking about this, I think it would be better to change signature to `T Assert(T&& value)` to avoid a possibility of returning a reference to a temporary. Contrived example but I think `p` would be an invalid reference here returning `T&&` instead of `T`:\n\n```c++\nstd::unique_ptr<int>&& p = Assert",https://github.com/bitcoin/bitcoin/pull/18923#discussion_r437591174,437591174,src/util/check.h
promag,2020-07-09 11:14:28,"fa73493930e35850e877725167dc9d42e47015c8\n\nnit, if you feel like cleaning it a bit more maybe do this below:\n```cpp\nif (env->mapFileUseCount.erase(strFile) == 0) return false\n```\nAnd drop `.erase(it)`.",https://github.com/bitcoin/bitcoin/pull/18923#discussion_r452142702,452142702,src/wallet/bdb.cpp
MarcoFalke,2020-07-09 11:21:26,"Thanks, but I'll leave that for a follow-up",https://github.com/bitcoin/bitcoin/pull/18923#discussion_r452146218,452146218,src/wallet/bdb.cpp
jnewbery,2020-07-09 11:45:53,"I know you'll disagree, but I think it's always better to test the result of an action rather than whether it was logged. In this case, I think you could test the file modification time before and after.",https://github.com/bitcoin/bitcoin/pull/18923#discussion_r452157909,452157909,test/functional/wallet_dump.py
MarcoFalke,2020-07-09 12:16:57,"I think both can be done at the same time, but asserting the modification time increases requires a `time.sleep(1)`, since `os.path.getmtime` returns seconds. I don't like sleeps longer than 200 ms in tests, so I'll leave that for a follow-up ;)",https://github.com/bitcoin/bitcoin/pull/18923#discussion_r452173676,452173676,test/functional/wallet_dump.py
jnewbery,2020-07-09 12:45:22,No need for a follow-up. Fast tests are nice too!,https://github.com/bitcoin/bitcoin/pull/18923#discussion_r452189863,452189863,test/functional/wallet_dump.py
