[
  {
    "sha": "e5b2cd8e7564b9fc2ed4f63fe49efb0af60b4460",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNWIyY2Q4ZTc1NjRiOWZjMmVkNGY2M2ZlNDllZmIwYWY2MGI0NDYw",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-05-10T16:22:58Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-06-12T14:48:02Z"
      },
      "message": "Use python instead of slow shell script on verify-commits",
      "tree": {
        "sha": "5355f07d0bf219960a672e34cc7501b614936e7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5355f07d0bf219960a672e34cc7501b614936e7d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e5b2cd8e7564b9fc2ed4f63fe49efb0af60b4460",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5b2cd8e7564b9fc2ed4f63fe49efb0af60b4460",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e5b2cd8e7564b9fc2ed4f63fe49efb0af60b4460",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5b2cd8e7564b9fc2ed4f63fe49efb0af60b4460/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e24bf1ce184bc8d5bba70a3f3e9c43c2df07f4d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e24bf1ce184bc8d5bba70a3f3e9c43c2df07f4d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e24bf1ce184bc8d5bba70a3f3e9c43c2df07f4d3"
      }
    ],
    "stats": {
      "total": 330,
      "additions": 169,
      "deletions": 161
    },
    "files": [
      {
        "sha": "42ea5fdc44ece218c693e7c6639e2e12786de4f4",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5b2cd8e7564b9fc2ed4f63fe49efb0af60b4460/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5b2cd8e7564b9fc2ed4f63fe49efb0af60b4460/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=e5b2cd8e7564b9fc2ed4f63fe49efb0af60b4460",
        "patch": "@@ -104,5 +104,5 @@ jobs:\n         - test/lint/lint-all.sh\n         - if [ \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" -a \"$TRAVIS_EVENT_TYPE\" = \"cron\" ]; then\n               while read LINE; do travis_retry gpg --keyserver hkp://subset.pool.sks-keyservers.net --recv-keys $LINE; done < contrib/verify-commits/trusted-keys &&\n-              travis_wait 30 contrib/verify-commits/verify-commits.sh;\n+              travis_wait 30 contrib/verify-commits/verify-commits.py;\n           fi"
      },
      {
        "sha": "aa805ad1b96b962c4eb571732cba4edfb08728db",
        "filename": "contrib/verify-commits/README.md",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5b2cd8e7564b9fc2ed4f63fe49efb0af60b4460/contrib/verify-commits/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5b2cd8e7564b9fc2ed4f63fe49efb0af60b4460/contrib/verify-commits/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/README.md?ref=e5b2cd8e7564b9fc2ed4f63fe49efb0af60b4460",
        "patch": "@@ -7,18 +7,18 @@ are PGP signed (nearly always merge commits), as well as a script to verify\n commits against a trusted keys list.\n \n \n-Using verify-commits.sh safely\n+Using verify-commits.py safely\n ------------------------------\n \n Remember that you can't use an untrusted script to verify itself. This means\n-that checking out code, then running `verify-commits.sh` against `HEAD` is\n-_not_ safe, because the version of `verify-commits.sh` that you just ran could\n+that checking out code, then running `verify-commits.py` against `HEAD` is\n+_not_ safe, because the version of `verify-commits.py` that you just ran could\n be backdoored. Instead, you need to use a trusted version of verify-commits\n prior to checkout to make sure you're checking out only code signed by trusted\n keys:\n \n     git fetch origin && \\\n-      ./contrib/verify-commits/verify-commits.sh origin/master && \\\n+      ./contrib/verify-commits/verify-commits.py origin/master && \\\n       git checkout origin/master\n \n Note that the above isn't a good UI/UX yet, and needs significant improvements\n@@ -42,6 +42,6 @@ said key. In order to avoid bumping the root-of-trust `trusted-git-root`\n file, individual commits which were signed by such a key can be added to the\n `allow-revsig-commits` file. That way, the PGP signatures are still verified\n but no new commits can be signed by any expired/revoked key. To easily build a\n-list of commits which need to be added, verify-commits.sh can be edited to test\n+list of commits which need to be added, verify-commits.py can be edited to test\n each commit with BITCOIN_VERIFY_COMMITS_ALLOW_REVSIG set to both 1 and 0, and\n those which need it set to 1 printed."
      },
      {
        "sha": "c572806f2612e8c6cec07251e232e4d342ab3186",
        "filename": "contrib/verify-commits/allow-incorrect-sha512-commits",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5b2cd8e7564b9fc2ed4f63fe49efb0af60b4460/contrib/verify-commits/allow-incorrect-sha512-commits",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5b2cd8e7564b9fc2ed4f63fe49efb0af60b4460/contrib/verify-commits/allow-incorrect-sha512-commits",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/allow-incorrect-sha512-commits?ref=e5b2cd8e7564b9fc2ed4f63fe49efb0af60b4460",
        "patch": "@@ -0,0 +1,2 @@\n+f8feaa4636260b599294c7285bcf1c8b7737f74e\n+8040ae6fc576e9504186f2ae3ff2c8125de1095c"
      },
      {
        "sha": "7aab274b9a848fce47a53acf71b54dfb1bf3db0e",
        "filename": "contrib/verify-commits/allow-unclean-merge-commits",
        "status": "added",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5b2cd8e7564b9fc2ed4f63fe49efb0af60b4460/contrib/verify-commits/allow-unclean-merge-commits",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5b2cd8e7564b9fc2ed4f63fe49efb0af60b4460/contrib/verify-commits/allow-unclean-merge-commits",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/allow-unclean-merge-commits?ref=e5b2cd8e7564b9fc2ed4f63fe49efb0af60b4460",
        "patch": "@@ -0,0 +1,4 @@\n+6052d509105790a26b3ad5df43dd61e7f1b24a12\n+3798e5de334c3deb5f71302b782f6b8fbd5087f1\n+326ffed09bfcc209a2efd6a2ebc69edf6bd200b5\n+97d83739db0631be5d4ba86af3616014652c00ec"
      },
      {
        "sha": "1f14635f61418b28157a44e48993e81e1767460d",
        "filename": "contrib/verify-commits/pre-push-hook.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5b2cd8e7564b9fc2ed4f63fe49efb0af60b4460/contrib/verify-commits/pre-push-hook.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5b2cd8e7564b9fc2ed4f63fe49efb0af60b4460/contrib/verify-commits/pre-push-hook.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/pre-push-hook.sh?ref=e5b2cd8e7564b9fc2ed4f63fe49efb0af60b4460",
        "patch": "@@ -12,9 +12,9 @@ while read LINE; do\n     if [ \"$4\" != \"refs/heads/master\" ]; then\n         continue\n     fi\n-    if ! ./contrib/verify-commits/verify-commits.sh $3 > /dev/null 2>&1; then\n+    if ! ./contrib/verify-commits/verify-commits.py $3 > /dev/null 2>&1; then\n         echo \"ERROR: A commit is not signed, can't push\"\n-        ./contrib/verify-commits/verify-commits.sh\n+        ./contrib/verify-commits/verify-commits.py\n         exit 1\n     fi\n done < /dev/stdin"
      },
      {
        "sha": "80f0aa0bf1633544570c38b9bc0115b2698a7e48",
        "filename": "contrib/verify-commits/verify-commits.py",
        "status": "added",
        "additions": 155,
        "deletions": 0,
        "changes": 155,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5b2cd8e7564b9fc2ed4f63fe49efb0af60b4460/contrib/verify-commits/verify-commits.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5b2cd8e7564b9fc2ed4f63fe49efb0af60b4460/contrib/verify-commits/verify-commits.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/verify-commits.py?ref=e5b2cd8e7564b9fc2ed4f63fe49efb0af60b4460",
        "patch": "@@ -0,0 +1,155 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Verify commits against a trusted keys list.\"\"\"\n+import argparse\n+import hashlib\n+import os\n+import subprocess\n+import sys\n+import time\n+\n+GIT = os.getenv('GIT', 'git')\n+\n+def tree_sha512sum(commit='HEAD'):\n+    \"\"\"Calculate the Tree-sha512 for the commit.\n+\n+    This is copied from github-merge.py.\"\"\"\n+\n+    # request metadata for entire tree, recursively\n+    files = []\n+    blob_by_name = {}\n+    for line in subprocess.check_output([GIT, 'ls-tree', '--full-tree', '-r', commit]).splitlines():\n+        name_sep = line.index(b'\\t')\n+        metadata = line[:name_sep].split()  # perms, 'blob', blobid\n+        assert metadata[1] == b'blob'\n+        name = line[name_sep + 1:]\n+        files.append(name)\n+        blob_by_name[name] = metadata[2]\n+\n+    files.sort()\n+    # open connection to git-cat-file in batch mode to request data for all blobs\n+    # this is much faster than launching it per file\n+    p = subprocess.Popen([GIT, 'cat-file', '--batch'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)\n+    overall = hashlib.sha512()\n+    for f in files:\n+        blob = blob_by_name[f]\n+        # request blob\n+        p.stdin.write(blob + b'\\n')\n+        p.stdin.flush()\n+        # read header: blob, \"blob\", size\n+        reply = p.stdout.readline().split()\n+        assert reply[0] == blob and reply[1] == b'blob'\n+        size = int(reply[2])\n+        # hash the blob data\n+        intern = hashlib.sha512()\n+        ptr = 0\n+        while ptr < size:\n+            bs = min(65536, size - ptr)\n+            piece = p.stdout.read(bs)\n+            if len(piece) == bs:\n+                intern.update(piece)\n+            else:\n+                raise IOError('Premature EOF reading git cat-file output')\n+            ptr += bs\n+        dig = intern.hexdigest()\n+        assert p.stdout.read(1) == b'\\n'  # ignore LF that follows blob data\n+        # update overall hash with file hash\n+        overall.update(dig.encode(\"utf-8\"))\n+        overall.update(\"  \".encode(\"utf-8\"))\n+        overall.update(f)\n+        overall.update(\"\\n\".encode(\"utf-8\"))\n+    p.stdin.close()\n+    if p.wait():\n+        raise IOError('Non-zero return value executing git cat-file')\n+    return overall.hexdigest()\n+\n+def main():\n+    # Parse arguments\n+    parser = argparse.ArgumentParser(usage='%(prog)s [options] [commit id]')\n+    parser.add_argument('--disable-tree-check', action='store_false', dest='verify_tree', help='disable SHA-512 tree check')\n+    parser.add_argument('--clean-merge', type=float, dest='clean_merge', default=float('inf'), help='Only check clean merge after <NUMBER> days ago (default: %(default)s)', metavar='NUMBER')\n+    parser.add_argument('commit', nargs='?', default='HEAD', help='Check clean merge up to commit <commit>')\n+    args = parser.parse_args()\n+\n+    # get directory of this program and read data files\n+    dirname = os.path.dirname(os.path.abspath(__file__))\n+    print(\"Using verify-commits data from \" + dirname)\n+    verified_root = open(dirname + \"/trusted-git-root\", \"r\").read().splitlines()[0]\n+    verified_sha512_root = open(dirname + \"/trusted-sha512-root-commit\", \"r\").read().splitlines()[0]\n+    revsig_allowed = open(dirname + \"/allow-revsig-commits\", \"r\").read().splitlines()\n+    unclean_merge_allowed = open(dirname + \"/allow-unclean-merge-commits\", \"r\").read().splitlines()\n+    incorrect_sha512_allowed = open(dirname + \"/allow-incorrect-sha512-commits\", \"r\").read().splitlines()\n+\n+    # Set commit and branch and set variables\n+    current_commit = args.commit\n+    if ' ' in current_commit:\n+        print(\"Commit must not contain spaces\", file=sys.stderr)\n+        sys.exit(1)\n+    verify_tree = args.verify_tree\n+    no_sha1 = True\n+    prev_commit = \"\"\n+    initial_commit = current_commit\n+    branch = subprocess.check_output([GIT, 'show', '-s', '--format=%H', initial_commit], universal_newlines=True).splitlines()[0]\n+\n+    # Iterate through commits\n+    while True:\n+        if current_commit == verified_root:\n+            print('There is a valid path from \"{}\" to {} where all commits are signed!'.format(initial_commit, verified_root))\n+            sys.exit(0)\n+        if current_commit == verified_sha512_root:\n+            if verify_tree:\n+                print(\"All Tree-SHA512s matched up to {}\".format(verified_sha512_root), file=sys.stderr)\n+            verify_tree = False\n+            no_sha1 = False\n+\n+        os.environ['BITCOIN_VERIFY_COMMITS_ALLOW_SHA1'] = \"0\" if no_sha1 else \"1\"\n+        os.environ['BITCOIN_VERIFY_COMMITS_ALLOW_REVSIG'] = \"1\" if current_commit in revsig_allowed else \"0\"\n+\n+        # Check that the commit (and parents) was signed with a trusted key\n+        if subprocess.call([GIT, '-c', 'gpg.program={}/gpg.sh'.format(dirname), 'verify-commit', current_commit], stdout=subprocess.DEVNULL):\n+            if prev_commit != \"\":\n+                print(\"No parent of {} was signed with a trusted key!\".format(prev_commit), file=sys.stderr)\n+                print(\"Parents are:\", file=sys.stderr)\n+                parents = subprocess.check_output([GIT, 'show', '-s', '--format=format:%P', prev_commit], universal_newlines=True).splitlines()[0].split(' ')\n+                for parent in parents:\n+                    subprocess.call([GIT, 'show', '-s', parent], stdout=sys.stderr)\n+            else:\n+                print(\"{} was not signed with a trusted key!\".format(current_commit), file=sys.stderr)\n+            sys.exit(1)\n+\n+        # Check the Tree-SHA512\n+        if (verify_tree or prev_commit == \"\") and current_commit not in incorrect_sha512_allowed:\n+            tree_hash = tree_sha512sum(current_commit)\n+            if (\"Tree-SHA512: {}\".format(tree_hash)) not in subprocess.check_output([GIT, 'show', '-s', '--format=format:%B', current_commit], universal_newlines=True).splitlines():\n+                print(\"Tree-SHA512 did not match for commit \" + current_commit, file=sys.stderr)\n+                sys.exit(1)\n+\n+        # Merge commits should only have two parents\n+        parents = subprocess.check_output([GIT, 'show', '-s', '--format=format:%P', current_commit], universal_newlines=True).splitlines()[0].split(' ')\n+        if len(parents) > 2:\n+            print(\"Commit {} is an octopus merge\".format(current_commit), file=sys.stderr)\n+            sys.exit(1)\n+\n+        # Check that the merge commit is clean\n+        commit_time = int(subprocess.check_output([GIT, 'show', '-s', '--format=format:%ct', current_commit], universal_newlines=True).splitlines()[0])\n+        check_merge = commit_time > time.time() - args.clean_merge * 24 * 60 * 60  # Only check commits in clean_merge days\n+        allow_unclean = current_commit in unclean_merge_allowed\n+        if len(parents) == 2 and check_merge and not allow_unclean:\n+            current_tree = subprocess.check_output([GIT, 'show', '--format=%T', current_commit], universal_newlines=True).splitlines()[0]\n+            subprocess.call([GIT, 'checkout', '--force', '--quiet', parents[0]])\n+            subprocess.call([GIT, 'merge', '--no-ff', '--quiet', parents[1]], stdout=subprocess.DEVNULL)\n+            recreated_tree = subprocess.check_output([GIT, 'show', '--format=format:%T', 'HEAD'], universal_newlines=True).splitlines()[0]\n+            if current_tree != recreated_tree:\n+                print(\"Merge commit {} is not clean\".format(current_commit), file=sys.stderr)\n+                subprocess.call([GIT, 'diff', current_commit])\n+                subprocess.call([GIT, 'checkout', '--force', '--quiet', branch])\n+                sys.exit(1)\n+            subprocess.call([GIT, 'checkout', '--force', '--quiet', branch])\n+\n+        prev_commit = current_commit\n+        current_commit = parents[0]\n+\n+if __name__ == '__main__':\n+    main()"
      },
      {
        "sha": "6415eea4d53fe805367f1cf7ed06d5e7339f55db",
        "filename": "contrib/verify-commits/verify-commits.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 153,
        "changes": 153,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e24bf1ce184bc8d5bba70a3f3e9c43c2df07f4d3/contrib/verify-commits/verify-commits.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e24bf1ce184bc8d5bba70a3f3e9c43c2df07f4d3/contrib/verify-commits/verify-commits.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/verify-commits.sh?ref=e24bf1ce184bc8d5bba70a3f3e9c43c2df07f4d3",
        "patch": "@@ -1,153 +0,0 @@\n-#!/bin/sh\n-# Copyright (c) 2014-2016 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-DIR=$(dirname \"$0\")\n-[ \"/${DIR#/}\" != \"$DIR\" ] && DIR=$(dirname \"$(pwd)/$0\")\n-\n-echo \"Using verify-commits data from ${DIR}\"\n-\n-VERIFIED_ROOT=$(cat \"${DIR}/trusted-git-root\")\n-VERIFIED_SHA512_ROOT=$(cat \"${DIR}/trusted-sha512-root-commit\")\n-REVSIG_ALLOWED=$(cat \"${DIR}/allow-revsig-commits\")\n-\n-HAVE_GNU_SHA512=1\n-[ ! -x \"$(which sha512sum)\" ] && HAVE_GNU_SHA512=0\n-\n-if [ x\"$1\" = \"x\" ]; then\n-\tCURRENT_COMMIT=\"HEAD\"\n-else\n-\tCURRENT_COMMIT=\"$1\"\n-fi\n-\n-if [ \"${CURRENT_COMMIT#* }\" != \"$CURRENT_COMMIT\" ]; then\n-\techo \"Commit must not contain spaces?\" > /dev/stderr\n-\texit 1\n-fi\n-\n-VERIFY_TREE=0\n-if [ x\"$2\" = \"x--tree-checks\" ]; then\n-\tVERIFY_TREE=1\n-fi\n-\n-NO_SHA1=1\n-PREV_COMMIT=\"\"\n-INITIAL_COMMIT=\"${CURRENT_COMMIT}\"\n-\n-BRANCH=\"$(git rev-parse --abbrev-ref HEAD)\"\n-\n-while true; do\n-\tif [ \"$CURRENT_COMMIT\" = $VERIFIED_ROOT ]; then\n-\t\techo \"There is a valid path from \\\"$INITIAL_COMMIT\\\" to $VERIFIED_ROOT where all commits are signed!\"\n-\t\texit 0\n-\tfi\n-\n-\tif [ \"$CURRENT_COMMIT\" = $VERIFIED_SHA512_ROOT ]; then\n-\t\tif [ \"$VERIFY_TREE\" = \"1\" ]; then\n-\t\t\techo \"All Tree-SHA512s matched up to $VERIFIED_SHA512_ROOT\" > /dev/stderr\n-\t\tfi\n-\t\tVERIFY_TREE=0\n-\t\tNO_SHA1=0\n-\tfi\n-\n-\tif [ \"$NO_SHA1\" = \"1\" ]; then\n-\t\texport BITCOIN_VERIFY_COMMITS_ALLOW_SHA1=0\n-\telse\n-\t\texport BITCOIN_VERIFY_COMMITS_ALLOW_SHA1=1\n-\tfi\n-\n-\tif [ \"${REVSIG_ALLOWED#*$CURRENT_COMMIT}\" != \"$REVSIG_ALLOWED\" ]; then\n-\t\texport BITCOIN_VERIFY_COMMITS_ALLOW_REVSIG=1\n-\telse\n-\t\texport BITCOIN_VERIFY_COMMITS_ALLOW_REVSIG=0\n-\tfi\n-\n-\tif ! git -c \"gpg.program=${DIR}/gpg.sh\" verify-commit \"$CURRENT_COMMIT\" > /dev/null; then\n-\t\tif [ \"$PREV_COMMIT\" != \"\" ]; then\n-\t\t\techo \"No parent of $PREV_COMMIT was signed with a trusted key!\" > /dev/stderr\n-\t\t\techo \"Parents are:\" > /dev/stderr\n-\t\t\tPARENTS=$(git show -s --format=format:%P $PREV_COMMIT)\n-\t\t\tfor PARENT in $PARENTS; do\n-\t\t\t\tgit show -s $PARENT > /dev/stderr\n-\t\t\tdone\n-\t\telse\n-\t\t\techo \"$CURRENT_COMMIT was not signed with a trusted key!\" > /dev/stderr\n-\t\tfi\n-\t\texit 1\n-\tfi\n-\n-\t# We always verify the top of the tree\n-\tif [ \"$VERIFY_TREE\" = 1 -o \"$PREV_COMMIT\" = \"\" ]; then\n-\t\tIFS_CACHE=\"$IFS\"\n-\t\tIFS='\n-'\n-\t\tfor LINE in $(git ls-tree --full-tree -r \"$CURRENT_COMMIT\"); do\n-\t\t\tcase \"$LINE\" in\n-\t\t\t\t\"12\"*)\n-\t\t\t\t\techo \"Repo contains symlinks\" > /dev/stderr\n-\t\t\t\t\tIFS=\"$IFS_CACHE\"\n-\t\t\t\t\texit 1\n-\t\t\t\t\t;;\n-\t\t\tesac\n-\t\tdone\n-\t\tIFS=\"$IFS_CACHE\"\n-\n-\t\tFILE_HASHES=\"\"\n-\t\tfor FILE in $(git ls-tree --full-tree -r --name-only \"$CURRENT_COMMIT\" | LC_ALL=C sort); do\n-\t\t\tif [ \"$HAVE_GNU_SHA512\" = 1 ]; then\n-\t\t\t\tHASH=$(git cat-file blob \"$CURRENT_COMMIT\":\"$FILE\" | sha512sum | { read FIRST _; echo $FIRST; } )\n-\t\t\telse\n-\t\t\t\tHASH=$(git cat-file blob \"$CURRENT_COMMIT\":\"$FILE\" | shasum -a 512 | { read FIRST _; echo $FIRST; } )\n-\t\t\tfi\n-\t\t\t[ \"$FILE_HASHES\" != \"\" ] && FILE_HASHES=\"$FILE_HASHES\"'\n-'\n-\t\t\tFILE_HASHES=\"$FILE_HASHES$HASH  $FILE\"\n-\t\tdone\n-\n-\t\tif [ \"$HAVE_GNU_SHA512\" = 1 ]; then\n-\t\t\tTREE_HASH=\"$(echo \"$FILE_HASHES\" | sha512sum)\"\n-\t\telse\n-\t\t\tTREE_HASH=\"$(echo \"$FILE_HASHES\" | shasum -a 512)\"\n-\t\tfi\n-\t\tHASH_MATCHES=0\n-\t\tMSG=\"$(git show -s --format=format:%B \"$CURRENT_COMMIT\" | tail -n1)\"\n-\n-\t\tcase \"$MSG  -\" in\n-\t\t\t\"Tree-SHA512: $TREE_HASH\")\n-\t\t\t\tHASH_MATCHES=1;;\n-\t\tesac\n-\n-\t\tif [ \"$HASH_MATCHES\" = \"0\" ]; then\n-\t\t\techo \"Tree-SHA512 did not match for commit $CURRENT_COMMIT\" > /dev/stderr\n-\t\t\texit 1\n-\t\tfi\n-\tfi\n-\n-\tPARENTS=$(git show -s --format=format:%P \"$CURRENT_COMMIT\")\n-\tPARENT1=${PARENTS%% *}\n-\tPARENT2=\"\"\n-\tif [ \"x$PARENT1\" != \"x$PARENTS\" ]; then\n-\t\tPARENTX=${PARENTS#* }\n-\t\tPARENT2=${PARENTX%% *}\n-\t\tif [ \"x$PARENT2\" != \"x$PARENTX\" ]; then\n-\t\t\techo \"Commit $CURRENT_COMMIT is an octopus merge\" > /dev/stderr\n-\t\t\texit 1\n-\t\tfi\n-\tfi\n-\tif [ \"x$PARENT2\" != \"x\" ]; then\n-\t\tCURRENT_TREE=\"$(git show --format=\"%T\" \"$CURRENT_COMMIT\")\"\n-\t\tgit checkout --force --quiet \"$PARENT1\"\n-\t\tgit merge --no-ff --quiet \"$PARENT2\" >/dev/null\n-\t\tRECREATED_TREE=\"$(git show --format=\"%T\" HEAD)\"\n-\t\tif [ \"$CURRENT_TREE\" != \"$RECREATED_TREE\" ]; then\n-\t\t\techo \"Merge commit $CURRENT_COMMIT is not clean\" > /dev/stderr\n-\t\t\tgit diff \"$CURRENT_COMMIT\"\n-\t\t\tgit checkout --force --quiet \"$BRANCH\"\n-\t\t\texit 1\n-\t\tfi\n-\t\tgit checkout --force --quiet \"$BRANCH\"\n-\tfi\n-\tPREV_COMMIT=\"$CURRENT_COMMIT\"\n-\tCURRENT_COMMIT=\"$PARENT1\"\n-done"
      }
    ]
  }
]