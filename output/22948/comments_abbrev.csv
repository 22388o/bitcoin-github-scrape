JeremyRubin,2021-09-11 14:53:11,"If anyone doesn't like the submask code, I could swap it for this algorithm (which is more efficient but not-obvious)  https://cp-algorithms.com/algebra/all-submasks.html#toc-tgt-0",https://github.com/bitcoin/bitcoin/pull/22948#issuecomment-917420245,917420245,
DrahtBot,2021-09-12 15:40:06,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22954](https://github.com/bitcoin/bitcoin/pull/22954) ([TESTS] Allow tx_invalid.json tests to include flag rules for if_",https://github.com/bitcoin/bitcoin/pull/22948#issuecomment-917659491,917659491,
JeremyRubin,2021-09-12 19:06:20,I added the textbook algorithm for this: feel free to test that the output is the same then I can squash.,https://github.com/bitcoin/bitcoin/pull/22948#issuecomment-917692386,917692386,
jonatack,2021-09-13 12:08:43,"@JeremyRubin Nice. The textbook algorithm produces the same values in the tx_invalid test but fewer values in the tx_valid test. Among the values that it does not return compared to your algo, only 2 or 3 of them are unique. WDYT?\n\n\n<details><summary>FancyPants version</summary><p>\n\n```\ntest/transaction_tests.cpp(194): Entering test case ""tx_valid""\n0\n2\n4\n6\n8\n10\n12\n0\n2",https://github.com/bitcoin/bitcoin/pull/22948#issuecomment-918126894,918126894,
JeremyRubin,2021-10-22 18:45:45,"Closing this for now -- needs more research/discussion on how to accomplish actually using the powerset properly, see https://github.com/bitcoin/bitcoin/pull/22948#discussion_r708517078",https://github.com/bitcoin/bitcoin/pull/22948#issuecomment-949881158,949881158,
JeremyRubin,2021-09-10 23:21:03,this check is actually probably superfluous with the iteration not including combos -1 (the all bits set).,https://github.com/bitcoin/bitcoin/pull/22948#discussion_r706516144,706516144,src/test/transaction_tests.cpp
JeremyRubin,2021-09-10 23:30:25,"update: it's not, because of the TrimFlags",https://github.com/bitcoin/bitcoin/pull/22948#discussion_r706518296,706518296,src/test/transaction_tests.cpp
esneider,2021-09-12 01:59:39,I think you might be missing a `* 8` here,https://github.com/bitcoin/bitcoin/pull/22948#discussion_r706728574,706728574,src/test/transaction_tests.cpp
esneider,2021-09-12 02:08:10,The doc is out of date now,https://github.com/bitcoin/bitcoin/pull/22948#discussion_r706729262,706729262,src/test/transaction_tests.cpp
esneider,2021-09-12 02:28:46,"Notice that `TrimFlags` only removes flags, so it is, indeed, superfluous:\n`flags_excluding_one âŠ† excluded_flags âŠ‚ flags`\n\nHaving said that, there's no harm in leaving it here.",https://github.com/bitcoin/bitcoin/pull/22948#discussion_r706730907,706730907,src/test/transaction_tests.cpp
esneider,2021-09-12 02:40:41,"Not sure if this is a problem, but notice that `TrimFlags` might cause the resulting `flag_combos` to have duplicate elements.\n\nEg, if `SCRIPT_VERIFY_P2SH` and `SCRIPT_VERIFY_WITNESS` are set in `flags`, the mapping done by `TrimFlags` will make 25% of the resulting elements duplicates.",https://github.com/bitcoin/bitcoin/pull/22948#discussion_r706731875,706731875,src/test/transaction_tests.cpp
JeremyRubin,2021-09-12 06:06:59,ðŸ¤¦ --> will fix,https://github.com/bitcoin/bitcoin/pull/22948#discussion_r706767923,706767923,src/test/transaction_tests.cpp
JeremyRubin,2021-09-12 06:08:35,yeah I could do a de-dup pass with TrimFlags. It makes more sense IMO to keep TrimFlags even if superfluos with the above as TrimFlags is a separate validity of flag combo check v.s. the dumb subset generator.,https://github.com/bitcoin/bitcoin/pull/22948#discussion_r706768096,706768096,src/test/transaction_tests.cpp
JeremyRubin,2021-09-12 06:13:53,i can't tell what line you are commenting on,https://github.com/bitcoin/bitcoin/pull/22948#discussion_r706768676,706768676,src/test/transaction_tests.cpp
esneider,2021-09-12 06:30:55,"Right, sorry about that.\n```c\n// Exclude each possible script verify flag from flags. Returns a set of these flag combinations\n// that are valid and without duplicates. For example: if flags=1111 and the 4 possible flags are\n// 0001, 0010, 0100, and 1000, this should return the set {0111, 1011, 1101, 1110}.\n```",https://github.com/bitcoin/bitcoin/pull/22948#discussion_r706770414,706770414,src/test/transaction_tests.cpp
jonatack,2021-09-12 14:53:17,"nit, clang-format\n```diff\n@@ -174,7 +174,7 @@ unsigned int FillFlags(unsigned int flags)\n std::set<unsigned int> GenerateAllSubMasks(unsigned int flags)\n {\n     std::vector<unsigned int> set_flags;\n-    const size_t n_flags = sizeof(unsigned int)*8;\n+    const size_t n_flags = sizeof(unsigned int) * 8;\n     set_flags.reserve(n_flags);\n@@ -184,10 +184,10 @@ std::set<unsigned int> ",https://github.com/bitcoin/bitcoin/pull/22948#discussion_r706849538,706849538,src/test/transaction_tests.cpp
jonatack,2021-09-12 14:58:26,"nit, can use braced initialization on these for type safety\n```diff\n-    const size_t n_flags = sizeof(unsigned int)*8;\n+    const size_t n_flags{sizeof(unsigned int) * 8};\n     set_flags.reserve(n_flags);\n     for (size_t i = 0; i < n_flags; ++i) {\n-        const unsigned int flag = flags & (1 << i);\n+        const unsigned int flag{flags & (1 << i)};\n```\n",https://github.com/bitcoin/bitcoin/pull/22948#discussion_r706850182,706850182,src/test/transaction_tests.cpp
jonatack,2021-09-12 15:02:30,"maybe hoist subtracting one to the declaration of `combos`\n```diff\n-    const size_t combos = 1 << set_flags.size();\n+    const size_t combos = (1 << set_flags.size()) - 1;\n     // skip last all set flags\n-    std::vector<unsigned int> all_flag_combos(combos-1);\n-    for (size_t i = 0; i < combos-1; ++i){\n+    std::vector<unsigned int> all_flag_combos(combos);\n+    for (size_t i = ",https://github.com/bitcoin/bitcoin/pull/22948#discussion_r706850718,706850718,src/test/transaction_tests.cpp
esneider,2021-09-14 04:48:09,"If I understand the intent of this code correctly, the idea is that given a set of chosen flags, we want to check that every possible superset of flags doesn't succeed. If that's so, I believe there's a problem with the current `FlipAll( GenerateAllSubMasks( flags ) )` logic for computing all possible supersets.\n\nEg, assuming 3-bit words, for `flags = 100`, we'll generate all `flags` sub masks",https://github.com/bitcoin/bitcoin/pull/22948#discussion_r707906373,707906373,src/test/transaction_tests.cpp
JeremyRubin,2021-09-14 18:13:51,"yeah you're totally right; i've been playing with it a bit as well and noticed that it seems to not be quite right (thanks @jonatack for pointing it out).\n\nThe logic is definitely off, and I think it may be intractible in this case since GenerateAllSubMasksWithoutTrimming(~flags) ends up being pretty big... with 20 it might be ok, but eventually there would be too many flags.",https://github.com/bitcoin/bitcoin/pull/22948#discussion_r708517078,708517078,src/test/transaction_tests.cpp
esneider,2021-09-15 05:08:59,"Makes sense. Maybe bound the amount of flipped bits? That way you can test some flag interactions, but bound the exponential growth. The bounding capability would also help to put a safeguard against exponential explosion in the tx_invalid test if there are too many set bits in the initial mask.",https://github.com/bitcoin/bitcoin/pull/22948#discussion_r708841974,708841974,src/test/transaction_tests.cpp
