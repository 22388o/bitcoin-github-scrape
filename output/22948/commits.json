[
  {
    "sha": "885bf41580c7a7043cc3445179c76aec3dca38c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ODViZjQxNTgwYzdhNzA0M2NjMzQ0NTE3OWM3NmFlYzNkY2EzOGM2",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-09-10T23:11:06Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-09-12T06:33:07Z"
      },
      "message": "[Tests] Compute the Power Set of all flags instead of one by one exclusion in transaction_tests.cpp",
      "tree": {
        "sha": "9412120134437d3ba2a96b292a880655cbb2fc9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9412120134437d3ba2a96b292a880655cbb2fc9f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/885bf41580c7a7043cc3445179c76aec3dca38c6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/885bf41580c7a7043cc3445179c76aec3dca38c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/885bf41580c7a7043cc3445179c76aec3dca38c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/885bf41580c7a7043cc3445179c76aec3dca38c6/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "77e77e8544c7df5981da9795cda5f1aaa99f73af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77e77e8544c7df5981da9795cda5f1aaa99f73af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/77e77e8544c7df5981da9795cda5f1aaa99f73af"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 30,
      "deletions": 13
    },
    "files": [
      {
        "sha": "d581444b51c2b782c46c3d98622d35cd78e2c020",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 13,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/885bf41580c7a7043cc3445179c76aec3dca38c6/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/885bf41580c7a7043cc3445179c76aec3dca38c6/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=885bf41580c7a7043cc3445179c76aec3dca38c6",
        "patch": "@@ -168,19 +168,36 @@ unsigned int FillFlags(unsigned int flags)\n     return flags;\n }\n \n-// Exclude each possible script verify flag from flags. Returns a set of these flag combinations\n-// that are valid and without duplicates. For example: if flags=1111 and the 4 possible flags are\n-// 0001, 0010, 0100, and 1000, this should return the set {0111, 1011, 1101, 1110}.\n+// Exclude each possible script verify flag from flags. Returns a set of all\n+// submasks.\n // Assumes that mapFlagNames contains all script verify flags.\n-std::set<unsigned int> ExcludeIndividualFlags(unsigned int flags)\n+std::set<unsigned int> GenerateAllSubMasks(unsigned int flags)\n {\n-    std::set<unsigned int> flags_combos;\n-    for (const auto& pair : mapFlagNames) {\n-        const unsigned int flags_excluding_one = TrimFlags(flags & ~(pair.second));\n-        if (flags != flags_excluding_one) {\n-            flags_combos.insert(flags_excluding_one);\n+    std::vector<unsigned int> set_flags;\n+    const size_t n_flags = sizeof(unsigned int)*8;\n+    set_flags.reserve(n_flags);\n+    for (size_t i = 0; i < n_flags; ++i) {\n+        const unsigned int flag = flags & (1 << i);\n+        if (flag) {\n+            set_flags.push_back(flag);\n+        }\n+    }\n+    const size_t combos = 1 << set_flags.size();\n+    // skip last all set flags\n+    std::vector<unsigned int> all_flag_combos(combos-1);\n+    for (size_t i = 0; i < combos-1; ++i){\n+        for(size_t j = 0; j < set_flags.size(); ++j) {\n+            if (i & (1<<j)) {\n+                all_flag_combos[i] |= set_flags[j];\n+            }\n         }\n     }\n+\n+    std::set<unsigned int> flags_combos;\n+    for (const unsigned int submask : all_flag_combos) {\n+        flags_combos.insert(TrimFlags(submask));\n+    }\n+    flags_combos.erase(flags);\n     return flags_combos;\n }\n \n@@ -266,8 +283,8 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n             }\n \n             // Check that flags are maximal: transaction should fail if any unset flags are set.\n-            for (auto flags_excluding_one : ExcludeIndividualFlags(verify_flags)) {\n-                if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, ~flags_excluding_one, txdata, strTest, /* expect_valid */ false)) {\n+            for (auto submask_flags : GenerateAllSubMasks(verify_flags)) {\n+                if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, ~submask_flags, txdata, strTest, /* expect_valid */ false)) {\n                     BOOST_ERROR(\"Too many flags unset: \" << strTest);\n                 }\n             }\n@@ -357,8 +374,8 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n             }\n \n             // Check that flags are minimal: transaction should succeed if any set flags are unset.\n-            for (auto flags_excluding_one : ExcludeIndividualFlags(verify_flags)) {\n-                if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags_excluding_one, txdata, strTest, /* expect_valid */ true)) {\n+            for (auto submask_flags : GenerateAllSubMasks(verify_flags)) {\n+                if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, submask_flags, txdata, strTest, /* expect_valid */ true)) {\n                     BOOST_ERROR(\"Too many flags set: \" << strTest);\n                 }\n             }"
      }
    ]
  },
  {
    "sha": "d185f36ede51723edf63eb7ae72add70dfd1e4ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMTg1ZjM2ZWRlNTE3MjNlZGY2M2ViN2FlNzJhZGQ3MGRmZDFlNGFl",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-09-12T17:34:59Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-09-12T17:34:59Z"
      },
      "message": "Squash: Use FancyPants Bit Twiddling Algorithm to Generate Submasks",
      "tree": {
        "sha": "f1437dfaf93d4fa55b57d48acafe9983ad71af9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1437dfaf93d4fa55b57d48acafe9983ad71af9e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d185f36ede51723edf63eb7ae72add70dfd1e4ae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d185f36ede51723edf63eb7ae72add70dfd1e4ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d185f36ede51723edf63eb7ae72add70dfd1e4ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d185f36ede51723edf63eb7ae72add70dfd1e4ae/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "885bf41580c7a7043cc3445179c76aec3dca38c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/885bf41580c7a7043cc3445179c76aec3dca38c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/885bf41580c7a7043cc3445179c76aec3dca38c6"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 12,
      "deletions": 24
    },
    "files": [
      {
        "sha": "062313d980fc2f488810f190cc212e1d54bed9cd",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 24,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d185f36ede51723edf63eb7ae72add70dfd1e4ae/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d185f36ede51723edf63eb7ae72add70dfd1e4ae/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=d185f36ede51723edf63eb7ae72add70dfd1e4ae",
        "patch": "@@ -173,31 +173,19 @@ unsigned int FillFlags(unsigned int flags)\n // Assumes that mapFlagNames contains all script verify flags.\n std::set<unsigned int> GenerateAllSubMasks(unsigned int flags)\n {\n-    std::vector<unsigned int> set_flags;\n-    const size_t n_flags = sizeof(unsigned int)*8;\n-    set_flags.reserve(n_flags);\n-    for (size_t i = 0; i < n_flags; ++i) {\n-        const unsigned int flag = flags & (1 << i);\n-        if (flag) {\n-            set_flags.push_back(flag);\n-        }\n-    }\n-    const size_t combos = 1 << set_flags.size();\n-    // skip last all set flags\n-    std::vector<unsigned int> all_flag_combos(combos-1);\n-    for (size_t i = 0; i < combos-1; ++i){\n-        for(size_t j = 0; j < set_flags.size(); ++j) {\n-            if (i & (1<<j)) {\n-                all_flag_combos[i] |= set_flags[j];\n-            }\n-        }\n-    }\n-\n-    std::set<unsigned int> flags_combos;\n-    for (const unsigned int submask : all_flag_combos) {\n-        flags_combos.insert(TrimFlags(submask));\n+    // Submask Algorithm adapted from\n+    // https://cp-algorithms.com/algebra/all-submasks.html\n+\n+    // The algorithm does not process 0, manually include it\n+    std::set<unsigned int> flags_combos{0};\n+    for (unsigned int s{flags}; s; s = (s - 1) & flags) {\n+        // TrimFlags before inserting into set so that we only have valid flag\n+        // combinations\n+        flags_combos.insert(TrimFlags(s));\n     }\n-    flags_combos.erase(flags);\n+    // remove flags from set (even if we skipped the first loop iteration above,\n+    // because of TrimFlags we must always erase here)\n+    flags_combos.erase(TrimFlags(flags));\n     return flags_combos;\n }\n "
      }
    ]
  }
]