[
  {
    "sha": "8711cc0c78fb15e49c6ab477a5d922fc51627873",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NzExY2MwYzc4ZmIxNWU0OWM2YWI0NzdhNWQ5MjJmYzUxNjI3ODcz",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2018-10-30T12:02:08Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2018-10-30T12:58:25Z"
      },
      "message": "qt: Improve BitcoinAmountField class\n\nThis adds functions for specifing a min/max value for a\nBitcoinAmountField. These options only affect user input, so it's still\npossible to use setValue to set values outside of the min/max range. The\nexisting value will not be changed when calling these functions even if\nit's out of range. The min/max range will be reinforced when the field\nloses focus.\nThis also adds `SetAllowEmpty` function which specifies if the field is\nallowed to be left empty by the user. If set to false the field will be\nset to the minimum allowed value if it's empty when focus is lost.",
      "tree": {
        "sha": "f2485d717386c9fa70b8d1574b2b0848c0d04d2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2485d717386c9fa70b8d1574b2b0848c0d04d2c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8711cc0c78fb15e49c6ab477a5d922fc51627873",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAlvYVXEACgkQQQEIES5+\nqB9jAg//SAV5aQs6xG2GvUuA+zaKNBgxhtzEa44HDP5qAVPL/jITBHEhfS9IA+5h\n7/6q0XhVo5sw69Lji4OZLlGzKz9eJnsMMWygkN7ynbS8SPRAr6K/e5LHV6vqtvb4\nwn2sAoWMH4n7rRyZyiltThIe5l+aFUU/wudr2+0G77q6dDhn1Vhr+lDsmvsTR9/4\nCqMxzh3FDmcALD74wQFdp164s9b1bu+v5Zqhrlpl77TyFm3T0nIv3pIOUsaciAUb\nvNBn27YpCHFTdttz2CKvupxlKL715auZiUNHZN/kn1ZnQz6azt8CndKXRE8MAKQx\nrlV7RKxJJFi9DuzjTmY6iu518v8Gc1JvftjFwtLrBYqCG2vvn8JCG4HEPeoy8h+p\nidsYiHvP0bpXqK2N2XplF8efhcQyUYK8fh4CtL8M8Kfb89UNGlib3haJmjrS08kF\nAOzoftdaNWWah5tUvkSMI4WyZ3R0BaiHCR9dGYco1bZxFbvSHhjKBE+jYl+0RCT9\nb913nAXmjhGFcYEPllOXW1L1wDAVDI4KHFJqqVMfNYFdu/WqeVwJBXvNBrtRcdcD\nJTKZBWOelYNsMJKNGP387gFTbzBw4alz1jl1P8oVzJyT5WTpeUo5Pp1SNRjGwWAQ\nklR7FWKAQQq4TjKLlMPX3sIVQmExAFAoqgM/j3oHsYYjrch3Uy0=\n=XYK2\n-----END PGP SIGNATURE-----",
        "payload": "tree f2485d717386c9fa70b8d1574b2b0848c0d04d2c\nparent 29f429dc7d4c7e6cd012e749cadf89e3138bcab3\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1540900928 +0200\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1540904305 +0200\n\nqt: Improve BitcoinAmountField class\n\nThis adds functions for specifing a min/max value for a\nBitcoinAmountField. These options only affect user input, so it's still\npossible to use setValue to set values outside of the min/max range. The\nexisting value will not be changed when calling these functions even if\nit's out of range. The min/max range will be reinforced when the field\nloses focus.\nThis also adds `SetAllowEmpty` function which specifies if the field is\nallowed to be left empty by the user. If set to false the field will be\nset to the minimum allowed value if it's empty when focus is lost.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8711cc0c78fb15e49c6ab477a5d922fc51627873",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8711cc0c78fb15e49c6ab477a5d922fc51627873",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8711cc0c78fb15e49c6ab477a5d922fc51627873/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29f429dc7d4c7e6cd012e749cadf89e3138bcab3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29f429dc7d4c7e6cd012e749cadf89e3138bcab3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29f429dc7d4c7e6cd012e749cadf89e3138bcab3"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 62,
      "deletions": 14
    },
    "files": [
      {
        "sha": "558fcf50bab7f7288c7824a6e997f95e36999ffd",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 53,
        "deletions": 14,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8711cc0c78fb15e49c6ab477a5d922fc51627873/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8711cc0c78fb15e49c6ab477a5d922fc51627873/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=8711cc0c78fb15e49c6ab477a5d922fc51627873",
        "patch": "@@ -23,9 +23,7 @@ class AmountSpinBox: public QAbstractSpinBox\n \n public:\n     explicit AmountSpinBox(QWidget *parent):\n-        QAbstractSpinBox(parent),\n-        currentUnit(BitcoinUnits::BTC),\n-        singleStep(100000) // satoshis\n+        QAbstractSpinBox(parent)\n     {\n         setAlignment(Qt::AlignRight);\n \n@@ -44,10 +42,19 @@ class AmountSpinBox: public QAbstractSpinBox\n \n     void fixup(QString &input) const\n     {\n-        bool valid = false;\n-        CAmount val = parse(input, &valid);\n-        if(valid)\n-        {\n+        bool valid;\n+        CAmount val;\n+\n+        if (input.isEmpty() && !m_allow_empty) {\n+            valid = true;\n+            val = m_min_amount;\n+        } else {\n+            valid = false;\n+            val = parse(input, &valid);\n+        }\n+\n+        if (valid) {\n+            val = qBound(m_min_amount, val, m_max_amount);\n             input = BitcoinUnits::format(currentUnit, val, false, BitcoinUnits::separatorAlways);\n             lineEdit()->setText(input);\n         }\n@@ -64,12 +71,27 @@ class AmountSpinBox: public QAbstractSpinBox\n         Q_EMIT valueChanged();\n     }\n \n+    void SetAllowEmpty(bool allow)\n+    {\n+        m_allow_empty = allow;\n+    }\n+\n+    void SetMinValue(const CAmount& value)\n+    {\n+        m_min_amount = value;\n+    }\n+\n+    void SetMaxValue(const CAmount& value)\n+    {\n+        m_max_amount = value;\n+    }\n+\n     void stepBy(int steps)\n     {\n         bool valid = false;\n         CAmount val = value(&valid);\n         val = val + steps * singleStep;\n-        val = qMin(qMax(val, CAmount(0)), BitcoinUnits::maxMoney());\n+        val = qBound(m_min_amount, val, m_max_amount);\n         setValue(val);\n     }\n \n@@ -125,9 +147,12 @@ class AmountSpinBox: public QAbstractSpinBox\n     }\n \n private:\n-    int currentUnit;\n-    CAmount singleStep;\n+    int currentUnit{BitcoinUnits::BTC};\n+    CAmount singleStep{CAmount(100000)}; // satoshis\n     mutable QSize cachedMinimumSizeHint;\n+    bool m_allow_empty{true};\n+    CAmount m_min_amount{CAmount(0)};\n+    CAmount m_max_amount{BitcoinUnits::maxMoney()};\n \n     /**\n      * Parse a string into a number of base monetary units and\n@@ -174,11 +199,10 @@ class AmountSpinBox: public QAbstractSpinBox\n         StepEnabled rv = 0;\n         bool valid = false;\n         CAmount val = value(&valid);\n-        if(valid)\n-        {\n-            if(val > 0)\n+        if (valid) {\n+            if (val > m_min_amount)\n                 rv |= StepDownEnabled;\n-            if(val < BitcoinUnits::maxMoney())\n+            if (val < m_max_amount)\n                 rv |= StepUpEnabled;\n         }\n         return rv;\n@@ -275,6 +299,21 @@ void BitcoinAmountField::setValue(const CAmount& value)\n     amount->setValue(value);\n }\n \n+void BitcoinAmountField::SetAllowEmpty(bool allow)\n+{\n+    amount->SetAllowEmpty(allow);\n+}\n+\n+void BitcoinAmountField::SetMinValue(const CAmount& value)\n+{\n+    amount->SetMinValue(value);\n+}\n+\n+void BitcoinAmountField::SetMaxValue(const CAmount& value)\n+{\n+    amount->SetMaxValue(value);\n+}\n+\n void BitcoinAmountField::setReadOnly(bool fReadOnly)\n {\n     amount->setReadOnly(fReadOnly);"
      },
      {
        "sha": "650481e30d514e370671c19aac0323184ee0672a",
        "filename": "src/qt/bitcoinamountfield.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8711cc0c78fb15e49c6ab477a5d922fc51627873/src/qt/bitcoinamountfield.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8711cc0c78fb15e49c6ab477a5d922fc51627873/src/qt/bitcoinamountfield.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.h?ref=8711cc0c78fb15e49c6ab477a5d922fc51627873",
        "patch": "@@ -31,6 +31,15 @@ class BitcoinAmountField: public QWidget\n     CAmount value(bool *value=0) const;\n     void setValue(const CAmount& value);\n \n+    /** If allow empty is set to false the field will be set to the minimum allowed value if left empty. **/\n+    void SetAllowEmpty(bool allow);\n+\n+    /** Set the minimum value in satoshis **/\n+    void SetMinValue(const CAmount& value);\n+\n+    /** Set the maximum value in satoshis **/\n+    void SetMaxValue(const CAmount& value);\n+\n     /** Set single step in satoshis **/\n     void setSingleStep(const CAmount& step);\n "
      }
    ]
  },
  {
    "sha": "a16f44c040642432e234ad7317b00fe829c2d9e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMTZmNDRjMDQwNjQyNDMyZTIzNGFkNzMxN2IwMGZlODI5YzJkOWU3",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2018-10-30T13:09:10Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2018-10-30T14:31:57Z"
      },
      "message": "qt: Remove \"Pay only required fee\" checkbox\n\nThe custom fee input box now has a minimum value equal to the minimum\nrequired fee. Before a value below the minimum fee could be entered\nwhich was confusing since the minimum fee would still be paid even\nthough a lower amount was entered.",
      "tree": {
        "sha": "8f343e54106d3d43d423654597c4d51dd567f461",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f343e54106d3d43d423654597c4d51dd567f461"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a16f44c040642432e234ad7317b00fe829c2d9e7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAlvYa10ACgkQQQEIES5+\nqB/hcQ/+NalXuHzLNzC/PH3+kQBXnfuPQwFX6Gszm2QiqgQWYpCvgJ2cy5ANG+Wr\ncs63mqyIKaWLwFkQZFHVPf4rzZQNEodHVTgcusn8W1Vvv+xNFWBdmivhECL/ij51\nXzfyhSVULSowcW/WTmYBf2WXDoofxO3p3pG9HZWbpWZaMVmmF1kpBWrO2xX7Oan/\nXU9p79r9bJQnZngX5e2yCK5/jA1m26U4Ah4JXAmQpijOoC7h4cgbpRu8OoeQDnCR\n9Ox7378o/ewmJnJfKP8c+AUmW+CzVQbvUgfK2mP9hgy/FUWyElfmndVdTN9NrdLE\nWZO10Kq3+I9hZswn2XnZy7Jmb4An2bQCM11Mr6T13aCbh9Yo4RkVNzVRrtMmj8QO\nZ2lUqfKrA9Iu2aGR9uRubIahdq+068wmvUyheIR0ekWrtakUX/XGMzsDcwh3KjYt\nKc4jTQDfyBI4aRCMMv+Wl1oVJp8A2WR3T/Lcqr/jiFPfAIT6Mxp5Rk8AKtI9XqCB\nmKbvbdiaZ3TZC6S2VAozdHGD34gtKP/lxdY61jPcvLL18ueyqSTPKN1HMj8Rpcem\ny8+qZU5rdn9dVq12dFhqFbvml6GE5fmBa6BMpmHzMzj9LnK+hRqLY25JC3rfQJPL\nQXYRs6GGZL10Db5rnRy7hH52rUkGjzz2EZ9qYlnWQz6tp7giQSM=\n=kMr9\n-----END PGP SIGNATURE-----",
        "payload": "tree 8f343e54106d3d43d423654597c4d51dd567f461\nparent 8711cc0c78fb15e49c6ab477a5d922fc51627873\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1540904950 +0200\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1540909917 +0200\n\nqt: Remove \"Pay only required fee\" checkbox\n\nThe custom fee input box now has a minimum value equal to the minimum\nrequired fee. Before a value below the minimum fee could be entered\nwhich was confusing since the minimum fee would still be paid even\nthough a lower amount was entered.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a16f44c040642432e234ad7317b00fe829c2d9e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a16f44c040642432e234ad7317b00fe829c2d9e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a16f44c040642432e234ad7317b00fe829c2d9e7/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8711cc0c78fb15e49c6ab477a5d922fc51627873",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8711cc0c78fb15e49c6ab477a5d922fc51627873",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8711cc0c78fb15e49c6ab477a5d922fc51627873"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 13,
      "deletions": 67
    },
    "files": [
      {
        "sha": "386d5592818b1ca889f41cfda8b7d9650f515168",
        "filename": "src/qt/forms/sendcoinsdialog.ui",
        "status": "modified",
        "additions": 3,
        "deletions": 38,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a16f44c040642432e234ad7317b00fe829c2d9e7/src/qt/forms/sendcoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a16f44c040642432e234ad7317b00fe829c2d9e7/src/qt/forms/sendcoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsdialog.ui?ref=a16f44c040642432e234ad7317b00fe829c2d9e7",
        "patch": "@@ -878,28 +878,15 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of \"100 satoshis p\n                <item>\n                 <layout class=\"QHBoxLayout\" name=\"horizontalLayoutFee8\">\n                  <item>\n-                  <widget class=\"QCheckBox\" name=\"checkBoxMinimumFee\">\n-                   <property name=\"toolTip\">\n-                    <string>Paying only the minimum fee is just fine as long as there is less transaction volume than space in the blocks. But be aware that this can end up in a never confirming transaction once there is more demand for bitcoin transactions than the network can process.</string>\n-                   </property>\n-                   <property name=\"text\">\n-                    <string/>\n-                   </property>\n-                  </widget>\n-                 </item>\n-                 <item>\n-                  <widget class=\"QLabel\" name=\"labelMinFeeWarning\">\n+                  <widget class=\"QLabel\" name=\"labelCustomFeeWarning\">\n                    <property name=\"enabled\">\n                     <bool>true</bool>\n                    </property>\n                    <property name=\"toolTip\">\n-                    <string>Paying only the minimum fee is just fine as long as there is less transaction volume than space in the blocks. But be aware that this can end up in a never confirming transaction once there is more demand for bitcoin transactions than the network can process.</string>\n+                    <string>When there is less transaction volume than space in the blocks, miners as well as relaying nodes may enforce a minimum fee. Paying only this minimum fee is just fine, but be aware that this can result in a never confirming transaction once there is more demand for bitcoin transactions than the network can process.</string>\n                    </property>\n                    <property name=\"text\">\n-                    <string>(read the tooltip)</string>\n-                   </property>\n-                   <property name=\"margin\">\n-                    <number>5</number>\n+                    <string>A too low fee might result in a never confirming transaction (read the tooltip)</string>\n                    </property>\n                   </widget>\n                  </item>\n@@ -992,9 +979,6 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of \"100 satoshis p\n                    <property name=\"text\">\n                     <string/>\n                    </property>\n-                   <property name=\"margin\">\n-                    <number>2</number>\n-                   </property>\n                   </widget>\n                  </item>\n                  <item>\n@@ -1009,9 +993,6 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of \"100 satoshis p\n                    <property name=\"text\">\n                     <string>(Smart fee not initialized yet. This usually takes a few blocks...)</string>\n                    </property>\n-                   <property name=\"margin\">\n-                    <number>2</number>\n-                   </property>\n                   </widget>\n                  </item>\n                  <item>\n@@ -1038,24 +1019,8 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of \"100 satoshis p\n                      <property name=\"text\">\n                       <string>Confirmation time target:</string>\n                      </property>\n-                     <property name=\"margin\">\n-                      <number>2</number>\n-                     </property>\n                     </widget>\n                    </item>\n-                   <item>\n-                    <spacer name=\"verticalSpacer_3\">\n-                     <property name=\"orientation\">\n-                      <enum>Qt::Vertical</enum>\n-                     </property>\n-                     <property name=\"sizeHint\" stdset=\"0\">\n-                      <size>\n-                       <width>1</width>\n-                       <height>1</height>\n-                      </size>\n-                     </property>\n-                    </spacer>\n-                   </item>\n                   </layout>\n                  </item>\n                  <item>"
      },
      {
        "sha": "65db0280b70e7bceda3d17399d3458bd632b4a32",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 27,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a16f44c040642432e234ad7317b00fe829c2d9e7/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a16f44c040642432e234ad7317b00fe829c2d9e7/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=a16f44c040642432e234ad7317b00fe829c2d9e7",
        "patch": "@@ -119,13 +119,11 @@ SendCoinsDialog::SendCoinsDialog(const PlatformStyle *_platformStyle, QWidget *p\n         settings.setValue(\"nSmartFeeSliderPosition\", 0);\n     if (!settings.contains(\"nTransactionFee\"))\n         settings.setValue(\"nTransactionFee\", (qint64)DEFAULT_PAY_TX_FEE);\n-    if (!settings.contains(\"fPayOnlyMinFee\"))\n-        settings.setValue(\"fPayOnlyMinFee\", false);\n     ui->groupFee->setId(ui->radioSmartFee, 0);\n     ui->groupFee->setId(ui->radioCustomFee, 1);\n     ui->groupFee->button((int)std::max(0, std::min(1, settings.value(\"nFeeRadio\").toInt())))->setChecked(true);\n+    ui->customFee->SetAllowEmpty(false);\n     ui->customFee->setValue(settings.value(\"nTransactionFee\").toLongLong());\n-    ui->checkBoxMinimumFee->setChecked(settings.value(\"fPayOnlyMinFee\").toBool());\n     minimizeFeeSection(settings.value(\"fFeeSectionMinimized\").toBool());\n }\n \n@@ -174,14 +172,15 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n         connect(ui->groupFee, static_cast<void (QButtonGroup::*)(int)>(&QButtonGroup::buttonClicked), this, &SendCoinsDialog::updateFeeSectionControls);\n         connect(ui->groupFee, static_cast<void (QButtonGroup::*)(int)>(&QButtonGroup::buttonClicked), this, &SendCoinsDialog::coinControlUpdateLabels);\n         connect(ui->customFee, &BitcoinAmountField::valueChanged, this, &SendCoinsDialog::coinControlUpdateLabels);\n-        connect(ui->checkBoxMinimumFee, &QCheckBox::stateChanged, this, &SendCoinsDialog::setMinimumFee);\n-        connect(ui->checkBoxMinimumFee, &QCheckBox::stateChanged, this, &SendCoinsDialog::updateFeeSectionControls);\n-        connect(ui->checkBoxMinimumFee, &QCheckBox::stateChanged, this, &SendCoinsDialog::coinControlUpdateLabels);\n         connect(ui->optInRBF, &QCheckBox::stateChanged, this, &SendCoinsDialog::updateSmartFeeLabel);\n         connect(ui->optInRBF, &QCheckBox::stateChanged, this, &SendCoinsDialog::coinControlUpdateLabels);\n-        ui->customFee->setSingleStep(model->wallet().getRequiredFee(1000));\n+        CAmount requiredFee = model->wallet().getRequiredFee(1000);\n+        ui->customFee->SetMinValue(requiredFee);\n+        if (ui->customFee->value() < requiredFee) {\n+            ui->customFee->setValue(requiredFee);\n+        }\n+        ui->customFee->setSingleStep(requiredFee);\n         updateFeeSectionControls();\n-        updateMinFeeLabel();\n         updateSmartFeeLabel();\n \n         // set default rbf checkbox state\n@@ -210,7 +209,6 @@ SendCoinsDialog::~SendCoinsDialog()\n     settings.setValue(\"nFeeRadio\", ui->groupFee->checkedId());\n     settings.setValue(\"nConfTarget\", getConfTargetForIndex(ui->confTargetSelector->currentIndex()));\n     settings.setValue(\"nTransactionFee\", (qint64)ui->customFee->value());\n-    settings.setValue(\"fPayOnlyMinFee\", ui->checkBoxMinimumFee->isChecked());\n \n     delete ui;\n }\n@@ -542,7 +540,6 @@ void SendCoinsDialog::updateDisplayUnit()\n {\n     setBalance(model->wallet().getBalances());\n     ui->customFee->setDisplayUnit(model->getOptionsModel()->getDisplayUnit());\n-    updateMinFeeLabel();\n     updateSmartFeeLabel();\n }\n \n@@ -642,22 +639,16 @@ void SendCoinsDialog::useAvailableBalance(SendCoinsEntry* entry)\n     }\n }\n \n-void SendCoinsDialog::setMinimumFee()\n-{\n-    ui->customFee->setValue(model->wallet().getRequiredFee(1000));\n-}\n-\n void SendCoinsDialog::updateFeeSectionControls()\n {\n     ui->confTargetSelector      ->setEnabled(ui->radioSmartFee->isChecked());\n     ui->labelSmartFee           ->setEnabled(ui->radioSmartFee->isChecked());\n     ui->labelSmartFee2          ->setEnabled(ui->radioSmartFee->isChecked());\n     ui->labelSmartFee3          ->setEnabled(ui->radioSmartFee->isChecked());\n     ui->labelFeeEstimation      ->setEnabled(ui->radioSmartFee->isChecked());\n-    ui->checkBoxMinimumFee      ->setEnabled(ui->radioCustomFee->isChecked());\n-    ui->labelMinFeeWarning      ->setEnabled(ui->radioCustomFee->isChecked());\n-    ui->labelCustomPerKilobyte  ->setEnabled(ui->radioCustomFee->isChecked() && !ui->checkBoxMinimumFee->isChecked());\n-    ui->customFee               ->setEnabled(ui->radioCustomFee->isChecked() && !ui->checkBoxMinimumFee->isChecked());\n+    ui->labelCustomFeeWarning   ->setEnabled(ui->radioCustomFee->isChecked());\n+    ui->labelCustomPerKilobyte  ->setEnabled(ui->radioCustomFee->isChecked());\n+    ui->customFee               ->setEnabled(ui->radioCustomFee->isChecked());\n }\n \n void SendCoinsDialog::updateFeeMinimizedLabel()\n@@ -672,14 +663,6 @@ void SendCoinsDialog::updateFeeMinimizedLabel()\n     }\n }\n \n-void SendCoinsDialog::updateMinFeeLabel()\n-{\n-    if (model && model->getOptionsModel())\n-        ui->checkBoxMinimumFee->setText(tr(\"Pay only the required fee of %1\").arg(\n-            BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), model->wallet().getRequiredFee(1000)) + \"/kB\")\n-        );\n-}\n-\n void SendCoinsDialog::updateCoinControlState(CCoinControl& ctrl)\n {\n     if (ui->radioCustomFee->isChecked()) {"
      },
      {
        "sha": "e1ebc77d59c9e71e527e7028e948bb15757ebb65",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a16f44c040642432e234ad7317b00fe829c2d9e7/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a16f44c040642432e234ad7317b00fe829c2d9e7/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=a16f44c040642432e234ad7317b00fe829c2d9e7",
        "patch": "@@ -92,9 +92,7 @@ private Q_SLOTS:\n     void coinControlClipboardBytes();\n     void coinControlClipboardLowOutput();\n     void coinControlClipboardChange();\n-    void setMinimumFee();\n     void updateFeeSectionControls();\n-    void updateMinFeeLabel();\n     void updateSmartFeeLabel();\n \n Q_SIGNALS:"
      }
    ]
  }
]