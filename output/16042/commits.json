[
  {
    "sha": "fa6ad7a5ecee758ecc60cb70e7fcaedd4a5da14f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTZhZDdhNWVjZWU3NThlY2M2MGNiNzBlN2ZjYWVkZDRhNWRhMTRm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-18T21:45:42Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-17T16:19:27Z"
      },
      "message": "test: Bump MAX_NODES to 12",
      "tree": {
        "sha": "a13f9c2060ae8cc06762b0975e88fdf290cc21bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a13f9c2060ae8cc06762b0975e88fdf290cc21bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa6ad7a5ecee758ecc60cb70e7fcaedd4a5da14f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhu6Qv/fcKfL6QIUaxukZ7Wo5WkgrCix+A7WPtHeKKxZr4vUX3RcQIqz3QvAgxn\nj5f2qABOeqJMZA94Rye99ObVdnuGkELqQAa2ajg7qhCdNiUFrvdi4ashPDJGdItB\nXuW/tXDTOvdi8rnP+2Qmi6N6vQ0fvLMto+jEFF36QXFI6dAoPxZ3iYoGOdCZH5Dn\ni9trTLbgnZKuzB05QH3+FsbffBIoYGK4W/XgblYWvynNFptoFEFyuOvcW+x8uHg6\nOmdwhWzzbxam4SaaY7GpOxNqxQ2hDFx9DUYZ7Agz3/ZGbWFbkW4EZPE6G8S32k1i\n2Fb//b67PKZ/Y0Q1I+0N+upWSKecXEa84tdtg5oyeTqLEnJgwCHZIALukM/z7C8+\nfWzZGvgREaobSMPL/Vg/88OvTexvWGV3VGUz3f+xWROHR4gcdPCz5hpqMhLviGe5\nxh8uijphV2J8+RGyyuRMZqD0h9VwgvS5nFze0T7MT3GuBB4h3M4C0kRXsGL2zeJO\n6Ak6IAvr\n=N7e5\n-----END PGP SIGNATURE-----",
        "payload": "tree a13f9c2060ae8cc06762b0975e88fdf290cc21bb\nparent a822a0e4f6317f98cde6f0d5abe952b4e8992ac9\nauthor MarcoFalke <falke.marco@gmail.com> 1555623942 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1558109967 -0400\n\ntest: Bump MAX_NODES to 12\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6ad7a5ecee758ecc60cb70e7fcaedd4a5da14f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa6ad7a5ecee758ecc60cb70e7fcaedd4a5da14f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6ad7a5ecee758ecc60cb70e7fcaedd4a5da14f/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a822a0e4f6317f98cde6f0d5abe952b4e8992ac9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a822a0e4f6317f98cde6f0d5abe952b4e8992ac9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a822a0e4f6317f98cde6f0d5abe952b4e8992ac9"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "88a17afdee03b4beeaf296feddf03149412221f6",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6ad7a5ecee758ecc60cb70e7fcaedd4a5da14f/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6ad7a5ecee758ecc60cb70e7fcaedd4a5da14f/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=fa6ad7a5ecee758ecc60cb70e7fcaedd4a5da14f",
        "patch": "@@ -23,6 +23,7 @@\n \n from .authproxy import JSONRPCException\n from .util import (\n+    MAX_NODES,\n     append_config,\n     delete_cookie_file,\n     get_rpc_proxy,\n@@ -124,7 +125,11 @@ def get_deterministic_priv_key(self):\n             AddressKeyPair('myzuPxRwsf3vvGzEuzPfK9Nf2RfwauwYe6', 'cQMpDLJwA8DBe9NcQbdoSb1BhmFxVjWD5gRyrLZCtpuF9Zi3a9RK'),\n             AddressKeyPair('mumwTaMtbxEPUswmLBBN3vM9oGRtGBrys8', 'cSXmRKXVcoouhNNVpcNKFfxsTsToY5pvB9DVsFksF1ENunTzRKsy'),\n             AddressKeyPair('mpV7aGShMkJCZgbW7F6iZgrvuPHjZjH9qg', 'cSoXt6tm3pqy43UMabY6eUTmR3eSUYFtB2iNQDGgb3VUnRsQys2k'),\n+            AddressKeyPair('mq4fBNdckGtvY2mijd9am7DRsbRB4KjUkf', 'cN55daf1HotwBAgAKWVgDcoppmUNDtQSfb7XLutTLeAgVc3u8hik'),\n+            AddressKeyPair('mpFAHDjX7KregM3rVotdXzQmkbwtbQEnZ6', 'cT7qK7g1wkYEMvKowd2ZrX1E5f6JQ7TM246UfqbCiyF7kZhorpX3'),\n+            AddressKeyPair('mzRe8QZMfGi58KyWCse2exxEFry2sfF2Y7', 'cPiRWE8KMjTRxH1MWkPerhfoHFn5iHPWVK5aPqjW8NxmdwenFinJ'),\n         ]\n+        assert len(PRIV_KEYS) == MAX_NODES\n         return PRIV_KEYS[self.index]\n \n     def get_mem_rss_kilobytes(self):"
      },
      {
        "sha": "26215083fb2522589bafe3a6374a17ca59a34b11",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6ad7a5ecee758ecc60cb70e7fcaedd4a5da14f/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6ad7a5ecee758ecc60cb70e7fcaedd4a5da14f/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=fa6ad7a5ecee758ecc60cb70e7fcaedd4a5da14f",
        "patch": "@@ -228,7 +228,7 @@ def wait_until(predicate, *, attempts=float('inf'), timeout=float('inf'), lock=N\n ############################################\n \n # The maximum number of nodes a single test can spawn\n-MAX_NODES = 8\n+MAX_NODES = 12\n # Don't assign rpc or p2p ports lower than this\n PORT_MIN = 11000\n # The number of ports to \"reserve\" for p2p and rpc, each"
      }
    ]
  },
  {
    "sha": "fa473303972b7dad600d949dc9b303d8136cb7e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTQ3MzMwMzk3MmI3ZGFkNjAwZDk0OWRjOWIzMDNkODEzNmNiN2U3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-17T17:07:07Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-17T17:21:48Z"
      },
      "message": "test: Speed up cache creation",
      "tree": {
        "sha": "edcce5b254e3e7377a77ade0e7a2a9dde4ac6581",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/edcce5b254e3e7377a77ade0e7a2a9dde4ac6581"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa473303972b7dad600d949dc9b303d8136cb7e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjAOwv/Q0G6r9w5sHa91kGGoGDy0APgMpD61rv7yj9zB1h1N7TvYxoPfOEhI8Bg\nr9eEJGocRBFdYtHei4LShS8StxHJDXsbxrFArT1fNkUzHqaex9uEWQZN74TOHXDr\n+NGHAYCZFepCa6HzPYnJNTsM34Ct9G4lGHckdVrMms1n0iwYGKcwhpT6MIXxrCpk\ncW1UeFjogx2drTFMGKlTtF3RFZi2DX1Kc/I5P8kRSAwQ5Si8STrdLgkbq3808w2G\nn8xwbFFnQyx257aPNcahr+Fu8rmCH94+YC4qCyozlijRfGzvxydE6tkV+a4AKZhr\ncyclBfluhAh/3iySnpUcQefg+44/cau4doI/s5uFztfHh7f6bRckfrdUguQjqp6S\nZnARxMR5DpcfBXJ7PMrH4pwsXgLfC9wnQed7hFFkFPTLNjhqTlQAp7Zb1l7+HBl+\nawvGFWthHNXk0vtPLO+IioFznS4r46bNObPHrnDF2wDRtYWUdWgJ204TL01J0p1a\nPjG2XaMl\n=XjdX\n-----END PGP SIGNATURE-----",
        "payload": "tree edcce5b254e3e7377a77ade0e7a2a9dde4ac6581\nparent fa6ad7a5ecee758ecc60cb70e7fcaedd4a5da14f\nauthor MarcoFalke <falke.marco@gmail.com> 1558112827 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1558113708 -0400\n\ntest: Speed up cache creation\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa473303972b7dad600d949dc9b303d8136cb7e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa473303972b7dad600d949dc9b303d8136cb7e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa473303972b7dad600d949dc9b303d8136cb7e7/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa6ad7a5ecee758ecc60cb70e7fcaedd4a5da14f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6ad7a5ecee758ecc60cb70e7fcaedd4a5da14f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa6ad7a5ecee758ecc60cb70e7fcaedd4a5da14f"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 37,
      "deletions": 51
    },
    "files": [
      {
        "sha": "aa674f9ebea168a27387730ee7181128193ab0c2",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 29,
        "deletions": 44,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa473303972b7dad600d949dc9b303d8136cb7e7/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa473303972b7dad600d949dc9b303d8136cb7e7/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=fa473303972b7dad600d949dc9b303d8136cb7e7",
        "patch": "@@ -29,7 +29,6 @@\n     disconnect_nodes,\n     get_datadir_path,\n     initialize_datadir,\n-    p2p_port,\n     sync_blocks,\n     sync_mempools,\n )\n@@ -468,48 +467,34 @@ def _start_logging(self):\n     def _initialize_chain(self):\n         \"\"\"Initialize a pre-mined blockchain for use by the test.\n \n-        Create a cache of a 199-block-long chain (with wallet) for MAX_NODES\n+        Create a cache of a 199-block-long chain\n         Afterward, create num_nodes copies from the cache.\"\"\"\n \n+        CACHE_NODE_ID = 0  # Use node 0 to create the cache for all other nodes\n+        cache_node_dir = get_datadir_path(self.options.cachedir, CACHE_NODE_ID)\n         assert self.num_nodes <= MAX_NODES\n-        create_cache = False\n-        for i in range(MAX_NODES):\n-            if not os.path.isdir(get_datadir_path(self.options.cachedir, i)):\n-                create_cache = True\n-                break\n-\n-        if create_cache:\n-            self.log.debug(\"Creating data directories from cached datadir\")\n-\n-            # find and delete old cache directories if any exist\n-            for i in range(MAX_NODES):\n-                if os.path.isdir(get_datadir_path(self.options.cachedir, i)):\n-                    shutil.rmtree(get_datadir_path(self.options.cachedir, i))\n-\n-            # Create cache directories, run bitcoinds:\n-            for i in range(MAX_NODES):\n-                datadir = initialize_datadir(self.options.cachedir, i)\n-                args = [self.options.bitcoind, \"-datadir=\" + datadir, '-disablewallet']\n-                if i > 0:\n-                    args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n-                self.nodes.append(TestNode(\n-                    i,\n-                    get_datadir_path(self.options.cachedir, i),\n+\n+        if not os.path.isdir(cache_node_dir):\n+            self.log.debug(\"Creating cache directory {}\".format(cache_node_dir))\n+\n+            initialize_datadir(self.options.cachedir, CACHE_NODE_ID)\n+            self.nodes.append(\n+                TestNode(\n+                    CACHE_NODE_ID,\n+                    cache_node_dir,\n                     extra_conf=[\"bind=127.0.0.1\"],\n-                    extra_args=[],\n+                    extra_args=['-disablewallet'],\n                     rpchost=None,\n                     timewait=self.rpc_timeout,\n                     bitcoind=self.options.bitcoind,\n                     bitcoin_cli=self.options.bitcoincli,\n                     coverage_dir=None,\n                     cwd=self.options.tmpdir,\n                 ))\n-                self.nodes[i].args = args\n-                self.start_node(i)\n+            self.start_node(CACHE_NODE_ID)\n \n             # Wait for RPC connections to be ready\n-            for node in self.nodes:\n-                node.wait_for_rpc_connection()\n+            self.nodes[CACHE_NODE_ID].wait_for_rpc_connection()\n \n             # Create a 199-block-long chain; each of the 4 first nodes\n             # gets 25 mature blocks and 25 immature.\n@@ -518,29 +503,29 @@ def _initialize_chain(self):\n             # This is needed so that we are out of IBD when the test starts,\n             # see the tip age check in IsInitialBlockDownload().\n             for i in range(8):\n-                self.nodes[0].generatetoaddress(25 if i != 7 else 24, self.nodes[i % 4].get_deterministic_priv_key().address)\n-            self.sync_blocks()\n+                self.nodes[CACHE_NODE_ID].generatetoaddress(\n+                    nblocks=25 if i != 7 else 24,\n+                    address=TestNode.PRIV_KEYS[i % 4].address,\n+                )\n \n-            for n in self.nodes:\n-                assert_equal(n.getblockchaininfo()[\"blocks\"], 199)\n+            assert_equal(self.nodes[CACHE_NODE_ID].getblockchaininfo()[\"blocks\"], 199)\n \n-            # Shut them down, and clean up cache directories:\n+            # Shut it down, and clean up cache directories:\n             self.stop_nodes()\n             self.nodes = []\n \n-            def cache_path(n, *paths):\n-                return os.path.join(get_datadir_path(self.options.cachedir, n), \"regtest\", *paths)\n+            def cache_path(*paths):\n+                return os.path.join(cache_node_dir, \"regtest\", *paths)\n \n-            for i in range(MAX_NODES):\n-                os.rmdir(cache_path(i, 'wallets'))  # Remove empty wallets dir\n-                for entry in os.listdir(cache_path(i)):\n-                    if entry not in ['chainstate', 'blocks']:\n-                        os.remove(cache_path(i, entry))\n+            os.rmdir(cache_path('wallets'))  # Remove empty wallets dir\n+            for entry in os.listdir(cache_path()):\n+                if entry not in ['chainstate', 'blocks']:  # Only keep chainstate and blocks folder\n+                    os.remove(cache_path(entry))\n \n         for i in range(self.num_nodes):\n-            from_dir = get_datadir_path(self.options.cachedir, i)\n+            self.log.debug(\"Copy cache directory {} to node {}\".format(cache_node_dir, i))\n             to_dir = get_datadir_path(self.options.tmpdir, i)\n-            shutil.copytree(from_dir, to_dir)\n+            shutil.copytree(cache_node_dir, to_dir)\n             initialize_datadir(self.options.tmpdir, i)  # Overwrite port/rpcport in bitcoin.conf\n \n     def _initialize_chain_clean(self):"
      },
      {
        "sha": "3311377090c7a19f40f9359b3021928cf73e1af2",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa473303972b7dad600d949dc9b303d8136cb7e7/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa473303972b7dad600d949dc9b303d8136cb7e7/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=fa473303972b7dad600d949dc9b303d8136cb7e7",
        "patch": "@@ -111,10 +111,8 @@ def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, cove\n \n         self.p2ps = []\n \n-    def get_deterministic_priv_key(self):\n-        \"\"\"Return a deterministic priv key in base58, that only depends on the node's index\"\"\"\n-        AddressKeyPair = collections.namedtuple('AddressKeyPair', ['address', 'key'])\n-        PRIV_KEYS = [\n+    AddressKeyPair = collections.namedtuple('AddressKeyPair', ['address', 'key'])\n+    PRIV_KEYS = [\n             # address , privkey\n             AddressKeyPair('mjTkW3DjgyZck4KbiRusZsqTgaYTxdSz6z', 'cVpF924EspNh8KjYsfhgY96mmxvT6DgdWiTYMtMjuM74hJaU5psW'),\n             AddressKeyPair('msX6jQXvxiNhx3Q62PKeLPrhrqZQdSimTg', 'cUxsWyKyZ9MAQTaAhUQWJmBbSvHMwSmuv59KgxQV7oZQU3PXN3KE'),\n@@ -128,9 +126,12 @@ def get_deterministic_priv_key(self):\n             AddressKeyPair('mq4fBNdckGtvY2mijd9am7DRsbRB4KjUkf', 'cN55daf1HotwBAgAKWVgDcoppmUNDtQSfb7XLutTLeAgVc3u8hik'),\n             AddressKeyPair('mpFAHDjX7KregM3rVotdXzQmkbwtbQEnZ6', 'cT7qK7g1wkYEMvKowd2ZrX1E5f6JQ7TM246UfqbCiyF7kZhorpX3'),\n             AddressKeyPair('mzRe8QZMfGi58KyWCse2exxEFry2sfF2Y7', 'cPiRWE8KMjTRxH1MWkPerhfoHFn5iHPWVK5aPqjW8NxmdwenFinJ'),\n-        ]\n-        assert len(PRIV_KEYS) == MAX_NODES\n-        return PRIV_KEYS[self.index]\n+    ]\n+\n+    def get_deterministic_priv_key(self):\n+        \"\"\"Return a deterministic priv key in base58, that only depends on the node's index\"\"\"\n+        assert len(self.PRIV_KEYS) == MAX_NODES\n+        return self.PRIV_KEYS[self.index]\n \n     def get_mem_rss_kilobytes(self):\n         \"\"\"Get the memory usage (RSS) per `ps`."
      }
    ]
  }
]