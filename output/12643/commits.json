[
  {
    "sha": "fa1436c42958688bcc48418f5b434a80a53fd5ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTE0MzZjNDI5NTg2ODhiY2M0ODQxOGY1YjQzNGE4MGE1M2ZkNWFj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-03-08T02:21:57Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-03-13T00:32:04Z"
      },
      "message": "[qa] util: Remove unused sync_chain",
      "tree": {
        "sha": "cf92f14faa2a2cc2cad39c42dcb2f3af954f9a66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf92f14faa2a2cc2cad39c42dcb2f3af954f9a66"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa1436c42958688bcc48418f5b434a80a53fd5ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJapxwEAAoJEM4rdWl+aaVI1RcMAJkrAuytNt8LO0x9+SLNNQRy\nhCOOf6jEZht1QnfGrUmWJnTX/EIu0XF7qIdUf1tOQgNUV/o7hxrswl1CaQPXmYpF\nkpqF0gnmILbk3uucMzt+KL7+S5H1dlz0ENCzs06WQa0k/paz0RCxxrWxjI8YsTx1\n5190Do/Deyn+m+0wFi/aEmjLLSy+tmiU6I42nwgdVs1ZhXy3U95Dt0MtWpaMPqY3\nTTlQkO46s8ZI2n13SXxkVHNU+wwA00IdJ/cYiy/EVOki7PA95BsYCoyHobVctSo4\nNYfvUrEp5y+EVH9y1fkR/l5f2RcPMO3NjSzZWsQ6fH3HieYp+NPjHqqF9U8GKuZ6\nEh0Aomq15HHjiB3Vsmi2XSnAFZ8dP3af1gtCigWRfKEenb+Dn/SrMHRzfHv4WqDu\nQBDdiYc+D0tkfyOcCGZWAwH3WpYY2i+TiSjRJqYg7wI+bnKZGQl6Bl5RyIXkoKB0\nWKWjhWU9SPSOOryWsI7US6SPAWt6wxISq41Cz3ey6w==\n=Eoq5\n-----END PGP SIGNATURE-----",
        "payload": "tree cf92f14faa2a2cc2cad39c42dcb2f3af954f9a66\nparent dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b\nauthor MarcoFalke <falke.marco@gmail.com> 1520475717 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1520901124 -0400\n\n[qa] util: Remove unused sync_chain\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1436c42958688bcc48418f5b434a80a53fd5ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa1436c42958688bcc48418f5b434a80a53fd5ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1436c42958688bcc48418f5b434a80a53fd5ac/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 10,
      "deletions": 36
    },
    "files": [
      {
        "sha": "796a2edbefbf5f515482c757f74df793a78c427a",
        "filename": "test/functional/rpc_preciousblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1436c42958688bcc48418f5b434a80a53fd5ac/test/functional/rpc_preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1436c42958688bcc48418f5b434a80a53fd5ac/test/functional/rpc_preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_preciousblock.py?ref=fa1436c42958688bcc48418f5b434a80a53fd5ac",
        "patch": "@@ -8,7 +8,6 @@\n from test_framework.util import (\n     assert_equal,\n     connect_nodes_bi,\n-    sync_chain,\n     sync_blocks,\n )\n \n@@ -72,7 +71,7 @@ def run_test(self):\n         assert_equal(self.nodes[0].getbestblockhash(), hashC)\n         self.log.info(\"Make Node1 prefer block C\")\n         self.nodes[1].preciousblock(hashC)\n-        sync_chain(self.nodes[0:2]) # wait because node 1 may not have downloaded hashC\n+        sync_blocks(self.nodes[0:2])  # wait because node 1 may not have downloaded hashC\n         assert_equal(self.nodes[1].getbestblockhash(), hashC)\n         self.log.info(\"Make Node1 prefer block G again\")\n         self.nodes[1].preciousblock(hashG)"
      },
      {
        "sha": "a123c7cdb158a3361077780bf9ddfcd9d212a8b8",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 9,
        "deletions": 34,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1436c42958688bcc48418f5b434a80a53fd5ac/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1436c42958688bcc48418f5b434a80a53fd5ac/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=fa1436c42958688bcc48418f5b434a80a53fd5ac",
        "patch": "@@ -361,54 +361,29 @@ def sync_blocks(rpc_connections, *, wait=1, timeout=60):\n     one node already synced to the latest, stable tip, otherwise there's a\n     chance it might return before all nodes are stably synced.\n     \"\"\"\n-    # Use getblockcount() instead of waitforblockheight() to determine the\n-    # initial max height because the two RPCs look at different internal global\n-    # variables (chainActive vs latestBlock) and the former gets updated\n-    # earlier.\n-    maxheight = max(x.getblockcount() for x in rpc_connections)\n-    start_time = cur_time = time.time()\n-    while cur_time <= start_time + timeout:\n-        tips = [r.waitforblockheight(maxheight, int(wait * 1000)) for r in rpc_connections]\n-        if all(t[\"height\"] == maxheight for t in tips):\n-            if all(t[\"hash\"] == tips[0][\"hash\"] for t in tips):\n-                return\n-            raise AssertionError(\"Block sync failed, mismatched block hashes:{}\".format(\n-                                 \"\".join(\"\\n  {!r}\".format(tip) for tip in tips)))\n-        cur_time = time.time()\n-    raise AssertionError(\"Block sync to height {} timed out:{}\".format(\n-                         maxheight, \"\".join(\"\\n  {!r}\".format(tip) for tip in tips)))\n-\n-def sync_chain(rpc_connections, *, wait=1, timeout=60):\n-    \"\"\"\n-    Wait until everybody has the same best block\n-    \"\"\"\n-    while timeout > 0:\n+    stop_time = time.time() + timeout\n+    while time.time() <= stop_time:\n         best_hash = [x.getbestblockhash() for x in rpc_connections]\n-        if best_hash == [best_hash[0]] * len(best_hash):\n+        if best_hash.count(best_hash[0]) == len(rpc_connections):\n             return\n         time.sleep(wait)\n-        timeout -= wait\n-    raise AssertionError(\"Chain sync failed: Best block hashes don't match\")\n+    raise AssertionError(\"Block sync timed out:{}\".format(\"\".join(\"\\n  {!r}\".format(b) for b in best_hash)))\n \n def sync_mempools(rpc_connections, *, wait=1, timeout=60, flush_scheduler=True):\n     \"\"\"\n     Wait until everybody has the same transactions in their memory\n     pools\n     \"\"\"\n-    while timeout > 0:\n-        pool = set(rpc_connections[0].getrawmempool())\n-        num_match = 1\n-        for i in range(1, len(rpc_connections)):\n-            if set(rpc_connections[i].getrawmempool()) == pool:\n-                num_match = num_match + 1\n-        if num_match == len(rpc_connections):\n+    stop_time = time.time() + timeout\n+    while time.time() <= stop_time:\n+        pool = [set(r.getrawmempool()) for r in rpc_connections]\n+        if pool.count(pool[0]) == len(rpc_connections):\n             if flush_scheduler:\n                 for r in rpc_connections:\n                     r.syncwithvalidationinterfacequeue()\n             return\n         time.sleep(wait)\n-        timeout -= wait\n-    raise AssertionError(\"Mempool sync failed\")\n+    raise AssertionError(\"Mempool sync timed out:{}\".format(\"\".join(\"\\n  {!r}\".format(m) for m in pool)))\n \n # Transaction/Block functions\n #############################"
      }
    ]
  }
]