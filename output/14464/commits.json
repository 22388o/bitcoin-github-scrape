[
  {
    "sha": "d998ca40e1420ccbb0155e3f863b9fbed523cc00",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTk4Y2E0MGUxNDIwY2NiYjAxNTVlM2Y4NjNiOWZiZWQ1MjNjYzAw",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-10-30T16:01:04Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2019-03-07T09:24:45Z"
      },
      "message": "refactor: Make CCheckQueue interruptible\n\nThis commit add a Interrupt function for CCheckQueue that it can handle interrupt by itself instead of relying on boost thread interrupt",
      "tree": {
        "sha": "77f2c222e52f657361d308661cd7f616df2d6a3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77f2c222e52f657361d308661cd7f616df2d6a3c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d998ca40e1420ccbb0155e3f863b9fbed523cc00",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d998ca40e1420ccbb0155e3f863b9fbed523cc00",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d998ca40e1420ccbb0155e3f863b9fbed523cc00",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d998ca40e1420ccbb0155e3f863b9fbed523cc00/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3515612e069e3730f173a08e60b99f96b174188d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3515612e069e3730f173a08e60b99f96b174188d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3515612e069e3730f173a08e60b99f96b174188d"
      }
    ],
    "stats": {
      "total": 138,
      "additions": 93,
      "deletions": 45
    },
    "files": [
      {
        "sha": "ff10b3b9611c9bab9b79bc94a9c56377c0358f98",
        "filename": "src/bench/checkqueue.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d998ca40e1420ccbb0155e3f863b9fbed523cc00/src/bench/checkqueue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d998ca40e1420ccbb0155e3f863b9fbed523cc00/src/bench/checkqueue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkqueue.cpp?ref=d998ca40e1420ccbb0155e3f863b9fbed523cc00",
        "patch": "@@ -56,7 +56,7 @@ static void CCheckQueueSpeedPrevectorJob(benchmark::State& state)\n         // it is done explicitly here for clarity\n         control.Wait();\n     }\n-    tg.interrupt_all();\n+    queue.Interrupt();\n     tg.join_all();\n }\n BENCHMARK(CCheckQueueSpeedPrevectorJob, 1400);"
      },
      {
        "sha": "22bf5e865fe1daedb1d600b3517cf6eb14a29007",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 21,
        "deletions": 5,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d998ca40e1420ccbb0155e3f863b9fbed523cc00/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d998ca40e1420ccbb0155e3f863b9fbed523cc00/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=d998ca40e1420ccbb0155e3f863b9fbed523cc00",
        "patch": "@@ -52,6 +52,9 @@ class CCheckQueue\n     //! The temporary evaluation result.\n     bool fAllOk;\n \n+    //! The interrupt flag.\n+    bool interrupted;\n+\n     /**\n      * Number of verifications that haven't completed yet.\n      * This includes elements that are no longer queued, but still in the\n@@ -90,14 +93,17 @@ class CCheckQueue\n                         nTotal--;\n                         bool fRet = fAllOk;\n                         // reset the status for new work later\n-                        if (fMaster)\n-                            fAllOk = true;\n+                        fAllOk = true;\n                         // return the current status\n                         return fRet;\n+                    } else if (!fMaster && interrupted) {\n+                        nTotal--;\n+                        return false;\n+                    } else {\n+                        nIdle++;\n+                        cond.wait(lock); // wait\n+                        nIdle--;\n                     }\n-                    nIdle++;\n-                    cond.wait(lock); // wait\n-                    nIdle--;\n                 }\n                 // Decide how many work units to process now.\n                 // * Do not try to do everything at once, but aim for increasingly smaller batches so\n@@ -157,6 +163,16 @@ class CCheckQueue\n             condWorker.notify_all();\n     }\n \n+    void Interrupt()\n+    {\n+        {\n+            boost::unique_lock<boost::mutex>(ControlMutex);\n+            boost::unique_lock<boost::mutex>(mutex);\n+            interrupted = true;\n+        }\n+        condWorker.notify_all();\n+    }\n+\n     ~CCheckQueue()\n     {\n     }"
      },
      {
        "sha": "342ed5933d86568ab4ea076d514a220ce734fc11",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d998ca40e1420ccbb0155e3f863b9fbed523cc00/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d998ca40e1420ccbb0155e3f863b9fbed523cc00/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d998ca40e1420ccbb0155e3f863b9fbed523cc00",
        "patch": "@@ -178,6 +178,7 @@ static CScheduler scheduler;\n \n void Interrupt()\n {\n+    InterruptScriptCheck();\n     InterruptHTTPServer();\n     InterruptHTTPRPC();\n     InterruptRPC();\n@@ -206,6 +207,7 @@ void Shutdown(InitInterfaces& interfaces)\n     RenameThread(\"bitcoin-shutoff\");\n     mempool.AddTransactionsUpdated(1);\n \n+    StopScriptCheck();\n     StopHTTPRPC();\n     StopREST();\n     StopRPC();\n@@ -1272,10 +1274,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n     InitScriptExecutionCache();\n \n     LogPrintf(\"Using %u threads for script verification\\n\", nScriptCheckThreads);\n-    if (nScriptCheckThreads) {\n-        for (int i=0; i<nScriptCheckThreads-1; i++)\n-            threadGroup.create_thread(&ThreadScriptCheck);\n-    }\n+    StartScriptCheck();\n \n     // Start the lightweight task scheduler thread\n     CScheduler::Function serviceLoop = std::bind(&CScheduler::serviceQueue, &scheduler);"
      },
      {
        "sha": "02dc08caef34b2e0a2318ffd130fc205c19c980c",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d998ca40e1420ccbb0155e3f863b9fbed523cc00/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d998ca40e1420ccbb0155e3f863b9fbed523cc00/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=d998ca40e1420ccbb0155e3f863b9fbed523cc00",
        "patch": "@@ -170,7 +170,7 @@ static void Correct_Queue_range(std::vector<size_t> range)\n             BOOST_TEST_MESSAGE(\"Failure on trial \" << i << \" expected, got \" << FakeCheckCheckCompletion::n_calls);\n         }\n     }\n-    tg.interrupt_all();\n+    small_queue->Interrupt();\n     tg.join_all();\n }\n \n@@ -239,7 +239,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Catches_Failure)\n             BOOST_REQUIRE(success);\n         }\n     }\n-    tg.interrupt_all();\n+    fail_queue->Interrupt();\n     tg.join_all();\n }\n // Test that a block validation which fails does not interfere with\n@@ -265,7 +265,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Recovers_From_Failure)\n             BOOST_REQUIRE(r != end_fails);\n         }\n     }\n-    tg.interrupt_all();\n+    fail_queue->Interrupt();\n     tg.join_all();\n }\n \n@@ -298,7 +298,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_UniqueCheck)\n     for (size_t i = 0; i < COUNT; ++i)\n         r = r && UniqueCheck::results.count(i) == 1;\n     BOOST_REQUIRE(r);\n-    tg.interrupt_all();\n+    queue->Interrupt();\n     tg.join_all();\n }\n \n@@ -333,7 +333,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Memory)\n         }\n         BOOST_REQUIRE_EQUAL(MemoryCheck::fake_allocated_memory, 0U);\n     }\n-    tg.interrupt_all();\n+    queue->Interrupt();\n     tg.join_all();\n }\n \n@@ -376,7 +376,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_FrozenCleanup)\n     FrozenCleanupCheck::cv.notify_one();\n     // Wait for control to finish\n     t0.join();\n-    tg.interrupt_all();\n+    queue->Interrupt();\n     tg.join_all();\n     BOOST_REQUIRE(!fails);\n }"
      },
      {
        "sha": "05a2991a7369c4e61a3135c91bdc0472403825a9",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d998ca40e1420ccbb0155e3f863b9fbed523cc00/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d998ca40e1420ccbb0155e3f863b9fbed523cc00/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=d998ca40e1420ccbb0155e3f863b9fbed523cc00",
        "patch": "@@ -91,15 +91,15 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n     }\n \n     nScriptCheckThreads = 3;\n-    for (int i = 0; i < nScriptCheckThreads - 1; i++)\n-        threadGroup.create_thread(&ThreadScriptCheck);\n-\n+    StartScriptCheck();\n     g_banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     g_connman = MakeUnique<CConnman>(0x1337, 0x1337); // Deterministic randomness for tests.\n }\n \n TestingSetup::~TestingSetup()\n {\n+    InterruptScriptCheck();\n+    StopScriptCheck();\n     threadGroup.interrupt_all();\n     threadGroup.join_all();\n     GetMainSignals().FlushBackgroundCallbacks();"
      },
      {
        "sha": "76005a8b5d93d2872e2a47c45a777d51a85714ba",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 23,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d998ca40e1420ccbb0155e3f863b9fbed523cc00/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d998ca40e1420ccbb0155e3f863b9fbed523cc00/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=d998ca40e1420ccbb0155e3f863b9fbed523cc00",
        "patch": "@@ -464,33 +464,35 @@ BOOST_AUTO_TEST_CASE(test_big_witness_transaction)\n     PrecomputedTransactionData txdata(tx);\n     boost::thread_group threadGroup;\n     CCheckQueue<CScriptCheck> scriptcheckqueue(128);\n-    CCheckQueueControl<CScriptCheck> control(&scriptcheckqueue);\n-\n-    for (int i=0; i<20; i++)\n-        threadGroup.create_thread(std::bind(&CCheckQueue<CScriptCheck>::Thread, std::ref(scriptcheckqueue)));\n+    {\n+        CCheckQueueControl<CScriptCheck> control(&scriptcheckqueue);\n+\n+        for (int i = 0; i < 20; i++)\n+            threadGroup.create_thread(std::bind(&CCheckQueue<CScriptCheck>::Thread, std::ref(scriptcheckqueue)));\n+\n+        std::vector<Coin> coins;\n+        for (uint32_t i = 0; i < mtx.vin.size(); i++) {\n+            Coin coin;\n+            coin.nHeight = 1;\n+            coin.fCoinBase = false;\n+            coin.out.nValue = 1000;\n+            coin.out.scriptPubKey = scriptPubKey;\n+            coins.emplace_back(std::move(coin));\n+        }\n \n-    std::vector<Coin> coins;\n-    for(uint32_t i = 0; i < mtx.vin.size(); i++) {\n-        Coin coin;\n-        coin.nHeight = 1;\n-        coin.fCoinBase = false;\n-        coin.out.nValue = 1000;\n-        coin.out.scriptPubKey = scriptPubKey;\n-        coins.emplace_back(std::move(coin));\n-    }\n+        for (uint32_t i = 0; i < mtx.vin.size(); i++) {\n+            std::vector<CScriptCheck> vChecks;\n+            CScriptCheck check(coins[tx.vin[i].prevout.n].out, tx, i, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false, &txdata);\n+            vChecks.push_back(CScriptCheck());\n+            check.swap(vChecks.back());\n+            control.Add(vChecks);\n+        }\n \n-    for(uint32_t i = 0; i < mtx.vin.size(); i++) {\n-        std::vector<CScriptCheck> vChecks;\n-        CScriptCheck check(coins[tx.vin[i].prevout.n].out, tx, i, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false, &txdata);\n-        vChecks.push_back(CScriptCheck());\n-        check.swap(vChecks.back());\n-        control.Add(vChecks);\n+        bool controlCheck = control.Wait();\n+        assert(controlCheck);\n     }\n \n-    bool controlCheck = control.Wait();\n-    assert(controlCheck);\n-\n-    threadGroup.interrupt_all();\n+    scriptcheckqueue.Interrupt();\n     threadGroup.join_all();\n }\n "
      },
      {
        "sha": "5e11e9ab11003e03563695c5237330aabb9ee00c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 1,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d998ca40e1420ccbb0155e3f863b9fbed523cc00/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d998ca40e1420ccbb0155e3f863b9fbed523cc00/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=d998ca40e1420ccbb0155e3f863b9fbed523cc00",
        "patch": "@@ -1664,11 +1664,38 @@ static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, CValidationState&\n \n static CCheckQueue<CScriptCheck> scriptcheckqueue(128);\n \n-void ThreadScriptCheck() {\n+static std::vector<std::thread> g_thread_scriptcheck_workers;\n+\n+static void ThreadScriptCheck()\n+{\n     RenameThread(\"bitcoin-scriptch\");\n     scriptcheckqueue.Thread();\n }\n \n+void StartScriptCheck()\n+{\n+    LogPrintf(\"Using %u threads for script verification\\n\", nScriptCheckThreads);\n+    if (nScriptCheckThreads) {\n+        for (int i = 0; i < nScriptCheckThreads - 1; i++) {\n+            g_thread_scriptcheck_workers.emplace_back(ThreadScriptCheck);\n+        }\n+    }\n+}\n+\n+void InterruptScriptCheck()\n+{\n+    scriptcheckqueue.Interrupt();\n+}\n+\n+void StopScriptCheck()\n+{\n+    for (auto& th : g_thread_scriptcheck_workers) {\n+        th.join();\n+    }\n+    g_thread_scriptcheck_workers.clear();\n+}\n+\n+// Protected by cs_main\n VersionBitsCache versionbitscache GUARDED_BY(cs_main);\n \n int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params)"
      },
      {
        "sha": "6b8198056742002c1cbd7be63dd0958402d4c567",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d998ca40e1420ccbb0155e3f863b9fbed523cc00/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d998ca40e1420ccbb0155e3f863b9fbed523cc00/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=d998ca40e1420ccbb0155e3f863b9fbed523cc00",
        "patch": "@@ -257,8 +257,12 @@ bool LoadBlockIndex(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs\n bool LoadChainTip(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n /** Unload database information */\n void UnloadBlockIndex();\n-/** Run an instance of the script checking thread */\n-void ThreadScriptCheck();\n+/** Start script checking threads */\n+void StartScriptCheck();\n+/** Interrupt script checking threads */\n+void InterruptScriptCheck();\n+/** Stop script checking threads */\n+void StopScriptCheck();\n /** Check whether we are doing an initial block download (synchronizing from disk or network) */\n bool IsInitialBlockDownload();\n /** Retrieve a transaction (from memory pool, or from disk, if possible) */"
      }
    ]
  },
  {
    "sha": "8a6e1a953148bd377514ee1de8dd6d2f7c5452be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YTZlMWE5NTMxNDhiZDM3NzUxNGVlMWRlOGRkNmQyZjdjNTQ1MmJl",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-10-30T16:26:26Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2019-03-07T09:24:45Z"
      },
      "message": "refactor: Drop boost in CCheckQueue\n\nreplace boost::mutex with debuggable Mutex\nreplace boost::condition_variable with std::condition_variable\nadd const specifier to fMaster and nBatchSize\nadd clang thread safety attributes\nmove init value of member of CCheckQueue from constructor to definition",
      "tree": {
        "sha": "48964a565d608cc31041b24555fac1b30499f2a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/48964a565d608cc31041b24555fac1b30499f2a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a6e1a953148bd377514ee1de8dd6d2f7c5452be",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a6e1a953148bd377514ee1de8dd6d2f7c5452be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8a6e1a953148bd377514ee1de8dd6d2f7c5452be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a6e1a953148bd377514ee1de8dd6d2f7c5452be/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d998ca40e1420ccbb0155e3f863b9fbed523cc00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d998ca40e1420ccbb0155e3f863b9fbed523cc00",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d998ca40e1420ccbb0155e3f863b9fbed523cc00"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 17,
      "deletions": 22
    },
    "files": [
      {
        "sha": "add3c75e3f88ac892f0f08f09c3c269d6bb83651",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 17,
        "deletions": 21,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a6e1a953148bd377514ee1de8dd6d2f7c5452be/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a6e1a953148bd377514ee1de8dd6d2f7c5452be/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=8a6e1a953148bd377514ee1de8dd6d2f7c5452be",
        "patch": "@@ -10,9 +10,6 @@\n #include <algorithm>\n #include <vector>\n \n-#include <boost/thread/condition_variable.hpp>\n-#include <boost/thread/mutex.hpp>\n-\n template <typename T>\n class CCheckQueueControl;\n \n@@ -31,51 +28,51 @@ class CCheckQueue\n {\n private:\n     //! Mutex to protect the inner state\n-    boost::mutex mutex;\n+    Mutex mutex;\n \n     //! Worker threads block on this when out of work\n-    boost::condition_variable condWorker;\n+    std::condition_variable condWorker;\n \n     //! Master thread blocks on this when out of work\n-    boost::condition_variable condMaster;\n+    std::condition_variable condMaster;\n \n     //! The queue of elements to be processed.\n     //! As the order of booleans doesn't matter, it is used as a LIFO (stack)\n-    std::vector<T> queue;\n+    std::vector<T> queue GUARDED_BY(mutex);\n \n     //! The number of workers (including the master) that are idle.\n-    int nIdle;\n+    int nIdle GUARDED_BY(mutex) = 0;\n \n     //! The total number of workers (including the master).\n-    int nTotal;\n+    int nTotal GUARDED_BY(mutex) = 0;\n \n     //! The temporary evaluation result.\n-    bool fAllOk;\n+    bool fAllOk GUARDED_BY(mutex) = true;\n \n     //! The interrupt flag.\n-    bool interrupted;\n+    bool interrupted GUARDED_BY(mutex) = false;\n \n     /**\n      * Number of verifications that haven't completed yet.\n      * This includes elements that are no longer queued, but still in the\n      * worker's own batches.\n      */\n-    unsigned int nTodo;\n+    unsigned int nTodo GUARDED_BY(mutex) = 0;\n \n     //! The maximum number of elements to be processed in one batch\n-    unsigned int nBatchSize;\n+    const unsigned int nBatchSize;\n \n     /** Internal function that does bulk of the verification work. */\n-    bool Loop(bool fMaster = false)\n+    bool Loop(const bool fMaster = false)\n     {\n-        boost::condition_variable& cond = fMaster ? condMaster : condWorker;\n+        std::condition_variable& cond = fMaster ? condMaster : condWorker;\n         std::vector<T> vChecks;\n         vChecks.reserve(nBatchSize);\n         unsigned int nNow = 0;\n         bool fOk = true;\n         do {\n             {\n-                boost::unique_lock<boost::mutex> lock(mutex);\n+                WAIT_LOCK(mutex, lock);\n                 // first do the clean-up of the previous loop run (allowing us to do it in the same critsect)\n                 if (nNow) {\n                     fAllOk &= fOk;\n@@ -131,10 +128,10 @@ class CCheckQueue\n \n public:\n     //! Mutex to ensure only one concurrent CCheckQueueControl\n-    boost::mutex ControlMutex;\n+    Mutex ControlMutex;\n \n     //! Create a new check queue\n-    explicit CCheckQueue(unsigned int nBatchSizeIn) : nIdle(0), nTotal(0), fAllOk(true), nTodo(0), nBatchSize(nBatchSizeIn) {}\n+    explicit CCheckQueue(unsigned int nBatchSizeIn) : nBatchSize(nBatchSizeIn) {}\n \n     //! Worker thread\n     void Thread()\n@@ -151,7 +148,7 @@ class CCheckQueue\n     //! Add a batch of checks to the queue\n     void Add(std::vector<T>& vChecks)\n     {\n-        boost::unique_lock<boost::mutex> lock(mutex);\n+        LOCK(mutex);\n         for (T& check : vChecks) {\n             queue.push_back(T());\n             check.swap(queue.back());\n@@ -166,8 +163,7 @@ class CCheckQueue\n     void Interrupt()\n     {\n         {\n-            boost::unique_lock<boost::mutex>(ControlMutex);\n-            boost::unique_lock<boost::mutex>(mutex);\n+            LOCK2(ControlMutex, mutex);\n             interrupted = true;\n         }\n         condWorker.notify_all();"
      },
      {
        "sha": "de776ebe7bdce40a6b90a2f277eb482925da6f7f",
        "filename": "test/lint/lint-includes.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a6e1a953148bd377514ee1de8dd6d2f7c5452be/test/lint/lint-includes.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a6e1a953148bd377514ee1de8dd6d2f7c5452be/test/lint/lint-includes.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-includes.sh?ref=8a6e1a953148bd377514ee1de8dd6d2f7c5452be",
        "patch": "@@ -67,7 +67,6 @@ EXPECTED_BOOST_INCLUDES=(\n     boost/test/unit_test.hpp\n     boost/thread.hpp\n     boost/thread/condition_variable.hpp\n-    boost/thread/mutex.hpp\n     boost/thread/thread.hpp\n     boost/variant.hpp\n     boost/variant/apply_visitor.hpp"
      }
    ]
  },
  {
    "sha": "f8145436add63054edd0f21fa495bf68ffe991e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODE0NTQzNmFkZDYzMDU0ZWRkMGYyMWZhNDk1YmY2OGZmZTk5MWU1",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-10-31T04:08:18Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2019-03-07T09:24:46Z"
      },
      "message": "refactor: Make CCheckQueue worker threads be owned by itself\n\nManage CCheckQueue workder threads by itself. Do not expose the threads outside the object.",
      "tree": {
        "sha": "58085c1d79ca2643768673ca25a9187daeae231f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/58085c1d79ca2643768673ca25a9187daeae231f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8145436add63054edd0f21fa495bf68ffe991e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8145436add63054edd0f21fa495bf68ffe991e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f8145436add63054edd0f21fa495bf68ffe991e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8145436add63054edd0f21fa495bf68ffe991e5/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a6e1a953148bd377514ee1de8dd6d2f7c5452be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a6e1a953148bd377514ee1de8dd6d2f7c5452be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a6e1a953148bd377514ee1de8dd6d2f7c5452be"
      }
    ],
    "stats": {
      "total": 135,
      "additions": 68,
      "deletions": 67
    },
    "files": [
      {
        "sha": "d5062ada4da37b8597f6a0f0ffd2431efb4883ae",
        "filename": "src/bench/checkqueue.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8145436add63054edd0f21fa495bf68ffe991e5/src/bench/checkqueue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8145436add63054edd0f21fa495bf68ffe991e5/src/bench/checkqueue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkqueue.cpp?ref=f8145436add63054edd0f21fa495bf68ffe991e5",
        "patch": "@@ -37,10 +37,7 @@ static void CCheckQueueSpeedPrevectorJob(benchmark::State& state)\n         void swap(PrevectorJob& x){p.swap(x.p);};\n     };\n     CCheckQueue<PrevectorJob> queue {QUEUE_BATCH_SIZE};\n-    boost::thread_group tg;\n-    for (auto x = 0; x < std::max(MIN_CORES, GetNumCores()); ++x) {\n-       tg.create_thread([&]{queue.Thread();});\n-    }\n+    queue.Start(std::max(MIN_CORES, GetNumCores()));\n     while (state.KeepRunning()) {\n         // Make insecure_rand here so that each iteration is identical.\n         FastRandomContext insecure_rand(true);\n@@ -57,6 +54,6 @@ static void CCheckQueueSpeedPrevectorJob(benchmark::State& state)\n         control.Wait();\n     }\n     queue.Interrupt();\n-    tg.join_all();\n+    queue.Stop();\n }\n BENCHMARK(CCheckQueueSpeedPrevectorJob, 1400);"
      },
      {
        "sha": "47f5c43aca165784e11cfaeacb390560a075fff9",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 30,
        "deletions": 7,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8145436add63054edd0f21fa495bf68ffe991e5/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8145436add63054edd0f21fa495bf68ffe991e5/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=f8145436add63054edd0f21fa495bf68ffe991e5",
        "patch": "@@ -7,6 +7,8 @@\n \n #include <sync.h>\n \n+#include <util/system.h>\n+\n #include <algorithm>\n #include <vector>\n \n@@ -40,6 +42,9 @@ class CCheckQueue\n     //! As the order of booleans doesn't matter, it is used as a LIFO (stack)\n     std::vector<T> queue GUARDED_BY(mutex);\n \n+    //! The worker threads\n+    std::vector<std::thread> m_threads;\n+\n     //! The number of workers (including the master) that are idle.\n     int nIdle GUARDED_BY(mutex) = 0;\n \n@@ -133,12 +138,6 @@ class CCheckQueue\n     //! Create a new check queue\n     explicit CCheckQueue(unsigned int nBatchSizeIn) : nBatchSize(nBatchSizeIn) {}\n \n-    //! Worker thread\n-    void Thread()\n-    {\n-        Loop();\n-    }\n-\n     //! Wait until execution finishes, and return whether all evaluations were successful.\n     bool Wait()\n     {\n@@ -160,6 +159,23 @@ class CCheckQueue\n             condWorker.notify_all();\n     }\n \n+    void Start(const int n_threads, const char* const thread_name = nullptr)\n+    {\n+        assert(m_threads.size() == 0);\n+        {\n+            LOCK(mutex);\n+            interrupted = false;\n+        }\n+        if (n_threads <= 0) return;\n+        m_threads.reserve(n_threads);\n+        for (int i = 0; i < n_threads; i++) {\n+            m_threads.emplace_back([thread_name, this] {\n+                if (thread_name != nullptr) RenameThread(thread_name);\n+                Loop();\n+            });\n+        }\n+    }\n+\n     void Interrupt()\n     {\n         {\n@@ -169,10 +185,17 @@ class CCheckQueue\n         condWorker.notify_all();\n     }\n \n-    ~CCheckQueue()\n+    void Stop()\n     {\n+        for (std::thread& thread : m_threads) {\n+            thread.join();\n+        }\n+        m_threads.clear();\n     }\n \n+    ~CCheckQueue()\n+    {\n+    }\n };\n \n /**"
      },
      {
        "sha": "b67b23a6ade13b1852f92f45af34d376bb5f2cf1",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8145436add63054edd0f21fa495bf68ffe991e5/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8145436add63054edd0f21fa495bf68ffe991e5/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f8145436add63054edd0f21fa495bf68ffe991e5",
        "patch": "@@ -1273,7 +1273,6 @@ bool AppInitMain(InitInterfaces& interfaces)\n     InitSignatureCache();\n     InitScriptExecutionCache();\n \n-    LogPrintf(\"Using %u threads for script verification\\n\", nScriptCheckThreads);\n     StartScriptCheck();\n \n     // Start the lightweight task scheduler thread"
      },
      {
        "sha": "546c9c394980bfa1d1089d52b494345c611584c7",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 31,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8145436add63054edd0f21fa495bf68ffe991e5/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8145436add63054edd0f21fa495bf68ffe991e5/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=f8145436add63054edd0f21fa495bf68ffe991e5",
        "patch": "@@ -149,10 +149,7 @@ typedef CCheckQueue<FrozenCleanupCheck> FrozenCleanup_Queue;\n static void Correct_Queue_range(std::vector<size_t> range)\n {\n     auto small_queue = MakeUnique<Correct_Queue>(QUEUE_BATCH_SIZE);\n-    boost::thread_group tg;\n-    for (auto x = 0; x < nScriptCheckThreads; ++x) {\n-       tg.create_thread([&]{small_queue->Thread();});\n-    }\n+    small_queue->Start(nScriptCheckThreads);\n     // Make vChecks here to save on malloc (this test can be slow...)\n     std::vector<FakeCheckCheckCompletion> vChecks;\n     for (const size_t i : range) {\n@@ -171,7 +168,7 @@ static void Correct_Queue_range(std::vector<size_t> range)\n         }\n     }\n     small_queue->Interrupt();\n-    tg.join_all();\n+    small_queue->Stop();\n }\n \n /** Test that 0 checks is correct\n@@ -215,10 +212,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Catches_Failure)\n {\n     auto fail_queue = MakeUnique<Failing_Queue>(QUEUE_BATCH_SIZE);\n \n-    boost::thread_group tg;\n-    for (auto x = 0; x < nScriptCheckThreads; ++x) {\n-       tg.create_thread([&]{fail_queue->Thread();});\n-    }\n+    fail_queue->Start(nScriptCheckThreads);\n \n     for (size_t i = 0; i < 1001; ++i) {\n         CCheckQueueControl<FailingCheck> control(fail_queue.get());\n@@ -240,17 +234,14 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Catches_Failure)\n         }\n     }\n     fail_queue->Interrupt();\n-    tg.join_all();\n+    fail_queue->Stop();\n }\n // Test that a block validation which fails does not interfere with\n // future blocks, ie, the bad state is cleared.\n BOOST_AUTO_TEST_CASE(test_CheckQueue_Recovers_From_Failure)\n {\n     auto fail_queue = MakeUnique<Failing_Queue>(QUEUE_BATCH_SIZE);\n-    boost::thread_group tg;\n-    for (auto x = 0; x < nScriptCheckThreads; ++x) {\n-       tg.create_thread([&]{fail_queue->Thread();});\n-    }\n+    fail_queue->Start(nScriptCheckThreads);\n \n     for (auto times = 0; times < 10; ++times) {\n         for (const bool end_fails : {true, false}) {\n@@ -266,7 +257,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Recovers_From_Failure)\n         }\n     }\n     fail_queue->Interrupt();\n-    tg.join_all();\n+    fail_queue->Stop();\n }\n \n // Test that unique checks are actually all called individually, rather than\n@@ -275,11 +266,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Recovers_From_Failure)\n BOOST_AUTO_TEST_CASE(test_CheckQueue_UniqueCheck)\n {\n     auto queue = MakeUnique<Unique_Queue>(QUEUE_BATCH_SIZE);\n-    boost::thread_group tg;\n-    for (auto x = 0; x < nScriptCheckThreads; ++x) {\n-       tg.create_thread([&]{queue->Thread();});\n-\n-    }\n+    queue->Start(nScriptCheckThreads);\n \n     size_t COUNT = 100000;\n     size_t total = COUNT;\n@@ -299,7 +286,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_UniqueCheck)\n         r = r && UniqueCheck::results.count(i) == 1;\n     BOOST_REQUIRE(r);\n     queue->Interrupt();\n-    tg.join_all();\n+    queue->Stop();\n }\n \n \n@@ -311,10 +298,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_UniqueCheck)\n BOOST_AUTO_TEST_CASE(test_CheckQueue_Memory)\n {\n     auto queue = MakeUnique<Memory_Queue>(QUEUE_BATCH_SIZE);\n-    boost::thread_group tg;\n-    for (auto x = 0; x < nScriptCheckThreads; ++x) {\n-       tg.create_thread([&]{queue->Thread();});\n-    }\n+    queue->Start(nScriptCheckThreads);\n     for (size_t i = 0; i < 1000; ++i) {\n         size_t total = i;\n         {\n@@ -334,19 +318,16 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Memory)\n         BOOST_REQUIRE_EQUAL(MemoryCheck::fake_allocated_memory, 0U);\n     }\n     queue->Interrupt();\n-    tg.join_all();\n+    queue->Stop();\n }\n \n // Test that a new verification cannot occur until all checks\n // have been destructed\n BOOST_AUTO_TEST_CASE(test_CheckQueue_FrozenCleanup)\n {\n     auto queue = MakeUnique<FrozenCleanup_Queue>(QUEUE_BATCH_SIZE);\n-    boost::thread_group tg;\n+    queue->Start(nScriptCheckThreads);\n     bool fails = false;\n-    for (auto x = 0; x < nScriptCheckThreads; ++x) {\n-        tg.create_thread([&]{queue->Thread();});\n-    }\n     std::thread t0([&]() {\n         CCheckQueueControl<FrozenCleanupCheck> control(queue.get());\n         std::vector<FrozenCleanupCheck> vChecks(1);\n@@ -377,7 +358,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_FrozenCleanup)\n     // Wait for control to finish\n     t0.join();\n     queue->Interrupt();\n-    tg.join_all();\n+    queue->Stop();\n     BOOST_REQUIRE(!fails);\n }\n \n@@ -442,5 +423,25 @@ BOOST_AUTO_TEST_CASE(test_CheckQueueControl_Locks)\n         tg.join_all();\n     }\n }\n+\n+BOOST_AUTO_TEST_CASE(test_CheckQueue_threads_count)\n+{\n+    CCheckQueue<FakeCheck> queue(QUEUE_BATCH_SIZE);\n+\n+    // Test for positive number\n+    queue.Start(GetNumCores());\n+    queue.Interrupt();\n+    queue.Stop();\n+\n+    // Test for zero\n+    queue.Start(0);\n+    queue.Interrupt();\n+    queue.Stop();\n+\n+    // Test for negtive value\n+    queue.Start(-5);\n+    queue.Interrupt();\n+    queue.Stop();\n+}\n BOOST_AUTO_TEST_SUITE_END()\n "
      },
      {
        "sha": "f0e8ff1afa67e48bc2d120fed68dfae98bbfd218",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8145436add63054edd0f21fa495bf68ffe991e5/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8145436add63054edd0f21fa495bf68ffe991e5/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=f8145436add63054edd0f21fa495bf68ffe991e5",
        "patch": "@@ -462,14 +462,10 @@ BOOST_AUTO_TEST_CASE(test_big_witness_transaction)\n \n     // check all inputs concurrently, with the cache\n     PrecomputedTransactionData txdata(tx);\n-    boost::thread_group threadGroup;\n     CCheckQueue<CScriptCheck> scriptcheckqueue(128);\n     {\n         CCheckQueueControl<CScriptCheck> control(&scriptcheckqueue);\n-\n-        for (int i = 0; i < 20; i++)\n-            threadGroup.create_thread(std::bind(&CCheckQueue<CScriptCheck>::Thread, std::ref(scriptcheckqueue)));\n-\n+        scriptcheckqueue.Start(20);\n         std::vector<Coin> coins;\n         for (uint32_t i = 0; i < mtx.vin.size(); i++) {\n             Coin coin;\n@@ -493,7 +489,7 @@ BOOST_AUTO_TEST_CASE(test_big_witness_transaction)\n     }\n \n     scriptcheckqueue.Interrupt();\n-    threadGroup.join_all();\n+    scriptcheckqueue.Stop();\n }\n \n SignatureData CombineSignatures(const CMutableTransaction& input1, const CMutableTransaction& input2, const CTransactionRef tx)"
      },
      {
        "sha": "92316532399e434e4498c149a198c2e967f24afe",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 17,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8145436add63054edd0f21fa495bf68ffe991e5/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8145436add63054edd0f21fa495bf68ffe991e5/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=f8145436add63054edd0f21fa495bf68ffe991e5",
        "patch": "@@ -1664,22 +1664,10 @@ static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, CValidationState&\n \n static CCheckQueue<CScriptCheck> scriptcheckqueue(128);\n \n-static std::vector<std::thread> g_thread_scriptcheck_workers;\n-\n-static void ThreadScriptCheck()\n-{\n-    RenameThread(\"bitcoin-scriptch\");\n-    scriptcheckqueue.Thread();\n-}\n-\n void StartScriptCheck()\n {\n     LogPrintf(\"Using %u threads for script verification\\n\", nScriptCheckThreads);\n-    if (nScriptCheckThreads) {\n-        for (int i = 0; i < nScriptCheckThreads - 1; i++) {\n-            g_thread_scriptcheck_workers.emplace_back(ThreadScriptCheck);\n-        }\n-    }\n+    scriptcheckqueue.Start(nScriptCheckThreads - 1, \"bitcoin-scriptch\");\n }\n \n void InterruptScriptCheck()\n@@ -1689,10 +1677,7 @@ void InterruptScriptCheck()\n \n void StopScriptCheck()\n {\n-    for (auto& th : g_thread_scriptcheck_workers) {\n-        th.join();\n-    }\n-    g_thread_scriptcheck_workers.clear();\n+    scriptcheckqueue.Stop();\n }\n \n // Protected by cs_main"
      }
    ]
  }
]