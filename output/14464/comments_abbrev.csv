practicalswift,2018-10-11T13:52:59Z,"Concept ACK\n\nTowards a Boost free future! :-)",https://github.com/bitcoin/bitcoin/pull/14464#issuecomment-428963858,428963858,
ch4ot1c,2018-10-11T19:48:23Z,utACK,https://github.com/bitcoin/bitcoin/pull/14464#issuecomment-429094052,429094052,
sipa,2018-10-12T19:51:17Z,utACK 9aacef638f0c2159930640762daf524942052a9d,https://github.com/bitcoin/bitcoin/pull/14464#issuecomment-429443409,429443409,
donaloconnor,2018-10-12T21:56:01Z,utACK https://github.com/bitcoin/bitcoin/pull/14464/commits/9aacef638f0c2159930640762daf524942052a9d,https://github.com/bitcoin/bitcoin/pull/14464#issuecomment-429473702,429473702,
ken2812221,2018-10-16T16:26:13Z,Addressed comments,https://github.com/bitcoin/bitcoin/pull/14464#issuecomment-430304208,430304208,
ken2812221,2018-10-18T02:18:30Z,"@JeremyRubin\nbenchmark result on my Ubuntu 18.04 virtual machine:\nmaster 816fab9ccae568612d5ed90378b4587256925a1e\n```\n# Benchmark, evals, iterations, total, min, max, median\nCCheckQueueSpeedPrevectorJob, 100, 1400, 83.1845, 0.000461328, 0.000692877, 0.000668382\n```\nThis PR 625c55a70c376af9a94a2bb118c39685d3b82b33\n```\n# Benchmark, evals, iterations, total, min, max, median\nCChec",https://github.com/bitcoin/bitcoin/pull/14464#issuecomment-430852058,430852058,
JeremyRubin,2018-10-18T03:38:56Z,"That's great, thanks for checking that -- much bigger change than I expected it to be.\n\nLooking at the numbers, it seems not only to be faster on the microbenchmark, but more consistent.\n\nThis merits running two additional tests, if you have energy for it:\n\n1. Time to reindex (with assumevalid up to last month or something so it doesn't take forever\n2. Two nodes (one with this PR one",https://github.com/bitcoin/bitcoin/pull/14464#issuecomment-430864777,430864777,
DrahtBot,2018-10-20T10:02:06Z,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/14464#issuecomment-431566962,431566962,
JeremyRubin,2018-10-25T08:32:47Z,"This version is not correct either if I'm correct about the block getting flushed with validity cached during shutdown.\n\nNow you might incorrectly cache that a block was valid when it may not have been.\n\nYou need to finish processing the block, then shut down. Or, if a shutdown is triggered, abandon the block in the master (you could make a  trivalent return: false, true, shutdown).",https://github.com/bitcoin/bitcoin/pull/14464#issuecomment-432962493,432962493,
JeremyRubin,2018-10-25T08:36:06Z,"Actually I think that's not right, I think this version will just hang because nTodo will be != 0 and queue.empty() will be true, so the master would sleep and never get woken?",https://github.com/bitcoin/bitcoin/pull/14464#issuecomment-432963494,432963494,
ken2812221,2018-10-26T03:31:48Z,"@JeremyRubin ~~master would never wait/sleep if `interrupted` is true. It would keep looping until `nTodo == 0`.~~ Oh, I know what you mean.",https://github.com/bitcoin/bitcoin/pull/14464#issuecomment-433275274,433275274,
JeremyRubin,2018-10-26T06:24:30Z,Your best bet IMO is to have a CheckQueueControl mutex which is separate from the CheckQueue mutex. Make interrupting get both...,https://github.com/bitcoin/bitcoin/pull/14464#issuecomment-433300148,433300148,
ken2812221,2018-10-26T14:46:52Z,"@JeremyRubin\nHow about now? I think the logic here would be more clear. It would keep checking until finish.\nIf there are new tasks added into queue after the worker threads ended, it would be only master worker checking the tasks unfortunately. However I think this is better than interrupt the master thread. Alternatively, we can detach these worker threads.\n\nI am going to test this to se",https://github.com/bitcoin/bitcoin/pull/14464#issuecomment-433433176,433433176,
JeremyRubin,2018-10-26T23:53:59Z,"I still think it's best to make control of the checkqueue (as opposed to participation) protected by a mutex.\n\nEasiest to audit/review.\n\nBut do let me know if that fixes the corruption issue...",https://github.com/bitcoin/bitcoin/pull/14464#issuecomment-433571925,433571925,
ken2812221,2018-10-27T00:01:15Z,"> I still think it's best to make control of the checkqueue (as opposed to participation) protected by a mutex.\n\nThere already have `ControlMutex` to ensure that there is only one `CCheckQueueControl` to access the CCheckQueue.\n\nEdit:  I don't think it's necessary to interrupt the master queue though. We can wait it to return the check result.\n\nThe second thought, if we detach the work",https://github.com/bitcoin/bitcoin/pull/14464#issuecomment-433572773,433572773,
JeremyRubin,2018-10-27T08:29:12Z,I am saying that a simple change to make is to have Interrupt take the ControlMutex.,https://github.com/bitcoin/bitcoin/pull/14464#issuecomment-433602082,433602082,
ken2812221,2018-10-27T12:42:24Z,">I am saying that a simple change to make is to have Interrupt take the ControlMutex.\n\nThat would cause recursive lock in test_bitcoin. Also, I don't think that it's necessary to lock ControlMutex. Can you explain why it's necessary for Interrupt?\n\n> But do let me know if that fixes the corruption issue...\n\nSeems the node won't have to reindex after restarting now.",https://github.com/bitcoin/bitcoin/pull/14464#issuecomment-433617156,433617156,
JeremyRubin,2018-10-27T21:31:50Z,Where's the recursive lock?,https://github.com/bitcoin/bitcoin/pull/14464#issuecomment-433656737,433656737,
ken2812221,2018-10-27T22:53:05Z,"In test_bitcoin, it constuct `CCheckQueueControl` and call `Interrupt` in same thread",https://github.com/bitcoin/bitcoin/pull/14464#issuecomment-433661791,433661791,
JeremyRubin,2018-10-27T23:06:06Z,Interrupt should be called in the destructor of the test which should happen after any queuecontrols are destructed though?,https://github.com/bitcoin/bitcoin/pull/14464#issuecomment-433662550,433662550,
ken2812221,2018-10-28T05:05:05Z,"> Interrupt should be called in the destructor of the test which should happen after any queuecontrols are destructed though?\n\nI think it would be better to make the checkqueue to control their worker threads instead of calling `Thread()` in somewhere.",https://github.com/bitcoin/bitcoin/pull/14464#issuecomment-433676857,433676857,
MarcoFalke,2019-03-06T20:21:29Z,Could try a `git rebase -Xignore-all-space df36ddf9ce8a4dcf0d7f324e57a13abb6cf6a57c`?,https://github.com/bitcoin/bitcoin/pull/14464#issuecomment-470261401,470261401,
practicalswift,2019-03-15T06:10:10Z,@ken2812221 Why the close? :-),https://github.com/bitcoin/bitcoin/pull/14464#issuecomment-473170544,473170544,
ken2812221,2019-03-15T06:20:35Z,"The CI was failed and I don't have time to find the bugs out recently, so I closed it, I might reopen this when I has more time working on this.",https://github.com/bitcoin/bitcoin/pull/14464#issuecomment-473172431,473172431,
practicalswift,2018-10-11T13:52:13Z,According to PR title `boost/thread/condition_variable.hpp` should go as well? :-),https://github.com/bitcoin/bitcoin/pull/14464#discussion_r224455807,224455807,test/lint/lint-includes.sh
ken2812221,2018-10-11T13:54:55Z,"I only remove them in checkqueue, the another place to use it is in scheduler.",https://github.com/bitcoin/bitcoin/pull/14464#discussion_r224456870,224456870,test/lint/lint-includes.sh
Empact,2018-10-11T14:43:43Z,nit: could just call this `interrupted`,https://github.com/bitcoin/bitcoin/pull/14464#discussion_r224476362,224476362,src/checkqueue.h
Empact,2018-10-11T15:18:13Z,"> If an `if` only has a single-statement `then`-clause, it can appear\n    on the same line as the `if`, without braces. In every other case,\n    braces are required, and the `then` and `else` clauses must appear\n    correctly indented on a new line.\n\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-c",https://github.com/bitcoin/bitcoin/pull/14464#discussion_r224490888,224490888,src/checkqueue.h
ken2812221,2018-10-11T15:26:46Z,clang-format doesn't catch this. Done manually.,https://github.com/bitcoin/bitcoin/pull/14464#discussion_r224494314,224494314,src/checkqueue.h
ch4ot1c,2018-10-11T19:48:02Z,Pluralize to `threads`,https://github.com/bitcoin/bitcoin/pull/14464#discussion_r224581561,224581561,src/validation.h
donaloconnor,2018-10-12T22:07:55Z,tiny nit: only one master thread so maybe `condMaster.notify_one()` is more consistent. No difference to code though.,https://github.com/bitcoin/bitcoin/pull/14464#discussion_r224927235,224927235,src/checkqueue.h
practicalswift,2018-10-13T14:00:09Z,nit: Request vector capacity of `nScriptCheckThreads` before loop?,https://github.com/bitcoin/bitcoin/pull/14464#discussion_r224960888,224960888,src/test/checkqueue_tests.cpp
practicalswift,2018-10-13T14:01:20Z,nit: Same here. Request a capacity of `20`? :-),https://github.com/bitcoin/bitcoin/pull/14464#discussion_r224960907,224960907,src/test/transaction_tests.cpp
JeremyRubin,2018-10-16T00:19:59Z,"This is good practice, but it's test code so it doesn't really matter all too much.",https://github.com/bitcoin/bitcoin/pull/14464#discussion_r225358049,225358049,src/test/checkqueue_tests.cpp
JeremyRubin,2018-10-16T00:26:38Z,"Add the condition as a callback to wait.\n\ne.g., cond.wait(lock, [&] { return interrupted || !queue.empty(); })",https://github.com/bitcoin/bitcoin/pull/14464#discussion_r225359205,225359205,src/checkqueue.h
sipa,2018-10-17T07:16:36Z,I was expecting to see this replaced with a `StartScriptCheck();` line; why is that not necessary?,https://github.com/bitcoin/bitcoin/pull/14464#discussion_r225803667,225803667,src/init.cpp
ken2812221,2018-10-17T14:43:25Z,I think I forgot to add it. Fixed now.,https://github.com/bitcoin/bitcoin/pull/14464#discussion_r225960672,225960672,src/init.cpp
JeremyRubin,2018-10-18T03:42:09Z,"I think you could assert(! (fMaster && nTodo == 0)) here.\n\nIf fMaster were *ever* true here, we would deadlock.\n\nHence, there is no point to check that...",https://github.com/bitcoin/bitcoin/pull/14464#discussion_r226160489,226160489,src/checkqueue.h
ken2812221,2018-10-24T14:26:14Z,"After tested a  few times, `return false` or somthing else? seem to make the node have to reindex next time.",https://github.com/bitcoin/bitcoin/pull/14464#discussion_r227812178,227812178,src/checkqueue.h
JeremyRubin,2018-10-25T07:16:51Z,"The issue could be that when you interrupt, you don't want to make fMaster return false causing the block to be marked false (which could be written into cache somehow).\n\nIs interrupt guaranteed to wait until the current job is done? Making it guaranteed to wait probably could help fix that behavior... One way of doing that is to separate out when you wake up if there's an active job or not, a",https://github.com/bitcoin/bitcoin/pull/14464#discussion_r228057597,228057597,src/checkqueue.h
JeremyRubin,2018-10-25T07:22:06Z,"I'd recommend adapting the quitting logic from https://github.com/JeremyRubin/bitcoin/blob/aa847431e266fb08289edbac3665ac7c93a81b8a/src/checkqueue.h if you want a reference, which should be more or less correct (albeit with a lot of extensions you can ignore).",https://github.com/bitcoin/bitcoin/pull/14464#discussion_r228058933,228058933,src/checkqueue.h
