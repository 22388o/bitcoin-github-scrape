[
  {
    "sha": "2e023419c5e77ba66fe1182cbc2bcabce59ea795",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZTAyMzQxOWM1ZTc3YmE2NmZlMTE4MmNiYzJiY2FiY2U1OWVhNzk1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-01-23T20:51:35Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-01-31T17:37:33Z"
      },
      "message": "tests: unify RPC argument to cli argument conversion and handle dicts and lists\n\nWhen running tests with --usecli, unify the conversion from argument objects to\nstrings using a new function arg_to_cli(). This fixes boolean arguments when\nusing named arguments.\n\nAlso use json.dumps() to get the string values for arguments that are dicts and\nlists so that bitcoind's JSON parser does not become confused.",
      "tree": {
        "sha": "158c1588ca889f764ebdefe9eb8ad6af7c293676",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/158c1588ca889f764ebdefe9eb8ad6af7c293676"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e023419c5e77ba66fe1182cbc2bcabce59ea795",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e023419c5e77ba66fe1182cbc2bcabce59ea795",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2e023419c5e77ba66fe1182cbc2bcabce59ea795",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e023419c5e77ba66fe1182cbc2bcabce59ea795/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "efb6ddef9cb341428cbedf4373d1bdd19685a827",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efb6ddef9cb341428cbedf4373d1bdd19685a827",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/efb6ddef9cb341428cbedf4373d1bdd19685a827"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 10,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6745409964a4f28bf5718b3c5940940b6d004708",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e023419c5e77ba66fe1182cbc2bcabce59ea795/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e023419c5e77ba66fe1182cbc2bcabce59ea795/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=2e023419c5e77ba66fe1182cbc2bcabce59ea795",
        "patch": "@@ -402,6 +402,14 @@ def __call__(self, *args, **kwargs):\n     def get_request(self, *args, **kwargs):\n         return lambda: self(*args, **kwargs)\n \n+def arg_to_cli(arg):\n+    if isinstance(arg, bool):\n+        return str(arg).lower()\n+    elif isinstance(arg, dict) or isinstance(arg, list):\n+        return json.dumps(arg)\n+    else:\n+        return str(arg)\n+\n class TestNodeCLI():\n     \"\"\"Interface to bitcoin-cli for an individual node\"\"\"\n \n@@ -433,8 +441,8 @@ def batch(self, requests):\n \n     def send_cli(self, command=None, *args, **kwargs):\n         \"\"\"Run bitcoin-cli command. Deserializes returned string as python object.\"\"\"\n-        pos_args = [str(arg).lower() if type(arg) is bool else str(arg) for arg in args]\n-        named_args = [str(key) + \"=\" + str(value) for (key, value) in kwargs.items()]\n+        pos_args = [arg_to_cli(arg) for arg in args]\n+        named_args = [str(key) + \"=\" + arg_to_cli(value) for (key, value) in kwargs.items()]\n         assert not (pos_args and named_args), \"Cannot use positional arguments and named arguments in the same bitcoin-cli call\"\n         p_args = [self.binary, \"-datadir=\" + self.datadir] + self.options\n         if named_args:"
      }
    ]
  }
]