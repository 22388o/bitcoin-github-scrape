[
  {
    "sha": "232529fbf1af2261085e45407611c32f08d5f6f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzI1MjlmYmYxYWYyMjYxMDg1ZTQ1NDA3NjExYzMyZjA4ZDVmNmYz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-08-04T01:08:55Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-08-04T01:08:55Z"
      },
      "message": "Get rid of the const field in CTransaction",
      "tree": {
        "sha": "38fe808d60d35c1cdd5516b5eab9944ecda94ad9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38fe808d60d35c1cdd5516b5eab9944ecda94ad9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/232529fbf1af2261085e45407611c32f08d5f6f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/232529fbf1af2261085e45407611c32f08d5f6f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/232529fbf1af2261085e45407611c32f08d5f6f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/232529fbf1af2261085e45407611c32f08d5f6f3/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c7a5e1f66d8611d84d66c7e0295bd41c71f85bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c7a5e1f66d8611d84d66c7e0295bd41c71f85bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c7a5e1f66d8611d84d66c7e0295bd41c71f85bf"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 33,
      "deletions": 30
    },
    "files": [
      {
        "sha": "21f3402aea6d7c0d3056ddb004da2f792fbba948",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/232529fbf1af2261085e45407611c32f08d5f6f3/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/232529fbf1af2261085e45407611c32f08d5f6f3/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=232529fbf1af2261085e45407611c32f08d5f6f3",
        "patch": "@@ -3494,7 +3494,7 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n             out.scriptPubKey[5] = 0xed;\n             memcpy(&out.scriptPubKey[6], witnessroot.begin(), 32);\n             commitment = std::vector<unsigned char>(out.scriptPubKey.begin(), out.scriptPubKey.end());\n-            const_cast<std::vector<CTxOut>*>(&block.vtx[0].vout)->push_back(out);\n+            block.vtx[0].vout.push_back(out);\n             block.vtx[0].UpdateHash();\n         }\n     }\n@@ -4319,7 +4319,7 @@ bool InitBlockIndex(const CChainParams& chainparams)\n     // Only add the genesis block if not reindexing (in which case we reuse the one already on disk)\n     if (!fReindex) {\n         try {\n-            CBlock &block = const_cast<CBlock&>(chainparams.GenesisBlock());\n+            CBlock block = chainparams.GenesisBlock();\n             // Start new block file\n             unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n             CDiskBlockPos blockPos;"
      },
      {
        "sha": "86455afffd7f50105c989939bc77dbb78a0df2ee",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/232529fbf1af2261085e45407611c32f08d5f6f3/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/232529fbf1af2261085e45407611c32f08d5f6f3/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=232529fbf1af2261085e45407611c32f08d5f6f3",
        "patch": "@@ -67,9 +67,9 @@ uint256 CMutableTransaction::GetHash() const\n     return SerializeHash(*this, SER_GETHASH, SERIALIZE_TRANSACTION_NO_WITNESS);\n }\n \n-void CTransaction::UpdateHash() const\n+void CTransaction::UpdateHash()\n {\n-    *const_cast<uint256*>(&hash) = SerializeHash(*this, SER_GETHASH, SERIALIZE_TRANSACTION_NO_WITNESS);\n+    hash = SerializeHash(*this, SER_GETHASH, SERIALIZE_TRANSACTION_NO_WITNESS);\n }\n \n uint256 CTransaction::GetWitnessHash() const\n@@ -84,12 +84,12 @@ CTransaction::CTransaction(const CMutableTransaction &tx) : nVersion(tx.nVersion\n }\n \n CTransaction& CTransaction::operator=(const CTransaction &tx) {\n-    *const_cast<int*>(&nVersion) = tx.nVersion;\n-    *const_cast<std::vector<CTxIn>*>(&vin) = tx.vin;\n-    *const_cast<std::vector<CTxOut>*>(&vout) = tx.vout;\n-    *const_cast<CTxWitness*>(&wit) = tx.wit;\n-    *const_cast<unsigned int*>(&nLockTime) = tx.nLockTime;\n-    *const_cast<uint256*>(&hash) = tx.hash;\n+    nVersion = tx.nVersion;\n+    vin = tx.vin;\n+    vout = tx.vout;\n+    wit = tx.wit;\n+    nLockTime = tx.nLockTime;\n+    hash = tx.hash;\n     return *this;\n }\n "
      },
      {
        "sha": "31c918ef67f74efdd650b7c9993bf03a610bd07e",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 23,
        "deletions": 20,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/232529fbf1af2261085e45407611c32f08d5f6f3/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/232529fbf1af2261085e45407611c32f08d5f6f3/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=232529fbf1af2261085e45407611c32f08d5f6f3",
        "patch": "@@ -292,29 +292,29 @@ template<typename Stream, typename Operation, typename TxType>\n inline void SerializeTransaction(TxType& tx, Stream& s, Operation ser_action, int nType, int nVersion) {\n     const bool fAllowWitness = !(nVersion & SERIALIZE_TRANSACTION_NO_WITNESS);\n \n-    READWRITE(*const_cast<int32_t*>(&tx.nVersion));\n+    READWRITE(tx.nVersion);\n     unsigned char flags = 0;\n     if (ser_action.ForRead()) {\n-        const_cast<std::vector<CTxIn>*>(&tx.vin)->clear();\n-        const_cast<std::vector<CTxOut>*>(&tx.vout)->clear();\n-        const_cast<CTxWitness*>(&tx.wit)->SetNull();\n+        tx.vin.clear();\n+        tx.vout.clear();\n+        tx.wit.SetNull();\n         /* Try to read the vin. In case the dummy is there, this will be read as an empty vector. */\n-        READWRITE(*const_cast<std::vector<CTxIn>*>(&tx.vin));\n+        READWRITE(tx.vin);\n         if (tx.vin.size() == 0 && fAllowWitness) {\n             /* We read a dummy or an empty vin. */\n             READWRITE(flags);\n             if (flags != 0) {\n-                READWRITE(*const_cast<std::vector<CTxIn>*>(&tx.vin));\n-                READWRITE(*const_cast<std::vector<CTxOut>*>(&tx.vout));\n+                READWRITE(tx.vin);\n+                READWRITE(tx.vout);\n             }\n         } else {\n             /* We read a non-empty vin. Assume a normal vout follows. */\n-            READWRITE(*const_cast<std::vector<CTxOut>*>(&tx.vout));\n+            READWRITE(tx.vout);\n         }\n         if ((flags & 1) && fAllowWitness) {\n             /* The witness flag is present, and we support witnesses. */\n             flags ^= 1;\n-            const_cast<CTxWitness*>(&tx.wit)->vtxinwit.resize(tx.vin.size());\n+            tx.wit.vtxinwit.resize(tx.vin.size());\n             READWRITE(tx.wit);\n         }\n         if (flags) {\n@@ -336,24 +336,27 @@ inline void SerializeTransaction(TxType& tx, Stream& s, Operation ser_action, in\n             READWRITE(vinDummy);\n             READWRITE(flags);\n         }\n-        READWRITE(*const_cast<std::vector<CTxIn>*>(&tx.vin));\n-        READWRITE(*const_cast<std::vector<CTxOut>*>(&tx.vout));\n+        READWRITE(tx.vin);\n+        READWRITE(tx.vout);\n         if (flags & 1) {\n-            const_cast<CTxWitness*>(&tx.wit)->vtxinwit.resize(tx.vin.size());\n+            tx.wit.vtxinwit.resize(tx.vin.size());\n             READWRITE(tx.wit);\n         }\n     }\n-    READWRITE(*const_cast<uint32_t*>(&tx.nLockTime));\n+    READWRITE(tx.nLockTime);\n }\n \n /** The basic transaction that is broadcasted on the network and contained in\n  * blocks.  A transaction can contain multiple inputs and outputs.\n+ *\n+ * This transaction has a cached hash value, and requires calling UpdateHash\n+ * after any modifications are made.\n  */\n class CTransaction\n {\n private:\n     /** Memory only. */\n-    const uint256 hash;\n+    uint256 hash;\n \n public:\n     // Default transaction version.\n@@ -370,11 +373,11 @@ class CTransaction\n     // actually immutable; deserialization and assignment are implemented,\n     // and bypass the constness. This is safe, as they update the entire\n     // structure, including the hash.\n-    const int32_t nVersion;\n-    const std::vector<CTxIn> vin;\n-    const std::vector<CTxOut> vout;\n-    CTxWitness wit; // Not const: can change without invalidating the txid cache\n-    const uint32_t nLockTime;\n+    int32_t nVersion;\n+    std::vector<CTxIn> vin;\n+    std::vector<CTxOut> vout;\n+    CTxWitness wit;\n+    uint32_t nLockTime;\n \n     /** Construct a CTransaction that qualifies as IsNull() */\n     CTransaction();\n@@ -433,7 +436,7 @@ class CTransaction\n \n     std::string ToString() const;\n \n-    void UpdateHash() const;\n+    void UpdateHash();\n };\n \n /** A mutable version of CTransaction. */"
      }
    ]
  },
  {
    "sha": "9f5e40d05970b6b82eb5315073c31f70cde9c0d8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZjVlNDBkMDU5NzBiNmI4MmViNTMxNTA3M2MzMWY3MGNkZTljMGQ4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-08-04T00:49:16Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-08-04T05:02:18Z"
      },
      "message": "Move CTxInWitness inside CTxIn",
      "tree": {
        "sha": "e1fcd3aafa820b7e0436d6ccd80e5cc787fed0d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e1fcd3aafa820b7e0436d6ccd80e5cc787fed0d9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f5e40d05970b6b82eb5315073c31f70cde9c0d8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f5e40d05970b6b82eb5315073c31f70cde9c0d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9f5e40d05970b6b82eb5315073c31f70cde9c0d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f5e40d05970b6b82eb5315073c31f70cde9c0d8/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "232529fbf1af2261085e45407611c32f08d5f6f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/232529fbf1af2261085e45407611c32f08d5f6f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/232529fbf1af2261085e45407611c32f08d5f6f3"
      }
    ],
    "stats": {
      "total": 253,
      "additions": 93,
      "deletions": 160
    },
    "files": [
      {
        "sha": "1f9aa5fa9500935371afa4c9355e6744b27c2fe7",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f5e40d05970b6b82eb5315073c31f70cde9c0d8/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f5e40d05970b6b82eb5315073c31f70cde9c0d8/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=9f5e40d05970b6b82eb5315073c31f70cde9c0d8",
        "patch": "@@ -489,7 +489,7 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n             sigdata = CombineSignatures(prevPubKey, MutableTransactionSignatureChecker(&mergedTx, i, amount), sigdata, DataFromTransaction(txv, i));\n         UpdateTransaction(mergedTx, i, sigdata);\n \n-        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx.wit.vtxinwit.size() > i ? &mergedTx.wit.vtxinwit[i].scriptWitness : NULL, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i, amount)))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, &txin.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i, amount)))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "db676d6b6362f9390cf4c3e213ac2837a9c456f3",
        "filename": "src/core_memusage.h",
        "status": "modified",
        "additions": 7,
        "deletions": 23,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f5e40d05970b6b82eb5315073c31f70cde9c0d8/src/core_memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f5e40d05970b6b82eb5315073c31f70cde9c0d8/src/core_memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_memusage.h?ref=9f5e40d05970b6b82eb5315073c31f70cde9c0d8",
        "patch": "@@ -18,35 +18,19 @@ static inline size_t RecursiveDynamicUsage(const COutPoint& out) {\n }\n \n static inline size_t RecursiveDynamicUsage(const CTxIn& in) {\n-    return RecursiveDynamicUsage(in.scriptSig) + RecursiveDynamicUsage(in.prevout);\n-}\n-\n-static inline size_t RecursiveDynamicUsage(const CTxOut& out) {\n-    return RecursiveDynamicUsage(out.scriptPubKey);\n-}\n-\n-static inline size_t RecursiveDynamicUsage(const CScriptWitness& scriptWit) {\n-    size_t mem = memusage::DynamicUsage(scriptWit.stack);\n-    for (std::vector<std::vector<unsigned char> >::const_iterator it = scriptWit.stack.begin(); it != scriptWit.stack.end(); it++) {\n-        mem += memusage::DynamicUsage(*it);\n+    size_t mem = RecursiveDynamicUsage(in.scriptSig) + RecursiveDynamicUsage(in.prevout) + memusage::DynamicUsage(in.scriptWitness.stack);\n+    for (std::vector<std::vector<unsigned char> >::const_iterator it = in.scriptWitness.stack.begin(); it != in.scriptWitness.stack.end(); it++) {\n+         mem += memusage::DynamicUsage(*it);\n     }\n     return mem;\n }\n \n-static inline size_t RecursiveDynamicUsage(const CTxInWitness& txinwit) {\n-    return RecursiveDynamicUsage(txinwit.scriptWitness);\n-}\n-\n-static inline size_t RecursiveDynamicUsage(const CTxWitness& txwit) {\n-    size_t mem = memusage::DynamicUsage(txwit.vtxinwit);\n-    for (std::vector<CTxInWitness>::const_iterator it = txwit.vtxinwit.begin(); it != txwit.vtxinwit.end(); it++) {\n-        mem += RecursiveDynamicUsage(*it);\n-    }\n-    return mem;\n+static inline size_t RecursiveDynamicUsage(const CTxOut& out) {\n+    return RecursiveDynamicUsage(out.scriptPubKey);\n }\n \n static inline size_t RecursiveDynamicUsage(const CTransaction& tx) {\n-    size_t mem = memusage::DynamicUsage(tx.vin) + memusage::DynamicUsage(tx.vout) + RecursiveDynamicUsage(tx.wit);\n+    size_t mem = memusage::DynamicUsage(tx.vin) + memusage::DynamicUsage(tx.vout);\n     for (std::vector<CTxIn>::const_iterator it = tx.vin.begin(); it != tx.vin.end(); it++) {\n         mem += RecursiveDynamicUsage(*it);\n     }\n@@ -57,7 +41,7 @@ static inline size_t RecursiveDynamicUsage(const CTransaction& tx) {\n }\n \n static inline size_t RecursiveDynamicUsage(const CMutableTransaction& tx) {\n-    size_t mem = memusage::DynamicUsage(tx.vin) + memusage::DynamicUsage(tx.vout) + RecursiveDynamicUsage(tx.wit);\n+    size_t mem = memusage::DynamicUsage(tx.vin) + memusage::DynamicUsage(tx.vout);\n     for (std::vector<CTxIn>::const_iterator it = tx.vin.begin(); it != tx.vin.end(); it++) {\n         mem += RecursiveDynamicUsage(*it);\n     }"
      },
      {
        "sha": "b7d05d8797e71672c750129c0a829f7c1f40f35d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 11,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f5e40d05970b6b82eb5315073c31f70cde9c0d8/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f5e40d05970b6b82eb5315073c31f70cde9c0d8/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9f5e40d05970b6b82eb5315073c31f70cde9c0d8",
        "patch": "@@ -1041,7 +1041,7 @@ int64_t GetTransactionSigOpCost(const CTransaction& tx, const CCoinsViewCache& i\n     for (unsigned int i = 0; i < tx.vin.size(); i++)\n     {\n         const CTxOut &prevout = inputs.GetOutputFor(tx.vin[i]);\n-        nSigOps += CountWitnessSigOps(tx.vin[i].scriptSig, prevout.scriptPubKey, i < tx.wit.vtxinwit.size() ? &tx.wit.vtxinwit[i].scriptWitness : NULL, flags);\n+        nSigOps += CountWitnessSigOps(tx.vin[i].scriptSig, prevout.scriptPubKey, &tx.vin[i].scriptWitness, flags);\n     }\n     return nSigOps;\n }\n@@ -1144,7 +1144,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n \n     // Reject transactions with witness before segregated witness activates (override with -prematurewitness)\n     bool witnessEnabled = IsWitnessEnabled(chainActive.Tip(), Params().GetConsensus());\n-    if (!GetBoolArg(\"-prematurewitness\",false) && !tx.wit.IsNull() && !witnessEnabled) {\n+    if (!GetBoolArg(\"-prematurewitness\",false) && tx.HasWitness() && !witnessEnabled) {\n         return state.DoS(0, false, REJECT_NONSTANDARD, \"no-witness-yet\", true);\n     }\n \n@@ -1914,7 +1914,7 @@ void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, int nHeight)\n \n bool CScriptCheck::operator()() {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n-    const CScriptWitness *witness = (nIn < ptxTo->wit.vtxinwit.size()) ? &ptxTo->wit.vtxinwit[nIn].scriptWitness : NULL;\n+    const CScriptWitness *witness = &ptxTo->vin[nIn].scriptWitness;\n     if (!VerifyScript(scriptSig, scriptPubKey, witness, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, amount, cacheStore), &error)) {\n         return false;\n     }\n@@ -3460,10 +3460,9 @@ void UpdateUncommittedBlockStructures(CBlock& block, const CBlockIndex* pindexPr\n {\n     int commitpos = GetWitnessCommitmentIndex(block);\n     static const std::vector<unsigned char> nonce(32, 0x00);\n-    if (commitpos != -1 && IsWitnessEnabled(pindexPrev, consensusParams) && block.vtx[0].wit.IsEmpty()) {\n-        block.vtx[0].wit.vtxinwit.resize(1);\n-        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.resize(1);\n-        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack[0] = nonce;\n+    if (commitpos != -1 && IsWitnessEnabled(pindexPrev, consensusParams) && !block.vtx[0].HasWitness()) {\n+        block.vtx[0].vin[0].scriptWitness.stack.resize(1);\n+        block.vtx[0].vin[0].scriptWitness.stack[0] = nonce;\n     }\n }\n \n@@ -3473,7 +3472,7 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n     int commitpos = GetWitnessCommitmentIndex(block);\n     bool fHaveWitness = false;\n     for (size_t t = 1; t < block.vtx.size(); t++) {\n-        if (!block.vtx[t].wit.IsNull()) {\n+        if (block.vtx[t].HasWitness()) {\n             fHaveWitness = true;\n             break;\n         }\n@@ -3574,10 +3573,10 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Co\n             // The malleation check is ignored; as the transaction tree itself\n             // already does not permit it, it is impossible to trigger in the\n             // witness tree.\n-            if (block.vtx[0].wit.vtxinwit.size() != 1 || block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.size() != 1 || block.vtx[0].wit.vtxinwit[0].scriptWitness.stack[0].size() != 32) {\n+            if (block.vtx[0].vin[0].scriptWitness.stack.size() != 1 || block.vtx[0].vin[0].scriptWitness.stack[0].size() != 32) {\n                 return state.DoS(100, false, REJECT_INVALID, \"bad-witness-nonce-size\", true, strprintf(\"%s : invalid witness nonce size\", __func__));\n             }\n-            CHash256().Write(hashWitness.begin(), 32).Write(&block.vtx[0].wit.vtxinwit[0].scriptWitness.stack[0][0], 32).Finalize(hashWitness.begin());\n+            CHash256().Write(hashWitness.begin(), 32).Write(&block.vtx[0].vin[0].scriptWitness.stack[0][0], 32).Finalize(hashWitness.begin());\n             if (memcmp(hashWitness.begin(), &block.vtx[0].vout[commitpos].scriptPubKey[6], 32)) {\n                 return state.DoS(100, false, REJECT_INVALID, \"bad-witness-merkle-match\", true, strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n             }\n@@ -3588,7 +3587,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Co\n     // No witness data is allowed in blocks that don't commit to witness data, as this would otherwise leave room for spam\n     if (!fHaveWitness) {\n         for (size_t i = 0; i < block.vtx.size(); i++) {\n-            if (!block.vtx[i].wit.IsNull()) {\n+            if (block.vtx[i].HasWitness()) {\n                 return state.DoS(100, false, REJECT_INVALID, \"unexpected-witness\", true, strprintf(\"%s : unexpected witness data found\", __func__));\n             }\n         }"
      },
      {
        "sha": "d4ae49e5e8b71e5befed6bca51a4dd379d3d25bd",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f5e40d05970b6b82eb5315073c31f70cde9c0d8/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f5e40d05970b6b82eb5315073c31f70cde9c0d8/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=9f5e40d05970b6b82eb5315073c31f70cde9c0d8",
        "patch": "@@ -242,7 +242,7 @@ bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& packa\n     BOOST_FOREACH (const CTxMemPool::txiter it, package) {\n         if (!IsFinalTx(it->GetTx(), nHeight, nLockTimeCutoff))\n             return false;\n-        if (!fIncludeWitness && !it->GetTx().wit.IsNull())\n+        if (!fIncludeWitness && it->GetTx().HasWitness())\n             return false;\n         if (fNeedSizeAccounting) {\n             uint64_t nTxSize = ::GetSerializeSize(it->GetTx(), SER_NETWORK, PROTOCOL_VERSION);\n@@ -551,7 +551,7 @@ void BlockAssembler::addPriorityTxs()\n         }\n \n         // cannot accept witness transactions into a non-witness block\n-        if (!fIncludeWitness && !iter->GetTx().wit.IsNull())\n+        if (!fIncludeWitness && iter->GetTx().HasWitness())\n             continue;\n \n         // If tx is dependent on other mempool txs which haven't yet been included"
      },
      {
        "sha": "8ccef6dfa2442e8c89a2b065f8475cd73bbb49ad",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f5e40d05970b6b82eb5315073c31f70cde9c0d8/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f5e40d05970b6b82eb5315073c31f70cde9c0d8/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=9f5e40d05970b6b82eb5315073c31f70cde9c0d8",
        "patch": "@@ -60,7 +60,7 @@ std::string CTxOut::ToString() const\n }\n \n CMutableTransaction::CMutableTransaction() : nVersion(CTransaction::CURRENT_VERSION), nLockTime(0) {}\n-CMutableTransaction::CMutableTransaction(const CTransaction& tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), wit(tx.wit), nLockTime(tx.nLockTime) {}\n+CMutableTransaction::CMutableTransaction(const CTransaction& tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), nLockTime(tx.nLockTime) {}\n \n uint256 CMutableTransaction::GetHash() const\n {\n@@ -79,15 +79,14 @@ uint256 CTransaction::GetWitnessHash() const\n \n CTransaction::CTransaction() : nVersion(CTransaction::CURRENT_VERSION), vin(), vout(), nLockTime(0) { }\n \n-CTransaction::CTransaction(const CMutableTransaction &tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), wit(tx.wit), nLockTime(tx.nLockTime) {\n+CTransaction::CTransaction(const CMutableTransaction &tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), nLockTime(tx.nLockTime) {\n     UpdateHash();\n }\n \n CTransaction& CTransaction::operator=(const CTransaction &tx) {\n     nVersion = tx.nVersion;\n     vin = tx.vin;\n     vout = tx.vout;\n-    wit = tx.wit;\n     nLockTime = tx.nLockTime;\n     hash = tx.hash;\n     return *this;\n@@ -142,8 +141,8 @@ std::string CTransaction::ToString() const\n         nLockTime);\n     for (unsigned int i = 0; i < vin.size(); i++)\n         str += \"    \" + vin[i].ToString() + \"\\n\";\n-    for (unsigned int i = 0; i < wit.vtxinwit.size(); i++)\n-        str += \"    \" + wit.vtxinwit[i].scriptWitness.ToString() + \"\\n\";\n+    for (unsigned int i = 0; i < vin.size(); i++)\n+        str += \"    \" + vin[i].scriptWitness.ToString() + \"\\n\";\n     for (unsigned int i = 0; i < vout.size(); i++)\n         str += \"    \" + vout[i].ToString() + \"\\n\";\n     return str;"
      },
      {
        "sha": "0af4a4c5370f9107e64a88840b596996c464a5cb",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 41,
        "deletions": 65,
        "changes": 106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f5e40d05970b6b82eb5315073c31f70cde9c0d8/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f5e40d05970b6b82eb5315073c31f70cde9c0d8/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=9f5e40d05970b6b82eb5315073c31f70cde9c0d8",
        "patch": "@@ -65,6 +65,7 @@ class CTxIn\n     COutPoint prevout;\n     CScript scriptSig;\n     uint32_t nSequence;\n+    CScriptWitness scriptWitness; //! Only serialized through CTxInWitnessSerializer\n \n     /* Setting nSequence to this value for every input in a transaction\n      * disables nLockTime. */\n@@ -125,6 +126,33 @@ class CTxIn\n     std::string ToString() const;\n };\n \n+class CTxInsWitnessSerializer\n+{\n+private:\n+    std::vector<CTxIn>* ptr;\n+\n+public:\n+    CTxInsWitnessSerializer(std::vector<CTxIn>* txin) : ptr(txin) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        for (unsigned int i = 0; i < ptr->size(); i++) {\n+            READWRITE((*ptr)[i].scriptWitness.stack);\n+        }\n+    }\n+\n+    bool IsNull() {\n+        for (unsigned int i = 0; i < ptr->size(); i++) {\n+            if (!(*ptr)[i].scriptWitness.IsNull()) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+};\n+\n /** An output of a transaction.  It contains the public key that the next input\n  * must be able to sign with to claim it.\n  */\n@@ -213,62 +241,6 @@ class CTxOut\n     std::string ToString() const;\n };\n \n-class CTxInWitness\n-{\n-public:\n-    CScriptWitness scriptWitness;\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n-    {\n-        READWRITE(scriptWitness.stack);\n-    }\n-\n-    bool IsNull() const { return scriptWitness.IsNull(); }\n-\n-    CTxInWitness() { }\n-};\n-\n-class CTxWitness\n-{\n-public:\n-    /** In case vtxinwit is missing, all entries are treated as if they were empty CTxInWitnesses */\n-    std::vector<CTxInWitness> vtxinwit;\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    bool IsEmpty() const { return vtxinwit.empty(); }\n-\n-    bool IsNull() const\n-    {\n-        for (size_t n = 0; n < vtxinwit.size(); n++) {\n-            if (!vtxinwit[n].IsNull()) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-\n-    void SetNull()\n-    {\n-        vtxinwit.clear();\n-    }\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n-    {\n-        for (size_t n = 0; n < vtxinwit.size(); n++) {\n-            READWRITE(vtxinwit[n]);\n-        }\n-        if (IsNull()) {\n-            /* It's illegal to encode a witness when all vtxinwit entries are empty. */\n-            throw std::ios_base::failure(\"Superfluous witness record\");\n-        }\n-    }\n-};\n-\n struct CMutableTransaction;\n \n /**\n@@ -297,7 +269,6 @@ inline void SerializeTransaction(TxType& tx, Stream& s, Operation ser_action, in\n     if (ser_action.ForRead()) {\n         tx.vin.clear();\n         tx.vout.clear();\n-        tx.wit.SetNull();\n         /* Try to read the vin. In case the dummy is there, this will be read as an empty vector. */\n         READWRITE(tx.vin);\n         if (tx.vin.size() == 0 && fAllowWitness) {\n@@ -314,19 +285,22 @@ inline void SerializeTransaction(TxType& tx, Stream& s, Operation ser_action, in\n         if ((flags & 1) && fAllowWitness) {\n             /* The witness flag is present, and we support witnesses. */\n             flags ^= 1;\n-            tx.wit.vtxinwit.resize(tx.vin.size());\n-            READWRITE(tx.wit);\n+            CTxInsWitnessSerializer ser(&tx.vin);\n+            READWRITE(ser);\n+            if (ser.IsNull()) {\n+                /* It's illegal to encode a witness when all vtxinwit entries are empty. */\n+                throw std::ios_base::failure(\"Superfluous witness record\");\n+            }\n         }\n         if (flags) {\n             /* Unknown flag in the serialization */\n             throw std::ios_base::failure(\"Unknown transaction optional data\");\n         }\n     } else {\n         // Consistency check\n-        assert(tx.wit.vtxinwit.size() <= tx.vin.size());\n         if (fAllowWitness) {\n             /* Check whether witnesses need to be serialized. */\n-            if (!tx.wit.IsNull()) {\n+            if (tx.HasWitness()) {\n                 flags |= 1;\n             }\n         }\n@@ -339,8 +313,8 @@ inline void SerializeTransaction(TxType& tx, Stream& s, Operation ser_action, in\n         READWRITE(tx.vin);\n         READWRITE(tx.vout);\n         if (flags & 1) {\n-            tx.wit.vtxinwit.resize(tx.vin.size());\n-            READWRITE(tx.wit);\n+            CTxInsWitnessSerializer ser(&tx.vin);\n+            READWRITE(ser);\n         }\n     }\n     READWRITE(tx.nLockTime);\n@@ -376,7 +350,6 @@ class CTransaction\n     int32_t nVersion;\n     std::vector<CTxIn> vin;\n     std::vector<CTxOut> vout;\n-    CTxWitness wit;\n     uint32_t nLockTime;\n \n     /** Construct a CTransaction that qualifies as IsNull() */\n@@ -437,6 +410,8 @@ class CTransaction\n     std::string ToString() const;\n \n     void UpdateHash();\n+\n+    bool HasWitness() const { return !CTxInsWitnessSerializer(const_cast<std::vector<CTxIn>*>(&vin)).IsNull(); }\n };\n \n /** A mutable version of CTransaction. */\n@@ -445,7 +420,6 @@ struct CMutableTransaction\n     int32_t nVersion;\n     std::vector<CTxIn> vin;\n     std::vector<CTxOut> vout;\n-    CTxWitness wit;\n     uint32_t nLockTime;\n \n     CMutableTransaction();\n@@ -462,6 +436,8 @@ struct CMutableTransaction\n      * fly, as opposed to GetHash() in CTransaction, which uses a cached result.\n      */\n     uint256 GetHash() const;\n+\n+    bool HasWitness() const { return !CTxInsWitnessSerializer(const_cast<std::vector<CTxIn>*>(&vin)).IsNull(); }\n };\n \n /** Compute the weight of a transaction, as defined by BIP 141 */"
      },
      {
        "sha": "9fe69162af6c297d42b7035d9918237220aac317",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f5e40d05970b6b82eb5315073c31f70cde9c0d8/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f5e40d05970b6b82eb5315073c31f70cde9c0d8/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=9f5e40d05970b6b82eb5315073c31f70cde9c0d8",
        "patch": "@@ -82,16 +82,13 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n             o.push_back(Pair(\"hex\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end())));\n             in.push_back(Pair(\"scriptSig\", o));\n         }\n-        if (!tx.wit.IsNull()) {\n-            if (!tx.wit.vtxinwit[i].IsNull()) {\n+        if (tx.HasWitness()) {\n                 UniValue txinwitness(UniValue::VARR);\n-                for (unsigned int j = 0; j < tx.wit.vtxinwit[i].scriptWitness.stack.size(); j++) {\n-                    std::vector<unsigned char> item = tx.wit.vtxinwit[i].scriptWitness.stack[j];\n+                for (unsigned int j = 0; j < tx.vin[i].scriptWitness.stack.size(); j++) {\n+                    std::vector<unsigned char> item = tx.vin[i].scriptWitness.stack[j];\n                     txinwitness.push_back(HexStr(item.begin(), item.end()));\n                 }\n                 in.push_back(Pair(\"txinwitness\", txinwitness));\n-            }\n-\n         }\n         in.push_back(Pair(\"sequence\", (int64_t)txin.nSequence));\n         vin.push_back(in);\n@@ -818,7 +815,7 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n         UpdateTransaction(mergedTx, i, sigdata);\n \n         ScriptError serror = SCRIPT_ERR_OK;\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx.wit.vtxinwit.size() > i ? &mergedTx.wit.vtxinwit[i].scriptWitness : NULL, STANDARD_SCRIPT_VERIFY_FLAGS, TransactionSignatureChecker(&txConst, i, amount), &serror)) {\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, &txin.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, TransactionSignatureChecker(&txConst, i, amount), &serror)) {\n             TxInErrorToJSON(txin, vErrors, ScriptErrorString(serror));\n         }\n     }"
      },
      {
        "sha": "9485fc1bdd843a06584d8d0f77cef61093efbd03",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f5e40d05970b6b82eb5315073c31f70cde9c0d8/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f5e40d05970b6b82eb5315073c31f70cde9c0d8/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=9f5e40d05970b6b82eb5315073c31f70cde9c0d8",
        "patch": "@@ -85,7 +85,7 @@ static int verify_script(const unsigned char *scriptPubKey, unsigned int scriptP\n         // Regardless of the verification result, the tx did not error.\n         set_error(err, bitcoinconsensus_ERR_OK);\n \n-        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), nIn < tx.wit.vtxinwit.size() ? &tx.wit.vtxinwit[nIn].scriptWitness : NULL, flags, TransactionSignatureChecker(&tx, nIn, amount), NULL);\n+        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), &tx.vin[nIn].scriptWitness, flags, TransactionSignatureChecker(&tx, nIn, amount), NULL);\n     } catch (const std::exception&) {\n         return set_error(err, bitcoinconsensus_ERR_TX_DESERIALIZE); // Error deserializing\n     }"
      },
      {
        "sha": "76419c1495f7d19bdd7693b46bb159f05cc496fe",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f5e40d05970b6b82eb5315073c31f70cde9c0d8/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f5e40d05970b6b82eb5315073c31f70cde9c0d8/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=9f5e40d05970b6b82eb5315073c31f70cde9c0d8",
        "patch": "@@ -656,6 +656,8 @@ struct CScriptWitness\n \n     bool IsNull() const { return stack.empty(); }\n \n+    void SetNull() { stack.clear(); stack.shrink_to_fit(); }\n+\n     std::string ToString() const;\n };\n "
      },
      {
        "sha": "28fa37efb5e9cabc37a265dfeb5f581a594f990c",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f5e40d05970b6b82eb5315073c31f70cde9c0d8/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f5e40d05970b6b82eb5315073c31f70cde9c0d8/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=9f5e40d05970b6b82eb5315073c31f70cde9c0d8",
        "patch": "@@ -190,20 +190,15 @@ SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nI\n     SignatureData data;\n     assert(tx.vin.size() > nIn);\n     data.scriptSig = tx.vin[nIn].scriptSig;\n-    if (tx.wit.vtxinwit.size() > nIn) {\n-        data.scriptWitness = tx.wit.vtxinwit[nIn].scriptWitness;\n-    }\n+    data.scriptWitness = tx.vin[nIn].scriptWitness;\n     return data;\n }\n \n void UpdateTransaction(CMutableTransaction& tx, unsigned int nIn, const SignatureData& data)\n {\n     assert(tx.vin.size() > nIn);\n     tx.vin[nIn].scriptSig = data.scriptSig;\n-    if (!data.scriptWitness.IsNull() || tx.wit.vtxinwit.size() > nIn) {\n-        tx.wit.vtxinwit.resize(tx.vin.size());\n-        tx.wit.vtxinwit[nIn].scriptWitness = data.scriptWitness;\n-    }\n+    tx.vin[nIn].scriptWitness = data.scriptWitness;\n }\n \n bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, const CAmount& amount, int nHashType)"
      },
      {
        "sha": "67d3a57a43c8a2851190368899c58e86f1422aaa",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f5e40d05970b6b82eb5315073c31f70cde9c0d8/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f5e40d05970b6b82eb5315073c31f70cde9c0d8/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=9f5e40d05970b6b82eb5315073c31f70cde9c0d8",
        "patch": "@@ -142,8 +142,7 @@ CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CSc\n     txSpend.nLockTime = 0;\n     txSpend.vin.resize(1);\n     txSpend.vout.resize(1);\n-    txSpend.wit.vtxinwit.resize(1);\n-    txSpend.wit.vtxinwit[0].scriptWitness = scriptWitness;\n+    txSpend.vin[0].scriptWitness = scriptWitness;\n     txSpend.vin[0].prevout.hash = txCredit.GetHash();\n     txSpend.vin[0].prevout.n = 0;\n     txSpend.vin[0].scriptSig = scriptSig;"
      },
      {
        "sha": "71dd609753aa793ae1cffe3e6a1aae9112a2fa57",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 21,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f5e40d05970b6b82eb5315073c31f70cde9c0d8/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f5e40d05970b6b82eb5315073c31f70cde9c0d8/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=9f5e40d05970b6b82eb5315073c31f70cde9c0d8",
        "patch": "@@ -73,7 +73,7 @@ ScriptError VerifyWithFlag(const CTransaction& output, const CMutableTransaction\n {\n     ScriptError error;\n     CTransaction inputi(input);\n-    bool ret = VerifyScript(inputi.vin[0].scriptSig, output.vout[0].scriptPubKey, inputi.wit.vtxinwit.size() > 0 ? &inputi.wit.vtxinwit[0].scriptWitness : NULL, flags, TransactionSignatureChecker(&inputi, 0, output.vout[0].nValue), &error);\n+    bool ret = VerifyScript(inputi.vin[0].scriptSig, output.vout[0].scriptPubKey, &inputi.vin[0].scriptWitness, flags, TransactionSignatureChecker(&inputi, 0, output.vout[0].nValue), &error);\n     BOOST_CHECK((ret == true) == (error == SCRIPT_ERR_OK));\n \n     return error;\n@@ -84,13 +84,12 @@ ScriptError VerifyWithFlag(const CTransaction& output, const CMutableTransaction\n  * and witness such that spendingTx spends output zero of creationTx.\n  * Also inserts creationTx's output into the coins view.\n  */\n-void BuildTxs(CMutableTransaction& spendingTx, CCoinsViewCache& coins, CMutableTransaction& creationTx, const CScript& scriptPubKey, const CScript& scriptSig, const CTxInWitness& witness)\n+void BuildTxs(CMutableTransaction& spendingTx, CCoinsViewCache& coins, CMutableTransaction& creationTx, const CScript& scriptPubKey, const CScript& scriptSig, const CScriptWitness& witness)\n {\n     creationTx.nVersion = 1;\n     creationTx.vin.resize(1);\n     creationTx.vin[0].prevout.SetNull();\n     creationTx.vin[0].scriptSig = CScript();\n-    creationTx.wit.vtxinwit.resize(1);\n     creationTx.vout.resize(1);\n     creationTx.vout[0].nValue = 1;\n     creationTx.vout[0].scriptPubKey = scriptPubKey;\n@@ -100,8 +99,7 @@ void BuildTxs(CMutableTransaction& spendingTx, CCoinsViewCache& coins, CMutableT\n     spendingTx.vin[0].prevout.hash = creationTx.GetHash();\n     spendingTx.vin[0].prevout.n = 0;\n     spendingTx.vin[0].scriptSig = scriptSig;\n-    spendingTx.wit.vtxinwit.resize(1);\n-    spendingTx.wit.vtxinwit[0] = witness;\n+    spendingTx.vin[0].scriptWitness = witness;\n     spendingTx.vout.resize(1);\n     spendingTx.vout[0].nValue = 1;\n     spendingTx.vout[0].scriptPubKey = CScript();\n@@ -133,7 +131,7 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n         // Do not use a valid signature to avoid using wallet operations.\n         CScript scriptSig = CScript() << OP_0 << OP_0;\n \n-        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, CTxInWitness());\n+        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, CScriptWitness());\n         // Legacy counting only includes signature operations in scriptSigs and scriptPubKeys\n         // of a transaction and does not take the actual executed sig operations into account.\n         // spendingTx in itself does not contain a signature operation.\n@@ -151,7 +149,7 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n         CScript scriptPubKey = GetScriptForDestination(CScriptID(redeemScript));\n         CScript scriptSig = CScript() << OP_0 << OP_0 << ToByteVector(redeemScript);\n \n-        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, CTxInWitness());\n+        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, CScriptWitness());\n         assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags) == 2 * WITNESS_SCALE_FACTOR);\n         assert(VerifyWithFlag(creationTx, spendingTx, flags) == SCRIPT_ERR_CHECKMULTISIGVERIFY);\n     }\n@@ -161,14 +159,12 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n         CScript p2pk = CScript() << ToByteVector(pubkey) << OP_CHECKSIG;\n         CScript scriptPubKey = GetScriptForWitness(p2pk);\n         CScript scriptSig = CScript();\n-        CTxInWitness witness;\n         CScriptWitness scriptWitness;\n         scriptWitness.stack.push_back(vector<unsigned char>(0));\n         scriptWitness.stack.push_back(vector<unsigned char>(0));\n-        witness.scriptWitness = scriptWitness;\n \n \n-        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, witness);\n+        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, scriptWitness);\n         assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags) == 1);\n         // No signature operations if we don't verify the witness.\n         assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags & ~SCRIPT_VERIFY_WITNESS) == 0);\n@@ -177,10 +173,10 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n         // The sig op cost for witness version != 0 is zero.\n         assert(scriptPubKey[0] == 0x00);\n         scriptPubKey[0] = 0x51;\n-        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, witness);\n+        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, scriptWitness);\n         assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags) == 0);\n         scriptPubKey[0] = 0x00;\n-        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, witness);\n+        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, scriptWitness);\n \n         // The witness of a coinbase transaction is not taken into account.\n         spendingTx.vin[0].prevout.SetNull();\n@@ -193,13 +189,11 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n         CScript scriptSig = GetScriptForWitness(p2pk);\n         CScript scriptPubKey = GetScriptForDestination(CScriptID(scriptSig));\n         scriptSig = CScript() << ToByteVector(scriptSig);\n-        CTxInWitness witness;\n         CScriptWitness scriptWitness;\n         scriptWitness.stack.push_back(vector<unsigned char>(0));\n         scriptWitness.stack.push_back(vector<unsigned char>(0));\n-        witness.scriptWitness = scriptWitness;\n \n-        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, witness);\n+        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, scriptWitness);\n         assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags) == 1);\n         assert(VerifyWithFlag(creationTx, spendingTx, flags) == SCRIPT_ERR_EQUALVERIFY);\n     }\n@@ -209,14 +203,12 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n         CScript witnessScript = CScript() << 1 << ToByteVector(pubkey) << ToByteVector(pubkey) << 2 << OP_CHECKMULTISIGVERIFY;\n         CScript scriptPubKey = GetScriptForWitness(witnessScript);\n         CScript scriptSig = CScript();\n-        CTxInWitness witness;\n         CScriptWitness scriptWitness;\n         scriptWitness.stack.push_back(vector<unsigned char>(0));\n         scriptWitness.stack.push_back(vector<unsigned char>(0));\n         scriptWitness.stack.push_back(vector<unsigned char>(witnessScript.begin(), witnessScript.end()));\n-        witness.scriptWitness = scriptWitness;\n \n-        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, witness);\n+        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, scriptWitness);\n         assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags) == 2);\n         assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags & ~SCRIPT_VERIFY_WITNESS) == 0);\n         assert(VerifyWithFlag(creationTx, spendingTx, flags) == SCRIPT_ERR_CHECKMULTISIGVERIFY);\n@@ -228,14 +220,12 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n         CScript redeemScript = GetScriptForWitness(witnessScript);\n         CScript scriptPubKey = GetScriptForDestination(CScriptID(redeemScript));\n         CScript scriptSig = CScript() << ToByteVector(redeemScript);\n-        CTxInWitness witness;\n         CScriptWitness scriptWitness;\n         scriptWitness.stack.push_back(vector<unsigned char>(0));\n         scriptWitness.stack.push_back(vector<unsigned char>(0));\n         scriptWitness.stack.push_back(vector<unsigned char>(witnessScript.begin(), witnessScript.end()));\n-        witness.scriptWitness = scriptWitness;\n \n-        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, witness);\n+        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, scriptWitness);\n         assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags) == 2);\n         assert(VerifyWithFlag(creationTx, spendingTx, flags) == SCRIPT_ERR_CHECKMULTISIGVERIFY);\n     }"
      },
      {
        "sha": "34b443ba038bf24e8699c03c258730e0af9a8125",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 13,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f5e40d05970b6b82eb5315073c31f70cde9c0d8/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f5e40d05970b6b82eb5315073c31f70cde9c0d8/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=9f5e40d05970b6b82eb5315073c31f70cde9c0d8",
        "patch": "@@ -166,7 +166,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n                     amount = mapprevOutValues[tx.vin[i].prevout];\n                 }\n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n-                const CScriptWitness *witness = (i < tx.wit.vtxinwit.size()) ? &tx.wit.vtxinwit[i].scriptWitness : NULL;\n+                const CScriptWitness *witness = &tx.vin[i].scriptWitness;\n                 BOOST_CHECK_MESSAGE(VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n                                                  witness, verify_flags, TransactionSignatureChecker(&tx, i, amount), &err),\n                                     strTest);\n@@ -250,7 +250,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n                 if (mapprevOutValues.count(tx.vin[i].prevout)) {\n                     amount = mapprevOutValues[tx.vin[i].prevout];\n                 }\n-                const CScriptWitness *witness = (i < tx.wit.vtxinwit.size()) ? &tx.wit.vtxinwit[i].scriptWitness : NULL;\n+                const CScriptWitness *witness = &tx.vin[i].scriptWitness;\n                 fValid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n                                       witness, verify_flags, TransactionSignatureChecker(&tx, i, amount), &err);\n             }\n@@ -347,7 +347,6 @@ void CreateCreditAndSpend(const CKeyStore& keystore, const CScript& outscript, C\n     outputm.vin.resize(1);\n     outputm.vin[0].prevout.SetNull();\n     outputm.vin[0].scriptSig = CScript();\n-    outputm.wit.vtxinwit.resize(1);\n     outputm.vout.resize(1);\n     outputm.vout[0].nValue = 1;\n     outputm.vout[0].scriptPubKey = outscript;\n@@ -358,14 +357,12 @@ void CreateCreditAndSpend(const CKeyStore& keystore, const CScript& outscript, C\n     assert(output.vin[0] == outputm.vin[0]);\n     assert(output.vout.size() == 1);\n     assert(output.vout[0] == outputm.vout[0]);\n-    assert(output.wit.vtxinwit.size() == 0);\n \n     CMutableTransaction inputm;\n     inputm.nVersion = 1;\n     inputm.vin.resize(1);\n     inputm.vin[0].prevout.hash = output.GetHash();\n     inputm.vin[0].prevout.n = 0;\n-    inputm.wit.vtxinwit.resize(1);\n     inputm.vout.resize(1);\n     inputm.vout[0].nValue = 1;\n     inputm.vout[0].scriptPubKey = CScript();\n@@ -378,20 +375,14 @@ void CreateCreditAndSpend(const CKeyStore& keystore, const CScript& outscript, C\n     assert(input.vin[0] == inputm.vin[0]);\n     assert(input.vout.size() == 1);\n     assert(input.vout[0] == inputm.vout[0]);\n-    if (inputm.wit.IsNull()) {\n-        assert(input.wit.IsNull());\n-    } else {\n-        assert(!input.wit.IsNull());\n-        assert(input.wit.vtxinwit.size() == 1);\n-        assert(input.wit.vtxinwit[0].scriptWitness.stack == inputm.wit.vtxinwit[0].scriptWitness.stack);\n-    }\n+    assert(input.vin[0].scriptWitness.stack == inputm.vin[0].scriptWitness.stack);\n }\n \n void CheckWithFlag(const CTransaction& output, const CMutableTransaction& input, int flags, bool success)\n {\n     ScriptError error;\n     CTransaction inputi(input);\n-    bool ret = VerifyScript(inputi.vin[0].scriptSig, output.vout[0].scriptPubKey, inputi.wit.vtxinwit.size() > 0 ? &inputi.wit.vtxinwit[0].scriptWitness : NULL, flags, TransactionSignatureChecker(&inputi, 0, output.vout[0].nValue), &error);\n+    bool ret = VerifyScript(inputi.vin[0].scriptSig, output.vout[0].scriptPubKey, &inputi.vin[0].scriptWitness, flags, TransactionSignatureChecker(&inputi, 0, output.vout[0].nValue), &error);\n     assert(ret == success);\n }\n "
      },
      {
        "sha": "b9ea8e2edaa3d01ef03256c210c1e23c7c7c2410",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f5e40d05970b6b82eb5315073c31f70cde9c0d8/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f5e40d05970b6b82eb5315073c31f70cde9c0d8/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9f5e40d05970b6b82eb5315073c31f70cde9c0d8",
        "patch": "@@ -2383,9 +2383,10 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n \n                 // Remove scriptSigs if we used dummy signatures for fee calculation\n                 if (!sign) {\n-                    BOOST_FOREACH (CTxIn& vin, txNew.vin)\n+                    BOOST_FOREACH (CTxIn& vin, txNew.vin) {\n                         vin.scriptSig = CScript();\n-                    txNew.wit.SetNull();\n+                        vin.scriptWitness.SetNull();\n+                    }\n                 }\n \n                 // Embed the constructed transaction data in wtxNew."
      }
    ]
  }
]