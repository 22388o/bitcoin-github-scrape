[
  {
    "sha": "df1df35bab6cf689971f2c8c0962f062cadf1c54",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjFkZjM1YmFiNmNmNjg5OTcxZjJjOGMwOTYyZjA2MmNhZGYxYzU0",
    "commit": {
      "author": {
        "name": "meighti",
        "email": "me83quest@yahoo.com",
        "date": "2013-08-02T20:45:25Z"
      },
      "committer": {
        "name": "meighti",
        "email": "me83quest@yahoo.com",
        "date": "2013-08-02T20:45:25Z"
      },
      "message": "eraseprivkey\n\n- New RPC command called 'eraseprivkey' makes it possible to go back\nand forth together with importprivkey\n- Works with both unecrypted and encrypted wallets\n- If watch-only pulls get merged, it would hopefully help to add 'sweep\nprivate key' functionality",
      "tree": {
        "sha": "54a473b6da045a0e3ac04e2d5e1c9c8006cf6e18",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/54a473b6da045a0e3ac04e2d5e1c9c8006cf6e18"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df1df35bab6cf689971f2c8c0962f062cadf1c54",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df1df35bab6cf689971f2c8c0962f062cadf1c54",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df1df35bab6cf689971f2c8c0962f062cadf1c54",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df1df35bab6cf689971f2c8c0962f062cadf1c54/comments",
    "author": {
      "login": "meighti",
      "id": 2981948,
      "node_id": "MDQ6VXNlcjI5ODE5NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2981948?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meighti",
      "html_url": "https://github.com/meighti",
      "followers_url": "https://api.github.com/users/meighti/followers",
      "following_url": "https://api.github.com/users/meighti/following{/other_user}",
      "gists_url": "https://api.github.com/users/meighti/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meighti/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meighti/subscriptions",
      "organizations_url": "https://api.github.com/users/meighti/orgs",
      "repos_url": "https://api.github.com/users/meighti/repos",
      "events_url": "https://api.github.com/users/meighti/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meighti/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meighti",
      "id": 2981948,
      "node_id": "MDQ6VXNlcjI5ODE5NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2981948?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meighti",
      "html_url": "https://github.com/meighti",
      "followers_url": "https://api.github.com/users/meighti/followers",
      "following_url": "https://api.github.com/users/meighti/following{/other_user}",
      "gists_url": "https://api.github.com/users/meighti/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meighti/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meighti/subscriptions",
      "organizations_url": "https://api.github.com/users/meighti/orgs",
      "repos_url": "https://api.github.com/users/meighti/repos",
      "events_url": "https://api.github.com/users/meighti/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meighti/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "40809aed657502e9de158e2cfe2c659a316f2f90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40809aed657502e9de158e2cfe2c659a316f2f90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/40809aed657502e9de158e2cfe2c659a316f2f90"
      }
    ],
    "stats": {
      "total": 97,
      "additions": 97,
      "deletions": 0
    },
    "files": [
      {
        "sha": "38da451b44567f30387518b146cc9a908c0ea06a",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df1df35bab6cf689971f2c8c0962f062cadf1c54/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df1df35bab6cf689971f2c8c0962f062cadf1c54/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=df1df35bab6cf689971f2c8c0962f062cadf1c54",
        "patch": "@@ -251,6 +251,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"listsinceblock\",         &listsinceblock,         false,     false },\n     { \"dumpprivkey\",            &dumpprivkey,            true,      false },\n     { \"importprivkey\",          &importprivkey,          false,     false },\n+    { \"eraseprivkey\",           &eraseprivkey,           false,     false },\n     { \"listunspent\",            &listunspent,            false,     false },\n     { \"getrawtransaction\",      &getrawtransaction,      false,     false },\n     { \"createrawtransaction\",   &createrawtransaction,   false,     false },\n@@ -1184,6 +1185,7 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n     if (strMethod == \"lockunspent\"            && n > 0) ConvertTo<bool>(params[0]);\n     if (strMethod == \"lockunspent\"            && n > 1) ConvertTo<Array>(params[1]);\n     if (strMethod == \"importprivkey\"          && n > 2) ConvertTo<bool>(params[2]);\n+    if (strMethod == \"eraseprivkey\"           && n > 1) ConvertTo<bool>(params[1]);\n \n     return params;\n }"
      },
      {
        "sha": "1ad1e75c0152e4d09fa868d931c983c7b2b7aef0",
        "filename": "src/bitcoinrpc.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df1df35bab6cf689971f2c8c0962f062cadf1c54/src/bitcoinrpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df1df35bab6cf689971f2c8c0962f062cadf1c54/src/bitcoinrpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.h?ref=df1df35bab6cf689971f2c8c0962f062cadf1c54",
        "patch": "@@ -139,6 +139,7 @@ extern json_spirit::Value addnode(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getaddednodeinfo(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value dumpprivkey(const json_spirit::Array& params, bool fHelp); // in rpcdump.cpp\n extern json_spirit::Value importprivkey(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value eraseprivkey(const json_spirit::Array& params, bool fHelp);\n \n extern json_spirit::Value getgenerate(const json_spirit::Array& params, bool fHelp); // in rpcmining.cpp\n extern json_spirit::Value setgenerate(const json_spirit::Array& params, bool fHelp);"
      },
      {
        "sha": "4bce3584d9437bdc21214dbbd9620b0951686e8f",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df1df35bab6cf689971f2c8c0962f062cadf1c54/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df1df35bab6cf689971f2c8c0962f062cadf1c54/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=df1df35bab6cf689971f2c8c0962f062cadf1c54",
        "patch": "@@ -26,6 +26,15 @@ bool CBasicKeyStore::AddKey(const CKey& key)\n     return true;\n }\n \n+bool CBasicKeyStore::EraseKey(const CKeyID &address)\n+{\n+    {\n+        LOCK(cs_KeyStore);\n+        mapKeys.erase(address);\n+    }\n+    return true;\n+}\n+\n bool CBasicKeyStore::AddCScript(const CScript& redeemScript)\n {\n     {\n@@ -138,7 +147,21 @@ bool CCryptoKeyStore::AddKey(const CKey& key)\n     }\n     return true;\n }\n+bool CCryptoKeyStore::EraseKey(const CKeyID &address)\n+{\n+    {\n+        LOCK(cs_KeyStore);\n+        if (!IsCrypted())\n+            return CBasicKeyStore::EraseKey(address);\n+\n+        if (IsLocked())\n+            return false;\n \n+        if (!EraseCryptedKey(address))\n+            return false;\n+    }\n+    return true;\n+}\n \n bool CCryptoKeyStore::AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n {\n@@ -152,6 +175,18 @@ bool CCryptoKeyStore::AddCryptedKey(const CPubKey &vchPubKey, const std::vector<\n     return true;\n }\n \n+bool CCryptoKeyStore::EraseCryptedKey(const CKeyID &address)\n+{\n+    {\n+        LOCK(cs_KeyStore);\n+        if (!SetCrypted())\n+            return false;\n+\n+        mapCryptedKeys.erase(address);\n+    }\n+    return true;\n+}\n+\n bool CCryptoKeyStore::GetKey(const CKeyID &address, CKey& keyOut) const\n {\n     {"
      },
      {
        "sha": "094ad540a45826e4003e9d002a2e63fe0f871109",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df1df35bab6cf689971f2c8c0962f062cadf1c54/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df1df35bab6cf689971f2c8c0962f062cadf1c54/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=df1df35bab6cf689971f2c8c0962f062cadf1c54",
        "patch": "@@ -56,6 +56,7 @@ class CBasicKeyStore : public CKeyStore\n \n public:\n     bool AddKey(const CKey& key);\n+    bool EraseKey(const CKeyID &address);\n     bool HaveKey(const CKeyID &address) const\n     {\n         bool result;\n@@ -146,7 +147,9 @@ class CCryptoKeyStore : public CBasicKeyStore\n     bool Lock();\n \n     virtual bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n+    virtual bool EraseCryptedKey(const CKeyID &address);\n     bool AddKey(const CKey& key);\n+    bool EraseKey(const CKeyID &address);\n     bool HaveKey(const CKeyID &address) const\n     {\n         {"
      },
      {
        "sha": "ce561d8c72c46af2d5b7126e34931cefdd43e60a",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df1df35bab6cf689971f2c8c0962f062cadf1c54/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df1df35bab6cf689971f2c8c0962f062cadf1c54/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=df1df35bab6cf689971f2c8c0962f062cadf1c54",
        "patch": "@@ -77,6 +77,41 @@ Value importprivkey(const Array& params, bool fHelp)\n     return Value::null;\n }\n \n+Value eraseprivkey(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 1)\n+        throw runtime_error(\n+            \"eraseprivkey <bitcoinprivkey> [label] [rescan=true]\\n\"\n+            \"Erases a private key (as returned by dumpprivkey) from your wallet.\");\n+\n+    string strSecret = params[0].get_str();\n+\n+    CBitcoinSecret vchSecret;\n+    bool fGood = vchSecret.SetString(strSecret);\n+\n+    if (!fGood) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n+\n+    CKey key;\n+    bool fCompressed;\n+    CSecret secret = vchSecret.GetSecret(fCompressed);\n+    key.SetSecret(secret, fCompressed);\n+    CKeyID vchAddress = key.GetPubKey().GetID();\n+\n+    if (!pwalletMain->HaveKey(vchAddress))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Private key is not known\");\n+    {\n+        LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+        if (!pwalletMain->EraseKey(key))\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Error erasing key from wallet\");\n+\n+        pwalletMain->MarkDirty();\n+        pwalletMain->DelAddressBookName(vchAddress);\n+        }\n+\n+    return Value::null;\n+}\n+\n Value dumpprivkey(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)"
      },
      {
        "sha": "3147709fbdf9142985d24f3df86576a34f5d084e",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df1df35bab6cf689971f2c8c0962f062cadf1c54/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df1df35bab6cf689971f2c8c0962f062cadf1c54/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=df1df35bab6cf689971f2c8c0962f062cadf1c54",
        "patch": "@@ -55,6 +55,17 @@ bool CWallet::AddKey(const CKey& key)\n     return true;\n }\n \n+bool CWallet::EraseKey(const CKey& key)\n+{\n+    if (!CCryptoKeyStore::EraseKey(key.GetPubKey().GetID()))\n+        return false;\n+    if (!fFileBacked)\n+        return true;\n+    if (!IsCrypted())\n+        return CWalletDB(strWalletFile).EraseKey(key.GetPubKey(), key.GetPrivKey());\n+    return true;\n+}\n+\n bool CWallet::AddCryptedKey(const CPubKey &vchPubKey, const vector<unsigned char> &vchCryptedSecret)\n {\n     if (!CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret))"
      },
      {
        "sha": "0a20cece61d527918457b9c3367ee3d1134577fb",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df1df35bab6cf689971f2c8c0962f062cadf1c54/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df1df35bab6cf689971f2c8c0962f062cadf1c54/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=df1df35bab6cf689971f2c8c0962f062cadf1c54",
        "patch": "@@ -137,6 +137,8 @@ class CWallet : public CCryptoKeyStore\n     CPubKey GenerateNewKey();\n     // Adds a key to the store, and saves it to disk.\n     bool AddKey(const CKey& key);\n+    // Erases a key from the store, and erases it from disk.\n+    bool EraseKey(const CKey& key);\n     // Adds a key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadKey(const CKey& key) { return CCryptoKeyStore::AddKey(key); }\n "
      },
      {
        "sha": "954064a30de2e0f182b17913cbd0034fc1e81550",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df1df35bab6cf689971f2c8c0962f062cadf1c54/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df1df35bab6cf689971f2c8c0962f062cadf1c54/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=df1df35bab6cf689971f2c8c0962f062cadf1c54",
        "patch": "@@ -56,6 +56,14 @@ class CWalletDB : public CDB\n         return Write(std::make_pair(std::string(\"key\"), vchPubKey.Raw()), vchPrivKey, false);\n     }\n \n+    bool EraseKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey)\n+    {\n+        nWalletDBUpdated++;\n+        Erase(std::make_pair(std::string(\"key\"), vchPubKey.Raw()));\n+        Erase(std::make_pair(std::string(\"wkey\"), vchPubKey.Raw()));\n+        return true;\n+    }\n+\n     bool WriteCryptedKey(const CPubKey& vchPubKey, const std::vector<unsigned char>& vchCryptedSecret, bool fEraseUnencryptedKey = true)\n     {\n         nWalletDBUpdated++;"
      }
    ]
  },
  {
    "sha": "e5547c5070b8486495a512903a37a516cdd219fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTU0N2M1MDcwYjg0ODY0OTVhNTEyOTAzYTM3YTUxNmNkZDIxOWZi",
    "commit": {
      "author": {
        "name": "meighti",
        "email": "me83quest@yahoo.com",
        "date": "2013-08-03T16:53:46Z"
      },
      "committer": {
        "name": "meighti",
        "email": "me83quest@yahoo.com",
        "date": "2013-08-03T16:53:46Z"
      },
      "message": "eraseprivkey\n\n- New RPC command called 'eraseprivkey' makes it possible to go back\nand forth together with importprivkey\n- If wallet is encrypted, it would be necessary to use walletpassphrase\nin advance.\n- If watch-only pulls get merged, it would hopefully help to add 'sweep\nprivate key' functionality (like Armory Bitcoin client)",
      "tree": {
        "sha": "8bde9fff5686f040ad10ee57a7b30c4015e801a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8bde9fff5686f040ad10ee57a7b30c4015e801a7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e5547c5070b8486495a512903a37a516cdd219fb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5547c5070b8486495a512903a37a516cdd219fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e5547c5070b8486495a512903a37a516cdd219fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5547c5070b8486495a512903a37a516cdd219fb/comments",
    "author": {
      "login": "meighti",
      "id": 2981948,
      "node_id": "MDQ6VXNlcjI5ODE5NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2981948?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meighti",
      "html_url": "https://github.com/meighti",
      "followers_url": "https://api.github.com/users/meighti/followers",
      "following_url": "https://api.github.com/users/meighti/following{/other_user}",
      "gists_url": "https://api.github.com/users/meighti/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meighti/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meighti/subscriptions",
      "organizations_url": "https://api.github.com/users/meighti/orgs",
      "repos_url": "https://api.github.com/users/meighti/repos",
      "events_url": "https://api.github.com/users/meighti/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meighti/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meighti",
      "id": 2981948,
      "node_id": "MDQ6VXNlcjI5ODE5NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2981948?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meighti",
      "html_url": "https://github.com/meighti",
      "followers_url": "https://api.github.com/users/meighti/followers",
      "following_url": "https://api.github.com/users/meighti/following{/other_user}",
      "gists_url": "https://api.github.com/users/meighti/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meighti/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meighti/subscriptions",
      "organizations_url": "https://api.github.com/users/meighti/orgs",
      "repos_url": "https://api.github.com/users/meighti/repos",
      "events_url": "https://api.github.com/users/meighti/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meighti/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df1df35bab6cf689971f2c8c0962f062cadf1c54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df1df35bab6cf689971f2c8c0962f062cadf1c54",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df1df35bab6cf689971f2c8c0962f062cadf1c54"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 19,
      "deletions": 9
    },
    "files": [
      {
        "sha": "d59a95fd9c1c7e1630f3104a5f2c4968d415cf52",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5547c5070b8486495a512903a37a516cdd219fb/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5547c5070b8486495a512903a37a516cdd219fb/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=e5547c5070b8486495a512903a37a516cdd219fb",
        "patch": "@@ -95,18 +95,19 @@ Value eraseprivkey(const Array& params, bool fHelp)\n     bool fCompressed;\n     CSecret secret = vchSecret.GetSecret(fCompressed);\n     key.SetSecret(secret, fCompressed);\n-    CKeyID vchAddress = key.GetPubKey().GetID();\n+    CPubKey vchPubKey = key.GetPubKey();\n+    //const CKeyID address = key.GetPubKey().GetID();\n \n-    if (!pwalletMain->HaveKey(vchAddress))\n+    if (!pwalletMain->HaveKey(vchPubKey.GetID()))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Private key is not known\");\n     {\n         LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-        if (!pwalletMain->EraseKey(key))\n+        if (!pwalletMain->EraseKey(vchPubKey))\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Error erasing key from wallet\");\n \n         pwalletMain->MarkDirty();\n-        pwalletMain->DelAddressBookName(vchAddress);\n+        pwalletMain->DelAddressBookName(vchPubKey.GetID());\n         }\n \n     return Value::null;"
      },
      {
        "sha": "b35520ceefce1add79293989ac05982c8d92c878",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5547c5070b8486495a512903a37a516cdd219fb/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5547c5070b8486495a512903a37a516cdd219fb/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=e5547c5070b8486495a512903a37a516cdd219fb",
        "patch": "@@ -55,14 +55,16 @@ bool CWallet::AddKey(const CKey& key)\n     return true;\n }\n \n-bool CWallet::EraseKey(const CKey& key)\n+bool CWallet::EraseKey(const CPubKey &vchPubKey)\n {\n-    if (!CCryptoKeyStore::EraseKey(key.GetPubKey().GetID()))\n+    if (!CCryptoKeyStore::EraseKey(vchPubKey.GetID()))\n         return false;\n     if (!fFileBacked)\n         return true;\n     if (!IsCrypted())\n-        return CWalletDB(strWalletFile).EraseKey(key.GetPubKey(), key.GetPrivKey());\n+        return CWalletDB(strWalletFile).EraseKey(vchPubKey);\n+    else\n+        return CWalletDB(strWalletFile).EraseCryptedKey(vchPubKey);\n     return true;\n }\n "
      },
      {
        "sha": "92e6af7059bc5f0739fe9bb1e3546f565807dfc5",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5547c5070b8486495a512903a37a516cdd219fb/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5547c5070b8486495a512903a37a516cdd219fb/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=e5547c5070b8486495a512903a37a516cdd219fb",
        "patch": "@@ -138,7 +138,7 @@ class CWallet : public CCryptoKeyStore\n     // Adds a key to the store, and saves it to disk.\n     bool AddKey(const CKey& key);\n     // Erases a key from the store, and erases it from disk.\n-    bool EraseKey(const CKey& key);\n+    bool EraseKey(const CPubKey &vchPubKey);\n     // Adds a key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadKey(const CKey& key) { return CCryptoKeyStore::AddKey(key); }\n "
      },
      {
        "sha": "0f1d1d624797788b308c429b5a467c29f1f955ef",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5547c5070b8486495a512903a37a516cdd219fb/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5547c5070b8486495a512903a37a516cdd219fb/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=e5547c5070b8486495a512903a37a516cdd219fb",
        "patch": "@@ -56,14 +56,21 @@ class CWalletDB : public CDB\n         return Write(std::make_pair(std::string(\"key\"), vchPubKey.Raw()), vchPrivKey, false);\n     }\n \n-    bool EraseKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey)\n+    bool EraseKey(const CPubKey &vchPubKey)\n     {\n         nWalletDBUpdated++;\n         Erase(std::make_pair(std::string(\"key\"), vchPubKey.Raw()));\n         Erase(std::make_pair(std::string(\"wkey\"), vchPubKey.Raw()));\n         return true;\n     }\n \n+    bool EraseCryptedKey(const CPubKey& vchPubKey)\n+    {\n+        nWalletDBUpdated++;\n+        Erase(std::make_pair(std::string(\"ckey\"), vchPubKey.Raw()));\n+        return true;\n+    }\n+\n     bool WriteCryptedKey(const CPubKey& vchPubKey, const std::vector<unsigned char>& vchCryptedSecret, bool fEraseUnencryptedKey = true)\n     {\n         nWalletDBUpdated++;"
      }
    ]
  }
]