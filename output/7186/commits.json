[
  {
    "sha": "2aa49ce9fe618bda9bf70fd57b23fe4802f0aeff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYWE0OWNlOWZlNjE4YmRhOWJmNzBmZDU3YjIzZmU0ODAyZjBhZWZm",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-11-17T20:29:42Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-11-17T20:31:00Z"
      },
      "message": "Bugfix: Use unique autostart filenames on Linux for testnet/regtest",
      "tree": {
        "sha": "4e821e3b10d6a5f1b3e1db74595f776d04111aee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e821e3b10d6a5f1b3e1db74595f776d04111aee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2aa49ce9fe618bda9bf70fd57b23fe4802f0aeff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2aa49ce9fe618bda9bf70fd57b23fe4802f0aeff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2aa49ce9fe618bda9bf70fd57b23fe4802f0aeff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2aa49ce9fe618bda9bf70fd57b23fe4802f0aeff/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "67d4cbab461260cd51386a16a1a34bb9161e73a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67d4cbab461260cd51386a16a1a34bb9161e73a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67d4cbab461260cd51386a16a1a34bb9161e73a8"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9600a54c46705735e02a68722c8885cf2718f64d",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aa49ce9fe618bda9bf70fd57b23fe4802f0aeff/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aa49ce9fe618bda9bf70fd57b23fe4802f0aeff/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=2aa49ce9fe618bda9bf70fd57b23fe4802f0aeff",
        "patch": "@@ -354,7 +354,10 @@ boost::filesystem::path static GetAutostartDir()\n \n boost::filesystem::path static GetAutostartFilePath()\n {\n-    return GetAutostartDir() / \"bitcoin.desktop\";\n+    std::string chain = ChainNameFromCommandLine();\n+    if (chain == CBaseChainParams::MAIN)\n+        return GetAutostartDir() / \"bitcoin.desktop\";\n+    return GetAutostartDir() / strprintf(\"bitcoin-%s.lnk\", chain);\n }\n \n bool GetStartOnSystemStartup()"
      }
    ]
  },
  {
    "sha": "b7fcc140088d30bc3f3d23b5f3149767cd8671b1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiN2ZjYzE0MDA4OGQzMGJjM2YzZDIzYjVmMzE0OTc2N2NkODY3MWIx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-04T23:16:49Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T04:12:26Z"
      },
      "message": "Always flush block and undo when switching to new file\n\nPreviously, the undo weren't being flushed during a reindex because\nfKnown was set to true in FindBlockPos. That is the correct behaviour\nfor block files as they aren't being touched, but undo files are\ntouched.\n\nThis changes the behaviour to always flush when switching to a new file\n(even for block files, though that isn't really necessary).\n\nRebased-From: 22e780737db57bcb18b3824eb8158e19a4775cb6\nGithub-Pull: #6948",
      "tree": {
        "sha": "7b1ad134d22e38aa5b3f59e98b4e97e8be979324",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b1ad134d22e38aa5b3f59e98b4e97e8be979324"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7fcc140088d30bc3f3d23b5f3149767cd8671b1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7fcc140088d30bc3f3d23b5f3149767cd8671b1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b7fcc140088d30bc3f3d23b5f3149767cd8671b1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7fcc140088d30bc3f3d23b5f3149767cd8671b1/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c2e7baf2bdb2e2c163bcadaebe68ee00c9a27e7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2e7baf2bdb2e2c163bcadaebe68ee00c9a27e7c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c2e7baf2bdb2e2c163bcadaebe68ee00c9a27e7c"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 8,
      "deletions": 3
    },
    "files": [
      {
        "sha": "8ed10d40664cf86643f0c72d8b417047b3768d37",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7fcc140088d30bc3f3d23b5f3149767cd8671b1/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7fcc140088d30bc3f3d23b5f3149767cd8671b1/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b7fcc140088d30bc3f3d23b5f3149767cd8671b1",
        "patch": "@@ -2372,8 +2372,6 @@ bool FindBlockPos(CValidationState &state, CDiskBlockPos &pos, unsigned int nAdd\n \n     if (!fKnown) {\n         while (vinfoBlockFile[nFile].nSize + nAddSize >= MAX_BLOCKFILE_SIZE) {\n-            LogPrintf(\"Leaving block file %i: %s\\n\", nFile, vinfoBlockFile[nFile].ToString());\n-            FlushBlockFile(true);\n             nFile++;\n             if (vinfoBlockFile.size() <= nFile) {\n                 vinfoBlockFile.resize(nFile + 1);\n@@ -2383,7 +2381,14 @@ bool FindBlockPos(CValidationState &state, CDiskBlockPos &pos, unsigned int nAdd\n         pos.nPos = vinfoBlockFile[nFile].nSize;\n     }\n \n-    nLastBlockFile = nFile;\n+    if (nFile != nLastBlockFile) {\n+        if (!fKnown) {\n+            LogPrintf(\"Leaving block file %i: %s\\n\", nFile, vinfoBlockFile[nFile].ToString());\n+        }\n+        FlushBlockFile(!fKnown);\n+        nLastBlockFile = nFile;\n+    }\n+\n     vinfoBlockFile[nFile].AddBlock(nHeight, nTime);\n     if (fKnown)\n         vinfoBlockFile[nFile].nSize = std::max(pos.nPos + nAddSize, vinfoBlockFile[nFile].nSize);"
      }
    ]
  },
  {
    "sha": "910bb77910d13e9546f4bf3a9c82046f565e9939",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTBiYjc3OTEwZDEzZTk1NDZmNGJmM2E5YzgyMDQ2ZjU2NWU5OTM5",
    "commit": {
      "author": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-08-03T19:49:01Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T04:13:44Z"
      },
      "message": "Clean up tx prioritization when conflict mined\n\nGithub-Pull: #6464\nRebased-From: 2d8c49d126bf2551ef0268f314ab75932fa96510",
      "tree": {
        "sha": "9b98b9f862dcc28e0b9828006e75ac6e3f7a8de0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b98b9f862dcc28e0b9828006e75ac6e3f7a8de0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/910bb77910d13e9546f4bf3a9c82046f565e9939",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/910bb77910d13e9546f4bf3a9c82046f565e9939",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/910bb77910d13e9546f4bf3a9c82046f565e9939",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/910bb77910d13e9546f4bf3a9c82046f565e9939/comments",
    "author": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b7fcc140088d30bc3f3d23b5f3149767cd8671b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7fcc140088d30bc3f3d23b5f3149767cd8671b1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b7fcc140088d30bc3f3d23b5f3149767cd8671b1"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c4761ffe426b2cb5cac44e21af4ccb2acb2e1334",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/910bb77910d13e9546f4bf3a9c82046f565e9939/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/910bb77910d13e9546f4bf3a9c82046f565e9939/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=910bb77910d13e9546f4bf3a9c82046f565e9939",
        "patch": "@@ -519,6 +519,7 @@ void CTxMemPool::removeConflicts(const CTransaction &tx, std::list<CTransaction>\n             if (txConflict != tx)\n             {\n                 remove(txConflict, removed, true);\n+                ClearPrioritisation(txConflict.GetHash());\n             }\n         }\n     }"
      }
    ]
  },
  {
    "sha": "a62884e11f631d694b1aeadd61c8677833628056",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNjI4ODRlMTFmNjMxZDY5NGIxYWVhZGQ2MWM4Njc3ODMzNjI4MDU2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-10-28T00:19:42Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T04:13:51Z"
      },
      "message": "Update to my new key\n\nGithub-Pull: #6895\nRebased-From: 4252cd09fd729b0d8a9d53c0308f54b3a798c372",
      "tree": {
        "sha": "01cf158db3e8ba2b5c7974ce159568f2da0f2057",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/01cf158db3e8ba2b5c7974ce159568f2da0f2057"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a62884e11f631d694b1aeadd61c8677833628056",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a62884e11f631d694b1aeadd61c8677833628056",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a62884e11f631d694b1aeadd61c8677833628056",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a62884e11f631d694b1aeadd61c8677833628056/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "910bb77910d13e9546f4bf3a9c82046f565e9939",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/910bb77910d13e9546f4bf3a9c82046f565e9939",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/910bb77910d13e9546f4bf3a9c82046f565e9939"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a1930ddee905f688dcb3a189a88e1317e7006a0f",
        "filename": "contrib/gitian-downloader/sipa-key.pgp",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62884e11f631d694b1aeadd61c8677833628056/contrib/gitian-downloader/sipa-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62884e11f631d694b1aeadd61c8677833628056/contrib/gitian-downloader/sipa-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/sipa-key.pgp?ref=a62884e11f631d694b1aeadd61c8677833628056"
      }
    ]
  },
  {
    "sha": "e8d9550f54bf6214abd3cc38da096f9c708672b1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOGQ5NTUwZjU0YmY2MjE0YWJkM2NjMzhkYTA5NmY5YzcwODY3MmIx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-22T15:00:36Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T05:57:14Z"
      },
      "message": "[trivial] rpcnet: fix typo\n\nGithub-Pull: #6870\nRebased-From: bf681918d7ef5c4bc6f92465ae7922c9f4b03d93",
      "tree": {
        "sha": "7f396fe8f96e6c1c8e2fde5cf19401b7602d0f72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f396fe8f96e6c1c8e2fde5cf19401b7602d0f72"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8d9550f54bf6214abd3cc38da096f9c708672b1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8d9550f54bf6214abd3cc38da096f9c708672b1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e8d9550f54bf6214abd3cc38da096f9c708672b1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8d9550f54bf6214abd3cc38da096f9c708672b1/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a62884e11f631d694b1aeadd61c8677833628056",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a62884e11f631d694b1aeadd61c8677833628056",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a62884e11f631d694b1aeadd61c8677833628056"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "84bba2738436c5c597f22a2e7133293689b5450b",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8d9550f54bf6214abd3cc38da096f9c708672b1/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8d9550f54bf6214abd3cc38da096f9c708672b1/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=e8d9550f54bf6214abd3cc38da096f9c708672b1",
        "patch": "@@ -27,7 +27,7 @@ Value getconnectioncount(const Array& params, bool fHelp)\n         throw runtime_error(\n             \"getconnectioncount\\n\"\n             \"\\nReturns the number of connections to other nodes.\\n\"\n-            \"\\nbResult:\\n\"\n+            \"\\nResult:\\n\"\n             \"n          (numeric) The connection count\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getconnectioncount\", \"\")\n@@ -79,7 +79,7 @@ Value getpeerinfo(const Array& params, bool fHelp)\n         throw runtime_error(\n             \"getpeerinfo\\n\"\n             \"\\nReturns data about each connected network node as a json array of objects.\\n\"\n-            \"\\nbResult:\\n\"\n+            \"\\nResult:\\n\"\n             \"[\\n\"\n             \"  {\\n\"\n             \"    \\\"id\\\": n,                   (numeric) Peer index\\n\""
      }
    ]
  },
  {
    "sha": "fca4cf193e2ec203deb34300ccdab95f1064aa93",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmY2E0Y2YxOTNlMmVjMjAzZGViMzQzMDBjY2RhYjk1ZjEwNjRhYTkz",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2015-10-27T19:11:56Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T05:57:23Z"
      },
      "message": "unittest: fix test for null tx input\n\nUpdate the unittest that is meant to catch a transaction that is invalid\nbecause it has a null input.  The old test failed not because of that\nbut because it was considered a coinbase with too large script.  This is\nalready checked with a different test, though.\n\nThe new test is *not* a coinbase since it has two inputs, but one of\nthem is null.  This really checks the corresponding code path in\nCheckTransaction.\n\nGithub-Pull: #6863\nRebased-From: 0be387a536f03a1dd0df66176fc354fb0895be48",
      "tree": {
        "sha": "f7a9cc8444ddbc1bd6ee8c03a8c098ff4afd44b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f7a9cc8444ddbc1bd6ee8c03a8c098ff4afd44b4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fca4cf193e2ec203deb34300ccdab95f1064aa93",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fca4cf193e2ec203deb34300ccdab95f1064aa93",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fca4cf193e2ec203deb34300ccdab95f1064aa93",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fca4cf193e2ec203deb34300ccdab95f1064aa93/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8d9550f54bf6214abd3cc38da096f9c708672b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8d9550f54bf6214abd3cc38da096f9c708672b1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8d9550f54bf6214abd3cc38da096f9c708672b1"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 7,
      "deletions": 3
    },
    "files": [
      {
        "sha": "0a02bb9aa980462dcdbe4537c0795d5e875586d4",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fca4cf193e2ec203deb34300ccdab95f1064aa93/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fca4cf193e2ec203deb34300ccdab95f1064aa93/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=fca4cf193e2ec203deb34300ccdab95f1064aa93",
        "patch": "@@ -58,9 +58,13 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000000\", -1, \"1\"]],\n \"01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff655151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151ffffffff010000000000000000015100000000\", \"P2SH\"],\n \n-[\"Null txin\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000000\", -1, \"HASH160 0x14 0x02dae7dbbda56097959cba59b1989dd3e47937bf EQUAL\"]],\n-\"01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff6e49304602210086f39e028e46dafa8e1e3be63906465f4cf038fbe5ed6403dc3e74ae876e6431022100c4625c675cfc5c7e3a0e0d7eaec92ac24da20c73a88eb40d09253e51ac6def5201232103a183ddc41e84753aca47723c965d1b5c8b0e2b537963518355e6dd6cf8415e50acffffffff010000000000000000015100000000\", \"P2SH\"],\n+[\"Null txin, but without being a coinbase (because there are two inputs)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000000\", -1, \"1\"],\n+  [\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1\"]],\n+\"01000000020000000000000000000000000000000000000000000000000000000000000000ffffffff00ffffffff00010000000000000000000000000000000000000000000000000000000000000000000000ffffffff010000000000000000015100000000\", \"P2SH\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1\"],\n+  [\"0000000000000000000000000000000000000000000000000000000000000000\", -1, \"1\"]],\n+\"010000000200010000000000000000000000000000000000000000000000000000000000000000000000ffffffff0000000000000000000000000000000000000000000000000000000000000000ffffffff00ffffffff010000000000000000015100000000\", \"P2SH\"],\n \n [\"Same as the transactions in valid with one input SIGHASH_ALL and one SIGHASH_ANYONECANPAY, but we set the _ANYONECANPAY sequence number, invalidating the SIGHASH_ALL signature\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x21 0x035e7f0d4d0841bcd56c39337ed086b1a633ee770c1ffdd94ac552a95ac2ce0efc CHECKSIG\"],"
      }
    ]
  },
  {
    "sha": "f1c208d1536be4648668a9bcfb786f04953ea50d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMWMyMDhkMTUzNmJlNDY0ODY2OGE5YmNmYjc4NmYwNDk1M2VhNTBk",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-10-29T18:24:49Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T05:57:38Z"
      },
      "message": "Reject invalid pubkeys when reading ckey items from the wallet.\n\nThis makes the behavior more consistent with key objects and will\n reject some corrupted pubkeys (e.g. zero length).\n\nGithub-Pull: #6906\nRebased-From: 30d9662bd780e298516d514984ced1f88ec5bc3b",
      "tree": {
        "sha": "383df973c9de4e34bfe10301d78d6ccc38829375",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/383df973c9de4e34bfe10301d78d6ccc38829375"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f1c208d1536be4648668a9bcfb786f04953ea50d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1c208d1536be4648668a9bcfb786f04953ea50d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f1c208d1536be4648668a9bcfb786f04953ea50d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1c208d1536be4648668a9bcfb786f04953ea50d/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fca4cf193e2ec203deb34300ccdab95f1064aa93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fca4cf193e2ec203deb34300ccdab95f1064aa93",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fca4cf193e2ec203deb34300ccdab95f1064aa93"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c7a2a622acea2636c10f9e2502217fcf3a2a8bcf",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1c208d1536be4648668a9bcfb786f04953ea50d/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1c208d1536be4648668a9bcfb786f04953ea50d/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=f1c208d1536be4648668a9bcfb786f04953ea50d",
        "patch": "@@ -509,8 +509,13 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         }\n         else if (strType == \"ckey\")\n         {\n-            vector<unsigned char> vchPubKey;\n+            CPubKey vchPubKey;\n             ssKey >> vchPubKey;\n+            if (!vchPubKey.IsValid())\n+            {\n+                strErr = \"Error reading wallet database: CPubKey corrupt\";\n+                return false;\n+            }\n             vector<unsigned char> vchPrivKey;\n             ssValue >> vchPrivKey;\n             wss.nCKeys++;"
      }
    ]
  },
  {
    "sha": "45f2e9d3d131ea0daf020c3532dcaf26fa84784a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NWYyZTlkM2QxMzFlYTBkYWYwMjBjMzUzMmRjYWYyNmZhODQ3ODRh",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-06-27T19:08:36Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T06:06:22Z"
      },
      "message": "Bugfix: RPC: blockchain: Display correct defaults in help for verifychain method\n\nGithub-Pull: #6905\nRebased-From: caa3d42f0689bd945c5b544fe0ebe2ca25acd180",
      "tree": {
        "sha": "29db16012aa598e0ef0aece975d406fafa71f3c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29db16012aa598e0ef0aece975d406fafa71f3c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45f2e9d3d131ea0daf020c3532dcaf26fa84784a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45f2e9d3d131ea0daf020c3532dcaf26fa84784a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/45f2e9d3d131ea0daf020c3532dcaf26fa84784a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45f2e9d3d131ea0daf020c3532dcaf26fa84784a/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f1c208d1536be4648668a9bcfb786f04953ea50d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1c208d1536be4648668a9bcfb786f04953ea50d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f1c208d1536be4648668a9bcfb786f04953ea50d"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 11,
      "deletions": 8
    },
    "files": [
      {
        "sha": "4431fa6a559946230ca414972e756e4d110b49e3",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45f2e9d3d131ea0daf020c3532dcaf26fa84784a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45f2e9d3d131ea0daf020c3532dcaf26fa84784a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=45f2e9d3d131ea0daf020c3532dcaf26fa84784a",
        "patch": "@@ -243,8 +243,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += \"  -alertnotify=<cmd>     \" + _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\") + \"\\n\";\n     strUsage += \"  -alerts                \" + strprintf(_(\"Receive and display P2P network alerts (default: %u)\"), DEFAULT_ALERTS);\n     strUsage += \"  -blocknotify=<cmd>     \" + _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\") + \"\\n\";\n-    strUsage += \"  -checkblocks=<n>       \" + strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), 288) + \"\\n\";\n-    strUsage += \"  -checklevel=<n>        \" + strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), 3) + \"\\n\";\n+    strUsage += \"  -checkblocks=<n>       \" + strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), DEFAULT_CHECKBLOCKS) + \"\\n\";\n+    strUsage += \"  -checklevel=<n>        \" + strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), DEFAULT_CHECKLEVEL) + \"\\n\";\n     strUsage += \"  -conf=<file>           \" + strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\") + \"\\n\";\n     if (mode == HMM_BITCOIND)\n     {\n@@ -1046,8 +1046,8 @@ bool AppInit2(boost::thread_group& threadGroup)\n                 }\n \n                 uiInterface.InitMessage(_(\"Verifying blocks...\"));\n-                if (!CVerifyDB().VerifyDB(pcoinsdbview, GetArg(\"-checklevel\", 3),\n-                              GetArg(\"-checkblocks\", 288))) {\n+                if (!CVerifyDB().VerifyDB(pcoinsdbview, GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                              GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n                     strLoadError = _(\"Corrupted block database detected\");\n                     break;\n                 }"
      },
      {
        "sha": "3db236211c7dac371e4d74d379ceca6295f56a8c",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45f2e9d3d131ea0daf020c3532dcaf26fa84784a/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45f2e9d3d131ea0daf020c3532dcaf26fa84784a/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=45f2e9d3d131ea0daf020c3532dcaf26fa84784a",
        "patch": "@@ -137,6 +137,9 @@ extern CBlockIndex *pindexBestHeader;\n /** Minimum disk space required - used in CheckDiskSpace() */\n static const uint64_t nMinDiskSpace = 52428800;\n \n+static const signed int DEFAULT_CHECKBLOCKS = 288;\n+static const unsigned int DEFAULT_CHECKLEVEL = 3;\n+\n /** Register a wallet to receive updates from core */\n void RegisterValidationInterface(CValidationInterface* pwalletIn);\n /** Unregister a wallet from core */"
      },
      {
        "sha": "f46c40af9eebb27887b50ac9c237c17d57a9129f",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45f2e9d3d131ea0daf020c3532dcaf26fa84784a/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45f2e9d3d131ea0daf020c3532dcaf26fa84784a/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=45f2e9d3d131ea0daf020c3532dcaf26fa84784a",
        "patch": "@@ -422,22 +422,22 @@ Value gettxout(const Array& params, bool fHelp)\n \n Value verifychain(const Array& params, bool fHelp)\n {\n+    int nCheckLevel = GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL);\n+    int nCheckDepth = GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS);\n     if (fHelp || params.size() > 2)\n         throw runtime_error(\n             \"verifychain ( checklevel numblocks )\\n\"\n             \"\\nVerifies blockchain database.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. checklevel   (numeric, optional, 0-4, default=3) How thorough the block verification is.\\n\"\n-            \"2. numblocks    (numeric, optional, default=288, 0=all) The number of blocks to check.\\n\"\n+            \"1. checklevel   (numeric, optional, 0-4, default=\" + strprintf(\"%d\", nCheckLevel) + \") How thorough the block verification is.\\n\"\n+            \"2. numblocks    (numeric, optional, default=\" + strprintf(\"%d\", nCheckDepth) + \", 0=all) The number of blocks to check.\\n\"\n             \"\\nResult:\\n\"\n             \"true|false       (boolean) Verified or not\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"verifychain\", \"\")\n             + HelpExampleRpc(\"verifychain\", \"\")\n         );\n \n-    int nCheckLevel = GetArg(\"-checklevel\", 3);\n-    int nCheckDepth = GetArg(\"-checkblocks\", 288);\n     if (params.size() > 0)\n         nCheckLevel = params[0].get_int();\n     if (params.size() > 1)"
      }
    ]
  },
  {
    "sha": "20b079b4b23a23b6964f0cdb454ac19e56cf8f04",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMGIwNzliNGIyM2EyM2I2OTY0ZjBjZGI0NTRhYzE5ZTU2Y2Y4ZjA0",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-06-27T23:15:11Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T06:09:12Z"
      },
      "message": "Bugfix: Describe dblogsize option correctly (it refers to the wallet database, not memory pool)\n\nGithub-Pull: #6905\nRebased-From: 420a82f1ae2f56938ea935fbdbb60e47685684c7",
      "tree": {
        "sha": "650c2eb54e46e22d7e8c68b90eb424525d67bcd3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/650c2eb54e46e22d7e8c68b90eb424525d67bcd3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/20b079b4b23a23b6964f0cdb454ac19e56cf8f04",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20b079b4b23a23b6964f0cdb454ac19e56cf8f04",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/20b079b4b23a23b6964f0cdb454ac19e56cf8f04",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20b079b4b23a23b6964f0cdb454ac19e56cf8f04/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "45f2e9d3d131ea0daf020c3532dcaf26fa84784a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45f2e9d3d131ea0daf020c3532dcaf26fa84784a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45f2e9d3d131ea0daf020c3532dcaf26fa84784a"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "feea6482c3977bd29cdfb66849ea861c3fbef178",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20b079b4b23a23b6964f0cdb454ac19e56cf8f04/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20b079b4b23a23b6964f0cdb454ac19e56cf8f04/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=20b079b4b23a23b6964f0cdb454ac19e56cf8f04",
        "patch": "@@ -286,7 +286,7 @@ void CDB::Flush()\n     if (fReadOnly)\n         nMinutes = 1;\n \n-    bitdb.dbenv.txn_checkpoint(nMinutes ? GetArg(\"-dblogsize\", 100) * 1024 : 0, nMinutes, 0);\n+    bitdb.dbenv.txn_checkpoint(nMinutes ? GetArg(\"-dblogsize\", DEFAULT_WALLET_DBLOGSIZE) * 1024 : 0, nMinutes, 0);\n }\n \n void CDB::Close()"
      },
      {
        "sha": "56737008d045d2b3ef293a8b3c8ff0f8ddd9d3b9",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20b079b4b23a23b6964f0cdb454ac19e56cf8f04/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20b079b4b23a23b6964f0cdb454ac19e56cf8f04/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=20b079b4b23a23b6964f0cdb454ac19e56cf8f04",
        "patch": "@@ -25,6 +25,8 @@ class COutPoint;\n \n struct CBlockLocator;\n \n+static const unsigned int DEFAULT_WALLET_DBLOGSIZE = 100;\n+\n extern unsigned int nWalletDBUpdated;\n \n void ThreadFlushWalletDB(const std::string& strWalletFile);"
      },
      {
        "sha": "4082d44585334f77092c5c9c499ccf21726add80",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20b079b4b23a23b6964f0cdb454ac19e56cf8f04/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20b079b4b23a23b6964f0cdb454ac19e56cf8f04/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=20b079b4b23a23b6964f0cdb454ac19e56cf8f04",
        "patch": "@@ -323,7 +323,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     if (GetBoolArg(\"-help-debug\", false))\n     {\n         strUsage += \"  -checkpoints           \" + strprintf(_(\"Only accept block chain matching built-in checkpoints (default: %u)\"), 1) + \"\\n\";\n-        strUsage += \"  -dblogsize=<n>         \" + strprintf(_(\"Flush database activity from memory pool to disk log every <n> megabytes (default: %u)\"), 100) + \"\\n\";\n+        strUsage += \"  -dblogsize=<n>         \" + strprintf(_(\"Flush wallet database activity from memory to disk log every <n> megabytes (default: %u)\"), DEFAULT_WALLET_DBLOGSIZE) + \"\\n\";\n         strUsage += \"  -disablesafemode       \" + strprintf(_(\"Disable safemode, override a real safe mode event (default: %u)\"), 0) + \"\\n\";\n         strUsage += \"  -testsafemode          \" + strprintf(_(\"Force safe mode (default: %u)\"), 0) + \"\\n\";\n         strUsage += \"  -dropmessagestest=<n>  \" + _(\"Randomly drop 1 of every <n> network messages\") + \"\\n\";"
      }
    ]
  },
  {
    "sha": "b049e29c34ab930bba459ffe6562cb899f96c427",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMDQ5ZTI5YzM0YWI5MzBiYmE0NTlmZmU2NTYyY2I4OTlmOTZjNDI3",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-06-27T23:48:38Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T06:10:39Z"
      },
      "message": "Bugfix: If genproclimit is omitted to RPC setgenerate, don't change it; also show correct default in getmininginfo\n\nGithub-Pull: #6905\nRebased-From: 5f9260f45843e5b0e1f4156af0f7b6d6c2d93a76",
      "tree": {
        "sha": "6df00b026ae016b10d1f5388fd4b5cae5ec3cafe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6df00b026ae016b10d1f5388fd4b5cae5ec3cafe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b049e29c34ab930bba459ffe6562cb899f96c427",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b049e29c34ab930bba459ffe6562cb899f96c427",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b049e29c34ab930bba459ffe6562cb899f96c427",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b049e29c34ab930bba459ffe6562cb899f96c427/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "20b079b4b23a23b6964f0cdb454ac19e56cf8f04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20b079b4b23a23b6964f0cdb454ac19e56cf8f04",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/20b079b4b23a23b6964f0cdb454ac19e56cf8f04"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "718d46d80efa1d5bdb79af03b8fb1f199585977e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b049e29c34ab930bba459ffe6562cb899f96c427/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b049e29c34ab930bba459ffe6562cb899f96c427/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b049e29c34ab930bba459ffe6562cb899f96c427",
        "patch": "@@ -340,7 +340,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += \".\\n\";\n #ifdef ENABLE_WALLET\n     strUsage += \"  -gen                   \" + strprintf(_(\"Generate coins (default: %u)\"), 0) + \"\\n\";\n-    strUsage += \"  -genproclimit=<n>      \" + strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), 1) + \"\\n\";\n+    strUsage += \"  -genproclimit=<n>      \" + strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), DEFAULT_GENERATE_THREADS) + \"\\n\";\n #endif\n     strUsage += \"  -help-debug            \" + _(\"Show all debugging options (usage: --help -help-debug)\") + \"\\n\";\n     strUsage += \"  -logips                \" + strprintf(_(\"Include IP addresses in debug output (default: %u)\"), 0) + \"\\n\";\n@@ -1280,7 +1280,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n #ifdef ENABLE_WALLET\n     // Generate coins in the background\n     if (pwalletMain)\n-        GenerateBitcoins(GetBoolArg(\"-gen\", false), pwalletMain, GetArg(\"-genproclimit\", 1));\n+        GenerateBitcoins(GetBoolArg(\"-gen\", false), pwalletMain, GetArg(\"-genproclimit\", DEFAULT_GENERATE_THREADS));\n #endif\n \n     // ********************************************************* Step 11: finished"
      },
      {
        "sha": "183d3af7a5a52ea6f8799fa389cd856a8c73c23a",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b049e29c34ab930bba459ffe6562cb899f96c427/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b049e29c34ab930bba459ffe6562cb899f96c427/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=b049e29c34ab930bba459ffe6562cb899f96c427",
        "patch": "@@ -15,6 +15,8 @@ class CReserveKey;\n class CScript;\n class CWallet;\n \n+static const int DEFAULT_GENERATE_THREADS = 1;\n+\n struct CBlockTemplate;\n \n /** Run the miner threads */"
      },
      {
        "sha": "0f78727085650b6ad5ae600f11e73dc05f0219eb",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b049e29c34ab930bba459ffe6562cb899f96c427/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b049e29c34ab930bba459ffe6562cb899f96c427/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=b049e29c34ab930bba459ffe6562cb899f96c427",
        "patch": "@@ -143,7 +143,7 @@ Value setgenerate(const Array& params, bool fHelp)\n     if (params.size() > 0)\n         fGenerate = params[0].get_bool();\n \n-    int nGenProcLimit = -1;\n+    int nGenProcLimit = GetArg(\"-genproclimit\", DEFAULT_GENERATE_THREADS);\n     if (params.size() > 1)\n     {\n         nGenProcLimit = params[1].get_int();\n@@ -253,7 +253,7 @@ Value getmininginfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"currentblocktx\",   (uint64_t)nLastBlockTx));\n     obj.push_back(Pair(\"difficulty\",       (double)GetDifficulty()));\n     obj.push_back(Pair(\"errors\",           GetWarnings(\"statusbar\")));\n-    obj.push_back(Pair(\"genproclimit\",     (int)GetArg(\"-genproclimit\", -1)));\n+    obj.push_back(Pair(\"genproclimit\",     (int)GetArg(\"-genproclimit\", DEFAULT_GENERATE_THREADS)));\n     obj.push_back(Pair(\"networkhashps\",    getnetworkhashps(params, false)));\n     obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n     obj.push_back(Pair(\"testnet\",          Params().TestnetToBeDeprecatedFieldRPC()));"
      }
    ]
  },
  {
    "sha": "ab99a5bb72e38905d5c3f0db9cb5cce69b3caedf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYjk5YTViYjcyZTM4OTA1ZDVjM2YwZGI5Y2I1Y2NlNjliM2NhZWRm",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-06-30T23:22:23Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T06:11:58Z"
      },
      "message": "Bugfix: Omit wallet-related options from -help when wallet is disabled\n\nGithub-Pull: #6905\nRebased-From: a6efc019085fd70790ad7fa97078ce02d8f8dec3",
      "tree": {
        "sha": "a80816cd1ef2328aa236aa285bea12282e0df0f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a80816cd1ef2328aa236aa285bea12282e0df0f3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab99a5bb72e38905d5c3f0db9cb5cce69b3caedf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab99a5bb72e38905d5c3f0db9cb5cce69b3caedf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ab99a5bb72e38905d5c3f0db9cb5cce69b3caedf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab99a5bb72e38905d5c3f0db9cb5cce69b3caedf/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b049e29c34ab930bba459ffe6562cb899f96c427",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b049e29c34ab930bba459ffe6562cb899f96c427",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b049e29c34ab930bba459ffe6562cb899f96c427"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "159ffeee680428935ba6dc7fddef013e8b89826d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab99a5bb72e38905d5c3f0db9cb5cce69b3caedf/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab99a5bb72e38905d5c3f0db9cb5cce69b3caedf/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ab99a5bb72e38905d5c3f0db9cb5cce69b3caedf",
        "patch": "@@ -323,12 +323,16 @@ std::string HelpMessage(HelpMessageMode mode)\n     if (GetBoolArg(\"-help-debug\", false))\n     {\n         strUsage += \"  -checkpoints           \" + strprintf(_(\"Only accept block chain matching built-in checkpoints (default: %u)\"), 1) + \"\\n\";\n+#ifdef ENABLE_WALLET\n         strUsage += \"  -dblogsize=<n>         \" + strprintf(_(\"Flush wallet database activity from memory to disk log every <n> megabytes (default: %u)\"), DEFAULT_WALLET_DBLOGSIZE) + \"\\n\";\n+#endif\n         strUsage += \"  -disablesafemode       \" + strprintf(_(\"Disable safemode, override a real safe mode event (default: %u)\"), 0) + \"\\n\";\n         strUsage += \"  -testsafemode          \" + strprintf(_(\"Force safe mode (default: %u)\"), 0) + \"\\n\";\n         strUsage += \"  -dropmessagestest=<n>  \" + _(\"Randomly drop 1 of every <n> network messages\") + \"\\n\";\n         strUsage += \"  -fuzzmessagestest=<n>  \" + _(\"Randomly fuzz 1 of every <n> network messages\") + \"\\n\";\n+#ifdef ENABLE_WALLET\n         strUsage += \"  -flushwallet           \" + strprintf(_(\"Run a thread to flush wallet periodically (default: %u)\"), 1) + \"\\n\";\n+#endif\n         strUsage += \"  -stopafterblockimport  \" + strprintf(_(\"Stop running after importing blocks from disk (default: %u)\"), 0) + \"\\n\";\n     }\n     strUsage += \"  -debug=<category>      \" + strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \"\\n\";"
      }
    ]
  },
  {
    "sha": "312cf155cf7d94e70455fad4162eb1edae92d75a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMTJjZjE1NWNmN2Q5NGU3MDQ1NWZhZDQxNjJlYjFlZGFlOTJkNzVh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-09T07:40:46Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T06:18:57Z"
      },
      "message": "rpc-tests: Backport test of validateaddress with -disablewallet\n\nGithub-Pull: #6970\nRebased-From: 2980a18572dbe6173c41afc037b0cefe367d935c",
      "tree": {
        "sha": "e6c471bbb543128298c130b4336ab1758d278479",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6c471bbb543128298c130b4336ab1758d278479"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/312cf155cf7d94e70455fad4162eb1edae92d75a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/312cf155cf7d94e70455fad4162eb1edae92d75a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/312cf155cf7d94e70455fad4162eb1edae92d75a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/312cf155cf7d94e70455fad4162eb1edae92d75a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab99a5bb72e38905d5c3f0db9cb5cce69b3caedf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab99a5bb72e38905d5c3f0db9cb5cce69b3caedf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab99a5bb72e38905d5c3f0db9cb5cce69b3caedf"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 33,
      "deletions": 0
    },
    "files": [
      {
        "sha": "54a8b61a7dd62b0ae51a1ba08a3e3e907c5c81c9",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/312cf155cf7d94e70455fad4162eb1edae92d75a/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/312cf155cf7d94e70455fad4162eb1edae92d75a/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=312cf155cf7d94e70455fad4162eb1edae92d75a",
        "patch": "@@ -11,6 +11,7 @@ export BITCOIND=${REAL_BITCOIND}\n #Run the tests\n \n if [ \"x${ENABLE_BITCOIND}${ENABLE_UTILS}${ENABLE_WALLET}\" = \"x111\" ]; then\n+  ${BUILDDIR}/qa/rpc-tests/disablewallet.py --srcdir \"${BUILDDIR}/src\"\n   ${BUILDDIR}/qa/rpc-tests/wallet.py --srcdir \"${BUILDDIR}/src\"\n   ${BUILDDIR}/qa/rpc-tests/listtransactions.py --srcdir \"${BUILDDIR}/src\"\n   ${BUILDDIR}/qa/rpc-tests/mempool_resurrect_test.py --srcdir \"${BUILDDIR}/src\""
      },
      {
        "sha": "4cb01575e2805ec69b0cdc2fb440f30b70a56810",
        "filename": "qa/rpc-tests/disablewallet.py",
        "status": "added",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/312cf155cf7d94e70455fad4162eb1edae92d75a/qa/rpc-tests/disablewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/312cf155cf7d94e70455fad4162eb1edae92d75a/qa/rpc-tests/disablewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/disablewallet.py?ref=312cf155cf7d94e70455fad4162eb1edae92d75a",
        "patch": "@@ -0,0 +1,32 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Exercise API with -disablewallet.\n+#\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class DisableWalletTest (BitcoinTestFramework):\n+\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 1)\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(1, self.options.tmpdir, [['-disablewallet']])\n+        self.is_network_split = False\n+        self.sync_all()\n+\n+    def run_test (self):\n+        # Check regression: https://github.com/bitcoin/bitcoin/issues/6963#issuecomment-154548880\n+        x = self.nodes[0].validateaddress('3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy')\n+        assert(x['isvalid'] == False)\n+        x = self.nodes[0].validateaddress('mneYUmWYsuk7kySiURxCi3AGxrAqZxLgPZ')\n+        assert(x['isvalid'] == True)\n+\n+if __name__ == '__main__':\n+    DisableWalletTest ().main ()"
      }
    ]
  },
  {
    "sha": "f3995f0485e5bca152e3a1d200db5cb56d69f02f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMzk5NWYwNDg1ZTViY2ExNTJlM2ExZDIwMGRiNWNiNTZkNjlmMDJm",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-07-23T21:10:15Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T06:37:54Z"
      },
      "message": "build: fix building against qt5.4/5.5\n\nGithub-Pull: #6471\nRebased-From: fe997dfd121e3d82464908940753b77ebf61a10d",
      "tree": {
        "sha": "66f4bf262a2092e8a2efbaf9677f77b3dc0bb8cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/66f4bf262a2092e8a2efbaf9677f77b3dc0bb8cc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3995f0485e5bca152e3a1d200db5cb56d69f02f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3995f0485e5bca152e3a1d200db5cb56d69f02f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f3995f0485e5bca152e3a1d200db5cb56d69f02f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3995f0485e5bca152e3a1d200db5cb56d69f02f/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "047a89831760ff124740fe9f58411d57ee087078",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/047a89831760ff124740fe9f58411d57ee087078",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/047a89831760ff124740fe9f58411d57ee087078"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 23,
      "deletions": 4
    },
    "files": [
      {
        "sha": "2964ffc782304485c2b01ee6354dfd4e8b1d83cf",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 21,
        "deletions": 4,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3995f0485e5bca152e3a1d200db5cb56d69f02f/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3995f0485e5bca152e3a1d200db5cb56d69f02f/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=f3995f0485e5bca152e3a1d200db5cb56d69f02f",
        "patch": "@@ -105,24 +105,40 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   dnl results to QT_LIBS.\n   BITCOIN_QT_CHECK([\n   TEMP_CPPFLAGS=$CPPFLAGS\n-  CPPFLAGS=$QT_INCLUDES\n+  CPPFLAGS=\"$QT_INCLUDES $CPPFLAGS\"\n   if test x$bitcoin_qt_got_major_vers = x5; then\n     _BITCOIN_QT_IS_STATIC\n     if test x$bitcoin_cv_static_qt = xyes; then\n       AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol if qt plugins are static])\n       if test x$qt_plugin_path != x; then\n-        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n         QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/platforms\"\n       fi\n       if test x$use_pkgconfig = xyes; then\n         PKG_CHECK_MODULES([QTPLATFORM], [Qt5PlatformSupport], [QT_LIBS=\"$QTPLATFORM_LIBS $QT_LIBS\"])\n       fi\n-      _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(AccessibleFactory)], [-lqtaccessiblewidgets])\n+      AC_CACHE_CHECK(for Qt < 5.4, bitcoin_cv_need_acc_widget,[AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n+          [[#include <QtCore>]],[[\n+          #if QT_VERSION >= 0x050400\n+          choke;\n+          #endif\n+          ]])],\n+        [bitcoin_cv_need_acc_widget=yes],\n+        [bitcoin_cv_need_acc_widget=no])\n+      ])\n+      if test \"x$bitcoin_cv_need_acc_widget\" = \"xyes\"; then\n+        if test x$qt_plugin_path != x; then\n+          QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n+        fi\n+        _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(AccessibleFactory)], [-lqtaccessiblewidgets])\n+      fi\n       if test x$TARGET_OS = xwindows; then\n         _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QWindowsIntegrationPlugin)],[-lqwindows])\n         AC_DEFINE(QT_QPA_PLATFORM_WINDOWS, 1, [Define this symbol if the qt platform is windows])\n       elif test x$TARGET_OS = xlinux; then\n         PKG_CHECK_MODULES([X11XCB], [x11-xcb], [QT_LIBS=\"$X11XCB_LIBS $QT_LIBS\"])\n+        if ${PKG_CONFIG} --exists \"Qt5Core >= 5.5\" 2>/dev/null; then\n+          PKG_CHECK_MODULES([QTXCBQPA], [Qt5XcbQpa], [QT_LIBS=\"$QTXCBQPA_LIBS $QT_LIBS\"])\n+        fi\n         _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QXcbIntegrationPlugin)],[-lqxcb -lxcb-static])\n         AC_DEFINE(QT_QPA_PLATFORM_XCB, 1, [Define this symbol if the qt platform is xcb])\n       elif test x$TARGET_OS = xdarwin; then\n@@ -381,7 +397,8 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([z] ,[main],,AC_MSG_WARN([zlib not found. Assuming qt has it built-in])))\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([png] ,[main],,AC_MSG_WARN([libpng not found. Assuming qt has it built-in])))\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([jpeg] ,[main],,AC_MSG_WARN([libjpeg not found. Assuming qt has it built-in])))\n-  BITCOIN_QT_CHECK(AC_CHECK_LIB([pcre16] ,[main],,AC_MSG_WARN([libpcre16 not found. Assuming qt has it built-in])))\n+  BITCOIN_QT_CHECK(AC_SEARCH_LIBS([pcre16_exec], [qtpcre pcre16],,AC_MSG_WARN([libpcre16 not found. Assuming qt has it built-in])))\n+  BITCOIN_QT_CHECK(AC_SEARCH_LIBS([hb_ot_tags_from_script] ,[qtharfbuzzng harfbuzz],,AC_MSG_WARN([libharfbuzz not found. Assuming qt has it built-in or support is disabled])))\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Core]   ,[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXCore not found)))\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Gui]    ,[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXGui not found)))\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Network],[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXNetwork not found)))"
      },
      {
        "sha": "2d6aaad62ba37b848c82f9fd1c10f2870afc5f8c",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3995f0485e5bca152e3a1d200db5cb56d69f02f/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3995f0485e5bca152e3a1d200db5cb56d69f02f/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=f3995f0485e5bca152e3a1d200db5cb56d69f02f",
        "patch": "@@ -57,7 +57,9 @@ Q_IMPORT_PLUGIN(qtwcodecs)\n Q_IMPORT_PLUGIN(qkrcodecs)\n Q_IMPORT_PLUGIN(qtaccessiblewidgets)\n #else\n+#if QT_VERSION < 0x050400\n Q_IMPORT_PLUGIN(AccessibleFactory)\n+#endif\n #if defined(QT_QPA_PLATFORM_XCB)\n Q_IMPORT_PLUGIN(QXcbIntegrationPlugin);\n #elif defined(QT_QPA_PLATFORM_WINDOWS)"
      }
    ]
  },
  {
    "sha": "f016923570e4152070be62811778353c1feaf8f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMDE2OTIzNTcwZTQxNTIwNzBiZTYyODExNzc4MzUzYzFmZWFmOGY1",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-11-10T01:50:25Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T06:38:35Z"
      },
      "message": "build: Split hardening/fPIE options out\n\nThis allows for fPIE to be used selectively.\n\nGithub-Pull: #6978\nRebased-From: 17c4d9d1647bbac4b0557136b1c3d98c951feb79",
      "tree": {
        "sha": "cc8f19ba3137737b4faa7e5be6a61360ee06ec96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc8f19ba3137737b4faa7e5be6a61360ee06ec96"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f016923570e4152070be62811778353c1feaf8f5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f016923570e4152070be62811778353c1feaf8f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f016923570e4152070be62811778353c1feaf8f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f016923570e4152070be62811778353c1feaf8f5/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f3995f0485e5bca152e3a1d200db5cb56d69f02f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3995f0485e5bca152e3a1d200db5cb56d69f02f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f3995f0485e5bca152e3a1d200db5cb56d69f02f"
      }
    ],
    "stats": {
      "total": 79,
      "additions": 54,
      "deletions": 25
    },
    "files": [
      {
        "sha": "3d4c0d0db62def9510554efe8c8397ad17076a72",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f016923570e4152070be62811778353c1feaf8f5/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f016923570e4152070be62811778353c1feaf8f5/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=f016923570e4152070be62811778353c1feaf8f5",
        "patch": "@@ -105,7 +105,9 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   dnl results to QT_LIBS.\n   BITCOIN_QT_CHECK([\n   TEMP_CPPFLAGS=$CPPFLAGS\n+  TEMP_CXXFLAGS=$CXXFLAGS\n   CPPFLAGS=\"$QT_INCLUDES $CPPFLAGS\"\n+  CXXFLAGS=\"$PIC_FLAGS $CXXFLAGS\"\n   if test x$bitcoin_qt_got_major_vers = x5; then\n     _BITCOIN_QT_IS_STATIC\n     if test x$bitcoin_cv_static_qt = xyes; then\n@@ -167,6 +169,7 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n     fi\n   fi\n   CPPFLAGS=$TEMP_CPPFLAGS\n+  CXXFLAGS=$TEMP_CXXFLAGS\n   ])\n \n   if test x$use_pkgconfig$qt_bin_path = xyes; then\n@@ -358,6 +361,8 @@ dnl Outputs: bitcoin_qt_got_major_vers is set to \"4\" or \"5\".\n dnl Outputs: have_qt_test and have_qt_dbus are set (if applicable) to yes|no.\n AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n   TEMP_CPPFLAGS=\"$CPPFLAGS\"\n+  TEMP_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$PIC_FLAGS $CXXFLAGS\"\n   TEMP_LIBS=\"$LIBS\"\n   BITCOIN_QT_CHECK([\n     if test x$qt_include_path != x; then\n@@ -427,6 +432,7 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n     fi\n   ])\n   CPPFLAGS=\"$TEMP_CPPFLAGS\"\n+  CXXFLAGS=\"$TEMP_CXXFLAGS\"\n   LIBS=\"$TEMP_LIBS\"\n ])\n "
      },
      {
        "sha": "fff9a03fb9ed67681158a52f76c2242ba1385d7e",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 12,
        "deletions": 7,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f016923570e4152070be62811778353c1feaf8f5/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f016923570e4152070be62811778353c1feaf8f5/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=f016923570e4152070be62811778353c1feaf8f5",
        "patch": "@@ -315,6 +315,7 @@ case $host in\n \n      AX_CHECK_LINK_FLAG([[-Wl,-headerpad_max_install_names]], [LDFLAGS=\"$LDFLAGS -Wl,-headerpad_max_install_names\"])\n      CPPFLAGS=\"$CPPFLAGS -DMAC_OSX\"\n+     OBJCXXFLAGS=\"$CXXFLAGS\"\n      ;;\n    *linux*)\n      TARGET_OS=linux\n@@ -406,6 +407,11 @@ if test x$use_glibc_compat != xno; then\n \n fi\n \n+if test x$TARGET_OS != xwindows; then\n+  # All windows code is PIC, forcing it on just adds useless compile warnings\n+  AX_CHECK_COMPILE_FLAG([-fPIC],[PIC_FLAGS=\"-fPIC\"])\n+fi\n+\n if test x$use_hardening != xno; then\n   AX_CHECK_COMPILE_FLAG([-Wstack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -Wstack-protector\"])\n   AX_CHECK_COMPILE_FLAG([-fstack-protector-all],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-protector-all\"])\n@@ -423,8 +429,7 @@ if test x$use_hardening != xno; then\n   AX_CHECK_LINK_FLAG([[-Wl,-z,now]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,now\"])\n \n   if test x$TARGET_OS != xwindows; then\n-    # All windows code is PIC, forcing it on just adds useless compile warnings\n-    AX_CHECK_COMPILE_FLAG([-fPIE],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fPIE\"])\n+    AX_CHECK_COMPILE_FLAG([-fPIE],[PIE_FLAGS=\"-fPIE\"])\n     AX_CHECK_LINK_FLAG([[-pie]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -pie\"])\n   fi\n \n@@ -433,11 +438,6 @@ if test x$use_hardening != xno; then\n        AC_CHECK_LIB([ssp],      [main],, AC_MSG_ERROR(lib missing))\n     ;;\n   esac\n-\n-  CXXFLAGS=\"$CXXFLAGS $HARDENED_CXXFLAGS\"\n-  CPPFLAGS=\"$CPPFLAGS $HARDENED_CPPFLAGS\"\n-  LDFLAGS=\"$LDFLAGS $HARDENED_LDFLAGS\"\n-  OBJCXXFLAGS=\"$CXXFLAGS\"\n fi\n \n dnl this flag screws up non-darwin gcc even when the check fails. special-case it.\n@@ -871,6 +871,11 @@ AC_SUBST(CLIENT_VERSION_IS_RELEASE, _CLIENT_VERSION_IS_RELEASE)\n AC_SUBST(COPYRIGHT_YEAR, _COPYRIGHT_YEAR)\n \n AC_SUBST(RELDFLAGS)\n+AC_SUBST(HARDENED_CXXFLAGS)\n+AC_SUBST(HARDENED_CPPFLAGS)\n+AC_SUBST(HARDENED_LDFLAGS)\n+AC_SUBST(PIC_FLAGS)\n+AC_SUBST(PIE_FLAGS)\n AC_SUBST(LIBTOOL_APP_LDFLAGS)\n AC_SUBST(USE_UPNP)\n AC_SUBST(USE_QRCODE)"
      },
      {
        "sha": "387d39a31c20539cec26d00d33188ff7f06e03f5",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 28,
        "deletions": 14,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f016923570e4152070be62811778353c1feaf8f5/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f016923570e4152070be62811778353c1feaf8f5/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=f016923570e4152070be62811778353c1feaf8f5",
        "patch": "@@ -1,6 +1,8 @@\n DIST_SUBDIRS = secp256k1\n-AM_LDFLAGS = $(PTHREAD_CFLAGS) $(LIBTOOL_LDFLAGS)\n \n+AM_LDFLAGS = $(PTHREAD_CFLAGS) $(LIBTOOL_LDFLAGS) $(HARDENED_LDFLAGS)\n+AM_CXXFLAGS = $(HARDENED_CXXFLAGS)\n+AM_CPPFLAGS = $(HARDENED_CPPFLAGS)\n \n if EMBEDDED_LEVELDB\n LEVELDB_CPPFLAGS += -I$(srcdir)/leveldb/include\n@@ -14,7 +16,7 @@ $(LIBLEVELDB): $(LIBMEMENV)\n $(LIBLEVELDB) $(LIBMEMENV):\n \t@echo \"Building LevelDB ...\" && $(MAKE) -C $(@D) $(@F) CXX=\"$(CXX)\" \\\n \t  CC=\"$(CC)\" PLATFORM=$(TARGET_OS) AR=\"$(AR)\" $(LEVELDB_TARGET_FLAGS) \\\n-          OPT=\"$(CXXFLAGS) $(CPPFLAGS)\"\n+          OPT=\"$(AM_CXXFLAGS) $(PIE_FLAGS) $(CXXFLAGS) $(AM_CPPFLAGS) $(CPPFLAGS)\"\n endif\n \n BITCOIN_CONFIG_INCLUDES=-I$(builddir)/config\n@@ -159,7 +161,8 @@ obj/build.h: FORCE\n libbitcoin_util_a-clientversion.$(OBJEXT): obj/build.h\n \n # server: shared between bitcoind and bitcoin-qt\n-libbitcoin_server_a_CPPFLAGS = $(BITCOIN_INCLUDES) $(MINIUPNPC_CPPFLAGS)\n+libbitcoin_server_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(MINIUPNPC_CPPFLAGS)\n+libbitcoin_server_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_server_a_SOURCES = \\\n   addrman.cpp \\\n   alert.cpp \\\n@@ -190,7 +193,8 @@ libbitcoin_server_a_SOURCES = \\\n \n # wallet: shared between bitcoind and bitcoin-qt, but only linked\n # when wallet enabled\n-libbitcoin_wallet_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n+libbitcoin_wallet_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+libbitcoin_wallet_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_wallet_a_SOURCES = \\\n   db.cpp \\\n   crypter.cpp \\\n@@ -202,7 +206,8 @@ libbitcoin_wallet_a_SOURCES = \\\n   $(BITCOIN_CORE_H)\n \n # crypto primitives library\n-crypto_libbitcoin_crypto_a_CPPFLAGS = $(BITCOIN_CONFIG_INCLUDES)\n+crypto_libbitcoin_crypto_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_CONFIG_INCLUDES)\n+crypto_libbitcoin_crypto_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n crypto_libbitcoin_crypto_a_SOURCES = \\\n   crypto/sha1.cpp \\\n   crypto/sha256.cpp \\\n@@ -221,6 +226,8 @@ crypto_libbitcoin_crypto_a_SOURCES = \\\n   crypto/ripemd160.h\n \n # univalue JSON library\n+univalue_libbitcoin_univalue_a_CPPFLAGS = $(AM_CPPFLAGS)\n+univalue_libbitcoin_univalue_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n univalue_libbitcoin_univalue_a_SOURCES = \\\n   univalue/univalue.cpp \\\n   univalue/univalue_read.cpp \\\n@@ -229,7 +236,8 @@ univalue_libbitcoin_univalue_a_SOURCES = \\\n   univalue/univalue.h\n \n # common: shared between bitcoind, and bitcoin-qt and non-server tools\n-libbitcoin_common_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n+libbitcoin_common_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+libbitcoin_common_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_common_a_SOURCES = \\\n   allocators.cpp \\\n   amount.cpp \\\n@@ -259,7 +267,8 @@ libbitcoin_common_a_SOURCES = \\\n # util: shared between all executables.\n # This library *must* be included to make sure that the glibc\n # backward-compatibility objects and their sanity checks are linked.\n-libbitcoin_util_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n+libbitcoin_util_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+libbitcoin_util_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_util_a_SOURCES = \\\n   compat/strnlen.cpp \\\n   compat/glibc_sanity.cpp \\\n@@ -282,7 +291,8 @@ libbitcoin_util_a_SOURCES += compat/glibcxx_compat.cpp\n endif\n \n # cli: shared between bitcoin-cli and bitcoin-qt\n-libbitcoin_cli_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n+libbitcoin_cli_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+libbitcoin_cli_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_cli_a_SOURCES = \\\n   rpcclient.cpp \\\n   $(BITCOIN_CORE_H)\n@@ -312,7 +322,8 @@ bitcoind_SOURCES += bitcoind-res.rc\n endif\n \n bitcoind_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)\n-bitcoind_CPPFLAGS = $(BITCOIN_INCLUDES)\n+bitcoind_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+bitcoind_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n bitcoind_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n \n # bitcoin-cli binary #\n@@ -326,7 +337,8 @@ bitcoin_cli_LDADD = \\\n bitcoin_cli_SOURCES = \\\n   bitcoin-cli.cpp\n \n-bitcoin_cli_CPPFLAGS = $(BITCOIN_INCLUDES)\n+bitcoin_cli_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+bitcoin_cli_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n #\n \n # bitcoin-tx binary #\n@@ -340,7 +352,8 @@ bitcoin_tx_LDADD = \\\n   $(CRYPTO_LIBS)\n \n bitcoin_tx_SOURCES = bitcoin-tx.cpp\n-bitcoin_tx_CPPFLAGS = $(BITCOIN_INCLUDES)\n+bitcoin_tx_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+bitcoin_tx_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n #\n bitcoin_tx_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n \n@@ -373,9 +386,10 @@ if GLIBC_BACK_COMPAT\n   libbitcoinconsensus_la_SOURCES += compat/glibcxx_compat.cpp\n endif\n \n-libbitcoinconsensus_la_LDFLAGS = -no-undefined $(RELDFLAGS)\n+libbitcoinconsensus_la_LDFLAGS = $(AM_LDFLAGS) -no-undefined $(RELDFLAGS)\n libbitcoinconsensus_la_LIBADD = $(CRYPTO_LIBS)\n-libbitcoinconsensus_la_CPPFLAGS = $(CRYPTO_CFLAGS) -I$(builddir)/obj -DBUILD_BITCOIN_INTERNAL\n+libbitcoinconsensus_la_CPPFLAGS = $(AM_CPPFLAGS) $(CRYPTO_CFLAGS) -I$(builddir)/obj -DBUILD_BITCOIN_INTERNAL\n+libbitcoinconsensus_la_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n if USE_LIBSECP256K1\n libbitcoinconsensus_la_LIBADD += secp256k1/libsecp256k1.la\n endif\n@@ -399,7 +413,7 @@ clean-local:\n \n .mm.o:\n \t$(AM_V_CXX) $(OBJCXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\\n-\t  $(CPPFLAGS) $(AM_CXXFLAGS) $(QT_INCLUDES) $(CXXFLAGS)  -c -o $@ $<\n+\t  $(CPPFLAGS) $(AM_CXXFLAGS) $(QT_INCLUDES) $(AM_CXXFLAGS) $(PIE_FLAGS) $(CXXFLAGS) -c -o $@ $<\n \n %.pb.cc %.pb.h: %.proto\n \t@test -f $(PROTOC)"
      },
      {
        "sha": "6fc29ffc31b852e9f98e18c2188288816c3411ab",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f016923570e4152070be62811778353c1feaf8f5/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f016923570e4152070be62811778353c1feaf8f5/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=f016923570e4152070be62811778353c1feaf8f5",
        "patch": "@@ -322,8 +322,9 @@ BITCOIN_RC = qt/res/bitcoin-qt-res.rc\n BITCOIN_QT_INCLUDES = -I$(builddir)/qt -I$(srcdir)/qt -I$(srcdir)/qt/forms \\\n   -I$(builddir)/qt/forms\n \n-qt_libbitcoinqt_a_CPPFLAGS = $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\\n+qt_libbitcoinqt_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\\n   $(QT_INCLUDES) $(QT_DBUS_INCLUDES) $(PROTOBUF_CFLAGS) $(QR_CFLAGS)\n+qt_libbitcoinqt_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n \n qt_libbitcoinqt_a_SOURCES = $(BITCOIN_QT_CPP) $(BITCOIN_QT_H) $(QT_FORMS_UI) \\\n   $(QT_QRC) $(QT_QRC_LOCALE) $(QT_TS) $(PROTOBUF_PROTO) $(RES_ICONS) $(RES_IMAGES) $(RES_MOVIES)\n@@ -345,8 +346,9 @@ $(QT_MOC): $(PROTOBUF_H)\n $(QT_MOC_CPP): $(PROTOBUF_H)\n \n # bitcoin-qt binary #\n-qt_bitcoin_qt_CPPFLAGS = $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\\n+qt_bitcoin_qt_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\\n   $(QT_INCLUDES) $(PROTOBUF_CFLAGS) $(QR_CFLAGS)\n+qt_bitcoin_qt_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n \n qt_bitcoin_qt_SOURCES = qt/bitcoin.cpp\n if TARGET_DARWIN"
      },
      {
        "sha": "48230d6ab9c196ac51ea8d8afdcef7ce668778e6",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f016923570e4152070be62811778353c1feaf8f5/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f016923570e4152070be62811778353c1feaf8f5/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=f016923570e4152070be62811778353c1feaf8f5",
        "patch": "@@ -12,7 +12,7 @@ TEST_QT_H = \\\n   qt/test/paymentrequestdata.h \\\n   qt/test/paymentservertests.h\n \n-qt_test_test_bitcoin_qt_CPPFLAGS = $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\\n+qt_test_test_bitcoin_qt_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\\n   $(QT_INCLUDES) $(QT_TEST_INCLUDES) $(PROTOBUF_CFLAGS)\n \n qt_test_test_bitcoin_qt_SOURCES = \\\n@@ -34,6 +34,7 @@ qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBIT\n   $(LIBMEMENV) $(BOOST_LIBS) $(QT_DBUS_LIBS) $(QT_TEST_LIBS) $(QT_LIBS) \\\n   $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1)\n qt_test_test_bitcoin_qt_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(QT_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+qt_test_test_bitcoin_qt_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n \n CLEAN_BITCOIN_QT_TEST = $(TEST_QT_MOC_CPP) qt/test/*.gcda qt/test/*.gcno\n "
      },
      {
        "sha": "d8a30421de668eb1b6f279da3d3e660463a59ada",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f016923570e4152070be62811778353c1feaf8f5/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f016923570e4152070be62811778353c1feaf8f5/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=f016923570e4152070be62811778353c1feaf8f5",
        "patch": "@@ -80,9 +80,10 @@ BITCOIN_TESTS += \\\n endif\n \n test_test_bitcoin_SOURCES = $(BITCOIN_TESTS) $(JSON_TEST_FILES) $(RAW_TEST_FILES)\n-test_test_bitcoin_CPPFLAGS = $(BITCOIN_INCLUDES) -I$(builddir)/test/ $(TESTDEFS)\n+test_test_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -I$(builddir)/test/ $(TESTDEFS)\n test_test_bitcoin_LDADD = $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBBITCOIN_UNIVALUE) $(LIBLEVELDB) $(LIBMEMENV) \\\n   $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB) $(LIBSECP256K1)\n+test_test_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n if ENABLE_WALLET\n test_test_bitcoin_LDADD += $(LIBBITCOIN_WALLET)\n endif"
      }
    ]
  },
  {
    "sha": "d6fc10cdc065c6d0cb997482fa3a94db6f9a9e00",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNmZjMTBjZGMwNjVjNmQwY2I5OTc0ODJmYTNhOTRkYjZmOWE5ZTAw",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-11-10T01:52:37Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T06:38:40Z"
      },
      "message": "build: Use fPIC rather than fPIE for qt objects.\n\nBut only if qt was built with reduced relocations.\n\nGithub-Pull: #6978\nRebased-From: 69d05134367da9a897ad14562a1d266750db450a",
      "tree": {
        "sha": "c490582fe813760974e1ba811598a75c2e74e201",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c490582fe813760974e1ba811598a75c2e74e201"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6fc10cdc065c6d0cb997482fa3a94db6f9a9e00",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6fc10cdc065c6d0cb997482fa3a94db6f9a9e00",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d6fc10cdc065c6d0cb997482fa3a94db6f9a9e00",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6fc10cdc065c6d0cb997482fa3a94db6f9a9e00/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f016923570e4152070be62811778353c1feaf8f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f016923570e4152070be62811778353c1feaf8f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f016923570e4152070be62811778353c1feaf8f5"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 41,
      "deletions": 3
    },
    "files": [
      {
        "sha": "687f9b6f75ebefa4272a28d9448bbebaf9a6dfae",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 38,
        "deletions": 0,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6fc10cdc065c6d0cb997482fa3a94db6f9a9e00/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6fc10cdc065c6d0cb997482fa3a94db6f9a9e00/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=d6fc10cdc065c6d0cb997482fa3a94db6f9a9e00",
        "patch": "@@ -178,6 +178,43 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n     fi\n   fi\n \n+  if test x$use_hardening != xno; then\n+    BITCOIN_QT_CHECK([\n+    AC_MSG_CHECKING(whether -fPIE can be used with this Qt config)\n+    TEMP_CPPFLAGS=$CPPFLAGS\n+    TEMP_CXXFLAGS=$CXXFLAGS\n+    CPPFLAGS=\"$QT_INCLUDES $CPPFLAGS\"\n+    CXXFLAGS=\"$PIE_FLAGS $CXXFLAGS\"\n+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <QtCore/qconfig.h>]],\n+      [[\n+          #if defined(QT_REDUCE_RELOCATIONS)\n+              choke;\n+          #endif\n+      ]])],\n+      [ AC_MSG_RESULT(yes); QT_PIE_FLAGS=$PIE_FLAGS ],\n+      [ AC_MSG_RESULT(no); QT_PIE_FLAGS=$PIC_FLAGS]\n+    )\n+    CPPFLAGS=$TEMP_CPPFLAGS\n+    CXXFLAGS=$TEMP_CXXFLAGS\n+    ])\n+  else\n+    BITCOIN_QT_CHECK([\n+    AC_MSG_CHECKING(whether -fPIC is needed with this Qt config)\n+    TEMP_CPPFLAGS=$CPPFLAGS\n+    CPPFLAGS=\"$QT_INCLUDES $CPPFLAGS\"\n+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <QtCore/qconfig.h>]],\n+      [[\n+          #if defined(QT_REDUCE_RELOCATIONS)\n+              choke;\n+          #endif\n+      ]])],\n+      [ AC_MSG_RESULT(no)],\n+      [ AC_MSG_RESULT(yes); QT_PIE_FLAGS=$PIC_FLAGS]\n+    )\n+    CPPFLAGS=$TEMP_CPPFLAGS\n+    ])\n+  fi\n+\n   BITCOIN_QT_PATH_PROGS([MOC], [moc-qt${bitcoin_qt_got_major_vers} moc${bitcoin_qt_got_major_vers} moc], $qt_bin_path)\n   BITCOIN_QT_PATH_PROGS([UIC], [uic-qt${bitcoin_qt_got_major_vers} uic${bitcoin_qt_got_major_vers} uic], $qt_bin_path)\n   BITCOIN_QT_PATH_PROGS([RCC], [rcc-qt${bitcoin_qt_got_major_vers} rcc${bitcoin_qt_got_major_vers} rcc], $qt_bin_path)\n@@ -223,6 +260,7 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   ])\n   AC_MSG_RESULT([$bitcoin_enable_qt (Qt${bitcoin_qt_got_major_vers})])\n \n+  AC_SUBST(QT_PIE_FLAGS)\n   AC_SUBST(QT_INCLUDES)\n   AC_SUBST(QT_LIBS)\n   AC_SUBST(QT_LDFLAGS)"
      },
      {
        "sha": "6c7e131e46e7fe1d317f573568e6671353a5531a",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6fc10cdc065c6d0cb997482fa3a94db6f9a9e00/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6fc10cdc065c6d0cb997482fa3a94db6f9a9e00/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=d6fc10cdc065c6d0cb997482fa3a94db6f9a9e00",
        "patch": "@@ -324,7 +324,7 @@ BITCOIN_QT_INCLUDES = -I$(builddir)/qt -I$(srcdir)/qt -I$(srcdir)/qt/forms \\\n \n qt_libbitcoinqt_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\\n   $(QT_INCLUDES) $(QT_DBUS_INCLUDES) $(PROTOBUF_CFLAGS) $(QR_CFLAGS)\n-qt_libbitcoinqt_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+qt_libbitcoinqt_a_CXXFLAGS = $(AM_CXXFLAGS) $(QT_PIE_FLAGS)\n \n qt_libbitcoinqt_a_SOURCES = $(BITCOIN_QT_CPP) $(BITCOIN_QT_H) $(QT_FORMS_UI) \\\n   $(QT_QRC) $(QT_QRC_LOCALE) $(QT_TS) $(PROTOBUF_PROTO) $(RES_ICONS) $(RES_IMAGES) $(RES_MOVIES)\n@@ -348,7 +348,7 @@ $(QT_MOC_CPP): $(PROTOBUF_H)\n # bitcoin-qt binary #\n qt_bitcoin_qt_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\\n   $(QT_INCLUDES) $(PROTOBUF_CFLAGS) $(QR_CFLAGS)\n-qt_bitcoin_qt_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+qt_bitcoin_qt_CXXFLAGS = $(AM_CXXFLAGS) $(QT_PIE_FLAGS)\n \n qt_bitcoin_qt_SOURCES = qt/bitcoin.cpp\n if TARGET_DARWIN"
      },
      {
        "sha": "655ebf9fcb92ed293ed6811addf21435e8558cb9",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6fc10cdc065c6d0cb997482fa3a94db6f9a9e00/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6fc10cdc065c6d0cb997482fa3a94db6f9a9e00/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=d6fc10cdc065c6d0cb997482fa3a94db6f9a9e00",
        "patch": "@@ -34,7 +34,7 @@ qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBIT\n   $(LIBMEMENV) $(BOOST_LIBS) $(QT_DBUS_LIBS) $(QT_TEST_LIBS) $(QT_LIBS) \\\n   $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1)\n qt_test_test_bitcoin_qt_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(QT_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-qt_test_test_bitcoin_qt_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+qt_test_test_bitcoin_qt_CXXFLAGS = $(AM_CXXFLAGS) $(QT_PIE_FLAGS)\n \n CLEAN_BITCOIN_QT_TEST = $(TEST_QT_MOC_CPP) qt/test/*.gcda qt/test/*.gcno\n "
      }
    ]
  },
  {
    "sha": "6a5ddc49fcffdd81f305b1f51659d4cbe72fe464",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTVkZGM0OWZjZmZkZDgxZjMwNWIxZjUxNjU5ZDRjYmU3MmZlNDY0",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T06:38:57Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T06:38:57Z"
      },
      "message": "Merge commit 'd6fc10c' into backports-for-0.10.5",
      "tree": {
        "sha": "024367a610a967481cdc948ca2dfcd4dd599e70a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/024367a610a967481cdc948ca2dfcd4dd599e70a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a5ddc49fcffdd81f305b1f51659d4cbe72fe464",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a5ddc49fcffdd81f305b1f51659d4cbe72fe464",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a5ddc49fcffdd81f305b1f51659d4cbe72fe464",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a5ddc49fcffdd81f305b1f51659d4cbe72fe464/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "312cf155cf7d94e70455fad4162eb1edae92d75a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/312cf155cf7d94e70455fad4162eb1edae92d75a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/312cf155cf7d94e70455fad4162eb1edae92d75a"
      },
      {
        "sha": "d6fc10cdc065c6d0cb997482fa3a94db6f9a9e00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6fc10cdc065c6d0cb997482fa3a94db6f9a9e00",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6fc10cdc065c6d0cb997482fa3a94db6f9a9e00"
      }
    ],
    "stats": {
      "total": 144,
      "additions": 115,
      "deletions": 29
    },
    "files": [
      {
        "sha": "687f9b6f75ebefa4272a28d9448bbebaf9a6dfae",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 65,
        "deletions": 4,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a5ddc49fcffdd81f305b1f51659d4cbe72fe464/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a5ddc49fcffdd81f305b1f51659d4cbe72fe464/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=6a5ddc49fcffdd81f305b1f51659d4cbe72fe464",
        "patch": "@@ -105,24 +105,42 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   dnl results to QT_LIBS.\n   BITCOIN_QT_CHECK([\n   TEMP_CPPFLAGS=$CPPFLAGS\n-  CPPFLAGS=$QT_INCLUDES\n+  TEMP_CXXFLAGS=$CXXFLAGS\n+  CPPFLAGS=\"$QT_INCLUDES $CPPFLAGS\"\n+  CXXFLAGS=\"$PIC_FLAGS $CXXFLAGS\"\n   if test x$bitcoin_qt_got_major_vers = x5; then\n     _BITCOIN_QT_IS_STATIC\n     if test x$bitcoin_cv_static_qt = xyes; then\n       AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol if qt plugins are static])\n       if test x$qt_plugin_path != x; then\n-        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n         QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/platforms\"\n       fi\n       if test x$use_pkgconfig = xyes; then\n         PKG_CHECK_MODULES([QTPLATFORM], [Qt5PlatformSupport], [QT_LIBS=\"$QTPLATFORM_LIBS $QT_LIBS\"])\n       fi\n-      _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(AccessibleFactory)], [-lqtaccessiblewidgets])\n+      AC_CACHE_CHECK(for Qt < 5.4, bitcoin_cv_need_acc_widget,[AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n+          [[#include <QtCore>]],[[\n+          #if QT_VERSION >= 0x050400\n+          choke;\n+          #endif\n+          ]])],\n+        [bitcoin_cv_need_acc_widget=yes],\n+        [bitcoin_cv_need_acc_widget=no])\n+      ])\n+      if test \"x$bitcoin_cv_need_acc_widget\" = \"xyes\"; then\n+        if test x$qt_plugin_path != x; then\n+          QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n+        fi\n+        _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(AccessibleFactory)], [-lqtaccessiblewidgets])\n+      fi\n       if test x$TARGET_OS = xwindows; then\n         _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QWindowsIntegrationPlugin)],[-lqwindows])\n         AC_DEFINE(QT_QPA_PLATFORM_WINDOWS, 1, [Define this symbol if the qt platform is windows])\n       elif test x$TARGET_OS = xlinux; then\n         PKG_CHECK_MODULES([X11XCB], [x11-xcb], [QT_LIBS=\"$X11XCB_LIBS $QT_LIBS\"])\n+        if ${PKG_CONFIG} --exists \"Qt5Core >= 5.5\" 2>/dev/null; then\n+          PKG_CHECK_MODULES([QTXCBQPA], [Qt5XcbQpa], [QT_LIBS=\"$QTXCBQPA_LIBS $QT_LIBS\"])\n+        fi\n         _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QXcbIntegrationPlugin)],[-lqxcb -lxcb-static])\n         AC_DEFINE(QT_QPA_PLATFORM_XCB, 1, [Define this symbol if the qt platform is xcb])\n       elif test x$TARGET_OS = xdarwin; then\n@@ -151,6 +169,7 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n     fi\n   fi\n   CPPFLAGS=$TEMP_CPPFLAGS\n+  CXXFLAGS=$TEMP_CXXFLAGS\n   ])\n \n   if test x$use_pkgconfig$qt_bin_path = xyes; then\n@@ -159,6 +178,43 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n     fi\n   fi\n \n+  if test x$use_hardening != xno; then\n+    BITCOIN_QT_CHECK([\n+    AC_MSG_CHECKING(whether -fPIE can be used with this Qt config)\n+    TEMP_CPPFLAGS=$CPPFLAGS\n+    TEMP_CXXFLAGS=$CXXFLAGS\n+    CPPFLAGS=\"$QT_INCLUDES $CPPFLAGS\"\n+    CXXFLAGS=\"$PIE_FLAGS $CXXFLAGS\"\n+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <QtCore/qconfig.h>]],\n+      [[\n+          #if defined(QT_REDUCE_RELOCATIONS)\n+              choke;\n+          #endif\n+      ]])],\n+      [ AC_MSG_RESULT(yes); QT_PIE_FLAGS=$PIE_FLAGS ],\n+      [ AC_MSG_RESULT(no); QT_PIE_FLAGS=$PIC_FLAGS]\n+    )\n+    CPPFLAGS=$TEMP_CPPFLAGS\n+    CXXFLAGS=$TEMP_CXXFLAGS\n+    ])\n+  else\n+    BITCOIN_QT_CHECK([\n+    AC_MSG_CHECKING(whether -fPIC is needed with this Qt config)\n+    TEMP_CPPFLAGS=$CPPFLAGS\n+    CPPFLAGS=\"$QT_INCLUDES $CPPFLAGS\"\n+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <QtCore/qconfig.h>]],\n+      [[\n+          #if defined(QT_REDUCE_RELOCATIONS)\n+              choke;\n+          #endif\n+      ]])],\n+      [ AC_MSG_RESULT(no)],\n+      [ AC_MSG_RESULT(yes); QT_PIE_FLAGS=$PIC_FLAGS]\n+    )\n+    CPPFLAGS=$TEMP_CPPFLAGS\n+    ])\n+  fi\n+\n   BITCOIN_QT_PATH_PROGS([MOC], [moc-qt${bitcoin_qt_got_major_vers} moc${bitcoin_qt_got_major_vers} moc], $qt_bin_path)\n   BITCOIN_QT_PATH_PROGS([UIC], [uic-qt${bitcoin_qt_got_major_vers} uic${bitcoin_qt_got_major_vers} uic], $qt_bin_path)\n   BITCOIN_QT_PATH_PROGS([RCC], [rcc-qt${bitcoin_qt_got_major_vers} rcc${bitcoin_qt_got_major_vers} rcc], $qt_bin_path)\n@@ -204,6 +260,7 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   ])\n   AC_MSG_RESULT([$bitcoin_enable_qt (Qt${bitcoin_qt_got_major_vers})])\n \n+  AC_SUBST(QT_PIE_FLAGS)\n   AC_SUBST(QT_INCLUDES)\n   AC_SUBST(QT_LIBS)\n   AC_SUBST(QT_LDFLAGS)\n@@ -342,6 +399,8 @@ dnl Outputs: bitcoin_qt_got_major_vers is set to \"4\" or \"5\".\n dnl Outputs: have_qt_test and have_qt_dbus are set (if applicable) to yes|no.\n AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n   TEMP_CPPFLAGS=\"$CPPFLAGS\"\n+  TEMP_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$PIC_FLAGS $CXXFLAGS\"\n   TEMP_LIBS=\"$LIBS\"\n   BITCOIN_QT_CHECK([\n     if test x$qt_include_path != x; then\n@@ -381,7 +440,8 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([z] ,[main],,AC_MSG_WARN([zlib not found. Assuming qt has it built-in])))\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([png] ,[main],,AC_MSG_WARN([libpng not found. Assuming qt has it built-in])))\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([jpeg] ,[main],,AC_MSG_WARN([libjpeg not found. Assuming qt has it built-in])))\n-  BITCOIN_QT_CHECK(AC_CHECK_LIB([pcre16] ,[main],,AC_MSG_WARN([libpcre16 not found. Assuming qt has it built-in])))\n+  BITCOIN_QT_CHECK(AC_SEARCH_LIBS([pcre16_exec], [qtpcre pcre16],,AC_MSG_WARN([libpcre16 not found. Assuming qt has it built-in])))\n+  BITCOIN_QT_CHECK(AC_SEARCH_LIBS([hb_ot_tags_from_script] ,[qtharfbuzzng harfbuzz],,AC_MSG_WARN([libharfbuzz not found. Assuming qt has it built-in or support is disabled])))\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Core]   ,[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXCore not found)))\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Gui]    ,[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXGui not found)))\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Network],[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXNetwork not found)))\n@@ -410,6 +470,7 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n     fi\n   ])\n   CPPFLAGS=\"$TEMP_CPPFLAGS\"\n+  CXXFLAGS=\"$TEMP_CXXFLAGS\"\n   LIBS=\"$TEMP_LIBS\"\n ])\n "
      },
      {
        "sha": "fb6503c277fb9ca708e3b06d893d2f249edffc1b",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 12,
        "deletions": 7,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a5ddc49fcffdd81f305b1f51659d4cbe72fe464/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a5ddc49fcffdd81f305b1f51659d4cbe72fe464/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=6a5ddc49fcffdd81f305b1f51659d4cbe72fe464",
        "patch": "@@ -315,6 +315,7 @@ case $host in\n \n      AX_CHECK_LINK_FLAG([[-Wl,-headerpad_max_install_names]], [LDFLAGS=\"$LDFLAGS -Wl,-headerpad_max_install_names\"])\n      CPPFLAGS=\"$CPPFLAGS -DMAC_OSX\"\n+     OBJCXXFLAGS=\"$CXXFLAGS\"\n      ;;\n    *linux*)\n      TARGET_OS=linux\n@@ -406,6 +407,11 @@ if test x$use_glibc_compat != xno; then\n \n fi\n \n+if test x$TARGET_OS != xwindows; then\n+  # All windows code is PIC, forcing it on just adds useless compile warnings\n+  AX_CHECK_COMPILE_FLAG([-fPIC],[PIC_FLAGS=\"-fPIC\"])\n+fi\n+\n if test x$use_hardening != xno; then\n   AX_CHECK_COMPILE_FLAG([-Wstack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -Wstack-protector\"])\n   AX_CHECK_COMPILE_FLAG([-fstack-protector-all],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-protector-all\"])\n@@ -423,8 +429,7 @@ if test x$use_hardening != xno; then\n   AX_CHECK_LINK_FLAG([[-Wl,-z,now]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,now\"])\n \n   if test x$TARGET_OS != xwindows; then\n-    # All windows code is PIC, forcing it on just adds useless compile warnings\n-    AX_CHECK_COMPILE_FLAG([-fPIE],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fPIE\"])\n+    AX_CHECK_COMPILE_FLAG([-fPIE],[PIE_FLAGS=\"-fPIE\"])\n     AX_CHECK_LINK_FLAG([[-pie]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -pie\"])\n   fi\n \n@@ -433,11 +438,6 @@ if test x$use_hardening != xno; then\n        AC_CHECK_LIB([ssp],      [main],, AC_MSG_ERROR(lib missing))\n     ;;\n   esac\n-\n-  CXXFLAGS=\"$CXXFLAGS $HARDENED_CXXFLAGS\"\n-  CPPFLAGS=\"$CPPFLAGS $HARDENED_CPPFLAGS\"\n-  LDFLAGS=\"$LDFLAGS $HARDENED_LDFLAGS\"\n-  OBJCXXFLAGS=\"$CXXFLAGS\"\n fi\n \n dnl this flag screws up non-darwin gcc even when the check fails. special-case it.\n@@ -894,6 +894,11 @@ AC_SUBST(CLIENT_VERSION_IS_RELEASE, _CLIENT_VERSION_IS_RELEASE)\n AC_SUBST(COPYRIGHT_YEAR, _COPYRIGHT_YEAR)\n \n AC_SUBST(RELDFLAGS)\n+AC_SUBST(HARDENED_CXXFLAGS)\n+AC_SUBST(HARDENED_CPPFLAGS)\n+AC_SUBST(HARDENED_LDFLAGS)\n+AC_SUBST(PIC_FLAGS)\n+AC_SUBST(PIE_FLAGS)\n AC_SUBST(LIBTOOL_APP_LDFLAGS)\n AC_SUBST(USE_UPNP)\n AC_SUBST(USE_QRCODE)"
      },
      {
        "sha": "387d39a31c20539cec26d00d33188ff7f06e03f5",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 28,
        "deletions": 14,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a5ddc49fcffdd81f305b1f51659d4cbe72fe464/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a5ddc49fcffdd81f305b1f51659d4cbe72fe464/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=6a5ddc49fcffdd81f305b1f51659d4cbe72fe464",
        "patch": "@@ -1,6 +1,8 @@\n DIST_SUBDIRS = secp256k1\n-AM_LDFLAGS = $(PTHREAD_CFLAGS) $(LIBTOOL_LDFLAGS)\n \n+AM_LDFLAGS = $(PTHREAD_CFLAGS) $(LIBTOOL_LDFLAGS) $(HARDENED_LDFLAGS)\n+AM_CXXFLAGS = $(HARDENED_CXXFLAGS)\n+AM_CPPFLAGS = $(HARDENED_CPPFLAGS)\n \n if EMBEDDED_LEVELDB\n LEVELDB_CPPFLAGS += -I$(srcdir)/leveldb/include\n@@ -14,7 +16,7 @@ $(LIBLEVELDB): $(LIBMEMENV)\n $(LIBLEVELDB) $(LIBMEMENV):\n \t@echo \"Building LevelDB ...\" && $(MAKE) -C $(@D) $(@F) CXX=\"$(CXX)\" \\\n \t  CC=\"$(CC)\" PLATFORM=$(TARGET_OS) AR=\"$(AR)\" $(LEVELDB_TARGET_FLAGS) \\\n-          OPT=\"$(CXXFLAGS) $(CPPFLAGS)\"\n+          OPT=\"$(AM_CXXFLAGS) $(PIE_FLAGS) $(CXXFLAGS) $(AM_CPPFLAGS) $(CPPFLAGS)\"\n endif\n \n BITCOIN_CONFIG_INCLUDES=-I$(builddir)/config\n@@ -159,7 +161,8 @@ obj/build.h: FORCE\n libbitcoin_util_a-clientversion.$(OBJEXT): obj/build.h\n \n # server: shared between bitcoind and bitcoin-qt\n-libbitcoin_server_a_CPPFLAGS = $(BITCOIN_INCLUDES) $(MINIUPNPC_CPPFLAGS)\n+libbitcoin_server_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(MINIUPNPC_CPPFLAGS)\n+libbitcoin_server_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_server_a_SOURCES = \\\n   addrman.cpp \\\n   alert.cpp \\\n@@ -190,7 +193,8 @@ libbitcoin_server_a_SOURCES = \\\n \n # wallet: shared between bitcoind and bitcoin-qt, but only linked\n # when wallet enabled\n-libbitcoin_wallet_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n+libbitcoin_wallet_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+libbitcoin_wallet_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_wallet_a_SOURCES = \\\n   db.cpp \\\n   crypter.cpp \\\n@@ -202,7 +206,8 @@ libbitcoin_wallet_a_SOURCES = \\\n   $(BITCOIN_CORE_H)\n \n # crypto primitives library\n-crypto_libbitcoin_crypto_a_CPPFLAGS = $(BITCOIN_CONFIG_INCLUDES)\n+crypto_libbitcoin_crypto_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_CONFIG_INCLUDES)\n+crypto_libbitcoin_crypto_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n crypto_libbitcoin_crypto_a_SOURCES = \\\n   crypto/sha1.cpp \\\n   crypto/sha256.cpp \\\n@@ -221,6 +226,8 @@ crypto_libbitcoin_crypto_a_SOURCES = \\\n   crypto/ripemd160.h\n \n # univalue JSON library\n+univalue_libbitcoin_univalue_a_CPPFLAGS = $(AM_CPPFLAGS)\n+univalue_libbitcoin_univalue_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n univalue_libbitcoin_univalue_a_SOURCES = \\\n   univalue/univalue.cpp \\\n   univalue/univalue_read.cpp \\\n@@ -229,7 +236,8 @@ univalue_libbitcoin_univalue_a_SOURCES = \\\n   univalue/univalue.h\n \n # common: shared between bitcoind, and bitcoin-qt and non-server tools\n-libbitcoin_common_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n+libbitcoin_common_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+libbitcoin_common_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_common_a_SOURCES = \\\n   allocators.cpp \\\n   amount.cpp \\\n@@ -259,7 +267,8 @@ libbitcoin_common_a_SOURCES = \\\n # util: shared between all executables.\n # This library *must* be included to make sure that the glibc\n # backward-compatibility objects and their sanity checks are linked.\n-libbitcoin_util_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n+libbitcoin_util_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+libbitcoin_util_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_util_a_SOURCES = \\\n   compat/strnlen.cpp \\\n   compat/glibc_sanity.cpp \\\n@@ -282,7 +291,8 @@ libbitcoin_util_a_SOURCES += compat/glibcxx_compat.cpp\n endif\n \n # cli: shared between bitcoin-cli and bitcoin-qt\n-libbitcoin_cli_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n+libbitcoin_cli_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+libbitcoin_cli_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_cli_a_SOURCES = \\\n   rpcclient.cpp \\\n   $(BITCOIN_CORE_H)\n@@ -312,7 +322,8 @@ bitcoind_SOURCES += bitcoind-res.rc\n endif\n \n bitcoind_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)\n-bitcoind_CPPFLAGS = $(BITCOIN_INCLUDES)\n+bitcoind_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+bitcoind_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n bitcoind_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n \n # bitcoin-cli binary #\n@@ -326,7 +337,8 @@ bitcoin_cli_LDADD = \\\n bitcoin_cli_SOURCES = \\\n   bitcoin-cli.cpp\n \n-bitcoin_cli_CPPFLAGS = $(BITCOIN_INCLUDES)\n+bitcoin_cli_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+bitcoin_cli_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n #\n \n # bitcoin-tx binary #\n@@ -340,7 +352,8 @@ bitcoin_tx_LDADD = \\\n   $(CRYPTO_LIBS)\n \n bitcoin_tx_SOURCES = bitcoin-tx.cpp\n-bitcoin_tx_CPPFLAGS = $(BITCOIN_INCLUDES)\n+bitcoin_tx_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+bitcoin_tx_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n #\n bitcoin_tx_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n \n@@ -373,9 +386,10 @@ if GLIBC_BACK_COMPAT\n   libbitcoinconsensus_la_SOURCES += compat/glibcxx_compat.cpp\n endif\n \n-libbitcoinconsensus_la_LDFLAGS = -no-undefined $(RELDFLAGS)\n+libbitcoinconsensus_la_LDFLAGS = $(AM_LDFLAGS) -no-undefined $(RELDFLAGS)\n libbitcoinconsensus_la_LIBADD = $(CRYPTO_LIBS)\n-libbitcoinconsensus_la_CPPFLAGS = $(CRYPTO_CFLAGS) -I$(builddir)/obj -DBUILD_BITCOIN_INTERNAL\n+libbitcoinconsensus_la_CPPFLAGS = $(AM_CPPFLAGS) $(CRYPTO_CFLAGS) -I$(builddir)/obj -DBUILD_BITCOIN_INTERNAL\n+libbitcoinconsensus_la_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n if USE_LIBSECP256K1\n libbitcoinconsensus_la_LIBADD += secp256k1/libsecp256k1.la\n endif\n@@ -399,7 +413,7 @@ clean-local:\n \n .mm.o:\n \t$(AM_V_CXX) $(OBJCXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\\n-\t  $(CPPFLAGS) $(AM_CXXFLAGS) $(QT_INCLUDES) $(CXXFLAGS)  -c -o $@ $<\n+\t  $(CPPFLAGS) $(AM_CXXFLAGS) $(QT_INCLUDES) $(AM_CXXFLAGS) $(PIE_FLAGS) $(CXXFLAGS) -c -o $@ $<\n \n %.pb.cc %.pb.h: %.proto\n \t@test -f $(PROTOC)"
      },
      {
        "sha": "6c7e131e46e7fe1d317f573568e6671353a5531a",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a5ddc49fcffdd81f305b1f51659d4cbe72fe464/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a5ddc49fcffdd81f305b1f51659d4cbe72fe464/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=6a5ddc49fcffdd81f305b1f51659d4cbe72fe464",
        "patch": "@@ -322,8 +322,9 @@ BITCOIN_RC = qt/res/bitcoin-qt-res.rc\n BITCOIN_QT_INCLUDES = -I$(builddir)/qt -I$(srcdir)/qt -I$(srcdir)/qt/forms \\\n   -I$(builddir)/qt/forms\n \n-qt_libbitcoinqt_a_CPPFLAGS = $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\\n+qt_libbitcoinqt_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\\n   $(QT_INCLUDES) $(QT_DBUS_INCLUDES) $(PROTOBUF_CFLAGS) $(QR_CFLAGS)\n+qt_libbitcoinqt_a_CXXFLAGS = $(AM_CXXFLAGS) $(QT_PIE_FLAGS)\n \n qt_libbitcoinqt_a_SOURCES = $(BITCOIN_QT_CPP) $(BITCOIN_QT_H) $(QT_FORMS_UI) \\\n   $(QT_QRC) $(QT_QRC_LOCALE) $(QT_TS) $(PROTOBUF_PROTO) $(RES_ICONS) $(RES_IMAGES) $(RES_MOVIES)\n@@ -345,8 +346,9 @@ $(QT_MOC): $(PROTOBUF_H)\n $(QT_MOC_CPP): $(PROTOBUF_H)\n \n # bitcoin-qt binary #\n-qt_bitcoin_qt_CPPFLAGS = $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\\n+qt_bitcoin_qt_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\\n   $(QT_INCLUDES) $(PROTOBUF_CFLAGS) $(QR_CFLAGS)\n+qt_bitcoin_qt_CXXFLAGS = $(AM_CXXFLAGS) $(QT_PIE_FLAGS)\n \n qt_bitcoin_qt_SOURCES = qt/bitcoin.cpp\n if TARGET_DARWIN"
      },
      {
        "sha": "655ebf9fcb92ed293ed6811addf21435e8558cb9",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a5ddc49fcffdd81f305b1f51659d4cbe72fe464/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a5ddc49fcffdd81f305b1f51659d4cbe72fe464/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=6a5ddc49fcffdd81f305b1f51659d4cbe72fe464",
        "patch": "@@ -12,7 +12,7 @@ TEST_QT_H = \\\n   qt/test/paymentrequestdata.h \\\n   qt/test/paymentservertests.h\n \n-qt_test_test_bitcoin_qt_CPPFLAGS = $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\\n+qt_test_test_bitcoin_qt_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\\n   $(QT_INCLUDES) $(QT_TEST_INCLUDES) $(PROTOBUF_CFLAGS)\n \n qt_test_test_bitcoin_qt_SOURCES = \\\n@@ -34,6 +34,7 @@ qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBIT\n   $(LIBMEMENV) $(BOOST_LIBS) $(QT_DBUS_LIBS) $(QT_TEST_LIBS) $(QT_LIBS) \\\n   $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1)\n qt_test_test_bitcoin_qt_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(QT_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+qt_test_test_bitcoin_qt_CXXFLAGS = $(AM_CXXFLAGS) $(QT_PIE_FLAGS)\n \n CLEAN_BITCOIN_QT_TEST = $(TEST_QT_MOC_CPP) qt/test/*.gcda qt/test/*.gcno\n "
      },
      {
        "sha": "82a0fd8c1d00518700e648e0a23ff740dc7de9cc",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a5ddc49fcffdd81f305b1f51659d4cbe72fe464/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a5ddc49fcffdd81f305b1f51659d4cbe72fe464/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=6a5ddc49fcffdd81f305b1f51659d4cbe72fe464",
        "patch": "@@ -81,9 +81,10 @@ BITCOIN_TESTS += \\\n endif\n \n test_test_bitcoin_SOURCES = $(BITCOIN_TESTS) $(JSON_TEST_FILES) $(RAW_TEST_FILES)\n-test_test_bitcoin_CPPFLAGS = $(BITCOIN_INCLUDES) -I$(builddir)/test/ $(TESTDEFS)\n+test_test_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -I$(builddir)/test/ $(TESTDEFS)\n test_test_bitcoin_LDADD = $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBBITCOIN_UNIVALUE) $(LIBLEVELDB) $(LIBMEMENV) \\\n   $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB) $(LIBSECP256K1)\n+test_test_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n if ENABLE_WALLET\n test_test_bitcoin_LDADD += $(LIBBITCOIN_WALLET)\n endif"
      },
      {
        "sha": "df325c6993e3520ce96fa50cda31820d0cbf670f",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a5ddc49fcffdd81f305b1f51659d4cbe72fe464/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a5ddc49fcffdd81f305b1f51659d4cbe72fe464/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=6a5ddc49fcffdd81f305b1f51659d4cbe72fe464",
        "patch": "@@ -57,7 +57,9 @@ Q_IMPORT_PLUGIN(qtwcodecs)\n Q_IMPORT_PLUGIN(qkrcodecs)\n Q_IMPORT_PLUGIN(qtaccessiblewidgets)\n #else\n+#if QT_VERSION < 0x050400\n Q_IMPORT_PLUGIN(AccessibleFactory)\n+#endif\n #if defined(QT_QPA_PLATFORM_XCB)\n Q_IMPORT_PLUGIN(QXcbIntegrationPlugin);\n #elif defined(QT_QPA_PLATFORM_WINDOWS)"
      }
    ]
  },
  {
    "sha": "28262da0eae16b70ea55dbd6909232accbb62969",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODI2MmRhMGVhZTE2YjcwZWE1NWRiZDY5MDkyMzJhY2NiYjYyOTY5",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-11-13T22:19:33Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T06:42:08Z"
      },
      "message": "Remove LOCK(cs_main) from decodescript\n\nCompletely static RPC call that doesn't change or even look at mutable\nstate anywhere.\n\nGithub-Pull: #7013\nRebased-From: b3ae384a8d1606948427b7bd2059d781a779b62a",
      "tree": {
        "sha": "e295279d4259fa47a21ca56b87fdd65410250ade",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e295279d4259fa47a21ca56b87fdd65410250ade"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28262da0eae16b70ea55dbd6909232accbb62969",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28262da0eae16b70ea55dbd6909232accbb62969",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/28262da0eae16b70ea55dbd6909232accbb62969",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28262da0eae16b70ea55dbd6909232accbb62969/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a5ddc49fcffdd81f305b1f51659d4cbe72fe464",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a5ddc49fcffdd81f305b1f51659d4cbe72fe464",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a5ddc49fcffdd81f305b1f51659d4cbe72fe464"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "48de5a0d9d7872e57623751b8205a13bcb757940",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28262da0eae16b70ea55dbd6909232accbb62969/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28262da0eae16b70ea55dbd6909232accbb62969/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=28262da0eae16b70ea55dbd6909232accbb62969",
        "patch": "@@ -289,7 +289,7 @@ static const CRPCCommand vRPCCommands[] =\n     /* Raw transactions */\n     { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   true,      false,      false },\n     { \"rawtransactions\",    \"decoderawtransaction\",   &decoderawtransaction,   true,      false,      false },\n-    { \"rawtransactions\",    \"decodescript\",           &decodescript,           true,      false,      false },\n+    { \"rawtransactions\",    \"decodescript\",           &decodescript,           true,      true,       false },\n     { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      true,      false,      false },\n     { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false,     false,      false },\n     { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     false,     false,      false }, /* uses wallet if enabled */"
      }
    ]
  },
  {
    "sha": "37ac13332820b37cbbd32ff67e17e19c6bc972dc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozN2FjMTMzMzI4MjBiMzdjYmJkMzJmZjY3ZTE3ZTE5YzZiYzk3MmRj",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2015-11-16T01:13:30Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T06:47:16Z"
      },
      "message": "Fixed integer comparison warning.\n\nGithub-Pull: #7023\nRebased-From: 4d29032a6437eaa147a69ce2857fb243bf3a1e49",
      "tree": {
        "sha": "9936d266d45d77e87275a9d560e6c50e9423d2c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9936d266d45d77e87275a9d560e6c50e9423d2c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/37ac13332820b37cbbd32ff67e17e19c6bc972dc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37ac13332820b37cbbd32ff67e17e19c6bc972dc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/37ac13332820b37cbbd32ff67e17e19c6bc972dc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37ac13332820b37cbbd32ff67e17e19c6bc972dc/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "28262da0eae16b70ea55dbd6909232accbb62969",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28262da0eae16b70ea55dbd6909232accbb62969",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28262da0eae16b70ea55dbd6909232accbb62969"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b8916bd0be33396db3dfe390c2550c8189bb774e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37ac13332820b37cbbd32ff67e17e19c6bc972dc/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37ac13332820b37cbbd32ff67e17e19c6bc972dc/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=37ac13332820b37cbbd32ff67e17e19c6bc972dc",
        "patch": "@@ -2381,7 +2381,7 @@ bool FindBlockPos(CValidationState &state, CDiskBlockPos &pos, unsigned int nAdd\n         pos.nPos = vinfoBlockFile[nFile].nSize;\n     }\n \n-    if (nFile != nLastBlockFile) {\n+    if ((int)nFile != nLastBlockFile) {\n         if (!fKnown) {\n             LogPrintf(\"Leaving block file %i: %s\\n\", nFile, vinfoBlockFile[nFile].ToString());\n         }"
      }
    ]
  },
  {
    "sha": "e9ffec1716e31bd0f998897ec2329716b0476817",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOWZmZWMxNzE2ZTMxYmQwZjk5ODg5N2VjMjMyOTcxNmIwNDc2ODE3",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-18T03:23:39Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T06:48:15Z"
      },
      "message": "Fix debug log message for block files\n\nGithub-Pull: #7050\nRebased-From: e855b0152fa9d23fd49ccdd1b8e9427826b44a67",
      "tree": {
        "sha": "9ae95d72a670e849c92b239ba91c639179482e3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ae95d72a670e849c92b239ba91c639179482e3a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9ffec1716e31bd0f998897ec2329716b0476817",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9ffec1716e31bd0f998897ec2329716b0476817",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e9ffec1716e31bd0f998897ec2329716b0476817",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9ffec1716e31bd0f998897ec2329716b0476817/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "37ac13332820b37cbbd32ff67e17e19c6bc972dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37ac13332820b37cbbd32ff67e17e19c6bc972dc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/37ac13332820b37cbbd32ff67e17e19c6bc972dc"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5c0eaa5892deff88008797e81b1f108b0e2a2764",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9ffec1716e31bd0f998897ec2329716b0476817/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9ffec1716e31bd0f998897ec2329716b0476817/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e9ffec1716e31bd0f998897ec2329716b0476817",
        "patch": "@@ -2383,7 +2383,7 @@ bool FindBlockPos(CValidationState &state, CDiskBlockPos &pos, unsigned int nAdd\n \n     if ((int)nFile != nLastBlockFile) {\n         if (!fKnown) {\n-            LogPrintf(\"Leaving block file %i: %s\\n\", nFile, vinfoBlockFile[nFile].ToString());\n+            LogPrintf(\"Leaving block file %i: %s\\n\", nLastBlockFile, vinfoBlockFile[nLastBlockFile].ToString());\n         }\n         FlushBlockFile(!fKnown);\n         nLastBlockFile = nFile;"
      }
    ]
  },
  {
    "sha": "b9becca07ac652b48846e9f57e8ea18e654c3d27",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOWJlY2NhMDdhYzY1MmI0ODg0NmU5ZjU3ZThlYTE4ZTY1NGMzZDI3",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2015-11-17T14:59:45Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T06:49:09Z"
      },
      "message": "[doc][trivial] Remove source forge from Debian watch.\n\nGithub-Pull: #7042\nRebased-From: 2fcb84907d793dcf0952ceff069c97866079c2e0",
      "tree": {
        "sha": "ca2e2739ba0113b97bdb11b52e3013aeabd1286b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca2e2739ba0113b97bdb11b52e3013aeabd1286b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9becca07ac652b48846e9f57e8ea18e654c3d27",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9becca07ac652b48846e9f57e8ea18e654c3d27",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b9becca07ac652b48846e9f57e8ea18e654c3d27",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9becca07ac652b48846e9f57e8ea18e654c3d27/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e9ffec1716e31bd0f998897ec2329716b0476817",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9ffec1716e31bd0f998897ec2329716b0476817",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e9ffec1716e31bd0f998897ec2329716b0476817"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 0,
      "deletions": 2
    },
    "files": [
      {
        "sha": "4d9e0cfa577b6d8acac28a1e005f42388b7255c0",
        "filename": "contrib/debian/watch",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9becca07ac652b48846e9f57e8ea18e654c3d27/contrib/debian/watch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9becca07ac652b48846e9f57e8ea18e654c3d27/contrib/debian/watch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/watch?ref=b9becca07ac652b48846e9f57e8ea18e654c3d27",
        "patch": "@@ -1,7 +1,5 @@\n # Run the \"uscan\" command to check for upstream updates and more.\n version=3\n # use qa.debian.org redirector; see man uscan\n-opts=uversionmangle=s/(\\d)(alpha|beta|rc)/$1~$2/;s/\\-src//,dversionmangle=s/~dfsg\\d*// \\\n- http://sf.net/bitcoin/bitcoin-(\\d.*)-linux\\.tar\\.gz debian\n opts=uversionmangle=s/(\\d)(alpha|beta|rc)/$1~$2/,dversionmangle=s/~dfsg\\d*// \\\n  http://githubredir.debian.net/github/bitcoin/bitcoin v(.*).tar.gz"
      }
    ]
  },
  {
    "sha": "ce2809aef6e03e5e4bda56f8cdaf1e7a4d76294e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZTI4MDlhZWY2ZTAzZTVlNGJkYTU2ZjhjZGFmMWU3YTRkNzYyOTRl",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T06:49:30Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T06:50:21Z"
      },
      "message": "Merge pull request #7045 (rewrite)\n\n2aa49ce Bugfix: Use unique autostart filenames on Linux for testnet/regtest (Luke Dashjr)",
      "tree": {
        "sha": "e2bbf8a2505e59df946192a30a047a9a3faf9078",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2bbf8a2505e59df946192a30a047a9a3faf9078"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce2809aef6e03e5e4bda56f8cdaf1e7a4d76294e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce2809aef6e03e5e4bda56f8cdaf1e7a4d76294e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ce2809aef6e03e5e4bda56f8cdaf1e7a4d76294e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce2809aef6e03e5e4bda56f8cdaf1e7a4d76294e/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b9becca07ac652b48846e9f57e8ea18e654c3d27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9becca07ac652b48846e9f57e8ea18e654c3d27",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b9becca07ac652b48846e9f57e8ea18e654c3d27"
      },
      {
        "sha": "2aa49ce9fe618bda9bf70fd57b23fe4802f0aeff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2aa49ce9fe618bda9bf70fd57b23fe4802f0aeff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2aa49ce9fe618bda9bf70fd57b23fe4802f0aeff"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5333c7a5e79c2adcc5fc1d8693bd6aa0b46890af",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce2809aef6e03e5e4bda56f8cdaf1e7a4d76294e/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce2809aef6e03e5e4bda56f8cdaf1e7a4d76294e/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=ce2809aef6e03e5e4bda56f8cdaf1e7a4d76294e",
        "patch": "@@ -649,6 +649,11 @@ boost::filesystem::path static GetAutostartDir()\n \n boost::filesystem::path static GetAutostartFilePath()\n {\n+    if (GetBoolArg(\"-testnet\", false))\n+        return GetAutostartDir() / \"bitcoin-test.desktop\";\n+    else if (GetBoolArg(\"-regtest\", false))\n+        return GetAutostartDir() / \"bitcoin-regtest.desktop\";\n+\n     return GetAutostartDir() / \"bitcoin.desktop\";\n }\n "
      }
    ]
  },
  {
    "sha": "51a4bb47df70ce36665887b936a500c63f790ae5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MWE0YmI0N2RmNzBjZTM2NjY1ODg3YjkzNmE1MDBjNjNmNzkwYWU1",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-11-20T11:51:36Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T07:03:33Z"
      },
      "message": "Add missing \"blocktime\" description to listtransactions help.\n\nGithub-Pull: #7066\nRebased-From: 5c2fd38d05b0da2fa0d1ec99f1db55b0d89180db",
      "tree": {
        "sha": "96b96f1c2f8c335dd614331dc0ebf8c1bab5d2d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/96b96f1c2f8c335dd614331dc0ebf8c1bab5d2d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/51a4bb47df70ce36665887b936a500c63f790ae5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51a4bb47df70ce36665887b936a500c63f790ae5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/51a4bb47df70ce36665887b936a500c63f790ae5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51a4bb47df70ce36665887b936a500c63f790ae5/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ce2809aef6e03e5e4bda56f8cdaf1e7a4d76294e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce2809aef6e03e5e4bda56f8cdaf1e7a4d76294e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ce2809aef6e03e5e4bda56f8cdaf1e7a4d76294e"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1f1ec09685f3034ba4bf0b9e7f413b34be6f3d19",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51a4bb47df70ce36665887b936a500c63f790ae5/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51a4bb47df70ce36665887b936a500c63f790ae5/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=51a4bb47df70ce36665887b936a500c63f790ae5",
        "patch": "@@ -1281,6 +1281,7 @@ Value listtransactions(const Array& params, bool fHelp)\n             \"                                          category of transactions.\\n\"\n             \"    \\\"blockindex\\\": n,          (numeric) The block index containing the transaction. Available for 'send' and 'receive'\\n\"\n             \"                                          category of transactions.\\n\"\n+            \"    \\\"blocktime\\\": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).\\n\"\n             \"    \\\"txid\\\": \\\"transactionid\\\", (string) The transaction id. Available for 'send' and 'receive' category of transactions.\\n\"\n             \"    \\\"time\\\": xxx,              (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).\\n\"\n             \"    \\\"timereceived\\\": xxx,      (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT). Available \\n\""
      }
    ]
  },
  {
    "sha": "4ea291f04f6581695af4d91d29cf598031411670",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZWEyOTFmMDRmNjU4MTY5NWFmNGQ5MWQyOWNmNTk4MDMxNDExNjcw",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-11-24T21:22:24Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T07:04:49Z"
      },
      "message": "build: Set osx permissions in the dmg to make Gatekeeper happy\n\nGithub-Pull: #7092\nRebased-From: 392d3c5846db69dcbcc448d7504d0e4e73832ecf",
      "tree": {
        "sha": "5b446e20d9a23d408533e2fd4c4e6e809f7a0229",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b446e20d9a23d408533e2fd4c4e6e809f7a0229"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ea291f04f6581695af4d91d29cf598031411670",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ea291f04f6581695af4d91d29cf598031411670",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4ea291f04f6581695af4d91d29cf598031411670",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ea291f04f6581695af4d91d29cf598031411670/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "51a4bb47df70ce36665887b936a500c63f790ae5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51a4bb47df70ce36665887b936a500c63f790ae5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51a4bb47df70ce36665887b936a500c63f790ae5"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "57cc7860dbb65a81c9e73ac8dab76568d8d8d4fc",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ea291f04f6581695af4d91d29cf598031411670/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ea291f04f6581695af4d91d29cf598031411670/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=4ea291f04f6581695af4d91d29cf598031411670",
        "patch": "@@ -99,7 +99,7 @@ $(APP_DIST_DIR)/Applications:\n $(APP_DIST_EXTRAS): $(APP_DIST_DIR)/$(OSX_APP)/Contents/MacOS/Bitcoin-Qt\n \n $(OSX_DMG): $(APP_DIST_EXTRAS)\n-\t$(GENISOIMAGE) -no-cache-inodes -D -l -probe -V \"Bitcoin-Qt\" -no-pad -r -apple -o $@ dist\n+\t$(GENISOIMAGE) -no-cache-inodes -D -l -probe -V \"Bitcoin-Qt\" -no-pad -r -dir-mode 0755 -apple -o $@ dist\n \n $(APP_DIST_DIR)/.background/background.png:\n \t$(MKDIR_P) $(@D)"
      }
    ]
  },
  {
    "sha": "3c5d1d1b01caab7f620589c3d35f807c826130f2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzVkMWQxYjAxY2FhYjdmNjIwNTg5YzNkMzVmODA3YzgyNjEzMGYy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-23T17:55:26Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T07:04:56Z"
      },
      "message": "OpenSSL 1.1.0: Fix text variant of the version number\n\nGithub-Pull: #7083\nRebased-From: faf12bc2839d0a858b36c371aaf26902e49e380c",
      "tree": {
        "sha": "ec53870d92f75afeaeeb186beb0bb3a88d46a2c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec53870d92f75afeaeeb186beb0bb3a88d46a2c7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c5d1d1b01caab7f620589c3d35f807c826130f2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c5d1d1b01caab7f620589c3d35f807c826130f2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c5d1d1b01caab7f620589c3d35f807c826130f2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c5d1d1b01caab7f620589c3d35f807c826130f2/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4ea291f04f6581695af4d91d29cf598031411670",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ea291f04f6581695af4d91d29cf598031411670",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ea291f04f6581695af4d91d29cf598031411670"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "864e261c66654d0f34e10743726c153a4d153555",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c5d1d1b01caab7f620589c3d35f807c826130f2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c5d1d1b01caab7f620589c3d35f807c826130f2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3c5d1d1b01caab7f620589c3d35f807c826130f2",
        "patch": "@@ -778,7 +778,12 @@ bool AppInit2(boost::thread_group& threadGroup)\n         ShrinkDebugFile();\n     LogPrintf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");\n     LogPrintf(\"Bitcoin version %s (%s)\\n\", FormatFullVersion(), CLIENT_DATE);\n+#if (OPENSSL_VERSION_NUMBER < 0x10100000L)\n     LogPrintf(\"Using OpenSSL version %s\\n\", SSLeay_version(SSLEAY_VERSION));\n+#else\n+    LogPrintf(\"Using OpenSSL version %s\\n\", OpenSSL_version(OPENSSL_VERSION));\n+#endif\n+\n #ifdef ENABLE_WALLET\n     LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));\n #endif"
      },
      {
        "sha": "3eb3076a35e1dd9dfd883e3e2d83d43df193fac8",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c5d1d1b01caab7f620589c3d35f807c826130f2/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c5d1d1b01caab7f620589c3d35f807c826130f2/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=3c5d1d1b01caab7f620589c3d35f807c826130f2",
        "patch": "@@ -221,7 +221,13 @@ RPCConsole::RPCConsole(QWidget *parent) :\n     connect(ui->btnClearTrafficGraph, SIGNAL(clicked()), ui->trafficGraph, SLOT(clear()));\n \n     // set library version labels\n+\n+#if (OPENSSL_VERSION_NUMBER < 0x10100000L)\n     ui->openSSLVersion->setText(SSLeay_version(SSLEAY_VERSION));\n+#else\n+    ui->openSSLVersion->setText(OpenSSL_version(OPENSSL_VERSION));\n+#endif\n+\n #ifdef ENABLE_WALLET\n     ui->berkeleyDBVersion->setText(DbEnv::version(0, 0, 0));\n #else"
      }
    ]
  },
  {
    "sha": "72c9ac618026b52c83fa9b933068dedbb3b27957",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MmM5YWM2MTgwMjZiNTJjODNmYTliOTMzMDY4ZGVkYmIzYjI3OTU3",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-07-01T04:29:50Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T07:06:02Z"
      },
      "message": "Bugfix: Omit wallet-related options from -help when wallet is not supported\n\nGithub-Pull: #6961\nRebased-From: 3307bdb3331732e781c77a88ef7053fe23c78701",
      "tree": {
        "sha": "634921c30ead38a6887e510b8166484f8f0ccc01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/634921c30ead38a6887e510b8166484f8f0ccc01"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/72c9ac618026b52c83fa9b933068dedbb3b27957",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72c9ac618026b52c83fa9b933068dedbb3b27957",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/72c9ac618026b52c83fa9b933068dedbb3b27957",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72c9ac618026b52c83fa9b933068dedbb3b27957/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3c5d1d1b01caab7f620589c3d35f807c826130f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c5d1d1b01caab7f620589c3d35f807c826130f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c5d1d1b01caab7f620589c3d35f807c826130f2"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "31352bb33a4e9d2ba8fec6c0e5ca19bd94f309dd",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72c9ac618026b52c83fa9b933068dedbb3b27957/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72c9ac618026b52c83fa9b933068dedbb3b27957/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=72c9ac618026b52c83fa9b933068dedbb3b27957",
        "patch": "@@ -360,7 +360,9 @@ std::string HelpMessage(HelpMessageMode mode)\n     if (GetBoolArg(\"-help-debug\", false))\n     {\n         strUsage += \"  -printpriority         \" + strprintf(_(\"Log transaction priority and fee per kB when mining blocks (default: %u)\"), 0) + \"\\n\";\n+#ifdef ENABLE_WALLET\n         strUsage += \"  -privdb                \" + strprintf(_(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\"), 1) + \"\\n\";\n+#endif\n         strUsage += \"  -regtest               \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\") + \"\\n\";\n         strUsage += \"                         \" + _(\"This is intended for regression testing tools and app development.\") + \"\\n\";\n         strUsage += \"                         \" + _(\"In this mode -genproclimit controls how many blocks are generated immediately.\") + \"\\n\";"
      }
    ]
  },
  {
    "sha": "efe69c81edb3479ff0ee99566de91c387eded467",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZmU2OWM4MWVkYjM0NzlmZjBlZTk5NTY2ZGU5MWMzODdlZGVkNDY3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-06T07:53:24Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T07:06:12Z"
      },
      "message": "Add function to convert CValidationState to a human-readable message\n\nIt is necessary to be able to concisely log a validation state.\nConvert CValidationState to a human-readable message for logging.\n\nGithub-Pull: #6519\nRebased-From: 9003c7cdd88402986e48ec126258fc10d6742fc7",
      "tree": {
        "sha": "caa9654d2ad46ad40f734530cabc7b6cbf88a4ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/caa9654d2ad46ad40f734530cabc7b6cbf88a4ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/efe69c81edb3479ff0ee99566de91c387eded467",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efe69c81edb3479ff0ee99566de91c387eded467",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/efe69c81edb3479ff0ee99566de91c387eded467",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efe69c81edb3479ff0ee99566de91c387eded467/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "72c9ac618026b52c83fa9b933068dedbb3b27957",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72c9ac618026b52c83fa9b933068dedbb3b27957",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/72c9ac618026b52c83fa9b933068dedbb3b27957"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1a91140700979a9fb47002c5646e9061f381381b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efe69c81edb3479ff0ee99566de91c387eded467/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efe69c81edb3479ff0ee99566de91c387eded467/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=efe69c81edb3479ff0ee99566de91c387eded467",
        "patch": "@@ -930,6 +930,13 @@ CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowF\n     return nMinFee;\n }\n \n+/** Convert CValidationState to a human-readable message for logging */\n+static std::string FormatStateMessage(const CValidationState &state)\n+{\n+    return strprintf(\"%s (code %i)\",\n+        state.GetRejectReason(),\n+        state.GetRejectCode());\n+}\n \n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n                         bool* pfMissingInputs, bool fRejectInsaneFee)"
      }
    ]
  },
  {
    "sha": "9e26e8a0e17c96f95fe0526f307386c1e882eb2b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZTI2ZThhMGUxN2M5NmY5NWZlMDUyNmYzMDczODZjMWU4ODJlYjJi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-23T20:11:53Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T07:08:56Z"
      },
      "message": "[doc] Minor markdown fixes\n\nGithub-Pull: #7136\nRebased-From: fad3035e8d84dd3cbd166b9722127da373d34554",
      "tree": {
        "sha": "7af76c714e3294118b5d1ccca6dcdc517a29604f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7af76c714e3294118b5d1ccca6dcdc517a29604f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e26e8a0e17c96f95fe0526f307386c1e882eb2b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e26e8a0e17c96f95fe0526f307386c1e882eb2b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e26e8a0e17c96f95fe0526f307386c1e882eb2b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e26e8a0e17c96f95fe0526f307386c1e882eb2b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "efe69c81edb3479ff0ee99566de91c387eded467",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efe69c81edb3479ff0ee99566de91c387eded467",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/efe69c81edb3479ff0ee99566de91c387eded467"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 8,
      "deletions": 7
    },
    "files": [
      {
        "sha": "7577ca1768ffbc6ee43065cb1330f85301c5effc",
        "filename": "README.md",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e26e8a0e17c96f95fe0526f307386c1e882eb2b/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e26e8a0e17c96f95fe0526f307386c1e882eb2b/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=9e26e8a0e17c96f95fe0526f307386c1e882eb2b",
        "patch": "@@ -55,8 +55,9 @@ lots of money.\n \n ### Automated Testing\n \n-Developers are strongly encouraged to write unit tests for new code, and to\n-submit new unit tests for old code. Unit tests can be compiled and run (assuming they weren't disabled in configure) with: `make check`\n+Developers are strongly encouraged to write [unit tests](/doc/unit-tests.md) for new code, and to\n+submit new unit tests for old code. Unit tests can be compiled and run\n+(assuming they weren't disabled in configure) with: `make check`\n \n Every pull request is built for both Windows and Linux on a dedicated server,\n and unit and sanity tests are automatically run. The binaries produced may be"
      },
      {
        "sha": "7c41f1bf50a9064c256cf33afb6c0261b5fb042c",
        "filename": "doc/unit-tests.md",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e26e8a0e17c96f95fe0526f307386c1e882eb2b/doc/unit-tests.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e26e8a0e17c96f95fe0526f307386c1e882eb2b/doc/unit-tests.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/unit-tests.md?ref=9e26e8a0e17c96f95fe0526f307386c1e882eb2b",
        "patch": "@@ -1,18 +1,18 @@\n Compiling/running unit tests\n ------------------------------------\n \n-Unit tests will be automatically compiled if dependencies were met in configure\n+Unit tests will be automatically compiled if dependencies were met in `./configure`\n and tests weren't explicitly disabled.\n \n-After configuring, they can be run with 'make check'.\n+After configuring, they can be run with `make check`.\n \n-To run the bitcoind tests manually, launch src/test/test_bitcoin .\n+To run the bitcoind tests manually, launch `src/test/test_bitcoin`.\n \n To add more bitcoind tests, add `BOOST_AUTO_TEST_CASE` functions to the existing\n-.cpp files in the test/ directory or add new .cpp files that\n+.cpp files in the `test/` directory or add new .cpp files that\n implement new BOOST_AUTO_TEST_SUITE sections.\n \n-To run the bitcoin-qt tests manually, launch src/qt/test/bitcoin-qt_test\n+To run the bitcoin-qt tests manually, launch `src/qt/test/bitcoin-qt_test`\n \n To add more bitcoin-qt tests, add them to the `src/qt/test/` directory and\n the `src/qt/test/test_main.cpp` file."
      }
    ]
  },
  {
    "sha": "17966aca160b1d99704c4754e0173a110d4f3efd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzk2NmFjYTE2MGIxZDk5NzA0YzQ3NTRlMDE3M2ExMTBkNGYzZWZk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-25T12:45:13Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T07:09:07Z"
      },
      "message": "contrib: update gitian README\n\nGithub-Pull: #7136\nRebased-From: fa22a1002873fb222a7ddb8d00c2bd727293ac13",
      "tree": {
        "sha": "0420764a5b6bf6583d8c42b4ce9e77aa442a3a91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0420764a5b6bf6583d8c42b4ce9e77aa442a3a91"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17966aca160b1d99704c4754e0173a110d4f3efd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17966aca160b1d99704c4754e0173a110d4f3efd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/17966aca160b1d99704c4754e0173a110d4f3efd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17966aca160b1d99704c4754e0173a110d4f3efd/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e26e8a0e17c96f95fe0526f307386c1e882eb2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e26e8a0e17c96f95fe0526f307386c1e882eb2b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e26e8a0e17c96f95fe0526f307386c1e882eb2b"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 6,
      "deletions": 7
    },
    "files": [
      {
        "sha": "137e460ff7b0855a8f90152c9589604d75fb7faa",
        "filename": "contrib/gitian-descriptors/README.md",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17966aca160b1d99704c4754e0173a110d4f3efd/contrib/gitian-descriptors/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17966aca160b1d99704c4754e0173a110d4f3efd/contrib/gitian-descriptors/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/README.md?ref=17966aca160b1d99704c4754e0173a110d4f3efd",
        "patch": "@@ -1,8 +1,7 @@\n-### Gavin's notes on getting gitian builds up and running using KVM:###\n+### Gavin's notes on getting gitian builds up and running using KVM\n \n-These instructions distilled from:\n-[  https://help.ubuntu.com/community/KVM/Installation](  https://help.ubuntu.com/community/KVM/Installation)\n-... see there for complete details.\n+These instructions distilled from\n+[https://help.ubuntu.com/community/KVM/Installation](https://help.ubuntu.com/community/KVM/Installation).\n \n You need the right hardware: you need a 64-bit-capable CPU with hardware virtualization support (Intel VT-x or AMD-V). Not all modern CPUs support hardware virtualization.\n \n@@ -33,14 +32,14 @@ Once you've got the right hardware and software:\n     # Get inputs (see doc/release-process.md for exact inputs needed and where to get them)\n     ...\n \n-    # For further build instructions see doc/release-notes.md\n+    # For further build instructions see doc/release-process.md\n     ...\n \n ---------------------\n \n `gitian-builder` now also supports building using LXC. See\n-[  https://help.ubuntu.com/12.04/serverguide/lxc.html](  https://help.ubuntu.com/12.04/serverguide/lxc.html)\n-... for how to get LXC up and running under Ubuntu.\n+[help.ubuntu.com](https://help.ubuntu.com/14.04/serverguide/lxc.html)\n+for how to get LXC up and running under Ubuntu.\n \n If your main machine is a 64-bit Mac or PC with a few gigabytes of memory\n and at least 10 gigabytes of free disk space, you can `gitian-build` using"
      }
    ]
  },
  {
    "sha": "f41b28e5c95a3047b1354ffa63992cfe524376dd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNDFiMjhlNWM5NWEzMDQ3YjEzNTRmZmE2Mzk5MmNmZTUyNDM3NmRk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-30T12:23:00Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T07:09:16Z"
      },
      "message": "Fix url in .travis.yml\n\nGithub-Pull: #7136\nRebased-From: 9999cb0626750c912097c73a1ef5c50435a922e3",
      "tree": {
        "sha": "e279aea863ce4e707ebcbf620da77722747daaa9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e279aea863ce4e707ebcbf620da77722747daaa9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f41b28e5c95a3047b1354ffa63992cfe524376dd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f41b28e5c95a3047b1354ffa63992cfe524376dd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f41b28e5c95a3047b1354ffa63992cfe524376dd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f41b28e5c95a3047b1354ffa63992cfe524376dd/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "17966aca160b1d99704c4754e0173a110d4f3efd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17966aca160b1d99704c4754e0173a110d4f3efd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17966aca160b1d99704c4754e0173a110d4f3efd"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "944beb7651bfaecdcba545fdad38547d2b3fb4a5",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f41b28e5c95a3047b1354ffa63992cfe524376dd/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f41b28e5c95a3047b1354ffa63992cfe524376dd/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=f41b28e5c95a3047b1354ffa63992cfe524376dd",
        "patch": "@@ -2,7 +2,7 @@\n # - A travis bug causes caches to trample eachother when using the same\n #   compiler key (which we don't use anyway). This is worked around for now by\n #   replacing the \"compilers\" with a build name prefixed by the no-op \":\"\n-#   command. See: https://github.com/travis-ci/casher/issues/6\n+#   command. See: https://github.com/travis-ci/travis-ci/issues/4393\n \n os: linux\n language: cpp"
      }
    ]
  },
  {
    "sha": "295a915137076e5bb64d719818f7123803dfa31c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTVhOTE1MTM3MDc2ZTViYjY0ZDcxOTgxOGY3MTIzODAzZGZhMzFj",
    "commit": {
      "author": {
        "name": "paveljanik",
        "email": "Pavel@Janik.cz",
        "date": "2015-07-03T14:36:49Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T07:10:40Z"
      },
      "message": "Fix various typos\n\nGithub-Pull: #7157\nRebased-From: 8a03727d9cc975a3d0843d83ef05957b9e9fbbca",
      "tree": {
        "sha": "5d25b771e60ebe485b4d3cd8848f940b434de70b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d25b771e60ebe485b4d3cd8848f940b434de70b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/295a915137076e5bb64d719818f7123803dfa31c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/295a915137076e5bb64d719818f7123803dfa31c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/295a915137076e5bb64d719818f7123803dfa31c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/295a915137076e5bb64d719818f7123803dfa31c/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f41b28e5c95a3047b1354ffa63992cfe524376dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f41b28e5c95a3047b1354ffa63992cfe524376dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f41b28e5c95a3047b1354ffa63992cfe524376dd"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "c27f607b5c58e3c2f16bb49bbcf7d8122e40af85",
        "filename": "doc/release-notes/release-notes-0.6.3.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/295a915137076e5bb64d719818f7123803dfa31c/doc/release-notes/release-notes-0.6.3.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/295a915137076e5bb64d719818f7123803dfa31c/doc/release-notes/release-notes-0.6.3.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.6.3.md?ref=295a915137076e5bb64d719818f7123803dfa31c",
        "patch": "@@ -23,7 +23,7 @@ hundreds of blocks long.\n Bitcoin-Qt no longer automatically selects the first address\n in the address book (Issue #1384).\n \n-Fixed minimize-to-dock behavior of Bitcon-Qt on the Mac.\n+Fixed minimize-to-dock behavior of Bitcoin-Qt on the Mac.\n \n Added a block checkpoint at block 185,333 to speed up initial\n blockchain download."
      },
      {
        "sha": "8913600c092a62edaba6a4153e1f021bacc680fe",
        "filename": "share/seeds/generate-seeds.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/295a915137076e5bb64d719818f7123803dfa31c/share/seeds/generate-seeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/295a915137076e5bb64d719818f7123803dfa31c/share/seeds/generate-seeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/seeds/generate-seeds.py?ref=295a915137076e5bb64d719818f7123803dfa31c",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/python\n-# Copyright (c) 2014 Wladmir J. van der Laan\n+# Copyright (c) 2014 Wladimir J. van der Laan\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''"
      },
      {
        "sha": "4a77bb7f568d319af993e972473d1121d78b63b8",
        "filename": "src/amount.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/295a915137076e5bb64d719818f7123803dfa31c/src/amount.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/295a915137076e5bb64d719818f7123803dfa31c/src/amount.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.h?ref=295a915137076e5bb64d719818f7123803dfa31c",
        "patch": "@@ -20,7 +20,7 @@ static const CAmount CENT = 1000000;\n static const CAmount MAX_MONEY = 21000000 * COIN;\n inline bool MoneyRange(const CAmount& nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }\n \n-/** Type-safe wrapper class to for fee rates\n+/** Type-safe wrapper class for fee rates\n  * (how much to pay based on transaction size)\n  */\n class CFeeRate"
      },
      {
        "sha": "2229f6dfce26ef7ddf5116e316f6db7ea584f8db",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/295a915137076e5bb64d719818f7123803dfa31c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/295a915137076e5bb64d719818f7123803dfa31c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=295a915137076e5bb64d719818f7123803dfa31c",
        "patch": "@@ -108,7 +108,7 @@ namespace {\n     set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;\n     /** Number of nodes with fSyncStarted. */\n     int nSyncStarted = 0;\n-    /** All pairs A->B, where A (or one if its ancestors) misses transactions, but B has transactions. */\n+    /** All pairs A->B, where A (or one of its ancestors) misses transactions, but B has transactions. */\n     multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;\n \n     CCriticalSection cs_LastBlockFile;"
      }
    ]
  },
  {
    "sha": "7f39a86cf815e372b1edcb6a7c9353341fa9b84c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZjM5YTg2Y2Y4MTVlMzcyYjFlZGNiNmE3YzkzNTMzNDFmYTliODRj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-08-18T17:23:28Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T07:10:44Z"
      },
      "message": "[trivial] Fix typo in peertablemodel.cpp\n\nGithub-Pull: #7157\nRebased-From: e69bad19f8d314862f53a7e0acc52247c9662275",
      "tree": {
        "sha": "10dd838f078912738343693c4a860787bf3d68e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/10dd838f078912738343693c4a860787bf3d68e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f39a86cf815e372b1edcb6a7c9353341fa9b84c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f39a86cf815e372b1edcb6a7c9353341fa9b84c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f39a86cf815e372b1edcb6a7c9353341fa9b84c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f39a86cf815e372b1edcb6a7c9353341fa9b84c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "295a915137076e5bb64d719818f7123803dfa31c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/295a915137076e5bb64d719818f7123803dfa31c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/295a915137076e5bb64d719818f7123803dfa31c"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3712c1fa9b61503a05e0e21db36a676e34aacc52",
        "filename": "src/qt/peertablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f39a86cf815e372b1edcb6a7c9353341fa9b84c/src/qt/peertablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f39a86cf815e372b1edcb6a7c9353341fa9b84c/src/qt/peertablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.cpp?ref=7f39a86cf815e372b1edcb6a7c9353341fa9b84c",
        "patch": "@@ -85,7 +85,7 @@ class PeerTablePriv\n         }\n \n         if (sortColumn >= 0)\n-            // sort cacheNodeStats (use stable sort to prevent rows jumping around unneceesarily)\n+            // sort cacheNodeStats (use stable sort to prevent rows jumping around unnecessarily)\n             qStableSort(cachedNodeStats.begin(), cachedNodeStats.end(), NodeLessThan(sortColumn, sortOrder));\n \n         // build index map"
      }
    ]
  },
  {
    "sha": "7864393c7d65767dd11283616162b29d72aea8db",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODY0MzkzYzdkNjU3NjdkZDExMjgzNjE2MTYyYjI5ZDcyYWVhOGRi",
    "commit": {
      "author": {
        "name": "antonio-fr",
        "email": "anferron@gmail.com",
        "date": "2015-08-10T21:56:04Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T07:10:52Z"
      },
      "message": "Update miner.cpp: Fix typo in comment\n\nGithub-Pull: #7157\nRebased-From: 74f7341fecd327587cba77db3fc1455efcaa20be",
      "tree": {
        "sha": "8c2368507846adada21d7bcd98de3965ff9b4799",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c2368507846adada21d7bcd98de3965ff9b4799"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7864393c7d65767dd11283616162b29d72aea8db",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7864393c7d65767dd11283616162b29d72aea8db",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7864393c7d65767dd11283616162b29d72aea8db",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7864393c7d65767dd11283616162b29d72aea8db/comments",
    "author": {
      "login": "antonio-fr",
      "id": 7551901,
      "node_id": "MDQ6VXNlcjc1NTE5MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7551901?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/antonio-fr",
      "html_url": "https://github.com/antonio-fr",
      "followers_url": "https://api.github.com/users/antonio-fr/followers",
      "following_url": "https://api.github.com/users/antonio-fr/following{/other_user}",
      "gists_url": "https://api.github.com/users/antonio-fr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/antonio-fr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/antonio-fr/subscriptions",
      "organizations_url": "https://api.github.com/users/antonio-fr/orgs",
      "repos_url": "https://api.github.com/users/antonio-fr/repos",
      "events_url": "https://api.github.com/users/antonio-fr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/antonio-fr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7f39a86cf815e372b1edcb6a7c9353341fa9b84c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f39a86cf815e372b1edcb6a7c9353341fa9b84c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7f39a86cf815e372b1edcb6a7c9353341fa9b84c"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b9be9108903baad7334201d54f3b7e70a202970a",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7864393c7d65767dd11283616162b29d72aea8db/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7864393c7d65767dd11283616162b29d72aea8db/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=7864393c7d65767dd11283616162b29d72aea8db",
        "patch": "@@ -115,7 +115,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n \n     // Largest block you're willing to create:\n     unsigned int nBlockMaxSize = GetArg(\"-blockmaxsize\", DEFAULT_BLOCK_MAX_SIZE);\n-    // Limit to betweeen 1K and MAX_BLOCK_SIZE-1K for sanity:\n+    // Limit to between 1K and MAX_BLOCK_SIZE-1K for sanity:\n     nBlockMaxSize = std::max((unsigned int)1000, std::min((unsigned int)(MAX_BLOCK_SIZE-1000), nBlockMaxSize));\n \n     // How much of the block should be dedicated to high-priority transactions,"
      }
    ]
  },
  {
    "sha": "55763eca1797e267c5587fb78f5cf956fa250350",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NTc2M2VjYTE3OTdlMjY3YzU1ODdmYjc4ZjVjZjk1NmZhMjUwMzUw",
    "commit": {
      "author": {
        "name": "Matt Bogosian",
        "email": "mtb19@columbia.edu",
        "date": "2015-12-02T06:49:51Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T07:11:02Z"
      },
      "message": "Add missing automake package to deb-based UNIX install instructions.\n\nGithub-Pull: #7152\nRebased-From: b4404090259be4e34ef5dba33e47a41e7d9acc03",
      "tree": {
        "sha": "e15d57a664a07d232599da5df80f635222c8c73d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e15d57a664a07d232599da5df80f635222c8c73d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/55763eca1797e267c5587fb78f5cf956fa250350",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55763eca1797e267c5587fb78f5cf956fa250350",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/55763eca1797e267c5587fb78f5cf956fa250350",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55763eca1797e267c5587fb78f5cf956fa250350/comments",
    "author": {
      "login": "posita",
      "id": 222581,
      "node_id": "MDQ6VXNlcjIyMjU4MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/222581?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/posita",
      "html_url": "https://github.com/posita",
      "followers_url": "https://api.github.com/users/posita/followers",
      "following_url": "https://api.github.com/users/posita/following{/other_user}",
      "gists_url": "https://api.github.com/users/posita/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/posita/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/posita/subscriptions",
      "organizations_url": "https://api.github.com/users/posita/orgs",
      "repos_url": "https://api.github.com/users/posita/repos",
      "events_url": "https://api.github.com/users/posita/events{/privacy}",
      "received_events_url": "https://api.github.com/users/posita/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7864393c7d65767dd11283616162b29d72aea8db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7864393c7d65767dd11283616162b29d72aea8db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7864393c7d65767dd11283616162b29d72aea8db"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "41e4628d9315c6d9062eaa2450daabd51a5746e3",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55763eca1797e267c5587fb78f5cf956fa250350/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55763eca1797e267c5587fb78f5cf956fa250350/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=55763eca1797e267c5587fb78f5cf956fa250350",
        "patch": "@@ -57,7 +57,7 @@ Dependency Build Instructions: Ubuntu & Debian\n ----------------------------------------------\n Build requirements:\n \n-\tsudo apt-get install build-essential libtool autotools-dev autoconf pkg-config libssl-dev\n+\tsudo apt-get install build-essential libtool autotools-dev automake pkg-config libssl-dev\n \t\n for Ubuntu 12.04 and later or Debian 7 and later libboost-all-dev has to be installed:\n "
      }
    ]
  },
  {
    "sha": "8f110c28a858323c2ce4d551ea1a973ff3626463",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjExMGMyOGE4NTgzMjNjMmNlNGQ1NTFlYTFhOTczZmYzNjI2NDYz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-16T11:30:16Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T07:11:10Z"
      },
      "message": "[contrib] Update versionprefix to \"bitcoin-core\" in verify.sh\n\nGithub-Pull: #7026\nRebased-From: 141c44ed6549acdc7f49fe039f017c020490ccf1",
      "tree": {
        "sha": "4dbf2715da628c9845e008bc1d9782a78b89100c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4dbf2715da628c9845e008bc1d9782a78b89100c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f110c28a858323c2ce4d551ea1a973ff3626463",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f110c28a858323c2ce4d551ea1a973ff3626463",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f110c28a858323c2ce4d551ea1a973ff3626463",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f110c28a858323c2ce4d551ea1a973ff3626463/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "55763eca1797e267c5587fb78f5cf956fa250350",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55763eca1797e267c5587fb78f5cf956fa250350",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/55763eca1797e267c5587fb78f5cf956fa250350"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "ac411087ac322fef9d0b07292ac2b2f2e9385c66",
        "filename": "contrib/verifysfbinaries/verify.sh",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f110c28a858323c2ce4d551ea1a973ff3626463/contrib/verifysfbinaries/verify.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f110c28a858323c2ce4d551ea1a973ff3626463/contrib/verifysfbinaries/verify.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifysfbinaries/verify.sh?ref=8f110c28a858323c2ce4d551ea1a973ff3626463",
        "patch": "@@ -17,15 +17,15 @@ function clean_up {\n WORKINGDIR=\"/tmp/bitcoin\"\n TMPFILE=\"hashes.tmp\"\n \n-#this URL is used if a version number is not specified as an argument to the script\n-SIGNATUREFILE=\"https://bitcoin.org/bin/0.9.2.1/SHA256SUMS.asc\"\n-\n SIGNATUREFILENAME=\"SHA256SUMS.asc\"\n RCSUBDIR=\"test/\"\n BASEDIR=\"https://bitcoin.org/bin/\"\n-VERSIONPREFIX=\"bitcoin-\"\n+VERSIONPREFIX=\"bitcoin-core-\"\n RCVERSIONSTRING=\"rc\"\n \n+#this URL is used if a version number is not specified as an argument to the script\n+SIGNATUREFILE=\"$BASEDIR\"\"$VERSIONPREFIX\"\"0.10.4/\"\"$RCSUBDIR\"\"$SIGNATUREFILENAME\"\n+\n if [ ! -d \"$WORKINGDIR\" ]; then\n    mkdir \"$WORKINGDIR\"\n fi\n@@ -62,7 +62,7 @@ WGETOUT=$(wget -N \"$BASEDIR$SIGNATUREFILENAME\" 2>&1)\n #and then see if wget completed successfully\n if [ $? -ne 0 ]; then\n    echo \"Error: couldn't fetch signature file. Have you specified the version number in the following format?\"\n-   echo \"[bitcoin-]<version>-[rc[0-9]] (example: bitcoin-0.9.2-rc1)\"\n+   echo \"[$VERSIONPREFIX]<version>-[$RCVERSIONSTRING[0-9]] (example: \"$VERSIONPREFIX\"0.10.4-\"$RCVERSIONSTRING\"1)\"\n    echo \"wget output:\"\n    echo \"$WGETOUT\"|sed 's/^/\\t/g'\n    exit 2"
      }
    ]
  },
  {
    "sha": "8b3ae4bcbce2abf522c3272e4e482f758ca4aaf2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YjNhZTRiY2JjZTJhYmY1MjJjMzI3MmU0ZTQ4MmY3NThjYTRhYWYy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-16T11:54:35Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-08T07:11:16Z"
      },
      "message": "[trivial] contrib: Fix `echo`s in verify.sh\n\nGithub-Pull: #7026\nRebased-From: a6d5a6502a3dce23679a9be9e4884a4f77110cd1",
      "tree": {
        "sha": "28a793a839ceef762ad963ed2316ab154346f22f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/28a793a839ceef762ad963ed2316ab154346f22f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b3ae4bcbce2abf522c3272e4e482f758ca4aaf2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b3ae4bcbce2abf522c3272e4e482f758ca4aaf2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8b3ae4bcbce2abf522c3272e4e482f758ca4aaf2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b3ae4bcbce2abf522c3272e4e482f758ca4aaf2/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f110c28a858323c2ce4d551ea1a973ff3626463",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f110c28a858323c2ce4d551ea1a973ff3626463",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f110c28a858323c2ce4d551ea1a973ff3626463"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "847c5075530571ad9e44234a82d53a52de841e1c",
        "filename": "contrib/verifysfbinaries/verify.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b3ae4bcbce2abf522c3272e4e482f758ca4aaf2/contrib/verifysfbinaries/verify.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b3ae4bcbce2abf522c3272e4e482f758ca4aaf2/contrib/verifysfbinaries/verify.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifysfbinaries/verify.sh?ref=8b3ae4bcbce2abf522c3272e4e482f758ca4aaf2",
        "patch": "@@ -82,7 +82,7 @@ if [ $RET -ne 0 ]; then\n       echo \"Bad signature.\"\n    elif [ $RET -eq 2 ]; then\n       #or if a gpg error has occurred\n-      echo \"gpg error. Do you have Gavin's code signing key installed?\"\n+      echo \"gpg error. Do you have the Bitcoin Core binary release signing key installed?\"\n    fi\n \n    echo \"gpg output:\"\n@@ -116,4 +116,6 @@ fi\n #everything matches! clean up the mess\n clean_up $FILES $SIGNATUREFILENAME $TMPFILE\n \n+echo -e \"Verified hashes of \\n$FILES\"\n+\n exit 0"
      }
    ]
  },
  {
    "sha": "73e32e3dbfbeb3a95bfdd0553265f8ea779decd1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3M2UzMmUzZGJmYmViM2E5NWJmZGQwNTUzMjY1ZjhlYTc3OWRlY2Qx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-02T12:42:47Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-26T22:20:38Z"
      },
      "message": "rpc: remove cs_main lock from `createrawtransaction`\n\nThis is a pure utility function that doesn't use\nmain's data structures, so it does not require that lock.\n\nGithub-Pull: #7156\nRebased-From: 6e765873605ee5e31652ce107848a157151791b4",
      "tree": {
        "sha": "e2ea2559aee1813a234ca3bb10d8ae3f030fd375",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2ea2559aee1813a234ca3bb10d8ae3f030fd375"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/73e32e3dbfbeb3a95bfdd0553265f8ea779decd1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73e32e3dbfbeb3a95bfdd0553265f8ea779decd1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/73e32e3dbfbeb3a95bfdd0553265f8ea779decd1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73e32e3dbfbeb3a95bfdd0553265f8ea779decd1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b3ae4bcbce2abf522c3272e4e482f758ca4aaf2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b3ae4bcbce2abf522c3272e4e482f758ca4aaf2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b3ae4bcbce2abf522c3272e4e482f758ca4aaf2"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "de4d332f4a5acf17d45db8fbbc278cedd319f28c",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73e32e3dbfbeb3a95bfdd0553265f8ea779decd1/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73e32e3dbfbeb3a95bfdd0553265f8ea779decd1/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=73e32e3dbfbeb3a95bfdd0553265f8ea779decd1",
        "patch": "@@ -287,7 +287,7 @@ static const CRPCCommand vRPCCommands[] =\n #endif\n \n     /* Raw transactions */\n-    { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   true,      false,      false },\n+    { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   true,      true,       false },\n     { \"rawtransactions\",    \"decoderawtransaction\",   &decoderawtransaction,   true,      false,      false },\n     { \"rawtransactions\",    \"decodescript\",           &decodescript,           true,      true,       false },\n     { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      true,      false,      false },"
      }
    ]
  },
  {
    "sha": "b595fc90c8a0dd74c947a21efa5ab452a8f8be5b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTk1ZmM5MGM4YTBkZDc0Yzk0N2EyMWVmYTVhYjQ1MmE4ZjhiZTVi",
    "commit": {
      "author": {
        "name": "Mike Hearn",
        "email": "mike@plan99.net",
        "date": "2015-03-10T18:33:46Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-28T08:11:14Z"
      },
      "message": "Add a NODE_GETUTXO service bit and document NODE_NETWORK.\nStop translating the NODE_* names as they are technical and cannot be translated.\n\nGithub-Pull: #5876\nRebased-From: 5983a4e50f2c3f53024d9a5cecab69f67c882cca",
      "tree": {
        "sha": "c880daa3af901a781b4fe8c7302bdca6ea209428",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c880daa3af901a781b4fe8c7302bdca6ea209428"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b595fc90c8a0dd74c947a21efa5ab452a8f8be5b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b595fc90c8a0dd74c947a21efa5ab452a8f8be5b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b595fc90c8a0dd74c947a21efa5ab452a8f8be5b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b595fc90c8a0dd74c947a21efa5ab452a8f8be5b/comments",
    "author": {
      "login": "mikehearn",
      "id": 971089,
      "node_id": "MDQ6VXNlcjk3MTA4OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/971089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikehearn",
      "html_url": "https://github.com/mikehearn",
      "followers_url": "https://api.github.com/users/mikehearn/followers",
      "following_url": "https://api.github.com/users/mikehearn/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikehearn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikehearn/subscriptions",
      "organizations_url": "https://api.github.com/users/mikehearn/orgs",
      "repos_url": "https://api.github.com/users/mikehearn/repos",
      "events_url": "https://api.github.com/users/mikehearn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikehearn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "73e32e3dbfbeb3a95bfdd0553265f8ea779decd1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73e32e3dbfbeb3a95bfdd0553265f8ea779decd1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/73e32e3dbfbeb3a95bfdd0553265f8ea779decd1"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 12,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f4c157895b50302574d037cffad2cd6c86f1021e",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b595fc90c8a0dd74c947a21efa5ab452a8f8be5b/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b595fc90c8a0dd74c947a21efa5ab452a8f8be5b/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=b595fc90c8a0dd74c947a21efa5ab452a8f8be5b",
        "patch": "@@ -65,7 +65,14 @@ class CMessageHeader\n \n /** nServices flags */\n enum {\n+    // NODE_NETWORK means that the node is capable of serving the block chain. It is currently\n+    // set by all Bitcoin Core nodes, and is unset by SPV clients or other peers that just want\n+    // network services but don't provide them.\n     NODE_NETWORK = (1 << 0),\n+    // NODE_GETUTXO means the node is capable of responding to the getutxo protocol request.\n+    // Bitcoin Core does not support this but a patch set called Bitcoin XT does.\n+    // See BIP 64 for details on how this is implemented.\n+    NODE_GETUTXO = (1 << 1),\n \n     // Bits 24-31 are reserved for temporary experiments. Just pick a bit that\n     // isn't getting used, or one not being used much, and notify the"
      },
      {
        "sha": "f46ff6aba06595dc311956f23eb5a5086c75c23c",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b595fc90c8a0dd74c947a21efa5ab452a8f8be5b/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b595fc90c8a0dd74c947a21efa5ab452a8f8be5b/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=b595fc90c8a0dd74c947a21efa5ab452a8f8be5b",
        "patch": "@@ -848,10 +848,13 @@ QString formatServicesStr(quint64 mask)\n             switch (check)\n             {\n             case NODE_NETWORK:\n-                strList.append(QObject::tr(\"NETWORK\"));\n+                strList.append(\"NETWORK\");\n+                break;\n+            case NODE_GETUTXO:\n+                strList.append(\"GETUTXO\");\n                 break;\n             default:\n-                strList.append(QString(\"%1[%2]\").arg(QObject::tr(\"UNKNOWN\")).arg(check));\n+                strList.append(QString(\"%1[%2]\").arg(\"UNKNOWN\").arg(check));\n             }\n         }\n     }"
      }
    ]
  },
  {
    "sha": "bfa763aea0eb3b68d2f1f64906dfceb1dcf18a2b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZmE3NjNhZWEwZWIzYjY4ZDJmMWY2NDkwNmRmY2ViMWRjZjE4YTJi",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-08-21T04:15:27Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-28T08:11:14Z"
      },
      "message": "Recognise NODE_BLOOM service bit in protocol.h (not used in this version)\n\nGithub-Pull: #6579\nPartial-Rebased-From: afb0ccaf9c9e4e8fac7db3564c4e19c9218c6b03",
      "tree": {
        "sha": "4d913e769b65aeb1ecaf38412bb47b973235e75f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d913e769b65aeb1ecaf38412bb47b973235e75f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bfa763aea0eb3b68d2f1f64906dfceb1dcf18a2b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfa763aea0eb3b68d2f1f64906dfceb1dcf18a2b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bfa763aea0eb3b68d2f1f64906dfceb1dcf18a2b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfa763aea0eb3b68d2f1f64906dfceb1dcf18a2b/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b595fc90c8a0dd74c947a21efa5ab452a8f8be5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b595fc90c8a0dd74c947a21efa5ab452a8f8be5b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b595fc90c8a0dd74c947a21efa5ab452a8f8be5b"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8e3b8dc8faeeeb7a5685a6c64ec421721b7fac5f",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa763aea0eb3b68d2f1f64906dfceb1dcf18a2b/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa763aea0eb3b68d2f1f64906dfceb1dcf18a2b/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=bfa763aea0eb3b68d2f1f64906dfceb1dcf18a2b",
        "patch": "@@ -73,6 +73,10 @@ enum {\n     // Bitcoin Core does not support this but a patch set called Bitcoin XT does.\n     // See BIP 64 for details on how this is implemented.\n     NODE_GETUTXO = (1 << 1),\n+    // NODE_BLOOM means the node is capable and willing to handle bloom-filtered connections.\n+    // Bitcoin Core nodes used to support this by default, without advertising this bit,\n+    // but no longer do as of protocol version 70011 (= NO_BLOOM_VERSION)\n+    NODE_BLOOM = (1 << 2),\n \n     // Bits 24-31 are reserved for temporary experiments. Just pick a bit that\n     // isn't getting used, or one not being used much, and notify the"
      }
    ]
  },
  {
    "sha": "9e5e6ed52672ef87b64cb3b2c5d38cddf12c06e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZTVlNmVkNTI2NzJlZjg3YjY0Y2IzYjJjNWQzOGNkZGYxMmMwNmUx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-12-14T00:20:08Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-28T08:11:15Z"
      },
      "message": "Add \"NODE_BLOOM\" to guiutil so that peers don't get UNKNOWN[4]\n\nGithub-Pull: #7206\nRebased-From: daf6466330d9d3e4d9034fd316cded192d2a7d67",
      "tree": {
        "sha": "f2bc7cdfa218a05e715355a10301865bebd02c98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2bc7cdfa218a05e715355a10301865bebd02c98"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e5e6ed52672ef87b64cb3b2c5d38cddf12c06e1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e5e6ed52672ef87b64cb3b2c5d38cddf12c06e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e5e6ed52672ef87b64cb3b2c5d38cddf12c06e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e5e6ed52672ef87b64cb3b2c5d38cddf12c06e1/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bfa763aea0eb3b68d2f1f64906dfceb1dcf18a2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfa763aea0eb3b68d2f1f64906dfceb1dcf18a2b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bfa763aea0eb3b68d2f1f64906dfceb1dcf18a2b"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8cb354d200c8ae7714e119c49fb43147ade7b0d7",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e5e6ed52672ef87b64cb3b2c5d38cddf12c06e1/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e5e6ed52672ef87b64cb3b2c5d38cddf12c06e1/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=9e5e6ed52672ef87b64cb3b2c5d38cddf12c06e1",
        "patch": "@@ -853,6 +853,9 @@ QString formatServicesStr(quint64 mask)\n             case NODE_GETUTXO:\n                 strList.append(\"GETUTXO\");\n                 break;\n+            case NODE_BLOOM:\n+                strList.append(\"BLOOM\");\n+                break;\n             default:\n                 strList.append(QString(\"%1[%2]\").arg(\"UNKNOWN\").arg(check));\n             }"
      }
    ]
  },
  {
    "sha": "05e9b642b07eba6f2c42f0ef18f912a99103e37a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNWU5YjY0MmIwN2ViYTZmMmM0MmYwZWYxOGY5MTJhOTkxMDNlMzdh",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-12-14T11:54:55Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-28T08:11:15Z"
      },
      "message": "[RPC-Tests] add option to run rpc test over QT clients\n\nGithub-Pull: #7068\nRebased-From: 979698c1715ce86a98934e48acadbc936c95c9a3",
      "tree": {
        "sha": "2a24ead15ce1aa65a7dd91ab358905f105a27110",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2a24ead15ce1aa65a7dd91ab358905f105a27110"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/05e9b642b07eba6f2c42f0ef18f912a99103e37a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05e9b642b07eba6f2c42f0ef18f912a99103e37a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/05e9b642b07eba6f2c42f0ef18f912a99103e37a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05e9b642b07eba6f2c42f0ef18f912a99103e37a/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e5e6ed52672ef87b64cb3b2c5d38cddf12c06e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e5e6ed52672ef87b64cb3b2c5d38cddf12c06e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e5e6ed52672ef87b64cb3b2c5d38cddf12c06e1"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "9a10234d055fc5f822e190af648071522064c765",
        "filename": "qa/rpc-tests/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05e9b642b07eba6f2c42f0ef18f912a99103e37a/qa/rpc-tests/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05e9b642b07eba6f2c42f0ef18f912a99103e37a/qa/rpc-tests/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework.py?ref=05e9b642b07eba6f2c42f0ef18f912a99103e37a",
        "patch": "@@ -102,7 +102,7 @@ def main(self):\n             import logging\n             logging.basicConfig(level=logging.DEBUG)\n \n-        os.environ['PATH'] = self.options.srcdir+\":\"+os.environ['PATH']\n+        os.environ['PATH'] = self.options.srcdir+\":\"+self.options.srcdir+\"/qt:\"+os.environ['PATH']\n \n         check_json_precision()\n "
      },
      {
        "sha": "86b7ce0c342688b6384c6dc207fd771f8342eef4",
        "filename": "qa/rpc-tests/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05e9b642b07eba6f2c42f0ef18f912a99103e37a/qa/rpc-tests/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05e9b642b07eba6f2c42f0ef18f912a99103e37a/qa/rpc-tests/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/util.py?ref=05e9b642b07eba6f2c42f0ef18f912a99103e37a",
        "patch": "@@ -84,7 +84,7 @@ def initialize_chain(test_dir):\n         # Create cache directories, run bitcoinds:\n         for i in range(4):\n             datadir=initialize_datadir(\"cache\", i)\n-            args = [ os.getenv(\"BITCOIND\", \"bitcoind\"), \"-keypool=1\", \"-datadir=\"+datadir, \"-discover=0\" ]\n+            args = [ os.getenv(\"BITCOIND\", \"bitcoind\"), \"-server\", \"-keypool=1\", \"-datadir=\"+datadir, \"-discover=0\" ]\n             if i > 0:\n                 args.append(\"-connect=127.0.0.1:\"+str(p2p_port(0)))\n             bitcoind_processes[i] = subprocess.Popen(args)\n@@ -163,7 +163,7 @@ def start_node(i, dirname, extra_args=None, rpchost=None):\n     Start a bitcoind and return RPC connection to it\n     \"\"\"\n     datadir = os.path.join(dirname, \"node\"+str(i))\n-    args = [ os.getenv(\"BITCOIND\", \"bitcoind\"), \"-datadir=\"+datadir, \"-keypool=1\", \"-discover=0\", \"-rest\" ]\n+    args = [ os.getenv(\"BITCOIND\", \"bitcoind\"), \"-datadir=\"+datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\" ]\n     if extra_args is not None: args.extend(extra_args)\n     bitcoind_processes[i] = subprocess.Popen(args)\n     devnull = open(\"/dev/null\", \"w+\")"
      }
    ]
  },
  {
    "sha": "3ff334b7ad37021c0f5d9b8814cdc512e2009260",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZmYzMzRiN2FkMzcwMjFjMGY1ZDliODgxNGNkYzUxMmUyMDA5MjYw",
    "commit": {
      "author": {
        "name": "accraze",
        "email": "accraze@gmail.com",
        "date": "2015-12-12T02:07:11Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-28T08:25:14Z"
      },
      "message": "checks for null data transaction before debug.log\n\nCWalletTx::GetAmounts could not find output address for null data transactions, thus issuing an error in debug.log. This change checks to see if the transaction is OP_RETURN before issuing error.\n\nresolves #6142\n\nGithub-Pull: #7200\nRebased-From: b6915b82398d2e1d1f888b3816adfaf06d9a450e",
      "tree": {
        "sha": "cc708dccccc92420adab40602f7f94bd7aa4bae4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc708dccccc92420adab40602f7f94bd7aa4bae4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ff334b7ad37021c0f5d9b8814cdc512e2009260",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ff334b7ad37021c0f5d9b8814cdc512e2009260",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ff334b7ad37021c0f5d9b8814cdc512e2009260",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ff334b7ad37021c0f5d9b8814cdc512e2009260/comments",
    "author": {
      "login": "accraze",
      "id": 989447,
      "node_id": "MDQ6VXNlcjk4OTQ0Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/989447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/accraze",
      "html_url": "https://github.com/accraze",
      "followers_url": "https://api.github.com/users/accraze/followers",
      "following_url": "https://api.github.com/users/accraze/following{/other_user}",
      "gists_url": "https://api.github.com/users/accraze/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/accraze/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/accraze/subscriptions",
      "organizations_url": "https://api.github.com/users/accraze/orgs",
      "repos_url": "https://api.github.com/users/accraze/repos",
      "events_url": "https://api.github.com/users/accraze/events{/privacy}",
      "received_events_url": "https://api.github.com/users/accraze/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "05e9b642b07eba6f2c42f0ef18f912a99103e37a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05e9b642b07eba6f2c42f0ef18f912a99103e37a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/05e9b642b07eba6f2c42f0ef18f912a99103e37a"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "be05d6bc0c21af299740befd7d7d50bb506c2a28",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ff334b7ad37021c0f5d9b8814cdc512e2009260/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ff334b7ad37021c0f5d9b8814cdc512e2009260/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=3ff334b7ad37021c0f5d9b8814cdc512e2009260",
        "patch": "@@ -861,7 +861,8 @@ void CWalletTx::GetAmounts(list<COutputEntry>& listReceived,\n \n         // In either case, we need to get the destination address\n         CTxDestination address;\n-        if (!ExtractDestination(txout.scriptPubKey, address))\n+\n+        if (!ExtractDestination(txout.scriptPubKey, address) && txout.scriptPubKey[0] != OP_RETURN)\n         {\n             LogPrintf(\"CWalletTx::GetAmounts: Unknown transaction type found, txid %s\\n\",\n                      this->GetHash().ToString());"
      }
    ]
  },
  {
    "sha": "0f085580c5c65cbe6e114edab0dd15eb4bbd7ab5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZjA4NTU4MGM1YzY1Y2JlNmUxMTRlZGFiMGRkMTVlYjRiYmQ3YWI1",
    "commit": {
      "author": {
        "name": "accraze",
        "email": "accraze@gmail.com",
        "date": "2015-12-12T18:33:37Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-28T08:25:26Z"
      },
      "message": "wallet: check if tx scriptPubKey is unspendable\n\nGithub-Pull: #7200\nRebased-From: c611acc38a95d336a824b632823aa1b652e570df",
      "tree": {
        "sha": "c1ec8f455d05ebd9c17ffaf9b5d7432cc827ae68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c1ec8f455d05ebd9c17ffaf9b5d7432cc827ae68"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f085580c5c65cbe6e114edab0dd15eb4bbd7ab5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f085580c5c65cbe6e114edab0dd15eb4bbd7ab5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0f085580c5c65cbe6e114edab0dd15eb4bbd7ab5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f085580c5c65cbe6e114edab0dd15eb4bbd7ab5/comments",
    "author": {
      "login": "accraze",
      "id": 989447,
      "node_id": "MDQ6VXNlcjk4OTQ0Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/989447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/accraze",
      "html_url": "https://github.com/accraze",
      "followers_url": "https://api.github.com/users/accraze/followers",
      "following_url": "https://api.github.com/users/accraze/following{/other_user}",
      "gists_url": "https://api.github.com/users/accraze/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/accraze/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/accraze/subscriptions",
      "organizations_url": "https://api.github.com/users/accraze/orgs",
      "repos_url": "https://api.github.com/users/accraze/repos",
      "events_url": "https://api.github.com/users/accraze/events{/privacy}",
      "received_events_url": "https://api.github.com/users/accraze/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ff334b7ad37021c0f5d9b8814cdc512e2009260",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ff334b7ad37021c0f5d9b8814cdc512e2009260",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ff334b7ad37021c0f5d9b8814cdc512e2009260"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "42192d96bc84bb4bdee0d41c18dee3d7e5fba7a9",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f085580c5c65cbe6e114edab0dd15eb4bbd7ab5/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f085580c5c65cbe6e114edab0dd15eb4bbd7ab5/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=0f085580c5c65cbe6e114edab0dd15eb4bbd7ab5",
        "patch": "@@ -862,7 +862,7 @@ void CWalletTx::GetAmounts(list<COutputEntry>& listReceived,\n         // In either case, we need to get the destination address\n         CTxDestination address;\n \n-        if (!ExtractDestination(txout.scriptPubKey, address) && txout.scriptPubKey[0] != OP_RETURN)\n+        if (!ExtractDestination(txout.scriptPubKey, address) && txout.scriptPubKey.IsUnspendable())\n         {\n             LogPrintf(\"CWalletTx::GetAmounts: Unknown transaction type found, txid %s\\n\",\n                      this->GetHash().ToString());"
      }
    ]
  },
  {
    "sha": "7509c86e73da80269a89cd294ac414a577a0d5b9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTA5Yzg2ZTczZGE4MDI2OWE4OWNkMjk0YWM0MTRhNTc3YTBkNWI5",
    "commit": {
      "author": {
        "name": "accraze",
        "email": "accraze@gmail.com",
        "date": "2015-12-12T18:45:53Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-28T08:25:29Z"
      },
      "message": "fix logic for error log\n\nGithub-Pull: #7200\nRebased-From: d812daf967ba4173bfa1c37eeb4ab7a0ccc4df25",
      "tree": {
        "sha": "12ffdfdb7525e83eab8791bc1aa675d851b5bc5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/12ffdfdb7525e83eab8791bc1aa675d851b5bc5c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7509c86e73da80269a89cd294ac414a577a0d5b9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7509c86e73da80269a89cd294ac414a577a0d5b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7509c86e73da80269a89cd294ac414a577a0d5b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7509c86e73da80269a89cd294ac414a577a0d5b9/comments",
    "author": {
      "login": "accraze",
      "id": 989447,
      "node_id": "MDQ6VXNlcjk4OTQ0Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/989447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/accraze",
      "html_url": "https://github.com/accraze",
      "followers_url": "https://api.github.com/users/accraze/followers",
      "following_url": "https://api.github.com/users/accraze/following{/other_user}",
      "gists_url": "https://api.github.com/users/accraze/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/accraze/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/accraze/subscriptions",
      "organizations_url": "https://api.github.com/users/accraze/orgs",
      "repos_url": "https://api.github.com/users/accraze/repos",
      "events_url": "https://api.github.com/users/accraze/events{/privacy}",
      "received_events_url": "https://api.github.com/users/accraze/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f085580c5c65cbe6e114edab0dd15eb4bbd7ab5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f085580c5c65cbe6e114edab0dd15eb4bbd7ab5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f085580c5c65cbe6e114edab0dd15eb4bbd7ab5"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7b3350ebf8fb67967ce8f871f2cd7dff670d1d38",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7509c86e73da80269a89cd294ac414a577a0d5b9/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7509c86e73da80269a89cd294ac414a577a0d5b9/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=7509c86e73da80269a89cd294ac414a577a0d5b9",
        "patch": "@@ -862,7 +862,7 @@ void CWalletTx::GetAmounts(list<COutputEntry>& listReceived,\n         // In either case, we need to get the destination address\n         CTxDestination address;\n \n-        if (!ExtractDestination(txout.scriptPubKey, address) && txout.scriptPubKey.IsUnspendable())\n+        if (!ExtractDestination(txout.scriptPubKey, address) && !txout.scriptPubKey.IsUnspendable())\n         {\n             LogPrintf(\"CWalletTx::GetAmounts: Unknown transaction type found, txid %s\\n\",\n                      this->GetHash().ToString());"
      }
    ]
  },
  {
    "sha": "8f6b971a589447923e282eba9206b65bc48a206f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjZiOTcxYTU4OTQ0NzkyM2UyODJlYmE5MjA2YjY1YmM0OGEyMDZm",
    "commit": {
      "author": {
        "name": "mb300sd",
        "email": "mb300sd@git",
        "date": "2015-12-14T19:21:34Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-28T08:26:30Z"
      },
      "message": "Rename OP_NOP2 to OP_CHECKLOCKTIMEVERIFY.\n\nGithub-Pull: #7213\nRebased-From: 37d271d7cce44885f835292ffe99b54399b014d6",
      "tree": {
        "sha": "9eeaba556456a1ae020e5465e9482d28860eb90e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9eeaba556456a1ae020e5465e9482d28860eb90e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f6b971a589447923e282eba9206b65bc48a206f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f6b971a589447923e282eba9206b65bc48a206f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f6b971a589447923e282eba9206b65bc48a206f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f6b971a589447923e282eba9206b65bc48a206f/comments",
    "author": null,
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7509c86e73da80269a89cd294ac414a577a0d5b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7509c86e73da80269a89cd294ac414a577a0d5b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7509c86e73da80269a89cd294ac414a577a0d5b9"
      }
    ],
    "stats": {
      "total": 274,
      "additions": 237,
      "deletions": 37
    },
    "files": [
      {
        "sha": "213c6c4756ae8c64f4977fff2a914c6127f663b0",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f6b971a589447923e282eba9206b65bc48a206f/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f6b971a589447923e282eba9206b65bc48a206f/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=8f6b971a589447923e282eba9206b65bc48a206f",
        "patch": "@@ -67,6 +67,20 @@ specified point in the future.\n    longer accept new version 3 blocks and it will only accept version 4\n    blocks if they comply with the BIP65 rules for CLTV.\n \n+Asm script outputs now contain OP_CHECKLOCKTIMEVERIFY in place of OP_NOP2\n+-------------------------------------------------------------------------\n+\n+OP_NOP2 has been renamed to OP_CHECKLOCKTIMEVERIFY by [BIP \n+65](https://github.com/bitcoin/bips/blob/master/bip-0065.mediawiki)\n+\n+The following outputs are affected by this change:\n+- RPC `getrawtransaction` (in verbose mode)\n+- RPC `decoderawtransaction`\n+- RPC `decodescript`\n+- REST `/rest/tx/` (JSON format)\n+- REST `/rest/block/` (JSON format when including extended tx details)\n+- `bitcoin-tx -json`\n+\n For more information about the soft-forking change, please see\n <https://github.com/bitcoin/bitcoin/pull/6351>\n "
      },
      {
        "sha": "14b94fbc5baa61911955d43a4bfd3d21b273b836",
        "filename": "qa/rpc-tests/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f6b971a589447923e282eba9206b65bc48a206f/qa/rpc-tests/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f6b971a589447923e282eba9206b65bc48a206f/qa/rpc-tests/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv-p2p.py?ref=8f6b971a589447923e282eba9206b65bc48a206f",
        "patch": "@@ -9,7 +9,7 @@\n from test_framework.mininode import CTransaction, NetworkThread\n from test_framework.blocktools import create_coinbase, create_block\n from test_framework.comptool import TestInstance, TestManager\n-from test_framework.script import CScript, OP_1NEGATE, OP_NOP2, OP_DROP\n+from test_framework.script import CScript, OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP\n from binascii import hexlify, unhexlify\n import cStringIO\n import time\n@@ -19,7 +19,7 @@ def cltv_invalidate(tx):\n \n     Prepends -1 CLTV DROP in the scriptSig itself.\n     '''\n-    tx.vin[0].scriptSig = CScript([OP_1NEGATE, OP_NOP2, OP_DROP] +\n+    tx.vin[0].scriptSig = CScript([OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP] +\n                                   list(CScript(tx.vin[0].scriptSig)))\n \n '''"
      },
      {
        "sha": "490808d49dd5318b88b79904882714d067f12c52",
        "filename": "qa/rpc-tests/decodescript.py",
        "status": "added",
        "additions": 186,
        "deletions": 0,
        "changes": 186,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f6b971a589447923e282eba9206b65bc48a206f/qa/rpc-tests/decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f6b971a589447923e282eba9206b65bc48a206f/qa/rpc-tests/decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/decodescript.py?ref=8f6b971a589447923e282eba9206b65bc48a206f",
        "patch": "@@ -0,0 +1,186 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+from test_framework.mininode import *\n+from binascii import hexlify, unhexlify\n+from cStringIO import StringIO\n+\n+class DecodeScriptTest(BitcoinTestFramework):\n+    \"\"\"Tests decoding scripts via RPC command \"decodescript\".\"\"\"\n+\n+    def setup_chain(self):\n+        print('Initializing test directory ' + self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 1)\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(1, self.options.tmpdir)\n+        self.is_network_split = False\n+\n+    def decodescript_script_sig(self):\n+        signature = '304502207fa7a6d1e0ee81132a269ad84e68d695483745cde8b541e3bf630749894e342a022100c1f7ab20e13e22fb95281a870f3dcf38d782e53023ee313d741ad0cfbc0c509001'\n+        push_signature = '48' + signature\n+        public_key = '03b0da749730dc9b4b1f4a14d6902877a92541f5368778853d9c4a0cb7802dcfb2'\n+        push_public_key = '21' + public_key\n+\n+        # below are test cases for all of the standard transaction types\n+\n+        # 1) P2PK scriptSig\n+        # the scriptSig of a public key scriptPubKey simply pushes a signature onto the stack\n+        rpc_result = self.nodes[0].decodescript(push_signature)\n+        assert_equal(signature, rpc_result['asm'])\n+\n+        # 2) P2PKH scriptSig\n+        rpc_result = self.nodes[0].decodescript(push_signature + push_public_key)\n+        assert_equal(signature + ' ' + public_key, rpc_result['asm'])\n+\n+        # 3) multisig scriptSig\n+        # this also tests the leading portion of a P2SH multisig scriptSig\n+        # OP_0 <A sig> <B sig>\n+        rpc_result = self.nodes[0].decodescript('00' + push_signature + push_signature)\n+        assert_equal('0 ' + signature + ' ' + signature, rpc_result['asm'])\n+\n+        # 4) P2SH scriptSig\n+        # an empty P2SH redeemScript is valid and makes for a very simple test case.\n+        # thus, such a spending scriptSig would just need to pass the outer redeemScript\n+        # hash test and leave true on the top of the stack.\n+        rpc_result = self.nodes[0].decodescript('5100')\n+        assert_equal('1 0', rpc_result['asm'])\n+\n+        # 5) null data scriptSig - no such thing because null data scripts can not be spent.\n+        # thus, no test case for that standard transaction type is here.\n+\n+    def decodescript_script_pub_key(self):\n+        public_key = '03b0da749730dc9b4b1f4a14d6902877a92541f5368778853d9c4a0cb7802dcfb2'\n+        push_public_key = '21' + public_key\n+        public_key_hash = '11695b6cd891484c2d49ec5aa738ec2b2f897777'\n+        push_public_key_hash = '14' + public_key_hash\n+\n+        # below are test cases for all of the standard transaction types\n+\n+        # 1) P2PK scriptPubKey\n+        # <pubkey> OP_CHECKSIG\n+        rpc_result = self.nodes[0].decodescript(push_public_key + 'ac')\n+        assert_equal(public_key + ' OP_CHECKSIG', rpc_result['asm'])\n+\n+        # 2) P2PKH scriptPubKey\n+        # OP_DUP OP_HASH160 <PubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n+        rpc_result = self.nodes[0].decodescript('76a9' + push_public_key_hash + '88ac')\n+        assert_equal('OP_DUP OP_HASH160 ' + public_key_hash + ' OP_EQUALVERIFY OP_CHECKSIG', rpc_result['asm'])\n+\n+        # 3) multisig scriptPubKey\n+        # <m> <A pubkey> <B pubkey> <C pubkey> <n> OP_CHECKMULTISIG\n+        # just imagine that the pub keys used below are different.\n+        # for our purposes here it does not matter that they are the same even though it is unrealistic.\n+        rpc_result = self.nodes[0].decodescript('52' + push_public_key + push_public_key + push_public_key + '53ae')\n+        assert_equal('2 ' + public_key + ' ' + public_key + ' ' + public_key +  ' 3 OP_CHECKMULTISIG', rpc_result['asm'])\n+\n+        # 4) P2SH scriptPubKey\n+        # OP_HASH160 <Hash160(redeemScript)> OP_EQUAL.\n+        # push_public_key_hash here should actually be the hash of a redeem script.\n+        # but this works the same for purposes of this test.\n+        rpc_result = self.nodes[0].decodescript('a9' + push_public_key_hash + '87')\n+        assert_equal('OP_HASH160 ' + public_key_hash + ' OP_EQUAL', rpc_result['asm'])\n+\n+        # 5) null data scriptPubKey\n+        # use a signature look-alike here to make sure that we do not decode random data as a signature.\n+        # this matters if/when signature sighash decoding comes along.\n+        # would want to make sure that no such decoding takes place in this case.\n+        signature_imposter = '48304502207fa7a6d1e0ee81132a269ad84e68d695483745cde8b541e3bf630749894e342a022100c1f7ab20e13e22fb95281a870f3dcf38d782e53023ee313d741ad0cfbc0c509001'\n+        # OP_RETURN <data>\n+        rpc_result = self.nodes[0].decodescript('6a' + signature_imposter)\n+        assert_equal('OP_RETURN ' + signature_imposter[2:], rpc_result['asm'])\n+\n+        # 6) a CLTV redeem script. redeem scripts are in-effect scriptPubKey scripts, so adding a test here.\n+        # OP_NOP2 is also known as OP_CHECKLOCKTIMEVERIFY.\n+        # just imagine that the pub keys used below are different.\n+        # for our purposes here it does not matter that they are the same even though it is unrealistic.\n+        #\n+        # OP_IF\n+        #   <receiver-pubkey> OP_CHECKSIGVERIFY\n+        # OP_ELSE\n+        #   <lock-until> OP_CHECKLOCKTIMEVERIFY OP_DROP\n+        # OP_ENDIF\n+        # <sender-pubkey> OP_CHECKSIG\n+        #\n+        # lock until block 500,000\n+        rpc_result = self.nodes[0].decodescript('63' + push_public_key + 'ad670320a107b17568' + push_public_key + 'ac')\n+        assert_equal('OP_IF ' + public_key + ' OP_CHECKSIGVERIFY OP_ELSE 500000 OP_CHECKLOCKTIMEVERIFY OP_DROP OP_ENDIF ' + public_key + ' OP_CHECKSIG', rpc_result['asm'])\n+\n+    def decoderawtransaction_asm_sighashtype(self):\n+        \"\"\"Tests decoding scripts via RPC command \"decoderawtransaction\".\n+\n+        This test is in with the \"decodescript\" tests because they are testing the same \"asm\" script decodes.\n+        \"\"\"\n+\n+        # this test case uses a random plain vanilla mainnet transaction with a single P2PKH input and output\n+        tx = '0100000001696a20784a2c70143f634e95227dbdfdf0ecd51647052e70854512235f5986ca010000008a47304402207174775824bec6c2700023309a168231ec80b82c6069282f5133e6f11cbb04460220570edc55c7c5da2ca687ebd0372d3546ebc3f810516a002350cac72dfe192dfb014104d3f898e6487787910a690410b7a917ef198905c27fb9d3b0a42da12aceae0544fc7088d239d9a48f2828a15a09e84043001f27cc80d162cb95404e1210161536ffffffff0100e1f505000000001976a914eb6c6e0cdb2d256a32d97b8df1fc75d1920d9bca88ac00000000'\n+        rpc_result = self.nodes[0].decoderawtransaction(tx)\n+        assert_equal('304402207174775824bec6c2700023309a168231ec80b82c6069282f5133e6f11cbb04460220570edc55c7c5da2ca687ebd0372d3546ebc3f810516a002350cac72dfe192dfb[ALL] 04d3f898e6487787910a690410b7a917ef198905c27fb9d3b0a42da12aceae0544fc7088d239d9a48f2828a15a09e84043001f27cc80d162cb95404e1210161536', rpc_result['vin'][0]['scriptSig']['asm'])\n+\n+        # this test case uses a mainnet transaction that has a P2SH input and both P2PKH and P2SH outputs.\n+        # it's from James D'Angelo's awesome introductory videos about multisig: https://www.youtube.com/watch?v=zIbUSaZBJgU and https://www.youtube.com/watch?v=OSA1pwlaypc\n+        # verify that we have not altered scriptPubKey decoding.\n+        tx = '01000000018d1f5635abd06e2c7e2ddf58dc85b3de111e4ad6e0ab51bb0dcf5e84126d927300000000fdfe0000483045022100ae3b4e589dfc9d48cb82d41008dc5fa6a86f94d5c54f9935531924602730ab8002202f88cf464414c4ed9fa11b773c5ee944f66e9b05cc1e51d97abc22ce098937ea01483045022100b44883be035600e9328a01b66c7d8439b74db64187e76b99a68f7893b701d5380220225bf286493e4c4adcf928c40f785422572eb232f84a0b83b0dea823c3a19c75014c695221020743d44be989540d27b1b4bbbcfd17721c337cb6bc9af20eb8a32520b393532f2102c0120a1dda9e51a938d39ddd9fe0ebc45ea97e1d27a7cbd671d5431416d3dd87210213820eb3d5f509d7438c9eeecb4157b2f595105e7cd564b3cdbb9ead3da41eed53aeffffffff02611e0000000000001976a914dc863734a218bfe83ef770ee9d41a27f824a6e5688acee2a02000000000017a9142a5edea39971049a540474c6a99edf0aa4074c588700000000'\n+        rpc_result = self.nodes[0].decoderawtransaction(tx)\n+        assert_equal('8e3730608c3b0bb5df54f09076e196bc292a8e39a78e73b44b6ba08c78f5cbb0', rpc_result['txid'])\n+        assert_equal('0 3045022100ae3b4e589dfc9d48cb82d41008dc5fa6a86f94d5c54f9935531924602730ab8002202f88cf464414c4ed9fa11b773c5ee944f66e9b05cc1e51d97abc22ce098937ea[ALL] 3045022100b44883be035600e9328a01b66c7d8439b74db64187e76b99a68f7893b701d5380220225bf286493e4c4adcf928c40f785422572eb232f84a0b83b0dea823c3a19c75[ALL] 5221020743d44be989540d27b1b4bbbcfd17721c337cb6bc9af20eb8a32520b393532f2102c0120a1dda9e51a938d39ddd9fe0ebc45ea97e1d27a7cbd671d5431416d3dd87210213820eb3d5f509d7438c9eeecb4157b2f595105e7cd564b3cdbb9ead3da41eed53ae', rpc_result['vin'][0]['scriptSig']['asm'])\n+        assert_equal('OP_DUP OP_HASH160 dc863734a218bfe83ef770ee9d41a27f824a6e56 OP_EQUALVERIFY OP_CHECKSIG', rpc_result['vout'][0]['scriptPubKey']['asm'])\n+        assert_equal('OP_HASH160 2a5edea39971049a540474c6a99edf0aa4074c58 OP_EQUAL', rpc_result['vout'][1]['scriptPubKey']['asm'])\n+        txSave = CTransaction()\n+        txSave.deserialize(StringIO(unhexlify(tx)))\n+\n+        # make sure that a specifically crafted op_return value will not pass all the IsDERSignature checks and then get decoded as a sighash type\n+        tx = '01000000015ded05872fdbda629c7d3d02b194763ce3b9b1535ea884e3c8e765d42e316724020000006b48304502204c10d4064885c42638cbff3585915b322de33762598321145ba033fc796971e2022100bb153ad3baa8b757e30a2175bd32852d2e1cb9080f84d7e32fcdfd667934ef1b012103163c0ff73511ea1743fb5b98384a2ff09dd06949488028fd819f4d83f56264efffffffff0200000000000000000b6a0930060201000201000180380100000000001976a9141cabd296e753837c086da7a45a6c2fe0d49d7b7b88ac00000000'\n+        rpc_result = self.nodes[0].decoderawtransaction(tx)\n+        assert_equal('OP_RETURN 300602010002010001', rpc_result['vout'][0]['scriptPubKey']['asm'])\n+\n+        # verify that we have not altered scriptPubKey processing even of a specially crafted P2PKH pubkeyhash and P2SH redeem script hash that is made to pass the der signature checks\n+        tx = '01000000018d1f5635abd06e2c7e2ddf58dc85b3de111e4ad6e0ab51bb0dcf5e84126d927300000000fdfe0000483045022100ae3b4e589dfc9d48cb82d41008dc5fa6a86f94d5c54f9935531924602730ab8002202f88cf464414c4ed9fa11b773c5ee944f66e9b05cc1e51d97abc22ce098937ea01483045022100b44883be035600e9328a01b66c7d8439b74db64187e76b99a68f7893b701d5380220225bf286493e4c4adcf928c40f785422572eb232f84a0b83b0dea823c3a19c75014c695221020743d44be989540d27b1b4bbbcfd17721c337cb6bc9af20eb8a32520b393532f2102c0120a1dda9e51a938d39ddd9fe0ebc45ea97e1d27a7cbd671d5431416d3dd87210213820eb3d5f509d7438c9eeecb4157b2f595105e7cd564b3cdbb9ead3da41eed53aeffffffff02611e0000000000001976a914301102070101010101010102060101010101010188acee2a02000000000017a91430110207010101010101010206010101010101018700000000'\n+        rpc_result = self.nodes[0].decoderawtransaction(tx)\n+        assert_equal('OP_DUP OP_HASH160 3011020701010101010101020601010101010101 OP_EQUALVERIFY OP_CHECKSIG', rpc_result['vout'][0]['scriptPubKey']['asm'])\n+        assert_equal('OP_HASH160 3011020701010101010101020601010101010101 OP_EQUAL', rpc_result['vout'][1]['scriptPubKey']['asm'])\n+\n+        # some more full transaction tests of varying specific scriptSigs. used instead of\n+        # tests in decodescript_script_sig because the decodescript RPC is specifically\n+        # for working on scriptPubKeys (argh!).\n+        push_signature = hexlify(txSave.vin[0].scriptSig)[2:(0x48*2+4)]\n+        signature = push_signature[2:]\n+        der_signature = signature[:-2]\n+        signature_sighash_decoded = der_signature + '[ALL]'\n+        signature_2 = der_signature + '82'\n+        push_signature_2 = '48' + signature_2\n+        signature_2_sighash_decoded = der_signature + '[NONE|ANYONECANPAY]'\n+\n+        # 1) P2PK scriptSig\n+        txSave.vin[0].scriptSig = unhexlify(push_signature)\n+        rpc_result = self.nodes[0].decoderawtransaction(hexlify(txSave.serialize()))\n+        assert_equal(signature_sighash_decoded, rpc_result['vin'][0]['scriptSig']['asm'])\n+\n+        # make sure that the sighash decodes come out correctly for a more complex / lesser used case.\n+        txSave.vin[0].scriptSig = unhexlify(push_signature_2)\n+        rpc_result = self.nodes[0].decoderawtransaction(hexlify(txSave.serialize()))\n+        assert_equal(signature_2_sighash_decoded, rpc_result['vin'][0]['scriptSig']['asm'])\n+\n+        # 2) multisig scriptSig\n+        txSave.vin[0].scriptSig = unhexlify('00' + push_signature + push_signature_2)\n+        rpc_result = self.nodes[0].decoderawtransaction(hexlify(txSave.serialize()))\n+        assert_equal('0 ' + signature_sighash_decoded + ' ' + signature_2_sighash_decoded, rpc_result['vin'][0]['scriptSig']['asm'])\n+\n+        # 3) test a scriptSig that contains more than push operations.\n+        # in fact, it contains an OP_RETURN with data specially crafted to cause improper decode if the code does not catch it.\n+        txSave.vin[0].scriptSig = unhexlify('6a143011020701010101010101020601010101010101')\n+        rpc_result = self.nodes[0].decoderawtransaction(hexlify(txSave.serialize()))\n+        print(hexlify('636174'))\n+        assert_equal('OP_RETURN 3011020701010101010101020601010101010101', rpc_result['vin'][0]['scriptSig']['asm'])\n+\n+    def run_test(self):\n+        self.decodescript_script_sig()\n+        self.decodescript_script_pub_key()\n+        self.decoderawtransaction_asm_sighashtype()\n+\n+if __name__ == '__main__':\n+    DecodeScriptTest().main()"
      },
      {
        "sha": "ad27b7d572508a54c0464cc80609c334b8ce3ff2",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f6b971a589447923e282eba9206b65bc48a206f/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f6b971a589447923e282eba9206b65bc48a206f/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=8f6b971a589447923e282eba9206b65bc48a206f",
        "patch": "@@ -141,7 +141,7 @@ const char* GetOpName(opcodetype opcode)\n \n     // expanson\n     case OP_NOP1                   : return \"OP_NOP1\";\n-    case OP_NOP2                   : return \"OP_NOP2\";\n+    case OP_CHECKLOCKTIMEVERIFY    : return \"OP_CHECKLOCKTIMEVERIFY\";\n     case OP_NOP3                   : return \"OP_NOP3\";\n     case OP_NOP4                   : return \"OP_NOP4\";\n     case OP_NOP5                   : return \"OP_NOP5\";"
      },
      {
        "sha": "aa7703206d368f88ab2b8aa7236a2cf20a0977af",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f6b971a589447923e282eba9206b65bc48a206f/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f6b971a589447923e282eba9206b65bc48a206f/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=8f6b971a589447923e282eba9206b65bc48a206f",
        "patch": "@@ -152,8 +152,8 @@ enum opcodetype\n \n     // expansion\n     OP_NOP1 = 0xb0,\n-    OP_NOP2 = 0xb1,\n-    OP_CHECKLOCKTIMEVERIFY = OP_NOP2,\n+    OP_CHECKLOCKTIMEVERIFY = 0xb1,\n+    OP_NOP2 = OP_CHECKLOCKTIMEVERIFY,\n     OP_NOP3 = 0xb2,\n     OP_NOP4 = 0xb3,\n     OP_NOP5 = 0xb4,"
      },
      {
        "sha": "0d92e9b33d418a05071f6c52d3c952da5e280db2",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f6b971a589447923e282eba9206b65bc48a206f/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f6b971a589447923e282eba9206b65bc48a206f/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=8f6b971a589447923e282eba9206b65bc48a206f",
        "patch": "@@ -158,12 +158,12 @@\n [\"2 2 LSHIFT\", \"8 EQUAL\", \"P2SH,STRICTENC\", \"disabled\"],\n [\"2 1 RSHIFT\", \"1 EQUAL\", \"P2SH,STRICTENC\", \"disabled\"],\n \n-[\"1\",\"NOP1 NOP2 NOP3 NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10 2 EQUAL\", \"P2SH,STRICTENC\"],\n-[\"'NOP_1_to_10' NOP1 NOP2 NOP3 NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10\",\"'NOP_1_to_11' EQUAL\", \"P2SH,STRICTENC\"],\n+[\"1\",\"NOP1 CHECKLOCKTIMEVERIFY NOP3 NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10 2 EQUAL\", \"P2SH,STRICTENC\"],\n+[\"'NOP_1_to_10' NOP1 CHECKLOCKTIMEVERIFY NOP3 NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10\",\"'NOP_1_to_11' EQUAL\", \"P2SH,STRICTENC\"],\n \n [\"Ensure 100% coverage of discouraged NOPS\"],\n [\"1\", \"NOP1\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\"],\n-[\"1\", \"NOP2\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\"],\n+[\"1\", \"CHECKLOCKTIMEVERIFY\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\"],\n [\"1\", \"NOP3\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\"],\n [\"1\", \"NOP4\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\"],\n [\"1\", \"NOP5\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\"],"
      },
      {
        "sha": "b7bc6a8146b6fa0ebf270d6eba040af057823a65",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f6b971a589447923e282eba9206b65bc48a206f/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f6b971a589447923e282eba9206b65bc48a206f/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=8f6b971a589447923e282eba9206b65bc48a206f",
        "patch": "@@ -230,8 +230,8 @@\n [\"'abcdefghijklmnopqrstuvwxyz'\", \"HASH256 0x4c 0x20 0xca139bc10c2f660da42666f72e89a225936fc60f193c161124a672050c434671 EQUAL\", \"P2SH,STRICTENC\"],\n \n \n-[\"1\",\"NOP1 NOP2 NOP3 NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10 1 EQUAL\", \"P2SH,STRICTENC\"],\n-[\"'NOP_1_to_10' NOP1 NOP2 NOP3 NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10\",\"'NOP_1_to_10' EQUAL\", \"P2SH,STRICTENC\"],\n+[\"1\",\"NOP1 CHECKLOCKTIMEVERIFY NOP3 NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10 1 EQUAL\", \"P2SH,STRICTENC\"],\n+[\"'NOP_1_to_10' NOP1 CHECKLOCKTIMEVERIFY NOP3 NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10\",\"'NOP_1_to_10' EQUAL\", \"P2SH,STRICTENC\"],\n \n [\"1\", \"NOP\", \"P2SH,STRICTENC,DISCOURAGE_UPGRADABLE_NOPS\", \"Discourage NOPx flag allows OP_NOP\"],\n \n@@ -439,7 +439,7 @@\n [\"NOP\", \"CODESEPARATOR 1\", \"P2SH,STRICTENC\"],\n \n [\"NOP\", \"NOP1 1\", \"P2SH,STRICTENC\"],\n-[\"NOP\", \"NOP2 1\", \"P2SH,STRICTENC\"],\n+[\"NOP\", \"CHECKLOCKTIMEVERIFY 1\", \"P2SH,STRICTENC\"],\n [\"NOP\", \"NOP3 1\", \"P2SH,STRICTENC\"],\n [\"NOP\", \"NOP4 1\", \"P2SH,STRICTENC\"],\n [\"NOP\", \"NOP5 1\", \"P2SH,STRICTENC\"],"
      },
      {
        "sha": "ed7993a7f762ab9edb9200c84887a0a3fdda4c44",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f6b971a589447923e282eba9206b65bc48a206f/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f6b971a589447923e282eba9206b65bc48a206f/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=8f6b971a589447923e282eba9206b65bc48a206f",
        "patch": "@@ -111,66 +111,66 @@\n [\"CHECKLOCKTIMEVERIFY tests\"],\n \n [\"By-height locks, with argument just beyond tx nLockTime\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1 NOP2 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1 CHECKLOCKTIMEVERIFY 1\"]],\n \"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 NOP2 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 CHECKLOCKTIMEVERIFY 1\"]],\n \"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000fe64cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n [\"By-time locks, with argument just beyond tx nLockTime (but within numerical boundries)\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000001 NOP2 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000001 CHECKLOCKTIMEVERIFY 1\"]],\n \"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 NOP2 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 CHECKLOCKTIMEVERIFY 1\"]],\n \"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000feffffff\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n [\"Argument missing\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"NOP2 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"CHECKLOCKTIMEVERIFY 1\"]],\n \"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1\"]],\n \"010000000100010000000000000000000000000000000000000000000000000000000000000000000001b1010000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n [\"Argument negative with by-blockheight nLockTime=0\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"-1 NOP2 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"-1 CHECKLOCKTIMEVERIFY 1\"]],\n \"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n [\"Argument negative with by-blocktime nLockTime=500,000,000\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"-1 NOP2 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"-1 CHECKLOCKTIMEVERIFY 1\"]],\n \"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1\"]],\n \"010000000100010000000000000000000000000000000000000000000000000000000000000000000004005194b1010000000100000000000000000002000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n [\"Input locked\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 CHECKLOCKTIMEVERIFY 1\"]],\n \"010000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff0100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0\"]],\n \"01000000010001000000000000000000000000000000000000000000000000000000000000000000000251b1ffffffff0100000000000000000002000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n [\"Another input being unlocked isn't sufficient; the CHECKLOCKTIMEVERIFY-using input must be unlocked\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"] ,\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 CHECKLOCKTIMEVERIFY 1\"] ,\n   [\"0000000000000000000000000000000000000000000000000000000000000200\", 1, \"1\"]],\n \"010000000200010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00020000000000000000000000000000000000000000000000000000000000000100000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n [\"Argument/tx height/time mismatch, both versions\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 CHECKLOCKTIMEVERIFY 1\"]],\n \"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0\"]],\n \"01000000010001000000000000000000000000000000000000000000000000000000000000000000000251b100000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 NOP2 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 CHECKLOCKTIMEVERIFY 1\"]],\n \"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 NOP2 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 CHECKLOCKTIMEVERIFY 1\"]],\n \"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 NOP2 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 CHECKLOCKTIMEVERIFY 1\"]],\n \"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ff64cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n [\"Argument 2^32 with nLockTime=2^32-1\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967296 NOP2 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967296 CHECKLOCKTIMEVERIFY 1\"]],\n \"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ffffffff\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n [\"Same, but with nLockTime=2^31-1\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483648 NOP2 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483648 CHECKLOCKTIMEVERIFY 1\"]],\n \"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ffffff7f\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n [\"6 byte non-minimally-encoded arguments are invalid even in their contents are valid\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x06 0x000000000000 NOP2 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x06 0x000000000000 CHECKLOCKTIMEVERIFY 1\"]],\n \"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n [\"Failure due to failing CHECKLOCKTIMEVERIFY in scriptSig\"],"
      },
      {
        "sha": "a939eaa453dba01fcd4f4b27fe990959ec5735d4",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f6b971a589447923e282eba9206b65bc48a206f/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f6b971a589447923e282eba9206b65bc48a206f/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=8f6b971a589447923e282eba9206b65bc48a206f",
        "patch": "@@ -181,35 +181,35 @@\n [\"CHECKLOCKTIMEVERIFY tests\"],\n \n [\"By-height locks, with argument == 0 and == tx nLockTime\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 CHECKLOCKTIMEVERIFY 1\"]],\n \"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 NOP2 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 CHECKLOCKTIMEVERIFY 1\"]],\n \"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ff64cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 CHECKLOCKTIMEVERIFY 1\"]],\n \"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ff64cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n [\"By-time locks, with argument just beyond tx nLockTime (but within numerical boundries)\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 NOP2 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 CHECKLOCKTIMEVERIFY 1\"]],\n \"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 NOP2 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 CHECKLOCKTIMEVERIFY 1\"]],\n \"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ffffffff\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 NOP2 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 CHECKLOCKTIMEVERIFY 1\"]],\n \"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ffffffff\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n [\"Any non-maxint nSequence is fine\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 CHECKLOCKTIMEVERIFY 1\"]],\n \"010000000100010000000000000000000000000000000000000000000000000000000000000000000000feffffff0100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n [\"The argument can be calculated rather than created directly by a PUSHDATA\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 1ADD NOP2 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 1ADD CHECKLOCKTIMEVERIFY 1\"]],\n \"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n [\"Perhaps even by an ADD producing a 5-byte result that is out of bounds for other opcodes\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483647 2147483647 ADD NOP2 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483647 2147483647 ADD CHECKLOCKTIMEVERIFY 1\"]],\n \"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000feffffff\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n [\"5 byte non-minimally-encoded arguments are valid\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x05 0x0000000000 NOP2 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x05 0x0000000000 CHECKLOCKTIMEVERIFY 1\"]],\n \"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n [\"Valid CHECKLOCKTIMEVERIFY in scriptSig\"],"
      }
    ]
  },
  {
    "sha": "7b19f3873f2046322b357a42b58794b064c8df77",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YjE5ZjM4NzNmMjA0NjMyMmIzNTdhNDJiNTg3OTRiMDY0YzhkZjc3",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-27T09:44:52Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-28T08:26:41Z"
      },
      "message": "Adapt decodescript test to 0.10 RPC",
      "tree": {
        "sha": "b579ca26e33e1a30ebe2eae880422d496a4bcb62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b579ca26e33e1a30ebe2eae880422d496a4bcb62"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b19f3873f2046322b357a42b58794b064c8df77",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b19f3873f2046322b357a42b58794b064c8df77",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7b19f3873f2046322b357a42b58794b064c8df77",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b19f3873f2046322b357a42b58794b064c8df77/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f6b971a589447923e282eba9206b65bc48a206f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f6b971a589447923e282eba9206b65bc48a206f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f6b971a589447923e282eba9206b65bc48a206f"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "7bff5e1a97e0e013813f6dcf4af2ae10d4981364",
        "filename": "qa/rpc-tests/decodescript.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b19f3873f2046322b357a42b58794b064c8df77/qa/rpc-tests/decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b19f3873f2046322b357a42b58794b064c8df77/qa/rpc-tests/decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/decodescript.py?ref=7b19f3873f2046322b357a42b58794b064c8df77",
        "patch": "@@ -119,15 +119,15 @@ def decoderawtransaction_asm_sighashtype(self):\n         # this test case uses a random plain vanilla mainnet transaction with a single P2PKH input and output\n         tx = '0100000001696a20784a2c70143f634e95227dbdfdf0ecd51647052e70854512235f5986ca010000008a47304402207174775824bec6c2700023309a168231ec80b82c6069282f5133e6f11cbb04460220570edc55c7c5da2ca687ebd0372d3546ebc3f810516a002350cac72dfe192dfb014104d3f898e6487787910a690410b7a917ef198905c27fb9d3b0a42da12aceae0544fc7088d239d9a48f2828a15a09e84043001f27cc80d162cb95404e1210161536ffffffff0100e1f505000000001976a914eb6c6e0cdb2d256a32d97b8df1fc75d1920d9bca88ac00000000'\n         rpc_result = self.nodes[0].decoderawtransaction(tx)\n-        assert_equal('304402207174775824bec6c2700023309a168231ec80b82c6069282f5133e6f11cbb04460220570edc55c7c5da2ca687ebd0372d3546ebc3f810516a002350cac72dfe192dfb[ALL] 04d3f898e6487787910a690410b7a917ef198905c27fb9d3b0a42da12aceae0544fc7088d239d9a48f2828a15a09e84043001f27cc80d162cb95404e1210161536', rpc_result['vin'][0]['scriptSig']['asm'])\n+        assert_equal('304402207174775824bec6c2700023309a168231ec80b82c6069282f5133e6f11cbb04460220570edc55c7c5da2ca687ebd0372d3546ebc3f810516a002350cac72dfe192dfb01 04d3f898e6487787910a690410b7a917ef198905c27fb9d3b0a42da12aceae0544fc7088d239d9a48f2828a15a09e84043001f27cc80d162cb95404e1210161536', rpc_result['vin'][0]['scriptSig']['asm'])\n \n         # this test case uses a mainnet transaction that has a P2SH input and both P2PKH and P2SH outputs.\n         # it's from James D'Angelo's awesome introductory videos about multisig: https://www.youtube.com/watch?v=zIbUSaZBJgU and https://www.youtube.com/watch?v=OSA1pwlaypc\n         # verify that we have not altered scriptPubKey decoding.\n         tx = '01000000018d1f5635abd06e2c7e2ddf58dc85b3de111e4ad6e0ab51bb0dcf5e84126d927300000000fdfe0000483045022100ae3b4e589dfc9d48cb82d41008dc5fa6a86f94d5c54f9935531924602730ab8002202f88cf464414c4ed9fa11b773c5ee944f66e9b05cc1e51d97abc22ce098937ea01483045022100b44883be035600e9328a01b66c7d8439b74db64187e76b99a68f7893b701d5380220225bf286493e4c4adcf928c40f785422572eb232f84a0b83b0dea823c3a19c75014c695221020743d44be989540d27b1b4bbbcfd17721c337cb6bc9af20eb8a32520b393532f2102c0120a1dda9e51a938d39ddd9fe0ebc45ea97e1d27a7cbd671d5431416d3dd87210213820eb3d5f509d7438c9eeecb4157b2f595105e7cd564b3cdbb9ead3da41eed53aeffffffff02611e0000000000001976a914dc863734a218bfe83ef770ee9d41a27f824a6e5688acee2a02000000000017a9142a5edea39971049a540474c6a99edf0aa4074c588700000000'\n         rpc_result = self.nodes[0].decoderawtransaction(tx)\n         assert_equal('8e3730608c3b0bb5df54f09076e196bc292a8e39a78e73b44b6ba08c78f5cbb0', rpc_result['txid'])\n-        assert_equal('0 3045022100ae3b4e589dfc9d48cb82d41008dc5fa6a86f94d5c54f9935531924602730ab8002202f88cf464414c4ed9fa11b773c5ee944f66e9b05cc1e51d97abc22ce098937ea[ALL] 3045022100b44883be035600e9328a01b66c7d8439b74db64187e76b99a68f7893b701d5380220225bf286493e4c4adcf928c40f785422572eb232f84a0b83b0dea823c3a19c75[ALL] 5221020743d44be989540d27b1b4bbbcfd17721c337cb6bc9af20eb8a32520b393532f2102c0120a1dda9e51a938d39ddd9fe0ebc45ea97e1d27a7cbd671d5431416d3dd87210213820eb3d5f509d7438c9eeecb4157b2f595105e7cd564b3cdbb9ead3da41eed53ae', rpc_result['vin'][0]['scriptSig']['asm'])\n+        assert_equal('0 3045022100ae3b4e589dfc9d48cb82d41008dc5fa6a86f94d5c54f9935531924602730ab8002202f88cf464414c4ed9fa11b773c5ee944f66e9b05cc1e51d97abc22ce098937ea01 3045022100b44883be035600e9328a01b66c7d8439b74db64187e76b99a68f7893b701d5380220225bf286493e4c4adcf928c40f785422572eb232f84a0b83b0dea823c3a19c7501 5221020743d44be989540d27b1b4bbbcfd17721c337cb6bc9af20eb8a32520b393532f2102c0120a1dda9e51a938d39ddd9fe0ebc45ea97e1d27a7cbd671d5431416d3dd87210213820eb3d5f509d7438c9eeecb4157b2f595105e7cd564b3cdbb9ead3da41eed53ae', rpc_result['vin'][0]['scriptSig']['asm'])\n         assert_equal('OP_DUP OP_HASH160 dc863734a218bfe83ef770ee9d41a27f824a6e56 OP_EQUALVERIFY OP_CHECKSIG', rpc_result['vout'][0]['scriptPubKey']['asm'])\n         assert_equal('OP_HASH160 2a5edea39971049a540474c6a99edf0aa4074c58 OP_EQUAL', rpc_result['vout'][1]['scriptPubKey']['asm'])\n         txSave = CTransaction()\n@@ -150,10 +150,10 @@ def decoderawtransaction_asm_sighashtype(self):\n         push_signature = hexlify(txSave.vin[0].scriptSig)[2:(0x48*2+4)]\n         signature = push_signature[2:]\n         der_signature = signature[:-2]\n-        signature_sighash_decoded = der_signature + '[ALL]'\n+        signature_sighash_decoded = signature\n         signature_2 = der_signature + '82'\n         push_signature_2 = '48' + signature_2\n-        signature_2_sighash_decoded = der_signature + '[NONE|ANYONECANPAY]'\n+        signature_2_sighash_decoded = signature_2\n \n         # 1) P2PK scriptSig\n         txSave.vin[0].scriptSig = unhexlify(push_signature)"
      }
    ]
  },
  {
    "sha": "d4e0b379d51c25fe9868edfa62ff6099ee71417c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNGUwYjM3OWQ1MWMyNWZlOTg2OGVkZmE2MmZmNjA5OWVlNzE0MTdj",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-02-04T16:34:28Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-08T22:33:38Z"
      },
      "message": "Fix getblocktemplate_proposals test by mining one block\n\nThis triggers the tested node to no longer be in initial\ndownload, allowing the call to getblocktemplate() to succeed.\n\nGithub-Pull: #5756\nRebased-From: 1cb2a00cb8221841e7d748ed49fd2ea0ad50ac12",
      "tree": {
        "sha": "46c56c675fbd7d135a8ce70344b81bd4ca1a7596",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46c56c675fbd7d135a8ce70344b81bd4ca1a7596"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d4e0b379d51c25fe9868edfa62ff6099ee71417c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4e0b379d51c25fe9868edfa62ff6099ee71417c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d4e0b379d51c25fe9868edfa62ff6099ee71417c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4e0b379d51c25fe9868edfa62ff6099ee71417c/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7b19f3873f2046322b357a42b58794b064c8df77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b19f3873f2046322b357a42b58794b064c8df77",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7b19f3873f2046322b357a42b58794b064c8df77"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f65162002d2c39fde40097316b0be62add9446dd",
        "filename": "qa/rpc-tests/getblocktemplate_proposals.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4e0b379d51c25fe9868edfa62ff6099ee71417c/qa/rpc-tests/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4e0b379d51c25fe9868edfa62ff6099ee71417c/qa/rpc-tests/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getblocktemplate_proposals.py?ref=d4e0b379d51c25fe9868edfa62ff6099ee71417c",
        "patch": "@@ -95,6 +95,7 @@ class GetBlockTemplateProposalTest(BitcoinTestFramework):\n \n     def run_test(self):\n         node = self.nodes[0]\n+        node.setgenerate(True, 1) # Mine a block to leave initial block download\n         tmpl = node.getblocktemplate()\n         if 'coinbasetxn' not in tmpl:\n             rawcoinbase = encodeUNum(tmpl['height'])"
      }
    ]
  },
  {
    "sha": "319cde42401c442d2ca520e97cd8ea5514417051",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMTljZGU0MjQwMWM0NDJkMmNhNTIwZTk3Y2Q4ZWE1NTE0NDE3MDUx",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-10-27T19:36:06Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-08T23:52:12Z"
      },
      "message": "Fix BIP65 p2p test\n\ncreate_coinbase() was being called with the wrong arguments\n\nGithub-Pull: #6894\nRebased-From: 3e187f2acdb69ceb97a875f8f3bf361c11ef543c",
      "tree": {
        "sha": "06653290e8170a95c660aaaff6d862b191ba8177",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/06653290e8170a95c660aaaff6d862b191ba8177"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/319cde42401c442d2ca520e97cd8ea5514417051",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/319cde42401c442d2ca520e97cd8ea5514417051",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/319cde42401c442d2ca520e97cd8ea5514417051",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/319cde42401c442d2ca520e97cd8ea5514417051/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d4e0b379d51c25fe9868edfa62ff6099ee71417c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4e0b379d51c25fe9868edfa62ff6099ee71417c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d4e0b379d51c25fe9868edfa62ff6099ee71417c"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 15,
      "deletions": 8
    },
    "files": [
      {
        "sha": "f5efdeefcc22807d7f496bc525b82bf99f56651b",
        "filename": "qa/rpc-tests/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 15,
        "deletions": 8,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/319cde42401c442d2ca520e97cd8ea5514417051/qa/rpc-tests/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/319cde42401c442d2ca520e97cd8ea5514417051/qa/rpc-tests/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv-p2p.py?ref=319cde42401c442d2ca520e97cd8ea5514417051",
        "patch": "@@ -67,32 +67,35 @@ def create_transaction(self, node, coinbase, to_address, amount):\n     def get_tests(self):\n \n         self.coinbase_blocks = self.nodes[0].setgenerate(True, 2)\n+        height = 3  # height of the next block to build\n         self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n         self.nodeaddress = self.nodes[0].getnewaddress()\n         self.last_block_time = time.time()\n \n         ''' 98 more version 3 blocks '''\n         test_blocks = []\n         for i in xrange(98):\n-            block = create_block(self.tip, create_coinbase(2), self.last_block_time + 1)\n+            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 3\n             block.rehash()\n             block.solve()\n             test_blocks.append([block, True])\n             self.last_block_time += 1\n             self.tip = block.sha256\n+            height += 1\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         ''' Mine 749 version 4 blocks '''\n         test_blocks = []\n         for i in xrange(749):\n-            block = create_block(self.tip, create_coinbase(2), self.last_block_time + 1)\n+            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 4\n             block.rehash()\n             block.solve()\n             test_blocks.append([block, True])\n             self.last_block_time += 1\n             self.tip = block.sha256\n+            height += 1\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         '''\n@@ -104,7 +107,7 @@ def get_tests(self):\n         cltv_invalidate(spendtx)\n         spendtx.rehash()\n \n-        block = create_block(self.tip, create_coinbase(2), self.last_block_time + 1)\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n         block.nVersion = 4\n         block.vtx.append(spendtx)\n         block.hashMerkleRoot = block.calc_merkle_root()\n@@ -113,6 +116,7 @@ def get_tests(self):\n \n         self.last_block_time += 1\n         self.tip = block.sha256\n+        height += 1\n         yield TestInstance([[block, True]])\n \n         '''\n@@ -124,7 +128,7 @@ def get_tests(self):\n         cltv_invalidate(spendtx)\n         spendtx.rehash()\n \n-        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n         block.nVersion = 4\n         block.vtx.append(spendtx)\n         block.hashMerkleRoot = block.calc_merkle_root()\n@@ -136,35 +140,38 @@ def get_tests(self):\n         ''' Mine 199 new version blocks on last valid tip '''\n         test_blocks = []\n         for i in xrange(199):\n-            block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 4\n             block.rehash()\n             block.solve()\n             test_blocks.append([block, True])\n             self.last_block_time += 1\n             self.tip = block.sha256\n+            height += 1\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         ''' Mine 1 old version block '''\n-        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n         block.nVersion = 3\n         block.rehash()\n         block.solve()\n         self.last_block_time += 1\n         self.tip = block.sha256\n+        height += 1\n         yield TestInstance([[block, True]])\n \n         ''' Mine 1 new version block '''\n-        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n         block.nVersion = 4\n         block.rehash()\n         block.solve()\n         self.last_block_time += 1\n         self.tip = block.sha256\n+        height += 1\n         yield TestInstance([[block, True]])\n \n         ''' Mine 1 old version block, should be invalid '''\n-        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n         block.nVersion = 3\n         block.rehash()\n         block.solve()"
      }
    ]
  },
  {
    "sha": "2ec6869d6de5821e98afc28d64d62241d23b67bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZWM2ODY5ZDZkZTU4MjFlOThhZmMyOGQ2NGQ2MjI0MWQyM2I2N2Jk",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-08T23:34:44Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-08T23:52:13Z"
      },
      "message": "Bugfix: Port unit tests so they work\n\n- Import new_test_framework from 0.11 and adapt tests that need it\n- Bugfix: Properly backport qa/rpc-tests/disablewallet\n- Bugfix: Properly backport qa/rpc-tests/bip65-cltv",
      "tree": {
        "sha": "539ee54079dcabc1407790295050405eea3cbe9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/539ee54079dcabc1407790295050405eea3cbe9e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ec6869d6de5821e98afc28d64d62241d23b67bd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ec6869d6de5821e98afc28d64d62241d23b67bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ec6869d6de5821e98afc28d64d62241d23b67bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ec6869d6de5821e98afc28d64d62241d23b67bd/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "319cde42401c442d2ca520e97cd8ea5514417051",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/319cde42401c442d2ca520e97cd8ea5514417051",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/319cde42401c442d2ca520e97cd8ea5514417051"
      }
    ],
    "stats": {
      "total": 4065,
      "additions": 4051,
      "deletions": 14
    },
    "files": [
      {
        "sha": "6f24e7e5e7abcf88bf7719060d287e68dc505abc",
        "filename": "qa/rpc-tests/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv-p2p.py?ref=2ec6869d6de5821e98afc28d64d62241d23b67bd",
        "patch": "@@ -4,12 +4,12 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n \n-from test_framework.test_framework import ComparisonTestFramework\n-from test_framework.util import *\n-from test_framework.mininode import CTransaction, NetworkThread\n-from test_framework.blocktools import create_coinbase, create_block\n-from test_framework.comptool import TestInstance, TestManager\n-from test_framework.script import CScript, OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP\n+from new_test_framework.test_framework import ComparisonTestFramework\n+from new_test_framework.util import *\n+from new_test_framework.mininode import CTransaction, NetworkThread\n+from new_test_framework.blocktools import create_coinbase, create_block\n+from new_test_framework.comptool import TestInstance, TestManager\n+from new_test_framework.script import CScript, OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP\n from binascii import hexlify, unhexlify\n import cStringIO\n import time"
      },
      {
        "sha": "12f0980a6ffe589a21244c814996cf9f28234634",
        "filename": "qa/rpc-tests/bip65-cltv.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/bip65-cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/bip65-cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv.py?ref=2ec6869d6de5821e98afc28d64d62241d23b67bd",
        "patch": "@@ -7,8 +7,8 @@\n # Test the CHECKLOCKTIMEVERIFY (BIP65) soft-fork logic\n #\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework import BitcoinTestFramework\n+from util import *\n import os\n import shutil\n "
      },
      {
        "sha": "c9dee944259bbdacf57d06ed637525855e25eeff",
        "filename": "qa/rpc-tests/decodescript.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/decodescript.py?ref=2ec6869d6de5821e98afc28d64d62241d23b67bd",
        "patch": "@@ -3,9 +3,9 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from test_framework.mininode import *\n+from new_test_framework.test_framework import BitcoinTestFramework\n+from new_test_framework.util import *\n+from new_test_framework.mininode import *\n from binascii import hexlify, unhexlify\n from cStringIO import StringIO\n "
      },
      {
        "sha": "268777bad9e84c393d89fb21506c0a8bc0327082",
        "filename": "qa/rpc-tests/disablewallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/disablewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/disablewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/disablewallet.py?ref=2ec6869d6de5821e98afc28d64d62241d23b67bd",
        "patch": "@@ -7,8 +7,8 @@\n # Exercise API with -disablewallet.\n #\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework import BitcoinTestFramework\n+from util import *\n \n class DisableWalletTest (BitcoinTestFramework):\n "
      },
      {
        "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
        "filename": "qa/rpc-tests/new_test_framework/__init__.py",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/new_test_framework/__init__.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/new_test_framework/__init__.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/new_test_framework/__init__.py?ref=2ec6869d6de5821e98afc28d64d62241d23b67bd"
      },
      {
        "sha": "bc7d655fdfe97c912d945c5d534948dc6848623c",
        "filename": "qa/rpc-tests/new_test_framework/authproxy.py",
        "status": "added",
        "additions": 156,
        "deletions": 0,
        "changes": 156,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/new_test_framework/authproxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/new_test_framework/authproxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/new_test_framework/authproxy.py?ref=2ec6869d6de5821e98afc28d64d62241d23b67bd",
        "patch": "@@ -0,0 +1,156 @@\n+\n+\"\"\"\n+  Copyright 2011 Jeff Garzik\n+\n+  AuthServiceProxy has the following improvements over python-jsonrpc's\n+  ServiceProxy class:\n+\n+  - HTTP connections persist for the life of the AuthServiceProxy object\n+    (if server supports HTTP/1.1)\n+  - sends protocol 'version', per JSON-RPC 1.1\n+  - sends proper, incrementing 'id'\n+  - sends Basic HTTP authentication headers\n+  - parses all JSON numbers that look like floats as Decimal\n+  - uses standard Python json lib\n+\n+  Previous copyright, from python-jsonrpc/jsonrpc/proxy.py:\n+\n+  Copyright (c) 2007 Jan-Klaas Kollhof\n+\n+  This file is part of jsonrpc.\n+\n+  jsonrpc is free software; you can redistribute it and/or modify\n+  it under the terms of the GNU Lesser General Public License as published by\n+  the Free Software Foundation; either version 2.1 of the License, or\n+  (at your option) any later version.\n+\n+  This software is distributed in the hope that it will be useful,\n+  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+  GNU Lesser General Public License for more details.\n+\n+  You should have received a copy of the GNU Lesser General Public License\n+  along with this software; if not, write to the Free Software\n+  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+\"\"\"\n+\n+try:\n+    import http.client as httplib\n+except ImportError:\n+    import httplib\n+import base64\n+import decimal\n+import json\n+import logging\n+try:\n+    import urllib.parse as urlparse\n+except ImportError:\n+    import urlparse\n+\n+USER_AGENT = \"AuthServiceProxy/0.1\"\n+\n+HTTP_TIMEOUT = 30\n+\n+log = logging.getLogger(\"BitcoinRPC\")\n+\n+class JSONRPCException(Exception):\n+    def __init__(self, rpc_error):\n+        Exception.__init__(self)\n+        self.error = rpc_error\n+\n+\n+def EncodeDecimal(o):\n+    if isinstance(o, decimal.Decimal):\n+        return round(o, 8)\n+    raise TypeError(repr(o) + \" is not JSON serializable\")\n+\n+class AuthServiceProxy(object):\n+    __id_count = 0\n+\n+    def __init__(self, service_url, service_name=None, timeout=HTTP_TIMEOUT, connection=None):\n+        self.__service_url = service_url\n+        self.__service_name = service_name\n+        self.__url = urlparse.urlparse(service_url)\n+        if self.__url.port is None:\n+            port = 80\n+        else:\n+            port = self.__url.port\n+        (user, passwd) = (self.__url.username, self.__url.password)\n+        try:\n+            user = user.encode('utf8')\n+        except AttributeError:\n+            pass\n+        try:\n+            passwd = passwd.encode('utf8')\n+        except AttributeError:\n+            pass\n+        authpair = user + b':' + passwd\n+        self.__auth_header = b'Basic ' + base64.b64encode(authpair)\n+\n+        if connection:\n+            # Callables re-use the connection of the original proxy\n+            self.__conn = connection\n+        elif self.__url.scheme == 'https':\n+            self.__conn = httplib.HTTPSConnection(self.__url.hostname, port,\n+                                                  None, None, False,\n+                                                  timeout)\n+        else:\n+            self.__conn = httplib.HTTPConnection(self.__url.hostname, port,\n+                                                 False, timeout)\n+\n+    def __getattr__(self, name):\n+        if name.startswith('__') and name.endswith('__'):\n+            # Python internal stuff\n+            raise AttributeError\n+        if self.__service_name is not None:\n+            name = \"%s.%s\" % (self.__service_name, name)\n+        return AuthServiceProxy(self.__service_url, name, connection=self.__conn)\n+\n+    def __call__(self, *args):\n+        AuthServiceProxy.__id_count += 1\n+\n+        log.debug(\"-%s-> %s %s\"%(AuthServiceProxy.__id_count, self.__service_name,\n+                                 json.dumps(args, default=EncodeDecimal)))\n+        postdata = json.dumps({'version': '1.1',\n+                               'method': self.__service_name,\n+                               'params': args,\n+                               'id': AuthServiceProxy.__id_count}, default=EncodeDecimal)\n+        self.__conn.request('POST', self.__url.path, postdata,\n+                            {'Host': self.__url.hostname,\n+                             'User-Agent': USER_AGENT,\n+                             'Authorization': self.__auth_header,\n+                             'Content-type': 'application/json'})\n+\n+        response = self._get_response()\n+        if response['error'] is not None:\n+            raise JSONRPCException(response['error'])\n+        elif 'result' not in response:\n+            raise JSONRPCException({\n+                'code': -343, 'message': 'missing JSON-RPC result'})\n+        else:\n+            return response['result']\n+\n+    def _batch(self, rpc_call_list):\n+        postdata = json.dumps(list(rpc_call_list), default=EncodeDecimal)\n+        log.debug(\"--> \"+postdata)\n+        self.__conn.request('POST', self.__url.path, postdata,\n+                            {'Host': self.__url.hostname,\n+                             'User-Agent': USER_AGENT,\n+                             'Authorization': self.__auth_header,\n+                             'Content-type': 'application/json'})\n+\n+        return self._get_response()\n+\n+    def _get_response(self):\n+        http_response = self.__conn.getresponse()\n+        if http_response is None:\n+            raise JSONRPCException({\n+                'code': -342, 'message': 'missing HTTP response from server'})\n+\n+        responsedata = http_response.read().decode('utf8')\n+        response = json.loads(responsedata, parse_float=decimal.Decimal)\n+        if \"error\" in response and response[\"error\"] is None:\n+            log.debug(\"<-%s- %s\"%(response[\"id\"], json.dumps(response[\"result\"], default=EncodeDecimal)))\n+        else:\n+            log.debug(\"<-- \"+responsedata)\n+        return response"
      },
      {
        "sha": "b0c58ccd474474cd9507add8fe49255b14a5ea9b",
        "filename": "qa/rpc-tests/new_test_framework/bignum.py",
        "status": "added",
        "additions": 102,
        "deletions": 0,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/new_test_framework/bignum.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/new_test_framework/bignum.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/new_test_framework/bignum.py?ref=2ec6869d6de5821e98afc28d64d62241d23b67bd",
        "patch": "@@ -0,0 +1,102 @@\n+#\n+#\n+# bignum.py\n+#\n+# This file is copied from python-bitcoinlib.\n+#\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+\"\"\"Bignum routines\"\"\"\n+\n+from __future__ import absolute_import, division, print_function, unicode_literals\n+\n+import struct\n+\n+\n+# generic big endian MPI format\n+\n+def bn_bytes(v, have_ext=False):\n+    ext = 0\n+    if have_ext:\n+        ext = 1\n+    return ((v.bit_length()+7)//8) + ext\n+\n+def bn2bin(v):\n+    s = bytearray()\n+    i = bn_bytes(v)\n+    while i > 0:\n+        s.append((v >> ((i-1) * 8)) & 0xff)\n+        i -= 1\n+    return s\n+\n+def bin2bn(s):\n+    l = 0\n+    for ch in s:\n+        l = (l << 8) | ch\n+    return l\n+\n+def bn2mpi(v):\n+    have_ext = False\n+    if v.bit_length() > 0:\n+        have_ext = (v.bit_length() & 0x07) == 0\n+\n+    neg = False\n+    if v < 0:\n+        neg = True\n+        v = -v\n+\n+    s = struct.pack(b\">I\", bn_bytes(v, have_ext))\n+    ext = bytearray()\n+    if have_ext:\n+        ext.append(0)\n+    v_bin = bn2bin(v)\n+    if neg:\n+        if have_ext:\n+            ext[0] |= 0x80\n+        else:\n+            v_bin[0] |= 0x80\n+    return s + ext + v_bin\n+\n+def mpi2bn(s):\n+    if len(s) < 4:\n+        return None\n+    s_size = bytes(s[:4])\n+    v_len = struct.unpack(b\">I\", s_size)[0]\n+    if len(s) != (v_len + 4):\n+        return None\n+    if v_len == 0:\n+        return 0\n+\n+    v_str = bytearray(s[4:])\n+    neg = False\n+    i = v_str[0]\n+    if i & 0x80:\n+        neg = True\n+        i &= ~0x80\n+        v_str[0] = i\n+\n+    v = bin2bn(v_str)\n+\n+    if neg:\n+        return -v\n+    return v\n+\n+# bitcoin-specific little endian format, with implicit size\n+def mpi2vch(s):\n+    r = s[4:]           # strip size\n+    r = r[::-1]         # reverse string, converting BE->LE\n+    return r\n+\n+def bn2vch(v):\n+    return bytes(mpi2vch(bn2mpi(v)))\n+\n+def vch2mpi(s):\n+    r = struct.pack(b\">I\", len(s))   # size\n+    r += s[::-1]            # reverse string, converting LE->BE\n+    return r\n+\n+def vch2bn(s):\n+    return mpi2bn(vch2mpi(s))\n+"
      },
      {
        "sha": "b9775b477cc280cdf8f565427dedb65e325cae47",
        "filename": "qa/rpc-tests/new_test_framework/blockstore.py",
        "status": "added",
        "additions": 138,
        "deletions": 0,
        "changes": 138,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/new_test_framework/blockstore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/new_test_framework/blockstore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/new_test_framework/blockstore.py?ref=2ec6869d6de5821e98afc28d64d62241d23b67bd",
        "patch": "@@ -0,0 +1,138 @@\n+# BlockStore: a helper class that keeps a map of blocks and implements\n+#             helper functions for responding to getheaders and getdata,\n+#             and for constructing a getheaders message\n+#\n+\n+from mininode import *\n+import dbm\n+\n+class BlockStore(object):\n+    def __init__(self, datadir):\n+        self.blockDB = dbm.open(datadir + \"/blocks\", 'c')\n+        self.currentBlock = 0L\n+        self.headers_map = dict()\n+    \n+    def close(self):\n+        self.blockDB.close()\n+\n+    def get(self, blockhash):\n+        serialized_block = None\n+        try:\n+            serialized_block = self.blockDB[repr(blockhash)]\n+        except KeyError:\n+            return None\n+        f = cStringIO.StringIO(serialized_block)\n+        ret = CBlock()\n+        ret.deserialize(f)\n+        ret.calc_sha256()\n+        return ret\n+\n+    def get_header(self, blockhash):\n+        try:\n+            return self.headers_map[blockhash]\n+        except KeyError:\n+            return None\n+\n+    # Note: this pulls full blocks out of the database just to retrieve\n+    # the headers -- perhaps we could keep a separate data structure\n+    # to avoid this overhead.\n+    def headers_for(self, locator, hash_stop, current_tip=None):\n+        if current_tip is None:\n+            current_tip = self.currentBlock\n+        current_block_header = self.get_header(current_tip)\n+        if current_block_header is None:\n+            return None\n+\n+        response = msg_headers()\n+        headersList = [ current_block_header ]\n+        maxheaders = 2000\n+        while (headersList[0].sha256 not in locator.vHave):\n+            prevBlockHash = headersList[0].hashPrevBlock\n+            prevBlockHeader = self.get_header(prevBlockHash)\n+            if prevBlockHeader is not None:\n+                headersList.insert(0, prevBlockHeader)\n+            else:\n+                break\n+        headersList = headersList[:maxheaders] # truncate if we have too many\n+        hashList = [x.sha256 for x in headersList]\n+        index = len(headersList)\n+        if (hash_stop in hashList):\n+            index = hashList.index(hash_stop)+1\n+        response.headers = headersList[:index]\n+        return response\n+\n+    def add_block(self, block):\n+        block.calc_sha256()\n+        try:\n+            self.blockDB[repr(block.sha256)] = bytes(block.serialize())\n+        except TypeError as e:\n+            print \"Unexpected error: \", sys.exc_info()[0], e.args\n+        self.currentBlock = block.sha256\n+        self.headers_map[block.sha256] = CBlockHeader(block)\n+\n+    def add_header(self, header):\n+        self.headers_map[header.sha256] = header\n+\n+    def get_blocks(self, inv):\n+        responses = []\n+        for i in inv:\n+            if (i.type == 2): # MSG_BLOCK\n+                block = self.get(i.hash)\n+                if block is not None:\n+                    responses.append(msg_block(block))\n+        return responses\n+\n+    def get_locator(self, current_tip=None):\n+        if current_tip is None:\n+            current_tip = self.currentBlock\n+        r = []\n+        counter = 0\n+        step = 1\n+        lastBlock = self.get(current_tip)\n+        while lastBlock is not None:\n+            r.append(lastBlock.hashPrevBlock)\n+            for i in range(step):\n+                lastBlock = self.get(lastBlock.hashPrevBlock)\n+                if lastBlock is None:\n+                    break\n+            counter += 1\n+            if counter > 10:\n+                step *= 2\n+        locator = CBlockLocator()\n+        locator.vHave = r\n+        return locator\n+\n+class TxStore(object):\n+    def __init__(self, datadir):\n+        self.txDB = dbm.open(datadir + \"/transactions\", 'c')\n+\n+    def close(self):\n+        self.txDB.close()\n+\n+    def get(self, txhash):\n+        serialized_tx = None\n+        try:\n+            serialized_tx = self.txDB[repr(txhash)]\n+        except KeyError:\n+            return None\n+        f = cStringIO.StringIO(serialized_tx)\n+        ret = CTransaction()\n+        ret.deserialize(f)\n+        ret.calc_sha256()\n+        return ret\n+\n+    def add_transaction(self, tx):\n+        tx.calc_sha256()\n+        try:\n+            self.txDB[repr(tx.sha256)] = bytes(tx.serialize())\n+        except TypeError as e:\n+            print \"Unexpected error: \", sys.exc_info()[0], e.args\n+\n+    def get_transactions(self, inv):\n+        responses = []\n+        for i in inv:\n+            if (i.type == 1): # MSG_TX\n+                tx = self.get(i.hash)\n+                if tx is not None:\n+                    responses.append(msg_tx(tx))\n+        return responses"
      },
      {
        "sha": "59aa8c15cc936626ca87b4654ebd1afe28f44555",
        "filename": "qa/rpc-tests/new_test_framework/blocktools.py",
        "status": "added",
        "additions": 67,
        "deletions": 0,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/new_test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/new_test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/new_test_framework/blocktools.py?ref=2ec6869d6de5821e98afc28d64d62241d23b67bd",
        "patch": "@@ -0,0 +1,67 @@\n+# blocktools.py - utilities for manipulating blocks and transactions\n+#\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from mininode import *\n+from script import CScript, CScriptOp, OP_TRUE, OP_CHECKSIG\n+\n+# Create a block (with regtest difficulty)\n+def create_block(hashprev, coinbase, nTime=None):\n+    block = CBlock()\n+    if nTime is None:\n+        import time\n+        block.nTime = int(time.time()+600)\n+    else:\n+        block.nTime = nTime\n+    block.hashPrevBlock = hashprev\n+    block.nBits = 0x207fffff # Will break after a difficulty adjustment...\n+    block.vtx.append(coinbase)\n+    block.hashMerkleRoot = block.calc_merkle_root()\n+    block.calc_sha256()\n+    return block\n+\n+def serialize_script_num(value):\n+    r = bytearray(0)\n+    if value == 0:\n+        return r\n+    neg = value < 0\n+    absvalue = -value if neg else value\n+    while (absvalue):\n+        r.append(chr(absvalue & 0xff))\n+        absvalue >>= 8\n+    if r[-1] & 0x80:\n+        r.append(0x80 if neg else 0)\n+    elif neg:\n+        r[-1] |= 0x80\n+    return r\n+\n+# Create a coinbase transaction, assuming no miner fees.\n+# If pubkey is passed in, the coinbase output will be a P2PK output;\n+# otherwise an anyone-can-spend output.\n+def create_coinbase(height, pubkey = None):\n+    coinbase = CTransaction()\n+    coinbase.vin.append(CTxIn(COutPoint(0, 0xffffffff), \n+                ser_string(serialize_script_num(height)), 0xffffffff))\n+    coinbaseoutput = CTxOut()\n+    coinbaseoutput.nValue = 50*100000000\n+    halvings = int(height/150) # regtest\n+    coinbaseoutput.nValue >>= halvings\n+    if (pubkey != None):\n+        coinbaseoutput.scriptPubKey = CScript([pubkey, OP_CHECKSIG])\n+    else:\n+        coinbaseoutput.scriptPubKey = CScript([OP_TRUE])\n+    coinbase.vout = [ coinbaseoutput ]\n+    coinbase.calc_sha256()\n+    return coinbase\n+\n+# Create a transaction with an anyone-can-spend output, that spends the\n+# nth output of prevtx.\n+def create_transaction(prevtx, n, sig, value):\n+    tx = CTransaction()\n+    assert(n < len(prevtx.vout))\n+    tx.vin.append(CTxIn(COutPoint(prevtx.sha256, n), sig, 0xffffffff))\n+    tx.vout.append(CTxOut(value, \"\"))\n+    tx.calc_sha256()\n+    return tx"
      },
      {
        "sha": "177ba69c283623e9f3366f5438da98dbe195ec9d",
        "filename": "qa/rpc-tests/new_test_framework/comptool.py",
        "status": "added",
        "additions": 373,
        "deletions": 0,
        "changes": 373,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/new_test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/new_test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/new_test_framework/comptool.py?ref=2ec6869d6de5821e98afc28d64d62241d23b67bd",
        "patch": "@@ -0,0 +1,373 @@\n+#!/usr/bin/env python2\n+#\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from mininode import *\n+from blockstore import BlockStore, TxStore\n+from util import p2p_port\n+\n+'''\n+This is a tool for comparing two or more bitcoinds to each other\n+using a script provided.\n+\n+To use, create a class that implements get_tests(), and pass it in\n+as the test generator to TestManager.  get_tests() should be a python\n+generator that returns TestInstance objects.  See below for definition.\n+'''\n+\n+# TestNode behaves as follows:\n+# Configure with a BlockStore and TxStore\n+# on_inv: log the message but don't request\n+# on_headers: log the chain tip\n+# on_pong: update ping response map (for synchronization)\n+# on_getheaders: provide headers via BlockStore\n+# on_getdata: provide blocks via BlockStore\n+\n+global mininode_lock\n+\n+def wait_until(predicate, attempts=float('inf'), timeout=float('inf')):\n+    attempt = 0\n+    elapsed = 0\n+\n+    while attempt < attempts and elapsed < timeout:\n+        with mininode_lock:\n+            if predicate():\n+                return True\n+        attempt += 1\n+        elapsed += 0.05\n+        time.sleep(0.05)\n+\n+    return False\n+\n+class TestNode(NodeConnCB):\n+\n+    def __init__(self, block_store, tx_store):\n+        NodeConnCB.__init__(self)\n+        self.create_callback_map()\n+        self.conn = None\n+        self.bestblockhash = None\n+        self.block_store = block_store\n+        self.block_request_map = {}\n+        self.tx_store = tx_store\n+        self.tx_request_map = {}\n+\n+        # When the pingmap is non-empty we're waiting for \n+        # a response\n+        self.pingMap = {} \n+        self.lastInv = []\n+        self.closed = False\n+\n+    def on_close(self, conn):\n+        self.closed = True\n+\n+    def add_connection(self, conn):\n+        self.conn = conn\n+\n+    def on_headers(self, conn, message):\n+        if len(message.headers) > 0:\n+            best_header = message.headers[-1]\n+            best_header.calc_sha256()\n+            self.bestblockhash = best_header.sha256\n+\n+    def on_getheaders(self, conn, message):\n+        response = self.block_store.headers_for(message.locator, message.hashstop)\n+        if response is not None:\n+            conn.send_message(response)\n+\n+    def on_getdata(self, conn, message):\n+        [conn.send_message(r) for r in self.block_store.get_blocks(message.inv)]\n+        [conn.send_message(r) for r in self.tx_store.get_transactions(message.inv)]\n+\n+        for i in message.inv:\n+            if i.type == 1:\n+                self.tx_request_map[i.hash] = True\n+            elif i.type == 2:\n+                self.block_request_map[i.hash] = True\n+\n+    def on_inv(self, conn, message):\n+        self.lastInv = [x.hash for x in message.inv]\n+\n+    def on_pong(self, conn, message):\n+        try:\n+            del self.pingMap[message.nonce]\n+        except KeyError:\n+            raise AssertionError(\"Got pong for unknown ping [%s]\" % repr(message))\n+\n+    def send_inv(self, obj):\n+        mtype = 2 if isinstance(obj, CBlock) else 1\n+        self.conn.send_message(msg_inv([CInv(mtype, obj.sha256)]))\n+\n+    def send_getheaders(self):\n+        # We ask for headers from their last tip.\n+        m = msg_getheaders()\n+        m.locator = self.block_store.get_locator(self.bestblockhash)\n+        self.conn.send_message(m)\n+\n+    # This assumes BIP31\n+    def send_ping(self, nonce):\n+        self.pingMap[nonce] = True\n+        self.conn.send_message(msg_ping(nonce))\n+\n+    def received_ping_response(self, nonce):\n+        return nonce not in self.pingMap\n+\n+    def send_mempool(self):\n+        self.lastInv = []\n+        self.conn.send_message(msg_mempool())\n+\n+# TestInstance:\n+#\n+# Instances of these are generated by the test generator, and fed into the\n+# comptool.\n+#\n+# \"blocks_and_transactions\" should be an array of\n+#    [obj, True/False/None, hash/None]:\n+#  - obj is either a CBlock, CBlockHeader, or a CTransaction, and\n+#  - the second value indicates whether the object should be accepted\n+#    into the blockchain or mempool (for tests where we expect a certain\n+#    answer), or \"None\" if we don't expect a certain answer and are just\n+#    comparing the behavior of the nodes being tested.\n+#  - the third value is the hash to test the tip against (if None or omitted,\n+#    use the hash of the block)\n+#  - NOTE: if a block header, no test is performed; instead the header is\n+#    just added to the block_store.  This is to facilitate block delivery\n+#    when communicating with headers-first clients (when withholding an\n+#    intermediate block).\n+# sync_every_block: if True, then each block will be inv'ed, synced, and\n+#    nodes will be tested based on the outcome for the block.  If False,\n+#    then inv's accumulate until all blocks are processed (or max inv size\n+#    is reached) and then sent out in one inv message.  Then the final block\n+#    will be synced across all connections, and the outcome of the final \n+#    block will be tested.\n+# sync_every_tx: analogous to behavior for sync_every_block, except if outcome\n+#    on the final tx is None, then contents of entire mempool are compared\n+#    across all connections.  (If outcome of final tx is specified as true\n+#    or false, then only the last tx is tested against outcome.)\n+\n+class TestInstance(object):\n+    def __init__(self, objects=[], sync_every_block=True, sync_every_tx=False):\n+        self.blocks_and_transactions = objects\n+        self.sync_every_block = sync_every_block\n+        self.sync_every_tx = sync_every_tx\n+\n+class TestManager(object):\n+\n+    def __init__(self, testgen, datadir):\n+        self.test_generator = testgen\n+        self.connections    = []\n+        self.test_nodes     = []\n+        self.block_store    = BlockStore(datadir)\n+        self.tx_store       = TxStore(datadir)\n+        self.ping_counter   = 1\n+\n+    def add_all_connections(self, nodes):\n+        for i in range(len(nodes)):\n+            # Create a p2p connection to each node\n+            test_node = TestNode(self.block_store, self.tx_store)\n+            self.test_nodes.append(test_node)\n+            self.connections.append(NodeConn('127.0.0.1', p2p_port(i), nodes[i], test_node))\n+            # Make sure the TestNode (callback class) has a reference to its\n+            # associated NodeConn\n+            test_node.add_connection(self.connections[-1])\n+\n+    def wait_for_disconnections(self):\n+        def disconnected():\n+            return all(node.closed for node in self.test_nodes)\n+        return wait_until(disconnected, timeout=10)\n+\n+    def wait_for_verack(self):\n+        def veracked():\n+            return all(node.verack_received for node in self.test_nodes)\n+        return wait_until(veracked, timeout=10)\n+\n+    def wait_for_pings(self, counter):\n+        def received_pongs():\n+            return all(node.received_ping_response(counter) for node in self.test_nodes)\n+        return wait_until(received_pongs)\n+\n+    # sync_blocks: Wait for all connections to request the blockhash given\n+    # then send get_headers to find out the tip of each node, and synchronize\n+    # the response by using a ping (and waiting for pong with same nonce).\n+    def sync_blocks(self, blockhash, num_blocks):\n+        def blocks_requested():\n+            return all(\n+                blockhash in node.block_request_map and node.block_request_map[blockhash]\n+                for node in self.test_nodes\n+            )\n+\n+        # --> error if not requested\n+        if not wait_until(blocks_requested, attempts=20*num_blocks):\n+            # print [ c.cb.block_request_map for c in self.connections ]\n+            raise AssertionError(\"Not all nodes requested block\")\n+\n+        # Send getheaders message\n+        [ c.cb.send_getheaders() for c in self.connections ]\n+\n+        # Send ping and wait for response -- synchronization hack\n+        [ c.cb.send_ping(self.ping_counter) for c in self.connections ]\n+        self.wait_for_pings(self.ping_counter)\n+        self.ping_counter += 1\n+\n+    # Analogous to sync_block (see above)\n+    def sync_transaction(self, txhash, num_events):\n+        # Wait for nodes to request transaction (50ms sleep * 20 tries * num_events)\n+        def transaction_requested():\n+            return all(\n+                txhash in node.tx_request_map and node.tx_request_map[txhash]\n+                for node in self.test_nodes\n+            )\n+\n+        # --> error if not requested\n+        if not wait_until(transaction_requested, attempts=20*num_events):\n+            # print [ c.cb.tx_request_map for c in self.connections ]\n+            raise AssertionError(\"Not all nodes requested transaction\")\n+\n+        # Get the mempool\n+        [ c.cb.send_mempool() for c in self.connections ]\n+\n+        # Send ping and wait for response -- synchronization hack\n+        [ c.cb.send_ping(self.ping_counter) for c in self.connections ]\n+        self.wait_for_pings(self.ping_counter)\n+        self.ping_counter += 1\n+\n+        # Sort inv responses from each node\n+        with mininode_lock:\n+            [ c.cb.lastInv.sort() for c in self.connections ]\n+\n+    # Verify that the tip of each connection all agree with each other, and\n+    # with the expected outcome (if given)\n+    def check_results(self, blockhash, outcome):\n+        with mininode_lock:\n+            for c in self.connections:\n+                if outcome is None:\n+                    if c.cb.bestblockhash != self.connections[0].cb.bestblockhash:\n+                        return False\n+                elif ((c.cb.bestblockhash == blockhash) != outcome):\n+                    # print c.cb.bestblockhash, blockhash, outcome\n+                    return False\n+            return True\n+\n+    # Either check that the mempools all agree with each other, or that\n+    # txhash's presence in the mempool matches the outcome specified.\n+    # This is somewhat of a strange comparison, in that we're either comparing\n+    # a particular tx to an outcome, or the entire mempools altogether;\n+    # perhaps it would be useful to add the ability to check explicitly that\n+    # a particular tx's existence in the mempool is the same across all nodes.\n+    def check_mempool(self, txhash, outcome):\n+        with mininode_lock:\n+            for c in self.connections:\n+                if outcome is None:\n+                    # Make sure the mempools agree with each other\n+                    if c.cb.lastInv != self.connections[0].cb.lastInv:\n+                        # print c.rpc.getrawmempool()\n+                        return False\n+                elif ((txhash in c.cb.lastInv) != outcome):\n+                    # print c.rpc.getrawmempool(), c.cb.lastInv\n+                    return False\n+            return True\n+\n+    def run(self):\n+        # Wait until verack is received\n+        self.wait_for_verack()\n+\n+        test_number = 1\n+        for test_instance in self.test_generator.get_tests():\n+            # We use these variables to keep track of the last block\n+            # and last transaction in the tests, which are used\n+            # if we're not syncing on every block or every tx.\n+            [ block, block_outcome, tip ] = [ None, None, None ]\n+            [ tx, tx_outcome ] = [ None, None ]\n+            invqueue = []\n+\n+            for test_obj in test_instance.blocks_and_transactions:\n+                b_or_t = test_obj[0]\n+                outcome = test_obj[1]\n+                # Determine if we're dealing with a block or tx\n+                if isinstance(b_or_t, CBlock):  # Block test runner\n+                    block = b_or_t\n+                    block_outcome = outcome\n+                    tip = block.sha256\n+                    # each test_obj can have an optional third argument\n+                    # to specify the tip we should compare with\n+                    # (default is to use the block being tested)\n+                    if len(test_obj) >= 3:\n+                        tip = test_obj[2]\n+\n+                    # Add to shared block_store, set as current block\n+                    # If there was an open getdata request for the block\n+                    # previously, and we didn't have an entry in the\n+                    # block_store, then immediately deliver, because the\n+                    # node wouldn't send another getdata request while\n+                    # the earlier one is outstanding.\n+                    first_block_with_hash = True\n+                    if self.block_store.get(block.sha256) is not None:\n+                        first_block_with_hash = False\n+                    with mininode_lock:\n+                        self.block_store.add_block(block)\n+                        for c in self.connections:\n+                            if first_block_with_hash and block.sha256 in c.cb.block_request_map and c.cb.block_request_map[block.sha256] == True:\n+                                # There was a previous request for this block hash\n+                                # Most likely, we delivered a header for this block\n+                                # but never had the block to respond to the getdata\n+                                c.send_message(msg_block(block))\n+                            else:\n+                                c.cb.block_request_map[block.sha256] = False\n+                    # Either send inv's to each node and sync, or add\n+                    # to invqueue for later inv'ing.\n+                    if (test_instance.sync_every_block):\n+                        [ c.cb.send_inv(block) for c in self.connections ]\n+                        self.sync_blocks(block.sha256, 1)\n+                        if (not self.check_results(tip, outcome)):\n+                            raise AssertionError(\"Test failed at test %d\" % test_number)\n+                    else:\n+                        invqueue.append(CInv(2, block.sha256))\n+                elif isinstance(b_or_t, CBlockHeader):\n+                    block_header = b_or_t\n+                    self.block_store.add_header(block_header)\n+                else:  # Tx test runner\n+                    assert(isinstance(b_or_t, CTransaction))\n+                    tx = b_or_t\n+                    tx_outcome = outcome\n+                    # Add to shared tx store and clear map entry\n+                    with mininode_lock:\n+                        self.tx_store.add_transaction(tx)\n+                        for c in self.connections:\n+                            c.cb.tx_request_map[tx.sha256] = False\n+                    # Again, either inv to all nodes or save for later\n+                    if (test_instance.sync_every_tx):\n+                        [ c.cb.send_inv(tx) for c in self.connections ]\n+                        self.sync_transaction(tx.sha256, 1)\n+                        if (not self.check_mempool(tx.sha256, outcome)):\n+                            raise AssertionError(\"Test failed at test %d\" % test_number)\n+                    else:\n+                        invqueue.append(CInv(1, tx.sha256))\n+                # Ensure we're not overflowing the inv queue\n+                if len(invqueue) == MAX_INV_SZ:\n+                    [ c.send_message(msg_inv(invqueue)) for c in self.connections ]\n+                    invqueue = []\n+\n+            # Do final sync if we weren't syncing on every block or every tx.\n+            if (not test_instance.sync_every_block and block is not None):\n+                if len(invqueue) > 0:\n+                    [ c.send_message(msg_inv(invqueue)) for c in self.connections ]\n+                    invqueue = []\n+                self.sync_blocks(block.sha256, len(test_instance.blocks_and_transactions))\n+                if (not self.check_results(tip, block_outcome)):\n+                    raise AssertionError(\"Block test failed at test %d\" % test_number)\n+            if (not test_instance.sync_every_tx and tx is not None):\n+                if len(invqueue) > 0:\n+                    [ c.send_message(msg_inv(invqueue)) for c in self.connections ]\n+                    invqueue = []\n+                self.sync_transaction(tx.sha256, len(test_instance.blocks_and_transactions))\n+                if (not self.check_mempool(tx.sha256, tx_outcome)):\n+                    raise AssertionError(\"Mempool test failed at test %d\" % test_number)\n+\n+            print \"Test %d: PASS\" % test_number, [ c.rpc.getblockcount() for c in self.connections ]\n+            test_number += 1\n+\n+        [ c.disconnect_node() for c in self.connections ]\n+        self.wait_for_disconnections()\n+        self.block_store.close()\n+        self.tx_store.close()"
      },
      {
        "sha": "ba3038fe044f49f54e0d6286e22ae9d4cbcde7df",
        "filename": "qa/rpc-tests/new_test_framework/key.py",
        "status": "added",
        "additions": 215,
        "deletions": 0,
        "changes": 215,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/new_test_framework/key.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/new_test_framework/key.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/new_test_framework/key.py?ref=2ec6869d6de5821e98afc28d64d62241d23b67bd",
        "patch": "@@ -0,0 +1,215 @@\n+# Copyright (c) 2011 Sam Rushing\n+#\n+# key.py - OpenSSL wrapper\n+#\n+# This file is modified from python-bitcoinlib.\n+#\n+\n+\"\"\"ECC secp256k1 crypto routines\n+\n+WARNING: This module does not mlock() secrets; your private keys may end up on\n+disk in swap! Use with caution!\n+\"\"\"\n+\n+import ctypes\n+import ctypes.util\n+import hashlib\n+import sys\n+\n+ssl = ctypes.cdll.LoadLibrary(ctypes.util.find_library ('ssl') or 'libeay32')\n+\n+ssl.BN_new.restype = ctypes.c_void_p\n+ssl.BN_new.argtypes = []\n+\n+ssl.BN_bin2bn.restype = ctypes.c_void_p\n+ssl.BN_bin2bn.argtypes = [ctypes.c_char_p, ctypes.c_int, ctypes.c_void_p]\n+\n+ssl.BN_CTX_free.restype = None\n+ssl.BN_CTX_free.argtypes = [ctypes.c_void_p]\n+\n+ssl.BN_CTX_new.restype = ctypes.c_void_p\n+ssl.BN_CTX_new.argtypes = []\n+\n+ssl.ECDH_compute_key.restype = ctypes.c_int\n+ssl.ECDH_compute_key.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.c_void_p, ctypes.c_void_p]\n+\n+ssl.ECDSA_sign.restype = ctypes.c_int\n+ssl.ECDSA_sign.argtypes = [ctypes.c_int, ctypes.c_void_p, ctypes.c_int, ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p]\n+\n+ssl.ECDSA_verify.restype = ctypes.c_int\n+ssl.ECDSA_verify.argtypes = [ctypes.c_int, ctypes.c_void_p, ctypes.c_int, ctypes.c_void_p, ctypes.c_int, ctypes.c_void_p]\n+\n+ssl.EC_KEY_free.restype = None\n+ssl.EC_KEY_free.argtypes = [ctypes.c_void_p]\n+\n+ssl.EC_KEY_new_by_curve_name.restype = ctypes.c_void_p\n+ssl.EC_KEY_new_by_curve_name.argtypes = [ctypes.c_int]\n+\n+ssl.EC_KEY_get0_group.restype = ctypes.c_void_p\n+ssl.EC_KEY_get0_group.argtypes = [ctypes.c_void_p]\n+\n+ssl.EC_KEY_get0_public_key.restype = ctypes.c_void_p\n+ssl.EC_KEY_get0_public_key.argtypes = [ctypes.c_void_p]\n+\n+ssl.EC_KEY_set_private_key.restype = ctypes.c_int\n+ssl.EC_KEY_set_private_key.argtypes = [ctypes.c_void_p, ctypes.c_void_p]\n+\n+ssl.EC_KEY_set_conv_form.restype = None\n+ssl.EC_KEY_set_conv_form.argtypes = [ctypes.c_void_p, ctypes.c_int]\n+\n+ssl.EC_KEY_set_public_key.restype = ctypes.c_int\n+ssl.EC_KEY_set_public_key.argtypes = [ctypes.c_void_p, ctypes.c_void_p]\n+\n+ssl.i2o_ECPublicKey.restype = ctypes.c_void_p\n+ssl.i2o_ECPublicKey.argtypes = [ctypes.c_void_p, ctypes.c_void_p]\n+\n+ssl.EC_POINT_new.restype = ctypes.c_void_p\n+ssl.EC_POINT_new.argtypes = [ctypes.c_void_p]\n+\n+ssl.EC_POINT_free.restype = None\n+ssl.EC_POINT_free.argtypes = [ctypes.c_void_p]\n+\n+ssl.EC_POINT_mul.restype = ctypes.c_int\n+ssl.EC_POINT_mul.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p]\n+\n+# this specifies the curve used with ECDSA.\n+NID_secp256k1 = 714 # from openssl/obj_mac.h\n+\n+# Thx to Sam Devlin for the ctypes magic 64-bit fix.\n+def _check_result(val, func, args):\n+    if val == 0:\n+        raise ValueError\n+    else:\n+        return ctypes.c_void_p (val)\n+\n+ssl.EC_KEY_new_by_curve_name.restype = ctypes.c_void_p\n+ssl.EC_KEY_new_by_curve_name.errcheck = _check_result\n+\n+class CECKey(object):\n+    \"\"\"Wrapper around OpenSSL's EC_KEY\"\"\"\n+\n+    POINT_CONVERSION_COMPRESSED = 2\n+    POINT_CONVERSION_UNCOMPRESSED = 4\n+\n+    def __init__(self):\n+        self.k = ssl.EC_KEY_new_by_curve_name(NID_secp256k1)\n+\n+    def __del__(self):\n+        if ssl:\n+            ssl.EC_KEY_free(self.k)\n+        self.k = None\n+\n+    def set_secretbytes(self, secret):\n+        priv_key = ssl.BN_bin2bn(secret, 32, ssl.BN_new())\n+        group = ssl.EC_KEY_get0_group(self.k)\n+        pub_key = ssl.EC_POINT_new(group)\n+        ctx = ssl.BN_CTX_new()\n+        if not ssl.EC_POINT_mul(group, pub_key, priv_key, None, None, ctx):\n+            raise ValueError(\"Could not derive public key from the supplied secret.\")\n+        ssl.EC_POINT_mul(group, pub_key, priv_key, None, None, ctx)\n+        ssl.EC_KEY_set_private_key(self.k, priv_key)\n+        ssl.EC_KEY_set_public_key(self.k, pub_key)\n+        ssl.EC_POINT_free(pub_key)\n+        ssl.BN_CTX_free(ctx)\n+        return self.k\n+\n+    def set_privkey(self, key):\n+        self.mb = ctypes.create_string_buffer(key)\n+        return ssl.d2i_ECPrivateKey(ctypes.byref(self.k), ctypes.byref(ctypes.pointer(self.mb)), len(key))\n+\n+    def set_pubkey(self, key):\n+        self.mb = ctypes.create_string_buffer(key)\n+        return ssl.o2i_ECPublicKey(ctypes.byref(self.k), ctypes.byref(ctypes.pointer(self.mb)), len(key))\n+\n+    def get_privkey(self):\n+        size = ssl.i2d_ECPrivateKey(self.k, 0)\n+        mb_pri = ctypes.create_string_buffer(size)\n+        ssl.i2d_ECPrivateKey(self.k, ctypes.byref(ctypes.pointer(mb_pri)))\n+        return mb_pri.raw\n+\n+    def get_pubkey(self):\n+        size = ssl.i2o_ECPublicKey(self.k, 0)\n+        mb = ctypes.create_string_buffer(size)\n+        ssl.i2o_ECPublicKey(self.k, ctypes.byref(ctypes.pointer(mb)))\n+        return mb.raw\n+\n+    def get_raw_ecdh_key(self, other_pubkey):\n+        ecdh_keybuffer = ctypes.create_string_buffer(32)\n+        r = ssl.ECDH_compute_key(ctypes.pointer(ecdh_keybuffer), 32,\n+                                 ssl.EC_KEY_get0_public_key(other_pubkey.k),\n+                                 self.k, 0)\n+        if r != 32:\n+            raise Exception('CKey.get_ecdh_key(): ECDH_compute_key() failed')\n+        return ecdh_keybuffer.raw\n+\n+    def get_ecdh_key(self, other_pubkey, kdf=lambda k: hashlib.sha256(k).digest()):\n+        # FIXME: be warned it's not clear what the kdf should be as a default\n+        r = self.get_raw_ecdh_key(other_pubkey)\n+        return kdf(r)\n+\n+    def sign(self, hash):\n+        # FIXME: need unit tests for below cases\n+        if not isinstance(hash, bytes):\n+            raise TypeError('Hash must be bytes instance; got %r' % hash.__class__)\n+        if len(hash) != 32:\n+            raise ValueError('Hash must be exactly 32 bytes long')\n+\n+        sig_size0 = ctypes.c_uint32()\n+        sig_size0.value = ssl.ECDSA_size(self.k)\n+        mb_sig = ctypes.create_string_buffer(sig_size0.value)\n+        result = ssl.ECDSA_sign(0, hash, len(hash), mb_sig, ctypes.byref(sig_size0), self.k)\n+        assert 1 == result\n+        return mb_sig.raw[:sig_size0.value]\n+\n+    def verify(self, hash, sig):\n+        \"\"\"Verify a DER signature\"\"\"\n+        return ssl.ECDSA_verify(0, hash, len(hash), sig, len(sig), self.k) == 1\n+\n+    def set_compressed(self, compressed):\n+        if compressed:\n+            form = self.POINT_CONVERSION_COMPRESSED\n+        else:\n+            form = self.POINT_CONVERSION_UNCOMPRESSED\n+        ssl.EC_KEY_set_conv_form(self.k, form)\n+\n+\n+class CPubKey(bytes):\n+    \"\"\"An encapsulated public key\n+\n+    Attributes:\n+\n+    is_valid      - Corresponds to CPubKey.IsValid()\n+    is_fullyvalid - Corresponds to CPubKey.IsFullyValid()\n+    is_compressed - Corresponds to CPubKey.IsCompressed()\n+    \"\"\"\n+\n+    def __new__(cls, buf, _cec_key=None):\n+        self = super(CPubKey, cls).__new__(cls, buf)\n+        if _cec_key is None:\n+            _cec_key = CECKey()\n+        self._cec_key = _cec_key\n+        self.is_fullyvalid = _cec_key.set_pubkey(self) != 0\n+        return self\n+\n+    @property\n+    def is_valid(self):\n+        return len(self) > 0\n+\n+    @property\n+    def is_compressed(self):\n+        return len(self) == 33\n+\n+    def verify(self, hash, sig):\n+        return self._cec_key.verify(hash, sig)\n+\n+    def __str__(self):\n+        return repr(self)\n+\n+    def __repr__(self):\n+        # Always have represent as b'<secret>' so test cases don't have to\n+        # change for py2/3\n+        if sys.version > '3':\n+            return '%s(%s)' % (self.__class__.__name__, super(CPubKey, self).__repr__())\n+        else:\n+            return '%s(b%s)' % (self.__class__.__name__, super(CPubKey, self).__repr__())\n+"
      },
      {
        "sha": "b7d78e74fa83d0b003d96a4f77421c8d13db1cba",
        "filename": "qa/rpc-tests/new_test_framework/mininode.py",
        "status": "added",
        "additions": 1256,
        "deletions": 0,
        "changes": 1256,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/new_test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/new_test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/new_test_framework/mininode.py?ref=2ec6869d6de5821e98afc28d64d62241d23b67bd",
        "patch": "@@ -0,0 +1,1256 @@\n+# mininode.py - Bitcoin P2P network half-a-node\n+#\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+# This python code was modified from ArtForz' public domain  half-a-node, as\n+# found in the mini-node branch of http://github.com/jgarzik/pynode.\n+#\n+# NodeConn: an object which manages p2p connectivity to a bitcoin node\n+# NodeConnCB: a base class that describes the interface for receiving\n+#             callbacks with network messages from a NodeConn\n+# CBlock, CTransaction, CBlockHeader, CTxIn, CTxOut, etc....:\n+#     data structures that should map to corresponding structures in\n+#     bitcoin/primitives\n+# msg_block, msg_tx, msg_headers, etc.:\n+#     data structures that represent network messages\n+# ser_*, deser_*: functions that handle serialization/deserialization\n+\n+\n+import struct\n+import socket\n+import asyncore\n+import binascii\n+import time\n+import sys\n+import random\n+import cStringIO\n+import hashlib\n+from threading import RLock\n+from threading import Thread\n+import logging\n+import copy\n+\n+BIP0031_VERSION = 60000\n+MY_VERSION = 60001  # past bip-31 for ping/pong\n+MY_SUBVERSION = \"/python-mininode-tester:0.0.1/\"\n+\n+MAX_INV_SZ = 50000\n+\n+# Keep our own socket map for asyncore, so that we can track disconnects\n+# ourselves (to workaround an issue with closing an asyncore socket when \n+# using select)\n+mininode_socket_map = dict()\n+\n+# One lock for synchronizing all data access between the networking thread (see\n+# NetworkThread below) and the thread running the test logic.  For simplicity,\n+# NodeConn acquires this lock whenever delivering a message to to a NodeConnCB,\n+# and whenever adding anything to the send buffer (in send_message()).  This\n+# lock should be acquired in the thread running the test logic to synchronize\n+# access to any data shared with the NodeConnCB or NodeConn.\n+mininode_lock = RLock()\n+\n+# Serialization/deserialization tools\n+def sha256(s):\n+    return hashlib.new('sha256', s).digest()\n+\n+\n+def hash256(s):\n+    return sha256(sha256(s))\n+\n+\n+def deser_string(f):\n+    nit = struct.unpack(\"<B\", f.read(1))[0]\n+    if nit == 253:\n+        nit = struct.unpack(\"<H\", f.read(2))[0]\n+    elif nit == 254:\n+        nit = struct.unpack(\"<I\", f.read(4))[0]\n+    elif nit == 255:\n+        nit = struct.unpack(\"<Q\", f.read(8))[0]\n+    return f.read(nit)\n+\n+\n+def ser_string(s):\n+    if len(s) < 253:\n+        return chr(len(s)) + s\n+    elif len(s) < 0x10000:\n+        return chr(253) + struct.pack(\"<H\", len(s)) + s\n+    elif len(s) < 0x100000000L:\n+        return chr(254) + struct.pack(\"<I\", len(s)) + s\n+    return chr(255) + struct.pack(\"<Q\", len(s)) + s\n+\n+\n+def deser_uint256(f):\n+    r = 0L\n+    for i in xrange(8):\n+        t = struct.unpack(\"<I\", f.read(4))[0]\n+        r += t << (i * 32)\n+    return r\n+\n+\n+def ser_uint256(u):\n+    rs = \"\"\n+    for i in xrange(8):\n+        rs += struct.pack(\"<I\", u & 0xFFFFFFFFL)\n+        u >>= 32\n+    return rs\n+\n+\n+def uint256_from_str(s):\n+    r = 0L\n+    t = struct.unpack(\"<IIIIIIII\", s[:32])\n+    for i in xrange(8):\n+        r += t[i] << (i * 32)\n+    return r\n+\n+\n+def uint256_from_compact(c):\n+    nbytes = (c >> 24) & 0xFF\n+    v = (c & 0xFFFFFFL) << (8 * (nbytes - 3))\n+    return v\n+\n+\n+def deser_vector(f, c):\n+    nit = struct.unpack(\"<B\", f.read(1))[0]\n+    if nit == 253:\n+        nit = struct.unpack(\"<H\", f.read(2))[0]\n+    elif nit == 254:\n+        nit = struct.unpack(\"<I\", f.read(4))[0]\n+    elif nit == 255:\n+        nit = struct.unpack(\"<Q\", f.read(8))[0]\n+    r = []\n+    for i in xrange(nit):\n+        t = c()\n+        t.deserialize(f)\n+        r.append(t)\n+    return r\n+\n+\n+def ser_vector(l):\n+    r = \"\"\n+    if len(l) < 253:\n+        r = chr(len(l))\n+    elif len(l) < 0x10000:\n+        r = chr(253) + struct.pack(\"<H\", len(l))\n+    elif len(l) < 0x100000000L:\n+        r = chr(254) + struct.pack(\"<I\", len(l))\n+    else:\n+        r = chr(255) + struct.pack(\"<Q\", len(l))\n+    for i in l:\n+        r += i.serialize()\n+    return r\n+\n+\n+def deser_uint256_vector(f):\n+    nit = struct.unpack(\"<B\", f.read(1))[0]\n+    if nit == 253:\n+        nit = struct.unpack(\"<H\", f.read(2))[0]\n+    elif nit == 254:\n+        nit = struct.unpack(\"<I\", f.read(4))[0]\n+    elif nit == 255:\n+        nit = struct.unpack(\"<Q\", f.read(8))[0]\n+    r = []\n+    for i in xrange(nit):\n+        t = deser_uint256(f)\n+        r.append(t)\n+    return r\n+\n+\n+def ser_uint256_vector(l):\n+    r = \"\"\n+    if len(l) < 253:\n+        r = chr(len(l))\n+    elif len(l) < 0x10000:\n+        r = chr(253) + struct.pack(\"<H\", len(l))\n+    elif len(l) < 0x100000000L:\n+        r = chr(254) + struct.pack(\"<I\", len(l))\n+    else:\n+        r = chr(255) + struct.pack(\"<Q\", len(l))\n+    for i in l:\n+        r += ser_uint256(i)\n+    return r\n+\n+\n+def deser_string_vector(f):\n+    nit = struct.unpack(\"<B\", f.read(1))[0]\n+    if nit == 253:\n+        nit = struct.unpack(\"<H\", f.read(2))[0]\n+    elif nit == 254:\n+        nit = struct.unpack(\"<I\", f.read(4))[0]\n+    elif nit == 255:\n+        nit = struct.unpack(\"<Q\", f.read(8))[0]\n+    r = []\n+    for i in xrange(nit):\n+        t = deser_string(f)\n+        r.append(t)\n+    return r\n+\n+\n+def ser_string_vector(l):\n+    r = \"\"\n+    if len(l) < 253:\n+        r = chr(len(l))\n+    elif len(l) < 0x10000:\n+        r = chr(253) + struct.pack(\"<H\", len(l))\n+    elif len(l) < 0x100000000L:\n+        r = chr(254) + struct.pack(\"<I\", len(l))\n+    else:\n+        r = chr(255) + struct.pack(\"<Q\", len(l))\n+    for sv in l:\n+        r += ser_string(sv)\n+    return r\n+\n+\n+def deser_int_vector(f):\n+    nit = struct.unpack(\"<B\", f.read(1))[0]\n+    if nit == 253:\n+        nit = struct.unpack(\"<H\", f.read(2))[0]\n+    elif nit == 254:\n+        nit = struct.unpack(\"<I\", f.read(4))[0]\n+    elif nit == 255:\n+        nit = struct.unpack(\"<Q\", f.read(8))[0]\n+    r = []\n+    for i in xrange(nit):\n+        t = struct.unpack(\"<i\", f.read(4))[0]\n+        r.append(t)\n+    return r\n+\n+\n+def ser_int_vector(l):\n+    r = \"\"\n+    if len(l) < 253:\n+        r = chr(len(l))\n+    elif len(l) < 0x10000:\n+        r = chr(253) + struct.pack(\"<H\", len(l))\n+    elif len(l) < 0x100000000L:\n+        r = chr(254) + struct.pack(\"<I\", len(l))\n+    else:\n+        r = chr(255) + struct.pack(\"<Q\", len(l))\n+    for i in l:\n+        r += struct.pack(\"<i\", i)\n+    return r\n+\n+\n+# Objects that map to bitcoind objects, which can be serialized/deserialized\n+\n+class CAddress(object):\n+    def __init__(self):\n+        self.nServices = 1\n+        self.pchReserved = \"\\x00\" * 10 + \"\\xff\" * 2\n+        self.ip = \"0.0.0.0\"\n+        self.port = 0\n+\n+    def deserialize(self, f):\n+        self.nServices = struct.unpack(\"<Q\", f.read(8))[0]\n+        self.pchReserved = f.read(12)\n+        self.ip = socket.inet_ntoa(f.read(4))\n+        self.port = struct.unpack(\">H\", f.read(2))[0]\n+\n+    def serialize(self):\n+        r = \"\"\n+        r += struct.pack(\"<Q\", self.nServices)\n+        r += self.pchReserved\n+        r += socket.inet_aton(self.ip)\n+        r += struct.pack(\">H\", self.port)\n+        return r\n+\n+    def __repr__(self):\n+        return \"CAddress(nServices=%i ip=%s port=%i)\" % (self.nServices,\n+                                                         self.ip, self.port)\n+\n+\n+class CInv(object):\n+    typemap = {\n+        0: \"Error\",\n+        1: \"TX\",\n+        2: \"Block\"}\n+\n+    def __init__(self, t=0, h=0L):\n+        self.type = t\n+        self.hash = h\n+\n+    def deserialize(self, f):\n+        self.type = struct.unpack(\"<i\", f.read(4))[0]\n+        self.hash = deser_uint256(f)\n+\n+    def serialize(self):\n+        r = \"\"\n+        r += struct.pack(\"<i\", self.type)\n+        r += ser_uint256(self.hash)\n+        return r\n+\n+    def __repr__(self):\n+        return \"CInv(type=%s hash=%064x)\" \\\n+            % (self.typemap[self.type], self.hash)\n+\n+\n+class CBlockLocator(object):\n+    def __init__(self):\n+        self.nVersion = MY_VERSION\n+        self.vHave = []\n+\n+    def deserialize(self, f):\n+        self.nVersion = struct.unpack(\"<i\", f.read(4))[0]\n+        self.vHave = deser_uint256_vector(f)\n+\n+    def serialize(self):\n+        r = \"\"\n+        r += struct.pack(\"<i\", self.nVersion)\n+        r += ser_uint256_vector(self.vHave)\n+        return r\n+\n+    def __repr__(self):\n+        return \"CBlockLocator(nVersion=%i vHave=%s)\" \\\n+            % (self.nVersion, repr(self.vHave))\n+\n+\n+class COutPoint(object):\n+    def __init__(self, hash=0, n=0):\n+        self.hash = hash\n+        self.n = n\n+\n+    def deserialize(self, f):\n+        self.hash = deser_uint256(f)\n+        self.n = struct.unpack(\"<I\", f.read(4))[0]\n+\n+    def serialize(self):\n+        r = \"\"\n+        r += ser_uint256(self.hash)\n+        r += struct.pack(\"<I\", self.n)\n+        return r\n+\n+    def __repr__(self):\n+        return \"COutPoint(hash=%064x n=%i)\" % (self.hash, self.n)\n+\n+\n+class CTxIn(object):\n+    def __init__(self, outpoint=None, scriptSig=\"\", nSequence=0):\n+        if outpoint is None:\n+            self.prevout = COutPoint()\n+        else:\n+            self.prevout = outpoint\n+        self.scriptSig = scriptSig\n+        self.nSequence = nSequence\n+\n+    def deserialize(self, f):\n+        self.prevout = COutPoint()\n+        self.prevout.deserialize(f)\n+        self.scriptSig = deser_string(f)\n+        self.nSequence = struct.unpack(\"<I\", f.read(4))[0]\n+\n+    def serialize(self):\n+        r = \"\"\n+        r += self.prevout.serialize()\n+        r += ser_string(self.scriptSig)\n+        r += struct.pack(\"<I\", self.nSequence)\n+        return r\n+\n+    def __repr__(self):\n+        return \"CTxIn(prevout=%s scriptSig=%s nSequence=%i)\" \\\n+            % (repr(self.prevout), binascii.hexlify(self.scriptSig),\n+               self.nSequence)\n+\n+\n+class CTxOut(object):\n+    def __init__(self, nValue=0, scriptPubKey=\"\"):\n+        self.nValue = nValue\n+        self.scriptPubKey = scriptPubKey\n+\n+    def deserialize(self, f):\n+        self.nValue = struct.unpack(\"<q\", f.read(8))[0]\n+        self.scriptPubKey = deser_string(f)\n+\n+    def serialize(self):\n+        r = \"\"\n+        r += struct.pack(\"<q\", self.nValue)\n+        r += ser_string(self.scriptPubKey)\n+        return r\n+\n+    def __repr__(self):\n+        return \"CTxOut(nValue=%i.%08i scriptPubKey=%s)\" \\\n+            % (self.nValue // 100000000, self.nValue % 100000000,\n+               binascii.hexlify(self.scriptPubKey))\n+\n+\n+class CTransaction(object):\n+    def __init__(self, tx=None):\n+        if tx is None:\n+            self.nVersion = 1\n+            self.vin = []\n+            self.vout = []\n+            self.nLockTime = 0\n+            self.sha256 = None\n+            self.hash = None\n+        else:\n+            self.nVersion = tx.nVersion\n+            self.vin = copy.deepcopy(tx.vin)\n+            self.vout = copy.deepcopy(tx.vout)\n+            self.nLockTime = tx.nLockTime\n+            self.sha256 = None\n+            self.hash = None\n+\n+    def deserialize(self, f):\n+        self.nVersion = struct.unpack(\"<i\", f.read(4))[0]\n+        self.vin = deser_vector(f, CTxIn)\n+        self.vout = deser_vector(f, CTxOut)\n+        self.nLockTime = struct.unpack(\"<I\", f.read(4))[0]\n+        self.sha256 = None\n+        self.hash = None\n+\n+    def serialize(self):\n+        r = \"\"\n+        r += struct.pack(\"<i\", self.nVersion)\n+        r += ser_vector(self.vin)\n+        r += ser_vector(self.vout)\n+        r += struct.pack(\"<I\", self.nLockTime)\n+        return r\n+\n+    def rehash(self):\n+        self.sha256 = None\n+        self.calc_sha256()\n+\n+    def calc_sha256(self):\n+        if self.sha256 is None:\n+            self.sha256 = uint256_from_str(hash256(self.serialize()))\n+        self.hash = hash256(self.serialize())[::-1].encode('hex_codec')\n+\n+    def is_valid(self):\n+        self.calc_sha256()\n+        for tout in self.vout:\n+            if tout.nValue < 0 or tout.nValue > 21000000L * 100000000L:\n+                return False\n+        return True\n+\n+    def __repr__(self):\n+        return \"CTransaction(nVersion=%i vin=%s vout=%s nLockTime=%i)\" \\\n+            % (self.nVersion, repr(self.vin), repr(self.vout), self.nLockTime)\n+\n+\n+class CBlockHeader(object):\n+    def __init__(self, header=None):\n+        if header is None:\n+            self.set_null()\n+        else:\n+            self.nVersion = header.nVersion\n+            self.hashPrevBlock = header.hashPrevBlock\n+            self.hashMerkleRoot = header.hashMerkleRoot\n+            self.nTime = header.nTime\n+            self.nBits = header.nBits\n+            self.nNonce = header.nNonce\n+            self.sha256 = header.sha256\n+            self.hash = header.hash\n+            self.calc_sha256()\n+\n+    def set_null(self):\n+        self.nVersion = 1\n+        self.hashPrevBlock = 0\n+        self.hashMerkleRoot = 0\n+        self.nTime = 0\n+        self.nBits = 0\n+        self.nNonce = 0\n+        self.sha256 = None\n+        self.hash = None\n+\n+    def deserialize(self, f):\n+        self.nVersion = struct.unpack(\"<i\", f.read(4))[0]\n+        self.hashPrevBlock = deser_uint256(f)\n+        self.hashMerkleRoot = deser_uint256(f)\n+        self.nTime = struct.unpack(\"<I\", f.read(4))[0]\n+        self.nBits = struct.unpack(\"<I\", f.read(4))[0]\n+        self.nNonce = struct.unpack(\"<I\", f.read(4))[0]\n+        self.sha256 = None\n+        self.hash = None\n+\n+    def serialize(self):\n+        r = \"\"\n+        r += struct.pack(\"<i\", self.nVersion)\n+        r += ser_uint256(self.hashPrevBlock)\n+        r += ser_uint256(self.hashMerkleRoot)\n+        r += struct.pack(\"<I\", self.nTime)\n+        r += struct.pack(\"<I\", self.nBits)\n+        r += struct.pack(\"<I\", self.nNonce)\n+        return r\n+\n+    def calc_sha256(self):\n+        if self.sha256 is None:\n+            r = \"\"\n+            r += struct.pack(\"<i\", self.nVersion)\n+            r += ser_uint256(self.hashPrevBlock)\n+            r += ser_uint256(self.hashMerkleRoot)\n+            r += struct.pack(\"<I\", self.nTime)\n+            r += struct.pack(\"<I\", self.nBits)\n+            r += struct.pack(\"<I\", self.nNonce)\n+            self.sha256 = uint256_from_str(hash256(r))\n+            self.hash = hash256(r)[::-1].encode('hex_codec')\n+\n+    def rehash(self):\n+        self.sha256 = None\n+        self.calc_sha256()\n+        return self.sha256\n+\n+    def __repr__(self):\n+        return \"CBlockHeader(nVersion=%i hashPrevBlock=%064x hashMerkleRoot=%064x nTime=%s nBits=%08x nNonce=%08x)\" \\\n+            % (self.nVersion, self.hashPrevBlock, self.hashMerkleRoot,\n+               time.ctime(self.nTime), self.nBits, self.nNonce)\n+\n+\n+class CBlock(CBlockHeader):\n+    def __init__(self, header=None):\n+        super(CBlock, self).__init__(header)\n+        self.vtx = []\n+\n+    def deserialize(self, f):\n+        super(CBlock, self).deserialize(f)\n+        self.vtx = deser_vector(f, CTransaction)\n+\n+    def serialize(self):\n+        r = \"\"\n+        r += super(CBlock, self).serialize()\n+        r += ser_vector(self.vtx)\n+        return r\n+\n+    def calc_merkle_root(self):\n+        hashes = []\n+        for tx in self.vtx:\n+            tx.calc_sha256()\n+            hashes.append(ser_uint256(tx.sha256))\n+        while len(hashes) > 1:\n+            newhashes = []\n+            for i in xrange(0, len(hashes), 2):\n+                i2 = min(i+1, len(hashes)-1)\n+                newhashes.append(hash256(hashes[i] + hashes[i2]))\n+            hashes = newhashes\n+        return uint256_from_str(hashes[0])\n+\n+    def is_valid(self):\n+        self.calc_sha256()\n+        target = uint256_from_compact(self.nBits)\n+        if self.sha256 > target:\n+            return False\n+        for tx in self.vtx:\n+            if not tx.is_valid():\n+                return False\n+        if self.calc_merkle_root() != self.hashMerkleRoot:\n+            return False\n+        return True\n+\n+    def solve(self):\n+        self.calc_sha256()\n+        target = uint256_from_compact(self.nBits)\n+        while self.sha256 > target:\n+            self.nNonce += 1\n+            self.rehash()\n+\n+    def __repr__(self):\n+        return \"CBlock(nVersion=%i hashPrevBlock=%064x hashMerkleRoot=%064x nTime=%s nBits=%08x nNonce=%08x vtx=%s)\" \\\n+            % (self.nVersion, self.hashPrevBlock, self.hashMerkleRoot,\n+               time.ctime(self.nTime), self.nBits, self.nNonce, repr(self.vtx))\n+\n+\n+class CUnsignedAlert(object):\n+    def __init__(self):\n+        self.nVersion = 1\n+        self.nRelayUntil = 0\n+        self.nExpiration = 0\n+        self.nID = 0\n+        self.nCancel = 0\n+        self.setCancel = []\n+        self.nMinVer = 0\n+        self.nMaxVer = 0\n+        self.setSubVer = []\n+        self.nPriority = 0\n+        self.strComment = \"\"\n+        self.strStatusBar = \"\"\n+        self.strReserved = \"\"\n+\n+    def deserialize(self, f):\n+        self.nVersion = struct.unpack(\"<i\", f.read(4))[0]\n+        self.nRelayUntil = struct.unpack(\"<q\", f.read(8))[0]\n+        self.nExpiration = struct.unpack(\"<q\", f.read(8))[0]\n+        self.nID = struct.unpack(\"<i\", f.read(4))[0]\n+        self.nCancel = struct.unpack(\"<i\", f.read(4))[0]\n+        self.setCancel = deser_int_vector(f)\n+        self.nMinVer = struct.unpack(\"<i\", f.read(4))[0]\n+        self.nMaxVer = struct.unpack(\"<i\", f.read(4))[0]\n+        self.setSubVer = deser_string_vector(f)\n+        self.nPriority = struct.unpack(\"<i\", f.read(4))[0]\n+        self.strComment = deser_string(f)\n+        self.strStatusBar = deser_string(f)\n+        self.strReserved = deser_string(f)\n+\n+    def serialize(self):\n+        r = \"\"\n+        r += struct.pack(\"<i\", self.nVersion)\n+        r += struct.pack(\"<q\", self.nRelayUntil)\n+        r += struct.pack(\"<q\", self.nExpiration)\n+        r += struct.pack(\"<i\", self.nID)\n+        r += struct.pack(\"<i\", self.nCancel)\n+        r += ser_int_vector(self.setCancel)\n+        r += struct.pack(\"<i\", self.nMinVer)\n+        r += struct.pack(\"<i\", self.nMaxVer)\n+        r += ser_string_vector(self.setSubVer)\n+        r += struct.pack(\"<i\", self.nPriority)\n+        r += ser_string(self.strComment)\n+        r += ser_string(self.strStatusBar)\n+        r += ser_string(self.strReserved)\n+        return r\n+\n+    def __repr__(self):\n+        return \"CUnsignedAlert(nVersion %d, nRelayUntil %d, nExpiration %d, nID %d, nCancel %d, nMinVer %d, nMaxVer %d, nPriority %d, strComment %s, strStatusBar %s, strReserved %s)\" \\\n+            % (self.nVersion, self.nRelayUntil, self.nExpiration, self.nID,\n+               self.nCancel, self.nMinVer, self.nMaxVer, self.nPriority,\n+               self.strComment, self.strStatusBar, self.strReserved)\n+\n+\n+class CAlert(object):\n+    def __init__(self):\n+        self.vchMsg = \"\"\n+        self.vchSig = \"\"\n+\n+    def deserialize(self, f):\n+        self.vchMsg = deser_string(f)\n+        self.vchSig = deser_string(f)\n+\n+    def serialize(self):\n+        r = \"\"\n+        r += ser_string(self.vchMsg)\n+        r += ser_string(self.vchSig)\n+        return r\n+\n+    def __repr__(self):\n+        return \"CAlert(vchMsg.sz %d, vchSig.sz %d)\" \\\n+            % (len(self.vchMsg), len(self.vchSig))\n+\n+\n+# Objects that correspond to messages on the wire\n+class msg_version(object):\n+    command = \"version\"\n+\n+    def __init__(self):\n+        self.nVersion = MY_VERSION\n+        self.nServices = 1\n+        self.nTime = time.time()\n+        self.addrTo = CAddress()\n+        self.addrFrom = CAddress()\n+        self.nNonce = random.getrandbits(64)\n+        self.strSubVer = MY_SUBVERSION\n+        self.nStartingHeight = -1\n+\n+    def deserialize(self, f):\n+        self.nVersion = struct.unpack(\"<i\", f.read(4))[0]\n+        if self.nVersion == 10300:\n+            self.nVersion = 300\n+        self.nServices = struct.unpack(\"<Q\", f.read(8))[0]\n+        self.nTime = struct.unpack(\"<q\", f.read(8))[0]\n+        self.addrTo = CAddress()\n+        self.addrTo.deserialize(f)\n+        if self.nVersion >= 106:\n+            self.addrFrom = CAddress()\n+            self.addrFrom.deserialize(f)\n+            self.nNonce = struct.unpack(\"<Q\", f.read(8))[0]\n+            self.strSubVer = deser_string(f)\n+            if self.nVersion >= 209:\n+                self.nStartingHeight = struct.unpack(\"<i\", f.read(4))[0]\n+            else:\n+                self.nStartingHeight = None\n+        else:\n+            self.addrFrom = None\n+            self.nNonce = None\n+            self.strSubVer = None\n+            self.nStartingHeight = None\n+\n+    def serialize(self):\n+        r = \"\"\n+        r += struct.pack(\"<i\", self.nVersion)\n+        r += struct.pack(\"<Q\", self.nServices)\n+        r += struct.pack(\"<q\", self.nTime)\n+        r += self.addrTo.serialize()\n+        r += self.addrFrom.serialize()\n+        r += struct.pack(\"<Q\", self.nNonce)\n+        r += ser_string(self.strSubVer)\n+        r += struct.pack(\"<i\", self.nStartingHeight)\n+        return r\n+\n+    def __repr__(self):\n+        return 'msg_version(nVersion=%i nServices=%i nTime=%s addrTo=%s addrFrom=%s nNonce=0x%016X strSubVer=%s nStartingHeight=%i)' \\\n+            % (self.nVersion, self.nServices, time.ctime(self.nTime),\n+               repr(self.addrTo), repr(self.addrFrom), self.nNonce,\n+               self.strSubVer, self.nStartingHeight)\n+\n+\n+class msg_verack(object):\n+    command = \"verack\"\n+\n+    def __init__(self):\n+        pass\n+\n+    def deserialize(self, f):\n+        pass\n+\n+    def serialize(self):\n+        return \"\"\n+\n+    def __repr__(self):\n+        return \"msg_verack()\"\n+\n+\n+class msg_addr(object):\n+    command = \"addr\"\n+\n+    def __init__(self):\n+        self.addrs = []\n+\n+    def deserialize(self, f):\n+        self.addrs = deser_vector(f, CAddress)\n+\n+    def serialize(self):\n+        return ser_vector(self.addrs)\n+\n+    def __repr__(self):\n+        return \"msg_addr(addrs=%s)\" % (repr(self.addrs))\n+\n+\n+class msg_alert(object):\n+    command = \"alert\"\n+\n+    def __init__(self):\n+        self.alert = CAlert()\n+\n+    def deserialize(self, f):\n+        self.alert = CAlert()\n+        self.alert.deserialize(f)\n+\n+    def serialize(self):\n+        r = \"\"\n+        r += self.alert.serialize()\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_alert(alert=%s)\" % (repr(self.alert), )\n+\n+\n+class msg_inv(object):\n+    command = \"inv\"\n+\n+    def __init__(self, inv=None):\n+        if inv is None:\n+            self.inv = []\n+        else:\n+            self.inv = inv\n+\n+    def deserialize(self, f):\n+        self.inv = deser_vector(f, CInv)\n+\n+    def serialize(self):\n+        return ser_vector(self.inv)\n+\n+    def __repr__(self):\n+        return \"msg_inv(inv=%s)\" % (repr(self.inv))\n+\n+\n+class msg_getdata(object):\n+    command = \"getdata\"\n+\n+    def __init__(self):\n+        self.inv = []\n+\n+    def deserialize(self, f):\n+        self.inv = deser_vector(f, CInv)\n+\n+    def serialize(self):\n+        return ser_vector(self.inv)\n+\n+    def __repr__(self):\n+        return \"msg_getdata(inv=%s)\" % (repr(self.inv))\n+\n+\n+class msg_getblocks(object):\n+    command = \"getblocks\"\n+\n+    def __init__(self):\n+        self.locator = CBlockLocator()\n+        self.hashstop = 0L\n+\n+    def deserialize(self, f):\n+        self.locator = CBlockLocator()\n+        self.locator.deserialize(f)\n+        self.hashstop = deser_uint256(f)\n+\n+    def serialize(self):\n+        r = \"\"\n+        r += self.locator.serialize()\n+        r += ser_uint256(self.hashstop)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_getblocks(locator=%s hashstop=%064x)\" \\\n+            % (repr(self.locator), self.hashstop)\n+\n+\n+class msg_tx(object):\n+    command = \"tx\"\n+\n+    def __init__(self, tx=CTransaction()):\n+        self.tx = tx\n+\n+    def deserialize(self, f):\n+        self.tx.deserialize(f)\n+\n+    def serialize(self):\n+        return self.tx.serialize()\n+\n+    def __repr__(self):\n+        return \"msg_tx(tx=%s)\" % (repr(self.tx))\n+\n+\n+class msg_block(object):\n+    command = \"block\"\n+\n+    def __init__(self, block=None):\n+        if block is None:\n+            self.block = CBlock()\n+        else:\n+            self.block = block\n+\n+    def deserialize(self, f):\n+        self.block.deserialize(f)\n+\n+    def serialize(self):\n+        return self.block.serialize()\n+\n+    def __repr__(self):\n+        return \"msg_block(block=%s)\" % (repr(self.block))\n+\n+\n+class msg_getaddr(object):\n+    command = \"getaddr\"\n+\n+    def __init__(self):\n+        pass\n+\n+    def deserialize(self, f):\n+        pass\n+\n+    def serialize(self):\n+        return \"\"\n+\n+    def __repr__(self):\n+        return \"msg_getaddr()\"\n+\n+\n+class msg_ping_prebip31(object):\n+    command = \"ping\"\n+\n+    def __init__(self):\n+        pass\n+\n+    def deserialize(self, f):\n+        pass\n+\n+    def serialize(self):\n+        return \"\"\n+\n+    def __repr__(self):\n+        return \"msg_ping() (pre-bip31)\"\n+\n+\n+class msg_ping(object):\n+    command = \"ping\"\n+\n+    def __init__(self, nonce=0L):\n+        self.nonce = nonce\n+\n+    def deserialize(self, f):\n+        self.nonce = struct.unpack(\"<Q\", f.read(8))[0]\n+\n+    def serialize(self):\n+        r = \"\"\n+        r += struct.pack(\"<Q\", self.nonce)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_ping(nonce=%08x)\" % self.nonce\n+\n+\n+class msg_pong(object):\n+    command = \"pong\"\n+\n+    def __init__(self, nonce=0L):\n+        self.nonce = nonce\n+\n+    def deserialize(self, f):\n+        self.nonce = struct.unpack(\"<Q\", f.read(8))[0]\n+\n+    def serialize(self):\n+        r = \"\"\n+        r += struct.pack(\"<Q\", self.nonce)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_pong(nonce=%08x)\" % self.nonce\n+\n+\n+class msg_mempool(object):\n+    command = \"mempool\"\n+\n+    def __init__(self):\n+        pass\n+\n+    def deserialize(self, f):\n+        pass\n+\n+    def serialize(self):\n+        return \"\"\n+\n+    def __repr__(self):\n+        return \"msg_mempool()\"\n+\n+\n+# getheaders message has\n+# number of entries\n+# vector of hashes\n+# hash_stop (hash of last desired block header, 0 to get as many as possible)\n+class msg_getheaders(object):\n+    command = \"getheaders\"\n+\n+    def __init__(self):\n+        self.locator = CBlockLocator()\n+        self.hashstop = 0L\n+\n+    def deserialize(self, f):\n+        self.locator = CBlockLocator()\n+        self.locator.deserialize(f)\n+        self.hashstop = deser_uint256(f)\n+\n+    def serialize(self):\n+        r = \"\"\n+        r += self.locator.serialize()\n+        r += ser_uint256(self.hashstop)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_getheaders(locator=%s, stop=%064x)\" \\\n+            % (repr(self.locator), self.hashstop)\n+\n+\n+# headers message has\n+# <count> <vector of block headers>\n+class msg_headers(object):\n+    command = \"headers\"\n+\n+    def __init__(self):\n+        self.headers = []\n+\n+    def deserialize(self, f):\n+        # comment in bitcoind indicates these should be deserialized as blocks\n+        blocks = deser_vector(f, CBlock)\n+        for x in blocks:\n+            self.headers.append(CBlockHeader(x))\n+\n+    def serialize(self):\n+        blocks = [CBlock(x) for x in self.headers]\n+        return ser_vector(blocks)\n+\n+    def __repr__(self):\n+        return \"msg_headers(headers=%s)\" % repr(self.headers)\n+\n+\n+class msg_reject(object):\n+    command = \"reject\"\n+\n+    def __init__(self):\n+        self.message = \"\"\n+        self.code = \"\"\n+        self.reason = \"\"\n+        self.data = 0L\n+\n+    def deserialize(self, f):\n+        self.message = deser_string(f)\n+        self.code = struct.unpack(\"<B\", f.read(1))[0]\n+        self.reason = deser_string(f)\n+        if (self.message == \"block\" or self.message == \"tx\"):\n+            self.data = deser_uint256(f)\n+\n+    def serialize(self):\n+        r = ser_string(self.message)\n+        r += struct.pack(\"<B\", self.code)\n+        r += ser_string(self.reason)\n+        if (self.message == \"block\" or self.message == \"tx\"):\n+            r += ser_uint256(self.data)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_reject: %s %d %s [%064x]\" \\\n+            % (self.message, self.code, self.reason, self.data)\n+\n+\n+# This is what a callback should look like for NodeConn\n+# Reimplement the on_* functions to provide handling for events\n+class NodeConnCB(object):\n+    def __init__(self):\n+        self.verack_received = False\n+\n+    # Derived classes should call this function once to set the message map\n+    # which associates the derived classes' functions to incoming messages\n+    def create_callback_map(self):\n+        self.cbmap = {\n+            \"version\": self.on_version,\n+            \"verack\": self.on_verack,\n+            \"addr\": self.on_addr,\n+            \"alert\": self.on_alert,\n+            \"inv\": self.on_inv,\n+            \"getdata\": self.on_getdata,\n+            \"getblocks\": self.on_getblocks,\n+            \"tx\": self.on_tx,\n+            \"block\": self.on_block,\n+            \"getaddr\": self.on_getaddr,\n+            \"ping\": self.on_ping,\n+            \"pong\": self.on_pong,\n+            \"headers\": self.on_headers,\n+            \"getheaders\": self.on_getheaders,\n+            \"reject\": self.on_reject,\n+            \"mempool\": self.on_mempool\n+        }\n+\n+    def deliver(self, conn, message):\n+        with mininode_lock:\n+            try:\n+                self.cbmap[message.command](conn, message)\n+            except:\n+                print \"ERROR delivering %s (%s)\" % (repr(message),\n+                                                    sys.exc_info()[0])\n+\n+    def on_version(self, conn, message):\n+        if message.nVersion >= 209:\n+            conn.send_message(msg_verack())\n+        conn.ver_send = min(MY_VERSION, message.nVersion)\n+        if message.nVersion < 209:\n+            conn.ver_recv = conn.ver_send\n+\n+    def on_verack(self, conn, message):\n+        conn.ver_recv = conn.ver_send\n+        self.verack_received = True\n+\n+    def on_inv(self, conn, message):\n+        want = msg_getdata()\n+        for i in message.inv:\n+            if i.type != 0:\n+                want.inv.append(i)\n+        if len(want.inv):\n+            conn.send_message(want)\n+\n+    def on_addr(self, conn, message): pass\n+    def on_alert(self, conn, message): pass\n+    def on_getdata(self, conn, message): pass\n+    def on_getblocks(self, conn, message): pass\n+    def on_tx(self, conn, message): pass\n+    def on_block(self, conn, message): pass\n+    def on_getaddr(self, conn, message): pass\n+    def on_headers(self, conn, message): pass\n+    def on_getheaders(self, conn, message): pass\n+    def on_ping(self, conn, message):\n+        if conn.ver_send > BIP0031_VERSION:\n+            conn.send_message(msg_pong(message.nonce))\n+    def on_reject(self, conn, message): pass\n+    def on_close(self, conn): pass\n+    def on_mempool(self, conn): pass\n+    def on_pong(self, conn, message): pass\n+\n+\n+# The actual NodeConn class\n+# This class provides an interface for a p2p connection to a specified node\n+class NodeConn(asyncore.dispatcher):\n+    messagemap = {\n+        \"version\": msg_version,\n+        \"verack\": msg_verack,\n+        \"addr\": msg_addr,\n+        \"alert\": msg_alert,\n+        \"inv\": msg_inv,\n+        \"getdata\": msg_getdata,\n+        \"getblocks\": msg_getblocks,\n+        \"tx\": msg_tx,\n+        \"block\": msg_block,\n+        \"getaddr\": msg_getaddr,\n+        \"ping\": msg_ping,\n+        \"pong\": msg_pong,\n+        \"headers\": msg_headers,\n+        \"getheaders\": msg_getheaders,\n+        \"reject\": msg_reject,\n+        \"mempool\": msg_mempool\n+    }\n+    MAGIC_BYTES = {\n+        \"mainnet\": \"\\xf9\\xbe\\xb4\\xd9\",   # mainnet\n+        \"testnet3\": \"\\x0b\\x11\\x09\\x07\",  # testnet3\n+        \"regtest\": \"\\xfa\\xbf\\xb5\\xda\"    # regtest\n+    }\n+\n+    def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\"):\n+        asyncore.dispatcher.__init__(self, map=mininode_socket_map)\n+        self.log = logging.getLogger(\"NodeConn(%s:%d)\" % (dstaddr, dstport))\n+        self.dstaddr = dstaddr\n+        self.dstport = dstport\n+        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)\n+        self.sendbuf = \"\"\n+        self.recvbuf = \"\"\n+        self.ver_send = 209\n+        self.ver_recv = 209\n+        self.last_sent = 0\n+        self.state = \"connecting\"\n+        self.network = net\n+        self.cb = callback\n+        self.disconnect = False\n+\n+        # stuff version msg into sendbuf\n+        vt = msg_version()\n+        vt.addrTo.ip = self.dstaddr\n+        vt.addrTo.port = self.dstport\n+        vt.addrFrom.ip = \"0.0.0.0\"\n+        vt.addrFrom.port = 0\n+        self.send_message(vt, True)\n+        print 'MiniNode: Connecting to Bitcoin Node IP # ' + dstaddr + ':' \\\n+            + str(dstport)\n+\n+        try:\n+            self.connect((dstaddr, dstport))\n+        except:\n+            self.handle_close()\n+        self.rpc = rpc\n+\n+    def show_debug_msg(self, msg):\n+        self.log.debug(msg)\n+\n+    def handle_connect(self):\n+        self.show_debug_msg(\"MiniNode: Connected & Listening: \\n\")\n+        self.state = \"connected\"\n+\n+    def handle_close(self):\n+        self.show_debug_msg(\"MiniNode: Closing Connection to %s:%d... \"\n+                            % (self.dstaddr, self.dstport))\n+        self.state = \"closed\"\n+        self.recvbuf = \"\"\n+        self.sendbuf = \"\"\n+        try:\n+            self.close()\n+        except:\n+            pass\n+        self.cb.on_close(self)\n+\n+    def handle_read(self):\n+        try:\n+            t = self.recv(8192)\n+            if len(t) > 0:\n+                self.recvbuf += t\n+                self.got_data()\n+        except:\n+            pass\n+\n+    def readable(self):\n+        return True\n+\n+    def writable(self):\n+        with mininode_lock:\n+            length = len(self.sendbuf)\n+        return (length > 0)\n+\n+    def handle_write(self):\n+        with mininode_lock:\n+            try:\n+                sent = self.send(self.sendbuf)\n+            except:\n+                self.handle_close()\n+                return\n+            self.sendbuf = self.sendbuf[sent:]\n+\n+    def got_data(self):\n+        while True:\n+            if len(self.recvbuf) < 4:\n+                return\n+            if self.recvbuf[:4] != self.MAGIC_BYTES[self.network]:\n+                raise ValueError(\"got garbage %s\" % repr(self.recvbuf))\n+            if self.ver_recv < 209:\n+                if len(self.recvbuf) < 4 + 12 + 4:\n+                    return\n+                command = self.recvbuf[4:4+12].split(\"\\x00\", 1)[0]\n+                msglen = struct.unpack(\"<i\", self.recvbuf[4+12:4+12+4])[0]\n+                checksum = None\n+                if len(self.recvbuf) < 4 + 12 + 4 + msglen:\n+                    return\n+                msg = self.recvbuf[4+12+4:4+12+4+msglen]\n+                self.recvbuf = self.recvbuf[4+12+4+msglen:]\n+            else:\n+                if len(self.recvbuf) < 4 + 12 + 4 + 4:\n+                    return\n+                command = self.recvbuf[4:4+12].split(\"\\x00\", 1)[0]\n+                msglen = struct.unpack(\"<i\", self.recvbuf[4+12:4+12+4])[0]\n+                checksum = self.recvbuf[4+12+4:4+12+4+4]\n+                if len(self.recvbuf) < 4 + 12 + 4 + 4 + msglen:\n+                    return\n+                msg = self.recvbuf[4+12+4+4:4+12+4+4+msglen]\n+                th = sha256(msg)\n+                h = sha256(th)\n+                if checksum != h[:4]:\n+                    raise ValueError(\"got bad checksum \" + repr(self.recvbuf))\n+                self.recvbuf = self.recvbuf[4+12+4+4+msglen:]\n+            if command in self.messagemap:\n+                f = cStringIO.StringIO(msg)\n+                t = self.messagemap[command]()\n+                t.deserialize(f)\n+                self.got_message(t)\n+            else:\n+                self.show_debug_msg(\"Unknown command: '\" + command + \"' \" +\n+                                    repr(msg))\n+\n+    def send_message(self, message, pushbuf=False):\n+        if self.state != \"connected\" and not pushbuf:\n+            return\n+        self.show_debug_msg(\"Send %s\" % repr(message))\n+        command = message.command\n+        data = message.serialize()\n+        tmsg = self.MAGIC_BYTES[self.network]\n+        tmsg += command\n+        tmsg += \"\\x00\" * (12 - len(command))\n+        tmsg += struct.pack(\"<I\", len(data))\n+        if self.ver_send >= 209:\n+            th = sha256(data)\n+            h = sha256(th)\n+            tmsg += h[:4]\n+        tmsg += data\n+        with mininode_lock:\n+            self.sendbuf += tmsg\n+            self.last_sent = time.time()\n+\n+    def got_message(self, message):\n+        if message.command == \"version\":\n+            if message.nVersion <= BIP0031_VERSION:\n+                self.messagemap['ping'] = msg_ping_prebip31\n+        if self.last_sent + 30 * 60 < time.time():\n+            self.send_message(self.messagemap['ping']())\n+        self.show_debug_msg(\"Recv %s\" % repr(message))\n+        self.cb.deliver(self, message)\n+\n+    def disconnect_node(self):\n+        self.disconnect = True\n+\n+\n+class NetworkThread(Thread):\n+    def run(self):\n+        while mininode_socket_map:\n+            # We check for whether to disconnect outside of the asyncore\n+            # loop to workaround the behavior of asyncore when using\n+            # select\n+            disconnected = []\n+            for fd, obj in mininode_socket_map.items():\n+                if obj.disconnect:\n+                    disconnected.append(obj)\n+            [ obj.handle_close() for obj in disconnected ]\n+            asyncore.loop(0.1, use_poll=True, map=mininode_socket_map, count=1)\n+\n+\n+# An exception we can raise if we detect a potential disconnect\n+# (p2p or rpc) before the test is complete\n+class EarlyDisconnectError(Exception):\n+    def __init__(self, value):\n+        self.value = value\n+\n+    def __str__(self):\n+        return repr(self.value)"
      },
      {
        "sha": "b30a88a4f783a3f39daa16987dec6ad55fe7e39c",
        "filename": "qa/rpc-tests/new_test_framework/netutil.py",
        "status": "added",
        "additions": 139,
        "deletions": 0,
        "changes": 139,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/new_test_framework/netutil.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/new_test_framework/netutil.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/new_test_framework/netutil.py?ref=2ec6869d6de5821e98afc28d64d62241d23b67bd",
        "patch": "@@ -0,0 +1,139 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# Linux network utilities\n+import sys\n+import socket\n+import fcntl\n+import struct\n+import array\n+import os\n+import binascii\n+\n+# Roughly based on http://voorloopnul.com/blog/a-python-netstat-in-less-than-100-lines-of-code/ by Ricardo Pascal\n+STATE_ESTABLISHED = '01'\n+STATE_SYN_SENT  = '02'\n+STATE_SYN_RECV = '03'\n+STATE_FIN_WAIT1 = '04'\n+STATE_FIN_WAIT2 = '05'\n+STATE_TIME_WAIT = '06'\n+STATE_CLOSE = '07'\n+STATE_CLOSE_WAIT = '08'\n+STATE_LAST_ACK = '09'\n+STATE_LISTEN = '0A'\n+STATE_CLOSING = '0B'\n+\n+def get_socket_inodes(pid):\n+    '''\n+    Get list of socket inodes for process pid.\n+    '''\n+    base = '/proc/%i/fd' % pid\n+    inodes = []\n+    for item in os.listdir(base):\n+        target = os.readlink(os.path.join(base, item))\n+        if target.startswith('socket:'):\n+            inodes.append(int(target[8:-1]))\n+    return inodes\n+\n+def _remove_empty(array):\n+    return [x for x in array if x !='']\n+\n+def _convert_ip_port(array):\n+    host,port = array.split(':')\n+    # convert host from mangled-per-four-bytes form as used by kernel\n+    host = binascii.unhexlify(host)\n+    host_out = ''\n+    for x in range(0, len(host)/4):\n+        (val,) = struct.unpack('=I', host[x*4:(x+1)*4])\n+        host_out += '%08x' % val\n+\n+    return host_out,int(port,16)\n+\n+def netstat(typ='tcp'):\n+    '''\n+    Function to return a list with status of tcp connections at linux systems\n+    To get pid of all network process running on system, you must run this script\n+    as superuser\n+    '''\n+    with open('/proc/net/'+typ,'r') as f:\n+        content = f.readlines()\n+        content.pop(0)\n+    result = []\n+    for line in content:\n+        line_array = _remove_empty(line.split(' '))     # Split lines and remove empty spaces.\n+        tcp_id = line_array[0]\n+        l_addr = _convert_ip_port(line_array[1])\n+        r_addr = _convert_ip_port(line_array[2])\n+        state = line_array[3]\n+        inode = int(line_array[9])                      # Need the inode to match with process pid.\n+        nline = [tcp_id, l_addr, r_addr, state, inode]\n+        result.append(nline)\n+    return result\n+\n+def get_bind_addrs(pid):\n+    '''\n+    Get bind addresses as (host,port) tuples for process pid.\n+    '''\n+    inodes = get_socket_inodes(pid)\n+    bind_addrs = []\n+    for conn in netstat('tcp') + netstat('tcp6'):\n+        if conn[3] == STATE_LISTEN and conn[4] in inodes:\n+            bind_addrs.append(conn[1])\n+    return bind_addrs\n+\n+# from: http://code.activestate.com/recipes/439093/\n+def all_interfaces():\n+    '''\n+    Return all interfaces that are up\n+    '''\n+    is_64bits = sys.maxsize > 2**32\n+    struct_size = 40 if is_64bits else 32\n+    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n+    max_possible = 8 # initial value\n+    while True:\n+        bytes = max_possible * struct_size\n+        names = array.array('B', '\\0' * bytes)\n+        outbytes = struct.unpack('iL', fcntl.ioctl(\n+            s.fileno(),\n+            0x8912,  # SIOCGIFCONF\n+            struct.pack('iL', bytes, names.buffer_info()[0])\n+        ))[0]\n+        if outbytes == bytes:\n+            max_possible *= 2\n+        else:\n+            break\n+    namestr = names.tostring()\n+    return [(namestr[i:i+16].split('\\0', 1)[0],\n+             socket.inet_ntoa(namestr[i+20:i+24]))\n+            for i in range(0, outbytes, struct_size)]\n+\n+def addr_to_hex(addr):\n+    '''\n+    Convert string IPv4 or IPv6 address to binary address as returned by\n+    get_bind_addrs.\n+    Very naive implementation that certainly doesn't work for all IPv6 variants.\n+    '''\n+    if '.' in addr: # IPv4\n+        addr = [int(x) for x in addr.split('.')]\n+    elif ':' in addr: # IPv6\n+        sub = [[], []] # prefix, suffix\n+        x = 0\n+        addr = addr.split(':')\n+        for i,comp in enumerate(addr):\n+            if comp == '':\n+                if i == 0 or i == (len(addr)-1): # skip empty component at beginning or end\n+                    continue\n+                x += 1 # :: skips to suffix\n+                assert(x < 2)\n+            else: # two bytes per component\n+                val = int(comp, 16)\n+                sub[x].append(val >> 8)\n+                sub[x].append(val & 0xff)\n+        nullbytes = 16 - len(sub[0]) - len(sub[1])\n+        assert((x == 0 and nullbytes == 0) or (x == 1 and nullbytes > 0))\n+        addr = sub[0] + ([0] * nullbytes) + sub[1]\n+    else:\n+        raise ValueError('Could not parse address %s' % addr)\n+    return binascii.hexlify(bytearray(addr))"
      },
      {
        "sha": "8cd49724f3cb9b5927b3c928aa3903102fdec349",
        "filename": "qa/rpc-tests/new_test_framework/script.py",
        "status": "added",
        "additions": 896,
        "deletions": 0,
        "changes": 896,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/new_test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/new_test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/new_test_framework/script.py?ref=2ec6869d6de5821e98afc28d64d62241d23b67bd",
        "patch": "@@ -0,0 +1,896 @@\n+#\n+# script.py\n+#\n+# This file is modified from python-bitcoinlib.\n+#\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+\"\"\"Scripts\n+\n+Functionality to build scripts, as well as SignatureHash().\n+\"\"\"\n+\n+from __future__ import absolute_import, division, print_function, unicode_literals\n+\n+from new_test_framework.mininode import CTransaction, CTxOut, hash256\n+\n+import sys\n+bchr = chr\n+bord = ord\n+if sys.version > '3':\n+    long = int\n+    bchr = lambda x: bytes([x])\n+    bord = lambda x: x\n+\n+import copy\n+import struct\n+\n+from new_test_framework.bignum import bn2vch\n+\n+MAX_SCRIPT_SIZE = 10000\n+MAX_SCRIPT_ELEMENT_SIZE = 520\n+MAX_SCRIPT_OPCODES = 201\n+\n+OPCODE_NAMES = {}\n+\n+_opcode_instances = []\n+class CScriptOp(int):\n+    \"\"\"A single script opcode\"\"\"\n+    __slots__ = []\n+\n+    @staticmethod\n+    def encode_op_pushdata(d):\n+        \"\"\"Encode a PUSHDATA op, returning bytes\"\"\"\n+        if len(d) < 0x4c:\n+            return b'' + bchr(len(d)) + d # OP_PUSHDATA\n+        elif len(d) <= 0xff:\n+            return b'\\x4c' + bchr(len(d)) + d # OP_PUSHDATA1\n+        elif len(d) <= 0xffff:\n+            return b'\\x4d' + struct.pack(b'<H', len(d)) + d # OP_PUSHDATA2\n+        elif len(d) <= 0xffffffff:\n+            return b'\\x4e' + struct.pack(b'<I', len(d)) + d # OP_PUSHDATA4\n+        else:\n+            raise ValueError(\"Data too long to encode in a PUSHDATA op\")\n+\n+    @staticmethod\n+    def encode_op_n(n):\n+        \"\"\"Encode a small integer op, returning an opcode\"\"\"\n+        if not (0 <= n <= 16):\n+            raise ValueError('Integer must be in range 0 <= n <= 16, got %d' % n)\n+\n+        if n == 0:\n+            return OP_0\n+        else:\n+            return CScriptOp(OP_1 + n-1)\n+\n+    def decode_op_n(self):\n+        \"\"\"Decode a small integer opcode, returning an integer\"\"\"\n+        if self == OP_0:\n+            return 0\n+\n+        if not (self == OP_0 or OP_1 <= self <= OP_16):\n+            raise ValueError('op %r is not an OP_N' % self)\n+\n+        return int(self - OP_1+1)\n+\n+    def is_small_int(self):\n+        \"\"\"Return true if the op pushes a small integer to the stack\"\"\"\n+        if 0x51 <= self <= 0x60 or self == 0:\n+            return True\n+        else:\n+            return False\n+\n+    def __str__(self):\n+        return repr(self)\n+\n+    def __repr__(self):\n+        if self in OPCODE_NAMES:\n+            return OPCODE_NAMES[self]\n+        else:\n+            return 'CScriptOp(0x%x)' % self\n+\n+    def __new__(cls, n):\n+        try:\n+            return _opcode_instances[n]\n+        except IndexError:\n+            assert len(_opcode_instances) == n\n+            _opcode_instances.append(super(CScriptOp, cls).__new__(cls, n))\n+            return _opcode_instances[n]\n+\n+# Populate opcode instance table\n+for n in range(0xff+1):\n+    CScriptOp(n)\n+\n+\n+# push value\n+OP_0 = CScriptOp(0x00)\n+OP_FALSE = OP_0\n+OP_PUSHDATA1 = CScriptOp(0x4c)\n+OP_PUSHDATA2 = CScriptOp(0x4d)\n+OP_PUSHDATA4 = CScriptOp(0x4e)\n+OP_1NEGATE = CScriptOp(0x4f)\n+OP_RESERVED = CScriptOp(0x50)\n+OP_1 = CScriptOp(0x51)\n+OP_TRUE=OP_1\n+OP_2 = CScriptOp(0x52)\n+OP_3 = CScriptOp(0x53)\n+OP_4 = CScriptOp(0x54)\n+OP_5 = CScriptOp(0x55)\n+OP_6 = CScriptOp(0x56)\n+OP_7 = CScriptOp(0x57)\n+OP_8 = CScriptOp(0x58)\n+OP_9 = CScriptOp(0x59)\n+OP_10 = CScriptOp(0x5a)\n+OP_11 = CScriptOp(0x5b)\n+OP_12 = CScriptOp(0x5c)\n+OP_13 = CScriptOp(0x5d)\n+OP_14 = CScriptOp(0x5e)\n+OP_15 = CScriptOp(0x5f)\n+OP_16 = CScriptOp(0x60)\n+\n+# control\n+OP_NOP = CScriptOp(0x61)\n+OP_VER = CScriptOp(0x62)\n+OP_IF = CScriptOp(0x63)\n+OP_NOTIF = CScriptOp(0x64)\n+OP_VERIF = CScriptOp(0x65)\n+OP_VERNOTIF = CScriptOp(0x66)\n+OP_ELSE = CScriptOp(0x67)\n+OP_ENDIF = CScriptOp(0x68)\n+OP_VERIFY = CScriptOp(0x69)\n+OP_RETURN = CScriptOp(0x6a)\n+\n+# stack ops\n+OP_TOALTSTACK = CScriptOp(0x6b)\n+OP_FROMALTSTACK = CScriptOp(0x6c)\n+OP_2DROP = CScriptOp(0x6d)\n+OP_2DUP = CScriptOp(0x6e)\n+OP_3DUP = CScriptOp(0x6f)\n+OP_2OVER = CScriptOp(0x70)\n+OP_2ROT = CScriptOp(0x71)\n+OP_2SWAP = CScriptOp(0x72)\n+OP_IFDUP = CScriptOp(0x73)\n+OP_DEPTH = CScriptOp(0x74)\n+OP_DROP = CScriptOp(0x75)\n+OP_DUP = CScriptOp(0x76)\n+OP_NIP = CScriptOp(0x77)\n+OP_OVER = CScriptOp(0x78)\n+OP_PICK = CScriptOp(0x79)\n+OP_ROLL = CScriptOp(0x7a)\n+OP_ROT = CScriptOp(0x7b)\n+OP_SWAP = CScriptOp(0x7c)\n+OP_TUCK = CScriptOp(0x7d)\n+\n+# splice ops\n+OP_CAT = CScriptOp(0x7e)\n+OP_SUBSTR = CScriptOp(0x7f)\n+OP_LEFT = CScriptOp(0x80)\n+OP_RIGHT = CScriptOp(0x81)\n+OP_SIZE = CScriptOp(0x82)\n+\n+# bit logic\n+OP_INVERT = CScriptOp(0x83)\n+OP_AND = CScriptOp(0x84)\n+OP_OR = CScriptOp(0x85)\n+OP_XOR = CScriptOp(0x86)\n+OP_EQUAL = CScriptOp(0x87)\n+OP_EQUALVERIFY = CScriptOp(0x88)\n+OP_RESERVED1 = CScriptOp(0x89)\n+OP_RESERVED2 = CScriptOp(0x8a)\n+\n+# numeric\n+OP_1ADD = CScriptOp(0x8b)\n+OP_1SUB = CScriptOp(0x8c)\n+OP_2MUL = CScriptOp(0x8d)\n+OP_2DIV = CScriptOp(0x8e)\n+OP_NEGATE = CScriptOp(0x8f)\n+OP_ABS = CScriptOp(0x90)\n+OP_NOT = CScriptOp(0x91)\n+OP_0NOTEQUAL = CScriptOp(0x92)\n+\n+OP_ADD = CScriptOp(0x93)\n+OP_SUB = CScriptOp(0x94)\n+OP_MUL = CScriptOp(0x95)\n+OP_DIV = CScriptOp(0x96)\n+OP_MOD = CScriptOp(0x97)\n+OP_LSHIFT = CScriptOp(0x98)\n+OP_RSHIFT = CScriptOp(0x99)\n+\n+OP_BOOLAND = CScriptOp(0x9a)\n+OP_BOOLOR = CScriptOp(0x9b)\n+OP_NUMEQUAL = CScriptOp(0x9c)\n+OP_NUMEQUALVERIFY = CScriptOp(0x9d)\n+OP_NUMNOTEQUAL = CScriptOp(0x9e)\n+OP_LESSTHAN = CScriptOp(0x9f)\n+OP_GREATERTHAN = CScriptOp(0xa0)\n+OP_LESSTHANOREQUAL = CScriptOp(0xa1)\n+OP_GREATERTHANOREQUAL = CScriptOp(0xa2)\n+OP_MIN = CScriptOp(0xa3)\n+OP_MAX = CScriptOp(0xa4)\n+\n+OP_WITHIN = CScriptOp(0xa5)\n+\n+# crypto\n+OP_RIPEMD160 = CScriptOp(0xa6)\n+OP_SHA1 = CScriptOp(0xa7)\n+OP_SHA256 = CScriptOp(0xa8)\n+OP_HASH160 = CScriptOp(0xa9)\n+OP_HASH256 = CScriptOp(0xaa)\n+OP_CODESEPARATOR = CScriptOp(0xab)\n+OP_CHECKSIG = CScriptOp(0xac)\n+OP_CHECKSIGVERIFY = CScriptOp(0xad)\n+OP_CHECKMULTISIG = CScriptOp(0xae)\n+OP_CHECKMULTISIGVERIFY = CScriptOp(0xaf)\n+\n+# expansion\n+OP_NOP1 = CScriptOp(0xb0)\n+OP_CHECKLOCKTIMEVERIFY = CScriptOp(0xb1)\n+OP_NOP3 = CScriptOp(0xb2)\n+OP_NOP4 = CScriptOp(0xb3)\n+OP_NOP5 = CScriptOp(0xb4)\n+OP_NOP6 = CScriptOp(0xb5)\n+OP_NOP7 = CScriptOp(0xb6)\n+OP_NOP8 = CScriptOp(0xb7)\n+OP_NOP9 = CScriptOp(0xb8)\n+OP_NOP10 = CScriptOp(0xb9)\n+\n+# template matching params\n+OP_SMALLINTEGER = CScriptOp(0xfa)\n+OP_PUBKEYS = CScriptOp(0xfb)\n+OP_PUBKEYHASH = CScriptOp(0xfd)\n+OP_PUBKEY = CScriptOp(0xfe)\n+\n+OP_INVALIDOPCODE = CScriptOp(0xff)\n+\n+VALID_OPCODES = {\n+    OP_1NEGATE,\n+    OP_RESERVED,\n+    OP_1,\n+    OP_2,\n+    OP_3,\n+    OP_4,\n+    OP_5,\n+    OP_6,\n+    OP_7,\n+    OP_8,\n+    OP_9,\n+    OP_10,\n+    OP_11,\n+    OP_12,\n+    OP_13,\n+    OP_14,\n+    OP_15,\n+    OP_16,\n+\n+    OP_NOP,\n+    OP_VER,\n+    OP_IF,\n+    OP_NOTIF,\n+    OP_VERIF,\n+    OP_VERNOTIF,\n+    OP_ELSE,\n+    OP_ENDIF,\n+    OP_VERIFY,\n+    OP_RETURN,\n+\n+    OP_TOALTSTACK,\n+    OP_FROMALTSTACK,\n+    OP_2DROP,\n+    OP_2DUP,\n+    OP_3DUP,\n+    OP_2OVER,\n+    OP_2ROT,\n+    OP_2SWAP,\n+    OP_IFDUP,\n+    OP_DEPTH,\n+    OP_DROP,\n+    OP_DUP,\n+    OP_NIP,\n+    OP_OVER,\n+    OP_PICK,\n+    OP_ROLL,\n+    OP_ROT,\n+    OP_SWAP,\n+    OP_TUCK,\n+\n+    OP_CAT,\n+    OP_SUBSTR,\n+    OP_LEFT,\n+    OP_RIGHT,\n+    OP_SIZE,\n+\n+    OP_INVERT,\n+    OP_AND,\n+    OP_OR,\n+    OP_XOR,\n+    OP_EQUAL,\n+    OP_EQUALVERIFY,\n+    OP_RESERVED1,\n+    OP_RESERVED2,\n+\n+    OP_1ADD,\n+    OP_1SUB,\n+    OP_2MUL,\n+    OP_2DIV,\n+    OP_NEGATE,\n+    OP_ABS,\n+    OP_NOT,\n+    OP_0NOTEQUAL,\n+\n+    OP_ADD,\n+    OP_SUB,\n+    OP_MUL,\n+    OP_DIV,\n+    OP_MOD,\n+    OP_LSHIFT,\n+    OP_RSHIFT,\n+\n+    OP_BOOLAND,\n+    OP_BOOLOR,\n+    OP_NUMEQUAL,\n+    OP_NUMEQUALVERIFY,\n+    OP_NUMNOTEQUAL,\n+    OP_LESSTHAN,\n+    OP_GREATERTHAN,\n+    OP_LESSTHANOREQUAL,\n+    OP_GREATERTHANOREQUAL,\n+    OP_MIN,\n+    OP_MAX,\n+\n+    OP_WITHIN,\n+\n+    OP_RIPEMD160,\n+    OP_SHA1,\n+    OP_SHA256,\n+    OP_HASH160,\n+    OP_HASH256,\n+    OP_CODESEPARATOR,\n+    OP_CHECKSIG,\n+    OP_CHECKSIGVERIFY,\n+    OP_CHECKMULTISIG,\n+    OP_CHECKMULTISIGVERIFY,\n+\n+    OP_NOP1,\n+    OP_CHECKLOCKTIMEVERIFY,\n+    OP_NOP3,\n+    OP_NOP4,\n+    OP_NOP5,\n+    OP_NOP6,\n+    OP_NOP7,\n+    OP_NOP8,\n+    OP_NOP9,\n+    OP_NOP10,\n+\n+    OP_SMALLINTEGER,\n+    OP_PUBKEYS,\n+    OP_PUBKEYHASH,\n+    OP_PUBKEY,\n+}\n+\n+OPCODE_NAMES.update({\n+    OP_0 : 'OP_0',\n+    OP_PUSHDATA1 : 'OP_PUSHDATA1',\n+    OP_PUSHDATA2 : 'OP_PUSHDATA2',\n+    OP_PUSHDATA4 : 'OP_PUSHDATA4',\n+    OP_1NEGATE : 'OP_1NEGATE',\n+    OP_RESERVED : 'OP_RESERVED',\n+    OP_1 : 'OP_1',\n+    OP_2 : 'OP_2',\n+    OP_3 : 'OP_3',\n+    OP_4 : 'OP_4',\n+    OP_5 : 'OP_5',\n+    OP_6 : 'OP_6',\n+    OP_7 : 'OP_7',\n+    OP_8 : 'OP_8',\n+    OP_9 : 'OP_9',\n+    OP_10 : 'OP_10',\n+    OP_11 : 'OP_11',\n+    OP_12 : 'OP_12',\n+    OP_13 : 'OP_13',\n+    OP_14 : 'OP_14',\n+    OP_15 : 'OP_15',\n+    OP_16 : 'OP_16',\n+    OP_NOP : 'OP_NOP',\n+    OP_VER : 'OP_VER',\n+    OP_IF : 'OP_IF',\n+    OP_NOTIF : 'OP_NOTIF',\n+    OP_VERIF : 'OP_VERIF',\n+    OP_VERNOTIF : 'OP_VERNOTIF',\n+    OP_ELSE : 'OP_ELSE',\n+    OP_ENDIF : 'OP_ENDIF',\n+    OP_VERIFY : 'OP_VERIFY',\n+    OP_RETURN : 'OP_RETURN',\n+    OP_TOALTSTACK : 'OP_TOALTSTACK',\n+    OP_FROMALTSTACK : 'OP_FROMALTSTACK',\n+    OP_2DROP : 'OP_2DROP',\n+    OP_2DUP : 'OP_2DUP',\n+    OP_3DUP : 'OP_3DUP',\n+    OP_2OVER : 'OP_2OVER',\n+    OP_2ROT : 'OP_2ROT',\n+    OP_2SWAP : 'OP_2SWAP',\n+    OP_IFDUP : 'OP_IFDUP',\n+    OP_DEPTH : 'OP_DEPTH',\n+    OP_DROP : 'OP_DROP',\n+    OP_DUP : 'OP_DUP',\n+    OP_NIP : 'OP_NIP',\n+    OP_OVER : 'OP_OVER',\n+    OP_PICK : 'OP_PICK',\n+    OP_ROLL : 'OP_ROLL',\n+    OP_ROT : 'OP_ROT',\n+    OP_SWAP : 'OP_SWAP',\n+    OP_TUCK : 'OP_TUCK',\n+    OP_CAT : 'OP_CAT',\n+    OP_SUBSTR : 'OP_SUBSTR',\n+    OP_LEFT : 'OP_LEFT',\n+    OP_RIGHT : 'OP_RIGHT',\n+    OP_SIZE : 'OP_SIZE',\n+    OP_INVERT : 'OP_INVERT',\n+    OP_AND : 'OP_AND',\n+    OP_OR : 'OP_OR',\n+    OP_XOR : 'OP_XOR',\n+    OP_EQUAL : 'OP_EQUAL',\n+    OP_EQUALVERIFY : 'OP_EQUALVERIFY',\n+    OP_RESERVED1 : 'OP_RESERVED1',\n+    OP_RESERVED2 : 'OP_RESERVED2',\n+    OP_1ADD : 'OP_1ADD',\n+    OP_1SUB : 'OP_1SUB',\n+    OP_2MUL : 'OP_2MUL',\n+    OP_2DIV : 'OP_2DIV',\n+    OP_NEGATE : 'OP_NEGATE',\n+    OP_ABS : 'OP_ABS',\n+    OP_NOT : 'OP_NOT',\n+    OP_0NOTEQUAL : 'OP_0NOTEQUAL',\n+    OP_ADD : 'OP_ADD',\n+    OP_SUB : 'OP_SUB',\n+    OP_MUL : 'OP_MUL',\n+    OP_DIV : 'OP_DIV',\n+    OP_MOD : 'OP_MOD',\n+    OP_LSHIFT : 'OP_LSHIFT',\n+    OP_RSHIFT : 'OP_RSHIFT',\n+    OP_BOOLAND : 'OP_BOOLAND',\n+    OP_BOOLOR : 'OP_BOOLOR',\n+    OP_NUMEQUAL : 'OP_NUMEQUAL',\n+    OP_NUMEQUALVERIFY : 'OP_NUMEQUALVERIFY',\n+    OP_NUMNOTEQUAL : 'OP_NUMNOTEQUAL',\n+    OP_LESSTHAN : 'OP_LESSTHAN',\n+    OP_GREATERTHAN : 'OP_GREATERTHAN',\n+    OP_LESSTHANOREQUAL : 'OP_LESSTHANOREQUAL',\n+    OP_GREATERTHANOREQUAL : 'OP_GREATERTHANOREQUAL',\n+    OP_MIN : 'OP_MIN',\n+    OP_MAX : 'OP_MAX',\n+    OP_WITHIN : 'OP_WITHIN',\n+    OP_RIPEMD160 : 'OP_RIPEMD160',\n+    OP_SHA1 : 'OP_SHA1',\n+    OP_SHA256 : 'OP_SHA256',\n+    OP_HASH160 : 'OP_HASH160',\n+    OP_HASH256 : 'OP_HASH256',\n+    OP_CODESEPARATOR : 'OP_CODESEPARATOR',\n+    OP_CHECKSIG : 'OP_CHECKSIG',\n+    OP_CHECKSIGVERIFY : 'OP_CHECKSIGVERIFY',\n+    OP_CHECKMULTISIG : 'OP_CHECKMULTISIG',\n+    OP_CHECKMULTISIGVERIFY : 'OP_CHECKMULTISIGVERIFY',\n+    OP_NOP1 : 'OP_NOP1',\n+    OP_CHECKLOCKTIMEVERIFY : 'OP_CHECKLOCKTIMEVERIFY',\n+    OP_NOP3 : 'OP_NOP3',\n+    OP_NOP4 : 'OP_NOP4',\n+    OP_NOP5 : 'OP_NOP5',\n+    OP_NOP6 : 'OP_NOP6',\n+    OP_NOP7 : 'OP_NOP7',\n+    OP_NOP8 : 'OP_NOP8',\n+    OP_NOP9 : 'OP_NOP9',\n+    OP_NOP10 : 'OP_NOP10',\n+    OP_SMALLINTEGER : 'OP_SMALLINTEGER',\n+    OP_PUBKEYS : 'OP_PUBKEYS',\n+    OP_PUBKEYHASH : 'OP_PUBKEYHASH',\n+    OP_PUBKEY : 'OP_PUBKEY',\n+    OP_INVALIDOPCODE : 'OP_INVALIDOPCODE',\n+})\n+\n+OPCODES_BY_NAME = {\n+    'OP_0' : OP_0,\n+    'OP_PUSHDATA1' : OP_PUSHDATA1,\n+    'OP_PUSHDATA2' : OP_PUSHDATA2,\n+    'OP_PUSHDATA4' : OP_PUSHDATA4,\n+    'OP_1NEGATE' : OP_1NEGATE,\n+    'OP_RESERVED' : OP_RESERVED,\n+    'OP_1' : OP_1,\n+    'OP_2' : OP_2,\n+    'OP_3' : OP_3,\n+    'OP_4' : OP_4,\n+    'OP_5' : OP_5,\n+    'OP_6' : OP_6,\n+    'OP_7' : OP_7,\n+    'OP_8' : OP_8,\n+    'OP_9' : OP_9,\n+    'OP_10' : OP_10,\n+    'OP_11' : OP_11,\n+    'OP_12' : OP_12,\n+    'OP_13' : OP_13,\n+    'OP_14' : OP_14,\n+    'OP_15' : OP_15,\n+    'OP_16' : OP_16,\n+    'OP_NOP' : OP_NOP,\n+    'OP_VER' : OP_VER,\n+    'OP_IF' : OP_IF,\n+    'OP_NOTIF' : OP_NOTIF,\n+    'OP_VERIF' : OP_VERIF,\n+    'OP_VERNOTIF' : OP_VERNOTIF,\n+    'OP_ELSE' : OP_ELSE,\n+    'OP_ENDIF' : OP_ENDIF,\n+    'OP_VERIFY' : OP_VERIFY,\n+    'OP_RETURN' : OP_RETURN,\n+    'OP_TOALTSTACK' : OP_TOALTSTACK,\n+    'OP_FROMALTSTACK' : OP_FROMALTSTACK,\n+    'OP_2DROP' : OP_2DROP,\n+    'OP_2DUP' : OP_2DUP,\n+    'OP_3DUP' : OP_3DUP,\n+    'OP_2OVER' : OP_2OVER,\n+    'OP_2ROT' : OP_2ROT,\n+    'OP_2SWAP' : OP_2SWAP,\n+    'OP_IFDUP' : OP_IFDUP,\n+    'OP_DEPTH' : OP_DEPTH,\n+    'OP_DROP' : OP_DROP,\n+    'OP_DUP' : OP_DUP,\n+    'OP_NIP' : OP_NIP,\n+    'OP_OVER' : OP_OVER,\n+    'OP_PICK' : OP_PICK,\n+    'OP_ROLL' : OP_ROLL,\n+    'OP_ROT' : OP_ROT,\n+    'OP_SWAP' : OP_SWAP,\n+    'OP_TUCK' : OP_TUCK,\n+    'OP_CAT' : OP_CAT,\n+    'OP_SUBSTR' : OP_SUBSTR,\n+    'OP_LEFT' : OP_LEFT,\n+    'OP_RIGHT' : OP_RIGHT,\n+    'OP_SIZE' : OP_SIZE,\n+    'OP_INVERT' : OP_INVERT,\n+    'OP_AND' : OP_AND,\n+    'OP_OR' : OP_OR,\n+    'OP_XOR' : OP_XOR,\n+    'OP_EQUAL' : OP_EQUAL,\n+    'OP_EQUALVERIFY' : OP_EQUALVERIFY,\n+    'OP_RESERVED1' : OP_RESERVED1,\n+    'OP_RESERVED2' : OP_RESERVED2,\n+    'OP_1ADD' : OP_1ADD,\n+    'OP_1SUB' : OP_1SUB,\n+    'OP_2MUL' : OP_2MUL,\n+    'OP_2DIV' : OP_2DIV,\n+    'OP_NEGATE' : OP_NEGATE,\n+    'OP_ABS' : OP_ABS,\n+    'OP_NOT' : OP_NOT,\n+    'OP_0NOTEQUAL' : OP_0NOTEQUAL,\n+    'OP_ADD' : OP_ADD,\n+    'OP_SUB' : OP_SUB,\n+    'OP_MUL' : OP_MUL,\n+    'OP_DIV' : OP_DIV,\n+    'OP_MOD' : OP_MOD,\n+    'OP_LSHIFT' : OP_LSHIFT,\n+    'OP_RSHIFT' : OP_RSHIFT,\n+    'OP_BOOLAND' : OP_BOOLAND,\n+    'OP_BOOLOR' : OP_BOOLOR,\n+    'OP_NUMEQUAL' : OP_NUMEQUAL,\n+    'OP_NUMEQUALVERIFY' : OP_NUMEQUALVERIFY,\n+    'OP_NUMNOTEQUAL' : OP_NUMNOTEQUAL,\n+    'OP_LESSTHAN' : OP_LESSTHAN,\n+    'OP_GREATERTHAN' : OP_GREATERTHAN,\n+    'OP_LESSTHANOREQUAL' : OP_LESSTHANOREQUAL,\n+    'OP_GREATERTHANOREQUAL' : OP_GREATERTHANOREQUAL,\n+    'OP_MIN' : OP_MIN,\n+    'OP_MAX' : OP_MAX,\n+    'OP_WITHIN' : OP_WITHIN,\n+    'OP_RIPEMD160' : OP_RIPEMD160,\n+    'OP_SHA1' : OP_SHA1,\n+    'OP_SHA256' : OP_SHA256,\n+    'OP_HASH160' : OP_HASH160,\n+    'OP_HASH256' : OP_HASH256,\n+    'OP_CODESEPARATOR' : OP_CODESEPARATOR,\n+    'OP_CHECKSIG' : OP_CHECKSIG,\n+    'OP_CHECKSIGVERIFY' : OP_CHECKSIGVERIFY,\n+    'OP_CHECKMULTISIG' : OP_CHECKMULTISIG,\n+    'OP_CHECKMULTISIGVERIFY' : OP_CHECKMULTISIGVERIFY,\n+    'OP_NOP1' : OP_NOP1,\n+    'OP_CHECKLOCKTIMEVERIFY' : OP_CHECKLOCKTIMEVERIFY,\n+    'OP_NOP3' : OP_NOP3,\n+    'OP_NOP4' : OP_NOP4,\n+    'OP_NOP5' : OP_NOP5,\n+    'OP_NOP6' : OP_NOP6,\n+    'OP_NOP7' : OP_NOP7,\n+    'OP_NOP8' : OP_NOP8,\n+    'OP_NOP9' : OP_NOP9,\n+    'OP_NOP10' : OP_NOP10,\n+    'OP_SMALLINTEGER' : OP_SMALLINTEGER,\n+    'OP_PUBKEYS' : OP_PUBKEYS,\n+    'OP_PUBKEYHASH' : OP_PUBKEYHASH,\n+    'OP_PUBKEY' : OP_PUBKEY,\n+}\n+\n+class CScriptInvalidError(Exception):\n+    \"\"\"Base class for CScript exceptions\"\"\"\n+    pass\n+\n+class CScriptTruncatedPushDataError(CScriptInvalidError):\n+    \"\"\"Invalid pushdata due to truncation\"\"\"\n+    def __init__(self, msg, data):\n+        self.data = data\n+        super(CScriptTruncatedPushDataError, self).__init__(msg)\n+\n+# This is used, eg, for blockchain heights in coinbase scripts (bip34)\n+class CScriptNum(object):\n+    def __init__(self, d=0):\n+        self.value = d\n+\n+    @staticmethod\n+    def encode(obj):\n+        r = bytearray(0)\n+        if obj.value == 0:\n+            return bytes(r)\n+        neg = obj.value < 0\n+        absvalue = -obj.value if neg else obj.value\n+        while (absvalue):\n+            r.append(chr(absvalue & 0xff))\n+            absvalue >>= 8\n+        if r[-1] & 0x80:\n+            r.append(0x80 if neg else 0)\n+        elif neg:\n+            r[-1] |= 0x80\n+        return bytes(bchr(len(r)) + r)\n+\n+\n+class CScript(bytes):\n+    \"\"\"Serialized script\n+\n+    A bytes subclass, so you can use this directly whenever bytes are accepted.\n+    Note that this means that indexing does *not* work - you'll get an index by\n+    byte rather than opcode. This format was chosen for efficiency so that the\n+    general case would not require creating a lot of little CScriptOP objects.\n+\n+    iter(script) however does iterate by opcode.\n+    \"\"\"\n+    @classmethod\n+    def __coerce_instance(cls, other):\n+        # Coerce other into bytes\n+        if isinstance(other, CScriptOp):\n+            other = bchr(other)\n+        elif isinstance(other, CScriptNum):\n+            if (other.value == 0):\n+                other = bchr(CScriptOp(OP_0))\n+            else:\n+                other = CScriptNum.encode(other)\n+        elif isinstance(other, (int, long)):\n+            if 0 <= other <= 16:\n+                other = bytes(bchr(CScriptOp.encode_op_n(other)))\n+            elif other == -1:\n+                other = bytes(bchr(OP_1NEGATE))\n+            else:\n+                other = CScriptOp.encode_op_pushdata(bn2vch(other))\n+        elif isinstance(other, (bytes, bytearray)):\n+            other = CScriptOp.encode_op_pushdata(other)\n+        return other\n+\n+    def __add__(self, other):\n+        # Do the coercion outside of the try block so that errors in it are\n+        # noticed.\n+        other = self.__coerce_instance(other)\n+\n+        try:\n+            # bytes.__add__ always returns bytes instances unfortunately\n+            return CScript(super(CScript, self).__add__(other))\n+        except TypeError:\n+            raise TypeError('Can not add a %r instance to a CScript' % other.__class__)\n+\n+    def join(self, iterable):\n+        # join makes no sense for a CScript()\n+        raise NotImplementedError\n+\n+    def __new__(cls, value=b''):\n+        if isinstance(value, bytes) or isinstance(value, bytearray):\n+            return super(CScript, cls).__new__(cls, value)\n+        else:\n+            def coerce_iterable(iterable):\n+                for instance in iterable:\n+                    yield cls.__coerce_instance(instance)\n+            # Annoyingly on both python2 and python3 bytes.join() always\n+            # returns a bytes instance even when subclassed.\n+            return super(CScript, cls).__new__(cls, b''.join(coerce_iterable(value)))\n+\n+    def raw_iter(self):\n+        \"\"\"Raw iteration\n+\n+        Yields tuples of (opcode, data, sop_idx) so that the different possible\n+        PUSHDATA encodings can be accurately distinguished, as well as\n+        determining the exact opcode byte indexes. (sop_idx)\n+        \"\"\"\n+        i = 0\n+        while i < len(self):\n+            sop_idx = i\n+            opcode = bord(self[i])\n+            i += 1\n+\n+            if opcode > OP_PUSHDATA4:\n+                yield (opcode, None, sop_idx)\n+            else:\n+                datasize = None\n+                pushdata_type = None\n+                if opcode < OP_PUSHDATA1:\n+                    pushdata_type = 'PUSHDATA(%d)' % opcode\n+                    datasize = opcode\n+\n+                elif opcode == OP_PUSHDATA1:\n+                    pushdata_type = 'PUSHDATA1'\n+                    if i >= len(self):\n+                        raise CScriptInvalidError('PUSHDATA1: missing data length')\n+                    datasize = bord(self[i])\n+                    i += 1\n+\n+                elif opcode == OP_PUSHDATA2:\n+                    pushdata_type = 'PUSHDATA2'\n+                    if i + 1 >= len(self):\n+                        raise CScriptInvalidError('PUSHDATA2: missing data length')\n+                    datasize = bord(self[i]) + (bord(self[i+1]) << 8)\n+                    i += 2\n+\n+                elif opcode == OP_PUSHDATA4:\n+                    pushdata_type = 'PUSHDATA4'\n+                    if i + 3 >= len(self):\n+                        raise CScriptInvalidError('PUSHDATA4: missing data length')\n+                    datasize = bord(self[i]) + (bord(self[i+1]) << 8) + (bord(self[i+2]) << 16) + (bord(self[i+3]) << 24)\n+                    i += 4\n+\n+                else:\n+                    assert False # shouldn't happen\n+\n+\n+                data = bytes(self[i:i+datasize])\n+\n+                # Check for truncation\n+                if len(data) < datasize:\n+                    raise CScriptTruncatedPushDataError('%s: truncated data' % pushdata_type, data)\n+\n+                i += datasize\n+\n+                yield (opcode, data, sop_idx)\n+\n+    def __iter__(self):\n+        \"\"\"'Cooked' iteration\n+\n+        Returns either a CScriptOP instance, an integer, or bytes, as\n+        appropriate.\n+\n+        See raw_iter() if you need to distinguish the different possible\n+        PUSHDATA encodings.\n+        \"\"\"\n+        for (opcode, data, sop_idx) in self.raw_iter():\n+            if data is not None:\n+                yield data\n+            else:\n+                opcode = CScriptOp(opcode)\n+\n+                if opcode.is_small_int():\n+                    yield opcode.decode_op_n()\n+                else:\n+                    yield CScriptOp(opcode)\n+\n+    def __repr__(self):\n+        # For Python3 compatibility add b before strings so testcases don't\n+        # need to change\n+        def _repr(o):\n+            if isinstance(o, bytes):\n+                return \"x('%s')\" % binascii.hexlify(o).decode('utf8')\n+            else:\n+                return repr(o)\n+\n+        ops = []\n+        i = iter(self)\n+        while True:\n+            op = None\n+            try:\n+                op = _repr(next(i))\n+            except CScriptTruncatedPushDataError as err:\n+                op = '%s...<ERROR: %s>' % (_repr(err.data), err)\n+                break\n+            except CScriptInvalidError as err:\n+                op = '<ERROR: %s>' % err\n+                break\n+            except StopIteration:\n+                break\n+            finally:\n+                if op is not None:\n+                    ops.append(op)\n+\n+        return \"CScript([%s])\" % ', '.join(ops)\n+\n+    def GetSigOpCount(self, fAccurate):\n+        \"\"\"Get the SigOp count.\n+\n+        fAccurate - Accurately count CHECKMULTISIG, see BIP16 for details.\n+\n+        Note that this is consensus-critical.\n+        \"\"\"\n+        n = 0\n+        lastOpcode = OP_INVALIDOPCODE\n+        for (opcode, data, sop_idx) in self.raw_iter():\n+            if opcode in (OP_CHECKSIG, OP_CHECKSIGVERIFY):\n+                n += 1\n+            elif opcode in (OP_CHECKMULTISIG, OP_CHECKMULTISIGVERIFY):\n+                if fAccurate and (OP_1 <= lastOpcode <= OP_16):\n+                    n += opcode.decode_op_n()\n+                else:\n+                    n += 20\n+            lastOpcode = opcode\n+        return n\n+\n+\n+SIGHASH_ALL = 1\n+SIGHASH_NONE = 2\n+SIGHASH_SINGLE = 3\n+SIGHASH_ANYONECANPAY = 0x80\n+\n+def FindAndDelete(script, sig):\n+    \"\"\"Consensus critical, see FindAndDelete() in Satoshi codebase\"\"\"\n+    r = b''\n+    last_sop_idx = sop_idx = 0\n+    skip = True\n+    for (opcode, data, sop_idx) in script.raw_iter():\n+        if not skip:\n+            r += script[last_sop_idx:sop_idx]\n+        last_sop_idx = sop_idx\n+        if script[sop_idx:sop_idx + len(sig)] == sig:\n+            skip = True\n+        else:\n+            skip = False\n+    if not skip:\n+        r += script[last_sop_idx:]\n+    return CScript(r)\n+\n+\n+def SignatureHash(script, txTo, inIdx, hashtype):\n+    \"\"\"Consensus-correct SignatureHash\n+\n+    Returns (hash, err) to precisely match the consensus-critical behavior of\n+    the SIGHASH_SINGLE bug. (inIdx is *not* checked for validity)\n+    \"\"\"\n+    HASH_ONE = b'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n+\n+    if inIdx >= len(txTo.vin):\n+        return (HASH_ONE, \"inIdx %d out of range (%d)\" % (inIdx, len(txTo.vin)))\n+    txtmp = CTransaction(txTo)\n+\n+    for txin in txtmp.vin:\n+        txin.scriptSig = b''\n+    txtmp.vin[inIdx].scriptSig = FindAndDelete(script, CScript([OP_CODESEPARATOR]))\n+\n+    if (hashtype & 0x1f) == SIGHASH_NONE:\n+        txtmp.vout = []\n+\n+        for i in range(len(txtmp.vin)):\n+            if i != inIdx:\n+                txtmp.vin[i].nSequence = 0\n+\n+    elif (hashtype & 0x1f) == SIGHASH_SINGLE:\n+        outIdx = inIdx\n+        if outIdx >= len(txtmp.vout):\n+            return (HASH_ONE, \"outIdx %d out of range (%d)\" % (outIdx, len(txtmp.vout)))\n+\n+        tmp = txtmp.vout[outIdx]\n+        txtmp.vout = []\n+        for i in range(outIdx):\n+            txtmp.vout.append(CTxOut())\n+        txtmp.vout.append(tmp)\n+\n+        for i in range(len(txtmp.vin)):\n+            if i != inIdx:\n+                txtmp.vin[i].nSequence = 0\n+\n+    if hashtype & SIGHASH_ANYONECANPAY:\n+        tmp = txtmp.vin[inIdx]\n+        txtmp.vin = []\n+        txtmp.vin.append(tmp)\n+\n+    s = txtmp.serialize()\n+    s += struct.pack(b\"<I\", hashtype)\n+\n+    hash = hash256(s)\n+\n+    return (hash, None)"
      },
      {
        "sha": "1dbfb98d5d3dd6892825aeaec8e37ca0d1566a98",
        "filename": "qa/rpc-tests/new_test_framework/socks5.py",
        "status": "added",
        "additions": 160,
        "deletions": 0,
        "changes": 160,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/new_test_framework/socks5.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/new_test_framework/socks5.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/new_test_framework/socks5.py?ref=2ec6869d6de5821e98afc28d64d62241d23b67bd",
        "patch": "@@ -0,0 +1,160 @@\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+'''\n+Dummy Socks5 server for testing.\n+'''\n+from __future__ import print_function, division, unicode_literals\n+import socket, threading, Queue\n+import traceback, sys\n+\n+### Protocol constants\n+class Command:\n+    CONNECT = 0x01\n+\n+class AddressType:\n+    IPV4 = 0x01\n+    DOMAINNAME = 0x03\n+    IPV6 = 0x04\n+\n+### Utility functions\n+def recvall(s, n):\n+    '''Receive n bytes from a socket, or fail'''\n+    rv = bytearray()\n+    while n > 0:\n+        d = s.recv(n)\n+        if not d:\n+            raise IOError('Unexpected end of stream')\n+        rv.extend(d)\n+        n -= len(d)\n+    return rv\n+\n+### Implementation classes\n+class Socks5Configuration(object):\n+    '''Proxy configuration'''\n+    def __init__(self):\n+        self.addr = None # Bind address (must be set)\n+        self.af = socket.AF_INET # Bind address family\n+        self.unauth = False  # Support unauthenticated\n+        self.auth = False  # Support authentication\n+\n+class Socks5Command(object):\n+    '''Information about an incoming socks5 command'''\n+    def __init__(self, cmd, atyp, addr, port, username, password):\n+        self.cmd = cmd # Command (one of Command.*)\n+        self.atyp = atyp # Address type (one of AddressType.*)\n+        self.addr = addr # Address\n+        self.port = port # Port to connect to\n+        self.username = username\n+        self.password = password\n+    def __repr__(self):\n+        return 'Socks5Command(%s,%s,%s,%s,%s,%s)' % (self.cmd, self.atyp, self.addr, self.port, self.username, self.password)\n+\n+class Socks5Connection(object):\n+    def __init__(self, serv, conn, peer):\n+        self.serv = serv\n+        self.conn = conn\n+        self.peer = peer\n+\n+    def handle(self):\n+        '''\n+        Handle socks5 request according to RFC1928\n+        '''\n+        try:\n+            # Verify socks version\n+            ver = recvall(self.conn, 1)[0]\n+            if ver != 0x05:\n+                raise IOError('Invalid socks version %i' % ver)\n+            # Choose authentication method\n+            nmethods = recvall(self.conn, 1)[0]\n+            methods = bytearray(recvall(self.conn, nmethods))\n+            method = None\n+            if 0x02 in methods and self.serv.conf.auth:\n+                method = 0x02 # username/password\n+            elif 0x00 in methods and self.serv.conf.unauth:\n+                method = 0x00 # unauthenticated\n+            if method is None:\n+                raise IOError('No supported authentication method was offered')\n+            # Send response\n+            self.conn.sendall(bytearray([0x05, method]))\n+            # Read authentication (optional)\n+            username = None\n+            password = None\n+            if method == 0x02:\n+                ver = recvall(self.conn, 1)[0]\n+                if ver != 0x01:\n+                    raise IOError('Invalid auth packet version %i' % ver)\n+                ulen = recvall(self.conn, 1)[0]\n+                username = str(recvall(self.conn, ulen))\n+                plen = recvall(self.conn, 1)[0]\n+                password = str(recvall(self.conn, plen))\n+                # Send authentication response\n+                self.conn.sendall(bytearray([0x01, 0x00]))\n+\n+            # Read connect request\n+            (ver,cmd,rsv,atyp) = recvall(self.conn, 4)\n+            if ver != 0x05:\n+                raise IOError('Invalid socks version %i in connect request' % ver)\n+            if cmd != Command.CONNECT:\n+                raise IOError('Unhandled command %i in connect request' % cmd)\n+\n+            if atyp == AddressType.IPV4:\n+                addr = recvall(self.conn, 4)\n+            elif atyp == AddressType.DOMAINNAME:\n+                n = recvall(self.conn, 1)[0]\n+                addr = str(recvall(self.conn, n))\n+            elif atyp == AddressType.IPV6:\n+                addr = recvall(self.conn, 16)\n+            else:\n+                raise IOError('Unknown address type %i' % atyp)\n+            port_hi,port_lo = recvall(self.conn, 2)\n+            port = (port_hi << 8) | port_lo\n+\n+            # Send dummy response\n+            self.conn.sendall(bytearray([0x05, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))\n+\n+            cmdin = Socks5Command(cmd, atyp, addr, port, username, password)\n+            self.serv.queue.put(cmdin)\n+            print('Proxy: ', cmdin)\n+            # Fall through to disconnect\n+        except Exception,e:\n+            traceback.print_exc(file=sys.stderr)\n+            self.serv.queue.put(e)\n+        finally:\n+            self.conn.close()\n+\n+class Socks5Server(object):\n+    def __init__(self, conf):\n+        self.conf = conf\n+        self.s = socket.socket(conf.af)\n+        self.s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n+        self.s.bind(conf.addr)\n+        self.s.listen(5)\n+        self.running = False\n+        self.thread = None\n+        self.queue = Queue.Queue() # report connections and exceptions to client\n+\n+    def run(self):\n+        while self.running:\n+            (sockconn, peer) = self.s.accept()\n+            if self.running:\n+                conn = Socks5Connection(self, sockconn, peer)\n+                thread = threading.Thread(None, conn.handle)\n+                thread.daemon = True\n+                thread.start()\n+    \n+    def start(self):\n+        assert(not self.running)\n+        self.running = True\n+        self.thread = threading.Thread(None, self.run)\n+        self.thread.daemon = True\n+        self.thread.start()\n+\n+    def stop(self):\n+        self.running = False\n+        # connect to self to end run loop\n+        s = socket.socket(self.conf.af)\n+        s.connect(self.conf.addr)\n+        s.close()\n+        self.thread.join()\n+"
      },
      {
        "sha": "3a8bc6e411c8510afae7f3741cb8006ba65d5783",
        "filename": "qa/rpc-tests/new_test_framework/test_framework.py",
        "status": "added",
        "additions": 179,
        "deletions": 0,
        "changes": 179,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/new_test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/new_test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/new_test_framework/test_framework.py?ref=2ec6869d6de5821e98afc28d64d62241d23b67bd",
        "patch": "@@ -0,0 +1,179 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# Base class for RPC testing\n+\n+# Add python-bitcoinrpc to module search path:\n+import os\n+import sys\n+\n+import shutil\n+import tempfile\n+import traceback\n+\n+from authproxy import AuthServiceProxy, JSONRPCException\n+from util import *\n+\n+\n+class BitcoinTestFramework(object):\n+\n+    # These may be over-ridden by subclasses:\n+    def run_test(self):\n+        for node in self.nodes:\n+            assert_equal(node.getblockcount(), 200)\n+            assert_equal(node.getbalance(), 25*50)\n+\n+    def add_options(self, parser):\n+        pass\n+\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain(self.options.tmpdir)\n+\n+    def setup_nodes(self):\n+        return start_nodes(4, self.options.tmpdir)\n+\n+    def setup_network(self, split = False):\n+        self.nodes = self.setup_nodes()\n+\n+        # Connect the nodes as a \"chain\".  This allows us\n+        # to split the network between nodes 1 and 2 to get\n+        # two halves that can work on competing chains.\n+\n+        # If we joined network halves, connect the nodes from the joint\n+        # on outward.  This ensures that chains are properly reorganised.\n+        if not split:\n+            connect_nodes_bi(self.nodes, 1, 2)\n+            sync_blocks(self.nodes[1:3])\n+            sync_mempools(self.nodes[1:3])\n+\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        connect_nodes_bi(self.nodes, 2, 3)\n+        self.is_network_split = split\n+        self.sync_all()\n+\n+    def split_network(self):\n+        \"\"\"\n+        Split the network of four nodes into nodes 0/1 and 2/3.\n+        \"\"\"\n+        assert not self.is_network_split\n+        stop_nodes(self.nodes)\n+        wait_bitcoinds()\n+        self.setup_network(True)\n+\n+    def sync_all(self):\n+        if self.is_network_split:\n+            sync_blocks(self.nodes[:2])\n+            sync_blocks(self.nodes[2:])\n+            sync_mempools(self.nodes[:2])\n+            sync_mempools(self.nodes[2:])\n+        else:\n+            sync_blocks(self.nodes)\n+            sync_mempools(self.nodes)\n+\n+    def join_network(self):\n+        \"\"\"\n+        Join the (previously split) network halves together.\n+        \"\"\"\n+        assert self.is_network_split\n+        stop_nodes(self.nodes)\n+        wait_bitcoinds()\n+        self.setup_network(False)\n+\n+    def main(self):\n+        import optparse\n+\n+        parser = optparse.OptionParser(usage=\"%prog [options]\")\n+        parser.add_option(\"--nocleanup\", dest=\"nocleanup\", default=False, action=\"store_true\",\n+                          help=\"Leave bitcoinds and test.* datadir on exit or error\")\n+        parser.add_option(\"--noshutdown\", dest=\"noshutdown\", default=False, action=\"store_true\",\n+                          help=\"Don't stop bitcoinds after the test execution\")\n+        parser.add_option(\"--srcdir\", dest=\"srcdir\", default=\"../../src\",\n+                          help=\"Source directory containing bitcoind/bitcoin-cli (default: %default)\")\n+        parser.add_option(\"--tmpdir\", dest=\"tmpdir\", default=tempfile.mkdtemp(prefix=\"test\"),\n+                          help=\"Root directory for datadirs\")\n+        parser.add_option(\"--tracerpc\", dest=\"trace_rpc\", default=False, action=\"store_true\",\n+                          help=\"Print out all RPC calls as they are made\")\n+        self.add_options(parser)\n+        (self.options, self.args) = parser.parse_args()\n+\n+        if self.options.trace_rpc:\n+            import logging\n+            logging.basicConfig(level=logging.DEBUG)\n+\n+        os.environ['PATH'] = self.options.srcdir+\":\"+self.options.srcdir+\"/qt:\"+os.environ['PATH']\n+\n+        check_json_precision()\n+\n+        success = False\n+        try:\n+            if not os.path.isdir(self.options.tmpdir):\n+                os.makedirs(self.options.tmpdir)\n+            self.setup_chain()\n+\n+            self.setup_network()\n+\n+            self.run_test()\n+\n+            success = True\n+\n+        except JSONRPCException as e:\n+            print(\"JSONRPC error: \"+e.error['message'])\n+            traceback.print_tb(sys.exc_info()[2])\n+        except AssertionError as e:\n+            print(\"Assertion failed: \"+e.message)\n+            traceback.print_tb(sys.exc_info()[2])\n+        except Exception as e:\n+            print(\"Unexpected exception caught during testing: \"+str(e))\n+            traceback.print_tb(sys.exc_info()[2])\n+\n+        if not self.options.noshutdown:\n+            print(\"Stopping nodes\")\n+            stop_nodes(self.nodes)\n+            wait_bitcoinds()\n+        else:\n+            print(\"Note: bitcoinds were not stopped and may still be running\")\n+\n+        if not self.options.nocleanup and not self.options.noshutdown:\n+            print(\"Cleaning up\")\n+            shutil.rmtree(self.options.tmpdir)\n+\n+        if success:\n+            print(\"Tests successful\")\n+            sys.exit(0)\n+        else:\n+            print(\"Failed\")\n+            sys.exit(1)\n+\n+\n+# Test framework for doing p2p comparison testing, which sets up some bitcoind\n+# binaries:\n+# 1 binary: test binary\n+# 2 binaries: 1 test binary, 1 ref binary\n+# n>2 binaries: 1 test binary, n-1 ref binaries\n+\n+class ComparisonTestFramework(BitcoinTestFramework):\n+\n+    # Can override the num_nodes variable to indicate how many nodes to run.\n+    def __init__(self):\n+        self.num_nodes = 2\n+\n+    def add_options(self, parser):\n+        parser.add_option(\"--testbinary\", dest=\"testbinary\",\n+                          default=os.getenv(\"BITCOIND\", \"bitcoind\"),\n+                          help=\"bitcoind binary to test\")\n+        parser.add_option(\"--refbinary\", dest=\"refbinary\",\n+                          default=os.getenv(\"BITCOIND\", \"bitcoind\"),\n+                          help=\"bitcoind binary to use for reference nodes (if any)\")\n+\n+    def setup_chain(self):\n+        print \"Initializing test directory \"+self.options.tmpdir\n+        initialize_chain_clean(self.options.tmpdir, self.num_nodes)\n+\n+    def setup_network(self):\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n+                                    extra_args=[['-debug', '-whitelist=127.0.0.1']] * self.num_nodes,\n+                                    binary=[self.options.testbinary] +\n+                                           [self.options.refbinary]*(self.num_nodes-1))"
      },
      {
        "sha": "18735a74ddff714887194797d5b4aa4c5609b71e",
        "filename": "qa/rpc-tests/new_test_framework/util.py",
        "status": "added",
        "additions": 356,
        "deletions": 0,
        "changes": 356,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/new_test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/new_test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/new_test_framework/util.py?ref=2ec6869d6de5821e98afc28d64d62241d23b67bd",
        "patch": "@@ -0,0 +1,356 @@\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+# Helpful routines for regression testing\n+#\n+\n+# Add python-bitcoinrpc to module search path:\n+import os\n+import sys\n+\n+from decimal import Decimal, ROUND_DOWN\n+import json\n+import random\n+import shutil\n+import subprocess\n+import time\n+import re\n+\n+from authproxy import AuthServiceProxy, JSONRPCException\n+from util import *\n+\n+def p2p_port(n):\n+    return 11000 + n + os.getpid()%999\n+def rpc_port(n):\n+    return 12000 + n + os.getpid()%999\n+\n+def check_json_precision():\n+    \"\"\"Make sure json library being used does not lose precision converting BTC values\"\"\"\n+    n = Decimal(\"20000000.00000003\")\n+    satoshis = int(json.loads(json.dumps(float(n)))*1.0e8)\n+    if satoshis != 2000000000000003:\n+        raise RuntimeError(\"JSON encode/decode loses precision\")\n+\n+def sync_blocks(rpc_connections, wait=1):\n+    \"\"\"\n+    Wait until everybody has the same block count\n+    \"\"\"\n+    while True:\n+        counts = [ x.getblockcount() for x in rpc_connections ]\n+        if counts == [ counts[0] ]*len(counts):\n+            break\n+        time.sleep(wait)\n+\n+def sync_mempools(rpc_connections, wait=1):\n+    \"\"\"\n+    Wait until everybody has the same transactions in their memory\n+    pools\n+    \"\"\"\n+    while True:\n+        pool = set(rpc_connections[0].getrawmempool())\n+        num_match = 1\n+        for i in range(1, len(rpc_connections)):\n+            if set(rpc_connections[i].getrawmempool()) == pool:\n+                num_match = num_match+1\n+        if num_match == len(rpc_connections):\n+            break\n+        time.sleep(wait)\n+\n+bitcoind_processes = {}\n+\n+def initialize_datadir(dirname, n):\n+    datadir = os.path.join(dirname, \"node\"+str(n))\n+    if not os.path.isdir(datadir):\n+        os.makedirs(datadir)\n+    with open(os.path.join(datadir, \"bitcoin.conf\"), 'w') as f:\n+        f.write(\"regtest=1\\n\");\n+        f.write(\"rpcuser=rt\\n\");\n+        f.write(\"rpcpassword=rt\\n\");\n+        f.write(\"port=\"+str(p2p_port(n))+\"\\n\");\n+        f.write(\"rpcport=\"+str(rpc_port(n))+\"\\n\");\n+    return datadir\n+\n+def initialize_chain(test_dir):\n+    \"\"\"\n+    Create (or copy from cache) a 200-block-long chain and\n+    4 wallets.\n+    bitcoind and bitcoin-cli must be in search path.\n+    \"\"\"\n+\n+    if not os.path.isdir(os.path.join(\"cache\", \"node0\")):\n+        devnull = open(\"/dev/null\", \"w+\")\n+        # Create cache directories, run bitcoinds:\n+        for i in range(4):\n+            datadir=initialize_datadir(\"cache\", i)\n+            args = [ os.getenv(\"BITCOIND\", \"bitcoind\"), \"-server\", \"-keypool=1\", \"-datadir=\"+datadir, \"-discover=0\" ]\n+            if i > 0:\n+                args.append(\"-connect=127.0.0.1:\"+str(p2p_port(0)))\n+            bitcoind_processes[i] = subprocess.Popen(args)\n+            if os.getenv(\"PYTHON_DEBUG\", \"\"):\n+                print \"initialize_chain: bitcoind started, calling bitcoin-cli -rpcwait getblockcount\"\n+            subprocess.check_call([ os.getenv(\"BITCOINCLI\", \"bitcoin-cli\"), \"-datadir=\"+datadir,\n+                                    \"-rpcwait\", \"getblockcount\"], stdout=devnull)\n+            if os.getenv(\"PYTHON_DEBUG\", \"\"):\n+                print \"initialize_chain: bitcoin-cli -rpcwait getblockcount completed\"\n+        devnull.close()\n+        rpcs = []\n+        for i in range(4):\n+            try:\n+                url = \"http://rt:rt@127.0.0.1:%d\"%(rpc_port(i),)\n+                rpcs.append(AuthServiceProxy(url))\n+            except:\n+                sys.stderr.write(\"Error connecting to \"+url+\"\\n\")\n+                sys.exit(1)\n+\n+        # Create a 200-block-long chain; each of the 4 nodes\n+        # gets 25 mature blocks and 25 immature.\n+        # blocks are created with timestamps 10 minutes apart, starting\n+        # at 1 Jan 2014\n+        block_time = 1388534400\n+        for i in range(2):\n+            for peer in range(4):\n+                for j in range(25):\n+                    set_node_times(rpcs, block_time)\n+                    rpcs[peer].setgenerate(True, 1)\n+                    block_time += 10*60\n+                # Must sync before next peer starts generating blocks\n+                sync_blocks(rpcs)\n+\n+        # Shut them down, and clean up cache directories:\n+        stop_nodes(rpcs)\n+        wait_bitcoinds()\n+        for i in range(4):\n+            os.remove(log_filename(\"cache\", i, \"debug.log\"))\n+            os.remove(log_filename(\"cache\", i, \"db.log\"))\n+            os.remove(log_filename(\"cache\", i, \"peers.dat\"))\n+            os.remove(log_filename(\"cache\", i, \"fee_estimates.dat\"))\n+\n+    for i in range(4):\n+        from_dir = os.path.join(\"cache\", \"node\"+str(i))\n+        to_dir = os.path.join(test_dir,  \"node\"+str(i))\n+        shutil.copytree(from_dir, to_dir)\n+        initialize_datadir(test_dir, i) # Overwrite port/rpcport in bitcoin.conf\n+\n+def initialize_chain_clean(test_dir, num_nodes):\n+    \"\"\"\n+    Create an empty blockchain and num_nodes wallets.\n+    Useful if a test case wants complete control over initialization.\n+    \"\"\"\n+    for i in range(num_nodes):\n+        datadir=initialize_datadir(test_dir, i)\n+\n+\n+def _rpchost_to_args(rpchost):\n+    '''Convert optional IP:port spec to rpcconnect/rpcport args'''\n+    if rpchost is None:\n+        return []\n+\n+    match = re.match('(\\[[0-9a-fA-f:]+\\]|[^:]+)(?::([0-9]+))?$', rpchost)\n+    if not match:\n+        raise ValueError('Invalid RPC host spec ' + rpchost)\n+\n+    rpcconnect = match.group(1)\n+    rpcport = match.group(2)\n+\n+    if rpcconnect.startswith('['): # remove IPv6 [...] wrapping\n+        rpcconnect = rpcconnect[1:-1]\n+\n+    rv = ['-rpcconnect=' + rpcconnect]\n+    if rpcport:\n+        rv += ['-rpcport=' + rpcport]\n+    return rv\n+\n+def start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=None):\n+    \"\"\"\n+    Start a bitcoind and return RPC connection to it\n+    \"\"\"\n+    datadir = os.path.join(dirname, \"node\"+str(i))\n+    if binary is None:\n+        binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n+    args = [ binary, \"-datadir=\"+datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\" ]\n+    if extra_args is not None: args.extend(extra_args)\n+    bitcoind_processes[i] = subprocess.Popen(args)\n+    devnull = open(\"/dev/null\", \"w+\")\n+    if os.getenv(\"PYTHON_DEBUG\", \"\"):\n+        print \"start_node: bitcoind started, calling bitcoin-cli -rpcwait getblockcount\"\n+    subprocess.check_call([ os.getenv(\"BITCOINCLI\", \"bitcoin-cli\"), \"-datadir=\"+datadir] +\n+                          _rpchost_to_args(rpchost)  +\n+                          [\"-rpcwait\", \"getblockcount\"], stdout=devnull)\n+    if os.getenv(\"PYTHON_DEBUG\", \"\"):\n+        print \"start_node: calling bitcoin-cli -rpcwait getblockcount returned\"\n+    devnull.close()\n+    url = \"http://rt:rt@%s:%d\" % (rpchost or '127.0.0.1', rpc_port(i))\n+    if timewait is not None:\n+        proxy = AuthServiceProxy(url, timeout=timewait)\n+    else:\n+        proxy = AuthServiceProxy(url)\n+    proxy.url = url # store URL on proxy for info\n+    return proxy\n+\n+def start_nodes(num_nodes, dirname, extra_args=None, rpchost=None, binary=None):\n+    \"\"\"\n+    Start multiple bitcoinds, return RPC connections to them\n+    \"\"\"\n+    if extra_args is None: extra_args = [ None for i in range(num_nodes) ]\n+    if binary is None: binary = [ None for i in range(num_nodes) ]\n+    return [ start_node(i, dirname, extra_args[i], rpchost, binary=binary[i]) for i in range(num_nodes) ]\n+\n+def log_filename(dirname, n_node, logname):\n+    return os.path.join(dirname, \"node\"+str(n_node), \"regtest\", logname)\n+\n+def stop_node(node, i):\n+    node.stop()\n+    bitcoind_processes[i].wait()\n+    del bitcoind_processes[i]\n+\n+def stop_nodes(nodes):\n+    for node in nodes:\n+        node.stop()\n+    del nodes[:] # Emptying array closes connections as a side effect\n+\n+def set_node_times(nodes, t):\n+    for node in nodes:\n+        node.setmocktime(t)\n+\n+def wait_bitcoinds():\n+    # Wait for all bitcoinds to cleanly exit\n+    for bitcoind in bitcoind_processes.values():\n+        bitcoind.wait()\n+    bitcoind_processes.clear()\n+\n+def connect_nodes(from_connection, node_num):\n+    ip_port = \"127.0.0.1:\"+str(p2p_port(node_num))\n+    from_connection.addnode(ip_port, \"onetry\")\n+    # poll until version handshake complete to avoid race conditions\n+    # with transaction relaying\n+    while any(peer['version'] == 0 for peer in from_connection.getpeerinfo()):\n+        time.sleep(0.1)\n+\n+def connect_nodes_bi(nodes, a, b):\n+    connect_nodes(nodes[a], b)\n+    connect_nodes(nodes[b], a)\n+\n+def find_output(node, txid, amount):\n+    \"\"\"\n+    Return index to output of txid with value amount\n+    Raises exception if there is none.\n+    \"\"\"\n+    txdata = node.getrawtransaction(txid, 1)\n+    for i in range(len(txdata[\"vout\"])):\n+        if txdata[\"vout\"][i][\"value\"] == amount:\n+            return i\n+    raise RuntimeError(\"find_output txid %s : %s not found\"%(txid,str(amount)))\n+\n+\n+def gather_inputs(from_node, amount_needed, confirmations_required=1):\n+    \"\"\"\n+    Return a random set of unspent txouts that are enough to pay amount_needed\n+    \"\"\"\n+    assert(confirmations_required >=0)\n+    utxo = from_node.listunspent(confirmations_required)\n+    random.shuffle(utxo)\n+    inputs = []\n+    total_in = Decimal(\"0.00000000\")\n+    while total_in < amount_needed and len(utxo) > 0:\n+        t = utxo.pop()\n+        total_in += t[\"amount\"]\n+        inputs.append({ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"], \"address\" : t[\"address\"] } )\n+    if total_in < amount_needed:\n+        raise RuntimeError(\"Insufficient funds: need %d, have %d\"%(amount_needed, total_in))\n+    return (total_in, inputs)\n+\n+def make_change(from_node, amount_in, amount_out, fee):\n+    \"\"\"\n+    Create change output(s), return them\n+    \"\"\"\n+    outputs = {}\n+    amount = amount_out+fee\n+    change = amount_in - amount\n+    if change > amount*2:\n+        # Create an extra change output to break up big inputs\n+        change_address = from_node.getnewaddress()\n+        # Split change in two, being careful of rounding:\n+        outputs[change_address] = Decimal(change/2).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n+        change = amount_in - amount - outputs[change_address]\n+    if change > 0:\n+        outputs[from_node.getnewaddress()] = change\n+    return outputs\n+\n+def send_zeropri_transaction(from_node, to_node, amount, fee):\n+    \"\"\"\n+    Create&broadcast a zero-priority transaction.\n+    Returns (txid, hex-encoded-txdata)\n+    Ensures transaction is zero-priority by first creating a send-to-self,\n+    then using its output\n+    \"\"\"\n+\n+    # Create a send-to-self with confirmed inputs:\n+    self_address = from_node.getnewaddress()\n+    (total_in, inputs) = gather_inputs(from_node, amount+fee*2)\n+    outputs = make_change(from_node, total_in, amount+fee, fee)\n+    outputs[self_address] = float(amount+fee)\n+\n+    self_rawtx = from_node.createrawtransaction(inputs, outputs)\n+    self_signresult = from_node.signrawtransaction(self_rawtx)\n+    self_txid = from_node.sendrawtransaction(self_signresult[\"hex\"], True)\n+\n+    vout = find_output(from_node, self_txid, amount+fee)\n+    # Now immediately spend the output to create a 1-input, 1-output\n+    # zero-priority transaction:\n+    inputs = [ { \"txid\" : self_txid, \"vout\" : vout } ]\n+    outputs = { to_node.getnewaddress() : float(amount) }\n+\n+    rawtx = from_node.createrawtransaction(inputs, outputs)\n+    signresult = from_node.signrawtransaction(rawtx)\n+    txid = from_node.sendrawtransaction(signresult[\"hex\"], True)\n+\n+    return (txid, signresult[\"hex\"])\n+\n+def random_zeropri_transaction(nodes, amount, min_fee, fee_increment, fee_variants):\n+    \"\"\"\n+    Create a random zero-priority transaction.\n+    Returns (txid, hex-encoded-transaction-data, fee)\n+    \"\"\"\n+    from_node = random.choice(nodes)\n+    to_node = random.choice(nodes)\n+    fee = min_fee + fee_increment*random.randint(0,fee_variants)\n+    (txid, txhex) = send_zeropri_transaction(from_node, to_node, amount, fee)\n+    return (txid, txhex, fee)\n+\n+def random_transaction(nodes, amount, min_fee, fee_increment, fee_variants):\n+    \"\"\"\n+    Create a random transaction.\n+    Returns (txid, hex-encoded-transaction-data, fee)\n+    \"\"\"\n+    from_node = random.choice(nodes)\n+    to_node = random.choice(nodes)\n+    fee = min_fee + fee_increment*random.randint(0,fee_variants)\n+\n+    (total_in, inputs) = gather_inputs(from_node, amount+fee)\n+    outputs = make_change(from_node, total_in, amount, fee)\n+    outputs[to_node.getnewaddress()] = float(amount)\n+\n+    rawtx = from_node.createrawtransaction(inputs, outputs)\n+    signresult = from_node.signrawtransaction(rawtx)\n+    txid = from_node.sendrawtransaction(signresult[\"hex\"], True)\n+\n+    return (txid, signresult[\"hex\"], fee)\n+\n+def assert_equal(thing1, thing2):\n+    if thing1 != thing2:\n+        raise AssertionError(\"%s != %s\"%(str(thing1),str(thing2)))\n+\n+def assert_greater_than(thing1, thing2):\n+    if thing1 <= thing2:\n+        raise AssertionError(\"%s <= %s\"%(str(thing1),str(thing2)))\n+\n+def assert_raises(exc, fun, *args, **kwds):\n+    try:\n+        fun(*args, **kwds)\n+    except exc:\n+        pass\n+    except Exception as e:\n+        raise AssertionError(\"Unexpected exception raised: \"+type(e).__name__)\n+    else:\n+        raise AssertionError(\"No exception raised\")"
      },
      {
        "sha": "95882c9aaf84759ace2ca7282cf7cfe83a6d5464",
        "filename": "qa/rpc-tests/reindex.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec6869d6de5821e98afc28d64d62241d23b67bd/qa/rpc-tests/reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/reindex.py?ref=2ec6869d6de5821e98afc28d64d62241d23b67bd",
        "patch": "@@ -23,7 +23,7 @@ def setup_network(self):\n         self.nodes.append(start_node(0, self.options.tmpdir))\n \n     def run_test(self):\n-        self.nodes[0].generate(3)\n+        self.nodes[0].setgenerate(True, 3)\n         stop_node(self.nodes[0], 0)\n         wait_bitcoinds()\n         self.nodes[0]=start_node(0, self.options.tmpdir, [\"-debug\", \"-reindex\", \"-checkblockindex=1\"])"
      }
    ]
  },
  {
    "sha": "29e3d6c616162add19da5553af0004f59b1bd250",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOWUzZDZjNjE2MTYyYWRkMTlkYTU1NTNhZjAwMDRmNTliMWJkMjUw",
    "commit": {
      "author": {
        "name": "Veres Lajos",
        "email": "vlajos@gmail.com",
        "date": "2015-08-08T23:17:27Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T02:54:13Z"
      },
      "message": "typofixes (found by misspell_fixer)\n\nGithub-Pull: #6539\nRebased-From: 9f68ed6b6d1a9c6436ce37913666165f2b180ee3",
      "tree": {
        "sha": "b96c0ac381b56c8970294c552dcd2e41e82680d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b96c0ac381b56c8970294c552dcd2e41e82680d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29e3d6c616162add19da5553af0004f59b1bd250",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29e3d6c616162add19da5553af0004f59b1bd250",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29e3d6c616162add19da5553af0004f59b1bd250",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29e3d6c616162add19da5553af0004f59b1bd250/comments",
    "author": {
      "login": "vlajos",
      "id": 3994645,
      "node_id": "MDQ6VXNlcjM5OTQ2NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3994645?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vlajos",
      "html_url": "https://github.com/vlajos",
      "followers_url": "https://api.github.com/users/vlajos/followers",
      "following_url": "https://api.github.com/users/vlajos/following{/other_user}",
      "gists_url": "https://api.github.com/users/vlajos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vlajos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vlajos/subscriptions",
      "organizations_url": "https://api.github.com/users/vlajos/orgs",
      "repos_url": "https://api.github.com/users/vlajos/repos",
      "events_url": "https://api.github.com/users/vlajos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vlajos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ec6869d6de5821e98afc28d64d62241d23b67bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ec6869d6de5821e98afc28d64d62241d23b67bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ec6869d6de5821e98afc28d64d62241d23b67bd"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "cfd1002cf2675a87c94a7ad07755343d690f4762",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29e3d6c616162add19da5553af0004f59b1bd250/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29e3d6c616162add19da5553af0004f59b1bd250/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=29e3d6c616162add19da5553af0004f59b1bd250",
        "patch": "@@ -116,7 +116,7 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 CHECKLOCKTIMEVERIFY 1\"]],\n \"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000fe64cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n-[\"By-time locks, with argument just beyond tx nLockTime (but within numerical boundries)\"],\n+[\"By-time locks, with argument just beyond tx nLockTime (but within numerical boundaries)\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000001 CHECKLOCKTIMEVERIFY 1\"]],\n \"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 CHECKLOCKTIMEVERIFY 1\"]],"
      },
      {
        "sha": "d124e78d451a76c1996522e4cff8cecf8c7f0898",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29e3d6c616162add19da5553af0004f59b1bd250/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29e3d6c616162add19da5553af0004f59b1bd250/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=29e3d6c616162add19da5553af0004f59b1bd250",
        "patch": "@@ -188,7 +188,7 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 CHECKLOCKTIMEVERIFY 1\"]],\n \"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ff64cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n-[\"By-time locks, with argument just beyond tx nLockTime (but within numerical boundries)\"],\n+[\"By-time locks, with argument just beyond tx nLockTime (but within numerical boundaries)\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 CHECKLOCKTIMEVERIFY 1\"]],\n \"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 CHECKLOCKTIMEVERIFY 1\"]],"
      }
    ]
  },
  {
    "sha": "b326b33cd887badde0072537f30cd6f8d94147d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMzI2YjMzY2Q4ODdiYWRkZTAwNzI1MzdmMzBjZDZmOGQ5NDE0N2Q3",
    "commit": {
      "author": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2015-08-11T01:09:59Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T02:54:20Z"
      },
      "message": "Fix spelling mistake in -> if.\n\nGithub-Pull: #6544\nRebased-From: c5c1edfe6035791973d419ae72cbf24342ee7e4c",
      "tree": {
        "sha": "bbb0d170676fe0fe99c8d3603fe1258e868d1f43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bbb0d170676fe0fe99c8d3603fe1258e868d1f43"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b326b33cd887badde0072537f30cd6f8d94147d7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b326b33cd887badde0072537f30cd6f8d94147d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b326b33cd887badde0072537f30cd6f8d94147d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b326b33cd887badde0072537f30cd6f8d94147d7/comments",
    "author": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29e3d6c616162add19da5553af0004f59b1bd250",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29e3d6c616162add19da5553af0004f59b1bd250",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29e3d6c616162add19da5553af0004f59b1bd250"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9755d83eae97ecb941eed0861ed75e9edaa76de9",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b326b33cd887badde0072537f30cd6f8d94147d7/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b326b33cd887badde0072537f30cd6f8d94147d7/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=b326b33cd887badde0072537f30cd6f8d94147d7",
        "patch": "@@ -169,7 +169,7 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483648 CHECKLOCKTIMEVERIFY 1\"]],\n \"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ffffff7f\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n-[\"6 byte non-minimally-encoded arguments are invalid even in their contents are valid\"],\n+[\"6 byte non-minimally-encoded arguments are invalid even if their contents are valid\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x06 0x000000000000 CHECKLOCKTIMEVERIFY 1\"]],\n \"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n "
      }
    ]
  },
  {
    "sha": "4be978311d16bdbaa0dec3228564c68debaa719b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YmU5NzgzMTFkMTZiZGJhYTBkZWMzMjI4NTY0YzY4ZGViYWE3MTli",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-07-13T18:28:03Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T02:54:36Z"
      },
      "message": "configure --enable-debug changes\n\nThree changes to how configure --enable-debug behaves:\n\n1. Preserve user-passed CXXFLAGS/CFLAGS\n2. Compile with -DDEBUG_LOCKORDER\n3. Add -DDEBUG -DDEBUG_LOCKORDER to CPPFLAGS (since they are preprocessor options)\n\nGithub-Pull: #6434\nRebased-From: 83b48c89718e7b3fc2b180be992446a068f7fdcc",
      "tree": {
        "sha": "ee11681549ee728dfbcd8ab8a949df290c599874",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee11681549ee728dfbcd8ab8a949df290c599874"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4be978311d16bdbaa0dec3228564c68debaa719b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4be978311d16bdbaa0dec3228564c68debaa719b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4be978311d16bdbaa0dec3228564c68debaa719b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4be978311d16bdbaa0dec3228564c68debaa719b/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b326b33cd887badde0072537f30cd6f8d94147d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b326b33cd887badde0072537f30cd6f8d94147d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b326b33cd887badde0072537f30cd6f8d94147d7"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7364ddeff528202204a5d58e8725d2c120e07d6f",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4be978311d16bdbaa0dec3228564c68debaa719b/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4be978311d16bdbaa0dec3228564c68debaa719b/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=4be978311d16bdbaa0dec3228564c68debaa719b",
        "patch": "@@ -154,12 +154,13 @@ AC_ARG_ENABLE([debug],\n     [enable_debug=no])\n \n if test \"x$enable_debug\" = xyes; then\n+    CPPFLAGS=\"$CPPFLAGS -DDEBUG -DDEBUG_LOCKORDER\"\n     if test \"x$GCC\" = xyes; then\n-        CFLAGS=\"-g3 -O0 -DDEBUG\"\n+        CFLAGS=\"$CFLAGS -g3 -O0\"\n     fi\n     \n     if test \"x$GXX\" = xyes; then\n-        CXXFLAGS=\"-g3 -O0 -DDEBUG\"\n+        CXXFLAGS=\"$CXXFLAGS -g3 -O0\"\n     fi\n fi \n "
      }
    ]
  },
  {
    "sha": "59d8614054686d1aaac76358321250d330a820f2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OWQ4NjE0MDU0Njg2ZDFhYWFjNzYzNTgzMjEyNTBkMzMwYTgyMGYy",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-07-23T14:14:17Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T02:54:42Z"
      },
      "message": "fix CBitcoinExtKeyBase template\n\n- fix Decode call (req. only one param)\n\nGithub-Pull: #6468\nPartial-Rebased-From: 7cb1f9f7eb8162a792b4b87bba99fa21c682582e",
      "tree": {
        "sha": "1864a804f5abf05e7743a026383ec392237026d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1864a804f5abf05e7743a026383ec392237026d6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59d8614054686d1aaac76358321250d330a820f2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59d8614054686d1aaac76358321250d330a820f2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/59d8614054686d1aaac76358321250d330a820f2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59d8614054686d1aaac76358321250d330a820f2/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4be978311d16bdbaa0dec3228564c68debaa719b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4be978311d16bdbaa0dec3228564c68debaa719b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4be978311d16bdbaa0dec3228564c68debaa719b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e134b42df1a924042f69923dbe761af9e20f97fa",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59d8614054686d1aaac76358321250d330a820f2/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59d8614054686d1aaac76358321250d330a820f2/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=59d8614054686d1aaac76358321250d330a820f2",
        "patch": "@@ -145,7 +145,7 @@ template<typename K, int Size, CChainParams::Base58Type Type> class CBitcoinExtK\n \n     K GetKey() {\n         K ret;\n-        ret.Decode(&vchData[0], &vchData[Size]);\n+        ret.Decode(&vchData[0]);\n         return ret;\n     }\n "
      }
    ]
  },
  {
    "sha": "1157680fea586b5225d6a3e0879205234da1bcd3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTU3NjgwZmVhNTg2YjUyMjVkNmEzZTA4NzkyMDUyMzRkYTFiY2Qz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-07-23T14:14:17Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T02:54:46Z"
      },
      "message": "fix and extend CBitcoinExtKeyBase template\n\n- fix Decode call (req. only one param)\n- add constructor for base58c->CExtKey\n\nGithub-Pull: #6468\nRebased-From: 7cb1f9f7eb8162a792b4b87bba99fa21c682582e",
      "tree": {
        "sha": "33ca185ae8135b2fd1420745aff3149d3765e0cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33ca185ae8135b2fd1420745aff3149d3765e0cb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1157680fea586b5225d6a3e0879205234da1bcd3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1157680fea586b5225d6a3e0879205234da1bcd3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1157680fea586b5225d6a3e0879205234da1bcd3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1157680fea586b5225d6a3e0879205234da1bcd3/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "59d8614054686d1aaac76358321250d330a820f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59d8614054686d1aaac76358321250d330a820f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/59d8614054686d1aaac76358321250d330a820f2"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "955452b921aff60e4f5d7c64497c51453f72c461",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1157680fea586b5225d6a3e0879205234da1bcd3/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1157680fea586b5225d6a3e0879205234da1bcd3/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=1157680fea586b5225d6a3e0879205234da1bcd3",
        "patch": "@@ -153,6 +153,10 @@ template<typename K, int Size, CChainParams::Base58Type Type> class CBitcoinExtK\n         SetKey(key);\n     }\n \n+    CBitcoinExtKeyBase(const std::string& strBase58c) {\n+        SetString(strBase58c.c_str(), Params().Base58Prefix(Type).size());\n+    }\n+\n     CBitcoinExtKeyBase() {}\n };\n "
      }
    ]
  },
  {
    "sha": "04962bb6ec295ac0b89bffcf2ac6c47cdb254d37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNDk2MmJiNmVjMjk1YWMwYjg5YmZmY2YyYWM2YzQ3Y2RiMjU0ZDM3",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-07-23T14:22:37Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T02:54:49Z"
      },
      "message": "extend bip32 tests to cover Base58c/CExtKey decode\n\nGithub-Pull: #6468\nRebased-From: 8d2af54eccda83bfe86bb14069ad54d0e4ba357c",
      "tree": {
        "sha": "57da1d2405e3ef27c837972d4fbd49cdc2f26743",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57da1d2405e3ef27c837972d4fbd49cdc2f26743"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/04962bb6ec295ac0b89bffcf2ac6c47cdb254d37",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04962bb6ec295ac0b89bffcf2ac6c47cdb254d37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/04962bb6ec295ac0b89bffcf2ac6c47cdb254d37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04962bb6ec295ac0b89bffcf2ac6c47cdb254d37/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1157680fea586b5225d6a3e0879205234da1bcd3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1157680fea586b5225d6a3e0879205234da1bcd3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1157680fea586b5225d6a3e0879205234da1bcd3"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b3b683cf7f9739d8d7acfbabe10402bfb0a40d73",
        "filename": "src/test/bip32_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04962bb6ec295ac0b89bffcf2ac6c47cdb254d37/src/test/bip32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04962bb6ec295ac0b89bffcf2ac6c47cdb254d37/src/test/bip32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bip32_tests.cpp?ref=04962bb6ec295ac0b89bffcf2ac6c47cdb254d37",
        "patch": "@@ -86,12 +86,23 @@ void RunTest(const TestVector &test) {\n         unsigned char data[74];\n         key.Encode(data);\n         pubkey.Encode(data);\n+\n         // Test private key\n         CBitcoinExtKey b58key; b58key.SetKey(key);\n         BOOST_CHECK(b58key.ToString() == derive.prv);\n+\n+        CBitcoinExtKey b58keyDecodeCheck(derive.prv);\n+        CExtKey checkKey = b58keyDecodeCheck.GetKey();\n+        assert(checkKey == key); //ensure a base58 decoded key also matches\n+\n         // Test public key\n         CBitcoinExtPubKey b58pubkey; b58pubkey.SetKey(pubkey);\n         BOOST_CHECK(b58pubkey.ToString() == derive.pub);\n+\n+        CBitcoinExtPubKey b58PubkeyDecodeCheck(derive.pub);\n+        CExtPubKey checkPubKey = b58PubkeyDecodeCheck.GetKey();\n+        assert(checkPubKey == pubkey); //ensure a base58 decoded pubkey also matches\n+\n         // Derive new keys\n         CExtKey keyNew;\n         BOOST_CHECK(key.Derive(keyNew, derive.nChild));"
      }
    ]
  },
  {
    "sha": "95bd773a644660dc0323ba29039869d2cefd01e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NWJkNzczYTY0NDY2MGRjMDMyM2JhMjkwMzk4NjlkMmNlZmQwMWU1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-07-23T19:05:00Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T02:54:53Z"
      },
      "message": "don't try to decode invalid encoded ext keys\n\nGithub-Pull: #6468\nRebased-From: 6f8b6d339bf6d6f7fe5a23180e668f7734755d91",
      "tree": {
        "sha": "6df58f0f44701b1cccc7ae9e54a4cab22dfc187d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6df58f0f44701b1cccc7ae9e54a4cab22dfc187d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95bd773a644660dc0323ba29039869d2cefd01e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95bd773a644660dc0323ba29039869d2cefd01e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/95bd773a644660dc0323ba29039869d2cefd01e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95bd773a644660dc0323ba29039869d2cefd01e5/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "04962bb6ec295ac0b89bffcf2ac6c47cdb254d37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04962bb6ec295ac0b89bffcf2ac6c47cdb254d37",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/04962bb6ec295ac0b89bffcf2ac6c47cdb254d37"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d5a38ec5ec58868df120ca732e888a6692c37aed",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95bd773a644660dc0323ba29039869d2cefd01e5/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95bd773a644660dc0323ba29039869d2cefd01e5/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=95bd773a644660dc0323ba29039869d2cefd01e5",
        "patch": "@@ -145,7 +145,10 @@ template<typename K, int Size, CChainParams::Base58Type Type> class CBitcoinExtK\n \n     K GetKey() {\n         K ret;\n-        ret.Decode(&vchData[0]);\n+        if (vchData.size() == Size) {\n+            //if base58 encouded data not holds a ext key, return a !IsValid() key\n+            ret.Decode(&vchData[0]);\n+        }\n         return ret;\n     }\n "
      }
    ]
  },
  {
    "sha": "dcfe230b448782ec37f5f4ddc313530a8510c4c4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkY2ZlMjMwYjQ0ODc4MmVjMzdmNWY0ZGRjMzEzNTMwYTg1MTBjNGM0",
    "commit": {
      "author": {
        "name": "unsystemizer",
        "email": "something@gmail.com",
        "date": "2015-08-04T06:10:51Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T02:56:43Z"
      },
      "message": "Add note on relative paths, improve formatting\n\nAdded \"conf, pid, and wallet accept relative paths which are interpreted as relative to the data directory. wallet only supports relative paths.\"\nGithub-Pull: #6512\nRebased-From: fc25a8748eefe3cb62be93d9804ef3f9e17b78cc",
      "tree": {
        "sha": "4478195c5200bb7cf6eff40e8b34a24efdb82ea9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4478195c5200bb7cf6eff40e8b34a24efdb82ea9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dcfe230b448782ec37f5f4ddc313530a8510c4c4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcfe230b448782ec37f5f4ddc313530a8510c4c4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dcfe230b448782ec37f5f4ddc313530a8510c4c4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcfe230b448782ec37f5f4ddc313530a8510c4c4/comments",
    "author": {
      "login": "unsystemizer",
      "id": 13134193,
      "node_id": "MDQ6VXNlcjEzMTM0MTkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/13134193?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/unsystemizer",
      "html_url": "https://github.com/unsystemizer",
      "followers_url": "https://api.github.com/users/unsystemizer/followers",
      "following_url": "https://api.github.com/users/unsystemizer/following{/other_user}",
      "gists_url": "https://api.github.com/users/unsystemizer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/unsystemizer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/unsystemizer/subscriptions",
      "organizations_url": "https://api.github.com/users/unsystemizer/orgs",
      "repos_url": "https://api.github.com/users/unsystemizer/repos",
      "events_url": "https://api.github.com/users/unsystemizer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/unsystemizer/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "95bd773a644660dc0323ba29039869d2cefd01e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95bd773a644660dc0323ba29039869d2cefd01e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95bd773a644660dc0323ba29039869d2cefd01e5"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 15,
      "deletions": 13
    },
    "files": [
      {
        "sha": "f0b233fec2dd6ef4be49eb6b76d980694a809215",
        "filename": "doc/init.md",
        "status": "modified",
        "additions": 15,
        "deletions": 13,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcfe230b448782ec37f5f4ddc313530a8510c4c4/doc/init.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcfe230b448782ec37f5f4ddc313530a8510c4c4/doc/init.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/init.md?ref=dcfe230b448782ec37f5f4ddc313530a8510c4c4",
        "patch": "@@ -32,22 +32,24 @@ If bitcoind is run with \"-daemon\" flag, and no rpcpassword is set, it will\n print a randomly generated suitable password to stderr.  You can also\n generate one from the shell yourself like this:\n \n-bash -c 'tr -dc a-zA-Z0-9 < /dev/urandom | head -c32 && echo'\n+`bash -c 'tr -dc a-zA-Z0-9 < /dev/urandom | head -c32 && echo'`\n \n \n+`conf`, `pid`, and `wallet` accept relative paths which are interpreted as\n+relative to the data directory. `wallet` *only* supports relative paths.\n+\n For an example configuration file that describes the configuration settings,\n-see contrib/debian/examples/bitcoin.conf.\n+see `contrib/debian/examples/bitcoin.conf`.\n \n 3. Paths\n ---------------------------------\n \n All three configurations assume several paths that might need to be adjusted.\n \n-Binary:              /usr/bin/bitcoind\n-Configuration file:  /etc/bitcoin/bitcoin.conf\n-Data directory:      /var/lib/bitcoind\n-PID file:            /var/run/bitcoind/bitcoind.pid (OpenRC and Upstart)\n-                     /var/lib/bitcoind/bitcoind.pid (systemd)\n+Binary:              `/usr/bin/bitcoind`\n+Configuration file:  `/etc/bitcoin/bitcoin.conf`\n+Data directory:      `/var/lib/bitcoind`\n+PID file:            `/var/run/bitcoind/bitcoind.pid` (OpenRC and Upstart) or `/var/lib/bitcoind/bitcoind.pid` (systemd)\n \n The configuration file, PID directory (if applicable) and data directory\n should all be owned by the bitcoin user and group.  It is advised for security\n@@ -62,21 +64,21 @@ can then be controlled by group membership.\n \n Installing this .service file consists on just copying it to\n /usr/lib/systemd/system directory, followed by the command\n-\"systemctl daemon-reload\" in order to update running systemd configuration.\n+`systemctl daemon-reload` in order to update running systemd configuration.\n \n-To test, run \"systemctl start bitcoind\" and to enable for system startup run\n-\"systemctl enable bitcoind\"\n+To test, run `systemctl start bitcoind` and to enable for system startup run\n+`systemctl enable bitcoind`\n \n 4b) OpenRC\n \n Rename bitcoind.openrc to bitcoind and drop it in /etc/init.d.  Double\n check ownership and permissions and make it executable.  Test it with\n-\"/etc/init.d/bitcoind start\" and configure it to run on startup with\n-\"rc-update add bitcoind\"\n+`/etc/init.d/bitcoind start` and configure it to run on startup with\n+`rc-update add bitcoind`\n \n 4c) Upstart (for Debian/Ubuntu based distributions)\n \n-Drop bitcoind.conf in /etc/init.  Test by running \"service bitcoind start\"\n+Drop bitcoind.conf in /etc/init.  Test by running `service bitcoind start`\n it will automatically start on reboot.\n \n NOTE: This script is incompatible with CentOS 5 and Amazon Linux 2014 as they"
      }
    ]
  },
  {
    "sha": "7683e35801adb96611bdd42e326910c701f967f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjgzZTM1ODAxYWRiOTY2MTFiZGQ0MmUzMjY5MTBjNzAxZjk2N2Y4",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-08-10T18:10:56Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T02:58:19Z"
      },
      "message": "Reformat validateaddress help, add missing iswatchonly description.\n\nGithub-Pull: #6541\nRebased-From: e0862c0933bc809ef1087e3e0a3ee8cd76b04ac9",
      "tree": {
        "sha": "54d2246ffb1ae411afb9ba82c3d1c75705b5f4fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/54d2246ffb1ae411afb9ba82c3d1c75705b5f4fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7683e35801adb96611bdd42e326910c701f967f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7683e35801adb96611bdd42e326910c701f967f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7683e35801adb96611bdd42e326910c701f967f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7683e35801adb96611bdd42e326910c701f967f8/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dcfe230b448782ec37f5f4ddc313530a8510c4c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcfe230b448782ec37f5f4ddc313530a8510c4c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dcfe230b448782ec37f5f4ddc313530a8510c4c4"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "e17caf02f1edfa15631e867b5e7a28f0a1b5397a",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7683e35801adb96611bdd42e326910c701f967f8/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7683e35801adb96611bdd42e326910c701f967f8/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=7683e35801adb96611bdd42e326910c701f967f8",
        "patch": "@@ -160,12 +160,13 @@ Value validateaddress(const Array& params, bool fHelp)\n             \"1. \\\"bitcoinaddress\\\"     (string, required) The bitcoin address to validate\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"isvalid\\\" : true|false,         (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n+            \"  \\\"isvalid\\\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n             \"  \\\"address\\\" : \\\"bitcoinaddress\\\", (string) The bitcoin address validated\\n\"\n-            \"  \\\"ismine\\\" : true|false,          (boolean) If the address is yours or not\\n\"\n-            \"  \\\"isscript\\\" : true|false,        (boolean) If the key is a script\\n\"\n+            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n             \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) The hex value of the raw public key\\n\"\n-            \"  \\\"iscompressed\\\" : true|false,    (boolean) If the address is compressed\\n\"\n+            \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n             \"  \\\"account\\\" : \\\"account\\\"         (string) The account associated with the address, \\\"\\\" is the default account\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\""
      }
    ]
  },
  {
    "sha": "c5d0e7ab480b01101ac211ec33508748d2af50fc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNWQwZTdhYjQ4MGIwMTEwMWFjMjExZWMzMzUwODc0OGQyYWY1MGZj",
    "commit": {
      "author": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2015-08-11T01:08:30Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T02:58:26Z"
      },
      "message": "Correct a possibly intentional pun that is nevertheless hard to read: \"two times of nLockTime.\" What is meant is that there are two kinds, or categories of nLockTime.\n\nGithub-Pull: #6544\nRebased-From: e846b2a1e96f27257cbb79f7f61bfaf3d873bb97",
      "tree": {
        "sha": "ef4e130f41242da58cc30133eb667b7a67c2fe74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef4e130f41242da58cc30133eb667b7a67c2fe74"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5d0e7ab480b01101ac211ec33508748d2af50fc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5d0e7ab480b01101ac211ec33508748d2af50fc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c5d0e7ab480b01101ac211ec33508748d2af50fc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5d0e7ab480b01101ac211ec33508748d2af50fc/comments",
    "author": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7683e35801adb96611bdd42e326910c701f967f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7683e35801adb96611bdd42e326910c701f967f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7683e35801adb96611bdd42e326910c701f967f8"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6f156750ca6c1425650a1b60848a9398d685140e",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5d0e7ab480b01101ac211ec33508748d2af50fc/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5d0e7ab480b01101ac211ec33508748d2af50fc/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=c5d0e7ab480b01101ac211ec33508748d2af50fc",
        "patch": "@@ -1127,7 +1127,7 @@ bool TransactionSignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn\n \n bool TransactionSignatureChecker::CheckLockTime(const CScriptNum& nLockTime) const\n {\n-    // There are two times of nLockTime: lock-by-blockheight\n+    // There are two kinds of nLockTime: lock-by-blockheight\n     // and lock-by-blocktime, distinguished by whether\n     // nLockTime < LOCKTIME_THRESHOLD.\n     //"
      }
    ]
  },
  {
    "sha": "49e9a861ebeccefe60685463186805705d7e37ee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OWU5YTg2MWViZWNjZWZlNjA2ODU0NjMxODY4MDU3MDVkN2UzN2Vl",
    "commit": {
      "author": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-08-17T16:05:47Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T02:58:32Z"
      },
      "message": "Make limited map actually respect max size\n\nGithub-Pull: #6561\nRebased-From: fd2d862fbc4d13129bfa3702a9241d9ea46ddae5",
      "tree": {
        "sha": "b62f191a04b0af22331db3d80777c59128308b33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b62f191a04b0af22331db3d80777c59128308b33"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49e9a861ebeccefe60685463186805705d7e37ee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49e9a861ebeccefe60685463186805705d7e37ee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/49e9a861ebeccefe60685463186805705d7e37ee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49e9a861ebeccefe60685463186805705d7e37ee/comments",
    "author": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c5d0e7ab480b01101ac211ec33508748d2af50fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5d0e7ab480b01101ac211ec33508748d2af50fc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5d0e7ab480b01101ac211ec33508748d2af50fc"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2428edd9e2c356990917707f84e7ed9ba8b19b7a",
        "filename": "src/limitedmap.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49e9a861ebeccefe60685463186805705d7e37ee/src/limitedmap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49e9a861ebeccefe60685463186805705d7e37ee/src/limitedmap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/limitedmap.h?ref=49e9a861ebeccefe60685463186805705d7e37ee",
        "patch": "@@ -38,7 +38,7 @@ class limitedmap\n     {\n         std::pair<iterator, bool> ret = map.insert(x);\n         if (ret.second) {\n-            if (nMaxSize && map.size() == nMaxSize) {\n+            if (nMaxSize && map.size() > nMaxSize) {\n                 map.erase(rmap.begin()->second);\n                 rmap.erase(rmap.begin());\n             }"
      }
    ]
  },
  {
    "sha": "2e052f4be83ef58a66e68a90b7c57dc2f37c30ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZTA1MmY0YmU4M2VmNThhNjZlNjhhOTBiN2M1N2RjMmYzN2MzMGFj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-08-27T01:58:17Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T03:29:14Z"
      },
      "message": "Fix removal of time-locked transactions during reorg\n\nGithub-Pull: #6595\nRebased-From: 2276af1501931e05979d11921d1f9104f0013e9f",
      "tree": {
        "sha": "c821ef6f6f9767dc3a3a6c20a906f5fc12d04857",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c821ef6f6f9767dc3a3a6c20a906f5fc12d04857"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e052f4be83ef58a66e68a90b7c57dc2f37c30ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e052f4be83ef58a66e68a90b7c57dc2f37c30ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2e052f4be83ef58a66e68a90b7c57dc2f37c30ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e052f4be83ef58a66e68a90b7c57dc2f37c30ac/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49e9a861ebeccefe60685463186805705d7e37ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49e9a861ebeccefe60685463186805705d7e37ee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49e9a861ebeccefe60685463186805705d7e37ee"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 17,
      "deletions": 12
    },
    "files": [
      {
        "sha": "812e0b72f3b58ec62ea53063528029f784c075fc",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e052f4be83ef58a66e68a90b7c57dc2f37c30ac/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e052f4be83ef58a66e68a90b7c57dc2f37c30ac/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=2e052f4be83ef58a66e68a90b7c57dc2f37c30ac",
        "patch": "@@ -1963,7 +1963,7 @@ bool static DisconnectTip(CValidationState &state) {\n         if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, tx, false, NULL))\n             mempool.remove(tx, removed, true);\n     }\n-    mempool.removeCoinbaseSpends(pcoinsTip, pindexDelete->nHeight);\n+    mempool.removeForReorg(pcoinsTip, pindexDelete->nHeight);\n     mempool.check(pcoinsTip);\n     // Update chainActive and related variables.\n     UpdateTip(pindexDelete->pprev);"
      },
      {
        "sha": "085ef583c11276f335dc39b3ce52fb695e1c3f8f",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 10,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e052f4be83ef58a66e68a90b7c57dc2f37c30ac/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e052f4be83ef58a66e68a90b7c57dc2f37c30ac/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=2e052f4be83ef58a66e68a90b7c57dc2f37c30ac",
        "patch": "@@ -8,6 +8,7 @@\n #include \"clientversion.h\"\n #include \"main.h\"\n #include \"streams.h\"\n+#include \"timedata.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n #include \"version.h\"\n@@ -482,22 +483,26 @@ void CTxMemPool::remove(const CTransaction &origTx, std::list<CTransaction>& rem\n     }\n }\n \n-void CTxMemPool::removeCoinbaseSpends(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight)\n+void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight)\n {\n     // Remove transactions spending a coinbase which are now immature\n     LOCK(cs);\n     list<CTransaction> transactionsToRemove;\n     for (std::map<uint256, CTxMemPoolEntry>::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         const CTransaction& tx = it->second.GetTx();\n-        BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n-            std::map<uint256, CTxMemPoolEntry>::const_iterator it2 = mapTx.find(txin.prevout.hash);\n-            if (it2 != mapTx.end())\n-                continue;\n-            const CCoins *coins = pcoins->AccessCoins(txin.prevout.hash);\n-            if (fSanityCheck) assert(coins);\n-            if (!coins || (coins->IsCoinBase() && nMemPoolHeight - coins->nHeight < COINBASE_MATURITY)) {\n-                transactionsToRemove.push_back(tx);\n-                break;\n+        if (!IsFinalTx(tx, nMemPoolHeight, GetAdjustedTime()))\n+            transactionsToRemove.push_back(tx);\n+        else {\n+            BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+                std::map<uint256, CTxMemPoolEntry>::const_iterator it2 = mapTx.find(txin.prevout.hash);\n+                if (it2 != mapTx.end())\n+                    continue;\n+                const CCoins *coins = pcoins->AccessCoins(txin.prevout.hash);\n+                if (fSanityCheck) assert(coins);\n+                if (!coins || (coins->IsCoinBase() && nMemPoolHeight - coins->nHeight < COINBASE_MATURITY)) {\n+                    transactionsToRemove.push_back(tx);\n+                    break;\n+                }\n             }\n         }\n     }"
      },
      {
        "sha": "c917a2d513f6d2b975f24f4d5b38a370a6b9b7c3",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e052f4be83ef58a66e68a90b7c57dc2f37c30ac/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e052f4be83ef58a66e68a90b7c57dc2f37c30ac/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=2e052f4be83ef58a66e68a90b7c57dc2f37c30ac",
        "patch": "@@ -113,7 +113,7 @@ class CTxMemPool\n \n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry);\n     void remove(const CTransaction &tx, std::list<CTransaction>& removed, bool fRecursive = false);\n-    void removeCoinbaseSpends(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight);\n+    void removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight);\n     void removeConflicts(const CTransaction &tx, std::list<CTransaction>& removed);\n     void removeForBlock(const std::vector<CTransaction>& vtx, unsigned int nBlockHeight,\n                         std::list<CTransaction>& conflicts);"
      }
    ]
  },
  {
    "sha": "45f5d231854a97308237a46c3e55433e1c1f7d82",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NWY1ZDIzMTg1NGE5NzMwODIzN2E0NmMzZTU1NDMzZTFjMWY3ZDgy",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-09-06T04:40:21Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T03:47:02Z"
      },
      "message": "Fix comment in removeForReorg\n\nGithub-Pull: #6595\nRebased-From: b394d266def649088c08619cd32b923ed8ab3c89",
      "tree": {
        "sha": "e4eda487232d36f04736c97cfbdc40491cab1049",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e4eda487232d36f04736c97cfbdc40491cab1049"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45f5d231854a97308237a46c3e55433e1c1f7d82",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45f5d231854a97308237a46c3e55433e1c1f7d82",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/45f5d231854a97308237a46c3e55433e1c1f7d82",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45f5d231854a97308237a46c3e55433e1c1f7d82/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2e052f4be83ef58a66e68a90b7c57dc2f37c30ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e052f4be83ef58a66e68a90b7c57dc2f37c30ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2e052f4be83ef58a66e68a90b7c57dc2f37c30ac"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "afc3e23108e199906bbbd62333edb9ff32bceea6",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45f5d231854a97308237a46c3e55433e1c1f7d82/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45f5d231854a97308237a46c3e55433e1c1f7d82/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=45f5d231854a97308237a46c3e55433e1c1f7d82",
        "patch": "@@ -485,7 +485,7 @@ void CTxMemPool::remove(const CTransaction &origTx, std::list<CTransaction>& rem\n \n void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight)\n {\n-    // Remove transactions spending a coinbase which are now immature\n+    // Remove transactions spending a coinbase which are now immature and no-longer-final transactions\n     LOCK(cs);\n     list<CTransaction> transactionsToRemove;\n     for (std::map<uint256, CTxMemPoolEntry>::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {"
      }
    ]
  },
  {
    "sha": "47cf6001a7fc6661635a9adbba92c775d7c4b0d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0N2NmNjAwMWE3ZmM2NjYxNjM1YTlhZGJiYTkyYzc3NWQ3YzRiMGQ3",
    "commit": {
      "author": {
        "name": "Irving Ruan",
        "email": "irvingruan@gmail.com",
        "date": "2015-09-12T07:35:36Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T03:48:41Z"
      },
      "message": "Fixes typo in build-osx.md.\n\nGithub-Pull: #6663\nRebased-From: 5d7a16d073bfc37f429b71c411f5bdcce8bfe79b",
      "tree": {
        "sha": "a415d1adbf7268a2589826325104901ddebcd80b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a415d1adbf7268a2589826325104901ddebcd80b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47cf6001a7fc6661635a9adbba92c775d7c4b0d7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47cf6001a7fc6661635a9adbba92c775d7c4b0d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/47cf6001a7fc6661635a9adbba92c775d7c4b0d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47cf6001a7fc6661635a9adbba92c775d7c4b0d7/comments",
    "author": {
      "login": "irvingruan",
      "id": 335173,
      "node_id": "MDQ6VXNlcjMzNTE3Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/335173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/irvingruan",
      "html_url": "https://github.com/irvingruan",
      "followers_url": "https://api.github.com/users/irvingruan/followers",
      "following_url": "https://api.github.com/users/irvingruan/following{/other_user}",
      "gists_url": "https://api.github.com/users/irvingruan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/irvingruan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/irvingruan/subscriptions",
      "organizations_url": "https://api.github.com/users/irvingruan/orgs",
      "repos_url": "https://api.github.com/users/irvingruan/repos",
      "events_url": "https://api.github.com/users/irvingruan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/irvingruan/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "45f5d231854a97308237a46c3e55433e1c1f7d82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45f5d231854a97308237a46c3e55433e1c1f7d82",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45f5d231854a97308237a46c3e55433e1c1f7d82"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9346628e29426389fde3dc567222ee5c4f81a49b",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47cf6001a7fc6661635a9adbba92c775d7c4b0d7/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47cf6001a7fc6661635a9adbba92c775d7c4b0d7/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=47cf6001a7fc6661635a9adbba92c775d7c4b0d7",
        "patch": "@@ -97,7 +97,7 @@ Download Qt Creator from http://www.qt.io/download/. Download the \"community edi\n 6. Confirm the \"summary page\"\n 7. In the \"Projects\" tab select \"Manage Kits...\"\n 8. Select the default \"Desktop\" kit and select \"Clang (x86 64bit in /usr/bin)\" as compiler\n-9. Select LLDB as debugger (you might need to set the path to your installtion)\n+9. Select LLDB as debugger (you might need to set the path to your installation)\n 10. Start debugging with Qt Creator\n \n Creating a release build"
      }
    ]
  },
  {
    "sha": "ed06991bcfd7af1ee70711e522326d4632563d2f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDA2OTkxYmNmZDdhZjFlZTcwNzExZTUyMjMyNmQ0NjMyNTYzZDJm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-28T14:06:38Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T03:49:37Z"
      },
      "message": "build: remove libressl check\n\nNow that BIP66 passed, OpenSSL is no longer directly part of the\nconsensus. What matters is that DER signatures are correctly parsed, and\nsecp256k1 crypto is implemented correctly (as well as the other\nfunctions we use from OpenSSL, such as random number generation)\n\nThis means that effectively, using LibreSSL is not a larger risk than\nusing another version of OpenSSL.\n\nRemove the specific check for LibreSSL.\n\nIncludes the still-relevant part of #6729: make sure CHECK_HEADER is\ncalled using the right CXXFLAGS, not CFLAGS (as AC_LANG is c++).\n\nGithub-Pull: #6732\nRebased-From: 59783884766d00866e190ba5ae761916e932df10",
      "tree": {
        "sha": "e91a7a4394da0cf84e4b527b617ba9115ec37b2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e91a7a4394da0cf84e4b527b617ba9115ec37b2f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed06991bcfd7af1ee70711e522326d4632563d2f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed06991bcfd7af1ee70711e522326d4632563d2f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed06991bcfd7af1ee70711e522326d4632563d2f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed06991bcfd7af1ee70711e522326d4632563d2f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "47cf6001a7fc6661635a9adbba92c775d7c4b0d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47cf6001a7fc6661635a9adbba92c775d7c4b0d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/47cf6001a7fc6661635a9adbba92c775d7c4b0d7"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 3,
      "deletions": 18
    },
    "files": [
      {
        "sha": "6c6c057f9b829cacb18d270b8c19ed94059304d8",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 3,
        "deletions": 18,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed06991bcfd7af1ee70711e522326d4632563d2f/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed06991bcfd7af1ee70711e522326d4632563d2f/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=ed06991bcfd7af1ee70711e522326d4632563d2f",
        "patch": "@@ -710,27 +710,12 @@ AC_CHECK_LIB([crypto],[RAND_egd],[],[\n   )\n ])\n \n-CFLAGS_TEMP=\"$CFLAGS\"\n+CXXFLAGS_TEMP=\"$CXXFLAGS\"\n LIBS_TEMP=\"$LIBS\"\n-CFLAGS=\"$CFLAGS $SSL_CFLAGS $CRYPTO_CFLAGS\"\n+CXXFLAGS=\"$CXXFLAGS $SSL_CFLAGS $CRYPTO_CFLAGS\"\n LIBS=\"$LIBS $SSL_LIBS $CRYPTO_LIBS\"\n AC_CHECK_HEADER([openssl/ec.h],, AC_MSG_ERROR(OpenSSL ec header missing),)\n-\n-AC_MSG_CHECKING(for a supported OpenSSL version)\n-AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n-  #include <openssl/rand.h>\n-  ]],\n-  [[RAND_egd(NULL);]])],\n-  [AC_MSG_RESULT(yes)],\n-  [\n-    AC_ARG_WITH([libressl],\n-    [AS_HELP_STRING([--with-libressl],[Build with system LibreSSL (default is no; DANGEROUS; NOT SUPPORTED)])],\n-    [AC_MSG_WARN([Detected LibreSSL: This is NOT supported, and may break consensus compatibility!])],\n-    [AC_MSG_ERROR([Detected LibreSSL: This is NOT supported, and may break consensus compatibility!])]\n-    )]\n-)\n-\n-CFLAGS=\"$CFLAGS_TEMP\"\n+CXXFLAGS=\"$CXXFLAGS_TEMP\"\n LIBS=\"$LIBS_TEMP\"\n \n BITCOIN_QT_PATH_PROGS([PROTOC], [protoc],$protoc_bin_path)"
      }
    ]
  },
  {
    "sha": "a8b5fd33dcd2474675dd46064fb1781cb63e37b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOGI1ZmQzM2RjZDI0NzQ2NzVkZDQ2MDY0ZmIxNzgxY2I2M2UzN2I4",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-10-05T19:20:43Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T03:49:41Z"
      },
      "message": "The Bitcoin Core project is releasing Bitcoin Core, not Bitcoin.\n\nGithub-Pull: #6763\nRebased-From: 202f612a415f2b32332701bc15f28bd6fab49ebb",
      "tree": {
        "sha": "3d78d7e18908fc87d0766f8ce6d1d6e6d5363e70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d78d7e18908fc87d0766f8ce6d1d6e6d5363e70"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8b5fd33dcd2474675dd46064fb1781cb63e37b8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8b5fd33dcd2474675dd46064fb1781cb63e37b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a8b5fd33dcd2474675dd46064fb1781cb63e37b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8b5fd33dcd2474675dd46064fb1781cb63e37b8/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed06991bcfd7af1ee70711e522326d4632563d2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed06991bcfd7af1ee70711e522326d4632563d2f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed06991bcfd7af1ee70711e522326d4632563d2f"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f366ac7e61cee9782ea8911107c88f758e6dd8aa",
        "filename": "README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8b5fd33dcd2474675dd46064fb1781cb63e37b8/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8b5fd33dcd2474675dd46064fb1781cb63e37b8/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=a8b5fd33dcd2474675dd46064fb1781cb63e37b8",
        "patch": "@@ -29,7 +29,7 @@ Development process\n Developers work in their own trees, then submit pull requests when they think\n their feature or bug fix is ready.\n \n-If it is a simple/trivial/non-controversial change, then one of the Bitcoin\n+If it is a simple/trivial/non-controversial change, then one of the Bitcoin Core\n development team members simply pulls it.\n \n If it is a *more complicated or potentially controversial* change, then the patch\n@@ -43,7 +43,7 @@ controversial.\n \n The `master` branch is regularly built and tested, but is not guaranteed to be\n completely stable. [Tags](https://github.com/bitcoin/bitcoin/tags) are created\n-regularly to indicate new official, stable release versions of Bitcoin.\n+regularly to indicate new official, stable release versions of Bitcoin Core.\n \n Testing\n -------"
      }
    ]
  },
  {
    "sha": "066e41025b6cad1d7f35ba9322b4327fb62a819c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNjZlNDEwMjViNmNhZDFkN2YzNWJhOTMyMmI0MzI3ZmI2MmE4MTlj",
    "commit": {
      "author": {
        "name": "J Ross Nicoll",
        "email": "jrn@jrn.me.uk",
        "date": "2015-10-18T16:27:41Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T03:49:46Z"
      },
      "message": "Add DERSIG transaction test cases\n\nAdd test cases for DERSIG flag enforcement against transactions.\n\nGithub-Pull: #6848\nRebased-From: c6824f8a90e33277de4db826bf1c65692a67be47",
      "tree": {
        "sha": "ee49e64da7b1d5a38ededd249a9dc48728759789",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee49e64da7b1d5a38ededd249a9dc48728759789"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/066e41025b6cad1d7f35ba9322b4327fb62a819c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/066e41025b6cad1d7f35ba9322b4327fb62a819c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/066e41025b6cad1d7f35ba9322b4327fb62a819c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/066e41025b6cad1d7f35ba9322b4327fb62a819c/comments",
    "author": {
      "login": "rnicoll",
      "id": 3513077,
      "node_id": "MDQ6VXNlcjM1MTMwNzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3513077?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rnicoll",
      "html_url": "https://github.com/rnicoll",
      "followers_url": "https://api.github.com/users/rnicoll/followers",
      "following_url": "https://api.github.com/users/rnicoll/following{/other_user}",
      "gists_url": "https://api.github.com/users/rnicoll/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rnicoll/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rnicoll/subscriptions",
      "organizations_url": "https://api.github.com/users/rnicoll/orgs",
      "repos_url": "https://api.github.com/users/rnicoll/repos",
      "events_url": "https://api.github.com/users/rnicoll/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rnicoll/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a8b5fd33dcd2474675dd46064fb1781cb63e37b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8b5fd33dcd2474675dd46064fb1781cb63e37b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a8b5fd33dcd2474675dd46064fb1781cb63e37b8"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "109495dbbd2356becd45af69ce8336a85b8c4202",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/066e41025b6cad1d7f35ba9322b4327fb62a819c/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/066e41025b6cad1d7f35ba9322b4327fb62a819c/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=066e41025b6cad1d7f35ba9322b4327fb62a819c",
        "patch": "@@ -181,5 +181,9 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0xc5b93064159b3b2d6ab506a41b1f50463771b988 EQUAL\"]],\n \"0100000001000100000000000000000000000000000000000000000000000000000000000000000000030251b1000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n+[\"A transaction with a non-standard DER signature.\"],\n+[[[\"b1dbc81696c8a9c0fccd0693ab66d7c368dbc38c0def4e800685560ddd1b2132\", 0, \"DUP HASH160 0x14 0x4b3bd7eba3bc0284fd3007be7f3be275e94f5826 EQUALVERIFY CHECKSIG\"]],\n+\"010000000132211bdd0d568506804eef0d8cc3db68c3d766ab9306cdfcc0a9c89616c8dbb1000000006c493045022100c7bb0faea0522e74ff220c20c022d2cb6033f8d167fb89e75a50e237a35fd6d202203064713491b1f8ad5f79e623d0219ad32510bfaa1009ab30cbee77b59317d6e30001210237af13eb2d84e4545af287b919c2282019c9691cc509e78e196a9d8274ed1be0ffffffff0100000000000000001976a914f1b3ed2eda9a2ebe5a9374f692877cdf87c0f95b88ac00000000\", \"P2SH,DERSIG\"],\n+\n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      },
      {
        "sha": "e53464d2acc5cc08c145989a3d9790c73a162c0b",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/066e41025b6cad1d7f35ba9322b4327fb62a819c/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/066e41025b6cad1d7f35ba9322b4327fb62a819c/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=066e41025b6cad1d7f35ba9322b4327fb62a819c",
        "patch": "@@ -220,5 +220,9 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0xc5b93064159b3b2d6ab506a41b1f50463771b988 EQUAL\"]],\n \"0100000001000100000000000000000000000000000000000000000000000000000000000000000000030251b1000000000100000000000000000001000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n+[\"A transaction with a non-standard DER signature.\"],\n+[[[\"b1dbc81696c8a9c0fccd0693ab66d7c368dbc38c0def4e800685560ddd1b2132\", 0, \"DUP HASH160 0x14 0x4b3bd7eba3bc0284fd3007be7f3be275e94f5826 EQUALVERIFY CHECKSIG\"]],\n+\"010000000132211bdd0d568506804eef0d8cc3db68c3d766ab9306cdfcc0a9c89616c8dbb1000000006c493045022100c7bb0faea0522e74ff220c20c022d2cb6033f8d167fb89e75a50e237a35fd6d202203064713491b1f8ad5f79e623d0219ad32510bfaa1009ab30cbee77b59317d6e30001210237af13eb2d84e4545af287b919c2282019c9691cc509e78e196a9d8274ed1be0ffffffff0100000000000000001976a914f1b3ed2eda9a2ebe5a9374f692877cdf87c0f95b88ac00000000\", \"P2SH\"],\n+\n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      }
    ]
  },
  {
    "sha": "2fde236d238be76fa0e21e26090f309d44b2efa8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZmRlMjM2ZDIzOGJlNzZmYTBlMjFlMjYwOTBmMzA5ZDQ0YjJlZmE4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-02T14:18:16Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T03:52:14Z"
      },
      "message": "Move windows socket init to utility function\n\nGithub-Pull: #5677\nRebased-From: 26c9b836778cbaf9b9ccb9b92e841d7bd6ea2fdc",
      "tree": {
        "sha": "d031f1958ca51b99c07eefa7e1a41bd043fc9a65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d031f1958ca51b99c07eefa7e1a41bd043fc9a65"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2fde236d238be76fa0e21e26090f309d44b2efa8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fde236d238be76fa0e21e26090f309d44b2efa8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2fde236d238be76fa0e21e26090f309d44b2efa8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fde236d238be76fa0e21e26090f309d44b2efa8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "066e41025b6cad1d7f35ba9322b4327fb62a819c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/066e41025b6cad1d7f35ba9322b4327fb62a819c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/066e41025b6cad1d7f35ba9322b4327fb62a819c"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 21,
      "deletions": 9
    },
    "files": [
      {
        "sha": "bcace455ee46e61cfbd24c5d2c1e685309271414",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fde236d238be76fa0e21e26090f309d44b2efa8/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fde236d238be76fa0e21e26090f309d44b2efa8/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=2fde236d238be76fa0e21e26090f309d44b2efa8",
        "patch": "@@ -235,6 +235,10 @@ int CommandLineRPC(int argc, char *argv[])\n int main(int argc, char* argv[])\n {\n     SetupEnvironment();\n+    if (!SetupNetworking()) {\n+        fprintf(stderr, \"Error: Initializing networking failed\\n\");\n+        exit(1);\n+    }\n \n     try {\n         if(!AppInitRPC(argc, argv))"
      },
      {
        "sha": "c6ece31913658bad1d244642d33725cb76e6387f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 9,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fde236d238be76fa0e21e26090f309d44b2efa8/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fde236d238be76fa0e21e26090f309d44b2efa8/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2fde236d238be76fa0e21e26090f309d44b2efa8",
        "patch": "@@ -535,17 +535,12 @@ bool AppInit2(boost::thread_group& threadGroup)\n     typedef BOOL (WINAPI *PSETPROCDEPPOL)(DWORD);\n     PSETPROCDEPPOL setProcDEPPol = (PSETPROCDEPPOL)GetProcAddress(GetModuleHandleA(\"Kernel32.dll\"), \"SetProcessDEPPolicy\");\n     if (setProcDEPPol != NULL) setProcDEPPol(PROCESS_DEP_ENABLE);\n-\n-    // Initialize Windows Sockets\n-    WSADATA wsadata;\n-    int ret = WSAStartup(MAKEWORD(2,2), &wsadata);\n-    if (ret != NO_ERROR || LOBYTE(wsadata.wVersion ) != 2 || HIBYTE(wsadata.wVersion) != 2)\n-    {\n-        return InitError(strprintf(\"Error: Winsock library failed to start (WSAStartup returned error %d)\", ret));\n-    }\n #endif\n-#ifndef WIN32\n \n+    if (!SetupNetworking())\n+        return InitError(\"Error: Initializing networking failed\");\n+\n+#ifndef WIN32\n     if (GetBoolArg(\"-sysperms\", false)) {\n #ifdef ENABLE_WALLET\n         if (!GetBoolArg(\"-disablewallet\", false))"
      },
      {
        "sha": "14d329ed8701b25380c9fdebfd6181cb565b85c4",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fde236d238be76fa0e21e26090f309d44b2efa8/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fde236d238be76fa0e21e26090f309d44b2efa8/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=2fde236d238be76fa0e21e26090f309d44b2efa8",
        "patch": "@@ -738,6 +738,18 @@ void SetupEnvironment()\n     boost::filesystem::path::imbue(loc);\n }\n \n+bool SetupNetworking()\n+{\n+#ifdef WIN32\n+    // Initialize Windows Sockets\n+    WSADATA wsadata;\n+    int ret = WSAStartup(MAKEWORD(2,2), &wsadata);\n+    if (ret != NO_ERROR || LOBYTE(wsadata.wVersion ) != 2 || HIBYTE(wsadata.wVersion) != 2)\n+        return false;\n+#endif\n+    return true;\n+}\n+\n void SetThreadPriority(int nPriority)\n {\n #ifdef WIN32"
      },
      {
        "sha": "5343f1e5920bbc3552f8b8f3d2fa7ccd6453df15",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fde236d238be76fa0e21e26090f309d44b2efa8/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fde236d238be76fa0e21e26090f309d44b2efa8/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=2fde236d238be76fa0e21e26090f309d44b2efa8",
        "patch": "@@ -39,6 +39,7 @@ extern bool fLogIPs;\n extern volatile bool fReopenDebugLog;\n \n void SetupEnvironment();\n+bool SetupNetworking();\n \n /** Return true if log accepts specified category */\n bool LogAcceptCategory(const char* category);"
      }
    ]
  },
  {
    "sha": "7d901479d6a73866eb1f744d71a8538dfbd78f0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZDkwMTQ3OWQ2YTczODY2ZWIxZjc0NGQ3MWE4NTM4ZGZiZDc4ZjBk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-01T10:43:55Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T03:52:19Z"
      },
      "message": "tests: Initialize networking on windows\n\nGithub-Pull: #6926\nRebased-From: 7497e805bd437b07fc3e5920f0c1f84bf10b0ebe",
      "tree": {
        "sha": "f17cac1c3f1c7c1127e88a235497a95b37f9347d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f17cac1c3f1c7c1127e88a235497a95b37f9347d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d901479d6a73866eb1f744d71a8538dfbd78f0d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d901479d6a73866eb1f744d71a8538dfbd78f0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7d901479d6a73866eb1f744d71a8538dfbd78f0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d901479d6a73866eb1f744d71a8538dfbd78f0d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2fde236d238be76fa0e21e26090f309d44b2efa8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fde236d238be76fa0e21e26090f309d44b2efa8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2fde236d238be76fa0e21e26090f309d44b2efa8"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "859bd5d62ef6b685dd0fd0c800f7e497b5a0f7a0",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d901479d6a73866eb1f744d71a8538dfbd78f0d/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d901479d6a73866eb1f744d71a8538dfbd78f0d/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=7d901479d6a73866eb1f744d71a8538dfbd78f0d",
        "patch": "@@ -31,6 +31,7 @@ struct TestingSetup {\n \n     TestingSetup() {\n         SetupEnvironment();\n+        SetupNetworking();\n         fPrintToDebugLog = false; // don't want to write to debug.log file\n         fCheckBlockIndex = true;\n         SelectParams(CBaseChainParams::UNITTEST);"
      }
    ]
  },
  {
    "sha": "358350054693ab9ff47256c44903e3f8733e5ebf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNTgzNTAwNTQ2OTNhYjlmZjQ3MjU2YzQ0OTAzZTNmODczM2U1ZWJm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-12T12:07:34Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T03:56:41Z"
      },
      "message": "doc: Remove mention of pulltester from README.md\n\nWe've switched to Travis CI a long time ago.\n\nGithub-Pull: #6998\nRebased-From: 01afa809cef688ff7f5af491005ba4abd3cd4098",
      "tree": {
        "sha": "32044179c3060f1b0db33370dda8c9e7ed249c80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32044179c3060f1b0db33370dda8c9e7ed249c80"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/358350054693ab9ff47256c44903e3f8733e5ebf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/358350054693ab9ff47256c44903e3f8733e5ebf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/358350054693ab9ff47256c44903e3f8733e5ebf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/358350054693ab9ff47256c44903e3f8733e5ebf/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7d901479d6a73866eb1f744d71a8538dfbd78f0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d901479d6a73866eb1f744d71a8538dfbd78f0d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7d901479d6a73866eb1f744d71a8538dfbd78f0d"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 6,
      "deletions": 8
    },
    "files": [
      {
        "sha": "f875da37b0aa24dafb733d155a926fce5f2fd81b",
        "filename": "README.md",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/358350054693ab9ff47256c44903e3f8733e5ebf/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/358350054693ab9ff47256c44903e3f8733e5ebf/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=358350054693ab9ff47256c44903e3f8733e5ebf",
        "patch": "@@ -59,17 +59,15 @@ Developers are strongly encouraged to write [unit tests](/doc/unit-tests.md) for\n submit new unit tests for old code. Unit tests can be compiled and run\n (assuming they weren't disabled in configure) with: `make check`\n \n-Every pull request is built for both Windows and Linux on a dedicated server,\n-and unit and sanity tests are automatically run. The binaries produced may be\n-used for manual QA testing \u2014 a link to them will appear in a comment on the\n-pull request posted by [BitcoinPullTester](https://github.com/BitcoinPullTester). See https://github.com/TheBlueMatt/test-scripts\n-for the build/test scripts.\n+The Travis CI system makes sure that every pull request is built for Windows\n+and Linux, OSX, and that unit and sanity tests are automatically run.\n \n ### Manual Quality Assurance (QA) Testing\n \n-Large changes should have a test plan, and should be tested by somebody other\n-than the developer who wrote the code.\n-See https://github.com/bitcoin/QA/ for how to create a test plan.\n+Changes should be tested by somebody other than the developer who wrote the\n+code. This is especially important for large or high-risk changes. It is useful\n+to add a test plan to the pull request description if testing the changes is\n+not straightforward.\n \n Translations\n ------------"
      }
    ]
  },
  {
    "sha": "1407c705ab94f71f9b059e052d3b3e544d66af44",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDA3YzcwNWFiOTRmNzFmOWIwNTllMDUyZDNiM2U1NDRkNjZhZjQ0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-14T20:44:35Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T03:57:37Z"
      },
      "message": "[qa] travis: cover *receivedby* rpcs\n\nGithub-Pull: #7019\nRebased-From: 33b7f83c593456c08d2be3edef785bb4a3850368",
      "tree": {
        "sha": "8479d98b0599baec8475b0e2f843c6010ae24103",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8479d98b0599baec8475b0e2f843c6010ae24103"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1407c705ab94f71f9b059e052d3b3e544d66af44",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1407c705ab94f71f9b059e052d3b3e544d66af44",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1407c705ab94f71f9b059e052d3b3e544d66af44",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1407c705ab94f71f9b059e052d3b3e544d66af44/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "358350054693ab9ff47256c44903e3f8733e5ebf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/358350054693ab9ff47256c44903e3f8733e5ebf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/358350054693ab9ff47256c44903e3f8733e5ebf"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "54fb396b9ded1eadf1b84639983221349bb7d359",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1407c705ab94f71f9b059e052d3b3e544d66af44/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1407c705ab94f71f9b059e052d3b3e544d66af44/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=1407c705ab94f71f9b059e052d3b3e544d66af44",
        "patch": "@@ -14,6 +14,7 @@ if [ \"x${ENABLE_BITCOIND}${ENABLE_UTILS}${ENABLE_WALLET}\" = \"x111\" ]; then\n   ${BUILDDIR}/qa/rpc-tests/disablewallet.py --srcdir \"${BUILDDIR}/src\"\n   ${BUILDDIR}/qa/rpc-tests/wallet.py --srcdir \"${BUILDDIR}/src\"\n   ${BUILDDIR}/qa/rpc-tests/listtransactions.py --srcdir \"${BUILDDIR}/src\"\n+  ${BUILDDIR}/qa/rpc-tests/receivedby.py --srcdir \"${BUILDDIR}/src\"\n   ${BUILDDIR}/qa/rpc-tests/mempool_resurrect_test.py --srcdir \"${BUILDDIR}/src\"\n   ${BUILDDIR}/qa/rpc-tests/txn_doublespend.py --srcdir \"${BUILDDIR}/src\"\n   ${BUILDDIR}/qa/rpc-tests/txn_doublespend.py --mineblock --srcdir \"${BUILDDIR}/src\""
      }
    ]
  },
  {
    "sha": "6821639c4b6738e59564e1ed2f46e6b64cd7ffcc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ODIxNjM5YzRiNjczOGU1OTU2NGUxZWQyZjQ2ZTZiNjRjZDdmZmNj",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2015-11-18T00:57:00Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T03:57:44Z"
      },
      "message": "[doc][trivial] Remove miniupnpc build notes build-unix\n\nGithub-Pull: #7048\nRebased-From: c5f211bbd0ab11e217836f0b12237bcc02f5a638",
      "tree": {
        "sha": "bd5b571103691106713334e3681834324162c7b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd5b571103691106713334e3681834324162c7b4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6821639c4b6738e59564e1ed2f46e6b64cd7ffcc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6821639c4b6738e59564e1ed2f46e6b64cd7ffcc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6821639c4b6738e59564e1ed2f46e6b64cd7ffcc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6821639c4b6738e59564e1ed2f46e6b64cd7ffcc/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1407c705ab94f71f9b059e052d3b3e544d66af44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1407c705ab94f71f9b059e052d3b3e544d66af44",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1407c705ab94f71f9b059e052d3b3e544d66af44"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 0,
      "deletions": 8
    },
    "files": [
      {
        "sha": "40a21f81f2abde509d42a922e17b480dc371dec8",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6821639c4b6738e59564e1ed2f46e6b64cd7ffcc/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6821639c4b6738e59564e1ed2f46e6b64cd7ffcc/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=6821639c4b6738e59564e1ed2f46e6b64cd7ffcc",
        "patch": "@@ -131,14 +131,6 @@ turned off by default.  See the configure options for upnp behavior desired:\n \t--disable-upnp-default   (the default) UPnP support turned off by default at runtime\n \t--enable-upnp-default    UPnP support turned on by default at runtime\n \n-To build:\n-\n-\ttar -xzvf miniupnpc-1.6.tar.gz\n-\tcd miniupnpc-1.6\n-\tmake\n-\tsudo su\n-\tmake install\n-\n \n Berkeley DB\n -----------"
      }
    ]
  },
  {
    "sha": "2c7ba8ddf9a9bb33f1614a0ad5677c3a7814f17c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYzdiYThkZGY5YTliYjMzZjE2MTRhMGFkNTY3N2MzYTc4MTRmMTdj",
    "commit": {
      "author": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-25T02:39:19Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T03:59:58Z"
      },
      "message": "Assert now > 0 in GetTime GetTimeMillis GetTimeMicros\n\nPreviously all of these functions could return negative values (for different\nreadons).  Large portions of the codebase currently assume that these\nfunctions return positive values.\n\nGithub-Pull: #7094\nRebased-From: 1bb289fe1b7d240e0d58ef13da30e45590231078",
      "tree": {
        "sha": "3efedcfd7554f59c01888ed08325b68e5203ebdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3efedcfd7554f59c01888ed08325b68e5203ebdc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c7ba8ddf9a9bb33f1614a0ad5677c3a7814f17c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c7ba8ddf9a9bb33f1614a0ad5677c3a7814f17c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2c7ba8ddf9a9bb33f1614a0ad5677c3a7814f17c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c7ba8ddf9a9bb33f1614a0ad5677c3a7814f17c/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6821639c4b6738e59564e1ed2f46e6b64cd7ffcc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6821639c4b6738e59564e1ed2f46e6b64cd7ffcc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6821639c4b6738e59564e1ed2f46e6b64cd7ffcc"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 11,
      "deletions": 5
    },
    "files": [
      {
        "sha": "f6d5ba9bd2c632d7607a2d8340dfcf5ffaac2353",
        "filename": "src/utiltime.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c7ba8ddf9a9bb33f1614a0ad5677c3a7814f17c/src/utiltime.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c7ba8ddf9a9bb33f1614a0ad5677c3a7814f17c/src/utiltime.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.cpp?ref=2c7ba8ddf9a9bb33f1614a0ad5677c3a7814f17c",
        "patch": "@@ -20,7 +20,9 @@ int64_t GetTime()\n {\n     if (nMockTime) return nMockTime;\n \n-    return time(NULL);\n+    time_t now = time(NULL);\n+    assert(now > 0);\n+    return now;\n }\n \n void SetMockTime(int64_t nMockTimeIn)\n@@ -30,14 +32,18 @@ void SetMockTime(int64_t nMockTimeIn)\n \n int64_t GetTimeMillis()\n {\n-    return (boost::posix_time::ptime(boost::posix_time::microsec_clock::universal_time()) -\n-            boost::posix_time::ptime(boost::gregorian::date(1970,1,1))).total_milliseconds();\n+    int64_t now = (boost::posix_time::ptime(boost::posix_time::microsec_clock::universal_time()) -\n+                   boost::posix_time::ptime(boost::gregorian::date(1970,1,1))).total_milliseconds();\n+    assert(now > 0);\n+    return now;\n }\n \n int64_t GetTimeMicros()\n {\n-    return (boost::posix_time::ptime(boost::posix_time::microsec_clock::universal_time()) -\n-            boost::posix_time::ptime(boost::gregorian::date(1970,1,1))).total_microseconds();\n+    int64_t now = (boost::posix_time::ptime(boost::posix_time::microsec_clock::universal_time()) -\n+                   boost::posix_time::ptime(boost::gregorian::date(1970,1,1))).total_microseconds();\n+    assert(now > 0);\n+    return now;\n }\n \n void MilliSleep(int64_t n)"
      }
    ]
  },
  {
    "sha": "4d92b13953b7f49656d60f16b5fe7b1264c18859",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDkyYjEzOTUzYjdmNDk2NTZkNjBmMTZiNWZlN2IxMjY0YzE4ODU5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-30T13:53:07Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T04:00:33Z"
      },
      "message": "Partial: [qa] pull-tester: run keypool\n\n* Run keypool (takes 6 seconds)\n\nGithub-Pull: #7135\nRebased-From: fa3a38a7f269f7a33c6176975f171b93025f05d7",
      "tree": {
        "sha": "5dfd36bf1d4503b74b896d19744d444c8d34ea81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5dfd36bf1d4503b74b896d19744d444c8d34ea81"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d92b13953b7f49656d60f16b5fe7b1264c18859",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d92b13953b7f49656d60f16b5fe7b1264c18859",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d92b13953b7f49656d60f16b5fe7b1264c18859",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d92b13953b7f49656d60f16b5fe7b1264c18859/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2c7ba8ddf9a9bb33f1614a0ad5677c3a7814f17c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c7ba8ddf9a9bb33f1614a0ad5677c3a7814f17c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c7ba8ddf9a9bb33f1614a0ad5677c3a7814f17c"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fc768a9a6d0c736d2fd78623618ac9cc87009387",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d92b13953b7f49656d60f16b5fe7b1264c18859/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d92b13953b7f49656d60f16b5fe7b1264c18859/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=4d92b13953b7f49656d60f16b5fe7b1264c18859",
        "patch": "@@ -12,6 +12,7 @@ export BITCOIND=${REAL_BITCOIND}\n \n if [ \"x${ENABLE_BITCOIND}${ENABLE_UTILS}${ENABLE_WALLET}\" = \"x111\" ]; then\n   ${BUILDDIR}/qa/rpc-tests/disablewallet.py --srcdir \"${BUILDDIR}/src\"\n+  ${BUILDDIR}/qa/rpc-tests/keypool.py --srcdir \"${BUILDDIR}/src\"\n   ${BUILDDIR}/qa/rpc-tests/wallet.py --srcdir \"${BUILDDIR}/src\"\n   ${BUILDDIR}/qa/rpc-tests/listtransactions.py --srcdir \"${BUILDDIR}/src\"\n   ${BUILDDIR}/qa/rpc-tests/receivedby.py --srcdir \"${BUILDDIR}/src\""
      }
    ]
  },
  {
    "sha": "ad72dbf0c2b0fab6d16bca021aee437be9bc98be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDcyZGJmMGMyYjBmYWI2ZDE2YmNhMDIxYWVlNDM3YmU5YmM5OGJl",
    "commit": {
      "author": {
        "name": "Suriyaa Kudo",
        "email": "SuriyaaKudoIsc@users.noreply.github.com",
        "date": "2015-12-10T17:45:23Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T04:00:41Z"
      },
      "message": "Set link from http:// to https://\n\nFor opensource.org/licenses/MIT!\nGithub-Pull: #7197\nRebased-From: 00423e1a71204696ec37e6d757f9afe091bc7ee1",
      "tree": {
        "sha": "cf9754bb4e877222c050557b0ebf4a2d8b662e1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf9754bb4e877222c050557b0ebf4a2d8b662e1f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad72dbf0c2b0fab6d16bca021aee437be9bc98be",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad72dbf0c2b0fab6d16bca021aee437be9bc98be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ad72dbf0c2b0fab6d16bca021aee437be9bc98be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad72dbf0c2b0fab6d16bca021aee437be9bc98be/comments",
    "author": null,
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4d92b13953b7f49656d60f16b5fe7b1264c18859",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d92b13953b7f49656d60f16b5fe7b1264c18859",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4d92b13953b7f49656d60f16b5fe7b1264c18859"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4ed29aa041edee5657a1c9fd3da97216af783e64",
        "filename": "README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad72dbf0c2b0fab6d16bca021aee437be9bc98be/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad72dbf0c2b0fab6d16bca021aee437be9bc98be/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=ad72dbf0c2b0fab6d16bca021aee437be9bc98be",
        "patch": "@@ -21,7 +21,7 @@ License\n -------\n \n Bitcoin Core is released under the terms of the MIT license. See [COPYING](COPYING) for more\n-information or see http://opensource.org/licenses/MIT.\n+information or see https://opensource.org/licenses/MIT.\n \n Development process\n -------------------"
      }
    ]
  },
  {
    "sha": "a1af9051fd72c2949027cc61e6b5f661e445e7b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMWFmOTA1MWZkNzJjMjk0OTAyN2NjNjFlNmI1ZjY2MWU0NDVlN2Iw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-12-14T20:23:05Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T04:00:46Z"
      },
      "message": "qt5: Use the fixed font the system recommends\n\nGithub-Pull: #7214\nRebased-From: fa2f4bc4eb0f21f5be8c88954ae2d99c5b18b987",
      "tree": {
        "sha": "34325657f5264a067e51af375512d8c4f12dafb6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/34325657f5264a067e51af375512d8c4f12dafb6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1af9051fd72c2949027cc61e6b5f661e445e7b0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1af9051fd72c2949027cc61e6b5f661e445e7b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a1af9051fd72c2949027cc61e6b5f661e445e7b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1af9051fd72c2949027cc61e6b5f661e445e7b0/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad72dbf0c2b0fab6d16bca021aee437be9bc98be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad72dbf0c2b0fab6d16bca021aee437be9bc98be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad72dbf0c2b0fab6d16bca021aee437be9bc98be"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6880d7d939afcaaef2f6d4149dcc889668bfd0ed",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1af9051fd72c2949027cc61e6b5f661e445e7b0/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1af9051fd72c2949027cc61e6b5f661e445e7b0/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=a1af9051fd72c2949027cc61e6b5f661e445e7b0",
        "patch": "@@ -61,6 +61,10 @@\n #include <QUrlQuery>\n #endif\n \n+#if QT_VERSION >= 0x50200\n+#include <QFontDatabase>\n+#endif\n+\n #if BOOST_FILESYSTEM_VERSION >= 3\n static boost::filesystem::detail::utf8_codecvt_facet utf8;\n #endif\n@@ -89,13 +93,17 @@ QString dateTimeStr(qint64 nTime)\n \n QFont bitcoinAddressFont()\n {\n+#if QT_VERSION >= 0x50200\n+    return QFontDatabase::systemFont(QFontDatabase::FixedFont);\n+#else\n     QFont font(\"Monospace\");\n #if QT_VERSION >= 0x040800\n     font.setStyleHint(QFont::Monospace);\n #else\n     font.setStyleHint(QFont::TypeWriter);\n #endif\n     return font;\n+#endif\n }\n \n void setupAddressWidget(QValidatedLineEdit *widget, QWidget *parent)"
      }
    ]
  },
  {
    "sha": "7ed7b0a5eb8b64edef34d849b6f92f2e56cf030a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZWQ3YjBhNWViOGI2NGVkZWYzNGQ4NDliNmY5MmYyZTU2Y2YwMzBh",
    "commit": {
      "author": {
        "name": "Elias Rohrer",
        "email": "rohrer@informatik.hu-berlin.de",
        "date": "2015-12-15T13:53:15Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T04:00:50Z"
      },
      "message": "Removed offline testnet DNSSeed 'alexykot.me'.\n\nGithub-Pull: #7216\nRebased-From: e18378e53fb71c39236db35ab2d560b43602b1be",
      "tree": {
        "sha": "6ac54d53b7741b03242d696afd0f740a54aa732c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6ac54d53b7741b03242d696afd0f740a54aa732c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ed7b0a5eb8b64edef34d849b6f92f2e56cf030a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ed7b0a5eb8b64edef34d849b6f92f2e56cf030a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7ed7b0a5eb8b64edef34d849b6f92f2e56cf030a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ed7b0a5eb8b64edef34d849b6f92f2e56cf030a/comments",
    "author": null,
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1af9051fd72c2949027cc61e6b5f661e445e7b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1af9051fd72c2949027cc61e6b5f661e445e7b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1af9051fd72c2949027cc61e6b5f661e445e7b0"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "61afaf3c7a972f8dda12011802ffed6d16f4c7bc",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ed7b0a5eb8b64edef34d849b6f92f2e56cf030a/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ed7b0a5eb8b64edef34d849b6f92f2e56cf030a/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=7ed7b0a5eb8b64edef34d849b6f92f2e56cf030a",
        "patch": "@@ -214,7 +214,6 @@ class CTestNetParams : public CMainParams {\n \n         vFixedSeeds.clear();\n         vSeeds.clear();\n-        vSeeds.push_back(CDNSSeedData(\"alexykot.me\", \"testnet-seed.alexykot.me\"));\n         vSeeds.push_back(CDNSSeedData(\"bitcoin.petertodd.org\", \"testnet-seed.bitcoin.petertodd.org\"));\n         vSeeds.push_back(CDNSSeedData(\"bluematt.me\", \"testnet-seed.bluematt.me\"));\n         vSeeds.push_back(CDNSSeedData(\"bitcoin.schildbach.de\", \"testnet-seed.bitcoin.schildbach.de\"));"
      }
    ]
  },
  {
    "sha": "3e167cfdddd680fec0ee248091675fd255546f63",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZTE2N2NmZGRkZDY4MGZlYzBlZTI0ODA5MTY3NWZkMjU1NTQ2ZjYz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-08T16:10:41Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T04:02:36Z"
      },
      "message": "test: Add basic test for `reject` code\n\nExtend P2P test framework to make it possible to expect reject\ncodes for transactions and blocks.\n\nGithub-Pull: #7179\nRebased-From: 20411903d7b356ebb174df2daad1dcd5d6117f79",
      "tree": {
        "sha": "3e21bbfc66ef6b327fc4120d58bac52f7c5678b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e21bbfc66ef6b327fc4120d58bac52f7c5678b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e167cfdddd680fec0ee248091675fd255546f63",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e167cfdddd680fec0ee248091675fd255546f63",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3e167cfdddd680fec0ee248091675fd255546f63",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e167cfdddd680fec0ee248091675fd255546f63/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7ed7b0a5eb8b64edef34d849b6f92f2e56cf030a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ed7b0a5eb8b64edef34d849b6f92f2e56cf030a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7ed7b0a5eb8b64edef34d849b6f92f2e56cf030a"
      }
    ],
    "stats": {
      "total": 237,
      "additions": 237,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a11c8d77382262331056f18ad6d6a675ba4f2403",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e167cfdddd680fec0ee248091675fd255546f63/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e167cfdddd680fec0ee248091675fd255546f63/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=3e167cfdddd680fec0ee248091675fd255546f63",
        "patch": "@@ -25,6 +25,8 @@ if [ \"x${ENABLE_BITCOIND}${ENABLE_UTILS}${ENABLE_WALLET}\" = \"x111\" ]; then\n   ${BUILDDIR}/qa/rpc-tests/httpbasics.py --srcdir \"${BUILDDIR}/src\"\n   ${BUILDDIR}/qa/rpc-tests/mempool_coinbase_spends.py --srcdir \"${BUILDDIR}/src\"\n   #${BUILDDIR}/qa/rpc-tests/forknotify.py --srcdir \"${BUILDDIR}/src\"\n+  ${BUILDDIR}/qa/rpc-tests/invalidblockrequest.py --srcdir \"${BUILDDIR}/src\"\n+  ${BUILDDIR}/qa/rpc-tests/invalidtxrequest.py --srcdir \"${BUILDDIR}/src\"\n else\n   echo \"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\"\n fi"
      },
      {
        "sha": "80429a3a4f44a772b8034d1982590047ff6f40a2",
        "filename": "qa/rpc-tests/invalidblockrequest.py",
        "status": "added",
        "additions": 119,
        "deletions": 0,
        "changes": 119,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e167cfdddd680fec0ee248091675fd255546f63/qa/rpc-tests/invalidblockrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e167cfdddd680fec0ee248091675fd255546f63/qa/rpc-tests/invalidblockrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidblockrequest.py?ref=3e167cfdddd680fec0ee248091675fd255546f63",
        "patch": "@@ -0,0 +1,119 @@\n+#!/usr/bin/env python2\n+#\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from new_test_framework.test_framework import ComparisonTestFramework\n+from new_test_framework.util import *\n+from new_test_framework.comptool import TestManager, TestInstance, RejectResult\n+from new_test_framework.mininode import *\n+from new_test_framework.blocktools import *\n+import logging\n+import copy\n+import time\n+\n+\n+'''\n+In this test we connect to one node over p2p, and test block requests:\n+1) Valid blocks should be requested and become chain tip.\n+2) Invalid block with duplicated transaction should be re-requested.\n+3) Invalid block with bad coinbase value should be rejected and not\n+re-requested.\n+'''\n+\n+# Use the ComparisonTestFramework with 1 node: only use --testbinary.\n+class InvalidBlockRequestTest(ComparisonTestFramework):\n+\n+    ''' Can either run this test as 1 node with expected answers, or two and compare them. \n+        Change the \"outcome\" variable from each TestInstance object to only do the comparison. '''\n+    def __init__(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        test = TestManager(self, self.options.tmpdir)\n+        test.add_all_connections(self.nodes)\n+        self.tip = None\n+        self.block_time = None\n+        NetworkThread().start() # Start up network handling in another thread\n+        test.run()\n+\n+    def get_tests(self):\n+        if self.tip is None:\n+            self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+        self.block_time = int(time.time())+1\n+\n+        '''\n+        Create a new block with an anyone-can-spend coinbase\n+        '''\n+        height = 1\n+        block = create_block(self.tip, create_coinbase(height), self.block_time)\n+        self.block_time += 1\n+        block.solve()\n+        # Save the coinbase for later\n+        self.block1 = block\n+        self.tip = block.sha256\n+        height += 1\n+        yield TestInstance([[block, True]])\n+\n+        '''\n+        Now we need that block to mature so we can spend the coinbase.\n+        '''\n+        test = TestInstance(sync_every_block=False)\n+        for i in xrange(100):\n+            block = create_block(self.tip, create_coinbase(height), self.block_time)\n+            block.solve()\n+            self.tip = block.sha256\n+            self.block_time += 1\n+            test.blocks_and_transactions.append([block, True])\n+            height += 1\n+        yield test\n+\n+        '''\n+        Now we use merkle-root malleability to generate an invalid block with\n+        same blockheader.\n+        Manufacture a block with 3 transactions (coinbase, spend of prior\n+        coinbase, spend of that spend).  Duplicate the 3rd transaction to \n+        leave merkle root and blockheader unchanged but invalidate the block.\n+        '''\n+        block2 = create_block(self.tip, create_coinbase(height), self.block_time)\n+        self.block_time += 1\n+\n+        # chr(81) is OP_TRUE\n+        tx1 = create_transaction(self.block1.vtx[0], 0, chr(81), 50*100000000)\n+        tx2 = create_transaction(tx1, 0, chr(81), 50*100000000)\n+\n+        block2.vtx.extend([tx1, tx2])\n+        block2.hashMerkleRoot = block2.calc_merkle_root()\n+        block2.rehash()\n+        block2.solve()\n+        orig_hash = block2.sha256\n+        block2_orig = copy.deepcopy(block2)\n+\n+        # Mutate block 2\n+        block2.vtx.append(tx2)\n+        assert_equal(block2.hashMerkleRoot, block2.calc_merkle_root())\n+        assert_equal(orig_hash, block2.rehash())\n+        assert(block2_orig.vtx != block2.vtx)\n+\n+        self.tip = block2.sha256\n+        yield TestInstance([[block2, RejectResult(16,'bad-txns-duplicate')], [block2_orig, True]])\n+        height += 1\n+\n+        '''\n+        Make sure that a totally screwed up block is not valid.\n+        '''\n+        block3 = create_block(self.tip, create_coinbase(height), self.block_time)\n+        self.block_time += 1\n+        block3.vtx[0].vout[0].nValue = 100*100000000 # Too high!\n+        block3.vtx[0].sha256=None\n+        block3.vtx[0].calc_sha256()\n+        block3.hashMerkleRoot = block3.calc_merkle_root()\n+        block3.rehash()\n+        block3.solve()\n+\n+        yield TestInstance([[block3, RejectResult(16,'bad-cb-amount')]])\n+\n+\n+if __name__ == '__main__':\n+    InvalidBlockRequestTest().main()"
      },
      {
        "sha": "d07b59a675fde48d579abfe8c18245db4133163c",
        "filename": "qa/rpc-tests/invalidtxrequest.py",
        "status": "added",
        "additions": 76,
        "deletions": 0,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e167cfdddd680fec0ee248091675fd255546f63/qa/rpc-tests/invalidtxrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e167cfdddd680fec0ee248091675fd255546f63/qa/rpc-tests/invalidtxrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidtxrequest.py?ref=3e167cfdddd680fec0ee248091675fd255546f63",
        "patch": "@@ -0,0 +1,76 @@\n+#!/usr/bin/env python2\n+#\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from new_test_framework.test_framework import ComparisonTestFramework\n+from new_test_framework.util import *\n+from new_test_framework.comptool import TestManager, TestInstance, RejectResult\n+from new_test_framework.mininode import *\n+from new_test_framework.blocktools import *\n+import logging\n+import copy\n+import time\n+\n+\n+'''\n+In this test we connect to one node over p2p, and test tx requests.\n+'''\n+\n+# Use the ComparisonTestFramework with 1 node: only use --testbinary.\n+class InvalidTxRequestTest(ComparisonTestFramework):\n+\n+    ''' Can either run this test as 1 node with expected answers, or two and compare them. \n+        Change the \"outcome\" variable from each TestInstance object to only do the comparison. '''\n+    def __init__(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        test = TestManager(self, self.options.tmpdir)\n+        test.add_all_connections(self.nodes)\n+        self.tip = None\n+        self.block_time = None\n+        NetworkThread().start() # Start up network handling in another thread\n+        test.run()\n+\n+    def get_tests(self):\n+        if self.tip is None:\n+            self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+        self.block_time = int(time.time())+1\n+\n+        '''\n+        Create a new block with an anyone-can-spend coinbase\n+        '''\n+        height = 1\n+        block = create_block(self.tip, create_coinbase(height), self.block_time)\n+        self.block_time += 1\n+        block.solve()\n+        # Save the coinbase for later\n+        self.block1 = block\n+        self.tip = block.sha256\n+        height += 1\n+        yield TestInstance([[block, True]])\n+\n+        '''\n+        Now we need that block to mature so we can spend the coinbase.\n+        '''\n+        test = TestInstance(sync_every_block=False)\n+        for i in xrange(100):\n+            block = create_block(self.tip, create_coinbase(height), self.block_time)\n+            block.solve()\n+            self.tip = block.sha256\n+            self.block_time += 1\n+            test.blocks_and_transactions.append([block, True])\n+            height += 1\n+        yield test\n+\n+        # chr(100) is OP_NOTIF\n+        # Transaction will be rejected with code 16 (REJECT_INVALID)\n+        tx1 = create_transaction(self.block1.vtx[0], 0, chr(100), 50*100000000)\n+        yield TestInstance([[tx1, RejectResult(16, 'mandatory-script-verify-flag-failed')]])\n+\n+        # TODO: test further transactions...\n+\n+if __name__ == '__main__':\n+    InvalidTxRequestTest().main()"
      },
      {
        "sha": "b51c8845b7be285a7bb1cd7a2c6a7db1b87798cb",
        "filename": "qa/rpc-tests/new_test_framework/comptool.py",
        "status": "modified",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e167cfdddd680fec0ee248091675fd255546f63/qa/rpc-tests/new_test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e167cfdddd680fec0ee248091675fd255546f63/qa/rpc-tests/new_test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/new_test_framework/comptool.py?ref=3e167cfdddd680fec0ee248091675fd255546f63",
        "patch": "@@ -41,6 +41,20 @@ def wait_until(predicate, attempts=float('inf'), timeout=float('inf')):\n \n     return False\n \n+class RejectResult(object):\n+    '''\n+    Outcome that expects rejection of a transaction or block.\n+    '''\n+    def __init__(self, code, reason=''):\n+        self.code = code\n+        self.reason = reason\n+    def match(self, other):\n+        if self.code != other.code:\n+            return False\n+        return other.reason.startswith(self.reason)\n+    def __repr__(self):\n+        return '%i:%s' % (self.code,self.reason or '*')\n+\n class TestNode(NodeConnCB):\n \n     def __init__(self, block_store, tx_store):\n@@ -52,6 +66,8 @@ def __init__(self, block_store, tx_store):\n         self.block_request_map = {}\n         self.tx_store = tx_store\n         self.tx_request_map = {}\n+        self.block_reject_map = {}\n+        self.tx_reject_map = {}\n \n         # When the pingmap is non-empty we're waiting for \n         # a response\n@@ -95,6 +111,12 @@ def on_pong(self, conn, message):\n         except KeyError:\n             raise AssertionError(\"Got pong for unknown ping [%s]\" % repr(message))\n \n+    def on_reject(self, conn, message):\n+        if message.message == 'tx':\n+            self.tx_reject_map[message.data] = RejectResult(message.code, message.reason)\n+        if message.message == 'block':\n+            self.block_reject_map[message.data] = RejectResult(message.code, message.reason)\n+\n     def send_inv(self, obj):\n         mtype = 2 if isinstance(obj, CBlock) else 1\n         self.conn.send_message(msg_inv([CInv(mtype, obj.sha256)]))\n@@ -244,6 +266,15 @@ def check_results(self, blockhash, outcome):\n                 if outcome is None:\n                     if c.cb.bestblockhash != self.connections[0].cb.bestblockhash:\n                         return False\n+                elif isinstance(outcome, RejectResult): # Check that block was rejected w/ code\n+                    if c.cb.bestblockhash == blockhash:\n+                        return False\n+                    if blockhash not in c.cb.block_reject_map:\n+                        print 'Block not in reject map: %064x' % (blockhash)\n+                        return False\n+                    if not outcome.match(c.cb.block_reject_map[blockhash]):\n+                        print 'Block rejected with %s instead of expected %s: %064x' % (c.cb.block_reject_map[blockhash], outcome, blockhash)\n+                        return False\n                 elif ((c.cb.bestblockhash == blockhash) != outcome):\n                     # print c.cb.bestblockhash, blockhash, outcome\n                     return False\n@@ -263,6 +294,15 @@ def check_mempool(self, txhash, outcome):\n                     if c.cb.lastInv != self.connections[0].cb.lastInv:\n                         # print c.rpc.getrawmempool()\n                         return False\n+                elif isinstance(outcome, RejectResult): # Check that tx was rejected w/ code\n+                    if txhash in c.cb.lastInv:\n+                        return False\n+                    if txhash not in c.cb.tx_reject_map:\n+                        print 'Tx not in reject map: %064x' % (txhash)\n+                        return False\n+                    if not outcome.match(c.cb.tx_reject_map[txhash]):\n+                        print 'Tx rejected with %s instead of expected %s: %064x' % (c.cb.tx_reject_map[txhash], outcome, txhash)\n+                        return False\n                 elif ((txhash in c.cb.lastInv) != outcome):\n                     # print c.rpc.getrawmempool(), c.cb.lastInv\n                     return False"
      }
    ]
  },
  {
    "sha": "a5d3030cb30a7ac8927b735e5eb712a4a025d4f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNWQzMDMwY2IzMGE3YWM4OTI3YjczNWU1ZWI3MTJhNGEwMjVkNGY5",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-25T13:12:37Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T04:15:33Z"
      },
      "message": "Bugfix: update-translations: Allow numerus translations to omit %n specifier (usually when it only has one possible value)\n\nGithub-Pull: #7253\nRebased-From: 0d595894f028248a1a1b00491dad95320844c685",
      "tree": {
        "sha": "a846261d86770ec50621e3818413cc56a0138723",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a846261d86770ec50621e3818413cc56a0138723"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a5d3030cb30a7ac8927b735e5eb712a4a025d4f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5d3030cb30a7ac8927b735e5eb712a4a025d4f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a5d3030cb30a7ac8927b735e5eb712a4a025d4f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5d3030cb30a7ac8927b735e5eb712a4a025d4f9/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e167cfdddd680fec0ee248091675fd255546f63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e167cfdddd680fec0ee248091675fd255546f63",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e167cfdddd680fec0ee248091675fd255546f63"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 6,
      "deletions": 3
    },
    "files": [
      {
        "sha": "3e34b339714888027b9a39f60c99ad6d6a3ef9c9",
        "filename": "contrib/devtools/update-translations.py",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5d3030cb30a7ac8927b735e5eb712a4a025d4f9/contrib/devtools/update-translations.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5d3030cb30a7ac8927b735e5eb712a4a025d4f9/contrib/devtools/update-translations.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/update-translations.py?ref=a5d3030cb30a7ac8927b735e5eb712a4a025d4f9",
        "patch": "@@ -70,18 +70,21 @@ def sanitize_string(s):\n     '''Sanitize string for printing'''\n     return s.replace('\\n',' ')\n \n-def check_format_specifiers(source, translation, errors):\n+def check_format_specifiers(source, translation, errors, numerus):\n     source_f = split_format_specifiers(find_format_specifiers(source))\n     # assert that no source messages contain both Qt and strprintf format specifiers\n     # if this fails, go change the source as this is hacky and confusing!\n     assert(not(source_f[0] and source_f[1]))\n     try:\n         translation_f = split_format_specifiers(find_format_specifiers(translation))\n     except IndexError:\n-        errors.append(\"Parse error in translation '%s'\" % sanitize_string(translation))\n+        errors.append(\"Parse error in translation for '%s': '%s'\" % (sanitize_string(source), sanitize_string(translation)))\n         return False\n     else:\n         if source_f != translation_f:\n+            if numerus and source_f == (set(), ['n']) and translation_f == (set(), []) and translation.find('%') == -1:\n+                # Allow numerus translations to omit %n specifier (usually when it only has one possible value)\n+                return True\n             errors.append(\"Mismatch between '%s' and '%s'\" % (sanitize_string(source), sanitize_string(translation)))\n             return False\n     return True\n@@ -148,7 +151,7 @@ def postprocess_translations(reduce_diff_hacks=False):\n                     if translation is None:\n                         continue\n                     errors = []\n-                    valid = check_format_specifiers(source, translation, errors)\n+                    valid = check_format_specifiers(source, translation, errors, numerus)\n \n                     for error in errors:\n                         print('%s: %s' % (filename, error))"
      }
    ]
  },
  {
    "sha": "966acb06daf349e219d1119e4d6fa01098d02aa6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NjZhY2IwNmRhZjM0OWUyMTlkMTExOWU0ZDZmYTAxMDk4ZDAyYWE2",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2015-12-26T03:49:19Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T04:18:02Z"
      },
      "message": "Replace some instances of formatWithUnit with formatHtmlWithUnit\n\nStrings in a HTML context should be using formatHtmlWithUnit.\n\nGithub-Pull: #7255\nRebased-From: 5fdf32de7ed85a1a0aec7cdedb83f750f4a0f7ff",
      "tree": {
        "sha": "93f9b68f2a8a45098c00f7caf9e33cbfbaa5648f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/93f9b68f2a8a45098c00f7caf9e33cbfbaa5648f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/966acb06daf349e219d1119e4d6fa01098d02aa6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/966acb06daf349e219d1119e4d6fa01098d02aa6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/966acb06daf349e219d1119e4d6fa01098d02aa6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/966acb06daf349e219d1119e4d6fa01098d02aa6/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a5d3030cb30a7ac8927b735e5eb712a4a025d4f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5d3030cb30a7ac8927b735e5eb712a4a025d4f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a5d3030cb30a7ac8927b735e5eb712a4a025d4f9"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 5,
      "deletions": 11
    },
    "files": [
      {
        "sha": "03d72f562cdff235030b7aa24b9a1e3a64fa77d6",
        "filename": "src/qt/bitcoinunits.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/966acb06daf349e219d1119e4d6fa01098d02aa6/src/qt/bitcoinunits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/966acb06daf349e219d1119e4d6fa01098d02aa6/src/qt/bitcoinunits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.cpp?ref=966acb06daf349e219d1119e4d6fa01098d02aa6",
        "patch": "@@ -122,13 +122,6 @@ QString BitcoinUnits::format(int unit, const CAmount& nIn, bool fPlus, Separator\n }\n \n \n-// TODO: Review all remaining calls to BitcoinUnits::formatWithUnit to\n-// TODO: determine whether the output is used in a plain text context\n-// TODO: or an HTML context (and replace with\n-// TODO: BtcoinUnits::formatHtmlWithUnit in the latter case). Hopefully\n-// TODO: there aren't instances where the result could be used in\n-// TODO: either context.\n-\n // NOTE: Using formatWithUnit in an HTML context risks wrapping\n // quantities at the thousands separator. More subtly, it also results\n // in a standard space rather than a thin space, due to a bug in Qt's"
      },
      {
        "sha": "369788db3b4095a08430994f69ccb0483e13f485",
        "filename": "src/qt/bitcoinunits.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/966acb06daf349e219d1119e4d6fa01098d02aa6/src/qt/bitcoinunits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/966acb06daf349e219d1119e4d6fa01098d02aa6/src/qt/bitcoinunits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.h?ref=966acb06daf349e219d1119e4d6fa01098d02aa6",
        "patch": "@@ -90,6 +90,7 @@ class BitcoinUnits: public QAbstractListModel\n     static QString format(int unit, const CAmount& amount, bool plussign=false, SeparatorStyle separators=separatorStandard);\n     //! Format as string (with unit)\n     static QString formatWithUnit(int unit, const CAmount& amount, bool plussign=false, SeparatorStyle separators=separatorStandard);\n+    //! Format as HTML string (with unit)\n     static QString formatHtmlWithUnit(int unit, const CAmount& amount, bool plussign=false, SeparatorStyle separators=separatorStandard);\n     //! Parse string to coin amount\n     static bool parse(int unit, const QString &value, CAmount *val_out);"
      },
      {
        "sha": "4829fa0bd1fa782a3594d603c50db33eeab93953",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/966acb06daf349e219d1119e4d6fa01098d02aa6/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/966acb06daf349e219d1119e4d6fa01098d02aa6/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=966acb06daf349e219d1119e4d6fa01098d02aa6",
        "patch": "@@ -622,14 +622,14 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n \n     // tool tips\n     QString toolTip1 = tr(\"This label turns red, if the transaction size is greater than 1000 bytes.\") + \"<br /><br />\";\n-    toolTip1 += tr(\"This means a fee of at least %1 per kB is required.\").arg(BitcoinUnits::formatWithUnit(nDisplayUnit, CWallet::minTxFee.GetFeePerK())) + \"<br /><br />\";\n+    toolTip1 += tr(\"This means a fee of at least %1 per kB is required.\").arg(BitcoinUnits::formatHtmlWithUnit(nDisplayUnit, CWallet::minTxFee.GetFeePerK())) + \"<br /><br />\";\n     toolTip1 += tr(\"Can vary +/- 1 byte per input.\");\n \n     QString toolTip2 = tr(\"Transactions with higher priority are more likely to get included into a block.\") + \"<br /><br />\";\n     toolTip2 += tr(\"This label turns red, if the priority is smaller than \\\"medium\\\".\") + \"<br /><br />\";\n-    toolTip2 += tr(\"This means a fee of at least %1 per kB is required.\").arg(BitcoinUnits::formatWithUnit(nDisplayUnit, CWallet::minTxFee.GetFeePerK()));\n+    toolTip2 += tr(\"This means a fee of at least %1 per kB is required.\").arg(BitcoinUnits::formatHtmlWithUnit(nDisplayUnit, CWallet::minTxFee.GetFeePerK()));\n \n-    QString toolTip3 = tr(\"This label turns red, if any recipient receives an amount smaller than %1.\").arg(BitcoinUnits::formatWithUnit(nDisplayUnit, ::minRelayTxFee.GetFee(546)));\n+    QString toolTip3 = tr(\"This label turns red, if any recipient receives an amount smaller than %1.\").arg(BitcoinUnits::formatHtmlWithUnit(nDisplayUnit, ::minRelayTxFee.GetFee(546)));\n \n     // how many satoshis the estimated fee can vary per byte we guess wrong\n     double dFeeVary;"
      },
      {
        "sha": "49cb2e57cbfb258f45c8aff9ab05aa9ed26fd24a",
        "filename": "src/qt/receiverequestdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/966acb06daf349e219d1119e4d6fa01098d02aa6/src/qt/receiverequestdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/966acb06daf349e219d1119e4d6fa01098d02aa6/src/qt/receiverequestdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receiverequestdialog.cpp?ref=966acb06daf349e219d1119e4d6fa01098d02aa6",
        "patch": "@@ -144,7 +144,7 @@ void ReceiveRequestDialog::update()\n     html += \"<a href=\\\"\"+uri+\"\\\">\" + GUIUtil::HtmlEscape(uri) + \"</a><br>\";\n     html += \"<b>\"+tr(\"Address\")+\"</b>: \" + GUIUtil::HtmlEscape(info.address) + \"<br>\";\n     if(info.amount)\n-        html += \"<b>\"+tr(\"Amount\")+\"</b>: \" + BitcoinUnits::formatWithUnit(model->getDisplayUnit(), info.amount) + \"<br>\";\n+        html += \"<b>\"+tr(\"Amount\")+\"</b>: \" + BitcoinUnits::formatHtmlWithUnit(model->getDisplayUnit(), info.amount) + \"<br>\";\n     if(!info.label.isEmpty())\n         html += \"<b>\"+tr(\"Label\")+\"</b>: \" + GUIUtil::HtmlEscape(info.label) + \"<br>\";\n     if(!info.message.isEmpty())"
      }
    ]
  },
  {
    "sha": "1d9663fba7c27b7fcca0cd97df334e8c1df5e502",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDk2NjNmYmE3YzI3YjdmY2NhMGNkOTdkZjMzNGU4YzFkZjVlNTAy",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2016-01-02T21:57:51Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T04:19:46Z"
      },
      "message": "Remove hardcoded fee from CoinControl ToolTip\n\nGithub-Pull: #7255\nRebased-From: 6fd0a079d8f9fa552d84be7a6787b1165b99b302",
      "tree": {
        "sha": "f94528889d97b4dbf8992bf9ad1bbe9162a4c75f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f94528889d97b4dbf8992bf9ad1bbe9162a4c75f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d9663fba7c27b7fcca0cd97df334e8c1df5e502",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d9663fba7c27b7fcca0cd97df334e8c1df5e502",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d9663fba7c27b7fcca0cd97df334e8c1df5e502",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d9663fba7c27b7fcca0cd97df334e8c1df5e502/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "966acb06daf349e219d1119e4d6fa01098d02aa6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/966acb06daf349e219d1119e4d6fa01098d02aa6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/966acb06daf349e219d1119e4d6fa01098d02aa6"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d2f0a504d7a58cb65b186ab085dd490f403e5b5f",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d9663fba7c27b7fcca0cd97df334e8c1df5e502/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d9663fba7c27b7fcca0cd97df334e8c1df5e502/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=1d9663fba7c27b7fcca0cd97df334e8c1df5e502",
        "patch": "@@ -127,7 +127,7 @@ CoinControlDialog::CoinControlDialog(QWidget *parent) :\n     ui->treeWidget->setColumnWidth(COLUMN_DATE, 110);\n     ui->treeWidget->setColumnWidth(COLUMN_CONFIRMATIONS, 100);\n     ui->treeWidget->setColumnWidth(COLUMN_PRIORITY, 100);\n-    ui->treeWidget->setColumnHidden(COLUMN_TXHASH, true);         // store transacton hash in this column, but dont show it\n+    ui->treeWidget->setColumnHidden(COLUMN_TXHASH, true);         // store transaction hash in this column, but dont show it\n     ui->treeWidget->setColumnHidden(COLUMN_VOUT_INDEX, true);     // store vout index in this column, but dont show it\n     ui->treeWidget->setColumnHidden(COLUMN_AMOUNT_INT64, true);   // store amount int64 in this column, but dont show it\n     ui->treeWidget->setColumnHidden(COLUMN_PRIORITY_INT64, true); // store priority int64 in this column, but dont show it\n@@ -629,7 +629,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     toolTip2 += tr(\"This label turns red, if the priority is smaller than \\\"medium\\\".\") + \"<br /><br />\";\n     toolTip2 += tr(\"This means a fee of at least %1 per kB is required.\").arg(BitcoinUnits::formatHtmlWithUnit(nDisplayUnit, CWallet::minTxFee.GetFeePerK()));\n \n-    QString toolTip3 = tr(\"This label turns red, if any recipient receives an amount smaller than %1.\").arg(BitcoinUnits::formatHtmlWithUnit(nDisplayUnit, ::minRelayTxFee.GetFee(546)));\n+    QString toolTip3 = tr(\"This label turns red, if any recipient receives an amount smaller than the current dust threshold.\");\n \n     // how many satoshis the estimated fee can vary per byte we guess wrong\n     double dFeeVary;"
      }
    ]
  },
  {
    "sha": "eea84de6b0c5fa11c9b1ae23b2d443535e25a88f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZWE4NGRlNmIwYzVmYTExYzliMWFlMjNiMmQ0NDM1MzVlMjVhODhm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-01-03T15:50:31Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T04:19:52Z"
      },
      "message": "Report non-mandatory script failures correctly\n\nGithub-Pull: #7276\nRebased-From: 7ef8f3c072a8750c72a3a1cdc727b5c1d173bac8",
      "tree": {
        "sha": "36681085d3dca33c2b7217a89a9784efa0d871d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36681085d3dca33c2b7217a89a9784efa0d871d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eea84de6b0c5fa11c9b1ae23b2d443535e25a88f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eea84de6b0c5fa11c9b1ae23b2d443535e25a88f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eea84de6b0c5fa11c9b1ae23b2d443535e25a88f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eea84de6b0c5fa11c9b1ae23b2d443535e25a88f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d9663fba7c27b7fcca0cd97df334e8c1df5e502",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d9663fba7c27b7fcca0cd97df334e8c1df5e502",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d9663fba7c27b7fcca0cd97df334e8c1df5e502"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "cac422a6a23b41d975fe26084686650af90291bc",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eea84de6b0c5fa11c9b1ae23b2d443535e25a88f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eea84de6b0c5fa11c9b1ae23b2d443535e25a88f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=eea84de6b0c5fa11c9b1ae23b2d443535e25a88f",
        "patch": "@@ -1506,9 +1506,9 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                         // arguments; if so, don't trigger DoS protection to\n                         // avoid splitting the network between upgraded and\n                         // non-upgraded nodes.\n-                        CScriptCheck check(*coins, tx, i,\n+                        CScriptCheck check2(*coins, tx, i,\n                                 flags & ~STANDARD_NOT_MANDATORY_VERIFY_FLAGS, cacheStore);\n-                        if (check())\n+                        if (check2())\n                             return state.Invalid(false, REJECT_NONSTANDARD, strprintf(\"non-mandatory-script-verify-flag (%s)\", ScriptErrorString(check.GetScriptError())));\n                     }\n                     // Failures of other flags indicate a transaction that is"
      }
    ]
  },
  {
    "sha": "a220ee635115ac20ae1ca04e6a7f404b5858d817",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMjIwZWU2MzUxMTVhYzIwYWUxY2EwNGU2YTdmNDA0YjU4NThkODE3",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-01-04T08:44:36Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T04:22:52Z"
      },
      "message": "[Qt] fix coincontrol update issue when deleting a send coin entry\n\nGithub-Pull: #7282\nRebased-From: 621bd6919f47be4d23091d8ae7c980f9567d83a9",
      "tree": {
        "sha": "ec2e850f0f89a21225ac68210e753385173ee318",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec2e850f0f89a21225ac68210e753385173ee318"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a220ee635115ac20ae1ca04e6a7f404b5858d817",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a220ee635115ac20ae1ca04e6a7f404b5858d817",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a220ee635115ac20ae1ca04e6a7f404b5858d817",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a220ee635115ac20ae1ca04e6a7f404b5858d817/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eea84de6b0c5fa11c9b1ae23b2d443535e25a88f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eea84de6b0c5fa11c9b1ae23b2d443535e25a88f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eea84de6b0c5fa11c9b1ae23b2d443535e25a88f"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "29d6cd0b71f7f46b7b7d80863554ca7c421d47b7",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a220ee635115ac20ae1ca04e6a7f404b5858d817/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a220ee635115ac20ae1ca04e6a7f404b5858d817/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=a220ee635115ac20ae1ca04e6a7f404b5858d817",
        "patch": "@@ -364,8 +364,6 @@ SendCoinsEntry *SendCoinsDialog::addEntry()\n     connect(entry, SIGNAL(removeEntry(SendCoinsEntry*)), this, SLOT(removeEntry(SendCoinsEntry*)));\n     connect(entry, SIGNAL(payAmountChanged()), this, SLOT(coinControlUpdateLabels()));\n \n-    updateTabsAndLabels();\n-\n     // Focus the field, so that entry can start immediately\n     entry->clear();\n     entry->setFocus();\n@@ -374,6 +372,8 @@ SendCoinsEntry *SendCoinsDialog::addEntry()\n     QScrollBar* bar = ui->scrollArea->verticalScrollBar();\n     if(bar)\n         bar->setSliderPosition(bar->maximum());\n+\n+    updateTabsAndLabels();\n     return entry;\n }\n \n@@ -777,7 +777,7 @@ void SendCoinsDialog::coinControlUpdateLabels()\n     for(int i = 0; i < ui->entries->count(); ++i)\n     {\n         SendCoinsEntry *entry = qobject_cast<SendCoinsEntry*>(ui->entries->itemAt(i)->widget());\n-        if(entry)\n+        if(entry && !entry->isHidden())\n             CoinControlDialog::payAmounts.append(entry->getValue().amount);\n     }\n "
      }
    ]
  },
  {
    "sha": "4d056221a9551001ae162ca05edc15198e108f81",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDA1NjIyMWE5NTUxMDAxYWUxNjJjYTA1ZWRjMTUxOThlMTA4Zjgx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-12-29T14:38:38Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T04:22:58Z"
      },
      "message": "[qt] Intro: Display required space\n\nRequired space depends on the user's choice:\n -prune=0\n -prune=<n>\n\nGithub-Pull: #7298\nRebased-From: faf3299b73ccb5044b7eaced229ac0c904aa25f5",
      "tree": {
        "sha": "15340fd7a965e1a2d8cadfbf5b88fff3a9693ae6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15340fd7a965e1a2d8cadfbf5b88fff3a9693ae6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d056221a9551001ae162ca05edc15198e108f81",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d056221a9551001ae162ca05edc15198e108f81",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d056221a9551001ae162ca05edc15198e108f81",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d056221a9551001ae162ca05edc15198e108f81/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a220ee635115ac20ae1ca04e6a7f404b5858d817",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a220ee635115ac20ae1ca04e6a7f404b5858d817",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a220ee635115ac20ae1ca04e6a7f404b5858d817"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 15,
      "deletions": 5
    },
    "files": [
      {
        "sha": "b10e116205cbfe8772f240c3ee5989993a76a629",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 5,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d056221a9551001ae162ca05edc15198e108f81/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d056221a9551001ae162ca05edc15198e108f81/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=4d056221a9551001ae162ca05edc15198e108f81",
        "patch": "@@ -15,9 +15,15 @@\n #include <QSettings>\n #include <QMessageBox>\n \n-/* Minimum free space (in bytes) needed for data directory */\n+#include <cmath>\n+\n static const uint64_t GB_BYTES = 1000000000LL;\n-static const uint64_t BLOCK_CHAIN_SIZE = 20LL * GB_BYTES;\n+/* Minimum free space (in GB) needed for data directory */\n+static const uint64_t BLOCK_CHAIN_SIZE = 80;\n+/* Minimum free space (in GB) needed for data directory when pruned; Does not include prune target */\n+static const uint64_t CHAIN_STATE_SIZE = 2;\n+/* Total required space (in GB) depending on user choice (prune, not prune) */\n+static uint64_t requiredSpace;\n \n /* Check free space asynchronously to prevent hanging the UI thread.\n \n@@ -112,7 +118,11 @@ Intro::Intro(QWidget *parent) :\n     signalled(false)\n {\n     ui->setupUi(this);\n-    ui->sizeWarningLabel->setText(ui->sizeWarningLabel->text().arg(BLOCK_CHAIN_SIZE/GB_BYTES));\n+    uint64_t pruneTarget = std::max<int64_t>(0, GetArg(\"-prune\", 0));\n+    requiredSpace = BLOCK_CHAIN_SIZE;\n+    if (pruneTarget)\n+        requiredSpace = CHAIN_STATE_SIZE + std::ceil(pruneTarget * 1024 * 1024.0 / GB_BYTES);\n+    ui->sizeWarningLabel->setText(ui->sizeWarningLabel->text().arg(requiredSpace));\n     startThread();\n }\n \n@@ -216,9 +226,9 @@ void Intro::setStatus(int status, const QString &message, quint64 bytesAvailable\n         ui->freeSpace->setText(\"\");\n     } else {\n         QString freeString = tr(\"%n GB of free space available\", \"\", bytesAvailable/GB_BYTES);\n-        if(bytesAvailable < BLOCK_CHAIN_SIZE)\n+        if(bytesAvailable < requiredSpace * GB_BYTES)\n         {\n-            freeString += \" \" + tr(\"(of %n GB needed)\", \"\", BLOCK_CHAIN_SIZE/GB_BYTES);\n+            freeString += \" \" + tr(\"(of %n GB needed)\", \"\", requiredSpace);\n             ui->freeSpace->setStyleSheet(\"QLabel { color: #800000 }\");\n         } else {\n             ui->freeSpace->setStyleSheet(\"\");"
      }
    ]
  },
  {
    "sha": "4124498ea4d718fe8223fcfac59da9f6afac2109",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTI0NDk4ZWE0ZDcxOGZlODIyM2ZjZmFjNTlkYTlmNmFmYWMyMTA5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-12-26T21:56:55Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T04:26:40Z"
      },
      "message": "[dbwrapper] Detect obfuscation\n\nGithub-Pull: #7259\nRebased-From: fa24941c46fe0663efa081326940099313df292f",
      "tree": {
        "sha": "3a0e06e813b00d91818b158859676ef6ac81fba1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a0e06e813b00d91818b158859676ef6ac81fba1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4124498ea4d718fe8223fcfac59da9f6afac2109",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4124498ea4d718fe8223fcfac59da9f6afac2109",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4124498ea4d718fe8223fcfac59da9f6afac2109",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4124498ea4d718fe8223fcfac59da9f6afac2109/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4d056221a9551001ae162ca05edc15198e108f81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d056221a9551001ae162ca05edc15198e108f81",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4d056221a9551001ae162ca05edc15198e108f81"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 29,
      "deletions": 10
    },
    "files": [
      {
        "sha": "c7efc3417546b659e167e104babeba99306be9bc",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4124498ea4d718fe8223fcfac59da9f6afac2109/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4124498ea4d718fe8223fcfac59da9f6afac2109/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4124498ea4d718fe8223fcfac59da9f6afac2109",
        "patch": "@@ -1021,14 +1021,23 @@ bool AppInit2(boost::thread_group& threadGroup)\n                 delete pcoinscatcher;\n                 delete pblocktree;\n \n-                pblocktree = new CBlockTreeDB(nBlockTreeDBCache, false, fReindex);\n-                pcoinsdbview = new CCoinsViewDB(nCoinDBCache, false, fReindex);\n+                // Detect database obfuscated by future versions of the DBWrapper\n+                bool chainstateScrambled;\n+                bool blockDbScrambled;\n+\n+                pblocktree = new CBlockTreeDB(nBlockTreeDBCache, blockDbScrambled, false, fReindex);\n+                pcoinsdbview = new CCoinsViewDB(nCoinDBCache, chainstateScrambled, false, fReindex);\n                 pcoinscatcher = new CCoinsViewErrorCatcher(pcoinsdbview);\n                 pcoinsTip = new CCoinsViewCache(pcoinscatcher);\n \n                 if (fReindex)\n                     pblocktree->WriteReindexing(true);\n \n+                if (chainstateScrambled || blockDbScrambled) {\n+                   strLoadError = _(\"Reindex required as the chainstate or block database is obfuscated\");\n+                   break;\n+                }\n+\n                 if (!LoadBlockIndex()) {\n                     strLoadError = _(\"Error loading block database\");\n                     break;"
      },
      {
        "sha": "68a39223d93b01d717a860f0702608e0cdc57e30",
        "filename": "src/leveldbwrapper.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4124498ea4d718fe8223fcfac59da9f6afac2109/src/leveldbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4124498ea4d718fe8223fcfac59da9f6afac2109/src/leveldbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.cpp?ref=4124498ea4d718fe8223fcfac59da9f6afac2109",
        "patch": "@@ -43,7 +43,7 @@ static leveldb::Options GetOptions(size_t nCacheSize)\n     return options;\n }\n \n-CLevelDBWrapper::CLevelDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory, bool fWipe)\n+CLevelDBWrapper::CLevelDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool &isObfuscated, bool fMemory, bool fWipe)\n {\n     penv = NULL;\n     readoptions.verify_checksums = true;\n@@ -67,6 +67,9 @@ CLevelDBWrapper::CLevelDBWrapper(const boost::filesystem::path& path, size_t nCa\n     leveldb::Status status = leveldb::DB::Open(options, path.string(), &pdb);\n     HandleError(status);\n     LogPrintf(\"Opened LevelDB successfully\\n\");\n+\n+    std::vector<unsigned char> obfuscate_key;\n+    isObfuscated = Read(OBFUSCATE_KEY_KEY, obfuscate_key);\n }\n \n CLevelDBWrapper::~CLevelDBWrapper()\n@@ -87,3 +90,6 @@ bool CLevelDBWrapper::WriteBatch(CLevelDBBatch& batch, bool fSync) throw(leveldb\n     HandleError(status);\n     return true;\n }\n+\n+// Taken from future release of DBWrapper\n+const std::string CLevelDBWrapper::OBFUSCATE_KEY_KEY(\"\\000obfuscate_key\", 14);"
      },
      {
        "sha": "ace42e291ef8f8939802f36a532fc960815c26db",
        "filename": "src/leveldbwrapper.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4124498ea4d718fe8223fcfac59da9f6afac2109/src/leveldbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4124498ea4d718fe8223fcfac59da9f6afac2109/src/leveldbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.h?ref=4124498ea4d718fe8223fcfac59da9f6afac2109",
        "patch": "@@ -85,8 +85,11 @@ class CLevelDBWrapper\n     //! the database itself\n     leveldb::DB* pdb;\n \n+    //! the key under which a obfuscation key may be stored by a future version of DBWrapper\n+    static const std::string OBFUSCATE_KEY_KEY;\n+\n public:\n-    CLevelDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n+    CLevelDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool &isObfuscated, bool fMemory = false, bool fWipe = false);\n     ~CLevelDBWrapper();\n \n     template <typename K, typename V>"
      },
      {
        "sha": "4a1486dd54601dd13981e893acf1f9b128767194",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4124498ea4d718fe8223fcfac59da9f6afac2109/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4124498ea4d718fe8223fcfac59da9f6afac2109/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=4124498ea4d718fe8223fcfac59da9f6afac2109",
        "patch": "@@ -42,8 +42,9 @@ struct TestingSetup {\n         pathTemp = GetTempPath() / strprintf(\"test_bitcoin_%lu_%i\", (unsigned long)GetTime(), (int)(GetRand(100000)));\n         boost::filesystem::create_directories(pathTemp);\n         mapArgs[\"-datadir\"] = pathTemp.string();\n-        pblocktree = new CBlockTreeDB(1 << 20, true);\n-        pcoinsdbview = new CCoinsViewDB(1 << 23, true);\n+        bool isObfuscated;\n+        pblocktree = new CBlockTreeDB(1 << 20, isObfuscated, true);\n+        pcoinsdbview = new CCoinsViewDB(1 << 23, isObfuscated, true);\n         pcoinsTip = new CCoinsViewCache(pcoinsdbview);\n         InitBlockIndex();\n #ifdef ENABLE_WALLET"
      },
      {
        "sha": "f507d3770d97862f9a348a7fafba8f50c4f703f1",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4124498ea4d718fe8223fcfac59da9f6afac2109/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4124498ea4d718fe8223fcfac59da9f6afac2109/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=4124498ea4d718fe8223fcfac59da9f6afac2109",
        "patch": "@@ -25,7 +25,7 @@ void static BatchWriteHashBestChain(CLevelDBBatch &batch, const uint256 &hash) {\n     batch.Write('B', hash);\n }\n \n-CCoinsViewDB::CCoinsViewDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(GetDataDir() / \"chainstate\", nCacheSize, fMemory, fWipe) {\n+CCoinsViewDB::CCoinsViewDB(size_t nCacheSize, bool &isObfuscated, bool fMemory, bool fWipe) : db(GetDataDir() / \"chainstate\", nCacheSize, isObfuscated, fMemory, fWipe) {\n }\n \n bool CCoinsViewDB::GetCoins(const uint256 &txid, CCoins &coins) const {\n@@ -63,7 +63,7 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n     return db.WriteBatch(batch);\n }\n \n-CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CLevelDBWrapper(GetDataDir() / \"blocks\" / \"index\", nCacheSize, fMemory, fWipe) {\n+CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool &isObfuscated, bool fMemory, bool fWipe) : CLevelDBWrapper(GetDataDir() / \"blocks\" / \"index\", nCacheSize, isObfuscated, fMemory, fWipe) {\n }\n \n bool CBlockTreeDB::WriteBlockIndex(const CDiskBlockIndex& blockindex)"
      },
      {
        "sha": "490acbb1522ca93012532b6a04bcd863d5e18c1c",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4124498ea4d718fe8223fcfac59da9f6afac2109/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4124498ea4d718fe8223fcfac59da9f6afac2109/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=4124498ea4d718fe8223fcfac59da9f6afac2109",
        "patch": "@@ -30,7 +30,7 @@ class CCoinsViewDB : public CCoinsView\n protected:\n     CLevelDBWrapper db;\n public:\n-    CCoinsViewDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n+    CCoinsViewDB(size_t nCacheSize, bool &isObfuscated, bool fMemory = false, bool fWipe = false);\n \n     bool GetCoins(const uint256 &txid, CCoins &coins) const;\n     bool HaveCoins(const uint256 &txid) const;\n@@ -43,7 +43,7 @@ class CCoinsViewDB : public CCoinsView\n class CBlockTreeDB : public CLevelDBWrapper\n {\n public:\n-    CBlockTreeDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n+    CBlockTreeDB(size_t nCacheSize, bool &isObfuscated, bool fMemory = false, bool fWipe = false);\n private:\n     CBlockTreeDB(const CBlockTreeDB&);\n     void operator=(const CBlockTreeDB&);"
      }
    ]
  },
  {
    "sha": "4d548f6fdc2b6f8b52bfa950660a124a567d5660",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDU0OGY2ZmRjMmI2ZjhiNTJiZmE5NTA2NjBhMTI0YTU2N2Q1NjYw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-12-26T22:06:28Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T04:26:56Z"
      },
      "message": "[init] Fix typo\n\nGithub-Pull: #7259\nRebased-From: fa3cb4946f917111bd106c5f79a2d614d6e990f4",
      "tree": {
        "sha": "5f7aea6b0a5608e40f38cb1af03938d330876257",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f7aea6b0a5608e40f38cb1af03938d330876257"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d548f6fdc2b6f8b52bfa950660a124a567d5660",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d548f6fdc2b6f8b52bfa950660a124a567d5660",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d548f6fdc2b6f8b52bfa950660a124a567d5660",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d548f6fdc2b6f8b52bfa950660a124a567d5660/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4124498ea4d718fe8223fcfac59da9f6afac2109",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4124498ea4d718fe8223fcfac59da9f6afac2109",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4124498ea4d718fe8223fcfac59da9f6afac2109"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6290baf2f370a6e47eb553a4192e0bec841afc7d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d548f6fdc2b6f8b52bfa950660a124a567d5660/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d548f6fdc2b6f8b52bfa950660a124a567d5660/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4d548f6fdc2b6f8b52bfa950660a124a567d5660",
        "patch": "@@ -1021,7 +1021,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n                 delete pcoinscatcher;\n                 delete pblocktree;\n \n-                // Detect database obfuscated by future versions of the DBWrapper\n+                // Detect database obfuscation by future versions of the DBWrapper\n                 bool chainstateScrambled;\n                 bool blockDbScrambled;\n "
      }
    ]
  },
  {
    "sha": "d89d0ebba89de56ec456d875d345f772711a0d5f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODlkMGViYmE4OWRlNTZlYzQ1NmQ4NzVkMzQ1Zjc3MjcxMWEwZDVm",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-05-13T20:04:39Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T05:03:57Z"
      },
      "message": "Fix various warnings\n\nFound while building on Debian 7\n\nGithub-Pull: #6133\nRebased-From: e617fe25785bfba30bcb0a8d8af6797b44ba07f5",
      "tree": {
        "sha": "3ef90cf1bf2634934e4388aca0cf2b95d95f9850",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3ef90cf1bf2634934e4388aca0cf2b95d95f9850"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d89d0ebba89de56ec456d875d345f772711a0d5f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d89d0ebba89de56ec456d875d345f772711a0d5f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d89d0ebba89de56ec456d875d345f772711a0d5f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d89d0ebba89de56ec456d875d345f772711a0d5f/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4d548f6fdc2b6f8b52bfa950660a124a567d5660",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d548f6fdc2b6f8b52bfa950660a124a567d5660",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4d548f6fdc2b6f8b52bfa950660a124a567d5660"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0328b65bf5c25276b60ce198644000c8f96bde22",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d89d0ebba89de56ec456d875d345f772711a0d5f/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d89d0ebba89de56ec456d875d345f772711a0d5f/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=d89d0ebba89de56ec456d875d345f772711a0d5f",
        "patch": "@@ -499,7 +499,7 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n                     continue;\n                 const CCoins *coins = pcoins->AccessCoins(txin.prevout.hash);\n                 if (fSanityCheck) assert(coins);\n-                if (!coins || (coins->IsCoinBase() && nMemPoolHeight - coins->nHeight < COINBASE_MATURITY)) {\n+                if (!coins || (coins->IsCoinBase() && ((signed long)nMemPoolHeight) - coins->nHeight < COINBASE_MATURITY)) {\n                     transactionsToRemove.push_back(tx);\n                     break;\n                 }"
      }
    ]
  },
  {
    "sha": "d60afa17b0020ee5bec487f40087fb04fc0737f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjBhZmExN2IwMDIwZWU1YmVjNDg3ZjQwMDg3ZmIwNGZjMDczN2Y4",
    "commit": {
      "author": {
        "name": "Forrest Voight",
        "email": "forrest@forre.st",
        "date": "2015-07-02T01:34:31Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T05:04:14Z"
      },
      "message": "When processing RPC commands during warmup phase, parse the\nrequest object before returning an error so that id value can\nbe used in the response.\n\nPrior to this commit, RPC commands sent during Bitcoin's\nwarmup/startup phase were responded to with a JSON-RPC error\nwith an id of null, which violated the JSON-RPC 2.0 spec:\n\nid: This member is REQUIRED. It MUST be the same as the value\nof the id member in the Request Object. If there was an error\nin detecting the id in the Request object (e.g. Parse\nerror/Invalid Request), it MUST be Null.\n\nGithub-Pull: #6362\nRebased-From: 72b9452b1d5ff8761466e9810facfd50103cc63b",
      "tree": {
        "sha": "23149ccba49affcf4d242605dfabd82d42448337",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/23149ccba49affcf4d242605dfabd82d42448337"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d60afa17b0020ee5bec487f40087fb04fc0737f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d60afa17b0020ee5bec487f40087fb04fc0737f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d60afa17b0020ee5bec487f40087fb04fc0737f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d60afa17b0020ee5bec487f40087fb04fc0737f8/comments",
    "author": {
      "login": "forrestv",
      "id": 59872,
      "node_id": "MDQ6VXNlcjU5ODcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/59872?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/forrestv",
      "html_url": "https://github.com/forrestv",
      "followers_url": "https://api.github.com/users/forrestv/followers",
      "following_url": "https://api.github.com/users/forrestv/following{/other_user}",
      "gists_url": "https://api.github.com/users/forrestv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/forrestv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/forrestv/subscriptions",
      "organizations_url": "https://api.github.com/users/forrestv/orgs",
      "repos_url": "https://api.github.com/users/forrestv/repos",
      "events_url": "https://api.github.com/users/forrestv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/forrestv/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d89d0ebba89de56ec456d875d345f772711a0d5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d89d0ebba89de56ec456d875d345f772711a0d5f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d89d0ebba89de56ec456d875d345f772711a0d5f"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "b166fe4443c48cfb76f291fadcc5b66b17e05f05",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d60afa17b0020ee5bec487f40087fb04fc0737f8/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d60afa17b0020ee5bec487f40087fb04fc0737f8/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=d60afa17b0020ee5bec487f40087fb04fc0737f8",
        "patch": "@@ -898,13 +898,6 @@ static bool HTTPReq_JSONRPC(AcceptedConnection *conn,\n         if (!read_string(strRequest, valRequest))\n             throw JSONRPCError(RPC_PARSE_ERROR, \"Parse error\");\n \n-        // Return immediately if in warmup\n-        {\n-            LOCK(cs_rpcWarmup);\n-            if (fRPCInWarmup)\n-                throw JSONRPCError(RPC_IN_WARMUP, rpcWarmupStatus);\n-        }\n-\n         string strReply;\n \n         // singleton request\n@@ -976,6 +969,13 @@ void ServiceConnection(AcceptedConnection *conn)\n \n json_spirit::Value CRPCTable::execute(const std::string &strMethod, const json_spirit::Array &params) const\n {\n+    // Return immediately if in warmup\n+    {\n+        LOCK(cs_rpcWarmup);\n+        if (fRPCInWarmup)\n+            throw JSONRPCError(RPC_IN_WARMUP, rpcWarmupStatus);\n+    }\n+\n     // Find method\n     const CRPCCommand *pcmd = tableRPC[strMethod];\n     if (!pcmd)"
      }
    ]
  },
  {
    "sha": "b83ab95d8d7815a027d7b016146436f1c5624a93",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiODNhYjk1ZDhkNzgxNWEwMjdkN2IwMTYxNDY0MzZmMWM1NjI0YTkz",
    "commit": {
      "author": {
        "name": "kazcw",
        "email": "keziahw@gmail.com",
        "date": "2014-07-16T21:31:41Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T05:04:32Z"
      },
      "message": "prevent peer flooding request queue for an inv\n\nmapAlreadyAskedFor does not keep track of which peer has a request queued for a\nparticular tx. As a result, a peer can blind a node to a tx indefinitely by\nsending many invs for the same tx, and then never replying to getdatas for it.\nEach inv received will be placed 2 minutes farther back in mapAlreadyAskedFor,\nso a short message containing 10 invs would render that tx unavailable for 20\nminutes.\n\nThis is fixed by disallowing a peer from having more than one entry for a\nparticular inv in mapAlreadyAskedFor at a time.\n\nGithub-Pull: #7079\nRebased-From: 5029698186445bf3cd69d0e720f019c472661bff",
      "tree": {
        "sha": "b90cb17ab51eb422df697f78e5d0e25724c6b28c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b90cb17ab51eb422df697f78e5d0e25724c6b28c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b83ab95d8d7815a027d7b016146436f1c5624a93",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b83ab95d8d7815a027d7b016146436f1c5624a93",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b83ab95d8d7815a027d7b016146436f1c5624a93",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b83ab95d8d7815a027d7b016146436f1c5624a93/comments",
    "author": {
      "login": "kazcw",
      "id": 1047859,
      "node_id": "MDQ6VXNlcjEwNDc4NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1047859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kazcw",
      "html_url": "https://github.com/kazcw",
      "followers_url": "https://api.github.com/users/kazcw/followers",
      "following_url": "https://api.github.com/users/kazcw/following{/other_user}",
      "gists_url": "https://api.github.com/users/kazcw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kazcw/subscriptions",
      "organizations_url": "https://api.github.com/users/kazcw/orgs",
      "repos_url": "https://api.github.com/users/kazcw/repos",
      "events_url": "https://api.github.com/users/kazcw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kazcw/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d60afa17b0020ee5bec487f40087fb04fc0737f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d60afa17b0020ee5bec487f40087fb04fc0737f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d60afa17b0020ee5bec487f40087fb04fc0737f8"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "87ab7b9b744e499196bd7a6d24df51e8170b27e4",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b83ab95d8d7815a027d7b016146436f1c5624a93/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b83ab95d8d7815a027d7b016146436f1c5624a93/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b83ab95d8d7815a027d7b016146436f1c5624a93",
        "patch": "@@ -4757,6 +4757,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                     vGetData.clear();\n                 }\n             }\n+            pto->setAskFor.erase(inv.hash);\n             pto->mapAskFor.erase(pto->mapAskFor.begin());\n         }\n         if (!vGetData.empty())"
      },
      {
        "sha": "fde44f5c9b98a8e367495d662442b2dc989fdea5",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b83ab95d8d7815a027d7b016146436f1c5624a93/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b83ab95d8d7815a027d7b016146436f1c5624a93/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=b83ab95d8d7815a027d7b016146436f1c5624a93",
        "patch": "@@ -2031,6 +2031,10 @@ void CNode::AskFor(const CInv& inv)\n {\n     if (mapAskFor.size() > MAPASKFOR_MAX_SZ)\n         return;\n+    // a peer may not occupy multiple positions in an inv's request queue\n+    if (!setAskFor.insert(inv.hash).second)\n+        return;\n+\n     // We're using mapAskFor as a priority queue,\n     // the key is the earliest time the request can be sent\n     int64_t nRequestTime;"
      },
      {
        "sha": "397b929312834c1531e07227e783871cc4e0d1cf",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b83ab95d8d7815a027d7b016146436f1c5624a93/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b83ab95d8d7815a027d7b016146436f1c5624a93/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=b83ab95d8d7815a027d7b016146436f1c5624a93",
        "patch": "@@ -292,6 +292,7 @@ class CNode\n     mruset<CInv> setInventoryKnown;\n     std::vector<CInv> vInventoryToSend;\n     CCriticalSection cs_inventory;\n+    std::set<uint256> setAskFor;\n     std::multimap<int64_t, CInv> mapAskFor;\n \n     // Ping time measurement:"
      }
    ]
  },
  {
    "sha": "0d43146081b448f48bd6174d0315017147178283",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZDQzMTQ2MDgxYjQ0OGY0OGJkNjE3NGQwMzE1MDE3MTQ3MTc4Mjgz",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-23T01:54:23Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-10T05:04:37Z"
      },
      "message": "Limit setAskFor and retire requested entries only when a getdata returns.\n\nThe setAskFor duplicate elimination was too eager and removed entries\n when we still had no getdata response, allowing the peer to keep\n INVing and not responding.\n\nGithub-Pull: #7079\nRebased-From: ebb25f4c23adbcb55796c402bafd6064a136f16f",
      "tree": {
        "sha": "7f43d8719703522943216fdba496cc4569c12ca2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f43d8719703522943216fdba496cc4569c12ca2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0d43146081b448f48bd6174d0315017147178283",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d43146081b448f48bd6174d0315017147178283",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0d43146081b448f48bd6174d0315017147178283",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d43146081b448f48bd6174d0315017147178283/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b83ab95d8d7815a027d7b016146436f1c5624a93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b83ab95d8d7815a027d7b016146436f1c5624a93",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b83ab95d8d7815a027d7b016146436f1c5624a93"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 8,
      "deletions": 3
    },
    "files": [
      {
        "sha": "0a15814a4403015056ad197e43aa8f17c61465eb",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d43146081b448f48bd6174d0315017147178283/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d43146081b448f48bd6174d0315017147178283/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0d43146081b448f48bd6174d0315017147178283",
        "patch": "@@ -3998,6 +3998,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         bool fMissingInputs = false;\n         CValidationState state;\n \n+        pfrom->setAskFor.erase(inv.hash);\n         mapAlreadyAskedFor.erase(inv);\n \n         if (AcceptToMemoryPool(mempool, state, tx, true, &fMissingInputs))\n@@ -4756,8 +4757,10 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                     pto->PushMessage(\"getdata\", vGetData);\n                     vGetData.clear();\n                 }\n+            } else {\n+                //If we're not going to ask, don't expect a response.\n+                pto->setAskFor.erase(inv.hash);\n             }\n-            pto->setAskFor.erase(inv.hash);\n             pto->mapAskFor.erase(pto->mapAskFor.begin());\n         }\n         if (!vGetData.empty())"
      },
      {
        "sha": "62ad0b7c809aa765cceeca324b785f53731ebc5a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d43146081b448f48bd6174d0315017147178283/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d43146081b448f48bd6174d0315017147178283/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=0d43146081b448f48bd6174d0315017147178283",
        "patch": "@@ -2029,9 +2029,9 @@ CNode::~CNode()\n \n void CNode::AskFor(const CInv& inv)\n {\n-    if (mapAskFor.size() > MAPASKFOR_MAX_SZ)\n+    if (mapAskFor.size() > MAPASKFOR_MAX_SZ || setAskFor.size() > SETASKFOR_MAX_SZ)\n         return;\n-    // a peer may not occupy multiple positions in an inv's request queue\n+    // a peer may not have multiple non-responded queue positions for a single inv item\n     if (!setAskFor.insert(inv.hash).second)\n         return;\n "
      },
      {
        "sha": "4cb4f517ebc25bc10b94f080cdb8ffdc095427c5",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d43146081b448f48bd6174d0315017147178283/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d43146081b448f48bd6174d0315017147178283/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=0d43146081b448f48bd6174d0315017147178283",
        "patch": "@@ -58,6 +58,8 @@ static const bool DEFAULT_UPNP = false;\n #endif\n /** The maximum number of entries in mapAskFor */\n static const size_t MAPASKFOR_MAX_SZ = MAX_INV_SZ;\n+/** The maximum number of entries in setAskFor (larger due to getdata latency)*/\n+static const size_t SETASKFOR_MAX_SZ = 2 * MAX_INV_SZ;\n \n unsigned int ReceiveFloodSize();\n unsigned int SendBufferSize();"
      }
    ]
  }
]