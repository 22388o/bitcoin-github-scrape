[
  {
    "sha": "7f0ff8c2fda0da60d9b787d98c3f26bc36c7971e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZjBmZjhjMmZkYTBkYTYwZDliNzg3ZDk4YzNmMjZiYzM2Yzc5NzFl",
    "commit": {
      "author": {
        "name": "Ethan Heilman",
        "email": "ethan.r.heilman@gmail.com",
        "date": "2021-06-05T01:23:29Z"
      },
      "committer": {
        "name": "Ethan Heilman",
        "email": "ethan.r.heilman@gmail.com",
        "date": "2021-06-08T03:10:17Z"
      },
      "message": "rng: adds support for x86 rdrand/rdseed instructions when using MSVC",
      "tree": {
        "sha": "8d7d668f439f09925dd1a1f21d7234636f379247",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d7d668f439f09925dd1a1f21d7234636f379247"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f0ff8c2fda0da60d9b787d98c3f26bc36c7971e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f0ff8c2fda0da60d9b787d98c3f26bc36c7971e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f0ff8c2fda0da60d9b787d98c3f26bc36c7971e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f0ff8c2fda0da60d9b787d98c3f26bc36c7971e/comments",
    "author": {
      "login": "EthanHeilman",
      "id": 274814,
      "node_id": "MDQ6VXNlcjI3NDgxNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EthanHeilman",
      "html_url": "https://github.com/EthanHeilman",
      "followers_url": "https://api.github.com/users/EthanHeilman/followers",
      "following_url": "https://api.github.com/users/EthanHeilman/following{/other_user}",
      "gists_url": "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
      "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
      "repos_url": "https://api.github.com/users/EthanHeilman/repos",
      "events_url": "https://api.github.com/users/EthanHeilman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "EthanHeilman",
      "id": 274814,
      "node_id": "MDQ6VXNlcjI3NDgxNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EthanHeilman",
      "html_url": "https://github.com/EthanHeilman",
      "followers_url": "https://api.github.com/users/EthanHeilman/followers",
      "following_url": "https://api.github.com/users/EthanHeilman/following{/other_user}",
      "gists_url": "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
      "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
      "repos_url": "https://api.github.com/users/EthanHeilman/repos",
      "events_url": "https://api.github.com/users/EthanHeilman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "346e52afd6d5e317c96fc506bb54cde13e87c8b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/346e52afd6d5e317c96fc506bb54cde13e87c8b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/346e52afd6d5e317c96fc506bb54cde13e87c8b2"
      }
    ],
    "stats": {
      "total": 144,
      "additions": 142,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e4741b47f7829b9e420306655514a244e8be6815",
        "filename": "src/compat/cpuid.h",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f0ff8c2fda0da60d9b787d98c3f26bc36c7971e/src/compat/cpuid.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f0ff8c2fda0da60d9b787d98c3f26bc36c7971e/src/compat/cpuid.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/cpuid.h?ref=7f0ff8c2fda0da60d9b787d98c3f26bc36c7971e",
        "patch": "@@ -21,4 +21,20 @@ void static inline GetCPUID(uint32_t leaf, uint32_t subleaf, uint32_t& a, uint32\n }\n \n #endif // defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n+\n+#if defined(_MSC_VER) && (defined(_M_IX86) || defined(_M_X64))\n+#define HAVE_GETCPUID\n+\n+#include <intrin.h>\n+void static inline GetCPUID(uint32_t leaf, uint32_t subleaf, uint32_t& a, uint32_t& b, uint32_t& c, uint32_t& d)\n+{\n+  int regs[4];\n+  __cpuidex(regs, leaf, subleaf);\n+  a = regs[0];\n+  b = regs[1];\n+  c = regs[2];\n+  d = regs[3];\n+}\n+\n+#endif  // defined(_MSC_VER) && (defined(_M_IX86) || defined(_M_X64))\n #endif // BITCOIN_COMPAT_CPUID_H"
      },
      {
        "sha": "501fec36f61a7d167f1d1f16a58e21c65acd33aa",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 2,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f0ff8c2fda0da60d9b787d98c3f26bc36c7971e/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f0ff8c2fda0da60d9b787d98c3f26bc36c7971e/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=7f0ff8c2fda0da60d9b787d98c3f26bc36c7971e",
        "patch": "@@ -134,6 +134,25 @@ static uint64_t GetRdRand() noexcept\n         if (ok) break;\n     }\n     return r1;\n+#elif defined(_MSC_VER) && defined(_M_X64)\n+    uint64_t r1 = 0; // See above why we initialize to 0.\n+    for (int i = 0; i < 10; ++i) {\n+        uint8_t ok = _rdrand64_step(&r1);\n+        if (ok) break;\n+    }\n+    return r1;\n+#elif defined(_MSC_VER) && defined(_M_IX86)\n+    uint32_t r1 = 0; // See above why we initialize to 0.\n+    uint32_t r2 = 0;\n+    for (int i = 0; i < 10; ++i) {\n+        uint8_t ok = _rdrand32_step(&r1);\n+        if (ok) break;\n+    }\n+    for (int i = 0; i < 10; ++i) {\n+        int ok = _rdrand32_step(&r2);\n+        if (ok) break;\n+    }\n+    return (((uint64_t)r2) << 32) | r1;\n #else\n #error \"RdRand is only supported on x86 and x86_64\"\n #endif\n@@ -170,6 +189,25 @@ static uint64_t GetRdSeed() noexcept\n         __asm__ volatile (\"pause\");\n     } while(true);\n     return r1;\n+#elif defined(_MSC_VER) && defined(_M_X64)\n+    uint64_t r1 = 0; // See above why we initialize to 0.\n+    do {\n+        uint8_t ok = _rdseed64_step(&r1);\n+        if (ok) break;\n+    } while(true);\n+    return r1;\n+#elif defined(_MSC_VER) && defined(_M_IX86)\n+    uint32_t r1 = 0; // See above why we initialize to 0.\n+    uint32_t r2 = 0;\n+    for (int i = 0; i < 10; ++i) {\n+        uint8_t ok = _rdseed32_step(&r1);\n+        if (ok) break;\n+    }\n+    for (int i = 0; i < 10; ++i) {\n+        int ok = _rdseed32_step(&r2);\n+        if (ok) break;\n+    }\n+    return (((uint64_t)r2) << 32) | r1;\n #else\n #error \"RdSeed is only supported on x86 and x86_64\"\n #endif\n@@ -187,7 +225,7 @@ static void ReportHardwareRand() {}\n \n /** Add 64 bits of entropy gathered from hardware to hasher. Do nothing if not supported. */\n static void SeedHardwareFast(CSHA512& hasher) noexcept {\n-#if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n+#if defined(__x86_64__) || defined(__amd64__) || defined(__i386__) || (defined(_MSC_VER) && (defined(_M_IX86) || defined(_M_X64)))\n     if (g_rdrand_supported) {\n         uint64_t out = GetRdRand();\n         hasher.Write((const unsigned char*)&out, sizeof(out));\n@@ -198,7 +236,7 @@ static void SeedHardwareFast(CSHA512& hasher) noexcept {\n \n /** Add 256 bits of entropy gathered from hardware to hasher. Do nothing if not supported. */\n static void SeedHardwareSlow(CSHA512& hasher) noexcept {\n-#if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n+#if defined(__x86_64__) || defined(__amd64__) || defined(__i386__) || (defined(_MSC_VER) && (defined(_M_IX86) || defined(_M_X64)))\n     // When we want 256 bits of entropy, prefer RdSeed over RdRand, as it's\n     // guaranteed to produce independent randomness on every call.\n     if (g_rdseed_supported) {"
      },
      {
        "sha": "c6fc2b77a93de9a9ebfb2427594f119c4a77d01a",
        "filename": "src/test/hwrand_tests.cpp",
        "status": "added",
        "additions": 86,
        "deletions": 0,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f0ff8c2fda0da60d9b787d98c3f26bc36c7971e/src/test/hwrand_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f0ff8c2fda0da60d9b787d98c3f26bc36c7971e/src/test/hwrand_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/hwrand_tests.cpp?ref=7f0ff8c2fda0da60d9b787d98c3f26bc36c7971e",
        "patch": "@@ -0,0 +1,86 @@\n+// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+#include <test/util/setup_common.h>\n+#include <boost/test/unit_test.hpp>\n+\n+#include <random.cpp>\n+\n+using namespace std;\n+\n+BOOST_FIXTURE_TEST_SUITE(hwrand_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(rdx86seedhwslow_test)\n+{\n+    const size_t DIGEST_LEN = 512/8; // 512 bits = 64 bytes\n+\n+    unsigned char emptyoutput[DIGEST_LEN];\n+    memset(emptyoutput, 0, DIGEST_LEN);\n+    CSHA512 emptyhasher;\n+    emptyhasher.Finalize(emptyoutput);\n+\n+    for (int i = 0; i < 5; i++)\n+    {\n+        CSHA512 hasher;\n+        unsigned char output[DIGEST_LEN];\n+        memset(output, 0, DIGEST_LEN);\n+\n+        SeedHardwareSlow(hasher);\n+        hasher.Finalize(output);\n+\n+        #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__) || (defined(_MSC_VER) && (defined(_M_IX86) || defined(_M_X64)))\n+            bool isNotEqual = (memcmp(output, emptyoutput, DIGEST_LEN) != 0);\n+            if (g_rdseed_supported)\n+            {\n+                BOOST_CHECK(isNotEqual);\n+            }\n+            else\n+            {\n+                BOOST_CHECK(!isNotEqual);\n+            }\n+        #else\n+            // RDRand not supported on this platform so the hasher should have no data written to it\n+            bool isEqual = (memcmp(output, emptyoutput, DIGEST_LEN) == 0);\n+            BOOST_CHECK(isEqual);\n+        #endif\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(rdx86seedhwfast_test)\n+{\n+    const size_t DIGEST_LEN = 512/8; // 512 bits = 64 bytes\n+\n+    unsigned char emptyoutput[DIGEST_LEN];\n+    memset(emptyoutput, 0, DIGEST_LEN);\n+    CSHA512 emptyhasher;\n+    emptyhasher.Finalize(emptyoutput);\n+\n+    for (int i = 0; i < 5; i++)\n+    {\n+        CSHA512 hasher;\n+        unsigned char output[DIGEST_LEN];\n+        memset(output, 0, DIGEST_LEN);\n+\n+        SeedHardwareFast(hasher);\n+        hasher.Finalize(output);\n+\n+        #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__) || (defined(_MSC_VER) && (defined(_M_IX86) || defined(_M_X64)))\n+            bool isNotEqual = (memcmp(output, emptyoutput, DIGEST_LEN) != 0);\n+            if (g_rdrand_supported)\n+            {\n+                BOOST_CHECK(isNotEqual);\n+            }\n+            else\n+            {\n+                BOOST_CHECK(!isNotEqual);\n+            }\n+        #else\n+            // RDRand not supported on this platform so the hasher should have no data written to it\n+            bool isEqual = (memcmp(output, emptyoutput, DIGEST_LEN) == 0);\n+            BOOST_CHECK(isEqual);\n+        #endif\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]