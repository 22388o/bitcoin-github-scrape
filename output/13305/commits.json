[
  {
    "sha": "4b71a9be686ac3b5deb48a0e12e3e4e2d1322624",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YjcxYTliZTY4NmFjM2I1ZGViNDhhMGUxMmUzZTRlMmQxMzIyNjI0",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-05-22T20:40:06Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-05-22T20:40:06Z"
      },
      "message": "test: Refactor wallet test not to depend on mapBlockIndex.\n\nInstead of inserting directly into the underlying block index data\nstructure, the test now uses the public ProcessNewBlockHeaders\nfunction.",
      "tree": {
        "sha": "fa3fed4bdd765d9c6e0ec8f309e250c58a451d2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa3fed4bdd765d9c6e0ec8f309e250c58a451d2f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b71a9be686ac3b5deb48a0e12e3e4e2d1322624",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b71a9be686ac3b5deb48a0e12e3e4e2d1322624",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4b71a9be686ac3b5deb48a0e12e3e4e2d1322624",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b71a9be686ac3b5deb48a0e12e3e4e2d1322624/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6916024768ec57a00f54224640ab4e4871d2a30a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6916024768ec57a00f54224640ab4e4871d2a30a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6916024768ec57a00f54224640ab4e4871d2a30a"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 33,
      "deletions": 13
    },
    "files": [
      {
        "sha": "ff33c86d1ef8c21460b0a7009d82b0ccfed7791a",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 13,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b71a9be686ac3b5deb48a0e12e3e4e2d1322624/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b71a9be686ac3b5deb48a0e12e3e4e2d1322624/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=4b71a9be686ac3b5deb48a0e12e3e4e2d1322624",
        "patch": "@@ -10,7 +10,9 @@\n #include <utility>\n #include <vector>\n \n+#include <chainparams.h>\n #include <consensus/validation.h>\n+#include <pow.h>\n #include <rpc/server.h>\n #include <test/test_bitcoin.h>\n #include <validation.h>\n@@ -195,20 +197,32 @@ BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n     BOOST_CHECK_EQUAL(wtx.GetImmatureCredit(), 50*COIN);\n }\n \n-static int64_t AddTx(CWallet& wallet, uint32_t lockTime, int64_t mockTime, int64_t blockTime)\n+static int64_t AddTx(CWallet& wallet, uint32_t lock_time, int64_t mock_time, int64_t block_time)\n {\n+    CBlockHeader genesis_header = Params().GenesisBlock().GetBlockHeader();\n+    int64_t genesis_time = genesis_header.GetBlockTime();\n+\n+    lock_time += genesis_time;\n+    mock_time += genesis_time;\n+    block_time += genesis_time;\n+\n     CMutableTransaction tx;\n-    tx.nLockTime = lockTime;\n-    SetMockTime(mockTime);\n-    CBlockIndex* block = nullptr;\n-    if (blockTime > 0) {\n+    tx.nLockTime = lock_time;\n+    SetMockTime(mock_time);\n+\n+    CBlockHeader header;\n+    header.hashPrevBlock = genesis_header.GetHash();\n+    header.nBits = genesis_header.nBits;\n+    header.nTime = block_time;\n+    while (!CheckProofOfWork(header.GetHash(), header.nBits, Params().GetConsensus())) {\n+        ++header.nNonce;\n+    }\n+\n+    const CBlockIndex* block = nullptr;\n+    {\n         LOCK(cs_main);\n-        auto inserted = mapBlockIndex.emplace(GetRandHash(), new CBlockIndex);\n-        assert(inserted.second);\n-        const uint256& hash = inserted.first->first;\n-        block = inserted.first->second;\n-        block->nTime = blockTime;\n-        block->phashBlock = &hash;\n+        CValidationState state;\n+        ProcessNewBlockHeaders({header}, state, Params(), &block);\n     }\n \n     CWalletTx wtx(&wallet, MakeTransactionRef(tx));\n@@ -220,12 +234,18 @@ static int64_t AddTx(CWallet& wallet, uint32_t lockTime, int64_t mockTime, int64\n         wallet.AddToWallet(wtx);\n     }\n     LOCK(wallet.cs_wallet);\n-    return wallet.mapWallet.at(wtx.GetHash()).nTimeSmart;\n+    return wallet.mapWallet.at(wtx.GetHash()).nTimeSmart - genesis_time;\n }\n \n+class RegtestWalletTestingSetup : public WalletTestingSetup\n+{\n+public:\n+    RegtestWalletTestingSetup() : WalletTestingSetup(CBaseChainParams::REGTEST) {}\n+};\n+\n // Simple test to verify assignment of CWalletTx::nSmartTime value. Could be\n // expanded to cover more corner cases of smart time logic.\n-BOOST_AUTO_TEST_CASE(ComputeTimeSmart)\n+BOOST_FIXTURE_TEST_CASE(ComputeTimeSmart, RegtestWalletTestingSetup)\n {\n     // New transaction should use clock time if lower than block time.\n     BOOST_CHECK_EQUAL(AddTx(m_wallet, 1, 100, 120), 100);"
      }
    ]
  },
  {
    "sha": "0bf758ba6c24ca9709ad6c63e46f173daa9838db",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYmY3NThiYTZjMjRjYTk3MDlhZDZjNjNlNDZmMTczZGFhOTgzOGRi",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-05-22T20:45:14Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-05-22T20:45:14Z"
      },
      "message": "rpc: Refactor getchaintips RPC to remove mapBlockIndex.\n\nMoves the actual logic into a validation function.",
      "tree": {
        "sha": "bd2b1c96e2833c68dd4c8490899e47654108c4e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd2b1c96e2833c68dd4c8490899e47654108c4e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0bf758ba6c24ca9709ad6c63e46f173daa9838db",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bf758ba6c24ca9709ad6c63e46f173daa9838db",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0bf758ba6c24ca9709ad6c63e46f173daa9838db",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bf758ba6c24ca9709ad6c63e46f173daa9838db/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b71a9be686ac3b5deb48a0e12e3e4e2d1322624",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b71a9be686ac3b5deb48a0e12e3e4e2d1322624",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b71a9be686ac3b5deb48a0e12e3e4e2d1322624"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 44,
      "deletions": 29
    },
    "files": [
      {
        "sha": "23b95f9d978b9fab9bef5f92c621ff6698fe2191",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 29,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bf758ba6c24ca9709ad6c63e46f173daa9838db/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bf758ba6c24ca9709ad6c63e46f173daa9838db/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=0bf758ba6c24ca9709ad6c63e46f173daa9838db",
        "patch": "@@ -1320,38 +1320,12 @@ static UniValue getchaintips(const JSONRPCRequest& request)\n \n     LOCK(cs_main);\n \n-    /*\n-     * Idea:  the set of chain tips is chainActive.tip, plus orphan blocks which do not have another orphan building off of them.\n-     * Algorithm:\n-     *  - Make one pass through mapBlockIndex, picking out the orphan blocks, and also storing a set of the orphan block's pprev pointers.\n-     *  - Iterate through the orphan blocks. If the block isn't pointed to by another orphan, it is a chain tip.\n-     *  - add chainActive.Tip()\n-     */\n-    std::set<const CBlockIndex*, CompareBlocksByHeight> setTips;\n-    std::set<const CBlockIndex*> setOrphans;\n-    std::set<const CBlockIndex*> setPrevs;\n-\n-    for (const std::pair<const uint256, CBlockIndex*>& item : mapBlockIndex)\n-    {\n-        if (!chainActive.Contains(item.second)) {\n-            setOrphans.insert(item.second);\n-            setPrevs.insert(item.second->pprev);\n-        }\n-    }\n-\n-    for (std::set<const CBlockIndex*>::iterator it = setOrphans.begin(); it != setOrphans.end(); ++it)\n-    {\n-        if (setPrevs.erase(*it) == 0) {\n-            setTips.insert(*it);\n-        }\n-    }\n-\n-    // Always report the currently active tip.\n-    setTips.insert(chainActive.Tip());\n+    std::vector<const CBlockIndex*> chain_tips = GetChainTips();\n+    std::sort(chain_tips.begin(), chain_tips.end(), CompareBlocksByHeight());\n \n     /* Construct the output array.  */\n     UniValue res(UniValue::VARR);\n-    for (const CBlockIndex* block : setTips)\n+    for (const CBlockIndex* block : chain_tips)\n     {\n         UniValue obj(UniValue::VOBJ);\n         obj.pushKV(\"height\", block->nHeight);"
      },
      {
        "sha": "0c69b7818c66ccc9b9721592deecc937c86a000a",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bf758ba6c24ca9709ad6c63e46f173daa9838db/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bf758ba6c24ca9709ad6c63e46f173daa9838db/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0bf758ba6c24ca9709ad6c63e46f173daa9838db",
        "patch": "@@ -294,6 +294,41 @@ CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& loc\n     return chain.Genesis();\n }\n \n+std::vector<const CBlockIndex*> GetChainTips()\n+{\n+    LOCK(cs_main);\n+\n+    /*\n+     * Algorithm:\n+     *  - Make one pass through mapBlockIndex, picking out the orphan blocks, and also storing a set of the orphan block's pprev pointers.\n+     *  - Iterate through the orphan blocks. If the block isn't pointed to by another orphan, it is a chain tip.\n+     *  - add chainActive.Tip()\n+     */\n+    std::vector<const CBlockIndex*> setTips;\n+    std::set<const CBlockIndex*> setOrphans;\n+    std::set<const CBlockIndex*> setPrevs;\n+\n+    for (const std::pair<const uint256, CBlockIndex*>& item : mapBlockIndex)\n+    {\n+        if (!chainActive.Contains(item.second)) {\n+            setOrphans.insert(item.second);\n+            setPrevs.insert(item.second->pprev);\n+        }\n+    }\n+\n+    for (std::set<const CBlockIndex*>::iterator it = setOrphans.begin(); it != setOrphans.end(); ++it)\n+    {\n+        if (setPrevs.erase(*it) == 0) {\n+            setTips.push_back(*it);\n+        }\n+    }\n+\n+    // Always report the currently active tip.\n+    setTips.push_back(chainActive.Tip());\n+\n+    return setTips;\n+}\n+\n std::unique_ptr<CCoinsViewDB> pcoinsdbview;\n std::unique_ptr<CCoinsViewCache> pcoinsTip;\n std::unique_ptr<CBlockTreeDB> pblocktree;"
      },
      {
        "sha": "401024a4fd5c1070a8262e40bbf470547b807acb",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bf758ba6c24ca9709ad6c63e46f173daa9838db/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bf758ba6c24ca9709ad6c63e46f173daa9838db/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=0bf758ba6c24ca9709ad6c63e46f173daa9838db",
        "patch": "@@ -443,6 +443,12 @@ inline CBlockIndex* LookupBlockIndex(const uint256& hash)\n /** Find the last common block between the parameter chain and a locator. */\n CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator);\n \n+/*\n+ * The set of chain tips consists of the tip of the active chain plus any stale blocks which do not\n+ * have another stale block building off of them.\n+ */\n+std::vector<const CBlockIndex*> GetChainTips();\n+\n /** Mark a block as precious and reorganize. */\n bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex);\n "
      }
    ]
  },
  {
    "sha": "7d8a627e77aaa79fc066507f1f169af07d7e93f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZDhhNjI3ZTc3YWFhNzlmYzA2NjUwN2YxZjE2OWFmMDdkN2U5M2Y5",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-05-22T20:47:00Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-05-22T20:47:00Z"
      },
      "message": "init: Remove direct mapBlockIndex access from init.",
      "tree": {
        "sha": "a676a82857d792238a94f1f97f33379ee87290c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a676a82857d792238a94f1f97f33379ee87290c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d8a627e77aaa79fc066507f1f169af07d7e93f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d8a627e77aaa79fc066507f1f169af07d7e93f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7d8a627e77aaa79fc066507f1f169af07d7e93f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d8a627e77aaa79fc066507f1f169af07d7e93f9/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0bf758ba6c24ca9709ad6c63e46f173daa9838db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bf758ba6c24ca9709ad6c63e46f173daa9838db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0bf758ba6c24ca9709ad6c63e46f173daa9838db"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 11,
      "deletions": 2
    },
    "files": [
      {
        "sha": "34437b3297846954872412e90c725979981a306c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d8a627e77aaa79fc066507f1f169af07d7e93f9/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d8a627e77aaa79fc066507f1f169af07d7e93f9/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7d8a627e77aaa79fc066507f1f169af07d7e93f9",
        "patch": "@@ -1452,7 +1452,7 @@ bool AppInitMain()\n \n                 // If the loaded chain has a wrong genesis, bail out immediately\n                 // (we're likely using a testnet datadir, or the other way around).\n-                if (!mapBlockIndex.empty() && !LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n+                if (GetBlockIndexCount() > 0 && !LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n                     return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n                 }\n \n@@ -1663,7 +1663,7 @@ bool AppInitMain()\n     //// debug print\n     {\n         LOCK(cs_main);\n-        LogPrintf(\"mapBlockIndex.size() = %u\\n\", mapBlockIndex.size());\n+        LogPrintf(\"mapBlockIndex.size() = %u\\n\", GetBlockIndexCount());\n         chain_active_height = chainActive.Height();\n     }\n     LogPrintf(\"nBestHeight = %d\\n\", chain_active_height);"
      },
      {
        "sha": "4722feaea4b0fdc8b1d8e954bfe5ab719adfaa02",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d8a627e77aaa79fc066507f1f169af07d7e93f9/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d8a627e77aaa79fc066507f1f169af07d7e93f9/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=7d8a627e77aaa79fc066507f1f169af07d7e93f9",
        "patch": "@@ -294,6 +294,12 @@ CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& loc\n     return chain.Genesis();\n }\n \n+size_t GetBlockIndexCount()\n+{\n+    LOCK(cs_main);\n+    return mapBlockIndex.size();\n+}\n+\n std::vector<const CBlockIndex*> GetChainTips()\n {\n     LOCK(cs_main);"
      },
      {
        "sha": "fbeadd4b81120a84f71b63edb4122173726758fa",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d8a627e77aaa79fc066507f1f169af07d7e93f9/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d8a627e77aaa79fc066507f1f169af07d7e93f9/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=7d8a627e77aaa79fc066507f1f169af07d7e93f9",
        "patch": "@@ -443,6 +443,9 @@ inline CBlockIndex* LookupBlockIndex(const uint256& hash)\n /** Find the last common block between the parameter chain and a locator. */\n CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator);\n \n+/** Get the number of block index entries. */\n+size_t GetBlockIndexCount();\n+\n /*\n  * The set of chain tips consists of the tip of the active chain plus any stale blocks which do not\n  * have another stale block building off of them."
      }
    ]
  },
  {
    "sha": "e09a90fcd7ff3067b4a430735b36b63c645acbf1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDlhOTBmY2Q3ZmYzMDY3YjRhNDMwNzM1YjM2YjYzYzY0NWFjYmYx",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-05-22T20:47:52Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-05-22T20:47:52Z"
      },
      "message": "validation: Stop exposing mapBlockIndex in header file.",
      "tree": {
        "sha": "2a6dccd49a2445cc560e772c61ed705e22e900dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2a6dccd49a2445cc560e772c61ed705e22e900dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e09a90fcd7ff3067b4a430735b36b63c645acbf1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e09a90fcd7ff3067b4a430735b36b63c645acbf1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e09a90fcd7ff3067b4a430735b36b63c645acbf1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e09a90fcd7ff3067b4a430735b36b63c645acbf1/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7d8a627e77aaa79fc066507f1f169af07d7e93f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d8a627e77aaa79fc066507f1f169af07d7e93f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7d8a627e77aaa79fc066507f1f169af07d7e93f9"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 11,
      "deletions": 10
    },
    "files": [
      {
        "sha": "74299d84df3ef60359f543eddc2bdc019e49dca5",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e09a90fcd7ff3067b4a430735b36b63c645acbf1/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e09a90fcd7ff3067b4a430735b36b63c645acbf1/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=e09a90fcd7ff3067b4a430735b36b63c645acbf1",
        "patch": "@@ -88,8 +88,7 @@ WalletTx MakeWalletTx(CWallet& wallet, const CWalletTx& wtx)\n WalletTxStatus MakeWalletTxStatus(const CWalletTx& wtx)\n {\n     WalletTxStatus result;\n-    auto mi = ::mapBlockIndex.find(wtx.hashBlock);\n-    CBlockIndex* block = mi != ::mapBlockIndex.end() ? mi->second : nullptr;\n+    const CBlockIndex* block = ::LookupBlockIndex(wtx.hashBlock);\n     result.block_height = (block ? block->nHeight : std::numeric_limits<int>::max()),\n     result.blocks_to_maturity = wtx.GetBlocksToMaturity();\n     result.depth_in_main_chain = wtx.GetDepthInMainChain();"
      },
      {
        "sha": "55771e98b9236a2d01f41b1c640f946096c181f1",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e09a90fcd7ff3067b4a430735b36b63c645acbf1/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e09a90fcd7ff3067b4a430735b36b63c645acbf1/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e09a90fcd7ff3067b4a430735b36b63c645acbf1",
        "patch": "@@ -55,6 +55,8 @@\n #define MICRO 0.000001\n #define MILLI 0.001\n \n+typedef std::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n+\n /**\n  * Global state\n  */\n@@ -275,6 +277,13 @@ namespace {\n     std::set<int> setDirtyFileInfo;\n } // anon namespace\n \n+CBlockIndex* LookupBlockIndex(const uint256& hash)\n+{\n+    AssertLockHeld(cs_main);\n+    BlockMap::const_iterator it = mapBlockIndex.find(hash);\n+    return it == mapBlockIndex.end() ? nullptr : it->second;\n+}\n+\n CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator)\n {\n     AssertLockHeld(cs_main);"
      },
      {
        "sha": "6f62c19c55a21b90b27868f8e8428cf185aa6d0c",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e09a90fcd7ff3067b4a430735b36b63c645acbf1/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e09a90fcd7ff3067b4a430735b36b63c645acbf1/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=e09a90fcd7ff3067b4a430735b36b63c645acbf1",
        "patch": "@@ -160,8 +160,6 @@ extern CCriticalSection cs_main;\n extern CBlockPolicyEstimator feeEstimator;\n extern CTxMemPool mempool;\n extern std::atomic_bool g_is_mempool_loaded;\n-typedef std::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n-extern BlockMap& mapBlockIndex;\n extern uint64_t nLastBlockTx;\n extern uint64_t nLastBlockWeight;\n extern const std::string strMessageMagic;\n@@ -433,12 +431,7 @@ class CVerifyDB {\n /** Replay blocks that aren't fully applied to the database. */\n bool ReplayBlocks(const CChainParams& params, CCoinsView* view);\n \n-inline CBlockIndex* LookupBlockIndex(const uint256& hash)\n-{\n-    AssertLockHeld(cs_main);\n-    BlockMap::const_iterator it = mapBlockIndex.find(hash);\n-    return it == mapBlockIndex.end() ? nullptr : it->second;\n-}\n+CBlockIndex* LookupBlockIndex(const uint256& hash);\n \n /** Find the last common block between the parameter chain and a locator. */\n CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator);"
      }
    ]
  },
  {
    "sha": "15f439abdd67b9f40a490270966dde158b95022f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNWY0MzlhYmRkNjdiOWY0MGE0OTAyNzA5NjZkZGUxNThiOTUwMjJm",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-05-22T20:54:52Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-05-22T20:54:52Z"
      },
      "message": "Remove mapBlockIndex from code comments outside of validation.\n\nNow that mapBlockIndex is not publicly exposed by the validation unit,\nother modules should not have references to the internal variable name.",
      "tree": {
        "sha": "3b74a1cb902156e742ef921b735eb94b6acd4181",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b74a1cb902156e742ef921b735eb94b6acd4181"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/15f439abdd67b9f40a490270966dde158b95022f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15f439abdd67b9f40a490270966dde158b95022f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/15f439abdd67b9f40a490270966dde158b95022f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15f439abdd67b9f40a490270966dde158b95022f/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e09a90fcd7ff3067b4a430735b36b63c645acbf1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e09a90fcd7ff3067b4a430735b36b63c645acbf1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e09a90fcd7ff3067b4a430735b36b63c645acbf1"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 5,
      "deletions": 6
    },
    "files": [
      {
        "sha": "f9ffb08803716e37a00cf3f37f620f89c27503dd",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15f439abdd67b9f40a490270966dde158b95022f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15f439abdd67b9f40a490270966dde158b95022f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=15f439abdd67b9f40a490270966dde158b95022f",
        "patch": "@@ -1473,7 +1473,7 @@ bool AppInitMain()\n                 }\n \n                 // At this point we're either in reindex or we've loaded a useful\n-                // block tree into mapBlockIndex!\n+                // block tree into the index!\n \n                 pcoinsdbview.reset(new CCoinsViewDB(nCoinDBCache, false, fReset || fReindexChainState));\n                 pcoinscatcher.reset(new CCoinsViewErrorCatcher(pcoinsdbview.get()));\n@@ -1507,7 +1507,7 @@ bool AppInitMain()\n                 if (!fReset) {\n                     // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n                     // It both disconnects blocks based on chainActive, and drops block data in\n-                    // mapBlockIndex based on lack of available witness data.\n+                    // the index based on lack of available witness data.\n                     uiInterface.InitMessage(_(\"Rewinding blocks...\"));\n                     if (!RewindBlockIndex(chainparams)) {\n                         strLoadError = _(\"Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain\");\n@@ -1663,7 +1663,7 @@ bool AppInitMain()\n     //// debug print\n     {\n         LOCK(cs_main);\n-        LogPrintf(\"mapBlockIndex.size() = %u\\n\", GetBlockIndexCount());\n+        LogPrintf(\"GetBlockIndexCount() = %u\\n\", GetBlockIndexCount());\n         chain_active_height = chainActive.Height();\n     }\n     LogPrintf(\"nBestHeight = %d\\n\", chain_active_height);"
      },
      {
        "sha": "7c43557183068ee93200301c92dfdfc2479572b8",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15f439abdd67b9f40a490270966dde158b95022f/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15f439abdd67b9f40a490270966dde158b95022f/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=15f439abdd67b9f40a490270966dde158b95022f",
        "patch": "@@ -1384,13 +1384,13 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n                 // under BIP 152).\n                 // Here, we try to detect the narrow situation that we have a\n                 // valid block header (ie it was valid at the time the header\n-                // was received, and hence stored in mapBlockIndex) but know the\n+                // was received, and hence stored in the index) but know the\n                 // block is invalid, and that a peer has announced that same\n                 // block as being on its active chain.\n                 // Disconnect the peer in such a situation.\n                 //\n                 // Note: if the header that is invalid was not accepted to our\n-                // mapBlockIndex at all, that may also be grounds for\n+                // block index at all, that may also be grounds for\n                 // disconnecting the peer, as the chain they are on is likely\n                 // to be incompatible. However, there is a circumstance where\n                 // that does not hold: if the header's timestamp is more than"
      },
      {
        "sha": "5132828a83e02f0eb266d920bee06fd11d4749e5",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15f439abdd67b9f40a490270966dde158b95022f/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15f439abdd67b9f40a490270966dde158b95022f/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=15f439abdd67b9f40a490270966dde158b95022f",
        "patch": "@@ -266,7 +266,6 @@ bool CBlockTreeDB::LoadBlockIndexGuts(const Consensus::Params& consensusParams,\n \n     pcursor->Seek(std::make_pair(DB_BLOCK_INDEX, uint256()));\n \n-    // Load mapBlockIndex\n     while (pcursor->Valid()) {\n         boost::this_thread::interruption_point();\n         std::pair<char, uint256> key;"
      }
    ]
  }
]