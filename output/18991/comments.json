[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629728699",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-629728699",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 629728699,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTcyODY5OQ==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-17T01:24:07Z",
    "updated_at": "2020-05-17T01:24:07Z",
    "author_association": "MEMBER",
    "body": "cc @EthanHeilman ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629728699/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629732890",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-629732890",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 629732890,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTczMjg5MA==",
    "user": {
      "login": "tryphe",
      "id": 8435003,
      "node_id": "MDQ6VXNlcjg0MzUwMDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8435003?u=7c63a6209cf9ab35dd71f150c3fe68a4eaef89cf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tryphe",
      "html_url": "https://github.com/tryphe",
      "followers_url": "https://api.github.com/users/tryphe/followers",
      "following_url": "https://api.github.com/users/tryphe/following{/other_user}",
      "gists_url": "https://api.github.com/users/tryphe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tryphe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tryphe/subscriptions",
      "organizations_url": "https://api.github.com/users/tryphe/orgs",
      "repos_url": "https://api.github.com/users/tryphe/repos",
      "events_url": "https://api.github.com/users/tryphe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tryphe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-17T02:24:21Z",
    "updated_at": "2020-05-17T02:25:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK\r\n\r\nSuggestion: Instead of modifying `CConnman` and net.h, add all these changes into `CAddrMan` and add a new function `CAddrMan::GetAddrCache`, so the functionality is local to that class, since there's a lot of similar stuff going on in there.\r\n\r\nOther thoughts: I wonder what implications this might have in advertising new peers, i.e. suppose the 24 hour window rolls over right before your daemon sees a new peer. Nobody would be able to get that peer from you for at least 24 hours. But I'm not sure if that's anything to be worried about, because everyone's 24 hour window will expire at different times, so *some* peers would always have the chance to advertise it soon.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629732890/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629734215",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-629734215",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 629734215,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTczNDIxNQ==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-17T02:44:09Z",
    "updated_at": "2020-05-17T03:11:10Z",
    "author_association": "MEMBER",
    "body": ">Suggestion: Instead of modifying CConnman and net.h, add all these changes into CAddrMan and add a new function CAddrMan::GetAddrCache, so the functionality is local to that class, since there's a lot of similar stuff going on in there.\r\n\r\nTo me it feels like CConman is the perfect place for this cache. It's really something making sense only in the p2p context. We would never use this cache for any local stuff. But let's see what other reviewers think about it?\r\n\r\n> I wonder what implications this might have in advertising new peers, i.e. suppose the 24 hour window rolls over right before your daemon sees a new peer. Nobody would be able to get that peer from you for at least 24 hours. But I'm not sure if that's anything to be worried about, because everyone's 24 hour window will expire at different times, so some peers would always have the chance to advertise it soon.\r\n\r\nTrue, but I think the role of this aspect in advertising new node is minor. Nodes don't send many GETADDRs, and one should be lucky to get that new node randomly.\r\nI think the primary method of advertising new peers is them calling `AdvertiseLocal` and forwarding unsolicited ADDR messages. And that one remains unaffected by this change.\r\n\r\nIn addition, in future I'm planning to suggest doing `AdvertiseLocal` for feeler connections or other random connections, it should help both privacy and better addresss relay.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629734215/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629737483",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-629737483",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 629737483,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTczNzQ4Mw==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-17T03:32:09Z",
    "updated_at": "2020-07-26T20:53:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #17428 (p2p: Try to preserve outbound block-relay-only connections during restart by hebasto)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629737483/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629745569",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-629745569",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 629745569,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTc0NTU2OQ==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-17T05:25:37Z",
    "updated_at": "2020-05-17T05:25:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK: nice simple idea - that's the best kind of idea! :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629745569/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629745947",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-629745947",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 629745947,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTc0NTk0Nw==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-17T05:30:47Z",
    "updated_at": "2020-05-18T04:33:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "Would it make sense to have one cache per network type so that the answer cannot be used to fingerprint a node across network types?\r\n\r\n(I know there are other ways to do such fingerprinting, but no reason to add yet another one :))",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629745947/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629813210",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-629813210",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 629813210,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTgxMzIxMA==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-17T15:09:10Z",
    "updated_at": "2020-05-17T15:11:21Z",
    "author_association": "MEMBER",
    "body": "@practicalswift good observation re: across net fingerprinting!\r\nTo be clear, my PR as it is now doesn't introduce another fingerprinting, but just makes it a little easier for a spy. Previously they would have to make 100 requests and compare across nodes, now they'd have to make just one.\r\n\r\nBut it would be indeed nice to not make it easier, and ideally even mitigate the fingerprinting you mention too.\r\nFor starters, we may have 2 caches: for regular (ipv4/v6) and non-regular (onion) networks, based on where the requester is located. I will put together a commit for that.\r\nIt could be further improved when we integrate [addrv2](https://github.com/bitcoin/bips/blob/master/bip-0155.mediawiki).\r\n\r\nThis would be another big improvement, now cross-node fingerprinting via GETADDR would take days or months, instead of just couple hours at most (a spy currently still have to ask a lot of nodes to map Tor nodes to regular nodes).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629813210/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632053037",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-632053037",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 632053037,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjA1MzAzNw==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-21T12:14:00Z",
    "updated_at": "2020-05-21T12:14:00Z",
    "author_association": "MEMBER",
    "body": "What effect does this have on nodes that explicitly want to fan out onion addresses on the ipv4 net? Do they not exist?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632053037/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632522048",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-632522048",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 632522048,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjUyMjA0OA==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-22T06:50:31Z",
    "updated_at": "2020-05-22T06:50:57Z",
    "author_association": "MEMBER",
    "body": ">What effect does this have on nodes that explicitly want to fan out onion addresses on the ipv4 net? Do they not exist?\r\n\r\nI don't touch that behaviour at all! I introduce two separate caches, but both of them are filled the same way as before. The separation is based on *who requests* (onion or regular), not the type of AddrMan records.\r\n\r\nSo, if this relay was possible before, it still is.\r\nIf we previously *already had unsatisfactory* onion to ipv4 relay, then it remains, or maybe a little worse. But this should be addressed in a separate PR.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632522048/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632567081",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-632567081",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 632567081,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjU2NzA4MQ==",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-22T08:25:14Z",
    "updated_at": "2020-05-22T08:25:14Z",
    "author_association": "MEMBER",
    "body": "With regards to fingerprint, I think we have a more signaling _descriptor_, i.e address, and changing this one would force cleaning the cache, thus it doesn't introduce a more severe one ?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632567081/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633455146",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-633455146",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 633455146,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMzQ1NTE0Ng==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-25T08:41:16Z",
    "updated_at": "2020-05-25T08:41:16Z",
    "author_association": "MEMBER",
    "body": ">On network topology, the change I can foresee is a decrease in freshness of received address and therefore for bootstrapping nodes nudge towards connecting to older nodes ?\r\n\r\nI talk about this [here](https://github.com/bitcoin/bitcoin/pull/18991#discussion_r429776733).\r\n\r\n>With regards to fingerprint, I think we have a more signaling descriptor, i.e address, and changing this one would force cleaning the cache, thus it doesn't introduce a more severe one ?\r\n\r\nCan you elaborate? Not sure I'm following.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633455146/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/636353826",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-636353826",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 636353826,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNjM1MzgyNg==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-30T16:26:56Z",
    "updated_at": "2020-05-30T16:27:03Z",
    "author_association": "MEMBER",
    "body": "After the numerous requests I introduced cache per `Network`. I think we should make it more fine-grained when addrv2 proposal goes through.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/636353826/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/637196285",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-637196285",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 637196285,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNzE5NjI4NQ==",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-02T00:26:12Z",
    "updated_at": "2020-06-02T00:26:12Z",
    "author_association": "MEMBER",
    "body": "> Can you elaborate? Not sure I'm following.\r\n\r\nI was thinking we should have a clear idea of node descriptors leveraged for fingerprinting, like your announced address, your mempool, your chain tip or cached blocks... Thus when you introduce a new one like your cache, if we have an already more severe one like the address, and updating address would also clear the cache it's okay to introduce it.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/637196285/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/637257861",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-637257861",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 637257861,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNzI1Nzg2MQ==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-02T04:03:06Z",
    "updated_at": "2020-06-02T04:03:06Z",
    "author_association": "MEMBER",
    "body": ">I was thinking we should have a clear idea of node descriptors leveraged for fingerprinting, like your announced address, your mempool, your chain tip or cached blocks... \r\n\r\nOh, I see. Well, I would say currently it's the worst: AddrMan is very identifiable and easy to scrape. With caches, it becomes at least very hard to scrape.\r\nAnything beyond would be interesting as a follow-up research, but probably out of scope for this PR. All we need to know that this PR improves privacy for free, and nobody seem to argue with that.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/637257861/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/637762128",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-637762128",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 637762128,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNzc2MjEyOA==",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-02T19:34:45Z",
    "updated_at": "2020-06-02T19:34:45Z",
    "author_association": "MEMBER",
    "body": "> To be clear, my PR as it is now doesn't introduce another fingerprinting, but just makes it a little easier for a spy. Previously they would have to make 100 requests and compare across nodes, now they'd have to make just one.\r\n\r\nFor the record, I think you're wrong: it did introduce a new fingerprinting. Previously, you couldn't realistically fingerprint non-listening peers.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/637762128/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/637907831",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-637907831",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 637907831,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNzkwNzgzMQ==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-03T01:59:35Z",
    "updated_at": "2020-06-03T01:59:35Z",
    "author_association": "MEMBER",
    "body": ">For the record, I think you're wrong: it did introduce a new fingerprinting. Previously, you couldn't realistically fingerprint non-listening peers.\r\n\r\nHow would you fingerprint it after my PR? Nodes [do not](https://github.com/bitcoin/bitcoin/blob/3657aee2d25ce1ffefc6817af3eead7120b1d755/src/net_processing.cpp#L3315) respond to GETADDR from outbound.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/637907831/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643731428",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-643731428",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 643731428,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzczMTQyOA==",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-14T07:42:39Z",
    "updated_at": "2020-06-14T07:42:39Z",
    "author_association": "MEMBER",
    "body": "Seems to have an intermittent test error :(\r\n\r\n```\r\n2020-06-14T07:39:48.638000Z TestFramework (INFO): Initializing test directory /tmp/bitcoin_func_test_rr8f1aik\r\n2020-06-14T07:39:49.959000Z TestFramework (INFO): Create connection that sends and requests addr messages\r\n2020-06-14T07:39:50.061000Z TestFramework (INFO): Fill peer AddrMan with a lot of records\r\n2020-06-14T07:39:50.127000Z TestFramework (INFO): Send many addr requests within short time to receive same response\r\n2020-06-14T07:39:51.105000Z TestFramework (INFO): After time passed, see a new response to addr request\r\n2020-06-14T07:39:51.308000Z TestFramework (ERROR): Assertion failed\r\nTraceback (most recent call last):\r\n  File \"test/functional/test_framework/test_framework.py\", line 112, in main\r\n    self.run_test()\r\n  File \"test/functional/p2p_getaddr_caching.py\", line 103, in run_test\r\n    assert(set(responses[0]) != set(last_addr_receiver.received_addrs))\r\nAssertionError\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643731428/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643769482",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-643769482",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 643769482,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0Mzc2OTQ4Mg==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-14T13:51:35Z",
    "updated_at": "2020-06-14T13:51:35Z",
    "author_association": "MEMBER",
    "body": "@luke-jr good catch, thank you! I think Poisson timer varied too much, I made it more straightforward.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643769482/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643816102",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-643816102",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 643816102,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzgxNjEwMg==",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-14T20:11:02Z",
    "updated_at": "2020-06-14T20:11:41Z",
    "author_association": "MEMBER",
    "body": "Looking at the [older] code, I see two possible causes (and no clear good solutions):\r\n\r\n1. Not enough addresses to ensure the new set is distinct\r\n2. `PoissonNextSend` may be choosing a >3 day delay.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643816102/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643819135",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-643819135",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 643819135,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzgxOTEzNQ==",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-14T20:38:24Z",
    "updated_at": "2020-06-14T20:38:24Z",
    "author_association": "MEMBER",
    "body": "Regarding the new version, you've switched from a 60+% chance of <24h, to only times between 24h-27h. I guess that's fine, but might be more fingerprintable?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643819135/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643907638",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-643907638",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 643907638,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzkwNzYzOA==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-15T05:17:47Z",
    "updated_at": "2020-06-15T05:34:56Z",
    "author_association": "MEMBER",
    "body": "@luke-jr I'm pretty sure the problem was (2), because I did a bunch of experiments (like ran tests 1,000 times before and after my recent force push).\r\n\r\nRegarding the interval, I think we should just focus average ~24h (my last commit has sloppy 25.5h, making it 24h now) as we discussed before.\r\n\r\nA. Not sure why Poisson(24h) would have a 60% chance of <24h? (less important)\r\nB. Not sure why a high chance of shorter intervals make it less fingerprintable (I think shorter actually makes it more fingerprintable cuz attacker can collect their data faster)? (more important)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643907638/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/645207913",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-645207913",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 645207913,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTIwNzkxMw==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-17T07:38:05Z",
    "updated_at": "2020-06-17T07:38:05Z",
    "author_association": "MEMBER",
    "body": "Addressed feedback from @mzumsande: added PF_ADDR to the fuzzer and fixed the comment.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/645207913/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/645953952",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-645953952",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 645953952,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTk1Mzk1Mg==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-18T11:22:05Z",
    "updated_at": "2020-06-18T11:22:05Z",
    "author_association": "MEMBER",
    "body": "> I don't touch that behaviour at all! I introduce two separate caches, but both of them are filled the same way as before. The separation is based on who requests (onion or regular), not the type of AddrMan records.\r\n\r\nJust a question: How do you recognize an incoming ONION connection? They look like incoming IPv4 connections, that tend to come from `127.0.0.1`. I think until #8973 is implemented, which would use a dedicated incoming P2P port for connections coming from Tor, it's not possible to reliably distinguish them. Though maybe \"comes from localhost\" is good enough in practical cases, I don't know.\r\n\r\nBut as I see you currently use ` pfrom.addr.GetNetwork();` which will return IPv4 in this case?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/645953952/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/645976349",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-645976349",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 645976349,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTk3NjM0OQ==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-18T12:11:03Z",
    "updated_at": "2020-06-18T12:11:03Z",
    "author_association": "MEMBER",
    "body": "@laanwj good point! I actually don't have much hands-on experience with Tor inbounds.\r\nI can't verify what you say atm, but yeah, *if* they look like 127.0.0.1, they will be grouped with \"comes from localhost\" until #8973.\r\n\r\nI think it's fine to merge it as-is, and then when #8973 comes the grouping can be improved.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/645976349/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/649457045",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-649457045",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 649457045,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0OTQ1NzA0NQ==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-25T10:34:43Z",
    "updated_at": "2020-06-25T10:34:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "I am not sure I understand how big the privacy gain is from this. Couldn't the spy just take the ~1000 records we send them and then send all of them a GETADDR and still get a very good view of the topology of the network within a few minutes? Granted, they may still be missing a few of our connections after that. But then maybe a simpler approach would be to keep a few connections 'secret' and never announce them?\r\n\r\nAlso, is it generally considered bad if a node wants to know about as many peers as possible? If I was a merchant or a miner/pool I might want to optimize my network view for non-malicious reasons if there is any (even very small) indication that I might make more money or be a little more secure.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/649457045/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/649470276",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-649470276",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 649470276,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0OTQ3MDI3Ng==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-25T11:03:13Z",
    "updated_at": "2020-06-25T11:03:28Z",
    "author_association": "MEMBER",
    "body": ">Couldn't the spy just take the ~1000 records we send them and then send all of them a GETADDR and still get a very good view of the topology of the network within a few minutes?\r\n\r\nI don't know how to exploit what you're describing :) Like, yeah, you send them all a GETADDR, but then what?\r\n\r\nI'm talking about a different set of attacks here. One example is mapping two virtual identities (Tor and ipv4) of the same node together. If you can scrape all their AddrMan records and compare timings, it's very easy to tell if they're the same physical node. After my change, it's much harder, because two sets of records may not overlap at all.\r\nI have other attacks in mind, per which one can tell direct peers of a node by looking at *all* AddrMan records of a victim.\r\n\r\n>Also, is it generally considered bad if a node wants to know about as many peers as possible?\r\n\r\nWell, if you want more security, you can query 100 random nodes x 1000 addrs and get the same full AddrMan list :)\r\nThis is by all means better than relying on scraping full AddrMans from first 8 peers you have.\r\nMaybe someone can implement this, but I'm not convinced it's very useful :) Getting 8 x 1000 addrs at the beginning and catching up via other means later seems good enough.\r\nFurthermore, if one of your 8 peers fills your AddrMan with trash, you're in trouble...",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/649470276/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650795822",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-650795822",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 650795822,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MDc5NTgyMg==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-28T17:16:30Z",
    "updated_at": "2020-06-28T17:18:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I don't know how to exploit what you're describing :) Like, yeah, you send them all a GETADDR, but then what?\r\n> \r\n> I'm talking about a different set of attacks here. One example is mapping two virtual identities (Tor and ipv4) of the same node together. If you can scrape all their AddrMan records and compare timings, it's very easy to tell if they're the same physical node. After my change, it's much harder, because two sets of records may not overlap at all.\r\n> I have other attacks in mind, per which one can tell direct peers of a node by looking at _all_ AddrMan records of a victim.\r\n\r\nI was going by the original description which did not mention decorrelation between networks, I think. So I took that as not the primary goal of this PR. I do see network decorrelation as an improvement. I meant the other attacks that could be launched when an attacker has all the AddrMan records of the victim. Maybe I have a wrong sense of the typical network view of a node and it is more incomplete than I imagine but my idea was that if the victim has a pretty complete view of the network then launching the same attack on the network that you can collect from the other peers should not be that much different. Sure, it would be a bit less efficient but that was basically my question: how much more protected is my privacy when the attacks are launched with the complete set of the victim's peers vs. launching the same attack with a set of peers collected from the whole network.\r\n\r\nBased on that it may depend if there are other solutions that could be compared with this one: For example, what if nodes run getaddr more often so that everyone has a mostly complete view of the network, then fingerprinting is hard because everyone's network view is the same. Of course, the downside is more traffic. Another solution could be keeping a small set of peers secret. I am not sure if that is better, I would just like to discuss it. :)\r\n\r\n> Well, if you want more security, you can query 100 random nodes x 1000 addrs and get the same full AddrMan list :)\r\n> This is by all means better than relying on scraping full AddrMans from first 8 peers you have.\r\n> Maybe someone can implement this, but I'm not convinced it's very useful :) Getting 8 x 1000 addrs at the beginning and catching up via other means later seems good enough.\r\n> Furthermore, if one of your 8 peers fills your AddrMan with trash, you're in trouble...\r\n\r\nTrue, it would make sense to ask more peers than just scraping one completely. I guess that was more of a devil's advocate question :) I just wanted to mention that I think there is a small chance that some network participant does call getaddr multiple times without malicious intentions.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650795822/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650941757",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-650941757",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 650941757,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MDk0MTc1Nw==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-29T06:10:35Z",
    "updated_at": "2020-06-30T06:41:39Z",
    "author_association": "MEMBER",
    "body": ">how much more protected is my privacy when the attacks are launched with the complete set of the victim's peers vs. launching the same attack with a set of peers collected from the whole network.\r\n\r\nI see the confusion! In my opinion (and it seems to be the threat model other people share), just a *list* of all nodes in the network (or all nodes a victim has) is not private info. Sure, it does help attacks too, but I doubt it's practical to keep this list secret overtime.\r\n\r\nThis is what my original post says:\r\n>Then, with some extra protocol knowledge a spy can infer the direct peers of the victim, and other topological stuff.\r\n\r\nWhat is dangerous is exposing immediate peers of victims in the network. And to learn that, a spy would use somewhat more sophisticated observations based on the AddrMan. For example, constantly scrape it, detect a new node N in the list of a given target node T, and make a good guess that N just connected to T (because other nodes' AddrMans doesn't contain N).\r\n\r\nThis is just one new example of an attack I never mentioned before! I have a couple of them in mind, I was just trying to avoid going in detail... \r\nSo in this attack example \"keeping a small set of peers secret\" won't help. Better AddrMan sync will help better, but still not as good as caching (and yeah, bandwidth costs).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650941757/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/651312198",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-651312198",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 651312198,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MTMxMjE5OA==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-29T19:24:10Z",
    "updated_at": "2020-06-29T19:24:10Z",
    "author_association": "MEMBER",
    "body": "ACK 52d22a3c235bfed8a772b7cccbe470efdfa10291",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/651312198/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/651497389",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-651497389",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 651497389,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MTQ5NzM4OQ==",
    "user": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-30T03:07:10Z",
    "updated_at": "2020-06-30T03:07:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/651497389/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/652428229",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-652428229",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 652428229,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MjQyODIyOQ==",
    "user": {
      "login": "pinheadmz",
      "id": 2084648,
      "node_id": "MDQ6VXNlcjIwODQ2NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2084648?u=8b3acfaf5f6b5d51d1a3ee1a427e4489e9874bb1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pinheadmz",
      "html_url": "https://github.com/pinheadmz",
      "followers_url": "https://api.github.com/users/pinheadmz/followers",
      "following_url": "https://api.github.com/users/pinheadmz/following{/other_user}",
      "gists_url": "https://api.github.com/users/pinheadmz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pinheadmz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
      "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
      "repos_url": "https://api.github.com/users/pinheadmz/repos",
      "events_url": "https://api.github.com/users/pinheadmz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-01T13:46:11Z",
    "updated_at": "2020-07-01T13:46:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "Dunno if this has been mentioned already but if you rebase to include https://github.com/bitcoin/bitcoin/pull/19192 you can add a `help` description of the new net permission `addr`.\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/bb588669f9e84011969b67f807f12c3480489955/src/net_permissions.cpp#L11-L17",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/652428229/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/652441451",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-652441451",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 652441451,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MjQ0MTQ1MQ==",
    "user": {
      "login": "willcl-ark",
      "id": 6606587,
      "node_id": "MDQ6VXNlcjY2MDY1ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6606587?u=6e6c22073eae8b8644ed56ef8db094148b558b82&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willcl-ark",
      "html_url": "https://github.com/willcl-ark",
      "followers_url": "https://api.github.com/users/willcl-ark/followers",
      "following_url": "https://api.github.com/users/willcl-ark/following{/other_user}",
      "gists_url": "https://api.github.com/users/willcl-ark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willcl-ark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
      "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
      "repos_url": "https://api.github.com/users/willcl-ark/repos",
      "events_url": "https://api.github.com/users/willcl-ark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-01T14:09:49Z",
    "updated_at": "2020-07-01T14:09:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "tACK.\r\n\r\nPR passed tests with MacOS 10.15 on both this branch and cherry-picked on top of master at 2af56d6d5c387c3208d3d5aae8d428a3d610446f.\r\n\r\nI like the general approach of the PR: there seems like little danger associated with a rolling ADDR cache and certainly some possible privacy upside if the assumptions in the first post (e.g. being able to infer direct peers) are correct.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/652441451/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/652473133",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-652473133",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 652473133,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MjQ3MzEzMw==",
    "user": {
      "login": "rajarshimaitra",
      "id": 36541669,
      "node_id": "MDQ6VXNlcjM2NTQxNjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36541669?u=3bb306a343c601258749dbbd03dbe66d0e9d82b4&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rajarshimaitra",
      "html_url": "https://github.com/rajarshimaitra",
      "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
      "following_url": "https://api.github.com/users/rajarshimaitra/following{/other_user}",
      "gists_url": "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
      "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
      "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
      "events_url": "https://api.github.com/users/rajarshimaitra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-01T15:03:52Z",
    "updated_at": "2020-07-01T15:08:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "tACK. \r\nCompiled and tests passing. Need to think more on attack surfaces but so far with the above discussion from more competent people, it seems to be fine. And the gains are rational.\r\nSo far my only thought is there is a replication of addresses happening in the cache as per network types. How much is the memory of consumption for this cache? It seems to be at least 3 times (ipv4/ipv6/local+tor) of whatever it was before? Is there any measurement on the number?    ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/652473133/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/652539122",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-652539122",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 652539122,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MjUzOTEyMg==",
    "user": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?u=84369c78e74365314bd9806230ab56f2c1585fb4&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-01T17:03:43Z",
    "updated_at": "2020-07-01T17:03:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "ACK 52d22a3c235bfed8a772b7cccbe470efdfa10291\r\n\r\nReviewed, tested.\r\n\r\nWithout checking, I'm not worried about the memory usage for `m_addr_response_caches`.\r\n\r\nI need to look further at the justification of 24h and 1000 cached addresses.\r\n\r\nI think this change may have larger (positive) consequences than described in the description, though I would like to make that more precise.\r\n\r\nSome interesting, if slightly outdated papers on this topic:\r\n* <https://pub.tik.ee.ethz.ch/students/2015-FS/BA-2015-10.pdf>\r\n* <https://www.cs.umd.edu/projects/coinscope/coinscope.pdf>\r\n* <https://arxiv.org/pdf/1812.00942.pdf>\r\n* <https://www.researchgate.net/publication/329299820_BTCmap_Mapping_Bitcoin_Peer-to-Peer_Network_Topology>\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/652539122/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/652574507",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-652574507",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 652574507,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MjU3NDUwNw==",
    "user": {
      "login": "Emzy",
      "id": 1223908,
      "node_id": "MDQ6VXNlcjEyMjM5MDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1223908?u=66477849292f33a9134f23b8d8000f0492d591b3&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Emzy",
      "html_url": "https://github.com/Emzy",
      "followers_url": "https://api.github.com/users/Emzy/followers",
      "following_url": "https://api.github.com/users/Emzy/following{/other_user}",
      "gists_url": "https://api.github.com/users/Emzy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Emzy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Emzy/subscriptions",
      "organizations_url": "https://api.github.com/users/Emzy/orgs",
      "repos_url": "https://api.github.com/users/Emzy/repos",
      "events_url": "https://api.github.com/users/Emzy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Emzy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-01T18:19:02Z",
    "updated_at": "2020-07-01T18:24:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "My concern would be nodes that change there IP address often. \r\nFor example in Germany it is often the case that the ISP will give you every 24 hours a new IPv4 address and a new IPv6 prefix.  \r\n\r\nI think these nodes would get less incoming connections, because it will take between 0-24 hours to get their new address in the P2P network and also to DNS seeds.\r\n\r\nIt could be that this is not relevant, because dial in users may most of the time don't allow incoming connections.\r\nBut it will further disencourage running a node at home.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/652574507/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658636295",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-658636295",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 658636295,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODYzNjI5NQ==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-15T08:48:36Z",
    "updated_at": "2020-07-15T08:48:36Z",
    "author_association": "MEMBER",
    "body": "I believe I resolved all the outstanding feedback (some things be better in a follow-up), looking for code acks now :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658636295/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658671625",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-658671625",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 658671625,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODY3MTYyNQ==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-15T09:54:54Z",
    "updated_at": "2020-07-15T09:54:54Z",
    "author_association": "MEMBER",
    "body": "netbase_tests/netpermissions_test is failing: check strings.size() == 6U has failed [7 != 6]",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658671625/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/661980580",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-661980580",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 661980580,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTk4MDU4MA==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-21T16:55:25Z",
    "updated_at": "2020-07-21T16:55:25Z",
    "author_association": "MEMBER",
    "body": "Changes look good but p2p_permissions.py seems to be broken.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/661980580/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/662912718",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-662912718",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 662912718,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MjkxMjcxOA==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-23T09:38:37Z",
    "updated_at": "2020-07-23T09:38:37Z",
    "author_association": "MEMBER",
    "body": "utACK 130655a09054e7fe4388a4383ed320f4ce7de103",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/662912718/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/663137439",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-663137439",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 663137439,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MzEzNzQzOQ==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-23T17:34:31Z",
    "updated_at": "2020-07-23T17:34:31Z",
    "author_association": "MEMBER",
    "body": "@naumenkogs - I have a branch at https://github.com/jnewbery/bitcoin/tree/2020-07-addrman-get that allows addresses to be added to AddrMan manually over RPC. With that branch, I'm very easily able to add thousands of addresses, which would make it possible to test the edge conditions of this PR. It conflicts with this branch, so I'm not planning to open it as a PR yet, but perhaps you'd like to take it after this gets merged.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/663137439/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/663394972",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-663394972",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 663394972,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MzM5NDk3Mg==",
    "user": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?u=7297e8aaf9188c0cb98bc549a8a02a1dc8d59e4c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-24T07:53:06Z",
    "updated_at": "2020-07-24T07:53:06Z",
    "author_association": "MEMBER",
    "body": "Concept ACK.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/663394972/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/663584778",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-663584778",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 663584778,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MzU4NDc3OA==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-24T15:06:04Z",
    "updated_at": "2020-07-24T15:06:04Z",
    "author_association": "MEMBER",
    "body": "Addressed nits suggested by @MarcoFalke ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/663584778/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/663803431",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-663803431",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 663803431,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MzgwMzQzMQ==",
    "user": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?u=7297e8aaf9188c0cb98bc549a8a02a1dc8d59e4c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-25T03:49:42Z",
    "updated_at": "2020-07-25T03:49:42Z",
    "author_association": "MEMBER",
    "body": "@naumenkogs @sipa \r\nWould these changes affect the reference [bitcoin-seeder](https://github.com/sipa/bitcoin-seeder/blob/529a667f30c799d2281f862570df9d34e50899f0/bitcoin.cpp#L92)?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/663803431/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/663818659",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-663818659",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 663818659,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MzgxODY1OQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-25T06:44:52Z",
    "updated_at": "2020-07-25T06:44:52Z",
    "author_association": "MEMBER",
    "body": "re-run ci",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/663818659/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/664228902",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-664228902",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 664228902,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDIyODkwMg==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-27T09:14:42Z",
    "updated_at": "2020-07-27T09:14:53Z",
    "author_association": "MEMBER",
    "body": "@hebasto I think there might be a very limited effect: seeders might be getting/serving slightly outdated timestamps.\r\nBut this effect is very limited, because the cache lifetime is only 24h. Addrs are considered to be non-terrible (see `isTerrible`) if they're less than 30 days old. It was somewhat discussed at the [review club](https://bitcoincore.reviews/18991.html), sipa was also there.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/664228902/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/664252772",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-664252772",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 664252772,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDI1Mjc3Mg==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-27T09:59:46Z",
    "updated_at": "2020-07-27T09:59:46Z",
    "author_association": "MEMBER",
    "body": "@naumenkogs My unresolved worry with this change is expressed in the second review club log [here](https://bitcoincore.reviews/18991.html#l-347), lines 347-370. WDYT?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/664252772/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/664298482",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-664298482",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 664298482,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDI5ODQ4Mg==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-27T10:39:29Z",
    "updated_at": "2020-07-27T10:39:29Z",
    "author_association": "MEMBER",
    "body": "@jonatack Since we currently don't have a good way to measure all those AddrMan properties and have a high-level \"roadmap\" of moving forward, I think we should focus on the outstanding problems.\r\n\r\nThere is a problem with AddrMan privacy. This PR clearly improves upon that direction. How does it affect other properties? Not much, the only consequence is lists being _a bit more outdated_.\r\nI have plans to improve on this property in future. For example, I'm thinking of self-announcements to feelers. Also, see #17194.\r\n\r\nIf you see the current state of AddrMan as a trade-off, I think it's inadequate: the privacy loss is too high/dangerous, and the benefit w.r.t. freshness etc. is too low.\r\n\r\nI think this is sufficient to merge this PR.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/664298482/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/664318166",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-664318166",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 664318166,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDMxODE2Ng==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-27T10:53:25Z",
    "updated_at": "2020-07-27T10:53:25Z",
    "author_association": "MEMBER",
    "body": "I'm onboard with improved privacy; what I'm still working out are the consequences of adversely affecting discovery of newly online peers or ones who change IP address frequently. The former case is one I'm observing closely nowadays using a custom peer connections dashboard WRT notably peer discovery and inbounds evictions. Do you have a branch for the self announcements to feelers? ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/664318166/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/664328884",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-664328884",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 664328884,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDMyODg4NA==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-27T11:01:21Z",
    "updated_at": "2020-07-27T11:01:21Z",
    "author_association": "MEMBER",
    "body": "@jonatack no, I don't have that branch, it's only an idea right now. \r\n\r\nSo your concern is that some peers would be easier deprioritized and maybe evicted more often?\r\nYeah, it's a valid one, but again:\r\n- I don't think this PR makes it much worse. There are probably easy ways to affect that stuff already.\r\n- I don't think the publicity of AddrMan is the right solution to the problem you're describing anyways.\r\n\r\nI'm interested in exploring this problem more, but I think it can be done separately.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/664328884/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665141756",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-665141756",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 665141756,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTE0MTc1Ng==",
    "user": {
      "login": "EthanHeilman",
      "id": 274814,
      "node_id": "MDQ6VXNlcjI3NDgxNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EthanHeilman",
      "html_url": "https://github.com/EthanHeilman",
      "followers_url": "https://api.github.com/users/EthanHeilman/followers",
      "following_url": "https://api.github.com/users/EthanHeilman/following{/other_user}",
      "gists_url": "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
      "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
      "repos_url": "https://api.github.com/users/EthanHeilman/repos",
      "events_url": "https://api.github.com/users/EthanHeilman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-28T16:29:09Z",
    "updated_at": "2020-07-28T16:29:09Z",
    "author_association": "CONTRIBUTOR",
    "body": ">I'm onboard with improved privacy; what I'm still working out are the consequences of adversely affecting discovery of newly online peers or ones who change IP address frequently.\r\n\r\nCan we build some sort of simulation to test what the effects of this are? If getaddr is the main way that new IPs are propagated, then this would seriously hurt new IP propagation. If, as I suspect, getadddr isn't particularly important to propagate new IPs then this makes some sense.\r\n\r\n>With regards to fingerprint, I think we have a more signaling descriptor, i.e address, and changing this one would force cleaning the cache, thus it doesn't introduce a more severe one ?\r\n\r\n@ariard  raises a really important issue here. If the cache value returned is always the same in a 24 hour period then within that 24 hour period I can always re-identify a node by seeing if it returned the exact same 1000 addresses. With out this PR I would have to make a few hundred connections to re-identify a node. Maybe this fingerprinting attack isn't a concern due to how bitcoin is used?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665141756/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665496828",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-665496828",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 665496828,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTQ5NjgyOA==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-29T07:48:36Z",
    "updated_at": "2020-07-29T07:48:36Z",
    "author_association": "MEMBER",
    "body": ">With out this PR I would have to make a few hundred connections to re-identify a node. Maybe this fingerprinting attack isn't a concern due to how bitcoin is used?\r\n\r\n1. True, but I wouldn't rely on this \"protection\" at all, because creating 100 connections (from the same source IP) is easy.\r\n2. Your argument also reminded me that this PR protects from mapping IP<->Tor identities of the same node as per 100-connections method you mention. After this PR, there will be separate caches for every net, so an attacker would have to spend weeks to achieve the same precision.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665496828/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665714546",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-665714546",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 665714546,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTcxNDU0Ng==",
    "user": {
      "login": "EthanHeilman",
      "id": 274814,
      "node_id": "MDQ6VXNlcjI3NDgxNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EthanHeilman",
      "html_url": "https://github.com/EthanHeilman",
      "followers_url": "https://api.github.com/users/EthanHeilman/followers",
      "following_url": "https://api.github.com/users/EthanHeilman/following{/other_user}",
      "gists_url": "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
      "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
      "repos_url": "https://api.github.com/users/EthanHeilman/repos",
      "events_url": "https://api.github.com/users/EthanHeilman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-29T14:56:16Z",
    "updated_at": "2020-07-29T14:56:16Z",
    "author_association": "CONTRIBUTOR",
    "body": ">After this PR, there will be separate caches for every net, so an attacker would have to spend weeks to achieve the same precision.\r\n\r\nThat seems like a pretty big win, although do we know how private Bitcoin nodes on tor are?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665714546/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665727767",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-665727767",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 665727767,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTcyNzc2Nw==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-29T15:18:19Z",
    "updated_at": "2020-07-29T15:18:19Z",
    "author_association": "MEMBER",
    "body": ">That seems like a pretty big win, although do we know how private Bitcoin nodes on tor are?\r\n\r\nThere is a decent number of them (couple thousand listening all the time, and more non-listening I guess), but I think we don't really know how many of them configured everything properly :)\r\n\r\nThere are maybe still a couple places in the p2p protocol where a spy can correlate ip<->Tor (need more research here).\r\nTor nodes are probably prone to sybil attacks too (even more than regular nodes), which potentially enables even worse spying.\r\n\r\nNonetheless I think fixing this issue is helpful for them, although this is not the primary motivation for this change.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665727767/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/666316077",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-666316077",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 666316077,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NjMxNjA3Nw==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-30T11:43:52Z",
    "updated_at": "2020-07-30T11:43:52Z",
    "author_association": "MEMBER",
    "body": "reACK 3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/666316077/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/667853698",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-667853698",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 667853698,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Nzg1MzY5OA==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-03T07:21:35Z",
    "updated_at": "2020-08-03T07:21:35Z",
    "author_association": "MEMBER",
    "body": "Thanks for the reviews!\r\nIt's currently Code review ACKs from ariard, jnewbery and promag on the up-to-date commit, several of Concept ACKs before, and several tested ACKs on the version (before minor refactoring) we discussed at the review club.\r\n\r\nThe latest suggestions seem to be couple nits and discussion points, so for the sake of review efficiency let's not address them for now :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/667853698/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/668004207",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-668004207",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 668004207,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2ODAwNDIwNw==",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?u=4a9af998e1a560b3f49c3827f453e1bcbe6a5cfb&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-03T12:49:19Z",
    "updated_at": "2020-08-03T12:49:19Z",
    "author_association": "MEMBER",
    "body": "Don't forget https://github.com/bitcoin/bitcoin/pull/18991#discussion_r464082065, seems it wasn't previously discussed.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/668004207/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/668012028",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-668012028",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 668012028,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2ODAxMjAyOA==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-03T13:06:38Z",
    "updated_at": "2020-08-03T13:06:38Z",
    "author_association": "MEMBER",
    "body": "> Don't forget #18991 (comment), seems it wasn't previously discussed.\r\n\r\nSorry, hadn't noticed this before merging. As it's a question, I think discussion can simply continue here, and if further changes are necessary it can be in a follow-up PR?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/668012028/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/668219345",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-668219345",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 668219345,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2ODIxOTM0NQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-03T20:13:10Z",
    "updated_at": "2020-08-03T20:13:10Z",
    "author_association": "MEMBER",
    "body": "Random thought: there is a (rather uncommon, I suspect) scenario in which this definitely worsens node identity discoverability: if a peer has multiple listening addresses associated with one network. I don't think this is a big concern, but it's also fairly easy to address: make the cache map not indexed by just Network, but also add the local socket address (see `getsockname`).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/668219345/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/668425062",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#issuecomment-668425062",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18991",
    "id": 668425062,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2ODQyNTA2Mg==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-04T07:16:19Z",
    "updated_at": "2020-08-04T07:16:19Z",
    "author_association": "MEMBER",
    "body": "> scenario in which this definitely worsens node identity discoverability: if a peer has multiple listening addresses associated with one network\r\n\r\nYou probably mean *makes it easier to discover [...]*. True, although again, it was already trivial (just make 100 GETADDR even from the same host) and see timestamps, so I won't say this degradation is a big deal at all. I believe @ariard raised this concern somewhere above.\r\n\r\nBut yeah, it would be great to address this issue... Then it would be another good improvement over the pre-cache code. Seems like a good candidate for inclusion in a follow-up.\r\n\r\n@sipa should we bound number of caches in this case? If `getsockname` for some reason returns too many values we shouldn't blow up memory. Just not sure how valid this concern is. Alternative is just simple \"new cache every time\"",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/668425062/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429080574",
    "pull_request_review_id": 416695243,
    "id": 429080574,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4MDU3NA==",
    "diff_hunk": "@@ -2468,15 +2468,21 @@ void CConnman::AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddres\n     addrman.Add(vAddr, addrFrom, nTimePenalty);\n }\n \n-std::vector<CAddress> CConnman::GetAddresses(bool from_cache)\n+std::vector<CAddress> CConnman::GetAddresses(AddrCacheNetwork use_cache)\n {\n-    if (from_cache) {\n+    if (use_cache != ADDR_CACHE_NONE) {\n+        CachedAddrResponse* cache;\n+        if (use_cache == ADDR_CACHE_REGULAR) {\n+            cache = &m_cached_addr_response_regular;\n+        } else {\n+            cache = &m_cached_addr_response_other;\n+        }\n         const std::chrono::microseconds current_time = GetTime<std::chrono::microseconds>();\n-        if (m_update_addr_response < current_time) {\n-            m_addrs_response_cache = addrman.GetAddr();\n-            m_update_addr_response = PoissonNextSend(current_time, AVG_ADDRESS_RESPONSE_UPDATE_INTERVAL);\n+        if (cache->m_update_addr_response < current_time) {\n+            cache->m_addrs_response_cache = addrman.GetAddr();\n+            cache->m_update_addr_response = PoissonNextSend(current_time, AVG_ADDRESS_RESPONSE_UPDATE_INTERVAL);\n         }\n-        return m_addrs_response_cache;\n+        return cache->m_addrs_response_cache;\n     } else {\n         return addrman.GetAddr();",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 26,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "7c72f28e3d9d07916b30bbb64022bb6bb51e9c3e",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "A way to simplify code IMO:\r\n\r\n```\r\nif (use_cache == ADDR_CACHE_NONE) {\r\n    return addrman.GetAddr();\r\n}\r\nCachedAddrResponse* cache;\r\nif (use_cache == ADDR_CACHE_REGULAR) {\r\n     cache = &m_cached_addr_response_regular;\r\n} else {\r\n     cache = &m_cached_addr_response_other;\r\n}\r\nconst std::chrono::microseconds current_time = GetTime<std::chrono::microseconds>();\r\nif (cache->m_update_addr_response < current_time) {\r\n    cache->m_addrs_response_cache = addrman.GetAddr();\r\n    cache->m_update_addr_response = PoissonNextSend(current_time, AVG_ADDRESS_RESPONSE_UPDATE_INTERVAL);\r\n}\r\nreturn cache->m_addrs_response_cache;\r\n```        \r\n ",
    "created_at": "2020-05-22T07:12:54Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r429080574",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429080574"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r429080574"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429080574/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2541,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429091118",
    "pull_request_review_id": 416695243,
    "id": 429091118,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA5MTExOA==",
    "diff_hunk": "@@ -416,6 +420,10 @@ class CConnman\n     std::atomic<NodeId> nLastNodeId{0};\n     unsigned int nPrevNodeCount{0};\n \n+    // Cache responses to addr requests to minimize privacy leak.",
    "path": "src/net.h",
    "position": null,
    "original_position": 24,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "0bbcf38b5b096a3fd395a53c51a2aca1c9ef9355",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Unless you think it's too serious for now, I would comment the full privacy leak.",
    "created_at": "2020-05-22T07:39:17Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r429091118",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429091118"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r429091118"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429091118/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 427,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429095360",
    "pull_request_review_id": 416695243,
    "id": 429095360,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA5NTM2MA==",
    "diff_hunk": "@@ -64,6 +64,8 @@ static const int MAX_ADDNODE_CONNECTIONS = 8;\n static const int MAX_BLOCKS_ONLY_CONNECTIONS = 2;\n /** Maximum number of feeler connections */\n static const int MAX_FEELER_CONNECTIONS = 1;\n+/** Average delay between updating address responses */\n+static constexpr std::chrono::hours AVG_ADDRESS_RESPONSE_UPDATE_INTERVAL{24};",
    "path": "src/net.h",
    "position": null,
    "original_position": 5,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "0bbcf38b5b096a3fd395a53c51a2aca1c9ef9355",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "What's your rational for coming with 24h in average ? You announce this fix prevent tracking real-time changes in local node topology. I think to be effective you need to define real-time further with regards to expected topology changes, which for outbound peers is only stale tip or them falling offline ?\r\n\r\nOr say differently does natural outbound full-relay peer rotation is faster that 24 hours to rotate a _reasonable_ subset before next spy query ?",
    "created_at": "2020-05-22T07:48:46Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r429095360",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429095360"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r429095360"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429095360/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 69,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429100181",
    "pull_request_review_id": 416695243,
    "id": 429100181,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEwMDE4MQ==",
    "diff_hunk": "@@ -253,9 +253,17 @@ class CConnman\n     void SetServices(const CService &addr, ServiceFlags nServices);\n     void MarkAddressGood(const CAddress& addr);\n     void AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddress& addrFrom, int64_t nTimePenalty = 0);\n+\n+    // Addr responses stored in different caches per network prevent\n+    // cross-network node identity.",
    "path": "src/net.h",
    "position": null,
    "original_position": 6,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "7c72f28e3d9d07916b30bbb64022bb6bb51e9c3e",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Please explain how cross-network node identity would operate, i.e a spy connecting first on regular, querying cache, reconnecting on other, querying again cache and testing for equality.\r\n\r\nGoing further, shouldn't you cache based on address announced ? Isn't this a fingerprint for multi-homed nodes ?",
    "created_at": "2020-05-22T07:59:39Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r429100181",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429100181"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r429100181"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429100181/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 258,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429760098",
    "pull_request_review_id": 417491900,
    "id": 429760098,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc2MDA5OA==",
    "diff_hunk": "@@ -2468,15 +2468,21 @@ void CConnman::AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddres\n     addrman.Add(vAddr, addrFrom, nTimePenalty);\n }\n \n-std::vector<CAddress> CConnman::GetAddresses(bool from_cache)\n+std::vector<CAddress> CConnman::GetAddresses(AddrCacheNetwork use_cache)\n {\n-    if (from_cache) {\n+    if (use_cache != ADDR_CACHE_NONE) {\n+        CachedAddrResponse* cache;\n+        if (use_cache == ADDR_CACHE_REGULAR) {\n+            cache = &m_cached_addr_response_regular;\n+        } else {\n+            cache = &m_cached_addr_response_other;\n+        }\n         const std::chrono::microseconds current_time = GetTime<std::chrono::microseconds>();\n-        if (m_update_addr_response < current_time) {\n-            m_addrs_response_cache = addrman.GetAddr();\n-            m_update_addr_response = PoissonNextSend(current_time, AVG_ADDRESS_RESPONSE_UPDATE_INTERVAL);\n+        if (cache->m_update_addr_response < current_time) {\n+            cache->m_addrs_response_cache = addrman.GetAddr();\n+            cache->m_update_addr_response = PoissonNextSend(current_time, AVG_ADDRESS_RESPONSE_UPDATE_INTERVAL);\n         }\n-        return m_addrs_response_cache;\n+        return cache->m_addrs_response_cache;\n     } else {\n         return addrman.GetAddr();",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 26,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "7c72f28e3d9d07916b30bbb64022bb6bb51e9c3e",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Agree.",
    "created_at": "2020-05-25T06:52:30Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r429760098",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429760098"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r429760098"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429760098/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2541,
    "side": "RIGHT",
    "in_reply_to_id": 429080574
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429776733",
    "pull_request_review_id": 417513094,
    "id": 429776733,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3NjczMw==",
    "diff_hunk": "@@ -64,6 +64,8 @@ static const int MAX_ADDNODE_CONNECTIONS = 8;\n static const int MAX_BLOCKS_ONLY_CONNECTIONS = 2;\n /** Maximum number of feeler connections */\n static const int MAX_FEELER_CONNECTIONS = 1;\n+/** Average delay between updating address responses */\n+static constexpr std::chrono::hours AVG_ADDRESS_RESPONSE_UPDATE_INTERVAL{24};",
    "path": "src/net.h",
    "position": null,
    "original_position": 5,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "0bbcf38b5b096a3fd395a53c51a2aca1c9ef9355",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I would say 24h is pretty arbitrary, but reasonable. Let me explain.\r\n\r\nUpper bound:\r\nShouldn't be too long so that the returned records are still relevant for GETADDR requestor. Although currently `IsTerrible` is fine with everything in last 30 days, we also should make sure that nodes in the response are not dead. I can't find the data, but I remember reading that the churn among reachable nodes (the ones we care) is low, so 1 day should be fine.\r\n\r\nLower bound:\r\nToo frequent cache updates can leak privacy again. For example, think about the attack where you map onion to ipv4 of the same node by correlating addrmans. Ideally, the response in two caches does not intersect.\r\n\r\nThe main event for both bounds is probably a feeler (because it updated nTime of the feeler's addr record). Feeler every 2 minutes update 720 records a day, so that's the same order as GETADDR response (1000 records).\r\n\r\nSame order means that not many of the new records will be missed in the cached response , as well as updates (upper bound concern).  It also means that the caches are updated at the same pace as the AddrMan updates happen (lower bound concern).\r\n\r\nI think any reasoning beyond that requires substantial research into attacks.",
    "created_at": "2020-05-25T07:33:37Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r429776733",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429776733"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r429776733"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429776733/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 69,
    "side": "RIGHT",
    "in_reply_to_id": 429095360
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429801896",
    "pull_request_review_id": 417544426,
    "id": 429801896,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgwMTg5Ng==",
    "diff_hunk": "@@ -416,6 +420,10 @@ class CConnman\n     std::atomic<NodeId> nLastNodeId{0};\n     unsigned int nPrevNodeCount{0};\n \n+    // Cache responses to addr requests to minimize privacy leak.",
    "path": "src/net.h",
    "position": null,
    "original_position": 24,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "0bbcf38b5b096a3fd395a53c51a2aca1c9ef9355",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Adding more info without talking too much specifics.",
    "created_at": "2020-05-25T08:25:13Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r429801896",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429801896"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r429801896"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429801896/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 427,
    "side": "RIGHT",
    "in_reply_to_id": 429091118
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429808188",
    "pull_request_review_id": 417552313,
    "id": 429808188,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgwODE4OA==",
    "diff_hunk": "@@ -253,9 +253,17 @@ class CConnman\n     void SetServices(const CService &addr, ServiceFlags nServices);\n     void MarkAddressGood(const CAddress& addr);\n     void AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddress& addrFrom, int64_t nTimePenalty = 0);\n+\n+    // Addr responses stored in different caches per network prevent\n+    // cross-network node identity.",
    "path": "src/net.h",
    "position": null,
    "original_position": 6,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "7c72f28e3d9d07916b30bbb64022bb6bb51e9c3e",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Adding more documentation.\r\n\r\n>Going further, shouldn't you cache based on address announced ? Isn't this a fingerprint for multi-homed nodes ?\r\n\r\nWhat makes you think so?",
    "created_at": "2020-05-25T08:38:14Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r429808188",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429808188"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r429808188"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429808188/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 258,
    "side": "RIGHT",
    "in_reply_to_id": 429100181
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431895174",
    "pull_request_review_id": 420188215,
    "id": 431895174,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg5NTE3NA==",
    "diff_hunk": "@@ -3208,7 +3208,14 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n         pfrom->fSentAddr = true;\n \n         pfrom->vAddrToSend.clear();\n-        std::vector<CAddress> vAddr = connman->GetAddresses();\n+        CConnman::AddrCacheNetwork use_cache;\n+        Network peer_network = pfrom->addr.GetNetwork();\n+        if (peer_network == NET_IPV4 || peer_network == NET_IPV6) {\n+            use_cache = CConnman::ADDR_CACHE_REGULAR;\n+        } else {\n+            use_cache = CConnman::ADDR_CACHE_OTHER;",
    "path": "src/net_processing.cpp",
    "position": null,
    "original_position": 10,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "328788ceae58584f3c8f3cedd93e411111ad0eb8",
    "user": {
      "login": "glowang",
      "id": 38899812,
      "node_id": "MDQ6VXNlcjM4ODk5ODEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/38899812?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glowang",
      "html_url": "https://github.com/glowang",
      "followers_url": "https://api.github.com/users/glowang/followers",
      "following_url": "https://api.github.com/users/glowang/following{/other_user}",
      "gists_url": "https://api.github.com/users/glowang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glowang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glowang/subscriptions",
      "organizations_url": "https://api.github.com/users/glowang/orgs",
      "repos_url": "https://api.github.com/users/glowang/repos",
      "events_url": "https://api.github.com/users/glowang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glowang/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "My understand is you want to use `ADDR_CACHE_OTHER` for privacy-preserving networks, so that the caches returned from these networks  are not mapped 1-1 with caches returned from identifying networks like ipv4, is that right?  \r\n\r\nIf this is the case, I believe NET_TEREDO peers and any peers with NET_UNKNOWN will also hit the `else` case and use the same cache as Tor's? Do NET_TEREDO and NET_UNKNOWN networks have the same privacy level as Tor's?",
    "created_at": "2020-05-28T14:46:35Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r431895174",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431895174"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r431895174"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431895174/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3216,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431923293",
    "pull_request_review_id": 420226363,
    "id": 431923293,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyMzI5Mw==",
    "diff_hunk": "@@ -2468,9 +2468,24 @@ void CConnman::AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddres\n     addrman.Add(vAddr, addrFrom, nTimePenalty);\n }\n \n-std::vector<CAddress> CConnman::GetAddresses()\n+std::vector<CAddress> CConnman::GetAddresses(AddrCacheNetwork use_cache)\n {\n-    return addrman.GetAddr();\n+    if (use_cache == ADDR_CACHE_NONE) {\n+        return addrman.GetAddr();\n+    } else {\n+        CachedAddrResponse* cache;\n+        if (use_cache == ADDR_CACHE_REGULAR) {\n+            cache = &m_cached_addr_response_regular;\n+        } else {\n+            cache = &m_cached_addr_response_other;\n+        }\n+        const std::chrono::microseconds current_time = GetTime<std::chrono::microseconds>();\n+        if (cache->m_update_addr_response < current_time) {",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 18,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "328788ceae58584f3c8f3cedd93e411111ad0eb8",
    "user": {
      "login": "glowang",
      "id": 38899812,
      "node_id": "MDQ6VXNlcjM4ODk5ODEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/38899812?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glowang",
      "html_url": "https://github.com/glowang",
      "followers_url": "https://api.github.com/users/glowang/followers",
      "following_url": "https://api.github.com/users/glowang/following{/other_user}",
      "gists_url": "https://api.github.com/users/glowang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glowang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glowang/subscriptions",
      "organizations_url": "https://api.github.com/users/glowang/orgs",
      "repos_url": "https://api.github.com/users/glowang/repos",
      "events_url": "https://api.github.com/users/glowang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glowang/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "if you initialized `m_update_addr_response` to be 0 with `std::chrono::microseconds m_update_addr_response{0};`, wouldn't this clause always be true?",
    "created_at": "2020-05-28T15:24:37Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r431923293",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431923293"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r431923293"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431923293/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2484,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432549585",
    "pull_request_review_id": 421041054,
    "id": 432549585,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU0OTU4NQ==",
    "diff_hunk": "@@ -3208,7 +3208,14 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n         pfrom->fSentAddr = true;\n \n         pfrom->vAddrToSend.clear();\n-        std::vector<CAddress> vAddr = connman->GetAddresses();\n+        CConnman::AddrCacheNetwork use_cache;\n+        Network peer_network = pfrom->addr.GetNetwork();\n+        if (peer_network == NET_IPV4 || peer_network == NET_IPV6) {\n+            use_cache = CConnman::ADDR_CACHE_REGULAR;\n+        } else {\n+            use_cache = CConnman::ADDR_CACHE_OTHER;",
    "path": "src/net_processing.cpp",
    "position": null,
    "original_position": 10,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "328788ceae58584f3c8f3cedd93e411111ad0eb8",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": ">My understand is you want to use ADDR_CACHE_OTHER for privacy-preserving networks, so that the caches returned from these networks are not mapped 1-1 with caches returned from identifying networks like ipv4, is that right?\r\n\r\nYes. I mean, ideally not just private/identifying networks. Ideally, if a node is hosted on Tor AND i2p AND ipv4, neither of them should be mapped together. But allocating a new cache for every network is probably too big of an overkill for such a niche use-case.\r\n\r\nThat's why I leave 2 caches, keeping in mind that ipv4 + ipv6 is one big group, and everything else can be grouped together. So, I guess that answers your question?\r\n\r\nIf other reviewers point out some other usecase, I'll be happy to discuss more.\r\n\r\n",
    "created_at": "2020-05-29T15:06:33Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r432549585",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432549585"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r432549585"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432549585/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3216,
    "side": "RIGHT",
    "in_reply_to_id": 431895174
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432559588",
    "pull_request_review_id": 421054245,
    "id": 432559588,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU1OTU4OA==",
    "diff_hunk": "@@ -2468,9 +2468,24 @@ void CConnman::AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddres\n     addrman.Add(vAddr, addrFrom, nTimePenalty);\n }\n \n-std::vector<CAddress> CConnman::GetAddresses()\n+std::vector<CAddress> CConnman::GetAddresses(AddrCacheNetwork use_cache)\n {\n-    return addrman.GetAddr();\n+    if (use_cache == ADDR_CACHE_NONE) {\n+        return addrman.GetAddr();\n+    } else {\n+        CachedAddrResponse* cache;\n+        if (use_cache == ADDR_CACHE_REGULAR) {\n+            cache = &m_cached_addr_response_regular;\n+        } else {\n+            cache = &m_cached_addr_response_other;\n+        }\n+        const std::chrono::microseconds current_time = GetTime<std::chrono::microseconds>();\n+        if (cache->m_update_addr_response < current_time) {",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 18,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "328788ceae58584f3c8f3cedd93e411111ad0eb8",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It is true on the first ever iteration, but then `cache->m_update_addr_response = PoissonNextSend(current_time, AVG_ADDRESS_RESPONSE_UPDATE_INTERVAL);` in the conditional branch executes and makes it non-zero right away. So that it will be true again only after AVG_ADDRESS_RESPONSE_UPDATE_INTERVAL",
    "created_at": "2020-05-29T15:22:27Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r432559588",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432559588"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r432559588"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432559588/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2484,
    "side": "RIGHT",
    "in_reply_to_id": 431923293
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432616969",
    "pull_request_review_id": 421127780,
    "id": 432616969,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYxNjk2OQ==",
    "diff_hunk": "@@ -424,8 +435,15 @@ class CConnman\n     // Attack example: scraping addrs in real-time may allow an attacker\n     // to infer new connections of the victim by detecting new records\n     // with fresh timestamps (per self-announcement).\n-    std::vector<CAddress> m_addrs_response_cache;\n-    std::chrono::microseconds m_update_addr_response{0};\n+    struct CachedAddrResponse {\n+        std::vector<CAddress> m_addrs_response_cache;\n+        std::chrono::microseconds m_update_addr_response{0};\n+    };\n+\n+    // Keep a separate cache for other net (onion etc.) peers so that",
    "path": "src/net.h",
    "position": null,
    "original_position": 33,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "bff16049e43c3cee47adf43596d8c14b2c886e13",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why not one for every network? 1000 addresses per network is still only a tiny amount of memory.",
    "created_at": "2020-05-29T16:59:03Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r432616969",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432616969"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r432616969"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432616969/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 443,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433548779",
    "pull_request_review_id": 422255386,
    "id": 433548779,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU0ODc3OQ==",
    "diff_hunk": "@@ -253,9 +253,17 @@ class CConnman\n     void SetServices(const CService &addr, ServiceFlags nServices);\n     void MarkAddressGood(const CAddress& addr);\n     void AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddress& addrFrom, int64_t nTimePenalty = 0);\n+\n+    // Addr responses stored in different caches per network prevent\n+    // cross-network node identity.",
    "path": "src/net.h",
    "position": null,
    "original_position": 6,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "7c72f28e3d9d07916b30bbb64022bb6bb51e9c3e",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If you announce 2 different IPv4 addresses, `requestor_network` is going to be the same (`NET_IPV4`) for both and hit the same cache ?",
    "created_at": "2020-06-01T23:55:59Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r433548779",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433548779"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r433548779"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433548779/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 258,
    "side": "RIGHT",
    "in_reply_to_id": 429100181
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433555155",
    "pull_request_review_id": 422263037,
    "id": 433555155,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU1NTE1NQ==",
    "diff_hunk": "@@ -64,6 +64,8 @@ static const int MAX_ADDNODE_CONNECTIONS = 8;\n static const int MAX_BLOCKS_ONLY_CONNECTIONS = 2;\n /** Maximum number of feeler connections */\n static const int MAX_FEELER_CONNECTIONS = 1;\n+/** Average delay between updating address responses */\n+static constexpr std::chrono::hours AVG_ADDRESS_RESPONSE_UPDATE_INTERVAL{24};",
    "path": "src/net.h",
    "position": null,
    "original_position": 5,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "0bbcf38b5b096a3fd395a53c51a2aca1c9ef9355",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "We should dissociate network _churn_, i.e how many peers fall offline after X and peers _rotation_, i.e changes among our connections demography after same X. I think for counter-measure to be efficient you need rotation to be high enough to blur adversary guess of your peers topology. \r\n\r\nObviously, a higher rotation target is likely to come with a higher churn, and therefore decrease validity of returned addresses. But I think it's okay to try more connections compare to leaking your topology, goals don't have same value. \r\n\r\nI agree, sounds hard to guess the sweet spot with further research, you should comment the trade-off and invite to further investigation.\r\n\r\nWith regards to bounds, I think it make sense to evaluate that after a feeler cycle of a day, you may dispose from a more accurate view of the network and therefore you should update your cache. An average delay of 36h would sounds correct to me too, even making counter-measure a bit more efficient.",
    "created_at": "2020-06-02T00:19:20Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r433555155",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433555155"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r433555155"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433555155/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 69,
    "side": "RIGHT",
    "in_reply_to_id": 429095360
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433606996",
    "pull_request_review_id": 422326071,
    "id": 433606996,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwNjk5Ng==",
    "diff_hunk": "@@ -253,9 +253,17 @@ class CConnman\n     void SetServices(const CService &addr, ServiceFlags nServices);\n     void MarkAddressGood(const CAddress& addr);\n     void AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddress& addrFrom, int64_t nTimePenalty = 0);\n+\n+    // Addr responses stored in different caches per network prevent\n+    // cross-network node identity.",
    "path": "src/net.h",
    "position": null,
    "original_position": 6,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "7c72f28e3d9d07916b30bbb64022bb6bb51e9c3e",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Oh, I see, you mean *own* address announced. That's pretty crazy, I'm not even sure our software currently can do this.",
    "created_at": "2020-06-02T03:59:51Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r433606996",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433606996"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r433606996"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433606996/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 258,
    "side": "RIGHT",
    "in_reply_to_id": 429100181
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433949352",
    "pull_request_review_id": 422774720,
    "id": 433949352,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk0OTM1Mg==",
    "diff_hunk": "@@ -64,6 +64,8 @@ static const int MAX_ADDNODE_CONNECTIONS = 8;\n static const int MAX_BLOCKS_ONLY_CONNECTIONS = 2;\n /** Maximum number of feeler connections */\n static const int MAX_FEELER_CONNECTIONS = 1;\n+/** Average delay between updating address responses */\n+static constexpr std::chrono::hours AVG_ADDRESS_RESPONSE_UPDATE_INTERVAL{24};",
    "path": "src/net.h",
    "position": null,
    "original_position": 5,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "0bbcf38b5b096a3fd395a53c51a2aca1c9ef9355",
    "user": {
      "login": "glowang",
      "id": 38899812,
      "node_id": "MDQ6VXNlcjM4ODk5ODEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/38899812?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glowang",
      "html_url": "https://github.com/glowang",
      "followers_url": "https://api.github.com/users/glowang/followers",
      "following_url": "https://api.github.com/users/glowang/following{/other_user}",
      "gists_url": "https://api.github.com/users/glowang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glowang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glowang/subscriptions",
      "organizations_url": "https://api.github.com/users/glowang/orgs",
      "repos_url": "https://api.github.com/users/glowang/repos",
      "events_url": "https://api.github.com/users/glowang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glowang/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "As for rotation of outbound peers, I don't know if we actually have any mechanism to do that programmatically. This idea was discussed [here](https://github.com/bitcoin/bitcoin/pull/4723/files) but the PR was closed as further research is needed. As rotation of inbound peers, does anyone know whether that even exists & how it is done?  ",
    "created_at": "2020-06-02T15:07:18Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r433949352",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433949352"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r433949352"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433949352/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 69,
    "side": "RIGHT",
    "in_reply_to_id": 429095360
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434127596",
    "pull_request_review_id": 422995125,
    "id": 434127596,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyNzU5Ng==",
    "diff_hunk": "@@ -2468,9 +2468,34 @@ void CConnman::AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddres\n     addrman.Add(vAddr, addrFrom, nTimePenalty);\n }\n \n-std::vector<CAddress> CConnman::GetAddresses()\n+std::vector<CAddress> CConnman::GetAddresses(Network requestor_network)\n {\n-    return addrman.GetAddr();\n+    if (requestor_network == NET_INTERNAL) {\n+        return addrman.GetAddr();\n+    } else {\n+        // if (m_addr_response_caches[requestor_network] == nullptr) {\n+        //     // First time requesting from a given network,\n+        //     // initialize with defaults here and then fill later in the same call.\n+        //     CachedAddrResponse default_cached_response;\n+        //     m_addr_response_caches[requestor_network] = &default_cached_response;\n+        // }\n+        // CachedAddrResponse* cache = m_addr_response_caches[requestor_network];\n+\n+        // const std::chrono::microseconds current_time = GetTime<std::chrono::microseconds>();\n+        // if (cache->m_update_addr_response < current_time) {\n+        //     cache->m_addrs_response_cache = addrman.GetAddr();\n+        //     cache->m_update_addr_response = PoissonNextSend(current_time, AVG_ADDRESS_RESPONSE_UPDATE_INTERVAL);\n+        // }",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 23,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "a6a5b9752024f1d95e8cfb7d1cc0e1360ef2efaf",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "What is all this for?",
    "created_at": "2020-06-02T19:31:32Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r434127596",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434127596"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r434127596"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434127596/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 2476,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 2488,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434128219",
    "pull_request_review_id": 422995905,
    "id": 434128219,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyODIxOQ==",
    "diff_hunk": "@@ -251,7 +254,12 @@ class CConnman\n     void SetServices(const CService &addr, ServiceFlags nServices);\n     void MarkAddressGood(const CAddress& addr);\n     void AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddress& addrFrom, int64_t nTimePenalty = 0);\n-    std::vector<CAddress> GetAddresses();\n+\n+    // Cache is used to minimize topology leaks, so it should\n+    // be used for all non-trusted calls, for example, p2p.\n+    // NET_INTERNAL represents a non-malicious call (either from RPC) or",
    "path": "src/net.h",
    "position": null,
    "original_position": 25,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "a6a5b9752024f1d95e8cfb7d1cc0e1360ef2efaf",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think this should probably be a whitelist flag, not an assumption internal nodes are non-malicious",
    "created_at": "2020-06-02T19:32:40Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r434128219",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434128219"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r434128219"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434128219/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 260,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434266333",
    "pull_request_review_id": 423167787,
    "id": 434266333,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI2NjMzMw==",
    "diff_hunk": "@@ -2468,9 +2468,34 @@ void CConnman::AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddres\n     addrman.Add(vAddr, addrFrom, nTimePenalty);\n }\n \n-std::vector<CAddress> CConnman::GetAddresses()\n+std::vector<CAddress> CConnman::GetAddresses(Network requestor_network)\n {\n-    return addrman.GetAddr();\n+    if (requestor_network == NET_INTERNAL) {\n+        return addrman.GetAddr();\n+    } else {\n+        // if (m_addr_response_caches[requestor_network] == nullptr) {\n+        //     // First time requesting from a given network,\n+        //     // initialize with defaults here and then fill later in the same call.\n+        //     CachedAddrResponse default_cached_response;\n+        //     m_addr_response_caches[requestor_network] = &default_cached_response;\n+        // }\n+        // CachedAddrResponse* cache = m_addr_response_caches[requestor_network];\n+\n+        // const std::chrono::microseconds current_time = GetTime<std::chrono::microseconds>();\n+        // if (cache->m_update_addr_response < current_time) {\n+        //     cache->m_addrs_response_cache = addrman.GetAddr();\n+        //     cache->m_update_addr_response = PoissonNextSend(current_time, AVG_ADDRESS_RESPONSE_UPDATE_INTERVAL);\n+        // }",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 23,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "a6a5b9752024f1d95e8cfb7d1cc0e1360ef2efaf",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Oh, oops, me being sloppy.",
    "created_at": "2020-06-03T01:55:05Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r434266333",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434266333"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r434266333"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434266333/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 2476,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 2488,
    "side": "RIGHT",
    "in_reply_to_id": 434127596
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434526926",
    "pull_request_review_id": 423498666,
    "id": 434526926,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUyNjkyNg==",
    "diff_hunk": "@@ -64,6 +64,8 @@ static const int MAX_ADDNODE_CONNECTIONS = 8;\n static const int MAX_BLOCKS_ONLY_CONNECTIONS = 2;\n /** Maximum number of feeler connections */\n static const int MAX_FEELER_CONNECTIONS = 1;\n+/** Average delay between updating address responses */\n+static constexpr std::chrono::hours AVG_ADDRESS_RESPONSE_UPDATE_INTERVAL{24};",
    "path": "src/net.h",
    "position": null,
    "original_position": 5,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "0bbcf38b5b096a3fd395a53c51a2aca1c9ef9355",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Inbound rotation is something I've never heard of :)\r\n\r\nIt practice it just means dropping an existing connection someone made to us... It doesn't feel useful from the first glance, unless that peer was malicious or broken. \r\nAn inbound connection can't be immediately replaced, so this seems like a loose-loose w.r.t security. We can drop a spy, true, but right now that is solved by slower relays to inbounds etc.\r\n\r\nWe \"rotate\" inbound peers if we're at capacity (117 inbounds or whatnot), but that's a completely different story. That's called eviction.",
    "created_at": "2020-06-03T12:25:21Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r434526926",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434526926"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r434526926"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434526926/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 69,
    "side": "RIGHT",
    "in_reply_to_id": 429095360
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436386929",
    "pull_request_review_id": 425840517,
    "id": 436386929,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM4NjkyOQ==",
    "diff_hunk": "@@ -0,0 +1,107 @@\n+#!/usr/bin/env python3",
    "path": "test/functional/p2p_getaddr_caching.py",
    "position": 1,
    "original_position": 1,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "cd83106ce2a3e70d35e88aa4a35f51f9f91208a5",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "File needs +x permisison",
    "created_at": "2020-06-07T17:56:37Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r436386929",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436386929"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r436386929"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436386929/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1,
    "original_line": 1,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440475693",
    "pull_request_review_id": 431029127,
    "id": 440475693,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ3NTY5Mw==",
    "diff_hunk": "@@ -251,7 +252,12 @@ class CConnman\n     void SetServices(const CService &addr, ServiceFlags nServices);\n     void MarkAddressGood(const CAddress& addr);\n     void AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddress& addrFrom, int64_t nTimePenalty = 0);\n-    std::vector<CAddress> GetAddresses();\n+\n+    // Cache is used to minimize topology leaks, so it should\n+    // be used for all non-trusted calls, for example, p2p.\n+    // A non-malicious call (either from RPC) or a whitelisted node",
    "path": "src/net.h",
    "position": null,
    "original_position": 16,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "d1312914a0d4d9d88c5b74ebca8fd25bc3e20bf2",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: move the `)`  until after `whitelisted node`",
    "created_at": "2020-06-15T22:12:11Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r440475693",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440475693"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r440475693"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440475693/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 258,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441145065",
    "pull_request_review_id": 431029127,
    "id": 441145065,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE0NTA2NQ==",
    "diff_hunk": "@@ -0,0 +1,107 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test addr response caching\n+\"\"\"\n+\n+from test_framework.messages import (\n+    CAddress,\n+    NODE_NETWORK,\n+    NODE_WITNESS,\n+    msg_addr,\n+    msg_getaddr,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    mininode_lock\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    wait_until\n+)\n+import time\n+\n+ADDRS = []\n+for i in range(1000):",
    "path": "test/functional/p2p_getaddr_caching.py",
    "position": null,
    "original_position": 28,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "d1312914a0d4d9d88c5b74ebca8fd25bc3e20bf2",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Since all addresses go into the same bucket, I think that only 64 of them will be kept in addrman, 14 of which will be returned in response to each `GETADDR` - so creating 1000 addresses instead of less does not add randomness to the `GETADDR` responses - though it's fine of course if you want to test the 1000 address limit for `ADDR`.",
    "created_at": "2020-06-16T21:12:20Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r441145065",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441145065"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r441145065"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441145065/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 26,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441333812",
    "pull_request_review_id": 432124552,
    "id": 441333812,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMzMzgxMg==",
    "diff_hunk": "@@ -0,0 +1,107 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test addr response caching\n+\"\"\"\n+\n+from test_framework.messages import (\n+    CAddress,\n+    NODE_NETWORK,\n+    NODE_WITNESS,\n+    msg_addr,\n+    msg_getaddr,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    mininode_lock\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    wait_until\n+)\n+import time\n+\n+ADDRS = []\n+for i in range(1000):",
    "path": "test/functional/p2p_getaddr_caching.py",
    "position": null,
    "original_position": 28,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "d1312914a0d4d9d88c5b74ebca8fd25bc3e20bf2",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nice catch! Let's keep it this way just in case e.g. bucketing logic is changed in the future.",
    "created_at": "2020-06-17T07:22:18Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r441333812",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441333812"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r441333812"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441333812/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 26,
    "side": "RIGHT",
    "in_reply_to_id": 441145065
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445745268",
    "pull_request_review_id": 437739684,
    "id": 445745268,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc0NTI2OA==",
    "diff_hunk": "@@ -2529,7 +2530,7 @@ std::vector<CAddress> CConnman::GetAddresses(Optional<Network> requestor_network\n {\n     if (requestor_network) {\n         const std::chrono::microseconds current_time = GetTime<std::chrono::microseconds>();\n-        const Network network = requestor_network.get();\n+        const Network network = requestor_network.get_value_or(NET_UNROUTABLE);",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 13,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "8e6ad248bf748f990c25ae8b2896d0e539905e9b",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This seems unnecessary. `get_value_or` only matters if the Optional is nullopt and a nullopt can't reach this code path.",
    "created_at": "2020-06-25T18:10:23Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r445745268",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445745268"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r445745268"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445745268/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2533,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447380482",
    "pull_request_review_id": 439637258,
    "id": 447380482,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM4MDQ4Mg==",
    "diff_hunk": "@@ -251,7 +252,12 @@ class CConnman\n     void SetServices(const CService &addr, ServiceFlags nServices);\n     void MarkAddressGood(const CAddress& addr);\n     void AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddress& addrFrom, int64_t nTimePenalty = 0);\n-    std::vector<CAddress> GetAddresses();\n+\n+    // Cache is used to minimize topology leaks, so it should\n+    // be used for all non-trusted calls, for example, p2p.\n+    // A non-malicious call (from RPC or a whitelisted node)\n+    // should avoid using the cache by passing nullopt.",
    "path": "src/net.h",
    "position": null,
    "original_position": 17,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "52d22a3c235bfed8a772b7cccbe470efdfa10291",
    "user": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Can you elaborate on why a whitelisted node should avoid using the cache? If there are no real downsides to caching for 24 hours then this shouldn't matter, right?",
    "created_at": "2020-06-30T03:05:08Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r447380482",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447380482"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r447380482"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447380482/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 259,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447634719",
    "pull_request_review_id": 439951852,
    "id": 447634719,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYzNDcxOQ==",
    "diff_hunk": "@@ -251,7 +252,12 @@ class CConnman\n     void SetServices(const CService &addr, ServiceFlags nServices);\n     void MarkAddressGood(const CAddress& addr);\n     void AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddress& addrFrom, int64_t nTimePenalty = 0);\n-    std::vector<CAddress> GetAddresses();\n+\n+    // Cache is used to minimize topology leaks, so it should\n+    // be used for all non-trusted calls, for example, p2p.\n+    // A non-malicious call (from RPC or a whitelisted node)\n+    // should avoid using the cache by passing nullopt.",
    "path": "src/net.h",
    "position": null,
    "original_position": 17,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "52d22a3c235bfed8a772b7cccbe470efdfa10291",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Some hypothetical examples which *might* make sense in a trusted setting (which doesn't really make sense in a public trust-minimized setting):\r\n- 2 remote nodes exchanging each others AddrMan and compare to make sure no poisoning is happening\r\n- one node learns full AddrMan (or more than 1 cached list) from its *trusted* peer\r\n\r\nI don't have a strong justification for this feature, but I thought it might be useful. Interested in other opinions!\r\n",
    "created_at": "2020-06-30T12:13:05Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r447634719",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447634719"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r447634719"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447634719/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 259,
    "side": "RIGHT",
    "in_reply_to_id": 447380482
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447701783",
    "pull_request_review_id": 440039559,
    "id": 447701783,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwMTc4Mw==",
    "diff_hunk": "@@ -251,7 +252,12 @@ class CConnman\n     void SetServices(const CService &addr, ServiceFlags nServices);\n     void MarkAddressGood(const CAddress& addr);\n     void AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddress& addrFrom, int64_t nTimePenalty = 0);\n-    std::vector<CAddress> GetAddresses();\n+\n+    // Cache is used to minimize topology leaks, so it should\n+    // be used for all non-trusted calls, for example, p2p.\n+    // A non-malicious call (from RPC or a whitelisted node)\n+    // should avoid using the cache by passing nullopt.",
    "path": "src/net.h",
    "position": null,
    "original_position": 17,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "52d22a3c235bfed8a772b7cccbe470efdfa10291",
    "user": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yeah I don't see any downsides to maintaining the current behaviour for trusted callers. I was just confused at seeing it in the implementation but no mention of it in the PR description or discussion.",
    "created_at": "2020-06-30T13:55:14Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r447701783",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447701783"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r447701783"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447701783/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 259,
    "side": "RIGHT",
    "in_reply_to_id": 447380482
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447978865",
    "pull_request_review_id": 440385387,
    "id": 447978865,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3ODg2NQ==",
    "diff_hunk": "@@ -251,7 +252,12 @@ class CConnman\n     void SetServices(const CService &addr, ServiceFlags nServices);\n     void MarkAddressGood(const CAddress& addr);\n     void AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddress& addrFrom, int64_t nTimePenalty = 0);\n-    std::vector<CAddress> GetAddresses();\n+\n+    // Cache is used to minimize topology leaks, so it should\n+    // be used for all non-trusted calls, for example, p2p.\n+    // A non-malicious call (from RPC or a whitelisted node)\n+    // should avoid using the cache by passing nullopt.\n+    std::vector<CAddress> GetAddresses(Optional<Network> requestor_network);",
    "path": "src/net.h",
    "position": null,
    "original_position": 18,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "52d22a3c235bfed8a772b7cccbe470efdfa10291",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It feels to me like this would be more natural as an overloaded function rather than passing an optional:\r\n\r\n- `GetAddresses()` returns an uncached vector of addresses from addrman as now\r\n- `GetAddresses(Network)` returns the cached vector of addresses for that network.\r\n\r\nWhy? Because the logic for those two cases is entirely separated in the implementation, it avoids packing and unpacking the `Network` in an optional, and doing this means that some of the calling sites don't need to be changed.",
    "created_at": "2020-06-30T21:05:56Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r447978865",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447978865"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r447978865"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447978865/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 260,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447979641",
    "pull_request_review_id": 440385387,
    "id": 447979641,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3OTY0MQ==",
    "diff_hunk": "@@ -2525,9 +2526,20 @@ void CConnman::AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddres\n     addrman.Add(vAddr, addrFrom, nTimePenalty);\n }\n \n-std::vector<CAddress> CConnman::GetAddresses()\n+std::vector<CAddress> CConnman::GetAddresses(Optional<Network> requestor_network)\n {\n-    return addrman.GetAddr();\n+    if (requestor_network) {\n+        const std::chrono::microseconds current_time = GetTime<std::chrono::microseconds>();",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 17,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "52d22a3c235bfed8a772b7cccbe470efdfa10291",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is a good place for an `auto`. The return type of `GetTime<std::chrono::microseconds>()` is obvious, so there's no need to type it out.",
    "created_at": "2020-06-30T21:07:32Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r447979641",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447979641"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r447979641"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447979641/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2532,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447980442",
    "pull_request_review_id": 440385387,
    "id": 447980442,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4MDQ0Mg==",
    "diff_hunk": "@@ -416,6 +422,22 @@ class CConnman\n     std::atomic<NodeId> nLastNodeId{0};\n     unsigned int nPrevNodeCount{0};\n \n+    // Cache responses to addr requests to minimize privacy leak.\n+    // Attack example: scraping addrs in real-time may allow an attacker\n+    // to infer new connections of the victim by detecting new records\n+    // with fresh timestamps (per self-announcement).\n+    struct CachedAddrResponse {\n+        std::vector<CAddress> m_addrs_response_cache;\n+        std::chrono::microseconds m_update_addr_response{0};\n+    };\n+\n+    // Addr responses stored in different caches\n+    // per network prevent cross-network node identification.\n+    // If a node for example is multi-homed under Tor and IPv6,\n+    // a single cache (or no cache at all) would let an attacker\n+    // to easily detect that it is the same node by comparing responses.\n+    std::map<Network, CachedAddrResponse> m_addr_response_caches;",
    "path": "src/net.h",
    "position": 57,
    "original_position": 40,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "52d22a3c235bfed8a772b7cccbe470efdfa10291",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "What are the additional memory requirements for this structure? Could you add that to the comment?",
    "created_at": "2020-06-30T21:09:14Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r447980442",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447980442"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r447980442"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447980442/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 450,
    "original_line": 450,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447986548",
    "pull_request_review_id": 440385387,
    "id": 447986548,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4NjU0OA==",
    "diff_hunk": "@@ -3329,7 +3329,13 @@ bool ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRec\n         pfrom.fSentAddr = true;\n \n         pfrom.vAddrToSend.clear();\n-        std::vector<CAddress> vAddr = connman->GetAddresses();\n+        std::vector<CAddress> vAddr;\n+        if (pfrom.HasPermission(PF_ADDR)) {\n+            vAddr = connman->GetAddresses(nullopt);\n+        } else {\n+            Network peer_network = pfrom.addr.GetNetwork();\n+            vAddr = connman->GetAddresses(peer_network);\n+        }\n         FastRandomContext insecure_rand;\n         for (const CAddress &addr : vAddr) {\n             if (!banman->IsBanned(addr)) {",
    "path": "src/net_processing.cpp",
    "position": null,
    "original_position": 14,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "52d22a3c235bfed8a772b7cccbe470efdfa10291",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Perhaps this filtering out banned addresses shouldn't happen if we're sending from the cache. If an address in the cache is banned during the cache's lifetime, subsequent GETADDR requests will receive a different response, which could be a marginal privacy leak.",
    "created_at": "2020-06-30T21:21:37Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r447986548",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447986548"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r447986548"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447986548/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3341,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447987270",
    "pull_request_review_id": 440385387,
    "id": 447987270,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4NzI3MA==",
    "diff_hunk": "@@ -3329,7 +3329,13 @@ bool ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRec\n         pfrom.fSentAddr = true;\n \n         pfrom.vAddrToSend.clear();\n-        std::vector<CAddress> vAddr = connman->GetAddresses();\n+        std::vector<CAddress> vAddr;\n+        if (pfrom.HasPermission(PF_ADDR)) {\n+            vAddr = connman->GetAddresses(nullopt);\n+        } else {\n+            Network peer_network = pfrom.addr.GetNetwork();\n+            vAddr = connman->GetAddresses(peer_network);",
    "path": "src/net_processing.cpp",
    "position": null,
    "original_position": 10,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "52d22a3c235bfed8a772b7cccbe470efdfa10291",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Merge these two lines? No need for a local `peer_network` variable (the compiled code will be exactly the same, but creating a local variable that won't be used again signals the wrong intent in the code)",
    "created_at": "2020-06-30T21:23:06Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r447987270",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447987270"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r447987270"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447987270/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 3336,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 3337,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447987505",
    "pull_request_review_id": 440385387,
    "id": 447987505,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4NzUwNQ==",
    "diff_hunk": "@@ -0,0 +1,107 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test addr response caching\n+\"\"\"",
    "path": "test/functional/p2p_getaddr_caching.py",
    "position": null,
    "original_position": 7,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "52d22a3c235bfed8a772b7cccbe470efdfa10291",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: docstrings should be one line if there's only one line of text. Join these lines.",
    "created_at": "2020-06-30T21:23:37Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r447987505",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447987505"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r447987505"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447987505/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 5,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 7,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447988106",
    "pull_request_review_id": 440385387,
    "id": 447988106,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4ODEwNg==",
    "diff_hunk": "@@ -0,0 +1,107 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test addr response caching\n+\"\"\"\n+\n+from test_framework.messages import (\n+    CAddress,\n+    NODE_NETWORK,\n+    NODE_WITNESS,\n+    msg_addr,\n+    msg_getaddr,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    mininode_lock\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    wait_until\n+)\n+import time\n+\n+ADDRS = []\n+for i in range(1000):\n+    addr = CAddress()\n+    addr.time = int(time.time())\n+    addr.nServices = NODE_NETWORK | NODE_WITNESS\n+    third_octet = int(i / 256) % 256\n+    fourth_octet = i % 256\n+    addr.ip = \"123.123.{}.{}\".format(third_octet, fourth_octet)\n+    addr.port = 8333\n+    ADDRS.append(addr)\n+\n+class AddrReceiver(P2PInterface):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.received_addrs = None\n+\n+    def on_addr(self, message):\n+        self.received_addrs = []\n+        for addr in message.addrs:\n+            self.received_addrs.append(addr.ip)\n+\n+    def received_addr(self):\n+        return self.received_addrs is not None\n+\n+\n+class AddrTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.log.info('Create connection that sends and requests addr messages')\n+        addr_source = self.nodes[0].add_p2p_connection(P2PInterface())\n+        msg_send_addrs = msg_addr()\n+\n+        self.log.info('Fill peer AddrMan with a lot of records')\n+        msg_send_addrs.addrs = ADDRS\n+        with self.nodes[0].assert_debug_log([\n+                'Added 1000 addresses from 127.0.0.1: 0 tried',\n+                'received: addr (30003 bytes) peer=0',\n+        ]):\n+            addr_source.send_and_ping(msg_send_addrs)\n+\n+        responses = []\n+        self.log.info('Send many addr requests within short time to receive same response')\n+        N = 5\n+        cur_mock_time = int(time.time())\n+        for i in range(N):\n+            addr_receiver = self.nodes[0].add_p2p_connection(AddrReceiver())\n+            with self.nodes[0].assert_debug_log([\n+                    \"received: getaddr (0 bytes) peer={}\".format(i+1),",
    "path": "test/functional/p2p_getaddr_caching.py",
    "position": null,
    "original_position": 78,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "52d22a3c235bfed8a772b7cccbe470efdfa10291",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: spaces around `+`. Same below in line 95.",
    "created_at": "2020-06-30T21:24:48Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r447988106",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447988106"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r447988106"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447988106/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 78,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447989605",
    "pull_request_review_id": 440385387,
    "id": 447989605,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4OTYwNQ==",
    "diff_hunk": "@@ -0,0 +1,107 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test addr response caching\n+\"\"\"\n+\n+from test_framework.messages import (\n+    CAddress,\n+    NODE_NETWORK,\n+    NODE_WITNESS,\n+    msg_addr,\n+    msg_getaddr,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    mininode_lock\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    wait_until\n+)\n+import time\n+\n+ADDRS = []\n+for i in range(1000):\n+    addr = CAddress()\n+    addr.time = int(time.time())\n+    addr.nServices = NODE_NETWORK | NODE_WITNESS\n+    third_octet = int(i / 256) % 256",
    "path": "test/functional/p2p_getaddr_caching.py",
    "position": null,
    "original_position": 32,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "52d22a3c235bfed8a772b7cccbe470efdfa10291",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "prefer `(i >> 8) % 256` to avoid having to convert between ints and floats (and better signal that you're removing the bottom 8 bits for the third section of the IP address). Better yet: `i >> 8` since your loop doesn't go over 256^2.",
    "created_at": "2020-06-30T21:27:50Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r447989605",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447989605"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r447989605"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447989605/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 32,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448000483",
    "pull_request_review_id": 440385387,
    "id": 448000483,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwMDQ4Mw==",
    "diff_hunk": "@@ -0,0 +1,107 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test addr response caching\n+\"\"\"\n+\n+from test_framework.messages import (\n+    CAddress,\n+    NODE_NETWORK,\n+    NODE_WITNESS,\n+    msg_addr,\n+    msg_getaddr,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    mininode_lock\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    wait_until\n+)\n+import time\n+\n+ADDRS = []\n+for i in range(1000):\n+    addr = CAddress()\n+    addr.time = int(time.time())\n+    addr.nServices = NODE_NETWORK | NODE_WITNESS\n+    third_octet = int(i / 256) % 256\n+    fourth_octet = i % 256\n+    addr.ip = \"123.123.{}.{}\".format(third_octet, fourth_octet)\n+    addr.port = 8333\n+    ADDRS.append(addr)\n+\n+class AddrReceiver(P2PInterface):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.received_addrs = None\n+\n+    def on_addr(self, message):\n+        self.received_addrs = []\n+        for addr in message.addrs:\n+            self.received_addrs.append(addr.ip)\n+\n+    def received_addr(self):\n+        return self.received_addrs is not None\n+\n+\n+class AddrTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.log.info('Create connection that sends and requests addr messages')\n+        addr_source = self.nodes[0].add_p2p_connection(P2PInterface())\n+        msg_send_addrs = msg_addr()\n+\n+        self.log.info('Fill peer AddrMan with a lot of records')\n+        msg_send_addrs.addrs = ADDRS\n+        with self.nodes[0].assert_debug_log([",
    "path": "test/functional/p2p_getaddr_caching.py",
    "position": null,
    "original_position": 65,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "52d22a3c235bfed8a772b7cccbe470efdfa10291",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I have a general distaste for asserting on log contents (logs aren't part of a stable API, so can change between releases, and it's annoying if that causes tests to break). I suggest just removing the `assert_debug_log()`",
    "created_at": "2020-06-30T21:52:14Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r448000483",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448000483"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r448000483"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448000483/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 65,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448001035",
    "pull_request_review_id": 440385387,
    "id": 448001035,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwMTAzNQ==",
    "diff_hunk": "@@ -0,0 +1,107 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test addr response caching\n+\"\"\"\n+\n+from test_framework.messages import (\n+    CAddress,\n+    NODE_NETWORK,\n+    NODE_WITNESS,\n+    msg_addr,\n+    msg_getaddr,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    mininode_lock\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    wait_until\n+)\n+import time\n+\n+ADDRS = []\n+for i in range(1000):\n+    addr = CAddress()\n+    addr.time = int(time.time())\n+    addr.nServices = NODE_NETWORK | NODE_WITNESS\n+    third_octet = int(i / 256) % 256\n+    fourth_octet = i % 256\n+    addr.ip = \"123.123.{}.{}\".format(third_octet, fourth_octet)\n+    addr.port = 8333\n+    ADDRS.append(addr)\n+\n+class AddrReceiver(P2PInterface):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.received_addrs = None\n+\n+    def on_addr(self, message):\n+        self.received_addrs = []\n+        for addr in message.addrs:\n+            self.received_addrs.append(addr.ip)\n+\n+    def received_addr(self):\n+        return self.received_addrs is not None\n+\n+\n+class AddrTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.log.info('Create connection that sends and requests addr messages')\n+        addr_source = self.nodes[0].add_p2p_connection(P2PInterface())\n+        msg_send_addrs = msg_addr()\n+\n+        self.log.info('Fill peer AddrMan with a lot of records')\n+        msg_send_addrs.addrs = ADDRS\n+        with self.nodes[0].assert_debug_log([\n+                'Added 1000 addresses from 127.0.0.1: 0 tried',\n+                'received: addr (30003 bytes) peer=0',\n+        ]):\n+            addr_source.send_and_ping(msg_send_addrs)\n+\n+        responses = []\n+        self.log.info('Send many addr requests within short time to receive same response')\n+        N = 5\n+        cur_mock_time = int(time.time())\n+        for i in range(N):\n+            addr_receiver = self.nodes[0].add_p2p_connection(AddrReceiver())\n+            with self.nodes[0].assert_debug_log([",
    "path": "test/functional/p2p_getaddr_caching.py",
    "position": null,
    "original_position": 77,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "52d22a3c235bfed8a772b7cccbe470efdfa10291",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Again, there's no need for this assert_debug_log(). You're already asserting on the contents of the response.",
    "created_at": "2020-06-30T21:53:36Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r448001035",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448001035"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r448001035"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448001035/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 77,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448002310",
    "pull_request_review_id": 440385387,
    "id": 448002310,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwMjMxMA==",
    "diff_hunk": "@@ -0,0 +1,107 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test addr response caching\n+\"\"\"\n+\n+from test_framework.messages import (\n+    CAddress,\n+    NODE_NETWORK,\n+    NODE_WITNESS,\n+    msg_addr,\n+    msg_getaddr,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    mininode_lock\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    wait_until\n+)\n+import time\n+\n+ADDRS = []\n+for i in range(1000):\n+    addr = CAddress()\n+    addr.time = int(time.time())\n+    addr.nServices = NODE_NETWORK | NODE_WITNESS\n+    third_octet = int(i / 256) % 256\n+    fourth_octet = i % 256\n+    addr.ip = \"123.123.{}.{}\".format(third_octet, fourth_octet)\n+    addr.port = 8333\n+    ADDRS.append(addr)\n+\n+class AddrReceiver(P2PInterface):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.received_addrs = None\n+\n+    def on_addr(self, message):\n+        self.received_addrs = []\n+        for addr in message.addrs:\n+            self.received_addrs.append(addr.ip)\n+\n+    def received_addr(self):\n+        return self.received_addrs is not None\n+\n+\n+class AddrTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.log.info('Create connection that sends and requests addr messages')\n+        addr_source = self.nodes[0].add_p2p_connection(P2PInterface())\n+        msg_send_addrs = msg_addr()\n+\n+        self.log.info('Fill peer AddrMan with a lot of records')\n+        msg_send_addrs.addrs = ADDRS\n+        with self.nodes[0].assert_debug_log([\n+                'Added 1000 addresses from 127.0.0.1: 0 tried',\n+                'received: addr (30003 bytes) peer=0',\n+        ]):\n+            addr_source.send_and_ping(msg_send_addrs)\n+\n+        responses = []\n+        self.log.info('Send many addr requests within short time to receive same response')\n+        N = 5\n+        cur_mock_time = int(time.time())\n+        for i in range(N):\n+            addr_receiver = self.nodes[0].add_p2p_connection(AddrReceiver())\n+            with self.nodes[0].assert_debug_log([\n+                    \"received: getaddr (0 bytes) peer={}\".format(i+1),\n+            ]):\n+                addr_receiver.send_and_ping(msg_getaddr())\n+                # Trigger response\n+                cur_mock_time += 5 * 60",
    "path": "test/functional/p2p_getaddr_caching.py",
    "position": null,
    "original_position": 82,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "52d22a3c235bfed8a772b7cccbe470efdfa10291",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "why is this change in mocktime between the send and the wait_until? Presumably it can go afterwards just as easily? Splitting up the send and wait_until response makes this marginally more difficult to follow.",
    "created_at": "2020-06-30T21:56:35Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r448002310",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448002310"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r448002310"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448002310/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 82,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448002384",
    "pull_request_review_id": 440385387,
    "id": 448002384,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwMjM4NA==",
    "diff_hunk": "@@ -0,0 +1,107 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test addr response caching\n+\"\"\"\n+\n+from test_framework.messages import (\n+    CAddress,\n+    NODE_NETWORK,\n+    NODE_WITNESS,\n+    msg_addr,\n+    msg_getaddr,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    mininode_lock\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    wait_until\n+)\n+import time\n+\n+ADDRS = []\n+for i in range(1000):\n+    addr = CAddress()\n+    addr.time = int(time.time())\n+    addr.nServices = NODE_NETWORK | NODE_WITNESS\n+    third_octet = int(i / 256) % 256\n+    fourth_octet = i % 256\n+    addr.ip = \"123.123.{}.{}\".format(third_octet, fourth_octet)\n+    addr.port = 8333\n+    ADDRS.append(addr)\n+\n+class AddrReceiver(P2PInterface):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.received_addrs = None\n+\n+    def on_addr(self, message):\n+        self.received_addrs = []\n+        for addr in message.addrs:\n+            self.received_addrs.append(addr.ip)\n+\n+    def received_addr(self):\n+        return self.received_addrs is not None\n+\n+\n+class AddrTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.log.info('Create connection that sends and requests addr messages')\n+        addr_source = self.nodes[0].add_p2p_connection(P2PInterface())\n+        msg_send_addrs = msg_addr()\n+\n+        self.log.info('Fill peer AddrMan with a lot of records')\n+        msg_send_addrs.addrs = ADDRS\n+        with self.nodes[0].assert_debug_log([\n+                'Added 1000 addresses from 127.0.0.1: 0 tried',\n+                'received: addr (30003 bytes) peer=0',\n+        ]):\n+            addr_source.send_and_ping(msg_send_addrs)\n+\n+        responses = []\n+        self.log.info('Send many addr requests within short time to receive same response')\n+        N = 5\n+        cur_mock_time = int(time.time())\n+        for i in range(N):\n+            addr_receiver = self.nodes[0].add_p2p_connection(AddrReceiver())\n+            with self.nodes[0].assert_debug_log([\n+                    \"received: getaddr (0 bytes) peer={}\".format(i+1),\n+            ]):\n+                addr_receiver.send_and_ping(msg_getaddr())\n+                # Trigger response\n+                cur_mock_time += 5 * 60\n+                self.nodes[0].setmocktime(cur_mock_time)\n+                wait_until(addr_receiver.received_addr, timeout=30, lock=mininode_lock)",
    "path": "test/functional/p2p_getaddr_caching.py",
    "position": null,
    "original_position": 84,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "52d22a3c235bfed8a772b7cccbe470efdfa10291",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "no need for custom timeouts here.",
    "created_at": "2020-06-30T21:56:46Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r448002384",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448002384"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r448002384"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448002384/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 84,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448002684",
    "pull_request_review_id": 440385387,
    "id": 448002684,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwMjY4NA==",
    "diff_hunk": "@@ -0,0 +1,107 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test addr response caching\n+\"\"\"\n+\n+from test_framework.messages import (\n+    CAddress,\n+    NODE_NETWORK,\n+    NODE_WITNESS,\n+    msg_addr,\n+    msg_getaddr,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    mininode_lock\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    wait_until\n+)\n+import time\n+\n+ADDRS = []\n+for i in range(1000):\n+    addr = CAddress()\n+    addr.time = int(time.time())\n+    addr.nServices = NODE_NETWORK | NODE_WITNESS\n+    third_octet = int(i / 256) % 256\n+    fourth_octet = i % 256\n+    addr.ip = \"123.123.{}.{}\".format(third_octet, fourth_octet)\n+    addr.port = 8333\n+    ADDRS.append(addr)\n+\n+class AddrReceiver(P2PInterface):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.received_addrs = None\n+\n+    def on_addr(self, message):\n+        self.received_addrs = []\n+        for addr in message.addrs:\n+            self.received_addrs.append(addr.ip)\n+\n+    def received_addr(self):\n+        return self.received_addrs is not None\n+\n+\n+class AddrTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.log.info('Create connection that sends and requests addr messages')\n+        addr_source = self.nodes[0].add_p2p_connection(P2PInterface())\n+        msg_send_addrs = msg_addr()\n+\n+        self.log.info('Fill peer AddrMan with a lot of records')\n+        msg_send_addrs.addrs = ADDRS\n+        with self.nodes[0].assert_debug_log([\n+                'Added 1000 addresses from 127.0.0.1: 0 tried',\n+                'received: addr (30003 bytes) peer=0',\n+        ]):\n+            addr_source.send_and_ping(msg_send_addrs)\n+\n+        responses = []\n+        self.log.info('Send many addr requests within short time to receive same response')\n+        N = 5\n+        cur_mock_time = int(time.time())\n+        for i in range(N):\n+            addr_receiver = self.nodes[0].add_p2p_connection(AddrReceiver())\n+            with self.nodes[0].assert_debug_log([\n+                    \"received: getaddr (0 bytes) peer={}\".format(i+1),\n+            ]):\n+                addr_receiver.send_and_ping(msg_getaddr())\n+                # Trigger response\n+                cur_mock_time += 5 * 60\n+                self.nodes[0].setmocktime(cur_mock_time)\n+                wait_until(addr_receiver.received_addr, timeout=30, lock=mininode_lock)\n+                responses.append(addr_receiver.received_addrs)\n+        for response in responses[1:]:\n+            assert_equal(response, responses[0])\n+\n+        cur_mock_time += 3 * 24 * 60 * 60\n+        self.nodes[0].setmocktime(cur_mock_time)\n+\n+        self.log.info('After time passed, see a new response to addr request')\n+        last_addr_receiver = self.nodes[0].add_p2p_connection(AddrReceiver())\n+        with self.nodes[0].assert_debug_log([\n+                \"received: getaddr (0 bytes) peer={}\".format(N+1),\n+        ]):\n+            last_addr_receiver.send_and_ping(msg_getaddr())\n+            # Trigger response\n+            cur_mock_time += 5 * 60\n+            self.nodes[0].setmocktime(cur_mock_time)",
    "path": "test/functional/p2p_getaddr_caching.py",
    "position": null,
    "original_position": 100,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "52d22a3c235bfed8a772b7cccbe470efdfa10291",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't think this setmocktime is necessary.",
    "created_at": "2020-06-30T21:57:28Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r448002684",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448002684"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r448002684"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448002684/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 100,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448003195",
    "pull_request_review_id": 440385387,
    "id": 448003195,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwMzE5NQ==",
    "diff_hunk": "@@ -23,6 +23,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n                                                                                              NetPermissionFlags::PF_FORCERELAY,\n                                                                                              NetPermissionFlags::PF_NOBAN,\n                                                                                              NetPermissionFlags::PF_MEMPOOL,\n+                                                                                             NetPermissionFlags::PF_ADDR,",
    "path": "src/test/fuzz/net_permissions.cpp",
    "position": 4,
    "original_position": 4,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "52d22a3c235bfed8a772b7cccbe470efdfa10291",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This change can be squashed into commit _Add whitelist flag enabling non-cached addr sharing_",
    "created_at": "2020-06-30T21:58:46Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r448003195",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448003195"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r448003195"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448003195/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 27,
    "original_line": 27,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448202417",
    "pull_request_review_id": 440655331,
    "id": 448202417,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIwMjQxNw==",
    "diff_hunk": "@@ -251,7 +252,12 @@ class CConnman\n     void SetServices(const CService &addr, ServiceFlags nServices);\n     void MarkAddressGood(const CAddress& addr);\n     void AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddress& addrFrom, int64_t nTimePenalty = 0);\n-    std::vector<CAddress> GetAddresses();\n+\n+    // Cache is used to minimize topology leaks, so it should\n+    // be used for all non-trusted calls, for example, p2p.\n+    // A non-malicious call (from RPC or a whitelisted node)\n+    // should avoid using the cache by passing nullopt.\n+    std::vector<CAddress> GetAddresses(Optional<Network> requestor_network);",
    "path": "src/net.h",
    "position": null,
    "original_position": 18,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "52d22a3c235bfed8a772b7cccbe470efdfa10291",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Agreed, will update.",
    "created_at": "2020-07-01T08:27:50Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r448202417",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448202417"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r448202417"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448202417/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 260,
    "side": "RIGHT",
    "in_reply_to_id": 447978865
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448392147",
    "pull_request_review_id": 440908036,
    "id": 448392147,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5MjE0Nw==",
    "diff_hunk": "@@ -0,0 +1,107 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test addr response caching\n+\"\"\"\n+\n+from test_framework.messages import (\n+    CAddress,\n+    NODE_NETWORK,\n+    NODE_WITNESS,\n+    msg_addr,\n+    msg_getaddr,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    mininode_lock\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    wait_until\n+)\n+import time\n+\n+ADDRS = []\n+for i in range(1000):",
    "path": "test/functional/p2p_getaddr_caching.py",
    "position": null,
    "original_position": 28,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "d1312914a0d4d9d88c5b74ebca8fd25bc3e20bf2",
    "user": {
      "login": "pinheadmz",
      "id": 2084648,
      "node_id": "MDQ6VXNlcjIwODQ2NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pinheadmz",
      "html_url": "https://github.com/pinheadmz",
      "followers_url": "https://api.github.com/users/pinheadmz/followers",
      "following_url": "https://api.github.com/users/pinheadmz/following{/other_user}",
      "gists_url": "https://api.github.com/users/pinheadmz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pinheadmz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
      "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
      "repos_url": "https://api.github.com/users/pinheadmz/repos",
      "events_url": "https://api.github.com/users/pinheadmz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Does it make sense to start off the node with > 1000 addresses? If I understand this test correctly, after the cache timeout the only thing that changes is the sequence of the same 1000 addresses in the message. I'm not sure if its worth it but we could also ensure that different addresses were sent after the timeout.",
    "created_at": "2020-07-01T14:12:42Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r448392147",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448392147"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r448392147"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448392147/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 26,
    "side": "RIGHT",
    "in_reply_to_id": 441145065
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448398932",
    "pull_request_review_id": 440916960,
    "id": 448398932,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5ODkzMg==",
    "diff_hunk": "@@ -3329,7 +3329,13 @@ bool ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRec\n         pfrom.fSentAddr = true;\n \n         pfrom.vAddrToSend.clear();\n-        std::vector<CAddress> vAddr = connman->GetAddresses();\n+        std::vector<CAddress> vAddr;\n+        if (pfrom.HasPermission(PF_ADDR)) {\n+            vAddr = connman->GetAddresses(nullopt);\n+        } else {\n+            Network peer_network = pfrom.addr.GetNetwork();\n+            vAddr = connman->GetAddresses(peer_network);\n+        }\n         FastRandomContext insecure_rand;\n         for (const CAddress &addr : vAddr) {\n             if (!banman->IsBanned(addr)) {",
    "path": "src/net_processing.cpp",
    "position": null,
    "original_position": 14,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "52d22a3c235bfed8a772b7cccbe470efdfa10291",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In fact, I think this filtering out of banned addresses should move to `CConnman::GetAddresses()`. The only other client of that function is `getnodeaddresses` in rpc/net, and that probably doesn't want to know about banned addresses either.",
    "created_at": "2020-07-01T14:22:35Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r448398932",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448398932"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r448398932"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448398932/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3341,
    "side": "RIGHT",
    "in_reply_to_id": 447986548
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448406297",
    "pull_request_review_id": 440926898,
    "id": 448406297,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwNjI5Nw==",
    "diff_hunk": "@@ -2525,9 +2526,20 @@ void CConnman::AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddres\n     addrman.Add(vAddr, addrFrom, nTimePenalty);\n }\n \n-std::vector<CAddress> CConnman::GetAddresses()\n+std::vector<CAddress> CConnman::GetAddresses(Optional<Network> requestor_network)\n {\n-    return addrman.GetAddr();\n+    if (requestor_network) {",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 16,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "52d22a3c235bfed8a772b7cccbe470efdfa10291",
    "user": {
      "login": "pinheadmz",
      "id": 2084648,
      "node_id": "MDQ6VXNlcjIwODQ2NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pinheadmz",
      "html_url": "https://github.com/pinheadmz",
      "followers_url": "https://api.github.com/users/pinheadmz/followers",
      "following_url": "https://api.github.com/users/pinheadmz/following{/other_user}",
      "gists_url": "https://api.github.com/users/pinheadmz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pinheadmz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
      "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
      "repos_url": "https://api.github.com/users/pinheadmz/repos",
      "events_url": "https://api.github.com/users/pinheadmz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This might be an insane edge case, but if `pfrom.addr.GetNetwork()` is `NET_UNROUTABLE`, the value will be `0` (and falsey ?) and break the intent of this logic. I'm not sure how an attacker could use an unroutable address to break your cache though so probably moot.",
    "created_at": "2020-07-01T14:33:10Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r448406297",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448406297"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r448406297"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448406297/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2531,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448411682",
    "pull_request_review_id": 440934207,
    "id": 448411682,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxMTY4Mg==",
    "diff_hunk": "@@ -2525,9 +2526,20 @@ void CConnman::AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddres\n     addrman.Add(vAddr, addrFrom, nTimePenalty);\n }\n \n-std::vector<CAddress> CConnman::GetAddresses()\n+std::vector<CAddress> CConnman::GetAddresses(Optional<Network> requestor_network)\n {\n-    return addrman.GetAddr();\n+    if (requestor_network) {",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 16,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "52d22a3c235bfed8a772b7cccbe470efdfa10291",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Are you sure Optional(0) would be ``false``? Would be useful to double-check the optional spec, but I expected that any value present (including 0) would give ``true``",
    "created_at": "2020-07-01T14:40:51Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r448411682",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448411682"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r448411682"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448411682/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2531,
    "side": "RIGHT",
    "in_reply_to_id": 448406297
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448439192",
    "pull_request_review_id": 440971061,
    "id": 448439192,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQzOTE5Mg==",
    "diff_hunk": "@@ -2525,9 +2526,20 @@ void CConnman::AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddres\n     addrman.Add(vAddr, addrFrom, nTimePenalty);\n }\n \n-std::vector<CAddress> CConnman::GetAddresses()\n+std::vector<CAddress> CConnman::GetAddresses(Optional<Network> requestor_network)\n {\n-    return addrman.GetAddr();\n+    if (requestor_network) {",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 16,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "52d22a3c235bfed8a772b7cccbe470efdfa10291",
    "user": {
      "login": "pinheadmz",
      "id": 2084648,
      "node_id": "MDQ6VXNlcjIwODQ2NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pinheadmz",
      "html_url": "https://github.com/pinheadmz",
      "followers_url": "https://api.github.com/users/pinheadmz/followers",
      "following_url": "https://api.github.com/users/pinheadmz/following{/other_user}",
      "gists_url": "https://api.github.com/users/pinheadmz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pinheadmz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
      "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
      "repos_url": "https://api.github.com/users/pinheadmz/repos",
      "events_url": "https://api.github.com/users/pinheadmz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Confirmed, you are right. Thanks!",
    "created_at": "2020-07-01T15:21:36Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r448439192",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448439192"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r448439192"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448439192/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2531,
    "side": "RIGHT",
    "in_reply_to_id": 448406297
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449755317",
    "pull_request_review_id": 442597934,
    "id": 449755317,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc1NTMxNw==",
    "diff_hunk": "@@ -0,0 +1,107 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test addr response caching\n+\"\"\"\n+\n+from test_framework.messages import (\n+    CAddress,\n+    NODE_NETWORK,\n+    NODE_WITNESS,\n+    msg_addr,\n+    msg_getaddr,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    mininode_lock\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    wait_until\n+)\n+import time\n+\n+ADDRS = []\n+for i in range(1000):\n+    addr = CAddress()\n+    addr.time = int(time.time())\n+    addr.nServices = NODE_NETWORK | NODE_WITNESS\n+    third_octet = int(i / 256) % 256\n+    fourth_octet = i % 256\n+    addr.ip = \"123.123.{}.{}\".format(third_octet, fourth_octet)\n+    addr.port = 8333\n+    ADDRS.append(addr)\n+\n+class AddrReceiver(P2PInterface):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.received_addrs = None\n+\n+    def on_addr(self, message):\n+        self.received_addrs = []\n+        for addr in message.addrs:\n+            self.received_addrs.append(addr.ip)\n+\n+    def received_addr(self):\n+        return self.received_addrs is not None\n+\n+\n+class AddrTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.log.info('Create connection that sends and requests addr messages')\n+        addr_source = self.nodes[0].add_p2p_connection(P2PInterface())\n+        msg_send_addrs = msg_addr()\n+\n+        self.log.info('Fill peer AddrMan with a lot of records')\n+        msg_send_addrs.addrs = ADDRS\n+        with self.nodes[0].assert_debug_log([\n+                'Added 1000 addresses from 127.0.0.1: 0 tried',\n+                'received: addr (30003 bytes) peer=0',\n+        ]):\n+            addr_source.send_and_ping(msg_send_addrs)\n+\n+        responses = []\n+        self.log.info('Send many addr requests within short time to receive same response')\n+        N = 5\n+        cur_mock_time = int(time.time())\n+        for i in range(N):\n+            addr_receiver = self.nodes[0].add_p2p_connection(AddrReceiver())\n+            with self.nodes[0].assert_debug_log([\n+                    \"received: getaddr (0 bytes) peer={}\".format(i+1),\n+            ]):\n+                addr_receiver.send_and_ping(msg_getaddr())\n+                # Trigger response\n+                cur_mock_time += 5 * 60",
    "path": "test/functional/p2p_getaddr_caching.py",
    "position": null,
    "original_position": 82,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "52d22a3c235bfed8a772b7cccbe470efdfa10291",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "See AVG_ADDRESS_BROADCAST_INTERVAL, this code is necessary to bypass it (same below).\r\nMaybe I don't understand your suggestion.",
    "created_at": "2020-07-04T09:09:13Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r449755317",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449755317"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r449755317"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449755317/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 82,
    "side": "RIGHT",
    "in_reply_to_id": 448002310
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449785930",
    "pull_request_review_id": 442618734,
    "id": 449785930,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4NTkzMA==",
    "diff_hunk": "@@ -0,0 +1,107 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test addr response caching\n+\"\"\"\n+\n+from test_framework.messages import (\n+    CAddress,\n+    NODE_NETWORK,\n+    NODE_WITNESS,\n+    msg_addr,\n+    msg_getaddr,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    mininode_lock\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    wait_until\n+)\n+import time\n+\n+ADDRS = []\n+for i in range(1000):\n+    addr = CAddress()\n+    addr.time = int(time.time())\n+    addr.nServices = NODE_NETWORK | NODE_WITNESS\n+    third_octet = int(i / 256) % 256\n+    fourth_octet = i % 256\n+    addr.ip = \"123.123.{}.{}\".format(third_octet, fourth_octet)\n+    addr.port = 8333\n+    ADDRS.append(addr)\n+\n+class AddrReceiver(P2PInterface):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.received_addrs = None\n+\n+    def on_addr(self, message):\n+        self.received_addrs = []\n+        for addr in message.addrs:\n+            self.received_addrs.append(addr.ip)\n+\n+    def received_addr(self):\n+        return self.received_addrs is not None\n+\n+\n+class AddrTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.log.info('Create connection that sends and requests addr messages')\n+        addr_source = self.nodes[0].add_p2p_connection(P2PInterface())\n+        msg_send_addrs = msg_addr()\n+\n+        self.log.info('Fill peer AddrMan with a lot of records')\n+        msg_send_addrs.addrs = ADDRS\n+        with self.nodes[0].assert_debug_log([\n+                'Added 1000 addresses from 127.0.0.1: 0 tried',\n+                'received: addr (30003 bytes) peer=0',\n+        ]):\n+            addr_source.send_and_ping(msg_send_addrs)\n+\n+        responses = []\n+        self.log.info('Send many addr requests within short time to receive same response')\n+        N = 5\n+        cur_mock_time = int(time.time())\n+        for i in range(N):\n+            addr_receiver = self.nodes[0].add_p2p_connection(AddrReceiver())\n+            with self.nodes[0].assert_debug_log([\n+                    \"received: getaddr (0 bytes) peer={}\".format(i+1),\n+            ]):\n+                addr_receiver.send_and_ping(msg_getaddr())\n+                # Trigger response\n+                cur_mock_time += 5 * 60",
    "path": "test/functional/p2p_getaddr_caching.py",
    "position": null,
    "original_position": 82,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "52d22a3c235bfed8a772b7cccbe470efdfa10291",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ah, you're right. I misunderstood how the ADDR response is batched/delayed.",
    "created_at": "2020-07-04T16:22:34Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r449785930",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449785930"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r449785930"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449785930/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 82,
    "side": "RIGHT",
    "in_reply_to_id": 448002310
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449785955",
    "pull_request_review_id": 442618758,
    "id": 449785955,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4NTk1NQ==",
    "diff_hunk": "@@ -0,0 +1,107 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test addr response caching\n+\"\"\"\n+\n+from test_framework.messages import (\n+    CAddress,\n+    NODE_NETWORK,\n+    NODE_WITNESS,\n+    msg_addr,\n+    msg_getaddr,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    mininode_lock\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    wait_until\n+)\n+import time\n+\n+ADDRS = []\n+for i in range(1000):\n+    addr = CAddress()\n+    addr.time = int(time.time())\n+    addr.nServices = NODE_NETWORK | NODE_WITNESS\n+    third_octet = int(i / 256) % 256\n+    fourth_octet = i % 256\n+    addr.ip = \"123.123.{}.{}\".format(third_octet, fourth_octet)\n+    addr.port = 8333\n+    ADDRS.append(addr)\n+\n+class AddrReceiver(P2PInterface):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.received_addrs = None\n+\n+    def on_addr(self, message):\n+        self.received_addrs = []\n+        for addr in message.addrs:\n+            self.received_addrs.append(addr.ip)\n+\n+    def received_addr(self):\n+        return self.received_addrs is not None\n+\n+\n+class AddrTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.log.info('Create connection that sends and requests addr messages')\n+        addr_source = self.nodes[0].add_p2p_connection(P2PInterface())\n+        msg_send_addrs = msg_addr()\n+\n+        self.log.info('Fill peer AddrMan with a lot of records')\n+        msg_send_addrs.addrs = ADDRS\n+        with self.nodes[0].assert_debug_log([\n+                'Added 1000 addresses from 127.0.0.1: 0 tried',\n+                'received: addr (30003 bytes) peer=0',\n+        ]):\n+            addr_source.send_and_ping(msg_send_addrs)\n+\n+        responses = []\n+        self.log.info('Send many addr requests within short time to receive same response')\n+        N = 5\n+        cur_mock_time = int(time.time())\n+        for i in range(N):\n+            addr_receiver = self.nodes[0].add_p2p_connection(AddrReceiver())\n+            with self.nodes[0].assert_debug_log([\n+                    \"received: getaddr (0 bytes) peer={}\".format(i+1),\n+            ]):\n+                addr_receiver.send_and_ping(msg_getaddr())\n+                # Trigger response\n+                cur_mock_time += 5 * 60\n+                self.nodes[0].setmocktime(cur_mock_time)\n+                wait_until(addr_receiver.received_addr, timeout=30, lock=mininode_lock)\n+                responses.append(addr_receiver.received_addrs)\n+        for response in responses[1:]:\n+            assert_equal(response, responses[0])\n+\n+        cur_mock_time += 3 * 24 * 60 * 60\n+        self.nodes[0].setmocktime(cur_mock_time)\n+\n+        self.log.info('After time passed, see a new response to addr request')\n+        last_addr_receiver = self.nodes[0].add_p2p_connection(AddrReceiver())\n+        with self.nodes[0].assert_debug_log([\n+                \"received: getaddr (0 bytes) peer={}\".format(N+1),\n+        ]):\n+            last_addr_receiver.send_and_ping(msg_getaddr())\n+            # Trigger response\n+            cur_mock_time += 5 * 60\n+            self.nodes[0].setmocktime(cur_mock_time)",
    "path": "test/functional/p2p_getaddr_caching.py",
    "position": null,
    "original_position": 100,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "52d22a3c235bfed8a772b7cccbe470efdfa10291",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "As above, this is incorrect. Disregard.",
    "created_at": "2020-07-04T16:23:01Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r449785955",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449785955"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r449785955"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449785955/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 100,
    "side": "RIGHT",
    "in_reply_to_id": 448002684
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449787348",
    "pull_request_review_id": 442619727,
    "id": 449787348,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4NzM0OA==",
    "diff_hunk": "@@ -2527,7 +2528,24 @@ void CConnman::AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddres\n \n std::vector<CAddress> CConnman::GetAddresses()\n {\n-    return addrman.GetAddr();\n+    std::vector<CAddress> addresses;\n+    for (CAddress addr: addrman.GetAddr()) {\n+        if (!m_banman->IsBanned(addr)) {\n+            addresses.push_back(addr);",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 16,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "a5131685d1e9a079b695dc8ec432e8ba8b706798",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is less efficient than the current code because you're creating a new vector and individually copying elements to it. This is also going to involve a lot of reallocations, since `addresses` can potentially grow as large as 2500.\r\n\r\nInstead, assign `addresses` to be the return value from `GetAddr()` (which should be a move because of RVO), and then use the [remove-erase idiom](https://en.cppreference.com/w/cpp/algorithm/remove) to delete the unwanted elements from `addresses`. See https://github.com/bitcoin/bitcoin/blob/5ec19df687c2a429dd8872d640ce88fdc06ded9b/src/net.cpp#L917 for an example of that in our codebase.",
    "created_at": "2020-07-04T16:41:35Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r449787348",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449787348"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r449787348"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449787348/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2534,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449787438",
    "pull_request_review_id": 442619727,
    "id": 449787438,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4NzQzOA==",
    "diff_hunk": "@@ -252,6 +253,11 @@ class CConnman\n     void MarkAddressGood(const CAddress& addr);\n     void AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddress& addrFrom, int64_t nTimePenalty = 0);\n     std::vector<CAddress> GetAddresses();\n+    // Cache is used to minimize topology leaks, so it should",
    "path": "src/net.h",
    "position": null,
    "original_position": 12,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "a5131685d1e9a079b695dc8ec432e8ba8b706798",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: prefer to use doxygen-style comments for function declaration comments.",
    "created_at": "2020-07-04T16:42:52Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r449787438",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449787438"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r449787438"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449787438/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 256,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449787497",
    "pull_request_review_id": 442619727,
    "id": 449787497,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4NzQ5Nw==",
    "diff_hunk": "@@ -252,6 +253,11 @@ class CConnman\n     void MarkAddressGood(const CAddress& addr);\n     void AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddress& addrFrom, int64_t nTimePenalty = 0);\n     std::vector<CAddress> GetAddresses();\n+    // Cache is used to minimize topology leaks, so it should\n+    // be used for all non-trusted calls, for example, p2p.\n+    // A non-malicious call (from RPC or a whitelisted node)\n+    // should avoid using the cache by passing nullopt.",
    "path": "src/net.h",
    "position": null,
    "original_position": 15,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "a5131685d1e9a079b695dc8ec432e8ba8b706798",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This comment about nullopt is outdated",
    "created_at": "2020-07-04T16:44:12Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r449787497",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449787497"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r449787497"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449787497/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 259,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449787907",
    "pull_request_review_id": 442619727,
    "id": 449787907,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4NzkwNw==",
    "diff_hunk": "@@ -416,6 +422,25 @@ class CConnman\n     std::atomic<NodeId> nLastNodeId{0};\n     unsigned int nPrevNodeCount{0};\n \n+    // Cache responses to addr requests to minimize privacy leak.\n+    // Attack example: scraping addrs in real-time may allow an attacker\n+    // to infer new connections of the victim by detecting new records\n+    // with fresh timestamps (per self-announcement).\n+    struct CachedAddrResponse {\n+        std::vector<CAddress> m_addrs_response_cache;\n+        std::chrono::microseconds m_update_addr_response{0};\n+    };\n+\n+    // Addr responses stored in different caches\n+    // per network prevent cross-network node identification.\n+    // If a node for example is multi-homed under Tor and IPv6,\n+    // a single cache (or no cache at all) would let an attacker\n+    // to easily detect that it is the same node by comparing responses.\n+    // The used memory equals to 1000 CAddress records (or around 32 bytes) per",
    "path": "src/net.h",
    "position": null,
    "original_position": 38,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "a5131685d1e9a079b695dc8ec432e8ba8b706798",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Where did you get 1000 from? The maximum number of `CAddress` objects returned by `CAddrMan::GetAddr()` is `ADDRMAN_GETADDR_MAX`(2500)",
    "created_at": "2020-07-04T16:49:17Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r449787907",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449787907"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r449787907"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449787907/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 445,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449788393",
    "pull_request_review_id": 442619727,
    "id": 449788393,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4ODM5Mw==",
    "diff_hunk": "@@ -2527,7 +2528,24 @@ void CConnman::AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddres\n \n std::vector<CAddress> CConnman::GetAddresses()\n {\n-    return addrman.GetAddr();\n+    std::vector<CAddress> addresses;\n+    for (CAddress addr: addrman.GetAddr()) {\n+        if (!m_banman->IsBanned(addr)) {\n+            addresses.push_back(addr);\n+        }\n+    }\n+    return addresses;\n+}\n+\n+std::vector<CAddress> CConnman::GetAddresses(Network requestor_network)\n+{\n+    const auto current_time = GetTime<std::chrono::microseconds>();\n+    if (m_addr_response_caches.find(requestor_network) == m_addr_response_caches.end() ||\n+        m_addr_response_caches[requestor_network].m_update_addr_response < current_time) {\n+        m_addr_response_caches[requestor_network].m_addrs_response_cache = GetAddresses();\n+        m_addr_response_caches[requestor_network].m_update_addr_response = current_time + std::chrono::hours(21) + GetRandMillis(std::chrono::hours(6));\n+    }\n+    return m_addr_response_caches[requestor_network].m_addrs_response_cache;",
    "path": "src/net.cpp",
    "position": 22,
    "original_position": 30,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "a5131685d1e9a079b695dc8ec432e8ba8b706798",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It's a bit of a shame that the return has to copy the vector rather than eg returning a reference to const. But it's a lot better than the current code, which iterates through the entire AddrMan on each GetAddresses call. A follow-up PR could potentially make this more efficient.",
    "created_at": "2020-07-04T16:56:11Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r449788393",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449788393"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r449788393"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449788393/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2550,
    "original_line": 2550,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449789621",
    "pull_request_review_id": 442619727,
    "id": 449789621,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4OTYyMQ==",
    "diff_hunk": "@@ -3326,12 +3326,15 @@ void ProcessMessage(\n         pfrom.fSentAddr = true;\n \n         pfrom.vAddrToSend.clear();\n-        std::vector<CAddress> vAddr = connman->GetAddresses();\n+        std::vector<CAddress> vAddr;\n+        if (pfrom.HasPermission(PF_ADDR)) {\n+            vAddr = connman->GetAddresses();\n+        } else {\n+            vAddr = connman->GetAddresses(pfrom.addr.GetNetwork());\n+        }\n         FastRandomContext insecure_rand;\n         for (const CAddress &addr : vAddr) {\n-            if (!banman->IsBanned(addr)) {\n-                pfrom.PushAddress(addr, insecure_rand);\n-            }\n+            pfrom.PushAddress(addr, insecure_rand);",
    "path": "src/net_processing.cpp",
    "position": 26,
    "original_position": 16,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "a5131685d1e9a079b695dc8ec432e8ba8b706798",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Well this is fascinating. Because of the way we call `PushAddress()` serially with the elements of the vector in order, and each call after `vAddrToSend` is full evicts a random element, then repeatedly sending `GETADDR` will result in `ADDR` responses that leak the entire `m_addr_response_caches[requestor_network].m_addrs_response_cache` _and the order of elements in that vector_. I don't think that's a problem, because the cache is basically public data, but it's an interesting outcome of the way the `vAddrToSend` is constructed.\r\n\r\nWe should probably limit `CachedAddrResponse.m_addrs_response_cache` to 1000 elements, possibly by adding a max_elements value to the `CAddrMan::GetAddr()` function. Sorry to keep asking you to go deeper into `CAddrMan`!",
    "created_at": "2020-07-04T17:13:26Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r449789621",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449789621"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r449789621"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449789621/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3488,
    "original_line": 3488,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449790883",
    "pull_request_review_id": 442619727,
    "id": 449790883,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5MDg4Mw==",
    "diff_hunk": "@@ -0,0 +1,107 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test addr response caching\n+\"\"\"\n+\n+from test_framework.messages import (\n+    CAddress,\n+    NODE_NETWORK,\n+    NODE_WITNESS,\n+    msg_addr,\n+    msg_getaddr,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    mininode_lock\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    wait_until\n+)\n+import time\n+\n+ADDRS = []\n+for i in range(1000):",
    "path": "test/functional/p2p_getaddr_caching.py",
    "position": null,
    "original_position": 28,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "d1312914a0d4d9d88c5b74ebca8fd25bc3e20bf2",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think that @mzumsande is right. Because these go into the same bucket, only a small number of them will be kept in addrman, and only 23% of those will be returned by `CAddrMan::GetAddr()`. I haven't verified the numbers 64 and 14, but that sounds right to me.\r\n\r\nI suspect if we changed this to load >4000 addresses into addrman, then the test would fail, because responses to `GETADDR` messages would be different (see my comments about how the cache interacts with `vAddrToSend`. We should make that change, and also fix the code so it does what we're expecting!",
    "created_at": "2020-07-04T17:30:45Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r449790883",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449790883"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r449790883"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449790883/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 26,
    "side": "RIGHT",
    "in_reply_to_id": 441145065
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/450676019",
    "pull_request_review_id": 443646748,
    "id": 450676019,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3NjAxOQ==",
    "diff_hunk": "@@ -2527,7 +2528,24 @@ void CConnman::AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddres\n \n std::vector<CAddress> CConnman::GetAddresses()\n {\n-    return addrman.GetAddr();\n+    std::vector<CAddress> addresses;\n+    for (CAddress addr: addrman.GetAddr()) {\n+        if (!m_banman->IsBanned(addr)) {\n+            addresses.push_back(addr);",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 16,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "a5131685d1e9a079b695dc8ec432e8ba8b706798",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Right, I was considering this option, but for some reason I thought it's even more expensive... Now that I re-read [this explainer](https://www.geeksforgeeks.org/difference-between-stdremove-and-vectorerase-for-vectors/) it actually makes sense. Thanks!",
    "created_at": "2020-07-07T07:53:14Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r450676019",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/450676019"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r450676019"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/450676019/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2534,
    "side": "RIGHT",
    "in_reply_to_id": 449787348
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/450702751",
    "pull_request_review_id": 443682494,
    "id": 450702751,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwMjc1MQ==",
    "diff_hunk": "@@ -416,6 +422,25 @@ class CConnman\n     std::atomic<NodeId> nLastNodeId{0};\n     unsigned int nPrevNodeCount{0};\n \n+    // Cache responses to addr requests to minimize privacy leak.\n+    // Attack example: scraping addrs in real-time may allow an attacker\n+    // to infer new connections of the victim by detecting new records\n+    // with fresh timestamps (per self-announcement).\n+    struct CachedAddrResponse {\n+        std::vector<CAddress> m_addrs_response_cache;\n+        std::chrono::microseconds m_update_addr_response{0};\n+    };\n+\n+    // Addr responses stored in different caches\n+    // per network prevent cross-network node identification.\n+    // If a node for example is multi-homed under Tor and IPv6,\n+    // a single cache (or no cache at all) would let an attacker\n+    // to easily detect that it is the same node by comparing responses.\n+    // The used memory equals to 1000 CAddress records (or around 32 bytes) per",
    "path": "src/net.h",
    "position": null,
    "original_position": 38,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "a5131685d1e9a079b695dc8ec432e8ba8b706798",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You are right, 1000 limit is applied later, \"receiver rejects addr messages larger than 1000\"",
    "created_at": "2020-07-07T08:40:45Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r450702751",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/450702751"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r450702751"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/450702751/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 445,
    "side": "RIGHT",
    "in_reply_to_id": 449787907
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/450763661",
    "pull_request_review_id": 443761086,
    "id": 450763661,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc2MzY2MQ==",
    "diff_hunk": "@@ -3326,12 +3326,15 @@ void ProcessMessage(\n         pfrom.fSentAddr = true;\n \n         pfrom.vAddrToSend.clear();\n-        std::vector<CAddress> vAddr = connman->GetAddresses();\n+        std::vector<CAddress> vAddr;\n+        if (pfrom.HasPermission(PF_ADDR)) {\n+            vAddr = connman->GetAddresses();\n+        } else {\n+            vAddr = connman->GetAddresses(pfrom.addr.GetNetwork());\n+        }\n         FastRandomContext insecure_rand;\n         for (const CAddress &addr : vAddr) {\n-            if (!banman->IsBanned(addr)) {\n-                pfrom.PushAddress(addr, insecure_rand);\n-            }\n+            pfrom.PushAddress(addr, insecure_rand);",
    "path": "src/net_processing.cpp",
    "position": 26,
    "original_position": 16,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "a5131685d1e9a079b695dc8ec432e8ba8b706798",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Can we discuss this a bit more?\r\nI don't mind adding that code, I just don't see the motivation. As you point out, this particular leak doesn't matter, because cache is public data. Why limiting to 1000? Maybe another motivation is saving 300 KB of RAM?\r\n",
    "created_at": "2020-07-07T10:25:17Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r450763661",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/450763661"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r450763661"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/450763661/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3488,
    "original_line": 3488,
    "side": "RIGHT",
    "in_reply_to_id": 449789621
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/450774323",
    "pull_request_review_id": 443774732,
    "id": 450774323,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc3NDMyMw==",
    "diff_hunk": "@@ -3326,12 +3326,15 @@ void ProcessMessage(\n         pfrom.fSentAddr = true;\n \n         pfrom.vAddrToSend.clear();\n-        std::vector<CAddress> vAddr = connman->GetAddresses();\n+        std::vector<CAddress> vAddr;\n+        if (pfrom.HasPermission(PF_ADDR)) {\n+            vAddr = connman->GetAddresses();\n+        } else {\n+            vAddr = connman->GetAddresses(pfrom.addr.GetNetwork());\n+        }\n         FastRandomContext insecure_rand;\n         for (const CAddress &addr : vAddr) {\n-            if (!banman->IsBanned(addr)) {\n-                pfrom.PushAddress(addr, insecure_rand);\n-            }\n+            pfrom.PushAddress(addr, insecure_rand);",
    "path": "src/net_processing.cpp",
    "position": 26,
    "original_position": 16,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "a5131685d1e9a079b695dc8ec432e8ba8b706798",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "As someone [points out](https://github.com/bitcoin/bitcoin/issues/19458), there's a slight non-useful inconsistency. Do you think we should address it within this PR?",
    "created_at": "2020-07-07T10:46:38Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r450774323",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/450774323"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r450774323"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/450774323/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3488,
    "original_line": 3488,
    "side": "RIGHT",
    "in_reply_to_id": 449789621
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/450981679",
    "pull_request_review_id": 444043509,
    "id": 450981679,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk4MTY3OQ==",
    "diff_hunk": "@@ -3326,12 +3326,15 @@ void ProcessMessage(\n         pfrom.fSentAddr = true;\n \n         pfrom.vAddrToSend.clear();\n-        std::vector<CAddress> vAddr = connman->GetAddresses();\n+        std::vector<CAddress> vAddr;\n+        if (pfrom.HasPermission(PF_ADDR)) {\n+            vAddr = connman->GetAddresses();\n+        } else {\n+            vAddr = connman->GetAddresses(pfrom.addr.GetNetwork());\n+        }\n         FastRandomContext insecure_rand;\n         for (const CAddress &addr : vAddr) {\n-            if (!banman->IsBanned(addr)) {\n-                pfrom.PushAddress(addr, insecure_rand);\n-            }\n+            pfrom.PushAddress(addr, insecure_rand);",
    "path": "src/net_processing.cpp",
    "position": 26,
    "original_position": 16,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "a5131685d1e9a079b695dc8ec432e8ba8b706798",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> I just don't see the motivation\r\n\r\nAs far as I can tell, the intent for this PR was that for each network, we'd create a cache of 1000 addresses, and serve the same list of 1000 addresses (less banned/discouraged) in response to each GETADDR request. Indeed, that's what the functional test is testing for. Instead, we create a cache of 2500, and serve a random 1000 of them to each GETADDR request, with the following distribution:\r\n\r\n![image](https://user-images.githubusercontent.com/1063656/86808428-d9a6ff80-c048-11ea-9018-b4c357b83064.png)\r\n\r\n(ie the last address record in the cache always appears in the ADDR response, whereas the first 1000 appear with a probability of ~0.22)\r\n\r\nThat's very unexpected! The fact that neither the author nor any of the reviewers realised that is motivation enough to make the code easier to understand.",
    "created_at": "2020-07-07T16:11:10Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r450981679",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/450981679"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r450981679"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/450981679/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3488,
    "original_line": 3488,
    "side": "RIGHT",
    "in_reply_to_id": 449789621
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/450999333",
    "pull_request_review_id": 444067232,
    "id": 450999333,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk5OTMzMw==",
    "diff_hunk": "@@ -3326,12 +3326,15 @@ void ProcessMessage(\n         pfrom.fSentAddr = true;\n \n         pfrom.vAddrToSend.clear();\n-        std::vector<CAddress> vAddr = connman->GetAddresses();\n+        std::vector<CAddress> vAddr;\n+        if (pfrom.HasPermission(PF_ADDR)) {\n+            vAddr = connman->GetAddresses();\n+        } else {\n+            vAddr = connman->GetAddresses(pfrom.addr.GetNetwork());\n+        }\n         FastRandomContext insecure_rand;\n         for (const CAddress &addr : vAddr) {\n-            if (!banman->IsBanned(addr)) {\n-                pfrom.PushAddress(addr, insecure_rand);\n-            }\n+            pfrom.PushAddress(addr, insecure_rand);",
    "path": "src/net_processing.cpp",
    "position": 26,
    "original_position": 16,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "a5131685d1e9a079b695dc8ec432e8ba8b706798",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Right, I guess I'll put together a separate commit just to address 2500/1000 confusion we had even before this PR",
    "created_at": "2020-07-07T16:39:38Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r450999333",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/450999333"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r450999333"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/450999333/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3488,
    "original_line": 3488,
    "side": "RIGHT",
    "in_reply_to_id": 449789621
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451006518",
    "pull_request_review_id": 444076749,
    "id": 451006518,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwNjUxOA==",
    "diff_hunk": "@@ -3326,12 +3326,15 @@ void ProcessMessage(\n         pfrom.fSentAddr = true;\n \n         pfrom.vAddrToSend.clear();\n-        std::vector<CAddress> vAddr = connman->GetAddresses();\n+        std::vector<CAddress> vAddr;\n+        if (pfrom.HasPermission(PF_ADDR)) {\n+            vAddr = connman->GetAddresses();\n+        } else {\n+            vAddr = connman->GetAddresses(pfrom.addr.GetNetwork());\n+        }\n         FastRandomContext insecure_rand;\n         for (const CAddress &addr : vAddr) {\n-            if (!banman->IsBanned(addr)) {\n-                pfrom.PushAddress(addr, insecure_rand);\n-            }\n+            pfrom.PushAddress(addr, insecure_rand);",
    "path": "src/net_processing.cpp",
    "position": 26,
    "original_position": 16,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "a5131685d1e9a079b695dc8ec432e8ba8b706798",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> I'll put together a separate commit just to address 2500/1000 confusion\r\n\r\nThat'd be great. I think it can be a separate PR. My suggestion: remove the `ADDRMAN_GETADDR_MAX_PCT` and `ADDRMAN_GETADDR_MAX` constants from addrman and make it the caller's responsibility to set max records/percentage values. Net processing can use 1000/23 and rpc/net can set no max, potentially exposing all address records in addrman to the client.",
    "created_at": "2020-07-07T16:51:26Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r451006518",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451006518"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r451006518"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451006518/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3488,
    "original_line": 3488,
    "side": "RIGHT",
    "in_reply_to_id": 449789621
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451099313",
    "pull_request_review_id": 444194447,
    "id": 451099313,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA5OTMxMw==",
    "diff_hunk": "@@ -3326,12 +3326,15 @@ void ProcessMessage(\n         pfrom.fSentAddr = true;\n \n         pfrom.vAddrToSend.clear();\n-        std::vector<CAddress> vAddr = connman->GetAddresses();\n+        std::vector<CAddress> vAddr;\n+        if (pfrom.HasPermission(PF_ADDR)) {\n+            vAddr = connman->GetAddresses();\n+        } else {\n+            vAddr = connman->GetAddresses(pfrom.addr.GetNetwork());\n+        }\n         FastRandomContext insecure_rand;\n         for (const CAddress &addr : vAddr) {\n-            if (!banman->IsBanned(addr)) {\n-                pfrom.PushAddress(addr, insecure_rand);\n-            }\n+            pfrom.PushAddress(addr, insecure_rand);",
    "path": "src/net_processing.cpp",
    "position": 26,
    "original_position": 16,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "a5131685d1e9a079b695dc8ec432e8ba8b706798",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@jnewbery I think that's the right approach.",
    "created_at": "2020-07-07T19:40:16Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r451099313",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451099313"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r451099313"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451099313/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3488,
    "original_line": 3488,
    "side": "RIGHT",
    "in_reply_to_id": 449789621
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451383066",
    "pull_request_review_id": 444536497,
    "id": 451383066,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4MzA2Ng==",
    "diff_hunk": "@@ -3326,12 +3326,15 @@ void ProcessMessage(\n         pfrom.fSentAddr = true;\n \n         pfrom.vAddrToSend.clear();\n-        std::vector<CAddress> vAddr = connman->GetAddresses();\n+        std::vector<CAddress> vAddr;\n+        if (pfrom.HasPermission(PF_ADDR)) {\n+            vAddr = connman->GetAddresses();\n+        } else {\n+            vAddr = connman->GetAddresses(pfrom.addr.GetNetwork());\n+        }\n         FastRandomContext insecure_rand;\n         for (const CAddress &addr : vAddr) {\n-            if (!banman->IsBanned(addr)) {\n-                pfrom.PushAddress(addr, insecure_rand);\n-            }\n+            pfrom.PushAddress(addr, insecure_rand);",
    "path": "src/net_processing.cpp",
    "position": 26,
    "original_position": 16,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "a5131685d1e9a079b695dc8ec432e8ba8b706798",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Added the basic fix and updated the test, leaving moving responsibilities for a future PR.",
    "created_at": "2020-07-08T08:45:41Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r451383066",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451383066"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r451383066"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451383066/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3488,
    "original_line": 3488,
    "side": "RIGHT",
    "in_reply_to_id": 449789621
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451567900",
    "pull_request_review_id": 444795477,
    "id": 451567900,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU2NzkwMA==",
    "diff_hunk": "@@ -2443,7 +2443,7 @@ void ProcessMessage(\n         vRecv >> vAddr;\n \n         // Don't want addr from older versions unless seeding\n-        if (pfrom.nVersion < CADDR_TIME_VERSION && connman->GetAddressCount() > 1000)\n+        if (pfrom.nVersion < CADDR_TIME_VERSION && connman->GetAddressCount() > ADDRMAN_GETADDR_MAX)",
    "path": "src/net_processing.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "8934f6051a344eadfedd063a5ee5d81e7a31526d",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think it'd be more appropriate to use `MAX_ADDR_TO_SEND` as the constant here (and below)",
    "created_at": "2020-07-08T14:00:59Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r451567900",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451567900"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r451567900"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451567900/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2446,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451583970",
    "pull_request_review_id": 444795477,
    "id": 451583970,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU4Mzk3MA==",
    "diff_hunk": "@@ -157,7 +157,7 @@ class CAddrInfo : public CAddress\n #define ADDRMAN_GETADDR_MAX_PCT 23\n \n //! the maximum number of nodes to return in a getaddr call\n-#define ADDRMAN_GETADDR_MAX 2500\n+#define ADDRMAN_GETADDR_MAX 1000",
    "path": "src/addrman.h",
    "position": 5,
    "original_position": 5,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "8934f6051a344eadfedd063a5ee5d81e7a31526d",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe add a static_assert in net.h that `MAX_ADDR_TO_SEND` is the same as `ADDRMAN_GETADDR_MAX` (with a TODO to remove `ADDRMAN_GETADDR_MAX`)",
    "created_at": "2020-07-08T14:21:51Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r451583970",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451583970"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r451583970"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451583970/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 160,
    "original_line": 160,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451585494",
    "pull_request_review_id": 444795477,
    "id": 451585494,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU4NTQ5NA==",
    "diff_hunk": "@@ -416,6 +424,25 @@ class CConnman\n     std::atomic<NodeId> nLastNodeId{0};\n     unsigned int nPrevNodeCount{0};\n \n+    // Cache responses to addr requests to minimize privacy leak.",
    "path": "src/net.h",
    "position": null,
    "original_position": 26,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "8934f6051a344eadfedd063a5ee5d81e7a31526d",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: please doxygen-format these comments too",
    "created_at": "2020-07-08T14:23:49Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r451585494",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451585494"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r451585494"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451585494/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 427,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451597127",
    "pull_request_review_id": 444795477,
    "id": 451597127,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU5NzEyNw==",
    "diff_hunk": "@@ -0,0 +1,100 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test addr response caching\"\"\"\n+\n+from test_framework.messages import (\n+    CAddress,\n+    NODE_NETWORK,\n+    NODE_WITNESS,\n+    msg_addr,\n+    msg_getaddr,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    mininode_lock\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    wait_until\n+)\n+import time\n+\n+def gen_addrs(n):\n+    addrs = []\n+    for i in range(n):\n+        addr = CAddress()\n+        addr.time = int(time.time())\n+        addr.nServices = NODE_NETWORK | NODE_WITNESS\n+        # Use first octets to occupy different AddrMan buckets\n+        first_octet = i >> 8\n+        second_octet = i % 256\n+        addr.ip = \"{}.{}.1.1\".format(first_octet, second_octet)\n+        addr.port = 8333\n+        addrs.append(addr)\n+    return addrs\n+\n+class AddrReceiver(P2PInterface):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.received_addrs = None\n+\n+    def on_addr(self, message):\n+        self.received_addrs = []\n+        for addr in message.addrs:\n+            self.received_addrs.append(addr.ip)\n+\n+    def received_addr(self):\n+        return self.received_addrs is not None\n+\n+\n+class AddrTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.log.info('Create connection that sends and requests addr messages')\n+        addr_source = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        msg_send_addrs = msg_addr()\n+        self.log.info('Fill peer AddrMan with a lot of records')\n+        addrs = gen_addrs(10000)\n+        for i in range(10):\n+            msg_send_addrs.addrs = addrs[i * 1000:(i + 1) * 1000]\n+            addr_source.send_and_ping(msg_send_addrs)",
    "path": "test/functional/p2p_getaddr_caching.py",
    "position": null,
    "original_position": 68,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "8934f6051a344eadfedd063a5ee5d81e7a31526d",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This doesn't appear to fill the addrman with 10,000 address records. If I run the `getnodeaddresses` RPC after this repeatedly and keep a set of all of the address records returned, I only get to around 3500 (it varies on each test run).",
    "created_at": "2020-07-08T14:39:16Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r451597127",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451597127"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r451597127"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451597127/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 65,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 76,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451811788",
    "pull_request_review_id": 445111655,
    "id": 451811788,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxMTc4OA==",
    "diff_hunk": "@@ -0,0 +1,100 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test addr response caching\"\"\"\n+\n+from test_framework.messages import (\n+    CAddress,\n+    NODE_NETWORK,\n+    NODE_WITNESS,\n+    msg_addr,\n+    msg_getaddr,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    mininode_lock\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    wait_until\n+)\n+import time\n+\n+def gen_addrs(n):\n+    addrs = []\n+    for i in range(n):\n+        addr = CAddress()\n+        addr.time = int(time.time())\n+        addr.nServices = NODE_NETWORK | NODE_WITNESS\n+        # Use first octets to occupy different AddrMan buckets\n+        first_octet = i >> 8\n+        second_octet = i % 256\n+        addr.ip = \"{}.{}.1.1\".format(first_octet, second_octet)\n+        addr.port = 8333\n+        addrs.append(addr)\n+    return addrs\n+\n+class AddrReceiver(P2PInterface):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.received_addrs = None\n+\n+    def on_addr(self, message):\n+        self.received_addrs = []\n+        for addr in message.addrs:\n+            self.received_addrs.append(addr.ip)\n+\n+    def received_addr(self):\n+        return self.received_addrs is not None\n+\n+\n+class AddrTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.log.info('Create connection that sends and requests addr messages')\n+        addr_source = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        msg_send_addrs = msg_addr()\n+        self.log.info('Fill peer AddrMan with a lot of records')\n+        addrs = gen_addrs(10000)\n+        for i in range(10):\n+            msg_send_addrs.addrs = addrs[i * 1000:(i + 1) * 1000]\n+            addr_source.send_and_ping(msg_send_addrs)",
    "path": "test/functional/p2p_getaddr_caching.py",
    "position": null,
    "original_position": 68,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "8934f6051a344eadfedd063a5ee5d81e7a31526d",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Sure, but my goal here was to make it more than 1,000; just in case. Any particular suggestion?",
    "created_at": "2020-07-08T20:38:59Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r451811788",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451811788"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r451811788"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451811788/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 65,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 76,
    "side": "RIGHT",
    "in_reply_to_id": 451597127
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451821698",
    "pull_request_review_id": 445124304,
    "id": 451821698,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyMTY5OA==",
    "diff_hunk": "@@ -0,0 +1,100 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test addr response caching\"\"\"\n+\n+from test_framework.messages import (\n+    CAddress,\n+    NODE_NETWORK,\n+    NODE_WITNESS,\n+    msg_addr,\n+    msg_getaddr,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    mininode_lock\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    wait_until\n+)\n+import time\n+\n+def gen_addrs(n):\n+    addrs = []\n+    for i in range(n):\n+        addr = CAddress()\n+        addr.time = int(time.time())\n+        addr.nServices = NODE_NETWORK | NODE_WITNESS\n+        # Use first octets to occupy different AddrMan buckets\n+        first_octet = i >> 8\n+        second_octet = i % 256\n+        addr.ip = \"{}.{}.1.1\".format(first_octet, second_octet)\n+        addr.port = 8333\n+        addrs.append(addr)\n+    return addrs\n+\n+class AddrReceiver(P2PInterface):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.received_addrs = None\n+\n+    def on_addr(self, message):\n+        self.received_addrs = []\n+        for addr in message.addrs:\n+            self.received_addrs.append(addr.ip)\n+\n+    def received_addr(self):\n+        return self.received_addrs is not None\n+\n+\n+class AddrTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.log.info('Create connection that sends and requests addr messages')\n+        addr_source = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        msg_send_addrs = msg_addr()\n+        self.log.info('Fill peer AddrMan with a lot of records')\n+        addrs = gen_addrs(10000)\n+        for i in range(10):\n+            msg_send_addrs.addrs = addrs[i * 1000:(i + 1) * 1000]\n+            addr_source.send_and_ping(msg_send_addrs)",
    "path": "test/functional/p2p_getaddr_caching.py",
    "position": null,
    "original_position": 68,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "8934f6051a344eadfedd063a5ee5d81e7a31526d",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Because of the limit of returning 23% of records in GetAddr(), there need to be ~4350 records for the cache to be filled with 1000 records.\r\n\r\nI haven't looked into how CAddress records in ADDR messages are saved to AddrMan, so I can't offer any insight into why only ~3500 are being saved here.",
    "created_at": "2020-07-08T20:59:01Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r451821698",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451821698"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r451821698"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451821698/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 65,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 76,
    "side": "RIGHT",
    "in_reply_to_id": 451597127
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451836231",
    "pull_request_review_id": 445142712,
    "id": 451836231,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzNjIzMQ==",
    "diff_hunk": "@@ -0,0 +1,100 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test addr response caching\"\"\"\n+\n+from test_framework.messages import (\n+    CAddress,\n+    NODE_NETWORK,\n+    NODE_WITNESS,\n+    msg_addr,\n+    msg_getaddr,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    mininode_lock\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    wait_until\n+)\n+import time\n+\n+def gen_addrs(n):\n+    addrs = []\n+    for i in range(n):\n+        addr = CAddress()\n+        addr.time = int(time.time())\n+        addr.nServices = NODE_NETWORK | NODE_WITNESS\n+        # Use first octets to occupy different AddrMan buckets\n+        first_octet = i >> 8\n+        second_octet = i % 256\n+        addr.ip = \"{}.{}.1.1\".format(first_octet, second_octet)\n+        addr.port = 8333\n+        addrs.append(addr)\n+    return addrs\n+\n+class AddrReceiver(P2PInterface):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.received_addrs = None\n+\n+    def on_addr(self, message):\n+        self.received_addrs = []\n+        for addr in message.addrs:\n+            self.received_addrs.append(addr.ip)\n+\n+    def received_addr(self):\n+        return self.received_addrs is not None\n+\n+\n+class AddrTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.log.info('Create connection that sends and requests addr messages')\n+        addr_source = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        msg_send_addrs = msg_addr()\n+        self.log.info('Fill peer AddrMan with a lot of records')\n+        addrs = gen_addrs(10000)\n+        for i in range(10):\n+            msg_send_addrs.addrs = addrs[i * 1000:(i + 1) * 1000]\n+            addr_source.send_and_ping(msg_send_addrs)",
    "path": "test/functional/p2p_getaddr_caching.py",
    "position": null,
    "original_position": 68,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "8934f6051a344eadfedd063a5ee5d81e7a31526d",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Sorry, I'm still not sure what we're trying to accomplish here... I think as long as we use 1,000 and not 2,500 for max cache size, either actual cache size (less or equal then 1,000) is fine.\r\n\r\nI just chose this 10,000 value so that it's *big enough*, just to hit some potential corner case.  I don't see a real reason to go beyond that (for example, to have a cache with 1,000 records). I can probably achieve that, but right now I just don't see the motivation.",
    "created_at": "2020-07-08T21:29:48Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r451836231",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451836231"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r451836231"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451836231/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 65,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 76,
    "side": "RIGHT",
    "in_reply_to_id": 451597127
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451971464",
    "pull_request_review_id": 445298237,
    "id": 451971464,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk3MTQ2NA==",
    "diff_hunk": "@@ -0,0 +1,100 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test addr response caching\"\"\"\n+\n+from test_framework.messages import (\n+    CAddress,\n+    NODE_NETWORK,\n+    NODE_WITNESS,\n+    msg_addr,\n+    msg_getaddr,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    mininode_lock\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    wait_until\n+)\n+import time\n+\n+def gen_addrs(n):\n+    addrs = []\n+    for i in range(n):\n+        addr = CAddress()\n+        addr.time = int(time.time())\n+        addr.nServices = NODE_NETWORK | NODE_WITNESS\n+        # Use first octets to occupy different AddrMan buckets\n+        first_octet = i >> 8\n+        second_octet = i % 256\n+        addr.ip = \"{}.{}.1.1\".format(first_octet, second_octet)\n+        addr.port = 8333\n+        addrs.append(addr)\n+    return addrs\n+\n+class AddrReceiver(P2PInterface):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.received_addrs = None\n+\n+    def on_addr(self, message):\n+        self.received_addrs = []\n+        for addr in message.addrs:\n+            self.received_addrs.append(addr.ip)\n+\n+    def received_addr(self):\n+        return self.received_addrs is not None\n+\n+\n+class AddrTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.log.info('Create connection that sends and requests addr messages')\n+        addr_source = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        msg_send_addrs = msg_addr()\n+        self.log.info('Fill peer AddrMan with a lot of records')\n+        addrs = gen_addrs(10000)\n+        for i in range(10):\n+            msg_send_addrs.addrs = addrs[i * 1000:(i + 1) * 1000]\n+            addr_source.send_and_ping(msg_send_addrs)",
    "path": "test/functional/p2p_getaddr_caching.py",
    "position": null,
    "original_position": 68,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "8934f6051a344eadfedd063a5ee5d81e7a31526d",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The motivation is that the tests should test the limits of the new functionality. The cache can have up to 1000 entries in it. What's the behavior like when that cache is full?\r\n\r\nThe description of this PR says:\r\n\r\n> cache responses to GETADDR on a daily basis, so that an attacker gets at most 1,000 records per day\r\n\r\nThe test should test that an attacker is actually only able to get 1,000 records per day.",
    "created_at": "2020-07-09T05:27:20Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r451971464",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451971464"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r451971464"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451971464/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 65,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 76,
    "side": "RIGHT",
    "in_reply_to_id": 451597127
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452065346",
    "pull_request_review_id": 445416604,
    "id": 452065346,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2NTM0Ng==",
    "diff_hunk": "@@ -0,0 +1,100 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test addr response caching\"\"\"\n+\n+from test_framework.messages import (\n+    CAddress,\n+    NODE_NETWORK,\n+    NODE_WITNESS,\n+    msg_addr,\n+    msg_getaddr,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    mininode_lock\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    wait_until\n+)\n+import time\n+\n+def gen_addrs(n):\n+    addrs = []\n+    for i in range(n):\n+        addr = CAddress()\n+        addr.time = int(time.time())\n+        addr.nServices = NODE_NETWORK | NODE_WITNESS\n+        # Use first octets to occupy different AddrMan buckets\n+        first_octet = i >> 8\n+        second_octet = i % 256\n+        addr.ip = \"{}.{}.1.1\".format(first_octet, second_octet)\n+        addr.port = 8333\n+        addrs.append(addr)\n+    return addrs\n+\n+class AddrReceiver(P2PInterface):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.received_addrs = None\n+\n+    def on_addr(self, message):\n+        self.received_addrs = []\n+        for addr in message.addrs:\n+            self.received_addrs.append(addr.ip)\n+\n+    def received_addr(self):\n+        return self.received_addrs is not None\n+\n+\n+class AddrTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.log.info('Create connection that sends and requests addr messages')\n+        addr_source = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        msg_send_addrs = msg_addr()\n+        self.log.info('Fill peer AddrMan with a lot of records')\n+        addrs = gen_addrs(10000)\n+        for i in range(10):\n+            msg_send_addrs.addrs = addrs[i * 1000:(i + 1) * 1000]\n+            addr_source.send_and_ping(msg_send_addrs)",
    "path": "test/functional/p2p_getaddr_caching.py",
    "position": null,
    "original_position": 68,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "8934f6051a344eadfedd063a5ee5d81e7a31526d",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I updated the test and I think these 2 checks are sort of sufficient here:\r\n1. All responses during the day are same\r\n2. They are less than 1000 records\r\nI think (1) is much more interesting then (2), and the second part of the test confirms that (1) is only day-long cache.\r\n\r\nI'll take a look why it's not exact cache size of 1000 later, but I still think it's not that substantial.",
    "created_at": "2020-07-09T08:52:24Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r452065346",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452065346"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r452065346"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452065346/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 65,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 76,
    "side": "RIGHT",
    "in_reply_to_id": 451597127
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454357727",
    "pull_request_review_id": 448107939,
    "id": 454357727,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM1NzcyNw==",
    "diff_hunk": "@@ -0,0 +1,100 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test addr response caching\"\"\"\n+\n+from test_framework.messages import (\n+    CAddress,\n+    NODE_NETWORK,\n+    NODE_WITNESS,\n+    msg_addr,\n+    msg_getaddr,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    mininode_lock\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    wait_until\n+)\n+import time\n+\n+def gen_addrs(n):\n+    addrs = []\n+    for i in range(n):\n+        addr = CAddress()\n+        addr.time = int(time.time())\n+        addr.nServices = NODE_NETWORK | NODE_WITNESS\n+        # Use first octets to occupy different AddrMan buckets\n+        first_octet = i >> 8\n+        second_octet = i % 256\n+        addr.ip = \"{}.{}.1.1\".format(first_octet, second_octet)\n+        addr.port = 8333\n+        addrs.append(addr)\n+    return addrs\n+\n+class AddrReceiver(P2PInterface):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.received_addrs = None\n+\n+    def on_addr(self, message):\n+        self.received_addrs = []\n+        for addr in message.addrs:\n+            self.received_addrs.append(addr.ip)\n+\n+    def received_addr(self):\n+        return self.received_addrs is not None\n+\n+\n+class AddrTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.log.info('Create connection that sends and requests addr messages')\n+        addr_source = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        msg_send_addrs = msg_addr()\n+        self.log.info('Fill peer AddrMan with a lot of records')\n+        addrs = gen_addrs(10000)\n+        for i in range(10):\n+            msg_send_addrs.addrs = addrs[i * 1000:(i + 1) * 1000]\n+            addr_source.send_and_ping(msg_send_addrs)",
    "path": "test/functional/p2p_getaddr_caching.py",
    "position": null,
    "original_position": 68,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "8934f6051a344eadfedd063a5ee5d81e7a31526d",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Alright, so the issue is that we map every *source* of the ADDRs to 64 buckets 64 slots each -> one *source* can add at most 64x64=4096 records. This results in at most 4096*0.23=942 records returned from AddrMan.\r\n\r\nAs far as I know, there is currently no good way to work around this per-source limit while testing, so leaving it as is for now.\r\nAs I mention above, I think this is not critical for this test.",
    "created_at": "2020-07-14T13:31:35Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r454357727",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454357727"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r454357727"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454357727/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 65,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 76,
    "side": "RIGHT",
    "in_reply_to_id": 451597127
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454453491",
    "pull_request_review_id": 448230491,
    "id": 454453491,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ1MzQ5MQ==",
    "diff_hunk": "@@ -2528,7 +2529,22 @@ void CConnman::AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddres\n \n std::vector<CAddress> CConnman::GetAddresses()\n {\n-    return addrman.GetAddr();\n+    std::vector<CAddress> addresses = addrman.GetAddr();\n+    addresses.erase(std::remove_if(addresses.begin(), addresses.end(),\n+                    [this](CAddress const &addr){return m_banman->IsDiscouraged(addr) || m_banman->IsBanned(addr);}),",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 15,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "18b568a8ac9c5cdc8334a3e400b4a27bf6838d97",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This should check whether `m_banman` exists before dereferencing.",
    "created_at": "2020-07-14T15:42:17Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r454453491",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454453491"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r454453491"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454453491/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2534,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454497331",
    "pull_request_review_id": 448285398,
    "id": 454497331,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ5NzMzMQ==",
    "diff_hunk": "@@ -0,0 +1,100 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test addr response caching\"\"\"\n+\n+from test_framework.messages import (\n+    CAddress,\n+    NODE_NETWORK,\n+    NODE_WITNESS,\n+    msg_addr,\n+    msg_getaddr,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    mininode_lock\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    wait_until\n+)\n+import time\n+\n+def gen_addrs(n):\n+    addrs = []\n+    for i in range(n):\n+        addr = CAddress()\n+        addr.time = int(time.time())\n+        addr.nServices = NODE_NETWORK | NODE_WITNESS\n+        # Use first octets to occupy different AddrMan buckets\n+        first_octet = i >> 8\n+        second_octet = i % 256\n+        addr.ip = \"{}.{}.1.1\".format(first_octet, second_octet)\n+        addr.port = 8333\n+        addrs.append(addr)\n+    return addrs\n+\n+class AddrReceiver(P2PInterface):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.received_addrs = None\n+\n+    def on_addr(self, message):\n+        self.received_addrs = []\n+        for addr in message.addrs:\n+            self.received_addrs.append(addr.ip)\n+\n+    def received_addr(self):\n+        return self.received_addrs is not None\n+\n+\n+class AddrTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.log.info('Create connection that sends and requests addr messages')\n+        addr_source = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        msg_send_addrs = msg_addr()\n+        self.log.info('Fill peer AddrMan with a lot of records')\n+        addrs = gen_addrs(10000)\n+        for i in range(10):\n+            msg_send_addrs.addrs = addrs[i * 1000:(i + 1) * 1000]\n+            addr_source.send_and_ping(msg_send_addrs)",
    "path": "test/functional/p2p_getaddr_caching.py",
    "position": null,
    "original_position": 68,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "8934f6051a344eadfedd063a5ee5d81e7a31526d",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "ok, sounds reasonable. It's a shame that our testing framework won't allow us to fully test the edges of this, but that shouldn't hold this PR up.",
    "created_at": "2020-07-14T16:48:05Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r454497331",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454497331"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r454497331"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454497331/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 65,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 76,
    "side": "RIGHT",
    "in_reply_to_id": 451597127
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454948843",
    "pull_request_review_id": 448823125,
    "id": 454948843,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk0ODg0Mw==",
    "diff_hunk": "@@ -977,6 +977,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n         if (gArgs.GetBoolArg(\"-whitelistrelay\", DEFAULT_WHITELISTRELAY)) NetPermissions::AddFlag(permissionFlags, PF_RELAY);\n         NetPermissions::AddFlag(permissionFlags, PF_MEMPOOL);\n         NetPermissions::AddFlag(permissionFlags, PF_NOBAN);\n+        NetPermissions::AddFlag(permissionFlags, PF_ADDR);",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "79bf91f88f7733e4bdb3938b398d3bb19aa1db6e",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "why extend this further? legacy should die",
    "created_at": "2020-07-15T10:23:04Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r454948843",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454948843"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r454948843"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454948843/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 980,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455183430",
    "pull_request_review_id": 449125597,
    "id": 455183430,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE4MzQzMA==",
    "diff_hunk": "@@ -251,6 +255,13 @@ class CConnman\n     void MarkAddressGood(const CAddress& addr);\n     void AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddress& addrFrom, int64_t nTimePenalty = 0);\n     std::vector<CAddress> GetAddresses();\n+    /**\n+     * Cache is used to minimize topology leaks, so it should\n+     * be used for all non-trusted calls, for example, p2p.\n+     * A non-malicious call (from RPC or a whitelisted peer) should",
    "path": "src/net.h",
    "position": null,
    "original_position": 25,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "fe7d2fbc63a47d60bcd4634253eee996802ae0b3",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "whitelist is deprecated, please mention the exact permission flag. See also #19474 ",
    "created_at": "2020-07-15T16:37:51Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r455183430",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455183430"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r455183430"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455183430/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 261,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455665585",
    "pull_request_review_id": 449694173,
    "id": 455665585,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2NTU4NQ==",
    "diff_hunk": "@@ -416,6 +424,25 @@ class CConnman\n     std::atomic<NodeId> nLastNodeId{0};\n     unsigned int nPrevNodeCount{0};\n \n+    // Cache responses to addr requests to minimize privacy leak.",
    "path": "src/net.h",
    "position": null,
    "original_position": 26,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "8934f6051a344eadfedd063a5ee5d81e7a31526d",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "and the one below please!",
    "created_at": "2020-07-16T09:51:10Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r455665585",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455665585"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r455665585"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455665585/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 427,
    "side": "RIGHT",
    "in_reply_to_id": 451585494
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455666044",
    "pull_request_review_id": 449694722,
    "id": 455666044,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2NjA0NA==",
    "diff_hunk": "@@ -415,6 +426,27 @@ class CConnman\n     std::atomic<NodeId> nLastNodeId{0};\n     unsigned int nPrevNodeCount{0};\n \n+    /**\n+     * Cache responses to addr requests to minimize privacy leak.\n+     * Attack example: scraping addrs in real-time may allow an attacker\n+     * to infer new connections of the victim by detecting new records\n+     * with fresh timestamps (per self-announcement).\n+     */\n+    struct CachedAddrResponse {\n+        std::vector<CAddress> m_addrs_response_cache;\n+        std::chrono::microseconds m_update_addr_response{0};\n+    };\n+\n+    // Addr responses stored in different caches\n+    // per network prevent cross-network node identification.\n+    // If a node for example is multi-homed under Tor and IPv6,\n+    // a single cache (or no cache at all) would let an attacker\n+    // to easily detect that it is the same node by comparing responses.\n+    // The used memory equals to 2500 CAddress records (or around 80 bytes) per",
    "path": "src/net.h",
    "position": null,
    "original_position": 52,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "8ff4c6754dce3b679d928265eb04a6b98fe9a8d7",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is incorrect. It should be 1000 CAddress records.",
    "created_at": "2020-07-16T09:51:53Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r455666044",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455666044"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r455666044"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455666044/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 445,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455668874",
    "pull_request_review_id": 449694722,
    "id": 455668874,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2ODg3NA==",
    "diff_hunk": "@@ -0,0 +1,104 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test addr response caching\"\"\"\n+\n+from test_framework.messages import (\n+    CAddress,\n+    NODE_NETWORK,\n+    NODE_WITNESS,\n+    msg_addr,\n+    msg_getaddr,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    mininode_lock\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    wait_until\n+)\n+import time\n+\n+MAX_ADDR_TO_SEND = 1000\n+\n+def gen_addrs(n):\n+    addrs = []\n+    for i in range(n):\n+        addr = CAddress()\n+        addr.time = int(time.time())\n+        addr.nServices = NODE_NETWORK | NODE_WITNESS\n+        # Use first octets to occupy different AddrMan buckets\n+        first_octet = i >> 8\n+        second_octet = i % 256\n+        addr.ip = \"{}.{}.1.1\".format(first_octet, second_octet)\n+        addr.port = 8333\n+        addrs.append(addr)\n+    return addrs\n+\n+class AddrReceiver(P2PInterface):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.received_addrs = None\n+\n+    def on_addr(self, message):\n+        self.received_addrs = []\n+        for addr in message.addrs:\n+            self.received_addrs.append(addr.ip)\n+\n+    def received_addr(self):\n+        return self.received_addrs is not None\n+\n+\n+class AddrTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.log.info('Create connection that sends and requests addr messages')\n+        addr_source = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        msg_send_addrs = msg_addr()\n+        self.log.info('Fill peer AddrMan with a lot of records')\n+        total_addrs = 10000",
    "path": "test/functional/p2p_getaddr_caching.py",
    "position": 72,
    "original_position": 67,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "8ff4c6754dce3b679d928265eb04a6b98fe9a8d7",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think it's worth a comment here explaining https://github.com/bitcoin/bitcoin/pull/18991#discussion_r454357727, otherwise people reading this test will expect there to be 10,000 entries in addrman.",
    "created_at": "2020-07-16T09:56:36Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r455668874",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455668874"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r455668874"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455668874/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 72,
    "original_line": 72,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455669335",
    "pull_request_review_id": 449694722,
    "id": 455669335,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2OTMzNQ==",
    "diff_hunk": "@@ -0,0 +1,104 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test addr response caching\"\"\"\n+\n+from test_framework.messages import (\n+    CAddress,\n+    NODE_NETWORK,\n+    NODE_WITNESS,\n+    msg_addr,\n+    msg_getaddr,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    mininode_lock\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    wait_until\n+)\n+import time",
    "path": "test/functional/p2p_getaddr_caching.py",
    "position": null,
    "original_position": 23,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "8ff4c6754dce3b679d928265eb04a6b98fe9a8d7",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Place standard library imports before local project imports.",
    "created_at": "2020-07-16T09:57:27Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r455669335",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455669335"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r455669335"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455669335/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 23,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455670835",
    "pull_request_review_id": 449694722,
    "id": 455670835,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY3MDgzNQ==",
    "diff_hunk": "@@ -0,0 +1,104 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test addr response caching\"\"\"\n+\n+from test_framework.messages import (\n+    CAddress,\n+    NODE_NETWORK,\n+    NODE_WITNESS,\n+    msg_addr,\n+    msg_getaddr,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    mininode_lock\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    wait_until\n+)\n+import time\n+\n+MAX_ADDR_TO_SEND = 1000\n+\n+def gen_addrs(n):\n+    addrs = []\n+    for i in range(n):\n+        addr = CAddress()\n+        addr.time = int(time.time())\n+        addr.nServices = NODE_NETWORK | NODE_WITNESS\n+        # Use first octets to occupy different AddrMan buckets\n+        first_octet = i >> 8\n+        second_octet = i % 256\n+        addr.ip = \"{}.{}.1.1\".format(first_octet, second_octet)\n+        addr.port = 8333\n+        addrs.append(addr)\n+    return addrs\n+\n+class AddrReceiver(P2PInterface):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.received_addrs = None\n+\n+    def on_addr(self, message):\n+        self.received_addrs = []\n+        for addr in message.addrs:\n+            self.received_addrs.append(addr.ip)\n+\n+    def received_addr(self):\n+        return self.received_addrs is not None\n+\n+\n+class AddrTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.log.info('Create connection that sends and requests addr messages')\n+        addr_source = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        msg_send_addrs = msg_addr()\n+        self.log.info('Fill peer AddrMan with a lot of records')\n+        total_addrs = 10000\n+        addrs = gen_addrs(total_addrs)\n+        for i in range(int(total_addrs/MAX_ADDR_TO_SEND)):\n+            msg_send_addrs.addrs = addrs[i * MAX_ADDR_TO_SEND:(i + 1) * MAX_ADDR_TO_SEND]\n+            addr_source.send_and_ping(msg_send_addrs)\n+\n+        responses = []\n+        self.log.info('Send many addr requests within short time to receive same response')\n+        N = 5\n+        cur_mock_time = int(time.time())\n+        for i in range(N):\n+            addr_receiver = self.nodes[0].add_p2p_connection(AddrReceiver())\n+            addr_receiver.send_and_ping(msg_getaddr())\n+            # Trigger response\n+            cur_mock_time += 5 * 60\n+            self.nodes[0].setmocktime(cur_mock_time)\n+            wait_until(addr_receiver.received_addr, lock=mininode_lock)\n+            responses.append(addr_receiver.received_addrs)",
    "path": "test/functional/p2p_getaddr_caching.py",
    "position": null,
    "original_position": 84,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "8ff4c6754dce3b679d928265eb04a6b98fe9a8d7",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You should really take mininode_lock before reading this field (or better - add a getter method to AddrReceiver that takes the lock internally and returns a list)",
    "created_at": "2020-07-16T10:00:01Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r455670835",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455670835"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r455670835"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455670835/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 84,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455671114",
    "pull_request_review_id": 449694722,
    "id": 455671114,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY3MTExNA==",
    "diff_hunk": "@@ -0,0 +1,104 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test addr response caching\"\"\"\n+\n+from test_framework.messages import (\n+    CAddress,\n+    NODE_NETWORK,\n+    NODE_WITNESS,\n+    msg_addr,\n+    msg_getaddr,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    mininode_lock\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    wait_until\n+)\n+import time\n+\n+MAX_ADDR_TO_SEND = 1000\n+\n+def gen_addrs(n):\n+    addrs = []\n+    for i in range(n):\n+        addr = CAddress()\n+        addr.time = int(time.time())\n+        addr.nServices = NODE_NETWORK | NODE_WITNESS\n+        # Use first octets to occupy different AddrMan buckets\n+        first_octet = i >> 8\n+        second_octet = i % 256\n+        addr.ip = \"{}.{}.1.1\".format(first_octet, second_octet)\n+        addr.port = 8333\n+        addrs.append(addr)\n+    return addrs\n+\n+class AddrReceiver(P2PInterface):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.received_addrs = None\n+\n+    def on_addr(self, message):\n+        self.received_addrs = []\n+        for addr in message.addrs:\n+            self.received_addrs.append(addr.ip)\n+\n+    def received_addr(self):\n+        return self.received_addrs is not None\n+\n+\n+class AddrTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.log.info('Create connection that sends and requests addr messages')\n+        addr_source = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        msg_send_addrs = msg_addr()\n+        self.log.info('Fill peer AddrMan with a lot of records')\n+        total_addrs = 10000\n+        addrs = gen_addrs(total_addrs)\n+        for i in range(int(total_addrs/MAX_ADDR_TO_SEND)):\n+            msg_send_addrs.addrs = addrs[i * MAX_ADDR_TO_SEND:(i + 1) * MAX_ADDR_TO_SEND]\n+            addr_source.send_and_ping(msg_send_addrs)\n+\n+        responses = []\n+        self.log.info('Send many addr requests within short time to receive same response')\n+        N = 5\n+        cur_mock_time = int(time.time())\n+        for i in range(N):\n+            addr_receiver = self.nodes[0].add_p2p_connection(AddrReceiver())\n+            addr_receiver.send_and_ping(msg_getaddr())\n+            # Trigger response\n+            cur_mock_time += 5 * 60\n+            self.nodes[0].setmocktime(cur_mock_time)\n+            wait_until(addr_receiver.received_addr, lock=mininode_lock)\n+            responses.append(addr_receiver.received_addrs)\n+        for response in responses[1:]:\n+            assert_equal(response, responses[0])\n+        assert(len(response) < MAX_ADDR_TO_SEND)\n+\n+        cur_mock_time += 3 * 24 * 60 * 60\n+        self.nodes[0].setmocktime(cur_mock_time)\n+\n+        self.log.info('After time passed, see a new response to addr request')\n+        last_addr_receiver = self.nodes[0].add_p2p_connection(AddrReceiver())\n+        last_addr_receiver.send_and_ping(msg_getaddr())\n+        # Trigger response\n+        cur_mock_time += 5 * 60\n+        self.nodes[0].setmocktime(cur_mock_time)\n+        wait_until(last_addr_receiver.received_addr, lock=mininode_lock)\n+        # new response is different\n+        assert(set(responses[0]) != set(last_addr_receiver.received_addrs))",
    "path": "test/functional/p2p_getaddr_caching.py",
    "position": null,
    "original_position": 100,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "8ff4c6754dce3b679d928265eb04a6b98fe9a8d7",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "as above, this requires mininode_lock",
    "created_at": "2020-07-16T10:00:25Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r455671114",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455671114"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r455671114"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455671114/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 100,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459636047",
    "pull_request_review_id": 454379082,
    "id": 459636047,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzNjA0Nw==",
    "diff_hunk": "@@ -65,10 +65,10 @@ def run_test(self):\n         second_peer = self.nodes[0].add_p2p_connection(P2PInterface())\n         peer_1_info = self.nodes[0].getpeerinfo()[0]\n         assert_equal(peer_1_info['whitelisted'], True)\n-        assert_equal(peer_1_info['permissions'], ['noban', 'forcerelay', 'relay', 'mempool', 'download'])\n+        assert_equal(peer_1_info['permissions'], ['noban', 'forcerelay', 'relay', 'mempool', \"download\"])\n         peer_2_info = self.nodes[0].getpeerinfo()[1]\n         assert_equal(peer_2_info['whitelisted'], True)\n-        assert_equal(peer_2_info['permissions'], ['noban', 'forcerelay', 'relay', 'mempool', 'download'])\n+        assert_equal(peer_2_info['permissions'], ['noban', 'forcerelay', 'relay', 'mempool', \"download\"])",
    "path": "test/functional/p2p_blocksonly.py",
    "position": null,
    "original_position": 9,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "130655a09054e7fe4388a4383ed320f4ce7de103",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "why is this changed?",
    "created_at": "2020-07-23T18:10:35Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r459636047",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459636047"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r459636047"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459636047/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 71,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459637266",
    "pull_request_review_id": 454379082,
    "id": 459637266,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzNzI2Ng==",
    "diff_hunk": "@@ -2528,7 +2528,24 @@ void CConnman::AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddres\n \n std::vector<CAddress> CConnman::GetAddresses()\n {\n-    return addrman.GetAddr();\n+    std::vector<CAddress> addresses = addrman.GetAddr();\n+    if (m_banman) {\n+        addresses.erase(std::remove_if(addresses.begin(), addresses.end(),\n+                        [this](CAddress const &addr){return m_banman->IsDiscouraged(addr) || m_banman->IsBanned(addr);}),",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 8,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "130655a09054e7fe4388a4383ed320f4ce7de103",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n                        [this](const CAddress& addr){return m_banman->IsDiscouraged(addr) || m_banman->IsBanned(addr);}),\r\n```\r\n\r\nAny reason to use this style, as opposed to the project's style?",
    "created_at": "2020-07-23T18:12:44Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r459637266",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459637266"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r459637266"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459637266/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2534,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459638138",
    "pull_request_review_id": 454379082,
    "id": 459638138,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzODEzOA==",
    "diff_hunk": "@@ -0,0 +1,110 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test addr response caching\"\"\"\n+\n+import time\n+from test_framework.messages import (\n+    CAddress,\n+    NODE_NETWORK,\n+    NODE_WITNESS,\n+    msg_addr,\n+    msg_getaddr,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    mininode_lock\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    wait_until\n+)\n+\n+MAX_ADDR_TO_SEND = 1000\n+\n+def gen_addrs(n):\n+    addrs = []\n+    for i in range(n):\n+        addr = CAddress()\n+        addr.time = int(time.time())\n+        addr.nServices = NODE_NETWORK | NODE_WITNESS\n+        # Use first octets to occupy different AddrMan buckets\n+        first_octet = i >> 8\n+        second_octet = i % 256\n+        addr.ip = \"{}.{}.1.1\".format(first_octet, second_octet)\n+        addr.port = 8333\n+        addrs.append(addr)\n+    return addrs\n+\n+class AddrReceiver(P2PInterface):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.received_addrs = None\n+\n+    def get_received_addrs(self):\n+        with mininode_lock:\n+            return self.received_addrs\n+\n+    def on_addr(self, message):\n+        self.received_addrs = []\n+        for addr in message.addrs:\n+            self.received_addrs.append(addr.ip)\n+\n+    def addr_received(self):\n+        return self.received_addrs is not None\n+\n+\n+class AddrTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.log.info('Create connection that sends and requests addr messages')\n+        addr_source = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        msg_send_addrs = msg_addr()\n+        self.log.info('Fill peer AddrMan with a lot of records')\n+        # Since these addrs are sent from the same source, not all of them will be stored,\n+        # because we allocate a limited number of AddrMan buckets per addr source.\n+        total_addrs = 10000\n+        addrs = gen_addrs(total_addrs)\n+        for i in range(int(total_addrs/MAX_ADDR_TO_SEND)):\n+            msg_send_addrs.addrs = addrs[i * MAX_ADDR_TO_SEND:(i + 1) * MAX_ADDR_TO_SEND]\n+            addr_source.send_and_ping(msg_send_addrs)\n+\n+        responses = []\n+        self.log.info('Send many addr requests within short time to receive same response')\n+        N = 5\n+        cur_mock_time = int(time.time())\n+        for i in range(N):\n+            addr_receiver = self.nodes[0].add_p2p_connection(AddrReceiver())\n+            addr_receiver.send_and_ping(msg_getaddr())\n+            # Trigger response\n+            cur_mock_time += 5 * 60\n+            self.nodes[0].setmocktime(cur_mock_time)\n+            wait_until(addr_receiver.addr_received, lock=mininode_lock)",
    "path": "test/functional/p2p_getaddr_caching.py",
    "position": null,
    "original_position": 89,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "130655a09054e7fe4388a4383ed320f4ce7de103",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n            addr_receiver.wait_until(addr_receiver.addr_received)\r\n```",
    "created_at": "2020-07-23T18:14:19Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r459638138",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459638138"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r459638138"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459638138/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 89,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459638213",
    "pull_request_review_id": 454379082,
    "id": 459638213,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzODIxMw==",
    "diff_hunk": "@@ -0,0 +1,110 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test addr response caching\"\"\"\n+\n+import time\n+from test_framework.messages import (\n+    CAddress,\n+    NODE_NETWORK,\n+    NODE_WITNESS,\n+    msg_addr,\n+    msg_getaddr,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    mininode_lock\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    wait_until\n+)\n+\n+MAX_ADDR_TO_SEND = 1000\n+\n+def gen_addrs(n):\n+    addrs = []\n+    for i in range(n):\n+        addr = CAddress()\n+        addr.time = int(time.time())\n+        addr.nServices = NODE_NETWORK | NODE_WITNESS\n+        # Use first octets to occupy different AddrMan buckets\n+        first_octet = i >> 8\n+        second_octet = i % 256\n+        addr.ip = \"{}.{}.1.1\".format(first_octet, second_octet)\n+        addr.port = 8333\n+        addrs.append(addr)\n+    return addrs\n+\n+class AddrReceiver(P2PInterface):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.received_addrs = None\n+\n+    def get_received_addrs(self):\n+        with mininode_lock:\n+            return self.received_addrs\n+\n+    def on_addr(self, message):\n+        self.received_addrs = []\n+        for addr in message.addrs:\n+            self.received_addrs.append(addr.ip)\n+\n+    def addr_received(self):\n+        return self.received_addrs is not None\n+\n+\n+class AddrTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.log.info('Create connection that sends and requests addr messages')\n+        addr_source = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        msg_send_addrs = msg_addr()\n+        self.log.info('Fill peer AddrMan with a lot of records')\n+        # Since these addrs are sent from the same source, not all of them will be stored,\n+        # because we allocate a limited number of AddrMan buckets per addr source.\n+        total_addrs = 10000\n+        addrs = gen_addrs(total_addrs)\n+        for i in range(int(total_addrs/MAX_ADDR_TO_SEND)):\n+            msg_send_addrs.addrs = addrs[i * MAX_ADDR_TO_SEND:(i + 1) * MAX_ADDR_TO_SEND]\n+            addr_source.send_and_ping(msg_send_addrs)\n+\n+        responses = []\n+        self.log.info('Send many addr requests within short time to receive same response')\n+        N = 5\n+        cur_mock_time = int(time.time())\n+        for i in range(N):\n+            addr_receiver = self.nodes[0].add_p2p_connection(AddrReceiver())\n+            addr_receiver.send_and_ping(msg_getaddr())\n+            # Trigger response\n+            cur_mock_time += 5 * 60\n+            self.nodes[0].setmocktime(cur_mock_time)\n+            wait_until(addr_receiver.addr_received, lock=mininode_lock)\n+            responses.append(addr_receiver.get_received_addrs())\n+        for response in responses[1:]:\n+            assert_equal(response, responses[0])\n+        assert(len(response) < MAX_ADDR_TO_SEND)\n+\n+        cur_mock_time += 3 * 24 * 60 * 60\n+        self.nodes[0].setmocktime(cur_mock_time)\n+\n+        self.log.info('After time passed, see a new response to addr request')\n+        last_addr_receiver = self.nodes[0].add_p2p_connection(AddrReceiver())\n+        last_addr_receiver.send_and_ping(msg_getaddr())\n+        # Trigger response\n+        cur_mock_time += 5 * 60\n+        self.nodes[0].setmocktime(cur_mock_time)\n+        wait_until(last_addr_receiver.addr_received, lock=mininode_lock)",
    "path": "test/functional/p2p_getaddr_caching.py",
    "position": null,
    "original_position": 104,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "130655a09054e7fe4388a4383ed320f4ce7de103",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "same",
    "created_at": "2020-07-23T18:14:28Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r459638213",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459638213"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r459638213"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459638213/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 104,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/462910122",
    "pull_request_review_id": 458287281,
    "id": 462910122,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkxMDEyMg==",
    "diff_hunk": "@@ -415,6 +426,27 @@ class CConnman\n     std::atomic<NodeId> nLastNodeId{0};\n     unsigned int nPrevNodeCount{0};\n \n+    /**\n+     * Cache responses to addr requests to minimize privacy leak.\n+     * Attack example: scraping addrs in real-time may allow an attacker\n+     * to infer new connections of the victim by detecting new records\n+     * with fresh timestamps (per self-announcement).\n+     */\n+    struct CachedAddrResponse {\n+        std::vector<CAddress> m_addrs_response_cache;\n+        std::chrono::microseconds m_update_addr_response{0};\n+    };\n+\n+    // Addr responses stored in different caches",
    "path": "src/net.h",
    "position": null,
    "original_position": 47,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "20de7928de545316320e6d82c89151159b12378f",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Can you make this a doxygen style comment please :pray: ",
    "created_at": "2020-07-30T10:43:30Z",
    "updated_at": "2020-07-30T11:39:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r462910122",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/462910122"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r462910122"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/462910122/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 440,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464081434",
    "pull_request_review_id": 459651148,
    "id": 464081434,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA4MTQzNA==",
    "diff_hunk": "@@ -2539,6 +2539,17 @@ std::vector<CAddress> CConnman::GetAddresses()\n     return addresses;\n }\n \n+std::vector<CAddress> CConnman::GetAddresses(Network requestor_network)\n+{\n+    const auto current_time = GetTime<std::chrono::microseconds>();\n+    if (m_addr_response_caches.find(requestor_network) == m_addr_response_caches.end() ||\n+        m_addr_response_caches[requestor_network].m_update_addr_response < current_time) {",
    "path": "src/net.cpp",
    "position": 18,
    "original_position": 8,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "acd6135b43941fa51d52f5fcdb2ce944280ad01e",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "acd6135b43941fa51d52f5fcdb2ce944280ad01e\r\n\r\nUse iterator instead:\r\n```cpp\r\nauto i = m_addr_response_caches.find(requestor_network);\r\nif (i == m_addr_response_caches.end() || i->m_update_addr_response < current_time)\r\n```\r\n",
    "created_at": "2020-08-02T13:58:07Z",
    "updated_at": "2020-08-02T14:12:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r464081434",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464081434"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r464081434"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464081434/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2546,
    "original_line": 2546,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464082065",
    "pull_request_review_id": 459651148,
    "id": 464082065,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA4MjA2NQ==",
    "diff_hunk": "@@ -2539,6 +2539,17 @@ std::vector<CAddress> CConnman::GetAddresses()\n     return addresses;\n }\n \n+std::vector<CAddress> CConnman::GetAddresses(Network requestor_network)\n+{\n+    const auto current_time = GetTime<std::chrono::microseconds>();\n+    if (m_addr_response_caches.find(requestor_network) == m_addr_response_caches.end() ||\n+        m_addr_response_caches[requestor_network].m_update_addr_response < current_time) {\n+        m_addr_response_caches[requestor_network].m_addrs_response_cache = GetAddresses();\n+        m_addr_response_caches[requestor_network].m_update_addr_response = current_time + std::chrono::hours(21) + GetRandMillis(std::chrono::hours(6));",
    "path": "src/net.cpp",
    "position": 20,
    "original_position": 10,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "acd6135b43941fa51d52f5fcdb2ce944280ad01e",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "acd6135b43941fa51d52f5fcdb2ce944280ad01e\r\n\r\nI think you could explain this expiration duration. Looks like it could be a lot less and still prevent spying?",
    "created_at": "2020-08-02T14:04:34Z",
    "updated_at": "2020-08-02T14:12:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r464082065",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464082065"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r464082065"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464082065/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2548,
    "original_line": 2548,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464082309",
    "pull_request_review_id": 459651148,
    "id": 464082309,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA4MjMwOQ==",
    "diff_hunk": "@@ -418,6 +426,29 @@ class CConnman\n     std::atomic<NodeId> nLastNodeId{0};\n     unsigned int nPrevNodeCount{0};\n \n+    /**\n+     * Cache responses to addr requests to minimize privacy leak.\n+     * Attack example: scraping addrs in real-time may allow an attacker\n+     * to infer new connections of the victim by detecting new records\n+     * with fresh timestamps (per self-announcement).\n+     */\n+    struct CachedAddrResponse {\n+        std::vector<CAddress> m_addrs_response_cache;",
    "path": "src/net.h",
    "position": 43,
    "original_position": 33,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "acd6135b43941fa51d52f5fcdb2ce944280ad01e",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "acd6135b43941fa51d52f5fcdb2ce944280ad01e\r\n\r\nnit, no need for `m_` prefix in structs (?).",
    "created_at": "2020-08-02T14:07:10Z",
    "updated_at": "2020-08-02T14:12:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r464082309",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464082309"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r464082309"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464082309/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 436,
    "original_line": 436,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464099719",
    "pull_request_review_id": 459663529,
    "id": 464099719,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA5OTcxOQ==",
    "diff_hunk": "@@ -418,6 +426,29 @@ class CConnman\n     std::atomic<NodeId> nLastNodeId{0};\n     unsigned int nPrevNodeCount{0};\n \n+    /**\n+     * Cache responses to addr requests to minimize privacy leak.\n+     * Attack example: scraping addrs in real-time may allow an attacker\n+     * to infer new connections of the victim by detecting new records\n+     * with fresh timestamps (per self-announcement).\n+     */\n+    struct CachedAddrResponse {\n+        std::vector<CAddress> m_addrs_response_cache;",
    "path": "src/net.h",
    "position": 43,
    "original_position": 33,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "acd6135b43941fa51d52f5fcdb2ce944280ad01e",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I assumed that all member variables (of classes and structs) should have the `m_` prefix.",
    "created_at": "2020-08-02T16:57:29Z",
    "updated_at": "2020-08-02T16:57:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r464099719",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464099719"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r464099719"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464099719/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 436,
    "original_line": 436,
    "side": "RIGHT",
    "in_reply_to_id": 464082309
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464140251",
    "pull_request_review_id": 459691100,
    "id": 464140251,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE0MDI1MQ==",
    "diff_hunk": "@@ -2530,7 +2530,13 @@ void CConnman::AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddres\n \n std::vector<CAddress> CConnman::GetAddresses()\n {\n-    return addrman.GetAddr();\n+    std::vector<CAddress> addresses = addrman.GetAddr();\n+    if (m_banman) {\n+        addresses.erase(std::remove_if(addresses.begin(), addresses.end(),",
    "path": "src/net.cpp",
    "position": 7,
    "original_position": 7,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "ded742bc5b96e3215d69c11fb3628d224e7ae034",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: I think that's a slight perfomance regression as you will iterate twice on the non-erased vector elements. Likely not to matter as it's not a hot point.",
    "created_at": "2020-08-03T00:04:24Z",
    "updated_at": "2020-08-03T00:45:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r464140251",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464140251"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r464140251"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464140251/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2535,
    "original_line": 2535,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464141600",
    "pull_request_review_id": 459691100,
    "id": 464141600,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE0MTYwMA==",
    "diff_hunk": "@@ -157,7 +157,7 @@ class CAddrInfo : public CAddress\n #define ADDRMAN_GETADDR_MAX_PCT 23\n \n //! the maximum number of nodes to return in a getaddr call\n-#define ADDRMAN_GETADDR_MAX 2500\n+#define ADDRMAN_GETADDR_MAX 1000",
    "path": "src/addrman.h",
    "position": 5,
    "original_position": 5,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "7cc0e8101f01891aa8be093a00d993bb7579c385",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think commit message could be clearer, it doesn't remove the limit on AddrMan queries, rather bound it to the maximum size of ADDR message ?",
    "created_at": "2020-08-03T00:16:02Z",
    "updated_at": "2020-08-03T00:45:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r464141600",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464141600"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r464141600"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464141600/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 160,
    "original_line": 160,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464142053",
    "pull_request_review_id": 459691100,
    "id": 464142053,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE0MjA1Mw==",
    "diff_hunk": "@@ -418,6 +426,29 @@ class CConnman\n     std::atomic<NodeId> nLastNodeId{0};\n     unsigned int nPrevNodeCount{0};\n \n+    /**\n+     * Cache responses to addr requests to minimize privacy leak.\n+     * Attack example: scraping addrs in real-time may allow an attacker\n+     * to infer new connections of the victim by detecting new records\n+     * with fresh timestamps (per self-announcement).\n+     */\n+    struct CachedAddrResponse {\n+        std::vector<CAddress> m_addrs_response_cache;\n+        std::chrono::microseconds m_update_addr_response{0};",
    "path": "src/net.h",
    "position": 44,
    "original_position": 34,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "acd6135b43941fa51d52f5fcdb2ce944280ad01e",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It sounds you compare a verb `m_update_addr_response` to a noun `current_time`. IMO, `m_cache_expiration_time` would be more meaningful",
    "created_at": "2020-08-03T00:19:58Z",
    "updated_at": "2020-08-03T00:45:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r464142053",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464142053"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r464142053"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464142053/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 437,
    "original_line": 437,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464144483",
    "pull_request_review_id": 459691100,
    "id": 464144483,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE0NDQ4Mw==",
    "diff_hunk": "@@ -418,6 +426,29 @@ class CConnman\n     std::atomic<NodeId> nLastNodeId{0};\n     unsigned int nPrevNodeCount{0};\n \n+    /**\n+     * Cache responses to addr requests to minimize privacy leak.\n+     * Attack example: scraping addrs in real-time may allow an attacker\n+     * to infer new connections of the victim by detecting new records\n+     * with fresh timestamps (per self-announcement).\n+     */\n+    struct CachedAddrResponse {\n+        std::vector<CAddress> m_addrs_response_cache;\n+        std::chrono::microseconds m_update_addr_response{0};\n+    };\n+\n+    /**\n+     * Addr responses stored in different caches\n+     * per network prevent cross-network node identification.\n+     * If a node for example is multi-homed under Tor and IPv6,\n+     * a single cache (or no cache at all) would let an attacker\n+     * to easily detect that it is the same node by comparing responses.\n+     * The used memory equals to 1000 CAddress records (or around 32 bytes) per\n+     * distinct Network (up to 5) we have/had an inbound peer from,\n+     * resulting in at most ~160 KB.",
    "path": "src/net.h",
    "position": 55,
    "original_position": 45,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "acd6135b43941fa51d52f5fcdb2ce944280ad01e",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You may underscore that the cache is global and not per-peer thus being uniform to who ever is querying during the cache period. I think a per-peer cache would be worst, unless you have first a global and announce random subset from it.\r\n\r\nThat said, an area of research could be to tie the cache in function of the subnet/ASN of requestors to nudge their connections towards a more diversified graph. Or sort/cap them by subnet. But likely such mechanism could be a double-edge :)",
    "created_at": "2020-08-03T00:37:49Z",
    "updated_at": "2020-08-03T00:45:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r464144483",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464144483"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r464144483"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464144483/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 448,
    "original_line": 448,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464232727",
    "pull_request_review_id": 459795542,
    "id": 464232727,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIzMjcyNw==",
    "diff_hunk": "@@ -418,6 +426,29 @@ class CConnman\n     std::atomic<NodeId> nLastNodeId{0};\n     unsigned int nPrevNodeCount{0};\n \n+    /**\n+     * Cache responses to addr requests to minimize privacy leak.\n+     * Attack example: scraping addrs in real-time may allow an attacker\n+     * to infer new connections of the victim by detecting new records\n+     * with fresh timestamps (per self-announcement).\n+     */\n+    struct CachedAddrResponse {\n+        std::vector<CAddress> m_addrs_response_cache;",
    "path": "src/net.h",
    "position": 43,
    "original_position": 33,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "acd6135b43941fa51d52f5fcdb2ce944280ad01e",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yeah Ive got the same impression.",
    "created_at": "2020-08-03T07:12:31Z",
    "updated_at": "2020-08-03T07:12:31Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r464232727",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464232727"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r464232727"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464232727/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 436,
    "original_line": 436,
    "side": "RIGHT",
    "in_reply_to_id": 464082309
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464322841",
    "pull_request_review_id": 459911589,
    "id": 464322841,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMyMjg0MQ==",
    "diff_hunk": "@@ -2530,7 +2530,13 @@ void CConnman::AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddres\n \n std::vector<CAddress> CConnman::GetAddresses()\n {\n-    return addrman.GetAddr();\n+    std::vector<CAddress> addresses = addrman.GetAddr();\n+    if (m_banman) {\n+        addresses.erase(std::remove_if(addresses.begin(), addresses.end(),",
    "path": "src/net.cpp",
    "position": 7,
    "original_position": 7,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "ded742bc5b96e3215d69c11fb3628d224e7ae034",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "No. remove-erase removes unwanted elements in a single pass.",
    "created_at": "2020-08-03T10:15:04Z",
    "updated_at": "2020-08-03T10:16:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r464322841",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464322841"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r464322841"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464322841/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2535,
    "original_line": 2535,
    "side": "RIGHT",
    "in_reply_to_id": 464140251
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464337985",
    "pull_request_review_id": 459930941,
    "id": 464337985,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzNzk4NQ==",
    "diff_hunk": "@@ -418,6 +426,29 @@ class CConnman\n     std::atomic<NodeId> nLastNodeId{0};\n     unsigned int nPrevNodeCount{0};\n \n+    /**\n+     * Cache responses to addr requests to minimize privacy leak.\n+     * Attack example: scraping addrs in real-time may allow an attacker\n+     * to infer new connections of the victim by detecting new records\n+     * with fresh timestamps (per self-announcement).\n+     */\n+    struct CachedAddrResponse {\n+        std::vector<CAddress> m_addrs_response_cache;",
    "path": "src/net.h",
    "position": 43,
    "original_position": 33,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "acd6135b43941fa51d52f5fcdb2ce944280ad01e",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "See some recently added structs. Nit anyway.",
    "created_at": "2020-08-03T10:49:28Z",
    "updated_at": "2020-08-03T10:49:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r464337985",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464337985"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r464337985"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464337985/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 436,
    "original_line": 436,
    "side": "RIGHT",
    "in_reply_to_id": 464082309
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464382855",
    "pull_request_review_id": 459986714,
    "id": 464382855,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM4Mjg1NQ==",
    "diff_hunk": "@@ -2530,7 +2530,13 @@ void CConnman::AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddres\n \n std::vector<CAddress> CConnman::GetAddresses()\n {\n-    return addrman.GetAddr();\n+    std::vector<CAddress> addresses = addrman.GetAddr();\n+    if (m_banman) {\n+        addresses.erase(std::remove_if(addresses.begin(), addresses.end(),",
    "path": "src/net.cpp",
    "position": 7,
    "original_position": 7,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "ded742bc5b96e3215d69c11fb3628d224e7ae034",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Previously, in net_processing, we iterate on `vAddr` and filter out discouraged/banned elements before to push them in `vAddrToSend`. So that's a single pass.\r\n\r\nNow, in net.cpp we iterate on `addresses` on every element, then in net_processing we iterate again on `vAddr` to push  elements in `vAddrToSend`. So that's two pass on the valid set ?",
    "created_at": "2020-08-03T12:31:58Z",
    "updated_at": "2020-08-03T12:31:59Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r464382855",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464382855"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r464382855"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464382855/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2535,
    "original_line": 2535,
    "side": "RIGHT",
    "in_reply_to_id": 464140251
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464403628",
    "pull_request_review_id": 460013597,
    "id": 464403628,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQwMzYyOA==",
    "diff_hunk": "@@ -2539,6 +2539,17 @@ std::vector<CAddress> CConnman::GetAddresses()\n     return addresses;\n }\n \n+std::vector<CAddress> CConnman::GetAddresses(Network requestor_network)\n+{\n+    const auto current_time = GetTime<std::chrono::microseconds>();\n+    if (m_addr_response_caches.find(requestor_network) == m_addr_response_caches.end() ||\n+        m_addr_response_caches[requestor_network].m_update_addr_response < current_time) {\n+        m_addr_response_caches[requestor_network].m_addrs_response_cache = GetAddresses();\n+        m_addr_response_caches[requestor_network].m_update_addr_response = current_time + std::chrono::hours(21) + GetRandMillis(std::chrono::hours(6));",
    "path": "src/net.cpp",
    "position": 20,
    "original_position": 10,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "acd6135b43941fa51d52f5fcdb2ce944280ad01e",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The idea is to prevent peers scraping our addrman. The shorter the cache duration, the less time it would take a peer to get an (almost) complete scan of addrman.",
    "created_at": "2020-08-03T13:12:18Z",
    "updated_at": "2020-08-03T13:12:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r464403628",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464403628"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r464403628"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464403628/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2548,
    "original_line": 2548,
    "side": "RIGHT",
    "in_reply_to_id": 464082065
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464408605",
    "pull_request_review_id": 460019830,
    "id": 464408605,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQwODYwNQ==",
    "diff_hunk": "@@ -2530,7 +2530,13 @@ void CConnman::AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddres\n \n std::vector<CAddress> CConnman::GetAddresses()\n {\n-    return addrman.GetAddr();\n+    std::vector<CAddress> addresses = addrman.GetAddr();\n+    if (m_banman) {\n+        addresses.erase(std::remove_if(addresses.begin(), addresses.end(),",
    "path": "src/net.cpp",
    "position": 7,
    "original_position": 7,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "ded742bc5b96e3215d69c11fb3628d224e7ae034",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ah, ok. Yes, you're right that for peers with \"addr\" permissions, we'll iterate through the list twice (although the list will be max size 1000 instead of 2500, so still fewer items). However, in the common case, we'll only iterate through the cached list once, and not have to call IsDiscouraged() or IsBanned() on that list.",
    "created_at": "2020-08-03T13:21:07Z",
    "updated_at": "2020-08-03T13:21:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r464408605",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464408605"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r464408605"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464408605/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2535,
    "original_line": 2535,
    "side": "RIGHT",
    "in_reply_to_id": 464140251
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464554765",
    "pull_request_review_id": 460206907,
    "id": 464554765,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU1NDc2NQ==",
    "diff_hunk": "@@ -2539,6 +2539,17 @@ std::vector<CAddress> CConnman::GetAddresses()\n     return addresses;\n }\n \n+std::vector<CAddress> CConnman::GetAddresses(Network requestor_network)\n+{\n+    const auto current_time = GetTime<std::chrono::microseconds>();\n+    if (m_addr_response_caches.find(requestor_network) == m_addr_response_caches.end() ||\n+        m_addr_response_caches[requestor_network].m_update_addr_response < current_time) {\n+        m_addr_response_caches[requestor_network].m_addrs_response_cache = GetAddresses();\n+        m_addr_response_caches[requestor_network].m_update_addr_response = current_time + std::chrono::hours(21) + GetRandMillis(std::chrono::hours(6));",
    "path": "src/net.cpp",
    "position": 20,
    "original_position": 10,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "acd6135b43941fa51d52f5fcdb2ce944280ad01e",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "But yeah, it's hard to justify 24h vs 1h cache without a good analytical model of the whole addr relay.\r\n\r\nRight now cache lifetime is 0, so it takes like 0 seconds to scrape it. If cache was 1h, it would take about 100h (because ~100 requests are usually needed). However, during those 100h sensitive data might be already overwritten, so an attacker might not get useful info. It feels like 100h is too short, but maybe 1000h would be fine then?\r\n\r\nOn the other hand, shorter lifetime would keep addr records a bit more fresh (if we consider GETADDR relay aspect), so that's the benefit/tradeoff. But again, how much does the freshness of GETADDR matter? And especially since with 24h cache the records are *at most* 24h outdated, while we look at 1 week when considering IsTerrible(). That's why I don't think it's a big of a concern and a tradeoff to consider.",
    "created_at": "2020-08-03T17:26:26Z",
    "updated_at": "2020-08-03T17:26:26Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r464554765",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464554765"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r464554765"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464554765/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2548,
    "original_line": 2548,
    "side": "RIGHT",
    "in_reply_to_id": 464082065
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468485759",
    "pull_request_review_id": 464946310,
    "id": 468485759,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ4NTc1OQ==",
    "diff_hunk": "@@ -2539,6 +2539,17 @@ std::vector<CAddress> CConnman::GetAddresses()\n     return addresses;\n }\n \n+std::vector<CAddress> CConnman::GetAddresses(Network requestor_network)\n+{\n+    const auto current_time = GetTime<std::chrono::microseconds>();\n+    if (m_addr_response_caches.find(requestor_network) == m_addr_response_caches.end() ||\n+        m_addr_response_caches[requestor_network].m_update_addr_response < current_time) {",
    "path": "src/net.cpp",
    "position": 18,
    "original_position": 8,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "acd6135b43941fa51d52f5fcdb2ce944280ad01e",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It doesn't really work because it requires \"i->second\" :(",
    "created_at": "2020-08-11T10:37:48Z",
    "updated_at": "2020-08-11T10:37:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r468485759",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468485759"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r468485759"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468485759/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2546,
    "original_line": 2546,
    "side": "RIGHT",
    "in_reply_to_id": 464081434
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468487425",
    "pull_request_review_id": 464948450,
    "id": 468487425,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ4NzQyNQ==",
    "diff_hunk": "@@ -418,6 +426,29 @@ class CConnman\n     std::atomic<NodeId> nLastNodeId{0};\n     unsigned int nPrevNodeCount{0};\n \n+    /**\n+     * Cache responses to addr requests to minimize privacy leak.\n+     * Attack example: scraping addrs in real-time may allow an attacker\n+     * to infer new connections of the victim by detecting new records\n+     * with fresh timestamps (per self-announcement).\n+     */\n+    struct CachedAddrResponse {\n+        std::vector<CAddress> m_addrs_response_cache;",
    "path": "src/net.h",
    "position": 43,
    "original_position": 33,
    "commit_id": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "original_commit_id": "acd6135b43941fa51d52f5fcdb2ce944280ad01e",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I see e.g. `TxDownloadState` has `m_` prefix :)",
    "created_at": "2020-08-11T10:41:14Z",
    "updated_at": "2020-08-11T10:41:20Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r468487425",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468487425"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18991#discussion_r468487425"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18991"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468487425/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 436,
    "original_line": 436,
    "side": "RIGHT",
    "in_reply_to_id": 464082309
  }
]