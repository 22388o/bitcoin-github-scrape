[
  {
    "sha": "ded742bc5b96e3215d69c11fb3628d224e7ae034",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZWQ3NDJiYzViOTZlMzIxNWQ2OWMxMWZiMzYyOGQyMjRlN2FlMDM0",
    "commit": {
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-07-04T08:25:51Z"
      },
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-07-24T15:02:20Z"
      },
      "message": "Move filtering banned addrs inside GetAddresses()",
      "tree": {
        "sha": "a7b236f7cac040a817a794716bc419aa5f75a29f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a7b236f7cac040a817a794716bc419aa5f75a29f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ded742bc5b96e3215d69c11fb3628d224e7ae034",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ded742bc5b96e3215d69c11fb3628d224e7ae034",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ded742bc5b96e3215d69c11fb3628d224e7ae034",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ded742bc5b96e3215d69c11fb3628d224e7ae034/comments",
    "author": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "007e15dcd7f8b42501e31cc36343655c53027077",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/007e15dcd7f8b42501e31cc36343655c53027077",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/007e15dcd7f8b42501e31cc36343655c53027077"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 8,
      "deletions": 5
    },
    "files": [
      {
        "sha": "171358bb5f812b98a2e34f5ffb585e6cda87f9a9",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ded742bc5b96e3215d69c11fb3628d224e7ae034/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ded742bc5b96e3215d69c11fb3628d224e7ae034/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=ded742bc5b96e3215d69c11fb3628d224e7ae034",
        "patch": "@@ -2530,7 +2530,13 @@ void CConnman::AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddres\n \n std::vector<CAddress> CConnman::GetAddresses()\n {\n-    return addrman.GetAddr();\n+    std::vector<CAddress> addresses = addrman.GetAddr();\n+    if (m_banman) {\n+        addresses.erase(std::remove_if(addresses.begin(), addresses.end(),\n+                        [this](const CAddress& addr){return m_banman->IsDiscouraged(addr) || m_banman->IsBanned(addr);}),\n+                        addresses.end());\n+    }\n+    return addresses;\n }\n \n bool CConnman::AddNode(const std::string& strNode)"
      },
      {
        "sha": "0aa7288b7d9b4c326b6e2596d29857e48b654e13",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ded742bc5b96e3215d69c11fb3628d224e7ae034/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ded742bc5b96e3215d69c11fb3628d224e7ae034/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=ded742bc5b96e3215d69c11fb3628d224e7ae034",
        "patch": "@@ -3480,10 +3480,7 @@ void ProcessMessage(\n         std::vector<CAddress> vAddr = connman.GetAddresses();\n         FastRandomContext insecure_rand;\n         for (const CAddress &addr : vAddr) {\n-            bool banned_or_discouraged = banman && (banman->IsDiscouraged(addr) || banman->IsBanned(addr));\n-            if (!banned_or_discouraged) {\n-                pfrom.PushAddress(addr, insecure_rand);\n-            }\n+            pfrom.PushAddress(addr, insecure_rand);\n         }\n         return;\n     }"
      }
    ]
  },
  {
    "sha": "7cc0e8101f01891aa8be093a00d993bb7579c385",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Y2MwZTgxMDFmMDE4OTFhYThiZTA5M2EwMGQ5OTNiYjc1NzljMzg1",
    "commit": {
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-07-08T07:29:47Z"
      },
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-07-24T15:02:20Z"
      },
      "message": "Remove useless 2500 limit on AddrMan queries",
      "tree": {
        "sha": "7d07db047d4c19a4d50a2f087e9e4da7eef7ee3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d07db047d4c19a4d50a2f087e9e4da7eef7ee3a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7cc0e8101f01891aa8be093a00d993bb7579c385",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cc0e8101f01891aa8be093a00d993bb7579c385",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7cc0e8101f01891aa8be093a00d993bb7579c385",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cc0e8101f01891aa8be093a00d993bb7579c385/comments",
    "author": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ded742bc5b96e3215d69c11fb3628d224e7ae034",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ded742bc5b96e3215d69c11fb3628d224e7ae034",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ded742bc5b96e3215d69c11fb3628d224e7ae034"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 7,
      "deletions": 4
    },
    "files": [
      {
        "sha": "9e742339db0b0e2a73deb34c2bf0fd801f002d9b",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cc0e8101f01891aa8be093a00d993bb7579c385/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cc0e8101f01891aa8be093a00d993bb7579c385/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=7cc0e8101f01891aa8be093a00d993bb7579c385",
        "patch": "@@ -157,7 +157,7 @@ class CAddrInfo : public CAddress\n #define ADDRMAN_GETADDR_MAX_PCT 23\n \n //! the maximum number of nodes to return in a getaddr call\n-#define ADDRMAN_GETADDR_MAX 2500\n+#define ADDRMAN_GETADDR_MAX 1000\n \n //! Convenience\n #define ADDRMAN_TRIED_BUCKET_COUNT (1 << ADDRMAN_TRIED_BUCKET_COUNT_LOG2)"
      },
      {
        "sha": "3492a784cc381b140afb2b7977ab350b5e113c4e",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cc0e8101f01891aa8be093a00d993bb7579c385/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cc0e8101f01891aa8be093a00d993bb7579c385/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=7cc0e8101f01891aa8be093a00d993bb7579c385",
        "patch": "@@ -52,6 +52,9 @@ static const int TIMEOUT_INTERVAL = 20 * 60;\n static const int FEELER_INTERVAL = 120;\n /** The maximum number of new addresses to accumulate before announcing. */\n static const unsigned int MAX_ADDR_TO_SEND = 1000;\n+// TODO: remove ADDRMAN_GETADDR_MAX and let the caller specify this limit with MAX_ADDR_TO_SEND.\n+static_assert(MAX_ADDR_TO_SEND == ADDRMAN_GETADDR_MAX,\n+    \"Max allowed ADDR message size should be equal to the max number of records returned from AddrMan.\");\n /** Maximum length of incoming protocol messages (no message over 4 MB is currently acceptable). */\n static const unsigned int MAX_PROTOCOL_MESSAGE_LENGTH = 4 * 1000 * 1000;\n /** Maximum length of the user agent string in `version` message */"
      },
      {
        "sha": "a591836f2e0734926948e6e6fbec493945dfb7d2",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cc0e8101f01891aa8be093a00d993bb7579c385/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cc0e8101f01891aa8be093a00d993bb7579c385/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=7cc0e8101f01891aa8be093a00d993bb7579c385",
        "patch": "@@ -2546,7 +2546,7 @@ void ProcessMessage(\n         if (!pfrom.IsAddrRelayPeer()) {\n             return;\n         }\n-        if (vAddr.size() > 1000)\n+        if (vAddr.size() > MAX_ADDR_TO_SEND)\n         {\n             LOCK(cs_main);\n             Misbehaving(pfrom.GetId(), 20, strprintf(\"addr message size = %u\", vAddr.size()));\n@@ -4064,8 +4064,8 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                 {\n                     pto->m_addr_known->insert(addr.GetKey());\n                     vAddr.push_back(addr);\n-                    // receiver rejects addr messages larger than 1000\n-                    if (vAddr.size() >= 1000)\n+                    // receiver rejects addr messages larger than MAX_ADDR_TO_SEND\n+                    if (vAddr.size() >= MAX_ADDR_TO_SEND)\n                     {\n                         connman->PushMessage(pto, msgMaker.Make(NetMsgType::ADDR, vAddr));\n                         vAddr.clear();"
      }
    ]
  },
  {
    "sha": "acd6135b43941fa51d52f5fcdb2ce944280ad01e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphY2Q2MTM1YjQzOTQxZmE1MWQ1MmY1ZmNkYjJjZTk0NDI4MGFkMDFl",
    "commit": {
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-05-17T01:05:44Z"
      },
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-07-30T11:38:48Z"
      },
      "message": "Cache responses to addr requests\n\nPrevents a spy from scraping victim's AddrMan by\nreconnecting and re-requesting addrs.",
      "tree": {
        "sha": "4d49cad92bd7a620e2b48fee2ad5b29201aade63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d49cad92bd7a620e2b48fee2ad5b29201aade63"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/acd6135b43941fa51d52f5fcdb2ce944280ad01e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acd6135b43941fa51d52f5fcdb2ce944280ad01e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/acd6135b43941fa51d52f5fcdb2ce944280ad01e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acd6135b43941fa51d52f5fcdb2ce944280ad01e/comments",
    "author": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7cc0e8101f01891aa8be093a00d993bb7579c385",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cc0e8101f01891aa8be093a00d993bb7579c385",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7cc0e8101f01891aa8be093a00d993bb7579c385"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 43,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bf29d928a1a8971955b55d35092a847ccae6f735",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acd6135b43941fa51d52f5fcdb2ce944280ad01e/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acd6135b43941fa51d52f5fcdb2ce944280ad01e/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=acd6135b43941fa51d52f5fcdb2ce944280ad01e",
        "patch": "@@ -2539,6 +2539,17 @@ std::vector<CAddress> CConnman::GetAddresses()\n     return addresses;\n }\n \n+std::vector<CAddress> CConnman::GetAddresses(Network requestor_network)\n+{\n+    const auto current_time = GetTime<std::chrono::microseconds>();\n+    if (m_addr_response_caches.find(requestor_network) == m_addr_response_caches.end() ||\n+        m_addr_response_caches[requestor_network].m_update_addr_response < current_time) {\n+        m_addr_response_caches[requestor_network].m_addrs_response_cache = GetAddresses();\n+        m_addr_response_caches[requestor_network].m_update_addr_response = current_time + std::chrono::hours(21) + GetRandMillis(std::chrono::hours(6));\n+    }\n+    return m_addr_response_caches[requestor_network].m_addrs_response_cache;\n+}\n+\n bool CConnman::AddNode(const std::string& strNode)\n {\n     LOCK(cs_vAddedNodes);"
      },
      {
        "sha": "1b9ed9dff422a02303ce1387d5f3edd0df7735a3",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acd6135b43941fa51d52f5fcdb2ce944280ad01e/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acd6135b43941fa51d52f5fcdb2ce944280ad01e/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=acd6135b43941fa51d52f5fcdb2ce944280ad01e",
        "patch": "@@ -27,6 +27,7 @@\n #include <atomic>\n #include <cstdint>\n #include <deque>\n+#include <map>\n #include <thread>\n #include <memory>\n #include <condition_variable>\n@@ -254,6 +255,13 @@ class CConnman\n     void MarkAddressGood(const CAddress& addr);\n     void AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddress& addrFrom, int64_t nTimePenalty = 0);\n     std::vector<CAddress> GetAddresses();\n+    /**\n+     * Cache is used to minimize topology leaks, so it should\n+     * be used for all non-trusted calls, for example, p2p.\n+     * A non-malicious call (from RPC) should\n+     * call the function without a parameter to avoid using the cache.\n+     */\n+    std::vector<CAddress> GetAddresses(Network requestor_network);\n \n     // This allows temporarily exceeding m_max_outbound_full_relay, with the goal of finding\n     // a peer that is better than all our current peers.\n@@ -418,6 +426,29 @@ class CConnman\n     std::atomic<NodeId> nLastNodeId{0};\n     unsigned int nPrevNodeCount{0};\n \n+    /**\n+     * Cache responses to addr requests to minimize privacy leak.\n+     * Attack example: scraping addrs in real-time may allow an attacker\n+     * to infer new connections of the victim by detecting new records\n+     * with fresh timestamps (per self-announcement).\n+     */\n+    struct CachedAddrResponse {\n+        std::vector<CAddress> m_addrs_response_cache;\n+        std::chrono::microseconds m_update_addr_response{0};\n+    };\n+\n+    /**\n+     * Addr responses stored in different caches\n+     * per network prevent cross-network node identification.\n+     * If a node for example is multi-homed under Tor and IPv6,\n+     * a single cache (or no cache at all) would let an attacker\n+     * to easily detect that it is the same node by comparing responses.\n+     * The used memory equals to 1000 CAddress records (or around 32 bytes) per\n+     * distinct Network (up to 5) we have/had an inbound peer from,\n+     * resulting in at most ~160 KB.\n+     */\n+    std::map<Network, CachedAddrResponse> m_addr_response_caches;\n+\n     /**\n      * Services this instance offers.\n      *"
      },
      {
        "sha": "a9f6ed960fc655f655401109e436359fb9e35277",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acd6135b43941fa51d52f5fcdb2ce944280ad01e/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acd6135b43941fa51d52f5fcdb2ce944280ad01e/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=acd6135b43941fa51d52f5fcdb2ce944280ad01e",
        "patch": "@@ -3477,7 +3477,7 @@ void ProcessMessage(\n         pfrom.fSentAddr = true;\n \n         pfrom.vAddrToSend.clear();\n-        std::vector<CAddress> vAddr = connman.GetAddresses();\n+        std::vector<CAddress> vAddr = connman.GetAddresses(pfrom.addr.GetNetwork());\n         FastRandomContext insecure_rand;\n         for (const CAddress &addr : vAddr) {\n             pfrom.PushAddress(addr, insecure_rand);"
      }
    ]
  },
  {
    "sha": "cf1569e074505dbbb9d29422803dd31bb62072d4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjE1NjllMDc0NTA1ZGJiYjlkMjk0MjI4MDNkZDMxYmI2MjA3MmQ0",
    "commit": {
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-06-03T15:51:34Z"
      },
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-07-30T11:38:50Z"
      },
      "message": "Add addr permission flag enabling non-cached addr sharing",
      "tree": {
        "sha": "d86245d33855ec83bc82125b50776dc448572c35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d86245d33855ec83bc82125b50776dc448572c35"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf1569e074505dbbb9d29422803dd31bb62072d4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf1569e074505dbbb9d29422803dd31bb62072d4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cf1569e074505dbbb9d29422803dd31bb62072d4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf1569e074505dbbb9d29422803dd31bb62072d4/comments",
    "author": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "acd6135b43941fa51d52f5fcdb2ce944280ad01e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acd6135b43941fa51d52f5fcdb2ce944280ad01e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/acd6135b43941fa51d52f5fcdb2ce944280ad01e"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 17,
      "deletions": 5
    },
    "files": [
      {
        "sha": "1c558ee810aee4edd91099fee247ffa9b7e62583",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf1569e074505dbbb9d29422803dd31bb62072d4/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf1569e074505dbbb9d29422803dd31bb62072d4/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=cf1569e074505dbbb9d29422803dd31bb62072d4",
        "patch": "@@ -258,7 +258,7 @@ class CConnman\n     /**\n      * Cache is used to minimize topology leaks, so it should\n      * be used for all non-trusted calls, for example, p2p.\n-     * A non-malicious call (from RPC) should\n+     * A non-malicious call (from RPC or a peer with addr permission) should\n      * call the function without a parameter to avoid using the cache.\n      */\n     std::vector<CAddress> GetAddresses(Network requestor_network);"
      },
      {
        "sha": "53648deb400b9546aea1c21f5f42412c15151cf1",
        "filename": "src/net_permissions.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf1569e074505dbbb9d29422803dd31bb62072d4/src/net_permissions.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf1569e074505dbbb9d29422803dd31bb62072d4/src/net_permissions.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_permissions.cpp?ref=cf1569e074505dbbb9d29422803dd31bb62072d4",
        "patch": "@@ -15,6 +15,7 @@ const std::vector<std::string> NET_PERMISSIONS_DOC{\n     \"relay (relay even in -blocksonly mode)\",\n     \"mempool (allow requesting BIP35 mempool contents)\",\n     \"download (allow getheaders during IBD, no disconnect after maxuploadtarget limit)\",\n+    \"addr (responses to GETADDR avoid hitting the cache and contain random records with the most up-to-date info)\"\n };\n \n namespace {\n@@ -50,6 +51,7 @@ bool TryParsePermissionFlags(const std::string str, NetPermissionFlags& output,\n             else if (permission == \"download\") NetPermissions::AddFlag(flags, PF_DOWNLOAD);\n             else if (permission == \"all\") NetPermissions::AddFlag(flags, PF_ALL);\n             else if (permission == \"relay\") NetPermissions::AddFlag(flags, PF_RELAY);\n+            else if (permission == \"addr\") NetPermissions::AddFlag(flags, PF_ADDR);\n             else if (permission.length() == 0); // Allow empty entries\n             else {\n                 error = strprintf(_(\"Invalid P2P permission: '%s'\"), permission);\n@@ -75,6 +77,7 @@ std::vector<std::string> NetPermissions::ToStrings(NetPermissionFlags flags)\n     if (NetPermissions::HasFlag(flags, PF_RELAY)) strings.push_back(\"relay\");\n     if (NetPermissions::HasFlag(flags, PF_MEMPOOL)) strings.push_back(\"mempool\");\n     if (NetPermissions::HasFlag(flags, PF_DOWNLOAD)) strings.push_back(\"download\");\n+    if (NetPermissions::HasFlag(flags, PF_ADDR)) strings.push_back(\"addr\");\n     return strings;\n }\n "
      },
      {
        "sha": "5b68f635a7ae5de33b89609aba2ca8a3cab5e48f",
        "filename": "src/net_permissions.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf1569e074505dbbb9d29422803dd31bb62072d4/src/net_permissions.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf1569e074505dbbb9d29422803dd31bb62072d4/src/net_permissions.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_permissions.h?ref=cf1569e074505dbbb9d29422803dd31bb62072d4",
        "patch": "@@ -29,10 +29,12 @@ enum NetPermissionFlags {\n     PF_NOBAN = (1U << 4) | PF_DOWNLOAD,\n     // Can query the mempool\n     PF_MEMPOOL = (1U << 5),\n+    // Can request addrs without hitting a privacy-preserving cache\n+    PF_ADDR = (1U << 7),\n \n     // True if the user did not specifically set fine grained permissions\n     PF_ISIMPLICIT = (1U << 31),\n-    PF_ALL = PF_BLOOMFILTER | PF_FORCERELAY | PF_RELAY | PF_NOBAN | PF_MEMPOOL | PF_DOWNLOAD,\n+    PF_ALL = PF_BLOOMFILTER | PF_FORCERELAY | PF_RELAY | PF_NOBAN | PF_MEMPOOL | PF_DOWNLOAD | PF_ADDR,\n };\n \n class NetPermissions"
      },
      {
        "sha": "90d3af8c2a7554ead011fd7feaf967f13fd8098e",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf1569e074505dbbb9d29422803dd31bb62072d4/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf1569e074505dbbb9d29422803dd31bb62072d4/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=cf1569e074505dbbb9d29422803dd31bb62072d4",
        "patch": "@@ -3477,7 +3477,12 @@ void ProcessMessage(\n         pfrom.fSentAddr = true;\n \n         pfrom.vAddrToSend.clear();\n-        std::vector<CAddress> vAddr = connman.GetAddresses(pfrom.addr.GetNetwork());\n+        std::vector<CAddress> vAddr;\n+        if (pfrom.HasPermission(PF_ADDR)) {\n+            vAddr = connman.GetAddresses();\n+        } else {\n+            vAddr = connman.GetAddresses(pfrom.addr.GetNetwork());\n+        }\n         FastRandomContext insecure_rand;\n         for (const CAddress &addr : vAddr) {\n             pfrom.PushAddress(addr, insecure_rand);"
      },
      {
        "sha": "8a674ac1e926888b8dd2576b5d70ce51082cd85d",
        "filename": "src/test/fuzz/net_permissions.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf1569e074505dbbb9d29422803dd31bb62072d4/src/test/fuzz/net_permissions.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf1569e074505dbbb9d29422803dd31bb62072d4/src/test/fuzz/net_permissions.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/net_permissions.cpp?ref=cf1569e074505dbbb9d29422803dd31bb62072d4",
        "patch": "@@ -24,6 +24,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n                                                                                              NetPermissionFlags::PF_FORCERELAY,\n                                                                                              NetPermissionFlags::PF_NOBAN,\n                                                                                              NetPermissionFlags::PF_MEMPOOL,\n+                                                                                             NetPermissionFlags::PF_ADDR,\n                                                                                              NetPermissionFlags::PF_ISIMPLICIT,\n                                                                                              NetPermissionFlags::PF_ALL,\n                                                                                          }) :"
      },
      {
        "sha": "072aa8d345866f95e4d0552186a1be3b52612c55",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf1569e074505dbbb9d29422803dd31bb62072d4/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf1569e074505dbbb9d29422803dd31bb62072d4/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=cf1569e074505dbbb9d29422803dd31bb62072d4",
        "patch": "@@ -397,13 +397,14 @@ BOOST_AUTO_TEST_CASE(netpermissions_test)\n     BOOST_CHECK(NetWhitelistPermissions::TryParse(\"bloom,forcerelay,noban,relay,mempool@1.2.3.4/32\", whitelistPermissions, error));\n \n     const auto strings = NetPermissions::ToStrings(PF_ALL);\n-    BOOST_CHECK_EQUAL(strings.size(), 6U);\n+    BOOST_CHECK_EQUAL(strings.size(), 7U);\n     BOOST_CHECK(std::find(strings.begin(), strings.end(), \"bloomfilter\") != strings.end());\n     BOOST_CHECK(std::find(strings.begin(), strings.end(), \"forcerelay\") != strings.end());\n     BOOST_CHECK(std::find(strings.begin(), strings.end(), \"relay\") != strings.end());\n     BOOST_CHECK(std::find(strings.begin(), strings.end(), \"noban\") != strings.end());\n     BOOST_CHECK(std::find(strings.begin(), strings.end(), \"mempool\") != strings.end());\n     BOOST_CHECK(std::find(strings.begin(), strings.end(), \"download\") != strings.end());\n+    BOOST_CHECK(std::find(strings.begin(), strings.end(), \"addr\") != strings.end());\n }\n \n BOOST_AUTO_TEST_CASE(netbase_dont_resolve_strings_with_embedded_nul_characters)"
      },
      {
        "sha": "254352c816119d45049cee55234d144aa0a324b2",
        "filename": "test/functional/p2p_permissions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf1569e074505dbbb9d29422803dd31bb62072d4/test/functional/p2p_permissions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf1569e074505dbbb9d29422803dd31bb62072d4/test/functional/p2p_permissions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_permissions.py?ref=cf1569e074505dbbb9d29422803dd31bb62072d4",
        "patch": "@@ -96,7 +96,7 @@ def run_test(self):\n         self.checkpermission(\n             # all permission added\n             [\"-whitelist=all@127.0.0.1\"],\n-            [\"forcerelay\", \"noban\", \"mempool\", \"bloomfilter\", \"relay\", \"download\"],\n+            [\"forcerelay\", \"noban\", \"mempool\", \"bloomfilter\", \"relay\", \"download\", \"addr\"],\n             False)\n \n         self.stop_node(1)"
      }
    ]
  },
  {
    "sha": "3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYmQ2N2JhNWE0ZWYzYzIwZWYxZjg3M2I2M2M5ZjUzYTZjODYwOGI2",
    "commit": {
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-05-17T01:06:22Z"
      },
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-07-30T11:38:50Z"
      },
      "message": "Test addr response caching",
      "tree": {
        "sha": "80f2b6f23b3997a512069ca4692f538a0ea71ae2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/80f2b6f23b3997a512069ca4692f538a0ea71ae2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6/comments",
    "author": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cf1569e074505dbbb9d29422803dd31bb62072d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf1569e074505dbbb9d29422803dd31bb62072d4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf1569e074505dbbb9d29422803dd31bb62072d4"
      }
    ],
    "stats": {
      "total": 110,
      "additions": 110,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c9278eab922cb161d82c9cc5aefb9d5a8027a3fc",
        "filename": "test/functional/p2p_getaddr_caching.py",
        "status": "added",
        "additions": 109,
        "deletions": 0,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6/test/functional/p2p_getaddr_caching.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6/test/functional/p2p_getaddr_caching.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_getaddr_caching.py?ref=3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
        "patch": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test addr response caching\"\"\"\n+\n+import time\n+from test_framework.messages import (\n+    CAddress,\n+    NODE_NETWORK,\n+    NODE_WITNESS,\n+    msg_addr,\n+    msg_getaddr,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    mininode_lock\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+)\n+\n+MAX_ADDR_TO_SEND = 1000\n+\n+def gen_addrs(n):\n+    addrs = []\n+    for i in range(n):\n+        addr = CAddress()\n+        addr.time = int(time.time())\n+        addr.nServices = NODE_NETWORK | NODE_WITNESS\n+        # Use first octets to occupy different AddrMan buckets\n+        first_octet = i >> 8\n+        second_octet = i % 256\n+        addr.ip = \"{}.{}.1.1\".format(first_octet, second_octet)\n+        addr.port = 8333\n+        addrs.append(addr)\n+    return addrs\n+\n+class AddrReceiver(P2PInterface):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.received_addrs = None\n+\n+    def get_received_addrs(self):\n+        with mininode_lock:\n+            return self.received_addrs\n+\n+    def on_addr(self, message):\n+        self.received_addrs = []\n+        for addr in message.addrs:\n+            self.received_addrs.append(addr.ip)\n+\n+    def addr_received(self):\n+        return self.received_addrs is not None\n+\n+\n+class AddrTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.log.info('Create connection that sends and requests addr messages')\n+        addr_source = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        msg_send_addrs = msg_addr()\n+        self.log.info('Fill peer AddrMan with a lot of records')\n+        # Since these addrs are sent from the same source, not all of them will be stored,\n+        # because we allocate a limited number of AddrMan buckets per addr source.\n+        total_addrs = 10000\n+        addrs = gen_addrs(total_addrs)\n+        for i in range(int(total_addrs/MAX_ADDR_TO_SEND)):\n+            msg_send_addrs.addrs = addrs[i * MAX_ADDR_TO_SEND:(i + 1) * MAX_ADDR_TO_SEND]\n+            addr_source.send_and_ping(msg_send_addrs)\n+\n+        responses = []\n+        self.log.info('Send many addr requests within short time to receive same response')\n+        N = 5\n+        cur_mock_time = int(time.time())\n+        for i in range(N):\n+            addr_receiver = self.nodes[0].add_p2p_connection(AddrReceiver())\n+            addr_receiver.send_and_ping(msg_getaddr())\n+            # Trigger response\n+            cur_mock_time += 5 * 60\n+            self.nodes[0].setmocktime(cur_mock_time)\n+            addr_receiver.wait_until(addr_receiver.addr_received)\n+            responses.append(addr_receiver.get_received_addrs())\n+        for response in responses[1:]:\n+            assert_equal(response, responses[0])\n+        assert(len(response) < MAX_ADDR_TO_SEND)\n+\n+        cur_mock_time += 3 * 24 * 60 * 60\n+        self.nodes[0].setmocktime(cur_mock_time)\n+\n+        self.log.info('After time passed, see a new response to addr request')\n+        last_addr_receiver = self.nodes[0].add_p2p_connection(AddrReceiver())\n+        last_addr_receiver.send_and_ping(msg_getaddr())\n+        # Trigger response\n+        cur_mock_time += 5 * 60\n+        self.nodes[0].setmocktime(cur_mock_time)\n+        last_addr_receiver.wait_until(last_addr_receiver.addr_received)\n+        # new response is different\n+        assert(set(responses[0]) != set(last_addr_receiver.get_received_addrs()))\n+\n+\n+if __name__ == '__main__':\n+    AddrTest().main()"
      },
      {
        "sha": "b090e93394a5bf6955d4923b3357a5fd8480f950",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=3bd67ba5a4ef3c20ef1f873b63c9f53a6c8608b6",
        "patch": "@@ -159,6 +159,7 @@\n     'rpc_deprecated.py',\n     'wallet_disable.py',\n     'p2p_addr_relay.py',\n+    'p2p_getaddr_caching.py',\n     'p2p_getdata.py',\n     'rpc_net.py',\n     'wallet_keypool.py',"
      }
    ]
  }
]