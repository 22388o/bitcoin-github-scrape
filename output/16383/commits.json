[
  {
    "sha": "a50d9e6c0b8e8144d3deec58ec2e3449ba081151",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNTBkOWU2YzBiOGU4MTQ0ZDNkZWVjNThlYzJlMzQ0OWJhMDgxMTUx",
    "commit": {
      "author": {
        "name": "William Casarin",
        "email": "jb55@jb55.com",
        "date": "2019-07-13T15:34:49Z"
      },
      "committer": {
        "name": "William Casarin",
        "email": "jb55@jb55.com",
        "date": "2019-07-18T20:38:28Z"
      },
      "message": "rpcwallet: default include_watchonly to true for watchonly wallets\n\nThe logic before would only include watchonly addresses if it was\nexplicitly set in the rpc argument.\n\nThis changes the logic like so:\n\nIf the include_watchonly argument is missing, check the\nWALLET_FLAG_DISABLE_PRIVATE_KEYS flag to determine if we're working\nwith a watchonly wallet. If so, default include_watchonly to true.\n\nIf the include_watchonly argument is explicit set to false, we still\ndisable them from the listing. Although this would always return\nnothing, it might be still useful in situations where you want to\nexplicitly filter out watchonly addresses regardless of what wallet\nyou are dealing with.\n\nSigned-off-by: William Casarin <jb55@jb55.com>",
      "tree": {
        "sha": "5e6ebef1b7cd7afbfe78cd1a3db973776dd5af1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e6ebef1b7cd7afbfe78cd1a3db973776dd5af1d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a50d9e6c0b8e8144d3deec58ec2e3449ba081151",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a50d9e6c0b8e8144d3deec58ec2e3449ba081151",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a50d9e6c0b8e8144d3deec58ec2e3449ba081151",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a50d9e6c0b8e8144d3deec58ec2e3449ba081151/comments",
    "author": {
      "login": "jb55",
      "id": 45598,
      "node_id": "MDQ6VXNlcjQ1NTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jb55",
      "html_url": "https://github.com/jb55",
      "followers_url": "https://api.github.com/users/jb55/followers",
      "following_url": "https://api.github.com/users/jb55/following{/other_user}",
      "gists_url": "https://api.github.com/users/jb55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jb55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
      "organizations_url": "https://api.github.com/users/jb55/orgs",
      "repos_url": "https://api.github.com/users/jb55/repos",
      "events_url": "https://api.github.com/users/jb55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jb55/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jb55",
      "id": 45598,
      "node_id": "MDQ6VXNlcjQ1NTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jb55",
      "html_url": "https://github.com/jb55",
      "followers_url": "https://api.github.com/users/jb55/followers",
      "following_url": "https://api.github.com/users/jb55/following{/other_user}",
      "gists_url": "https://api.github.com/users/jb55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jb55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
      "organizations_url": "https://api.github.com/users/jb55/orgs",
      "repos_url": "https://api.github.com/users/jb55/repos",
      "events_url": "https://api.github.com/users/jb55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jb55/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "536590f358dc3d3e5821eba7f1009452ea93b205",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/536590f358dc3d3e5821eba7f1009452ea93b205",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/536590f358dc3d3e5821eba7f1009452ea93b205"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 36,
      "deletions": 17
    },
    "files": [
      {
        "sha": "e18e3d414afd8f4b466351356d17b9d4deedf6b0",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 17,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a50d9e6c0b8e8144d3deec58ec2e3449ba081151/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a50d9e6c0b8e8144d3deec58ec2e3449ba081151/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=a50d9e6c0b8e8144d3deec58ec2e3449ba081151",
        "patch": "@@ -52,6 +52,23 @@ static inline bool GetAvoidReuseFlag(CWallet * const pwallet, const UniValue& pa\n     return avoid_reuse;\n }\n \n+\n+/** Used by RPC commands that have an include_watchonly parameter.\n+ *  We default to true for watchonly wallets if include_watchonly isn't\n+ *  explicitly set.\n+ */\n+static bool ParseIncludeWatchonly(const UniValue& include_watchonly, const CWallet& pwallet)\n+{\n+    if (include_watchonly.isNull()) {\n+        // if include_watchonly isn't explicitly set, then check if we have a watchonly wallet\n+        return pwallet.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n+    }\n+\n+    // otherwise return whatever include_watchonly was set to\n+    return include_watchonly.get_bool();\n+}\n+\n+\n /** Checks if a CKey is in the given CWallet compressed or otherwise*/\n bool HaveKey(const CWallet& wallet, const CKey& key)\n {\n@@ -748,10 +765,7 @@ static UniValue getbalance(const JSONRPCRequest& request)\n         min_depth = request.params[1].get_int();\n     }\n \n-    bool include_watchonly = false;\n-    if (!request.params[2].isNull() && request.params[2].get_bool()) {\n-        include_watchonly = true;\n-    }\n+    bool include_watchonly = ParseIncludeWatchonly(request.params[2], *pwallet);\n \n     bool avoid_reuse = GetAvoidReuseFlag(pwallet, request.params[3]);\n \n@@ -1033,9 +1047,10 @@ static UniValue ListReceived(interfaces::Chain::Lock& locked_chain, CWallet * co\n         fIncludeEmpty = params[1].get_bool();\n \n     isminefilter filter = ISMINE_SPENDABLE;\n-    if(!params[2].isNull())\n-        if(params[2].get_bool())\n-            filter = filter | ISMINE_WATCH_ONLY;\n+\n+    if (ParseIncludeWatchonly(params[2], *pwallet)) {\n+        filter |= ISMINE_WATCH_ONLY;\n+    }\n \n     bool has_filtered_address = false;\n     CTxDestination filtered_address = CNoDestination();\n@@ -1434,9 +1449,10 @@ UniValue listtransactions(const JSONRPCRequest& request)\n     if (!request.params[2].isNull())\n         nFrom = request.params[2].get_int();\n     isminefilter filter = ISMINE_SPENDABLE;\n-    if(!request.params[3].isNull())\n-        if(request.params[3].get_bool())\n-            filter = filter | ISMINE_WATCH_ONLY;\n+\n+    if (ParseIncludeWatchonly(request.params[3], *pwallet)) {\n+        filter |= ISMINE_WATCH_ONLY;\n+    }\n \n     if (nCount < 0)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative count\");\n@@ -1579,8 +1595,8 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n         }\n     }\n \n-    if (!request.params[2].isNull() && request.params[2].get_bool()) {\n-        filter = filter | ISMINE_WATCH_ONLY;\n+    if (ParseIncludeWatchonly(request.params[2], *pwallet)) {\n+        filter |= ISMINE_WATCH_ONLY;\n     }\n \n     bool include_removed = (request.params[3].isNull() || request.params[3].get_bool());\n@@ -1697,9 +1713,10 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n     uint256 hash(ParseHashV(request.params[0], \"txid\"));\n \n     isminefilter filter = ISMINE_SPENDABLE;\n-    if(!request.params[1].isNull())\n-        if(request.params[1].get_bool())\n-            filter = filter | ISMINE_WATCH_ONLY;\n+\n+    if (ParseIncludeWatchonly(request.params[1], *pwallet)) {\n+        filter |= ISMINE_WATCH_ONLY;\n+    }\n \n     UniValue entry(UniValue::VOBJ);\n     auto it = pwallet->mapWallet.find(hash);\n@@ -3014,8 +3031,7 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n             }\n         }\n \n-        if (options.exists(\"includeWatching\"))\n-            coinControl.fAllowWatchOnly = options[\"includeWatching\"].get_bool();\n+        coinControl.fAllowWatchOnly = ParseIncludeWatchonly(options[\"includeWatching\"], *pwallet);\n \n         if (options.exists(\"lockUnspents\"))\n             lockUnspents = options[\"lockUnspents\"].get_bool();\n@@ -3047,6 +3063,9 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n             }\n         }\n       }\n+    } else {\n+        // if options is null and not a bool\n+        coinControl.fAllowWatchOnly = ParseIncludeWatchonly(NullUniValue, *pwallet);\n     }\n \n     if (tx.vout.size() == 0)"
      }
    ]
  },
  {
    "sha": "003a3c73c0450aa18ac2ab2ca47def2b8c53a7df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMDNhM2M3M2MwNDUwYWExOGFjMmFiMmNhNDdkZWYyYjhjNTNhN2Rm",
    "commit": {
      "author": {
        "name": "William Casarin",
        "email": "jb55@jb55.com",
        "date": "2019-07-13T18:48:50Z"
      },
      "committer": {
        "name": "William Casarin",
        "email": "jb55@jb55.com",
        "date": "2019-07-18T20:38:28Z"
      },
      "message": "rpcwallet: document include_watchonly default for watchonly wallets\n\nSigned-off-by: William Casarin <jb55@jb55.com>",
      "tree": {
        "sha": "c42d243c2a9ab27546d58081d20cd0e17f56bb6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c42d243c2a9ab27546d58081d20cd0e17f56bb6c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/003a3c73c0450aa18ac2ab2ca47def2b8c53a7df",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/003a3c73c0450aa18ac2ab2ca47def2b8c53a7df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/003a3c73c0450aa18ac2ab2ca47def2b8c53a7df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/003a3c73c0450aa18ac2ab2ca47def2b8c53a7df/comments",
    "author": {
      "login": "jb55",
      "id": 45598,
      "node_id": "MDQ6VXNlcjQ1NTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jb55",
      "html_url": "https://github.com/jb55",
      "followers_url": "https://api.github.com/users/jb55/followers",
      "following_url": "https://api.github.com/users/jb55/following{/other_user}",
      "gists_url": "https://api.github.com/users/jb55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jb55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
      "organizations_url": "https://api.github.com/users/jb55/orgs",
      "repos_url": "https://api.github.com/users/jb55/repos",
      "events_url": "https://api.github.com/users/jb55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jb55/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jb55",
      "id": 45598,
      "node_id": "MDQ6VXNlcjQ1NTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jb55",
      "html_url": "https://github.com/jb55",
      "followers_url": "https://api.github.com/users/jb55/followers",
      "following_url": "https://api.github.com/users/jb55/following{/other_user}",
      "gists_url": "https://api.github.com/users/jb55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jb55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
      "organizations_url": "https://api.github.com/users/jb55/orgs",
      "repos_url": "https://api.github.com/users/jb55/repos",
      "events_url": "https://api.github.com/users/jb55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jb55/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a50d9e6c0b8e8144d3deec58ec2e3449ba081151",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a50d9e6c0b8e8144d3deec58ec2e3449ba081151",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a50d9e6c0b8e8144d3deec58ec2e3449ba081151"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "fd4254330c3425c90151d88f9497f48315ef1c5c",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/003a3c73c0450aa18ac2ab2ca47def2b8c53a7df/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/003a3c73c0450aa18ac2ab2ca47def2b8c53a7df/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=003a3c73c0450aa18ac2ab2ca47def2b8c53a7df",
        "patch": "@@ -732,7 +732,7 @@ static UniValue getbalance(const JSONRPCRequest& request)\n                 {\n                     {\"dummy\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Remains for backward compatibility. Must be excluded or set to \\\"*\\\".\"},\n                     {\"minconf\", RPCArg::Type::NUM, /* default */ \"0\", \"Only include transactions confirmed at least this many times.\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also include balance in watch-only addresses (see 'importaddress')\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also include balance in watch-only addresses (see 'importaddress')\"},\n                     {\"avoid_reuse\", RPCArg::Type::BOOL, /* default */ \"true\", \"(only available if avoid_reuse wallet flag is set) Do not include balance in dirty outputs; addresses are considered dirty if they have previously been used in a transaction.\"},\n                 },\n                 RPCResult{\n@@ -1194,7 +1194,7 @@ static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n                 {\n                     {\"minconf\", RPCArg::Type::NUM, /* default */ \"1\", \"The minimum number of confirmations before payments are included.\"},\n                     {\"include_empty\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether to include addresses that haven't received any payments.\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether to include watch-only addresses (see 'importaddress').\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Whether to include watch-only addresses (see 'importaddress')\"},\n                     {\"address_filter\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"If present, only return information on this address.\"},\n                 },\n                 RPCResult{\n@@ -1245,7 +1245,7 @@ static UniValue listreceivedbylabel(const JSONRPCRequest& request)\n                 {\n                     {\"minconf\", RPCArg::Type::NUM, /* default */ \"1\", \"The minimum number of confirmations before payments are included.\"},\n                     {\"include_empty\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether to include labels that haven't received any payments.\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether to include watch-only addresses (see 'importaddress').\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Whether to include watch-only addresses (see 'importaddress')\"},\n                 },\n                 RPCResult{\n             \"[\\n\"\n@@ -1386,7 +1386,7 @@ UniValue listtransactions(const JSONRPCRequest& request)\n             \"              with the specified label, or \\\"*\\\" to disable filtering and return all transactions.\"},\n                     {\"count\", RPCArg::Type::NUM, /* default */ \"10\", \"The number of transactions to return\"},\n                     {\"skip\", RPCArg::Type::NUM, /* default */ \"0\", \"The number of transactions to skip\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"false\", \"Include transactions to watch-only addresses (see 'importaddress')\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Include transactions to watch-only addresses (see 'importaddress')\"},\n                 },\n                 RPCResult{\n             \"[\\n\"\n@@ -1518,7 +1518,7 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n                 {\n                     {\"blockhash\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"If set, the block hash to list transactions since, otherwise list all transactions.\"},\n                     {\"target_confirmations\", RPCArg::Type::NUM, /* default */ \"1\", \"Return the nth block hash from the main chain. e.g. 1 would mean the best block hash. Note: this is not used as a filter, but only affects [lastblock] in the return value\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"false\", \"Include transactions to watch-only addresses (see 'importaddress')\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Include transactions to watch-only addresses (see 'importaddress')\"},\n                     {\"include_removed\", RPCArg::Type::BOOL, /* default */ \"true\", \"Show transactions that were removed due to a reorg in the \\\"removed\\\" array\\n\"\n             \"                                                           (not guaranteed to work on pruned nodes)\"},\n                 },\n@@ -1658,7 +1658,7 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n                 \"\\nGet detailed information about in-wallet transaction <txid>\\n\",\n                 {\n                     {\"txid\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The transaction id\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether to include watch-only addresses in balance calculation and details[]\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Whether to include watch-only addresses in balance calculation and details[]\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -3120,7 +3120,7 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n                             {\"changeAddress\", RPCArg::Type::STR, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n                             {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n                             {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n-                            {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also select inputs which are watch only\"},\n+                            {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only\"},\n                             {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n                             {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n                             {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n@@ -4062,7 +4062,7 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                             {\"changeAddress\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n                             {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n                             {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n-                            {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also select inputs which are watch only\"},\n+                            {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only\"},\n                             {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n                             {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n                             {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\""
      }
    ]
  },
  {
    "sha": "72ffbdc5799c1707ecad674d701b43fb80b031d0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MmZmYmRjNTc5OWMxNzA3ZWNhZDY3NGQ3MDFiNDNmYjgwYjAzMWQw",
    "commit": {
      "author": {
        "name": "William Casarin",
        "email": "jb55@jb55.com",
        "date": "2019-07-16T20:23:21Z"
      },
      "committer": {
        "name": "William Casarin",
        "email": "jb55@jb55.com",
        "date": "2019-07-24T10:33:53Z"
      },
      "message": "doc: add release note for include_watchonly default changes\n\nSigned-off-by: William Casarin <jb55@jb55.com>",
      "tree": {
        "sha": "a096a264140b953bb09656411d541c6f298e5d44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a096a264140b953bb09656411d541c6f298e5d44"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/72ffbdc5799c1707ecad674d701b43fb80b031d0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72ffbdc5799c1707ecad674d701b43fb80b031d0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/72ffbdc5799c1707ecad674d701b43fb80b031d0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72ffbdc5799c1707ecad674d701b43fb80b031d0/comments",
    "author": {
      "login": "jb55",
      "id": 45598,
      "node_id": "MDQ6VXNlcjQ1NTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jb55",
      "html_url": "https://github.com/jb55",
      "followers_url": "https://api.github.com/users/jb55/followers",
      "following_url": "https://api.github.com/users/jb55/following{/other_user}",
      "gists_url": "https://api.github.com/users/jb55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jb55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
      "organizations_url": "https://api.github.com/users/jb55/orgs",
      "repos_url": "https://api.github.com/users/jb55/repos",
      "events_url": "https://api.github.com/users/jb55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jb55/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jb55",
      "id": 45598,
      "node_id": "MDQ6VXNlcjQ1NTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jb55",
      "html_url": "https://github.com/jb55",
      "followers_url": "https://api.github.com/users/jb55/followers",
      "following_url": "https://api.github.com/users/jb55/following{/other_user}",
      "gists_url": "https://api.github.com/users/jb55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jb55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
      "organizations_url": "https://api.github.com/users/jb55/orgs",
      "repos_url": "https://api.github.com/users/jb55/repos",
      "events_url": "https://api.github.com/users/jb55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jb55/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "003a3c73c0450aa18ac2ab2ca47def2b8c53a7df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/003a3c73c0450aa18ac2ab2ca47def2b8c53a7df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/003a3c73c0450aa18ac2ab2ca47def2b8c53a7df"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "80157151672851a30e06493f989ba68c26bdcd99",
        "filename": "doc/release-notes-16383.md",
        "status": "added",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72ffbdc5799c1707ecad674d701b43fb80b031d0/doc/release-notes-16383.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72ffbdc5799c1707ecad674d701b43fb80b031d0/doc/release-notes-16383.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-16383.md?ref=72ffbdc5799c1707ecad674d701b43fb80b031d0",
        "patch": "@@ -0,0 +1,8 @@\n+RPC changes\n+-----------\n+\n+RPCs which have an `include_watchonly` argument or `includeWatching`\n+option now default to `true` for watch-only wallets. Affected RPCs\n+are: `getbalance`, `listreceivedbyaddress`, `listreceivedbylabel`,\n+`listtransactions`, `listsinceblock`, `gettransaction`,\n+`walletcreatefundedpsbt`, and `fundrawtransaction`."
      }
    ]
  },
  {
    "sha": "72eaab073bc747425fe551777154b13a6c4c37c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MmVhYWIwNzNiYzc0NzQyNWZlNTUxNzc3MTU0YjEzYTZjNGMzN2M5",
    "commit": {
      "author": {
        "name": "William Casarin",
        "email": "jb55@jb55.com",
        "date": "2019-07-18T20:35:23Z"
      },
      "committer": {
        "name": "William Casarin",
        "email": "jb55@jb55.com",
        "date": "2019-07-24T10:33:53Z"
      },
      "message": "tests: functional watch-only wallet tests\n\nThese test the new watch-only defaults for rpcs with include_watchonly\nand includeWatching options.\n\nSigned-off-by: William Casarin <jb55@jb55.com>",
      "tree": {
        "sha": "771447eefd346f284bf7d64f0f54d6bfa5f1af2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/771447eefd346f284bf7d64f0f54d6bfa5f1af2a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/72eaab073bc747425fe551777154b13a6c4c37c9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72eaab073bc747425fe551777154b13a6c4c37c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/72eaab073bc747425fe551777154b13a6c4c37c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72eaab073bc747425fe551777154b13a6c4c37c9/comments",
    "author": {
      "login": "jb55",
      "id": 45598,
      "node_id": "MDQ6VXNlcjQ1NTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jb55",
      "html_url": "https://github.com/jb55",
      "followers_url": "https://api.github.com/users/jb55/followers",
      "following_url": "https://api.github.com/users/jb55/following{/other_user}",
      "gists_url": "https://api.github.com/users/jb55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jb55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
      "organizations_url": "https://api.github.com/users/jb55/orgs",
      "repos_url": "https://api.github.com/users/jb55/repos",
      "events_url": "https://api.github.com/users/jb55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jb55/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jb55",
      "id": 45598,
      "node_id": "MDQ6VXNlcjQ1NTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jb55",
      "html_url": "https://github.com/jb55",
      "followers_url": "https://api.github.com/users/jb55/followers",
      "following_url": "https://api.github.com/users/jb55/following{/other_user}",
      "gists_url": "https://api.github.com/users/jb55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jb55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
      "organizations_url": "https://api.github.com/users/jb55/orgs",
      "repos_url": "https://api.github.com/users/jb55/repos",
      "events_url": "https://api.github.com/users/jb55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jb55/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "72ffbdc5799c1707ecad674d701b43fb80b031d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72ffbdc5799c1707ecad674d701b43fb80b031d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/72ffbdc5799c1707ecad674d701b43fb80b031d0"
      }
    ],
    "stats": {
      "total": 109,
      "additions": 109,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a6688aa362ab9046b768a3fee617245aec03319f",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72eaab073bc747425fe551777154b13a6c4c37c9/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72eaab073bc747425fe551777154b13a6c4c37c9/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=72eaab073bc747425fe551777154b13a6c4c37c9",
        "patch": "@@ -127,6 +127,8 @@\n     'wallet_multiwallet.py --usecli',\n     'wallet_createwallet.py',\n     'wallet_createwallet.py --usecli',\n+    'wallet_watchonly.py',\n+    'wallet_watchonly.py --usecli',\n     'interface_http.py',\n     'interface_rpc.py',\n     'rpc_psbt.py',"
      },
      {
        "sha": "be8d7714fba76ae65fea5f3c8609369790c87329",
        "filename": "test/functional/wallet_watchonly.py",
        "status": "added",
        "additions": 107,
        "deletions": 0,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72eaab073bc747425fe551777154b13a6c4c37c9/test/functional/wallet_watchonly.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72eaab073bc747425fe551777154b13a6c4c37c9/test/functional/wallet_watchonly.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_watchonly.py?ref=72eaab073bc747425fe551777154b13a6c4c37c9",
        "patch": "@@ -0,0 +1,107 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test createwallet arguments.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error\n+)\n+\n+\n+class CreateWalletWatchonlyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+        self.supports_cli = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+\n+        self.nodes[0].createwallet(wallet_name='default')\n+        def_wallet = node.get_wallet_rpc('default')\n+\n+        a1 = def_wallet.getnewaddress()\n+        wo_change = def_wallet.getnewaddress()\n+        wo_addr = def_wallet.getnewaddress()\n+\n+        self.nodes[0].createwallet(wallet_name='wo', disable_private_keys=True)\n+        wo_wallet = node.get_wallet_rpc('wo')\n+\n+        wo_wallet.importpubkey(pubkey=def_wallet.getaddressinfo(wo_addr)['pubkey'])\n+        wo_wallet.importpubkey(pubkey=def_wallet.getaddressinfo(wo_change)['pubkey'])\n+\n+        # generate some btc for testing\n+        node.generatetoaddress(101, a1)\n+\n+        # send 1 btc to our watch-only address\n+        txid = def_wallet.sendtoaddress(wo_addr, 1)\n+        self.nodes[0].generate(1)\n+\n+        # getbalance\n+        self.log.info('include_watchonly should default to true for watch-only wallets')\n+        self.log.info('Testing getbalance watch-only defaults')\n+        assert_equal(wo_wallet.getbalance(), 1)\n+        assert_equal(len(wo_wallet.listtransactions()), 1)\n+        assert_equal(wo_wallet.getbalance(include_watchonly=False), 0)\n+\n+        self.log.info('Testing listreceivedbyaddress watch-only defaults')\n+        result = wo_wallet.listreceivedbyaddress()\n+        assert_equal(len(result), 1)\n+        assert_equal(result[0][\"involvesWatchonly\"], True)\n+        result = wo_wallet.listreceivedbyaddress(include_watchonly=False)\n+        assert_equal(len(result), 0)\n+\n+        self.log.info('Testing listreceivedbylabel watch-only defaults')\n+        result = wo_wallet.listreceivedbylabel()\n+        assert_equal(len(result), 1)\n+        assert_equal(result[0][\"involvesWatchonly\"], True)\n+        result = wo_wallet.listreceivedbylabel(include_watchonly=False)\n+        assert_equal(len(result), 0)\n+\n+        self.log.info('Testing listtransactions watch-only defaults')\n+        result = wo_wallet.listtransactions()\n+        assert_equal(len(result), 1)\n+        assert_equal(result[0][\"involvesWatchonly\"], True)\n+        result = wo_wallet.listtransactions(include_watchonly=False)\n+        assert_equal(len(result), 0)\n+\n+        self.log.info('Testing listsinceblock watch-only defaults')\n+        result = wo_wallet.listsinceblock()\n+        assert_equal(len(result[\"transactions\"]), 1)\n+        assert_equal(result[\"transactions\"][0][\"involvesWatchonly\"], True)\n+        result = wo_wallet.listsinceblock(include_watchonly=False)\n+        assert_equal(len(result[\"transactions\"]), 0)\n+\n+        self.log.info('Testing gettransaction watch-only defaults')\n+        result = wo_wallet.gettransaction(txid)\n+        assert_equal(result[\"details\"][0][\"involvesWatchonly\"], True)\n+        result = wo_wallet.gettransaction(txid=txid, include_watchonly=False)\n+        assert_equal(len(result[\"details\"]), 0)\n+\n+        self.log.info('Testing walletcreatefundedpsbt watch-only defaults')\n+        inputs = []\n+        outputs = [{a1: 0.5}]\n+        options = {'changeAddress': wo_change}\n+        no_wo_options = {'changeAddress': wo_change, 'includeWatching': False}\n+\n+        result = wo_wallet.walletcreatefundedpsbt(inputs=inputs, outputs=outputs, options=options)\n+        assert_equal(\"psbt\" in result, True)\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", wo_wallet.walletcreatefundedpsbt, inputs, outputs, 0, no_wo_options)\n+\n+        self.log.info('Testing fundrawtransaction watch-only defaults')\n+        rawtx = wo_wallet.createrawtransaction(inputs=inputs, outputs=outputs)\n+        result = wo_wallet.fundrawtransaction(hexstring=rawtx, options=options)\n+        assert_equal(\"hex\" in result, True)\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", wo_wallet.fundrawtransaction, rawtx, no_wo_options)\n+\n+\n+\n+if __name__ == '__main__':\n+    CreateWalletWatchonlyTest().main()"
      }
    ]
  }
]