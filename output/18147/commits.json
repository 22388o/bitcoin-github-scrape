[
  {
    "sha": "26be1813972017d0cc364fb110621366e35ae6af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNmJlMTgxMzk3MjAxN2QwY2MzNjRmYjExMDYyMTM2NmUzNWFlNmFm",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-02-14T13:58:50Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-03-26T21:28:03Z"
      },
      "message": "qt: Don't allow Qt to mess with LC_NUMERIC",
      "tree": {
        "sha": "48715f8d19d25437f2d2d439f98da0eeb2baba05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/48715f8d19d25437f2d2d439f98da0eeb2baba05"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26be1813972017d0cc364fb110621366e35ae6af",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26be1813972017d0cc364fb110621366e35ae6af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/26be1813972017d0cc364fb110621366e35ae6af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26be1813972017d0cc364fb110621366e35ae6af/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7f9dedb22dcd9550ca525c0e35fec38b2d59e029",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f9dedb22dcd9550ca525c0e35fec38b2d59e029",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7f9dedb22dcd9550ca525c0e35fec38b2d59e029"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 32,
      "deletions": 0
    },
    "files": [
      {
        "sha": "417ac4eb67182462938809a41b5bc6c98ba4e1eb",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26be1813972017d0cc364fb110621366e35ae6af/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26be1813972017d0cc364fb110621366e35ae6af/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=26be1813972017d0cc364fb110621366e35ae6af",
        "patch": "@@ -35,6 +35,7 @@\n #include <util/system.h>\n #include <util/threadnames.h>\n \n+#include <clocale>\n #include <memory>\n \n #include <QApplication>\n@@ -182,6 +183,36 @@ BitcoinApplication::BitcoinApplication(interfaces::Node& node):\n     returnValue(0),\n     platformStyle(nullptr)\n {\n+    // Force the classic locale (\"C\") for the numeric locale category (LC_NUMERIC).\n+    //\n+    // Rationale:\n+    //\n+    // Perhaps surprisingly Qt runs setlocale(LC_ALL, \"\") on initialization. This\n+    // installs the locale specified by the user's LC_ALL (or LC_*) environment\n+    // variable as the new C locale.\n+    //\n+    // In contrast bitcoind does not opt-in to localization -- no call to\n+    // setlocale(LC_ALL, \"\") is made and the environment variables LC_* are\n+    // thus ignored.\n+    //\n+    // This results in an unfortunate situation where the bitcoind is guaranteed\n+    // to be running with the classic locale (\"C\") whereas the locale of\n+    // bitcoin-qt will vary depending on the user's environment variables.\n+    //\n+    // An example: Assuming the environment variable LC_ALL=de_DE then the\n+    // call std::to_string(1.23) will return \"1.230000\" in bitcoind but\n+    // \"1,230000\" in bitcoin-qt.\n+    //\n+    // From the Qt documentation:\n+    // \"On Unix/Linux Qt is configured to use the system locale settings by default.\n+    //  This can cause a conflict when using POSIX functions, for instance, when\n+    //  converting between data types such as floats and strings, since the notation\n+    //  may differ between locales. To get around this problem, call the POSIX function\n+    //  setlocale(LC_NUMERIC,\"C\") right after initializing QApplication, QGuiApplication\n+    //  or QCoreApplication to reset the locale that is used for number formatting to\n+    //  \"C\"-locale.\"\n+    setlocale(LC_NUMERIC, \"C\");\n+\n     setQuitOnLastWindowClosed(false);\n }\n "
      },
      {
        "sha": "a1720a55ce1056964daa20c4277ed2a9a4cb2b12",
        "filename": "test/lint/lint-locale-dependence.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26be1813972017d0cc364fb110621366e35ae6af/test/lint/lint-locale-dependence.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26be1813972017d0cc364fb110621366e35ae6af/test/lint/lint-locale-dependence.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-locale-dependence.sh?ref=26be1813972017d0cc364fb110621366e35ae6af",
        "patch": "@@ -11,6 +11,7 @@ KNOWN_VIOLATIONS=(\n     \"src/dbwrapper.cpp:.*vsnprintf\"\n     \"src/httprpc.cpp.*trim\"\n     \"src/init.cpp:.*atoi\"\n+    \"src/qt/bitcoin.cpp:.*setlocale\"\n     \"src/qt/rpcconsole.cpp:.*atoi\"\n     \"src/rest.cpp:.*strtol\"\n     \"src/test/dbwrapper_tests.cpp:.*snprintf\""
      }
    ]
  }
]