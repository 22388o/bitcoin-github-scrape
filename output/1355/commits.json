[
  {
    "sha": "419e8c2b82c9b590fb4d19052eeaf8096300a06d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTllOGMyYjgyYzliNTkwZmI0ZDE5MDUyZWVhZjgwOTYzMDBhMDZk",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-05-13T04:43:24Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2013-04-12T04:57:29Z"
      },
      "message": "getblocktemplate: longpolling support",
      "tree": {
        "sha": "913e9f8931e6e82e6975f648cf3931addd9924c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/913e9f8931e6e82e6975f648cf3931addd9924c9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/419e8c2b82c9b590fb4d19052eeaf8096300a06d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/419e8c2b82c9b590fb4d19052eeaf8096300a06d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/419e8c2b82c9b590fb4d19052eeaf8096300a06d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/419e8c2b82c9b590fb4d19052eeaf8096300a06d/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2aa462ec30c3960ae546e4d8d50fdbaffefef718",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2aa462ec30c3960ae546e4d8d50fdbaffefef718",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2aa462ec30c3960ae546e4d8d50fdbaffefef718"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 47,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1b6de9910eed4b2f9c709dc8a5c6818d9465d1bc",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/419e8c2b82c9b590fb4d19052eeaf8096300a06d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/419e8c2b82c9b590fb4d19052eeaf8096300a06d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=419e8c2b82c9b590fb4d19052eeaf8096300a06d",
        "patch": "@@ -14,6 +14,9 @@\n #include <boost/algorithm/string/replace.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n+#include <boost/thread/condition_variable.hpp>\n+#include <boost/thread/locks.hpp>\n+#include <boost/thread/mutex.hpp>\n \n using namespace std;\n using namespace boost;\n@@ -41,6 +44,8 @@ uint256 hashBestChain = 0;\n CBlockIndex* pindexBest = NULL;\n set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexValid; // may contain all CBlockIndex*'s that have validness >=BLOCK_VALID_TRANSACTIONS, and must contain those who aren't failed\n int64 nTimeBestReceived = 0;\n+boost::mutex csBestBlock;\n+boost::condition_variable cvBlockChange;\n int nScriptCheckThreads = 0;\n bool fImporting = false;\n bool fReindex = false;\n@@ -1853,6 +1858,9 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n         ::SetBestChain(locator);\n     }\n \n+    {\n+        boost::lock_guard<boost::mutex> lock(csBestBlock);\n+\n     // New best block\n     hashBestChain = pindexNew->GetBlockHash();\n     pindexBest = pindexNew;\n@@ -1861,11 +1869,16 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n     bnBestChainWork = pindexNew->bnChainWork;\n     nTimeBestReceived = GetTime();\n     nTransactionsUpdated++;\n+\n+    }\n+\n     printf(\"SetBestChain: new best=%s  height=%d  work=%s  tx=%lu  date=%s  progress=%f\\n\",\n       hashBestChain.ToString().c_str(), nBestHeight, bnBestChainWork.ToString().c_str(), (unsigned long)pindexNew->nChainTx,\n       DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", pindexBest->GetBlockTime()).c_str(),\n       Checkpoints::GuessVerificationProgress(pindexBest));\n \n+    cvBlockChange.notify_all();\n+\n     // Check the version of the last 100 blocks to see if we need to upgrade:\n     if (!fIsInitialDownload)\n     {"
      },
      {
        "sha": "cb97b340e025b0e2b52373dcecf5a80589b340c1",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/419e8c2b82c9b590fb4d19052eeaf8096300a06d/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/419e8c2b82c9b590fb4d19052eeaf8096300a06d/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=419e8c2b82c9b590fb4d19052eeaf8096300a06d",
        "patch": "@@ -5,6 +5,9 @@\n #ifndef BITCOIN_MAIN_H\n #define BITCOIN_MAIN_H\n \n+#include <boost/thread/condition_variable.hpp>\n+#include <boost/thread/mutex.hpp>\n+\n #include \"bignum.h\"\n #include \"sync.h\"\n #include \"net.h\"\n@@ -88,6 +91,8 @@ extern const std::string strMessageMagic;\n extern double dHashesPerSec;\n extern int64 nHPSTimerStart;\n extern int64 nTimeBestReceived;\n+extern boost::mutex csBestBlock;\n+extern boost::condition_variable cvBlockChange;\n extern CCriticalSection cs_setpwalletRegistered;\n extern std::set<CWallet*> setpwalletRegistered;\n extern unsigned char pchMessageStart[4];"
      },
      {
        "sha": "bddbd2e920aa7929b6084a46be69238d14b6f995",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/419e8c2b82c9b590fb4d19052eeaf8096300a06d/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/419e8c2b82c9b590fb4d19052eeaf8096300a06d/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=419e8c2b82c9b590fb4d19052eeaf8096300a06d",
        "patch": "@@ -3,6 +3,8 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <boost/thread/locks.hpp>\n+\n #include \"main.h\"\n #include \"db.h\"\n #include \"init.h\"\n@@ -220,6 +222,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n             \"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\");\n \n     std::string strMode = \"template\";\n+    Value lpval = Value::null;\n     if (params.size() > 0)\n     {\n         const Object& oparam = params[0].get_obj();\n@@ -232,6 +235,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n         }\n         else\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid mode\");\n+        lpval = find_value(oparam, \"longpollid\");\n     }\n \n     if (strMode != \"template\")\n@@ -243,6 +247,30 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     if (IsInitialBlockDownload())\n         throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, \"Bitcoin is downloading blocks...\");\n \n+    if (lpval.type() == str_type)\n+    {\n+        // If longpollid is provided but doesn't match our current best block, we want to respond immediately, not wait\n+        uint256 lpid;\n+        lpid.SetHex(lpval.get_str());\n+        if (lpid != hashBestChain)\n+            lpval = Value::null;\n+    }\n+    if (lpval.type() != null_type)\n+    {\n+        // Wait until the best block changes to respond\n+        uint256 hashWatchedChain = hashBestChain;\n+\n+        LEAVE_CRITICAL_SECTION(pwalletMain->cs_wallet);\n+        LEAVE_CRITICAL_SECTION(cs_main);\n+        {\n+            boost::unique_lock<boost::mutex> lock(csBestBlock);\n+            while (hashBestChain == hashWatchedChain)\n+                cvBlockChange.wait(lock);\n+        }\n+        ENTER_CRITICAL_SECTION(cs_main);\n+        ENTER_CRITICAL_SECTION(pwalletMain->cs_wallet);\n+    }\n+\n     static CReserveKey reservekey(pwalletMain);\n \n     // Update block\n@@ -333,6 +361,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     result.push_back(Pair(\"transactions\", transactions));\n     result.push_back(Pair(\"coinbaseaux\", aux));\n     result.push_back(Pair(\"coinbasevalue\", (int64_t)pblock->vtx[0].vout[0].nValue));\n+    result.push_back(Pair(\"longpollid\", hashBestChain.GetHex()));\n     result.push_back(Pair(\"target\", hashTarget.GetHex()));\n     result.push_back(Pair(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1));\n     result.push_back(Pair(\"mutable\", aMutable));"
      }
    ]
  }
]