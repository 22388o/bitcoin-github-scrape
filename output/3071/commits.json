[
  {
    "sha": "d8315d1650373e6609cfda921160fd51f6608a99",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODMxNWQxNjUwMzczZTY2MDljZmRhOTIxMTYwZmQ1MWY2NjA4YTk5",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-10-09T06:45:59Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-10-09T06:48:53Z"
      },
      "message": "Remove include of windows.h from allocators.h\n\nCreate an allocators.cpp, and move all of the #ifdef WIN32\ncode and the #include of windows.h into it.\n\nTwo motives for this cleanup:\n1. I'm getting a weird error in windows.h in my smartfee branch.\n2. allocators.h is included (indirectly) just about everywhere, so\nthis should speed up Windows compiles quite a lot.",
      "tree": {
        "sha": "70a5dcccf893486bbd69dc4357021310a9d6bdb0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70a5dcccf893486bbd69dc4357021310a9d6bdb0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8315d1650373e6609cfda921160fd51f6608a99",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8315d1650373e6609cfda921160fd51f6608a99",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8315d1650373e6609cfda921160fd51f6608a99",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8315d1650373e6609cfda921160fd51f6608a99/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26002aa444d4ee4986d623e0ad45cca02e803bc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26002aa444d4ee4986d623e0ad45cca02e803bc5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26002aa444d4ee4986d623e0ad45cca02e803bc5"
      }
    ],
    "stats": {
      "total": 122,
      "additions": 68,
      "deletions": 54
    },
    "files": [
      {
        "sha": "49249fedc77a56f556dae1048238daab4d2126ff",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8315d1650373e6609cfda921160fd51f6608a99/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8315d1650373e6609cfda921160fd51f6608a99/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=d8315d1650373e6609cfda921160fd51f6608a99",
        "patch": "@@ -31,7 +31,7 @@ obj/build.h: FORCE\n \t  $(abs_top_srcdir)\n version.o: obj/build.h\n \n-libbitcoin_a_SOURCES = addrman.cpp alert.cpp bitcoinrpc.cpp bloom.cpp \\\n+libbitcoin_a_SOURCES = addrman.cpp alert.cpp allocators.cpp bitcoinrpc.cpp bloom.cpp \\\n   chainparams.cpp checkpoints.cpp core.cpp crypter.cpp db.cpp hash.cpp \\\n   init.cpp key.cpp keystore.cpp leveldb.cpp main.cpp miner.cpp \\\n   netbase.cpp net.cpp noui.cpp protocol.cpp rpcblockchain.cpp rpcdump.cpp \\"
      },
      {
        "sha": "b239b623d8e6ebac57782ae3eb377ed2d165bf5e",
        "filename": "src/allocators.cpp",
        "status": "added",
        "additions": 64,
        "deletions": 0,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8315d1650373e6609cfda921160fd51f6608a99/src/allocators.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8315d1650373e6609cfda921160fd51f6608a99/src/allocators.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/allocators.cpp?ref=d8315d1650373e6609cfda921160fd51f6608a99",
        "patch": "@@ -0,0 +1,64 @@\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"allocators.h\"\n+\n+#ifdef WIN32\n+#ifdef _WIN32_WINNT\n+#undef _WIN32_WINNT\n+#endif\n+#define _WIN32_WINNT 0x0501\n+#define WIN32_LEAN_AND_MEAN 1\n+#ifndef NOMINMAX\n+#define NOMINMAX\n+#endif\n+#include <windows.h>\n+// This is used to attempt to keep keying material out of swap\n+// Note that VirtualLock does not provide this as a guarantee on Windows,\n+// but, in practice, memory that has been VirtualLock'd almost never gets written to\n+// the pagefile except in rare circumstances where memory is extremely low.\n+#else\n+#include <sys/mman.h>\n+#include <limits.h> // for PAGESIZE\n+#include <unistd.h> // for sysconf\n+#endif\n+\n+/** Determine system page size in bytes */\n+static inline size_t GetSystemPageSize()\n+{\n+    size_t page_size;\n+#if defined(WIN32)\n+    SYSTEM_INFO sSysInfo;\n+    GetSystemInfo(&sSysInfo);\n+    page_size = sSysInfo.dwPageSize;\n+#elif defined(PAGESIZE) // defined in limits.h\n+    page_size = PAGESIZE;\n+#else // assume some POSIX OS\n+    page_size = sysconf(_SC_PAGESIZE);\n+#endif\n+    return page_size;\n+}\n+\n+bool MemoryPageLocker::Lock(const void *addr, size_t len)\n+{\n+#ifdef WIN32\n+    return VirtualLock(const_cast<void*>(addr), len);\n+#else\n+    return mlock(addr, len) == 0;\n+#endif\n+}\n+\n+bool MemoryPageLocker::Unlock(const void *addr, size_t len)\n+{\n+#ifdef WIN32\n+    return VirtualUnlock(const_cast<void*>(addr), len);\n+#else\n+    return munlock(addr, len) == 0;\n+#endif\n+}\n+\n+LockedPageManager::LockedPageManager() : LockedPageManagerBase<MemoryPageLocker>(GetSystemPageSize())\n+{\n+}\n+"
      },
      {
        "sha": "fd6f51b27eb63b9fba85b1eba0b804045eae7482",
        "filename": "src/allocators.h",
        "status": "modified",
        "additions": 3,
        "deletions": 53,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8315d1650373e6609cfda921160fd51f6608a99/src/allocators.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8315d1650373e6609cfda921160fd51f6608a99/src/allocators.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/allocators.h?ref=d8315d1650373e6609cfda921160fd51f6608a99",
        "patch": "@@ -11,25 +11,6 @@\n #include <map>\n #include <openssl/crypto.h> // for OPENSSL_cleanse()\n \n-#ifdef WIN32\n-#ifdef _WIN32_WINNT\n-#undef _WIN32_WINNT\n-#endif\n-#define _WIN32_WINNT 0x0501\n-#define WIN32_LEAN_AND_MEAN 1\n-#ifndef NOMINMAX\n-#define NOMINMAX\n-#endif\n-#include <windows.h>\n-// This is used to attempt to keep keying material out of swap\n-// Note that VirtualLock does not provide this as a guarantee on Windows,\n-// but, in practice, memory that has been VirtualLock'd almost never gets written to\n-// the pagefile except in rare circumstances where memory is extremely low.\n-#else\n-#include <sys/mman.h>\n-#include <limits.h> // for PAGESIZE\n-#include <unistd.h> // for sysconf\n-#endif\n \n /**\n  * Thread-safe class to keep track of locked (ie, non-swappable) memory pages.\n@@ -115,21 +96,6 @@ template <class Locker> class LockedPageManagerBase\n     Histogram histogram;\n };\n \n-/** Determine system page size in bytes */\n-static inline size_t GetSystemPageSize()\n-{\n-    size_t page_size;\n-#if defined(WIN32)\n-    SYSTEM_INFO sSysInfo;\n-    GetSystemInfo(&sSysInfo);\n-    page_size = sSysInfo.dwPageSize;\n-#elif defined(PAGESIZE) // defined in limits.h\n-    page_size = PAGESIZE;\n-#else // assume some POSIX OS\n-    page_size = sysconf(_SC_PAGESIZE);\n-#endif\n-    return page_size;\n-}\n \n /**\n  * OS-dependent memory page locking/unlocking.\n@@ -141,25 +107,11 @@ class MemoryPageLocker\n     /** Lock memory pages.\n      * addr and len must be a multiple of the system page size\n      */\n-    bool Lock(const void *addr, size_t len)\n-    {\n-#ifdef WIN32\n-        return VirtualLock(const_cast<void*>(addr), len);\n-#else\n-        return mlock(addr, len) == 0;\n-#endif\n-    }\n+    bool Lock(const void *addr, size_t len);\n     /** Unlock memory pages.\n      * addr and len must be a multiple of the system page size\n      */\n-    bool Unlock(const void *addr, size_t len)\n-    {\n-#ifdef WIN32\n-        return VirtualUnlock(const_cast<void*>(addr), len);\n-#else\n-        return munlock(addr, len) == 0;\n-#endif\n-    }\n+    bool Unlock(const void *addr, size_t len);\n };\n \n /**\n@@ -171,9 +123,7 @@ class LockedPageManager: public LockedPageManagerBase<MemoryPageLocker>\n public:\n     static LockedPageManager instance; // instantiated in util.cpp\n private:\n-    LockedPageManager():\n-        LockedPageManagerBase<MemoryPageLocker>(GetSystemPageSize())\n-    {}\n+    LockedPageManager();\n };\n \n //"
      }
    ]
  }
]