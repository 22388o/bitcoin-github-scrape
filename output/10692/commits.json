[
  {
    "sha": "f2902136aa8352fd752b6c967420fe7cfc04b94e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMjkwMjEzNmFhODM1MmZkNzUyYjZjOTY3NDIwZmU3Y2ZjMDRiOTRl",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-06-09T16:57:23Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T20:24:06Z"
      },
      "message": "Make DisconnectBlock unaware of where undo data resides on disk",
      "tree": {
        "sha": "23eabdef74ff0cb17902e019b51d8cd44c6da161",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/23eabdef74ff0cb17902e019b51d8cd44c6da161"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2902136aa8352fd752b6c967420fe7cfc04b94e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2902136aa8352fd752b6c967420fe7cfc04b94e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f2902136aa8352fd752b6c967420fe7cfc04b94e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2902136aa8352fd752b6c967420fe7cfc04b94e/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae47724687a78572daba5bc113d99d03b7ab01d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae47724687a78572daba5bc113d99d03b7ab01d6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae47724687a78572daba5bc113d99d03b7ab01d6"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "e4372f7aec628782126b36bc0fe95c83cfd7f0de",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2902136aa8352fd752b6c967420fe7cfc04b94e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2902136aa8352fd752b6c967420fe7cfc04b94e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=f2902136aa8352fd752b6c967420fe7cfc04b94e",
        "patch": "@@ -1353,8 +1353,13 @@ bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint\n     return true;\n }\n \n-bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uint256& hashBlock)\n+static bool UndoReadFromDisk(CBlockUndo& blockundo, const CBlockIndex *pindex)\n {\n+    CDiskBlockPos pos = pindex->GetUndoPos();\n+    if (pos.IsNull()) {\n+        return error(\"%s: no undo data available\", __func__);\n+    }\n+\n     // Open history file to read\n     CAutoFile filein(OpenUndoFile(pos, true), SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull())\n@@ -1364,7 +1369,7 @@ bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uin\n     uint256 hashChecksum;\n     CHashVerifier<CAutoFile> verifier(&filein); // We need a CHashVerifier as reserializing may lose data\n     try {\n-        verifier << hashBlock;\n+        verifier << pindex->pprev->GetBlockHash();\n         verifier >> blockundo;\n         filein >> hashChecksum;\n     }\n@@ -1447,12 +1452,7 @@ static DisconnectResult DisconnectBlock(const CBlock& block, const CBlockIndex*\n     bool fClean = true;\n \n     CBlockUndo blockUndo;\n-    CDiskBlockPos pos = pindex->GetUndoPos();\n-    if (pos.IsNull()) {\n-        error(\"DisconnectBlock(): no undo data available\");\n-        return DISCONNECT_FAILED;\n-    }\n-    if (!UndoReadFromDisk(blockUndo, pos, pindex->pprev->GetBlockHash())) {\n+    if (!UndoReadFromDisk(blockUndo, pindex)) {\n         error(\"DisconnectBlock(): failure reading undo data\");\n         return DISCONNECT_FAILED;\n     }\n@@ -3617,10 +3617,10 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n         // check level 2: verify undo validity\n         if (nCheckLevel >= 2 && pindex) {\n             CBlockUndo undo;\n-            CDiskBlockPos pos = pindex->GetUndoPos();\n-            if (!pos.IsNull()) {\n-                if (!UndoReadFromDisk(undo, pos, pindex->pprev->GetBlockHash()))\n+            if (!pindex->GetUndoPos().IsNull()) {\n+                if (!UndoReadFromDisk(undo, pindex)) {\n                     return error(\"VerifyDB(): *** found bad undo data at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                }\n             }\n         }\n         // check level 3: check for inconsistencies during memory-only disconnect of tip blocks"
      }
    ]
  },
  {
    "sha": "85596371283b8e069b9088500206d8ffbf81bb0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTU5NjM3MTI4M2I4ZTA2OWI5MDg4NTAwMjA2ZDhmZmJmODFiYjBk",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-12-03T00:54:15Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T20:24:06Z"
      },
      "message": "Move txindex/undo data disk location stuff out of ConnectBlock",
      "tree": {
        "sha": "104c9ee51f87ab25dce6cd7d8d687dc4c4fa3ccf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/104c9ee51f87ab25dce6cd7d8d687dc4c4fa3ccf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/85596371283b8e069b9088500206d8ffbf81bb0d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85596371283b8e069b9088500206d8ffbf81bb0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/85596371283b8e069b9088500206d8ffbf81bb0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85596371283b8e069b9088500206d8ffbf81bb0d/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2902136aa8352fd752b6c967420fe7cfc04b94e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2902136aa8352fd752b6c967420fe7cfc04b94e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2902136aa8352fd752b6c967420fe7cfc04b94e"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 42,
      "deletions": 23
    },
    "files": [
      {
        "sha": "43d49bbbf91437b7d60ea96a78527548820e4a47",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 23,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85596371283b8e069b9088500206d8ffbf81bb0d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85596371283b8e069b9088500206d8ffbf81bb0d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=85596371283b8e069b9088500206d8ffbf81bb0d",
        "patch": "@@ -1529,6 +1529,43 @@ void static FlushBlockFile(bool fFinalize = false)\n \n static bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigned int nAddSize);\n \n+static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, CValidationState& state, CBlockIndex* pindex, const CChainParams& chainparams)\n+{\n+    // Write undo information to disk\n+    if (pindex->GetUndoPos().IsNull()) {\n+        CDiskBlockPos _pos;\n+        if (!FindUndoPos(state, pindex->nFile, _pos, ::GetSerializeSize(blockundo, SER_DISK, CLIENT_VERSION) + 40))\n+            return error(\"ConnectBlock(): FindUndoPos failed\");\n+        if (!UndoWriteToDisk(blockundo, _pos, pindex->pprev->GetBlockHash(), chainparams.MessageStart()))\n+            return AbortNode(state, \"Failed to write undo data\");\n+\n+        // update nUndoPos in block index\n+        pindex->nUndoPos = _pos.nPos;\n+        pindex->nStatus |= BLOCK_HAVE_UNDO;\n+        setDirtyBlockIndex.insert(pindex);\n+    }\n+\n+    return true;\n+}\n+\n+static bool WriteTxIndexDataForBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos> > vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (const CTransactionRef& tx : block.vtx)\n+    {\n+        vPos.push_back(std::make_pair(tx->GetHash(), pos));\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+\n+    if (fTxIndex)\n+        if (!pblocktree->WriteTxIndex(vPos))\n+            return AbortNode(state, \"Failed to write transaction index\");\n+\n+    return true;\n+}\n+\n static CCheckQueue<CScriptCheck> scriptcheckqueue(128);\n \n void ThreadScriptCheck() {\n@@ -1739,9 +1776,6 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n     CAmount nFees = 0;\n     int nInputs = 0;\n     int64_t nSigOpsCost = 0;\n-    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n-    std::vector<std::pair<uint256, CDiskTxPos> > vPos;\n-    vPos.reserve(block.vtx.size());\n     blockundo.vtxundo.reserve(block.vtx.size() - 1);\n     std::vector<PrecomputedTransactionData> txdata;\n     txdata.reserve(block.vtx.size()); // Required so that pointers to individual PrecomputedTransactionData don't get invalidated\n@@ -1798,9 +1832,6 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n             blockundo.vtxundo.push_back(CTxUndo());\n         }\n         UpdateCoins(tx, view, i == 0 ? undoDummy : blockundo.vtxundo.back(), pindex->nHeight);\n-\n-        vPos.push_back(std::make_pair(tx.GetHash(), pos));\n-        pos.nTxOffset += ::GetSerializeSize(tx, SER_DISK, CLIENT_VERSION);\n     }\n     int64_t nTime3 = GetTimeMicros(); nTimeConnect += nTime3 - nTime2;\n     LogPrint(BCLog::BENCH, \"      - Connect %u transactions: %.2fms (%.3fms/tx, %.3fms/txin) [%.2fs]\\n\", (unsigned)block.vtx.size(), 0.001 * (nTime3 - nTime2), 0.001 * (nTime3 - nTime2) / block.vtx.size(), nInputs <= 1 ? 0 : 0.001 * (nTime3 - nTime2) / (nInputs-1), nTimeConnect * 0.000001);\n@@ -1820,28 +1851,16 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n     if (fJustCheck)\n         return true;\n \n-    // Write undo information to disk\n-    if (pindex->GetUndoPos().IsNull() || !pindex->IsValid(BLOCK_VALID_SCRIPTS))\n-    {\n-        if (pindex->GetUndoPos().IsNull()) {\n-            CDiskBlockPos _pos;\n-            if (!FindUndoPos(state, pindex->nFile, _pos, ::GetSerializeSize(blockundo, SER_DISK, CLIENT_VERSION) + 40))\n-                return error(\"ConnectBlock(): FindUndoPos failed\");\n-            if (!UndoWriteToDisk(blockundo, _pos, pindex->pprev->GetBlockHash(), chainparams.MessageStart()))\n-                return AbortNode(state, \"Failed to write undo data\");\n-\n-            // update nUndoPos in block index\n-            pindex->nUndoPos = _pos.nPos;\n-            pindex->nStatus |= BLOCK_HAVE_UNDO;\n-        }\n+    if (!WriteUndoDataForBlock(blockundo, state, pindex, chainparams))\n+        return false;\n \n+    if (!pindex->IsValid(BLOCK_VALID_SCRIPTS)) {\n         pindex->RaiseValidity(BLOCK_VALID_SCRIPTS);\n         setDirtyBlockIndex.insert(pindex);\n     }\n \n-    if (fTxIndex)\n-        if (!pblocktree->WriteTxIndex(vPos))\n-            return AbortNode(state, \"Failed to write transaction index\");\n+    if (!WriteTxIndexDataForBlock(block, state, pindex))\n+        return false;\n \n     // add this block to the view's block chain\n     view.SetBestBlock(pindex->GetBlockHash());"
      }
    ]
  },
  {
    "sha": "dc461681ff9d5883decc4031c5c1d66029d61600",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzQ2MTY4MWZmOWQ1ODgzZGVjYzQwMzFjNWMxZDY2MDI5ZDYxNjAw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-26T01:35:02Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:09:00Z"
      },
      "message": "Move block writing out of AcceptBlock",
      "tree": {
        "sha": "a4c28558af1784642dfdf5a49cb1cc4f681d7fbf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a4c28558af1784642dfdf5a49cb1cc4f681d7fbf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc461681ff9d5883decc4031c5c1d66029d61600",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc461681ff9d5883decc4031c5c1d66029d61600",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc461681ff9d5883decc4031c5c1d66029d61600",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc461681ff9d5883decc4031c5c1d66029d61600/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "85596371283b8e069b9088500206d8ffbf81bb0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85596371283b8e069b9088500206d8ffbf81bb0d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/85596371283b8e069b9088500206d8ffbf81bb0d"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 29,
      "deletions": 20
    },
    "files": [
      {
        "sha": "44444f31cfe6b9af5e9587a888b3825994ae8216",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 20,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc461681ff9d5883decc4031c5c1d66029d61600/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc461681ff9d5883decc4031c5c1d66029d61600/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=dc461681ff9d5883decc4031c5c1d66029d61600",
        "patch": "@@ -2694,7 +2694,7 @@ static bool ReceivedBlockTransactions(const CBlock &block, CValidationState& sta\n     return true;\n }\n \n-static bool FindBlockPos(CValidationState &state, CDiskBlockPos &pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown = false)\n+static bool FindBlockPos(CDiskBlockPos &pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown = false)\n {\n     LOCK(cs_LastBlockFile);\n \n@@ -2743,7 +2743,7 @@ static bool FindBlockPos(CValidationState &state, CDiskBlockPos &pos, unsigned i\n                 }\n             }\n             else\n-                return state.Error(\"out of disk space\");\n+                return error(\"out of disk space\");\n         }\n     }\n \n@@ -3102,6 +3102,25 @@ bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidatio\n     return true;\n }\n \n+/** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n+static CDiskBlockPos WriteBlockToDisk(const CBlock& block, int nHeight, const CChainParams& chainparams, const CDiskBlockPos* dbp) {\n+    unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n+    CDiskBlockPos blockPos;\n+    if (dbp != nullptr)\n+        blockPos = *dbp;\n+    if (!FindBlockPos(blockPos, nBlockSize+8, nHeight, block.GetBlockTime(), dbp != nullptr)) {\n+        error(\"%s: FindBlockPos failed\", __func__);\n+        return CDiskBlockPos();\n+    }\n+    if (dbp == nullptr) {\n+        if (!WriteBlockToDisk(block, blockPos, chainparams.MessageStart())) {\n+            AbortNode(\"Failed to write block\");\n+            return CDiskBlockPos();\n+        }\n+    }\n+    return blockPos;\n+}\n+\n /** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock)\n {\n@@ -3157,19 +3176,13 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     if (!IsInitialBlockDownload() && chainActive.Tip() == pindex->pprev)\n         GetMainSignals().NewPoWValidBlock(pindex, pblock);\n \n-    int nHeight = pindex->nHeight;\n-\n     // Write block to history file\n     try {\n-        unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n-        CDiskBlockPos blockPos;\n-        if (dbp != nullptr)\n-            blockPos = *dbp;\n-        if (!FindBlockPos(state, blockPos, nBlockSize+8, nHeight, block.GetBlockTime(), dbp != nullptr))\n-            return error(\"AcceptBlock(): FindBlockPos failed\");\n-        if (dbp == nullptr)\n-            if (!WriteBlockToDisk(block, blockPos, chainparams.MessageStart()))\n-                AbortNode(state, \"Failed to write block\");\n+        CDiskBlockPos blockPos = WriteBlockToDisk(block, pindex->nHeight, chainparams, dbp);\n+        if (blockPos.IsNull()) {\n+            state.Error(strprintf(\"%s: Failed to find position to write new block to disk\", __func__));\n+            return false;\n+        }\n         if (!ReceivedBlockTransactions(block, state, pindex, blockPos, chainparams.GetConsensus()))\n             return error(\"AcceptBlock(): ReceivedBlockTransactions failed\");\n     } catch (const std::runtime_error& e) {\n@@ -3930,15 +3943,11 @@ bool LoadGenesisBlock(const CChainParams& chainparams)\n \n     try {\n         CBlock &block = const_cast<CBlock&>(chainparams.GenesisBlock());\n-        // Start new block file\n-        unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n-        CDiskBlockPos blockPos;\n-        CValidationState state;\n-        if (!FindBlockPos(state, blockPos, nBlockSize+8, 0, block.GetBlockTime()))\n-            return error(\"%s: FindBlockPos failed\", __func__);\n-        if (!WriteBlockToDisk(block, blockPos, chainparams.MessageStart()))\n+        CDiskBlockPos blockPos = WriteBlockToDisk(block, 0, chainparams, nullptr);\n+        if (blockPos.IsNull())\n             return error(\"%s: writing genesis block to disk failed\", __func__);\n         CBlockIndex *pindex = AddToBlockIndex(block);\n+        CValidationState state;\n         if (!ReceivedBlockTransactions(block, state, pindex, blockPos, chainparams.GetConsensus()))\n             return error(\"%s: genesis block not accepted\", __func__);\n     } catch (const std::runtime_error& e) {"
      }
    ]
  },
  {
    "sha": "a6e978884ea5046f4d36c80338ca69c3f1c7b46d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNmU5Nzg4ODRlYTUwNDZmNGQzNmM4MDMzOGNhNjljM2YxYzdiNDZk",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-14T20:06:29Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:10:16Z"
      },
      "message": "Create initial CChainState to hold chain state information",
      "tree": {
        "sha": "729afc6a607c892aef8bc6a7fbdde46bbf846280",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/729afc6a607c892aef8bc6a7fbdde46bbf846280"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6e978884ea5046f4d36c80338ca69c3f1c7b46d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6e978884ea5046f4d36c80338ca69c3f1c7b46d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6e978884ea5046f4d36c80338ca69c3f1c7b46d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6e978884ea5046f4d36c80338ca69c3f1c7b46d/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc461681ff9d5883decc4031c5c1d66029d61600",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc461681ff9d5883decc4031c5c1d66029d61600",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc461681ff9d5883decc4031c5c1d66029d61600"
      }
    ],
    "stats": {
      "total": 278,
      "additions": 195,
      "deletions": 83
    },
    "files": [
      {
        "sha": "f31788e152c669961080a072983a67d79652d50b",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 193,
        "deletions": 79,
        "changes": 272,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6e978884ea5046f4d36c80338ca69c3f1c7b46d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6e978884ea5046f4d36c80338ca69c3f1c7b46d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=a6e978884ea5046f4d36c80338ca69c3f1c7b46d",
        "patch": "@@ -56,11 +56,117 @@\n /**\n  * Global state\n  */\n+namespace {\n+    struct CBlockIndexWorkComparator\n+    {\n+        bool operator()(const CBlockIndex *pa, const CBlockIndex *pb) const {\n+            // First sort by most total work, ...\n+            if (pa->nChainWork > pb->nChainWork) return false;\n+            if (pa->nChainWork < pb->nChainWork) return true;\n+\n+            // ... then by earliest time received, ...\n+            if (pa->nSequenceId < pb->nSequenceId) return false;\n+            if (pa->nSequenceId > pb->nSequenceId) return true;\n+\n+            // Use pointer address as tie breaker (should only happen with blocks\n+            // loaded from disk, as those all have id 0).\n+            if (pa < pb) return false;\n+            if (pa > pb) return true;\n+\n+            // Identical blocks.\n+            return false;\n+        }\n+    };\n+} // anon namespace\n+\n+enum DisconnectResult\n+{\n+    DISCONNECT_OK,      // All good.\n+    DISCONNECT_UNCLEAN, // Rolled back, but UTXO set was inconsistent with block.\n+    DISCONNECT_FAILED   // Something else went wrong.\n+};\n+\n+class ConnectTrace;\n+\n+/**\n+ * CChainState stores and provides an API to update our local knowledge of the\n+ * current best chain and header tree.\n+ *\n+ * It generally provides access to the current block tree, as well as functions\n+ * to provide new data, which it will appropriately validate and incorporate in\n+ * its state as necessary.\n+ *\n+ * Eventually, the API here is targeted at being exposed externally as a\n+ * consumable libconsensus library, so any functions added must only call\n+ * other class member functions, pure functions in other parts of the consensus\n+ * library, callbacks, or read/write-to-disk functions (eventually this will\n+ * also be via callbacks).\n+ */\n+class CChainState {\n+private:\n+    /**\n+     * The set of all CBlockIndex entries with BLOCK_VALID_TRANSACTIONS (for itself and all ancestors) and\n+     * as good as our current tip or better. Entries may be failed, though, and pruning nodes may be\n+     * missing the data for the block.\n+     */\n+    std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;\n+public:\n+    CChain chainActive;\n+    BlockMap mapBlockIndex;\n+    std::multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;\n+    CBlockIndex *pindexBestInvalid = nullptr;\n+\n+    bool LoadBlockIndex(const Consensus::Params& consensus_params, CBlockTreeDB& blocktree);\n+\n+    bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock);\n+\n+    bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex);\n+    bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock);\n+\n+    // Block (dis)connection on a given view:\n+    DisconnectResult DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view);\n+    bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,\n+                    CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck = false);\n+\n+    // Block disconnection on our pcoinsTip:\n+    bool DisconnectTip(CValidationState& state, const CChainParams& chainparams, DisconnectedBlockTransactions *disconnectpool);\n+\n+    // Manual block validity manipulation:\n+    bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex);\n+    bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex);\n+    bool ResetBlockFailureFlags(CBlockIndex *pindex);\n+\n+    bool ReplayBlocks(const CChainParams& params, CCoinsView* view);\n+    bool RewindBlockIndex(const CChainParams& params);\n+    bool LoadGenesisBlock(const CChainParams& chainparams);\n+\n+    void PruneBlockIndexCandidates();\n+\n+    void UnloadBlockIndex();\n+\n+private:\n+    bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace);\n+    bool ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool);\n+\n+    CBlockIndex* AddToBlockIndex(const CBlockHeader& block);\n+    /** Create a new block index entry for a given block hash */\n+    CBlockIndex * InsertBlockIndex(const uint256& hash);\n+    void CheckBlockIndex(const Consensus::Params& consensusParams);\n+\n+    void InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state);\n+    CBlockIndex* FindMostWorkChain();\n+    bool ReceivedBlockTransactions(const CBlock &block, CValidationState& state, CBlockIndex *pindexNew, const CDiskBlockPos& pos, const Consensus::Params& consensusParams);\n+\n+\n+    bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params);\n+} chainstate;\n+\n+\n \n CCriticalSection cs_main;\n \n-BlockMap mapBlockIndex;\n-CChain chainActive;\n+BlockMap& mapBlockIndex = chainstate.mapBlockIndex;\n+CChain& chainActive = chainstate.chainActive;\n CBlockIndex *pindexBestHeader = nullptr;\n CWaitableCriticalSection csBestBlock;\n CConditionVariable cvBlockChange;\n@@ -87,49 +193,19 @@ CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n CBlockPolicyEstimator feeEstimator;\n CTxMemPool mempool(&feeEstimator);\n \n-static void CheckBlockIndex(const Consensus::Params& consensusParams);\n-\n /** Constant stuff for coinbase transactions we create: */\n CScript COINBASE_FLAGS;\n \n const std::string strMessageMagic = \"Bitcoin Signed Message:\\n\";\n \n // Internal stuff\n namespace {\n+    CBlockIndex *&pindexBestInvalid = chainstate.pindexBestInvalid;\n \n-    struct CBlockIndexWorkComparator\n-    {\n-        bool operator()(const CBlockIndex *pa, const CBlockIndex *pb) const {\n-            // First sort by most total work, ...\n-            if (pa->nChainWork > pb->nChainWork) return false;\n-            if (pa->nChainWork < pb->nChainWork) return true;\n-\n-            // ... then by earliest time received, ...\n-            if (pa->nSequenceId < pb->nSequenceId) return false;\n-            if (pa->nSequenceId > pb->nSequenceId) return true;\n-\n-            // Use pointer address as tie breaker (should only happen with blocks\n-            // loaded from disk, as those all have id 0).\n-            if (pa < pb) return false;\n-            if (pa > pb) return true;\n-\n-            // Identical blocks.\n-            return false;\n-        }\n-    };\n-\n-    CBlockIndex *pindexBestInvalid;\n-\n-    /**\n-     * The set of all CBlockIndex entries with BLOCK_VALID_TRANSACTIONS (for itself and all ancestors) and\n-     * as good as our current tip or better. Entries may be failed, though, and pruning nodes may be\n-     * missing the data for the block.\n-     */\n-    std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;\n     /** All pairs A->B, where A (or one of its ancestors) misses transactions, but B has transactions.\n      * Pruned nodes may have entries where B is missing data.\n      */\n-    std::multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;\n+    std::multimap<CBlockIndex*, CBlockIndex*>& mapBlocksUnlinked = chainstate.mapBlocksUnlinked;\n \n     CCriticalSection cs_LastBlockFile;\n     std::vector<CBlockFileInfo> vinfoBlockFile;\n@@ -1166,7 +1242,7 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n     CheckForkWarningConditions();\n }\n \n-void static InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state) {\n+void CChainState::InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state) {\n     if (!state.CorruptionPossible()) {\n         pindex->nStatus |= BLOCK_FAILED_VALID;\n         setDirtyBlockIndex.insert(pindex);\n@@ -1404,13 +1480,6 @@ bool AbortNode(CValidationState& state, const std::string& strMessage, const std\n \n } // namespace\n \n-enum DisconnectResult\n-{\n-    DISCONNECT_OK,      // All good.\n-    DISCONNECT_UNCLEAN, // Rolled back, but UTXO set was inconsistent with block.\n-    DISCONNECT_FAILED   // Something else went wrong.\n-};\n-\n /**\n  * Restore the UTXO in a Coin at a given COutPoint\n  * @param undo The Coin to be restored.\n@@ -1447,7 +1516,7 @@ int ApplyTxInUndo(Coin&& undo, CCoinsViewCache& view, const COutPoint& out)\n \n /** Undo the effects of this block (with given index) on the UTXO set represented by coins.\n  *  When FAILED is returned, view is left in an indeterminate state. */\n-static DisconnectResult DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view)\n+DisconnectResult CChainState::DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view)\n {\n     bool fClean = true;\n \n@@ -1664,8 +1733,8 @@ static int64_t nTimeTotal = 0;\n /** Apply the effects of this block (with given index) on the UTXO set represented by coins.\n  *  Validity checks that depend on the UTXO set are also done; ConnectBlock()\n  *  can fail if those validity checks fail (among other reasons). */\n-static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,\n-                  CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck = false)\n+bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,\n+                  CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck)\n {\n     AssertLockHeld(cs_main);\n     assert(pindex);\n@@ -2075,7 +2144,7 @@ void static UpdateTip(CBlockIndex *pindexNew, const CChainParams& chainParams) {\n   * disconnectpool (note that the caller is responsible for mempool consistency\n   * in any case).\n   */\n-bool static DisconnectTip(CValidationState& state, const CChainParams& chainparams, DisconnectedBlockTransactions *disconnectpool)\n+bool CChainState::DisconnectTip(CValidationState& state, const CChainParams& chainparams, DisconnectedBlockTransactions *disconnectpool)\n {\n     CBlockIndex *pindexDelete = chainActive.Tip();\n     assert(pindexDelete);\n@@ -2197,7 +2266,7 @@ class ConnectTrace {\n  *\n  * The block is added to connectTrace if connection succeeds.\n  */\n-bool static ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool)\n+bool CChainState::ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool)\n {\n     assert(pindexNew->pprev == chainActive.Tip());\n     // Read block from disk.\n@@ -2255,7 +2324,7 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n  * Return the tip of the chain with the most work in it, that isn't\n  * known to be invalid (it's however far from certain to be valid).\n  */\n-static CBlockIndex* FindMostWorkChain() {\n+CBlockIndex* CChainState::FindMostWorkChain() {\n     do {\n         CBlockIndex *pindexNew = nullptr;\n \n@@ -2310,7 +2379,7 @@ static CBlockIndex* FindMostWorkChain() {\n }\n \n /** Delete all entries in setBlockIndexCandidates that are worse than the current tip. */\n-static void PruneBlockIndexCandidates() {\n+void CChainState::PruneBlockIndexCandidates() {\n     // Note that we can't delete the current block itself, as we may need to return to it later in case a\n     // reorganization to a better block fails.\n     std::set<CBlockIndex*, CBlockIndexWorkComparator>::iterator it = setBlockIndexCandidates.begin();\n@@ -2325,7 +2394,7 @@ static void PruneBlockIndexCandidates() {\n  * Try to make some progress towards making pindexMostWork the active block.\n  * pblock is either nullptr or a pointer to a CBlock corresponding to pindexMostWork.\n  */\n-static bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace)\n+bool CChainState::ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace)\n {\n     AssertLockHeld(cs_main);\n     const CBlockIndex *pindexOldTip = chainActive.Tip();\n@@ -2432,7 +2501,7 @@ static void NotifyHeaderTip() {\n  * or an activated best chain. pblock is either nullptr or a pointer to a block\n  * that is already loaded (to avoid loading it again from disk).\n  */\n-bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock) {\n+bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock) {\n     // Note that while we're often called here from ProcessNewBlock, this is\n     // far from a guarantee. Things in the P2P/RPC will often end up calling\n     // us in the middle of ProcessNewBlock - do not assume pblock is set\n@@ -2502,9 +2571,11 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n \n     return true;\n }\n+bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock) {\n+    return chainstate.ActivateBestChain(state, chainparams, std::move(pblock));\n+}\n \n-\n-bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex)\n+bool CChainState::PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex)\n {\n     {\n         LOCK(cs_main);\n@@ -2530,10 +2601,13 @@ bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIn\n         }\n     }\n \n-    return ActivateBestChain(state, params);\n+    return ActivateBestChain(state, params, std::shared_ptr<const CBlock>());\n+}\n+bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex) {\n+    return chainstate.PreciousBlock(state, params, pindex);\n }\n \n-bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n+bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n {\n     AssertLockHeld(cs_main);\n \n@@ -2576,8 +2650,11 @@ bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, C\n     uiInterface.NotifyBlockTip(IsInitialBlockDownload(), pindex->pprev);\n     return true;\n }\n+bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex) {\n+    return chainstate.InvalidateBlock(state, chainparams, pindex);\n+}\n \n-bool ResetBlockFailureFlags(CBlockIndex *pindex) {\n+bool CChainState::ResetBlockFailureFlags(CBlockIndex *pindex) {\n     AssertLockHeld(cs_main);\n \n     int nHeight = pindex->nHeight;\n@@ -2609,8 +2686,11 @@ bool ResetBlockFailureFlags(CBlockIndex *pindex) {\n     }\n     return true;\n }\n+bool ResetBlockFailureFlags(CBlockIndex *pindex) {\n+    return chainstate.ResetBlockFailureFlags(pindex);\n+}\n \n-static CBlockIndex* AddToBlockIndex(const CBlockHeader& block)\n+CBlockIndex* CChainState::AddToBlockIndex(const CBlockHeader& block)\n {\n     // Check for duplicate\n     uint256 hash = block.GetHash();\n@@ -2646,7 +2726,7 @@ static CBlockIndex* AddToBlockIndex(const CBlockHeader& block)\n }\n \n /** Mark a block as having its data received and checked (up to BLOCK_VALID_TRANSACTIONS). */\n-static bool ReceivedBlockTransactions(const CBlock &block, CValidationState& state, CBlockIndex *pindexNew, const CDiskBlockPos& pos, const Consensus::Params& consensusParams)\n+bool CChainState::ReceivedBlockTransactions(const CBlock &block, CValidationState& state, CBlockIndex *pindexNew, const CDiskBlockPos& pos, const Consensus::Params& consensusParams)\n {\n     pindexNew->nTx = block.vtx.size();\n     pindexNew->nChainTx = 0;\n@@ -3039,7 +3119,7 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n     return true;\n }\n \n-static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex)\n+bool CChainState::AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex)\n {\n     AssertLockHeld(cs_main);\n     // Check for duplicate\n@@ -3090,7 +3170,7 @@ bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidatio\n         LOCK(cs_main);\n         for (const CBlockHeader& header : headers) {\n             CBlockIndex *pindex = nullptr; // Use a temp pindex instead of ppindex to avoid a const_cast\n-            if (!AcceptBlockHeader(header, state, chainparams, &pindex)) {\n+            if (!chainstate.AcceptBlockHeader(header, state, chainparams, &pindex)) {\n                 return false;\n             }\n             if (ppindex) {\n@@ -3122,7 +3202,7 @@ static CDiskBlockPos WriteBlockToDisk(const CBlock& block, int nHeight, const CC\n }\n \n /** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n-static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock)\n+bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock)\n {\n     const CBlock& block = *pblock;\n \n@@ -3192,6 +3272,8 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     if (fCheckForPruning)\n         FlushStateToDisk(chainparams, state, FLUSH_STATE_NONE); // we just allocated more disk space for block files\n \n+    CheckBlockIndex(chainparams.GetConsensus());\n+\n     return true;\n }\n \n@@ -3209,9 +3291,8 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n \n         if (ret) {\n             // Store to disk\n-            ret = AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n+            ret = chainstate.AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n         }\n-        CheckBlockIndex(chainparams.GetConsensus());\n         if (!ret) {\n             GetMainSignals().BlockChecked(*pblock, state);\n             return error(\"%s: AcceptBlock FAILED\", __func__);\n@@ -3221,7 +3302,7 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n     NotifyHeaderTip();\n \n     CValidationState state; // Only used to report errors, not invalidity - ignore it\n-    if (!ActivateBestChain(state, chainparams, pblock))\n+    if (!chainstate.ActivateBestChain(state, chainparams, pblock))\n         return error(\"%s: ActivateBestChain failed\", __func__);\n \n     return true;\n@@ -3243,7 +3324,7 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));\n     if (!ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindexPrev))\n         return error(\"%s: Consensus::ContextualCheckBlock: %s\", __func__, FormatStateMessage(state));\n-    if (!ConnectBlock(block, state, &indexDummy, viewNew, chainparams, true))\n+    if (!chainstate.ConnectBlock(block, state, &indexDummy, viewNew, chainparams, true))\n         return false;\n     assert(state.IsValid());\n \n@@ -3447,7 +3528,7 @@ fs::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix)\n     return GetDataDir() / \"blocks\" / strprintf(\"%s%05u.dat\", prefix, pos.nFile);\n }\n \n-CBlockIndex * InsertBlockIndex(uint256 hash)\n+CBlockIndex * CChainState::InsertBlockIndex(const uint256& hash)\n {\n     if (hash.IsNull())\n         return nullptr;\n@@ -3467,9 +3548,9 @@ CBlockIndex * InsertBlockIndex(uint256 hash)\n     return pindexNew;\n }\n \n-bool static LoadBlockIndexDB(const CChainParams& chainparams)\n+bool CChainState::LoadBlockIndex(const Consensus::Params& consensus_params, CBlockTreeDB& blocktree)\n {\n-    if (!pblocktree->LoadBlockIndexGuts(chainparams.GetConsensus(), InsertBlockIndex))\n+    if (!blocktree.LoadBlockIndexGuts(consensus_params, [this](const uint256& hash){ return this->InsertBlockIndex(hash); }))\n         return false;\n \n     boost::this_thread::interruption_point();\n@@ -3512,6 +3593,14 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n             pindexBestHeader = pindex;\n     }\n \n+    return true;\n+}\n+\n+bool static LoadBlockIndexDB(const CChainParams& chainparams)\n+{\n+    if (!chainstate.LoadBlockIndex(chainparams.GetConsensus(), *pblocktree))\n+        return false;\n+\n     // Load block file info\n     pblocktree->ReadLastBlockFile(nLastBlockFile);\n     vinfoBlockFile.resize(nLastBlockFile + 1);\n@@ -3584,7 +3673,7 @@ bool LoadChainTip(const CChainParams& chainparams)\n         return false;\n     chainActive.SetTip(it->second);\n \n-    PruneBlockIndexCandidates();\n+    chainstate.PruneBlockIndexCandidates();\n \n     LogPrintf(\"Loaded best chain: hashBestChain=%s height=%d date=%s progress=%f\\n\",\n         chainActive.Tip()->GetBlockHash().ToString(), chainActive.Height(),\n@@ -3658,7 +3747,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n         // check level 3: check for inconsistencies during memory-only disconnect of tip blocks\n         if (nCheckLevel >= 3 && pindex == pindexState && (coins.DynamicMemoryUsage() + pcoinsTip->DynamicMemoryUsage()) <= nCoinCacheUsage) {\n             assert(coins.GetBestBlock() == pindex->GetBlockHash());\n-            DisconnectResult res = DisconnectBlock(block, pindex, coins);\n+            DisconnectResult res = chainstate.DisconnectBlock(block, pindex, coins);\n             if (res == DISCONNECT_FAILED) {\n                 return error(\"VerifyDB(): *** irrecoverable inconsistency in block data at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n             }\n@@ -3686,7 +3775,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n             CBlock block;\n             if (!ReadBlockFromDisk(block, pindex, chainparams.GetConsensus()))\n                 return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n-            if (!ConnectBlock(block, state, pindex, coins, chainparams))\n+            if (!chainstate.ConnectBlock(block, state, pindex, coins, chainparams))\n                 return error(\"VerifyDB(): *** found unconnectable block at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         }\n     }\n@@ -3698,7 +3787,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n }\n \n /** Apply the effects of a block on the utxo cache, ignoring that it may already have been applied. */\n-static bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params)\n+bool CChainState::RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params)\n {\n     // TODO: merge with ConnectBlock\n     CBlock block;\n@@ -3718,7 +3807,7 @@ static bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs,\n     return true;\n }\n \n-bool ReplayBlocks(const CChainParams& params, CCoinsView* view)\n+bool CChainState::ReplayBlocks(const CChainParams& params, CCoinsView* view)\n {\n     LOCK(cs_main);\n \n@@ -3783,7 +3872,11 @@ bool ReplayBlocks(const CChainParams& params, CCoinsView* view)\n     return true;\n }\n \n-bool RewindBlockIndex(const CChainParams& params)\n+bool ReplayBlocks(const CChainParams& params, CCoinsView* view) {\n+    return chainstate.ReplayBlocks(params, view);\n+}\n+\n+bool CChainState::RewindBlockIndex(const CChainParams& params)\n {\n     LOCK(cs_main);\n \n@@ -3864,10 +3957,21 @@ bool RewindBlockIndex(const CChainParams& params)\n         PruneBlockIndexCandidates();\n \n         CheckBlockIndex(params.GetConsensus());\n+    }\n+\n+    return true;\n+}\n+\n+bool RewindBlockIndex(const CChainParams& params) {\n+    if (!chainstate.RewindBlockIndex(params)) {\n+        return false;\n+    }\n \n+    if (chainActive.Tip() != nullptr) {\n         // FlushStateToDisk can possibly read chainActive. Be conservative\n         // and skip it here, we're about to -reindex-chainstate anyway, so\n         // it'll get called a bunch real soon.\n+        CValidationState state;\n         if (!FlushStateToDisk(params, state, FLUSH_STATE_ALWAYS)) {\n             return false;\n         }\n@@ -3876,13 +3980,16 @@ bool RewindBlockIndex(const CChainParams& params)\n     return true;\n }\n \n+void CChainState::UnloadBlockIndex() {\n+    setBlockIndexCandidates.clear();\n+}\n+\n // May NOT be used after any connections are up as much\n // of the peer-processing logic assumes a consistent\n // block index state\n void UnloadBlockIndex()\n {\n     LOCK(cs_main);\n-    setBlockIndexCandidates.clear();\n     chainActive.SetTip(nullptr);\n     pindexBestInvalid = nullptr;\n     pindexBestHeader = nullptr;\n@@ -3903,6 +4010,8 @@ void UnloadBlockIndex()\n     }\n     mapBlockIndex.clear();\n     fHavePruned = false;\n+\n+    chainstate.UnloadBlockIndex();\n }\n \n bool LoadBlockIndex(const CChainParams& chainparams)\n@@ -3930,7 +4039,7 @@ bool LoadBlockIndex(const CChainParams& chainparams)\n     return true;\n }\n \n-bool LoadGenesisBlock(const CChainParams& chainparams)\n+bool CChainState::LoadGenesisBlock(const CChainParams& chainparams)\n {\n     LOCK(cs_main);\n \n@@ -3957,6 +4066,11 @@ bool LoadGenesisBlock(const CChainParams& chainparams)\n     return true;\n }\n \n+bool LoadGenesisBlock(const CChainParams& chainparams)\n+{\n+    return chainstate.LoadGenesisBlock(chainparams);\n+}\n+\n bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskBlockPos *dbp)\n {\n     // Map of disk positions for blocks with unknown parent (only used for reindex)\n@@ -4017,7 +4131,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n                 if (mapBlockIndex.count(hash) == 0 || (mapBlockIndex[hash]->nStatus & BLOCK_HAVE_DATA) == 0) {\n                     LOCK(cs_main);\n                     CValidationState state;\n-                    if (AcceptBlock(pblock, state, chainparams, nullptr, true, dbp, nullptr))\n+                    if (chainstate.AcceptBlock(pblock, state, chainparams, nullptr, true, dbp, nullptr))\n                         nLoaded++;\n                     if (state.IsError())\n                         break;\n@@ -4051,7 +4165,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n                                     head.ToString());\n                             LOCK(cs_main);\n                             CValidationState dummy;\n-                            if (AcceptBlock(pblockrecursive, dummy, chainparams, nullptr, true, &it->second, nullptr))\n+                            if (chainstate.AcceptBlock(pblockrecursive, dummy, chainparams, nullptr, true, &it->second, nullptr))\n                             {\n                                 nLoaded++;\n                                 queue.push_back(pblockrecursive->GetHash());\n@@ -4074,7 +4188,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n     return nLoaded > 0;\n }\n \n-void static CheckBlockIndex(const Consensus::Params& consensusParams)\n+void CChainState::CheckBlockIndex(const Consensus::Params& consensusParams)\n {\n     if (!fCheckBlockIndex) {\n         return;"
      },
      {
        "sha": "8e0c0bd2974b9e97f78f7529ef3df8a916bc3ebf",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6e978884ea5046f4d36c80338ca69c3f1c7b46d/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6e978884ea5046f4d36c80338ca69c3f1c7b46d/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=a6e978884ea5046f4d36c80338ca69c3f1c7b46d",
        "patch": "@@ -159,7 +159,7 @@ extern CCriticalSection cs_main;\n extern CBlockPolicyEstimator feeEstimator;\n extern CTxMemPool mempool;\n typedef std::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n-extern BlockMap mapBlockIndex;\n+extern BlockMap& mapBlockIndex;\n extern uint64_t nLastBlockTx;\n extern uint64_t nLastBlockSize;\n extern uint64_t nLastBlockWeight;\n@@ -288,8 +288,6 @@ void PruneOneBlockFile(const int fileNumber);\n  */\n void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n \n-/** Create a new block index entry for a given block hash */\n-CBlockIndex * InsertBlockIndex(uint256 hash);\n /** Flush all state, indexes and buffers to disk. */\n void FlushStateToDisk();\n /** Prune block files and flush state to disk. */\n@@ -438,7 +436,7 @@ bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, C\n bool ResetBlockFailureFlags(CBlockIndex *pindex);\n \n /** The currently-connected chain of blocks (protected by cs_main). */\n-extern CChain chainActive;\n+extern CChain& chainActive;\n \n /** Global variable that points to the coins database (protected by cs_main) */\n extern CCoinsViewDB *pcoinsdbview;"
      }
    ]
  },
  {
    "sha": "21ec3737e59a8aa5e996de3303c6b566b89513dd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMWVjMzczN2U1OWE4YWE1ZTk5NmRlMzMwM2M2YjU2NmI4OTUxM2Rk",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-26T01:31:08Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:10:55Z"
      },
      "message": "Move some additional variables into CChainState private",
      "tree": {
        "sha": "679f184562145d925c239c28a33c4eb2c9957058",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/679f184562145d925c239c28a33c4eb2c9957058"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/21ec3737e59a8aa5e996de3303c6b566b89513dd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21ec3737e59a8aa5e996de3303c6b566b89513dd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/21ec3737e59a8aa5e996de3303c6b566b89513dd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21ec3737e59a8aa5e996de3303c6b566b89513dd/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a6e978884ea5046f4d36c80338ca69c3f1c7b46d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6e978884ea5046f4d36c80338ca69c3f1c7b46d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6e978884ea5046f4d36c80338ca69c3f1c7b46d"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 17,
      "deletions": 17
    },
    "files": [
      {
        "sha": "2fa8fd37843e6d6f9ce32d82a082fd2936c0f76a",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21ec3737e59a8aa5e996de3303c6b566b89513dd/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21ec3737e59a8aa5e996de3303c6b566b89513dd/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=21ec3737e59a8aa5e996de3303c6b566b89513dd",
        "patch": "@@ -110,6 +110,18 @@ class CChainState {\n      * missing the data for the block.\n      */\n     std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;\n+\n+    /**\n+     * Every received block is assigned a unique and increasing identifier, so we\n+     * know which one to give priority in case of a fork.\n+     */\n+    CCriticalSection cs_nBlockSequenceId;\n+    /** Blocks loaded from disk are assigned id 0, so start the counter at 1. */\n+    int32_t nBlockSequenceId = 1;\n+    /** Decreasing counter (used by subsequent preciousblock calls). */\n+    int32_t nBlockReverseSequenceId = -1;\n+    /** chainwork for the last block that preciousblock has been applied to. */\n+    arith_uint256 nLastPreciousChainwork = 0;\n public:\n     CChain chainActive;\n     BlockMap mapBlockIndex;\n@@ -216,18 +228,6 @@ namespace {\n      */\n     bool fCheckForPruning = false;\n \n-    /**\n-     * Every received block is assigned a unique and increasing identifier, so we\n-     * know which one to give priority in case of a fork.\n-     */\n-    CCriticalSection cs_nBlockSequenceId;\n-    /** Blocks loaded from disk are assigned id 0, so start the counter at 1. */\n-    int32_t nBlockSequenceId = 1;\n-    /** Decreasing counter (used by subsequent preciousblock calls). */\n-    int32_t nBlockReverseSequenceId = -1;\n-    /** chainwork for the last block that preciousblock has been applied to. */\n-    arith_uint256 nLastPreciousChainwork = 0;\n-\n     /** Dirty block index entries. */\n     std::set<CBlockIndex*> setDirtyBlockIndex;\n \n@@ -2080,10 +2080,8 @@ static void DoWarning(const std::string& strWarning)\n     }\n }\n \n-/** Update chainActive and related internal data structures. */\n+/** Check warning conditions and do some notifications on new chain tip set. */\n void static UpdateTip(CBlockIndex *pindexNew, const CChainParams& chainParams) {\n-    chainActive.SetTip(pindexNew);\n-\n     // New best block\n     mempool.AddTransactionsUpdated(1);\n \n@@ -2181,7 +2179,8 @@ bool CChainState::DisconnectTip(CValidationState& state, const CChainParams& cha\n         }\n     }\n \n-    // Update chainActive and related variables.\n+    chainActive.SetTip(pindexDelete->pprev);\n+\n     UpdateTip(pindexDelete->pprev, chainparams);\n     // Let wallets know transactions went from 1-confirmed to\n     // 0-confirmed or conflicted:\n@@ -2310,6 +2309,7 @@ bool CChainState::ConnectTip(CValidationState& state, const CChainParams& chainp\n     mempool.removeForBlock(blockConnecting.vtx, pindexNew->nHeight);\n     disconnectpool.removeForBlock(blockConnecting.vtx);\n     // Update chainActive & related variables.\n+    chainActive.SetTip(pindexNew);\n     UpdateTip(pindexNew, chainparams);\n \n     int64_t nTime6 = GetTimeMicros(); nTimePostConnect += nTime6 - nTime5; nTimeTotal += nTime6 - nTime1;\n@@ -3981,6 +3981,7 @@ bool RewindBlockIndex(const CChainParams& params) {\n }\n \n void CChainState::UnloadBlockIndex() {\n+    nBlockSequenceId = 1;\n     setBlockIndexCandidates.clear();\n }\n \n@@ -3997,7 +3998,6 @@ void UnloadBlockIndex()\n     mapBlocksUnlinked.clear();\n     vinfoBlockFile.clear();\n     nLastBlockFile = 0;\n-    nBlockSequenceId = 1;\n     setDirtyBlockIndex.clear();\n     setDirtyFileInfo.clear();\n     versionbitscache.Clear();"
      }
    ]
  },
  {
    "sha": "3b78b2d9ef1fef1fc838522f2f0bab319bf962a0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjc4YjJkOWVmMWZlZjFmYzgzODUyMmYyZjBiYWIzMTliZjk2MmEw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-27T15:31:53Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:10:55Z"
      },
      "message": "Avoid calling GetSerializeSize on each tx in a block if !fTxIndex",
      "tree": {
        "sha": "e1ee52769521d2ef3fddcd09e53eda7cf0b928b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e1ee52769521d2ef3fddcd09e53eda7cf0b928b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b78b2d9ef1fef1fc838522f2f0bab319bf962a0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b78b2d9ef1fef1fc838522f2f0bab319bf962a0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b78b2d9ef1fef1fc838522f2f0bab319bf962a0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b78b2d9ef1fef1fc838522f2f0bab319bf962a0/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "21ec3737e59a8aa5e996de3303c6b566b89513dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21ec3737e59a8aa5e996de3303c6b566b89513dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/21ec3737e59a8aa5e996de3303c6b566b89513dd"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 5,
      "deletions": 3
    },
    "files": [
      {
        "sha": "565d363f471546fd8e2b1581c80c935f5fb4aaa3",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b78b2d9ef1fef1fc838522f2f0bab319bf962a0/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b78b2d9ef1fef1fc838522f2f0bab319bf962a0/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=3b78b2d9ef1fef1fc838522f2f0bab319bf962a0",
        "patch": "@@ -1619,6 +1619,8 @@ static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, CValidationState&\n \n static bool WriteTxIndexDataForBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex)\n {\n+    if (!fTxIndex) return true;\n+\n     CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n     std::vector<std::pair<uint256, CDiskTxPos> > vPos;\n     vPos.reserve(block.vtx.size());\n@@ -1628,9 +1630,9 @@ static bool WriteTxIndexDataForBlock(const CBlock& block, CValidationState& stat\n         pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n     }\n \n-    if (fTxIndex)\n-        if (!pblocktree->WriteTxIndex(vPos))\n-            return AbortNode(state, \"Failed to write transaction index\");\n+    if (!pblocktree->WriteTxIndex(vPos)) {\n+        return AbortNode(state, \"Failed to write transaction index\");\n+    }\n \n     return true;\n }"
      }
    ]
  },
  {
    "sha": "32f3b1df7bd1639e92cc99a9cf85376789664779",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMmYzYjFkZjdiZDE2MzllOTJjYzk5YTljZjg1Mzc2Nzg5NjY0Nzc5",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:18:41Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:18:41Z"
      },
      "message": "Expose const CBlockIndexes in validation.h, update wallet rescan",
      "tree": {
        "sha": "d59a43dbad8fd9baaf0b66351cf44948b93129a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d59a43dbad8fd9baaf0b66351cf44948b93129a4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32f3b1df7bd1639e92cc99a9cf85376789664779",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32f3b1df7bd1639e92cc99a9cf85376789664779",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/32f3b1df7bd1639e92cc99a9cf85376789664779",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32f3b1df7bd1639e92cc99a9cf85376789664779/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3b78b2d9ef1fef1fc838522f2f0bab319bf962a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b78b2d9ef1fef1fc838522f2f0bab319bf962a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3b78b2d9ef1fef1fc838522f2f0bab319bf962a0"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 23,
      "deletions": 23
    },
    "files": [
      {
        "sha": "a1648331f975357866d9428b5b27a19e27b6eaa4",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32f3b1df7bd1639e92cc99a9cf85376789664779/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32f3b1df7bd1639e92cc99a9cf85376789664779/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=32f3b1df7bd1639e92cc99a9cf85376789664779",
        "patch": "@@ -235,11 +235,11 @@ namespace {\n     std::set<int> setDirtyFileInfo;\n } // anon namespace\n \n-CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator)\n+const CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator)\n {\n     // Find the first block the caller has in the main chain\n     for (const uint256& hash : locator.vHave) {\n-        BlockMap::iterator mi = mapBlockIndex.find(hash);\n+        BlockMap::const_iterator mi = mapBlockIndex.find(hash);\n         if (mi != mapBlockIndex.end())\n         {\n             CBlockIndex* pindex = (*mi).second;\n@@ -1281,7 +1281,7 @@ bool CScriptCheck::operator()() {\n int GetSpendHeight(const CCoinsViewCache& inputs)\n {\n     LOCK(cs_main);\n-    CBlockIndex* pindexPrev = mapBlockIndex.find(inputs.GetBestBlock())->second;\n+    const CBlockIndex* pindexPrev = mapBlockIndex.find(inputs.GetBestBlock())->second;\n     return pindexPrev->nHeight + 1;\n }\n \n@@ -2605,8 +2605,8 @@ bool CChainState::PreciousBlock(CValidationState& state, const CChainParams& par\n \n     return ActivateBestChain(state, params, std::shared_ptr<const CBlock>());\n }\n-bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex) {\n-    return chainstate.PreciousBlock(state, params, pindex);\n+bool PreciousBlock(CValidationState& state, const CChainParams& params, const CBlockIndex *pindex) {\n+    return chainstate.PreciousBlock(state, params, const_cast<CBlockIndex*>(pindex));\n }\n \n bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n@@ -2652,8 +2652,8 @@ bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& c\n     uiInterface.NotifyBlockTip(IsInitialBlockDownload(), pindex->pprev);\n     return true;\n }\n-bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex) {\n-    return chainstate.InvalidateBlock(state, chainparams, pindex);\n+bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, const CBlockIndex *pindex) {\n+    return chainstate.InvalidateBlock(state, chainparams, const_cast<CBlockIndex*>(pindex));\n }\n \n bool CChainState::ResetBlockFailureFlags(CBlockIndex *pindex) {\n@@ -2688,8 +2688,8 @@ bool CChainState::ResetBlockFailureFlags(CBlockIndex *pindex) {\n     }\n     return true;\n }\n-bool ResetBlockFailureFlags(CBlockIndex *pindex) {\n-    return chainstate.ResetBlockFailureFlags(pindex);\n+bool ResetBlockFailureFlags(const CBlockIndex *pindex) {\n+    return chainstate.ResetBlockFailureFlags(const_cast<CBlockIndex*>(pindex));\n }\n \n CBlockIndex* CChainState::AddToBlockIndex(const CBlockHeader& block)\n@@ -3310,13 +3310,13 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n     return true;\n }\n \n-bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot)\n+bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, const CBlockIndex* pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n     AssertLockHeld(cs_main);\n     assert(pindexPrev && pindexPrev == chainActive.Tip());\n     CCoinsViewCache viewNew(pcoinsTip);\n     CBlockIndex indexDummy(block);\n-    indexDummy.pprev = pindexPrev;\n+    indexDummy.pprev = const_cast<CBlockIndex*>(pindexPrev);\n     indexDummy.nHeight = pindexPrev->nHeight + 1;\n \n     // NOTE: CheckBlockHeader is called by CheckBlock\n@@ -4518,7 +4518,7 @@ void DumpMempool(void)\n }\n \n //! Guess how far we are in the verification process at the given block index\n-double GuessVerificationProgress(const ChainTxData& data, CBlockIndex *pindex) {\n+double GuessVerificationProgress(const ChainTxData& data, const CBlockIndex *pindex) {\n     if (pindex == nullptr)\n         return 0.0;\n "
      },
      {
        "sha": "26b29d3636ab2f67741e6bcff65388a662133176",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32f3b1df7bd1639e92cc99a9cf85376789664779/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32f3b1df7bd1639e92cc99a9cf85376789664779/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=32f3b1df7bd1639e92cc99a9cf85376789664779",
        "patch": "@@ -276,7 +276,7 @@ bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams,\n CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n \n /** Guess verification progress (as a fraction between 0.0=genesis and 1.0=current tip). */\n-double GuessVerificationProgress(const ChainTxData& data, CBlockIndex* pindex);\n+double GuessVerificationProgress(const ChainTxData& data, const CBlockIndex* pindex);\n \n /**\n  *  Mark one block file as pruned.\n@@ -398,7 +398,7 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus\n bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held) */\n-bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n+bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, const CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Check whether witness commitments are required for block. */\n bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n@@ -424,16 +424,16 @@ class CVerifyDB {\n bool ReplayBlocks(const CChainParams& params, CCoinsView* view);\n \n /** Find the last common block between the parameter chain and a locator. */\n-CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator);\n+const CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator);\n \n /** Mark a block as precious and reorganize. */\n-bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex);\n+bool PreciousBlock(CValidationState& state, const CChainParams& params, const CBlockIndex *pindex);\n \n /** Mark a block as invalid. */\n-bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex);\n+bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, const CBlockIndex *pindex);\n \n /** Remove invalidity status from a block and its descendants. */\n-bool ResetBlockFailureFlags(CBlockIndex *pindex);\n+bool ResetBlockFailureFlags(const CBlockIndex *pindex);\n \n /** The currently-connected chain of blocks (protected by cs_main). */\n extern CChain& chainActive;"
      },
      {
        "sha": "b44d9516e509a0c22d355f324f527e1b9a27fe8a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32f3b1df7bd1639e92cc99a9cf85376789664779/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32f3b1df7bd1639e92cc99a9cf85376789664779/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=32f3b1df7bd1639e92cc99a9cf85376789664779",
        "patch": "@@ -1603,13 +1603,13 @@ int64_t CWallet::RescanFromTime(int64_t startTime, bool update)\n  * possible (due to pruning or corruption), returns pointer to the most recent\n  * block that could not be scanned.\n  */\n-CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n+const CBlockIndex* CWallet::ScanForWalletTransactions(const CBlockIndex* pindexStart, bool fUpdate)\n {\n     int64_t nNow = GetTime();\n     const CChainParams& chainParams = Params();\n \n-    CBlockIndex* pindex = pindexStart;\n-    CBlockIndex* ret = nullptr;\n+    const CBlockIndex* pindex = pindexStart;\n+    const CBlockIndex* ret = nullptr;\n     {\n         LOCK2(cs_main, cs_wallet);\n         fAbortRescan = false;\n@@ -4044,7 +4044,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n     // Try to top up keypool. No-op if the wallet is locked.\n     walletInstance->TopUpKeyPool();\n \n-    CBlockIndex *pindexRescan = chainActive.Genesis();\n+    const CBlockIndex *pindexRescan = chainActive.Genesis();\n     if (!gArgs.GetBoolArg(\"-rescan\", false))\n     {\n         CWalletDB walletdb(*walletInstance->dbw);"
      },
      {
        "sha": "9ce44fabd2956f784e0e36fa6a277b12a4916f2e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32f3b1df7bd1639e92cc99a9cf85376789664779/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32f3b1df7bd1639e92cc99a9cf85376789664779/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=32f3b1df7bd1639e92cc99a9cf85376789664779",
        "patch": "@@ -921,7 +921,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n     bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n     int64_t RescanFromTime(int64_t startTime, bool update);\n-    CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n+    const CBlockIndex* ScanForWalletTransactions(const CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override;\n     // ResendWalletTransactionsBefore may only be called if fBroadcastTransactions!"
      }
    ]
  },
  {
    "sha": "bcc21f2421f49e22af0b25ed7a13f9f97ec78193",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiY2MyMWYyNDIxZjQ5ZTIyYWYwYjI1ZWQ3YTEzZjlmOTdlYzc4MTkz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-30T22:00:24Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:19:39Z"
      },
      "message": "Use const CBlockIndex* instead of const_cast in qt/clientmodel",
      "tree": {
        "sha": "4b20b9390ddc76d463a4b0f1d3ca9bb1b30ed0d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b20b9390ddc76d463a4b0f1d3ca9bb1b30ed0d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bcc21f2421f49e22af0b25ed7a13f9f97ec78193",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bcc21f2421f49e22af0b25ed7a13f9f97ec78193",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bcc21f2421f49e22af0b25ed7a13f9f97ec78193",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bcc21f2421f49e22af0b25ed7a13f9f97ec78193/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "32f3b1df7bd1639e92cc99a9cf85376789664779",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32f3b1df7bd1639e92cc99a9cf85376789664779",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/32f3b1df7bd1639e92cc99a9cf85376789664779"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c0ba21e581f55e597b9e6e31755e634d57ea76b1",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcc21f2421f49e22af0b25ed7a13f9f97ec78193/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcc21f2421f49e22af0b25ed7a13f9f97ec78193/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=bcc21f2421f49e22af0b25ed7a13f9f97ec78193",
        "patch": "@@ -137,7 +137,7 @@ size_t ClientModel::getMempoolDynamicUsage() const\n \n double ClientModel::getVerificationProgress(const CBlockIndex *tipIn) const\n {\n-    CBlockIndex *tip = const_cast<CBlockIndex *>(tipIn);\n+    const CBlockIndex *tip = tipIn;\n     if (!tip)\n     {\n         LOCK(cs_main);"
      }
    ]
  },
  {
    "sha": "3afcd25d97bc7133fdef6b4aaf696a1b14880e30",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYWZjZDI1ZDk3YmM3MTMzZmRlZjZiNGFhZjY5NmExYjE0ODgwZTMw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:20:31Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:20:31Z"
      },
      "message": "scripted-diff: constify CBlockIndex* outside of validation\n\n-BEGIN VERIFY SCRIPT-\nsed -i \"s/\\(const \\)*CBlockIndex/const CBlockIndex/\" src/qt/transactionrecord.cpp src/rest.cpp src/miner.cpp src/init.cpp src/rpc/*.cpp src/wallet/*.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "0851e04e80a26304546609e546c678a6b1f71b73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0851e04e80a26304546609e546c678a6b1f71b73"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3afcd25d97bc7133fdef6b4aaf696a1b14880e30",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3afcd25d97bc7133fdef6b4aaf696a1b14880e30",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3afcd25d97bc7133fdef6b4aaf696a1b14880e30",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3afcd25d97bc7133fdef6b4aaf696a1b14880e30/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bcc21f2421f49e22af0b25ed7a13f9f97ec78193",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bcc21f2421f49e22af0b25ed7a13f9f97ec78193",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bcc21f2421f49e22af0b25ed7a13f9f97ec78193"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 37,
      "deletions": 37
    },
    "files": [
      {
        "sha": "89d96f4b108c358ba7341b741543506baad19a38",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3afcd25d97bc7133fdef6b4aaf696a1b14880e30/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3afcd25d97bc7133fdef6b4aaf696a1b14880e30/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3afcd25d97bc7133fdef6b4aaf696a1b14880e30",
        "patch": "@@ -1500,7 +1500,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n                     {\n                         LOCK(cs_main);\n-                        CBlockIndex* tip = chainActive.Tip();\n+                        const CBlockIndex* tip = chainActive.Tip();\n                         RPCNotifyBlockChange(true, tip);\n                         if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n                             strLoadError = _(\"The block database contains a block which appears to be from the future. \""
      },
      {
        "sha": "b8c27ae90b4208ce98b3d8ca6236267c3f7f716a",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3afcd25d97bc7133fdef6b4aaf696a1b14880e30/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3afcd25d97bc7133fdef6b4aaf696a1b14880e30/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=3afcd25d97bc7133fdef6b4aaf696a1b14880e30",
        "patch": "@@ -144,7 +144,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     pblocktemplate->vTxSigOpsCost.push_back(-1); // updated at end\n \n     LOCK2(cs_main, mempool.cs);\n-    CBlockIndex* pindexPrev = chainActive.Tip();\n+    const CBlockIndex* pindexPrev = chainActive.Tip();\n     nHeight = pindexPrev->nHeight + 1;\n \n     pblock->nVersion = ComputeBlockVersion(pindexPrev, chainparams.GetConsensus());"
      },
      {
        "sha": "3409439b5e3d2a2eae289dff026f01b999f7fc38",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3afcd25d97bc7133fdef6b4aaf696a1b14880e30/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3afcd25d97bc7133fdef6b4aaf696a1b14880e30/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=3afcd25d97bc7133fdef6b4aaf696a1b14880e30",
        "patch": "@@ -167,7 +167,7 @@ void TransactionRecord::updateStatus(const CWalletTx &wtx)\n     // Determine transaction status\n \n     // Find the block the tx is in\n-    CBlockIndex* pindex = nullptr;\n+    const CBlockIndex* pindex = nullptr;\n     BlockMap::iterator mi = mapBlockIndex.find(wtx.hashBlock);\n     if (mi != mapBlockIndex.end())\n         pindex = (*mi).second;"
      },
      {
        "sha": "68f34de6a107bab324459045ffc9dea06b3d4435",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3afcd25d97bc7133fdef6b4aaf696a1b14880e30/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3afcd25d97bc7133fdef6b4aaf696a1b14880e30/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=3afcd25d97bc7133fdef6b4aaf696a1b14880e30",
        "patch": "@@ -209,7 +209,7 @@ static bool rest_block(HTTPRequest* req,\n         return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n \n     CBlock block;\n-    CBlockIndex* pblockindex = nullptr;\n+    const CBlockIndex* pblockindex = nullptr;\n     {\n         LOCK(cs_main);\n         if (mapBlockIndex.count(hash) == 0)"
      },
      {
        "sha": "35aec79fcea8f09b4e0d834adfd46d8a3bb626c4",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3afcd25d97bc7133fdef6b4aaf696a1b14880e30/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3afcd25d97bc7133fdef6b4aaf696a1b14880e30/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=3afcd25d97bc7133fdef6b4aaf696a1b14880e30",
        "patch": "@@ -97,7 +97,7 @@ UniValue blockheaderToJSON(const CBlockIndex* blockindex)\n \n     if (blockindex->pprev)\n         result.push_back(Pair(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex()));\n-    CBlockIndex *pnext = chainActive.Next(blockindex);\n+    const CBlockIndex *pnext = chainActive.Next(blockindex);\n     if (pnext)\n         result.push_back(Pair(\"nextblockhash\", pnext->GetBlockHash().GetHex()));\n     return result;\n@@ -141,7 +141,7 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n \n     if (blockindex->pprev)\n         result.push_back(Pair(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex()));\n-    CBlockIndex *pnext = chainActive.Next(blockindex);\n+    const CBlockIndex *pnext = chainActive.Next(blockindex);\n     if (pnext)\n         result.push_back(Pair(\"nextblockhash\", pnext->GetBlockHash().GetHex()));\n     return result;\n@@ -622,7 +622,7 @@ UniValue getblockhash(const JSONRPCRequest& request)\n     if (nHeight < 0 || nHeight > chainActive.Height())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block height out of range\");\n \n-    CBlockIndex* pblockindex = chainActive[nHeight];\n+    const CBlockIndex* pblockindex = chainActive[nHeight];\n     return pblockindex->GetBlockHash().GetHex();\n }\n \n@@ -672,7 +672,7 @@ UniValue getblockheader(const JSONRPCRequest& request)\n     if (mapBlockIndex.count(hash) == 0)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n \n-    CBlockIndex* pblockindex = mapBlockIndex[hash];\n+    const CBlockIndex* pblockindex = mapBlockIndex[hash];\n \n     if (!fVerbose)\n     {\n@@ -752,7 +752,7 @@ UniValue getblock(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n \n     CBlock block;\n-    CBlockIndex* pblockindex = mapBlockIndex[hash];\n+    const CBlockIndex* pblockindex = mapBlockIndex[hash];\n \n     if (fHavePruned && !(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0)\n         throw JSONRPCError(RPC_MISC_ERROR, \"Block not available (pruned data)\");\n@@ -873,7 +873,7 @@ UniValue pruneblockchain(const JSONRPCRequest& request)\n     // too low to be a block time (corresponds to timestamp from Sep 2001).\n     if (heightParam > 1000000000) {\n         // Add a 2 hour buffer to include blocks which might have had old timestamps\n-        CBlockIndex* pindex = chainActive.FindEarliestAtLeast(heightParam - TIMESTAMP_WINDOW);\n+        const CBlockIndex* pindex = chainActive.FindEarliestAtLeast(heightParam - TIMESTAMP_WINDOW);\n         if (!pindex) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Could not find block with at least the specified timestamp.\");\n         }\n@@ -1000,7 +1000,7 @@ UniValue gettxout(const JSONRPCRequest& request)\n     }\n \n     BlockMap::iterator it = mapBlockIndex.find(pcoinsTip->GetBestBlock());\n-    CBlockIndex *pindex = it->second;\n+    const CBlockIndex *pindex = it->second;\n     ret.push_back(Pair(\"bestblock\", pindex->GetBlockHash().GetHex()));\n     if (coin.nHeight == MEMPOOL_HEIGHT) {\n         ret.push_back(Pair(\"confirmations\", 0));\n@@ -1045,7 +1045,7 @@ UniValue verifychain(const JSONRPCRequest& request)\n }\n \n /** Implementation of IsSuperMajority with better feedback */\n-static UniValue SoftForkMajorityDesc(int version, CBlockIndex* pindex, const Consensus::Params& consensusParams)\n+static UniValue SoftForkMajorityDesc(int version, const CBlockIndex* pindex, const Consensus::Params& consensusParams)\n {\n     UniValue rv(UniValue::VOBJ);\n     bool activated = false;\n@@ -1065,7 +1065,7 @@ static UniValue SoftForkMajorityDesc(int version, CBlockIndex* pindex, const Con\n     return rv;\n }\n \n-static UniValue SoftForkDesc(const std::string &name, int version, CBlockIndex* pindex, const Consensus::Params& consensusParams)\n+static UniValue SoftForkDesc(const std::string &name, int version, const CBlockIndex* pindex, const Consensus::Params& consensusParams)\n {\n     UniValue rv(UniValue::VOBJ);\n     rv.push_back(Pair(\"id\", name));\n@@ -1178,7 +1178,7 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     obj.push_back(Pair(\"pruned\",                fPruneMode));\n \n     const Consensus::Params& consensusParams = Params().GetConsensus();\n-    CBlockIndex* tip = chainActive.Tip();\n+    const CBlockIndex* tip = chainActive.Tip();\n     UniValue softforks(UniValue::VARR);\n     UniValue bip9_softforks(UniValue::VOBJ);\n     softforks.push_back(SoftForkDesc(\"bip34\", 2, tip, consensusParams));\n@@ -1191,7 +1191,7 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n \n     if (fPruneMode)\n     {\n-        CBlockIndex *block = chainActive.Tip();\n+        const CBlockIndex *block = chainActive.Tip();\n         while (block && block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA))\n             block = block->pprev;\n \n@@ -1261,7 +1261,7 @@ UniValue getchaintips(const JSONRPCRequest& request)\n     std::set<const CBlockIndex*> setOrphans;\n     std::set<const CBlockIndex*> setPrevs;\n \n-    for (const std::pair<const uint256, CBlockIndex*>& item : mapBlockIndex)\n+    for (const std::pair<const uint256, const CBlockIndex*>& item : mapBlockIndex)\n     {\n         if (!chainActive.Contains(item.second)) {\n             setOrphans.insert(item.second);\n@@ -1371,7 +1371,7 @@ UniValue preciousblock(const JSONRPCRequest& request)\n \n     std::string strHash = request.params[0].get_str();\n     uint256 hash(uint256S(strHash));\n-    CBlockIndex* pblockindex;\n+    const CBlockIndex* pblockindex;\n \n     {\n         LOCK(cs_main);\n@@ -1414,7 +1414,7 @@ UniValue invalidateblock(const JSONRPCRequest& request)\n         if (mapBlockIndex.count(hash) == 0)\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n \n-        CBlockIndex* pblockindex = mapBlockIndex[hash];\n+        const CBlockIndex* pblockindex = mapBlockIndex[hash];\n         InvalidateBlock(state, Params(), pblockindex);\n     }\n \n@@ -1452,7 +1452,7 @@ UniValue reconsiderblock(const JSONRPCRequest& request)\n         if (mapBlockIndex.count(hash) == 0)\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n \n-        CBlockIndex* pblockindex = mapBlockIndex[hash];\n+        const CBlockIndex* pblockindex = mapBlockIndex[hash];\n         ResetBlockFailureFlags(pblockindex);\n     }\n "
      },
      {
        "sha": "140996092a661905579bb9f034517d24c662378f",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3afcd25d97bc7133fdef6b4aaf696a1b14880e30/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3afcd25d97bc7133fdef6b4aaf696a1b14880e30/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=3afcd25d97bc7133fdef6b4aaf696a1b14880e30",
        "patch": "@@ -47,7 +47,7 @@ unsigned int ParseConfirmTarget(const UniValue& value)\n  * If 'height' is nonnegative, compute the estimate at the time when a given block was found.\n  */\n UniValue GetNetworkHashPS(int lookup, int height) {\n-    CBlockIndex *pb = chainActive.Tip();\n+    const CBlockIndex *pb = chainActive.Tip();\n \n     if (height >= 0 && height < chainActive.Height())\n         pb = chainActive[height];\n@@ -63,7 +63,7 @@ UniValue GetNetworkHashPS(int lookup, int height) {\n     if (lookup > pb->nHeight)\n         lookup = pb->nHeight;\n \n-    CBlockIndex *pb0 = pb;\n+    const CBlockIndex *pb0 = pb;\n     int64_t minTime = pb0->GetBlockTime();\n     int64_t maxTime = minTime;\n     for (int i = 0; i < lookup; i++) {\n@@ -401,15 +401,15 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n             uint256 hash = block.GetHash();\n             BlockMap::iterator mi = mapBlockIndex.find(hash);\n             if (mi != mapBlockIndex.end()) {\n-                CBlockIndex *pindex = mi->second;\n+                const CBlockIndex *pindex = mi->second;\n                 if (pindex->IsValid(BLOCK_VALID_SCRIPTS))\n                     return \"duplicate\";\n                 if (pindex->nStatus & BLOCK_FAILED_MASK)\n                     return \"duplicate-invalid\";\n                 return \"duplicate-inconclusive\";\n             }\n \n-            CBlockIndex* const pindexPrev = chainActive.Tip();\n+            const CBlockIndex* const pindexPrev = chainActive.Tip();\n             // TestBlockValidity only supports blocks built on the current Tip\n             if (block.hashPrevBlock != pindexPrev->GetBlockHash())\n                 return \"inconclusive-not-best-prevblk\";\n@@ -500,7 +500,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n     bool fSupportsSegwit = setClientRules.find(segwit_info.name) != setClientRules.end();\n \n     // Update block\n-    static CBlockIndex* pindexPrev;\n+    static const CBlockIndex* pindexPrev;\n     static int64_t nStart;\n     static std::unique_ptr<CBlockTemplate> pblocktemplate;\n     // Cache whether the last invocation was with segwit support, to avoid returning\n@@ -515,7 +515,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n \n         // Store the pindexBest used before CreateNewBlock, to avoid races\n         nTransactionsUpdatedLast = mempool.GetTransactionsUpdated();\n-        CBlockIndex* pindexPrevNew = chainActive.Tip();\n+        const CBlockIndex* pindexPrevNew = chainActive.Tip();\n         nStart = GetTime();\n         fLastTemplateSupportsSegwit = fSupportsSegwit;\n \n@@ -732,7 +732,7 @@ UniValue submitblock(const JSONRPCRequest& request)\n         LOCK(cs_main);\n         BlockMap::iterator mi = mapBlockIndex.find(hash);\n         if (mi != mapBlockIndex.end()) {\n-            CBlockIndex *pindex = mi->second;\n+            const CBlockIndex *pindex = mi->second;\n             if (pindex->IsValid(BLOCK_VALID_SCRIPTS)) {\n                 return \"duplicate\";\n             }"
      },
      {
        "sha": "543347df69abfbc3579f29396f420453c51fe224",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3afcd25d97bc7133fdef6b4aaf696a1b14880e30/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3afcd25d97bc7133fdef6b4aaf696a1b14880e30/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=3afcd25d97bc7133fdef6b4aaf696a1b14880e30",
        "patch": "@@ -47,7 +47,7 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n         entry.push_back(Pair(\"blockhash\", hashBlock.GetHex()));\n         BlockMap::iterator mi = mapBlockIndex.find(hashBlock);\n         if (mi != mapBlockIndex.end() && (*mi).second) {\n-            CBlockIndex* pindex = (*mi).second;\n+            const CBlockIndex* pindex = (*mi).second;\n             if (chainActive.Contains(pindex)) {\n                 entry.push_back(Pair(\"confirmations\", 1 + chainActive.Height() - pindex->nHeight));\n                 entry.push_back(Pair(\"time\", pindex->GetBlockTime()));\n@@ -208,7 +208,7 @@ UniValue gettxoutproof(const JSONRPCRequest& request)\n \n     LOCK(cs_main);\n \n-    CBlockIndex* pblockindex = nullptr;\n+    const CBlockIndex* pblockindex = nullptr;\n \n     uint256 hashBlock;\n     if (!request.params[1].isNull())"
      },
      {
        "sha": "cc87408aae95f325edb2ed3b451a97da38d11498",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3afcd25d97bc7133fdef6b4aaf696a1b14880e30/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3afcd25d97bc7133fdef6b4aaf696a1b14880e30/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=3afcd25d97bc7133fdef6b4aaf696a1b14880e30",
        "patch": "@@ -1883,7 +1883,7 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n         paltindex = paltindex->pprev;\n     }\n \n-    CBlockIndex *pblockLast = chainActive[chainActive.Height() + 1 - target_confirms];\n+    const CBlockIndex *pblockLast = chainActive[chainActive.Height() + 1 - target_confirms];\n     uint256 lastblock = pblockLast ? pblockLast->GetBlockHash() : uint256();\n \n     UniValue ret(UniValue::VOBJ);"
      },
      {
        "sha": "25d7d9f87627b3c9b206e5973273be16796a409c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3afcd25d97bc7133fdef6b4aaf696a1b14880e30/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3afcd25d97bc7133fdef6b4aaf696a1b14880e30/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3afcd25d97bc7133fdef6b4aaf696a1b14880e30",
        "patch": "@@ -1160,7 +1160,7 @@ void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n \n     int conflictconfirms = 0;\n     if (mapBlockIndex.count(hashBlock)) {\n-        CBlockIndex* pindex = mapBlockIndex[hashBlock];\n+        const CBlockIndex* pindex = mapBlockIndex[hashBlock];\n         if (chainActive.Contains(pindex)) {\n             conflictconfirms = -(chainActive.Height() - pindex->nHeight + 1);\n         }\n@@ -1582,7 +1582,7 @@ int64_t CWallet::RescanFromTime(int64_t startTime, bool update)\n     // Find starting block. May be null if nCreateTime is greater than the\n     // highest blockchain timestamp, in which case there is nothing that needs\n     // to be scanned.\n-    CBlockIndex* const startBlock = chainActive.FindEarliestAtLeast(startTime - TIMESTAMP_WINDOW);\n+    const CBlockIndex* const startBlock = chainActive.FindEarliestAtLeast(startTime - TIMESTAMP_WINDOW);\n     LogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n \n     if (startBlock) {\n@@ -3729,8 +3729,8 @@ void CWallet::GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) c\n     }\n \n     // map in which we'll infer heights of other keys\n-    CBlockIndex *pindexMax = chainActive[std::max(0, chainActive.Height() - 144)]; // the tip can be reorganized; use a 144-block safety margin\n-    std::map<CKeyID, CBlockIndex*> mapKeyFirstBlock;\n+    const CBlockIndex *pindexMax = chainActive[std::max(0, chainActive.Height() - 144)]; // the tip can be reorganized; use a 144-block safety margin\n+    std::map<CKeyID, const CBlockIndex*> mapKeyFirstBlock;\n     std::set<CKeyID> setKeys;\n     GetKeys(setKeys);\n     for (const CKeyID &keyid : setKeys) {\n@@ -3757,7 +3757,7 @@ void CWallet::GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) c\n                 CAffectedKeysVisitor(*this, vAffected).Process(txout.scriptPubKey);\n                 for (const CKeyID &keyid : vAffected) {\n                     // ... and all their affected keys\n-                    std::map<CKeyID, CBlockIndex*>::iterator rit = mapKeyFirstBlock.find(keyid);\n+                    std::map<CKeyID, const CBlockIndex*>::iterator rit = mapKeyFirstBlock.find(keyid);\n                     if (rit != mapKeyFirstBlock.end() && nHeight < rit->second->nHeight)\n                         rit->second = blit->second;\n                 }\n@@ -3767,7 +3767,7 @@ void CWallet::GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) c\n     }\n \n     // Extract block timestamps for those keys\n-    for (std::map<CKeyID, CBlockIndex*>::const_iterator it = mapKeyFirstBlock.begin(); it != mapKeyFirstBlock.end(); it++)\n+    for (std::map<CKeyID, const CBlockIndex*>::const_iterator it = mapKeyFirstBlock.begin(); it != mapKeyFirstBlock.end(); it++)\n         mapKeyBirth[it->first] = it->second->GetBlockTime() - TIMESTAMP_WINDOW; // block times can be 2h off\n }\n \n@@ -4059,7 +4059,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n         // or if he ran -disablewallet for a longer time, then decided to re-enable\n         if (fPruneMode)\n         {\n-            CBlockIndex *block = chainActive.Tip();\n+            const CBlockIndex *block = chainActive.Tip();\n             while (block && block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA) && block->pprev->nTx > 0 && pindexRescan != block)\n                 block = block->pprev;\n \n@@ -4317,7 +4317,7 @@ int CMerkleTx::GetDepthInMainChain(const CBlockIndex* &pindexRet) const\n     BlockMap::iterator mi = mapBlockIndex.find(hashBlock);\n     if (mi == mapBlockIndex.end())\n         return 0;\n-    CBlockIndex* pindex = (*mi).second;\n+    const CBlockIndex* pindex = (*mi).second;\n     if (!pindex || !chainActive.Contains(pindex))\n         return 0;\n "
      }
    ]
  },
  {
    "sha": "85b501a16d2470b2add09a9b36d4bbcbfa7bc5ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NWI1MDFhMTZkMjQ3MGIyYWRkMDlhOWIzNmQ0YmJjYmZhN2JjNWVh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:21:35Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:21:35Z"
      },
      "message": "scripted-diff: Use BlockMap::const_iterators outside of validation\n\n-BEGIN VERIFY SCRIPT-\nsed -i \"s/BlockMap::iterator/BlockMap::const_iterator/\" src/rpc/*.cpp src/wallet/*.cpp src/qt/transactionrecord.cpp src/net_processing.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "2f518c7aa7efabbec14d1935440399a9f272ad4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2f518c7aa7efabbec14d1935440399a9f272ad4d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/85b501a16d2470b2add09a9b36d4bbcbfa7bc5ea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85b501a16d2470b2add09a9b36d4bbcbfa7bc5ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/85b501a16d2470b2add09a9b36d4bbcbfa7bc5ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85b501a16d2470b2add09a9b36d4bbcbfa7bc5ea/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3afcd25d97bc7133fdef6b4aaf696a1b14880e30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3afcd25d97bc7133fdef6b4aaf696a1b14880e30",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3afcd25d97bc7133fdef6b4aaf696a1b14880e30"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 15,
      "deletions": 15
    },
    "files": [
      {
        "sha": "4f82a06a27b775b5edbd48aefdc4f54069e0ee5a",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85b501a16d2470b2add09a9b36d4bbcbfa7bc5ea/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85b501a16d2470b2add09a9b36d4bbcbfa7bc5ea/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=85b501a16d2470b2add09a9b36d4bbcbfa7bc5ea",
        "patch": "@@ -375,7 +375,7 @@ void ProcessBlockAvailability(NodeId nodeid) {\n     assert(state != nullptr);\n \n     if (!state->hashLastUnknownBlock.IsNull()) {\n-        BlockMap::iterator itOld = mapBlockIndex.find(state->hashLastUnknownBlock);\n+        BlockMap::const_iterator itOld = mapBlockIndex.find(state->hashLastUnknownBlock);\n         if (itOld != mapBlockIndex.end() && itOld->second->nChainWork > 0) {\n             if (state->pindexBestKnownBlock == nullptr || itOld->second->nChainWork >= state->pindexBestKnownBlock->nChainWork)\n                 state->pindexBestKnownBlock = itOld->second;\n@@ -391,7 +391,7 @@ void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) {\n \n     ProcessBlockAvailability(nodeid);\n \n-    BlockMap::iterator it = mapBlockIndex.find(hash);\n+    BlockMap::const_iterator it = mapBlockIndex.find(hash);\n     if (it != mapBlockIndex.end() && it->second->nChainWork > 0) {\n         // An actually better block was announced.\n         if (state->pindexBestKnownBlock == nullptr || it->second->nChainWork >= state->pindexBestKnownBlock->nChainWork)\n@@ -977,7 +977,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n             if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK || inv.type == MSG_CMPCT_BLOCK || inv.type == MSG_WITNESS_BLOCK)\n             {\n                 bool send = false;\n-                BlockMap::iterator mi = mapBlockIndex.find(inv.hash);\n+                BlockMap::const_iterator mi = mapBlockIndex.find(inv.hash);\n                 std::shared_ptr<const CBlock> a_recent_block;\n                 std::shared_ptr<const CBlockHeaderAndShortTxIDs> a_recent_compact_block;\n                 bool fWitnessesPresentInARecentCompactBlock;\n@@ -1690,7 +1690,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n         LOCK(cs_main);\n \n-        BlockMap::iterator it = mapBlockIndex.find(req.blockhash);\n+        BlockMap::const_iterator it = mapBlockIndex.find(req.blockhash);\n         if (it == mapBlockIndex.end() || !(it->second->nStatus & BLOCK_HAVE_DATA)) {\n             LogPrintf(\"Peer %d sent us a getblocktxn for a block we don't have\", pfrom->GetId());\n             return true;\n@@ -1738,7 +1738,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (locator.IsNull())\n         {\n             // If locator is null, return the hashStop block\n-            BlockMap::iterator mi = mapBlockIndex.find(hashStop);\n+            BlockMap::const_iterator mi = mapBlockIndex.find(hashStop);\n             if (mi == mapBlockIndex.end())\n                 return true;\n             pindex = (*mi).second;\n@@ -2938,7 +2938,7 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n                 // then send all headers past that one.  If we come across any\n                 // headers that aren't on chainActive, give up.\n                 for (const uint256 &hash : pto->vBlockHashesToAnnounce) {\n-                    BlockMap::iterator mi = mapBlockIndex.find(hash);\n+                    BlockMap::const_iterator mi = mapBlockIndex.find(hash);\n                     assert(mi != mapBlockIndex.end());\n                     const CBlockIndex *pindex = mi->second;\n                     if (chainActive[pindex->nHeight] != pindex) {\n@@ -3031,7 +3031,7 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n                 // in the past.\n                 if (!pto->vBlockHashesToAnnounce.empty()) {\n                     const uint256 &hashToAnnounce = pto->vBlockHashesToAnnounce.back();\n-                    BlockMap::iterator mi = mapBlockIndex.find(hashToAnnounce);\n+                    BlockMap::const_iterator mi = mapBlockIndex.find(hashToAnnounce);\n                     assert(mi != mapBlockIndex.end());\n                     const CBlockIndex *pindex = mi->second;\n "
      },
      {
        "sha": "77999455b778e035ddc4ae13fd817553cd01e87a",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85b501a16d2470b2add09a9b36d4bbcbfa7bc5ea/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85b501a16d2470b2add09a9b36d4bbcbfa7bc5ea/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=85b501a16d2470b2add09a9b36d4bbcbfa7bc5ea",
        "patch": "@@ -168,7 +168,7 @@ void TransactionRecord::updateStatus(const CWalletTx &wtx)\n \n     // Find the block the tx is in\n     const CBlockIndex* pindex = nullptr;\n-    BlockMap::iterator mi = mapBlockIndex.find(wtx.hashBlock);\n+    BlockMap::const_iterator mi = mapBlockIndex.find(wtx.hashBlock);\n     if (mi != mapBlockIndex.end())\n         pindex = (*mi).second;\n "
      },
      {
        "sha": "547c8b00ebdd23f8b065b11e5f666c3fc603dfa2",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85b501a16d2470b2add09a9b36d4bbcbfa7bc5ea/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85b501a16d2470b2add09a9b36d4bbcbfa7bc5ea/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=85b501a16d2470b2add09a9b36d4bbcbfa7bc5ea",
        "patch": "@@ -999,7 +999,7 @@ UniValue gettxout(const JSONRPCRequest& request)\n         }\n     }\n \n-    BlockMap::iterator it = mapBlockIndex.find(pcoinsTip->GetBestBlock());\n+    BlockMap::const_iterator it = mapBlockIndex.find(pcoinsTip->GetBestBlock());\n     const CBlockIndex *pindex = it->second;\n     ret.push_back(Pair(\"bestblock\", pindex->GetBlockHash().GetHex()));\n     if (coin.nHeight == MEMPOOL_HEIGHT) {"
      },
      {
        "sha": "09ec88ad434be266b9e523244640bbfbe63a44c0",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85b501a16d2470b2add09a9b36d4bbcbfa7bc5ea/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85b501a16d2470b2add09a9b36d4bbcbfa7bc5ea/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=85b501a16d2470b2add09a9b36d4bbcbfa7bc5ea",
        "patch": "@@ -399,7 +399,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n                 throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Block decode failed\");\n \n             uint256 hash = block.GetHash();\n-            BlockMap::iterator mi = mapBlockIndex.find(hash);\n+            BlockMap::const_iterator mi = mapBlockIndex.find(hash);\n             if (mi != mapBlockIndex.end()) {\n                 const CBlockIndex *pindex = mi->second;\n                 if (pindex->IsValid(BLOCK_VALID_SCRIPTS))\n@@ -730,7 +730,7 @@ UniValue submitblock(const JSONRPCRequest& request)\n     bool fBlockPresent = false;\n     {\n         LOCK(cs_main);\n-        BlockMap::iterator mi = mapBlockIndex.find(hash);\n+        BlockMap::const_iterator mi = mapBlockIndex.find(hash);\n         if (mi != mapBlockIndex.end()) {\n             const CBlockIndex *pindex = mi->second;\n             if (pindex->IsValid(BLOCK_VALID_SCRIPTS)) {\n@@ -746,7 +746,7 @@ UniValue submitblock(const JSONRPCRequest& request)\n \n     {\n         LOCK(cs_main);\n-        BlockMap::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n+        BlockMap::const_iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n         if (mi != mapBlockIndex.end()) {\n             UpdateUncommittedBlockStructures(block, mi->second, Params().GetConsensus());\n         }"
      },
      {
        "sha": "f043e1b3d132183b04a0dc46913d57de011f6872",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85b501a16d2470b2add09a9b36d4bbcbfa7bc5ea/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85b501a16d2470b2add09a9b36d4bbcbfa7bc5ea/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=85b501a16d2470b2add09a9b36d4bbcbfa7bc5ea",
        "patch": "@@ -45,7 +45,7 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n \n     if (!hashBlock.IsNull()) {\n         entry.push_back(Pair(\"blockhash\", hashBlock.GetHex()));\n-        BlockMap::iterator mi = mapBlockIndex.find(hashBlock);\n+        BlockMap::const_iterator mi = mapBlockIndex.find(hashBlock);\n         if (mi != mapBlockIndex.end() && (*mi).second) {\n             const CBlockIndex* pindex = (*mi).second;\n             if (chainActive.Contains(pindex)) {"
      },
      {
        "sha": "88aa565469636ebbb9842f9cbcd7dd1dcfa73896",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85b501a16d2470b2add09a9b36d4bbcbfa7bc5ea/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85b501a16d2470b2add09a9b36d4bbcbfa7bc5ea/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=85b501a16d2470b2add09a9b36d4bbcbfa7bc5ea",
        "patch": "@@ -1827,7 +1827,7 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n         uint256 blockId;\n \n         blockId.SetHex(request.params[0].get_str());\n-        BlockMap::iterator it = mapBlockIndex.find(blockId);\n+        BlockMap::const_iterator it = mapBlockIndex.find(blockId);\n         if (it != mapBlockIndex.end()) {\n             paltindex = pindex = it->second;\n             if (chainActive[pindex->nHeight] != pindex) {"
      },
      {
        "sha": "ec8737ee4a62780271faf1c7a9d009982a1dfe37",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85b501a16d2470b2add09a9b36d4bbcbfa7bc5ea/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85b501a16d2470b2add09a9b36d4bbcbfa7bc5ea/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=85b501a16d2470b2add09a9b36d4bbcbfa7bc5ea",
        "patch": "@@ -4314,7 +4314,7 @@ int CMerkleTx::GetDepthInMainChain(const CBlockIndex* &pindexRet) const\n     AssertLockHeld(cs_main);\n \n     // Find the block it claims to be in\n-    BlockMap::iterator mi = mapBlockIndex.find(hashBlock);\n+    BlockMap::const_iterator mi = mapBlockIndex.find(hashBlock);\n     if (mi == mapBlockIndex.end())\n         return 0;\n     const CBlockIndex* pindex = (*mi).second;"
      }
    ]
  },
  {
    "sha": "24a6bd09c4de86d3f2bce39d4cb385af86505b17",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNGE2YmQwOWM0ZGU4NmQzZjJiY2UzOWQ0Y2IzODVhZjg2NTA1YjE3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-30T21:09:56Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:22:08Z"
      },
      "message": "scripted-diff: mapBlockIndex[] -> .at outside of validation\n\n-BEGIN VERIFY SCRIPT-\nsed -i \"s/mapBlockIndex\\[\\(.*\\)\\]/mapBlockIndex.at(\\1)/g\" src/rest.cpp src/wallet/*.cpp src/rpc/*.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "5cff1d1c35dfe9c73e8958648b9581bfe0fdc7e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5cff1d1c35dfe9c73e8958648b9581bfe0fdc7e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/24a6bd09c4de86d3f2bce39d4cb385af86505b17",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24a6bd09c4de86d3f2bce39d4cb385af86505b17",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/24a6bd09c4de86d3f2bce39d4cb385af86505b17",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24a6bd09c4de86d3f2bce39d4cb385af86505b17/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "85b501a16d2470b2add09a9b36d4bbcbfa7bc5ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85b501a16d2470b2add09a9b36d4bbcbfa7bc5ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/85b501a16d2470b2add09a9b36d4bbcbfa7bc5ea"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 13,
      "deletions": 13
    },
    "files": [
      {
        "sha": "c7aa4555586af8f02b344d86c5a4853f8d49fb7e",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24a6bd09c4de86d3f2bce39d4cb385af86505b17/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24a6bd09c4de86d3f2bce39d4cb385af86505b17/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=24a6bd09c4de86d3f2bce39d4cb385af86505b17",
        "patch": "@@ -215,7 +215,7 @@ static bool rest_block(HTTPRequest* req,\n         if (mapBlockIndex.count(hash) == 0)\n             return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n \n-        pblockindex = mapBlockIndex[hash];\n+        pblockindex = mapBlockIndex.at(hash);\n         if (fHavePruned && !(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0)\n             return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not available (pruned data)\");\n "
      },
      {
        "sha": "17c784acb9e3d55b295d62e80af2cc69bbc1af2c",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24a6bd09c4de86d3f2bce39d4cb385af86505b17/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24a6bd09c4de86d3f2bce39d4cb385af86505b17/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=24a6bd09c4de86d3f2bce39d4cb385af86505b17",
        "patch": "@@ -672,7 +672,7 @@ UniValue getblockheader(const JSONRPCRequest& request)\n     if (mapBlockIndex.count(hash) == 0)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n \n-    const CBlockIndex* pblockindex = mapBlockIndex[hash];\n+    const CBlockIndex* pblockindex = mapBlockIndex.at(hash);\n \n     if (!fVerbose)\n     {\n@@ -752,7 +752,7 @@ UniValue getblock(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n \n     CBlock block;\n-    const CBlockIndex* pblockindex = mapBlockIndex[hash];\n+    const CBlockIndex* pblockindex = mapBlockIndex.at(hash);\n \n     if (fHavePruned && !(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0)\n         throw JSONRPCError(RPC_MISC_ERROR, \"Block not available (pruned data)\");\n@@ -1378,7 +1378,7 @@ UniValue preciousblock(const JSONRPCRequest& request)\n         if (mapBlockIndex.count(hash) == 0)\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n \n-        pblockindex = mapBlockIndex[hash];\n+        pblockindex = mapBlockIndex.at(hash);\n     }\n \n     CValidationState state;\n@@ -1414,7 +1414,7 @@ UniValue invalidateblock(const JSONRPCRequest& request)\n         if (mapBlockIndex.count(hash) == 0)\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n \n-        const CBlockIndex* pblockindex = mapBlockIndex[hash];\n+        const CBlockIndex* pblockindex = mapBlockIndex.at(hash);\n         InvalidateBlock(state, Params(), pblockindex);\n     }\n \n@@ -1452,7 +1452,7 @@ UniValue reconsiderblock(const JSONRPCRequest& request)\n         if (mapBlockIndex.count(hash) == 0)\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n \n-        const CBlockIndex* pblockindex = mapBlockIndex[hash];\n+        const CBlockIndex* pblockindex = mapBlockIndex.at(hash);\n         ResetBlockFailureFlags(pblockindex);\n     }\n "
      },
      {
        "sha": "fde11dca3e40ef266fce05f8856e21f6908f1501",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24a6bd09c4de86d3f2bce39d4cb385af86505b17/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24a6bd09c4de86d3f2bce39d4cb385af86505b17/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=24a6bd09c4de86d3f2bce39d4cb385af86505b17",
        "patch": "@@ -216,7 +216,7 @@ UniValue gettxoutproof(const JSONRPCRequest& request)\n         hashBlock = uint256S(request.params[1].get_str());\n         if (!mapBlockIndex.count(hashBlock))\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n-        pblockindex = mapBlockIndex[hashBlock];\n+        pblockindex = mapBlockIndex.at(hashBlock);\n     } else {\n         // Loop through txids and try to find which block they're in. Exit loop once a block is found.\n         for (const auto& tx : setTxids) {\n@@ -235,7 +235,7 @@ UniValue gettxoutproof(const JSONRPCRequest& request)\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction not yet in block\");\n         if (!mapBlockIndex.count(hashBlock))\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Transaction index corrupt\");\n-        pblockindex = mapBlockIndex[hashBlock];\n+        pblockindex = mapBlockIndex.at(hashBlock);\n     }\n \n     CBlock block;\n@@ -282,7 +282,7 @@ UniValue verifytxoutproof(const JSONRPCRequest& request)\n \n     LOCK(cs_main);\n \n-    if (!mapBlockIndex.count(merkleBlock.header.GetHash()) || !chainActive.Contains(mapBlockIndex[merkleBlock.header.GetHash()]))\n+    if (!mapBlockIndex.count(merkleBlock.header.GetHash()) || !chainActive.Contains(mapBlockIndex.at(merkleBlock.header.GetHash())))\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found in chain\");\n \n     for (const uint256& hash : vMatch)"
      },
      {
        "sha": "82a165cfaa00c4da7e578761c01f82cdd508becb",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24a6bd09c4de86d3f2bce39d4cb385af86505b17/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24a6bd09c4de86d3f2bce39d4cb385af86505b17/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=24a6bd09c4de86d3f2bce39d4cb385af86505b17",
        "patch": "@@ -318,7 +318,7 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n \n         LOCK(cs_main);\n \n-        if (!mapBlockIndex.count(merkleBlock.header.GetHash()) || !chainActive.Contains(mapBlockIndex[merkleBlock.header.GetHash()]))\n+        if (!mapBlockIndex.count(merkleBlock.header.GetHash()) || !chainActive.Contains(mapBlockIndex.at(merkleBlock.header.GetHash())))\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found in chain\");\n \n         std::vector<uint256>::const_iterator it;"
      },
      {
        "sha": "a9077ebd7e9ea8494279f2ed2b45850b831e0ea2",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24a6bd09c4de86d3f2bce39d4cb385af86505b17/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24a6bd09c4de86d3f2bce39d4cb385af86505b17/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=24a6bd09c4de86d3f2bce39d4cb385af86505b17",
        "patch": "@@ -89,7 +89,7 @@ void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n     {\n         entry.push_back(Pair(\"blockhash\", wtx.hashBlock.GetHex()));\n         entry.push_back(Pair(\"blockindex\", wtx.nIndex));\n-        entry.push_back(Pair(\"blocktime\", mapBlockIndex[wtx.hashBlock]->GetBlockTime()));\n+        entry.push_back(Pair(\"blocktime\", mapBlockIndex.at(wtx.hashBlock)->GetBlockTime()));\n     } else {\n         entry.push_back(Pair(\"trusted\", wtx.IsTrusted()));\n     }"
      },
      {
        "sha": "7abd55976264c6c9016452723a91b3043b1e65dd",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24a6bd09c4de86d3f2bce39d4cb385af86505b17/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24a6bd09c4de86d3f2bce39d4cb385af86505b17/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=24a6bd09c4de86d3f2bce39d4cb385af86505b17",
        "patch": "@@ -1160,7 +1160,7 @@ void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n \n     int conflictconfirms = 0;\n     if (mapBlockIndex.count(hashBlock)) {\n-        const CBlockIndex* pindex = mapBlockIndex[hashBlock];\n+        const CBlockIndex* pindex = mapBlockIndex.at(hashBlock);\n         if (chainActive.Contains(pindex)) {\n             conflictconfirms = -(chainActive.Height() - pindex->nHeight + 1);\n         }\n@@ -3827,7 +3827,7 @@ unsigned int CWallet::ComputeTimeSmart(const CWalletTx& wtx) const\n                 }\n             }\n \n-            int64_t blocktime = mapBlockIndex[wtx.hashBlock]->GetBlockTime();\n+            int64_t blocktime = mapBlockIndex.at(wtx.hashBlock)->GetBlockTime();\n             nTimeSmart = std::max(latestEntry, std::min(blocktime, latestNow));\n         } else {\n             LogPrintf(\"%s: found %s in block %s not in index\\n\", __func__, wtx.GetHash().ToString(), wtx.hashBlock.ToString());"
      }
    ]
  },
  {
    "sha": "dd8ed98a00664b62babd70d05ac87a167df74981",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDhlZDk4YTAwNjY0YjYyYmFiZDcwZDA1YWM4N2ExNjdkZjc0OTgx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:24:03Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:25:17Z"
      },
      "message": "Move mapBlockIndex cleanup inside CChainState",
      "tree": {
        "sha": "047546723c790908b0092937d5661eed30969221",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/047546723c790908b0092937d5661eed30969221"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd8ed98a00664b62babd70d05ac87a167df74981",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd8ed98a00664b62babd70d05ac87a167df74981",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd8ed98a00664b62babd70d05ac87a167df74981",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd8ed98a00664b62babd70d05ac87a167df74981/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "24a6bd09c4de86d3f2bce39d4cb385af86505b17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24a6bd09c4de86d3f2bce39d4cb385af86505b17",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/24a6bd09c4de86d3f2bce39d4cb385af86505b17"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 14,
      "deletions": 17
    },
    "files": [
      {
        "sha": "d48f69dfbf36dbc1f11fbc3c6a301b4c8bd132fa",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 17,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd8ed98a00664b62babd70d05ac87a167df74981/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd8ed98a00664b62babd70d05ac87a167df74981/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=dd8ed98a00664b62babd70d05ac87a167df74981",
        "patch": "@@ -128,6 +128,14 @@ class CChainState {\n     std::multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;\n     CBlockIndex *pindexBestInvalid = nullptr;\n \n+    ~CChainState() {\n+        // block headers\n+        BlockMap::iterator it1 = mapBlockIndex.begin();\n+        for (; it1 != mapBlockIndex.end(); it1++)\n+            delete (*it1).second;\n+        mapBlockIndex.clear();\n+    }\n+\n     bool LoadBlockIndex(const Consensus::Params& consensus_params, CBlockTreeDB& blocktree);\n \n     bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock);\n@@ -3985,6 +3993,12 @@ bool RewindBlockIndex(const CChainParams& params) {\n void CChainState::UnloadBlockIndex() {\n     nBlockSequenceId = 1;\n     setBlockIndexCandidates.clear();\n+    chainActive.SetTip(nullptr);\n+\n+    for (BlockMap::value_type& entry : mapBlockIndex) {\n+        delete entry.second;\n+    }\n+    mapBlockIndex.clear();\n }\n \n // May NOT be used after any connections are up as much\n@@ -3993,7 +4007,6 @@ void CChainState::UnloadBlockIndex() {\n void UnloadBlockIndex()\n {\n     LOCK(cs_main);\n-    chainActive.SetTip(nullptr);\n     pindexBestInvalid = nullptr;\n     pindexBestHeader = nullptr;\n     mempool.clear();\n@@ -4007,10 +4020,6 @@ void UnloadBlockIndex()\n         warningcache[b].clear();\n     }\n \n-    for (BlockMap::value_type& entry : mapBlockIndex) {\n-        delete entry.second;\n-    }\n-    mapBlockIndex.clear();\n     fHavePruned = false;\n \n     chainstate.UnloadBlockIndex();\n@@ -4535,15 +4544,3 @@ double GuessVerificationProgress(const ChainTxData& data, const CBlockIndex *pin\n     return pindex->nChainTx / fTxTotal;\n }\n \n-class CMainCleanup\n-{\n-public:\n-    CMainCleanup() {}\n-    ~CMainCleanup() {\n-        // block headers\n-        BlockMap::iterator it1 = mapBlockIndex.begin();\n-        for (; it1 != mapBlockIndex.end(); it1++)\n-            delete (*it1).second;\n-        mapBlockIndex.clear();\n-    }\n-} instance_of_cmaincleanup;"
      }
    ]
  },
  {
    "sha": "ac9af80088612b5326c57c77572d9a133f9e4d12",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYzlhZjgwMDg4NjEyYjUzMjZjNTdjNzc1NzJkOWExMzNmOWU0ZDEy",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:30:51Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:30:51Z"
      },
      "message": "Move chainActive tip setting into CChainState from LoadBlockIndexDB",
      "tree": {
        "sha": "0647e957c3b241b069dd0f76943c6fe731fdf22e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0647e957c3b241b069dd0f76943c6fe731fdf22e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac9af80088612b5326c57c77572d9a133f9e4d12",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac9af80088612b5326c57c77572d9a133f9e4d12",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ac9af80088612b5326c57c77572d9a133f9e4d12",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac9af80088612b5326c57c77572d9a133f9e4d12/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dd8ed98a00664b62babd70d05ac87a167df74981",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd8ed98a00664b62babd70d05ac87a167df74981",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd8ed98a00664b62babd70d05ac87a167df74981"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 10,
      "deletions": 5
    },
    "files": [
      {
        "sha": "b1aa09d7b2f0ac5f761bd92af43d3ed0068cb94d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac9af80088612b5326c57c77572d9a133f9e4d12/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac9af80088612b5326c57c77572d9a133f9e4d12/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ac9af80088612b5326c57c77572d9a133f9e4d12",
        "patch": "@@ -137,6 +137,7 @@ class CChainState {\n     }\n \n     bool LoadBlockIndex(const Consensus::Params& consensus_params, CBlockTreeDB& blocktree);\n+    bool LoadChainTip(const CChainParams& chainparams);\n \n     bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock);\n \n@@ -160,8 +161,6 @@ class CChainState {\n     bool RewindBlockIndex(const CChainParams& params);\n     bool LoadGenesisBlock(const CChainParams& chainparams);\n \n-    void PruneBlockIndexCandidates();\n-\n     void UnloadBlockIndex();\n \n private:\n@@ -177,6 +176,7 @@ class CChainState {\n     CBlockIndex* FindMostWorkChain();\n     bool ReceivedBlockTransactions(const CBlock &block, CValidationState& state, CBlockIndex *pindexNew, const CDiskBlockPos& pos, const Consensus::Params& consensusParams);\n \n+    void PruneBlockIndexCandidates();\n \n     bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params);\n } chainstate;\n@@ -3663,7 +3663,7 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n     return true;\n }\n \n-bool LoadChainTip(const CChainParams& chainparams)\n+bool CChainState::LoadChainTip(const CChainParams& chainparams)\n {\n     if (chainActive.Tip() && chainActive.Tip()->GetBlockHash() == pcoinsTip->GetBestBlock()) return true;\n \n@@ -3672,7 +3672,7 @@ bool LoadChainTip(const CChainParams& chainparams)\n         // that we always have a chainActive.Tip() when we return.\n         LogPrintf(\"%s: Connecting genesis block...\\n\", __func__);\n         CValidationState state;\n-        if (!ActivateBestChain(state, chainparams)) {\n+        if (!ActivateBestChain(state, chainparams, std::shared_ptr<const CBlock>())) {\n             return false;\n         }\n     }\n@@ -3683,7 +3683,7 @@ bool LoadChainTip(const CChainParams& chainparams)\n         return false;\n     chainActive.SetTip(it->second);\n \n-    chainstate.PruneBlockIndexCandidates();\n+    PruneBlockIndexCandidates();\n \n     LogPrintf(\"Loaded best chain: hashBestChain=%s height=%d date=%s progress=%f\\n\",\n         chainActive.Tip()->GetBlockHash().ToString(), chainActive.Height(),\n@@ -3692,6 +3692,11 @@ bool LoadChainTip(const CChainParams& chainparams)\n     return true;\n }\n \n+bool LoadChainTip(const CChainParams& chainparams)\n+{\n+    return chainstate.LoadChainTip(chainparams);\n+}\n+\n CVerifyDB::CVerifyDB()\n {\n     uiInterface.ShowProgress(_(\"Verifying blocks...\"), 0);"
      }
    ]
  },
  {
    "sha": "bda2d156b9545b6e215e44166427322367b695a1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZGEyZDE1NmI5NTQ1YjZlMjE1ZTQ0MTY2NDI3MzIyMzY3YjY5NWEx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-30T18:39:52Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:32:21Z"
      },
      "message": "Make mapBlockIndex const in validation.h",
      "tree": {
        "sha": "3f5116248759ab2f6a926d7fe0c261d8e33fd1b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3f5116248759ab2f6a926d7fe0c261d8e33fd1b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bda2d156b9545b6e215e44166427322367b695a1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bda2d156b9545b6e215e44166427322367b695a1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bda2d156b9545b6e215e44166427322367b695a1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bda2d156b9545b6e215e44166427322367b695a1/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ac9af80088612b5326c57c77572d9a133f9e4d12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac9af80088612b5326c57c77572d9a133f9e4d12",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac9af80088612b5326c57c77572d9a133f9e4d12"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "ac65bf28f88e39e19a8d45e7bad6a1fc5bd3cde1",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bda2d156b9545b6e215e44166427322367b695a1/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bda2d156b9545b6e215e44166427322367b695a1/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=bda2d156b9545b6e215e44166427322367b695a1",
        "patch": "@@ -185,7 +185,7 @@ class CChainState {\n \n CCriticalSection cs_main;\n \n-BlockMap& mapBlockIndex = chainstate.mapBlockIndex;\n+const BlockMap& mapBlockIndex = chainstate.mapBlockIndex;\n CChain& chainActive = chainstate.chainActive;\n CBlockIndex *pindexBestHeader = nullptr;\n CWaitableCriticalSection csBestBlock;\n@@ -250,7 +250,7 @@ const CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocato\n         BlockMap::const_iterator mi = mapBlockIndex.find(hash);\n         if (mi != mapBlockIndex.end())\n         {\n-            CBlockIndex* pindex = (*mi).second;\n+            const CBlockIndex* pindex = (*mi).second;\n             if (chain.Contains(pindex))\n                 return pindex;\n             if (pindex->GetAncestor(chain.Height()) == chain.Tip()) {\n@@ -3358,7 +3358,7 @@ static uint64_t CalculateCurrentUsage()\n /* Prune a block file (modify associated database entries)*/\n void PruneOneBlockFile(const int fileNumber)\n {\n-    for (BlockMap::iterator it = mapBlockIndex.begin(); it != mapBlockIndex.end(); ++it) {\n+    for (BlockMap::iterator it = chainstate.mapBlockIndex.begin(); it != chainstate.mapBlockIndex.end(); ++it) {\n         CBlockIndex* pindex = it->second;\n         if (pindex->nFile == fileNumber) {\n             pindex->nStatus &= ~BLOCK_HAVE_DATA;\n@@ -4144,15 +4144,15 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n                 }\n \n                 // process in case the block isn't known yet\n-                if (mapBlockIndex.count(hash) == 0 || (mapBlockIndex[hash]->nStatus & BLOCK_HAVE_DATA) == 0) {\n+                if (mapBlockIndex.count(hash) == 0 || (mapBlockIndex.at(hash)->nStatus & BLOCK_HAVE_DATA) == 0) {\n                     LOCK(cs_main);\n                     CValidationState state;\n                     if (chainstate.AcceptBlock(pblock, state, chainparams, nullptr, true, dbp, nullptr))\n                         nLoaded++;\n                     if (state.IsError())\n                         break;\n-                } else if (hash != chainparams.GetConsensus().hashGenesisBlock && mapBlockIndex[hash]->nHeight % 1000 == 0) {\n-                    LogPrint(BCLog::REINDEX, \"Block Import: already had block %s at height %d\\n\", hash.ToString(), mapBlockIndex[hash]->nHeight);\n+                } else if (hash != chainparams.GetConsensus().hashGenesisBlock && mapBlockIndex.at(hash)->nHeight % 1000 == 0) {\n+                    LogPrint(BCLog::REINDEX, \"Block Import: already had block %s at height %d\\n\", hash.ToString(), mapBlockIndex.at(hash)->nHeight);\n                 }\n \n                 // Activate the genesis block so normal node progress can continue"
      },
      {
        "sha": "5eb1c87317e4deae73eda603f1fe972b40e7d75d",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bda2d156b9545b6e215e44166427322367b695a1/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bda2d156b9545b6e215e44166427322367b695a1/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=bda2d156b9545b6e215e44166427322367b695a1",
        "patch": "@@ -159,7 +159,7 @@ extern CCriticalSection cs_main;\n extern CBlockPolicyEstimator feeEstimator;\n extern CTxMemPool mempool;\n typedef std::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n-extern BlockMap& mapBlockIndex;\n+extern const BlockMap& mapBlockIndex;\n extern uint64_t nLastBlockTx;\n extern uint64_t nLastBlockSize;\n extern uint64_t nLastBlockWeight;"
      },
      {
        "sha": "2dc39e25cbd59dacc3996316d0893727920cd70a",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bda2d156b9545b6e215e44166427322367b695a1/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bda2d156b9545b6e215e44166427322367b695a1/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=bda2d156b9545b6e215e44166427322367b695a1",
        "patch": "@@ -530,7 +530,7 @@ static int64_t AddTx(CWallet& wallet, uint32_t lockTime, int64_t mockTime, int64\n     SetMockTime(mockTime);\n     CBlockIndex* block = nullptr;\n     if (blockTime > 0) {\n-        auto inserted = mapBlockIndex.emplace(GetRandHash(), new CBlockIndex);\n+        auto inserted = const_cast<BlockMap&>(mapBlockIndex).emplace(GetRandHash(), new CBlockIndex);\n         assert(inserted.second);\n         const uint256& hash = inserted.first->first;\n         block = inserted.first->second;"
      }
    ]
  },
  {
    "sha": "c1ea0aa6f888de63487256a9efc019bf253b2a07",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMWVhMGFhNmY4ODhkZTYzNDg3MjU2YTllZmMwMTliZjI1M2IyYTA3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:34:42Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:34:42Z"
      },
      "message": "Create new \"NonConstBlockMap\" typdef for CChainState",
      "tree": {
        "sha": "555d8a086f2a990a8bdd8d8c614e30c7f62fca15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/555d8a086f2a990a8bdd8d8c614e30c7f62fca15"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1ea0aa6f888de63487256a9efc019bf253b2a07",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1ea0aa6f888de63487256a9efc019bf253b2a07",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c1ea0aa6f888de63487256a9efc019bf253b2a07",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1ea0aa6f888de63487256a9efc019bf253b2a07/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bda2d156b9545b6e215e44166427322367b695a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bda2d156b9545b6e215e44166427322367b695a1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bda2d156b9545b6e215e44166427322367b695a1"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "44085b8bfdc8f1c49cf5eac1830b304e6f2756bd",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1ea0aa6f888de63487256a9efc019bf253b2a07/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1ea0aa6f888de63487256a9efc019bf253b2a07/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c1ea0aa6f888de63487256a9efc019bf253b2a07",
        "patch": "@@ -87,6 +87,7 @@ enum DisconnectResult\n };\n \n class ConnectTrace;\n+typedef std::unordered_map<uint256, CBlockIndex*, BlockHasher> NonConstBlockMap;\n \n /**\n  * CChainState stores and provides an API to update our local knowledge of the\n@@ -124,7 +125,8 @@ class CChainState {\n     arith_uint256 nLastPreciousChainwork = 0;\n public:\n     CChain chainActive;\n-    BlockMap mapBlockIndex;\n+\n+    NonConstBlockMap mapBlockIndex;\n     std::multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;\n     CBlockIndex *pindexBestInvalid = nullptr;\n \n@@ -4000,7 +4002,7 @@ void CChainState::UnloadBlockIndex() {\n     setBlockIndexCandidates.clear();\n     chainActive.SetTip(nullptr);\n \n-    for (BlockMap::value_type& entry : mapBlockIndex) {\n+    for (NonConstBlockMap::value_type& entry : mapBlockIndex) {\n         delete entry.second;\n     }\n     mapBlockIndex.clear();"
      }
    ]
  },
  {
    "sha": "d718e990d0640058ec7866c5f7d67153c263e39a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzE4ZTk5MGQwNjQwMDU4ZWM3ODY2YzVmN2Q2NzE1M2MyNjNlMzlh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:35:21Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:35:21Z"
      },
      "message": "scripted-diff: Use NonConstBlockMap type for validation iterators\n\n-BEGIN VERIFY SCRIPT-\nsed -i \"s/BlockMap::iterator/NonConstBlockMap::iterator/\" src/validation.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "ca20d12c17e0baaac80fd831dba990c7d40b3c43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca20d12c17e0baaac80fd831dba990c7d40b3c43"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d718e990d0640058ec7866c5f7d67153c263e39a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d718e990d0640058ec7866c5f7d67153c263e39a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d718e990d0640058ec7866c5f7d67153c263e39a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d718e990d0640058ec7866c5f7d67153c263e39a/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c1ea0aa6f888de63487256a9efc019bf253b2a07",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1ea0aa6f888de63487256a9efc019bf253b2a07",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c1ea0aa6f888de63487256a9efc019bf253b2a07"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 13,
      "deletions": 13
    },
    "files": [
      {
        "sha": "5b208a9e1a282afd4d35c24a4cc3c4fec53a492c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d718e990d0640058ec7866c5f7d67153c263e39a/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d718e990d0640058ec7866c5f7d67153c263e39a/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=d718e990d0640058ec7866c5f7d67153c263e39a",
        "patch": "@@ -132,7 +132,7 @@ class CChainState {\n \n     ~CChainState() {\n         // block headers\n-        BlockMap::iterator it1 = mapBlockIndex.begin();\n+        NonConstBlockMap::iterator it1 = mapBlockIndex.begin();\n         for (; it1 != mapBlockIndex.end(); it1++)\n             delete (*it1).second;\n         mapBlockIndex.clear();\n@@ -2650,7 +2650,7 @@ bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& c\n \n     // The resulting new best tip may not be in setBlockIndexCandidates anymore, so\n     // add it again.\n-    BlockMap::iterator it = mapBlockIndex.begin();\n+    NonConstBlockMap::iterator it = mapBlockIndex.begin();\n     while (it != mapBlockIndex.end()) {\n         if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->nChainTx && !setBlockIndexCandidates.value_comp()(it->second, chainActive.Tip())) {\n             setBlockIndexCandidates.insert(it->second);\n@@ -2672,7 +2672,7 @@ bool CChainState::ResetBlockFailureFlags(CBlockIndex *pindex) {\n     int nHeight = pindex->nHeight;\n \n     // Remove the invalidity flag from this block and all its descendants.\n-    BlockMap::iterator it = mapBlockIndex.begin();\n+    NonConstBlockMap::iterator it = mapBlockIndex.begin();\n     while (it != mapBlockIndex.end()) {\n         if (!it->second->IsValid() && it->second->GetAncestor(nHeight) == pindex) {\n             it->second->nStatus &= ~BLOCK_FAILED_MASK;\n@@ -2706,7 +2706,7 @@ CBlockIndex* CChainState::AddToBlockIndex(const CBlockHeader& block)\n {\n     // Check for duplicate\n     uint256 hash = block.GetHash();\n-    BlockMap::iterator it = mapBlockIndex.find(hash);\n+    NonConstBlockMap::iterator it = mapBlockIndex.find(hash);\n     if (it != mapBlockIndex.end())\n         return it->second;\n \n@@ -2717,9 +2717,9 @@ CBlockIndex* CChainState::AddToBlockIndex(const CBlockHeader& block)\n     // to avoid miners withholding blocks but broadcasting headers, to get a\n     // competitive advantage.\n     pindexNew->nSequenceId = 0;\n-    BlockMap::iterator mi = mapBlockIndex.insert(std::make_pair(hash, pindexNew)).first;\n+    NonConstBlockMap::iterator mi = mapBlockIndex.insert(std::make_pair(hash, pindexNew)).first;\n     pindexNew->phashBlock = &((*mi).first);\n-    BlockMap::iterator miPrev = mapBlockIndex.find(block.hashPrevBlock);\n+    NonConstBlockMap::iterator miPrev = mapBlockIndex.find(block.hashPrevBlock);\n     if (miPrev != mapBlockIndex.end())\n     {\n         pindexNew->pprev = (*miPrev).second;\n@@ -3136,7 +3136,7 @@ bool CChainState::AcceptBlockHeader(const CBlockHeader& block, CValidationState&\n     AssertLockHeld(cs_main);\n     // Check for duplicate\n     uint256 hash = block.GetHash();\n-    BlockMap::iterator miSelf = mapBlockIndex.find(hash);\n+    NonConstBlockMap::iterator miSelf = mapBlockIndex.find(hash);\n     CBlockIndex *pindex = nullptr;\n     if (hash != chainparams.GetConsensus().hashGenesisBlock) {\n \n@@ -3155,7 +3155,7 @@ bool CChainState::AcceptBlockHeader(const CBlockHeader& block, CValidationState&\n \n         // Get prev block index\n         CBlockIndex* pindexPrev = nullptr;\n-        BlockMap::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n+        NonConstBlockMap::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n         if (mi == mapBlockIndex.end())\n             return state.DoS(10, error(\"%s: prev block not found\", __func__), 0, \"prev-blk-not-found\");\n         pindexPrev = (*mi).second;\n@@ -3360,7 +3360,7 @@ static uint64_t CalculateCurrentUsage()\n /* Prune a block file (modify associated database entries)*/\n void PruneOneBlockFile(const int fileNumber)\n {\n-    for (BlockMap::iterator it = chainstate.mapBlockIndex.begin(); it != chainstate.mapBlockIndex.end(); ++it) {\n+    for (NonConstBlockMap::iterator it = chainstate.mapBlockIndex.begin(); it != chainstate.mapBlockIndex.end(); ++it) {\n         CBlockIndex* pindex = it->second;\n         if (pindex->nFile == fileNumber) {\n             pindex->nStatus &= ~BLOCK_HAVE_DATA;\n@@ -3546,7 +3546,7 @@ CBlockIndex * CChainState::InsertBlockIndex(const uint256& hash)\n         return nullptr;\n \n     // Return existing\n-    BlockMap::iterator mi = mapBlockIndex.find(hash);\n+    NonConstBlockMap::iterator mi = mapBlockIndex.find(hash);\n     if (mi != mapBlockIndex.end())\n         return (*mi).second;\n \n@@ -3680,7 +3680,7 @@ bool CChainState::LoadChainTip(const CChainParams& chainparams)\n     }\n \n     // Load pointer to end of best chain\n-    BlockMap::iterator it = mapBlockIndex.find(pcoinsTip->GetBestBlock());\n+    NonConstBlockMap::iterator it = mapBlockIndex.find(pcoinsTip->GetBestBlock());\n     if (it == mapBlockIndex.end())\n         return false;\n     chainActive.SetTip(it->second);\n@@ -3930,7 +3930,7 @@ bool CChainState::RewindBlockIndex(const CChainParams& params)\n     // Reduce validity flag and have-data flags.\n     // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n     // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n-    for (BlockMap::iterator it = mapBlockIndex.begin(); it != mapBlockIndex.end(); it++) {\n+    for (NonConstBlockMap::iterator it = mapBlockIndex.begin(); it != mapBlockIndex.end(); it++) {\n         CBlockIndex* pindexIter = it->second;\n \n         // Note: If we encounter an insufficiently validated block that\n@@ -4224,7 +4224,7 @@ void CChainState::CheckBlockIndex(const Consensus::Params& consensusParams)\n \n     // Build forward-pointing map of the entire block tree.\n     std::multimap<CBlockIndex*,CBlockIndex*> forward;\n-    for (BlockMap::iterator it = mapBlockIndex.begin(); it != mapBlockIndex.end(); it++) {\n+    for (NonConstBlockMap::iterator it = mapBlockIndex.begin(); it != mapBlockIndex.end(); it++) {\n         forward.insert(std::make_pair(it->second->pprev, it->second));\n     }\n "
      }
    ]
  },
  {
    "sha": "ffaebe1d689972eb85664ed82d05aab750919352",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZmFlYmUxZDY4OTk3MmViODU2NjRlZDgyZDA1YWFiNzUwOTE5MzUy",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:36:49Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:36:49Z"
      },
      "message": "Move NonConstBlockMap into CChainState",
      "tree": {
        "sha": "aff016dc6defe8446853b58f4b3fa5d7ed62cadf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aff016dc6defe8446853b58f4b3fa5d7ed62cadf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ffaebe1d689972eb85664ed82d05aab750919352",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffaebe1d689972eb85664ed82d05aab750919352",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ffaebe1d689972eb85664ed82d05aab750919352",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffaebe1d689972eb85664ed82d05aab750919352/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d718e990d0640058ec7866c5f7d67153c263e39a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d718e990d0640058ec7866c5f7d67153c263e39a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d718e990d0640058ec7866c5f7d67153c263e39a"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "cdc8911ebad859aa203894e321cb076caecb48f9",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffaebe1d689972eb85664ed82d05aab750919352/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffaebe1d689972eb85664ed82d05aab750919352/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ffaebe1d689972eb85664ed82d05aab750919352",
        "patch": "@@ -87,7 +87,6 @@ enum DisconnectResult\n };\n \n class ConnectTrace;\n-typedef std::unordered_map<uint256, CBlockIndex*, BlockHasher> NonConstBlockMap;\n \n /**\n  * CChainState stores and provides an API to update our local knowledge of the\n@@ -126,6 +125,7 @@ class CChainState {\n public:\n     CChain chainActive;\n \n+    typedef std::unordered_map<uint256, CBlockIndex*, BlockHasher> NonConstBlockMap;\n     NonConstBlockMap mapBlockIndex;\n     std::multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;\n     CBlockIndex *pindexBestInvalid = nullptr;\n@@ -3360,7 +3360,7 @@ static uint64_t CalculateCurrentUsage()\n /* Prune a block file (modify associated database entries)*/\n void PruneOneBlockFile(const int fileNumber)\n {\n-    for (NonConstBlockMap::iterator it = chainstate.mapBlockIndex.begin(); it != chainstate.mapBlockIndex.end(); ++it) {\n+    for (CChainState::NonConstBlockMap::iterator it = chainstate.mapBlockIndex.begin(); it != chainstate.mapBlockIndex.end(); ++it) {\n         CBlockIndex* pindex = it->second;\n         if (pindex->nFile == fileNumber) {\n             pindex->nStatus &= ~BLOCK_HAVE_DATA;"
      }
    ]
  },
  {
    "sha": "cd83402f7e01c6680b9a1a560b8cce9820f1e02f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDgzNDAyZjdlMDFjNjY4MGI5YTFhNTYwYjhjY2U5ODIwZjFlMDJm",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:39:05Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:39:05Z"
      },
      "message": "Make mapBlockIndex's CBlockIndex* const outside of CChainState",
      "tree": {
        "sha": "0c362c17cdbd7b44d24500acc46d7921a9382c08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0c362c17cdbd7b44d24500acc46d7921a9382c08"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd83402f7e01c6680b9a1a560b8cce9820f1e02f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd83402f7e01c6680b9a1a560b8cce9820f1e02f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd83402f7e01c6680b9a1a560b8cce9820f1e02f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd83402f7e01c6680b9a1a560b8cce9820f1e02f/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ffaebe1d689972eb85664ed82d05aab750919352",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffaebe1d689972eb85664ed82d05aab750919352",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ffaebe1d689972eb85664ed82d05aab750919352"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "8a55556a4f11d3ce388cbb990dab35dee986a377",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd83402f7e01c6680b9a1a560b8cce9820f1e02f/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd83402f7e01c6680b9a1a560b8cce9820f1e02f/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=cd83402f7e01c6680b9a1a560b8cce9820f1e02f",
        "patch": "@@ -15,7 +15,7 @@\n \n namespace Checkpoints {\n \n-    CBlockIndex* GetLastCheckpoint(const CCheckpointData& data)\n+    const CBlockIndex* GetLastCheckpoint(const CCheckpointData& data)\n     {\n         const MapCheckpoints& checkpoints = data.mapCheckpoints;\n "
      },
      {
        "sha": "61d8b26dcc1f0024cb8f6e38a6aa8df01f8ca1d1",
        "filename": "src/checkpoints.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd83402f7e01c6680b9a1a560b8cce9820f1e02f/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd83402f7e01c6680b9a1a560b8cce9820f1e02f/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=cd83402f7e01c6680b9a1a560b8cce9820f1e02f",
        "patch": "@@ -20,7 +20,7 @@ namespace Checkpoints\n {\n \n //! Returns last CBlockIndex* in mapBlockIndex that is a checkpoint\n-CBlockIndex* GetLastCheckpoint(const CCheckpointData& data);\n+const CBlockIndex* GetLastCheckpoint(const CCheckpointData& data);\n \n } //namespace Checkpoints\n "
      },
      {
        "sha": "65b24a59741d146263f4f7b7801488e99125338e",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd83402f7e01c6680b9a1a560b8cce9820f1e02f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd83402f7e01c6680b9a1a560b8cce9820f1e02f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=cd83402f7e01c6680b9a1a560b8cce9820f1e02f",
        "patch": "@@ -187,7 +187,7 @@ class CChainState {\n \n CCriticalSection cs_main;\n \n-const BlockMap& mapBlockIndex = chainstate.mapBlockIndex;\n+const BlockMap& mapBlockIndex = reinterpret_cast<BlockMap&>(chainstate.mapBlockIndex);\n CChain& chainActive = chainstate.chainActive;\n CBlockIndex *pindexBestHeader = nullptr;\n CWaitableCriticalSection csBestBlock;\n@@ -1778,7 +1778,7 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n         //  relative to a piece of software is an objective fact these defaults can be easily reviewed.\n         // This setting doesn't force the selection of any particular chain but makes validating some faster by\n         //  effectively caching the result of part of the verification.\n-        BlockMap::const_iterator  it = mapBlockIndex.find(hashAssumeValid);\n+        NonConstBlockMap::const_iterator  it = mapBlockIndex.find(hashAssumeValid);\n         if (it != mapBlockIndex.end()) {\n             if (it->second->GetAncestor(pindex->nHeight) == pindex &&\n                 pindexBestHeader->GetAncestor(pindex->nHeight) == pindex &&\n@@ -3026,7 +3026,7 @@ static bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationSta\n         // Don't accept any forks from the main chain prior to last checkpoint.\n         // GetLastCheckpoint finds the last checkpoint in MapCheckpoints that's in our\n         // MapBlockIndex.\n-        CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(params.Checkpoints());\n+        const CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(params.Checkpoints());\n         if (pcheckpoint && nHeight < pcheckpoint->nHeight)\n             return state.DoS(100, error(\"%s: forked chain older than last checkpoint (height %d)\", __func__, nHeight), REJECT_CHECKPOINT, \"bad-fork-prior-to-checkpoint\");\n     }\n@@ -3633,9 +3633,9 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n     // Check presence of blk files\n     LogPrintf(\"Checking all blk files are present...\\n\");\n     std::set<int> setBlkDataFiles;\n-    for (const std::pair<uint256, CBlockIndex*>& item : mapBlockIndex)\n+    for (const std::pair<uint256, const CBlockIndex*>& item : mapBlockIndex)\n     {\n-        CBlockIndex* pindex = item.second;\n+        const CBlockIndex* pindex = item.second;\n         if (pindex->nStatus & BLOCK_HAVE_DATA) {\n             setBlkDataFiles.insert(pindex->nFile);\n         }"
      },
      {
        "sha": "7d10288f854f671bba67943af0439629882fd5b2",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd83402f7e01c6680b9a1a560b8cce9820f1e02f/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd83402f7e01c6680b9a1a560b8cce9820f1e02f/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=cd83402f7e01c6680b9a1a560b8cce9820f1e02f",
        "patch": "@@ -158,7 +158,7 @@ extern CScript COINBASE_FLAGS;\n extern CCriticalSection cs_main;\n extern CBlockPolicyEstimator feeEstimator;\n extern CTxMemPool mempool;\n-typedef std::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n+typedef std::unordered_map<uint256, const CBlockIndex*, BlockHasher> BlockMap;\n extern const BlockMap& mapBlockIndex;\n extern uint64_t nLastBlockTx;\n extern uint64_t nLastBlockSize;"
      },
      {
        "sha": "3c8c598c5344cd1e822257a093a9b276efa073e6",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd83402f7e01c6680b9a1a560b8cce9820f1e02f/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd83402f7e01c6680b9a1a560b8cce9820f1e02f/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=cd83402f7e01c6680b9a1a560b8cce9820f1e02f",
        "patch": "@@ -533,7 +533,7 @@ static int64_t AddTx(CWallet& wallet, uint32_t lockTime, int64_t mockTime, int64\n         auto inserted = const_cast<BlockMap&>(mapBlockIndex).emplace(GetRandHash(), new CBlockIndex);\n         assert(inserted.second);\n         const uint256& hash = inserted.first->first;\n-        block = inserted.first->second;\n+        block = const_cast<CBlockIndex*>(inserted.first->second);\n         block->nTime = blockTime;\n         block->phashBlock = &hash;\n     }"
      }
    ]
  },
  {
    "sha": "e26d8997b0e1ecbfdac8c2cd485d6dbdf2860b4f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMjZkODk5N2IwZTFlY2JmZGFjOGMyY2Q0ODVkNmRiZGYyODYwYjRm",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:42:19Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:42:19Z"
      },
      "message": "Make some CBlockIndex*s in validation const where appropriate",
      "tree": {
        "sha": "23d66a13d59f4f4504948082c9bd2521b25fa96e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/23d66a13d59f4f4504948082c9bd2521b25fa96e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e26d8997b0e1ecbfdac8c2cd485d6dbdf2860b4f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e26d8997b0e1ecbfdac8c2cd485d6dbdf2860b4f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e26d8997b0e1ecbfdac8c2cd485d6dbdf2860b4f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e26d8997b0e1ecbfdac8c2cd485d6dbdf2860b4f/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd83402f7e01c6680b9a1a560b8cce9820f1e02f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd83402f7e01c6680b9a1a560b8cce9820f1e02f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd83402f7e01c6680b9a1a560b8cce9820f1e02f"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "38a524d38050a3bf2e0fbe963432b5ce5a286eb9",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e26d8997b0e1ecbfdac8c2cd485d6dbdf2860b4f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e26d8997b0e1ecbfdac8c2cd485d6dbdf2860b4f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e26d8997b0e1ecbfdac8c2cd485d6dbdf2860b4f",
        "patch": "@@ -985,7 +985,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n /** Return transaction in txOut, and if it was found inside a block, its hash is placed in hashBlock */\n bool GetTransaction(const uint256 &hash, CTransactionRef &txOut, const Consensus::Params& consensusParams, uint256 &hashBlock, bool fAllowSlow)\n {\n-    CBlockIndex *pindexSlow = nullptr;\n+    const CBlockIndex *pindexSlow = nullptr;\n \n     LOCK(cs_main);\n \n@@ -1142,7 +1142,7 @@ bool IsInitialBlockDownload()\n     return false;\n }\n \n-CBlockIndex *pindexBestForkTip = nullptr, *pindexBestForkBase = nullptr;\n+const CBlockIndex *pindexBestForkTip = nullptr, *pindexBestForkBase = nullptr;\n \n static void AlertNotify(const std::string& strMessage)\n {\n@@ -1206,8 +1206,8 @@ static void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip)\n {\n     AssertLockHeld(cs_main);\n     // If we are on a fork that is sufficiently large, set a warning flag\n-    CBlockIndex* pfork = pindexNewForkTip;\n-    CBlockIndex* plonger = chainActive.Tip();\n+    const CBlockIndex* pfork = pindexNewForkTip;\n+    const CBlockIndex* plonger = chainActive.Tip();\n     while (pfork && pfork != plonger)\n     {\n         while (plonger && plonger->nHeight > pfork->nHeight)\n@@ -1244,7 +1244,7 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n       pindexNew->GetBlockHash().ToString(), pindexNew->nHeight,\n       log(pindexNew->nChainWork.getdouble())/log(2.0), DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\",\n       pindexNew->GetBlockTime()));\n-    CBlockIndex *tip = chainActive.Tip();\n+    const CBlockIndex *tip = chainActive.Tip();\n     assert (tip);\n     LogPrintf(\"%s:  current best=%s  height=%d  log2_work=%.8g  date=%s\\n\", __func__,\n       tip->GetBlockHash().ToString(), chainActive.Height(), log(tip->nChainWork.getdouble())/log(2.0),\n@@ -2490,8 +2490,8 @@ bool CChainState::ActivateBestChainStep(CValidationState& state, const CChainPar\n static void NotifyHeaderTip() {\n     bool fNotify = false;\n     bool fInitialBlockDownload = false;\n-    static CBlockIndex* pindexHeaderOld = nullptr;\n-    CBlockIndex* pindexHeader = nullptr;\n+    static const CBlockIndex* pindexHeaderOld = nullptr;\n+    const CBlockIndex* pindexHeader = nullptr;\n     {\n         LOCK(cs_main);\n         pindexHeader = pindexBestHeader;"
      }
    ]
  },
  {
    "sha": "9b97cee6d746ebe15425335418dd2698b1dd5f64",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Yjk3Y2VlNmQ3NDZlYmUxNTQyNTMzNTQxOGRkMjY5OGIxZGQ1ZjY0",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-30T20:56:15Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:42:25Z"
      },
      "message": "Make some CBlockIndex*es in wallet_tests const",
      "tree": {
        "sha": "276b01174099ed730847b65b572f087dcafaccdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/276b01174099ed730847b65b572f087dcafaccdc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b97cee6d746ebe15425335418dd2698b1dd5f64",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b97cee6d746ebe15425335418dd2698b1dd5f64",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b97cee6d746ebe15425335418dd2698b1dd5f64",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b97cee6d746ebe15425335418dd2698b1dd5f64/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e26d8997b0e1ecbfdac8c2cd485d6dbdf2860b4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e26d8997b0e1ecbfdac8c2cd485d6dbdf2860b4f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e26d8997b0e1ecbfdac8c2cd485d6dbdf2860b4f"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "b64d3b75a24418deafc8f9185c13fe133ececa16",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b97cee6d746ebe15425335418dd2698b1dd5f64/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b97cee6d746ebe15425335418dd2698b1dd5f64/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=9b97cee6d746ebe15425335418dd2698b1dd5f64",
        "patch": "@@ -369,11 +369,11 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     LOCK(cs_main);\n \n     // Cap last block file size, and mine new block in a new block file.\n-    CBlockIndex* const nullBlock = nullptr;\n-    CBlockIndex* oldTip = chainActive.Tip();\n+    const CBlockIndex* const nullBlock = nullptr;\n+    const CBlockIndex* oldTip = chainActive.Tip();\n     GetBlockFileInfo(oldTip->GetBlockPos().nFile)->nSize = MAX_BLOCKFILE_SIZE;\n     CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n-    CBlockIndex* newTip = chainActive.Tip();\n+    const CBlockIndex* newTip = chainActive.Tip();\n \n     // Verify ScanForWalletTransactions picks up transactions in both the old\n     // and new block files."
      }
    ]
  },
  {
    "sha": "0573c1486ff4d9e2484dd65f540d0016f1ddb322",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNTczYzE0ODZmZjRkOWUyNDg0ZGQ2NWY1NDBkMDAxNmYxZGRiMzIy",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-30T22:48:33Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:42:25Z"
      },
      "message": "Add a const_cast'ed reference to chainActive in miner_tests",
      "tree": {
        "sha": "de2e304c54db7ab29060c7ec06a8ea617b3d9ac9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de2e304c54db7ab29060c7ec06a8ea617b3d9ac9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0573c1486ff4d9e2484dd65f540d0016f1ddb322",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0573c1486ff4d9e2484dd65f540d0016f1ddb322",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0573c1486ff4d9e2484dd65f540d0016f1ddb322",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0573c1486ff4d9e2484dd65f540d0016f1ddb322/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b97cee6d746ebe15425335418dd2698b1dd5f64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b97cee6d746ebe15425335418dd2698b1dd5f64",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b97cee6d746ebe15425335418dd2698b1dd5f64"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "539682c94e5f1302760c50ac86a62ce7d26bc3e1",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0573c1486ff4d9e2484dd65f540d0016f1ddb322/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0573c1486ff4d9e2484dd65f540d0016f1ddb322/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=0573c1486ff4d9e2484dd65f540d0016f1ddb322",
        "patch": "@@ -28,6 +28,8 @@ BOOST_FIXTURE_TEST_SUITE(miner_tests, TestingSetup)\n \n static CFeeRate blockMinFeeRate = CFeeRate(DEFAULT_BLOCK_MIN_TX_FEE);\n \n+static CChain& nonConstChainActive = const_cast<CChain&>(chainActive);\n+\n static BlockAssembler AssemblerForTest(const CChainParams& params) {\n     BlockAssembler::Options options;\n "
      }
    ]
  },
  {
    "sha": "cd390ed58f786c736f80c6e76926a6538901084b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDM5MGVkNThmNzg2YzczNmY4MGM2ZTc2OTI2YTY1Mzg5MDEwODRi",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-05-01T14:29:09Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:42:25Z"
      },
      "message": "scripted-diff: Use nonCosntChainActive in miner_tests\n\n-BEGIN VERIFY SCRIPT-\nsed -i \"s/chainActive\\./nonConstChainActive./\" src/test/miner_tests.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "9dcfa403e4441749aa9a743f24a52e295a11f4a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9dcfa403e4441749aa9a743f24a52e295a11f4a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd390ed58f786c736f80c6e76926a6538901084b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd390ed58f786c736f80c6e76926a6538901084b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd390ed58f786c736f80c6e76926a6538901084b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd390ed58f786c736f80c6e76926a6538901084b/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0573c1486ff4d9e2484dd65f540d0016f1ddb322",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0573c1486ff4d9e2484dd65f540d0016f1ddb322",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0573c1486ff4d9e2484dd65f540d0016f1ddb322"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 30,
      "deletions": 30
    },
    "files": [
      {
        "sha": "7cd76201d88ae3328c9dfd9770a4f497b0578b9b",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 30,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd390ed58f786c736f80c6e76926a6538901084b/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd390ed58f786c736f80c6e76926a6538901084b/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=cd390ed58f786c736f80c6e76926a6538901084b",
        "patch": "@@ -78,7 +78,7 @@ CBlockIndex CreateBlockIndex(int nHeight)\n {\n     CBlockIndex index;\n     index.nHeight = nHeight;\n-    index.pprev = chainActive.Tip();\n+    index.pprev = nonConstChainActive.Tip();\n     return index;\n }\n \n@@ -222,17 +222,17 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     {\n         CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n         pblock->nVersion = 1;\n-        pblock->nTime = chainActive.Tip()->GetMedianTimePast()+1;\n+        pblock->nTime = nonConstChainActive.Tip()->GetMedianTimePast()+1;\n         CMutableTransaction txCoinbase(*pblock->vtx[0]);\n         txCoinbase.nVersion = 1;\n         txCoinbase.vin[0].scriptSig = CScript();\n         txCoinbase.vin[0].scriptSig.push_back(blockinfo[i].extranonce);\n-        txCoinbase.vin[0].scriptSig.push_back(chainActive.Height());\n+        txCoinbase.vin[0].scriptSig.push_back(nonConstChainActive.Height());\n         txCoinbase.vout.resize(1); // Ignore the (optional) segwit commitment added by CreateNewBlock (as the hardcoded nonces don't account for this)\n         txCoinbase.vout[0].scriptPubKey = CScript();\n         pblock->vtx[0] = MakeTransactionRef(std::move(txCoinbase));\n         if (txFirst.size() == 0)\n-            baseheight = chainActive.Height();\n+            baseheight = nonConstChainActive.Height();\n         if (txFirst.size() < 4)\n             txFirst.push_back(pblock->vtx[0]);\n         pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n@@ -369,42 +369,42 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     mempool.clear();\n \n     // subsidy changing\n-    int nHeight = chainActive.Height();\n+    int nHeight = nonConstChainActive.Height();\n     // Create an actual 209999-long block chain (without valid blocks).\n-    while (chainActive.Tip()->nHeight < 209999) {\n-        CBlockIndex* prev = chainActive.Tip();\n+    while (nonConstChainActive.Tip()->nHeight < 209999) {\n+        CBlockIndex* prev = nonConstChainActive.Tip();\n         CBlockIndex* next = new CBlockIndex();\n         next->phashBlock = new uint256(InsecureRand256());\n         pcoinsTip->SetBestBlock(next->GetBlockHash());\n         next->pprev = prev;\n         next->nHeight = prev->nHeight + 1;\n         next->BuildSkip();\n-        chainActive.SetTip(next);\n+        nonConstChainActive.SetTip(next);\n     }\n     BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n     // Extend to a 210000-long block chain.\n-    while (chainActive.Tip()->nHeight < 210000) {\n-        CBlockIndex* prev = chainActive.Tip();\n+    while (nonConstChainActive.Tip()->nHeight < 210000) {\n+        CBlockIndex* prev = nonConstChainActive.Tip();\n         CBlockIndex* next = new CBlockIndex();\n         next->phashBlock = new uint256(InsecureRand256());\n         pcoinsTip->SetBestBlock(next->GetBlockHash());\n         next->pprev = prev;\n         next->nHeight = prev->nHeight + 1;\n         next->BuildSkip();\n-        chainActive.SetTip(next);\n+        nonConstChainActive.SetTip(next);\n     }\n     BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n     // Delete the dummy blocks again.\n-    while (chainActive.Tip()->nHeight > nHeight) {\n-        CBlockIndex* del = chainActive.Tip();\n-        chainActive.SetTip(del->pprev);\n+    while (nonConstChainActive.Tip()->nHeight > nHeight) {\n+        CBlockIndex* del = nonConstChainActive.Tip();\n+        nonConstChainActive.SetTip(del->pprev);\n         pcoinsTip->SetBestBlock(del->pprev->GetBlockHash());\n         delete del->phashBlock;\n         delete del;\n     }\n \n     // non-final txs in mempool\n-    SetMockTime(chainActive.Tip()->GetMedianTimePast()+1);\n+    SetMockTime(nonConstChainActive.Tip()->GetMedianTimePast()+1);\n     int flags = LOCKTIME_VERIFY_SEQUENCE|LOCKTIME_MEDIAN_TIME_PAST;\n     // height map\n     std::vector<int> prevheights;\n@@ -416,7 +416,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].prevout.hash = txFirst[0]->GetHash(); // only 1 transaction\n     tx.vin[0].prevout.n = 0;\n     tx.vin[0].scriptSig = CScript() << OP_1;\n-    tx.vin[0].nSequence = chainActive.Tip()->nHeight + 1; // txFirst[0] is the 2nd block\n+    tx.vin[0].nSequence = nonConstChainActive.Tip()->nHeight + 1; // txFirst[0] is the 2nd block\n     prevheights[0] = baseheight + 1;\n     tx.vout.resize(1);\n     tx.vout[0].nValue = BLOCKSUBSIDY-HIGHFEE;\n@@ -426,48 +426,48 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     mempool.addUnchecked(hash, entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK(CheckFinalTx(tx, flags)); // Locktime passes\n     BOOST_CHECK(!TestSequenceLocks(tx, flags)); // Sequence locks fail\n-    BOOST_CHECK(SequenceLocks(tx, flags, &prevheights, CreateBlockIndex(chainActive.Tip()->nHeight + 2))); // Sequence locks pass on 2nd block\n+    BOOST_CHECK(SequenceLocks(tx, flags, &prevheights, CreateBlockIndex(nonConstChainActive.Tip()->nHeight + 2))); // Sequence locks pass on 2nd block\n \n     // relative time locked\n     tx.vin[0].prevout.hash = txFirst[1]->GetHash();\n-    tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG | (((chainActive.Tip()->GetMedianTimePast()+1-chainActive[1]->GetMedianTimePast()) >> CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) + 1); // txFirst[1] is the 3rd block\n+    tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG | (((nonConstChainActive.Tip()->GetMedianTimePast()+1-chainActive[1]->GetMedianTimePast()) >> CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) + 1); // txFirst[1] is the 3rd block\n     prevheights[0] = baseheight + 2;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n     BOOST_CHECK(CheckFinalTx(tx, flags)); // Locktime passes\n     BOOST_CHECK(!TestSequenceLocks(tx, flags)); // Sequence locks fail\n \n     for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n-        chainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast\n-    BOOST_CHECK(SequenceLocks(tx, flags, &prevheights, CreateBlockIndex(chainActive.Tip()->nHeight + 1))); // Sequence locks pass 512 seconds later\n+        nonConstChainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast\n+    BOOST_CHECK(SequenceLocks(tx, flags, &prevheights, CreateBlockIndex(nonConstChainActive.Tip()->nHeight + 1))); // Sequence locks pass 512 seconds later\n     for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n-        chainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i)->nTime -= 512; //undo tricked MTP\n+        nonConstChainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i)->nTime -= 512; //undo tricked MTP\n \n     // absolute height locked\n     tx.vin[0].prevout.hash = txFirst[2]->GetHash();\n     tx.vin[0].nSequence = CTxIn::SEQUENCE_FINAL - 1;\n     prevheights[0] = baseheight + 3;\n-    tx.nLockTime = chainActive.Tip()->nHeight + 1;\n+    tx.nLockTime = nonConstChainActive.Tip()->nHeight + 1;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n     BOOST_CHECK(!CheckFinalTx(tx, flags)); // Locktime fails\n     BOOST_CHECK(TestSequenceLocks(tx, flags)); // Sequence locks pass\n-    BOOST_CHECK(IsFinalTx(tx, chainActive.Tip()->nHeight + 2, chainActive.Tip()->GetMedianTimePast())); // Locktime passes on 2nd block\n+    BOOST_CHECK(IsFinalTx(tx, nonConstChainActive.Tip()->nHeight + 2, chainActive.Tip()->GetMedianTimePast())); // Locktime passes on 2nd block\n \n     // absolute time locked\n     tx.vin[0].prevout.hash = txFirst[3]->GetHash();\n-    tx.nLockTime = chainActive.Tip()->GetMedianTimePast();\n+    tx.nLockTime = nonConstChainActive.Tip()->GetMedianTimePast();\n     prevheights.resize(1);\n     prevheights[0] = baseheight + 4;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n     BOOST_CHECK(!CheckFinalTx(tx, flags)); // Locktime fails\n     BOOST_CHECK(TestSequenceLocks(tx, flags)); // Sequence locks pass\n-    BOOST_CHECK(IsFinalTx(tx, chainActive.Tip()->nHeight + 2, chainActive.Tip()->GetMedianTimePast() + 1)); // Locktime passes 1 second later\n+    BOOST_CHECK(IsFinalTx(tx, nonConstChainActive.Tip()->nHeight + 2, chainActive.Tip()->GetMedianTimePast() + 1)); // Locktime passes 1 second later\n \n     // mempool-dependent transactions (not added)\n     tx.vin[0].prevout.hash = hash;\n-    prevheights[0] = chainActive.Tip()->nHeight + 1;\n+    prevheights[0] = nonConstChainActive.Tip()->nHeight + 1;\n     tx.nLockTime = 0;\n     tx.vin[0].nSequence = 0;\n     BOOST_CHECK(CheckFinalTx(tx, flags)); // Locktime passes\n@@ -488,14 +488,14 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 3);\n     // However if we advance height by 1 and time by 512, all of them should be mined\n     for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n-        chainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast\n-    chainActive.Tip()->nHeight++;\n-    SetMockTime(chainActive.Tip()->GetMedianTimePast() + 1);\n+        nonConstChainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast\n+    nonConstChainActive.Tip()->nHeight++;\n+    SetMockTime(nonConstChainActive.Tip()->GetMedianTimePast() + 1);\n \n     BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n     BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 5);\n \n-    chainActive.Tip()->nHeight--;\n+    nonConstChainActive.Tip()->nHeight--;\n     SetMockTime(0);\n     mempool.clear();\n "
      }
    ]
  },
  {
    "sha": "2606cebc0b65b6f298e6aedb9678a41f1c6d702b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjA2Y2ViYzBiNjViNmYyOThlNmFlZGI5Njc4YTQxZjFjNmQ3MDJi",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:43:50Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:43:50Z"
      },
      "message": "Make VerifyDB a CChainState member instead of a loose class",
      "tree": {
        "sha": "336cdf542bc5ce74d048e38e2313635f518e05da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/336cdf542bc5ce74d048e38e2313635f518e05da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2606cebc0b65b6f298e6aedb9678a41f1c6d702b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2606cebc0b65b6f298e6aedb9678a41f1c6d702b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2606cebc0b65b6f298e6aedb9678a41f1c6d702b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2606cebc0b65b6f298e6aedb9678a41f1c6d702b/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd390ed58f786c736f80c6e76926a6538901084b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd390ed58f786c736f80c6e76926a6538901084b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd390ed58f786c736f80c6e76926a6538901084b"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 20,
      "deletions": 20
    },
    "files": [
      {
        "sha": "c2a79e053790b20264cfcf0e45cd0eb03a58779f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2606cebc0b65b6f298e6aedb9678a41f1c6d702b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2606cebc0b65b6f298e6aedb9678a41f1c6d702b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2606cebc0b65b6f298e6aedb9678a41f1c6d702b",
        "patch": "@@ -1510,7 +1510,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                         }\n                     }\n \n-                    if (!CVerifyDB().VerifyDB(chainparams, pcoinsdbview, gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                    if (!VerifyDB(chainparams, pcoinsdbview, gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n                                   gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n                         strLoadError = _(\"Corrupted block database detected\");\n                         break;"
      },
      {
        "sha": "b9fa65fafa192f068ae098befa9f84177032dae5",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2606cebc0b65b6f298e6aedb9678a41f1c6d702b/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2606cebc0b65b6f298e6aedb9678a41f1c6d702b/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=2606cebc0b65b6f298e6aedb9678a41f1c6d702b",
        "patch": "@@ -1041,7 +1041,7 @@ UniValue verifychain(const JSONRPCRequest& request)\n     if (!request.params[1].isNull())\n         nCheckDepth = request.params[1].get_int();\n \n-    return CVerifyDB().VerifyDB(Params(), pcoinsTip, nCheckLevel, nCheckDepth);\n+    return VerifyDB(Params(), pcoinsTip, nCheckLevel, nCheckDepth);\n }\n \n /** Implementation of IsSuperMajority with better feedback */"
      },
      {
        "sha": "3df973495129a16f2e4b0e2a0db7c85cde23ccab",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 11,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2606cebc0b65b6f298e6aedb9678a41f1c6d702b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2606cebc0b65b6f298e6aedb9678a41f1c6d702b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=2606cebc0b65b6f298e6aedb9678a41f1c6d702b",
        "patch": "@@ -141,6 +141,8 @@ class CChainState {\n     bool LoadBlockIndex(const Consensus::Params& consensus_params, CBlockTreeDB& blocktree);\n     bool LoadChainTip(const CChainParams& chainparams);\n \n+    bool VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth);\n+\n     bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock);\n \n     bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex);\n@@ -3699,17 +3701,7 @@ bool LoadChainTip(const CChainParams& chainparams)\n     return chainstate.LoadChainTip(chainparams);\n }\n \n-CVerifyDB::CVerifyDB()\n-{\n-    uiInterface.ShowProgress(_(\"Verifying blocks...\"), 0);\n-}\n-\n-CVerifyDB::~CVerifyDB()\n-{\n-    uiInterface.ShowProgress(\"\", 100);\n-}\n-\n-bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth)\n+bool CChainState::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth)\n {\n     LOCK(cs_main);\n     if (chainActive.Tip() == nullptr || chainActive.Tip()->pprev == nullptr)\n@@ -3893,6 +3885,19 @@ bool ReplayBlocks(const CChainParams& params, CCoinsView* view) {\n     return chainstate.ReplayBlocks(params, view);\n }\n \n+bool VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth)\n+{\n+    struct VerifyProgress {\n+        VerifyProgress() {\n+            uiInterface.ShowProgress(_(\"Verifying blocks...\"), 0);\n+        }\n+        ~VerifyProgress() {\n+            uiInterface.ShowProgress(\"\", 100);\n+        }\n+    } verifyProgressRAII;\n+    return chainstate.VerifyDB(chainparams, coinsview, nCheckLevel, nCheckDepth);\n+}\n+\n bool CChainState::RewindBlockIndex(const CChainParams& params)\n {\n     LOCK(cs_main);"
      },
      {
        "sha": "01394fc1a3e731f7d41095076a85b08143f304c1",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2606cebc0b65b6f298e6aedb9678a41f1c6d702b/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2606cebc0b65b6f298e6aedb9678a41f1c6d702b/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=2606cebc0b65b6f298e6aedb9678a41f1c6d702b",
        "patch": "@@ -412,13 +412,8 @@ void UpdateUncommittedBlockStructures(CBlock& block, const CBlockIndex* pindexPr\n /** Produce the necessary coinbase commitment for a block (modifies the hash, don't call for mined blocks). */\n std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams);\n \n-/** RAII wrapper for VerifyDB: Verify consistency of the block and coin databases */\n-class CVerifyDB {\n-public:\n-    CVerifyDB();\n-    ~CVerifyDB();\n-    bool VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth);\n-};\n+/** Verify consistency of the block and coin databases */\n+bool VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth);\n \n /** Replay blocks that aren't fully applied to the database. */\n bool ReplayBlocks(const CChainParams& params, CCoinsView* view);"
      }
    ]
  },
  {
    "sha": "f5b8e70a82eed5f5e99ad017f08a190a6c158e90",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNWI4ZTcwYTgyZWVkNWY1ZTk5YWQwMTdmMDhhMTkwYTZjMTU4ZTkw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-05-01T18:43:54Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:44:35Z"
      },
      "message": "Use chainstate's CBlockIndexes in sequence lock calculation",
      "tree": {
        "sha": "0e6cd48ac9d54af09b2895d1edc43e1b24ad0841",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0e6cd48ac9d54af09b2895d1edc43e1b24ad0841"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5b8e70a82eed5f5e99ad017f08a190a6c158e90",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5b8e70a82eed5f5e99ad017f08a190a6c158e90",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f5b8e70a82eed5f5e99ad017f08a190a6c158e90",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5b8e70a82eed5f5e99ad017f08a190a6c158e90/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2606cebc0b65b6f298e6aedb9678a41f1c6d702b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2606cebc0b65b6f298e6aedb9678a41f1c6d702b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2606cebc0b65b6f298e6aedb9678a41f1c6d702b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c5b5a6412a03647cb926b6d3e2a424d807105ba1",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5b8e70a82eed5f5e99ad017f08a190a6c158e90/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5b8e70a82eed5f5e99ad017f08a190a6c158e90/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=f5b8e70a82eed5f5e99ad017f08a190a6c158e90",
        "patch": "@@ -338,7 +338,7 @@ bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp, bool\n     AssertLockHeld(cs_main);\n     AssertLockHeld(mempool.cs);\n \n-    CBlockIndex* tip = chainActive.Tip();\n+    CBlockIndex* tip = chainstate.chainActive.Tip(); // TODO: Refactor (Calculate|Evaluate)SequenceLocks to take pprev instead\n     CBlockIndex index;\n     index.pprev = tip;\n     // CheckSequenceLocks() uses chainActive.Height()+1 to evaluate"
      }
    ]
  },
  {
    "sha": "b8f5e4da9791d16fa606a6ee19d03c2a01b1d3c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOGY1ZTRkYTk3OTFkMTZmYTYwNmE2ZWUxOWQwM2MyYTAxYjFkM2Mx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:47:16Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:47:51Z"
      },
      "message": "Make CChain only return const CBlockIndex* in const functions",
      "tree": {
        "sha": "ab6e6a2abd476fad3145aa91afff27b0a6e1e873",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab6e6a2abd476fad3145aa91afff27b0a6e1e873"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8f5e4da9791d16fa606a6ee19d03c2a01b1d3c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8f5e4da9791d16fa606a6ee19d03c2a01b1d3c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b8f5e4da9791d16fa606a6ee19d03c2a01b1d3c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8f5e4da9791d16fa606a6ee19d03c2a01b1d3c1/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f5b8e70a82eed5f5e99ad017f08a190a6c158e90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5b8e70a82eed5f5e99ad017f08a190a6c158e90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f5b8e70a82eed5f5e99ad017f08a190a6c158e90"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 37,
      "deletions": 6
    },
    "files": [
      {
        "sha": "767ff92d33b2194e3d92fe48ad5436bbff40d8d8",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8f5e4da9791d16fa606a6ee19d03c2a01b1d3c1/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8f5e4da9791d16fa606a6ee19d03c2a01b1d3c1/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=b8f5e4da9791d16fa606a6ee19d03c2a01b1d3c1",
        "patch": "@@ -59,12 +59,17 @@ const CBlockIndex *CChain::FindFork(const CBlockIndex *pindex) const {\n     return pindex;\n }\n \n-CBlockIndex* CChain::FindEarliestAtLeast(int64_t nTime) const\n+const CBlockIndex* CChain::FindEarliestAtLeast(int64_t nTime) const\n {\n     std::vector<CBlockIndex*>::const_iterator lower = std::lower_bound(vChain.begin(), vChain.end(), nTime,\n         [](CBlockIndex* pBlock, const int64_t& time) -> bool { return pBlock->GetBlockTimeMax() < time; });\n     return (lower == vChain.end() ? nullptr : *lower);\n }\n+CBlockIndex* CChain::FindEarliestAtLeast(int64_t nTime) {\n+    std::vector<CBlockIndex*>::const_iterator lower = std::lower_bound(vChain.begin(), vChain.end(), nTime,\n+        [](CBlockIndex* pBlock, const int64_t& time) -> bool { return pBlock->GetBlockTimeMax() < time; });\n+    return (lower == vChain.end() ? nullptr : *lower);\n+}\n \n /** Turn the lowest '1' bit in the binary representation of a number into a '0'. */\n int static inline InvertLowestOne(int n) { return n & (n - 1); }"
      },
      {
        "sha": "b1a27a80596103fda1ffb622a65206d7e0d37521",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 31,
        "deletions": 5,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8f5e4da9791d16fa606a6ee19d03c2a01b1d3c1/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8f5e4da9791d16fa606a6ee19d03c2a01b1d3c1/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=b8f5e4da9791d16fa606a6ee19d03c2a01b1d3c1",
        "patch": "@@ -438,17 +438,34 @@ class CChain {\n \n public:\n     /** Returns the index entry for the genesis block of this chain, or nullptr if none. */\n-    CBlockIndex *Genesis() const {\n+    CBlockIndex *Genesis() {\n+        return vChain.size() > 0 ? vChain[0] : nullptr;\n+    }\n+\n+    /** Returns the index entry for the genesis block of this chain, or nullptr if none. */\n+    const CBlockIndex *Genesis() const {\n         return vChain.size() > 0 ? vChain[0] : nullptr;\n     }\n \n     /** Returns the index entry for the tip of this chain, or nullptr if none. */\n-    CBlockIndex *Tip() const {\n+    const CBlockIndex *Tip() const {\n+        return vChain.size() > 0 ? vChain[vChain.size() - 1] : nullptr;\n+    }\n+\n+    /** Returns the index entry for the tip of this chain, or nullptr if none. */\n+    CBlockIndex *Tip() {\n         return vChain.size() > 0 ? vChain[vChain.size() - 1] : nullptr;\n     }\n \n     /** Returns the index entry at a particular height in this chain, or nullptr if no such height exists. */\n-    CBlockIndex *operator[](int nHeight) const {\n+    const CBlockIndex *operator[](int nHeight) const {\n+        if (nHeight < 0 || nHeight >= (int)vChain.size())\n+            return nullptr;\n+        return vChain[nHeight];\n+    }\n+\n+    /** Returns the index entry at a particular height in this chain, or nullptr if no such height exists. */\n+    CBlockIndex *operator[](int nHeight) {\n         if (nHeight < 0 || nHeight >= (int)vChain.size())\n             return nullptr;\n         return vChain[nHeight];\n@@ -466,7 +483,15 @@ class CChain {\n     }\n \n     /** Find the successor of a block in this chain, or nullptr if the given index is not found or is the tip. */\n-    CBlockIndex *Next(const CBlockIndex *pindex) const {\n+    const CBlockIndex *Next(const CBlockIndex *pindex) const {\n+        if (Contains(pindex))\n+            return (*this)[pindex->nHeight + 1];\n+        else\n+            return nullptr;\n+    }\n+\n+    /** Find the successor of a block in this chain, or nullptr if the given index is not found or is the tip. */\n+    CBlockIndex *Next(const CBlockIndex *pindex) {\n         if (Contains(pindex))\n             return (*this)[pindex->nHeight + 1];\n         else\n@@ -488,7 +513,8 @@ class CChain {\n     const CBlockIndex *FindFork(const CBlockIndex *pindex) const;\n \n     /** Find the earliest block with timestamp equal or greater than the given. */\n-    CBlockIndex* FindEarliestAtLeast(int64_t nTime) const;\n+    const CBlockIndex* FindEarliestAtLeast(int64_t nTime) const;\n+    CBlockIndex* FindEarliestAtLeast(int64_t nTime);\n };\n \n #endif // BITCOIN_CHAIN_H"
      }
    ]
  },
  {
    "sha": "bbe20694064889c4cc36029bb62854624695f0f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYmUyMDY5NDA2NDg4OWM0Y2MzNjAyOWJiNjI4NTQ2MjQ2OTVmMGYz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-30T22:30:10Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:50:38Z"
      },
      "message": "Make chainActive and pindexBestHeader const CBlockIndex*s",
      "tree": {
        "sha": "68b5a3e7ef6cefacceba2c55f31cb890eb10175d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68b5a3e7ef6cefacceba2c55f31cb890eb10175d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bbe20694064889c4cc36029bb62854624695f0f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbe20694064889c4cc36029bb62854624695f0f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bbe20694064889c4cc36029bb62854624695f0f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbe20694064889c4cc36029bb62854624695f0f3/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b8f5e4da9791d16fa606a6ee19d03c2a01b1d3c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8f5e4da9791d16fa606a6ee19d03c2a01b1d3c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b8f5e4da9791d16fa606a6ee19d03c2a01b1d3c1"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "123e4d29a2182504b917f082bfb1c30d9d790ecd",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbe20694064889c4cc36029bb62854624695f0f3/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbe20694064889c4cc36029bb62854624695f0f3/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=bbe20694064889c4cc36029bb62854624695f0f3",
        "patch": "@@ -190,8 +190,8 @@ class CChainState {\n CCriticalSection cs_main;\n \n const BlockMap& mapBlockIndex = reinterpret_cast<BlockMap&>(chainstate.mapBlockIndex);\n-CChain& chainActive = chainstate.chainActive;\n-CBlockIndex *pindexBestHeader = nullptr;\n+const CChain& chainActive = chainstate.chainActive;\n+const CBlockIndex *pindexBestHeader = nullptr;\n CWaitableCriticalSection csBestBlock;\n CConditionVariable cvBlockChange;\n int nScriptCheckThreads = 0;"
      },
      {
        "sha": "8b7b4bdb91d5ea5455ca1be9f997b6a07735cc9a",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbe20694064889c4cc36029bb62854624695f0f3/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbe20694064889c4cc36029bb62854624695f0f3/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=bbe20694064889c4cc36029bb62854624695f0f3",
        "patch": "@@ -187,7 +187,7 @@ extern bool fEnableReplacement;\n extern uint256 hashAssumeValid;\n \n /** Best header we've seen so far (used for getheaders queries' starting points). */\n-extern CBlockIndex *pindexBestHeader;\n+extern const CBlockIndex *pindexBestHeader;\n \n /** Minimum disk space required - used in CheckDiskSpace() */\n static const uint64_t nMinDiskSpace = 52428800;\n@@ -431,7 +431,7 @@ bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, c\n bool ResetBlockFailureFlags(const CBlockIndex *pindex);\n \n /** The currently-connected chain of blocks (protected by cs_main). */\n-extern CChain& chainActive;\n+extern const CChain& chainActive;\n \n /** Global variable that points to the coins database (protected by cs_main) */\n extern CCoinsViewDB *pcoinsdbview;"
      }
    ]
  }
]