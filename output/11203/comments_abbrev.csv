promag,2017-08-31T13:50:46Z,Ideally this change should affect some functional tests. IMO there should be a test that asserts the entry keys.,https://github.com/bitcoin/bitcoin/pull/11203#issuecomment-326301392,326301392,
instagibbs,2017-08-31T13:51:40Z,utACK https://github.com/bitcoin/bitcoin/pull/11203/commits/7e5d5965d12f4e110c026124ed326b03291fe469,https://github.com/bitcoin/bitcoin/pull/11203#issuecomment-326301658,326301658,
sdaftuar,2017-08-31T17:18:53Z,@promag Added a test.,https://github.com/bitcoin/bitcoin/pull/11203#issuecomment-326363943,326363943,
sdaftuar,2017-09-02T13:08:30Z,`wtxid` is defined in BIP 141.  Perhaps we should fix the rest of the RPC interface instead (how many places do we return this currently?); `hash` seems less informative to me...,https://github.com/bitcoin/bitcoin/pull/11203#issuecomment-326743108,326743108,
luke-jr,2017-09-02T16:46:27Z,It's a hash of the transaction. It's not a transaction id. `wtxid` makes no sense.,https://github.com/bitcoin/bitcoin/pull/11203#issuecomment-326755663,326755663,
sipa,2017-09-02T19:02:10Z,"@luke-jr Imagine that at some point a new piece of extra witness data gets added in a softfork way. At that point there will be 3 hashes; the txid, the hash-with-witness-but-not-witness2, and the hash-of-everything. If we have a field for ""overall hash, with everything included"", it will break software that knows about witnesses but not witness2.\n\nSo, while I don't care much about hash vs txid n",https://github.com/bitcoin/bitcoin/pull/11203#issuecomment-326763532,326763532,
jonasschnelli,2017-09-03T17:34:53Z,utACK 617c459c6c56911e70855dbe139ab095f435e73e.,https://github.com/bitcoin/bitcoin/pull/11203#issuecomment-326819208,326819208,
luke-jr,2017-09-03T22:02:18Z,"@sipa It would seem there are two things right now: txid and hash of the entire tx. If we add a third state, both of these things would remain the same. Hashes are opaque, so it's not like software can see it and fail to try to decode it...? What use case(s) do you have in mind?",https://github.com/bitcoin/bitcoin/pull/11203#issuecomment-326834027,326834027,
meshcollider,2017-09-03T22:13:13Z,"utACK https://github.com/bitcoin/bitcoin/commit/617c459c6c56911e70855dbe139ab095f435e73e, agree with sipa on the `hash` v. `wtxid` because I think consistency with BIP 141 is clearer",https://github.com/bitcoin/bitcoin/pull/11203#issuecomment-326834612,326834612,
sipa,2017-09-03T22:14:37Z,"@luke-jr My point is that a ""hash of all the data, regardless of what you think it contains"" is not useful to anyone. It arbitrarily changes meaning as witnesses are added (if ever).",https://github.com/bitcoin/bitcoin/pull/11203#issuecomment-326834690,326834690,
promag,2017-09-04T14:44:55Z,"Still missing tests for `getrawmempool`, `getmempooldescendants` and `getmempoolancestors` (with `verbose=true`) as these also use `entryToJSON()`.",https://github.com/bitcoin/bitcoin/pull/11203#issuecomment-326979506,326979506,
sdaftuar,2017-09-05T16:22:11Z,@promag If you think that's important then I think it'd make more sense to have a separate test that checks the output of those rpc's to ensure they are consistent; I'm going to leave this PR alone.,https://github.com/bitcoin/bitcoin/pull/11203#issuecomment-327228569,327228569,
laanwj,2017-09-05T23:28:21Z,"Is it guaranteed that the entry exists in `mempool.vTxHashes`? if not, using `[]` will potentially cause a leak by adding an empty record.",https://github.com/bitcoin/bitcoin/pull/11203#discussion_r137139944,137139944,src/rpc/blockchain.cpp
sdaftuar,2017-09-06T17:02:03Z,"Yes, it's guaranteed -- this is used in compact block reconstruction.\n\nSee `CTxMemPool::removeUnchecked()` and `::addUnchecked()` for the code that keeps this in sync with the mempool entries.",https://github.com/bitcoin/bitcoin/pull/11203#discussion_r137329120,137329120,src/rpc/blockchain.cpp
laanwj,2017-09-06T17:49:30Z,"Thanks for the explanation, that makes sense.\nMaybe we could add an assertion here `assert(mempool.vTxHashes.count(e.vTxHashesIdx))`, just in case. But I don't insist.",https://github.com/bitcoin/bitcoin/pull/11203#discussion_r137341236,137341236,src/rpc/blockchain.cpp
sipa,2017-09-06T18:13:22Z,"@laanwj `vTxHashes` is a vector - calling [] out of bounds doesn't add an empty record, it's just undefined behaviour.",https://github.com/bitcoin/bitcoin/pull/11203#discussion_r137347909,137347909,src/rpc/blockchain.cpp
laanwj,2017-09-06T18:24:17Z,"Oh, oops, never mind.",https://github.com/bitcoin/bitcoin/pull/11203#discussion_r137350994,137350994,src/rpc/blockchain.cpp
