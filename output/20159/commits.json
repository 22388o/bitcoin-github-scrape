[
  {
    "sha": "fddce7e199308d96e366d700dca982ef088ba98b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZGRjZTdlMTk5MzA4ZDk2ZTM2NmQ3MDBkY2E5ODJlZjA4OGJhOThi",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-10-15T18:27:57Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-10-16T11:05:31Z"
      },
      "message": "test: use MiniWallet for mining_getblocktemplate_longpoll.py\n\nThis test can now be run even with the Bitcoin Core wallet disabled.",
      "tree": {
        "sha": "771d991e7464ceb2a079ba896375ffa9113124c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/771d991e7464ceb2a079ba896375ffa9113124c0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fddce7e199308d96e366d700dca982ef088ba98b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fddce7e199308d96e366d700dca982ef088ba98b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fddce7e199308d96e366d700dca982ef088ba98b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fddce7e199308d96e366d700dca982ef088ba98b/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0d22482353752ebfb11aa29f4b26113b817a448a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d22482353752ebfb11aa29f4b26113b817a448a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d22482353752ebfb11aa29f4b26113b817a448a"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 14,
      "deletions": 9
    },
    "files": [
      {
        "sha": "f4251cd642c972002f6ba43dd0d991f31e83f041",
        "filename": "test/functional/mining_getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 14,
        "deletions": 9,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fddce7e199308d96e366d700dca982ef088ba98b/test/functional/mining_getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fddce7e199308d96e366d700dca982ef088ba98b/test/functional/mining_getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_getblocktemplate_longpoll.py?ref=fddce7e199308d96e366d700dca982ef088ba98b",
        "patch": "@@ -5,11 +5,13 @@\n \"\"\"Test longpolling with getblocktemplate.\"\"\"\n \n from decimal import Decimal\n+import random\n+import threading\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import get_rpc_proxy, random_transaction\n+from test_framework.util import get_rpc_proxy\n+from test_framework.wallet import MiniWallet\n \n-import threading\n \n class LongpollThread(threading.Thread):\n     def __init__(self, node):\n@@ -29,9 +31,6 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         self.log.info(\"Warning: this test will take about 70 seconds in the best case. Be patient.\")\n         self.nodes[0].generate(10)\n@@ -48,26 +47,32 @@ def run_test(self):\n         thr.join(5)  # wait 5 seconds or until thread exits\n         assert thr.is_alive()\n \n+        miniwallets = [ MiniWallet(node) for node in self.nodes ]\n         # Test 2: test that longpoll will terminate if another node generates a block\n-        self.nodes[1].generate(1)  # generate a block on another node\n+        miniwallets[1].generate(1)  # generate a block on another node\n         # check that thread will exit now that new transaction entered mempool\n         thr.join(5)  # wait 5 seconds or until thread exits\n         assert not thr.is_alive()\n \n         # Test 3: test that longpoll will terminate if we generate a block ourselves\n         thr = LongpollThread(self.nodes[0])\n         thr.start()\n-        self.nodes[0].generate(1)  # generate a block on another node\n+        miniwallets[0].generate(1)  # generate a block on own node\n         thr.join(5)  # wait 5 seconds or until thread exits\n         assert not thr.is_alive()\n \n+        # Add enough mature utxos to the wallets, so that all txs spend confirmed coins\n+        self.nodes[0].generate(100)\n+        self.sync_blocks()\n+\n         # Test 4: test that introducing a new transaction into the mempool will terminate the longpoll\n         thr = LongpollThread(self.nodes[0])\n         thr.start()\n         # generate a random transaction and submit it\n         min_relay_fee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n-        # min_relay_fee is fee per 1000 bytes, which should be more than enough.\n-        (txid, txhex, fee) = random_transaction(self.nodes, Decimal(\"1.1\"), min_relay_fee, Decimal(\"0.001\"), 20)\n+        fee_rate = min_relay_fee + Decimal('0.00000010') * random.randint(0,20)\n+        miniwallets[0].send_self_transfer(from_node=random.choice(self.nodes),\n+                                          fee_rate=fee_rate)\n         # after one minute, every 10 seconds the mempool is probed, so in 80 seconds it should have returned\n         thr.join(60 + 20)\n         assert not thr.is_alive()"
      }
    ]
  },
  {
    "sha": "8ee3536b2b77aeb3a48df5b34effbc7345ef34d8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZWUzNTM2YjJiNzdhZWIzYTQ4ZGY1YjM0ZWZmYmM3MzQ1ZWYzNGQ4",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-10-16T11:09:08Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-10-16T13:40:54Z"
      },
      "message": "test: remove unused helpers random_transaction(), make_change() and gather_inputs()",
      "tree": {
        "sha": "dd75793240df3aa4e0ba20e1833156df63710a65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd75793240df3aa4e0ba20e1833156df63710a65"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ee3536b2b77aeb3a48df5b34effbc7345ef34d8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ee3536b2b77aeb3a48df5b34effbc7345ef34d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ee3536b2b77aeb3a48df5b34effbc7345ef34d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ee3536b2b77aeb3a48df5b34effbc7345ef34d8/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fddce7e199308d96e366d700dca982ef088ba98b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fddce7e199308d96e366d700dca982ef088ba98b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fddce7e199308d96e366d700dca982ef088ba98b"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 0,
      "deletions": 57
    },
    "files": [
      {
        "sha": "7688febae712cfb17c0d9061330ced81c81cd36f",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 0,
        "deletions": 57,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ee3536b2b77aeb3a48df5b34effbc7345ef34d8/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ee3536b2b77aeb3a48df5b34effbc7345ef34d8/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=8ee3536b2b77aeb3a48df5b34effbc7345ef34d8",
        "patch": "@@ -12,7 +12,6 @@\n import json\n import logging\n import os\n-import random\n import re\n import time\n import unittest\n@@ -469,62 +468,6 @@ def find_output(node, txid, amount, *, blockhash=None):\n     raise RuntimeError(\"find_output txid %s : %s not found\" % (txid, str(amount)))\n \n \n-def gather_inputs(from_node, amount_needed, confirmations_required=1):\n-    \"\"\"\n-    Return a random set of unspent txouts that are enough to pay amount_needed\n-    \"\"\"\n-    assert confirmations_required >= 0\n-    utxo = from_node.listunspent(confirmations_required)\n-    random.shuffle(utxo)\n-    inputs = []\n-    total_in = Decimal(\"0.00000000\")\n-    while total_in < amount_needed and len(utxo) > 0:\n-        t = utxo.pop()\n-        total_in += t[\"amount\"]\n-        inputs.append({\"txid\": t[\"txid\"], \"vout\": t[\"vout\"], \"address\": t[\"address\"]})\n-    if total_in < amount_needed:\n-        raise RuntimeError(\"Insufficient funds: need %d, have %d\" % (amount_needed, total_in))\n-    return (total_in, inputs)\n-\n-\n-def make_change(from_node, amount_in, amount_out, fee):\n-    \"\"\"\n-    Create change output(s), return them\n-    \"\"\"\n-    outputs = {}\n-    amount = amount_out + fee\n-    change = amount_in - amount\n-    if change > amount * 2:\n-        # Create an extra change output to break up big inputs\n-        change_address = from_node.getnewaddress()\n-        # Split change in two, being careful of rounding:\n-        outputs[change_address] = Decimal(change / 2).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n-        change = amount_in - amount - outputs[change_address]\n-    if change > 0:\n-        outputs[from_node.getnewaddress()] = change\n-    return outputs\n-\n-\n-def random_transaction(nodes, amount, min_fee, fee_increment, fee_variants):\n-    \"\"\"\n-    Create a random transaction.\n-    Returns (txid, hex-encoded-transaction-data, fee)\n-    \"\"\"\n-    from_node = random.choice(nodes)\n-    to_node = random.choice(nodes)\n-    fee = min_fee + fee_increment * random.randint(0, fee_variants)\n-\n-    (total_in, inputs) = gather_inputs(from_node, amount + fee)\n-    outputs = make_change(from_node, total_in, amount, fee)\n-    outputs[to_node.getnewaddress()] = float(amount)\n-\n-    rawtx = from_node.createrawtransaction(inputs, outputs)\n-    signresult = from_node.signrawtransactionwithwallet(rawtx)\n-    txid = from_node.sendrawtransaction(signresult[\"hex\"], 0)\n-\n-    return (txid, signresult[\"hex\"], fee)\n-\n-\n # Helper to create at least \"count\" utxos\n # Pass in a fee that is sufficient for relay and mining new transactions.\n def create_confirmed_utxos(fee, node, count):"
      }
    ]
  },
  {
    "sha": "b128b566725a5037fdaea99940d1b9de5553d198",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTI4YjU2NjcyNWE1MDM3ZmRhZWE5OTk0MGQxYjlkZTU1NTNkMTk4",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-10-15T18:39:50Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-10-16T13:41:00Z"
      },
      "message": "test: add logging for mining_getblocktemplate_longpoll.py",
      "tree": {
        "sha": "a2b075f4752350d66a67d8822ae5909e42ca6160",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2b075f4752350d66a67d8822ae5909e42ca6160"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b128b566725a5037fdaea99940d1b9de5553d198",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b128b566725a5037fdaea99940d1b9de5553d198",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b128b566725a5037fdaea99940d1b9de5553d198",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b128b566725a5037fdaea99940d1b9de5553d198/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ee3536b2b77aeb3a48df5b34effbc7345ef34d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ee3536b2b77aeb3a48df5b34effbc7345ef34d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ee3536b2b77aeb3a48df5b34effbc7345ef34d8"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "2adafb1fdb5cef14f7f4f5a076ec3d412c9bdaf6",
        "filename": "test/functional/mining_getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b128b566725a5037fdaea99940d1b9de5553d198/test/functional/mining_getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b128b566725a5037fdaea99940d1b9de5553d198/test/functional/mining_getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_getblocktemplate_longpoll.py?ref=b128b566725a5037fdaea99940d1b9de5553d198",
        "patch": "@@ -33,28 +33,28 @@ def set_test_params(self):\n \n     def run_test(self):\n         self.log.info(\"Warning: this test will take about 70 seconds in the best case. Be patient.\")\n+        self.log.info(\"Test that longpollid doesn't change between successive getblocktemplate() invocations if nothing else happens\")\n         self.nodes[0].generate(10)\n         template = self.nodes[0].getblocktemplate({'rules': ['segwit']})\n         longpollid = template['longpollid']\n-        # longpollid should not change between successive invocations if nothing else happens\n         template2 = self.nodes[0].getblocktemplate({'rules': ['segwit']})\n         assert template2['longpollid'] == longpollid\n \n-        # Test 1: test that the longpolling wait if we do nothing\n+        self.log.info(\"Test that longpoll waits if we do nothing\")\n         thr = LongpollThread(self.nodes[0])\n         thr.start()\n         # check that thread still lives\n         thr.join(5)  # wait 5 seconds or until thread exits\n         assert thr.is_alive()\n \n         miniwallets = [ MiniWallet(node) for node in self.nodes ]\n-        # Test 2: test that longpoll will terminate if another node generates a block\n+        self.log.info(\"Test that longpoll will terminate if another node generates a block\")\n         miniwallets[1].generate(1)  # generate a block on another node\n         # check that thread will exit now that new transaction entered mempool\n         thr.join(5)  # wait 5 seconds or until thread exits\n         assert not thr.is_alive()\n \n-        # Test 3: test that longpoll will terminate if we generate a block ourselves\n+        self.log.info(\"Test that longpoll will terminate if we generate a block ourselves\")\n         thr = LongpollThread(self.nodes[0])\n         thr.start()\n         miniwallets[0].generate(1)  # generate a block on own node\n@@ -65,7 +65,7 @@ def run_test(self):\n         self.nodes[0].generate(100)\n         self.sync_blocks()\n \n-        # Test 4: test that introducing a new transaction into the mempool will terminate the longpoll\n+        self.log.info(\"Test that introducing a new transaction into the mempool will terminate the longpoll\")\n         thr = LongpollThread(self.nodes[0])\n         thr.start()\n         # generate a random transaction and submit it"
      }
    ]
  }
]