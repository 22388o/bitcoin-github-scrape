[
  {
    "sha": "754e802274e9373ad7e1dccb710acf74ded6e7fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTRlODAyMjc0ZTkzNzNhZDdlMWRjY2I3MTBhY2Y3NGRlZDZlN2Zi",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-01-05T02:13:18Z"
      },
      "committer": {
        "name": "willcl-ark",
        "email": "will8clark@gmail.com",
        "date": "2021-06-15T20:35:29Z"
      },
      "message": "test: check rejected future block later accepted\n\n(Luke) was unsure if the code sufficiently avoided caching a\ntime-too-new rejection, so wrote this test to check it.  It looks like\ndespite only exempting BLOCK_MUTATED, it is still okay because header\nfailures never cache block invalidity.  This test will help ensure that\nif this ever changes, BLOCK_TIME_FUTURE gets excluded at the same time.\n\nCo-authored-by: Will Clark <will8clark@gmail.com>",
      "tree": {
        "sha": "3ffc4a8cd070f7b8cb543eae6b25a6aee58af010",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3ffc4a8cd070f7b8cb543eae6b25a6aee58af010"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/754e802274e9373ad7e1dccb710acf74ded6e7fb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIyBAABCgAdFiEEdOLe9ddyYLmLwZQ4CZutFjxw+/oFAmDJDx4ACgkQCZutFjxw\n+/p7Jg/4w04cLCG49aY3K4KkdxfGfe/Bpsm1xT6w0vq1wlbXZfUMVkLnEzprScuE\npDCtrXVyR54mh+1Xn/QyVK2CPoM05C+YIqjGKTQMe390Mg/yW0JEbPMAcH2aBs1q\n8HeDVDGiRm/iQMjqA3Db9QGoh4Rqs38KnBxW9Kv/pl8k0AcaWqvc7BKC8tZNeA1e\n71jGhZdoG6CFStpgARa03P3mJ8vw2qw3PtQpJQpLj84fxLefQeN8o0TBWBkFddQi\n3Rjo64bU7HKf30PNGqTpv3CHubXyJHKPSbGxecpZTv7bo+JXSF8sMjjx+TZYl17k\n+88u+ZxoPvuQCNR8z6tr1IczGEczOHeoe3qZ+L6wpJQIvlLnvumC7kVntU3aw4V6\nhCb1mQKYlAfjWKJXL01Wug33TaN4E9zBIrgwQ//FlBolKvsiBFazVjAiyvRErEFR\nijAh+SLRqgptw1MKkuuweze2Kz/2DATZfVv5KKu+qoByIBNXNG4OvVCEtKL0jWGQ\nm0rti+fcL4RohwoVJxEbkXYxS8TCzcAS0nQyQTmacqUJU9bCvcTKLDKm/B5jRvuf\n1BzyOXVO7HxlfWx4GH43FC1zFkr26Q/Qt1DGDJFFRdTX/vRiHVZXjSB60V2es9FX\nHbW6yTfM1K6MIVto4aBs0TyMjgHpdIIoTfJXn8ajdk9GKjSABg==\n=hLmj\n-----END PGP SIGNATURE-----",
        "payload": "tree 3ffc4a8cd070f7b8cb543eae6b25a6aee58af010\nparent 1186910b6b7ba7c7e5193c76f33f25825e6cc0b7\nauthor Luke Dashjr <luke-jr+git@utopios.org> 1578190398 +0000\ncommitter willcl-ark <will8clark@gmail.com> 1623789329 +0100\n\ntest: check rejected future block later accepted\n\n(Luke) was unsure if the code sufficiently avoided caching a\ntime-too-new rejection, so wrote this test to check it.  It looks like\ndespite only exempting BLOCK_MUTATED, it is still okay because header\nfailures never cache block invalidity.  This test will help ensure that\nif this ever changes, BLOCK_TIME_FUTURE gets excluded at the same time.\n\nCo-authored-by: Will Clark <will8clark@gmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/754e802274e9373ad7e1dccb710acf74ded6e7fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/754e802274e9373ad7e1dccb710acf74ded6e7fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/754e802274e9373ad7e1dccb710acf74ded6e7fb/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "willcl-ark",
      "id": 6606587,
      "node_id": "MDQ6VXNlcjY2MDY1ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willcl-ark",
      "html_url": "https://github.com/willcl-ark",
      "followers_url": "https://api.github.com/users/willcl-ark/followers",
      "following_url": "https://api.github.com/users/willcl-ark/following{/other_user}",
      "gists_url": "https://api.github.com/users/willcl-ark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willcl-ark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
      "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
      "repos_url": "https://api.github.com/users/willcl-ark/repos",
      "events_url": "https://api.github.com/users/willcl-ark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1186910b6b7ba7c7e5193c76f33f25825e6cc0b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1186910b6b7ba7c7e5193c76f33f25825e6cc0b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1186910b6b7ba7c7e5193c76f33f25825e6cc0b7"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 19,
      "deletions": 0
    },
    "files": [
      {
        "sha": "91666d0f0863b58f431d55fd8be6b4f23fe2ed59",
        "filename": "test/functional/p2p_invalid_block.py",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/754e802274e9373ad7e1dccb710acf74ded6e7fb/test/functional/p2p_invalid_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/754e802274e9373ad7e1dccb710acf74ded6e7fb/test/functional/p2p_invalid_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_block.py?ref=754e802274e9373ad7e1dccb710acf74ded6e7fb",
        "patch": "@@ -9,15 +9,21 @@\n 2) Invalid block with duplicated transaction should be re-requested.\n 3) Invalid block with bad coinbase value should be rejected and not\n re-requested.\n+4) Invalid block due to future timestamp is later accepted when that timestamp\n+becomes valid.\n \"\"\"\n import copy\n+import time\n \n from test_framework.blocktools import create_block, create_coinbase, create_tx_with_script\n from test_framework.messages import COIN\n from test_framework.p2p import P2PDataStore\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n \n+MAX_FUTURE_BLOCK_TIME = 2 * 60 * 60\n+\n+\n class InvalidBlockRequestTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n@@ -133,5 +139,18 @@ def run_test(self):\n         self.log.info(\"Test inflation by duplicating input\")\n         peer.send_blocks_and_test([block4], node, success=False,  reject_reason='bad-txns-inputs-duplicate')\n \n+        self.log.info(\"Test accepting identical block after rejecting it due to a future timestamp.\")\n+        t = int(time.time())\n+        node.setmocktime(t)\n+        # Set block time +1 second past max future validity\n+        block = create_block(tip, create_coinbase(height), t + MAX_FUTURE_BLOCK_TIME + 1)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        # Need force_send because the block will get rejected without a getdata otherwise\n+        peer.send_blocks_and_test([block], node, force_send=True, success=False, reject_reason='time-too-new')\n+        node.setmocktime(t + 1)\n+        peer.send_blocks_and_test([block], node, success=True)\n+\n+\n if __name__ == '__main__':\n     InvalidBlockRequestTest().main()"
      }
    ]
  }
]