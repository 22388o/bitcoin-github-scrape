[
  {
    "sha": "fad0ae6bb8e10b5cb82a5ec014e59b5aafc85b5e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWQwYWU2YmI4ZTEwYjVjYjgyYTVlYzAxNGU1OWI1YWFmYzg1YjVl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-03-08T14:40:17Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-03-08T14:23:51Z"
      },
      "message": "doc: Rename fuzz seed_dir to corpus_dir",
      "tree": {
        "sha": "ed71c9f7b1896d8d7283a85d0587d31e5b624eda",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed71c9f7b1896d8d7283a85d0587d31e5b624eda"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fad0ae6bb8e10b5cb82a5ec014e59b5aafc85b5e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgsMwv9FhKsoJR1GxdMMAZjE6hl0FkUFAbVBXRg1vI6aHmXL2jPqs+HiVhvbeHV\nGl5I93YcvfvO5+drtYnF3Pbhs0gkfXRZz8L7hPFU51V2wbVN3T7kuKwncRRuFVWK\nnpA3GqSec189NviMvP2HVEiiofmrmD+eDyAW7p+1yLDLfyFx6X0aQVJ5WCtYXvce\nq87nVUnhwTHxU5/0C3z2nQDtZM3V+s9+P1Xfp5EXrT3heAT2PNTGgpT6Kbi+OT0i\nJnicmYuO5EUgVgqmgXxtL/SBIloSJ354D34fncoPjLquANB43uMFgvlcm1Mdesn7\nxjeRl0HULxps4chCYu9ztCizfLLxnpHRs5mvpiYQ+2/K4n5GJPpQC0gscE6eNKvv\n4ryaOYnt/IUEEK+Mr/ew+A7BqA6KH6HvwTVYS4bB2c50xYJJW3Wl7ettqJV1FzB9\noinPCs9IK1KK8MaVWKnTpr9nPuIZ3mdknjBqTOGi2e74r4vK1qJi4TfLogo684CH\nKW23GA/p\n=jq/D\n-----END PGP SIGNATURE-----",
        "payload": "tree ed71c9f7b1896d8d7283a85d0587d31e5b624eda\nparent a22653a636e8dfc1b898ef8dd18a77f2d31082a5\nauthor MarcoFalke <falke.marco@gmail.com> 1615214417 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1615213431 +0100\n\ndoc: Rename fuzz seed_dir to corpus_dir\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad0ae6bb8e10b5cb82a5ec014e59b5aafc85b5e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fad0ae6bb8e10b5cb82a5ec014e59b5aafc85b5e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad0ae6bb8e10b5cb82a5ec014e59b5aafc85b5e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a22653a636e8dfc1b898ef8dd18a77f2d31082a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a22653a636e8dfc1b898ef8dd18a77f2d31082a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a22653a636e8dfc1b898ef8dd18a77f2d31082a5"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 27,
      "deletions": 27
    },
    "files": [
      {
        "sha": "eeff7a4515480d927496559f2aed385a70af8d98",
        "filename": "test/fuzz/test_runner.py",
        "status": "modified",
        "additions": 27,
        "deletions": 27,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad0ae6bb8e10b5cb82a5ec014e59b5aafc85b5e/test/fuzz/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad0ae6bb8e10b5cb82a5ec014e59b5aafc85b5e/test/fuzz/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fuzz/test_runner.py?ref=fad0ae6bb8e10b5cb82a5ec014e59b5aafc85b5e",
        "patch": "@@ -27,7 +27,7 @@ def get_fuzz_env(*, target, source_dir):\n def main():\n     parser = argparse.ArgumentParser(\n         formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n-        description='''Run the fuzz targets with all inputs from the seed_dir once.''',\n+        description='''Run the fuzz targets with all inputs from the corpus_dir once.''',\n     )\n     parser.add_argument(\n         \"-l\",\n@@ -54,8 +54,8 @@ def main():\n         help='How many targets to merge or execute in parallel.',\n     )\n     parser.add_argument(\n-        'seed_dir',\n-        help='The seed corpus to run on (must contain subfolders for each fuzz target).',\n+        'corpus_dir',\n+        help='The corpus to run on (must contain subfolders for each fuzz target).',\n     )\n     parser.add_argument(\n         'target',\n@@ -64,15 +64,15 @@ def main():\n     )\n     parser.add_argument(\n         '--m_dir',\n-        help='Merge inputs from this directory into the seed_dir.',\n+        help='Merge inputs from this directory into the corpus_dir.',\n     )\n     parser.add_argument(\n         '-g',\n         '--generate',\n         action='store_true',\n-        help='Create new corpus seeds (or extend the existing ones) by running'\n+        help='Create new corpus (or extend the existing ones) by running'\n              ' the given targets for a finite number of times. Outputs them to'\n-             ' the passed seed_dir.'\n+             ' the passed corpus_dir.'\n     )\n \n     args = parser.parse_args()\n@@ -119,19 +119,19 @@ def main():\n     logging.info(\"{} of {} detected fuzz target(s) selected: {}\".format(len(test_list_selection), len(test_list_all), \" \".join(test_list_selection)))\n \n     if not args.generate:\n-        test_list_seedless = []\n+        test_list_missing_corpus = []\n         for t in test_list_selection:\n-            corpus_path = os.path.join(args.seed_dir, t)\n+            corpus_path = os.path.join(args.corpus_dir, t)\n             if not os.path.exists(corpus_path) or len(os.listdir(corpus_path)) == 0:\n-                test_list_seedless.append(t)\n-        test_list_seedless.sort()\n-        if test_list_seedless:\n+                test_list_missing_corpus.append(t)\n+        test_list_missing_corpus.sort()\n+        if test_list_missing_corpus:\n             logging.info(\n-                \"Fuzzing harnesses lacking a seed corpus: {}\".format(\n-                    \" \".join(test_list_seedless)\n+                \"Fuzzing harnesses lacking a corpus: {}\".format(\n+                    \" \".join(test_list_missing_corpus)\n                 )\n             )\n-            logging.info(\"Please consider adding a fuzz seed corpus at https://github.com/bitcoin-core/qa-assets\")\n+            logging.info(\"Please consider adding a fuzz corpus at https://github.com/bitcoin-core/qa-assets\")\n \n     try:\n         help_output = subprocess.run(\n@@ -154,18 +154,18 @@ def main():\n \n     with ThreadPoolExecutor(max_workers=args.par) as fuzz_pool:\n         if args.generate:\n-            return generate_corpus_seeds(\n+            return generate_corpus(\n                 fuzz_pool=fuzz_pool,\n                 src_dir=config['environment']['SRCDIR'],\n                 build_dir=config[\"environment\"][\"BUILDDIR\"],\n-                seed_dir=args.seed_dir,\n+                corpus_dir=args.corpus_dir,\n                 targets=test_list_selection,\n             )\n \n         if args.m_dir:\n             merge_inputs(\n                 fuzz_pool=fuzz_pool,\n-                corpus=args.seed_dir,\n+                corpus=args.corpus_dir,\n                 test_list=test_list_selection,\n                 src_dir=config['environment']['SRCDIR'],\n                 build_dir=config[\"environment\"][\"BUILDDIR\"],\n@@ -175,21 +175,21 @@ def main():\n \n         run_once(\n             fuzz_pool=fuzz_pool,\n-            corpus=args.seed_dir,\n+            corpus=args.corpus_dir,\n             test_list=test_list_selection,\n             src_dir=config['environment']['SRCDIR'],\n             build_dir=config[\"environment\"][\"BUILDDIR\"],\n             use_valgrind=args.valgrind,\n         )\n \n \n-def generate_corpus_seeds(*, fuzz_pool, src_dir, build_dir, seed_dir, targets):\n-    \"\"\"Generates new corpus seeds.\n+def generate_corpus(*, fuzz_pool, src_dir, build_dir, corpus_dir, targets):\n+    \"\"\"Generates new corpus.\n \n-    Run {targets} without input, and outputs the generated corpus seeds to\n-    {seed_dir}.\n+    Run {targets} without input, and outputs the generated corpus to\n+    {corpus_dir}.\n     \"\"\"\n-    logging.info(\"Generating corpus seeds to {}\".format(seed_dir))\n+    logging.info(\"Generating corpus to {}\".format(corpus_dir))\n \n     def job(command, t):\n         logging.debug(\"Running '{}'\\n\".format(\" \".join(command)))\n@@ -205,12 +205,12 @@ def job(command, t):\n \n     futures = []\n     for target in targets:\n-        target_seed_dir = os.path.join(seed_dir, target)\n-        os.makedirs(target_seed_dir, exist_ok=True)\n+        target_corpus_dir = os.path.join(corpus_dir, target)\n+        os.makedirs(target_corpus_dir, exist_ok=True)\n         command = [\n             os.path.join(build_dir, 'src', 'test', 'fuzz', 'fuzz'),\n             \"-runs=100000\",\n-            target_seed_dir,\n+            target_corpus_dir,\n         ]\n         futures.append(fuzz_pool.submit(job, command, target))\n \n@@ -219,7 +219,7 @@ def job(command, t):\n \n \n def merge_inputs(*, fuzz_pool, corpus, test_list, src_dir, build_dir, merge_dir):\n-    logging.info(\"Merge the inputs from the passed dir into the seed_dir. Passed dir {}\".format(merge_dir))\n+    logging.info(\"Merge the inputs from the passed dir into the corpus_dir. Passed dir {}\".format(merge_dir))\n     jobs = []\n     for t in test_list:\n         args = ["
      }
    ]
  }
]