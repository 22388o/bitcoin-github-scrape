[
  {
    "sha": "d29ec6c2301e593d577126d1ca85b93307b32bf1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMjllYzZjMjMwMWU1OTNkNTc3MTI2ZDFjYTg1YjkzMzA3YjMyYmYx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-14T11:59:05Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-15T05:30:23Z"
      },
      "message": "qt: define QT_NO_KEYWORDS\n\nQT_NO_KEYWORDS prevents Qt from defining the `foreach`, `signals`,\n`slots` and `emit` macros.\n\nAvoid overlap between Qt macros and boost - for example #undef hackiness\nin #6421.",
      "tree": {
        "sha": "4e9690da4c97a9da761147c834412b3057439728",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e9690da4c97a9da761147c834412b3057439728"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d29ec6c2301e593d577126d1ca85b93307b32bf1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d29ec6c2301e593d577126d1ca85b93307b32bf1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d29ec6c2301e593d577126d1ca85b93307b32bf1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d29ec6c2301e593d577126d1ca85b93307b32bf1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd5dfda9396968346edcf1f5ddf946d63e797554",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd5dfda9396968346edcf1f5ddf946d63e797554",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd5dfda9396968346edcf1f5ddf946d63e797554"
      }
    ],
    "stats": {
      "total": 368,
      "additions": 184,
      "deletions": 184
    },
    "files": [
      {
        "sha": "2ec3468e060de5fc59cd93031dfd25cc14b40ec5",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -322,7 +322,7 @@ RES_MOVIES = $(wildcard qt/res/movies/spinner-*.png)\n BITCOIN_RC = qt/res/bitcoin-qt-res.rc\n \n BITCOIN_QT_INCLUDES = -I$(builddir)/qt -I$(srcdir)/qt -I$(srcdir)/qt/forms \\\n-  -I$(builddir)/qt/forms\n+  -I$(builddir)/qt/forms -DQT_NO_KEYWORDS\n \n qt_libbitcoinqt_a_CPPFLAGS = $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\\n   $(QT_INCLUDES) $(QT_DBUS_INCLUDES) $(PROTOBUF_CFLAGS) $(QR_CFLAGS)"
      },
      {
        "sha": "af6801919c5643b6993a8605f6ad6e99310e54cf",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -254,7 +254,7 @@ void AddressBookPage::done(int retval)\n     // Figure out which address was selected, and return it\n     QModelIndexList indexes = table->selectionModel()->selectedRows(AddressTableModel::Address);\n \n-    foreach (const QModelIndex& index, indexes) {\n+    Q_FOREACH (const QModelIndex& index, indexes) {\n         QVariant address = table->model()->data(index);\n         returnValue = address.toString();\n     }"
      },
      {
        "sha": "09634ce336623214c02a64901ca840b56cdbb4e5",
        "filename": "src/qt/addressbookpage.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/addressbookpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/addressbookpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -45,7 +45,7 @@ class AddressBookPage : public QDialog\n     void setModel(AddressTableModel *model);\n     const QString &getReturnValue() const { return returnValue; }\n \n-public slots:\n+public Q_SLOTS:\n     void done(int retval);\n \n private:\n@@ -59,7 +59,7 @@ public slots:\n     QAction *deleteAction; // to be able to explicitly disable it\n     QString newAddressToSelect;\n \n-private slots:\n+private Q_SLOTS:\n     /** Delete currently selected address entry */\n     void on_deleteAddress_clicked();\n     /** Create a new address for receiving coins and / or add a new address book entry */\n@@ -80,7 +80,7 @@ private slots:\n     /** New entry/entries were added to address table */\n     void selectNewAddress(const QModelIndex &parent, int begin, int /*end*/);\n \n-signals:\n+Q_SIGNALS:\n     void sendCoins(QString addr);\n };\n "
      },
      {
        "sha": "c5ac07cfc29626f808f71afba38fbc037a6a3267",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -450,5 +450,5 @@ int AddressTableModel::lookupAddress(const QString &address) const\n \n void AddressTableModel::emitDataChanged(int idx)\n {\n-    emit dataChanged(index(idx, 0, QModelIndex()), index(idx, columns.length()-1, QModelIndex()));\n+    Q_EMIT dataChanged(index(idx, 0, QModelIndex()), index(idx, columns.length()-1, QModelIndex()));\n }"
      },
      {
        "sha": "2b7475c4e2997ed31803a47bef6074d498543729",
        "filename": "src/qt/addresstablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/addresstablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/addresstablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -84,7 +84,7 @@ class AddressTableModel : public QAbstractTableModel\n     /** Notify listeners that data changed. */\n     void emitDataChanged(int index);\n \n-public slots:\n+public Q_SLOTS:\n     /* Update address list from core.\n      */\n     void updateEntry(const QString &address, const QString &label, bool isMine, const QString &purpose, int status);"
      },
      {
        "sha": "d4d832825a38211d1acecb234cd47da88d90ddfa",
        "filename": "src/qt/askpassphrasedialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/askpassphrasedialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/askpassphrasedialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/askpassphrasedialog.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -40,7 +40,7 @@ class AskPassphraseDialog : public QDialog\n     WalletModel *model;\n     bool fCapsLock;\n \n-private slots:\n+private Q_SLOTS:\n     void textChanged();\n \n protected:"
      },
      {
        "sha": "ec02c4be9f8f7874f0f99eeb81e78a2e5b96daaa",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -169,11 +169,11 @@ class BitcoinCore: public QObject\n public:\n     explicit BitcoinCore();\n \n-public slots:\n+public Q_SLOTS:\n     void initialize();\n     void shutdown();\n \n-signals:\n+Q_SIGNALS:\n     void initializeResult(int retval);\n     void shutdownResult(int retval);\n     void runawayException(const QString &message);\n@@ -216,13 +216,13 @@ class BitcoinApplication: public QApplication\n     /// Get window identifier of QMainWindow (BitcoinGUI)\n     WId getMainWinId() const;\n \n-public slots:\n+public Q_SLOTS:\n     void initializeResult(int retval);\n     void shutdownResult(int retval);\n     /// Handle runaway exceptions. Shows a message box with the problem and quits the program.\n     void handleRunawayException(const QString &message);\n \n-signals:\n+Q_SIGNALS:\n     void requestedInitialize();\n     void requestedShutdown();\n     void stopThread();\n@@ -253,7 +253,7 @@ BitcoinCore::BitcoinCore():\n void BitcoinCore::handleRunawayException(const std::exception *e)\n {\n     PrintExceptionContinue(e, \"Runaway exception\");\n-    emit runawayException(QString::fromStdString(strMiscWarning));\n+    Q_EMIT runawayException(QString::fromStdString(strMiscWarning));\n }\n \n void BitcoinCore::initialize()\n@@ -269,7 +269,7 @@ void BitcoinCore::initialize()\n              */\n             StartDummyRPCThread();\n         }\n-        emit initializeResult(rv);\n+        Q_EMIT initializeResult(rv);\n     } catch (const std::exception& e) {\n         handleRunawayException(&e);\n     } catch (...) {\n@@ -286,7 +286,7 @@ void BitcoinCore::shutdown()\n         threadGroup.join_all();\n         Shutdown();\n         qDebug() << __func__ << \": Shutdown finished\";\n-        emit shutdownResult(1);\n+        Q_EMIT shutdownResult(1);\n     } catch (const std::exception& e) {\n         handleRunawayException(&e);\n     } catch (...) {\n@@ -315,7 +315,7 @@ BitcoinApplication::~BitcoinApplication()\n     if(coreThread)\n     {\n         qDebug() << __func__ << \": Stopping thread\";\n-        emit stopThread();\n+        Q_EMIT stopThread();\n         coreThread->wait();\n         qDebug() << __func__ << \": Stopped thread\";\n     }\n@@ -386,7 +386,7 @@ void BitcoinApplication::requestInitialize()\n {\n     qDebug() << __func__ << \": Requesting initialize\";\n     startThread();\n-    emit requestedInitialize();\n+    Q_EMIT requestedInitialize();\n }\n \n void BitcoinApplication::requestShutdown()\n@@ -409,7 +409,7 @@ void BitcoinApplication::requestShutdown()\n     ShutdownWindow::showShutdownWindow(window);\n \n     // Request shutdown from core thread\n-    emit requestedShutdown();\n+    Q_EMIT requestedShutdown();\n }\n \n void BitcoinApplication::initializeResult(int retval)\n@@ -449,7 +449,7 @@ void BitcoinApplication::initializeResult(int retval)\n         {\n             window->show();\n         }\n-        emit splashFinished(window);\n+        Q_EMIT splashFinished(window);\n \n #ifdef ENABLE_WALLET\n         // Now that initialization/startup is done, process any command-line"
      },
      {
        "sha": "d19b9fd4afa6433b7448dd8a02484591d4fd5273",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -61,7 +61,7 @@ class AmountSpinBox: public QAbstractSpinBox\n     void setValue(const CAmount& value)\n     {\n         lineEdit()->setText(BitcoinUnits::format(currentUnit, value, false, BitcoinUnits::separatorAlways));\n-        emit valueChanged();\n+        Q_EMIT valueChanged();\n     }\n \n     void stepBy(int steps)\n@@ -184,7 +184,7 @@ class AmountSpinBox: public QAbstractSpinBox\n         return rv;\n     }\n \n-signals:\n+Q_SIGNALS:\n     void valueChanged();\n };\n "
      },
      {
        "sha": "3703b1f8d7364a878e46a3220531c3eefcda1010",
        "filename": "src/qt/bitcoinamountfield.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/bitcoinamountfield.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/bitcoinamountfield.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -56,7 +56,7 @@ class BitcoinAmountField: public QWidget\n     */\n     QWidget *setupTabChain(QWidget *prev);\n \n-signals:\n+Q_SIGNALS:\n     void valueChanged();\n \n protected:\n@@ -67,7 +67,7 @@ class BitcoinAmountField: public QWidget\n     AmountSpinBox *amount;\n     QValueComboBox *unit;\n \n-private slots:\n+private Q_SLOTS:\n     void unitChanged(int idx);\n \n };"
      },
      {
        "sha": "396435f12b1bb30329d2b937f48a1c8109af9c1b",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -600,7 +600,7 @@ void BitcoinGUI::openClicked()\n     OpenURIDialog dlg(this);\n     if(dlg.exec())\n     {\n-        emit receivedURI(dlg.getURI());\n+        Q_EMIT receivedURI(dlg.getURI());\n     }\n }\n \n@@ -886,9 +886,9 @@ void BitcoinGUI::dropEvent(QDropEvent *event)\n {\n     if(event->mimeData()->hasUrls())\n     {\n-        foreach(const QUrl &uri, event->mimeData()->urls())\n+        Q_FOREACH(const QUrl &uri, event->mimeData()->urls())\n         {\n-            emit receivedURI(uri.toString());\n+            Q_EMIT receivedURI(uri.toString());\n         }\n     }\n     event->acceptProposedAction();\n@@ -1050,7 +1050,7 @@ UnitDisplayStatusBarControl::UnitDisplayStatusBarControl() :\n     QList<BitcoinUnits::Unit> units = BitcoinUnits::availableUnits();\n     int max_width = 0;\n     const QFontMetrics fm(font());\n-    foreach (const BitcoinUnits::Unit unit, units)\n+    Q_FOREACH (const BitcoinUnits::Unit unit, units)\n     {\n         max_width = qMax(max_width, fm.width(BitcoinUnits::name(unit)));\n     }\n@@ -1069,7 +1069,7 @@ void UnitDisplayStatusBarControl::mousePressEvent(QMouseEvent *event)\n void UnitDisplayStatusBarControl::createContextMenu()\n {\n     menu = new QMenu();\n-    foreach(BitcoinUnits::Unit u, BitcoinUnits::availableUnits())\n+    Q_FOREACH(BitcoinUnits::Unit u, BitcoinUnits::availableUnits())\n     {\n         QAction *menuAction = new QAction(QString(BitcoinUnits::name(u)), this);\n         menuAction->setData(QVariant(u));"
      },
      {
        "sha": "4e50b1712a0965ea75010edab95db46c07c938ff",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -136,11 +136,11 @@ class BitcoinGUI : public QMainWindow\n     /** Disconnect core signals from GUI client */\n     void unsubscribeFromCoreSignals();\n \n-signals:\n+Q_SIGNALS:\n     /** Signal raised when a URI was entered or dragged to the GUI */\n     void receivedURI(const QString &uri);\n \n-public slots:\n+public Q_SLOTS:\n     /** Set number of connections shown in the UI */\n     void setNumConnections(int count);\n     /** Set number of blocks and last block date shown in the UI */\n@@ -168,7 +168,7 @@ public slots:\n     void incomingTransaction(const QString& date, int unit, const CAmount& amount, const QString& type, const QString& address, const QString& label);\n #endif // ENABLE_WALLET\n \n-private slots:\n+private Q_SLOTS:\n #ifdef ENABLE_WALLET\n     /** Switch to overview (home) page */\n     void gotoOverviewPage();\n@@ -232,7 +232,7 @@ class UnitDisplayStatusBarControl : public QLabel\n     /** Creates context menu, its actions, and wires up all the relevant signals for mouse events. */\n     void createContextMenu();\n \n-private slots:\n+private Q_SLOTS:\n     /** When Display Units are changed on OptionsModel it will refresh the display text of the control on the status bar */\n     void updateDisplayUnit(int newUnits);\n     /** Tells underlying optionsModel to update its current display unit. */"
      },
      {
        "sha": "92a9ef279df2aab4291828d595f1422e3890f340",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -117,15 +117,15 @@ void ClientModel::updateTimer()\n         cachedReindexing = fReindex;\n         cachedImporting = fImporting;\n \n-        emit numBlocksChanged(newNumBlocks, newBlockDate);\n+        Q_EMIT numBlocksChanged(newNumBlocks, newBlockDate);\n     }\n \n-    emit bytesChanged(getTotalBytesRecv(), getTotalBytesSent());\n+    Q_EMIT bytesChanged(getTotalBytesRecv(), getTotalBytesSent());\n }\n \n void ClientModel::updateNumConnections(int numConnections)\n {\n-    emit numConnectionsChanged(numConnections);\n+    Q_EMIT numConnectionsChanged(numConnections);\n }\n \n void ClientModel::updateAlert(const QString &hash, int status)\n@@ -138,11 +138,11 @@ void ClientModel::updateAlert(const QString &hash, int status)\n         CAlert alert = CAlert::getAlertByHash(hash_256);\n         if(!alert.IsNull())\n         {\n-            emit message(tr(\"Network Alert\"), QString::fromStdString(alert.strStatusBar), CClientUIInterface::ICON_ERROR);\n+            Q_EMIT message(tr(\"Network Alert\"), QString::fromStdString(alert.strStatusBar), CClientUIInterface::ICON_ERROR);\n         }\n     }\n \n-    emit alertsChanged(getStatusBarWarnings());\n+    Q_EMIT alertsChanged(getStatusBarWarnings());\n }\n \n bool ClientModel::inInitialBlockDownload() const"
      },
      {
        "sha": "68434f404c39cfef67e9ff0ebcea5ca05c9e82ed",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -82,7 +82,7 @@ class ClientModel : public QObject\n     void subscribeToCoreSignals();\n     void unsubscribeFromCoreSignals();\n \n-signals:\n+Q_SIGNALS:\n     void numConnectionsChanged(int count);\n     void numBlocksChanged(int count, const QDateTime& blockDate);\n     void alertsChanged(const QString &warnings);\n@@ -94,7 +94,7 @@ class ClientModel : public QObject\n     // Show progress dialog e.g. for verifychain\n     void showProgress(const QString &title, int nProgress);\n \n-public slots:\n+public Q_SLOTS:\n     void updateTimer();\n     void updateNumConnections(int numConnections);\n     void updateAlert(const QString &hash, int status);"
      },
      {
        "sha": "cb888a07c4fe62e9ccfec943c2d5760b9042abd2",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -461,7 +461,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     CAmount nPayAmount = 0;\n     bool fDust = false;\n     CMutableTransaction txDummy;\n-    foreach(const CAmount &amount, CoinControlDialog::payAmounts)\n+    Q_FOREACH(const CAmount &amount, CoinControlDialog::payAmounts)\n     {\n         nPayAmount += amount;\n "
      },
      {
        "sha": "0566b02c965a9b7f905dd60eccc9a1299425bf2e",
        "filename": "src/qt/coincontroldialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/coincontroldialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/coincontroldialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -102,7 +102,7 @@ class CoinControlDialog : public QDialog\n         return column;\n     }\n \n-private slots:\n+private Q_SLOTS:\n     void showMenu(const QPoint &);\n     void copyAmount();\n     void copyLabel();"
      },
      {
        "sha": "d59fce2d41c13e940871d687aa2edc6f174911e7",
        "filename": "src/qt/editaddressdialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/editaddressdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/editaddressdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/editaddressdialog.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -40,7 +40,7 @@ class EditAddressDialog : public QDialog\n     QString getAddress() const;\n     void setAddress(const QString &address);\n \n-public slots:\n+public Q_SLOTS:\n     void accept();\n \n private:"
      },
      {
        "sha": "0ac3db6327ce1fc98ba0407ecba5b388a7803d78",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -169,7 +169,7 @@ namespace GUIUtil\n             void setViewHeaderResizeMode(int logicalIndex, QHeaderView::ResizeMode resizeMode);\n             void resizeColumn(int nColumnIndex, int width);\n \n-        private slots:\n+        private Q_SLOTS:\n             void on_sectionResized(int logicalIndex, int oldSize, int newSize);\n             void on_geometriesChanged();\n     };"
      },
      {
        "sha": "117969758c4617582990077eff8c6bc5388c6fce",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -42,10 +42,10 @@ class FreespaceChecker : public QObject\n         ST_ERROR\n     };\n \n-public slots:\n+public Q_SLOTS:\n     void check();\n \n-signals:\n+Q_SIGNALS:\n     void reply(int status, const QString &message, quint64 available);\n \n private:\n@@ -102,7 +102,7 @@ void FreespaceChecker::check()\n         replyStatus = ST_ERROR;\n         replyMessage = tr(\"Cannot create data directory here.\");\n     }\n-    emit reply(replyStatus, replyMessage, freeBytesAvailable);\n+    Q_EMIT reply(replyStatus, replyMessage, freeBytesAvailable);\n }\n \n \n@@ -121,7 +121,7 @@ Intro::~Intro()\n {\n     delete ui;\n     /* Ensure thread is finished before it is deleted */\n-    emit stopThread();\n+    Q_EMIT stopThread();\n     thread->wait();\n }\n \n@@ -277,7 +277,7 @@ void Intro::checkPath(const QString &dataDir)\n     if(!signalled)\n     {\n         signalled = true;\n-        emit requestCheck();\n+        Q_EMIT requestCheck();\n     }\n     mutex.unlock();\n }"
      },
      {
        "sha": "50783f7225c1f51c4e67ed3a835486fbb4e5aa3f",
        "filename": "src/qt/intro.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/intro.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/intro.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -43,14 +43,14 @@ class Intro : public QDialog\n      */\n     static QString getDefaultDataDirectory();\n \n-signals:\n+Q_SIGNALS:\n     void requestCheck();\n     void stopThread();\n \n-public slots:\n+public Q_SLOTS:\n     void setStatus(int status, const QString &message, quint64 bytesAvailable);\n \n-private slots:\n+private Q_SLOTS:\n     void on_dataDirectory_textChanged(const QString &arg1);\n     void on_ellipsisButton_clicked();\n     void on_dataDirDefault_clicked();"
      },
      {
        "sha": "8bd867c1034ba471ff5b23b71c74b4937c72bb02",
        "filename": "src/qt/macdockiconhandler.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/macdockiconhandler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/macdockiconhandler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/macdockiconhandler.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -30,7 +30,7 @@ class MacDockIconHandler : public QObject\n     static void cleanup();\n     void handleDockIconClickEvent();\n \n-signals:\n+Q_SIGNALS:\n     void dockIconClicked();\n \n private:"
      },
      {
        "sha": "f2a15e9c346bb050687704d4a8ad2d28de6d6a49",
        "filename": "src/qt/notificator.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/notificator.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/notificator.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/notificator.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -40,7 +40,7 @@ class Notificator: public QObject\n         Critical        /**< An error occurred */\n     };\n \n-public slots:\n+public Q_SLOTS:\n     /** Show notification message.\n        @param[in] cls    general message class\n        @param[in] title  title shown with message"
      },
      {
        "sha": "28b8f56ca6f0f1597ed45b9b038e850b0250bffa",
        "filename": "src/qt/openuridialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/openuridialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/openuridialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/openuridialog.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -21,10 +21,10 @@ class OpenURIDialog : public QDialog\n \n     QString getURI();\n \n-protected slots:\n+protected Q_SLOTS:\n     void accept();\n \n-private slots:\n+private Q_SLOTS:\n     void on_selectFileButton_clicked();\n \n private:"
      },
      {
        "sha": "173bed3b6250bb008f2440f0d10342dac752fd85",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -73,7 +73,7 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     /* Display elements init */\n     QDir translations(\":translations\");\n     ui->lang->addItem(QString(\"(\") + tr(\"default\") + QString(\")\"), QVariant(\"\"));\n-    foreach(const QString &langStr, translations.entryList())\n+    Q_FOREACH(const QString &langStr, translations.entryList())\n     {\n         QLocale locale(langStr);\n \n@@ -281,7 +281,7 @@ bool OptionsDialog::eventFilter(QObject *object, QEvent *event)\n     {\n         if(object == ui->proxyIp)\n         {\n-            emit proxyIpChecks(ui->proxyIp, ui->proxyPort->text().toInt());\n+            Q_EMIT proxyIpChecks(ui->proxyIp, ui->proxyPort->text().toInt());\n         }\n     }\n     return QDialog::eventFilter(object, event);"
      },
      {
        "sha": "fa983e798cce7cf740e77889ded05c105c7f7ef3",
        "filename": "src/qt/optionsdialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/optionsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/optionsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -33,7 +33,7 @@ class OptionsDialog : public QDialog\n protected:\n     bool eventFilter(QObject *object, QEvent *event);\n \n-private slots:\n+private Q_SLOTS:\n     /* enable OK button */\n     void enableOkButton();\n     /* disable OK button */\n@@ -48,7 +48,7 @@ private slots:\n     void clearStatusLabel();\n     void doProxyIpChecks(QValidatedLineEdit *pUiProxyIp, int nProxyPort);\n \n-signals:\n+Q_SIGNALS:\n     void proxyIpChecks(QValidatedLineEdit *pUiProxyIp, int nProxyPort);\n \n private:"
      },
      {
        "sha": "b4ce8191d0f523f316b2ddbcee6bfba7f4db31a1",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -286,7 +286,7 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n         case CoinControlFeatures:\n             fCoinControlFeatures = value.toBool();\n             settings.setValue(\"fCoinControlFeatures\", fCoinControlFeatures);\n-            emit coinControlFeaturesChanged(fCoinControlFeatures);\n+            Q_EMIT coinControlFeaturesChanged(fCoinControlFeatures);\n             break;\n         case DatabaseCache:\n             if (settings.value(\"nDatabaseCache\") != value) {\n@@ -311,7 +311,7 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n         }\n     }\n \n-    emit dataChanged(index, index);\n+    Q_EMIT dataChanged(index, index);\n \n     return successful;\n }\n@@ -324,7 +324,7 @@ void OptionsModel::setDisplayUnit(const QVariant &value)\n         QSettings settings;\n         nDisplayUnit = value.toInt();\n         settings.setValue(\"nDisplayUnit\", nDisplayUnit);\n-        emit displayUnitChanged(nDisplayUnit);\n+        Q_EMIT displayUnitChanged(nDisplayUnit);\n     }\n }\n "
      },
      {
        "sha": "fc26d65b04773b497f06eb32f3090c25198de785",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -81,7 +81,7 @@ class OptionsModel : public QAbstractListModel\n     /// Add option to list of GUI options overridden through command line/config file\n     void addOverriddenOption(const std::string &option);\n \n-signals:\n+Q_SIGNALS:\n     void displayUnitChanged(int unit);\n     void coinControlFeaturesChanged(bool);\n };"
      },
      {
        "sha": "bbd95ef4789c08612bb925b96c722590af535f53",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -142,7 +142,7 @@ OverviewPage::OverviewPage(QWidget *parent) :\n void OverviewPage::handleTransactionClicked(const QModelIndex &index)\n {\n     if(filter)\n-        emit transactionClicked(filter->mapToSource(index));\n+        Q_EMIT transactionClicked(filter->mapToSource(index));\n }\n \n OverviewPage::~OverviewPage()"
      },
      {
        "sha": "de5ac345dadc3aaada272c71c13a6c6ec1b8b165",
        "filename": "src/qt/overviewpage.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/overviewpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/overviewpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -35,11 +35,11 @@ class OverviewPage : public QWidget\n     void setWalletModel(WalletModel *walletModel);\n     void showOutOfSyncWarning(bool fShow);\n \n-public slots:\n+public Q_SLOTS:\n     void setBalance(const CAmount& balance, const CAmount& unconfirmedBalance, const CAmount& immatureBalance,\n                     const CAmount& watchOnlyBalance, const CAmount& watchUnconfBalance, const CAmount& watchImmatureBalance);\n \n-signals:\n+Q_SIGNALS:\n     void transactionClicked(const QModelIndex &index);\n \n private:\n@@ -56,7 +56,7 @@ public slots:\n     TxViewDelegate *txdelegate;\n     TransactionFilterProxy *filter;\n \n-private slots:\n+private Q_SLOTS:\n     void updateDisplayUnit();\n     void handleTransactionClicked(const QModelIndex &index);\n     void updateAlerts(const QString &warnings);"
      },
      {
        "sha": "654292903b6ec6185aa67e0cfffb31047bb97032",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 29,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -148,7 +148,7 @@ void PaymentServer::LoadRootCAs(X509_STORE* _store)\n     int nRootCerts = 0;\n     const QDateTime currentTime = QDateTime::currentDateTime();\n \n-    foreach (const QSslCertificate& cert, certList) {\n+    Q_FOREACH (const QSslCertificate& cert, certList) {\n         // Don't log NULL certificates\n         if (cert.isNull())\n             continue;\n@@ -201,7 +201,7 @@ void PaymentServer::LoadRootCAs(X509_STORE* _store)\n // when uiReady() is called.\n //\n // Warning: ipcSendCommandLine() is called early in init,\n-// so don't use \"emit message()\", but \"QMessageBox::\"!\n+// so don't use \"Q_EMIT message()\", but \"QMessageBox::\"!\n //\n void PaymentServer::ipcParseCommandLine(int argc, char* argv[])\n {\n@@ -269,7 +269,7 @@ void PaymentServer::ipcParseCommandLine(int argc, char* argv[])\n bool PaymentServer::ipcSendCommandLine()\n {\n     bool fResult = false;\n-    foreach (const QString& r, savedPaymentRequests)\n+    Q_FOREACH (const QString& r, savedPaymentRequests)\n     {\n         QLocalSocket* socket = new QLocalSocket();\n         socket->connectToServer(ipcServerName(), QIODevice::WriteOnly);\n@@ -326,7 +326,7 @@ PaymentServer::PaymentServer(QObject* parent, bool startLocalServer) :\n         uriServer = new QLocalServer(this);\n \n         if (!uriServer->listen(name)) {\n-            // constructor is called early in init, so don't use \"emit message()\" here\n+            // constructor is called early in init, so don't use \"Q_EMIT message()\" here\n             QMessageBox::critical(0, tr(\"Payment request error\"),\n                 tr(\"Cannot start bitcoin: click-to-pay handler\"));\n         }\n@@ -394,7 +394,7 @@ void PaymentServer::uiReady()\n     initNetManager();\n \n     saveURIs = false;\n-    foreach (const QString& s, savedPaymentRequests)\n+    Q_FOREACH (const QString& s, savedPaymentRequests)\n     {\n         handleURIOrFile(s);\n     }\n@@ -431,7 +431,7 @@ void PaymentServer::handleURIOrFile(const QString& s)\n             else\n             {\n                 qWarning() << \"PaymentServer::handleURIOrFile: Invalid URL: \" << fetchUrl;\n-                emit message(tr(\"URI handling\"),\n+                Q_EMIT message(tr(\"URI handling\"),\n                     tr(\"Payment request fetch URL is invalid: %1\").arg(fetchUrl.toString()),\n                     CClientUIInterface::ICON_WARNING);\n             }\n@@ -445,14 +445,14 @@ void PaymentServer::handleURIOrFile(const QString& s)\n             {\n                 CBitcoinAddress address(recipient.address.toStdString());\n                 if (!address.IsValid()) {\n-                    emit message(tr(\"URI handling\"), tr(\"Invalid payment address %1\").arg(recipient.address),\n+                    Q_EMIT message(tr(\"URI handling\"), tr(\"Invalid payment address %1\").arg(recipient.address),\n                         CClientUIInterface::MSG_ERROR);\n                 }\n                 else\n-                    emit receivedPaymentRequest(recipient);\n+                    Q_EMIT receivedPaymentRequest(recipient);\n             }\n             else\n-                emit message(tr(\"URI handling\"),\n+                Q_EMIT message(tr(\"URI handling\"),\n                     tr(\"URI cannot be parsed! This can be caused by an invalid Bitcoin address or malformed URI parameters.\"),\n                     CClientUIInterface::ICON_WARNING);\n \n@@ -466,12 +466,12 @@ void PaymentServer::handleURIOrFile(const QString& s)\n         SendCoinsRecipient recipient;\n         if (!readPaymentRequestFromFile(s, request))\n         {\n-            emit message(tr(\"Payment request file handling\"),\n+            Q_EMIT message(tr(\"Payment request file handling\"),\n                 tr(\"Payment request file cannot be read! This can be caused by an invalid payment request file.\"),\n                 CClientUIInterface::ICON_WARNING);\n         }\n         else if (processPaymentRequest(request, recipient))\n-            emit receivedPaymentRequest(recipient);\n+            Q_EMIT receivedPaymentRequest(recipient);\n \n         return;\n     }\n@@ -500,7 +500,7 @@ void PaymentServer::handleURIConnection()\n \n //\n // Warning: readPaymentRequestFromFile() is used in ipcSendCommandLine()\n-// so don't use \"emit message()\", but \"QMessageBox::\"!\n+// so don't use \"Q_EMIT message()\", but \"QMessageBox::\"!\n //\n bool PaymentServer::readPaymentRequestFromFile(const QString& filename, PaymentRequestPlus& request)\n {\n@@ -533,7 +533,7 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n     if (request.IsInitialized()) {\n         // Payment request network matches client network?\n         if (!verifyNetwork(request.getDetails())) {\n-            emit message(tr(\"Payment request rejected\"), tr(\"Payment request network doesn't match client network.\"),\n+            Q_EMIT message(tr(\"Payment request rejected\"), tr(\"Payment request network doesn't match client network.\"),\n                 CClientUIInterface::MSG_ERROR);\n \n             return false;\n@@ -542,13 +542,13 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n         // Make sure any payment requests involved are still valid.\n         // This is re-checked just before sending coins in WalletModel::sendCoins().\n         if (verifyExpired(request.getDetails())) {\n-            emit message(tr(\"Payment request rejected\"), tr(\"Payment request expired.\"),\n+            Q_EMIT message(tr(\"Payment request rejected\"), tr(\"Payment request expired.\"),\n                 CClientUIInterface::MSG_ERROR);\n \n             return false;\n         }\n     } else {\n-        emit message(tr(\"Payment request error\"), tr(\"Payment request is not initialized.\"),\n+        Q_EMIT message(tr(\"Payment request error\"), tr(\"Payment request is not initialized.\"),\n             CClientUIInterface::MSG_ERROR);\n \n         return false;\n@@ -562,7 +562,7 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n     QList<std::pair<CScript, CAmount> > sendingTos = request.getPayTo();\n     QStringList addresses;\n \n-    foreach(const PAIRTYPE(CScript, CAmount)& sendingTo, sendingTos) {\n+    Q_FOREACH(const PAIRTYPE(CScript, CAmount)& sendingTo, sendingTos) {\n         // Extract and check destination addresses\n         CTxDestination dest;\n         if (ExtractDestination(sendingTo.first, dest)) {\n@@ -573,7 +573,7 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n             // Unauthenticated payment requests to custom bitcoin addresses are not supported\n             // (there is no good way to tell the user where they are paying in a way they'd\n             // have a chance of understanding).\n-            emit message(tr(\"Payment request rejected\"),\n+            Q_EMIT message(tr(\"Payment request rejected\"),\n                 tr(\"Unverified payment requests to custom payment scripts are unsupported.\"),\n                 CClientUIInterface::MSG_ERROR);\n             return false;\n@@ -583,14 +583,14 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n         // but CAmount is defined as int64_t. Because of that we need to verify that amounts are in a valid range\n         // and no overflow has happened.\n         if (!verifyAmount(sendingTo.second)) {\n-            emit message(tr(\"Payment request rejected\"), tr(\"Invalid payment request.\"), CClientUIInterface::MSG_ERROR);\n+            Q_EMIT message(tr(\"Payment request rejected\"), tr(\"Invalid payment request.\"), CClientUIInterface::MSG_ERROR);\n             return false;\n         }\n \n         // Extract and check amounts\n         CTxOut txOut(sendingTo.second, sendingTo.first);\n         if (txOut.IsDust(::minRelayTxFee)) {\n-            emit message(tr(\"Payment request error\"), tr(\"Requested payment amount of %1 is too small (considered dust).\")\n+            Q_EMIT message(tr(\"Payment request error\"), tr(\"Requested payment amount of %1 is too small (considered dust).\")\n                 .arg(BitcoinUnits::formatWithUnit(optionsModel->getDisplayUnit(), sendingTo.second)),\n                 CClientUIInterface::MSG_ERROR);\n \n@@ -600,7 +600,7 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n         recipient.amount += sendingTo.second;\n         // Also verify that the final amount is still in a valid range after adding additional amounts.\n         if (!verifyAmount(recipient.amount)) {\n-            emit message(tr(\"Payment request rejected\"), tr(\"Invalid payment request.\"), CClientUIInterface::MSG_ERROR);\n+            Q_EMIT message(tr(\"Payment request rejected\"), tr(\"Invalid payment request.\"), CClientUIInterface::MSG_ERROR);\n             return false;\n         }\n     }\n@@ -694,7 +694,7 @@ void PaymentServer::netRequestFinished(QNetworkReply* reply)\n             .arg(BIP70_MAX_PAYMENTREQUEST_SIZE);\n \n         qWarning() << QString(\"PaymentServer::%1:\").arg(__func__) << msg;\n-        emit message(tr(\"Payment request DoS protection\"), msg, CClientUIInterface::MSG_ERROR);\n+        Q_EMIT message(tr(\"Payment request DoS protection\"), msg, CClientUIInterface::MSG_ERROR);\n         return;\n     }\n \n@@ -704,7 +704,7 @@ void PaymentServer::netRequestFinished(QNetworkReply* reply)\n             .arg(reply->errorString());\n \n         qWarning() << \"PaymentServer::netRequestFinished: \" << msg;\n-        emit message(tr(\"Payment request error\"), msg, CClientUIInterface::MSG_ERROR);\n+        Q_EMIT message(tr(\"Payment request error\"), msg, CClientUIInterface::MSG_ERROR);\n         return;\n     }\n \n@@ -718,12 +718,12 @@ void PaymentServer::netRequestFinished(QNetworkReply* reply)\n         if (!request.parse(data))\n         {\n             qWarning() << \"PaymentServer::netRequestFinished: Error parsing payment request\";\n-            emit message(tr(\"Payment request error\"),\n+            Q_EMIT message(tr(\"Payment request error\"),\n                 tr(\"Payment request cannot be parsed!\"),\n                 CClientUIInterface::MSG_ERROR);\n         }\n         else if (processPaymentRequest(request, recipient))\n-            emit receivedPaymentRequest(recipient);\n+            Q_EMIT receivedPaymentRequest(recipient);\n \n         return;\n     }\n@@ -736,11 +736,11 @@ void PaymentServer::netRequestFinished(QNetworkReply* reply)\n                 .arg(reply->request().url().toString());\n \n             qWarning() << \"PaymentServer::netRequestFinished: \" << msg;\n-            emit message(tr(\"Payment request error\"), msg, CClientUIInterface::MSG_ERROR);\n+            Q_EMIT message(tr(\"Payment request error\"), msg, CClientUIInterface::MSG_ERROR);\n         }\n         else\n         {\n-            emit receivedPaymentACK(GUIUtil::HtmlEscape(paymentACK.memo()));\n+            Q_EMIT receivedPaymentACK(GUIUtil::HtmlEscape(paymentACK.memo()));\n         }\n     }\n }\n@@ -750,11 +750,11 @@ void PaymentServer::reportSslErrors(QNetworkReply* reply, const QList<QSslError>\n     Q_UNUSED(reply);\n \n     QString errString;\n-    foreach (const QSslError& err, errs) {\n+    Q_FOREACH (const QSslError& err, errs) {\n         qWarning() << \"PaymentServer::reportSslErrors: \" << err;\n         errString += err.errorString() + \"\\n\";\n     }\n-    emit message(tr(\"Network request error\"), errString, CClientUIInterface::MSG_ERROR);\n+    Q_EMIT message(tr(\"Network request error\"), errString, CClientUIInterface::MSG_ERROR);\n }\n \n void PaymentServer::setOptionsModel(OptionsModel *optionsModel)\n@@ -765,7 +765,7 @@ void PaymentServer::setOptionsModel(OptionsModel *optionsModel)\n void PaymentServer::handlePaymentACK(const QString& paymentACKMsg)\n {\n     // currently we don't futher process or store the paymentACK message\n-    emit message(tr(\"Payment acknowledged\"), paymentACKMsg, CClientUIInterface::ICON_INFORMATION | CClientUIInterface::MODAL);\n+    Q_EMIT message(tr(\"Payment acknowledged\"), paymentACKMsg, CClientUIInterface::ICON_INFORMATION | CClientUIInterface::MODAL);\n }\n \n bool PaymentServer::verifyNetwork(const payments::PaymentDetails& requestDetails)"
      },
      {
        "sha": "5df0a14cf74cd530c661668082be2e456260f7ee",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -98,7 +98,7 @@ class PaymentServer : public QObject\n     // Verify the payment request amount is valid\n     static bool verifyAmount(const CAmount& requestAmount);\n \n-signals:\n+Q_SIGNALS:\n     // Fired when a valid payment request is received\n     void receivedPaymentRequest(SendCoinsRecipient);\n \n@@ -108,7 +108,7 @@ class PaymentServer : public QObject\n     // Fired when a message should be reported to the user\n     void message(const QString &title, const QString &message, unsigned int style);\n \n-public slots:\n+public Q_SLOTS:\n     // Signal this when the main window's UI is ready\n     // to display payment requests to the user\n     void uiReady();\n@@ -119,7 +119,7 @@ public slots:\n     // Handle an incoming URI, URI with local file scheme or file\n     void handleURIOrFile(const QString& s);\n \n-private slots:\n+private Q_SLOTS:\n     void handleURIConnection();\n     void netRequestFinished(QNetworkReply*);\n     void reportSslErrors(QNetworkReply*, const QList<QSslError> &);"
      },
      {
        "sha": "85339166b0e486b35227812054d1f93f58c905b9",
        "filename": "src/qt/peertablemodel.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/peertablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/peertablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.cpp?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -63,7 +63,7 @@ class PeerTablePriv\n #if QT_VERSION >= 0x040700\n             cachedNodeStats.reserve(vNodes.size());\n #endif\n-            foreach (CNode* pnode, vNodes)\n+            Q_FOREACH (CNode* pnode, vNodes)\n             {\n                 CNodeCombinedStats stats;\n                 stats.nodeStateStats.nMisbehavior = 0;\n@@ -92,7 +92,7 @@ class PeerTablePriv\n         // build index map\n         mapNodeRows.clear();\n         int row = 0;\n-        foreach (const CNodeCombinedStats& stats, cachedNodeStats)\n+        Q_FOREACH (const CNodeCombinedStats& stats, cachedNodeStats)\n             mapNodeRows.insert(std::pair<NodeId, int>(stats.nodeStats.nodeid, row++));\n     }\n \n@@ -220,9 +220,9 @@ const CNodeCombinedStats *PeerTableModel::getNodeStats(int idx)\n \n void PeerTableModel::refresh()\n {\n-    emit layoutAboutToBeChanged();\n+    Q_EMIT layoutAboutToBeChanged();\n     priv->refreshPeers();\n-    emit layoutChanged();\n+    Q_EMIT layoutChanged();\n }\n \n int PeerTableModel::getRowByNodeId(NodeId nodeid)"
      },
      {
        "sha": "fcb89b7611f423d0abdc7025b94e6fc976348428",
        "filename": "src/qt/peertablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/peertablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/peertablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -68,7 +68,7 @@ class PeerTableModel : public QAbstractTableModel\n     void sort(int column, Qt::SortOrder order);\n     /*@}*/\n \n-public slots:\n+public Q_SLOTS:\n     void refresh();\n \n private:"
      },
      {
        "sha": "8665acda5ea67cd80b1a8328944f906ba776ad09",
        "filename": "src/qt/qvalidatedlineedit.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/qvalidatedlineedit.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/qvalidatedlineedit.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qvalidatedlineedit.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -27,11 +27,11 @@ class QValidatedLineEdit : public QLineEdit\n     bool valid;\n     const QValidator *checkValidator;\n \n-public slots:\n+public Q_SLOTS:\n     void setValid(bool valid);\n     void setEnabled(bool enabled);\n \n-private slots:\n+private Q_SLOTS:\n     void markValid();\n     void checkValidity();\n };"
      },
      {
        "sha": "800436661f2312c733b8bd8c4f19c81259c447ce",
        "filename": "src/qt/qvaluecombobox.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/qvaluecombobox.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/qvaluecombobox.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qvaluecombobox.cpp?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -27,5 +27,5 @@ void QValueComboBox::setRole(int role)\n \n void QValueComboBox::handleSelectionChanged(int idx)\n {\n-    emit valueChanged();\n+    Q_EMIT valueChanged();\n }"
      },
      {
        "sha": "5b20e6a5a4ac503a596fc4382ceb43b2f21352c3",
        "filename": "src/qt/qvaluecombobox.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/qvaluecombobox.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/qvaluecombobox.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qvaluecombobox.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -24,13 +24,13 @@ class QValueComboBox : public QComboBox\n     /** Specify model role to use as ordinal value (defaults to Qt::UserRole) */\n     void setRole(int role);\n \n-signals:\n+Q_SIGNALS:\n     void valueChanged();\n \n private:\n     int role;\n \n-private slots:\n+private Q_SLOTS:\n     void handleSelectionChanged(int idx);\n };\n "
      },
      {
        "sha": "43b46c63b52913a0a97b12f48f30e5bcf303e77e",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -185,7 +185,7 @@ void ReceiveCoinsDialog::on_showRequestButton_clicked()\n         return;\n     QModelIndexList selection = ui->recentRequestsView->selectionModel()->selectedRows();\n \n-    foreach (const QModelIndex& index, selection) {\n+    Q_FOREACH (const QModelIndex& index, selection) {\n         on_recentRequestsView_doubleClicked(index);\n     }\n }"
      },
      {
        "sha": "6bb159482bf56a2902274dfeb2cf00b143c97149",
        "filename": "src/qt/receivecoinsdialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/receivecoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/receivecoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -44,7 +44,7 @@ class ReceiveCoinsDialog : public QDialog\n \n     void setModel(WalletModel *model);\n \n-public slots:\n+public Q_SLOTS:\n     void clear();\n     void reject();\n     void accept();\n@@ -60,7 +60,7 @@ public slots:\n     void copyColumnToClipboard(int column);\n     virtual void resizeEvent(QResizeEvent *event);\n \n-private slots:\n+private Q_SLOTS:\n     void on_receiveButton_clicked();\n     void on_showRequestButton_clicked();\n     void on_removeRequestButton_clicked();"
      },
      {
        "sha": "69f84ebbd725326f6f2d25c1759ba1737f57aaaf",
        "filename": "src/qt/receiverequestdialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/receiverequestdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/receiverequestdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receiverequestdialog.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -32,7 +32,7 @@ class QRImageWidget : public QLabel\n     explicit QRImageWidget(QWidget *parent = 0);\n     QImage exportImage();\n \n-public slots:\n+public Q_SLOTS:\n     void saveImage();\n     void copyImage();\n \n@@ -55,7 +55,7 @@ class ReceiveRequestDialog : public QDialog\n     void setModel(OptionsModel *model);\n     void setInfo(const SendCoinsRecipient &info);\n \n-private slots:\n+private Q_SLOTS:\n     void on_btnCopyURI_clicked();\n     void on_btnCopyAddress_clicked();\n "
      },
      {
        "sha": "5692a7aaef392f3d3ca7cd84a8eabffc581fb08a",
        "filename": "src/qt/recentrequeststablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/recentrequeststablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/recentrequeststablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.cpp?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -119,7 +119,7 @@ QVariant RecentRequestsTableModel::headerData(int section, Qt::Orientation orien\n void RecentRequestsTableModel::updateAmountColumnTitle()\n {\n     columns[Amount] = getAmountTitle();\n-    emit headerDataChanged(Qt::Horizontal,Amount,Amount);\n+    Q_EMIT headerDataChanged(Qt::Horizontal,Amount,Amount);\n }\n \n /** Gets title for amount column including current display unit if optionsModel reference available. */\n@@ -214,7 +214,7 @@ void RecentRequestsTableModel::addNewRequest(RecentRequestEntry &recipient)\n void RecentRequestsTableModel::sort(int column, Qt::SortOrder order)\n {\n     qSort(list.begin(), list.end(), RecentRequestEntryLessThan(column, order));\n-    emit dataChanged(index(0, 0, QModelIndex()), index(list.size() - 1, NUMBER_OF_COLUMNS - 1, QModelIndex()));\n+    Q_EMIT dataChanged(index(0, 0, QModelIndex()), index(list.size() - 1, NUMBER_OF_COLUMNS - 1, QModelIndex()));\n }\n \n void RecentRequestsTableModel::updateDisplayUnit()"
      },
      {
        "sha": "64faa72d455b9a2fac2082eafc994ab4bccc3ca3",
        "filename": "src/qt/recentrequeststablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/recentrequeststablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/recentrequeststablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -89,7 +89,7 @@ class RecentRequestsTableModel: public QAbstractTableModel\n     void addNewRequest(const std::string &recipient);\n     void addNewRequest(RecentRequestEntry &recipient);\n \n-public slots:\n+public Q_SLOTS:\n     void sort(int column, Qt::SortOrder order = Qt::AscendingOrder);\n     void updateDisplayUnit();\n "
      },
      {
        "sha": "2fafb83d43ea330faf141dd65aca62c37bcc628a",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -60,10 +60,10 @@ class RPCExecutor : public QObject\n {\n     Q_OBJECT\n \n-public slots:\n+public Q_SLOTS:\n     void request(const QString &command);\n \n-signals:\n+Q_SIGNALS:\n     void reply(int category, const QString &command);\n };\n \n@@ -95,7 +95,7 @@ bool parseCommandLine(std::vector<std::string> &args, const std::string &strComm\n         STATE_ESCAPE_DOUBLEQUOTED\n     } state = STATE_EATING_SPACES;\n     std::string curarg;\n-    foreach(char ch, strCommand)\n+    Q_FOREACH(char ch, strCommand)\n     {\n         switch(state)\n         {\n@@ -158,7 +158,7 @@ void RPCExecutor::request(const QString &command)\n     std::vector<std::string> args;\n     if(!parseCommandLine(args, command.toStdString()))\n     {\n-        emit reply(RPCConsole::CMD_ERROR, QString(\"Parse error: unbalanced ' or \\\"\"));\n+        Q_EMIT reply(RPCConsole::CMD_ERROR, QString(\"Parse error: unbalanced ' or \\\"\"));\n         return;\n     }\n     if(args.empty())\n@@ -180,24 +180,24 @@ void RPCExecutor::request(const QString &command)\n         else\n             strPrint = result.write(2);\n \n-        emit reply(RPCConsole::CMD_REPLY, QString::fromStdString(strPrint));\n+        Q_EMIT reply(RPCConsole::CMD_REPLY, QString::fromStdString(strPrint));\n     }\n     catch (UniValue& objError)\n     {\n         try // Nice formatting for standard-format error\n         {\n             int code = find_value(objError, \"code\").get_int();\n             std::string message = find_value(objError, \"message\").get_str();\n-            emit reply(RPCConsole::CMD_ERROR, QString::fromStdString(message) + \" (code \" + QString::number(code) + \")\");\n+            Q_EMIT reply(RPCConsole::CMD_ERROR, QString::fromStdString(message) + \" (code \" + QString::number(code) + \")\");\n         }\n         catch (const std::runtime_error&) // raised when converting to invalid type, i.e. missing code or message\n         {   // Show raw JSON object\n-            emit reply(RPCConsole::CMD_ERROR, QString::fromStdString(objError.write()));\n+            Q_EMIT reply(RPCConsole::CMD_ERROR, QString::fromStdString(objError.write()));\n         }\n     }\n     catch (const std::exception& e)\n     {\n-        emit reply(RPCConsole::CMD_ERROR, QString(\"Error: \") + QString::fromStdString(e.what()));\n+        Q_EMIT reply(RPCConsole::CMD_ERROR, QString(\"Error: \") + QString::fromStdString(e.what()));\n     }\n }\n \n@@ -245,7 +245,7 @@ RPCConsole::RPCConsole(QWidget *parent) :\n RPCConsole::~RPCConsole()\n {\n     GUIUtil::saveWindowGeometry(\"nRPCConsoleWindow\", this);\n-    emit stopExecutor();\n+    Q_EMIT stopExecutor();\n     delete ui;\n }\n \n@@ -431,7 +431,7 @@ void RPCConsole::on_lineEdit_returnPressed()\n     if(!cmd.isEmpty())\n     {\n         message(CMD_REQUEST, cmd);\n-        emit cmdRequest(cmd);\n+        Q_EMIT cmdRequest(cmd);\n         // Remove command, if already in history\n         history.removeOne(cmd);\n         // Append command to history"
      },
      {
        "sha": "6f42aa08b79e11765afa17c0c3e3c8f0e3ff32af",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -46,7 +46,7 @@ class RPCConsole: public QWidget\n     virtual bool eventFilter(QObject* obj, QEvent *event);\n     void keyPressEvent(QKeyEvent *);\n \n-private slots:\n+private Q_SLOTS:\n     void on_lineEdit_returnPressed();\n     void on_tabWidget_currentChanged(int index);\n     /** open the debug.log from the current datadir */\n@@ -61,7 +61,7 @@ private slots:\n     /** Show custom context menu on Peers tab */\n     void showMenu(const QPoint& point);\n \n-public slots:\n+public Q_SLOTS:\n     void clear();\n     void message(int category, const QString &message, bool html = false);\n     /** Set number of connections shown in the UI */\n@@ -79,7 +79,7 @@ public slots:\n     /** Disconnect a selected node on the Peers tab */\n     void disconnectSelectedNode();\n \n-signals:\n+Q_SIGNALS:\n     // For RPC command executor\n     void stopExecutor();\n     void cmdRequest(const QString &command);"
      },
      {
        "sha": "e13cd714a632007edb0306d2820d930b8a8b845a",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -251,7 +251,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n \n     // Format confirmation message\n     QStringList formatted;\n-    foreach(const SendCoinsRecipient &rcp, currentTransaction.getRecipients())\n+    Q_FOREACH(const SendCoinsRecipient &rcp, currentTransaction.getRecipients())\n     {\n         // generate bold amount string\n         QString amount = \"<b>\" + BitcoinUnits::formatHtmlWithUnit(model->getOptionsModel()->getDisplayUnit(), rcp.amount);\n@@ -305,7 +305,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n     questionString.append(\"<hr />\");\n     CAmount totalAmount = currentTransaction.getTotalTransactionAmount() + txFee;\n     QStringList alternativeUnits;\n-    foreach(BitcoinUnits::Unit u, BitcoinUnits::availableUnits())\n+    Q_FOREACH(BitcoinUnits::Unit u, BitcoinUnits::availableUnits())\n     {\n         if(u != model->getOptionsModel()->getDisplayUnit())\n             alternativeUnits.append(BitcoinUnits::formatHtmlWithUnit(u, totalAmount));\n@@ -540,7 +540,7 @@ void SendCoinsDialog::processSendCoinsReturn(const WalletModel::SendCoinsReturn\n         return;\n     }\n \n-    emit message(tr(\"Send Coins\"), msgParams.first, msgParams.second);\n+    Q_EMIT message(tr(\"Send Coins\"), msgParams.first, msgParams.second);\n }\n \n void SendCoinsDialog::minimizeFeeSection(bool fMinimize)"
      },
      {
        "sha": "c833da84b2ef2c78564b33e5c4b2171e545eb8ca",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -45,7 +45,7 @@ class SendCoinsDialog : public QDialog\n     void pasteEntry(const SendCoinsRecipient &rv);\n     bool handlePaymentRequest(const SendCoinsRecipient &recipient);\n \n-public slots:\n+public Q_SLOTS:\n     void clear();\n     void reject();\n     void accept();\n@@ -62,13 +62,13 @@ public slots:\n     bool fFeeMinimized;\n \n     // Process WalletModel::SendCoinsReturn and generate a pair consisting\n-    // of a message and message flags for use in emit message().\n+    // of a message and message flags for use in Q_EMIT message().\n     // Additional parameter msgArg can be used via .arg(msgArg).\n     void processSendCoinsReturn(const WalletModel::SendCoinsReturn &sendCoinsReturn, const QString &msgArg = QString());\n     void minimizeFeeSection(bool fMinimize);\n     void updateFeeMinimizedLabel();\n \n-private slots:\n+private Q_SLOTS:\n     void on_sendButton_clicked();\n     void on_buttonChooseFee_clicked();\n     void on_buttonMinimizeFee_clicked();\n@@ -93,7 +93,7 @@ private slots:\n     void updateSmartFeeLabel();\n     void updateGlobalFeeVariables();\n \n-signals:\n+Q_SIGNALS:\n     // Fired when a message should be reported to the user\n     void message(const QString &title, const QString &message, unsigned int style);\n };"
      },
      {
        "sha": "90a8cbdc4ea42097aa2dcc2d7f4c88349995bc25",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -114,7 +114,7 @@ void SendCoinsEntry::clear()\n \n void SendCoinsEntry::deleteClicked()\n {\n-    emit removeEntry(this);\n+    Q_EMIT removeEntry(this);\n }\n \n bool SendCoinsEntry::validate()"
      },
      {
        "sha": "d7e655fdc3991f78e073ea8bb62cff5ea0287d7c",
        "filename": "src/qt/sendcoinsentry.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/sendcoinsentry.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/sendcoinsentry.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -45,15 +45,15 @@ class SendCoinsEntry : public QStackedWidget\n \n     void setFocus();\n \n-public slots:\n+public Q_SLOTS:\n     void clear();\n \n-signals:\n+Q_SIGNALS:\n     void removeEntry(SendCoinsEntry *entry);\n     void payAmountChanged();\n     void subtractFeeFromAmountChanged();\n \n-private slots:\n+private Q_SLOTS:\n     void deleteClicked();\n     void on_payTo_textChanged(const QString &address);\n     void on_addressBookButton_clicked();"
      },
      {
        "sha": "bf841e4f8b3f26fdd52ed97bee3068a2e18c6dde",
        "filename": "src/qt/signverifymessagedialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/signverifymessagedialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/signverifymessagedialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -35,7 +35,7 @@ class SignVerifyMessageDialog : public QDialog\n     Ui::SignVerifyMessageDialog *ui;\n     WalletModel *model;\n \n-private slots:\n+private Q_SLOTS:\n     /* sign message */\n     void on_addressBookButton_SM_clicked();\n     void on_pasteButton_SM_clicked();"
      },
      {
        "sha": "29d16d4eae2d6bea46075bfbafe7fb147cb19076",
        "filename": "src/qt/splashscreen.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/splashscreen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/splashscreen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -27,7 +27,7 @@ class SplashScreen : public QWidget\n     void paintEvent(QPaintEvent *event);\n     void closeEvent(QCloseEvent *event);\n \n-public slots:\n+public Q_SLOTS:\n     /** Slot to call finish() method as it's not defined as slot */\n     void slotFinish(QWidget *mainWin);\n "
      },
      {
        "sha": "b28934cd313579871b0cb12ddd7abd756d1368a5",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -195,7 +195,7 @@ void PaymentServerTests::paymentServerTests()\n     QVERIFY(r.paymentRequest.IsInitialized());\n     // Extract address and amount from the request\n     QList<std::pair<CScript, CAmount> > sendingTos = r.paymentRequest.getPayTo();\n-    foreach (const PAIRTYPE(CScript, CAmount)& sendingTo, sendingTos) {\n+    Q_FOREACH (const PAIRTYPE(CScript, CAmount)& sendingTo, sendingTos) {\n         CTxDestination dest;\n         if (ExtractDestination(sendingTo.first, dest))\n             QCOMPARE(PaymentServer::verifyAmount(sendingTo.second), false);"
      },
      {
        "sha": "71d61fcbe77c3acdf8273edba4902fdd2027609c",
        "filename": "src/qt/test/paymentservertests.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/test/paymentservertests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/test/paymentservertests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -14,7 +14,7 @@ class PaymentServerTests : public QObject\n {\n     Q_OBJECT\n \n-private slots:\n+private Q_SLOTS:\n     void paymentServerTests();\n };\n \n@@ -25,7 +25,7 @@ class RecipientCatcher : public QObject\n {\n     Q_OBJECT\n \n-public slots:\n+public Q_SLOTS:\n     void getRecipient(SendCoinsRecipient r);\n \n public:"
      },
      {
        "sha": "434169dcde0cf20cca56b9a6804b0400a7c717a5",
        "filename": "src/qt/test/uritests.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/test/uritests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/test/uritests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/uritests.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -12,7 +12,7 @@ class URITests : public QObject\n {\n     Q_OBJECT\n \n-private slots:\n+private Q_SLOTS:\n     void uriTests();\n };\n "
      },
      {
        "sha": "9b67445bc0f428d4577bc5e23a30e72541161143",
        "filename": "src/qt/trafficgraphwidget.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/trafficgraphwidget.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/trafficgraphwidget.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/trafficgraphwidget.cpp?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -139,10 +139,10 @@ void TrafficGraphWidget::updateRates()\n     }\n \n     float tmax = 0.0f;\n-    foreach(float f, vSamplesIn) {\n+    Q_FOREACH(float f, vSamplesIn) {\n         if(f > tmax) tmax = f;\n     }\n-    foreach(float f, vSamplesOut) {\n+    Q_FOREACH(float f, vSamplesOut) {\n         if(f > tmax) tmax = f;\n     }\n     fMax = tmax;"
      },
      {
        "sha": "6336a8d1446465f8ce7b4bed68e7bef4adf455e0",
        "filename": "src/qt/trafficgraphwidget.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/trafficgraphwidget.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/trafficgraphwidget.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/trafficgraphwidget.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -27,7 +27,7 @@ class TrafficGraphWidget : public QWidget\n protected:\n     void paintEvent(QPaintEvent *);\n \n-public slots:\n+public Q_SLOTS:\n     void updateRates();\n     void setGraphRangeMins(int mins);\n     void clear();"
      },
      {
        "sha": "d7ee3d4c78f0fde29226b1d33759d4d63a9158cd",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -243,14 +243,14 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     strHTML += \"<b>\" + tr(\"Transaction ID\") + \":</b> \" + TransactionRecord::formatSubTxId(wtx.GetHash(), rec->idx) + \"<br>\";\n \n     // Message from normal bitcoin:URI (bitcoin:123...?message=example)\n-    foreach (const PAIRTYPE(string, string)& r, wtx.vOrderForm)\n+    Q_FOREACH (const PAIRTYPE(string, string)& r, wtx.vOrderForm)\n         if (r.first == \"Message\")\n             strHTML += \"<br><b>\" + tr(\"Message\") + \":</b><br>\" + GUIUtil::HtmlEscape(r.second, true) + \"<br>\";\n \n     //\n     // PaymentRequest info:\n     //\n-    foreach (const PAIRTYPE(string, string)& r, wtx.vOrderForm)\n+    Q_FOREACH (const PAIRTYPE(string, string)& r, wtx.vOrderForm)\n     {\n         if (r.first == \"PaymentRequest\")\n         {"
      },
      {
        "sha": "e3d64387f71033d6b9d6195395c8096fd17ec00c",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -142,7 +142,7 @@ class TransactionTablePriv\n                 {\n                     parent->beginInsertRows(QModelIndex(), lowerIndex, lowerIndex+toInsert.size()-1);\n                     int insert_idx = lowerIndex;\n-                    foreach(const TransactionRecord &rec, toInsert)\n+                    Q_FOREACH(const TransactionRecord &rec, toInsert)\n                     {\n                         cachedWallet.insert(insert_idx, rec);\n                         insert_idx += 1;\n@@ -245,7 +245,7 @@ TransactionTableModel::~TransactionTableModel()\n void TransactionTableModel::updateAmountColumnTitle()\n {\n     columns[Amount] = BitcoinUnits::getAmountColumnTitle(walletModel->getOptionsModel()->getDisplayUnit());\n-    emit headerDataChanged(Qt::Horizontal,Amount,Amount);\n+    Q_EMIT headerDataChanged(Qt::Horizontal,Amount,Amount);\n }\n \n void TransactionTableModel::updateTransaction(const QString &hash, int status, bool showTransaction)\n@@ -262,8 +262,8 @@ void TransactionTableModel::updateConfirmations()\n     // Invalidate status (number of confirmations) and (possibly) description\n     //  for all rows. Qt is smart enough to only actually request the data for the\n     //  visible rows.\n-    emit dataChanged(index(0, Status), index(priv->size()-1, Status));\n-    emit dataChanged(index(0, ToAddress), index(priv->size()-1, ToAddress));\n+    Q_EMIT dataChanged(index(0, Status), index(priv->size()-1, Status));\n+    Q_EMIT dataChanged(index(0, ToAddress), index(priv->size()-1, ToAddress));\n }\n \n int TransactionTableModel::rowCount(const QModelIndex &parent) const\n@@ -650,7 +650,7 @@ void TransactionTableModel::updateDisplayUnit()\n {\n     // emit dataChanged to update Amount column with the current unit\n     updateAmountColumnTitle();\n-    emit dataChanged(index(0, Amount), index(priv->size()-1, Amount));\n+    Q_EMIT dataChanged(index(0, Amount), index(priv->size()-1, Amount));\n }\n \n // queue notifications to show a non freezing progress dialog e.g. for rescan"
      },
      {
        "sha": "25c82c764bd81f102b55010a06a3608fafccc5cf",
        "filename": "src/qt/transactiontablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/transactiontablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/transactiontablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -98,7 +98,7 @@ class TransactionTableModel : public QAbstractTableModel\n     QVariant txWatchonlyDecoration(const TransactionRecord *wtx) const;\n     QVariant txAddressDecoration(const TransactionRecord *wtx) const;\n \n-public slots:\n+public Q_SLOTS:\n     /* New transaction, or transaction changed status */\n     void updateTransaction(const QString &hash, int status, bool showTransaction);\n     void updateConfirmations();"
      },
      {
        "sha": "998789b3ae453a2e1203570b200878a5e50f75ad",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -341,11 +341,11 @@ void TransactionView::exportClicked()\n     writer.addColumn(tr(\"ID\"), 0, TransactionTableModel::TxIDRole);\n \n     if(!writer.write()) {\n-        emit message(tr(\"Exporting Failed\"), tr(\"There was an error trying to save the transaction history to %1.\").arg(filename),\n+        Q_EMIT message(tr(\"Exporting Failed\"), tr(\"There was an error trying to save the transaction history to %1.\").arg(filename),\n             CClientUIInterface::MSG_ERROR);\n     }\n     else {\n-        emit message(tr(\"Exporting Successful\"), tr(\"The transaction history was successfully saved to %1.\").arg(filename),\n+        Q_EMIT message(tr(\"Exporting Successful\"), tr(\"The transaction history was successfully saved to %1.\").arg(filename),\n             CClientUIInterface::MSG_INFORMATION);\n     }\n }"
      },
      {
        "sha": "6c35362be4e3116e38fec8f9d96e724cb64c5909",
        "filename": "src/qt/transactionview.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/transactionview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/transactionview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -83,7 +83,7 @@ class TransactionView : public QWidget\n \n     bool eventFilter(QObject *obj, QEvent *event);\n \n-private slots:\n+private Q_SLOTS:\n     void contextualMenu(const QPoint &);\n     void dateRangeChanged();\n     void showDetails();\n@@ -95,13 +95,13 @@ private slots:\n     void openThirdPartyTxUrl(QString url);\n     void updateWatchOnlyColumn(bool fHaveWatchOnly);\n \n-signals:\n+Q_SIGNALS:\n     void doubleClicked(const QModelIndex&);\n \n     /**  Fired when a message should be reported to the user */\n     void message(const QString &title, const QString &message, unsigned int style);\n \n-public slots:\n+public Q_SLOTS:\n     void chooseDate(int idx);\n     void chooseType(int idx);\n     void chooseWatchonly(int idx);"
      },
      {
        "sha": "5e26f3e01b6bbd174823ef44e02880b51ccbee1f",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -84,7 +84,7 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n         QTextCharFormat bold;\n         bold.setFontWeight(QFont::Bold);\n \n-        foreach (const QString &line, coreOptions.split(\"\\n\")) {\n+        Q_FOREACH (const QString &line, coreOptions.split(\"\\n\")) {\n             if (line.startsWith(\"  -\"))\n             {\n                 cursor.currentTable()->appendRows(1);"
      },
      {
        "sha": "47282ae2d0504587b044d50998adec9b1b6b9f89",
        "filename": "src/qt/utilitydialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/utilitydialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/utilitydialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -31,7 +31,7 @@ class HelpMessageDialog : public QDialog\n     Ui::HelpMessageDialog *ui;\n     QString text;\n \n-private slots:\n+private Q_SLOTS:\n     void on_okButton_accepted();\n };\n "
      },
      {
        "sha": "5a5e2ab944311ddd657d7825204932e179153c16",
        "filename": "src/qt/walletframe.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/walletframe.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/walletframe.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -47,7 +47,7 @@ class WalletFrame : public QFrame\n \n     WalletView *currentWalletView();\n \n-public slots:\n+public Q_SLOTS:\n     /** Switch to overview (home) page */\n     void gotoOverviewPage();\n     /** Switch to history (transactions) page */"
      },
      {
        "sha": "2691fa93099be658dff6bc6fb7d12ed2ed002def",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -107,7 +107,7 @@ void WalletModel::updateStatus()\n     EncryptionStatus newEncryptionStatus = getEncryptionStatus();\n \n     if(cachedEncryptionStatus != newEncryptionStatus)\n-        emit encryptionStatusChanged(newEncryptionStatus);\n+        Q_EMIT encryptionStatusChanged(newEncryptionStatus);\n }\n \n void WalletModel::pollBalanceChanged()\n@@ -159,7 +159,7 @@ void WalletModel::checkBalanceChanged()\n         cachedWatchOnlyBalance = newWatchOnlyBalance;\n         cachedWatchUnconfBalance = newWatchUnconfBalance;\n         cachedWatchImmatureBalance = newWatchImmatureBalance;\n-        emit balanceChanged(newBalance, newUnconfirmedBalance, newImmatureBalance,\n+        Q_EMIT balanceChanged(newBalance, newUnconfirmedBalance, newImmatureBalance,\n                             newWatchOnlyBalance, newWatchUnconfBalance, newWatchImmatureBalance);\n     }\n }\n@@ -180,7 +180,7 @@ void WalletModel::updateAddressBook(const QString &address, const QString &label\n void WalletModel::updateWatchOnlyFlag(bool fHaveWatchonly)\n {\n     fHaveWatchOnly = fHaveWatchonly;\n-    emit notifyWatchonlyChanged(fHaveWatchonly);\n+    Q_EMIT notifyWatchonlyChanged(fHaveWatchonly);\n }\n \n bool WalletModel::validateAddress(const QString &address)\n@@ -205,7 +205,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n     int nAddresses = 0;\n \n     // Pre-check input data for validity\n-    foreach(const SendCoinsRecipient &rcp, recipients)\n+    Q_FOREACH(const SendCoinsRecipient &rcp, recipients)\n     {\n         if (rcp.fSubtractFeeFromAmount)\n             fSubtractFeeFromAmount = true;\n@@ -285,7 +285,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n             {\n                 return SendCoinsReturn(AmountWithFeeExceedsBalance);\n             }\n-            emit message(tr(\"Send Coins\"), QString::fromStdString(strFailReason),\n+            Q_EMIT message(tr(\"Send Coins\"), QString::fromStdString(strFailReason),\n                          CClientUIInterface::MSG_ERROR);\n             return TransactionCreationFailed;\n         }\n@@ -306,7 +306,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n         LOCK2(cs_main, wallet->cs_wallet);\n         CWalletTx *newTx = transaction.getTransaction();\n \n-        foreach(const SendCoinsRecipient &rcp, transaction.getRecipients())\n+        Q_FOREACH(const SendCoinsRecipient &rcp, transaction.getRecipients())\n         {\n             if (rcp.paymentRequest.IsInitialized())\n             {\n@@ -337,7 +337,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n \n     // Add addresses / update labels that we've sent to to the address book,\n     // and emit coinsSent signal for each recipient\n-    foreach(const SendCoinsRecipient &rcp, transaction.getRecipients())\n+    Q_FOREACH(const SendCoinsRecipient &rcp, transaction.getRecipients())\n     {\n         // Don't touch the address book when we have a payment request\n         if (!rcp.paymentRequest.IsInitialized())\n@@ -361,7 +361,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n                 }\n             }\n         }\n-        emit coinsSent(wallet, rcp, transaction_array);\n+        Q_EMIT coinsSent(wallet, rcp, transaction_array);\n     }\n     checkBalanceChanged(); // update balance immediately, otherwise there could be a short noticeable delay until pollBalanceChanged hits\n \n@@ -521,7 +521,7 @@ WalletModel::UnlockContext WalletModel::requestUnlock()\n     if(was_locked)\n     {\n         // Request UI to unlock wallet\n-        emit requireUnlock();\n+        Q_EMIT requireUnlock();\n     }\n     // If wallet is still locked, unlock was failed or cancelled, mark context as invalid\n     bool valid = getEncryptionStatus() != Locked;"
      },
      {
        "sha": "40bc623543ff73942cf665a46b82c4c79b6d5bb4",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -227,7 +227,7 @@ class WalletModel : public QObject\n     void unsubscribeFromCoreSignals();\n     void checkBalanceChanged();\n \n-signals:\n+Q_SIGNALS:\n     // Signal that balance in wallet changed\n     void balanceChanged(const CAmount& balance, const CAmount& unconfirmedBalance, const CAmount& immatureBalance,\n                         const CAmount& watchOnlyBalance, const CAmount& watchUnconfBalance, const CAmount& watchImmatureBalance);\n@@ -252,7 +252,7 @@ class WalletModel : public QObject\n     // Watch-only address added\n     void notifyWatchonlyChanged(bool fHaveWatchonly);\n \n-public slots:\n+public Q_SLOTS:\n     /* Wallet status might have changed */\n     void updateStatus();\n     /* New transaction, or transaction changed status */"
      },
      {
        "sha": "6a9b2d5bd31152bb2d7ce400e5aceb3659b73298",
        "filename": "src/qt/walletmodeltransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/walletmodeltransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/walletmodeltransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.cpp?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -81,7 +81,7 @@ void WalletModelTransaction::reassignAmounts(int nChangePosRet)\n CAmount WalletModelTransaction::getTotalTransactionAmount()\n {\n     CAmount totalTransactionAmount = 0;\n-    foreach(const SendCoinsRecipient &rcp, recipients)\n+    Q_FOREACH(const SendCoinsRecipient &rcp, recipients)\n     {\n         totalTransactionAmount += rcp.amount;\n     }"
      },
      {
        "sha": "c5f556b444f227a92745f1f750841e4b333d495e",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -153,7 +153,7 @@ void WalletView::processNewTransaction(const QModelIndex& parent, int start, int\n     QString address = ttm->data(index, TransactionTableModel::AddressRole).toString();\n     QString label = ttm->data(index, TransactionTableModel::LabelRole).toString();\n \n-    emit incomingTransaction(date, walletModel->getOptionsModel()->getDisplayUnit(), amount, type, address, label);\n+    Q_EMIT incomingTransaction(date, walletModel->getOptionsModel()->getDisplayUnit(), amount, type, address, label);\n }\n \n void WalletView::gotoOverviewPage()\n@@ -215,7 +215,7 @@ void WalletView::showOutOfSyncWarning(bool fShow)\n \n void WalletView::updateEncryptionStatus()\n {\n-    emit encryptionStatusChanged(walletModel->getEncryptionStatus());\n+    Q_EMIT encryptionStatusChanged(walletModel->getEncryptionStatus());\n }\n \n void WalletView::encryptWallet(bool status)\n@@ -239,11 +239,11 @@ void WalletView::backupWallet()\n         return;\n \n     if (!walletModel->backupWallet(filename)) {\n-        emit message(tr(\"Backup Failed\"), tr(\"There was an error trying to save the wallet data to %1.\").arg(filename),\n+        Q_EMIT message(tr(\"Backup Failed\"), tr(\"There was an error trying to save the wallet data to %1.\").arg(filename),\n             CClientUIInterface::MSG_ERROR);\n         }\n     else {\n-        emit message(tr(\"Backup Successful\"), tr(\"The wallet data was successfully saved to %1.\").arg(filename),\n+        Q_EMIT message(tr(\"Backup Successful\"), tr(\"The wallet data was successfully saved to %1.\").arg(filename),\n             CClientUIInterface::MSG_INFORMATION);\n     }\n }"
      },
      {
        "sha": "87c5d7bfbfda53d1035c412d8d0510ed028955a7",
        "filename": "src/qt/walletview.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/walletview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29ec6c2301e593d577126d1ca85b93307b32bf1/src/qt/walletview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.h?ref=d29ec6c2301e593d577126d1ca85b93307b32bf1",
        "patch": "@@ -65,7 +65,7 @@ class WalletView : public QStackedWidget\n \n     QProgressDialog *progressDialog;\n \n-public slots:\n+public Q_SLOTS:\n     /** Switch to overview (home) page */\n     void gotoOverviewPage();\n     /** Switch to history (transactions) page */\n@@ -105,7 +105,7 @@ public slots:\n     /** Show progress dialog e.g. for rescan */\n     void showProgress(const QString &title, int nProgress);\n \n-signals:\n+Q_SIGNALS:\n     /** Signal that we want to show the main window */\n     void showNormalIfMinimized();\n     /**  Fired when a message should be reported to the user */"
      }
    ]
  }
]