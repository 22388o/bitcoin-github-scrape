[
  {
    "sha": "caf9b0d6616b767190ee66c9f3927a826c8fadb2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYWY5YjBkNjYxNmI3NjcxOTBlZTY2YzlmMzkyN2E4MjZjOGZhZGIy",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-13T00:01:55Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-08-29T06:57:46Z"
      },
      "message": "If -spkreuse=0, ensure transactions in mempool always have unique scriptPubKeys\n\nExceptions:\n- Multiple inputs in the same transaction are allowed to spend against the same scriptPubKey\n- The same scriptPubKey may be used in the mempool as both first an output, and then spent in a later transaction's input",
      "tree": {
        "sha": "8bf4c984be5329db9f719af44539d96d46e7c86c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8bf4c984be5329db9f719af44539d96d46e7c86c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/caf9b0d6616b767190ee66c9f3927a826c8fadb2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caf9b0d6616b767190ee66c9f3927a826c8fadb2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/caf9b0d6616b767190ee66c9f3927a826c8fadb2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caf9b0d6616b767190ee66c9f3927a826c8fadb2/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c2704ec98a1b7b35b6a7c1b6b26a3f16d44e8880",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2704ec98a1b7b35b6a7c1b6b26a3f16d44e8880",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c2704ec98a1b7b35b6a7c1b6b26a3f16d44e8880"
      }
    ],
    "stats": {
      "total": 99,
      "additions": 99,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4a43b3294017a389b73b427e46a4ee165782ac4b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caf9b0d6616b767190ee66c9f3927a826c8fadb2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caf9b0d6616b767190ee66c9f3927a826c8fadb2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=caf9b0d6616b767190ee66c9f3927a826c8fadb2",
        "patch": "@@ -489,6 +489,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-mempoolreplacement\", strprintf(_(\"Enable transaction replacement in the memory pool (default: %u)\"), DEFAULT_ENABLE_REPLACEMENT));\n     strUsage += HelpMessageOpt(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\"),\n         CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)));\n+    strUsage += HelpMessageOpt(\"-spkreuse\", strprintf(_(\"Accept transactions reusing addresses or other pubkey scripts (default: %s)\"), DEFAULT_SPKREUSE));\n     strUsage += HelpMessageOpt(\"-whitelistrelay\", strprintf(_(\"Accept relayed transactions received from whitelisted peers even when not relaying transactions (default: %d)\"), DEFAULT_WHITELISTRELAY));\n     strUsage += HelpMessageOpt(\"-whitelistforcerelay\", strprintf(_(\"Force relay of transactions from whitelisted peers even if they violate local relay policy (default: %d)\"), DEFAULT_WHITELISTFORCERELAY));\n \n@@ -1076,6 +1077,16 @@ bool AppInitParameterInteraction()\n     fAcceptDatacarrier = gArgs.GetBoolArg(\"-datacarrier\", DEFAULT_ACCEPT_DATACARRIER);\n     nMaxDatacarrierBytes = gArgs.GetArg(\"-datacarriersize\", nMaxDatacarrierBytes);\n \n+    {\n+        std::string strSpkReuse = gArgs.GetArg(\"-spkreuse\", DEFAULT_SPKREUSE);\n+        // Uses string values so future versions can implement other modes\n+        if (strSpkReuse == \"allow\" || gArgs.GetBoolArg(\"-spkreuse\", false)) {\n+            SpkReuseMode = SRM_ALLOW;\n+        } else {\n+            SpkReuseMode = SRM_REJECT;\n+        }\n+    }\n+\n     // Option to startup with mocktime set (used for regression testing):\n     SetMockTime(gArgs.GetArg(\"-mocktime\", 0)); // SetMockTime(0) is a no-op\n "
      },
      {
        "sha": "1d938bdc954020c1c145e309d512a669f88fcc77",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caf9b0d6616b767190ee66c9f3927a826c8fadb2/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caf9b0d6616b767190ee66c9f3927a826c8fadb2/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=caf9b0d6616b767190ee66c9f3927a826c8fadb2",
        "patch": "@@ -46,6 +46,7 @@ static const unsigned int MAX_STANDARD_P2WSH_SCRIPT_SIZE = 3600;\n  * only increase the dust limit after prior releases were already not creating\n  * outputs below the new threshold */\n static const unsigned int DUST_RELAY_TX_FEE = 3000;\n+static const std::string DEFAULT_SPKREUSE = \"allow\";\n /**\n  * Standard script verification flags that standard transactions will comply\n  * with. However scripts violating these flags may still be present in valid"
      },
      {
        "sha": "7d5a0d69d03c9b1bdcb99a10637aeddaf8922ca8",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caf9b0d6616b767190ee66c9f3927a826c8fadb2/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caf9b0d6616b767190ee66c9f3927a826c8fadb2/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=caf9b0d6616b767190ee66c9f3927a826c8fadb2",
        "patch": "@@ -12,6 +12,7 @@\n #include \"policy/policy.h\"\n #include \"policy/fees.h\"\n #include \"reverse_iterator.h\"\n+#include \"script/script.h\"\n #include \"streams.h\"\n #include \"timedata.h\"\n #include \"util.h\"\n@@ -61,6 +62,13 @@ size_t CTxMemPoolEntry::GetTxSize() const\n     return GetVirtualTransactionSize(nTxWeight, sigOpCost);\n }\n \n+uint160 ScriptHashkey(const CScript& script)\n+{\n+    uint160 hash;\n+    CRIPEMD160().Write(script.data(), script.size()).Finalize(hash.begin());\n+    return hash;\n+}\n+\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n@@ -418,6 +426,10 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n     vTxHashes.emplace_back(tx.GetWitnessHash(), newit);\n     newit->vTxHashesIdx = vTxHashes.size() - 1;\n \n+    for (auto& vSPK : entry.mapSPK) {\n+        mapUsedSPK[vSPK.first] = MemPool_SPK_State(mapUsedSPK[vSPK.first] | vSPK.second);\n+    }\n+\n     return true;\n }\n \n@@ -437,6 +449,14 @@ void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n     } else\n         vTxHashes.clear();\n \n+    for (auto& vSPK : it->mapSPK) {\n+        if (vSPK.second == mapUsedSPK.find(vSPK.first)->second) {\n+            mapUsedSPK.erase(vSPK.first);\n+        } else {\n+            mapUsedSPK[vSPK.first] = MemPool_SPK_State(mapUsedSPK[vSPK.first] & ~vSPK.second);\n+        }\n+    }\n+\n     totalTxSize -= it->GetTxSize();\n     cachedInnerUsage -= it->DynamicMemoryUsage();\n     cachedInnerUsage -= memusage::DynamicUsage(mapLinks[it].parents) + memusage::DynamicUsage(mapLinks[it].children);\n@@ -598,6 +618,7 @@ void CTxMemPool::_clear()\n     mapLinks.clear();\n     mapTx.clear();\n     mapNextTx.clear();\n+    mapUsedSPK.clear();\n     totalTxSize = 0;\n     cachedInnerUsage = 0;\n     lastRollingFeeUpdate = GetTime();"
      },
      {
        "sha": "992e884f7152eaf9e0a03ade3e6d9e6474a8cca1",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caf9b0d6616b767190ee66c9f3927a826c8fadb2/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caf9b0d6616b767190ee66c9f3927a826c8fadb2/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=caf9b0d6616b767190ee66c9f3927a826c8fadb2",
        "patch": "@@ -18,6 +18,7 @@\n #include \"indirectmap.h\"\n #include \"policy/feerate.h\"\n #include \"primitives/transaction.h\"\n+#include \"script/script.h\"\n #include \"sync.h\"\n #include \"random.h\"\n \n@@ -48,6 +49,15 @@ struct LockPoints\n     LockPoints() : height(0), time(0), maxInputBlock(nullptr) { }\n };\n \n+enum MemPool_SPK_State {\n+    MSS_UNSEEN  = 0,\n+    MSS_SPENT   = 1,\n+    MSS_CREATED = 2,\n+    MSS_BOTH    = 3,\n+};\n+\n+typedef std::map<uint160, enum MemPool_SPK_State> SPKStates_t;\n+\n class CTxMemPool;\n \n /** \\class CTxMemPoolEntry\n@@ -131,6 +141,8 @@ class CTxMemPoolEntry\n     int64_t GetSigOpCostWithAncestors() const { return nSigOpCostWithAncestors; }\n \n     mutable size_t vTxHashesIdx; //!< Index in mempool's vTxHashes\n+\n+    SPKStates_t mapSPK;\n };\n \n // Helpers for modifying CTxMemPool::mapTx, which is a boost multi_index.\n@@ -287,6 +299,8 @@ class CompareTxMemPoolEntryByAncestorFee\n     }\n };\n \n+uint160 ScriptHashkey(const CScript& script);\n+\n // Multi_index tag names\n struct descendant_score {};\n struct entry_time {};\n@@ -479,6 +493,9 @@ class CTxMemPool\n \n     const setEntries & GetMemPoolParents(txiter entry) const;\n     const setEntries & GetMemPoolChildren(txiter entry) const;\n+\n+    SPKStates_t mapUsedSPK;\n+\n private:\n     typedef std::map<txiter, setEntries, CompareIteratorByHash> cacheMap;\n "
      },
      {
        "sha": "17b2df277d4de433d33298c389b08edfabd9729d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caf9b0d6616b767190ee66c9f3927a826c8fadb2/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caf9b0d6616b767190ee66c9f3927a826c8fadb2/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=caf9b0d6616b767190ee66c9f3927a826c8fadb2",
        "patch": "@@ -72,6 +72,7 @@ bool fHavePruned = false;\n bool fPruneMode = false;\n bool fIsBareMultisigStd = DEFAULT_PERMIT_BAREMULTISIG;\n bool fRequireStandard = true;\n+SpkReuseModes SpkReuseMode;\n bool fCheckBlockIndex = false;\n bool fCheckpointsEnabled = DEFAULT_CHECKPOINTS_ENABLED;\n size_t nCoinCacheUsage = 5000 * 300;\n@@ -476,6 +477,9 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         return state.Invalid(false, REJECT_DUPLICATE, \"txn-already-in-mempool\");\n     }\n \n+    auto spk_reuse_mode = SpkReuseMode;\n+    SPKStates_t mapSPK;\n+\n     // Check for conflicts with in-memory transactions\n     std::set<uint256> setConflicts;\n     {\n@@ -520,6 +524,20 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             }\n         }\n     }\n+\n+    if (spk_reuse_mode != SRM_ALLOW) {\n+        for (const CTxOut& txout : tx.vout) {\n+            uint160 hashSPK = ScriptHashkey(txout.scriptPubKey);\n+            if (pool.mapUsedSPK.find(hashSPK) != pool.mapUsedSPK.end()) {\n+                return state.DoS(0, false, REJECT_DUPLICATE, \"txn-mempool-spk-reused\");\n+            }\n+            if (mapSPK.find(hashSPK) != mapSPK.end()) {\n+                return state.DoS(0, false, REJECT_NONSTANDARD, \"txn-spk-reused-twinoutputs\");\n+            }\n+            mapSPK[hashSPK] = MemPool_SPK_State(mapSPK[hashSPK] | MSS_CREATED);\n+        }\n+    }\n+\n     }\n \n     {\n@@ -569,6 +587,28 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         // CoinsViewCache instead of create its own\n         if (!CheckSequenceLocks(tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &lp))\n             return state.DoS(0, false, REJECT_NONSTANDARD, \"non-BIP68-final\");\n+\n+        if (spk_reuse_mode != SRM_ALLOW) {\n+            for (const CTxIn& txin : tx.vin) {\n+                const Coin &coin = view.AccessCoin(txin.prevout);\n+                uint160 hashSPK = ScriptHashkey(coin.out.scriptPubKey);\n+\n+                SPKStates_t::iterator mssit = mapSPK.find(hashSPK);\n+                if (mssit != mapSPK.end()) {\n+                    if (mssit->second & MSS_CREATED) {\n+                        return state.DoS(0, false, REJECT_NONSTANDARD, \"txn-spk-reused-change\");\n+                    }\n+                }\n+                mssit = pool.mapUsedSPK.find(hashSPK);\n+                if (mssit != pool.mapUsedSPK.end()) {\n+                    if (mssit->second & MSS_SPENT) {\n+                        return state.DoS(0, false, REJECT_DUPLICATE, \"txn-mempool-spk-reused-spend\");\n+                    }\n+                }\n+                mapSPK[hashSPK] = MemPool_SPK_State(mapSPK[hashSPK] | MSS_SPENT);\n+            }\n+        }\n+\n         }\n \n         // Check for non-standard pay-to-script-hash in inputs\n@@ -601,6 +641,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         CTxMemPoolEntry entry(ptx, nFees, nAcceptTime, chainActive.Height(),\n                               fSpendsCoinbase, nSigOpsCost, lp);\n         unsigned int nSize = entry.GetTxSize();\n+        entry.mapSPK = mapSPK;\n \n         // Check that the transaction doesn't have an excessive number of\n         // sigops, making it impossible to mine. Since the coinbase transaction"
      },
      {
        "sha": "5c73f0633b3e2dbdc1880bc659e9fa70dca1e44b",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caf9b0d6616b767190ee66c9f3927a826c8fadb2/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caf9b0d6616b767190ee66c9f3927a826c8fadb2/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=caf9b0d6616b767190ee66c9f3927a826c8fadb2",
        "patch": "@@ -172,6 +172,14 @@ extern int nScriptCheckThreads;\n extern bool fTxIndex;\n extern bool fIsBareMultisigStd;\n extern bool fRequireStandard;\n+\n+enum SpkReuseModes {\n+    SRM_ALLOW,\n+    SRM_REJECT,\n+};\n+\n+extern SpkReuseModes SpkReuseMode;\n+\n extern bool fCheckBlockIndex;\n extern bool fCheckpointsEnabled;\n extern size_t nCoinCacheUsage;"
      }
    ]
  },
  {
    "sha": "6f19051ff5d8966bbb5da04c5cebdaeed28c6829",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjE5MDUxZmY1ZDg5NjZiYmI1ZGEwNGM1Y2ViZGFlZWQyOGM2ODI5",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-13T05:09:42Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-08-29T06:57:49Z"
      },
      "message": "txmempool: Store pointers to transactions claiming SPKs",
      "tree": {
        "sha": "0ca379b7547d2eba41aae37b1f5ddfda86680b33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ca379b7547d2eba41aae37b1f5ddfda86680b33"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f19051ff5d8966bbb5da04c5cebdaeed28c6829",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f19051ff5d8966bbb5da04c5cebdaeed28c6829",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f19051ff5d8966bbb5da04c5cebdaeed28c6829",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f19051ff5d8966bbb5da04c5cebdaeed28c6829/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "caf9b0d6616b767190ee66c9f3927a826c8fadb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caf9b0d6616b767190ee66c9f3927a826c8fadb2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/caf9b0d6616b767190ee66c9f3927a826c8fadb2"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 24,
      "deletions": 11
    },
    "files": [
      {
        "sha": "05753343526418fd154f5e748f18ec3a87b4a201",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 5,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f19051ff5d8966bbb5da04c5cebdaeed28c6829/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f19051ff5d8966bbb5da04c5cebdaeed28c6829/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=6f19051ff5d8966bbb5da04c5cebdaeed28c6829",
        "patch": "@@ -427,14 +427,22 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n     newit->vTxHashesIdx = vTxHashes.size() - 1;\n \n     for (auto& vSPK : entry.mapSPK) {\n-        mapUsedSPK[vSPK.first] = MemPool_SPK_State(mapUsedSPK[vSPK.first] | vSPK.second);\n+        const uint160& SPKKey = vSPK.first;\n+        const MemPool_SPK_State& claims = vSPK.second;\n+        if (claims & MSS_CREATED) {\n+            mapUsedSPK[SPKKey].first = &tx;\n+        }\n+        if (claims & MSS_SPENT) {\n+            mapUsedSPK[SPKKey].second = &tx;\n+        }\n     }\n \n     return true;\n }\n \n void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n {\n+    const CTransaction& tx = it->GetTx();\n     NotifyEntryRemoved(it->GetSharedTx(), reason);\n     const uint256 hash = it->GetTx().GetHash();\n     for (const CTxIn& txin : it->GetTx().vin)\n@@ -450,10 +458,15 @@ void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n         vTxHashes.clear();\n \n     for (auto& vSPK : it->mapSPK) {\n-        if (vSPK.second == mapUsedSPK.find(vSPK.first)->second) {\n-            mapUsedSPK.erase(vSPK.first);\n-        } else {\n-            mapUsedSPK[vSPK.first] = MemPool_SPK_State(mapUsedSPK[vSPK.first] & ~vSPK.second);\n+        const uint160& SPKKey = vSPK.first;\n+        if (mapUsedSPK[SPKKey].first == &tx) {\n+            mapUsedSPK[SPKKey].first = NULL;\n+        }\n+        if (mapUsedSPK[SPKKey].second == &tx) {\n+            mapUsedSPK[SPKKey].second = NULL;\n+        }\n+        if (!(mapUsedSPK[SPKKey].first || mapUsedSPK[SPKKey].second)) {\n+            mapUsedSPK.erase(SPKKey);\n         }\n     }\n "
      },
      {
        "sha": "0636f695cf6023903cafd190d0e9440295a5e9d5",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f19051ff5d8966bbb5da04c5cebdaeed28c6829/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f19051ff5d8966bbb5da04c5cebdaeed28c6829/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=6f19051ff5d8966bbb5da04c5cebdaeed28c6829",
        "patch": "@@ -51,8 +51,8 @@ struct LockPoints\n \n enum MemPool_SPK_State {\n     MSS_UNSEEN  = 0,\n-    MSS_SPENT   = 1,\n-    MSS_CREATED = 2,\n+    MSS_SPENT   = 1,  // .second\n+    MSS_CREATED = 2,  // .first\n     MSS_BOTH    = 3,\n };\n \n@@ -494,7 +494,7 @@ class CTxMemPool\n     const setEntries & GetMemPoolParents(txiter entry) const;\n     const setEntries & GetMemPoolChildren(txiter entry) const;\n \n-    SPKStates_t mapUsedSPK;\n+    std::map<uint160, std::pair<const CTransaction *, const CTransaction *>> mapUsedSPK;\n \n private:\n     typedef std::map<txiter, setEntries, CompareIteratorByHash> cacheMap;"
      },
      {
        "sha": "4bf7578a071ee93d6f271c477478c4117bff5df2",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f19051ff5d8966bbb5da04c5cebdaeed28c6829/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f19051ff5d8966bbb5da04c5cebdaeed28c6829/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=6f19051ff5d8966bbb5da04c5cebdaeed28c6829",
        "patch": "@@ -599,9 +599,9 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n                         return state.DoS(0, false, REJECT_NONSTANDARD, \"txn-spk-reused-change\");\n                     }\n                 }\n-                mssit = pool.mapUsedSPK.find(hashSPK);\n-                if (mssit != pool.mapUsedSPK.end()) {\n-                    if (mssit->second & MSS_SPENT) {\n+                const auto& SPKit = pool.mapUsedSPK.find(hashSPK);\n+                if (SPKit != pool.mapUsedSPK.end()) {\n+                    if (SPKit->second.second /* Spent */) {\n                         return state.DoS(0, false, REJECT_DUPLICATE, \"txn-mempool-spk-reused-spend\");\n                     }\n                 }"
      }
    ]
  },
  {
    "sha": "9b75ab5b39055c68e7bc410f0380cc15438206ef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Yjc1YWI1YjM5MDU1YzY4ZTdiYzQxMGYwMzgwY2MxNTQzODIwNmVm",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-13T05:34:44Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-08-29T06:58:07Z"
      },
      "message": "Treat SPK conflicts the same as RBF-optin TxIn conflicts (except never DoS ban)",
      "tree": {
        "sha": "c3a3cbba05f352bead999f182981a0e87ba74829",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3a3cbba05f352bead999f182981a0e87ba74829"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b75ab5b39055c68e7bc410f0380cc15438206ef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b75ab5b39055c68e7bc410f0380cc15438206ef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b75ab5b39055c68e7bc410f0380cc15438206ef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b75ab5b39055c68e7bc410f0380cc15438206ef/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f19051ff5d8966bbb5da04c5cebdaeed28c6829",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f19051ff5d8966bbb5da04c5cebdaeed28c6829",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f19051ff5d8966bbb5da04c5cebdaeed28c6829"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 18,
      "deletions": 7
    },
    "files": [
      {
        "sha": "52fcadd10e0754b895963390caca475d9265d1bb",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 7,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b75ab5b39055c68e7bc410f0380cc15438206ef/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b75ab5b39055c68e7bc410f0380cc15438206ef/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9b75ab5b39055c68e7bc410f0380cc15438206ef",
        "patch": "@@ -481,7 +481,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n     SPKStates_t mapSPK;\n \n     // Check for conflicts with in-memory transactions\n-    std::set<uint256> setConflicts;\n+    std::map<uint256, bool> setConflicts;\n     {\n     LOCK(pool.cs); // protect pool.mapNextTx\n     for (const CTxIn &txin : tx.vin)\n@@ -520,16 +520,22 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n                     return state.Invalid(false, REJECT_DUPLICATE, \"txn-mempool-conflict\");\n                 }\n \n-                setConflicts.insert(ptxConflicting->GetHash());\n+                setConflicts.emplace(ptxConflicting->GetHash(), true);\n             }\n         }\n     }\n \n     if (spk_reuse_mode != SRM_ALLOW) {\n         for (const CTxOut& txout : tx.vout) {\n             uint160 hashSPK = ScriptHashkey(txout.scriptPubKey);\n-            if (pool.mapUsedSPK.find(hashSPK) != pool.mapUsedSPK.end()) {\n-                return state.DoS(0, false, REJECT_DUPLICATE, \"txn-mempool-spk-reused\");\n+            const auto& SPKUsedIn = pool.mapUsedSPK.find(hashSPK);\n+            if (SPKUsedIn != pool.mapUsedSPK.end()) {\n+                if (SPKUsedIn->second.first) {\n+                    setConflicts.emplace(SPKUsedIn->second.first->GetHash(), false);\n+                }\n+                if (SPKUsedIn->second.second) {\n+                    setConflicts.emplace(SPKUsedIn->second.second->GetHash(), false);\n+                }\n             }\n             if (mapSPK.find(hashSPK) != mapSPK.end()) {\n                 return state.DoS(0, false, REJECT_NONSTANDARD, \"txn-spk-reused-twinoutputs\");\n@@ -602,7 +608,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n                 const auto& SPKit = pool.mapUsedSPK.find(hashSPK);\n                 if (SPKit != pool.mapUsedSPK.end()) {\n                     if (SPKit->second.second /* Spent */) {\n-                        return state.DoS(0, false, REJECT_DUPLICATE, \"txn-mempool-spk-reused-spend\");\n+                        setConflicts.emplace(SPKit->second.second->GetHash(), false);\n                     }\n                 }\n                 mapSPK[hashSPK] = MemPool_SPK_State(mapSPK[hashSPK] | MSS_SPENT);\n@@ -685,8 +691,12 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         for (CTxMemPool::txiter ancestorIt : setAncestors)\n         {\n             const uint256 &hashAncestor = ancestorIt->GetTx().GetHash();\n-            if (setConflicts.count(hashAncestor))\n+            const auto& conflictit = setConflicts.find(hashAncestor);\n+            if (conflictit != setConflicts.end())\n             {\n+                if (!conflictit->second /* mere SPK conflict, NOT invalid */) {\n+                    return state.DoS(0, false, REJECT_NONSTANDARD, \"txn-spk-reused-chained\");\n+                }\n                 return state.DoS(10, false,\n                                  REJECT_INVALID, \"bad-txns-spends-conflicting-tx\", false,\n                                  strprintf(\"%s spends conflicting transaction %s\",\n@@ -713,8 +723,9 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             std::set<uint256> setConflictsParents;\n             const int maxDescendantsToVisit = 100;\n             CTxMemPool::setEntries setIterConflicting;\n-            for (const uint256 &hashConflicting : setConflicts)\n+            for (const auto &conflictit : setConflicts)\n             {\n+                const uint256& hashConflicting = conflictit.first;\n                 CTxMemPool::txiter mi = pool.mapTx.find(hashConflicting);\n                 if (mi == pool.mapTx.end())\n                     continue;"
      }
    ]
  }
]