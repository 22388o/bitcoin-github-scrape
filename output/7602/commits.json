[
  {
    "sha": "23c87dfa2fb12869235d512a96ed9d059cc973ed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyM2M4N2RmYTJmYjEyODY5MjM1ZDUxMmE5NmVkOWQwNTljYzk3M2Vk",
    "commit": {
      "author": {
        "name": "instagibbs",
        "email": "gsanders87@gmail.com",
        "date": "2016-02-25T21:30:52Z"
      },
      "committer": {
        "name": "instagibbs",
        "email": "gsanders87@gmail.com",
        "date": "2016-02-25T21:30:52Z"
      },
      "message": "Add rpc call zaptransaction to delete transaction from wallet without rescan.",
      "tree": {
        "sha": "57c9bb61dd3d6fde044b989ea639ff52304e29ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57c9bb61dd3d6fde044b989ea639ff52304e29ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23c87dfa2fb12869235d512a96ed9d059cc973ed",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23c87dfa2fb12869235d512a96ed9d059cc973ed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/23c87dfa2fb12869235d512a96ed9d059cc973ed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23c87dfa2fb12869235d512a96ed9d059cc973ed/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "317462123f8e41fd7dd967ab907e59ddffb19898",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/317462123f8e41fd7dd967ab907e59ddffb19898",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/317462123f8e41fd7dd967ab907e59ddffb19898"
      }
    ],
    "stats": {
      "total": 102,
      "additions": 102,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7eb075432f7dc13e3b1377cf13d1e1e73a335bc1",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 0,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23c87dfa2fb12869235d512a96ed9d059cc973ed/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23c87dfa2fb12869235d512a96ed9d059cc973ed/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=23c87dfa2fb12869235d512a96ed9d059cc973ed",
        "patch": "@@ -2497,6 +2497,44 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue zaptransaction(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"zaptransaction \\\"txid\\\"\\n\"\n+            \"\\nDeletes the specified transaction from the wallet. This will effect wallet balances.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"txid\\\"           (string, required) The hex-encoded id of the transaction you are deleting\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"zaptransaction\", \"\\\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\\\"\") +\n+            \"\\nAs a JSON-RPC call\\n\"\n+            + HelpExampleRpc(\"zaptransaction\", \"\\\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+    vector<uint256> vHash;\n+    vHash.push_back(hash);\n+    vector<uint256> vHashOut;\n+\n+    if(pwalletMain->ZapSelectTx(vHash, vHashOut) != DB_LOAD_OK) {\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Could not properly delete the transaction.\");\n+    }\n+\n+    if(vHashOut.empty()) {\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Transaction does not exist in wallet.\");\n+    }\n+\n+    ThreadFlushWalletDB(pwalletMain->strWalletFile);\n+\n+    return NullUniValue;\n+}\n+\n extern UniValue dumpprivkey(const UniValue& params, bool fHelp); // in rpcdump.cpp\n extern UniValue importprivkey(const UniValue& params, bool fHelp);\n extern UniValue importaddress(const UniValue& params, bool fHelp);\n@@ -2550,6 +2588,7 @@ const CRPCCommand vWalletRPCCommands[] =\n     { \"wallet\",             \"walletlock\",               &walletlock,               true  },\n     { \"wallet\",             \"walletpassphrasechange\",   &walletpassphrasechange,   true  },\n     { \"wallet\",             \"walletpassphrase\",         &walletpassphrase,         true  },\n+    { \"wallet\",             \"zaptransaction\",           &zaptransaction,           true  },\n };\n \n void walletRegisterRPCCommands()"
      },
      {
        "sha": "004c77c78db5dae4b4685e73d64cce222f60c89e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23c87dfa2fb12869235d512a96ed9d059cc973ed/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23c87dfa2fb12869235d512a96ed9d059cc973ed/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=23c87dfa2fb12869235d512a96ed9d059cc973ed",
        "patch": "@@ -2352,6 +2352,31 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n     return DB_LOAD_OK;\n }\n \n+DBErrors CWallet::ZapSelectTx(vector<uint256>& vHashIn, vector<uint256>& vHashOut)\n+{\n+    if (!fFileBacked)\n+        return DB_LOAD_OK;\n+    DBErrors nZapSelectTxRet = CWalletDB(strWalletFile,\"cr+\").ZapSelectTx(this, vHashIn, vHashOut);\n+    if (nZapSelectTxRet == DB_NEED_REWRITE)\n+    {\n+        if (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n+        {\n+            LOCK(cs_wallet);\n+            setKeyPool.clear();\n+            // Note: can't top-up keypool here, because wallet is locked.\n+            // User will be prompted to unlock wallet the next operation\n+            // that requires a new key.\n+        }\n+    }\n+\n+    if (nZapSelectTxRet != DB_LOAD_OK)\n+        return nZapSelectTxRet;\n+\n+    MarkDirty();\n+\n+    return DB_LOAD_OK;\n+\n+}\n \n DBErrors CWallet::ZapWalletTx(std::vector<CWalletTx>& vWtx)\n {"
      },
      {
        "sha": "a5ac15fca74116e75446ca3004ef1e5b2e91ebae",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23c87dfa2fb12869235d512a96ed9d059cc973ed/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23c87dfa2fb12869235d512a96ed9d059cc973ed/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=23c87dfa2fb12869235d512a96ed9d059cc973ed",
        "patch": "@@ -790,6 +790,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     DBErrors LoadWallet(bool& fFirstRunRet);\n     DBErrors ZapWalletTx(std::vector<CWalletTx>& vWtx);\n+    DBErrors ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut);\n \n     bool SetAddressBook(const CTxDestination& address, const std::string& strName, const std::string& purpose);\n "
      },
      {
        "sha": "722ad77d10b616d12fa83830be668e8fa375e378",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23c87dfa2fb12869235d512a96ed9d059cc973ed/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23c87dfa2fb12869235d512a96ed9d059cc973ed/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=23c87dfa2fb12869235d512a96ed9d059cc973ed",
        "patch": "@@ -785,6 +785,42 @@ DBErrors CWalletDB::FindWalletTx(CWallet* pwallet, vector<uint256>& vTxHash, vec\n     return result;\n }\n \n+DBErrors CWalletDB::ZapSelectTx(CWallet* pwallet, vector<uint256>& vTxHashIn, vector<uint256>& vTxHashOut)\n+{\n+    // build list of wallet TXs and hashes\n+    vector<uint256> vTxHash;\n+    vector<CWalletTx> vWtx;\n+    DBErrors err = FindWalletTx(pwallet, vTxHash, vWtx);\n+    if (err != DB_LOAD_OK) {\n+        return err;\n+    }\n+\n+    std::sort(vTxHash.begin(), vTxHash.end());\n+    std::sort(vTxHashIn.begin(), vTxHashIn.end());\n+\n+    // erase each matching wallet TX\n+    bool delerror = false;\n+    vector<uint256>::iterator it = vTxHashIn.begin();\n+    BOOST_FOREACH (uint256 hash, vTxHash) {\n+        while ((*it) < hash) {\n+            it++;\n+        }\n+        if ((*it) == hash) {\n+            pwallet->mapWallet.erase(hash);\n+            if(!EraseTx(hash)) {\n+                LogPrint(\"db\", \"Transaction was found for deletion but returned database error: %s\\n\", hash.GetHex());\n+                delerror = true;\n+            }\n+            vTxHashOut.push_back(hash);\n+        }\n+    }\n+\n+    if (delerror) {\n+        return DB_CORRUPT;\n+    }\n+    return DB_LOAD_OK;\n+}\n+\n DBErrors CWalletDB::ZapWalletTx(CWallet* pwallet, vector<CWalletTx>& vWtx)\n {\n     // build list of wallet TXs"
      },
      {
        "sha": "dba6ddc2a7fa320830cbbd22f524bd32ef9df1be",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23c87dfa2fb12869235d512a96ed9d059cc973ed/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23c87dfa2fb12869235d512a96ed9d059cc973ed/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=23c87dfa2fb12869235d512a96ed9d059cc973ed",
        "patch": "@@ -130,6 +130,7 @@ class CWalletDB : public CDB\n     DBErrors LoadWallet(CWallet* pwallet);\n     DBErrors FindWalletTx(CWallet* pwallet, std::vector<uint256>& vTxHash, std::vector<CWalletTx>& vWtx);\n     DBErrors ZapWalletTx(CWallet* pwallet, std::vector<CWalletTx>& vWtx);\n+    DBErrors ZapSelectTx(CWallet* pwallet, std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut);\n     static bool Recover(CDBEnv& dbenv, const std::string& filename, bool fOnlyKeys);\n     static bool Recover(CDBEnv& dbenv, const std::string& filename);\n "
      }
    ]
  }
]