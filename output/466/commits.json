[
  {
    "sha": "12c9ee06ea78b3e1dc469f8a17b21dc0f772ab52",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMmM5ZWUwNmVhNzhiM2UxZGM0NjlmOGExN2IyMWRjMGY3NzJhYjUy",
    "commit": {
      "author": {
        "name": "Giel van Schijndel",
        "email": "me@mortis.eu",
        "date": "2011-08-12T08:56:50Z"
      },
      "committer": {
        "name": "Giel van Schijndel",
        "email": "me@mortis.eu",
        "date": "2011-10-02T13:07:22Z"
      },
      "message": "Remove the builtin CPU miner\n\nConsidering that CPU mining is hardly worth the time anymore, especially\nwhen solo mining, the internal CPU miner has become next to worthless.\nAs such, remove it to reduce the amount of code that can contain bugs.\n\nIf you still want to solo mine using your CPU you can use the RPC\n\"getwork\" interface with Jeff Garzik's RPC CPU miner:\nhttps://github.com/jgarzik/cpuminer\n\nSigned-off-by: Giel van Schijndel <me@mortis.eu>",
      "tree": {
        "sha": "d40070bd8e52d14a77e177d45138fd829f57e69d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d40070bd8e52d14a77e177d45138fd829f57e69d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12c9ee06ea78b3e1dc469f8a17b21dc0f772ab52",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12c9ee06ea78b3e1dc469f8a17b21dc0f772ab52",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/12c9ee06ea78b3e1dc469f8a17b21dc0f772ab52",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12c9ee06ea78b3e1dc469f8a17b21dc0f772ab52/comments",
    "author": {
      "login": "muggenhor",
      "id": 484066,
      "node_id": "MDQ6VXNlcjQ4NDA2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/484066?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muggenhor",
      "html_url": "https://github.com/muggenhor",
      "followers_url": "https://api.github.com/users/muggenhor/followers",
      "following_url": "https://api.github.com/users/muggenhor/following{/other_user}",
      "gists_url": "https://api.github.com/users/muggenhor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muggenhor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muggenhor/subscriptions",
      "organizations_url": "https://api.github.com/users/muggenhor/orgs",
      "repos_url": "https://api.github.com/users/muggenhor/repos",
      "events_url": "https://api.github.com/users/muggenhor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muggenhor/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "muggenhor",
      "id": 484066,
      "node_id": "MDQ6VXNlcjQ4NDA2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/484066?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muggenhor",
      "html_url": "https://github.com/muggenhor",
      "followers_url": "https://api.github.com/users/muggenhor/followers",
      "following_url": "https://api.github.com/users/muggenhor/following{/other_user}",
      "gists_url": "https://api.github.com/users/muggenhor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muggenhor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muggenhor/subscriptions",
      "organizations_url": "https://api.github.com/users/muggenhor/orgs",
      "repos_url": "https://api.github.com/users/muggenhor/repos",
      "events_url": "https://api.github.com/users/muggenhor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muggenhor/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1ff3583e41b0cdb0ee902028b4a37aef41a6f8ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ff3583e41b0cdb0ee902028b4a37aef41a6f8ba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ff3583e41b0cdb0ee902028b4a37aef41a6f8ba"
      }
    ],
    "stats": {
      "total": 270,
      "additions": 6,
      "deletions": 264
    },
    "files": [
      {
        "sha": "2305425d7dba7e227a60529c409c406b042344d8",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 16,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12c9ee06ea78b3e1dc469f8a17b21dc0f772ab52/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12c9ee06ea78b3e1dc469f8a17b21dc0f772ab52/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=12c9ee06ea78b3e1dc469f8a17b21dc0f772ab52",
        "patch": "@@ -243,9 +243,9 @@ Value getgenerate(const Array& params, bool fHelp)\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n             \"getgenerate\\n\"\n-            \"Returns true or false.\");\n+            \"Internal generation is removed, this function always returns false.\");\n \n-    return (bool)fGenerateBitcoins;\n+    return false;\n }\n \n \n@@ -257,22 +257,14 @@ Value setgenerate(const Array& params, bool fHelp)\n             \"<generate> is true or false to turn generation on or off.\\n\"\n             \"Generation is limited to [genproclimit] processors, -1 is unlimited.\");\n \n-    bool fGenerate = true;\n     if (params.size() > 0)\n-        fGenerate = params[0].get_bool();\n+        // unused parameter, used to be fGenerate, keep type-checking it though\n+        (void)params[0].get_bool();\n \n     if (params.size() > 1)\n-    {\n-        int nGenProcLimit = params[1].get_int();\n-        fLimitProcessors = (nGenProcLimit != -1);\n-        WriteSetting(\"fLimitProcessors\", fLimitProcessors);\n-        if (nGenProcLimit != -1)\n-            WriteSetting(\"nLimitProcessors\", nLimitProcessors = nGenProcLimit);\n-        if (nGenProcLimit == 0)\n-            fGenerate = false;\n-    }\n+        // unused parameter, used to be fGenerate, keep type-checking it though\n+        (void)params[1].get_int();\n \n-    GenerateBitcoins(fGenerate, pwalletMain);\n     return Value::null;\n }\n \n@@ -303,8 +295,6 @@ Value getinfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"blocks\",        (int)nBestHeight));\n     obj.push_back(Pair(\"connections\",   (int)vNodes.size()));\n     obj.push_back(Pair(\"proxy\",         (fUseProxy ? addrProxy.ToStringIPPort() : string())));\n-    obj.push_back(Pair(\"generate\",      (bool)fGenerateBitcoins));\n-    obj.push_back(Pair(\"genproclimit\",  (int)(fLimitProcessors ? nLimitProcessors : -1)));\n     obj.push_back(Pair(\"difficulty\",    (double)GetDifficulty()));\n     obj.push_back(Pair(\"hashespersec\",  gethashespersec(params, false)));\n     obj.push_back(Pair(\"testnet\",       fTestNet));"
      },
      {
        "sha": "12c4e302c6846924e52886a190a625b14303d8fa",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12c9ee06ea78b3e1dc469f8a17b21dc0f772ab52/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12c9ee06ea78b3e1dc469f8a17b21dc0f772ab52/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=12c9ee06ea78b3e1dc469f8a17b21dc0f772ab52",
        "patch": "@@ -822,12 +822,7 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n                 ssKey >> strKey;\n \n                 // Options\n-#ifndef QT_GUI\n-                if (strKey == \"fGenerateBitcoins\")  ssValue >> fGenerateBitcoins;\n-#endif\n                 if (strKey == \"nTransactionFee\")    ssValue >> nTransactionFee;\n-                if (strKey == \"fLimitProcessors\")   ssValue >> fLimitProcessors;\n-                if (strKey == \"nLimitProcessors\")   ssValue >> nLimitProcessors;\n                 if (strKey == \"fMinimizeToTray\")    ssValue >> fMinimizeToTray;\n                 if (strKey == \"fMinimizeOnClose\")   ssValue >> fMinimizeOnClose;\n                 if (strKey == \"fUseProxy\")          ssValue >> fUseProxy;\n@@ -849,7 +844,6 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n         WriteTx(hash, pwallet->mapWallet[hash]);\n \n     printf(\"nFileVersion = %d\\n\", nFileVersion);\n-    printf(\"fGenerateBitcoins = %d\\n\", fGenerateBitcoins);\n     printf(\"nTransactionFee = %\"PRI64d\"\\n\", nTransactionFee);\n     printf(\"fMinimizeToTray = %d\\n\", fMinimizeToTray);\n     printf(\"fMinimizeOnClose = %d\\n\", fMinimizeOnClose);"
      },
      {
        "sha": "4a692277862c3ba3793973baca01ade9dbf8f75b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12c9ee06ea78b3e1dc469f8a17b21dc0f772ab52/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12c9ee06ea78b3e1dc469f8a17b21dc0f772ab52/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=12c9ee06ea78b3e1dc469f8a17b21dc0f772ab52",
        "patch": "@@ -169,8 +169,6 @@ bool AppInit2(int argc, char* argv[])\n           _(\"Options:\\n\") +\n             \"  -conf=<file>     \\t\\t  \" + _(\"Specify configuration file (default: bitcoin.conf)\\n\") +\n             \"  -pid=<file>      \\t\\t  \" + _(\"Specify pid file (default: bitcoind.pid)\\n\") +\n-            \"  -gen             \\t\\t  \" + _(\"Generate coins\\n\") +\n-            \"  -gen=0           \\t\\t  \" + _(\"Don't generate coins\\n\") +\n             \"  -min             \\t\\t  \" + _(\"Start minimized\\n\") +\n             \"  -datadir=<dir>   \\t\\t  \" + _(\"Specify data directory\\n\") +\n             \"  -timeout=<n>     \\t  \"   + _(\"Specify connection timeout (in milliseconds)\\n\") +\n@@ -436,8 +434,6 @@ bool AppInit2(int argc, char* argv[])\n         return false;\n     }\n \n-    fGenerateBitcoins = GetBoolArg(\"-gen\");\n-\n     if (mapArgs.count(\"-proxy\"))\n     {\n         fUseProxy = true;"
      },
      {
        "sha": "0ee944aa5ef3e03234dfce56f67d2d6a23ea91f3",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 231,
        "changes": 231,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12c9ee06ea78b3e1dc469f8a17b21dc0f772ab52/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12c9ee06ea78b3e1dc469f8a17b21dc0f772ab52/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=12c9ee06ea78b3e1dc469f8a17b21dc0f772ab52",
        "patch": "@@ -53,10 +53,7 @@ double dHashesPerSec;\n int64 nHPSTimerStart;\n \n // Settings\n-int fGenerateBitcoins = false;\n int64 nTransactionFee = 0;\n-int fLimitProcessors = false;\n-int nLimitProcessors = 1;\n int fMinimizeToTray = true;\n int fMinimizeOnClose = true;\n #if USE_UPNP\n@@ -2625,39 +2622,6 @@ inline void SHA256Transform(void* pstate, void* pinput, const void* pinit)\n     CryptoPP::SHA256::Transform((CryptoPP::word32*)pstate, (CryptoPP::word32*)pinput);\n }\n \n-//\n-// ScanHash scans nonces looking for a hash with at least some zero bits.\n-// It operates on big endian data.  Caller does the byte reversing.\n-// All input buffers are 16-byte aligned.  nNonce is usually preserved\n-// between calls, but periodically or if nNonce is 0xffff0000 or above,\n-// the block is rebuilt and nNonce starts over at zero.\n-//\n-unsigned int static ScanHash_CryptoPP(char* pmidstate, char* pdata, char* phash1, char* phash, unsigned int& nHashesDone)\n-{\n-    unsigned int& nNonce = *(unsigned int*)(pdata + 12);\n-    for (;;)\n-    {\n-        // Crypto++ SHA-256\n-        // Hash pdata using pmidstate as the starting state into\n-        // preformatted buffer phash1, then hash phash1 into phash\n-        nNonce++;\n-        SHA256Transform(phash1, pdata, pmidstate);\n-        SHA256Transform(phash, phash1, pSHA256InitState);\n-\n-        // Return the nonce if the hash has at least some zero bits,\n-        // caller will check if it has enough to reach the target\n-        if (((unsigned short*)phash)[14] == 0)\n-            return nNonce;\n-\n-        // If nothing found after trying for a while, return -1\n-        if ((nNonce & 0xffff) == 0)\n-        {\n-            nHashesDone = 0xffff+1;\n-            return -1;\n-        }\n-    }\n-}\n-\n // Some explaining would be appreciated\n class COrphan\n {\n@@ -2926,198 +2890,3 @@ bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey)\n     Sleep(2000);\n     return true;\n }\n-\n-void static ThreadBitcoinMiner(void* parg);\n-\n-void static BitcoinMiner(CWallet *pwallet)\n-{\n-    printf(\"BitcoinMiner started\\n\");\n-    SetThreadPriority(THREAD_PRIORITY_LOWEST);\n-\n-    // Each thread has its own key and counter\n-    CReserveKey reservekey(pwallet);\n-    unsigned int nExtraNonce = 0;\n-\n-    while (fGenerateBitcoins)\n-    {\n-        if (AffinityBugWorkaround(ThreadBitcoinMiner))\n-            return;\n-        if (fShutdown)\n-            return;\n-        while (vNodes.empty() || IsInitialBlockDownload())\n-        {\n-            Sleep(1000);\n-            if (fShutdown)\n-                return;\n-            if (!fGenerateBitcoins)\n-                return;\n-        }\n-\n-\n-        //\n-        // Create new block\n-        //\n-        unsigned int nTransactionsUpdatedLast = nTransactionsUpdated;\n-        CBlockIndex* pindexPrev = pindexBest;\n-\n-        auto_ptr<CBlock> pblock(CreateNewBlock(reservekey));\n-        if (!pblock.get())\n-            return;\n-        IncrementExtraNonce(pblock.get(), pindexPrev, nExtraNonce);\n-\n-        printf(\"Running BitcoinMiner with %d transactions in block\\n\", pblock->vtx.size());\n-\n-\n-        //\n-        // Prebuild hash buffers\n-        //\n-        char pmidstatebuf[32+16]; char* pmidstate = alignup<16>(pmidstatebuf);\n-        char pdatabuf[128+16];    char* pdata     = alignup<16>(pdatabuf);\n-        char phash1buf[64+16];    char* phash1    = alignup<16>(phash1buf);\n-\n-        FormatHashBuffers(pblock.get(), pmidstate, pdata, phash1);\n-\n-        unsigned int& nBlockTime = *(unsigned int*)(pdata + 64 + 4);\n-        unsigned int& nBlockNonce = *(unsigned int*)(pdata + 64 + 12);\n-\n-\n-        //\n-        // Search\n-        //\n-        int64 nStart = GetTime();\n-        uint256 hashTarget = CBigNum().SetCompact(pblock->nBits).getuint256();\n-        uint256 hashbuf[2];\n-        uint256& hash = *alignup<16>(hashbuf);\n-        loop\n-        {\n-            unsigned int nHashesDone = 0;\n-            unsigned int nNonceFound;\n-\n-            // Crypto++ SHA-256\n-            nNonceFound = ScanHash_CryptoPP(pmidstate, pdata + 64, phash1,\n-                                            (char*)&hash, nHashesDone);\n-\n-            // Check if something found\n-            if (nNonceFound != -1)\n-            {\n-                for (int i = 0; i < sizeof(hash)/4; i++)\n-                    ((unsigned int*)&hash)[i] = ByteReverse(((unsigned int*)&hash)[i]);\n-\n-                if (hash <= hashTarget)\n-                {\n-                    // Found a solution\n-                    pblock->nNonce = ByteReverse(nNonceFound);\n-                    assert(hash == pblock->GetHash());\n-\n-                    SetThreadPriority(THREAD_PRIORITY_NORMAL);\n-                    CheckWork(pblock.get(), *pwalletMain, reservekey);\n-                    SetThreadPriority(THREAD_PRIORITY_LOWEST);\n-                    break;\n-                }\n-            }\n-\n-            // Meter hashes/sec\n-            static int64 nHashCounter;\n-            if (nHPSTimerStart == 0)\n-            {\n-                nHPSTimerStart = GetTimeMillis();\n-                nHashCounter = 0;\n-            }\n-            else\n-                nHashCounter += nHashesDone;\n-            if (GetTimeMillis() - nHPSTimerStart > 4000)\n-            {\n-                static CCriticalSection cs;\n-                CRITICAL_BLOCK(cs)\n-                {\n-                    if (GetTimeMillis() - nHPSTimerStart > 4000)\n-                    {\n-                        dHashesPerSec = 1000.0 * nHashCounter / (GetTimeMillis() - nHPSTimerStart);\n-                        nHPSTimerStart = GetTimeMillis();\n-                        nHashCounter = 0;\n-                        string strStatus = strprintf(\"    %.0f khash/s\", dHashesPerSec/1000.0);\n-                        UIThreadCall(boost::bind(CalledSetStatusBar, strStatus, 0));\n-                        static int64 nLogTime;\n-                        if (GetTime() - nLogTime > 30 * 60)\n-                        {\n-                            nLogTime = GetTime();\n-                            printf(\"%s \", DateTimeStrFormat(\"%x %H:%M\", GetTime()).c_str());\n-                            printf(\"hashmeter %3d CPUs %6.0f khash/s\\n\", vnThreadsRunning[3], dHashesPerSec/1000.0);\n-                        }\n-                    }\n-                }\n-            }\n-\n-            // Check for stop or if block needs to be rebuilt\n-            if (fShutdown)\n-                return;\n-            if (!fGenerateBitcoins)\n-                return;\n-            if (fLimitProcessors && vnThreadsRunning[3] > nLimitProcessors)\n-                return;\n-            if (vNodes.empty())\n-                break;\n-            if (nBlockNonce >= 0xffff0000)\n-                break;\n-            if (nTransactionsUpdated != nTransactionsUpdatedLast && GetTime() - nStart > 60)\n-                break;\n-            if (pindexPrev != pindexBest)\n-                break;\n-\n-            // Update nTime every few seconds\n-            pblock->nTime = max(pindexPrev->GetMedianTimePast()+1, GetAdjustedTime());\n-            nBlockTime = ByteReverse(pblock->nTime);\n-        }\n-    }\n-}\n-\n-void static ThreadBitcoinMiner(void* parg)\n-{\n-    CWallet* pwallet = (CWallet*)parg;\n-    try\n-    {\n-        vnThreadsRunning[3]++;\n-        BitcoinMiner(pwallet);\n-        vnThreadsRunning[3]--;\n-    }\n-    catch (std::exception& e) {\n-        vnThreadsRunning[3]--;\n-        PrintException(&e, \"ThreadBitcoinMiner()\");\n-    } catch (...) {\n-        vnThreadsRunning[3]--;\n-        PrintException(NULL, \"ThreadBitcoinMiner()\");\n-    }\n-    UIThreadCall(boost::bind(CalledSetStatusBar, \"\", 0));\n-    nHPSTimerStart = 0;\n-    if (vnThreadsRunning[3] == 0)\n-        dHashesPerSec = 0;\n-    printf(\"ThreadBitcoinMiner exiting, %d threads remaining\\n\", vnThreadsRunning[3]);\n-}\n-\n-\n-void GenerateBitcoins(bool fGenerate, CWallet* pwallet)\n-{\n-    if (fGenerateBitcoins != fGenerate)\n-    {\n-        fGenerateBitcoins = fGenerate;\n-        WriteSetting(\"fGenerateBitcoins\", fGenerateBitcoins);\n-        MainFrameRepaint();\n-    }\n-    if (fGenerateBitcoins)\n-    {\n-        int nProcessors = boost::thread::hardware_concurrency();\n-        printf(\"%d processors\\n\", nProcessors);\n-        if (nProcessors < 1)\n-            nProcessors = 1;\n-        if (fLimitProcessors && nProcessors > nLimitProcessors)\n-            nProcessors = nLimitProcessors;\n-        int nAddThreads = nProcessors - vnThreadsRunning[3];\n-        printf(\"Starting %d BitcoinMiner threads\\n\", nAddThreads);\n-        for (int i = 0; i < nAddThreads; i++)\n-        {\n-            if (!CreateThread(ThreadBitcoinMiner, pwallet))\n-                printf(\"Error: CreateThread(ThreadBitcoinMiner) failed\\n\");\n-            Sleep(10);\n-        }\n-    }\n-}"
      },
      {
        "sha": "4018963d4079134af468b14bd14cbdd690d5aa36",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12c9ee06ea78b3e1dc469f8a17b21dc0f772ab52/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12c9ee06ea78b3e1dc469f8a17b21dc0f772ab52/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=12c9ee06ea78b3e1dc469f8a17b21dc0f772ab52",
        "patch": "@@ -67,10 +67,7 @@ extern CCriticalSection cs_setpwalletRegistered;\n extern std::set<CWallet*> setpwalletRegistered;\n \n // Settings\n-extern int fGenerateBitcoins;\n extern int64 nTransactionFee;\n-extern int fLimitProcessors;\n-extern int nLimitProcessors;\n extern int fMinimizeToTray;\n extern int fMinimizeOnClose;\n extern int fUseUPnP;\n@@ -93,7 +90,6 @@ bool LoadBlockIndex(bool fAllowNew=true);\n void PrintBlockTree();\n bool ProcessMessages(CNode* pfrom);\n bool SendMessages(CNode* pto, bool fSendTrickle);\n-void GenerateBitcoins(bool fGenerate, CWallet* pwallet);\n CBlock* CreateNewBlock(CReserveKey& reservekey);\n void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash1);"
      },
      {
        "sha": "79e633bb0a7750da6c91a753afaa5c8a50bec2f6",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12c9ee06ea78b3e1dc469f8a17b21dc0f772ab52/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12c9ee06ea78b3e1dc469f8a17b21dc0f772ab52/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=12c9ee06ea78b3e1dc469f8a17b21dc0f772ab52",
        "patch": "@@ -1774,9 +1774,6 @@ void StartNode(void* parg)\n     // Process messages\n     if (!CreateThread(ThreadMessageHandler, NULL))\n         printf(\"Error: CreateThread(ThreadMessageHandler) failed\\n\");\n-\n-    // Generate coins in the background\n-    GenerateBitcoins(fGenerateBitcoins, pwalletMain);\n }\n \n bool StopNode()"
      }
    ]
  },
  {
    "sha": "7b720ac1768113ec1b9598389c69fc0da67e8533",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YjcyMGFjMTc2ODExM2VjMWI5NTk4Mzg5YzY5ZmMwZGE2N2U4NTMz",
    "commit": {
      "author": {
        "name": "Giel van Schijndel",
        "email": "me@mortis.eu",
        "date": "2011-08-12T20:07:34Z"
      },
      "committer": {
        "name": "Giel van Schijndel",
        "email": "me@mortis.eu",
        "date": "2011-10-02T13:07:22Z"
      },
      "message": "Deprecate [sg]etgenerate\n\nSigned-off-by: Giel van Schijndel <me@mortis.eu>",
      "tree": {
        "sha": "a6521c104435b718365388272812ba5f07096df2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a6521c104435b718365388272812ba5f07096df2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b720ac1768113ec1b9598389c69fc0da67e8533",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b720ac1768113ec1b9598389c69fc0da67e8533",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7b720ac1768113ec1b9598389c69fc0da67e8533",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b720ac1768113ec1b9598389c69fc0da67e8533/comments",
    "author": {
      "login": "muggenhor",
      "id": 484066,
      "node_id": "MDQ6VXNlcjQ4NDA2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/484066?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muggenhor",
      "html_url": "https://github.com/muggenhor",
      "followers_url": "https://api.github.com/users/muggenhor/followers",
      "following_url": "https://api.github.com/users/muggenhor/following{/other_user}",
      "gists_url": "https://api.github.com/users/muggenhor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muggenhor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muggenhor/subscriptions",
      "organizations_url": "https://api.github.com/users/muggenhor/orgs",
      "repos_url": "https://api.github.com/users/muggenhor/repos",
      "events_url": "https://api.github.com/users/muggenhor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muggenhor/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "muggenhor",
      "id": 484066,
      "node_id": "MDQ6VXNlcjQ4NDA2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/484066?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muggenhor",
      "html_url": "https://github.com/muggenhor",
      "followers_url": "https://api.github.com/users/muggenhor/followers",
      "following_url": "https://api.github.com/users/muggenhor/following{/other_user}",
      "gists_url": "https://api.github.com/users/muggenhor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muggenhor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muggenhor/subscriptions",
      "organizations_url": "https://api.github.com/users/muggenhor/orgs",
      "repos_url": "https://api.github.com/users/muggenhor/repos",
      "events_url": "https://api.github.com/users/muggenhor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muggenhor/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12c9ee06ea78b3e1dc469f8a17b21dc0f772ab52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12c9ee06ea78b3e1dc469f8a17b21dc0f772ab52",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12c9ee06ea78b3e1dc469f8a17b21dc0f772ab52"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0788e4a62f8836e5a4e973a3fb0188596cb35b93",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b720ac1768113ec1b9598389c69fc0da67e8533/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b720ac1768113ec1b9598389c69fc0da67e8533/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=7b720ac1768113ec1b9598389c69fc0da67e8533",
        "patch": "@@ -243,7 +243,8 @@ Value getgenerate(const Array& params, bool fHelp)\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n             \"getgenerate\\n\"\n-            \"Internal generation is removed, this function always returns false.\");\n+            \"Internal generation is removed, this function always returns false.\\n\"\n+            \"Deprecated, this will be removed from a future version.\");\n \n     return false;\n }\n@@ -255,7 +256,8 @@ Value setgenerate(const Array& params, bool fHelp)\n         throw runtime_error(\n             \"setgenerate <generate> [genproclimit]\\n\"\n             \"<generate> is true or false to turn generation on or off.\\n\"\n-            \"Generation is limited to [genproclimit] processors, -1 is unlimited.\");\n+            \"Generation is limited to [genproclimit] processors, -1 is unlimited.\\n\"\n+            \"Deprecated, this function is a no-op and will be removed from a future version.\");\n \n     if (params.size() > 0)\n         // unused parameter, used to be fGenerate, keep type-checking it though"
      }
    ]
  },
  {
    "sha": "e58d58fabc2a90d29ee65d2e308784a8e14c684e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNThkNThmYWJjMmE5MGQyOWVlNjVkMmUzMDg3ODRhOGUxNGM2ODRl",
    "commit": {
      "author": {
        "name": "Giel van Schijndel",
        "email": "me@mortis.eu",
        "date": "2011-10-02T13:32:55Z"
      },
      "committer": {
        "name": "Giel van Schijndel",
        "email": "me@mortis.eu",
        "date": "2011-10-02T13:32:55Z"
      },
      "message": "Remove now unused functions alignup and AffinityBugWorkaround\n\nSigned-off-by: Giel van Schijndel <me@mortis.eu>",
      "tree": {
        "sha": "1d0b462237d355da7352d3b3d7ccc201358602fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d0b462237d355da7352d3b3d7ccc201358602fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e58d58fabc2a90d29ee65d2e308784a8e14c684e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e58d58fabc2a90d29ee65d2e308784a8e14c684e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e58d58fabc2a90d29ee65d2e308784a8e14c684e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e58d58fabc2a90d29ee65d2e308784a8e14c684e/comments",
    "author": {
      "login": "muggenhor",
      "id": 484066,
      "node_id": "MDQ6VXNlcjQ4NDA2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/484066?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muggenhor",
      "html_url": "https://github.com/muggenhor",
      "followers_url": "https://api.github.com/users/muggenhor/followers",
      "following_url": "https://api.github.com/users/muggenhor/following{/other_user}",
      "gists_url": "https://api.github.com/users/muggenhor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muggenhor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muggenhor/subscriptions",
      "organizations_url": "https://api.github.com/users/muggenhor/orgs",
      "repos_url": "https://api.github.com/users/muggenhor/repos",
      "events_url": "https://api.github.com/users/muggenhor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muggenhor/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "muggenhor",
      "id": 484066,
      "node_id": "MDQ6VXNlcjQ4NDA2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/484066?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muggenhor",
      "html_url": "https://github.com/muggenhor",
      "followers_url": "https://api.github.com/users/muggenhor/followers",
      "following_url": "https://api.github.com/users/muggenhor/following{/other_user}",
      "gists_url": "https://api.github.com/users/muggenhor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muggenhor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muggenhor/subscriptions",
      "organizations_url": "https://api.github.com/users/muggenhor/orgs",
      "repos_url": "https://api.github.com/users/muggenhor/repos",
      "events_url": "https://api.github.com/users/muggenhor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muggenhor/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7b720ac1768113ec1b9598389c69fc0da67e8533",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b720ac1768113ec1b9598389c69fc0da67e8533",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7b720ac1768113ec1b9598389c69fc0da67e8533"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 0,
      "deletions": 38
    },
    "files": [
      {
        "sha": "4756dc7076afa26aa48b9f4b458927ace022d09c",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 38,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e58d58fabc2a90d29ee65d2e308784a8e14c684e/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e58d58fabc2a90d29ee65d2e308784a8e14c684e/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=e58d58fabc2a90d29ee65d2e308784a8e14c684e",
        "patch": "@@ -67,20 +67,6 @@ typedef unsigned long long  uint64;\n // This is needed because the foreach macro can't get over the comma in pair<t1, t2>\n #define PAIRTYPE(t1, t2)    std::pair<t1, t2>\n \n-// Align by increasing pointer, must have extra space at end of buffer\n-template <size_t nBytes, typename T>\n-T* alignup(T* p)\n-{\n-    union\n-    {\n-        T* ptr;\n-        size_t n;\n-    } u;\n-    u.ptr = p;\n-    u.n = (u.n + (nBytes-1)) & ~(nBytes-1);\n-    return u.ptr;\n-}\n-\n #ifdef __WXMSW__\n #define MSG_NOSIGNAL        0\n #define MSG_DONTWAIT        0\n@@ -702,28 +688,4 @@ inline void ExitThread(size_t nExitCode)\n }\n #endif\n \n-\n-\n-\n-\n-inline bool AffinityBugWorkaround(void(*pfn)(void*))\n-{\n-#ifdef __WXMSW__\n-    // Sometimes after a few hours affinity gets stuck on one processor\n-    DWORD dwProcessAffinityMask = -1;\n-    DWORD dwSystemAffinityMask = -1;\n-    GetProcessAffinityMask(GetCurrentProcess(), &dwProcessAffinityMask, &dwSystemAffinityMask);\n-    DWORD dwPrev1 = SetThreadAffinityMask(GetCurrentThread(), dwProcessAffinityMask);\n-    DWORD dwPrev2 = SetThreadAffinityMask(GetCurrentThread(), dwProcessAffinityMask);\n-    if (dwPrev2 != dwProcessAffinityMask)\n-    {\n-        printf(\"AffinityBugWorkaround() : SetThreadAffinityMask=%d, ProcessAffinityMask=%d, restarting thread\\n\", dwPrev2, dwProcessAffinityMask);\n-        if (!CreateThread(pfn, NULL))\n-            printf(\"Error: CreateThread() failed\\n\");\n-        return true;\n-    }\n-#endif\n-    return false;\n-}\n-\n #endif"
      }
    ]
  }
]