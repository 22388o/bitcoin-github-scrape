[
  {
    "sha": "ee4d1493e2a871b26201580c5a990a1df7a5e3f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTRkMTQ5M2UyYTg3MWIyNjIwMTU4MGM1YTk5MGExZGY3YTVlM2Y3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-07T21:09:55Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-21T00:04:15Z"
      },
      "message": "Drop upgrade-cancel callback registration for a generic \"resumeable\"\n\nInstead of passing a StartShutdown reference all the way up from\ntxdb, give ShowProgress a \"resumeable\" boolean, which is used to\ninform the user if the action will be resumed, but cancel is always\nallowed by just calling StartShutdown().",
      "tree": {
        "sha": "68c3480279fbdfdff0d67dd624efdacfdcacd1d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68c3480279fbdfdff0d67dd624efdacfdcacd1d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee4d1493e2a871b26201580c5a990a1df7a5e3f7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee4d1493e2a871b26201580c5a990a1df7a5e3f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee4d1493e2a871b26201580c5a990a1df7a5e3f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee4d1493e2a871b26201580c5a990a1df7a5e3f7/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "22e301a3d56dc9e6878380ee92c7d19ca43119d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22e301a3d56dc9e6878380ee92c7d19ca43119d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22e301a3d56dc9e6878380ee92c7d19ca43119d2"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 25,
      "deletions": 39
    },
    "files": [
      {
        "sha": "a1fbba963c7e9c01dcac60a76f5fe885213b7462",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 21,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee4d1493e2a871b26201580c5a990a1df7a5e3f7/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee4d1493e2a871b26201580c5a990a1df7a5e3f7/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=ee4d1493e2a871b26201580c5a990a1df7a5e3f7",
        "patch": "@@ -142,8 +142,8 @@ SplashScreen::~SplashScreen()\n bool SplashScreen::eventFilter(QObject * obj, QEvent * ev) {\n     if (ev->type() == QEvent::KeyPress) {\n         QKeyEvent *keyEvent = static_cast<QKeyEvent *>(ev);\n-        if(keyEvent->text()[0] == 'q' && breakAction != nullptr) {\n-            breakAction();\n+        if(keyEvent->text()[0] == 'q') {\n+            StartShutdown();\n         }\n     }\n     return QObject::eventFilter(obj, ev);\n@@ -170,27 +170,18 @@ static void InitMessage(SplashScreen *splash, const std::string &message)\n         Q_ARG(QColor, QColor(55,55,55)));\n }\n \n-static void ShowProgress(SplashScreen *splash, const std::string &title, int nProgress)\n+static void ShowProgress(SplashScreen *splash, const std::string &title, int nProgress, bool resume_possible)\n {\n-    InitMessage(splash, title + strprintf(\"%d\", nProgress) + \"%\");\n-}\n-\n-void SplashScreen::setBreakAction(const std::function<void(void)> &action)\n-{\n-    breakAction = action;\n-}\n-\n-static void SetProgressBreakAction(SplashScreen *splash, const std::function<void(void)> &action)\n-{\n-    QMetaObject::invokeMethod(splash, \"setBreakAction\",\n-        Qt::QueuedConnection,\n-        Q_ARG(std::function<void(void)>, action));\n+    InitMessage(splash, title + std::string(\"\\n\") +\n+            (resume_possible ? _(\"(press q to shutdown and continue later)\")\n+                                : _(\"press q to shutdown\")) +\n+            strprintf(\"\\n%d\", nProgress) + \"%\");\n }\n \n #ifdef ENABLE_WALLET\n void SplashScreen::ConnectWallet(CWallet* wallet)\n {\n-    wallet->ShowProgress.connect(boost::bind(ShowProgress, this, _1, _2));\n+    wallet->ShowProgress.connect(boost::bind(ShowProgress, this, _1, _2, false));\n     connectedWallets.push_back(wallet);\n }\n #endif\n@@ -199,8 +190,7 @@ void SplashScreen::subscribeToCoreSignals()\n {\n     // Connect signals to client\n     uiInterface.InitMessage.connect(boost::bind(InitMessage, this, _1));\n-    uiInterface.ShowProgress.connect(boost::bind(ShowProgress, this, _1, _2));\n-    uiInterface.SetProgressBreakAction.connect(boost::bind(SetProgressBreakAction, this, _1));\n+    uiInterface.ShowProgress.connect(boost::bind(ShowProgress, this, _1, _2, _3));\n #ifdef ENABLE_WALLET\n     uiInterface.LoadWallet.connect(boost::bind(&SplashScreen::ConnectWallet, this, _1));\n #endif\n@@ -210,10 +200,10 @@ void SplashScreen::unsubscribeFromCoreSignals()\n {\n     // Disconnect signals from client\n     uiInterface.InitMessage.disconnect(boost::bind(InitMessage, this, _1));\n-    uiInterface.ShowProgress.disconnect(boost::bind(ShowProgress, this, _1, _2));\n+    uiInterface.ShowProgress.disconnect(boost::bind(ShowProgress, this, _1, _2, _3));\n #ifdef ENABLE_WALLET\n     for (CWallet* const & pwallet : connectedWallets) {\n-        pwallet->ShowProgress.disconnect(boost::bind(ShowProgress, this, _1, _2));\n+        pwallet->ShowProgress.disconnect(boost::bind(ShowProgress, this, _1, _2, false));\n     }\n #endif\n }"
      },
      {
        "sha": "c6cfd503f7f105c6e7e768e313c771d85b7fb853",
        "filename": "src/qt/splashscreen.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee4d1493e2a871b26201580c5a990a1df7a5e3f7/src/qt/splashscreen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee4d1493e2a871b26201580c5a990a1df7a5e3f7/src/qt/splashscreen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.h?ref=ee4d1493e2a871b26201580c5a990a1df7a5e3f7",
        "patch": "@@ -36,8 +36,6 @@ public Q_SLOTS:\n     /** Show message and progress */\n     void showMessage(const QString &message, int alignment, const QColor &color);\n \n-    /** Sets the break action */\n-    void setBreakAction(const std::function<void(void)> &action);\n protected:\n     bool eventFilter(QObject * obj, QEvent * ev);\n \n@@ -55,8 +53,6 @@ public Q_SLOTS:\n     int curAlignment;\n \n     QList<CWallet*> connectedWallets;\n-\n-    std::function<void(void)> breakAction;\n };\n \n #endif // BITCOIN_QT_SPLASHSCREEN_H"
      },
      {
        "sha": "bbad3899ea06af3a4adc10937f9e1e354488389f",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee4d1493e2a871b26201580c5a990a1df7a5e3f7/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee4d1493e2a871b26201580c5a990a1df7a5e3f7/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=ee4d1493e2a871b26201580c5a990a1df7a5e3f7",
        "patch": "@@ -371,9 +371,9 @@ bool CCoinsViewDB::Upgrade() {\n     int64_t count = 0;\n     LogPrintf(\"Upgrading utxo-set database...\\n\");\n     LogPrintf(\"[0%%]...\");\n+    uiInterface.ShowProgress(_(\"Upgrading UTXO database\"), 0, true);\n     size_t batch_size = 1 << 24;\n     CDBBatch batch(db);\n-    uiInterface.SetProgressBreakAction(StartShutdown);\n     int reportDone = 0;\n     std::pair<unsigned char, uint256> key;\n     std::pair<unsigned char, uint256> prev_key = {DB_COINS, uint256()};\n@@ -386,7 +386,7 @@ bool CCoinsViewDB::Upgrade() {\n             if (count++ % 256 == 0) {\n                 uint32_t high = 0x100 * *key.second.begin() + *(key.second.begin() + 1);\n                 int percentageDone = (int)(high * 100.0 / 65536.0 + 0.5);\n-                uiInterface.ShowProgress(_(\"Upgrading UTXO database\") + \"\\n\"+ _(\"(press q to shutdown and continue later)\") + \"\\n\", percentageDone);\n+                uiInterface.ShowProgress(_(\"Upgrading UTXO database\"), percentageDone, true);\n                 if (reportDone < percentageDone/10) {\n                     // report max. every 10% step\n                     LogPrintf(\"[%d%%]...\", percentageDone);\n@@ -420,7 +420,7 @@ bool CCoinsViewDB::Upgrade() {\n     }\n     db.WriteBatch(batch);\n     db.CompactRange({DB_COINS, uint256()}, key);\n-    uiInterface.SetProgressBreakAction(std::function<void(void)>());\n+    uiInterface.ShowProgress(\"\", 100, false);\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }"
      },
      {
        "sha": "7f68c578eeb89aeeb217c12932d6c70b85ac5543",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee4d1493e2a871b26201580c5a990a1df7a5e3f7/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee4d1493e2a871b26201580c5a990a1df7a5e3f7/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=ee4d1493e2a871b26201580c5a990a1df7a5e3f7",
        "patch": "@@ -94,11 +94,11 @@ class CClientUIInterface\n     /** A wallet has been loaded. */\n     boost::signals2::signal<void (CWallet* wallet)> LoadWallet;\n \n-    /** Show progress e.g. for verifychain */\n-    boost::signals2::signal<void (const std::string &title, int nProgress)> ShowProgress;\n-\n-    /** Set progress break action (possible \"cancel button\" triggers that action) */\n-    boost::signals2::signal<void (std::function<void(void)> action)> SetProgressBreakAction;\n+    /**\n+     * Show progress e.g. for verifychain.\n+     * resume_possible indicates shutting down now will result in the current progress action resuming upon restart.\n+     */\n+    boost::signals2::signal<void (const std::string &title, int nProgress, bool resume_possible)> ShowProgress;\n \n     /** New block has been accepted */\n     boost::signals2::signal<void (bool, const CBlockIndex *)> NotifyBlockTip;"
      },
      {
        "sha": "e0df397089c2cc7aa5e3a8804973c591bc9f72ec",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee4d1493e2a871b26201580c5a990a1df7a5e3f7/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee4d1493e2a871b26201580c5a990a1df7a5e3f7/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ee4d1493e2a871b26201580c5a990a1df7a5e3f7",
        "patch": "@@ -3563,12 +3563,12 @@ bool LoadChainTip(const CChainParams& chainparams)\n \n CVerifyDB::CVerifyDB()\n {\n-    uiInterface.ShowProgress(_(\"Verifying blocks...\"), 0);\n+    uiInterface.ShowProgress(_(\"Verifying blocks...\"), 0, false);\n }\n \n CVerifyDB::~CVerifyDB()\n {\n-    uiInterface.ShowProgress(\"\", 100);\n+    uiInterface.ShowProgress(\"\", 100, false);\n }\n \n bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth)\n@@ -3598,7 +3598,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n             LogPrintf(\"[%d%%]...\", percentageDone);\n             reportDone = percentageDone/10;\n         }\n-        uiInterface.ShowProgress(_(\"Verifying blocks...\"), percentageDone);\n+        uiInterface.ShowProgress(_(\"Verifying blocks...\"), percentageDone, false);\n         if (pindex->nHeight < chainActive.Height()-nCheckDepth)\n             break;\n         if (fPruneMode && !(pindex->nStatus & BLOCK_HAVE_DATA)) {\n@@ -3649,7 +3649,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n         CBlockIndex *pindex = pindexState;\n         while (pindex != chainActive.Tip()) {\n             boost::this_thread::interruption_point();\n-            uiInterface.ShowProgress(_(\"Verifying blocks...\"), std::max(1, std::min(99, 100 - (int)(((double)(chainActive.Height() - pindex->nHeight)) / (double)nCheckDepth * 50))));\n+            uiInterface.ShowProgress(_(\"Verifying blocks...\"), std::max(1, std::min(99, 100 - (int)(((double)(chainActive.Height() - pindex->nHeight)) / (double)nCheckDepth * 50))), false);\n             pindex = chainActive.Next(pindex);\n             CBlock block;\n             if (!ReadBlockFromDisk(block, pindex, chainparams.GetConsensus()))\n@@ -3696,7 +3696,7 @@ bool ReplayBlocks(const CChainParams& params, CCoinsView* view)\n     if (hashHeads.empty()) return true; // We're already in a consistent state.\n     if (hashHeads.size() != 2) return error(\"ReplayBlocks(): unknown inconsistent state\");\n \n-    uiInterface.ShowProgress(_(\"Replaying blocks...\"), 0);\n+    uiInterface.ShowProgress(_(\"Replaying blocks...\"), 0, false);\n     LogPrintf(\"Replaying blocks\\n\");\n \n     const CBlockIndex* pindexOld = nullptr;  // Old tip during the interrupted flush.\n@@ -3747,7 +3747,7 @@ bool ReplayBlocks(const CChainParams& params, CCoinsView* view)\n \n     cache.SetBestBlock(pindexNew->GetBlockHash());\n     cache.Flush();\n-    uiInterface.ShowProgress(\"\", 100);\n+    uiInterface.ShowProgress(\"\", 100, false);\n     return true;\n }\n "
      }
    ]
  }
]