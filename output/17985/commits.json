[
  {
    "sha": "facb71576cd4d2e90fd03e09d29b42fa3d730e8c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWNiNzE1NzZjZDRkMmU5MGZkMDNlMDlkMjliNDJmYTNkNzMwZThj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-01-22T21:02:24Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-02-11T15:44:12Z"
      },
      "message": "net: Remove forcerelay of rejected txs",
      "tree": {
        "sha": "4e4b198deccbfde7de7efb99010f27cd6ed6f44f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e4b198deccbfde7de7efb99010f27cd6ed6f44f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/facb71576cd4d2e90fd03e09d29b42fa3d730e8c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhgrAv/TuKeE0BmYBqqV3B4fuon0Yz8PSR/OJ+T7N2MW9UjkvX6d2MdJupl9LGu\nGG4QWkUCq5ExGiSiR25bPUVhSgYdBFCfbuatLVh9wZNdgkth67P6/r+5ozboz7S5\nzOdxWFl7Or2ZqFYyfhw3HwtJGK2r6y7vadcrEKpEGi6zDtk/REaaRR89QKDEMprv\nkeLIkAT/8q5P38ji/bEnbUF31V2AfuUn/3raDjcl8kIXQ60A6MvpXUm6ckrXqK/M\nXXTQB54DiNyyeAyZIqCUInJL6eL5Sjx5ypAnnnmp274WtQ53RGL7n291ae8xKsQy\n4KIZSyOrn7XQ9gnVTsKqQreHp9li5KCxtQHeszyqHFmxvfR2HJZknOLREqBJoXvU\n6ARRsAErStR1WFE34XbuUxiwfHQFN24uOr3HBw7KB8ojvVKTAnNkpWgGJYSwQPFD\nLBA2pDoT+4ZdSCFK2ArFZkPpvROmVbkdRl74ExSoOt6ai8fO3tVneCMBekB+IjSn\nM6zIyJFd\n=hIqE\n-----END PGP SIGNATURE-----",
        "payload": "tree 4e4b198deccbfde7de7efb99010f27cd6ed6f44f\nparent ab7915f804b776c68ae017d55506c66af533f5a0\nauthor MarcoFalke <falke.marco@gmail.com> 1579726944 -0800\ncommitter MarcoFalke <falke.marco@gmail.com> 1581435852 -0800\n\nnet: Remove forcerelay of rejected txs\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/facb71576cd4d2e90fd03e09d29b42fa3d730e8c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/facb71576cd4d2e90fd03e09d29b42fa3d730e8c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/facb71576cd4d2e90fd03e09d29b42fa3d730e8c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab7915f804b776c68ae017d55506c66af533f5a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab7915f804b776c68ae017d55506c66af533f5a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab7915f804b776c68ae017d55506c66af533f5a0"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 20,
      "deletions": 28
    },
    "files": [
      {
        "sha": "b617c33214078a9186d9dfcbc61ee08d82b6c168",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/facb71576cd4d2e90fd03e09d29b42fa3d730e8c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/facb71576cd4d2e90fd03e09d29b42fa3d730e8c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=facb71576cd4d2e90fd03e09d29b42fa3d730e8c",
        "patch": "@@ -450,7 +450,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-whitebind=<[permissions@]addr>\", \"Bind to given address and whitelist peers connecting to it. \"\n         \"Use [host]:port notation for IPv6. Allowed permissions are bloomfilter (allow requesting BIP37 filtered blocks and transactions), \"\n         \"noban (do not ban for misbehavior), \"\n-        \"forcerelay (relay even non-standard transactions), \"\n+        \"forcerelay (relay transactions that are already in the mempool; implies relay), \"\n         \"relay (relay even in -blocksonly mode), \"\n         \"and mempool (allow requesting BIP35 mempool contents). \"\n         \"Specify multiple permissions separated by commas (default: noban,mempool,relay). Can be specified multiple times.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n@@ -527,7 +527,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-datacarriersize\", strprintf(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\", MAX_OP_RETURN_RELAY), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n     gArgs.AddArg(\"-minrelaytxfee=<amt>\", strprintf(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\",\n         CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-whitelistforcerelay\", strprintf(\"Add 'forcerelay' permission to whitelisted inbound peers with default permissions. This will relay transactions even if the transactions were already in the mempool or violate local relay policy. (default: %d)\", DEFAULT_WHITELISTFORCERELAY), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-whitelistforcerelay\", strprintf(\"Add 'forcerelay' permission to whitelisted inbound peers with default permissions. This will relay transactions even if the transactions were already in the mempool. (default: %d)\", DEFAULT_WHITELISTFORCERELAY), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n     gArgs.AddArg(\"-whitelistrelay\", strprintf(\"Add 'relay' permission to whitelisted inbound peers with default permissions. This will accept relayed transactions even when not relaying transactions (default: %d)\", DEFAULT_WHITELISTRELAY), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n \n "
      },
      {
        "sha": "ad74848347834c58617d463c24d6257d2a365561",
        "filename": "src/net_permissions.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/facb71576cd4d2e90fd03e09d29b42fa3d730e8c/src/net_permissions.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/facb71576cd4d2e90fd03e09d29b42fa3d730e8c/src/net_permissions.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_permissions.h?ref=facb71576cd4d2e90fd03e09d29b42fa3d730e8c",
        "patch": "@@ -15,7 +15,7 @@ enum NetPermissionFlags\n     PF_BLOOMFILTER = (1U << 1),\n     // Relay and accept transactions from this peer, even if -blocksonly is true\n     PF_RELAY = (1U << 3),\n-    // Always relay transactions from this peer, even if already in mempool or rejected from policy\n+    // Always relay transactions from this peer, even if already in mempool\n     // Keep parameter interaction: forcerelay implies relay\n     PF_FORCERELAY = (1U << 2) | PF_RELAY,\n     // Can't be banned for misbehavior\n@@ -59,4 +59,4 @@ class NetWhitelistPermissions : public NetPermissions\n     CSubNet m_subnet;\n };\n \n-#endif // BITCOIN_NET_PERMISSIONS_H\n\\ No newline at end of file\n+#endif // BITCOIN_NET_PERMISSIONS_H"
      },
      {
        "sha": "1c1046b6ff8bb5c109d175f7dbdd2d2a65728671",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 24,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/facb71576cd4d2e90fd03e09d29b42fa3d730e8c/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/facb71576cd4d2e90fd03e09d29b42fa3d730e8c/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=facb71576cd4d2e90fd03e09d29b42fa3d730e8c",
        "patch": "@@ -986,15 +986,6 @@ void Misbehaving(NodeId pnode, int howmuch, const std::string& message) EXCLUSIV\n         LogPrint(BCLog::NET, \"%s: %s peer=%d (%d -> %d)%s\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior, message_prefixed);\n }\n \n-/**\n- * Returns true if the given validation state result may result in a peer\n- * banning/disconnecting us. We use this to determine which unaccepted\n- * transactions from a whitelisted peer that we can safely relay.\n- */\n-static bool TxRelayMayResultInDisconnect(const TxValidationState& state) {\n-    return state.GetResult() == TxValidationResult::TX_CONSENSUS;\n-}\n-\n /**\n  * Potentially ban a node based on the contents of a BlockValidationState object\n  *\n@@ -1064,10 +1055,9 @@ static bool MaybePunishNodeForBlock(NodeId nodeid, const BlockValidationState& s\n  * Potentially ban a node based on the contents of a TxValidationState object\n  *\n  * @return Returns true if the peer was punished (probably disconnected)\n- *\n- * Changes here may need to be reflected in TxRelayMayResultInDisconnect().\n  */\n-static bool MaybePunishNodeForTx(NodeId nodeid, const TxValidationState& state, const std::string& message = \"\") {\n+static bool MaybePunishNodeForTx(NodeId nodeid, const TxValidationState& state, const std::string& message = \"\")\n+{\n     switch (state.GetResult()) {\n     case TxValidationResult::TX_RESULT_UNSET:\n         break;\n@@ -1095,11 +1085,6 @@ static bool MaybePunishNodeForTx(NodeId nodeid, const TxValidationState& state,\n }\n \n \n-\n-\n-\n-\n-\n //////////////////////////////////////////////////////////////////////////////\n //\n // blockchain -> download logic notification\n@@ -2615,14 +2600,11 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n             if (pfrom->HasPermission(PF_FORCERELAY)) {\n                 // Always relay transactions received from whitelisted peers, even\n-                // if they were already in the mempool or rejected from it due\n-                // to policy, allowing the node to function as a gateway for\n+                // if they were already in the mempool,\n+                // allowing the node to function as a gateway for\n                 // nodes hidden behind it.\n-                //\n-                // Never relay transactions that might result in being\n-                // disconnected (or banned).\n-                if (state.IsInvalid() && TxRelayMayResultInDisconnect(state)) {\n-                    LogPrintf(\"Not relaying invalid transaction %s from whitelisted peer=%d (%s)\\n\", tx.GetHash().ToString(), pfrom->GetId(), FormatStateMessage(state));\n+                if (!mempool.exists(tx.GetHash())) {\n+                    LogPrintf(\"Not relaying non-mempool transaction %s from whitelisted peer=%d\\n\", tx.GetHash().ToString(), pfrom->GetId());\n                 } else {\n                     LogPrintf(\"Force relaying tx %s from whitelisted peer=%d\\n\", tx.GetHash().ToString(), pfrom->GetId());\n                     RelayTransaction(tx.GetHash(), *connman);"
      },
      {
        "sha": "3a7bf4bfc3a697d4e0ece8c4519ece41d91310e0",
        "filename": "test/functional/p2p_permissions.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/facb71576cd4d2e90fd03e09d29b42fa3d730e8c/test/functional/p2p_permissions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/facb71576cd4d2e90fd03e09d29b42fa3d730e8c/test/functional/p2p_permissions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_permissions.py?ref=facb71576cd4d2e90fd03e09d29b42fa3d730e8c",
        "patch": "@@ -132,6 +132,16 @@ def check_tx_relay(self):\n             p2p_rebroadcast_wallet.send_txs_and_test([tx], self.nodes[1])\n             wait_until(lambda: txid in self.nodes[0].getrawmempool())\n \n+        self.log.debug(\"Check that node[1] will not send an invalid tx to node[0]\")\n+        tx.vout[0].nValue += 1\n+        txid = tx.rehash()\n+        p2p_rebroadcast_wallet.send_txs_and_test(\n+            [tx],\n+            self.nodes[1],\n+            success=False,\n+            reject_reason='Not relaying non-mempool transaction {} from whitelisted peer=0'.format(txid),\n+        )\n+\n     def checkpermission(self, args, expectedPermissions, whitelisted):\n         self.restart_node(1, args)\n         connect_nodes(self.nodes[0], 1)"
      }
    ]
  }
]