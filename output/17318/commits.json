[
  {
    "sha": "c98bd13e675fbf5641ed64d551b63aaf55a1a8e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOThiZDEzZTY3NWZiZjU2NDFlZDY0ZDU1MWI2M2FhZjU1YTFhOGU5",
    "commit": {
      "author": {
        "name": "Adam Jonas",
        "email": "jonas@chaincode.com",
        "date": "2019-10-29T20:26:01Z"
      },
      "committer": {
        "name": "Adam Jonas",
        "email": "jonas@chaincode.com",
        "date": "2019-10-30T16:03:07Z"
      },
      "message": "replace asserts in RPC code with CHECK_NONFATAL and add linter",
      "tree": {
        "sha": "de1e060178eb8efa14291ca328c26b82323b5976",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de1e060178eb8efa14291ca328c26b82323b5976"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c98bd13e675fbf5641ed64d551b63aaf55a1a8e9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c98bd13e675fbf5641ed64d551b63aaf55a1a8e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c98bd13e675fbf5641ed64d551b63aaf55a1a8e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c98bd13e675fbf5641ed64d551b63aaf55a1a8e9/comments",
    "author": {
      "login": "adamjonas",
      "id": 755825,
      "node_id": "MDQ6VXNlcjc1NTgyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamjonas",
      "html_url": "https://github.com/adamjonas",
      "followers_url": "https://api.github.com/users/adamjonas/followers",
      "following_url": "https://api.github.com/users/adamjonas/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamjonas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamjonas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
      "organizations_url": "https://api.github.com/users/adamjonas/orgs",
      "repos_url": "https://api.github.com/users/adamjonas/repos",
      "events_url": "https://api.github.com/users/adamjonas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamjonas/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "adamjonas",
      "id": 755825,
      "node_id": "MDQ6VXNlcjc1NTgyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamjonas",
      "html_url": "https://github.com/adamjonas",
      "followers_url": "https://api.github.com/users/adamjonas/followers",
      "following_url": "https://api.github.com/users/adamjonas/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamjonas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamjonas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
      "organizations_url": "https://api.github.com/users/adamjonas/orgs",
      "repos_url": "https://api.github.com/users/adamjonas/repos",
      "events_url": "https://api.github.com/users/adamjonas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamjonas/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "edd9d0781b96e71f88bd87b30dd10ad008b964a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edd9d0781b96e71f88bd87b30dd10ad008b964a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/edd9d0781b96e71f88bd87b30dd10ad008b964a5"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 34,
      "deletions": 23
    },
    "files": [
      {
        "sha": "ef6b569c75e5d7908453033f412d537f32254a40",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c98bd13e675fbf5641ed64d551b63aaf55a1a8e9/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c98bd13e675fbf5641ed64d551b63aaf55a1a8e9/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=c98bd13e675fbf5641ed64d551b63aaf55a1a8e9",
        "patch": "@@ -58,7 +58,7 @@ static CUpdatedBlock latestblock;\n  */\n double GetDifficulty(const CBlockIndex* blockindex)\n {\n-    assert(blockindex);\n+    CHECK_NONFATAL(blockindex);\n \n     int nShift = (blockindex->nBits >> 24) & 0xff;\n     double dDiff =\n@@ -957,7 +957,7 @@ static UniValue pruneblockchain(const JSONRPCRequest& request)\n \n     PruneBlockFilesManual(height);\n     const CBlockIndex* block = ::ChainActive().Tip();\n-    assert(block);\n+    CHECK_NONFATAL(block);\n     while (block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA)) {\n         block = block->pprev;\n     }\n@@ -1252,7 +1252,7 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     obj.pushKV(\"pruned\",                fPruneMode);\n     if (fPruneMode) {\n         const CBlockIndex* block = tip;\n-        assert(block);\n+        CHECK_NONFATAL(block);\n         while (block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA)) {\n             block = block->pprev;\n         }\n@@ -1598,7 +1598,7 @@ static UniValue getchaintxstats(const JSONRPCRequest& request)\n         }\n     }\n \n-    assert(pindex != nullptr);\n+    CHECK_NONFATAL(pindex != nullptr);\n \n     if (request.params[0].isNull()) {\n         blockcount = std::max(0, std::min(blockcount, pindex->nHeight - 1));\n@@ -1771,7 +1771,7 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n         }\n     }\n \n-    assert(pindex != nullptr);\n+    CHECK_NONFATAL(pindex != nullptr);\n \n     std::set<std::string> stats;\n     if (!request.params[1].isNull()) {\n@@ -1871,7 +1871,7 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n             }\n \n             CAmount txfee = tx_total_in - tx_total_out;\n-            assert(MoneyRange(txfee));\n+            CHECK_NONFATAL(MoneyRange(txfee));\n             if (do_medianfee) {\n                 fee_array.push_back(txfee);\n             }\n@@ -2008,7 +2008,7 @@ class CoinsViewScanReserver\n     explicit CoinsViewScanReserver() : m_could_reserve(false) {}\n \n     bool reserve() {\n-        assert (!m_could_reserve);\n+        CHECK_NONFATAL(!m_could_reserve);\n         std::lock_guard<std::mutex> lock(g_utxosetscan);\n         if (g_scan_in_progress) {\n             return false;\n@@ -2135,9 +2135,9 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n             LOCK(cs_main);\n             ::ChainstateActive().ForceFlushStateToDisk();\n             pcursor = std::unique_ptr<CCoinsViewCursor>(::ChainstateActive().CoinsDB().Cursor());\n-            assert(pcursor);\n+            CHECK_NONFATAL(pcursor);\n             tip = ::ChainActive().Tip();\n-            assert(tip);\n+            CHECK_NONFATAL(tip);\n         }\n         bool res = FindScriptPubKey(g_scan_progress, g_should_abort_scan, count, pcursor.get(), needles, coins);\n         result.pushKV(\"success\", res);"
      },
      {
        "sha": "2038986bfc45ff1d574a535436b416f9c2c6f49d",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c98bd13e675fbf5641ed64d551b63aaf55a1a8e9/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c98bd13e675fbf5641ed64d551b63aaf55a1a8e9/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=c98bd13e675fbf5641ed64d551b63aaf55a1a8e9",
        "patch": "@@ -512,7 +512,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n         // Need to update only after we know CreateNewBlock succeeded\n         pindexPrev = pindexPrevNew;\n     }\n-    assert(pindexPrev);\n+    CHECK_NONFATAL(pindexPrev);\n     CBlock* pblock = &pblocktemplate->block; // pointer for convenience\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n \n@@ -554,7 +554,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n         entry.pushKV(\"fee\", pblocktemplate->vTxFees[index_in_template]);\n         int64_t nTxSigOps = pblocktemplate->vTxSigOpsCost[index_in_template];\n         if (fPreSegWit) {\n-            assert(nTxSigOps % WITNESS_SCALE_FACTOR == 0);\n+            CHECK_NONFATAL(nTxSigOps % WITNESS_SCALE_FACTOR == 0);\n             nTxSigOps /= WITNESS_SCALE_FACTOR;\n         }\n         entry.pushKV(\"sigops\", nTxSigOps);\n@@ -643,9 +643,9 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n     int64_t nSigOpLimit = MAX_BLOCK_SIGOPS_COST;\n     int64_t nSizeLimit = MAX_BLOCK_SERIALIZED_SIZE;\n     if (fPreSegWit) {\n-        assert(nSigOpLimit % WITNESS_SCALE_FACTOR == 0);\n+        CHECK_NONFATAL(nSigOpLimit % WITNESS_SCALE_FACTOR == 0);\n         nSigOpLimit /= WITNESS_SCALE_FACTOR;\n-        assert(nSizeLimit % WITNESS_SCALE_FACTOR == 0);\n+        CHECK_NONFATAL(nSizeLimit % WITNESS_SCALE_FACTOR == 0);\n         nSizeLimit /= WITNESS_SCALE_FACTOR;\n     }\n     result.pushKV(\"sigoplimit\", nSigOpLimit);"
      },
      {
        "sha": "cfa3509c6584221deca87d92c01f1ed78109c825",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c98bd13e675fbf5641ed64d551b63aaf55a1a8e9/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c98bd13e675fbf5641ed64d551b63aaf55a1a8e9/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=c98bd13e675fbf5641ed64d551b63aaf55a1a8e9",
        "patch": "@@ -428,7 +428,7 @@ RPCHelpMan::RPCHelpMan(std::string name, std::string description, std::vector<RP\n     std::set<std::string> named_args;\n     for (const auto& arg : m_args) {\n         // Should have unique named arguments\n-        assert(named_args.insert(arg.m_name).second);\n+        CHECK_NONFATAL(named_args.insert(arg.m_name).second);\n     }\n }\n \n@@ -620,11 +620,11 @@ std::string RPCArg::ToStringObj(const bool oneline) const\n     case Type::OBJ:\n     case Type::OBJ_USER_KEYS:\n         // Currently unused, so avoid writing dead code\n-        assert(false);\n+        CHECK_NONFATAL(false);\n \n         // no default case, so the compiler can warn about missing cases\n     }\n-    assert(false);\n+    CHECK_NONFATAL(false);\n }\n \n std::string RPCArg::ToString(const bool oneline) const\n@@ -661,7 +661,7 @@ std::string RPCArg::ToString(const bool oneline) const\n \n         // no default case, so the compiler can warn about missing cases\n     }\n-    assert(false);\n+    CHECK_NONFATAL(false);\n }\n \n static std::pair<int64_t, int64_t> ParseRange(const UniValue& value)"
      },
      {
        "sha": "46e198f830ab694697dfb47ac8511b53a75a680b",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c98bd13e675fbf5641ed64d551b63aaf55a1a8e9/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c98bd13e675fbf5641ed64d551b63aaf55a1a8e9/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=c98bd13e675fbf5641ed64d551b63aaf55a1a8e9",
        "patch": "@@ -162,7 +162,7 @@ UniValue importprivkey(const JSONRPCRequest& request)\n         if (!key.IsValid()) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n \n         CPubKey pubkey = key.GetPubKey();\n-        assert(key.VerifyPubKey(pubkey));\n+        CHECK_NONFATAL(key.VerifyPubKey(pubkey));\n         CKeyID vchAddress = pubkey.GetID();\n         {\n             pwallet->MarkDirty();\n@@ -642,7 +642,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n             std::string label = std::get<3>(key_tuple);\n \n             CPubKey pubkey = key.GetPubKey();\n-            assert(key.VerifyPubKey(pubkey));\n+            CHECK_NONFATAL(key.VerifyPubKey(pubkey));\n             CKeyID keyid = pubkey.GetID();\n \n             pwallet->WalletLogPrintf(\"Importing %s...\\n\", EncodeDestination(PKHash(keyid)));\n@@ -915,7 +915,7 @@ static std::string RecurseImportData(const CScript& script, ImportData& import_d\n     case TX_SCRIPTHASH: {\n         if (script_ctx == ScriptContext::P2SH) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Trying to nest P2SH inside another P2SH\");\n         if (script_ctx == ScriptContext::WITNESS_V0) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Trying to nest P2SH inside a P2WSH\");\n-        assert(script_ctx == ScriptContext::TOP);\n+        CHECK_NONFATAL(script_ctx == ScriptContext::TOP);\n         CScriptID id = CScriptID(uint160(solverdata[0]));\n         auto subscript = std::move(import_data.redeemscript); // Remove redeemscript from import_data to check for superfluous script later.\n         if (!subscript) return \"missing redeemscript\";"
      },
      {
        "sha": "8c1bb6c4f13dbb0a79c4ae4a335c379bd5aa2419",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c98bd13e675fbf5641ed64d551b63aaf55a1a8e9/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c98bd13e675fbf5641ed64d551b63aaf55a1a8e9/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=c98bd13e675fbf5641ed64d551b63aaf55a1a8e9",
        "patch": "@@ -136,7 +136,7 @@ static void WalletTxToJSON(interfaces::Chain& chain, interfaces::Chain::Lock& lo\n         entry.pushKV(\"blockindex\", wtx.m_confirm.nIndex);\n         int64_t block_time;\n         bool found_block = chain.findBlock(wtx.m_confirm.hashBlock, nullptr /* block */, &block_time);\n-        assert(found_block);\n+        CHECK_NONFATAL(found_block);\n         entry.pushKV(\"blocktime\", block_time);\n     } else {\n         entry.pushKV(\"trusted\", wtx.IsTrusted(locked_chain));\n@@ -2943,7 +2943,7 @@ static UniValue listunspent(const JSONRPCRequest& request)\n                     CTxDestination witness_destination;\n                     if (redeemScript.IsPayToWitnessScriptHash()) {\n                         bool extracted = ExtractDestination(redeemScript, witness_destination);\n-                        assert(extracted);\n+                        CHECK_NONFATAL(extracted);\n                         // Also return the witness script\n                         const WitnessV0ScriptHash& whash = boost::get<WitnessV0ScriptHash>(witness_destination);\n                         CScriptID id;\n@@ -3833,7 +3833,7 @@ static UniValue getaddressesbylabel(const JSONRPCRequest& request)\n             // address strings, but build a separate set as a precaution just in\n             // case it does.\n             bool unique = addresses.emplace(address).second;\n-            assert(unique);\n+            CHECK_NONFATAL(unique);\n             // UniValue::pushKV checks if the key exists in O(N)\n             // and since duplicate addresses are unexpected (checked with\n             // std::set in O(log(N))), UniValue::__pushKV is used instead,"
      },
      {
        "sha": "a4c6f0a8d47c203cc1ae4b35d9fa415d1bcea4f9",
        "filename": "test/lint/lint-assertions.sh",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c98bd13e675fbf5641ed64d551b63aaf55a1a8e9/test/lint/lint-assertions.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c98bd13e675fbf5641ed64d551b63aaf55a1a8e9/test/lint/lint-assertions.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-assertions.sh?ref=c98bd13e675fbf5641ed64d551b63aaf55a1a8e9",
        "patch": "@@ -20,4 +20,15 @@ if [[ ${OUTPUT} != \"\" ]]; then\n     EXIT_CODE=1\n fi\n \n+# Macro CHECK_NONFATAL(condition) should be used instead of assert for RPC code, where it\n+# is undesirable to crash the whole program. See: src/util/check.h\n+# src/rpc/server.cpp is excluded from this check since it's mostly meta-code.\n+OUTPUT=$(git grep -nE 'assert *\\(.*\\);' -- \"src/rpc/\" \"src/wallet/rpc*\" \":(exclude)src/rpc/server.cpp\")\n+if [[ ${OUTPUT} != \"\" ]]; then\n+    echo \"CHECK_NONFATAL(condition) should be used instead of assert for RPC code.\"\n+    echo\n+    echo \"${OUTPUT}\"\n+    EXIT_CODE=1\n+fi\n+\n exit ${EXIT_CODE}"
      }
    ]
  }
]