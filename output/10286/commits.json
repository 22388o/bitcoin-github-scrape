[
  {
    "sha": "a7d3936de8418522dbb161bfef31c234fc6c2503",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphN2QzOTM2ZGU4NDE4NTIyZGJiMTYxYmZlZjMxYzIzNGZjNmMyNTAz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-20T20:08:14Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-13T23:29:54Z"
      },
      "message": "Add a CValidationInterface::TransactionRemovedFromMempool\n\nThis is currently unused, but will by used by wallet to cache when\ntransactions are in the mempool, obviating the need for calls to\nmempool from CWalletTx::InMempool()",
      "tree": {
        "sha": "7b14bdfffb142c4097a8abee0ccb58c1498f591f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b14bdfffb142c4097a8abee0ccb58c1498f591f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7d3936de8418522dbb161bfef31c234fc6c2503",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7d3936de8418522dbb161bfef31c234fc6c2503",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a7d3936de8418522dbb161bfef31c234fc6c2503",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7d3936de8418522dbb161bfef31c234fc6c2503/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "326a5652e0d25fdb60c337ef4f1c98a63e0748f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/326a5652e0d25fdb60c337ef4f1c98a63e0748f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/326a5652e0d25fdb60c337ef4f1c98a63e0748f0"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 42,
      "deletions": 0
    },
    "files": [
      {
        "sha": "499edb374c92800473a2b9cf13547f0c1049470b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d3936de8418522dbb161bfef31c234fc6c2503/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d3936de8418522dbb161bfef31c234fc6c2503/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a7d3936de8418522dbb161bfef31c234fc6c2503",
        "patch": "@@ -265,6 +265,7 @@ void Shutdown()\n #endif\n     UnregisterAllValidationInterfaces();\n     GetMainSignals().UnregisterBackgroundSignalScheduler();\n+    GetMainSignals().UnregisterWithMempoolSignals(mempool);\n #ifdef ENABLE_WALLET\n     CloseWallets();\n #endif\n@@ -1240,6 +1241,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     threadGroup.create_thread(boost::bind(&TraceThread<CScheduler::Function>, \"scheduler\", serviceLoop));\n \n     GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n+    GetMainSignals().RegisterWithMempoolSignals(mempool);\n \n     /* Start the RPC server already.  It will be started in \"warmup\" mode\n      * and not really process calls already (but it will signify connections"
      },
      {
        "sha": "a4d6f6a3103cbd846ef6f1fc0ad605609e692377",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d3936de8418522dbb161bfef31c234fc6c2503/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d3936de8418522dbb161bfef31c234fc6c2503/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=a7d3936de8418522dbb161bfef31c234fc6c2503",
        "patch": "@@ -513,6 +513,9 @@ class CTxMemPool\n     // to track size/count of descendant transactions.  First version of\n     // addUnchecked can be used to have it call CalculateMemPoolAncestors(), and\n     // then invoke the second version.\n+    // Note that addUnchecked is ONLY called from ATMP outside of tests\n+    // and any other callers may break wallet's in-mempool tracking (due to\n+    // lack of CValidationInterface::TransactionAddedToMempool callbacks).\n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, bool validFeeEstimate = true);\n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, setEntries &setAncestors, bool validFeeEstimate = true);\n "
      },
      {
        "sha": "24f2b96c780d7a79c017ac1a7eeb9ee0db9ab851",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d3936de8418522dbb161bfef31c234fc6c2503/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d3936de8418522dbb161bfef31c234fc6c2503/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=a7d3936de8418522dbb161bfef31c234fc6c2503",
        "patch": "@@ -9,6 +9,7 @@\n #include \"primitives/block.h\"\n #include \"scheduler.h\"\n #include \"sync.h\"\n+#include \"txmempool.h\"\n #include \"util.h\"\n \n #include <list>\n@@ -21,6 +22,7 @@ struct MainSignalsInstance {\n     boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n     boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n     boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n     boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n     boost::signals2::signal<void (const uint256 &)> Inventory;\n     boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n@@ -50,6 +52,14 @@ void CMainSignals::FlushBackgroundCallbacks() {\n     m_internals->m_schedulerClient.EmptyQueue();\n }\n \n+void CMainSignals::RegisterWithMempoolSignals(CTxMemPool& pool) {\n+    pool.NotifyEntryRemoved.connect(boost::bind(&CMainSignals::MempoolEntryRemoved, this, _1, _2));\n+}\n+\n+void CMainSignals::UnregisterWithMempoolSignals(CTxMemPool& pool) {\n+    pool.NotifyEntryRemoved.disconnect(boost::bind(&CMainSignals::MempoolEntryRemoved, this, _1, _2));\n+}\n+\n CMainSignals& GetMainSignals()\n {\n     return g_signals;\n@@ -60,6 +70,7 @@ void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.m_internals->TransactionAddedToMempool.connect(boost::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, _1));\n     g_signals.m_internals->BlockConnected.connect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n     g_signals.m_internals->BlockDisconnected.connect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n+    g_signals.m_internals->TransactionRemovedFromMempool.connect(boost::bind(&CValidationInterface::TransactionRemovedFromMempool, pwalletIn, _1));\n     g_signals.m_internals->SetBestChain.connect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n     g_signals.m_internals->Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n     g_signals.m_internals->Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n@@ -75,6 +86,7 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.m_internals->TransactionAddedToMempool.disconnect(boost::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, _1));\n     g_signals.m_internals->BlockConnected.disconnect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n     g_signals.m_internals->BlockDisconnected.disconnect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n+    g_signals.m_internals->TransactionRemovedFromMempool.disconnect(boost::bind(&CValidationInterface::TransactionRemovedFromMempool, pwalletIn, _1));\n     g_signals.m_internals->UpdatedBlockTip.disconnect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n     g_signals.m_internals->NewPoWValidBlock.disconnect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n }\n@@ -87,10 +99,17 @@ void UnregisterAllValidationInterfaces() {\n     g_signals.m_internals->TransactionAddedToMempool.disconnect_all_slots();\n     g_signals.m_internals->BlockConnected.disconnect_all_slots();\n     g_signals.m_internals->BlockDisconnected.disconnect_all_slots();\n+    g_signals.m_internals->TransactionRemovedFromMempool.disconnect_all_slots();\n     g_signals.m_internals->UpdatedBlockTip.disconnect_all_slots();\n     g_signals.m_internals->NewPoWValidBlock.disconnect_all_slots();\n }\n \n+void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n+    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n+        m_internals->TransactionRemovedFromMempool(ptx);\n+    }\n+}\n+\n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     m_internals->UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload);\n }"
      },
      {
        "sha": "915c17695eb07b11e607019a2357ebc85363b7f2",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d3936de8418522dbb161bfef31c234fc6c2503/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d3936de8418522dbb161bfef31c234fc6c2503/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=a7d3936de8418522dbb161bfef31c234fc6c2503",
        "patch": "@@ -20,6 +20,8 @@ class CValidationInterface;\n class CValidationState;\n class uint256;\n class CScheduler;\n+class CTxMemPool;\n+enum class MemPoolRemovalReason;\n \n // These functions dispatch to one or all registered wallets\n \n@@ -36,6 +38,15 @@ class CValidationInterface {\n     virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n     /** Notifies listeners of a transaction having been added to mempool. */\n     virtual void TransactionAddedToMempool(const CTransactionRef &ptxn) {}\n+    /**\n+     * Notifies listeners of a transaction leaving mempool.\n+     *\n+     * This only fires for transactions which leave mempool because of expiry,\n+     * size limiting, reorg (changes in lock times/coinbase maturity), or\n+     * replacement. This does not include any transactions which are included\n+     * in BlockConnectedDisconnected either in block->vtx or in txnConflicted.\n+     */\n+    virtual void TransactionRemovedFromMempool(const CTransactionRef &ptx) {}\n     /**\n      * Notifies listeners of a block being connected.\n      * Provides a vector of transactions evicted from the mempool as a result.\n@@ -74,6 +85,8 @@ class CMainSignals {\n     friend void ::UnregisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterAllValidationInterfaces();\n \n+    void MempoolEntryRemoved(CTransactionRef tx, MemPoolRemovalReason reason);\n+\n public:\n     /** Register a CScheduler to give callbacks which should run in the background (may only be called once) */\n     void RegisterBackgroundSignalScheduler(CScheduler& scheduler);\n@@ -82,6 +95,11 @@ class CMainSignals {\n     /** Call any remaining callbacks on the calling thread */\n     void FlushBackgroundCallbacks();\n \n+    /** Register with mempool to call TransactionRemovedFromMempool callbacks */\n+    void RegisterWithMempoolSignals(CTxMemPool& pool);\n+    /** Unregister with mempool */\n+    void UnregisterWithMempoolSignals(CTxMemPool& pool);\n+\n     void UpdatedBlockTip(const CBlockIndex *, const CBlockIndex *, bool fInitialDownload);\n     void TransactionAddedToMempool(const CTransactionRef &);\n     void BlockConnected(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef> &);"
      }
    ]
  },
  {
    "sha": "0343676ce32ef69b25bada101223b92f92da158a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzQzNjc2Y2UzMmVmNjliMjViYWRhMTAxMjIzYjkyZjkyZGExNThh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-06-08T15:05:18Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-13T23:29:54Z"
      },
      "message": "Call TransactionRemovedFromMempool in the CScheduler thread\n\nThis is both good practice (we want to move all such callbacks\ninto a background thread eventually) and prevents a lock inversion\nwhen we go to use this in wallet (mempool.cs->cs_wallet and\ncs_wallet->mempool.cs would otherwise both be used).",
      "tree": {
        "sha": "6ce316c85afe8884c123c1226d0b4a2f8b89df32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6ce316c85afe8884c123c1226d0b4a2f8b89df32"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0343676ce32ef69b25bada101223b92f92da158a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0343676ce32ef69b25bada101223b92f92da158a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0343676ce32ef69b25bada101223b92f92da158a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0343676ce32ef69b25bada101223b92f92da158a/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7d3936de8418522dbb161bfef31c234fc6c2503",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7d3936de8418522dbb161bfef31c234fc6c2503",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7d3936de8418522dbb161bfef31c234fc6c2503"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b4efbe6ef31d0f1ca51832d58e7d3df4d0c1567f",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0343676ce32ef69b25bada101223b92f92da158a/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0343676ce32ef69b25bada101223b92f92da158a/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=0343676ce32ef69b25bada101223b92f92da158a",
        "patch": "@@ -106,7 +106,9 @@ void UnregisterAllValidationInterfaces() {\n \n void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n     if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->TransactionRemovedFromMempool(ptx);\n+        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+            m_internals->TransactionRemovedFromMempool(ptx);\n+        });\n     }\n }\n "
      },
      {
        "sha": "9b5784ccc3ee30ca5fa726103e10bba9db30cf3e",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0343676ce32ef69b25bada101223b92f92da158a/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0343676ce32ef69b25bada101223b92f92da158a/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=0343676ce32ef69b25bada101223b92f92da158a",
        "patch": "@@ -45,6 +45,8 @@ class CValidationInterface {\n      * size limiting, reorg (changes in lock times/coinbase maturity), or\n      * replacement. This does not include any transactions which are included\n      * in BlockConnectedDisconnected either in block->vtx or in txnConflicted.\n+     *\n+     * Called on a background thread.\n      */\n     virtual void TransactionRemovedFromMempool(const CTransactionRef &ptx) {}\n     /**"
      }
    ]
  },
  {
    "sha": "2b4b34503ff0ed44365d83a68ffed2736ea9cc51",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYjRiMzQ1MDNmZjBlZDQ0MzY1ZDgzYTY4ZmZlZDI3MzZlYTljYzUx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-17T22:42:46Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-13T23:29:54Z"
      },
      "message": "Add ability to assert a lock is not held in DEBUG_LOCKORDER",
      "tree": {
        "sha": "62462c66263e297f19d6b1de7a24f91acfab8093",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/62462c66263e297f19d6b1de7a24f91acfab8093"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b4b34503ff0ed44365d83a68ffed2736ea9cc51",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b4b34503ff0ed44365d83a68ffed2736ea9cc51",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2b4b34503ff0ed44365d83a68ffed2736ea9cc51",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b4b34503ff0ed44365d83a68ffed2736ea9cc51/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0343676ce32ef69b25bada101223b92f92da158a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0343676ce32ef69b25bada101223b92f92da158a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0343676ce32ef69b25bada101223b92f92da158a"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4ef419cd099de761afccad1afb2eb0c351ac18e1",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b4b34503ff0ed44365d83a68ffed2736ea9cc51/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b4b34503ff0ed44365d83a68ffed2736ea9cc51/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=2b4b34503ff0ed44365d83a68ffed2736ea9cc51",
        "patch": "@@ -155,6 +155,16 @@ void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine,\n     abort();\n }\n \n+void AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)\n+{\n+    for (const std::pair<void*, CLockLocation>& i : *lockstack) {\n+        if (i.first == cs) {\n+            fprintf(stderr, \"Assertion failed: lock %s held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld().c_str());\n+            abort();\n+        }\n+    }\n+}\n+\n void DeleteLock(void* cs)\n {\n     if (!lockdata.available) {"
      },
      {
        "sha": "2790fc6f23a3ff5770f5bc9e6333267bf24d1e39",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b4b34503ff0ed44365d83a68ffed2736ea9cc51/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b4b34503ff0ed44365d83a68ffed2736ea9cc51/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=2b4b34503ff0ed44365d83a68ffed2736ea9cc51",
        "patch": "@@ -75,14 +75,17 @@ void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs\n void LeaveCritical();\n std::string LocksHeld();\n void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs);\n+void AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs);\n void DeleteLock(void* cs);\n #else\n void static inline EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false) {}\n void static inline LeaveCritical() {}\n void static inline AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs) {}\n+void static inline AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs) {}\n void static inline DeleteLock(void* cs) {}\n #endif\n #define AssertLockHeld(cs) AssertLockHeldInternal(#cs, __FILE__, __LINE__, &cs)\n+#define AssertLockNotHeld(cs) AssertLockNotHeldInternal(#cs, __FILE__, __LINE__, &cs)\n \n /**\n  * Wrapped boost mutex: supports recursive locking, but no waiting"
      }
    ]
  },
  {
    "sha": "0b2f42d7376c5f7c1ba1ac5d17a30691989d9159",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYjJmNDJkNzM3NmM1ZjdjMWJhMWFjNWQxN2EzMDY5MTk4OWQ5MTU5",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-06-08T15:13:46Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-13T23:29:54Z"
      },
      "message": "Add CallFunctionInQueue to wait on validation interface queue drain",
      "tree": {
        "sha": "435de24bb4a2795e44c547bc4829dd1f9ddde1df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/435de24bb4a2795e44c547bc4829dd1f9ddde1df"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b2f42d7376c5f7c1ba1ac5d17a30691989d9159",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b2f42d7376c5f7c1ba1ac5d17a30691989d9159",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0b2f42d7376c5f7c1ba1ac5d17a30691989d9159",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b2f42d7376c5f7c1ba1ac5d17a30691989d9159/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2b4b34503ff0ed44365d83a68ffed2736ea9cc51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b4b34503ff0ed44365d83a68ffed2736ea9cc51",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2b4b34503ff0ed44365d83a68ffed2736ea9cc51"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 18,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f2b35d5627cbfbd7a699ecc6437fff5deab5f30a",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b2f42d7376c5f7c1ba1ac5d17a30691989d9159/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b2f42d7376c5f7c1ba1ac5d17a30691989d9159/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=0b2f42d7376c5f7c1ba1ac5d17a30691989d9159",
        "patch": "@@ -104,6 +104,10 @@ void UnregisterAllValidationInterfaces() {\n     g_signals.m_internals->NewPoWValidBlock.disconnect_all_slots();\n }\n \n+void CallFunctionInValidationInterfaceQueue(std::function<void ()> func) {\n+    g_signals.m_internals->m_schedulerClient.AddToProcessQueue(std::move(func));\n+}\n+\n void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n     if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n         m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {"
      },
      {
        "sha": "1b231e5281f9bb71c5728b5a52686aec8230c351",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b2f42d7376c5f7c1ba1ac5d17a30691989d9159/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b2f42d7376c5f7c1ba1ac5d17a30691989d9159/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=0b2f42d7376c5f7c1ba1ac5d17a30691989d9159",
        "patch": "@@ -6,10 +6,11 @@\n #ifndef BITCOIN_VALIDATIONINTERFACE_H\n #define BITCOIN_VALIDATIONINTERFACE_H\n \n-#include <memory>\n-\n #include \"primitives/transaction.h\" // CTransaction(Ref)\n \n+#include <functional>\n+#include <memory>\n+\n class CBlock;\n class CBlockIndex;\n struct CBlockLocator;\n@@ -31,6 +32,16 @@ void RegisterValidationInterface(CValidationInterface* pwalletIn);\n void UnregisterValidationInterface(CValidationInterface* pwalletIn);\n /** Unregister all wallets from core */\n void UnregisterAllValidationInterfaces();\n+/**\n+ * Pushes a function to callback onto the notification queue, guaranteeing any\n+ * callbacks generated prior to now are finished when the function is called.\n+ *\n+ * Be very careful blocking on func to be called if any locks are held -\n+ * validation interface clients may not be able to make progress as they often\n+ * wait for things like cs_main, so blocking until func is called with cs_main\n+ * will result in a deadlock (that DEBUG_LOCKORDER will miss).\n+ */\n+void CallFunctionInValidationInterfaceQueue(std::function<void ()> func);\n \n class CValidationInterface {\n protected:\n@@ -86,6 +97,7 @@ class CMainSignals {\n     friend void ::RegisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterAllValidationInterfaces();\n+    friend void ::CallFunctionInValidationInterfaceQueue(std::function<void ()> func);\n \n     void MempoolEntryRemoved(CTransactionRef tx, MemPoolRemovalReason reason);\n "
      }
    ]
  },
  {
    "sha": "5ee31726360cbe343f5a1a50a5e440db736da5b7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZWUzMTcyNjM2MGNiZTM0M2Y1YTFhNTBhNWU0NDBkYjczNmRhNWI3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-17T23:06:16Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-13T23:29:54Z"
      },
      "message": "Add CWallet::BlockUntilSyncedToCurrentChain()\n\nThis blocks until the wallet has synced up to the current height.",
      "tree": {
        "sha": "d6e3cab34961e1875957bbec38742feccd01f778",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6e3cab34961e1875957bbec38742feccd01f778"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ee31726360cbe343f5a1a50a5e440db736da5b7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ee31726360cbe343f5a1a50a5e440db736da5b7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ee31726360cbe343f5a1a50a5e440db736da5b7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ee31726360cbe343f5a1a50a5e440db736da5b7/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b2f42d7376c5f7c1ba1ac5d17a30691989d9159",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b2f42d7376c5f7c1ba1ac5d17a30691989d9159",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b2f42d7376c5f7c1ba1ac5d17a30691989d9159"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 57,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d6ca4fce60bf6823430743da8f182d7d2018d2e4",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 2,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ee31726360cbe343f5a1a50a5e440db736da5b7/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ee31726360cbe343f5a1a50a5e440db736da5b7/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=5ee31726360cbe343f5a1a50a5e440db736da5b7",
        "patch": "@@ -33,6 +33,7 @@\n #include \"wallet/fees.h\"\n \n #include <assert.h>\n+#include <future>\n \n #include <boost/algorithm/string/replace.hpp>\n #include <boost/thread.hpp>\n@@ -1232,6 +1233,8 @@ void CWallet::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const\n     for (size_t i = 0; i < pblock->vtx.size(); i++) {\n         SyncTransaction(pblock->vtx[i], pindex, i);\n     }\n+\n+    m_last_block_processed = pindex;\n }\n \n void CWallet::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) {\n@@ -1244,6 +1247,36 @@ void CWallet::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) {\n \n \n \n+void CWallet::BlockUntilSyncedToCurrentChain() {\n+    AssertLockNotHeld(cs_main);\n+    AssertLockNotHeld(cs_wallet);\n+\n+    {\n+        // Skip the queue-draining stuff if we know we're caught up with\n+        // chainActive.Tip()...\n+        // We could also take cs_wallet here, and call m_last_block_processed\n+        // protected by cs_wallet instead of cs_main, but as long as we need\n+        // cs_main here anyway, its easier to just call it cs_main-protected.\n+        LOCK(cs_main);\n+        const CBlockIndex* initialChainTip = chainActive.Tip();\n+\n+        if (m_last_block_processed->GetAncestor(initialChainTip->nHeight) == initialChainTip) {\n+            return;\n+        }\n+    }\n+\n+    // ...otherwise put a callback in the validation interface queue and wait\n+    // for the queue to drain enough to execute it (indicating we are caught up\n+    // at least with the time we entered this function).\n+\n+    std::promise<void> promise;\n+    CallFunctionInValidationInterfaceQueue([&promise] {\n+        promise.set_value();\n+    });\n+    promise.get_future().wait();\n+}\n+\n+\n isminetype CWallet::IsMine(const CTxIn &txin) const\n {\n     {\n@@ -3900,8 +3933,6 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     LogPrintf(\" wallet      %15dms\\n\", GetTimeMillis() - nStart);\n \n-    RegisterValidationInterface(walletInstance);\n-\n     // Try to top up keypool. No-op if the wallet is locked.\n     walletInstance->TopUpKeyPool();\n \n@@ -3913,6 +3944,10 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n         if (walletdb.ReadBestBlock(locator))\n             pindexRescan = FindForkInGlobalIndex(chainActive, locator);\n     }\n+\n+    walletInstance->m_last_block_processed = chainActive.Tip();\n+    RegisterValidationInterface(walletInstance);\n+\n     if (chainActive.Tip() && chainActive.Tip() != pindexRescan)\n     {\n         //We can't rescan beyond non-pruned blocks, stop and throw an error"
      },
      {
        "sha": "91029ee462e4ef248f9f700a5b0263904f35d90c",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ee31726360cbe343f5a1a50a5e440db736da5b7/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ee31726360cbe343f5a1a50a5e440db736da5b7/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=5ee31726360cbe343f5a1a50a5e440db736da5b7",
        "patch": "@@ -722,6 +722,18 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     std::unique_ptr<CWalletDBWrapper> dbw;\n \n+    /**\n+     * The following is used to keep track of how far behind the wallet is\n+     * from the chain sync, and to allow clients to block on us being caught up.\n+     *\n+     * Note that this is *not* how far we've processed, we may need some rescan\n+     * to have seen all transactions in the chain, but is only used to track\n+     * live BlockConnected callbacks.\n+     *\n+     * Protected by cs_main (see BlockUntilSyncedToCurrentChain)\n+     */\n+    const CBlockIndex* m_last_block_processed;\n+\n public:\n     /*\n      * Main wallet lock.\n@@ -1106,6 +1118,14 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n        caller must ensure the current wallet version is correct before calling\n        this function). */\n     bool SetHDMasterKey(const CPubKey& key);\n+\n+    /**\n+     * Blocks until the wallet state is up-to-date to /at least/ the current\n+     * chain at the time this function is entered\n+     * Obviously holding cs_main/cs_wallet when going into this call may cause\n+     * deadlock\n+     */\n+    void BlockUntilSyncedToCurrentChain();\n };\n \n /** A key allocated from the key pool. */"
      }
    ]
  },
  {
    "sha": "5d67a7868db188f7e43ce9028f215034d057790d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDY3YTc4NjhkYjE4OGY3ZTQzY2U5MDI4ZjIxNTAzNGQwNTc3OTBk",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-09-12T17:05:28Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-13T23:29:54Z"
      },
      "message": "Add calls to CWallet::BlockUntilSyncedToCurrentChain() in RPCs\n\nThis prevents the wallet-RPCs-return-stale-info issue from being\nre-introduced when new-block callbacks no longer happen in the\nblock-connection cs_main lock",
      "tree": {
        "sha": "2d7bb0486accc6295fc0abc203c387371f046fbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d7bb0486accc6295fc0abc203c387371f046fbe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d67a7868db188f7e43ce9028f215034d057790d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d67a7868db188f7e43ce9028f215034d057790d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d67a7868db188f7e43ce9028f215034d057790d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d67a7868db188f7e43ce9028f215034d057790d/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5ee31726360cbe343f5a1a50a5e440db736da5b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ee31726360cbe343f5a1a50a5e440db736da5b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ee31726360cbe343f5a1a50a5e440db736da5b7"
      }
    ],
    "stats": {
      "total": 100,
      "additions": 100,
      "deletions": 0
    },
    "files": [
      {
        "sha": "91e2d73ec809da2cf2dab119ba91ff19cb06667e",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 100,
        "deletions": 0,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d67a7868db188f7e43ce9028f215034d057790d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d67a7868db188f7e43ce9028f215034d057790d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=5d67a7868db188f7e43ce9028f215034d057790d",
        "patch": "@@ -455,6 +455,11 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n         );\n \n     ObserveSafeMode();\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     CTxDestination dest = DecodeDestination(request.params[0].get_str());\n@@ -533,6 +538,11 @@ UniValue listaddressgroupings(const JSONRPCRequest& request)\n         );\n \n     ObserveSafeMode();\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     UniValue jsonGroupings(UniValue::VARR);\n@@ -645,6 +655,11 @@ UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n        );\n \n     ObserveSafeMode();\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     // Bitcoin address\n@@ -707,6 +722,11 @@ UniValue getreceivedbyaccount(const JSONRPCRequest& request)\n         );\n \n     ObserveSafeMode();\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     // Minimum confirmations\n@@ -780,6 +800,11 @@ UniValue getbalance(const JSONRPCRequest& request)\n         );\n \n     ObserveSafeMode();\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     const UniValue& account_value = request.params[0];\n@@ -825,6 +850,11 @@ UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n                 \"Returns the server's total unconfirmed balance\\n\");\n \n     ObserveSafeMode();\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     return ValueFromAmount(pwallet->GetUnconfirmedBalance());\n@@ -919,6 +949,11 @@ UniValue sendfrom(const JSONRPCRequest& request)\n         );\n \n     ObserveSafeMode();\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     std::string strAccount = AccountFromValue(request.params[0]);\n@@ -1004,6 +1039,11 @@ UniValue sendmany(const JSONRPCRequest& request)\n         );\n \n     ObserveSafeMode();\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     if (pwallet->GetBroadcastTransactions() && !g_connman) {\n@@ -1455,6 +1495,11 @@ UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n         );\n \n     ObserveSafeMode();\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     return ListReceived(pwallet, request.params, false);\n@@ -1495,6 +1540,11 @@ UniValue listreceivedbyaccount(const JSONRPCRequest& request)\n         );\n \n     ObserveSafeMode();\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     return ListReceived(pwallet, request.params, true);\n@@ -1683,6 +1733,11 @@ UniValue listtransactions(const JSONRPCRequest& request)\n         );\n \n     ObserveSafeMode();\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     std::string strAccount = \"*\";\n@@ -1777,6 +1832,11 @@ UniValue listaccounts(const JSONRPCRequest& request)\n         );\n \n     ObserveSafeMode();\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     int nMinDepth = 1;\n@@ -1886,6 +1946,11 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n         );\n \n     ObserveSafeMode();\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     const CBlockIndex* pindex = nullptr;    // Block index of the specified block or the common ancestor, if the block provided was in a deactivated chain.\n@@ -2018,6 +2083,11 @@ UniValue gettransaction(const JSONRPCRequest& request)\n         );\n \n     ObserveSafeMode();\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     uint256 hash;\n@@ -2080,6 +2150,11 @@ UniValue abandontransaction(const JSONRPCRequest& request)\n         );\n \n     ObserveSafeMode();\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     uint256 hash;\n@@ -2114,6 +2189,10 @@ UniValue backupwallet(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"backupwallet\", \"\\\"backup.dat\\\"\")\n         );\n \n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     std::string strDest = request.params[0].get_str();\n@@ -2433,6 +2512,10 @@ UniValue lockunspent(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"lockunspent\", \"false, \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\")\n         );\n \n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     RPCTypeCheckArgument(request.params[0], UniValue::VBOOL);\n@@ -2592,6 +2675,11 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n         );\n \n     ObserveSafeMode();\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     UniValue obj(UniValue::VOBJ);\n@@ -2801,6 +2889,10 @@ UniValue listunspent(const JSONRPCRequest& request)\n             nMaximumCount = options[\"maximumCount\"].get_int64();\n     }\n \n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     UniValue results(UniValue::VARR);\n     std::vector<COutput> vecOutputs;\n     assert(pwallet != nullptr);\n@@ -2911,6 +3003,10 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     ObserveSafeMode();\n     RPCTypeCheck(request.params, {UniValue::VSTR});\n \n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     CCoinControl coinControl;\n     int changePosition = -1;\n     bool lockUnspents = false;\n@@ -3121,6 +3217,10 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         }\n     }\n \n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n     EnsureWalletIsUnlocked(pwallet);\n "
      }
    ]
  },
  {
    "sha": "17220d6325ef8d7789373055586e4332977077b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzIyMGQ2MzI1ZWY4ZDc3ODkzNzMwNTU1ODZlNDMzMjk3NzA3N2Iw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-20T21:38:07Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-13T23:30:14Z"
      },
      "message": "Use callbacks to cache whether wallet transactions are in mempool\n\nThis avoid calling out to mempool state during coin selection,\nbalance calculation, etc. In the next commit we ensure all wallet\ncallbacks from CValidationInterface happen in the same queue,\nserialized with each other. This helps to avoid re-introducing one\nof the issues described in #9584 [1] by further disconnecting\nwallet from current chain/mempool state.\n\nThanks to @morcos for the suggestion to do this.\n\nNote that there are several race conditions introduced here:\n\n * If a user calls sendrawtransaction from RPC, adding a\n   transaction which is \"trusted\" (ie from them) and pays them\n   change, it may not be immediately used by coin selection until\n   the notification callbacks finish running. No such race is\n   introduced in normal transaction-sending RPCs as this case is\n   explicitly handled.\n\n * Until Block{Connected,Disconnected} and\n   TransactionAddedToMempool calls also run in the CSceduler\n   background thread, there is a race where\n   TransactionAddedToMempool might be called after a\n   Block{Connected,Disconnected} call happens.\n\n * Wallet will write a new best chain from the SetBestChain\n   callback prior to having processed the transaction from that\n   block.\n\n[1] \"you could go to select coins, need to use 0-conf change, but\nsuch 0-conf change may have been included in a block who's\ncallbacks have not yet been processed - resulting in thinking they\nare not in mempool and, thus, not selectable.\"",
      "tree": {
        "sha": "6a2f87e2ad43fbd785f498f97d187a871d89079e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6a2f87e2ad43fbd785f498f97d187a871d89079e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17220d6325ef8d7789373055586e4332977077b0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17220d6325ef8d7789373055586e4332977077b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/17220d6325ef8d7789373055586e4332977077b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17220d6325ef8d7789373055586e4332977077b0/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d67a7868db188f7e43ce9028f215034d057790d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d67a7868db188f7e43ce9028f215034d057790d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d67a7868db188f7e43ce9028f215034d057790d"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 37,
      "deletions": 8
    },
    "files": [
      {
        "sha": "eee66ec5820d65bcf22d4620e0079af483c73267",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 6,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17220d6325ef8d7789373055586e4332977077b0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17220d6325ef8d7789373055586e4332977077b0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=17220d6325ef8d7789373055586e4332977077b0",
        "patch": "@@ -1215,6 +1215,19 @@ void CWallet::SyncTransaction(const CTransactionRef& ptx, const CBlockIndex *pin\n void CWallet::TransactionAddedToMempool(const CTransactionRef& ptx) {\n     LOCK2(cs_main, cs_wallet);\n     SyncTransaction(ptx);\n+\n+    auto it = mapWallet.find(ptx->GetHash());\n+    if (it != mapWallet.end()) {\n+        it->second.fInMempool = true;\n+    }\n+}\n+\n+void CWallet::TransactionRemovedFromMempool(const CTransactionRef &ptx) {\n+    LOCK(cs_wallet);\n+    auto it = mapWallet.find(ptx->GetHash());\n+    if (it != mapWallet.end()) {\n+        it->second.fInMempool = false;\n+    }\n }\n \n void CWallet::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) {\n@@ -1229,9 +1242,11 @@ void CWallet::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const\n \n     for (const CTransactionRef& ptx : vtxConflicted) {\n         SyncTransaction(ptx);\n+        TransactionRemovedFromMempool(ptx);\n     }\n     for (size_t i = 0; i < pblock->vtx.size(); i++) {\n         SyncTransaction(pblock->vtx[i], pindex, i);\n+        TransactionRemovedFromMempool(pblock->vtx[i]);\n     }\n \n     m_last_block_processed = pindex;\n@@ -1901,8 +1916,7 @@ CAmount CWalletTx::GetChange() const\n \n bool CWalletTx::InMempool() const\n {\n-    LOCK(mempool.cs);\n-    return mempool.exists(GetHash());\n+    return fInMempool;\n }\n \n bool CWalletTx::IsTrusted() const\n@@ -3010,14 +3024,18 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CCon\n         // Track how many getdata requests our transaction gets\n         mapRequestCount[wtxNew.GetHash()] = 0;\n \n+        // Get the inserted-CWalletTx from mapWallet so that the\n+        // fInMempool flag is cached properly\n+        CWalletTx& wtx = mapWallet[wtxNew.GetHash()];\n+\n         if (fBroadcastTransactions)\n         {\n             // Broadcast\n-            if (!wtxNew.AcceptToMemoryPool(maxTxFee, state)) {\n+            if (!wtx.AcceptToMemoryPool(maxTxFee, state)) {\n                 LogPrintf(\"CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", state.GetRejectReason());\n                 // TODO: if we expect the failure to be long term or permanent, instead delete wtx from the wallet and return failure.\n             } else {\n-                wtxNew.RelayWalletTransaction(connman);\n+                wtx.RelayWalletTransaction(connman);\n             }\n         }\n     }\n@@ -4091,8 +4109,15 @@ int CMerkleTx::GetBlocksToMaturity() const\n }\n \n \n-bool CMerkleTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state)\n+bool CWalletTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state)\n {\n-    return ::AcceptToMemoryPool(mempool, state, tx, nullptr /* pfMissingInputs */,\n+    // We must set fInMempool here - while it will be re-set to true by the\n+    // entered-mempool callback, if we did not there would be a race where a\n+    // user could call sendmoney in a loop and hit spurious out of funds errors\n+    // because we think that the transaction they just generated's change is\n+    // unavailable as we're not yet aware its in mempool.\n+    bool ret = ::AcceptToMemoryPool(mempool, state, tx, nullptr /* pfMissingInputs */,\n                                 nullptr /* plTxnReplaced */, false /* bypass_limits */, nAbsurdFee);\n+    fInMempool = ret;\n+    return ret;\n }"
      },
      {
        "sha": "73da686364ad42d779cc14eaabf5dd23eeadff46",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17220d6325ef8d7789373055586e4332977077b0/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17220d6325ef8d7789373055586e4332977077b0/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=17220d6325ef8d7789373055586e4332977077b0",
        "patch": "@@ -252,8 +252,6 @@ class CMerkleTx\n     int GetDepthInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n     bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet) > 0; }\n     int GetBlocksToMaturity() const;\n-    /** Pass this transaction to the mempool. Fails if absolute fee exceeds absurd fee. */\n-    bool AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state);\n     bool hashUnset() const { return (hashBlock.IsNull() || hashBlock == ABANDON_HASH); }\n     bool isAbandoned() const { return (hashBlock == ABANDON_HASH); }\n     void setAbandoned() { hashBlock = ABANDON_HASH; }\n@@ -330,6 +328,7 @@ class CWalletTx : public CMerkleTx\n     mutable bool fImmatureWatchCreditCached;\n     mutable bool fAvailableWatchCreditCached;\n     mutable bool fChangeCached;\n+    mutable bool fInMempool;\n     mutable CAmount nDebitCached;\n     mutable CAmount nCreditCached;\n     mutable CAmount nImmatureCreditCached;\n@@ -369,6 +368,7 @@ class CWalletTx : public CMerkleTx\n         fImmatureWatchCreditCached = false;\n         fAvailableWatchCreditCached = false;\n         fChangeCached = false;\n+        fInMempool = false;\n         nDebitCached = 0;\n         nCreditCached = 0;\n         nImmatureCreditCached = 0;\n@@ -473,6 +473,9 @@ class CWalletTx : public CMerkleTx\n     // RelayWalletTransaction may only be called if fBroadcastTransactions!\n     bool RelayWalletTransaction(CConnman* connman);\n \n+    /** Pass this transaction to the mempool. Fails if absolute fee exceeds absurd fee. */\n+    bool AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state);\n+\n     std::set<uint256> GetConflicts() const;\n };\n \n@@ -932,6 +935,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n     int64_t RescanFromTime(int64_t startTime, bool update);\n     CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, CBlockIndex* pindexStop, bool fUpdate = false);\n+    void TransactionRemovedFromMempool(const CTransactionRef &ptx) override;\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override;\n     // ResendWalletTransactionsBefore may only be called if fBroadcastTransactions!"
      }
    ]
  },
  {
    "sha": "e545dedf72bff2bd41c93c93eb576929fce37112",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTQ1ZGVkZjcyYmZmMmJkNDFjOTNjOTNlYjU3NjkyOWZjZTM3MTEy",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-06-08T15:08:53Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-13T23:30:15Z"
      },
      "message": "Also call other wallet notify callbacks in scheduler thread\n\nThis runs Block{Connected,Disconnected}, SetBestChain, Inventory,\nand TransactionAddedToMempool on the background scheduler thread.\n\nOf those, only BlockConnected is used outside of Wallet/ZMQ, and\nis used only for orphan transaction removal in net_processing,\nsomething which does not need to be synchronous with anything\nelse.\n\nThis partially reverts #9583, re-enabling some of the gains from\n #7946. This does not, however, re-enable the gains achieved by\nrepeatedly releasing cs_main between each transaction processed.",
      "tree": {
        "sha": "1afa0523a8bcd4ce54b41b60832515542cb30447",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1afa0523a8bcd4ce54b41b60832515542cb30447"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e545dedf72bff2bd41c93c93eb576929fce37112",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e545dedf72bff2bd41c93c93eb576929fce37112",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e545dedf72bff2bd41c93c93eb576929fce37112",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e545dedf72bff2bd41c93c93eb576929fce37112/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "17220d6325ef8d7789373055586e4332977077b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17220d6325ef8d7789373055586e4332977077b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17220d6325ef8d7789373055586e4332977077b0"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 40,
      "deletions": 12
    },
    "files": [
      {
        "sha": "486dc9cc1f4306a734f25707b2189bb046894cfd",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e545dedf72bff2bd41c93c93eb576929fce37112/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e545dedf72bff2bd41c93c93eb576929fce37112/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e545dedf72bff2bd41c93c93eb576929fce37112",
        "patch": "@@ -2469,7 +2469,7 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n \n             for (const PerBlockConnectTrace& trace : connectTrace.GetBlocksConnected()) {\n                 assert(trace.pblock && trace.pindex);\n-                GetMainSignals().BlockConnected(trace.pblock, trace.pindex, *trace.conflictedTxs);\n+                GetMainSignals().BlockConnected(trace.pblock, trace.pindex, trace.conflictedTxs);\n             }\n         }\n         // When we reach this point, we switched to a new tip (stored in pindexNewTip)."
      },
      {
        "sha": "c6a021119e1de232ee3c0b681c5fd430a0b1bc79",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 6,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e545dedf72bff2bd41c93c93eb576929fce37112/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e545dedf72bff2bd41c93c93eb576929fce37112/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=e545dedf72bff2bd41c93c93eb576929fce37112",
        "patch": "@@ -121,23 +121,33 @@ void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockInd\n }\n \n void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n-    m_internals->TransactionAddedToMempool(ptx);\n+    m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+        m_internals->TransactionAddedToMempool(ptx);\n+    });\n }\n \n-void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) {\n-    m_internals->BlockConnected(pblock, pindex, vtxConflicted);\n+void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>>& pvtxConflicted) {\n+    m_internals->m_schedulerClient.AddToProcessQueue([pblock, pindex, pvtxConflicted, this] {\n+        m_internals->BlockConnected(pblock, pindex, *pvtxConflicted);\n+    });\n }\n \n void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock> &pblock) {\n-    m_internals->BlockDisconnected(pblock);\n+    m_internals->m_schedulerClient.AddToProcessQueue([pblock, this] {\n+        m_internals->BlockDisconnected(pblock);\n+    });\n }\n \n void CMainSignals::SetBestChain(const CBlockLocator &locator) {\n-    m_internals->SetBestChain(locator);\n+    m_internals->m_schedulerClient.AddToProcessQueue([locator, this] {\n+        m_internals->SetBestChain(locator);\n+    });\n }\n \n void CMainSignals::Inventory(const uint256 &hash) {\n-    m_internals->Inventory(hash);\n+    m_internals->m_schedulerClient.AddToProcessQueue([hash, this] {\n+        m_internals->Inventory(hash);\n+    });\n }\n \n void CMainSignals::Broadcast(int64_t nBestBlockTime, CConnman* connman) {"
      },
      {
        "sha": "9b5ac2ac233a195624ce4bc2b5e5608666c1a8b7",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 23,
        "deletions": 5,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e545dedf72bff2bd41c93c93eb576929fce37112/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e545dedf72bff2bd41c93c93eb576929fce37112/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=e545dedf72bff2bd41c93c93eb576929fce37112",
        "patch": "@@ -47,7 +47,11 @@ class CValidationInterface {\n protected:\n     /** Notifies listeners of updated block chain tip */\n     virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n-    /** Notifies listeners of a transaction having been added to mempool. */\n+    /**\n+     * Notifies listeners of a transaction having been added to mempool.\n+     *\n+     * Called on a background thread.\n+     */\n     virtual void TransactionAddedToMempool(const CTransactionRef &ptxn) {}\n     /**\n      * Notifies listeners of a transaction leaving mempool.\n@@ -63,13 +67,27 @@ class CValidationInterface {\n     /**\n      * Notifies listeners of a block being connected.\n      * Provides a vector of transactions evicted from the mempool as a result.\n+     *\n+     * Called on a background thread.\n      */\n     virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex, const std::vector<CTransactionRef> &txnConflicted) {}\n-    /** Notifies listeners of a block being disconnected */\n+    /**\n+     * Notifies listeners of a block being disconnected\n+     *\n+     * Called on a background thread.\n+     */\n     virtual void BlockDisconnected(const std::shared_ptr<const CBlock> &block) {}\n-    /** Notifies listeners of the new active block chain on-disk. */\n+    /**\n+     * Notifies listeners of the new active block chain on-disk.\n+     *\n+     * Called on a background thread.\n+     */\n     virtual void SetBestChain(const CBlockLocator &locator) {}\n-    /** Notifies listeners about an inventory item being seen on the network. */\n+    /**\n+     * Notifies listeners about an inventory item being seen on the network.\n+     *\n+     * Called on a background thread.\n+     */\n     virtual void Inventory(const uint256 &hash) {}\n     /** Tells listeners to broadcast their data. */\n     virtual void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) {}\n@@ -116,7 +134,7 @@ class CMainSignals {\n \n     void UpdatedBlockTip(const CBlockIndex *, const CBlockIndex *, bool fInitialDownload);\n     void TransactionAddedToMempool(const CTransactionRef &);\n-    void BlockConnected(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef> &);\n+    void BlockConnected(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>> &);\n     void BlockDisconnected(const std::shared_ptr<const CBlock> &);\n     void SetBestChain(const CBlockLocator &);\n     void Inventory(const uint256 &);"
      }
    ]
  },
  {
    "sha": "cb06edf938302166030db19017c27889ea5b10b6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYjA2ZWRmOTM4MzAyMTY2MDMwZGIxOTAxN2MyNzg4OWVhNWIxMGI2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-06-21T01:21:36Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-13T23:30:15Z"
      },
      "message": "Fix wallet RPC race by waiting for callbacks in sendrawtransaction",
      "tree": {
        "sha": "a11872ce2488f5780ecf07025549edad4fc0f76b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a11872ce2488f5780ecf07025549edad4fc0f76b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb06edf938302166030db19017c27889ea5b10b6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb06edf938302166030db19017c27889ea5b10b6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cb06edf938302166030db19017c27889ea5b10b6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb06edf938302166030db19017c27889ea5b10b6/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e545dedf72bff2bd41c93c93eb576929fce37112",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e545dedf72bff2bd41c93c93eb576929fce37112",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e545dedf72bff2bd41c93c93eb576929fce37112"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 22,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8f8cdf80ed8a0bd739be006ef854072648618802",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 1,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb06edf938302166030db19017c27889ea5b10b6/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb06edf938302166030db19017c27889ea5b10b6/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=cb06edf938302166030db19017c27889ea5b10b6",
        "patch": "@@ -11,6 +11,7 @@\n #include \"init.h\"\n #include \"keystore.h\"\n #include \"validation.h\"\n+#include \"validationinterface.h\"\n #include \"merkleblock.h\"\n #include \"net.h\"\n #include \"policy/policy.h\"\n@@ -30,6 +31,7 @@\n #include \"wallet/wallet.h\"\n #endif\n \n+#include <future>\n #include <stdint.h>\n \n #include <univalue.h>\n@@ -917,7 +919,9 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n         );\n \n     ObserveSafeMode();\n-    LOCK(cs_main);\n+\n+    std::promise<void> promise;\n+\n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL});\n \n     // parse hex string from parameter\n@@ -931,6 +935,8 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n     if (!request.params[1].isNull() && request.params[1].get_bool())\n         nMaxRawTxFee = 0;\n \n+    { // cs_main scope\n+    LOCK(cs_main);\n     CCoinsViewCache &view = *pcoinsTip;\n     bool fHaveChain = false;\n     for (size_t o = 0; !fHaveChain && o < tx->vout.size(); o++) {\n@@ -952,10 +958,24 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n                 }\n                 throw JSONRPCError(RPC_TRANSACTION_ERROR, state.GetRejectReason());\n             }\n+        } else {\n+            // If wallet is enabled, ensure that the wallet has been made aware\n+            // of the new transaction prior to returning. This prevents a race\n+            // where a user might call sendrawtransaction with a transaction\n+            // to/from their wallet, immediately call some wallet RPC, and get\n+            // a stale result because callbacks have not yet been processed.\n+            CallFunctionInValidationInterfaceQueue([&promise] {\n+                promise.set_value();\n+            });\n         }\n     } else if (fHaveChain) {\n         throw JSONRPCError(RPC_TRANSACTION_ALREADY_IN_CHAIN, \"transaction already in block chain\");\n     }\n+\n+    } // cs_main\n+\n+    promise.get_future().wait();\n+\n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n@@ -964,6 +984,7 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n     {\n         pnode->PushInventory(inv);\n     });\n+\n     return hashTx.GetHex();\n }\n "
      }
    ]
  },
  {
    "sha": "3ea8b75281edc60078423bd5d277cd2a84aa5d33",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZWE4Yjc1MjgxZWRjNjAwNzg0MjNiZDVkMjc3Y2QyYTg0YWE1ZDMz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-01T03:49:59Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-13T23:30:15Z"
      },
      "message": "Give ZMQ consistent order with UpdatedBlockTip on scheduler thread\n\nNote that UpdatedBlockTip is also used in net_processing to\nannounce new blocks to peers. As this may need additional review,\nthis change is included in its own commit.",
      "tree": {
        "sha": "0db0d4510f04c1bbf1fd4f8a8199415ec67459e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0db0d4510f04c1bbf1fd4f8a8199415ec67459e9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ea8b75281edc60078423bd5d277cd2a84aa5d33",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ea8b75281edc60078423bd5d277cd2a84aa5d33",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ea8b75281edc60078423bd5d277cd2a84aa5d33",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ea8b75281edc60078423bd5d277cd2a84aa5d33/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb06edf938302166030db19017c27889ea5b10b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb06edf938302166030db19017c27889ea5b10b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb06edf938302166030db19017c27889ea5b10b6"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 8,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d91707cf9fe09d97f412ed4228dcd1faf6278e3e",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ea8b75281edc60078423bd5d277cd2a84aa5d33/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ea8b75281edc60078423bd5d277cd2a84aa5d33/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=3ea8b75281edc60078423bd5d277cd2a84aa5d33",
        "patch": "@@ -117,7 +117,9 @@ void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason\n }\n \n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n-    m_internals->UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload);\n+    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+        m_internals->UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload);\n+    });\n }\n \n void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {"
      },
      {
        "sha": "1494c6dc21edcbedc27773e71128d62b6bca2a1d",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ea8b75281edc60078423bd5d277cd2a84aa5d33/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ea8b75281edc60078423bd5d277cd2a84aa5d33/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=3ea8b75281edc60078423bd5d277cd2a84aa5d33",
        "patch": "@@ -45,7 +45,11 @@ void CallFunctionInValidationInterfaceQueue(std::function<void ()> func);\n \n class CValidationInterface {\n protected:\n-    /** Notifies listeners of updated block chain tip */\n+    /**\n+     * Notifies listeners of updated block chain tip\n+     *\n+     * Called on a background thread.\n+     */\n     virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n     /**\n      * Notifies listeners of a transaction having been added to mempool."
      }
    ]
  },
  {
    "sha": "c4784b506558744749acf12d4cff1aca2dcc3f76",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDc4NGI1MDY1NTg3NDQ3NDlhY2YxMmQ0Y2ZmMWFjYTJkY2MzZjc2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-05-03T19:57:56Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-13T23:30:15Z"
      },
      "message": "Add a dev notes document describing the new wallet RPC blocking",
      "tree": {
        "sha": "9875b534cb3f66698f29e24b050b39a98c841157",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9875b534cb3f66698f29e24b050b39a98c841157"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c4784b506558744749acf12d4cff1aca2dcc3f76",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4784b506558744749acf12d4cff1aca2dcc3f76",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c4784b506558744749acf12d4cff1aca2dcc3f76",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4784b506558744749acf12d4cff1aca2dcc3f76/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ea8b75281edc60078423bd5d277cd2a84aa5d33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ea8b75281edc60078423bd5d277cd2a84aa5d33",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ea8b75281edc60078423bd5d277cd2a84aa5d33"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0eeea3c7b08aa2d85b1102bb4a06350e342db478",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4784b506558744749acf12d4cff1aca2dcc3f76/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4784b506558744749acf12d4cff1aca2dcc3f76/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=c4784b506558744749acf12d4cff1aca2dcc3f76",
        "patch": "@@ -644,3 +644,16 @@ A few guidelines for introducing and reviewing new RPC interfaces:\n \n   - *Rationale*: If a RPC response is not a JSON object then it is harder to avoid API breakage if\n     new data in the response is needed.\n+\n+- Wallet RPCs call BlockUntilSyncedToCurrentChain to maintain consistency with\n+  `getblockchaininfo`'s state immediately prior to the call's execution. Wallet\n+  RPCs whose behavior does *not* depend on the current chainstate may omit this\n+  call.\n+\n+  - *Rationale*: In previous versions of Bitcoin Core, the wallet was always\n+    in-sync with the chainstate (by virtue of them all being updated in the\n+    same cs_main lock). In order to maintain the behavior that wallet RPCs\n+    return results as of at least the highest best-known block an RPC\n+    client may be aware of prior to entering a wallet RPC call, we must block\n+    until the wallet is caught up to the chainstate as of the RPC call's entry.\n+    This also makes the API much easier for RPC clients to reason about."
      }
    ]
  },
  {
    "sha": "89f03120a02690cff8399d77c979169355bf9cae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OWYwMzEyMGEwMjY5MGNmZjgzOTlkNzdjOTc5MTY5MzU1YmY5Y2Fl",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-01T04:23:02Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-13T23:30:15Z"
      },
      "message": "Remove redundant pwallet nullptr check",
      "tree": {
        "sha": "d7003b4a1f6e94872dcb7fe62d1b96b80d9405de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d7003b4a1f6e94872dcb7fe62d1b96b80d9405de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89f03120a02690cff8399d77c979169355bf9cae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89f03120a02690cff8399d77c979169355bf9cae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/89f03120a02690cff8399d77c979169355bf9cae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89f03120a02690cff8399d77c979169355bf9cae/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c4784b506558744749acf12d4cff1aca2dcc3f76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4784b506558744749acf12d4cff1aca2dcc3f76",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c4784b506558744749acf12d4cff1aca2dcc3f76"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6d01f79d52d43341c74f62eb2e71ec86c1ad4151",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89f03120a02690cff8399d77c979169355bf9cae/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89f03120a02690cff8399d77c979169355bf9cae/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=89f03120a02690cff8399d77c979169355bf9cae",
        "patch": "@@ -2895,7 +2895,6 @@ UniValue listunspent(const JSONRPCRequest& request)\n \n     UniValue results(UniValue::VARR);\n     std::vector<COutput> vecOutputs;\n-    assert(pwallet != nullptr);\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     pwallet->AvailableCoins(vecOutputs, !include_unsafe, nullptr, nMinimumAmount, nMaximumAmount, nMinimumSumAmount, nMaximumCount, nMinDepth, nMaxDepth);"
      }
    ]
  }
]