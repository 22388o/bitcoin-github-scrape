TheBlueMatt,2017-05-03T19:20:32Z,Rebased and fixed @ryanofsky's mostly-comment nits :).,https://github.com/bitcoin/bitcoin/pull/10286#issuecomment-299009278,299009278,
mchrostowski,2017-05-04T20:13:45Z,"So far looks good to me, I'm going to poke around wallet<->blockchain interaction so I can better understand the wallet.cpp changes you made before I comment further.\n\nThat said I feel like there is something fundamentally wrong with the interaction between CWallet and the blockchain (I don't even know where that code lives yet). This feels like a solution to current issues but I would hope a ",https://github.com/bitcoin/bitcoin/pull/10286#issuecomment-299296104,299296104,
TheBlueMatt,2017-05-04T20:25:00Z,"@mchrostowski thanks for the review! Generally, wallet and blockchain (essentially validation.cpp's stuff) have historically been pretty tightly coupled (updated all under the same cs_main lock). This PR is a step, however small, towards decoupling that a bit. Because the wallet still relies on ""is it in our mempool?"" as a proxy for ""is this possibly going to get confirmed/is it spendable with the",https://github.com/bitcoin/bitcoin/pull/10286#issuecomment-299298859,299298859,
TheBlueMatt,2017-05-04T20:55:07Z,"Rebased on latest #10179, current master, and fixed @ryanofsky's english corrections.",https://github.com/bitcoin/bitcoin/pull/10286#issuecomment-299306356,299306356,
ryanofsky,2017-05-05T21:00:01Z,"utACK 2c306d7876fb57ff26d217f97415a79942094002. Changes since previous were some documentation tweaks and new block calls in ""Add calls to CWallet::BlockUntilSyncedToCurrentChain()"", along with the rebase.",https://github.com/bitcoin/bitcoin/pull/10286#issuecomment-299574349,299574349,
mchrostowski,2017-05-13T22:12:00Z,"@TheBlueMatt The stated purpose of this PR is to reduce locking on cs_main so as to reducing code coupling. I see one change in this PR that actually deletes a `LOCK(cs_main)` which is in `CWallet::InMempool()`. This looks like a step in the right direction.\n\nThat said, the remaining changes seem to be all about getting the signals into a background thread. What does this gain us for decouplin",https://github.com/bitcoin/bitcoin/pull/10286#issuecomment-301278019,301278019,
ryanofsky,2017-05-30T16:14:18Z,This needs rebase due to a minor conflict in listunspent.,https://github.com/bitcoin/bitcoin/pull/10286#issuecomment-304929650,304929650,
TheBlueMatt,2017-06-08T15:32:08Z,"Rebased and rewrote CWallet::BlockUntilSyncedToCurrentChain(). Instead of the complicated fallback logic, it now just tests if it is caught up, and if it is not, it puts a callback into the CValidationInterface queue and waits for it to trigger. I wanted to avoid having this function previously, but I ended up needing it for a different branch which moves more CValidationInterface callbacks to the",https://github.com/bitcoin/bitcoin/pull/10286#issuecomment-307140100,307140100,
TheBlueMatt,2017-07-11T15:15:00Z,Rebased. Would be nice to get this in early in 16 to let it simmer on master.,https://github.com/bitcoin/bitcoin/pull/10286#issuecomment-314477197,314477197,
jnewbery,2017-08-11T20:58:16Z,"I haven't fully reviewed yet, but @ryanofsky pointed me to this for `m_last_block_processed`. Should that be rewound in `DisconnectBlock()`?",https://github.com/bitcoin/bitcoin/pull/10286#issuecomment-321917202,321917202,
ryanofsky,2017-08-11T21:06:56Z,"I think it should be safe to update m_last_block_processed in disconnectblock. It just isn't needed for this pr, because m_last_block_processed is used here in a pretty limited way.",https://github.com/bitcoin/bitcoin/pull/10286#issuecomment-321919047,321919047,
TheBlueMatt,2017-08-14T19:34:21Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/10286#issuecomment-322286910,322286910,
TheBlueMatt,2017-09-12T17:07:16Z,(Trivially) rebased.,https://github.com/bitcoin/bitcoin/pull/10286#issuecomment-328919318,328919318,
danra,2017-09-29T17:09:12Z,"- `BlockConnectedDisconnected` in comments and commit messages should say `BlockConnected/Disconnected`, or Block[Connected|Disconnected]`, or something of the sort. The way it's written like now looks like there's an actual single function by that name.\n- In commit message 975f071b49b642b069c5e1de8d0050b663ca7c1c, ""CSceduler background threa"" -> ""CScheduler background thread""\n",https://github.com/bitcoin/bitcoin/pull/10286#issuecomment-333183420,333183420,
danra,2017-09-29T21:04:19Z,"utACK, looks like a very nice improvement.\nReviewed everything except zmq which I have no idea about :)\nI think `CallFunctionInValidationInterfaceQueue` interface can be improved, detailed further in a comment above.",https://github.com/bitcoin/bitcoin/pull/10286#issuecomment-333238825,333238825,
TheBlueMatt,2017-10-01T04:26:35Z,Rebased and address @danra's comments.,https://github.com/bitcoin/bitcoin/pull/10286#issuecomment-333352594,333352594,
TheBlueMatt,2017-10-13T16:37:11Z,"Addressed @jnewbery's comments, and added more code comments where things were not entirely clear.",https://github.com/bitcoin/bitcoin/pull/10286#issuecomment-336503910,336503910,
jnewbery,2017-10-13T19:35:02Z,Most recent round of changes looks good to me. utACK 024e7b51ee4eeaf21ecda71915438241dd666705,https://github.com/bitcoin/bitcoin/pull/10286#issuecomment-336547593,336547593,
TheBlueMatt,2017-10-13T23:30:21Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/10286#issuecomment-336590135,336590135,
laanwj,2017-11-15T15:25:33Z,utACK 89f0312,https://github.com/bitcoin/bitcoin/pull/10286#issuecomment-344626853,344626853,
ryanofsky,2017-12-04T18:42:12Z,"According to https://github.com/bitcoin/bitcoin/issues/11822#issuecomment-348903894, this may be causing a memory leak",https://github.com/bitcoin/bitcoin/pull/10286#issuecomment-349061908,349061908,
ryanofsky,2017-05-02T21:01:49Z,"In commit ""Add a CValidationInterface::TransactionRemovedFromMempool""\n\nWhat does this imply? Just that if there are any new calls to `addUnchecked`, the caller also needs to signal `TransactionAddedToMempool` not to break the wallet? Would say this in the comment explicitly if this is the case.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114424119,114424119,src/txmempool.h
ryanofsky,2017-05-02T21:05:07Z,"In commit ""Add a CValidationInterface::TransactionRemovedFromMempool""\n\nUnclear to me what a normal operation is. Comment might be clearer mentioning a not normal counterexample.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114424864,114424864,src/txmempool.h
ryanofsky,2017-05-02T21:16:09Z,"In commit ""Add CWallet::BlockUntilSyncedToCurrentChain()""\n\nDoes ""some things might block forever"" just mean this wait might block forever? If so, maybe be more concrete and say something like ""lastBlockProcessed will not be rewound back to chainActive.Tip()."" Otherwise it would be good to clarify what some things is referring to.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114427322,114427322,src/wallet/wallet.cpp
ryanofsky,2017-05-02T21:17:11Z,"In commit ""Add CWallet::BlockUntilSyncedToCurrentChain()""\n\nStray tab here",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114427544,114427544,src/wallet/wallet.h
ryanofsky,2017-05-02T21:30:07Z,"In commit ""Add calls to CWallet::BlockUntilSyncedToCurrentChain() in RPCs""\n\nCan you give an example of specific bug that could occur without these BlockUntilSynced calls and is prevented by adding them? I looked at some of the old issues (#9584, #9148, etc), but they're confusing and I don't know how much of the information is up to date.\n\nIt would be great if `BlockUntilSyncedToCurrentCha",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114430207,114430207,src/wallet/rpcwallet.cpp
ryanofsky,2017-05-02T21:52:37Z,"In commit ""Fix zmq tests now that txn/blocks are unordered""\n\nMaybe assert `msg[0] != topic` above this line to confirm actually receive distinct `hashtx` and `hashblock` messages (not two hashblocks).",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114434508,114434508,test/functional/zmq_test.py
TheBlueMatt,2017-05-03T19:20:18Z,Updated the comment to mention that addUnchecked is only called from ATMP outside of tests period. I think the implication is that we need to fix the strong-coupling here.,https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114630924,114630924,src/txmempool.h
mchrostowski,2017-05-03T19:30:28Z,"These changes do not appear to be related to the rest. Am I missing something or should this be in its own PR?\nI believe @sipa made a similar comment on #10179 ",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114632911,114632911,src/qt/test/rpcnestedtests.cpp
mchrostowski,2017-05-03T19:33:26Z,"This would be safer/faster/cleaner with ` : internals(new CMainSignalsInstance()) {}` instead of the body.\n\nInitializer lists guarantee proper cross-thread visibility, otherwise you might init twice and have sharing issues.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114633497,114633497,src/validationinterface.cpp
mchrostowski,2017-05-03T20:03:44Z,"You can accomplish this entire commit by changing this line to \n`    void schedule(Function f, boost::chrono::system_clock::time_point t = boost::chrono::system_clock::now());`",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114639639,114639639,src/scheduler.h
mchrostowski,2017-05-03T20:13:05Z,"This comment and issue can  be avoided entirely if you move line 56 up to 46.\nAfter that lines 54 and 55 (which will be 55 and 56) can be removed.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114641508,114641508,src/validationinterface.cpp
mchrostowski,2017-05-03T20:26:32Z,"RAII is great and all but exists for the acquisition of resources. Why not try{} catch{}?\n`        try {\n        	callback();\n        } catch(...) {\n			{\n				LOCK(cs_callbacksPending);\n				fCallbacksRunning = false;\n			}\n			MaybeScheduleProcessQueue();\n        }`",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114644451,114644451,src/validationinterface.cpp
mchrostowski,2017-05-03T20:35:42Z,"Is this really what we want? A scheduler call for each callback?\nIt does prevent starving any other scheduled tasks in case of a long queue, but it also generates a lot of lock contention which can be a performance killer.\n\nUnless there is evidence of this queue processing messing with other scheduling I feel strongly we should avoid this design. It will be much harder to detect performance ",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114646664,114646664,src/validationinterface.cpp
mchrostowski,2017-05-03T20:40:07Z,"This is no longer a scheduler. It has one public method, `void AddToProcessQueue(std::function<void (void)> func);`, which does not take any 'schedule' information.\n\nThis class is neat, more of a SingleThreadedExecutor that happens to use a scheduler to execute. Really its treating the scheduler as a thread pool. \n\nI'm all for keeping this if it's not named 'scheduler' and if a thread pool",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114647690,114647690,src/scheduler.h
mchrostowski,2017-05-03T20:46:55Z,"Odd comment, ""Obviously... may..."" is concerning enough that we should have a comment explaining how to avoid a deadlock rather than this vagueness or perhaps removing the statement altogether?",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114649332,114649332,src/wallet/wallet.h
mchrostowski,2017-05-03T20:55:13Z,"This method is concerning. It may be that it is being used in a safe manner but the method itself is quite dangerous. Preliminary observation suggests this can be called from both the command line RPC and JSON RPC at the same time but I don't know how true this is. \n\nCalling it from two different threads appears to be not okay, so it is ""Not thread safe"" and should likely be labeled as such (t",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114651162,114651162,src/wallet/wallet.cpp
mchrostowski,2017-05-03T21:11:39Z,"If these assertions need to be held for this method to execute correctly then the method cannot be thread safe as itself being called twice, in two threads, is enough to cause a failure.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114654883,114654883,src/wallet/wallet.cpp
mchrostowski,2017-05-03T21:24:18Z,"This is a fine solution. All these lock inversion concerns make me wonder if there isn't a more serious issue regarding lack of proper encapsulation with some of these locks. I'm sure global locks (cs_main) don't help either, can't imagine actually needing a global lock. ",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114657449,114657449,src/validationinterface.cpp
ryanofsky,2017-05-04T01:04:28Z,"> This comment and issue can be avoided entirely if you move line 56 up to 46.\n> After that lines 54 and 55 (which will be 55 and 56) can be removed.\n\nI think this is right (line numbers apply to commit 8daf2439796dfdee41c1a32787e0ec9726daf6be). It also seems like you could eliminate the fCallbacksRunning variable if you change ProcessQueue to call pop_front after running the callback and co",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114685849,114685849,src/validationinterface.cpp
ryanofsky,2017-05-04T01:13:41Z,"> Why not try{} catch{}?\n\nMy guess about this was that it allows the processqueue to take advantage of whatever error handling or reporting cscheduler provides, and to not have to repeat the finalization logic both inside and after the catch clause. Either approach seems fine to me, though.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114686501,114686501,src/validationinterface.cpp
TheBlueMatt,2017-05-04T01:18:25Z,Without them test_bitcoin-qt segfaults.,https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114686861,114686861,src/qt/test/rpcnestedtests.cpp
TheBlueMatt,2017-05-04T01:19:21Z,"This is being run in a background thread, so there are no possible lock inversions? We've had great success with DEBUG_LOCKORDER and havent had any serious deadlock issues afair since the 0.3.X era.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114686925,114686925,src/validationinterface.cpp
ryanofsky,2017-05-04T01:20:05Z,"> Is this really what we want? A scheduler call for each callback?\n\nI'm guessing the work done in any of these callbacks far outweighs the cost of scheduling one of them but I could be wrong.\n\n",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114686965,114686965,src/validationinterface.cpp
TheBlueMatt,2017-05-04T01:23:16Z,"Looks like you commented on an outdated version and github wont show me full context, so I have no idea what those line numbers refer to :/",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114687180,114687180,src/validationinterface.cpp
TheBlueMatt,2017-05-04T01:23:56Z,"@laanwj previously requested that any exceptions be thrown all the way up, so this was an easier way to do that. That request seemed reasonable.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114687225,114687225,src/validationinterface.cpp
TheBlueMatt,2017-05-04T01:25:59Z,"Right now we only have one scheduler thread, so there should be limited lock contention, not to mention anything running is gonna take much longer than any locks held (locks are only held to push/pop/whatever, which should be very, very fast).",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114687355,114687355,src/validationinterface.cpp
TheBlueMatt,2017-05-04T01:29:50Z,"The AssertLockNotHeld call only fails if the current thread holds the lock, not any thread.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114687671,114687671,src/wallet/wallet.cpp
TheBlueMatt,2017-05-04T01:30:41Z,"I'm not sure how it is not thread safe? It blocks the *current* thread, not any other work.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114687720,114687720,src/wallet/wallet.cpp
TheBlueMatt,2017-05-04T01:31:53Z,"Any suggestions? The statement indicates that ""holding cs_main/cs_wallet may cause deadlock"", this is true, deadlock is not guaranteed, but may appear, thus you should obviously never call with cs_main or cs_wallet held.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114687783,114687783,src/wallet/wallet.h
TheBlueMatt,2017-05-04T01:35:12Z,"Does that compile? CMainSignalsInstance() is not defined at that time, only declared.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114687995,114687995,src/validationinterface.cpp
TheBlueMatt,2017-05-04T01:37:51Z,"Took this on #10179, will be here when I next rebase.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114688203,114688203,src/scheduler.h
TheBlueMatt,2017-05-04T01:39:46Z,"Its unlikely to be used elsewhere, but as it is more intimate with the CScheduler than the validation interface, it was abstracted out and put here. We should probably tweak up how it all works in a later PR (as we move off of the big boost threadGroup in init), but for now I'll leave it.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114688353,114688353,src/scheduler.h
mchrostowski,2017-05-04T18:00:47Z,Since it is only a declaration I believe it should have been fine. I see this code isn't present in the final commit so I suppose it doesn't matter either way. ,https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114847628,114847628,src/validationinterface.cpp
TheBlueMatt,2017-05-04T18:58:15Z,"Ahh, yes, since the rebase on the latest version of #10179 this code no longer exists, as the scheduler has to be passed into the creation of the internals object.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114861172,114861172,src/validationinterface.cpp
mchrostowski,2017-05-04T19:01:11Z,"Understood, makes perfect sense. Didn't occur to me we'd have to duplicate the logic, spoiled by finally.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114861867,114861867,src/validationinterface.cpp
mchrostowski,2017-05-04T19:20:04Z,"Okay, sounds like blocking/starving is the biggest risk. Can't disagree with that.\n\nFeels like a bit of wasted work to call schedule on things you know are intended to execute now, but that's just a performance (not important) concern.\nA bit surprising there is only one scheduler thread when the scheduler counts threads, but indeed it is only one.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114865783,114865783,src/validationinterface.cpp
mchrostowski,2017-05-04T19:39:09Z,@ryanofsky I believe the point is to avoid duplicate calls to the scheduler since it may be multi-threaded. So a call to AddToProcessQueue should not schedule() anything if we're already scheduled; it should only schedule() if our previously scheduled function has completed execution (at least beyond the point of it calling schedule() again). Can't see implementing that without knowing if fCallbac,https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114869346,114869346,src/validationinterface.cpp
ryanofsky,2017-05-04T19:53:37Z,"> @ryanofsky I believe the point is to avoid duplicate calls to the scheduler since it may be multi-threaded.\n\nI know, this is why the second half of my suggestion was ""condition the AddToProcessQueue schedule() call on the queue being previously empty."" Anyway, I don't think Matt's particularly interested in these simplifications, and it's easier to communicate these changes as patches rather",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114872197,114872197,src/validationinterface.cpp
mchrostowski,2017-05-04T20:00:43Z,"I'd just drop ""Obviously"" now that I'm more familiar with the method.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114873653,114873653,src/wallet/wallet.h
mchrostowski,2017-05-04T20:03:18Z,"`boost::thread_specific_ptr<LockStack> lockstack;`\nDidn't see that, makes perfect sense then.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114874181,114874181,src/wallet/wallet.cpp
ryanofsky,2017-05-04T20:05:21Z,"In commit ""Add a dev notes document describing the new wallet RPC blocking""\n\ns/who's/whose",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114874633,114874633,doc/developer-notes.md
mchrostowski,2017-05-04T20:06:04Z,"I thought unsafe due to the ""AssertLockNotHeld"" that I misunderstood. My above comment is totally wrong and can be disregarded. ",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114874764,114874764,src/wallet/wallet.cpp
ryanofsky,2017-05-04T20:06:56Z,"In commit ""Add a dev notes document describing the new wallet RPC blocking""\n\ns/restults/results, s/best-known-block/best-known block,/",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114874924,114874924,doc/developer-notes.md
mchrostowski,2017-05-04T21:02:30Z,"@ryanofsky I see that now, the extra check does prevent the execution. \n\nBeing that this is new code I wouldn't call it a simplification. Here's a patch of the proposed change, less logic with the same function:\n[scheduler.patch.txt](https://github.com/bitcoin/bitcoin/files/977512/scheduler.patch.txt)\n\nwhich reads better if you rename `fCallbacksRunning` to `fCallbacksScheduled`\nand th",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114887076,114887076,src/validationinterface.cpp
mchrostowski,2017-05-04T21:05:15Z,"@TheBlueMatt If you're open to these changes in a PR to your branch I can do that, I assume they'll be squashed so either way works.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114887634,114887634,src/validationinterface.cpp
TheBlueMatt,2017-05-04T21:20:06Z,"@mchrostowski hmm, really, I find that it decreases readability (though that may be NIH). It looks harder to reason about whether some callbacks might accidentally get missed to me.\n\n(Other random note, we dont use tabs in our codebase, which your patch added).",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114890462,114890462,src/validationinterface.cpp
mchrostowski,2017-05-04T21:42:03Z,"@TheBlueMatt Well, in that case I feel like either patch gets funky, especially since the use of fCallbacksRunning becomes inconsistent if you apply the first patch without the second (unless some alternative name for `fCallbacksRunning` works). \n\nThe extra safety check and inconsistency of scheduling bothers me but I wouldn't expect it to actually cause issues so I have no grounds for objecti",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114894590,114894590,src/validationinterface.cpp
ryanofsky,2017-05-31T20:00:21Z,"In commit ""Add CWallet::BlockUntilSyncedToCurrentChain()""\n\nI don't understand why we would wait forever without this check. Does InvalidateBlock not trigger notifications that would lead to lastBlockProcessed being updated? And if it doesn't, shouldn't this just be fixed so the right notifications are sent?",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r119458534,119458534,src/wallet/wallet.cpp
ryanofsky,2017-05-31T20:05:43Z,"In commit ""Add CWallet::BlockUntilSyncedToCurrentChain()""\n\nMaybe consider dropping the try-lock and replacing it with `lastBlockProcessedMutex.unlock(); LOCK(cs_main);  lastBlockProcessedMutex.lock();`. Maybe this would be a little slower in the average case where this code runs (which is rare to begin with), but it would avoid the 100ms worst case, and make the code simpler because you could ",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r119459716,119459716,src/wallet/wallet.cpp
ryanofsky,2017-06-08T20:40:38Z,"In commit ""Add CallFunctionInQueue to wait on validation interface queue drain""\n\nWould std::move(func)",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r120993449,120993449,src/validationinterface.cpp
ryanofsky,2017-06-08T20:48:58Z,"In commit ""Add CWallet::BlockUntilSyncedToCurrentChain()""\n\nMaybe drop this check. Seems to be a special case of the check below which isn't actually more expensive.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r120995283,120995283,src/wallet/wallet.cpp
ryanofsky,2017-06-08T21:03:17Z,"In commit ""Add CWallet::BlockUntilSyncedToCurrentChain()""\n\nI think all the mutex/cv/lambda/looping stuff below could be replaced by:\n\n```\nstd::promise<void> promise;\nCallFunctionInValidationInterfaceQueue([&promise]() { promise.set_value(); });\npromise.get_future().wait();\n```",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r120998395,120998395,src/wallet/wallet.cpp
ryanofsky,2017-06-19T19:53:28Z,"In commit ""Fix wallet RPC race by informing wallet of tx in sendrawtransaction""\n\nSeems like this will result in the wallet getting two TransactionAddedToMempool notifications, which is fine but might be worth noting in the comment.\n\nAlso, not asking for this change, but would another way to do this without referencing the wallet here be to release cs_main and then wait for the other notifi",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r122807160,122807160,src/rpc/rawtransaction.cpp
TheBlueMatt,2017-06-21T01:22:52Z,"Yes, much better to CallFunctionInValidatioInterface. Done.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r123135130,123135130,src/rpc/rawtransaction.cpp
ryanofsky,2017-06-21T14:27:03Z,"In commit ""Add ability to assert a lock is not held in DEBUG_LOCKORDER""\n\nLooks like there are travis errors compiling this code (undefined FOREACH/PAIRTYPE).",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r123264062,123264062,src/sync.cpp
ryanofsky,2017-06-21T14:38:06Z,"In commit ""Fix wallet RPC race by waiting for callbacks in sendrawtransaction""\n\nI think you might need to release cs_main before waiting for the promise, because the wallet handler in the notification thread will want to acquire it.\n\nFWIW, the way I implemented this in my wallet ipc branch was to call `CallFunctionInValidationInterfaceQueue` the same way you are doing here, but release cs_",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r123267519,123267519,src/rpc/rawtransaction.cpp
TheBlueMatt,2017-06-21T14:55:28Z,"Heh, beat you to it.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r123273044,123273044,src/rpc/rawtransaction.cpp
ryanofsky,2017-06-21T15:10:33Z,"In commit ""Fix wallet RPC race by waiting for callbacks in sendrawtransaction""\n\nThis seems right. Possible tweaks:\n\n* `should_wait_on_validationinterface` seems like it is always true at this point, maybe the variable is not needed.\n* Might be better to call `CallFunctionInValidationInterfaceQueue` before releasing cs_main, to avoid waiting for notifications that might be queued in the m",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r123277456,123277456,src/rpc/rawtransaction.cpp
ryanofsky,2017-06-22T17:38:24Z,"In commit ""Fix wallet RPC race by waiting for callbacks in sendrawtransaction""\n\nMight be more efficient to wait for the promise after the PushInventory calls so they aren't blocked waiting for wallets.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r123575981,123575981,src/rpc/rawtransaction.cpp
TheBlueMatt,2017-06-22T17:43:19Z,"I figured put it above the !g_connman check to make sure we block even if at some point in the future we support running without net/connman. Dont feel strongly either way, though",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r123577169,123577169,src/rpc/rawtransaction.cpp
promag,2017-08-12T02:45:26Z,"`const CTransactionRef& ptx`, like `TransactionAddedToMempool`?",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r132808212,132808212,src/validationinterface.cpp
promag,2017-08-12T02:45:57Z,Why filtering?,https://github.com/bitcoin/bitcoin/pull/10286#discussion_r132808216,132808216,src/validationinterface.cpp
promag,2017-08-12T02:56:41Z,This function is only introduced in a later commit.,https://github.com/bitcoin/bitcoin/pull/10286#discussion_r132808363,132808363,src/wallet/wallet.cpp
promag,2017-08-12T03:00:11Z,Move up for better packing?,https://github.com/bitcoin/bitcoin/pull/10286#discussion_r132808418,132808418,src/wallet/wallet.h
promag,2017-08-12T03:02:18Z,"Instead of `fInMempool` for each wallet transaction, maybe a `std::set<WalletTx*>` with the mempool transactions takes less memory?",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r132808441,132808441,src/wallet/wallet.h
promag,2017-08-12T03:04:54Z,Move this to `EnsureWalletIsAvailable`?,https://github.com/bitcoin/bitcoin/pull/10286#discussion_r132808496,132808496,src/rpc/misc.cpp
TheBlueMatt,2017-08-14T19:30:39Z,"This isnt a new function, it would have to be changed in txmempool.h",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r133040280,133040280,src/validationinterface.cpp
TheBlueMatt,2017-08-14T19:30:40Z,Because BLOCK and CONFLICT are passed out in BlockConnectedDisconnected (see comment in validationinterface.h which describes in what cases this is called).,https://github.com/bitcoin/bitcoin/pull/10286#discussion_r133040284,133040284,src/validationinterface.cpp
TheBlueMatt,2017-08-14T19:32:10Z,I think you've been bitten by GitHub's obnoxious order-commits-by-date-instead-of-git-ordering bug? ,https://github.com/bitcoin/bitcoin/pull/10286#discussion_r133040583,133040583,src/wallet/wallet.cpp
TheBlueMatt,2017-08-14T19:33:13Z,"Not all functions which want wallet need to do this, though.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r133040807,133040807,src/rpc/misc.cpp
TheBlueMatt,2017-08-14T19:34:09Z,"Moved it up. At some point someone can go through and mark all the bools as 1 bit, I'd think.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r133040979,133040979,src/wallet/wallet.h
ryanofsky,2017-08-16T17:09:19Z,"In commit ""Use callbacks to cache whether wallet transactions are in mempool""\n\nLooks like you accidentally resurrected this CalculateEstimateType function in the rebase. Should remove.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r133509865,133509865,src/wallet/wallet.cpp
TheBlueMatt,2017-08-17T18:52:52Z,"Oops, fixed.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r133799053,133799053,src/wallet/wallet.cpp
danra,2017-09-29T15:17:13Z,"Since you're adding system includes, might as well move them to their correct place, after the user includes. Also, better if they're sorted",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r141894492,141894492,src/validationinterface.h
danra,2017-09-29T15:53:05Z,are used->is used?,https://github.com/bitcoin/bitcoin/pull/10286#discussion_r141903428,141903428,src/wallet/wallet.h
danra,2017-09-29T15:56:00Z,Missing space after `//`,https://github.com/bitcoin/bitcoin/pull/10286#discussion_r141904083,141904083,src/wallet/wallet.cpp
danra,2017-09-29T16:10:20Z,"I think a better interface would be\n`std::future<void> SyncWithValidationInterfaceQueue();`\n\nWhose implementation sets up the delayed call to a `promise.set_value()`, instead of this being the responsibility of the caller as it is now.\n\nThe sync functionality is the only purpose, so rather than have an overly-generic interface which allows calling any function, it's better to have a more",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r141907208,141907208,src/validationinterface.h
danra,2017-09-29T16:58:34Z,This should come after `assert(pwallet != nullptr);`,https://github.com/bitcoin/bitcoin/pull/10286#discussion_r141917048,141917048,src/wallet/rpcwallet.cpp
danra,2017-09-29T20:32:21Z,"I think this introduces a bug. `CMainSignals::SetBestChain()` might be called with a `CBlockLocator` object argument which goes out of scope and gets destructed before the queued `m_internals->SetBestChain()` is called, causing an invalid memory access. For example, this can happen in the `walletInstance->SetBestChain(chainActive.GetLocator());` call in wallet.cpp).",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r141961700,141961700,src/validationinterface.cpp
danra,2017-09-29T20:33:37Z,"On second thought I'm probably wrong because locator is captured by the lambda by value, not reference.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r141961944,141961944,src/validationinterface.cpp
danra,2017-09-29T20:36:44Z,sort,https://github.com/bitcoin/bitcoin/pull/10286#discussion_r141962513,141962513,src/rpc/rawtransaction.cpp
TheBlueMatt,2017-09-30T18:21:57Z,"Hmm..I have a few more branches which use this function for other stuff (eg one that will set a ""allowed to continue processing"" boolean on a CNodeState then call WakeMessageHandler). I think most of the use-cases for now could almost do fine with a future-like return value if std::future allowed you to query whether the future had yet completed. Still, since the promise-create-future-wait pattern",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r142012101,142012101,src/validationinterface.h
danra,2017-09-30T19:44:04Z,"> I think most of the use-cases for now could almost do fine with a future-like return value if `std::future` allowed you to query whether the future had yet completed.\n\nWouldn't `std::future::wait_for()` with argument provide that functionality?\n\nOrthogonally, if the intended interface really *is* to allow running arbitrary functions on the queue, than the current interface is fine. If it",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r142013633,142013633,src/validationinterface.h
TheBlueMatt,2017-09-30T20:21:02Z,"Yea, could pull some hack like wait_for(1ns), but that's pretty gross. I think the purpose is somewhat of both - really it shouldn't be to do much more than sync, but sync may require rather arbitrary things (like calling WakeMessageHandler to wake up another thread which is waiting on some other unrelated condition in the example above). For now probably best to just leave it IMO.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r142014406,142014406,src/validationinterface.h
danra,2017-09-30T20:23:55Z,"Ok.\nbtw I meant to write ""with argument *zero*"" above, so it's not hacky - it just checks if the `std::future` is done, without waiting.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r142014463,142014463,src/validationinterface.h
TheBlueMatt,2017-10-01T04:22:48Z,Removed that line instead (we dont have similar checks anywhere else and the case is already covered by EnsureWalletIsAvailable).,https://github.com/bitcoin/bitcoin/pull/10286#discussion_r142020362,142020362,src/wallet/rpcwallet.cpp
jnewbery,2017-10-11T17:45:59Z,"This is explained here: https://github.com/bitcoin/bitcoin/pull/10286#issuecomment-307140100\n\n> it now just tests if it is caught up, and if it is not, it puts a callback into the CValidationInterface queue and waits for it to trigger\n\nI think this should be a code comment rather than a github comment!",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r144085266,144085266,src/wallet/wallet.cpp
jnewbery,2017-10-11T18:52:28Z,"There's a global variable in net_processing called `nTimeBestReceived ` which gets updated to the current time in this callback. Now that the callback is asynchronous, it won't necessarily be updated immediately. Does that cause a problem when `nTimeBestReceived` is used in the `Broadcast` callback?",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r144103454,144103454,src/validationinterface.cpp
jnewbery,2017-10-11T19:00:05Z,"Is there a reason that you've named the validation interface callback `TransactionRemovedFromMempool()` but the signal is named `MempoolEntryRemoved`. For all other callbacks in the validation interface, the callback name matches the signal name.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r144105398,144105398,src/validationinterface.cpp
jnewbery,2017-10-11T19:00:47Z,I don't understand why this is protected by cs_main. Can you explain?,https://github.com/bitcoin/bitcoin/pull/10286#discussion_r144105572,144105572,src/wallet/wallet.h
jnewbery,2017-10-11T19:05:13Z,This will be set incorrectly if the rescan was aborted.,https://github.com/bitcoin/bitcoin/pull/10286#discussion_r144106726,144106726,src/wallet/wallet.cpp
jnewbery,2017-10-11T19:21:02Z,Can you move this cs_main scope further down (to avoid having to declare the `CTransactionRef` above and then recompute the `GetHash()` at the end of this function?,https://github.com/bitcoin/bitcoin/pull/10286#discussion_r144110386,144110386,src/rpc/rawtransaction.cpp
TheBlueMatt,2017-10-12T21:17:00Z,"I just removed this and set it to chainActive.Tip() in CreateWalletFromFile. It doesnt make sense to try to use this to block wallet until we're caught up with the current tip in reorg, it isnt a regression so we should just leave it. When/if we expose last_block_processed via RPC (and allow wallet to return data that is stale) we should change that, I suppose.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r144412181,144412181,src/wallet/wallet.cpp
TheBlueMatt,2017-10-13T16:22:20Z,"For symmetry with TransactionAddedToMempool. I'd rather rename the MempoolEntryRemoved signal in CTxMempool isntead, but, really, I cant say I have hugely strong feelings. Considering I have a PR lined up after this one to rework some of the mempool parts of this interface, maybe lets leave that for the next PR?",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r144598619,144598619,src/validationinterface.cpp
TheBlueMatt,2017-10-13T16:25:39Z,"I believe this to be fine. nTimeBestReceived is passed to wallet as the first parameter to ResendWalletTransactions, and is effectively just called on a loop to resend wallet transactions when we need to. If it gets called with an nTimeBestReceived that is further back than we are, that should be fine, it just won't rebroadcast until the next time its called.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r144599372,144599372,src/validationinterface.cpp
TheBlueMatt,2017-10-13T16:28:16Z,"The code in BlockUntilSyncedToCurrentChain accesses this in a place that's going to need cs_main anyway (for chainActive.Tip()), could add a cs_wallet and call it protected by cs_wallet, but that just means an extra lock in BlockUntilSyncedToCurrentChain.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r144599889,144599889,src/wallet/wallet.h
TheBlueMatt,2017-10-13T16:29:48Z,I added comments to explain this.,https://github.com/bitcoin/bitcoin/pull/10286#discussion_r144600180,144600180,src/wallet/wallet.h
TheBlueMatt,2017-10-13T16:32:26Z,"CTransactionRef->GetHash() is (virtually) free because we cache the hash in the CTransaction. Honestly we should probably just go the other way and remove the hashTx local. Additionally, if I'm correctly understanding your request, that would result in a deadlock as the validation interface queue may not be able to make progress as long as cs_main is held in the RPC thread. I've added a comment to",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r144600758,144600758,src/rpc/rawtransaction.cpp
jnewbery,2017-10-13T18:55:03Z,"Yep, sounds good. I *thought* this was ok, but I wasn't certain and wanted to check.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r144632370,144632370,src/validationinterface.cpp
jnewbery,2017-10-13T18:56:35Z,New comment looks good. Thanks.,https://github.com/bitcoin/bitcoin/pull/10286#discussion_r144632691,144632691,src/wallet/wallet.cpp
TheBlueMatt,2017-10-13T18:57:14Z,"Misunderstood your point, moved the scope *start* down.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r144632826,144632826,src/rpc/rawtransaction.cpp
jnewbery,2017-10-13T19:00:38Z,"Yes - I agree. `m_last_block_processed` would be a really nice value to expose in the `getwalletinfo` RPC.\n\nI have a weak preference to make `m_last_block_processed` work as you'd expect (tracking the last block processed by the wallet), but this PR is already doing a lot, so I think it's also fine to keep this as is. Please update the comment in wallet.h to say that it's not actually tracking",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r144633506,144633506,src/wallet/wallet.cpp
jnewbery,2017-10-13T19:02:47Z,"Yes, sorry - my comment was unclear.\n\nChange looks good.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r144633936,144633936,src/rpc/rawtransaction.cpp
TheBlueMatt,2017-10-13T19:29:47Z,"OK, added more info to the wallet.h comment.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r144639185,144639185,src/wallet/wallet.cpp
theuni,2017-11-15T19:18:42Z,Isn't the scheduler queue abandoned at shutdown? What keeps this from blocking forever if timed just right?,https://github.com/bitcoin/bitcoin/pull/10286#discussion_r151225387,151225387,src/wallet/wallet.cpp
theuni,2017-11-15T19:23:27Z,Doesn't this entire function need cs_main ?,https://github.com/bitcoin/bitcoin/pull/10286#discussion_r151226679,151226679,src/wallet/wallet.cpp
theuni,2017-11-15T20:45:17Z,"Somewhat unrelated nit: AddToWallet's return value should be checked before using it here, but that was already the case.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r151246516,151246516,src/wallet/wallet.cpp
theuni,2017-11-15T21:14:06Z,"Without net/connman, I'd expect this RPC to fail immediately anyway.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r151253216,151253216,src/rpc/rawtransaction.cpp
TheBlueMatt,2017-11-15T22:23:24Z,"No, init.cpp calls CMainSignals().FlushBackgroundCallbacks() which will empty the CValidationInterfaceQueue. The scheduler itself is abandoned, but we shouldn't generate any new notifications by that point.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r151270146,151270146,src/wallet/wallet.cpp
TheBlueMatt,2017-11-15T22:25:51Z,It would appear so (though that isn't introduced here)....I'll let @practicalswift take a look since that appears to be his project atm.,https://github.com/bitcoin/bitcoin/pull/10286#discussion_r151270681,151270681,src/wallet/wallet.cpp
TheBlueMatt,2017-11-15T22:26:55Z,"Indeed, though in such cases not much we can do - bdb got upset, we're probably just going to shutdown soon anyway.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r151270910,151270910,src/wallet/wallet.cpp
practicalswift,2017-11-16T08:42:01Z,"Yes, according to my annotations (#11226) calling `CreateWalletFromFile` requires holding `cs_main`:\n\n```\nsrc/wallet/wallet.h:    static CWallet* CreateWalletFromFile(const std::string walletFile)\n                            EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n```\n\nThis is due to the following underlying locking requirements:\n* `CreateWalletFromFile` is reading the variable `chainAc",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r151348446,151348446,src/wallet/wallet.cpp
morcos,2017-11-20T17:43:52Z,@TheBlueMatt Shouldn't this line be before the `UnregisterBackgroundSignalScheduler`?,https://github.com/bitcoin/bitcoin/pull/10286#discussion_r152061507,152061507,src/init.cpp
TheBlueMatt,2017-11-20T20:22:14Z,"I suppose it would be more correct, yes, though I do not believe this is a bug - mempool should absolutely, absolutely not be generating any events by this point, so if it does (which I believe would result in an assert(false) or so) it would represent some other shutdown-order bug.",https://github.com/bitcoin/bitcoin/pull/10286#discussion_r152100867,152100867,src/init.cpp
