sipa,2020-03-23 20:35:22,"This shouldn't be needed, I think, because `CScriptNum` values are restricted to 32-bit.",https://github.com/bitcoin/bitcoin/pull/18413#issuecomment-602841768,602841768,
pierreN,2020-03-23 21:00:42,"OK, thanks.\n\nShould I close this PR even if it's a trivial fix to #18046 ? (cf discussion in https://github.com/bitcoin/bitcoin/pull/18383 )",https://github.com/bitcoin/bitcoin/pull/18413#issuecomment-602853710,602853710,
sipa,2020-03-23 22:41:01,"I must be wrong, because I don't really understand why it's possible that that fuzzer is able to trigger a negation of -2^63.",https://github.com/bitcoin/bitcoin/pull/18413#issuecomment-602895331,602895331,
practicalswift,2020-03-23 23:07:43,"@sipa FWIW:\n\n```\n$ xxd -p -r <<< ""2d360932445550092d36093609092d393939393939393939393939393939393939360955"" > crash-parse_script\n$ src/test/fuzz/parse_script crash-parse_script\nscript/script.h:332:35: runtime error: negation of -9223372036854775808 cannot be represented in type 'int64_t' (aka 'long'); cast to an unsigned type to negate this value to itself\n    #0 0x55e134173738 in CScr",https://github.com/bitcoin/bitcoin/pull/18413#issuecomment-602905660,602905660,
pierreN,2020-03-24 01:32:35,"> I don't really understand why it's possible that that fuzzer is able to trigger a negation of -2^63.\n\nIn the input provided by @practicalswift  above, `2d39393939393939393939393939393939393936` is the ASCII string `-9999999999999999996` which is translated by the `atoi64` in `core_read.cpp:ParseScript` to `-2^63` while looping over the `words`.\nThis is then sent to `CScriptNum::serialize` ",https://github.com/bitcoin/bitcoin/pull/18413#issuecomment-602954469,602954469,
sipa,2020-03-24 01:43:41,"Code review ACK bab50c56e1fa2477f7d625855485e8527c78747c, with either `std::abs` or `std::llabs`.\n\nIt's more obviously correct and should avoid the fuzzer issues we're seeing. I have also verified that there are no consensus-critical code paths that can trigger this (they're all restricted to much smaller numbers).\n\nI think the use of `atoi64` and its clamping behavior in core_read.cpp is ",https://github.com/bitcoin/bitcoin/pull/18413#issuecomment-602958582,602958582,
pierreN,2020-03-24 01:50:26,"OK, thanks. (also note that `atoi64` seems platform dependant (which might explain why other people in the above issue didn't see the fuzzer error)). \n\nI would'nt mind trying to do the PR for the `atoi64` too, but I guess it will be faster/less work for other people if @sipa do it :)",https://github.com/bitcoin/bitcoin/pull/18413#issuecomment-602960535,602960535,
sipa,2020-03-24 02:12:06,@pierreN Feel free to restrict the number conversion in ParseScript yourself if you like.,https://github.com/bitcoin/bitcoin/pull/18413#issuecomment-602966490,602966490,
pierreN,2020-03-24 15:55:15,"Thanks, it seems you are right. I guess the fuzzer is not triggered here since we use `abs` but the UB is still there.\n\nI'm not sure that adding a special check for -2^63 inside `CScript::serialize` (or inside `abs`) is a good thing. The only decent option available seems to be the stackoverflow post above, but it is inapplicable here.\n\nHence, I reckon there is 2 possible options for this ",https://github.com/bitcoin/bitcoin/pull/18413#issuecomment-603325182,603325182,
sipa,2020-03-24 16:10:27,"@theStack Looking at the standard library implementation isn't relevant, as it is allowed to rely on platform-specific behavior. However, it looks like std::abs is indeed specified to be undefined if the result cannot be represented in the input type.\n\nWhat is wrong with `uint64_t absvalue = (value < 0) ? -uint64_t(value) : uint64_t(value)`. I remember you tried this, but don't remember what err",https://github.com/bitcoin/bitcoin/pull/18413#issuecomment-603335889,603335889,
pierreN,2020-03-25 04:18:04,"The issue with `-uint64_t(value)` was that MSVC seemed not to implement the 5.3.1 Â§8 of the standard about the `- unary operator` properly...\n\nIt seems however that 2s complement by hand works : https://godbolt.org/z/cr-phu so I updated the branch accordingly. Thanks.",https://github.com/bitcoin/bitcoin/pull/18413#issuecomment-603631387,603631387,
theStack,2020-03-25 11:01:21,"FWIW, I just checked where else the manual `abs` approach of ""determining-sign-and-when indicating-negating-the-number"", is used in the codebase, and found this function:\nhttps://github.com/bitcoin/bitcoin/blob/5b4a9f4bdf9d90f29921425e13e50a0076edffab/src/core_write.cpp#L18-L26\nI didnt' check though in which range the `amount` values are passed from the call-sites. Maybe you want to look into ",https://github.com/bitcoin/bitcoin/pull/18413#issuecomment-603777058,603777058,
pierreN,2020-03-25 11:35:37,"> I didnt' check though in which range the `amount` values are passed from the call-sites. Maybe you want to look into it if UB is also a problem here in the course of this (or a possible future) PR.\n\nThanks. From a quick check and believing that the variable name `COIN` is accurate, you have `2^62/21 000 000/COINS > 1000` so this shoould not be able to trigger the UB ?\n\nIt seems it costs ",https://github.com/bitcoin/bitcoin/pull/18413#issuecomment-603791292,603791292,
practicalswift,2020-03-25 11:46:22,"@theStack Good catch regarding `ValueFromAmount(const CAmount& amount)`. I noticed it too when fuzzing `ValueFromAmount`:\n\nhttps://github.com/bitcoin/bitcoin/blob/3f5107d008e15efa364c53bd3ed4e819cd2c6712/src/test/fuzz/integer.cpp#L122-L128\n\nI think ideally all our functions should i.) state pre-conditions clearly (using documentation and/or assertions), and ii.) robustly handle all inputs ",https://github.com/bitcoin/bitcoin/pull/18413#issuecomment-603795377,603795377,
pierreN,2020-03-25 12:24:03,"> I noticed it too when fuzzing `ValueFromAmount`:\n\nLooking at the interesting `integer.cpp`, shouldn't the same be applied to `FormatMoney` if we follow that logic ? \n\nWith a quick regexp search I also found occurences in :\n- qt/bitcoinunits.cpp : `qint64 n_abs = (n > 0 ? n : -n);`\n- timedata.cpp : in the `abs64` function (edit: this can't happen since at worst we abs the average betw",https://github.com/bitcoin/bitcoin/pull/18413#issuecomment-603810138,603810138,
practicalswift,2020-03-31 19:44:32,"> Looking at the interesting `integer.cpp`, shouldn't the same be applied to `FormatMoney` if we follow that logic ?\n\nI suggest doing that in a follow-up PR to keep this PR focused. ~~Would be really nice to get this one merged to get rid of the last known fuzzing roadblock :)~~",https://github.com/bitcoin/bitcoin/pull/18413#issuecomment-606835340,606835340,
MarcoFalke,2020-03-31 21:09:58,@practicalswift What is the fuzzer that hits this in current master? And what is the backtrace?,https://github.com/bitcoin/bitcoin/pull/18413#issuecomment-606877080,606877080,
practicalswift,2020-04-01 05:09:07,"@MarcoFalke Oh, it seems I got the crashes mixed up.\n\nThis is the remaining case (it is unrelated to this PR):\n\n```\n$ UBSAN_OPTIONS=""print_stacktrace=1:halt_on_error=1:report_error_type=1"" src/test/fuzz/transaction crash-transaction\nINFO: Seed: 2635477314\nINFO: Loaded 1 modules   (415121 inline 8-bit counters): 415121 [0x5575e380b6d8, 0x5575e3870c69), \nINFO: Loaded 1 PC tables (415",https://github.com/bitcoin/bitcoin/pull/18413#issuecomment-607035473,607035473,
pierreN,2020-04-01 09:03:38,"OK, thanks. \n\nWhat about recycling this PR to fix those custom absolute value functions ?\n\nFor this purpose I added a small fuzzing harness in the PR  https://github.com/bitcoin/bitcoin/pull/18491\n\nOr we can just close this PR (and hence also close the fuzzing harness in #18491)",https://github.com/bitcoin/bitcoin/pull/18413#issuecomment-607128326,607128326,
pierreN,2020-04-02 13:22:18,So following this comment : https://github.com/bitcoin/bitcoin/pull/18491#issuecomment-607832528 just added `CScriptNum::serialize` to the integer fuzzing harness to this PR instead of opening another one.,https://github.com/bitcoin/bitcoin/pull/18413#issuecomment-607843813,607843813,
MarcoFalke,2020-04-03 00:42:23,"Could also add the following diff:\n\n```diff\ndiff --git a/src/test/fuzz/scriptnum_ops.cpp b/src/test/fuzz/scriptnum_ops.cpp\nindex db44bb9e19..d45c85bc51 100644\n--- a/src/test/fuzz/scriptnum_ops.cpp\n+++ b/src/test/fuzz/scriptnum_ops.cpp\n@@ -128,10 +128,6 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             script_num &= fuzzed_data_provider.ConsumeIntegral<int64_t>",https://github.com/bitcoin/bitcoin/pull/18413#issuecomment-608167861,608167861,
pierreN,2020-04-03 14:55:43,"Ow, right, thanks. Branch updated.",https://github.com/bitcoin/bitcoin/pull/18413#issuecomment-608487417,608487417,
DrahtBot,2020-04-03 20:24:25,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/18413#issuecomment-608641655,608641655,
pierreN,2020-04-28 07:51:57,"It's been around a month this PR has been opened - do you guys think I should close it?\n\nThanks.",https://github.com/bitcoin/bitcoin/pull/18413#issuecomment-620442225,620442225,
sipa,2020-04-28 08:30:05,ACK 2748e8793267126c5b40621d75d1930e358f057e,https://github.com/bitcoin/bitcoin/pull/18413#issuecomment-620460892,620460892,
MarcoFalke,2020-04-29 19:52:48,"ACK 2748e8793267126c5b40621d75d1930e358f057e, only checked that the bitcoind binary does not change with clang -O2 ðŸŽ“\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK 2748e8793267126c5b40621d75d1930e358f057e, only checked that the bitcoind binary does not change with clang -O2 ðŸŽ“\n-----BEGIN PGP SIGNA",https://github.com/bitcoin/bitcoin/pull/18413#issuecomment-621427474,621427474,
practicalswift,2020-04-30 12:45:06,ACK 2748e8793267126c5b40621d75d1930e358f057e,https://github.com/bitcoin/bitcoin/pull/18413#issuecomment-621810639,621810639,
jonatack,2020-04-30 16:17:59,"@pierreN no worries, a month (or much, much longer) isn't unusual due to the number of PRs opened relative to the number of people who review.",https://github.com/bitcoin/bitcoin/pull/18413#issuecomment-621955868,621955868,
pierreN,2020-05-01 04:44:54,"Ow my bad - OK, thanks for the ACKs, I'll leave the PR open.",https://github.com/bitcoin/bitcoin/pull/18413#issuecomment-622245826,622245826,
sipa,2020-03-24 01:26:59,"I think you want to use `std::abs`, which since C++11 is overloaded to work for all signed integer types as input (avoiding the assumption that long long is enough for 64 bits, and also avoiding promoting values to higher than 64 bits in case long long is even bigger).\n\nSee https://en.cppreference.com/w/cpp/numeric/math/abs",https://github.com/bitcoin/bitcoin/pull/18413#discussion_r396853403,396853403,src/script/script.h
pierreN,2020-03-24 01:32:00,OK thanks I'm testing this. I thought that `llabs` showed more clearly the intend but using `abs` might be better if you want to switch to a smaller type later indeed.,https://github.com/bitcoin/bitcoin/pull/18413#discussion_r396854722,396854722,src/script/script.h
sipa,2020-03-24 01:34:10,"Oh no, this won't ever switch to a smaller type.\n\nI'm just commenting this because hardcoding the assumption that long long = 64 bits seems bad (if there were an abs64bit or so that would seem ideal, but there isn't). Thankfully, thanks to std::abs being overloaded for all integer types, there is no need for such an assumption.",https://github.com/bitcoin/bitcoin/pull/18413#discussion_r396855292,396855292,src/script/script.h
pierreN,2020-03-24 01:42:58,"Hah indeed yes, this is better that way then.",https://github.com/bitcoin/bitcoin/pull/18413#discussion_r396857387,396857387,src/script/script.h
MarcoFalke,2020-04-08 13:12:59,Also adjust line 139 of this file?,https://github.com/bitcoin/bitcoin/pull/18413#discussion_r405513594,405513594,src/test/fuzz/integer.cpp
pierreN,2020-04-08 23:34:35,"Ow, right, thanks, I missed this one when I grepped for the runtime error.\n\nHence removed the `CScriptNum::serialize(i64);` since line 139 already tests it.",https://github.com/bitcoin/bitcoin/pull/18413#discussion_r405873906,405873906,src/test/fuzz/integer.cpp
