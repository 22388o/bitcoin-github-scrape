Sjors,2018-06-11T08:04:01Z,"ConceptACK for improved readability, though for the same reason I can't easily tell if it's correct :-)",https://github.com/bitcoin/bitcoin/pull/13430#issuecomment-396157042,396157042,
Empact,2018-06-11T09:12:04Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/13430#issuecomment-396176052,396176052,
promag,2018-06-11T12:32:21Z,"As @sdaftuar pointed out before, the burden in reviewing validation changes may not be worth it, unless this is really incomplete. I don't think this improves readability that much, but I'm in the same position as @Sjors.",https://github.com/bitcoin/bitcoin/pull/13430#issuecomment-396227294,396227294,
kallewoof,2018-06-12T07:14:53Z,"@promag I feel like this makes it clear which of the two cases ""do we have this block yet"" versus ""is this block pruned"", which I believe improves readability enough to warrant the effort. If others think it's more trouble than it's worth I'll grumpily close, though. ;)",https://github.com/bitcoin/bitcoin/pull/13430#issuecomment-396489830,396489830,
Sjors,2018-06-15T08:36:39Z,"Don't worry too much about #13029; I'm waiting to see if #11082 makes it in, in which case that one can be closed.",https://github.com/bitcoin/bitcoin/pull/13430#issuecomment-397553329,397553329,
kallewoof,2018-06-27T22:24:36Z,"@sipa Github comment threading is buggy, but yes, see discussion above -- `block` is known to be non-null because it is checked (1) before entry and (2) at each loop in the form `block->pprev`.",https://github.com/bitcoin/bitcoin/pull/13430#issuecomment-400848788,400848788,
DrahtBot,2018-08-03T20:28:34Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14711](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14711.html) (Remove uses of chainActive and mapBlockInde",https://github.com/bitcoin/bitcoin/pull/13430#issuecomment-410367676,410367676,
DrahtBot,2018-08-10T12:37:21Z,"<!--5d09a71f8925f3f132321140b44b946d-->The last travis run for this pull request was 56 days ago and is thus outdated. To trigger a fresh travis build, this pull request should be closed and re-opened.",https://github.com/bitcoin/bitcoin/pull/13430#issuecomment-412069660,412069660,
MarcoFalke,2019-04-22T18:30:57Z,Might want to clarify the documentation of IsBlockPruned first? I.e. explain why it returns false for a block that has its data downloaded or why it returns false for a block that is missing its data.,https://github.com/bitcoin/bitcoin/pull/13430#issuecomment-485505154,485505154,
kallewoof,2019-04-24T04:35:24Z,@MarcoFalke I kind of closed this out of frustration due to lack of feedback. I can reopen if you think it's worth it to try to get this merged.,https://github.com/bitcoin/bitcoin/pull/13430#issuecomment-486064191,486064191,
Empact,2018-06-11T07:11:23Z,This is slightly different because `!IsBlockPruned` is true when `BLOCK_HAVE_DATA` but from the immediate code alone `nTx > 0` is not guaranteed. Is it the case that `BLOCK_HAVE_DATA` blocks are guaranteed to have `nTx > 0`?,https://github.com/bitcoin/bitcoin/pull/13430#discussion_r194308210,194308210,src/wallet/wallet.cpp
Empact,2018-06-11T07:13:30Z,nit: Explicit precedence for `chainActive.Tip()->nHeight - nPrunedBlocksLikelyToHave` would be nice,https://github.com/bitcoin/bitcoin/pull/13430#discussion_r194308580,194308580,src/net_processing.cpp
Empact,2018-06-11T07:14:41Z,"Just noting that I see you mention this in your notes: ""Note that nTx > 0? is supposed to always be equivalent to (pindex->nStatus & BLOCK_HAVE_DATA)?.""",https://github.com/bitcoin/bitcoin/pull/13430#discussion_r194308812,194308812,src/wallet/wallet.cpp
kallewoof,2018-06-11T07:24:24Z,"Yeah. if nTx = 0, it means you do not have data (nStatus & BHD), and if nTx > 0, it means you do have data, so the two checks are supposed to be equivalent, but I think they're done as a safety harness. That said, in this case the old code does `block->pprev->nStatus & BLOCK_HAVE_DATA) && block->pprev->nTx > 0` which is identical to the `!IsBlockPruned` case, isn't it?",https://github.com/bitcoin/bitcoin/pull/13430#discussion_r194310667,194310667,src/wallet/wallet.cpp
kallewoof,2018-06-11T07:25:59Z,You mean `()`? I don't think it's unclear that `<=` takes precedence over `-` (as opposed to e.g. `&&` and `||`)...,https://github.com/bitcoin/bitcoin/pull/13430#discussion_r194311026,194311026,src/net_processing.cpp
Empact,2018-06-11T07:45:58Z,"It's not identical - via De Morgan's law:\n* IsBlockPruned: `!(nStatus & BLOCK_HAVE_DATA) && nTx > 0`\n* !IsBlockPruned: `(nStatus & BLOCK_HAVE_DATA) || nTx <= 0`",https://github.com/bitcoin/bitcoin/pull/13430#discussion_r194315186,194315186,src/wallet/wallet.cpp
kallewoof,2018-06-11T08:15:33Z,"Hm, you're right. I got the `nTx > 0` part backwards... Eesh.",https://github.com/bitcoin/bitcoin/pull/13430#discussion_r194322419,194322419,src/wallet/wallet.cpp
kallewoof,2018-06-11T08:26:03Z,"The more I stare at the original line, the more I think the nTx part is backwards. I think they intended to check if it was pruned, but got the check to instead check if 'they have the data and the nTx > 0'. But if they have the data, nTx should always be > 0.\n\nI.e.\n* for a pruned block, `nTx > 0` but `nStatus & BHD == 0`\n* for a non-pruned block, `nTx > 0` and `nStatus & BHD != 0`\n* for",https://github.com/bitcoin/bitcoin/pull/13430#discussion_r194324920,194324920,src/wallet/wallet.cpp
Empact,2018-06-11T09:06:15Z,"Right, so my point is that, if the `false true ?????` case is relevant, then we need to exclude it. Looks like `CChainState::CheckBlockIndex` excludes that possibility (which is intuitive given coinbase exists at least), so I'm tending to agree with you: https://github.com/bitcoin/bitcoin/blob/master/src/validation.cpp#L4545",https://github.com/bitcoin/bitcoin/pull/13430#discussion_r194335893,194335893,src/wallet/wallet.cpp
kallewoof,2018-06-11T09:27:04Z,"I don't think it's ever possible for that case to happen, so I think `!IsBlockPruned()` does what we want here. I.e. it's not a relevant case. Note that this is a check that goes back in the blockchain and only stops if it encounters a missing block. That will only ever be the case if pruning is enabled, and will only ever be caused by pruning. Non-pruning nodes never have holes in the blockchain ",https://github.com/bitcoin/bitcoin/pull/13430#discussion_r194341639,194341639,src/wallet/wallet.cpp
promag,2018-06-11T12:29:05Z,Could drop `fPruneMode` because `fHavePruned` is only true if `fHavePruned` is also true. Same below.,https://github.com/bitcoin/bitcoin/pull/13430#discussion_r194385675,194385675,src/net_processing.cpp
kallewoof,2018-06-12T07:13:04Z,Done.,https://github.com/bitcoin/bitcoin/pull/13430#discussion_r194634789,194634789,src/net_processing.cpp
promag,2018-06-12T17:47:14Z,"nit, could drop first condition `block && ` and add `assert(block)` before the loop, like https://github.com/bitcoin/bitcoin/pull/13430/files#diff-a0c8f511d90e83aa9b5857e819ced344R1243.",https://github.com/bitcoin/bitcoin/pull/13430#discussion_r194830636,194830636,src/wallet/wallet.cpp
kallewoof,2018-06-12T23:18:03Z,"`block` is updated inside the loop, so that sounds like it could be unsafe. (That said, not sure if there is ever a case where a `CBlockIndex` goes from being set to being unset, except for genesis block...)\n\nOh, and it is set to the already tested `chainActive.Tip()` so it should always start out non-null.",https://github.com/bitcoin/bitcoin/pull/13430#discussion_r194916551,194916551,src/wallet/wallet.cpp
promag,2018-06-13T00:02:52Z,`block` is updated to `block->pprev` which is already tested.,https://github.com/bitcoin/bitcoin/pull/13430#discussion_r194923450,194923450,src/wallet/wallet.cpp
kallewoof,2018-06-15T03:09:39Z,"Ah, yes you're right. Done.",https://github.com/bitcoin/bitcoin/pull/13430#discussion_r195624215,195624215,src/wallet/wallet.cpp
sipa,2018-06-26T23:20:13Z,Why remove `block &&` here?,https://github.com/bitcoin/bitcoin/pull/13430#discussion_r198326131,198326131,src/wallet/wallet.cpp
promag,2018-06-26T23:27:09Z,@sipa see above.,https://github.com/bitcoin/bitcoin/pull/13430#discussion_r198327183,198327183,src/wallet/wallet.cpp
promag,2018-07-04T17:36:08Z,"@sipa `.Tip()` is always not null (at this point), and `block->pprev` is next `block` value.",https://github.com/bitcoin/bitcoin/pull/13430#discussion_r200180212,200180212,src/wallet/wallet.cpp
