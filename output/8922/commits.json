[
  {
    "sha": "032e883b937a6b70d5c367fc2ee57d7eea8cb473",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzJlODgzYjkzN2E2YjcwZDVjMzY3ZmMyZWU1N2Q3ZWVhOGNiNDcz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-14T16:54:15Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-14T16:54:15Z"
      },
      "message": "[qa] Send segwit-encoded blocktxn messages in p2p-compactblocks",
      "tree": {
        "sha": "6d8d266d29d72616931dbf8dfadc0479ae644b83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d8d266d29d72616931dbf8dfadc0479ae644b83"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/032e883b937a6b70d5c367fc2ee57d7eea8cb473",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/032e883b937a6b70d5c367fc2ee57d7eea8cb473",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/032e883b937a6b70d5c367fc2ee57d7eea8cb473",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/032e883b937a6b70d5c367fc2ee57d7eea8cb473/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "03dd707dc027fbf6f24120213f8eb66571600374",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03dd707dc027fbf6f24120213f8eb66571600374",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/03dd707dc027fbf6f24120213f8eb66571600374"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 18,
      "deletions": 10
    },
    "files": [
      {
        "sha": "1beab609b68efc8b50afcb976f53d18c1f72ca9a",
        "filename": "qa/rpc-tests/p2p-compactblocks.py",
        "status": "modified",
        "additions": 18,
        "deletions": 10,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/032e883b937a6b70d5c367fc2ee57d7eea8cb473/qa/rpc-tests/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/032e883b937a6b70d5c367fc2ee57d7eea8cb473/qa/rpc-tests/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-compactblocks.py?ref=032e883b937a6b70d5c367fc2ee57d7eea8cb473",
        "patch": "@@ -6,7 +6,7 @@\n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment\n from test_framework.siphash import siphash256\n from test_framework.script import CScript, OP_TRUE\n \n@@ -123,11 +123,13 @@ def setup_network(self):\n                  [\"-debug\", \"-logtimemicros\", \"-txindex\"]])\n         connect_nodes(self.nodes[0], 1)\n \n-    def build_block_on_tip(self, node):\n+    def build_block_on_tip(self, node, segwit=False):\n         height = node.getblockcount()\n         tip = node.getbestblockhash()\n         mtp = node.getblockheader(tip)['mediantime']\n         block = create_block(int(tip, 16), create_coinbase(height + 1), mtp + 1)\n+        if segwit:\n+            add_witness_commitment(block)\n         block.solve()\n         return block\n \n@@ -380,11 +382,11 @@ def test_compactblock_construction(self, node, test_node, version, use_witness_a\n     # Post-segwit: upgraded nodes would only make this request of cb-version-2,\n     # NODE_WITNESS peers.  Unupgraded nodes would still make this request of\n     # any cb-version-1-supporting peer.\n-    def test_compactblock_requests(self, node, test_node):\n+    def test_compactblock_requests(self, node, test_node, version, segwit):\n         # Try announcing a block with an inv or header, expect a compactblock\n         # request\n         for announce in [\"inv\", \"header\"]:\n-            block = self.build_block_on_tip(node)\n+            block = self.build_block_on_tip(node, segwit=segwit)\n             with mininode_lock:\n                 test_node.last_getdata = None\n \n@@ -403,8 +405,11 @@ def test_compactblock_requests(self, node, test_node):\n             comp_block.header = CBlockHeader(block)\n             comp_block.nonce = 0\n             [k0, k1] = comp_block.get_siphash_keys()\n+            coinbase_hash = block.vtx[0].sha256\n+            if version == 2:\n+                coinbase_hash = block.vtx[0].calc_sha256(True)\n             comp_block.shortids = [\n-                    calculate_shortid(k0, k1, block.vtx[0].sha256) ]\n+                    calculate_shortid(k0, k1, coinbase_hash) ]\n             test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n             assert_equal(int(node.getbestblockhash(), 16), block.hashPrevBlock)\n             # Expect a getblocktxn message.\n@@ -414,7 +419,10 @@ def test_compactblock_requests(self, node, test_node):\n             assert_equal(absolute_indexes, [0])  # should be a coinbase request\n \n             # Send the coinbase, and verify that the tip advances.\n-            msg = msg_blocktxn()\n+            if version == 2:\n+                msg = msg_witness_blocktxn()\n+            else:\n+                msg = msg_blocktxn()\n             msg.block_transactions.blockhash = block.sha256\n             msg.block_transactions.transactions = [block.vtx[0]]\n             test_node.send_and_ping(msg)\n@@ -750,9 +758,9 @@ def run_test(self):\n         sync_blocks(self.nodes)\n \n         print(\"\\tTesting compactblock requests... \")\n-        self.test_compactblock_requests(self.nodes[0], self.test_node)\n+        self.test_compactblock_requests(self.nodes[0], self.test_node, 1, False)\n         sync_blocks(self.nodes)\n-        self.test_compactblock_requests(self.nodes[1], self.segwit_node)\n+        self.test_compactblock_requests(self.nodes[1], self.segwit_node, 2, False)\n         sync_blocks(self.nodes)\n \n         print(\"\\tTesting getblocktxn requests...\")\n@@ -800,7 +808,7 @@ def run_test(self):\n         sync_blocks(self.nodes)\n \n         print(\"\\tTesting compactblock requests (unupgraded node)... \")\n-        self.test_compactblock_requests(self.nodes[0], self.test_node)\n+        self.test_compactblock_requests(self.nodes[0], self.test_node, 1, True)\n \n         print(\"\\tTesting getblocktxn requests (unupgraded node)...\")\n         self.test_getblocktxn_requests(self.nodes[0], self.test_node, 1)\n@@ -815,7 +823,7 @@ def run_test(self):\n         assert_equal(self.nodes[0].getbestblockhash(), self.nodes[1].getbestblockhash())\n \n         print(\"\\tTesting compactblock requests (segwit node)... \")\n-        self.test_compactblock_requests(self.nodes[1], self.segwit_node)\n+        self.test_compactblock_requests(self.nodes[1], self.segwit_node, 2, True)\n \n         print(\"\\tTesting getblocktxn requests (segwit node)...\")\n         self.test_getblocktxn_requests(self.nodes[1], self.segwit_node, 2)"
      }
    ]
  },
  {
    "sha": "a4ad37d4ef4bcd81bc9d867b277efdebc86bc2e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNGFkMzdkNGVmNGJjZDgxYmM5ZDg2N2IyNzdlZmRlYmM4NmJjMmU4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-15T21:51:05Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-15T21:51:05Z"
      },
      "message": "[qa] Build v4 blocks in p2p-compactblocktests\n\nThis fixes an issue in backporting to 0.13 as 0.13 enforces SF\nactivation by block version lockin instead of through a hard-coded\nblock height.",
      "tree": {
        "sha": "c3c3d2ee1fbc0113d1a6db738a268624914a028f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3c3d2ee1fbc0113d1a6db738a268624914a028f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4ad37d4ef4bcd81bc9d867b277efdebc86bc2e8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4ad37d4ef4bcd81bc9d867b277efdebc86bc2e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a4ad37d4ef4bcd81bc9d867b277efdebc86bc2e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4ad37d4ef4bcd81bc9d867b277efdebc86bc2e8/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "032e883b937a6b70d5c367fc2ee57d7eea8cb473",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/032e883b937a6b70d5c367fc2ee57d7eea8cb473",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/032e883b937a6b70d5c367fc2ee57d7eea8cb473"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "131654c333d4daa48687c47b32411b2efc84b05c",
        "filename": "qa/rpc-tests/p2p-compactblocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4ad37d4ef4bcd81bc9d867b277efdebc86bc2e8/qa/rpc-tests/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4ad37d4ef4bcd81bc9d867b277efdebc86bc2e8/qa/rpc-tests/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-compactblocks.py?ref=a4ad37d4ef4bcd81bc9d867b277efdebc86bc2e8",
        "patch": "@@ -128,6 +128,7 @@ def build_block_on_tip(self, node, segwit=False):\n         tip = node.getbestblockhash()\n         mtp = node.getblockheader(tip)['mediantime']\n         block = create_block(int(tip, 16), create_coinbase(height + 1), mtp + 1)\n+        block.nVersion = 4\n         if segwit:\n             add_witness_commitment(block)\n         block.solve()"
      }
    ]
  }
]