laanwj,2018-07-23T10:22:00Z,Concept ACK!,https://github.com/bitcoin/bitcoin/pull/13746#issuecomment-407010930,407010930,
DrahtBot,2018-07-25T15:00:47Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15118](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15118.html) (Refactor block file logic by jimpo)\n\nIf y",https://github.com/bitcoin/bitcoin/pull/13746#issuecomment-407785624,407785624,
kallewoof,2018-07-26T02:24:06Z,"@promag \n\n> What if there is a node (A) running in the master data dir of node (B) and A is writing a block at the same time B is reading?\n\nI'm not sure what the chances are that this results in actual corruption. The master is safe always, but the slave may end up with a copy that has incomplete data. That depends on whether the master flushes the block file atomically or not, though. I w",https://github.com/bitcoin/bitcoin/pull/13746#issuecomment-407955414,407955414,
kallewoof,2018-07-26T02:41:22Z,"Experiment: skip last byte for case ""!readonly & copy existing"":\n\n```diff\ndiff --git a/src/validation.cpp b/src/validation.cpp\nindex b5646f107..7af6956b3 100644\n--- a/src/validation.cpp\n+++ b/src/validation.cpp\n@@ -3804,6 +3804,11 @@ static FILE* OpenDiskFile(const CDiskBlockPos &pos, const char *prefix, bool fRe\n             while (!feof(mfile)) {\n                 size_t r = fre",https://github.com/bitcoin/bitcoin/pull/13746#issuecomment-407957987,407957987,
jonasschnelli,2018-07-30T15:57:33Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/13746#issuecomment-408914970,408914970,
kallewoof,2018-07-31T06:23:30Z,"Actually, I realized that it should be possible to make a perfectly safe slave instance by checking the master directory for the last block file in existence, and marking that minus 1 as the last available master block file.\n\nI.e. if master has blk000 ~ blk500, slave will use files blk000 ~ blk499 from master, copy blk500 over the first time it starts up, and then make its own files from there",https://github.com/bitcoin/bitcoin/pull/13746#issuecomment-409108771,409108771,
jonasschnelli,2018-07-31T11:12:34Z,"I'm more worried about hot copying the levelDB part (chainstate/). Imo to be safe, the master must close the leveldb environment.",https://github.com/bitcoin/bitcoin/pull/13746#issuecomment-409184018,409184018,
sipa,2018-07-31T22:40:35Z,"You can't do this while an instance is running on the master (unless you can somehow force it to temporarily close its database environment and pause operations). If you don't need it to work while the master is running you should grab the lock on the master to avoid it.\n\nAlternatively you can just not copy databases at all, and require a reindex to setup a second datadir.",https://github.com/bitcoin/bitcoin/pull/13746#issuecomment-409391199,409391199,
kallewoof,2018-08-01T09:46:08Z,"@sipa I am now locking master temporarily while doing the copying, and init-error-shutdown if it is already locked.\n\nI am also now tracking the last block file that the slave relies on in master, so it won't accidentally start reading from master block files if master runs ahead in file count (e.g. slave writes blk123, master then creates blk124 and slave starts trying to read from it).\n\n@",https://github.com/bitcoin/bitcoin/pull/13746#issuecomment-409517950,409517950,
jonasschnelli,2018-08-02T07:04:24Z,"@kallewoof \nDoes the lock works against masters not running this change (0.17 as example)?",https://github.com/bitcoin/bitcoin/pull/13746#issuecomment-409827690,409827690,
kallewoof,2018-08-02T07:14:22Z,"> Does the lock works against masters not running this change (0.17 as example)?\n\nYes. The slave locks the master datadir before copying, and after the initial copying is done, it no longer relies on master playing nice. Since the datadir locking is done in older clients as well, this should (1) cause the slave to fail if the master is running when it's started up for the first time, and (2) c",https://github.com/bitcoin/bitcoin/pull/13746#issuecomment-409829934,409829934,
DrahtBot,2019-03-02T22:38:23Z,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/13746#issuecomment-468967292,468967292,
practicalswift,2019-03-03T09:32:48Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/13746#issuecomment-469005002,469005002,
promag,2018-07-23T10:40:37Z,"Use prefix `g_`, `g_has_master_datadir`.",https://github.com/bitcoin/bitcoin/pull/13746#discussion_r204355839,204355839,src/validation.cpp
promag,2018-07-25T14:00:09Z,Should handle failure instead of ignoring? Could lead to corrupt blocks?,https://github.com/bitcoin/bitcoin/pull/13746#discussion_r205119781,205119781,src/validation.cpp
promag,2018-07-25T14:00:30Z,2018,https://github.com/bitcoin/bitcoin/pull/13746#discussion_r205119910,205119910,test/functional/feature_masterdatadir.py
jonasschnelli,2018-07-30T15:54:51Z,nit: s/LDB/levelDB,https://github.com/bitcoin/bitcoin/pull/13746#discussion_r206223503,206223503,src/init.cpp
jonasschnelli,2018-07-30T15:57:20Z,Doesn't this copy action require a protection that the masterdatadir is currently not in use/write? If a Bitcoin Core instance is using this (master) datadir it may result in a corrupted copy?,https://github.com/bitcoin/bitcoin/pull/13746#discussion_r206225733,206225733,src/init.cpp
kallewoof,2018-07-30T17:06:32Z,"Yes. Master is guaranteed to be safe as no write operation is ever done from the slave, but the opposite is not the case. See https://github.com/bitcoin/bitcoin/pull/13746#issuecomment-407957987 for experiment on corruption. There's no good way to recover, as the slave will have already written data and closed the file before realizing it was truncated.\n\nThe question remains how frequent this ",https://github.com/bitcoin/bitcoin/pull/13746#discussion_r206249895,206249895,src/init.cpp
practicalswift,2018-10-02T21:01:49Z,"Use placeholders in the log message like this:\n\n```\nself.log.info(""... %s / 150"", i)\n```\n\nIt is the preferred form since it allows for lazy evaluation.\n\nApplies to all logging calls in this PR :-)\n",https://github.com/bitcoin/bitcoin/pull/13746#discussion_r222110718,222110718,test/functional/feature_masterdatadir.py
kallewoof,2018-10-06T00:44:34Z,Fixed!,https://github.com/bitcoin/bitcoin/pull/13746#discussion_r223165744,223165744,test/functional/feature_masterdatadir.py
