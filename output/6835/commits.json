[
  {
    "sha": "5c9a79441a58969c441a20e4151c5ffed4f79678",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YzlhNzk0NDFhNTg5NjljNDQxYTIwZTQxNTFjNWZmZWQ0Zjc5Njc4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-01-11T22:34:08Z"
      },
      "committer": {
        "name": "J Ross Nicoll",
        "email": "jrn@jrn.me.uk",
        "date": "2015-10-24T19:10:02Z"
      },
      "message": "Add address-based index\n\n1) Maintain a salt to perturbate the address index (protection against\n   collisions).\n2) Add support for address index entries in the block index, and\n   maintain those if -addrindex is specified. It indexes the use of\n   every >8-byte data push in output script or consumed script - or in\n   case of no such push, the entire script.\n3) Add a searchrawtransactions RPC call, which can look up raw\n   transactions by address.",
      "tree": {
        "sha": "33c644b3752b2892b1c0c13f6f235b274327b5ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33c644b3752b2892b1c0c13f6f235b274327b5ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c9a79441a58969c441a20e4151c5ffed4f79678",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c9a79441a58969c441a20e4151c5ffed4f79678",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5c9a79441a58969c441a20e4151c5ffed4f79678",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c9a79441a58969c441a20e4151c5ffed4f79678/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rnicoll",
      "id": 3513077,
      "node_id": "MDQ6VXNlcjM1MTMwNzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3513077?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rnicoll",
      "html_url": "https://github.com/rnicoll",
      "followers_url": "https://api.github.com/users/rnicoll/followers",
      "following_url": "https://api.github.com/users/rnicoll/following{/other_user}",
      "gists_url": "https://api.github.com/users/rnicoll/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rnicoll/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rnicoll/subscriptions",
      "organizations_url": "https://api.github.com/users/rnicoll/orgs",
      "repos_url": "https://api.github.com/users/rnicoll/repos",
      "events_url": "https://api.github.com/users/rnicoll/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rnicoll/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46f74379b86be982b121bcb8c3cfe07fa80bffd0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46f74379b86be982b121bcb8c3cfe07fa80bffd0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46f74379b86be982b121bcb8c3cfe07fa80bffd0"
      }
    ],
    "stats": {
      "total": 291,
      "additions": 272,
      "deletions": 19
    },
    "files": [
      {
        "sha": "4a2e3c981349abb971ed3d7d57b986e1d540cf68",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c9a79441a58969c441a20e4151c5ffed4f79678/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c9a79441a58969c441a20e4151c5ffed4f79678/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=5c9a79441a58969c441a20e4151c5ffed4f79678",
        "patch": "@@ -1211,7 +1211,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n     nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greated than nMaxDbcache\n     int64_t nBlockTreeDBCache = nTotalCache / 8;\n-    if (nBlockTreeDBCache > (1 << 21) && !GetBoolArg(\"-txindex\", false))\n+    if (nBlockTreeDBCache > (1 << 21) && !GetBoolArg(\"-txindex\", false) && !GetBoolArg(\"-addrindex\", false))\n         nBlockTreeDBCache = (1 << 21); // block tree db cache shouldn't be larger than 2 MiB\n     nTotalCache -= nBlockTreeDBCache;\n     int64_t nCoinDBCache = std::min(nTotalCache / 2, (nTotalCache / 4) + (1 << 23)); // use 25%-50% of the remainder for disk cache\n@@ -1279,6 +1279,12 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     break;\n                 }\n \n+                // Check for changed -addrindex state\n+                if (fAddrIndex != GetBoolArg(\"-addrindex\", false)) {\n+                    strLoadError = _(\"You need to rebuild the database using -reindex to change -addrindex\");\n+                    break;\n+                }\n+\n                 uiInterface.InitMessage(_(\"Verifying blocks...\"));\n                 if (fHavePruned && GetArg(\"-checkblocks\", 288) > MIN_BLOCKS_TO_KEEP) {\n                     LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; -checkblocks=%d may fail\\n\","
      },
      {
        "sha": "f4139f888ad3ebe6d3ff841825bc485e592b6589",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 103,
        "deletions": 18,
        "changes": 121,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c9a79441a58969c441a20e4151c5ffed4f79678/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c9a79441a58969c441a20e4151c5ffed4f79678/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5c9a79441a58969c441a20e4151c5ffed4f79678",
        "patch": "@@ -21,6 +21,7 @@\n #include \"pow.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n+#include \"pubkey.h\"\n #include \"script/script.h\"\n #include \"script/sigcache.h\"\n #include \"script/standard.h\"\n@@ -64,6 +65,7 @@ int nScriptCheckThreads = 0;\n bool fImporting = false;\n bool fReindex = false;\n bool fTxIndex = false;\n+bool fAddrIndex = false;\n bool fHavePruned = false;\n bool fPruneMode = false;\n bool fIsBareMultisigStd = true;\n@@ -972,6 +974,45 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     return true;\n }\n \n+bool ReadTransaction(CTransaction& txOut, const CDiskTxPos &pos, uint256 &hashBlock) {\n+    CAutoFile file(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull())\n+        return error(\"%s: OpenBlockFile failed\", __func__);\n+    CBlockHeader header;\n+    try {\n+        file >> header;\n+        fseek(file.Get(), pos.nTxOffset, SEEK_CUR);\n+        file >> txOut;\n+    } catch (std::exception &e) {\n+        return error(\"%s() : deserialize or I/O error\", __PRETTY_FUNCTION__);\n+    }\n+    hashBlock = header.GetHash();\n+    return true;\n+}\n+\n+bool FindTransactionsByDestination(const CTxDestination &dest, std::set<CExtDiskTxPos> &setpos) {\n+    uint160 addrid;\n+    const CKeyID *pkeyid = boost::get<CKeyID>(&dest);\n+    if (pkeyid) {\n+        addrid = static_cast<uint160>(*pkeyid);\n+    } else {\n+        const CScriptID *pscriptid = boost::get<CScriptID>(&dest);\n+        if (pscriptid)\n+            addrid = static_cast<uint160>(*pscriptid);\n+        else\n+            return false;\n+    }\n+\n+    LOCK(cs_main);\n+    if (!fAddrIndex)\n+        return false;\n+    std::vector<CExtDiskTxPos> vPos;\n+    if (!pblocktree->ReadAddrIndex(addrid, vPos))\n+        return false;\n+    setpos.insert(vPos.begin(), vPos.end());\n+    return true;\n+}\n+\n /** Return transaction in tx, and if it was found inside a block, its hash is placed in hashBlock */\n bool GetTransaction(const uint256 &hash, CTransaction &txOut, uint256 &hashBlock, bool fAllowSlow)\n {\n@@ -987,18 +1028,8 @@ bool GetTransaction(const uint256 &hash, CTransaction &txOut, uint256 &hashBlock\n     if (fTxIndex) {\n         CDiskTxPos postx;\n         if (pblocktree->ReadTxIndex(hash, postx)) {\n-            CAutoFile file(OpenBlockFile(postx, true), SER_DISK, CLIENT_VERSION);\n-            if (file.IsNull())\n-                return error(\"%s: OpenBlockFile failed\", __func__);\n-            CBlockHeader header;\n-            try {\n-                file >> header;\n-                fseek(file.Get(), postx.nTxOffset, SEEK_CUR);\n-                file >> txOut;\n-            } catch (const std::exception& e) {\n-                return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n-            }\n-            hashBlock = header.GetHash();\n+            if (!ReadTransaction(txOut, postx, hashBlock))\n+                return false;\n             if (txOut.GetHash() != hash)\n                 return error(\"%s: txid mismatch\", __func__);\n             return true;\n@@ -1692,6 +1723,32 @@ static int64_t nTimeIndex = 0;\n static int64_t nTimeCallbacks = 0;\n static int64_t nTimeTotal = 0;\n \n+// Index either: a) every data push >=8 bytes,  b) if no such pushes, the entire script\n+void static BuildAddrIndex(const CScript &script, const CExtDiskTxPos &pos, std::vector<std::pair<uint160, CExtDiskTxPos> > &out) {\n+    CScript::const_iterator pc = script.begin();\n+    CScript::const_iterator pend = script.end();\n+    std::vector<unsigned char> data;\n+    opcodetype opcode;\n+    bool fHaveData = false;\n+    while (pc < pend) {\n+        script.GetOp(pc, opcode, data);\n+        if (0 <= opcode && opcode <= OP_PUSHDATA4 && data.size() >= 8) { // data element\n+            uint160 addrid;\n+            if (data.size() <= 20) {\n+                memcpy(&addrid, &data[0], data.size());\n+            } else {\n+                addrid = Hash160(data);\n+            }\n+            out.push_back(std::make_pair(addrid, pos));\n+            fHaveData = true;\n+        }\n+    }\n+    if (!fHaveData) {\n+        uint160 addrid = Hash160(script);\n+        out.push_back(std::make_pair(addrid, pos));\n+    }\n+}\n+\n bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& view, bool fJustCheck)\n {\n     const CChainParams& chainparams = Params();\n@@ -1771,10 +1828,17 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     CAmount nFees = 0;\n     int nInputs = 0;\n     unsigned int nSigOps = 0;\n-    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n-    std::vector<std::pair<uint256, CDiskTxPos> > vPos;\n-    vPos.reserve(block.vtx.size());\n-    blockundo.vtxundo.reserve(block.vtx.size() - 1);\n+    CExtDiskTxPos pos(CDiskTxPos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size())), pindex->nHeight);\n+    std::vector<std::pair<uint256, CDiskTxPos> > vPosTxid;\n+    std::vector<std::pair<uint160, CExtDiskTxPos> > vPosAddrid;\n+    if (fTxIndex) {\n+        vPosTxid.reserve(block.vtx.size());\n+        blockundo.vtxundo.reserve(block.vtx.size() - 1);\n+    }\n+    if (fAddrIndex) {\n+        vPosAddrid.reserve(4*block.vtx.size());\n+        // We don't keep undo information, as we never remove address indexes\n+    }\n     for (unsigned int i = 0; i < block.vtx.size(); i++)\n     {\n         const CTransaction &tx = block.vtx[i];\n@@ -1811,13 +1875,26 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n             control.Add(vChecks);\n         }\n \n+        if (fTxIndex)\n+            vPosTxid.push_back(std::make_pair(block.vtx[i].GetHash(), pos));\n+        if (fAddrIndex) {\n+            if (!tx.IsCoinBase()) {\n+                BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n+                    CCoins coins;\n+                    view.GetCoins(txin.prevout.hash, coins);\n+                    BuildAddrIndex(coins.vout[txin.prevout.n].scriptPubKey, pos, vPosAddrid);\n+                }\n+            }\n+            BOOST_FOREACH(const CTxOut &txout, tx.vout)\n+                BuildAddrIndex(txout.scriptPubKey, pos, vPosAddrid);\n+        }\n+\n         CTxUndo undoDummy;\n         if (i > 0) {\n             blockundo.vtxundo.push_back(CTxUndo());\n         }\n         UpdateCoins(tx, state, view, i == 0 ? undoDummy : blockundo.vtxundo.back(), pindex->nHeight);\n \n-        vPos.push_back(std::make_pair(tx.GetHash(), pos));\n         pos.nTxOffset += ::GetSerializeSize(tx, SER_DISK, CLIENT_VERSION);\n     }\n     int64_t nTime1 = GetTimeMicros(); nTimeConnect += nTime1 - nTimeStart;\n@@ -1858,8 +1935,11 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     }\n \n     if (fTxIndex)\n-        if (!pblocktree->WriteTxIndex(vPos))\n+        if (!pblocktree->WriteTxIndex(vPosTxid))\n             return AbortNode(state, \"Failed to write transaction index\");\n+    if (fAddrIndex)\n+        if (!pblocktree->AddAddrIndex(vPosAddrid))\n+            return AbortNode(state, \"Failed to write address index\");\n \n     // add this block to the view's block chain\n     view.SetBestBlock(pindex->GetBlockHash());\n@@ -3190,6 +3270,9 @@ bool static LoadBlockIndexDB()\n     pblocktree->ReadFlag(\"txindex\", fTxIndex);\n     LogPrintf(\"%s: transaction index %s\\n\", __func__, fTxIndex ? \"enabled\" : \"disabled\");\n \n+    pblocktree->ReadFlag(\"addrindex\", fAddrIndex);\n+    LogPrintf(\"%s: address index %s\\n\", __func__, fAddrIndex ? \"enabled\" : \"disabled\");\n+\n     // Load pointer to end of best chain\n     BlockMap::iterator it = mapBlockIndex.find(pcoinsTip->GetBestBlock());\n     if (it == mapBlockIndex.end())\n@@ -3348,6 +3431,8 @@ bool InitBlockIndex() {\n     // Use the provided setting for -txindex in the new database\n     fTxIndex = GetBoolArg(\"-txindex\", false);\n     pblocktree->WriteFlag(\"txindex\", fTxIndex);\n+    fAddrIndex = GetBoolArg(\"-addrindex\", false);\n+    pblocktree->WriteFlag(\"addrindex\", fAddrIndex);\n     LogPrintf(\"Initializing databases...\\n\");\n \n     // Only add the genesis block if not reindexing (in which case we reuse the one already on disk)"
      },
      {
        "sha": "1dd75e34fc29a692143007028f96aebc9ac2b34c",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 54,
        "deletions": 0,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c9a79441a58969c441a20e4151c5ffed4f79678/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c9a79441a58969c441a20e4151c5ffed4f79678/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=5c9a79441a58969c441a20e4151c5ffed4f79678",
        "patch": "@@ -15,6 +15,7 @@\n #include \"coins.h\"\n #include \"net.h\"\n #include \"script/script_error.h\"\n+#include \"script/standard.h\"\n #include \"sync.h\"\n \n #include <algorithm>\n@@ -103,6 +104,7 @@ extern bool fImporting;\n extern bool fReindex;\n extern int nScriptCheckThreads;\n extern bool fTxIndex;\n+extern bool fAddrIndex;\n extern bool fIsBareMultisigStd;\n extern bool fRequireStandard;\n extern bool fCheckBlockIndex;\n@@ -262,8 +264,58 @@ struct CDiskTxPos : public CDiskBlockPos\n         CDiskBlockPos::SetNull();\n         nTxOffset = 0;\n     }\n+\n+    friend bool operator==(const CDiskTxPos &a, const CDiskTxPos &b) {\n+        return (a.nFile == b.nFile && a.nPos == b.nPos && a.nTxOffset == b.nTxOffset);\n+    }\n+\n+    friend bool operator!=(const CDiskTxPos &a, const CDiskTxPos &b) {\n+        return !(a == b);\n+    }\n+\n+    friend bool operator<(const CDiskTxPos &a, const CDiskTxPos &b) {\n+        return  (a.nFile < b.nFile || (\n+                (a.nFile == b.nFile) && (a.nPos < b.nPos || (\n+                                        (a.nPos == b.nPos) && (a.nTxOffset < b.nTxOffset)))));\n+    }\n };\n \n+struct CExtDiskTxPos : public CDiskTxPos\n+{\n+    unsigned int nHeight;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(*(CDiskTxPos*)this);\n+        READWRITE(VARINT(nHeight));\n+    }\n+\n+    CExtDiskTxPos(const CDiskTxPos &pos, int nHeightIn) : CDiskTxPos(pos), nHeight(nHeightIn) {\n+    }\n+\n+    CExtDiskTxPos() {\n+        SetNull();\n+    }\n+\n+    void SetNull() {\n+        CDiskTxPos::SetNull();\n+        nHeight = 0;\n+    }\n+\n+    friend bool operator==(const CExtDiskTxPos &a, const CExtDiskTxPos &b) {\n+        return (a.nHeight == b.nHeight && a.nFile == b.nFile && a.nPos == b.nPos && a.nTxOffset == b.nTxOffset);\n+    }\n+\n+    friend bool operator!=(const CExtDiskTxPos &a, const CExtDiskTxPos &b) {\n+        return !(a == b);\n+    }\n+\n+    friend bool operator<(const CExtDiskTxPos &a, const CExtDiskTxPos &b) {\n+        if (a.nHeight < b.nHeight) return true;\n+        if (a.nHeight > b.nHeight) return false;\n+        return ((const CDiskTxPos)a < (const CDiskTxPos)b);\n+    }\n+};\n \n CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree);\n \n@@ -348,8 +400,10 @@ class CScriptCheck\n \n /** Functions for disk access for blocks */\n bool WriteBlockToDisk(const CBlock& block, CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& messageStart);\n+bool ReadTransaction(CTransaction& tx, const CDiskTxPos &pos, uint256 &hashBlock);\n bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos);\n bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex);\n+bool FindTransactionsByDestination(const CTxDestination &dest, std::set<CExtDiskTxPos> &setpos);\n \n \n /** Functions for validating blocks and updating the block tree */"
      },
      {
        "sha": "19e1450792b66bde6f73169c9fea88858ac9388d",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c9a79441a58969c441a20e4151c5ffed4f79678/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c9a79441a58969c441a20e4151c5ffed4f79678/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=5c9a79441a58969c441a20e4151c5ffed4f79678",
        "patch": "@@ -74,6 +74,9 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getblockheader\", 1 },\n     { \"gettransaction\", 1 },\n     { \"getrawtransaction\", 1 },\n+    { \"searchrawtransactions\", 1 },\n+    { \"searchrawtransactions\", 2 },\n+    { \"searchrawtransactions\", 3 },\n     { \"createrawtransaction\", 0 },\n     { \"createrawtransaction\", 1 },\n     { \"createrawtransaction\", 2 },"
      },
      {
        "sha": "f446527c84a483ecc7f95ad7d46cdba4b0c1f3a7",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c9a79441a58969c441a20e4151c5ffed4f79678/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c9a79441a58969c441a20e4151c5ffed4f79678/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=5c9a79441a58969c441a20e4151c5ffed4f79678",
        "patch": "@@ -110,6 +110,66 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n     }\n }\n \n+UniValue searchrawtransactions(const UniValue &params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 4)\n+        throw runtime_error(\n+            \"searchrawtransactions <address> [verbose=1] [skip=0] [count=100]\\n\");\n+\n+    if (!fAddrIndex)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Address index not enabled\");\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+    CTxDestination dest = address.Get();\n+\n+    std::set<CExtDiskTxPos> setpos;\n+    if (!FindTransactionsByDestination(dest, setpos))\n+        throw JSONRPCError(RPC_DATABASE_ERROR, \"Cannot search for address\");\n+\n+    int nSkip = 0;\n+    int nCount = 100;\n+    bool fVerbose = true;\n+    if (params.size() > 1)\n+        fVerbose = (params[1].get_int() != 0);\n+    if (params.size() > 2)\n+        nSkip = params[2].get_int();\n+    if (params.size() > 3)\n+        nCount = params[3].get_int();\n+\n+    if (nSkip < 0)\n+        nSkip += setpos.size();\n+    if (nSkip < 0)\n+        nSkip = 0;\n+    if (nCount < 0)\n+        nCount = 0;\n+\n+    std::set<CExtDiskTxPos>::const_iterator it = setpos.begin();\n+    while (it != setpos.end() && nSkip--) it++;\n+\n+    UniValue result(UniValue::VARR);\n+    while (it != setpos.end() && nCount--) {\n+        CTransaction tx;\n+        uint256 hashBlock;\n+        if (!ReadTransaction(tx, *it, hashBlock))\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Cannot read transaction from disk\");\n+        CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+        ssTx << tx;\n+        string strHex = HexStr(ssTx.begin(), ssTx.end());\n+        if (fVerbose) {\n+            UniValue o(UniValue::VOBJ);\n+            TxToJSON(tx, hashBlock, o);\n+            o.push_back(Pair(\"hex\", strHex));\n+            result.push_back(o);\n+        } else {\n+            result.push_back(strHex);\n+        }\n+        it++;\n+    }\n+    return result;\n+}\n+\n UniValue getrawtransaction(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)"
      },
      {
        "sha": "709937cac64e1dada56d25f2213b40f7494fee1b",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c9a79441a58969c441a20e4151c5ffed4f79678/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c9a79441a58969c441a20e4151c5ffed4f79678/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=5c9a79441a58969c441a20e4151c5ffed4f79678",
        "patch": "@@ -307,6 +307,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"rawtransactions\",    \"decoderawtransaction\",   &decoderawtransaction,   true  },\n     { \"rawtransactions\",    \"decodescript\",           &decodescript,           true  },\n     { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      true  },\n+    { \"rawtransactions\",    \"searchrawtransactions\",  &searchrawtransactions,  true  },\n     { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false },\n     { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     false }, /* uses wallet if enabled */\n #ifdef ENABLE_WALLET"
      },
      {
        "sha": "aeb43f9d4ca7332e86c327dcf1f78aa52e69586f",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c9a79441a58969c441a20e4151c5ffed4f79678/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c9a79441a58969c441a20e4151c5ffed4f79678/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=5c9a79441a58969c441a20e4151c5ffed4f79678",
        "patch": "@@ -234,6 +234,7 @@ extern UniValue setmocktime(const UniValue& params, bool fHelp);\n extern UniValue resendwallettransactions(const UniValue& params, bool fHelp);\n \n extern UniValue getrawtransaction(const UniValue& params, bool fHelp); // in rcprawtransaction.cpp\n+extern UniValue searchrawtransactions(const UniValue& params, bool fHelp);\n extern UniValue listunspent(const UniValue& params, bool fHelp);\n extern UniValue lockunspent(const UniValue& params, bool fHelp);\n extern UniValue listlockunspent(const UniValue& params, bool fHelp);"
      },
      {
        "sha": "cfbfa252905e4df8b85f357db6257eb8f4ce97ed",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 0,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c9a79441a58969c441a20e4151c5ffed4f79678/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c9a79441a58969c441a20e4151c5ffed4f79678/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=5c9a79441a58969c441a20e4151c5ffed4f79678",
        "patch": "@@ -72,6 +72,10 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n }\n \n CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CDBWrapper(GetDataDir() / \"blocks\" / \"index\", nCacheSize, fMemory, fWipe) {\n+    if (!Read('S', salt)) {\n+        salt = GetRandHash();\n+        Write('S', salt);\n+    }\n }\n \n bool CBlockTreeDB::ReadBlockFileInfo(int nFile, CBlockFileInfo &info) {\n@@ -163,6 +167,41 @@ bool CBlockTreeDB::WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos>\n     return WriteBatch(batch);\n }\n \n+bool CBlockTreeDB::ReadAddrIndex(const uint160 &addrid, std::vector<CExtDiskTxPos> &list) {\n+    boost::scoped_ptr<CDBIterator> iter(NewIterator());\n+    uint64_t lookupid;\n+    {\n+        CHashWriter ss(SER_GETHASH, 0);\n+        ss << salt;\n+        ss << addrid;\n+        lookupid = UintToArith256(ss.GetHash()).GetLow64();\n+    }\n+    iter->Seek(make_pair('a', lookupid));\n+    while (iter->Valid()) {\n+        std::pair<std::pair<char, uint64_t>, CExtDiskTxPos> key;\n+        if (iter->GetKey(key) && key.first.first == 'a' && key.first.second == lookupid) {\n+            list.push_back(key.second);\n+        } else {\n+            break;\n+        }\n+        iter->Next();\n+    }\n+\n+    return true;\n+}\n+\n+bool CBlockTreeDB::AddAddrIndex(const std::vector<std::pair<uint160, CExtDiskTxPos> > &list) {\n+    unsigned char foo[0];\n+    CDBBatch batch(&GetObfuscateKey());\n+    for (std::vector<std::pair<uint160, CExtDiskTxPos> >::const_iterator it=list.begin(); it!=list.end(); it++) {\n+        CHashWriter ss(SER_GETHASH, 0);\n+        ss << salt;\n+        ss << it->first;\n+        batch.Write(make_pair(make_pair('a', UintToArith256(ss.GetHash()).GetLow64()), it->second), FLATDATA(foo));\n+    }\n+    return WriteBatch(batch);\n+}\n+\n bool CBlockTreeDB::WriteFlag(const std::string &name, bool fValue) {\n     return Write(std::make_pair(DB_FLAG, name), fValue ? '1' : '0');\n }"
      },
      {
        "sha": "9217cf2040559ad308865e16e89af9be7cfe2911",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c9a79441a58969c441a20e4151c5ffed4f79678/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c9a79441a58969c441a20e4151c5ffed4f79678/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=5c9a79441a58969c441a20e4151c5ffed4f79678",
        "patch": "@@ -17,6 +17,7 @@\n class CBlockFileInfo;\n class CBlockIndex;\n struct CDiskTxPos;\n+struct CExtDiskTxPos;\n class uint256;\n \n //! -dbcache default (MiB)\n@@ -47,6 +48,7 @@ class CBlockTreeDB : public CDBWrapper\n public:\n     CBlockTreeDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n private:\n+    uint256 salt;\n     CBlockTreeDB(const CBlockTreeDB&);\n     void operator=(const CBlockTreeDB&);\n public:\n@@ -57,6 +59,8 @@ class CBlockTreeDB : public CDBWrapper\n     bool ReadReindexing(bool &fReindex);\n     bool ReadTxIndex(const uint256 &txid, CDiskTxPos &pos);\n     bool WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> > &list);\n+    bool ReadAddrIndex(const uint160 &addrid, std::vector<CExtDiskTxPos> &list);\n+    bool AddAddrIndex(const std::vector<std::pair<uint160, CExtDiskTxPos> > &list);\n     bool WriteFlag(const std::string &name, bool fValue);\n     bool ReadFlag(const std::string &name, bool &fValue);\n     bool LoadBlockIndexGuts();"
      }
    ]
  }
]