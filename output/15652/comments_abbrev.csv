promag,2019-03-23T10:12:09Z,"If it's the right fix then it needs:\n - update to functional test\n - backport to 0.17 and 0.18.",https://github.com/bitcoin/bitcoin/pull/15652#issuecomment-475857449,475857449,
gmaxwell,2019-03-23T10:15:22Z,Do we also need to think about how this interacts with restoring the mempool from disk? e.g. is there a race condition where some transactions being loaded would be missed?,https://github.com/bitcoin/bitcoin/pull/15652#issuecomment-475857634,475857634,
promag,2019-03-23T10:21:27Z,IIUC if the mempool is loaded after `postInitProcess` then `TransactionAddedToMempool` is already called.,https://github.com/bitcoin/bitcoin/pull/15652#issuecomment-475858068,475858068,
laanwj,2019-03-23T10:30:37Z,"Ordering checks out:\n\n- `CWallet::postInitProcess()` is called first: current mempool will be used, wallet will be notified when transactions added to mempool in `LoadMempool()`\n - `LoadMempool()` called first:  `CWallet::postInitProcess()` will process all the transactions\n\nAs for concurrency:\n\n`CWallet::postInitProcess()` locks the mempool for the duration of loading transactions f",https://github.com/bitcoin/bitcoin/pull/15652#issuecomment-475858541,475858541,
promag,2019-03-23T10:38:07Z,"Wallet is registered in `CWallet::CreateWalletFromFile`: https://github.com/bitcoin/bitcoin/blob/7b13c646457980f44599412f243694fa682a1abf/src/wallet/wallet.cpp#L4386\nwhich happens before `CWallet::postInitProcess`, so I think there's no race.",https://github.com/bitcoin/bitcoin/pull/15652#issuecomment-475858946,475858946,
promag,2019-03-23T10:43:36Z,"> but it might get some transactions multiple time (I think that's harmless?)\n\nI also think that trying to improve that is not worth the pain/complexity. But it may cost a bit for large wallets and a large mempool. I'm happy to followup something to improve that.",https://github.com/bitcoin/bitcoin/pull/15652#issuecomment-475859248,475859248,
laanwj,2019-03-23T10:59:26Z,"> I also think that trying to improve that is not worth the pain/complexity. But it may cost a bit for large wallets and a large mempool. I'm happy to followup something to improve that.\n\nI agree (it's not worth handling that explicitly), just wanted to cover all possible scenarios.",https://github.com/bitcoin/bitcoin/pull/15652#issuecomment-475860211,475860211,
promag,2019-03-23T12:54:08Z,"Moved the fix to `LoadWallet()`, which is used to dynamically load wallets - and so the startup behavior isn't changed.\n\nAlso added a test.",https://github.com/bitcoin/bitcoin/pull/15652#issuecomment-475867418,475867418,
MarcoFalke,2019-03-23T13:47:09Z,"```\n node1 2019-03-23T13:08:34.742866Z POTENTIAL DEADLOCK DETECTED \n node1 2019-03-23T13:08:34.742874Z Previous lock order was: \n node1 2019-03-23T13:08:34.742883Z  (1) ::mempool.cs  wallet/wallet.cpp:152 \n node1 2019-03-23T13:08:34.742898Z  (2) cs_main  interfaces/chain.cpp:264 \n node1 2019-03-23T13:08:34.742912Z Current lock order is: \n node1 2019-03-23T13:08:34.742921Z  (2) cs_main ",https://github.com/bitcoin/bitcoin/pull/15652#issuecomment-475871120,475871120,
promag,2019-03-23T16:57:44Z,@MarcoFalke fixed.,https://github.com/bitcoin/bitcoin/pull/15652#issuecomment-475886249,475886249,
meshcollider,2019-03-25T08:16:45Z,"tested ACK https://github.com/bitcoin/bitcoin/pull/15652/commits/3e31d680c55101c476a4a3db488cd29fb3dbea23, cannot reproduce #15591 with this fix",https://github.com/bitcoin/bitcoin/pull/15652#issuecomment-476095384,476095384,
DrahtBot,2019-03-25T16:21:15Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15713](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15713.html) (refactor: Replace chain relayTransactions/s",https://github.com/bitcoin/bitcoin/pull/15652#issuecomment-476272075,476272075,
promag,2019-03-25T20:06:20Z,"Updated, moved `notifyMempoolTransactions` to where the locks are held in the right order - `ReacceptWalletTransactions`. Needs squash though.\n\nBTW, could rename `ReacceptWalletTransactions` to `SyncWithChain` or something like that.",https://github.com/bitcoin/bitcoin/pull/15652#issuecomment-476356618,476356618,
Sjors,2019-03-26T15:45:47Z,"818b127 makes the new test pass on macOS. Don't forget to rename the ""wip"" commit.",https://github.com/bitcoin/bitcoin/pull/15652#issuecomment-476711811,476711811,
MarcoFalke,2019-03-26T16:41:48Z,Please squash to make it ready for review,https://github.com/bitcoin/bitcoin/pull/15652#issuecomment-476738246,476738246,
MarcoFalke,2019-03-27T13:31:59Z,utACK 3bf22a78c2e9951a7e7febb20577f2b6ac178bfc,https://github.com/bitcoin/bitcoin/pull/15652#issuecomment-477155394,477155394,
jnewbery,2019-03-27T17:24:41Z,utACK 78ce8e91031ea8a87c55deeb060071d7dc26358e,https://github.com/bitcoin/bitcoin/pull/15652#issuecomment-477266203,477266203,
ryanofsky,2019-03-27T17:36:15Z,"I think there's probably still a race condition here because add/remove notifications scheduled before the request for mempool transactions could arrive after the request:\n\nhttps://github.com/bitcoin/bitcoin/blob/656a15e5394d8d841619b5b186fa0f9c8be0322b/src/validationinterface.cpp#L155\n\nhttps://github.com/bitcoin/bitcoin/blob/656a15e5394d8d841619b5b186fa0f9c8be0322b/src/validationinterface",https://github.com/bitcoin/bitcoin/pull/15652#issuecomment-477271519,477271519,
ryanofsky,2019-03-28T15:42:55Z,"Sorry for the churn and for keeping suggesting new code changes. If you want to go with a simple change that fixes the original bug and can be backported, but maybe is less efficient or has some obscure race conditions, that seems fine.",https://github.com/bitcoin/bitcoin/pull/15652#issuecomment-477651641,477651641,
promag,2019-03-29T09:38:30Z,@ryanofsky no problem at all! I think this is ready now.,https://github.com/bitcoin/bitcoin/pull/15652#issuecomment-477932711,477932711,
MarcoFalke,2019-03-29T16:12:09Z,"If the branch that had d94847f in works without a `future` include and is correct, I'd prefer that ",https://github.com/bitcoin/bitcoin/pull/15652#issuecomment-478057233,478057233,
ryanofsky,2019-03-29T17:03:02Z,"> If the branch that had d94847f in works without a future include and is correct, I'd prefer that\n\nBranch is correct but the `requestMempoolTransactions` comment there doesn't accurately describe what the function does. Comment could just be updated to warn that `requestMempoolTransactions` is not synchronized with `handleNotifications`, and obsolete `handleNotifications` notifications could ",https://github.com/bitcoin/bitcoin/pull/15652#issuecomment-478074915,478074915,
MarcoFalke,2019-03-29T19:51:44Z,"re-utACK 78ce8e91031ea8a87c55deeb060071d7dc26358e\n\nOnly change since my last review is renaming a method and adding a comment. (Haven't read the comment)",https://github.com/bitcoin/bitcoin/pull/15652#issuecomment-478128656,478128656,
jnewbery,2019-03-29T20:23:36Z,utACK 78ce8e91031ea8a87c55deeb060071d7dc26358e modulo the comment change that Russ requested.,https://github.com/bitcoin/bitcoin/pull/15652#issuecomment-478137725,478137725,
MarcoFalke,2019-03-29T21:37:14Z,Tested that 78ce8e91031ea8a87c55deeb060071d7dc26358e fails the test when run without compiling the bitcoind changes.,https://github.com/bitcoin/bitcoin/pull/15652#issuecomment-478157586,478157586,
MarcoFalke,2019-04-01T16:33:50Z,"re-utACK 4bf1b1cefa\n\nOnly the comment changed, didn't look at either the old or new comment.",https://github.com/bitcoin/bitcoin/pull/15652#issuecomment-478651822,478651822,
jnewbery,2019-04-01T18:58:05Z,utACK 4bf1b1cefa9723bf2cfa8b1a938757abc99bb17b,https://github.com/bitcoin/bitcoin/pull/15652#issuecomment-478702601,478702601,
ryanofsky,2019-04-01T19:47:28Z,Merge commit 5a2a9b5b0603c1206e4419ffd0fd0d4939813fc2 seems to be missing an ack: https://github.com/bitcoin/bitcoin/pull/15652#pullrequestreview-221199549,https://github.com/bitcoin/bitcoin/pull/15652#issuecomment-478719829,478719829,
MarcoFalke,2019-04-01T20:33:43Z,"This is an upstream issue on GitHub, I believe. Will follow up with some details shortly",https://github.com/bitcoin/bitcoin/pull/15652#issuecomment-478736662,478736662,
MarcoFalke,2019-04-01T21:09:57Z,"Comments:\n* https://api.github.com/repos/bitcoin/bitcoin/issues/15652/comments\n\nReview summary comments:\n* https://api.github.com/repos/bitcoin/bitcoin/pulls/15652/reviews\n\nThey are showing my ""Concept ACK"" above, but for some reason not your utACK...",https://github.com/bitcoin/bitcoin/pull/15652#issuecomment-478749124,478749124,
MarcoFalke,2019-04-01T22:23:12Z,Will follow up with GitHub support,https://github.com/bitcoin/bitcoin/pull/15652#issuecomment-478769054,478769054,
fanquake,2019-04-02T12:05:42Z,Backported in https://github.com/bitcoin/bitcoin/pull/15691.,https://github.com/bitcoin/bitcoin/pull/15652#issuecomment-478966259,478966259,
promag,2019-03-23T10:51:37Z,"nit, this lock is not at the begin of a scope, could move this to a new `CWallet` member.",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r268390608,268390608,src/wallet/wallet.cpp
MarcoFalke,2019-03-23T20:00:13Z,The wallet module is not allowed to call directly into the node. This should be an interface method.,https://github.com/bitcoin/bitcoin/pull/15652#discussion_r268407542,268407542,src/wallet/wallet.cpp
promag,2019-03-23T23:11:18Z,"Right, added 51cb2eb and then refactored `LoadWallet` to use it.",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r268412591,268412591,src/wallet/wallet.cpp
MarcoFalke,2019-03-25T13:43:09Z,"Could there be a race, since we don't take cs_main when removing txs from the mempool?\n\nI.e. a tx is first removed due to eviction, the wallet is notified and then it is re-added here.",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r268645607,268645607,src/wallet/wallet.cpp
MarcoFalke,2019-03-25T13:46:31Z,"Any reason not to do this in `postInitProcess`?\n\nI understand that this is also called when the `createwallet` rpc is called, but the post-init seems useless in that case anyway.\n\nI'd suggest:\n* Remove `postInitProcess` from `createwallet`, because the wallet is fresh and there couldn't be any txs that need to be exchanged between mempool and wallet\n* Rename `postInitProcess` to `postL",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r268647166,268647166,src/wallet/wallet.cpp
promag,2019-03-25T14:07:44Z,"I agree, `postInitProcess` is ""pre dynamic wallet support"". However I'd prefer to refactor in a different PR, this is a bug fix.",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r268657029,268657029,src/wallet/wallet.cpp
promag,2019-03-25T14:11:50Z,"Indeed, between `getMemoryPoolTransactions` and `TransactionAddedToMempool` a tx can be evicted.\n\nI see 2 solutions:\n - lock the wallet before the loop so that `TransactionRemovedFromMempool` comes after this\n - add a way to lock the mempool in `interfaces::` but not sure if this is wanted? cc @ryanofsky \n\n",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r268659035,268659035,src/wallet/wallet.cpp
ryanofsky,2019-03-25T14:42:57Z,"re: https://github.com/bitcoin/bitcoin/pull/15652#discussion_r268645607\n\n> I see 2 solutions:\n\nI think more ideally the wallet doesn't have knowledge or control of node locks, and can just register for notifications and handle them as they come in. Maybe the `ChainImpl::handleNotifications` method can be changed to something like:\n\n```c++\nstd::unique_ptr<Handler> handleNotifications(",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r268675190,268675190,src/wallet/wallet.cpp
MarcoFalke,2019-03-25T15:16:54Z,"Fine with doing the rename et al. later, but is there any reason not to put it in `postInitProcess`? IIRC it was in there previously in this pull",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r268694388,268694388,src/wallet/wallet.cpp
MarcoFalke,2019-03-25T15:18:41Z,"If you move the loop into `postInitProcess`, you can just take a `LOCK(::mempool.cs)` in there",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r268695374,268695374,src/wallet/wallet.cpp
promag,2019-03-25T15:29:35Z,"Yes, could be moved back there.",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r268701521,268701521,src/wallet/wallet.cpp
promag,2019-03-25T15:30:19Z,"@MarcoFalke `postInitProcess` is wallet module, should not use that right? https://github.com/bitcoin/bitcoin/pull/15652#discussion_r268407542",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r268701941,268701941,src/wallet/wallet.cpp
MarcoFalke,2019-03-25T15:46:03Z,"Yeah, you'd have to move it to the interface\n\nAlternatively you could add it to `handleNotifications` as suggested by @ryanofsky, but then it would also be called for `createwallet`, which seems a bit wasteful",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r268710750,268710750,src/wallet/wallet.cpp
promag,2019-03-25T15:49:20Z,"@ryanofsky nice, I thought of something like `replayMemoryPoolNotifications`. However I'm not sure if these notifications should come after `ReacceptWalletTransactions`?",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r268712558,268712558,src/wallet/wallet.cpp
MarcoFalke,2019-03-25T16:07:42Z,"in commit 596f91d20732a1714395e9f6e5d1e6c41f14a2e5:\n\nCould remove empty hunk to avoid having to solve conflicts in a backport?",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r268722954,268722954,src/wallet/wallet.cpp
MarcoFalke,2019-03-25T17:20:56Z,"Not sure how to solve the deadlock warning. Maybe take cs_wallet before both of these?\n\n```\nnode1 2019-03-25T17:06:10.586193Z Leaving InitialBlockDownload (latching to false) \n node1 2019-03-25T17:06:10.586301Z POTENTIAL DEADLOCK DETECTED \n node1 2019-03-25T17:06:10.586314Z Previous lock order was: \n node1 2019-03-25T17:06:10.586326Z  ::cs_main  interfaces/chain.cpp:372 \n node1 2019-",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r268760261,268760261,src/interfaces/chain.cpp
ryanofsky,2019-03-25T17:21:13Z,"Could you call this notifyMempoolTransactions? I'd like to converge on _mempool_ spelling rather than _memPool_ or _memoryPool_. Currently we have:\n\n<pre>\nChain::hasDescendantsIn<i>Mempool</i>\nChain::<i>mempool</i>MinFee\nChain::Notifications::TransactionAddedTo<i>Mempool</i>\nChain::Notifications::TransactionRemovedFrom<i>Mempool</i>\nChain::Lock::submitTo<i>MemoryPool</i>\n</pre>\n",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r268760412,268760412,src/interfaces/chain.h
ryanofsky,2019-03-25T17:29:02Z,"re: https://github.com/bitcoin/bitcoin/pull/15652#discussion_r268760261\n\n> Not sure how to solve the deadlock warning. Maybe take cs_wallet before both of these?\n\nIt looks like you need to do the opposite and release cs_wallet before calling this.",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r268764635,268764635,src/interfaces/chain.cpp
ryanofsky,2019-03-25T17:38:28Z,"re: https://github.com/bitcoin/bitcoin/pull/15652#discussion_r268645607\n\n> Alternatively you could add it to handleNotifications as suggested by @ryanofsky, but then it would also be called for createwallet, which seems a bit wasteful\n\nAgree, this would be too wasteful. Having the separate method to replay notifications is probably better.\n\n> I'm not sure if these notifications should ",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r268769208,268769208,src/wallet/wallet.cpp
MarcoFalke,2019-03-25T18:10:40Z,"The lock order is `cs_main, cs_wallet, ::mempool.cs`, no?",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r268783330,268783330,src/interfaces/chain.cpp
MarcoFalke,2019-03-25T18:21:37Z,"I can get the functional tests to pass with the diff\n\n```diff\ndiff --git a/src/interfaces/chain.cpp b/src/interfaces/chain.cpp\nindex cb76461647..94e7a7ad53 100644\n--- a/src/interfaces/chain.cpp\n+++ b/src/interfaces/chain.cpp\n@@ -367,9 +367,9 @@ public:\n     {\n         return MakeUnique<RpcHandlerImpl>(command);\n     }\n-    void notifyMemoryPoolTransactions(Notifications& noti",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r268788343,268788343,src/interfaces/chain.cpp
promag,2019-03-25T18:36:02Z,Will do.,https://github.com/bitcoin/bitcoin/pull/15652#discussion_r268794257,268794257,src/interfaces/chain.h
jnewbery,2019-03-26T19:21:58Z,"I don't like this going in `ReacceptWalletTransactions()` for a couple of reasons:\n\n- The name `ReacceptWalletTransactions()` suggests to me that we're reaccepting wallet transactions back into the mempool (which is what the function currently does). Adding functionality to fetch mempool txs back into the wallet changes the definition of this function so that it no longer matches the name.\n-",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r269275853,269275853,src/wallet/wallet.cpp
jnewbery,2019-03-26T19:22:09Z,"nit: I'd prefer the name `getMempoolTransactions()` or `fetchMempoolTransactions()`. Notify to me signifies that the wallet is subscribing and getting a notification, whereas this interface function is actually used by the wallet to actively fetch the mempool transactions.",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r269275899,269275899,src/interfaces/chain.h
promag,2019-03-27T00:39:54Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/15652#discussion_r269369133,269369133,src/wallet/wallet.cpp
promag,2019-03-27T00:40:06Z,"> I'd prefer the name `getMempoolTransactions()` or `fetchMempoolTransactions()`.\n\nI think these are confusing since the function is void.\n\n",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r269369161,269369161,src/interfaces/chain.h
promag,2019-03-27T00:57:35Z,"> Notify to me signifies that the wallet is subscribing and getting a notification\n\nThe ""standard"" for that is `handleX`, like `handleNotifications`.",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r269372010,269372010,src/interfaces/chain.h
promag,2019-03-27T01:04:06Z,"> I suggest moving this call into `postInitProcessing()` which is only called when a wallet is loaded.\n\nThis was attempted before but there was a locking order problem, and was for that reason that I've placed `notifyMempoolTransactions` here. I've included 0994e3121 to address that.\n\nThe important thing to ensure is https://github.com/bitcoin/bitcoin/pull/15652#discussion_r268783330.",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r269372993,269372993,src/wallet/wallet.cpp
ryanofsky,2019-03-27T16:15:53Z,"re: https://github.com/bitcoin/bitcoin/pull/15652#discussion_r269275899\n\nAgree with John the name is not great. I think I'd probably call it `pushMempoolNotifications`.\n\nMore importantly, though, I think this needs to have a comment saying how it relates to `handleNotifications`. A good comment might be:\n\n""Synchronously send TransactionAddedToMempool notifications about all current mem",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r269648409,269648409,src/interfaces/chain.h
jnewbery,2019-03-27T16:22:52Z,"`requestMempoolTransactions()`?\n\nAgree with Russ about adding a comment.",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r269651974,269651974,src/interfaces/chain.h
promag,2019-03-27T16:39:25Z,"> just sending TransactionAddedFromMempool notifications atomically in the same place the handler is registered\n\nI understand it is cleaner but it is weird to receive notifications before `handleNotifications` return. Thanks for the comment!\n\nEeny, meeny, miny, moe `requestMempoolTransactions`, after all we want to be notified of mempool transactions.\n\n",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r269659744,269659744,src/interfaces/chain.h
ryanofsky,2019-03-27T17:27:14Z,"> but it is weird to receive notifications before handleNotifications return\n\nThis is the current behavior and it isn't weird. Notifications start to arrive when RegisterValidationInterface is called, and can happen before that function returns, much less before handleNotifications returns.",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r269682327,269682327,src/interfaces/chain.h
promag,2019-03-27T18:28:29Z,"> This is the current behavior\n\nCurrently `cs_main` and `cs_wallet` are locked when `handleNotifications` is called so that doesn't happen, but otherwise you are right.",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r269709487,269709487,src/interfaces/chain.h
ryanofsky,2019-03-28T11:52:45Z,"re: https://github.com/bitcoin/bitcoin/pull/15652#issuecomment-477271519\n\n> You might need to block waiting for previous notifications.\n\nOne way to do this:\n\n```c++\nvoid requestMempoolTransactions(Notifications& notifications) override\n{\n    std::promise<void> promise;\n    CallFunctionInValidationInterfaceQueue([&] {\n        LOCK2(::cs_main, ::mempool.cs);\n        for (cons",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r269965497,269965497,src/interfaces/chain.cpp
ryanofsky,2019-03-28T12:17:08Z,"Previous suggestion in https://github.com/bitcoin/bitcoin/pull/15652/files#r269965497 isn't exception safe. Also, cs_main needs to be released before calling this.\n\nProbably better:\n\n```c++\nvoid requestMempoolTransactions(Notifications& notifications) override\n{\n    AssertLockNotHeld(::cs_main);\n    AssertLockNotHeld(::mempool.cs);\n    std::packaged_task<void()> task([&] {\n    ",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r269972909,269972909,src/interfaces/chain.cpp
promag,2019-03-28T14:56:47Z,Thanks @ryanofsky!,https://github.com/bitcoin/bitcoin/pull/15652#discussion_r270045558,270045558,src/interfaces/chain.cpp
promag,2019-03-28T15:07:15Z,Haven't finished but it looks like there will be a lock order issue - cs_main -> mempool.cs -> cs_main -> cs_wallet.,https://github.com/bitcoin/bitcoin/pull/15652#discussion_r270050754,270050754,src/interfaces/chain.cpp
ryanofsky,2019-03-28T15:30:59Z,"re: https://github.com/bitcoin/bitcoin/pull/15652#discussion_r270050754\n\n> Haven't finished but it looks like there will be a lock order issue - cs_main -> mempool.cs -> cs_main -> cs_wallet.\n\nThat does seem like a problem. One way to fix it would be to release main and mempool locks before calling TransactionAddedToMempool, by pushing the transactions to a vector, releasing the locks and ",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r270063306,270063306,src/interfaces/chain.cpp
ryanofsky,2019-03-29T15:29:55Z,"re: https://github.com/bitcoin/bitcoin/pull/15652#discussion_r269965497\n\nCurrent code looks ok, but I think I was misguided in making this thread because previous code in d94847f20c750d88a0aefa572155d54f8e39c144 was also ok. I think:\n\n1) I was right to point out there's a race condition where normal mempool add/remove notifications triggered before the `requestMempoolTransactions` call cou",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r270460939,270460939,src/interfaces/chain.cpp
promag,2019-03-29T17:03:31Z,"> I was wrong to assume that the race condition would actually cause a problem. There is no problem if an unknown transaction is removed or an already added transaction is added again.\n\nRight, just unnecessary extra work, which is not an issue I think.",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r270498507,270498507,src/interfaces/chain.cpp
ryanofsky,2019-03-30T00:39:52Z,"In commit ""interfaces: Add Chain::requestMempoolTransactions"" (d94847f20c750d88a0aefa572155d54f8e39c144)\n\nCurrent comment isn't really accurate. Maybe suggest:\n\n```c++\n//! Synchronously send TransactionAddedToMempool notifications about all\n//! current mempool transactions to the specified handler and return after\n//! the last one is sent. These notifications aren't coordinated with ",https://github.com/bitcoin/bitcoin/pull/15652#discussion_r270605729,270605729,src/interfaces/chain.h
