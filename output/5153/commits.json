[
  {
    "sha": "74ed668a5cc6a42e6cdb4bc772bfc068f22a55e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NGVkNjY4YTVjYzZhNDJlNmNkYjRiYzc3MmJmYzA2OGYyMmE1NWUz",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-10-28T16:16:16Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-10-28T22:43:49Z"
      },
      "message": "Split OpChecksig() and OpCheckMultisig() from EvalScript()",
      "tree": {
        "sha": "b6987bd10a63e3db91f42d7e73f2bdf318ecd10d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6987bd10a63e3db91f42d7e73f2bdf318ecd10d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/74ed668a5cc6a42e6cdb4bc772bfc068f22a55e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74ed668a5cc6a42e6cdb4bc772bfc068f22a55e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/74ed668a5cc6a42e6cdb4bc772bfc068f22a55e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74ed668a5cc6a42e6cdb4bc772bfc068f22a55e3/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "723c7526368badda15df8ac1ffc047a0ab2e384a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/723c7526368badda15df8ac1ffc047a0ab2e384a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/723c7526368badda15df8ac1ffc047a0ab2e384a"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 39,
      "deletions": 26
    },
    "files": [
      {
        "sha": "678c3e0968d9902a0577c46ad672898f1feaa077",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 26,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74ed668a5cc6a42e6cdb4bc772bfc068f22a55e3/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74ed668a5cc6a42e6cdb4bc772bfc068f22a55e3/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=74ed668a5cc6a42e6cdb4bc772bfc068f22a55e3",
        "patch": "@@ -180,6 +180,9 @@ bool static CheckMinimalPush(const valtype& data, opcodetype opcode) {\n     return true;\n }\n \n+bool OpCheckSig(vector<vector<unsigned char> >& stack, CScript::const_iterator& pbegincodehash, CScript::const_iterator& pend, unsigned int flags, const BaseSignatureChecker& checker, bool fRequireMinimal, bool fVerify);\n+bool OpCheckMultiSig(vector<vector<unsigned char> >& stack, int& nOpCount, CScript::const_iterator& pbegincodehash, CScript::const_iterator& pend, unsigned int flags, const BaseSignatureChecker& checker, bool fRequireMinimal, bool fVerify);\n+\n bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker)\n {\n     CScript::const_iterator pc = script.begin();\n@@ -714,6 +717,37 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n \n                 case OP_CHECKSIG:\n                 case OP_CHECKSIGVERIFY:\n+                    if (!OpCheckSig(stack, pbegincodehash, pend, flags, checker, fRequireMinimal, opcode == OP_CHECKSIGVERIFY))\n+                        return false;\n+                break;\n+\n+                case OP_CHECKMULTISIG:\n+                case OP_CHECKMULTISIGVERIFY:\n+                    if (!OpCheckMultiSig(stack, nOpCount, pbegincodehash, pend, flags, checker, fRequireMinimal, opcode == OP_CHECKMULTISIGVERIFY))\n+                        return false;\n+                break;\n+\n+                default:\n+                    return false;\n+            }\n+\n+            // Size limits\n+            if (stack.size() + altstack.size() > 1000)\n+                return false;\n+        }\n+    }\n+    catch (...)\n+    {\n+        return false;\n+    }\n+\n+    if (!vfExec.empty())\n+        return false;\n+\n+    return true;\n+}\n+\n+bool OpCheckSig(vector<vector<unsigned char> >& stack, CScript::const_iterator& pbegincodehash, CScript::const_iterator& pend, unsigned int flags, const BaseSignatureChecker& checker, bool fRequireMinimal, bool fVerify)\n                 {\n                     // (sig pubkey -- bool)\n                     if (stack.size() < 2)\n@@ -737,18 +771,17 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                     popstack(stack);\n                     popstack(stack);\n                     stack.push_back(fSuccess ? vchTrue : vchFalse);\n-                    if (opcode == OP_CHECKSIGVERIFY)\n+                    if (fVerify)\n                     {\n                         if (fSuccess)\n                             popstack(stack);\n                         else\n                             return false;\n                     }\n+                    return true;\n                 }\n-                break;\n \n-                case OP_CHECKMULTISIG:\n-                case OP_CHECKMULTISIGVERIFY:\n+bool OpCheckMultiSig(vector<vector<unsigned char> >& stack, int& nOpCount, CScript::const_iterator& pbegincodehash, CScript::const_iterator& pend, unsigned int flags, const BaseSignatureChecker& checker, bool fRequireMinimal, bool fVerify)\n                 {\n                     // ([sig ...] num_of_signatures [pubkey ...] num_of_pubkeys -- bool)\n \n@@ -829,35 +862,15 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n \n                     stack.push_back(fSuccess ? vchTrue : vchFalse);\n \n-                    if (opcode == OP_CHECKMULTISIGVERIFY)\n+                    if (fVerify)\n                     {\n                         if (fSuccess)\n                             popstack(stack);\n                         else\n                             return false;\n                     }\n+                    return true;\n                 }\n-                break;\n-\n-                default:\n-                    return false;\n-            }\n-\n-            // Size limits\n-            if (stack.size() + altstack.size() > 1000)\n-                return false;\n-        }\n-    }\n-    catch (...)\n-    {\n-        return false;\n-    }\n-\n-    if (!vfExec.empty())\n-        return false;\n-\n-    return true;\n-}\n \n namespace {\n "
      }
    ]
  }
]