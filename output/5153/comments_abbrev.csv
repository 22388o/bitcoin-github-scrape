theuni,2014-10-28T03:30:39Z,"Yikes. Could you elaborate on the reasoning? In particular, I could understand moving the logic for each opcode to a function so that they could be independently verified or changed, but the groupings like OpNumUnary make this seem like a high-risk lateral move.\n",https://github.com/bitcoin/bitcoin/pull/5153#issuecomment-60705367,60705367,
jtimon,2014-10-28T11:31:42Z,"Yes, this change is about readability and maintainability (which includes being able to change a small part without affecting other parts).\nI used to use automatic style checking tools in java. Both Functions/methods longer than X lines and Y nested levels of flow control raised warnings saying that the function couldn't possibly be readable and asking you to refactor it.\nAfter the change EvalSc",https://github.com/bitcoin/bitcoin/pull/5153#issuecomment-60742044,60742044,
laanwj,2014-10-28T12:01:06Z,Personally I'd rather not touch this code if not necessary.\n,https://github.com/bitcoin/bitcoin/pull/5153#issuecomment-60744720,60744720,
jtimon,2014-10-28T13:38:28Z,"I missed a break after OP_EQUAL, fixed but now it needs rebase...\n",https://github.com/bitcoin/bitcoin/pull/5153#issuecomment-60755803,60755803,
gavinandresen,2014-10-28T13:43:11Z,"NACK from me, too dangerous to change, benefits do not outweigh the risks.\n",https://github.com/bitcoin/bitcoin/pull/5153#issuecomment-60756453,60756453,
jtimon,2014-10-28T17:17:16Z,"In my opinion the benefits in readability in a critical part like this are underestimated.\nLeaving the current code structure not only makes later changes harder to review, it also reduces the number of potential reviewers we could have for those changes and the performance of those who are already reviewing these changes.Given that those resources are currently very limited, I completely underst",https://github.com/bitcoin/bitcoin/pull/5153#issuecomment-60794318,60794318,
maaku,2014-10-28T17:41:51Z,"Minor style nit : should it be OpCheckSig and OpCheckMultiSig?\n\nOtherwise, need a language lawyer to make sure that nothing changed with the introduction of a function call. Looks okay to me otherwise.\n",https://github.com/bitcoin/bitcoin/pull/5153#issuecomment-60798594,60798594,
jgarzik,2014-10-28T19:15:33Z,"-1\n\nRisky, and slower too.\n",https://github.com/bitcoin/bitcoin/pull/5153#issuecomment-60814452,60814452,
jtimon,2014-10-28T22:40:37Z,How slower? The functions can be inlined (I assumed the compiler would figure it out by itself having only one call per function though).\n,https://github.com/bitcoin/bitcoin/pull/5153#issuecomment-60844478,60844478,
gmaxwell,2014-10-28T22:59:09Z,I don't like breaking the script execution engine into functions very much. The big switch statement is readable and generally easy to reason about. The rather long function prototypes are perhaps an indication that this isn't a good abstraction boundary.\n,https://github.com/bitcoin/bitcoin/pull/5153#issuecomment-60846626,60846626,
jtimon,2014-10-29T02:55:50Z,"> The big switch statement is readable and generally easy to reason about. \n\nI obviously disagree with this.\n\n> The rather long function prototypes are perhaps an indication that this isn't a good abstraction boundary.\n\nThe longer ones are precisely these two. Though, yes, the fact that these have such long list of attributes while most of the rest practically just use the stack may indicate",https://github.com/bitcoin/bitcoin/pull/5153#issuecomment-60866649,60866649,
maaku,2014-10-29T05:04:34Z,"To be clear I saw this after it was reduced to only `OpCheckSig` and `OpCheckMultiSig`. I favor this approach for gigantic, monolithic operators like these two. Imagine how much worse it would be if/when we soft-fork functionality into `CHECKSIG`. I would not support splitting off execution for things like DUP et al.\n",https://github.com/bitcoin/bitcoin/pull/5153#issuecomment-60874711,60874711,
laanwj,2014-10-29T07:52:39Z,"@jtimon I generally agree with you that structuring code in a way to make reviewing easier is good. However this is code that is very unlikely to change in the first place. I'd only feel confident about changes like this if they don't change the resulting executable at all, or there would be some other rigorous proof system.\n",https://github.com/bitcoin/bitcoin/pull/5153#issuecomment-60885271,60885271,
jtimon,2014-10-29T21:28:43Z,"@laanwj Not changing the resulting at all should clear all risk and performance concerns, thank you for suggesting that.\nIs there a simple way to do that?\nI don't know many details about deterministic building processes, but maybe there's a one-line thing to compare the hashes of the resulting builds from 2 different git commits, that everybody but myself is aware of or something. I would greatl",https://github.com/bitcoin/bitcoin/pull/5153#issuecomment-61008319,61008319,
laanwj,2014-11-12T17:41:33Z,"@jtimon There's no one-ling thing, but you could follow my process here https://github.com/bitcoin/bitcoin/pull/4180#issuecomment-52148271\n",https://github.com/bitcoin/bitcoin/pull/5153#issuecomment-62759239,62759239,
jtimon,2014-11-15T14:07:59Z,Thank you @laanwj that seems very useful. I feel tempted to use that to write a little python script that checks that the resulting builds from 2 different commits are identical. And then use that script to check this PR. But that's definitely after-0.10 (and with that tool we don't care much about an additional clang since I could just indent properly from the beginning without worrying about mak,https://github.com/bitcoin/bitcoin/pull/5153#issuecomment-63173488,63173488,
