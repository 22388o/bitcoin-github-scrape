[
  {
    "sha": "aa279d613152e87ea25edfdf76c86779c0632f18",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTI3OWQ2MTMxNTJlODdlYTI1ZWRmZGY3NmM4Njc3OWMwNjMyZjE4",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2014-12-16T09:43:40Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2014-12-19T20:05:10Z"
      },
      "message": "Enforce minRelayTxFee on wallet created tx and add a maxtxfee option.\n\nPreviously the minRelayTxFee was only enforced on user specified values.\n\nIt was possible for smartfee to produce a fee below minRelayTxFee which\n would just result in the transaction getting stuck because it can't be\n relayed.\n\nThis also introduces a maxtxfee option which sets an absolute maximum\n for any fee created by the wallet, with an intention of increasing\n user confidence that the automatic fees won't burn them. This was\n frequently a concern even before smartfees.\n\nIf the configured fee policy won't even allow the wallet to meet the relay\n fee the transaction creation may be aborted.",
      "tree": {
        "sha": "7a5b63fe5c1d55b2e52b18040a5b412757d2560d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a5b63fe5c1d55b2e52b18040a5b412757d2560d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa279d613152e87ea25edfdf76c86779c0632f18",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa279d613152e87ea25edfdf76c86779c0632f18",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa279d613152e87ea25edfdf76c86779c0632f18",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa279d613152e87ea25edfdf76c86779c0632f18/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bf4bf40a1c8e94e766679f1c8cde75c3067cf594",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf4bf40a1c8e94e766679f1c8cde75c3067cf594",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf4bf40a1c8e94e766679f1c8cde75c3067cf594"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 48,
      "deletions": 19
    },
    "files": [
      {
        "sha": "c5ced8654e32c69ae59c6274f7c00fd36c44115c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa279d613152e87ea25edfdf76c86779c0632f18/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa279d613152e87ea25edfdf76c86779c0632f18/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=aa279d613152e87ea25edfdf76c86779c0632f18",
        "patch": "@@ -288,6 +288,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += \"  -sendfreetransactions  \" + strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), 0) + \"\\n\";\n     strUsage += \"  -spendzeroconfchange   \" + strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), 1) + \"\\n\";\n     strUsage += \"  -txconfirmtarget=<n>   \" + strprintf(_(\"If paytxfee is not set, include enough fee so transactions are confirmed on average within n blocks (default: %u)\"), 1) + \"\\n\";\n+    strUsage += \"  -maxtxfee=<amt>        \" + strprintf(_(\"Maximum total fees to use in a single wallet transaction, setting too low may abort large transactions (default: %s)\"), FormatMoney(maxTxFee)) + \"\\n\";\n     strUsage += \"  -upgradewallet         \" + _(\"Upgrade wallet to latest format\") + \" \" + _(\"on startup\") + \"\\n\";\n     strUsage += \"  -wallet=<file>         \" + _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), \"wallet.dat\") + \"\\n\";\n     strUsage += \"  -walletnotify=<cmd>    \" + _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\") + \"\\n\";\n@@ -697,6 +698,20 @@ bool AppInit2(boost::thread_group& threadGroup)\n                                        mapArgs[\"-paytxfee\"], ::minRelayTxFee.ToString()));\n         }\n     }\n+    if (mapArgs.count(\"-maxtxfee\"))\n+    {\n+        CAmount nMaxFee = 0;\n+        if (!ParseMoney(mapArgs[\"-maxtxfee\"], nMaxFee))\n+            return InitError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s'\"), mapArgs[\"-maptxfee\"]));\n+        if (nMaxFee > nHighTransactionMaxFeeWarning)\n+            InitWarning(_(\"Warning: -maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n+        maxTxFee = nMaxFee;\n+        if (CFeeRate(maxTxFee, 1000) < ::minRelayTxFee)\n+        {\n+            return InitError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\"),\n+                                       mapArgs[\"-maxtxfee\"], ::minRelayTxFee.ToString()));\n+        }\n+    }\n     nTxConfirmTarget = GetArg(\"-txconfirmtarget\", 1);\n     bSpendZeroConfChange = GetArg(\"-spendzeroconfchange\", true);\n     fSendFreeTransactions = GetArg(\"-sendfreetransactions\", false);"
      },
      {
        "sha": "dd87fab44b18b56479f8b190439fdc0fd4f32fbf",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 19,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa279d613152e87ea25edfdf76c86779c0632f18/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa279d613152e87ea25edfdf76c86779c0632f18/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=aa279d613152e87ea25edfdf76c86779c0632f18",
        "patch": "@@ -26,6 +26,7 @@ using namespace std;\n  * Settings\n  */\n CFeeRate payTxFee(DEFAULT_TRANSACTION_FEE);\n+CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n unsigned int nTxConfirmTarget = 1;\n bool bSpendZeroConfChange = true;\n bool fSendFreeTransactions = false;\n@@ -1499,27 +1500,32 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, CAmount> >& vecSend,\n                 }\n                 dPriority = wtxNew.ComputePriority(dPriority, nBytes);\n \n-                CAmount nFeeNeeded = GetMinimumFee(nBytes, nTxConfirmTarget, mempool);\n+                // Can we complete this as a free transaction?\n+                if (fSendFreeTransactions && nBytes <= MAX_FREE_TRANSACTION_CREATE_SIZE)\n+                {\n+                    // Not enough fee: enough priority?\n+                    double dPriorityNeeded = mempool.estimatePriority(nTxConfirmTarget);\n+                    // Not enough mempool history to estimate: use hard-coded AllowFree.\n+                    if (dPriorityNeeded <= 0 && AllowFree(dPriority))\n+                        break;\n+\n+                    // Small enough, and priority high enough, to send for free\n+                    if (dPriorityNeeded > 0 && dPriority >= dPriorityNeeded)\n+                        break;\n+                }\n \n-                if (nFeeRet >= nFeeNeeded)\n-                    break; // Done, enough fee included.\n+                CAmount nFeeNeeded = GetMinimumFee(nBytes, nTxConfirmTarget, mempool);\n \n-                // Too big to send for free? Include more fee and try again:\n-                if (!fSendFreeTransactions || nBytes > MAX_FREE_TRANSACTION_CREATE_SIZE)\n+                // If we made it here and we aren't even able to meet the relay fee on the next pass, give up\n+                // because we must be at the maximum allowed fee.\n+                if (nFeeNeeded < ::minRelayTxFee.GetFee(nBytes))\n                 {\n-                    nFeeRet = nFeeNeeded;\n-                    continue;\n+                    strFailReason = _(\"Transaction too large for fee policy\");\n+                    return false;\n                 }\n \n-                // Not enough fee: enough priority?\n-                double dPriorityNeeded = mempool.estimatePriority(nTxConfirmTarget);\n-                // Not enough mempool history to estimate: use hard-coded AllowFree.\n-                if (dPriorityNeeded <= 0 && AllowFree(dPriority))\n-                    break;\n-\n-                // Small enough, and priority high enough, to send for free\n-                if (dPriorityNeeded > 0 && dPriority >= dPriorityNeeded)\n-                    break;\n+                if (nFeeRet >= nFeeNeeded)\n+                    break; // Done, enough fee included.\n \n                 // Include more fee and try again.\n                 nFeeRet = nFeeNeeded;\n@@ -1591,9 +1597,6 @@ CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarge\n {\n     // payTxFee is user-set \"I want to pay this much\"\n     CAmount nFeeNeeded = payTxFee.GetFee(nTxBytes);\n-    // prevent user from paying a non-sense fee (like 1 satoshi): 0 < fee < minRelayFee\n-    if (nFeeNeeded > 0 && nFeeNeeded < ::minRelayTxFee.GetFee(nTxBytes))\n-        nFeeNeeded = ::minRelayTxFee.GetFee(nTxBytes);\n     // user selected total at least (default=true)\n     if (fPayAtLeastCustomFee && nFeeNeeded > 0 && nFeeNeeded < payTxFee.GetFeePerK())\n         nFeeNeeded = payTxFee.GetFeePerK();\n@@ -1604,6 +1607,12 @@ CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarge\n     // back to a hard-coded fee\n     if (nFeeNeeded == 0)\n         nFeeNeeded = minTxFee.GetFee(nTxBytes);\n+    // prevent user from paying a non-sense fee (like 1 satoshi): 0 < fee < minRelayFee\n+    if (nFeeNeeded < ::minRelayTxFee.GetFee(nTxBytes))\n+        nFeeNeeded = ::minRelayTxFee.GetFee(nTxBytes);\n+    // But always obey the maximum\n+    if (nFeeNeeded > maxTxFee)\n+        nFeeNeeded = maxTxFee;\n     return nFeeNeeded;\n }\n "
      },
      {
        "sha": "058107edf170beb308c4f9a5e396109ba98da1ae",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa279d613152e87ea25edfdf76c86779c0632f18/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa279d613152e87ea25edfdf76c86779c0632f18/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=aa279d613152e87ea25edfdf76c86779c0632f18",
        "patch": "@@ -30,6 +30,7 @@\n  * Settings\n  */\n extern CFeeRate payTxFee;\n+extern CAmount maxTxFee;\n extern unsigned int nTxConfirmTarget;\n extern bool bSpendZeroConfChange;\n extern bool fSendFreeTransactions;\n@@ -39,6 +40,10 @@ extern bool fPayAtLeastCustomFee;\n static const CAmount DEFAULT_TRANSACTION_FEE = 0;\n //! -paytxfee will warn if called with a higher fee than this amount (in satoshis) per KB\n static const CAmount nHighTransactionFeeWarning = 0.01 * COIN;\n+//! -maxtxfee default\n+static const CAmount DEFAULT_TRANSACTION_MAXFEE = 0.1 * COIN;\n+//! -maxtxfee will warn if called with a higher fee than this amount (in satoshis)\n+static const CAmount nHighTransactionMaxFeeWarning = 100 * nHighTransactionFeeWarning;\n //! Largest (in bytes) free transaction we're willing to create\n static const unsigned int MAX_FREE_TRANSACTION_CREATE_SIZE = 1000;\n "
      }
    ]
  }
]