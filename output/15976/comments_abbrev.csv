DrahtBot,2019-05-07 22:50:22,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16092](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16092.html) (Don't use global (external) symbols for sym",https://github.com/bitcoin/bitcoin/pull/15976#issuecomment-490282681,490282681,
MarcoFalke,2019-05-08 16:30:42,"I dislike that member functions that previously could (and should) only be called in the validation module are now callable from anywhere. To make it worse, they are easily confused e.g. `::ActivateBestChain` vs `CChainState::ActivateBestChain`. The only solution I could think of is to mark the public methods that are not supposed to be called outside of validation with an underscore or something ",https://github.com/bitcoin/bitcoin/pull/15976#issuecomment-490557315,490557315,
MarcoFalke,2019-05-08 16:36:38,An alternative could be to remove the global methods (e.g. `::ActivateBestChain`) and inline them into the members?,https://github.com/bitcoin/bitcoin/pull/15976#issuecomment-490559432,490559432,
Sjors,2019-05-08 17:15:01,"> could (and should) only be called in the validation module are now callable from anywhere\n\nWould you say the root cause of that is that ::ChainstateActive is global? Maybe we can make that only available through interfaces? There's not that many places we access member functions from.",https://github.com/bitcoin/bitcoin/pull/15976#issuecomment-490572428,490572428,
MarcoFalke,2019-05-08 17:26:31,"> Would you say the root cause of that is that ::ChainstateActive is global?\n\nAlso, `chainActive`, `mapBlockIndex`, .... I fail to see how an interface could help here. Shouldn't `CChainState` be the interface?",https://github.com/bitcoin/bitcoin/pull/15976#issuecomment-490576375,490576375,
jamesob,2019-05-08 17:43:23,"> An alternative could be to remove the global methods (e.g. ::ActivateBestChain) and inline them into the members?\n\nI like this idea but left it on the table in the interest of minimizing the diff.\n\nIn general, my preference would be to have anything outside of validation deal with the CChainState interface (`::ChainstateActive()` or other instances), and have anything only to be used by ",https://github.com/bitcoin/bitcoin/pull/15976#issuecomment-490582434,490582434,
jamesob,2019-05-15 03:04:22,"Thanks for the good feedback @Sjors @MarcoFalke @ryanofsky. I agree with the comments so far and have incorporated all of them aside from those noted above. Initially I hadn't touched the global `Flush` functions because I thought it'd create an unnecessarily large diff, but it turns out that it's negligible.\n\nI took the liberty of renaming the global function equivalents for clarity, and in t",https://github.com/bitcoin/bitcoin/pull/15976#issuecomment-492485689,492485689,
jamesob,2019-05-15 13:57:09,"> PruneAndFlush() doesn't seem to actually do any flushing\n\nMy mistake: flushes *do* happen when calling `PruneAndFlush()`. I've undone that particular rename and removed the comment I added. ",https://github.com/bitcoin/bitcoin/pull/15976#issuecomment-492665786,492665786,
MarcoFalke,2019-05-23 19:46:27,"My comments are mostly meant to minimize the changed lines, so purely stylistic. I guess you shouldn't address them unless you need to invalidate the reviews for other reasons.",https://github.com/bitcoin/bitcoin/pull/15976#issuecomment-495359473,495359473,
Empact,2019-05-29 03:27:20,utACK https://github.com/bitcoin/bitcoin/pull/15976/commits/403e677c9ebbf9744733010e6b0c2d1b182ee850 no need to address my nits herein,https://github.com/bitcoin/bitcoin/pull/15976#issuecomment-496769376,496769376,
jamesob,2019-05-30 18:02:57,4 utACKs on this - is there anyone else who wants to give it a look before merge?,https://github.com/bitcoin/bitcoin/pull/15976#issuecomment-497425233,497425233,
laanwj,2019-06-05 09:54:55,utACK 403e677c9ebbf9744733010e6b0c2d1b182ee850,https://github.com/bitcoin/bitcoin/pull/15976#issuecomment-499018489,499018489,
MarcoFalke,2019-05-07 18:53:19,style-nit: Why shuffle the includes for no reason?,https://github.com/bitcoin/bitcoin/pull/15976#discussion_r281782731,281782731,src/validation.cpp
jamesob,2019-05-07 18:54:52,"Oops, will fix.",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r281783295,281783295,src/validation.cpp
Sjors,2019-05-08 15:09:48,Does this implementation really need to be in the header?,https://github.com/bitcoin/bitcoin/pull/15976#discussion_r282111893,282111893,src/validation.h
ryanofsky,2019-05-08 17:11:53,"The method implementation doesn't, but the struct declaration does because it affects the layout of CChainState objects.",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r282162424,282162424,src/validation.h
MarcoFalke,2019-05-13 18:23:45,"in commit de39209d0c move-only: make the CChainState interface public\n\nCould keep this implementation in the cpp file? Only put the struct and declaration in the header?\n\nAlso, the commit description mentions a ""namespace"", which is no longer true, so should be removed?",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r283475344,283475344,src/validation.h
MarcoFalke,2019-05-13 18:34:51,"In commit 9147f28ec0 refactoring: FlushStateToDisk -> CChainState\n\n\nIt seems weird to move a method that was `static` in validation.cpp to the header file as a public member function. At the very least it should be private. (However, I'd prefer if in the same commit the `FlushStateToDisk` and `PruneAndFlush` were moved to a public method in CChainState.)",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r283479959,283479959,src/validation.h
MarcoFalke,2019-05-13 18:39:46,"in commit 61fd34e244  refactoring: IsInitialBlockDownload -> CChainState\n\n\nInstead of a question, say ""Whether this c...""?",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r283481731,283481731,src/validation.h
MarcoFalke,2019-05-13 18:40:24,"in commit 61fd34e refactoring: IsInitialBlockDownload -> CChainState\n\nThis is only toggled once (aka latched)? So should keep that nomenclature? ",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r283481944,283481944,src/validation.h
ryanofsky,2019-05-14 21:55:01,"Is there any particular reason why  `FlushStateToDisk` `PruneAndFlush` should not be ChainState members and `FlushStateToDisk` `IsInitialBlockDownload` should be? Curious how your comment in https://github.com/bitcoin/bitcoin/pull/15976#issuecomment-490582434 applies to these individual cases. Not that it really matters, but it'd be nice to have consistency, and maybe explicit rationale for why th",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r284016299,284016299,src/validation.h
jamesob,2019-05-15 02:55:50,"No good reason beyond the fact that `FlushStateToDisk` affects on-disk block files (which are shared across chainstates) - but that's a symptom of a more general issue (that FSTD handles pruning, which seems like a separate concern) so probably not worth worrying about here.\n\n",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r284070760,284070760,src/validation.h
jamesob,2019-05-15 02:58:41,"Agree with your general concern, but usage of `FlushStateToDisk` happens in places that won't work with `private` like `AcceptToMemoryPoolWithTime` and so if we made it private, we'd have to attach a bunch of `friend` statements which seems kind of gross.",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r284071249,284071249,src/validation.h
MarcoFalke,2019-05-15 12:04:53,"Hmm, makes sense",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r284220451,284220451,src/validation.h
MarcoFalke,2019-05-15 12:12:22,"in commit a8930a66b1 move-only: make the CChainState interface public\n\n\nWhy is this moved to the end of the cpp file instead of keeping it at the top? This breaks both `git blame` and git diff with `--color-moved=dimmed-zebra --ignore-all-space`",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r284223105,284223105,src/validation.cpp
MarcoFalke,2019-05-15 12:15:48,"```suggestion\n/** @returns the most-work valid chainstate. */\n```\n\nin commit 7794d41a58 refactoring: introduce ChainstateActive()\n\n\nCould clarify that this the chainstate is fully validated (as opposed to a pow header chain)",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r284224235,284224235,src/validation.h
MarcoFalke,2019-05-15 12:23:21,"in commit 7ab9e339a8 refactoring: FlushStateToDisk -> CChainState\n\n\nstyle-question: You remove the global with the same name in this commit, so the `this->` is not required?",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r284226967,284226967,src/validation.cpp
MarcoFalke,2019-05-15 12:28:58,"in commit 7ab9e339a8 refactoring: FlushStateToDisk -> CChainState\n\n\nI'd rather not add a comment that starts with ""confusingly"". You renamed the function and removed the confusion.",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r284229049,284229049,src/validation.cpp
jamesob,2019-05-15 13:48:32,"I like prefixing with `this->` for methods because it makes it obvious we're calling a method, sort of like `m_`. See the IRC discussion: http://www.erisian.com.au/bitcoin-core-dev/log-2019-05-06.html#l-572\n\nHappy to undo it if it's controversial though.",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r284264160,284264160,src/validation.cpp
jamesob,2019-05-15 13:52:23,"It'd be in an awkward place at the top of the file - right below the ""global state"" comment. Happy to move it back if you think the diff convenience is worth it though.",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r284266146,284266146,src/validation.cpp
jamesob,2019-05-15 13:52:54,Ah good point! Thanks.,https://github.com/bitcoin/bitcoin/pull/15976#discussion_r284266408,284266408,src/validation.h
MarcoFalke,2019-05-15 14:38:31,"I don't understand what the ""global state"" comment should convey. If a symbol is global and not const, we prefix it with `g_`. Might want to remove it?",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r284290728,284290728,src/validation.cpp
MarcoFalke,2019-05-15 14:39:12,Asked because we don't do this elsewhere. You can pick whatever you prefer ofc,https://github.com/bitcoin/bitcoin/pull/15976#discussion_r284291087,284291087,src/validation.cpp
ryanofsky,2019-05-15 15:56:13,"> I like prefixing with this-> for methods because it makes it obvious we're calling a method, sort of like m_\n\nFWIW, I still think https://github.com/bitcoin/bitcoin/pull/14635 is a good solution that would improve readability in these cases",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r284330177,284330177,src/validation.cpp
MarcoFalke,2019-05-15 20:41:46,"nit, in commit a8930a66b1 move-only: make the CChainState interface public\n\n\nThis comment wasn't accurate before the commit, nor is it accurate after the commit. And it made you move the code block below all the way down in the file.\n\nCould instead remove this comment and keep the code block below in place? This also makes `git blame` and `git diff` work on the commit without workarounds",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r284441906,284441906,src/validation.cpp
jamesob,2019-05-16 13:08:38,"Yep, agree. Not sure how much it helps the diff, but that comment should be removed. I've pushed [the change](https://github.com/bitcoin/bitcoin/compare/64d0f872fcf6b61de9e4e62ce13dbbe3b00cbb6c..403e677c9ebbf9744733010e6b0c2d1b182ee850).",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r284696473,284696473,src/validation.cpp
Sjors,2019-05-16 13:49:59,"Nit: might as well improve this comment while you're moving it, by using more sentences...\n\n```\n* Consider flushing caches and indexes for the on-disk chain state.\n* If we're in prune mode and about to delete block files, we flush.\n* Otherwise we check FlushStateMode:\n* IF_NEEDED: if the chainstate is too large compared to -dbcache (plus -mempoolsize in IBD)\n* PERIODIC: it's been a w",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r284716026,284716026,src/validation.h
Sjors,2019-05-16 14:22:18,Nit: flushing is done _before_ pruning. Rename to `FlushAndPrune()`?,https://github.com/bitcoin/bitcoin/pull/15976#discussion_r284732394,284732394,src/validation.h
Sjors,2019-05-16 14:24:41,Yuck (but out of scope),https://github.com/bitcoin/bitcoin/pull/15976#discussion_r284733657,284733657,src/validation.cpp
jamesob,2019-05-16 14:41:37,"Ehh, well it depends on what you're talking about being flushed - i.e. `pcoinsTip` get flushed [after](https://github.com/bitcoin/bitcoin/blob/master/src/validation.cpp#L2191) the prune happens.",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r284742646,284742646,src/validation.h
Sjors,2019-05-16 15:01:37,"I was talking about the chain state, which is the biggest thing :-) ",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r284753199,284753199,src/validation.h
jamesob,2019-05-16 15:05:21,"Yeah, `pcoinsTip` (chainstate) is flushed *after* pruning.",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r284755131,284755131,src/validation.h
Sjors,2019-05-16 15:42:15,"Ah wait, never mind, you're right. Why do we flush the chainstate cache after pruning? Is that in order to minimize the chances of running out of disk space?",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r284773736,284773736,src/validation.h
MarcoFalke,2019-05-17 14:37:21,"in commit 4d6688603b refactoring: introduce ChainstateActive()\n\n\nWhy is this changed? It seems this method will go away anyway. See https://github.com/bitcoin/bitcoin/pull/15606/files#diff-24efdb00bfbe56b140fb006b562cc70bL4415",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r285154179,285154179,src/validation.cpp
MarcoFalke,2019-05-17 14:38:44,"in commit 4d66886 refactoring: introduce ChainstateActive()\n\n\nWhy is this changed? It seems that eventually you'll pass in the chainstate, see https://github.com/bitcoin/bitcoin/pull/15606/files#diff-24efdb00bfbe56b140fb006b562cc70bR4324\n\nSo why would you change the same line twice?",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r285154734,285154734,src/validation.cpp
MarcoFalke,2019-05-17 14:39:20,"in commit 4d66886 refactoring: introduce ChainstateActive()\n\nSame here (and all other changes in this commit)",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r285154989,285154989,src/validation.cpp
MarcoFalke,2019-05-17 14:40:44,"git-style-nit in commit d7c97edeea move-only: make the CChainState interface public\n\n\nCould keep the previous indentation to preserve the `git blame` and minimize the diff line count? No strong opinion, though.\nPlease don't address my nit if you don't have to touch the patches for other reasons.",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r285155670,285155670,src/validation.cpp
jamesob,2019-05-23 19:16:47,"I don't know that we should maintain a weird indentation just for ease-of-diff, but if other reviewers disagree, I'll make the change.",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r287094923,287094923,src/validation.cpp
jamesob,2019-05-23 19:23:37,"Even before that change, we remove the `g_chainstate` symbol (https://github.com/bitcoin/bitcoin/pull/15606/commits/4c4b9ce2f310a519f1579f6a2892c590c1b96c6a) which means that this change would have to happen at some point anyway.",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r287097288,287097288,src/validation.cpp
Empact,2019-05-29 03:13:23,"nit in commit d7c97ed move-only: make the CChainState interface public\n\nHow about defining `CBlockIndexWorkComparator` privately within `CChainState`, given it is not used outside the class?",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r288378134,288378134,src/validation.h
Empact,2019-05-29 03:17:33,"nit in commit 4d66886 refactoring: introduce ChainstateActive()\n\nHow about making `g_chainstate` static?",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r288378773,288378773,src/validation.cpp
Empact,2019-05-29 03:28:48,"nit: given context, this could be renamed `ForceFlushToDisk`",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r288380488,288380488,src/validation.h
Empact,2019-05-29 03:29:24,"nit: given context, this could be renamed `FlushToDisk`",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r288380573,288380573,src/validation.h
Empact,2019-05-29 03:30:35,nit: this could be moved to `CChainState::FlushMode`,https://github.com/bitcoin/bitcoin/pull/15976#discussion_r288380744,288380744,src/validation.h
jamesob,2019-05-30 18:41:21,"I very much like the idea of clarifying this comment, but in my experience doc changes sometimes generate a surprising amount of feedback. I don't want to expand this PR beyond its current size (or delay it more than necessary), but will definitely be happy to review follow-up PRs making the change you suggest. ",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r289119702,289119702,src/validation.h
promag,2019-06-02 21:15:58,"I don't mind the indentation `git show --color-moved=dimmed_zebra --color-moved-ws=ignore-all-space d7c97edeea8cee10ad9da1f940d39d5073ac142d`.\n\nI think this operator was inlined? Does it make sense to declare it `inline`?",https://github.com/bitcoin/bitcoin/pull/15976#discussion_r289658222,289658222,src/validation.cpp
