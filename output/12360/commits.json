[
  {
    "sha": "5160abf189248239531ea14ab10ea1362d70ddbe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTYwYWJmMTg5MjQ4MjM5NTMxZWExNGFiMTBlYTEzNjJkNzBkZGJl",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2017-10-01T19:47:18Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-06-12T15:42:21Z"
      },
      "message": "[rpc] Tidy up reporting of buried and ongoing softforks\n\nThis combines reporting of buried (formally ISM) softfork deployments\nand BIP9 versionbits softfork deployments into one JSON object in the\ngetblockchaininfo return object.\n\nIt also removes the redundant feature_bip9_softforks.py.\nfeature_bip9_sofforks.py was intended to be a generic test for versionbits\ndeployments. However, it only tests CSV activation and was not updated\nto test segwit activation. CSV activation is tested by\nfeature_csv_activation.py, so this test is duplicated effort.",
      "tree": {
        "sha": "7afb99c0d542f249f64441ce9e999296dbb88991",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7afb99c0d542f249f64441ce9e999296dbb88991"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5160abf189248239531ea14ab10ea1362d70ddbe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5160abf189248239531ea14ab10ea1362d70ddbe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5160abf189248239531ea14ab10ea1362d70ddbe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5160abf189248239531ea14ab10ea1362d70ddbe/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa4b9065a8298f546d91fe382b4517fbf30749c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4b9065a8298f546d91fe382b4517fbf30749c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4b9065a8298f546d91fe382b4517fbf30749c1"
      }
    ],
    "stats": {
      "total": 147,
      "additions": 67,
      "deletions": 80
    },
    "files": [
      {
        "sha": "364a825a4ebd25f44fc6e90343c211705bdf5959",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 66,
        "deletions": 78,
        "changes": 144,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5160abf189248239531ea14ab10ea1362d70ddbe/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5160abf189248239531ea14ab10ea1362d70ddbe/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=5160abf189248239531ea14ab10ea1362d70ddbe",
        "patch": "@@ -1098,54 +1098,46 @@ static UniValue verifychain(const JSONRPCRequest& request)\n     return CVerifyDB().VerifyDB(Params(), pcoinsTip.get(), nCheckLevel, nCheckDepth);\n }\n \n-/** Implementation of IsSuperMajority with better feedback */\n-static UniValue SoftForkMajorityDesc(int version, CBlockIndex* pindex, const Consensus::Params& consensusParams)\n+static void BuriedForkDescPushBack(UniValue& softforks, const std::string &name, int height)\n {\n-    UniValue rv(UniValue::VOBJ);\n-    bool activated = false;\n-    switch(version)\n-    {\n-        case 2:\n-            activated = pindex->nHeight >= consensusParams.BIP34Height;\n-            break;\n-        case 3:\n-            activated = pindex->nHeight >= consensusParams.BIP66Height;\n-            break;\n-        case 4:\n-            activated = pindex->nHeight >= consensusParams.BIP65Height;\n-            break;\n-    }\n-    rv.pushKV(\"status\", activated);\n-    return rv;\n-}\n+    // For buried deployments.\n+    // Buried deployments with activation height value of std::numeric_limits<int>::max() are hidden.\n+    if (height == std::numeric_limits<int>::max()) return;\n \n-static UniValue SoftForkDesc(const std::string &name, int version, CBlockIndex* pindex, const Consensus::Params& consensusParams)\n-{\n     UniValue rv(UniValue::VOBJ);\n-    rv.pushKV(\"id\", name);\n-    rv.pushKV(\"version\", version);\n-    rv.pushKV(\"reject\", SoftForkMajorityDesc(version, pindex, consensusParams));\n-    return rv;\n+    rv.pushKV(\"type\", \"buried\");\n+    // getblockchaininfo reports the softfork as active from when the chain height is\n+    // one below the activation height\n+    rv.pushKV(\"active\", chainActive.Tip()->nHeight + 1 >= height);\n+    rv.pushKV(\"height\", height);\n+    softforks.pushKV(name, rv);\n }\n \n-static UniValue BIP9SoftForkDesc(const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n+static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n {\n-    UniValue rv(UniValue::VOBJ);\n+    // For BIP9 deployments.\n+    // Deployments (e.g. testdummy) with timeout value before Jan 1, 2009 are hidden.\n+    // A timeout value of 0 guarantees a softfork will never be activated.\n+    // This is used when softfork codes are merged without specifying the deployment schedule.\n+    if (consensusParams.vDeployments[id].nTimeout <= 1230768000) return;\n+\n+    UniValue bip9(UniValue::VOBJ);\n     const ThresholdState thresholdState = VersionBitsTipState(consensusParams, id);\n     switch (thresholdState) {\n-    case ThresholdState::DEFINED: rv.pushKV(\"status\", \"defined\"); break;\n-    case ThresholdState::STARTED: rv.pushKV(\"status\", \"started\"); break;\n-    case ThresholdState::LOCKED_IN: rv.pushKV(\"status\", \"locked_in\"); break;\n-    case ThresholdState::ACTIVE: rv.pushKV(\"status\", \"active\"); break;\n-    case ThresholdState::FAILED: rv.pushKV(\"status\", \"failed\"); break;\n+    case ThresholdState::DEFINED: bip9.pushKV(\"status\", \"defined\"); break;\n+    case ThresholdState::STARTED: bip9.pushKV(\"status\", \"started\"); break;\n+    case ThresholdState::LOCKED_IN: bip9.pushKV(\"status\", \"locked_in\"); break;\n+    case ThresholdState::ACTIVE: bip9.pushKV(\"status\", \"active\"); break;\n+    case ThresholdState::FAILED: bip9.pushKV(\"status\", \"failed\"); break;\n     }\n     if (ThresholdState::STARTED == thresholdState)\n     {\n-        rv.pushKV(\"bit\", consensusParams.vDeployments[id].bit);\n+        bip9.pushKV(\"bit\", consensusParams.vDeployments[id].bit);\n     }\n-    rv.pushKV(\"startTime\", consensusParams.vDeployments[id].nStartTime);\n-    rv.pushKV(\"timeout\", consensusParams.vDeployments[id].nTimeout);\n-    rv.pushKV(\"since\", VersionBitsTipStateSinceHeight(consensusParams, id));\n+    bip9.pushKV(\"startTime\", consensusParams.vDeployments[id].nStartTime);\n+    bip9.pushKV(\"timeout\", consensusParams.vDeployments[id].nTimeout);\n+    int64_t since_height = VersionBitsTipStateSinceHeight(consensusParams, id);\n+    bip9.pushKV(\"since\", since_height);\n     if (ThresholdState::STARTED == thresholdState)\n     {\n         UniValue statsUV(UniValue::VOBJ);\n@@ -1155,18 +1147,21 @@ static UniValue BIP9SoftForkDesc(const Consensus::Params& consensusParams, Conse\n         statsUV.pushKV(\"elapsed\", statsStruct.elapsed);\n         statsUV.pushKV(\"count\", statsStruct.count);\n         statsUV.pushKV(\"possible\", statsStruct.possible);\n-        rv.pushKV(\"statistics\", statsUV);\n+        bip9.pushKV(\"statistics\", statsUV);\n     }\n-    return rv;\n-}\n \n-static void BIP9SoftForkDescPushBack(UniValue& bip9_softforks, const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n-{\n-    // Deployments with timeout value of 0 are hidden.\n-    // A timeout value of 0 guarantees a softfork will never be activated.\n-    // This is used when softfork codes are merged without specifying the deployment schedule.\n-    if (consensusParams.vDeployments[id].nTimeout > 0)\n-        bip9_softforks.pushKV(VersionBitsDeploymentInfo[id].name, BIP9SoftForkDesc(consensusParams, id));\n+    UniValue rv(UniValue::VOBJ);\n+    rv.pushKV(\"type\", \"bip9\");\n+    rv.pushKV(\"bip9\", bip9);\n+    if (ThresholdState::LOCKED_IN == thresholdState) {\n+        rv.pushKV(\"height\", since_height + consensusParams.nMinerConfirmationWindow);\n+    }\n+    else if (ThresholdState::ACTIVE == thresholdState) {\n+        rv.pushKV(\"height\", since_height);\n+    }\n+    rv.pushKV(\"active\", ThresholdState::ACTIVE == thresholdState);\n+\n+    softforks.pushKV(name, rv);\n }\n \n UniValue getblockchaininfo(const JSONRPCRequest& request)\n@@ -1191,29 +1186,25 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n             \"  \\\"pruneheight\\\": xxxxxx,        (numeric) lowest-height complete block stored (only present if pruning is enabled)\\n\"\n             \"  \\\"automatic_pruning\\\": xx,      (boolean) whether automatic pruning is enabled (only present if pruning is enabled)\\n\"\n             \"  \\\"prune_target_size\\\": xxxxxx,  (numeric) the target size used by pruning (only present if automatic pruning is enabled)\\n\"\n-            \"  \\\"softforks\\\": [                (array) status of softforks in progress\\n\"\n-            \"     {\\n\"\n-            \"        \\\"id\\\": \\\"xxxx\\\",           (string) name of softfork\\n\"\n-            \"        \\\"version\\\": xx,          (numeric) block version\\n\"\n-            \"        \\\"reject\\\": {             (object) progress toward rejecting pre-softfork blocks\\n\"\n-            \"           \\\"status\\\": xx,        (boolean) true if threshold reached\\n\"\n-            \"        },\\n\"\n-            \"     }, ...\\n\"\n-            \"  ],\\n\"\n-            \"  \\\"bip9_softforks\\\": {           (object) status of BIP9 softforks in progress\\n\"\n+            \"  \\\"softforks\\\": {                (object) status of softforks\\n\"\n             \"     \\\"xxxx\\\" : {                 (string) name of the softfork\\n\"\n-            \"        \\\"status\\\": \\\"xxxx\\\",       (string) one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\\n\"\n-            \"        \\\"bit\\\": xx,              (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" status)\\n\"\n-            \"        \\\"startTime\\\": xx,        (numeric) the minimum median time past of a block at which the bit gains its meaning\\n\"\n-            \"        \\\"timeout\\\": xx,          (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in\\n\"\n-            \"        \\\"since\\\": xx,            (numeric) height of the first block to which the status applies\\n\"\n-            \"        \\\"statistics\\\": {         (object) numeric statistics about BIP9 signalling for a softfork (only for \\\"started\\\" status)\\n\"\n-            \"           \\\"period\\\": xx,        (numeric) the length in blocks of the BIP9 signalling period \\n\"\n-            \"           \\\"threshold\\\": xx,     (numeric) the number of blocks with the version bit set required to activate the feature \\n\"\n-            \"           \\\"elapsed\\\": xx,       (numeric) the number of blocks elapsed since the beginning of the current period \\n\"\n-            \"           \\\"count\\\": xx,         (numeric) the number of blocks with the version bit set in the current period \\n\"\n-            \"           \\\"possible\\\": xx       (boolean) returns false if there are not enough blocks left in this period to pass activation threshold \\n\"\n-            \"        }\\n\"\n+            \"        \\\"type\\\": \\\"xxxx\\\",         (string) one of \\\"buried\\\", \\\"bip9\\\"\\n\"\n+            \"        \\\"bip9\\\": {               (object) status of bip9 softforks (only for \\\"bip9\\\" type)\\n\"\n+            \"           \\\"status\\\": \\\"xxxx\\\",    (string) one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\\n\"\n+            \"           \\\"bit\\\": xx,           (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" status)\\n\"\n+            \"           \\\"startTime\\\": xx,     (numeric) the minimum median time past of a block at which the bit gains its meaning\\n\"\n+            \"           \\\"timeout\\\": xx,       (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in\\n\"\n+            \"           \\\"since\\\": xx,         (numeric) height of the first block to which the status applies\\n\"\n+            \"           \\\"statistics\\\": {      (object) numeric statistics about BIP9 signalling for a softfork\\n\"\n+            \"              \\\"period\\\": xx,     (numeric) the length in blocks of the BIP9 signalling period \\n\"\n+            \"              \\\"threshold\\\": xx,  (numeric) the number of blocks with the version bit set required to activate the feature \\n\"\n+            \"              \\\"elapsed\\\": xx,    (numeric) the number of blocks elapsed since the beginning of the current period \\n\"\n+            \"              \\\"count\\\": xx,      (numeric) the number of blocks with the version bit set in the current period \\n\"\n+            \"              \\\"possible\\\": xx    (boolean) returns false if there are not enough blocks left in this period to pass activation threshold \\n\"\n+            \"           }\\n\"\n+            \"        },\\n\"\n+            \"        \\\"height\\\": \\\"xxxxxx\\\",     (numeric) height of the first block which the rules are enforced (only for \\\"buried\\\" type, or \\\"bip9\\\" type with \\\"locked_in\\\" or \\\"active\\\" status)\\n\"\n+            \"        \\\"active\\\": xx,           (boolean) true if the rules are enforced\\n\"\n             \"     }\\n\"\n             \"  }\\n\"\n             \"  \\\"warnings\\\" : \\\"...\\\",           (string) any network and blockchain warnings.\\n\"\n@@ -1255,17 +1246,14 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     }\n \n     const Consensus::Params& consensusParams = Params().GetConsensus();\n-    CBlockIndex* tip = chainActive.Tip();\n-    UniValue softforks(UniValue::VARR);\n-    UniValue bip9_softforks(UniValue::VOBJ);\n-    softforks.push_back(SoftForkDesc(\"bip34\", 2, tip, consensusParams));\n-    softforks.push_back(SoftForkDesc(\"bip66\", 3, tip, consensusParams));\n-    softforks.push_back(SoftForkDesc(\"bip65\", 4, tip, consensusParams));\n-    for (int pos = Consensus::DEPLOYMENT_CSV; pos != Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++pos) {\n-        BIP9SoftForkDescPushBack(bip9_softforks, consensusParams, static_cast<Consensus::DeploymentPos>(pos));\n-    }\n+    UniValue softforks(UniValue::VOBJ);\n+    BuriedForkDescPushBack(softforks, \"bip34\", consensusParams.BIP34Height);\n+    BuriedForkDescPushBack(softforks, \"bip66\", consensusParams.BIP66Height);\n+    BuriedForkDescPushBack(softforks, \"bip65\", consensusParams.BIP65Height);\n+    BIP9SoftForkDescPushBack(softforks, \"csv\", consensusParams, Consensus::DEPLOYMENT_CSV);\n+    BIP9SoftForkDescPushBack(softforks, \"segwit\", consensusParams, Consensus::DEPLOYMENT_SEGWIT);\n+    BIP9SoftForkDescPushBack(softforks, \"testdummy\", consensusParams, Consensus::DEPLOYMENT_TESTDUMMY);\n     obj.pushKV(\"softforks\",             softforks);\n-    obj.pushKV(\"bip9_softforks\", bip9_softforks);\n \n     obj.pushKV(\"warnings\", GetWarnings(\"statusbar\"));\n     return obj;"
      },
      {
        "sha": "01ad0cdb28f57189b72a79073f463cc71b3165cf",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5160abf189248239531ea14ab10ea1362d70ddbe/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5160abf189248239531ea14ab10ea1362d70ddbe/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=5160abf189248239531ea14ab10ea1362d70ddbe",
        "patch": "@@ -66,7 +66,6 @@ def _test_getblockchaininfo(self):\n \n         keys = [\n             'bestblockhash',\n-            'bip9_softforks',\n             'blocks',\n             'chain',\n             'chainwork',"
      },
      {
        "sha": "6d5fd49c56bbbd86b241472657b887563a7b0147",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5160abf189248239531ea14ab10ea1362d70ddbe/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5160abf189248239531ea14ab10ea1362d70ddbe/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=5160abf189248239531ea14ab10ea1362d70ddbe",
        "patch": "@@ -344,7 +344,7 @@ def delete_cookie_file(datadir):\n \n def get_bip9_status(node, key):\n     info = node.getblockchaininfo()\n-    return info['bip9_softforks'][key]\n+    return info['softforks'][key]['bip9']\n \n def set_node_times(nodes, t):\n     for node in nodes:"
      }
    ]
  },
  {
    "sha": "c2029c2cc375d51c1abb0f80032895a20887650c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjAyOWMyY2MzNzVkNTFjMWFiYjBmODAwMzI4OTVhMjA4ODc2NTBj",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2017-09-30T15:38:05Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-06-12T15:42:21Z"
      },
      "message": "[Consensus] Bury CSV deployment height\n\nHard code CSV deployment height to 419328 for mainnet.",
      "tree": {
        "sha": "d53a08b8ecc2a7a3e57d1e555e24b3874352fc62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d53a08b8ecc2a7a3e57d1e555e24b3874352fc62"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c2029c2cc375d51c1abb0f80032895a20887650c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2029c2cc375d51c1abb0f80032895a20887650c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c2029c2cc375d51c1abb0f80032895a20887650c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2029c2cc375d51c1abb0f80032895a20887650c/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5160abf189248239531ea14ab10ea1362d70ddbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5160abf189248239531ea14ab10ea1362d70ddbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5160abf189248239531ea14ab10ea1362d70ddbe"
      }
    ],
    "stats": {
      "total": 89,
      "additions": 24,
      "deletions": 65
    },
    "files": [
      {
        "sha": "3d2644cebb3741abaa37fbb2e53914e5486ef298",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 13,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2029c2cc375d51c1abb0f80032895a20887650c/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2029c2cc375d51c1abb0f80032895a20887650c/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=c2029c2cc375d51c1abb0f80032895a20887650c",
        "patch": "@@ -80,6 +80,7 @@ class CMainParams : public CChainParams {\n         consensus.BIP34Hash = uint256S(\"0x000000000000024b89b42a942fe0d9fea3bb44ab7bd1b19115dd6a759c0808b8\");\n         consensus.BIP65Height = 388381; // 000000000000000004c2b624ed5d7756c508d90fd0da2c7c679febfa6c4735f0\n         consensus.BIP66Height = 363725; // 00000000000000000379eaa19dce8c9b722d46ae6a57c2f1a988119488b50931\n+        consensus.CSVHeight = 419328; // 000000000000000004a1b34462cb8aeebd5799177f7a29cf28f2d1961716b5b5\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -91,11 +92,6 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n \n-        // Deployment of BIP68, BIP112, and BIP113.\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 1462060800; // May 1st, 2016\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 1493596800; // May 1st, 2017\n-\n         // Deployment of SegWit (BIP141, BIP143, and BIP147)\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 1479168000; // November 15th, 2016.\n@@ -195,6 +191,7 @@ class CTestNetParams : public CChainParams {\n         consensus.BIP34Hash = uint256S(\"0x0000000023b3a96d3484e5abb3755c413e7d41500f8e2a5c3f0dd01299cd8ef8\");\n         consensus.BIP65Height = 581885; // 00000000007f6655f22f98e72ed80d8b06dc761d5da09df0fa1dc4be4f861eb6\n         consensus.BIP66Height = 330776; // 000000002104c8c45e99a8853285a3b592602a3ccde2b832481da85e9e4ba182\n+        consensus.CSVHeight = 770112; // 00000000025e930139bac5c6c31a403776da130831ab85be56578f3fa75369bb\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -206,11 +203,6 @@ class CTestNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n \n-        // Deployment of BIP68, BIP112, and BIP113.\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 1456790400; // March 1st, 2016\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 1493596800; // May 1st, 2017\n-\n         // Deployment of SegWit (BIP141, BIP143, and BIP147)\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 1462060800; // May 1st 2016\n@@ -288,6 +280,7 @@ class CRegTestParams : public CChainParams {\n         consensus.BIP34Hash = uint256();\n         consensus.BIP65Height = 1351; // BIP65 activated on regtest (Used in rpc activation tests)\n         consensus.BIP66Height = 1251; // BIP66 activated on regtest (Used in rpc activation tests)\n+        consensus.CSVHeight = 432; // CSV activated on regtest (Used in rpc activation tests)\n         consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -298,9 +291,6 @@ class CRegTestParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 0;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;"
      },
      {
        "sha": "9ebd89744bc774dfd9bf09fab468423cf901e676",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2029c2cc375d51c1abb0f80032895a20887650c/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2029c2cc375d51c1abb0f80032895a20887650c/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=c2029c2cc375d51c1abb0f80032895a20887650c",
        "patch": "@@ -16,7 +16,6 @@ namespace Consensus {\n enum DeploymentPos\n {\n     DEPLOYMENT_TESTDUMMY,\n-    DEPLOYMENT_CSV, // Deployment of BIP68, BIP112, and BIP113.\n     DEPLOYMENT_SEGWIT, // Deployment of BIP141, BIP143, and BIP147.\n     // NOTE: Also add new deployments to VersionBitsDeploymentInfo in versionbits.cpp\n     MAX_VERSION_BITS_DEPLOYMENTS\n@@ -58,6 +57,8 @@ struct Params {\n     int BIP65Height;\n     /** Block height at which BIP66 becomes active */\n     int BIP66Height;\n+    /** Block height at which CSV (BIP68, BIP112 and BIP113) becomes active */\n+    int CSVHeight;\n     /**\n      * Minimum blocks including miner confirmation of the total of 2016 blocks in a retargeting period,\n      * (nPowTargetTimespan / nPowTargetSpacing) which is also used for BIP9 deployments."
      },
      {
        "sha": "12a2ba10599bbdd9e9a8f64471c6995259fcc4bb",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2029c2cc375d51c1abb0f80032895a20887650c/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2029c2cc375d51c1abb0f80032895a20887650c/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=c2029c2cc375d51c1abb0f80032895a20887650c",
        "patch": "@@ -1250,7 +1250,7 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     BuriedForkDescPushBack(softforks, \"bip34\", consensusParams.BIP34Height);\n     BuriedForkDescPushBack(softforks, \"bip66\", consensusParams.BIP66Height);\n     BuriedForkDescPushBack(softforks, \"bip65\", consensusParams.BIP65Height);\n-    BIP9SoftForkDescPushBack(softforks, \"csv\", consensusParams, Consensus::DEPLOYMENT_CSV);\n+    BuriedForkDescPushBack(softforks, \"csv\", consensusParams.CSVHeight);\n     BIP9SoftForkDescPushBack(softforks, \"segwit\", consensusParams, Consensus::DEPLOYMENT_SEGWIT);\n     BIP9SoftForkDescPushBack(softforks, \"testdummy\", consensusParams, Consensus::DEPLOYMENT_TESTDUMMY);\n     obj.pushKV(\"softforks\",             softforks);"
      },
      {
        "sha": "0e01d42bfc335a6f54f26dc1fc8f832a0c244263",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2029c2cc375d51c1abb0f80032895a20887650c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2029c2cc375d51c1abb0f80032895a20887650c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c2029c2cc375d51c1abb0f80032895a20887650c",
        "patch": "@@ -1794,8 +1794,8 @@ static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consens\n         flags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n     }\n \n-    // Start enforcing BIP68 (sequence locks) and BIP112 (CHECKSEQUENCEVERIFY) using versionbits logic.\n-    if (VersionBitsState(pindex->pprev, consensusparams, Consensus::DEPLOYMENT_CSV, versionbitscache) == ThresholdState::ACTIVE) {\n+    // Start enforcing BIP68 (sequence locks) and BIP112 (CHECKSEQUENCEVERIFY)\n+    if (pindex->nHeight >= consensusparams.CSVHeight) {\n         flags |= SCRIPT_VERIFY_CHECKSEQUENCEVERIFY;\n     }\n \n@@ -1984,9 +1984,9 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n         }\n     }\n \n-    // Start enforcing BIP68 (sequence locks) and BIP112 (CHECKSEQUENCEVERIFY) using versionbits logic.\n+    // Start enforcing BIP68 (sequence locks) and BIP112 (CHECKSEQUENCEVERIFY)\n     int nLockTimeFlags = 0;\n-    if (VersionBitsState(pindex->pprev, chainparams.GetConsensus(), Consensus::DEPLOYMENT_CSV, versionbitscache) == ThresholdState::ACTIVE) {\n+    if (pindex->nHeight >= chainparams.GetConsensus().CSVHeight) {\n         nLockTimeFlags |= LOCKTIME_VERIFY_SEQUENCE;\n     }\n \n@@ -3286,7 +3286,7 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n \n     // Start enforcing BIP113 (Median Time Past) using versionbits logic.\n     int nLockTimeFlags = 0;\n-    if (VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_CSV, versionbitscache) == ThresholdState::ACTIVE) {\n+    if (nHeight >= consensusParams.CSVHeight) {\n         nLockTimeFlags |= LOCKTIME_MEDIAN_TIME_PAST;\n     }\n "
      },
      {
        "sha": "2e3aceca16b6d4a7481006526b306f0686e73250",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2029c2cc375d51c1abb0f80032895a20887650c/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2029c2cc375d51c1abb0f80032895a20887650c/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=c2029c2cc375d51c1abb0f80032895a20887650c",
        "patch": "@@ -10,10 +10,6 @@ const struct VBDeploymentInfo VersionBitsDeploymentInfo[Consensus::MAX_VERSION_B\n         /*.name =*/ \"testdummy\",\n         /*.gbt_force =*/ true,\n     },\n-    {\n-        /*.name =*/ \"csv\",\n-        /*.gbt_force =*/ true,\n-    },\n     {\n         /*.name =*/ \"segwit\",\n         /*.gbt_force =*/ true,"
      },
      {
        "sha": "b69b1fd56f9dfd12e6afe9358d3eb35026e1e46b",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2029c2cc375d51c1abb0f80032895a20887650c/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2029c2cc375d51c1abb0f80032895a20887650c/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=c2029c2cc375d51c1abb0f80032895a20887650c",
        "patch": "@@ -325,7 +325,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n     # being run, then it's possible the test has activated the soft fork, and\n     # this test should be moved to run earlier, or deleted.\n     def test_bip68_not_consensus(self):\n-        assert(get_bip9_status(self.nodes[0], 'csv')['status'] != 'active')\n+        assert not softfork_active(self.nodes[0], 'csv')\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 2)\n \n         tx1 = FromHex(CTransaction(), self.nodes[0].getrawtransaction(txid))\n@@ -375,9 +375,9 @@ def activateCSV(self):\n         height = self.nodes[0].getblockcount()\n         assert_greater_than(min_activation_height - height, 2)\n         self.nodes[0].generate(min_activation_height - height - 2)\n-        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], \"locked_in\")\n+        assert not softfork_active(self.nodes[0], 'csv')\n         self.nodes[0].generate(1)\n-        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], \"active\")\n+        assert softfork_active(self.nodes[0], 'csv')\n         sync_blocks(self.nodes)\n \n     # Use self.nodes[1] to test that version 2 transactions are standard."
      },
      {
        "sha": "23b425be5dc337b100e8a55d912df71e9879f473",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 6,
        "deletions": 38,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2029c2cc375d51c1abb0f80032895a20887650c/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2029c2cc375d51c1abb0f80032895a20887650c/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=c2029c2cc375d51c1abb0f80032895a20887650c",
        "patch": "@@ -58,8 +58,8 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    get_bip9_status,\n     hex_str_to_bytes,\n+    softfork_active,\n )\n \n BASE_RELATIVE_LOCKTIME = 10\n@@ -196,44 +196,12 @@ def run_test(self):\n         self.tip = int(self.nodes[0].getbestblockhash(), 16)\n         self.nodeaddress = self.nodes[0].getnewaddress()\n \n-        self.log.info(\"Test that the csv softfork is DEFINED\")\n-        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'defined')\n-        test_blocks = self.generate_blocks(61, 4)\n-        self.sync_blocks(test_blocks)\n-\n-        self.log.info(\"Advance from DEFINED to STARTED, height = 143\")\n-        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'started')\n-\n-        self.log.info(\"Fail to achieve LOCKED_IN\")\n-        # 100 out of 144 signal bit 0. Use a variety of bits to simulate multiple parallel softforks\n-\n-        test_blocks = self.generate_blocks(50, 536870913)  # 0x20000001 (signalling ready)\n-        test_blocks = self.generate_blocks(20, 4, test_blocks)  # 0x00000004 (signalling not)\n-        test_blocks = self.generate_blocks(50, 536871169, test_blocks)  # 0x20000101 (signalling ready)\n-        test_blocks = self.generate_blocks(24, 536936448, test_blocks)  # 0x20010000 (signalling not)\n-        self.sync_blocks(test_blocks)\n-\n-        self.log.info(\"Failed to advance past STARTED, height = 287\")\n-        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'started')\n-\n-        self.log.info(\"Generate blocks to achieve LOCK-IN\")\n-        # 108 out of 144 signal bit 0 to achieve lock-in\n-        # using a variety of bits to simulate multiple parallel softforks\n-        test_blocks = self.generate_blocks(58, 536870913)  # 0x20000001 (signalling ready)\n-        test_blocks = self.generate_blocks(26, 4, test_blocks)  # 0x00000004 (signalling not)\n-        test_blocks = self.generate_blocks(50, 536871169, test_blocks)  # 0x20000101 (signalling ready)\n-        test_blocks = self.generate_blocks(10, 536936448, test_blocks)  # 0x20010000 (signalling not)\n-        self.sync_blocks(test_blocks)\n-\n-        self.log.info(\"Advanced from STARTED to LOCKED_IN, height = 431\")\n-        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'locked_in')\n-\n-        # Generate 140 more version 4 blocks\n-        test_blocks = self.generate_blocks(140, 4)\n+        # Activation height is hardcoded and the softfork will activate with any block version\n+        test_blocks = self.generate_blocks(345, 4)\n         self.sync_blocks(test_blocks)\n+        assert not softfork_active(self.nodes[0], 'csv')\n \n         # Inputs at height = 572\n-        #\n         # Put inputs for all tests in the chain at height 572 (tip now = 571) (time increases by 600s per block)\n         # Note we reuse inputs for v1 and v2 txs so must test these separately\n         # 16 normal inputs\n@@ -276,7 +244,7 @@ def run_test(self):\n         self.sync_blocks(test_blocks)\n \n         self.log.info(\"Not yet advanced to ACTIVE, height = 574 (will activate for block 576, not 575)\")\n-        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'locked_in')\n+        assert not softfork_active(self.nodes[0], 'csv')\n \n         # Test both version 1 and version 2 transactions for all tests\n         # BIP113 test transaction will be modified before each use to put in appropriate block time\n@@ -352,7 +320,7 @@ def run_test(self):\n         # 1 more version 4 block to get us to height 575 so the fork should now be active for the next block\n         test_blocks = self.generate_blocks(1, 4)\n         self.sync_blocks(test_blocks)\n-        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'active')\n+        assert softfork_active(self.nodes[0], 'csv')\n \n         self.log.info(\"Post-Soft Fork Tests.\")\n "
      },
      {
        "sha": "9dcb36a551bbd30fa06b74e2c99fc3dfeaede72b",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2029c2cc375d51c1abb0f80032895a20887650c/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2029c2cc375d51c1abb0f80032895a20887650c/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=c2029c2cc375d51c1abb0f80032895a20887650c",
        "patch": "@@ -346,6 +346,10 @@ def get_bip9_status(node, key):\n     info = node.getblockchaininfo()\n     return info['softforks'][key]['bip9']\n \n+def softfork_active(node, key):\n+    \"\"\"Return whether a softfork is active.\"\"\"\n+    return node.getblockchaininfo()['softforks'][key]['active']\n+\n def set_node_times(nodes, t):\n     for node in nodes:\n         node.setmocktime(t)"
      }
    ]
  },
  {
    "sha": "ff98898042d8770bd87b508ee72bddea72fc36ee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjk4ODk4MDQyZDg3NzBiZDg3YjUwOGVlNzJiZGRlYTcyZmMzNmVl",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2017-09-30T17:08:22Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-06-12T20:03:25Z"
      },
      "message": "[Consensus] Bury segwit deployment\n\nHardcode segwit deployment height to 481824 for mainnet.",
      "tree": {
        "sha": "4479c916ab98b6a49fb7c44fab6e44bc3da79fa2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4479c916ab98b6a49fb7c44fab6e44bc3da79fa2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff98898042d8770bd87b508ee72bddea72fc36ee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff98898042d8770bd87b508ee72bddea72fc36ee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff98898042d8770bd87b508ee72bddea72fc36ee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff98898042d8770bd87b508ee72bddea72fc36ee/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c2029c2cc375d51c1abb0f80032895a20887650c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2029c2cc375d51c1abb0f80032895a20887650c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c2029c2cc375d51c1abb0f80032895a20887650c"
      }
    ],
    "stats": {
      "total": 182,
      "additions": 74,
      "deletions": 108
    },
    "files": [
      {
        "sha": "517d8d482861c552183097b75db3f5ea8f76fc68",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff98898042d8770bd87b508ee72bddea72fc36ee/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff98898042d8770bd87b508ee72bddea72fc36ee/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=ff98898042d8770bd87b508ee72bddea72fc36ee",
        "patch": "@@ -59,6 +59,11 @@ void CChainParams::UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64\n     consensus.vDeployments[d].nTimeout = nTimeout;\n }\n \n+void CChainParams::UpdateSegwitHeight(const int height)\n+{\n+    consensus.SegwitHeight = height;\n+}\n+\n /**\n  * Main network\n  */\n@@ -81,6 +86,7 @@ class CMainParams : public CChainParams {\n         consensus.BIP65Height = 388381; // 000000000000000004c2b624ed5d7756c508d90fd0da2c7c679febfa6c4735f0\n         consensus.BIP66Height = 363725; // 00000000000000000379eaa19dce8c9b722d46ae6a57c2f1a988119488b50931\n         consensus.CSVHeight = 419328; // 000000000000000004a1b34462cb8aeebd5799177f7a29cf28f2d1961716b5b5\n+        consensus.SegwitHeight = 481824; // 0000000000000000001c8018d9cb3b742ef25114f27563e3fc4a1902167f9893\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -92,11 +98,6 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n \n-        // Deployment of SegWit (BIP141, BIP143, and BIP147)\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 1479168000; // November 15th, 2016.\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1510704000; // November 15th, 2017.\n-\n         // The best chain should have at least this much work.\n         consensus.nMinimumChainWork = uint256S(\"0x000000000000000000000000000000000000000000f91c579d57cad4bc5278cc\");\n \n@@ -192,6 +193,7 @@ class CTestNetParams : public CChainParams {\n         consensus.BIP65Height = 581885; // 00000000007f6655f22f98e72ed80d8b06dc761d5da09df0fa1dc4be4f861eb6\n         consensus.BIP66Height = 330776; // 000000002104c8c45e99a8853285a3b592602a3ccde2b832481da85e9e4ba182\n         consensus.CSVHeight = 770112; // 00000000025e930139bac5c6c31a403776da130831ab85be56578f3fa75369bb\n+        consensus.SegwitHeight = 834624; // 00000000002b980fcd729daaa248fd9316a5200e9b367f4ff2c42453e84201ca\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -203,11 +205,6 @@ class CTestNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n \n-        // Deployment of SegWit (BIP141, BIP143, and BIP147)\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 1462060800; // May 1st 2016\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1493596800; // May 1st 2017\n-\n         // The best chain should have at least this much work.\n         consensus.nMinimumChainWork = uint256S(\"0x00000000000000000000000000000000000000000000002830dab7f76dbb7d63\");\n \n@@ -281,6 +278,7 @@ class CRegTestParams : public CChainParams {\n         consensus.BIP65Height = 1351; // BIP65 activated on regtest (Used in rpc activation tests)\n         consensus.BIP66Height = 1251; // BIP66 activated on regtest (Used in rpc activation tests)\n         consensus.CSVHeight = 432; // CSV activated on regtest (Used in rpc activation tests)\n+        consensus.SegwitHeight = 0; // SEGWIT is always activated on regtest unless overridden\n         consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -291,9 +289,6 @@ class CRegTestParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n \n         // The best chain should have at least this much work.\n         consensus.nMinimumChainWork = uint256S(\"0x00\");\n@@ -373,3 +368,8 @@ void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime,\n {\n     globalChainParams->UpdateVersionBitsParameters(d, nStartTime, nTimeout);\n }\n+\n+void UpdateSegwitHeight(const int height)\n+{\n+    globalChainParams->UpdateSegwitHeight(height);\n+}"
      },
      {
        "sha": "a8800d17a866353ff8af4bf8093c78dacf22dee1",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff98898042d8770bd87b508ee72bddea72fc36ee/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff98898042d8770bd87b508ee72bddea72fc36ee/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=ff98898042d8770bd87b508ee72bddea72fc36ee",
        "patch": "@@ -81,6 +81,7 @@ class CChainParams\n     const CCheckpointData& Checkpoints() const { return checkpointData; }\n     const ChainTxData& TxData() const { return chainTxData; }\n     void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout);\n+    void UpdateSegwitHeight(const int height);\n protected:\n     CChainParams() {}\n \n@@ -126,4 +127,9 @@ void SelectParams(const std::string& chain);\n  */\n void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout);\n \n+/**\n+ * Allows modifying the activation height of segwit in regtest.\n+ */\n+void UpdateSegwitHeight(const int height);\n+\n #endif // BITCOIN_CHAINPARAMS_H"
      },
      {
        "sha": "69fb627a462775fe32e9b53e341ebdc21cfdbe69",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff98898042d8770bd87b508ee72bddea72fc36ee/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff98898042d8770bd87b508ee72bddea72fc36ee/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=ff98898042d8770bd87b508ee72bddea72fc36ee",
        "patch": "@@ -16,7 +16,6 @@ namespace Consensus {\n enum DeploymentPos\n {\n     DEPLOYMENT_TESTDUMMY,\n-    DEPLOYMENT_SEGWIT, // Deployment of BIP141, BIP143, and BIP147.\n     // NOTE: Also add new deployments to VersionBitsDeploymentInfo in versionbits.cpp\n     MAX_VERSION_BITS_DEPLOYMENTS\n };\n@@ -59,6 +58,8 @@ struct Params {\n     int BIP66Height;\n     /** Block height at which CSV (BIP68, BIP112 and BIP113) becomes active */\n     int CSVHeight;\n+    /** Block height at which Segwit (BIP141, BIP143 and BIP147) becomes active */\n+    int SegwitHeight;\n     /**\n      * Minimum blocks including miner confirmation of the total of 2016 blocks in a retargeting period,\n      * (nPowTargetTimespan / nPowTargetSpacing) which is also used for BIP9 deployments."
      },
      {
        "sha": "2fe1e303c24f2bc6b3cb7f9702a43caae9e71875",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 4,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff98898042d8770bd87b508ee72bddea72fc36ee/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff98898042d8770bd87b508ee72bddea72fc36ee/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ff98898042d8770bd87b508ee72bddea72fc36ee",
        "patch": "@@ -464,6 +464,7 @@ void SetupServerArgs()\n         CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)), false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-printpriority\", strprintf(\"Log transaction fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-printtoconsole\", \"Send trace/debug info to console instead of debug.log file\", false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-segwitheight=<n>\", \"Set the activation height of segwit. -1 to disable. (regtest-only)\", false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-uacomment=<cmt>\", \"Append comment to the user agent string\", false, OptionsCategory::DEBUG_TEST);\n \n@@ -1168,6 +1169,21 @@ bool AppInitParameterInteraction()\n             }\n         }\n     }\n+\n+    if (gArgs.IsArgSet(\"-segwitheight\")) {\n+        if (!chainparams.MineBlocksOnDemand()) {\n+            return InitError(\"Segwit activation parameters may only be overridden on regtest.\");\n+        }\n+        int64_t height = gArgs.GetArg(\"-segwitheight\", chainparams.GetConsensus().SegwitHeight);\n+        if (height < -1 || height >= std::numeric_limits<int>::max()) {\n+            return InitError(strprintf(\"Activation height %ld for segwit is out of valid range. Use -1 to disable segwit.\", height));\n+        }\n+        else if (height == -1) {\n+            LogPrintf(\"Segwit disabled for testing\\n\");\n+            height = std::numeric_limits<int>::max();\n+        }\n+        UpdateSegwitHeight(static_cast<int>(height));\n+    }\n     return true;\n }\n \n@@ -1626,10 +1642,8 @@ bool AppInitMain()\n         }\n     }\n \n-    if (chainparams.GetConsensus().vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout != 0) {\n-        // Only advertise witness capabilities if they have a reasonable start time.\n-        // This allows us to have the code merged without a defined softfork, by setting its\n-        // end time to 0.\n+    if (chainparams.GetConsensus().SegwitHeight != std::numeric_limits<int>::max()) {\n+        // Advertise witness capabilities.\n         // Note that setting NODE_WITNESS is never required: the only downside from not\n         // doing so is that after activation, no upgraded nodes will fetch from you.\n         nLocalServices = ServiceFlags(nLocalServices | NODE_WITNESS);"
      },
      {
        "sha": "81cfbf71b508c798a310d73943fa9f9b4a6790b2",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff98898042d8770bd87b508ee72bddea72fc36ee/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff98898042d8770bd87b508ee72bddea72fc36ee/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=ff98898042d8770bd87b508ee72bddea72fc36ee",
        "patch": "@@ -1251,7 +1251,7 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     BuriedForkDescPushBack(softforks, \"bip66\", consensusParams.BIP66Height);\n     BuriedForkDescPushBack(softforks, \"bip65\", consensusParams.BIP65Height);\n     BuriedForkDescPushBack(softforks, \"csv\", consensusParams.CSVHeight);\n-    BIP9SoftForkDescPushBack(softforks, \"segwit\", consensusParams, Consensus::DEPLOYMENT_SEGWIT);\n+    BuriedForkDescPushBack(softforks, \"segwit\", consensusParams.SegwitHeight);\n     BIP9SoftForkDescPushBack(softforks, \"testdummy\", consensusParams, Consensus::DEPLOYMENT_TESTDUMMY);\n     obj.pushKV(\"softforks\",             softforks);\n "
      },
      {
        "sha": "d3ff7247dd20149c7df5db57553db9c7490e6ccc",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff98898042d8770bd87b508ee72bddea72fc36ee/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff98898042d8770bd87b508ee72bddea72fc36ee/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=ff98898042d8770bd87b508ee72bddea72fc36ee",
        "patch": "@@ -490,11 +490,10 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n         // TODO: Maybe recheck connections/IBD and (if something wrong) send an expires-immediately template to stop miners?\n     }\n \n-    const struct VBDeploymentInfo& segwit_info = VersionBitsDeploymentInfo[Consensus::DEPLOYMENT_SEGWIT];\n     // If the caller is indicating segwit support, then allow CreateNewBlock()\n     // to select witness transactions, after segwit activates (otherwise\n     // don't).\n-    bool fSupportsSegwit = setClientRules.find(segwit_info.name) != setClientRules.end();\n+    bool fSupportsSegwit = setClientRules.find(\"segwit\") != setClientRules.end();\n \n     // Update block\n     static CBlockIndex* pindexPrev;\n@@ -534,7 +533,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n     pblock->nNonce = 0;\n \n     // NOTE: If at some point we support pre-segwit miners post-segwit-activation, this needs to take segwit support into consideration\n-    const bool fPreSegWit = (ThresholdState::ACTIVE != VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT, versionbitscache));\n+    const bool fPreSegWit = (pindexPrev->nHeight + 1 < consensusParams.SegwitHeight);\n \n     UniValue aCaps(UniValue::VARR); aCaps.push_back(\"proposal\");\n "
      },
      {
        "sha": "0a86341ff783802c9dd2ae54b9a9cddd88ddc303",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff98898042d8770bd87b508ee72bddea72fc36ee/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff98898042d8770bd87b508ee72bddea72fc36ee/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=ff98898042d8770bd87b508ee72bddea72fc36ee",
        "patch": "@@ -119,9 +119,7 @@ TestingSetup::~TestingSetup()\n \n TestChain100Setup::TestChain100Setup() : TestingSetup(CBaseChainParams::REGTEST)\n {\n-    // CreateAndProcessBlock() does not support building SegWit blocks, so don't activate in these tests.\n-    // TODO: fix the code to support SegWit blocks.\n-    UpdateVersionBitsParameters(Consensus::DEPLOYMENT_SEGWIT, 0, Consensus::BIP9Deployment::NO_TIMEOUT);\n+    UpdateSegwitHeight(432);\n     // Generate a 100-block chain:\n     coinbaseKey.MakeNewKey(true);\n     CScript scriptPubKey = CScript() <<  ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;"
      },
      {
        "sha": "8cacfd67d9af85c8449c15d0f83004b679a0b29d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff98898042d8770bd87b508ee72bddea72fc36ee/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff98898042d8770bd87b508ee72bddea72fc36ee/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ff98898042d8770bd87b508ee72bddea72fc36ee",
        "patch": "@@ -1758,7 +1758,7 @@ static ThresholdConditionCache warningcache[VERSIONBITS_NUM_BITS];\n // environment. See test/functional/p2p-segwit.py.\n static bool IsScriptWitnessEnabled(const Consensus::Params& params)\n {\n-    return params.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout != 0;\n+    return params.SegwitHeight != std::numeric_limits<int>::max();\n }\n \n static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& consensusparams) {\n@@ -3160,14 +3160,14 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n \n bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n {\n-    LOCK(cs_main);\n-    return (VersionBitsState(pindexPrev, params, Consensus::DEPLOYMENT_SEGWIT, versionbitscache) == ThresholdState::ACTIVE);\n+    int height = pindexPrev == nullptr ? 0 : pindexPrev->nHeight + 1;\n+    return (height >= params.SegwitHeight);\n }\n \n bool IsNullDummyEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n {\n     LOCK(cs_main);\n-    return (VersionBitsState(pindexPrev, params, Consensus::DEPLOYMENT_SEGWIT, versionbitscache) == ThresholdState::ACTIVE);\n+    return (pindexPrev->nHeight + 1 >= params.SegwitHeight);\n }\n \n // Compute at which vout of the block's coinbase transaction the witness\n@@ -3202,7 +3202,7 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n     std::vector<unsigned char> commitment;\n     int commitpos = GetWitnessCommitmentIndex(block);\n     std::vector<unsigned char> ret(32, 0x00);\n-    if (consensusParams.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout != 0) {\n+    if (consensusParams.SegwitHeight != std::numeric_limits<int>::max()) {\n         if (commitpos == -1) {\n             uint256 witnessroot = BlockWitnessMerkleRoot(block, nullptr);\n             CHash256().Write(witnessroot.begin(), 32).Write(ret.data(), 32).Finalize(witnessroot.begin());\n@@ -3320,7 +3320,7 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n     //   {0xaa, 0x21, 0xa9, 0xed}, and the following 32 bytes are SHA256^2(witness root, witness reserved value). In case there are\n     //   multiple, the last one is used.\n     bool fHaveWitness = false;\n-    if (VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT, versionbitscache) == ThresholdState::ACTIVE) {\n+    if (nHeight >= consensusParams.SegwitHeight) {\n         int commitpos = GetWitnessCommitmentIndex(block);\n         if (commitpos != -1) {\n             bool malleated = false;"
      },
      {
        "sha": "f899efa8448056d17656da453331a0af0e24ab0d",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff98898042d8770bd87b508ee72bddea72fc36ee/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff98898042d8770bd87b508ee72bddea72fc36ee/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=ff98898042d8770bd87b508ee72bddea72fc36ee",
        "patch": "@@ -10,10 +10,6 @@ const struct VBDeploymentInfo VersionBitsDeploymentInfo[Consensus::MAX_VERSION_B\n         /*.name =*/ \"testdummy\",\n         /*.gbt_force =*/ true,\n     },\n-    {\n-        /*.name =*/ \"segwit\",\n-        /*.gbt_force =*/ true,\n-    }\n };\n \n ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const"
      },
      {
        "sha": "484f21ed3d259880da08a8795fb107ae217e14fe",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff98898042d8770bd87b508ee72bddea72fc36ee/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff98898042d8770bd87b508ee72bddea72fc36ee/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=ff98898042d8770bd87b508ee72bddea72fc36ee",
        "patch": "@@ -42,7 +42,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         # This script tests NULLDUMMY activation, which is part of the 'segwit' deployment, so we go through\n         # normal segwit activation here (and don't use the default always-on behaviour).\n-        self.extra_args = [['-whitelist=127.0.0.1', '-vbparams=segwit:0:999999999999', '-addresstype=legacy', \"-deprecatedrpc=addwitnessaddress\"]]\n+        self.extra_args = [['-whitelist=127.0.0.1', '-segwitheight=432', '-addresstype=legacy', \"-deprecatedrpc=addwitnessaddress\"]]\n \n     def run_test(self):\n         self.address = self.nodes[0].getnewaddress()"
      },
      {
        "sha": "8473bacffcdb213bacad2aae68bcb3f05c953182",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff98898042d8770bd87b508ee72bddea72fc36ee/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff98898042d8770bd87b508ee72bddea72fc36ee/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=ff98898042d8770bd87b508ee72bddea72fc36ee",
        "patch": "@@ -41,10 +41,10 @@ class SegWitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n-        # This test tests SegWit both pre and post-activation, so use the normal BIP9 activation.\n-        self.extra_args = [[\"-rpcserialversion=0\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"],\n-                           [\"-blockversion=4\", \"-promiscuousmempoolflags=517\", \"-rpcserialversion=1\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"],\n-                           [\"-blockversion=536870915\", \"-promiscuousmempoolflags=517\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"]]\n+        # This test tests SegWit both pre and post-activation.\n+        self.extra_args = [[\"-rpcserialversion=0\", \"-segwitheight=432\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"],\n+                           [\"-blockversion=4\", \"-promiscuousmempoolflags=517\", \"-rpcserialversion=1\", \"-segwitheight=432\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"],\n+                           [\"-blockversion=536870915\", \"-promiscuousmempoolflags=517\", \"-segwitheight=432\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"]]\n \n     def setup_network(self):\n         super().setup_network()"
      },
      {
        "sha": "18a64b4601878cd27b4b33a6cf3009cf8323769b",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff98898042d8770bd87b508ee72bddea72fc36ee/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff98898042d8770bd87b508ee72bddea72fc36ee/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=ff98898042d8770bd87b508ee72bddea72fc36ee",
        "patch": "@@ -94,9 +94,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         # Node0 = pre-segwit, node1 = segwit-aware\n         self.num_nodes = 2\n-        # This test was written assuming SegWit is activated using BIP9 at height 432 (3x confirmation window).\n+        # This test was written assuming Segwit activates at height 432 (3x confirmation window).\n         # TODO: Rewrite this test to support SegWit being always active.\n-        self.extra_args = [[\"-vbparams=segwit:0:0\"], [\"-vbparams=segwit:0:999999999999\", \"-txindex\", \"-deprecatedrpc=addwitnessaddress\"]]\n+        self.extra_args = [[\"-segwitheight=-1\"], [\"-segwitheight=432\", \"-txindex\", \"-deprecatedrpc=addwitnessaddress\"]]\n         self.utxos = []\n \n     def build_block_on_tip(self, node, segwit=False):\n@@ -679,7 +679,7 @@ def test_compactblocks_not_at_tip(self, node, test_node):\n \n     def activate_segwit(self, node):\n         node.generate(144*3)\n-        assert_equal(get_bip9_status(node, \"segwit\")[\"status\"], 'active')\n+        assert softfork_active(node, \"segwit\")\n \n     def test_end_to_end_block_relay(self, node, listeners):\n         utxo = self.utxos.pop(0)"
      },
      {
        "sha": "fa29d44ee9069c4a3f340638fe87fdc55d7144a5",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 17,
        "deletions": 61,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff98898042d8770bd87b508ee72bddea72fc36ee/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff98898042d8770bd87b508ee72bddea72fc36ee/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=ff98898042d8770bd87b508ee72bddea72fc36ee",
        "patch": "@@ -22,6 +22,7 @@\n \n MAX_SIGOP_COST = 80000\n \n+SEGWIT_HEIGHT = 120\n \n # Calculate the virtual size of a witness block:\n # (base + witness/4)\n@@ -127,8 +128,8 @@ class SegWitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n-        # This test tests SegWit both pre and post-activation, so use the normal BIP9 activation.\n-        self.extra_args = [[\"-whitelist=127.0.0.1\", \"-vbparams=segwit:0:999999999999\"], [\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\", \"-vbparams=segwit:0:999999999999\"], [\"-whitelist=127.0.0.1\", \"-vbparams=segwit:0:0\"]]\n+        # This test tests SegWit both pre and post-activation.\n+        self.extra_args = [[\"-whitelist=127.0.0.1\", \"-segwitheight={}\".format(SEGWIT_HEIGHT)], [\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\", \"-segwitheight={}\".format(SEGWIT_HEIGHT)], [\"-whitelist=127.0.0.1\", \"-segwitheight=-1\"]]\n \n     def setup_network(self):\n         self.setup_nodes()\n@@ -198,7 +199,7 @@ def test_unnecessary_witness_before_segwit_activation(self):\n         # For now, rely on earlier tests to have created at least one utxo for\n         # us to use\n         assert(len(self.utxo) > 0)\n-        assert(get_bip9_status(self.nodes[0], 'segwit')['status'] != 'active')\n+        assert not softfork_active(self.nodes[0], 'segwit')\n \n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n@@ -309,42 +310,14 @@ def test_v0_outputs_arent_spendable(self):\n         self.utxo.pop(0)\n         self.utxo.append(UTXO(txid, 2, value))\n \n-    # Mine enough blocks for segwit's vb state to be 'started'.\n-    def advance_to_segwit_started(self):\n-        height = self.nodes[0].getblockcount()\n-        # Will need to rewrite the tests here if we are past the first period\n-        assert(height < VB_PERIOD - 1)\n-        # Genesis block is 'defined'.\n-        assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'defined')\n-        # Advance to end of period, status should now be 'started'\n-        self.nodes[0].generate(VB_PERIOD-height-1)\n-        assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'started')\n-\n-    # Mine enough blocks to lock in segwit, but don't activate.\n-    # TODO: we could verify that lockin only happens at the right threshold of\n-    # signalling blocks, rather than just at the right period boundary.\n-    def advance_to_segwit_lockin(self):\n-        height = self.nodes[0].getblockcount()\n-        assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'started')\n-        # Advance to end of period, and verify lock-in happens at the end\n-        self.nodes[0].generate(VB_PERIOD-1)\n-        height = self.nodes[0].getblockcount()\n-        assert((height % VB_PERIOD) == VB_PERIOD - 2)\n-        assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'started')\n-        self.nodes[0].generate(1)\n-        assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'locked_in')\n-\n-\n     # Mine enough blocks to activate segwit.\n-    # TODO: we could verify that activation only happens at the right threshold\n-    # of signalling blocks, rather than just at the right period boundary.\n     def advance_to_segwit_active(self):\n-        assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'locked_in')\n+        assert not softfork_active(self.nodes[0], 'segwit')\n         height = self.nodes[0].getblockcount()\n-        self.nodes[0].generate(VB_PERIOD - (height%VB_PERIOD) - 2)\n-        assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'locked_in')\n+        self.nodes[0].generate(SEGWIT_HEIGHT - height - 2)\n+        assert not softfork_active(self.nodes[0], 'segwit')\n         self.nodes[0].generate(1)\n-        assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'active')\n+        assert softfork_active(self.nodes[0], 'segwit')\n \n \n     # This test can only be run after segwit has activated\n@@ -1539,13 +1512,13 @@ def test_upgrade_after_activation(self, node_id):\n \n         # Restart with the new binary\n         self.stop_node(node_id)\n-        self.start_node(node_id, extra_args=[\"-vbparams=segwit:0:999999999999\"])\n+        self.start_node(node_id, extra_args=[\"-segwitheight={}\".format(SEGWIT_HEIGHT)])\n         connect_nodes(self.nodes[0], node_id)\n \n         sync_blocks(self.nodes)\n \n         # Make sure that this peer thinks segwit has activated.\n-        assert(get_bip9_status(self.nodes[node_id], 'segwit')['status'] == \"active\")\n+        assert softfork_active(self.nodes[0], 'segwit')\n \n         # Make sure this peer's blocks match those of node0.\n         height = self.nodes[node_id].getblockcount()\n@@ -1664,10 +1637,6 @@ def test_getblocktemplate_before_lockin(self):\n         # Node0 is segwit aware, node2 is not.\n         for node in [self.nodes[0], self.nodes[2]]:\n             gbt_results = node.getblocktemplate()\n-            block_version = gbt_results['version']\n-            # If we're not indicating segwit support, we will still be\n-            # signalling for segwit activation.\n-            assert_equal((block_version & (1 << VB_WITNESS_BIT) != 0), node == self.nodes[0])\n             # If we don't specify the segwit rule, then we won't get a default\n             # commitment.\n             assert('default_witness_commitment' not in gbt_results)\n@@ -1683,16 +1652,12 @@ def test_getblocktemplate_before_lockin(self):\n \n         for node in [self.nodes[0], self.nodes[2]]:\n             gbt_results = node.getblocktemplate({\"rules\" : [\"segwit\"]})\n-            block_version = gbt_results['version']\n             if node == self.nodes[2]:\n                 # If this is a non-segwit node, we should still not get a witness\n-                # commitment, nor a version bit signalling segwit.\n-                assert_equal(block_version & (1 << VB_WITNESS_BIT), 0)\n+                # commitment.\n                 assert('default_witness_commitment' not in gbt_results)\n             else:\n-                # For segwit-aware nodes, check the version bit and the witness\n-                # commitment are correct.\n-                assert(block_version & (1 << VB_WITNESS_BIT) != 0)\n+                # For segwit-aware nodes, check the witness commitment is correct.\n                 assert('default_witness_commitment' in gbt_results)\n                 witness_commitment = gbt_results['default_witness_commitment']\n \n@@ -1706,6 +1671,10 @@ def test_getblocktemplate_before_lockin(self):\n         self.nodes[0].setmocktime(0)\n         self.nodes[2].setmocktime(0)\n \n+        # Mine a block to clear the mempool\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)\n+\n     # Uncompressed pubkeys are no longer supported in default relay policy,\n     # but (for now) are still valid in blocks.\n     def test_uncompressed_pubkey(self):\n@@ -1982,26 +1951,13 @@ def run_test(self):\n         # Test logic begins here\n         self.test_node.wait_for_verack()\n \n-        self.log.info(\"Starting tests before segwit lock in:\")\n+        self.log.info(\"Starting tests before segwit activation\")\n \n         self.test_witness_services() # Verifies NODE_WITNESS\n         self.test_non_witness_transaction() # non-witness tx's are accepted\n-        self.test_unnecessary_witness_before_segwit_activation()\n         self.test_v0_outputs_arent_spendable()\n         self.test_block_relay(segwit_activated=False)\n-\n-        # Advance to segwit being 'started'\n-        self.advance_to_segwit_started()\n-        sync_blocks(self.nodes)\n         self.test_getblocktemplate_before_lockin()\n-\n-        sync_blocks(self.nodes)\n-\n-        # At lockin, nothing should change.\n-        self.log.info(\"Testing behavior post lockin, pre-activation\")\n-        self.advance_to_segwit_lockin()\n-\n-        # Retest unnecessary witnesses\n         self.test_unnecessary_witness_before_segwit_activation()\n         self.test_witness_tx_relay_before_segwit_activation()\n         self.test_block_relay(segwit_activated=False)"
      },
      {
        "sha": "9350acf36afec6e2388d62e913316b0504c8acb5",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff98898042d8770bd87b508ee72bddea72fc36ee/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff98898042d8770bd87b508ee72bddea72fc36ee/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=ff98898042d8770bd87b508ee72bddea72fc36ee",
        "patch": "@@ -342,10 +342,6 @@ def delete_cookie_file(datadir):\n         logger.debug(\"Deleting leftover cookie file\")\n         os.remove(os.path.join(datadir, \"regtest\", \".cookie\"))\n \n-def get_bip9_status(node, key):\n-    info = node.getblockchaininfo()\n-    return info['softforks'][key]['bip9']\n-\n def softfork_active(node, key):\n     \"\"\"Return whether a softfork is active.\"\"\"\n     return node.getblockchaininfo()['softforks'][key]['active']"
      }
    ]
  },
  {
    "sha": "ab740a0476de9f0f83415637f60f82fd2699d48e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYjc0MGEwNDc2ZGU5ZjBmODM0MTU2MzdmNjBmODJmZDI2OTlkNDhl",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-02-13T14:35:22Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-06-12T20:03:25Z"
      },
      "message": "[tests] Add coverage for the content of getblockchaininfo.softforks",
      "tree": {
        "sha": "7905f5d9806ce1c6e713c8c4df76a7178c029e68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7905f5d9806ce1c6e713c8c4df76a7178c029e68"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab740a0476de9f0f83415637f60f82fd2699d48e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab740a0476de9f0f83415637f60f82fd2699d48e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ab740a0476de9f0f83415637f60f82fd2699d48e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab740a0476de9f0f83415637f60f82fd2699d48e/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff98898042d8770bd87b508ee72bddea72fc36ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff98898042d8770bd87b508ee72bddea72fc36ee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff98898042d8770bd87b508ee72bddea72fc36ee"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 25,
      "deletions": 0
    },
    "files": [
      {
        "sha": "10f7a21a25f0f39a644ecf3c5949e9a86bf01666",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab740a0476de9f0f83415637f60f82fd2699d48e/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab740a0476de9f0f83415637f60f82fd2699d48e/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=ab740a0476de9f0f83415637f60f82fd2699d48e",
        "patch": "@@ -111,6 +111,31 @@ def _test_getblockchaininfo(self):\n         assert_equal(res['prune_target_size'], 576716800)\n         assert_greater_than(res['size_on_disk'], 0)\n \n+        assert_equal(res['softforks'], {\n+            'bip34': {'type': 'buried', 'active': False, 'height': 100000000},\n+            'bip66': {'type': 'buried', 'active': False, 'height': 1251},\n+            'bip65': {'type': 'buried', 'active': False, 'height': 1351},\n+            'csv': {'type': 'buried', 'active': False, 'height': 432},\n+            'segwit': {'type': 'buried', 'active': True, 'height': 0},\n+            'testdummy': {\n+                'type': 'bip9',\n+                'bip9': {\n+                    'status': 'started',\n+                    'bit': 28,\n+                    'startTime': 0,\n+                    'timeout': 9223372036854775807,\n+                    'since': 144,\n+                    'statistics': {\n+                        'period': 144,\n+                        'threshold': 108,\n+                        'elapsed': 57,\n+                        'count': 57,\n+                        'possible': True,\n+                    },\n+                },\n+                'active': False}\n+        })\n+\n     def _test_getchaintxstats(self):\n         self.log.info(\"Test getchaintxstats\")\n "
      }
    ]
  }
]