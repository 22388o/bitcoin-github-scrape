DrahtBot,2021-07-02 01:41:05,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #22490 by mzumsande\n* #21528 by amitiuttarwar\n\nIf you consider this pull request important, please also help to review ",https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-872651861,872651861,
prayank23,2021-07-02 03:08:32,"> There are measures to limit the influence attackers can have on the addrman database (bucket restrictions based on IPs), but still - **there is no need to permit them to feed us addresses at a rate that's orders of magnitude larger than what is common on the network today**, especially as it will cause us to spam our peers too.\n\nConcept ACK",https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-872679319,872679319,
vasild,2021-07-02 08:02:16,Concept ACK,https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-872802081,872802081,
prayank23,2021-07-02 17:04:11,"Compiled the branch but don't want to run [test/functional/p2p_addr_relay.py](https://github.com/sipa/bitcoin/blob/202106_rate_limit_addr/test/functional/p2p_addr_relay.py). I want to test it manually on testnet.\n\n1. Can we do `send_and_ping` used in the test with some RPC?\n2. How can we try this on testnet? I am assuming: Compile branch, run two nodes on testnet, use `addnode`, spam other n",https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-873138272,873138272,
sipa,2021-07-02 17:13:26,"@prayank23 No, it's testing a P2P aspect, you can't do that through RPC. There is the `addpeeraddress` RPC for injecting new addresses, but it doesn't have (or need) the same rate limiting.",https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-873143328,873143328,
mzumsande,2021-07-02 19:11:30,"Concept ACK to introducing a rate limiting mechanism for addr relay, some general questions about the approach:\n\nThe approach of a constant counter increase doesn't scale with the total number of self-announcing nodes in the network, while addr traffic to a node probably does (or at least should?). Did you consider the possibility of an adaptive rate limiting approach (e.g. let the token count",https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-873208395,873208395,
sipa,2021-07-02 19:26:18,"@mzumsande Those are reasonable points. My thinking is mostly that some limit here is necessary, and if this appears to be too restrictive as the network or other aspects of addr relay change, they can be revisited - those are unlikely to cause dramatic changes in short periods of time. I think an adaptive limit is too easily exploited.",https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-873214929,873214929,
amitiuttarwar,2021-07-03 19:00:59,So sorry for that accidental close / open ðŸ˜³,https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-873454941,873454941,
naumenkogs,2021-07-07 11:46:55,"I have 2 conceptual questions to this PR:\n\n1. How does it work against the ""bottlenecking problem"" (something we saw in the dandelion/rate-limiting discussion too)?\nLet's say your reachable node has 10 outbound conns, and couple inbounds.\nAn attacker makes 100 connections to your node, and constantly spends all tokens by transmitting more-than-average addrs. Now, when your peers receive an",https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-875536479,875536479,
glozow,2021-07-07 13:13:55,"re ACK dc8a1863f30b5944490cdbaa3271afbf8cd6da9a via `git range-diff dade562...dc8a186`\n\n- New constant `MAX_ADDR_PROCESSING_TOKEN_BUCKET` \n- Comments about exceeding [soft] limit when incrementing for GETADDR\n- const `time_diff` and `increment`\n- `break` out of addrs loop when tokens run out\n- rand ranges {1,255} + refactors in test",https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-875592657,875592657,
sipa,2021-07-07 19:21:27,"@vasild\n\nI think your logging exaggerates the effect, ecause it only prints #addr/time for individual messages, ignoring that the token bucket can accumulate across multiple messages.\n\nOn my own nodes I do see occasional rate limiting, but they're all (a) very early in a connection's lifetime or (b) from very spammy nodes (with ""bitnodes"" or ""multiven"" in their user agent).\n\n@naumenkog",https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-875868090,875868090,
achow101,2021-07-07 19:56:46,re-ACK 8b60d6f538abbee5ea3ef6b49968f6afd2581877,https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-875889604,875889604,
theStack,2021-07-08 00:16:08,Concept ACK,https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-876018530,876018530,
vasild,2021-07-08 12:01:05,"> I think your logging exaggerates the effect, ecause it only prints #addr/time for individual messages...\n\nIt prints addr/time but it also prints number of addresses received (in the current addr message) and total tokens accumulated. If the former is larger than the latter, then addresses were dropped.\n\nHere is some crunching of the data:\n\nIn the first 1h after startup:\n\n6891 add",https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-876379345,876379345,
jnewbery,2021-07-08 13:52:16,"@vasild, I've dug into your logs a bit:\n\npeer | SUM of addresses received | PERCENTAGE of addresses received | SUM of addresses dropped | PERCENTAGE of addresses dropped\n-- | -- | -- | -- | --\n127.0.0.1 | 86 | 1.86% | 0 | 0.00%\n140.143.155.41 | 61 | 1.32% | 2 | 0.10%\n168.119.79.89 | 366 | 7.93% | 163 | 7.79%\n188.166.69.73 | 25 | 0.54% | 1 | 0.05%\n2a01:4f8:140:948b::2 | 173 | 3.75% ",https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-876457797,876457797,
jnewbery,2021-07-08 14:04:45,utACK 8b60d6f538,https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-876468394,876468394,
vasild,2021-07-08 15:37:28,"> It's probably worth checking those peers' versions/user agent strings...\n\n```sh\n$ bitcoin-cli getpeerinfo |jq 'map(select(.addr |startswith(""ppsmb5ln3rx6mfdzx2nwsleug5etsavbbzjkdealaybrh2jo2n6a.b32.i2p"") or startswith(""shh2ewyegnuwnmdse5kl5toybdvzkvk2yj4zcowz6iwhhh3ykdfa.b32.i2p"") or startswith(""168.119.79.89"") or startswith(""70.64.27.12"") or startswith(""83.150.56.145""))) |map({addr: .addr",https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-876541617,876541617,
jnewbery,2021-07-08 17:06:07,"> I am not sure how to interpret all this\n\nMe neither! Here's one example of addresses received from 70.64.27.12:\n\ntime | addresses received | tokens | rate | peer\n-- | -- | -- | -- | --\n2021-07-07T09:05:56 | 5 | 9.09188 | 0.079376 | 70.64.27.12\n2021-07-07T09:06:18 | 176 | 6.29241 | 7.99806 | 70.64.27.12\n\nThey send us an `addr` message with 5 addresses, followed 22 seconds later ",https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-876602300,876602300,
vasild,2021-07-12 16:15:40,"I updated the printout to show also the addresses being dropped and to calculate the average addr/sec for the sender from the time they connected to the time a particular `addr` message was received. Results from running it for 1h are below.\n\nTotal addresses received: 9917\nDropped addresses: 5073\n\nTotal number of peers who sent us addresses: 26\nDropped at least one address from this nu",https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-878411443,878411443,
sipa,2021-07-12 16:23:28,"@vasild Interesting. Are these by any chance onion/i2p peers? One theory could be that those peers generally are connected only/mostly to a small subset of nodes only, and thus the ""pick one or two peers to relay to"" policy results in a ""funnel"" effect for them?",https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-878417152,878417152,
vasild,2021-07-12 16:37:27,"Here are the 26 peers my node was connected to. The ones that triggered the rate limiter are marked with `*` (they are 22):\n\n```\n* 127.0.0.1\n* 140.143.155.41\n* 148.251.40.218\n* 158.69.72.5\n* 188.166.69.73\n* 2001:19f0:6000:9008:5400:ff:fe1b:164b\n* 22plzy5mqwz64iukd2hbsa5oo454iwkjko26tifi54ir4mbnpfea.b32.i2p\n  2600:1f18:41a0:d000:cba6:77c8:4429:7ea\n* 2600:1f1c:2d3:2400:4da7:c46",https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-878426183,878426183,
GeneFerneau,2021-07-12 22:27:26,Concept + review ACK [8b60d6f](https://github.com/bitcoin/bitcoin/pull/22387/commits/8b60d6f538abbee5ea3ef6b49968f6afd2581877),https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-878639355,878639355,
sipa,2021-07-12 23:31:33,"@vasild I've added a commit that adds some statistics to `getpeerinfo`. So far it does indeed seem there are addr messages being sent from seemingly-honest peers that are being rate limited by it. I'm going to keep running this on a few nodes for a while to gather more statistics, but I'm beginning to agree that the 0.1 addr/s limit may be too strict.",https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-878665937,878665937,
sipa,2021-07-13 00:38:29,"See the bitcoin-dev list mail, where there is a link to https://bitcointalk.org/index.php?topic=5348856.0.\n\nCould that be what we're seeing?",https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-878689516,878689516,
mzumsande,2021-07-13 00:53:05,"I think so too, I ran this patch last week and again today, for a few hours each. While I saw very few hits of the rate limit last week, I observed a similar pattern to @vasild's data today: Some peers send spikes of large addr messages of size 50-100, alternating with several small addrs <10. So it seems like they may have some other peer that is spamming them - not continuously but every ~3 minu",https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-878694069,878694069,
vasild,2021-07-13 17:08:52,"> I observed a similar pattern to @vasild's data today: Some peers send spikes of large addr messages of size 50-100, alternating with several small addrs <10\n\nI think it is more complicated :exploding_head:. From the log linked from https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-878411443:\n\nBelow, the numbers mean that an `addr` message with that many addresses was received. M",https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-879256798,879256798,
sipa,2021-07-14 01:08:02,"@vasild I assume that whoever is creating these spam addr messages isn't sending them directly to you, and is probably sending them in batches of 10 (because when you send more, they don't trigger relay, and thus we wouldn't be seeing them). So what you're seeing is the backscatter result of what ends up randomly relayed 1 or more steps on, split by the 1-to-2 peers selection, and merged by the m_",https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-879504816,879504816,
sipa,2021-07-15 05:40:46,"All comments addressed, I think.",https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-880411631,880411631,
naumenkogs,2021-07-15 09:20:44,ACK 56c8ca2844fecb980cfdd9a21c881ed0616890d8,https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-880538711,880538711,
jnewbery,2021-07-15 14:08:06,"ACK 56c8ca2844fecb980cfdd9a21c881ed0616890d8\n\nIf you touch this again, I suggest squashing _Add logging for rate limiting_ and _Add addr rate limiting statistics_ (the second commit completely reverts the changes of the first).\n\nI've made some improvements to the test here: https://github.com/jnewbery/bitcoin/tree/2021-07-addr-relay-test-changes that factors out a lot of duplicate code. Fe",https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-880725257,880725257,
laanwj,2021-07-15 15:37:09,"Not sure if it is related to the changes here, but I got an ~~intermittent~~ reprodicible fail in `p2p_addrv2_relay.py` locally when running with this PR on top of master (56c8ca2844fecb980cfdd9a21c881ed0616890d8).\n```\n83/213 - p2p_addrv2_relay.py failed, Duration: 8 s\n                                                                                       \nstdout:                           ",https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-880799030,880799030,
jnewbery,2021-07-15 16:54:29,"> I got an reprodicible fail in p2p_addrv2_relay.py locally when running with this PR on top of master (56c8ca2).\n\nThis is because the bitcoin core node is now shuffling the addresses before processing/relaying them, and this test depends on the exact same `addrv2` message being received by the node and relayed to another peer.\n\nThis would fix it. Sorry for the ugly python:\n\n```diff\n",https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-880860700,880860700,
sipa,2021-07-15 23:34:24,@laanwj Fixed using a variant of @jnewbery's suggestion. Also squashed in his commits for cleaning up the new tests.,https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-881074512,881074512,
jonatack,2021-07-16 11:34:18,"Here's a branch of this pull that adds the new stats to `-netinfo`, if useful to anyone for testing: https://github.com/jonatack/bitcoin/commits/netinfo-addr-statistics\n",https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-881381758,881381758,
laanwj,2021-07-19 10:41:50,ACK a4bcd687c934d47aa3922334e97e579caf5f8124,https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-882443434,882443434,
fanquake,2021-07-28 23:57:36,Backported in #22569.,https://github.com/bitcoin/bitcoin/pull/22387#issuecomment-888695939,888695939,
jnewbery,2021-07-02 10:45:40,No need for default initialization value here if this is set in the initialization list in the only ctor.,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r662921032,662921032,src/net_processing.cpp
jnewbery,2021-07-02 11:28:36,"I find this line quite difficult to parse. I think the intention is that we don't cap m_addr_token_bucket to MAX_ADDR_TO_SEND (in the case where it was incremented because we sent a getaddr). Is this easier to read:\n\n```diff\n         // Update/increment addr rate limiting bucket.\n         const auto current_time = GetTime<std::chrono::microseconds>();\n-        auto time_diff = std::max(c",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r662943964,662943964,src/net_processing.cpp
jnewbery,2021-07-02 11:29:49,I don't think this is necessary. The `add_[outbound_]p2p_connection()` methods already do a sync_with_ping.,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r662944636,662944636,test/functional/p2p_addr_relay.py
jnewbery,2021-07-02 11:31:42,Consider using the `assert_equal()`/`assert_greater_than()`/`assert_greater_than_or_equal()` helper functions (they give more helpful output if the test fails).,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r662945737,662945737,test/functional/p2p_addr_relay.py
jnewbery,2021-07-02 11:39:22,(not necessarily for this PR) should the other tests be updated to use random IP addresses? I guess you're doing this and not reusing setup_addr_msg() in case the addresses returned may result in addrman bucket collisions?,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r662949531,662949531,test/functional/p2p_addr_relay.py
jnewbery,2021-07-02 11:39:58,"```suggestion\n            assert (addr_count_3 <= addr_count_2)\n```\n\n(or better yet, use `assert_greater_than_or_equal()`)",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r662949805,662949805,test/functional/p2p_addr_relay.py
MarcoFalke,2021-07-02 13:06:55,"```suggestion\n    std::chrono::microseconds m_addr_token_timestamp{GetTime<std::chrono::microseconds>()};\n```\n\nDoes this compile? If yes, the constructor can be left untouched.",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r662999155,662999155,src/net_processing.cpp
sipa,2021-07-02 15:48:16,"I tried to reuse it, but things fail because the existing setup_addr_message are limited to 256 addresses, and when I tried to generalize it, some of the other tests started failing.",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r663105927,663105927,test/functional/p2p_addr_relay.py
sipa,2021-07-02 16:51:47,"Done, it works.",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r663139663,663139663,src/net_processing.cpp
sipa,2021-07-02 16:51:57,"Done, much better.",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r663139730,663139730,src/net_processing.cpp
sipa,2021-07-02 16:52:05,Gone.,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r663139801,663139801,test/functional/p2p_addr_relay.py
sipa,2021-07-02 16:52:11,Done.,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r663139843,663139843,test/functional/p2p_addr_relay.py
sipa,2021-07-02 16:54:48,"Or even better: `assert_equal(addr_count_2, addr_count_3)`. Done.",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r663141174,663141174,test/functional/p2p_addr_relay.py
mzumsande,2021-07-04 21:35:07,Why the condition `pfrom.addr != addr` in addition to starting with `m_addr_token_bucket{1.0}`? Shouldn't self-announcements from our peer consume a token too?,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r663559469,663559469,src/net_processing.cpp
mzumsande,2021-07-04 21:42:35,"I think that this could fail intermittently in the ""inbound"" case, where we have just 1 token. The first addr of the shuffled message consumes the token, but if `IsRoutable()` happens to be false for this random address, it won't be accepted to addrman (`CAddrMan::Add_()`), and other addrs of the message won't be either because there are no tokens left. ",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r663560244,663560244,test/functional/p2p_addr_relay.py
mzumsande,2021-07-04 21:50:31,"What is the reason for adding the `Shuffle` here, considering that the token counter grows deterministically and our peer could calculate anyway how many addrs of the packet we would process/discard if they cared to keep track of that?",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r663560937,663560937,src/net_processing.cpp
sipa,2021-07-06 04:47:18,It's a leftover from an earlier iteration where I didn't have the `m_addr_token_bucket{1.0}` initialization. I've removed it.,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r664232247,664232247,src/net_processing.cpp
sipa,2021-07-06 05:03:46,I've updated the test to generate only routable IPs.,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r664237309,664237309,test/functional/p2p_addr_relay.py
sipa,2021-07-06 05:07:27,"The idea is that if we're going to be dropping some part of incoming messages because of rate-limiting, we should do it uniformly. This isn't to stop any kind of attack, but to give slightly fairer treatment to existing nodes on the network, which don't randomize on sending (there is random replacement once the outgoing buffer hits 1000, but that is rarely if ever hit under normal network conditio",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r664238361,664238361,src/net_processing.cpp
jnewbery,2021-07-06 11:12:12,"Not being intimately familiar with the `std::chrono` library, I found this line a little difficult to parse. The `std::chrono::duration<double>` is an instantiation of `duration` with the representation set to `double` and the period set to the default ratio of `1` (i.e. one second). This line therefore initializes a `duration` object that represents seconds as doubles from the `time_diff` variabl",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r664460746,664460746,src/net_processing.cpp
jnewbery,2021-07-06 11:23:03,"It was surprising that this test needed to be updated. My understanding was that it was testing malformed p2p messages in the net layer, but it seems that various application layer errors have also been added to the test.",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r664467172,664467172,test/functional/p2p_invalid_messages.py
vasild,2021-07-06 13:14:07,Should that not be `break;`? `peer->m_addr_token_bucket` is not going to increase inside this loop.,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r664543727,664543727,src/net_processing.cpp
vasild,2021-07-06 13:18:15,"nit: this entire snippet can be inside `if (!pfrom.HasPermission(NetPermissionFlags::Addr)) {` to avoid making calculations that are not going to be used later. That may be insignificant wrt performance (the shuffle too?) and the deeper indentation may look ugly, so feel free to ignore.",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r664547038,664547038,src/net_processing.cpp
vasild,2021-07-06 13:24:37,"For bucket size we use `MAX_ADDR_TO_SEND` in the code, but they are semantically different. Maybe add new constant `ADDR_RATE_BUCKET_SIZE`? Should that be a little bit higher than `MAX_ADDR_TO_SEND`? For example:\n\n1. The peer sends us some unsolicited addr\n2. We send getaddr and fill the bucket to the max 1000\n3. We receive the unsolicited addr from 1.\n4. We receive the getaddr response ",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r664552110,664552110,src/net_processing.cpp
vasild,2021-07-06 13:25:54,This is ok as `MAX_ADDR_TO_SEND`,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r664553208,664553208,src/net_processing.cpp
vasild,2021-07-06 13:26:48,"This `MAX_ADDR_TO_SEND` is semantically the bucket size, so if a new constant is added it should be used here.",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r664553943,664553943,src/net_processing.cpp
vasild,2021-07-06 13:27:07,"This `MAX_ADDR_TO_SEND` is semantically the bucket size, so if a new constant is added it should be used here.",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r664554249,664554249,src/net_processing.cpp
vasild,2021-07-06 13:33:26,"Why the second octet in [1,254] and 3rd and 4th [2,255]?\n\n`1+randrange(1,255)` is the same as `randrange(2,256)`, why the former?",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r664559669,664559669,test/functional/p2p_addr_relay.py
vasild,2021-07-06 16:16:35,Isn't the `Advance the time by 100 seconds` test unnecessary given the `Advance the time by 1000 seconds` test? I think the latter is testing everything that the former does.,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r664699379,664699379,test/functional/p2p_addr_relay.py
jnewbery,2021-07-06 16:16:47,"You reuse this value of 10 lower down. How about saving it as a variable to remove that repetition (and also to test that the no_relay node's addr count doesn't increase):\n\n```diff\n--- a/test/functional/p2p_addr_relay.py\n+++ b/test/functional/p2p_addr_relay.py\n@@ -268,23 +268,23 @@ class AddrTest(BitcoinTestFramework):\n             # but verify that no more than 10 are processed.\n   ",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r664699518,664699518,test/functional/p2p_addr_relay.py
jnewbery,2021-07-06 16:20:02,"2 is incorrect. We increment the bucket by 1000, not set it to 1000.",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r664701781,664701781,src/net_processing.cpp
vasild,2021-07-06 16:23:24,"Maybe have just one constant in the test ""bucket size = 1000"" and derive everything from it? So that if the bucket size is changed in the future in `net_processing.cpp` this test is easier to adjust.",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r664704257,664704257,test/functional/p2p_addr_relay.py
glozow,2021-07-06 16:25:15,"In 87c8d2d072d52c79f092cc432f98c6157fe8e662\n\nThe commit message states that ""The token counter increases at a rate of 0.1 tokens per second, and will accrue up to a maximum of 1000 tokens"" but this seems a bit misleading. Since 1000 tokens are added upon sending a GETADDR, we could bump it past 1000 (I think the maximum is perhaps 1007, and 1001 seems likely). Perhaps something like ""The token",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r664705551,664705551,src/net_processing.cpp
vasild,2021-07-06 16:32:47,"Right! It is capped to `1000`, but when expecting getaddr response we just do `+= 1000` without checking. Sorry for the noise.",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r664711094,664711094,src/net_processing.cpp
glozow,2021-07-06 17:31:59,I don't understand why it should be `break` - am I missing something? There are other things happening in the loop as well,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r664750999,664750999,src/net_processing.cpp
glozow,2021-07-06 17:34:35,"```suggestion\n            const auto time_diff = std::max(current_time - peer->m_addr_token_timestamp, 0us);\n            const double increment = std::chrono::duration<double>(time_diff).count() * MAX_ADDR_RATE_PER_SECOND;\n```",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r664752631,664752631,src/net_processing.cpp
sipa,2021-07-06 22:57:35,"Indeed, a break is enough. Fixed.\n\n@glozow The loop does many things, but if if at some point the rate-limiting condition is reached, it will be reached for all further loop iterations too.",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r664927787,664927787,src/net_processing.cpp
sipa,2021-07-06 22:58:31,"No, if `pfrom.HasPermission(NetPermissionFlags::Addr)` is true, the loop still has to run - just the rate-limiting check is skipped.",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r664928077,664928077,src/net_processing.cpp
sipa,2021-07-06 23:00:03,"I've introduced a separate `MAX_ADDR_PROCESSING_TOKEN_BUCKET` constant, also initialized to 0. Also amended a few comments to be clearer about the fact that GETADDR can exceed this limit.",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r664928627,664928627,src/net_processing.cpp
sipa,2021-07-06 23:00:14,Done,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r664928716,664928716,src/net_processing.cpp
sipa,2021-07-06 23:00:24,"A typo, fixed.",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r664928779,664928779,test/functional/p2p_addr_relay.py
sipa,2021-07-06 23:06:03,I've replaced it with the helpful `CountSecondsDouble` we have in util/time.h.,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r664930730,664930730,src/net_processing.cpp
sipa,2021-07-07 01:04:01,Done.,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r664967887,664967887,src/net_processing.cpp
sipa,2021-07-07 01:37:38,Done.,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r664978068,664978068,src/net_processing.cpp
sipa,2021-07-07 01:37:59,Added a comment about this to the commit message.,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r664978166,664978166,src/net_processing.cpp
sipa,2021-07-07 01:39:59,"Perhaps, I'm not entirely sure. The issue is that the last test is a bit weak, as a ton of entries have already been added to addrman (which fills up the relevant buckets asymptotically), so not that much is expected to be added anymore. The test before happens at a point when it's somewhat less full, so it's more appropriate a place to test that not too much is being added. The value of the last ",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r664978731,664978731,test/functional/p2p_addr_relay.py
sipa,2021-07-07 01:40:44,"@jnewbery Done.\n\n@vasild It's not entirely clear how to do that sufficiently generically (we'll probably want different test cases entirely if the rate limit changes).",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r664979029,664979029,test/functional/p2p_addr_relay.py
vasild,2021-07-07 08:07:14,"> this entire snippet can be inside ...\n> ... the loop still has to run ...\n\nThe loop if after the snippet, it will run. Just to clarify:\n\n```diff\n--- i/src/net_processing.cpp\n+++ w/src/net_processing.cpp\n@@ -2790,24 +2790,28 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         // Store the new addresses\n         std::vector<CAddress> ",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r665141497,665141497,src/net_processing.cpp
vasild,2021-07-07 08:13:00,"Do you think it makes sense to log a (debug) message if this occurs? The assumption is that it will happen very rarely, if ever, so it might be of interest if it happens in order to have an idea of its frequency.",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r665145646,665145646,src/net_processing.cpp
jnewbery,2021-07-07 08:13:29,There's no need to change this comment.,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r665146003,665146003,src/net_processing.cpp
jnewbery,2021-07-07 13:35:53,It seems reasonable to print a single log in the `BCLog::NET` if an `addr` or `addrv2` p2p message has address records dropped.,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r665377495,665377495,src/net_processing.cpp
sipa,2021-07-07 18:46:28,"It does happen occasionally very early in a connection's lifetime, if an address send event happens in the first 10 seconds. A few crawlers that very actively provide addresses also trigger it sometimes. I think both of these are harmless.\n\nAdded a commit to add logging.",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r665624211,665624211,src/net_processing.cpp
achow101,2021-07-07 18:56:49,Couldn't this just be in the `if` where `rate_limiting_triggered` is being set and thus remove the need for the bool?,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r665630867,665630867,src/net_processing.cpp
achow101,2021-07-07 18:57:22,nit: use f-string instead?,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r665631239,665631239,test/functional/p2p_addr_relay.py
sipa,2021-07-07 19:11:18,Done.,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r665639769,665639769,src/net_processing.cpp
sipa,2021-07-07 19:11:55,"Good idea, done.",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r665640098,665640098,src/net_processing.cpp
sipa,2021-07-07 19:12:08,I don't find those generally more readable.,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r665640237,665640237,test/functional/p2p_addr_relay.py
mzumsande,2021-07-08 00:03:45,"nit: this comment is backwards (our node sends a GETADDR and processes the incoming addresses, not the outbound peer)",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r665780690,665780690,test/functional/p2p_addr_relay.py
naumenkogs,2021-07-08 05:34:19,"I believe this is not about  'Number of addr messages' (because one message can contain 1000 items), but about number of addr items?",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r665882202,665882202,src/net_processing.cpp
laanwj,2021-07-08 11:39:42,"It looks like the code makes sure that this number never leaves the range `0.0..MAX_ADDR_PROCESSING_TOKEN_BUCKET`, right?\n(I generally don't like using floating point for countable objects because of potential infinite loops when the value becomes too large or negative to be represented with a granularity of 1, but I think this issue is avoided)",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r666114299,666114299,src/net_processing.cpp
vasild,2021-07-08 12:09:35,"It could exceed that limit - when we send `getaddr` we increment it with `MAX_ADDR_TO_SEND` (1000) regardless of its current value. It should be ok wrt concerns about floating point, given that we send `getaddr` just once.",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r666132900,666132900,src/net_processing.cpp
jnewbery,2021-07-08 12:42:02,"> It looks like the code makes sure that this number never leaves the range 0.0..MAX_ADDR_PROCESSING_TOKEN_BUCKET, right?\n\nNot quite. `m_addr_token_bucket` may exceed `MAX_ADDR_PROCESSING_TOKEN_BUCKET` immediately after we send a `getaddr` message. I think that the theoretic maximum it can reach is 1007 (we send the `getaddr` as soon as we receive the peer's `version` message, which can be up ",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r666155905,666155905,src/net_processing.cpp
laanwj,2021-07-12 07:33:49,"Right, thanks, that's not really going to give problems.",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r667692734,667692734,src/net_processing.cpp
laanwj,2021-07-12 07:36:05,"For more complex formatting I think f-strings are more readable, because they specify the value where it is inserted, but if there is only one value, I agree that doesn't win anything.",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r667694456,667694456,test/functional/p2p_addr_relay.py
GeneFerneau,2021-07-12 22:08:50,"This could result in a very large number if `peer->m_addr_token_timestamp` is negative. Maybe a check that `peer->m_addr_token_timestamp` is positive? Probably doesn't matter with the `std::min` check below, just a thought.",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r668289378,668289378,src/net_processing.cpp
sipa,2021-07-12 22:13:23,"That variable is initialized to the current time, so it can't be negative.",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r668291499,668291499,src/net_processing.cpp
GeneFerneau,2021-07-12 22:19:18,"I was under the impression this variable is under peer (attacker) control, so could take on any value.",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r668294202,668294202,src/net_processing.cpp
sipa,2021-07-12 22:20:33,That's incorrect. It's just our local time when the m_addr_token_bucket variable was last updated.,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r668294737,668294737,src/net_processing.cpp
vasild,2021-07-13 12:52:45,"If the peer sends us an `addr` message with 50 addresses and we drop the last 30, this would cause 30 printouts to the log, which may be a bit excessive. I think it would be possible to do the counting before the loop and also make the log message a bit more useful by printing the total number of addresses in the message and the number of the dropped ones.",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r668733056,668733056,src/net_processing.cpp
vasild,2021-07-13 13:05:22,"Here we can calculate the number of to be dropped addresses and also log the message, for example:\n\n```diff\n--- i/src/net_processing.cpp\n+++ w/src/net_processing.cpp\n@@ -2796,36 +2796,46 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         // Store the new addresses\n         std::vector<CAddress> vAddrOk;\n         int64_t nNow = GetAdjuste",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r668743463,668743463,src/net_processing.cpp
jnewbery,2021-07-13 13:37:37,"This used to be a `break`, which would mean that the log is printed only once. Is there a reason that it's been reverted to `continue`?",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r668771763,668771763,src/net_processing.cpp
jnewbery,2021-07-13 14:23:23,"oh, I see it's for the new metrics.",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r668814369,668814369,src/net_processing.cpp
vasild,2021-07-14 08:04:47,"Now I see that I have messed up the order of the arguments to `LogPrint()` :facepalm:. Correction:\n\n```diff\n                 LogPrint(BCLog::NET, ""Rate limiting %u of %u addresses from a message from peer=%d%s\n\n-                         pfrom.GetId(),\n                          num_rate_limit,\n                          vAddr.size(),\n+                         pfrom.GetId(),\n        ",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r669385730,669385730,src/net_processing.cpp
vasild,2021-07-14 08:22:09,"This was `if (!peer->m_getaddr_sent) num_proc++;` in a previous incarnation and I thought it was ok. With unconditional `num_proc++`, observing addr/sec (`(addr_processed + addr_rate_limited) / connection_duration`) in order to find a better value for `MAX_ADDR_RATE_PER_SECOND` is not appropriate because the calculated addr/sec may be allowed to go higher than 0.1 without causing any rate limiting",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r669397937,669397937,src/net_processing.cpp
vasild,2021-07-14 09:18:04,"This better be outside of the `if`:\n\n```diff\n         if (peer->m_addr_token_bucket < MAX_ADDR_PROCESSING_TOKEN_BUCKET) {\n             // Don't increment bucket if it's already full\n             const auto time_diff = std::max(current_time - peer->m_addr_token_timestamp, 0us);\n             const double increment = CountSecondsDouble(time_diff) * MAX_ADDR_RATE_PER_SECOND;\n            ",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r669439983,669439983,src/net_processing.cpp
jnewbery,2021-07-14 09:29:15,"I think instead of making this calculation up here and logging, it'd be clearer just to use a counter in the loop below and then log in the same place that the statistics are updated. That way, if the logic for address processing changes, then the logging will automatically be consistent with the true values and the statistics:\n\n```diff\n             const auto time_diff = std::max(current_ti",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r669448082,669448082,src/net_processing.cpp
jnewbery,2021-07-14 09:30:01,It's generally best to avoid multiple declarations per line: https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es10-declare-one-name-only-per-declaration.,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r669448632,669448632,src/net_processing.cpp
jnewbery,2021-07-14 09:37:05,"Agree with logging the vAddr.size() as well as `num_proc`. I don't have any strong opinion about the name: `addrs_accepted` or `addrs_added` implies that the address has been added to addrman, which is not necessarily the case. `addrs_relayed` is also inaccurate since the address might not actually be relayed. `addrs_processed` seems fine to me.",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r669453482,669453482,src/net_processing.cpp
jnewbery,2021-07-14 10:23:25,"Now that you've added addr relay statistics to `getpeerinfo`, you can isolate and observe the (predictable) p2p behaviour, rather than the (stochastic) addrman effects:\n\n<details>\n<summary>Diff</summary>\n\n```diff\n@@ -244,25 +244,55 @@ class AddrTest(BitcoinTestFramework):\n             assert_equal(addr_count_0, 0)\n \n             # Send 600 addresses. For all but the block-relay-o",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r669485429,669485429,test/functional/p2p_addr_relay.py
sipa,2021-07-14 16:45:18,"@vasild I removed the ""!peer->m_getaddr_sent"" because it doesn't work reliably. If we receive a randomly relayed addr before receiving the response to GETADDR, the getaddr response will still be counted (and I see that happen fairly regularly).",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r669784245,669784245,src/net_processing.cpp
sipa,2021-07-14 19:12:40,This has been reverted by using your suggestion below.,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r669883193,669883193,src/net_processing.cpp
sipa,2021-07-14 19:12:59,"Done, and moved using @jnewbery's suggestion below.",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r669883402,669883402,src/net_processing.cpp
sipa,2021-07-14 19:13:37,That's a lot cleaner; done (and made it unconditional).,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r669883764,669883764,src/net_processing.cpp
sipa,2021-07-14 19:13:57,Added as a separate commit.,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r669883932,669883932,test/functional/p2p_addr_relay.py
sipa,2021-07-14 19:16:36,Gone.,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r669885542,669885542,src/net_processing.cpp
sipa,2021-07-14 19:16:56,Done.,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r669885704,669885704,test/functional/p2p_addr_relay.py
vasild,2021-07-15 07:48:01,"This and similar statements below can be shortened:\n```suggestion\n            assert_equal(addrs_processed_1, min(addrs, tokens))\n            assert_equal(addrs_rate_limited_1, 0 if no_relay else addrs - addrs_processed_1)\n```",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r670219126,670219126,test/functional/p2p_addr_relay.py
naumenkogs,2021-07-15 09:19:59,"nit: the name ""processed"" is confusing because from the first glance it's unclear whether it includes limited or not",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r670289045,670289045,src/net_processing.cpp
sipa,2021-07-15 23:30:40,Done.,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r670867989,670867989,test/functional/p2p_addr_relay.py
sipa,2021-07-15 23:33:32,Added more comments.,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r670868922,670868922,src/net_processing.cpp
jnewbery,2021-07-16 09:33:11,Much nicer!,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r671107215,671107215,test/functional/p2p_addrv2_relay.py
jonatack,2021-07-16 10:36:28,"a4bcd687c934d47aa3 In the five `send_addrs_and_test_rate_limiting` calls, could use named arguments for these passed integer values.\n```suggestion\n            self.send_addrs_and_test_rate_limiting(peer, no_relay, new_addrs=600, total_addrs=600)\n```",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r671144448,671144448,test/functional/p2p_addr_relay.py
MarcoFalke,2021-07-19 15:36:44,"Is there a reason to increment the bucket when rate limiting is disabled? I presume you want to prepare for the future where permission flags can be changed at runtime? In that case, shouldn't the code here be:\n\n```cpp\n            if (peer->m_addr_token_bucket < 1.0) {\n                if (rate_limited) {\n                    ++num_rate_limit;\n                    continue;\n            ",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r672410564,672410564,src/net_processing.cpp
MarcoFalke,2021-07-19 15:41:47,"Is there a reason to log the ip address outside of the version handshake? This seems redundant, as the ip shouldn't change afterwards and should be easy to lookup by grepping for the handshake of the peer id.\n\nOtherwise this encourages to put other redundant stuff (ua-string, ...) into this log messages and other log messages as well.",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r672414835,672414835,src/net_processing.cpp
MarcoFalke,2021-07-19 15:45:28,is there a reason to omit this from the documentation?,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r672417898,672417898,src/rpc/net.cpp
jonatack,2021-07-19 16:22:40,can use the descriptions in a5cc9e28f9e125a62168dcbe0b3484d098e56c1f if so inclined,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r672447534,672447534,src/rpc/net.cpp
jonatack,2021-08-02 14:50:42,Proposed in #22604.,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r681037829,681037829,src/net_processing.cpp
jonatack,2021-08-02 14:51:14,"Proposed ""addresses"" in #22604.",https://github.com/bitcoin/bitcoin/pull/22387#discussion_r681038307,681038307,src/net_processing.cpp
jonatack,2021-08-02 14:51:42,helps added in #22604.,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r681038622,681038622,src/rpc/net.cpp
jonatack,2021-08-02 14:51:49,Proposed in #22604.,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r681038735,681038735,src/net_processing.cpp
jonatack,2021-08-02 14:52:01,Proposed in #22604.,https://github.com/bitcoin/bitcoin/pull/22387#discussion_r681038906,681038906,test/functional/p2p_addr_relay.py
