[
  {
    "sha": "613758d50d11eec4d6454f3f2ae3ef8a8f228978",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTM3NThkNTBkMTFlZWM0ZDY0NTRmM2YyYWUzZWY4YThmMjI4OTc4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-04-28T01:32:22Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-04-28T02:00:34Z"
      },
      "message": "Significantly reduce GetTransaction cs_main locking",
      "tree": {
        "sha": "bc38cf584685c06df7ceca6f191e54b06f3cea68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bc38cf584685c06df7ceca6f191e54b06f3cea68"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/613758d50d11eec4d6454f3f2ae3ef8a8f228978",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/613758d50d11eec4d6454f3f2ae3ef8a8f228978",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/613758d50d11eec4d6454f3f2ae3ef8a8f228978",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/613758d50d11eec4d6454f3f2ae3ef8a8f228978/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "17266a13067c061783e0428c6200985ed8872b16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17266a13067c061783e0428c6200985ed8872b16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17266a13067c061783e0428c6200985ed8872b16"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 3,
      "deletions": 4
    },
    "files": [
      {
        "sha": "9ac7ce6e06d35e212abf386e19e0b3d50f73d19c",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/613758d50d11eec4d6454f3f2ae3ef8a8f228978/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/613758d50d11eec4d6454f3f2ae3ef8a8f228978/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=613758d50d11eec4d6454f3f2ae3ef8a8f228978",
        "patch": "@@ -179,6 +179,7 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n     if (!GetTransaction(hash, tx, Params().GetConsensus(), hash_block, true, blockindex)) {\n         std::string errmsg;\n         if (blockindex) {\n+            LOCK(cs_main);\n             if (!(blockindex->nStatus & BLOCK_HAVE_DATA)) {\n                 throw JSONRPCError(RPC_MISC_ERROR, \"Block not available\");\n             }\n@@ -266,13 +267,12 @@ UniValue gettxoutproof(const JSONRPCRequest& request)\n         g_txindex->BlockUntilSyncedToCurrentChain();\n     }\n \n-    LOCK(cs_main);\n-\n     if (pblockindex == nullptr)\n     {\n         CTransactionRef tx;\n         if (!GetTransaction(oneTxid, tx, Params().GetConsensus(), hashBlock, false) || hashBlock.IsNull())\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction not yet in block\");\n+        LOCK(cs_main);\n         pblockindex = LookupBlockIndex(hashBlock);\n         if (!pblockindex) {\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Transaction index corrupt\");"
      },
      {
        "sha": "888e88a3417c24579038909675475dba5168915a",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/613758d50d11eec4d6454f3f2ae3ef8a8f228978/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/613758d50d11eec4d6454f3f2ae3ef8a8f228978/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=613758d50d11eec4d6454f3f2ae3ef8a8f228978",
        "patch": "@@ -1019,8 +1019,6 @@ bool GetTransaction(const uint256& hash, CTransactionRef& txOut, const Consensus\n {\n     CBlockIndex* pindexSlow = blockIndex;\n \n-    LOCK(cs_main);\n-\n     if (!blockIndex) {\n         CTransactionRef ptx = mempool.get(hash);\n         if (ptx) {\n@@ -1032,6 +1030,7 @@ bool GetTransaction(const uint256& hash, CTransactionRef& txOut, const Consensus\n             return g_txindex->FindTx(hash, hashBlock, txOut);\n         }\n \n+        LOCK(cs_main);\n         if (fAllowSlow) { // use coin database to locate block that contains transaction, and scan it\n             const Coin& coin = AccessByTxid(*pcoinsTip, hash);\n             if (!coin.IsSpent()) pindexSlow = chainActive[coin.nHeight];"
      }
    ]
  },
  {
    "sha": "62a4d71b7b44225887b92080223b09883f6e8992",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MmE0ZDcxYjdiNDQyMjU4ODdiOTIwODAyMjNiMDk4ODNmNmU4OTky",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-03-27T20:10:08Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-04-28T02:00:34Z"
      },
      "message": "[net_processing] Avoid holding cs_main during ReadBlockFromDisk",
      "tree": {
        "sha": "f2eed83c135b8be4f95cffb0d57ef9d93af5b662",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2eed83c135b8be4f95cffb0d57ef9d93af5b662"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/62a4d71b7b44225887b92080223b09883f6e8992",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62a4d71b7b44225887b92080223b09883f6e8992",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/62a4d71b7b44225887b92080223b09883f6e8992",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62a4d71b7b44225887b92080223b09883f6e8992/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "613758d50d11eec4d6454f3f2ae3ef8a8f228978",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/613758d50d11eec4d6454f3f2ae3ef8a8f228978",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/613758d50d11eec4d6454f3f2ae3ef8a8f228978"
      }
    ],
    "stats": {
      "total": 100,
      "additions": 54,
      "deletions": 46
    },
    "files": [
      {
        "sha": "ad696b2d9a379a2b40bd6e20bd2db392ad4750fc",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 46,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62a4d71b7b44225887b92080223b09883f6e8992/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62a4d71b7b44225887b92080223b09883f6e8992/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=62a4d71b7b44225887b92080223b09883f6e8992",
        "patch": "@@ -1106,38 +1106,41 @@ void static ProcessGetBlockData(CNode* pfrom, const Consensus::Params& consensus\n         }\n     }\n \n-    LOCK(cs_main);\n-    const CBlockIndex* pindex = LookupBlockIndex(inv.hash);\n-    if (pindex) {\n-        send = BlockRequestAllowed(pindex, consensusParams);\n-        if (!send) {\n-            LogPrint(BCLog::NET, \"%s: ignoring request from peer=%i for old block that isn't in the main chain\\n\", __func__, pfrom->GetId());\n-        }\n-    }\n+    const CBlockIndex* pindex;\n     const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n-    // disconnect node in case we have reached the outbound limit for serving historical blocks\n-    // never disconnect whitelisted nodes\n-    if (send && connman->OutboundTargetReached(true) && ( ((pindexBestHeader != nullptr) && (pindexBestHeader->GetBlockTime() - pindex->GetBlockTime() > HISTORICAL_BLOCK_AGE)) || inv.type == MSG_FILTERED_BLOCK) && !pfrom->fWhitelisted)\n     {\n-        LogPrint(BCLog::NET, \"historical block serving limit reached, disconnect peer=%d\\n\", pfrom->GetId());\n+        LOCK(cs_main);\n+        pindex = LookupBlockIndex(inv.hash);\n+        if (pindex) {\n+            send = BlockRequestAllowed(pindex, consensusParams) && (pindex->nStatus & BLOCK_HAVE_DATA);\n+            if (!send) {\n+                LogPrint(BCLog::NET, \"%s: ignoring request from peer=%i for old block that isn't in the main chain\\n\", __func__, pfrom->GetId());\n+            }\n+        }\n+        // disconnect node in case we have reached the outbound limit for serving historical blocks\n+        // never disconnect whitelisted nodes\n+        if (send && connman->OutboundTargetReached(true) && ( ((pindexBestHeader != nullptr) && (pindexBestHeader->GetBlockTime() - pindex->GetBlockTime() > HISTORICAL_BLOCK_AGE)) || inv.type == MSG_FILTERED_BLOCK) && !pfrom->fWhitelisted)\n+        {\n+            LogPrint(BCLog::NET, \"historical block serving limit reached, disconnect peer=%d\\n\", pfrom->GetId());\n \n-        //disconnect node\n-        pfrom->fDisconnect = true;\n-        send = false;\n-    }\n-    // Avoid leaking prune-height by never sending blocks below the NODE_NETWORK_LIMITED threshold\n-    if (send && !pfrom->fWhitelisted && (\n-            (((pfrom->GetLocalServices() & NODE_NETWORK_LIMITED) == NODE_NETWORK_LIMITED) && ((pfrom->GetLocalServices() & NODE_NETWORK) != NODE_NETWORK) && (chainActive.Tip()->nHeight - pindex->nHeight > (int)NODE_NETWORK_LIMITED_MIN_BLOCKS + 2 /* add two blocks buffer extension for possible races */) )\n-       )) {\n-        LogPrint(BCLog::NET, \"Ignore block request below NODE_NETWORK_LIMITED threshold from peer=%d\\n\", pfrom->GetId());\n+            //disconnect node\n+            pfrom->fDisconnect = true;\n+            send = false;\n+        }\n+        // Avoid leaking prune-height by never sending blocks below the NODE_NETWORK_LIMITED threshold\n+        if (send && !pfrom->fWhitelisted && (\n+                (((pfrom->GetLocalServices() & NODE_NETWORK_LIMITED) == NODE_NETWORK_LIMITED) && ((pfrom->GetLocalServices() & NODE_NETWORK) != NODE_NETWORK) && (chainActive.Tip()->nHeight - pindex->nHeight > (int)NODE_NETWORK_LIMITED_MIN_BLOCKS + 2 /* add two blocks buffer extension for possible races */) )\n+           )) {\n+            LogPrint(BCLog::NET, \"Ignore block request below NODE_NETWORK_LIMITED threshold from peer=%d\\n\", pfrom->GetId());\n \n-        //disconnect node and prevent it from stalling (would otherwise wait for the missing block)\n-        pfrom->fDisconnect = true;\n-        send = false;\n+            //disconnect node and prevent it from stalling (would otherwise wait for the missing block)\n+            pfrom->fDisconnect = true;\n+            send = false;\n+        }\n     }\n     // Pruned nodes may have deleted the block, so check whether\n     // it's available before trying to send.\n-    if (send && (pindex->nStatus & BLOCK_HAVE_DATA))\n+    if (send)\n     {\n         std::shared_ptr<const CBlock> pblock;\n         if (a_recent_block && a_recent_block->GetHash() == pindex->GetBlockHash()) {\n@@ -1181,6 +1184,7 @@ void static ProcessGetBlockData(CNode* pfrom, const Consensus::Params& consensus\n         }\n         else if (inv.type == MSG_CMPCT_BLOCK)\n         {\n+            LOCK(cs_main);\n             // If a peer is asking for old blocks, we're almost guaranteed\n             // they won't have a useful mempool to match against a compact block,\n             // and we don't feel like constructing the object for them, so\n@@ -1202,6 +1206,7 @@ void static ProcessGetBlockData(CNode* pfrom, const Consensus::Params& consensus\n         // Trigger the peer node to send a getblocks request for the next batch of inventory\n         if (inv.hash == pfrom->hashContinue)\n         {\n+            LOCK(cs_main);\n             // Bypass PushInventory, this must send even if redundant,\n             // and we want it right after the last block so they don't\n             // wait for other stuff first.\n@@ -2055,29 +2060,32 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             return true;\n         }\n \n-        LOCK(cs_main);\n+        const CBlockIndex* pindex;\n+        {\n+            LOCK(cs_main);\n \n-        const CBlockIndex* pindex = LookupBlockIndex(req.blockhash);\n-        if (!pindex || !(pindex->nStatus & BLOCK_HAVE_DATA)) {\n-            LogPrint(BCLog::NET, \"Peer %d sent us a getblocktxn for a block we don't have\", pfrom->GetId());\n-            return true;\n-        }\n+            pindex = LookupBlockIndex(req.blockhash);\n+            if (!pindex || !(pindex->nStatus & BLOCK_HAVE_DATA)) {\n+                LogPrint(BCLog::NET, \"Peer %d sent us a getblocktxn for a block we don't have\", pfrom->GetId());\n+                return true;\n+            }\n \n-        if (pindex->nHeight < chainActive.Height() - MAX_BLOCKTXN_DEPTH) {\n-            // If an older block is requested (should never happen in practice,\n-            // but can happen in tests) send a block response instead of a\n-            // blocktxn response. Sending a full block response instead of a\n-            // small blocktxn response is preferable in the case where a peer\n-            // might maliciously send lots of getblocktxn requests to trigger\n-            // expensive disk reads, because it will require the peer to\n-            // actually receive all the data read from disk over the network.\n-            LogPrint(BCLog::NET, \"Peer %d sent us a getblocktxn for a block > %i deep\", pfrom->GetId(), MAX_BLOCKTXN_DEPTH);\n-            CInv inv;\n-            inv.type = State(pfrom->GetId())->fWantsCmpctWitness ? MSG_WITNESS_BLOCK : MSG_BLOCK;\n-            inv.hash = req.blockhash;\n-            pfrom->vRecvGetData.push_back(inv);\n-            // The message processing loop will go around again (without pausing) and we'll respond then (without cs_main)\n-            return true;\n+            if (pindex->nHeight < chainActive.Height() - MAX_BLOCKTXN_DEPTH) {\n+                // If an older block is requested (should never happen in practice,\n+                // but can happen in tests) send a block response instead of a\n+                // blocktxn response. Sending a full block response instead of a\n+                // small blocktxn response is preferable in the case where a peer\n+                // might maliciously send lots of getblocktxn requests to trigger\n+                // expensive disk reads, because it will require the peer to\n+                // actually receive all the data read from disk over the network.\n+                LogPrint(BCLog::NET, \"Peer %d sent us a getblocktxn for a block > %i deep\", pfrom->GetId(), MAX_BLOCKTXN_DEPTH);\n+                CInv inv;\n+                inv.type = State(pfrom->GetId())->fWantsCmpctWitness ? MSG_WITNESS_BLOCK : MSG_BLOCK;\n+                inv.hash = req.blockhash;\n+                pfrom->vRecvGetData.push_back(inv);\n+                // The message processing loop will go around again (without pausing) and we'll respond then (without cs_main)\n+                return true;\n+            }\n         }\n \n         CBlock block;"
      }
    ]
  },
  {
    "sha": "cb14810e6af06d688556fff56285f00ce2658c95",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYjE0ODEwZTZhZjA2ZDY4ODU1NmZmZjU2Mjg1ZjAwY2UyNjU4Yzk1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-03-27T20:21:40Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-04-28T02:18:52Z"
      },
      "message": "Avoid uneccessary cs_main during block reading in rest/rpc/zmq",
      "tree": {
        "sha": "b83092f2ec28be42cb0e3203fd6af1e22610f503",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b83092f2ec28be42cb0e3203fd6af1e22610f503"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb14810e6af06d688556fff56285f00ce2658c95",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb14810e6af06d688556fff56285f00ce2658c95",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cb14810e6af06d688556fff56285f00ce2658c95",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb14810e6af06d688556fff56285f00ce2658c95/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "62a4d71b7b44225887b92080223b09883f6e8992",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62a4d71b7b44225887b92080223b09883f6e8992",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/62a4d71b7b44225887b92080223b09883f6e8992"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 22,
      "deletions": 23
    },
    "files": [
      {
        "sha": "070a80d88474399383bf876fa6a7925ce8f975d1",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb14810e6af06d688556fff56285f00ce2658c95/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb14810e6af06d688556fff56285f00ce2658c95/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=cb14810e6af06d688556fff56285f00ce2658c95",
        "patch": "@@ -219,11 +219,11 @@ static bool rest_block(HTTPRequest* req,\n \n         if (fHavePruned && !(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0)\n             return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not available (pruned data)\");\n-\n-        if (!ReadBlockFromDisk(block, pblockindex, Params().GetConsensus()))\n-            return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n     }\n \n+    if (!ReadBlockFromDisk(block, pblockindex, Params().GetConsensus()))\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n+\n     CDataStream ssBlock(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());\n     ssBlock << block;\n \n@@ -243,11 +243,7 @@ static bool rest_block(HTTPRequest* req,\n     }\n \n     case RetFormat::JSON: {\n-        UniValue objBlock;\n-        {\n-            LOCK(cs_main);\n-            objBlock = blockToJSON(block, pblockindex, showTxDetails);\n-        }\n+        UniValue objBlock = blockToJSON(block, pblockindex, showTxDetails);\n         std::string strJSON = objBlock.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n         req->WriteReply(HTTP_OK, strJSON);"
      },
      {
        "sha": "7716250aee5d4cfbb2844893fd5fc25daee539b0",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 14,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb14810e6af06d688556fff56285f00ce2658c95/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb14810e6af06d688556fff56285f00ce2658c95/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=cb14810e6af06d688556fff56285f00ce2658c95",
        "patch": "@@ -114,14 +114,8 @@ UniValue blockheaderToJSON(const CBlockIndex* blockindex)\n \n UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails)\n {\n-    AssertLockHeld(cs_main);\n     UniValue result(UniValue::VOBJ);\n     result.pushKV(\"hash\", blockindex->GetBlockHash().GetHex());\n-    int confirmations = -1;\n-    // Only report confirmations if the block is on the main chain\n-    if (chainActive.Contains(blockindex))\n-        confirmations = chainActive.Height() - blockindex->nHeight + 1;\n-    result.pushKV(\"confirmations\", confirmations);\n     result.pushKV(\"strippedsize\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS));\n     result.pushKV(\"size\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION));\n     result.pushKV(\"weight\", (int)::GetBlockWeight(block));\n@@ -151,6 +145,14 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n \n     if (blockindex->pprev)\n         result.pushKV(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex());\n+\n+    LOCK(cs_main);\n+    int confirmations = -1;\n+    // Only report confirmations if the block is on the main chain\n+    if (chainActive.Contains(blockindex))\n+        confirmations = chainActive.Height() - blockindex->nHeight + 1;\n+    result.pushKV(\"confirmations\", confirmations);\n+\n     CBlockIndex *pnext = chainActive.Next(blockindex);\n     if (pnext)\n         result.pushKV(\"nextblockhash\", pnext->GetBlockHash().GetHex());\n@@ -787,8 +789,6 @@ UniValue getblock(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"getblock\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n         );\n \n-    LOCK(cs_main);\n-\n     std::string strHash = request.params[0].get_str();\n     uint256 hash(uint256S(strHash));\n \n@@ -800,15 +800,19 @@ UniValue getblock(const JSONRPCRequest& request)\n             verbosity = request.params[1].get_bool() ? 1 : 0;\n     }\n \n-    const CBlockIndex* pblockindex = LookupBlockIndex(hash);\n-    if (!pblockindex) {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+    const CBlockIndex* pblockindex;\n+    {\n+        LOCK(cs_main);\n+        pblockindex = LookupBlockIndex(hash);\n+        if (!pblockindex) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+\n+        if (fHavePruned && !(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Block not available (pruned data)\");\n     }\n \n     CBlock block;\n-    if (fHavePruned && !(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0)\n-        throw JSONRPCError(RPC_MISC_ERROR, \"Block not available (pruned data)\");\n-\n     if (!ReadBlockFromDisk(block, pblockindex, Params().GetConsensus()))\n         // Block not found on disk. This could be because we have the block\n         // header in our index but don't have the block (for example if a"
      },
      {
        "sha": "36e907751d0414824a1fd6cc2a87b81e913585a7",
        "filename": "src/zmq/zmqpublishnotifier.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb14810e6af06d688556fff56285f00ce2658c95/src/zmq/zmqpublishnotifier.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb14810e6af06d688556fff56285f00ce2658c95/src/zmq/zmqpublishnotifier.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqpublishnotifier.cpp?ref=cb14810e6af06d688556fff56285f00ce2658c95",
        "patch": "@@ -173,7 +173,6 @@ bool CZMQPublishRawBlockNotifier::NotifyBlock(const CBlockIndex *pindex)\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());\n     {\n-        LOCK(cs_main);\n         CBlock block;\n         if(!ReadBlockFromDisk(block, pindex, consensusParams))\n         {"
      }
    ]
  }
]