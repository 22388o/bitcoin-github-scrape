[
  {
    "sha": "31a14d4909743c00542bf97297a1e2f166170541",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMWExNGQ0OTA5NzQzYzAwNTQyYmY5NzI5N2ExZTJmMTY2MTcwNTQx",
    "commit": {
      "author": {
        "name": "Matthias Grundmann",
        "email": "matthias@glasmail.de",
        "date": "2017-03-06T16:54:08Z"
      },
      "committer": {
        "name": "Matthias Grundmann",
        "email": "matthias@glasmail.de",
        "date": "2017-04-02T12:41:38Z"
      },
      "message": "Correct indentation and remove unnecessary braces",
      "tree": {
        "sha": "2d14dfac7ecd69b43631cc135b37c429e84f2bfc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d14dfac7ecd69b43631cc135b37c429e84f2bfc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31a14d4909743c00542bf97297a1e2f166170541",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCAAGBQJY4PGEAAoJEJLlpUpagiEZrjYH/1o74n//rY3tad3supX2iBsd\nrwcQbOcN5fccmtyt/IKL5AJSswottL4RqwjPmE0FPXNwjJWENGBn1rE6bT8WWHde\nZsLfs3/aR19bBWqMsdXibPo+QGJU5G7UM3Y7fm7bBBgkYwdcSdBx+dQfAuWN9goQ\nlG63KZe9UC+FpYvD7k4zMx2Dx3pnkOTN22+0CYdf/QP6goy+ZczOWSylVtMuYsac\ndwOglS2rdzSeQEvkU86a+ZXQSh+v/D+IM0zDQkUni++zWWrIHzkcyfbN6K+ydpip\nJxal0Pa4Oj9MoiRA4geGTRC2mn3c9V6U/rCMWwI7vw23VgAsmKvQYoAJXrPm5M8=\n=qH98\n-----END PGP SIGNATURE-----",
        "payload": "tree 2d14dfac7ecd69b43631cc135b37c429e84f2bfc\nparent 12af74b289f8cdc6caf850dc6c802f9936b1e8b3\nauthor Matthias Grundmann <matthias@glasmail.de> 1488819248 +0100\ncommitter Matthias Grundmann <matthias@glasmail.de> 1491136898 +0200\n\nCorrect indentation and remove unnecessary braces\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31a14d4909743c00542bf97297a1e2f166170541",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/31a14d4909743c00542bf97297a1e2f166170541",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31a14d4909743c00542bf97297a1e2f166170541/comments",
    "author": {
      "login": "matthias-g",
      "id": 1591161,
      "node_id": "MDQ6VXNlcjE1OTExNjE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1591161?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/matthias-g",
      "html_url": "https://github.com/matthias-g",
      "followers_url": "https://api.github.com/users/matthias-g/followers",
      "following_url": "https://api.github.com/users/matthias-g/following{/other_user}",
      "gists_url": "https://api.github.com/users/matthias-g/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/matthias-g/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/matthias-g/subscriptions",
      "organizations_url": "https://api.github.com/users/matthias-g/orgs",
      "repos_url": "https://api.github.com/users/matthias-g/repos",
      "events_url": "https://api.github.com/users/matthias-g/events{/privacy}",
      "received_events_url": "https://api.github.com/users/matthias-g/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "matthias-g",
      "id": 1591161,
      "node_id": "MDQ6VXNlcjE1OTExNjE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1591161?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/matthias-g",
      "html_url": "https://github.com/matthias-g",
      "followers_url": "https://api.github.com/users/matthias-g/followers",
      "following_url": "https://api.github.com/users/matthias-g/following{/other_user}",
      "gists_url": "https://api.github.com/users/matthias-g/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/matthias-g/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/matthias-g/subscriptions",
      "organizations_url": "https://api.github.com/users/matthias-g/orgs",
      "repos_url": "https://api.github.com/users/matthias-g/repos",
      "events_url": "https://api.github.com/users/matthias-g/events{/privacy}",
      "received_events_url": "https://api.github.com/users/matthias-g/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12af74b289f8cdc6caf850dc6c802f9936b1e8b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12af74b289f8cdc6caf850dc6c802f9936b1e8b3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12af74b289f8cdc6caf850dc6c802f9936b1e8b3"
      }
    ],
    "stats": {
      "total": 262,
      "additions": 129,
      "deletions": 133
    },
    "files": [
      {
        "sha": "48058268864e271ea242e50df7feb67376e18ac4",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 51,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31a14d4909743c00542bf97297a1e2f166170541/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31a14d4909743c00542bf97297a1e2f166170541/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=31a14d4909743c00542bf97297a1e2f166170541",
        "patch": "@@ -708,7 +708,7 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete\n             handled = msg.readData(pch, nBytes);\n \n         if (handled < 0)\n-                return false;\n+            return false;\n \n         if (msg.in_data && msg.hdr.nMessageSize > MAX_PROTOCOL_MESSAGE_LENGTH) {\n             LogPrint(BCLog::NET, \"Oversized message from peer=%i, disconnecting\\n\", GetId());\n@@ -786,7 +786,7 @@ int CNetMessage::readHeader(const char *pch, unsigned int nBytes)\n \n     // reject messages larger than MAX_SIZE\n     if (hdr.nMessageSize > MAX_SIZE)\n-            return -1;\n+        return -1;\n \n     // switch state to reading message data\n     in_data = true;\n@@ -1299,59 +1299,55 @@ void CConnman::ThreadSocketHandler()\n             }\n             if (recvSet || errorSet)\n             {\n+                // typical socket buffer is 8K-64K\n+                char pchBuf[0x10000];\n+                int nBytes = 0;\n                 {\n-                    {\n-                        // typical socket buffer is 8K-64K\n-                        char pchBuf[0x10000];\n-                        int nBytes = 0;\n-                        {\n-                            LOCK(pnode->cs_hSocket);\n-                            if (pnode->hSocket == INVALID_SOCKET)\n-                                continue;\n-                            nBytes = recv(pnode->hSocket, pchBuf, sizeof(pchBuf), MSG_DONTWAIT);\n-                        }\n-                        if (nBytes > 0)\n-                        {\n-                            bool notify = false;\n-                            if (!pnode->ReceiveMsgBytes(pchBuf, nBytes, notify))\n-                                pnode->CloseSocketDisconnect();\n-                            RecordBytesRecv(nBytes);\n-                            if (notify) {\n-                                size_t nSizeAdded = 0;\n-                                auto it(pnode->vRecvMsg.begin());\n-                                for (; it != pnode->vRecvMsg.end(); ++it) {\n-                                    if (!it->complete())\n-                                        break;\n-                                    nSizeAdded += it->vRecv.size() + CMessageHeader::HEADER_SIZE;\n-                                }\n-                                {\n-                                    LOCK(pnode->cs_vProcessMsg);\n-                                    pnode->vProcessMsg.splice(pnode->vProcessMsg.end(), pnode->vRecvMsg, pnode->vRecvMsg.begin(), it);\n-                                    pnode->nProcessQueueSize += nSizeAdded;\n-                                    pnode->fPauseRecv = pnode->nProcessQueueSize > nReceiveFloodSize;\n-                                }\n-                                WakeMessageHandler();\n-                            }\n-                        }\n-                        else if (nBytes == 0)\n-                        {\n-                            // socket closed gracefully\n-                            if (!pnode->fDisconnect) {\n-                                LogPrint(BCLog::NET, \"socket closed\\n\");\n-                            }\n-                            pnode->CloseSocketDisconnect();\n+                    LOCK(pnode->cs_hSocket);\n+                    if (pnode->hSocket == INVALID_SOCKET)\n+                        continue;\n+                    nBytes = recv(pnode->hSocket, pchBuf, sizeof(pchBuf), MSG_DONTWAIT);\n+                }\n+                if (nBytes > 0)\n+                {\n+                    bool notify = false;\n+                    if (!pnode->ReceiveMsgBytes(pchBuf, nBytes, notify))\n+                        pnode->CloseSocketDisconnect();\n+                    RecordBytesRecv(nBytes);\n+                    if (notify) {\n+                        size_t nSizeAdded = 0;\n+                        auto it(pnode->vRecvMsg.begin());\n+                        for (; it != pnode->vRecvMsg.end(); ++it) {\n+                            if (!it->complete())\n+                                break;\n+                            nSizeAdded += it->vRecv.size() + CMessageHeader::HEADER_SIZE;\n                         }\n-                        else if (nBytes < 0)\n                         {\n-                            // error\n-                            int nErr = WSAGetLastError();\n-                            if (nErr != WSAEWOULDBLOCK && nErr != WSAEMSGSIZE && nErr != WSAEINTR && nErr != WSAEINPROGRESS)\n-                            {\n-                                if (!pnode->fDisconnect)\n-                                    LogPrintf(\"socket recv error %s\\n\", NetworkErrorString(nErr));\n-                                pnode->CloseSocketDisconnect();\n-                            }\n+                            LOCK(pnode->cs_vProcessMsg);\n+                            pnode->vProcessMsg.splice(pnode->vProcessMsg.end(), pnode->vRecvMsg, pnode->vRecvMsg.begin(), it);\n+                            pnode->nProcessQueueSize += nSizeAdded;\n+                            pnode->fPauseRecv = pnode->nProcessQueueSize > nReceiveFloodSize;\n                         }\n+                        WakeMessageHandler();\n+                    }\n+                }\n+                else if (nBytes == 0)\n+                {\n+                    // socket closed gracefully\n+                    if (!pnode->fDisconnect) {\n+                        LogPrint(BCLog::NET, \"socket closed\\n\");\n+                    }\n+                    pnode->CloseSocketDisconnect();\n+                }\n+                else if (nBytes < 0)\n+                {\n+                    // error\n+                    int nErr = WSAGetLastError();\n+                    if (nErr != WSAEWOULDBLOCK && nErr != WSAEMSGSIZE && nErr != WSAEINTR && nErr != WSAEINPROGRESS)\n+                    {\n+                        if (!pnode->fDisconnect)\n+                            LogPrintf(\"socket recv error %s\\n\", NetworkErrorString(nErr));\n+                        pnode->CloseSocketDisconnect();\n                     }\n                 }\n             }"
      },
      {
        "sha": "5b30a12063756ae5dac85f12cfe688b2158805dd",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31a14d4909743c00542bf97297a1e2f166170541/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31a14d4909743c00542bf97297a1e2f166170541/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=31a14d4909743c00542bf97297a1e2f166170541",
        "patch": "@@ -701,15 +701,15 @@ class CNode\n public:\n \n     NodeId GetId() const {\n-      return id;\n+        return id;\n     }\n \n     uint64_t GetLocalNonce() const {\n-      return nLocalHostNonce;\n+        return nLocalHostNonce;\n     }\n \n     int GetMyStartingHeight() const {\n-      return nMyStartingHeight;\n+        return nMyStartingHeight;\n     }\n \n     int GetRefCount()"
      },
      {
        "sha": "8e3e00eeed3c63b821df5772ceb9cb6b91dae997",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 79,
        "deletions": 79,
        "changes": 158,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31a14d4909743c00542bf97297a1e2f166170541/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31a14d4909743c00542bf97297a1e2f166170541/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=31a14d4909743c00542bf97297a1e2f166170541",
        "patch": "@@ -2661,100 +2661,100 @@ bool ProcessMessages(CNode* pfrom, CConnman& connman, const std::atomic<bool>& i\n     // this maintains the order of responses\n     if (!pfrom->vRecvGetData.empty()) return true;\n \n-        // Don't bother if send buffer is too full to respond anyway\n-        if (pfrom->fPauseSend)\n-            return false;\n+    // Don't bother if send buffer is too full to respond anyway\n+    if (pfrom->fPauseSend)\n+        return false;\n \n-        std::list<CNetMessage> msgs;\n-        {\n-            LOCK(pfrom->cs_vProcessMsg);\n-            if (pfrom->vProcessMsg.empty())\n-                return false;\n-            // Just take one message\n-            msgs.splice(msgs.begin(), pfrom->vProcessMsg, pfrom->vProcessMsg.begin());\n-            pfrom->nProcessQueueSize -= msgs.front().vRecv.size() + CMessageHeader::HEADER_SIZE;\n-            pfrom->fPauseRecv = pfrom->nProcessQueueSize > connman.GetReceiveFloodSize();\n-            fMoreWork = !pfrom->vProcessMsg.empty();\n-        }\n-        CNetMessage& msg(msgs.front());\n-\n-        msg.SetVersion(pfrom->GetRecvVersion());\n-        // Scan for message start\n-        if (memcmp(msg.hdr.pchMessageStart, chainparams.MessageStart(), CMessageHeader::MESSAGE_START_SIZE) != 0) {\n-            LogPrintf(\"PROCESSMESSAGE: INVALID MESSAGESTART %s peer=%d\\n\", SanitizeString(msg.hdr.GetCommand()), pfrom->id);\n-            pfrom->fDisconnect = true;\n+    std::list<CNetMessage> msgs;\n+    {\n+        LOCK(pfrom->cs_vProcessMsg);\n+        if (pfrom->vProcessMsg.empty())\n             return false;\n-        }\n+        // Just take one message\n+        msgs.splice(msgs.begin(), pfrom->vProcessMsg, pfrom->vProcessMsg.begin());\n+        pfrom->nProcessQueueSize -= msgs.front().vRecv.size() + CMessageHeader::HEADER_SIZE;\n+        pfrom->fPauseRecv = pfrom->nProcessQueueSize > connman.GetReceiveFloodSize();\n+        fMoreWork = !pfrom->vProcessMsg.empty();\n+    }\n+    CNetMessage& msg(msgs.front());\n+\n+    msg.SetVersion(pfrom->GetRecvVersion());\n+    // Scan for message start\n+    if (memcmp(msg.hdr.pchMessageStart, chainparams.MessageStart(), CMessageHeader::MESSAGE_START_SIZE) != 0) {\n+        LogPrintf(\"PROCESSMESSAGE: INVALID MESSAGESTART %s peer=%d\\n\", SanitizeString(msg.hdr.GetCommand()), pfrom->id);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n \n-        // Read header\n-        CMessageHeader& hdr = msg.hdr;\n-        if (!hdr.IsValid(chainparams.MessageStart()))\n-        {\n-            LogPrintf(\"PROCESSMESSAGE: ERRORS IN HEADER %s peer=%d\\n\", SanitizeString(hdr.GetCommand()), pfrom->id);\n-            return fMoreWork;\n-        }\n-        std::string strCommand = hdr.GetCommand();\n+    // Read header\n+    CMessageHeader& hdr = msg.hdr;\n+    if (!hdr.IsValid(chainparams.MessageStart()))\n+    {\n+        LogPrintf(\"PROCESSMESSAGE: ERRORS IN HEADER %s peer=%d\\n\", SanitizeString(hdr.GetCommand()), pfrom->id);\n+        return fMoreWork;\n+    }\n+    std::string strCommand = hdr.GetCommand();\n+\n+    // Message size\n+    unsigned int nMessageSize = hdr.nMessageSize;\n \n-        // Message size\n-        unsigned int nMessageSize = hdr.nMessageSize;\n+    // Checksum\n+    CDataStream& vRecv = msg.vRecv;\n+    const uint256& hash = msg.GetMessageHash();\n+    if (memcmp(hash.begin(), hdr.pchChecksum, CMessageHeader::CHECKSUM_SIZE) != 0)\n+    {\n+        LogPrintf(\"%s(%s, %u bytes): CHECKSUM ERROR expected %s was %s\\n\", __func__,\n+           SanitizeString(strCommand), nMessageSize,\n+           HexStr(hash.begin(), hash.begin()+CMessageHeader::CHECKSUM_SIZE),\n+           HexStr(hdr.pchChecksum, hdr.pchChecksum+CMessageHeader::CHECKSUM_SIZE));\n+        return fMoreWork;\n+    }\n \n-        // Checksum\n-        CDataStream& vRecv = msg.vRecv;\n-        const uint256& hash = msg.GetMessageHash();\n-        if (memcmp(hash.begin(), hdr.pchChecksum, CMessageHeader::CHECKSUM_SIZE) != 0)\n+    // Process message\n+    bool fRet = false;\n+    try\n+    {\n+        fRet = ProcessMessage(pfrom, strCommand, vRecv, msg.nTime, chainparams, connman, interruptMsgProc);\n+        if (interruptMsgProc)\n+            return false;\n+        if (!pfrom->vRecvGetData.empty())\n+            fMoreWork = true;\n+    }\n+    catch (const std::ios_base::failure& e)\n+    {\n+        connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_MALFORMED, std::string(\"error parsing message\")));\n+        if (strstr(e.what(), \"end of data\"))\n         {\n-            LogPrintf(\"%s(%s, %u bytes): CHECKSUM ERROR expected %s was %s\\n\", __func__,\n-               SanitizeString(strCommand), nMessageSize,\n-               HexStr(hash.begin(), hash.begin()+CMessageHeader::CHECKSUM_SIZE),\n-               HexStr(hdr.pchChecksum, hdr.pchChecksum+CMessageHeader::CHECKSUM_SIZE));\n-            return fMoreWork;\n+            // Allow exceptions from under-length message on vRecv\n+            LogPrintf(\"%s(%s, %u bytes): Exception '%s' caught, normally caused by a message being shorter than its stated length\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n         }\n-\n-        // Process message\n-        bool fRet = false;\n-        try\n+        else if (strstr(e.what(), \"size too large\"))\n         {\n-            fRet = ProcessMessage(pfrom, strCommand, vRecv, msg.nTime, chainparams, connman, interruptMsgProc);\n-            if (interruptMsgProc)\n-                return false;\n-            if (!pfrom->vRecvGetData.empty())\n-                fMoreWork = true;\n+            // Allow exceptions from over-long size\n+            LogPrintf(\"%s(%s, %u bytes): Exception '%s' caught\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n         }\n-        catch (const std::ios_base::failure& e)\n+        else if (strstr(e.what(), \"non-canonical ReadCompactSize()\"))\n         {\n-            connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_MALFORMED, std::string(\"error parsing message\")));\n-            if (strstr(e.what(), \"end of data\"))\n-            {\n-                // Allow exceptions from under-length message on vRecv\n-                LogPrintf(\"%s(%s, %u bytes): Exception '%s' caught, normally caused by a message being shorter than its stated length\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n-            }\n-            else if (strstr(e.what(), \"size too large\"))\n-            {\n-                // Allow exceptions from over-long size\n-                LogPrintf(\"%s(%s, %u bytes): Exception '%s' caught\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n-            }\n-            else if (strstr(e.what(), \"non-canonical ReadCompactSize()\"))\n-            {\n-                // Allow exceptions from non-canonical encoding\n-                LogPrintf(\"%s(%s, %u bytes): Exception '%s' caught\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n-            }\n-            else\n-            {\n-                PrintExceptionContinue(&e, \"ProcessMessages()\");\n-            }\n+            // Allow exceptions from non-canonical encoding\n+            LogPrintf(\"%s(%s, %u bytes): Exception '%s' caught\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n         }\n-        catch (const std::exception& e) {\n+        else\n+        {\n             PrintExceptionContinue(&e, \"ProcessMessages()\");\n-        } catch (...) {\n-            PrintExceptionContinue(NULL, \"ProcessMessages()\");\n         }\n+    }\n+    catch (const std::exception& e) {\n+        PrintExceptionContinue(&e, \"ProcessMessages()\");\n+    } catch (...) {\n+        PrintExceptionContinue(NULL, \"ProcessMessages()\");\n+    }\n \n-        if (!fRet) {\n-            LogPrintf(\"%s(%s, %u bytes) FAILED peer=%d\\n\", __func__, SanitizeString(strCommand), nMessageSize, pfrom->id);\n-        }\n+    if (!fRet) {\n+        LogPrintf(\"%s(%s, %u bytes) FAILED peer=%d\\n\", __func__, SanitizeString(strCommand), nMessageSize, pfrom->id);\n+    }\n \n-        LOCK(cs_main);\n-        SendRejectsAndCheckIfBanned(pfrom, connman);\n+    LOCK(cs_main);\n+    SendRejectsAndCheckIfBanned(pfrom, connman);\n \n     return fMoreWork;\n }"
      }
    ]
  }
]