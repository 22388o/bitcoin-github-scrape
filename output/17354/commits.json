[
  {
    "sha": "01f45dd00eb032a19d142026e4d019944192da19",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMWY0NWRkMDBlYjAzMmExOWQxNDIwMjZlNGQwMTk5NDQxOTJkYTE5",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-11-02T16:14:36Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-11-02T16:14:36Z"
      },
      "message": "wallet: Avoid recursive lock in CWallet::SetUsedDestinationState",
      "tree": {
        "sha": "e660751e4a97129341181a4cfde3d1aa0d775e42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e660751e4a97129341181a4cfde3d1aa0d775e42"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01f45dd00eb032a19d142026e4d019944192da19",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01f45dd00eb032a19d142026e4d019944192da19",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01f45dd00eb032a19d142026e4d019944192da19",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01f45dd00eb032a19d142026e4d019944192da19/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "463eab5e1418a592036e7bf9bf46f66fe6462435",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/463eab5e1418a592036e7bf9bf46f66fe6462435",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/463eab5e1418a592036e7bf9bf46f66fe6462435"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d37b3eaef0c8086f1ca5dd49eaf60ee5f15a79c5",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01f45dd00eb032a19d142026e4d019944192da19/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01f45dd00eb032a19d142026e4d019944192da19/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=01f45dd00eb032a19d142026e4d019944192da19",
        "patch": "@@ -693,13 +693,13 @@ bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)\n \n void CWallet::SetUsedDestinationState(const uint256& hash, unsigned int n, bool used)\n {\n+    AssertLockHeld(cs_wallet);\n     const CWalletTx* srctx = GetWalletTx(hash);\n     if (!srctx) return;\n \n     CTxDestination dst;\n     if (ExtractDestination(srctx->tx->vout[n].scriptPubKey, dst)) {\n         if (IsMine(dst)) {\n-            LOCK(cs_wallet);\n             if (used && !GetDestData(dst, \"used\", nullptr)) {\n                 AddDestData(dst, \"used\", \"p\"); // p for \"present\", opposite of absent (null)\n             } else if (!used && GetDestData(dst, \"used\", nullptr)) {"
      },
      {
        "sha": "64c229392252af9d6778dd914871eeee22f851ba",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01f45dd00eb032a19d142026e4d019944192da19/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01f45dd00eb032a19d142026e4d019944192da19/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=01f45dd00eb032a19d142026e4d019944192da19",
        "patch": "@@ -795,7 +795,7 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     // Whether this or any UTXO with the same CTxDestination has been spent.\n     bool IsUsedDestination(const CTxDestination& dst) const;\n     bool IsUsedDestination(const uint256& hash, unsigned int n) const;\n-    void SetUsedDestinationState(const uint256& hash, unsigned int n, bool used);\n+    void SetUsedDestinationState(const uint256& hash, unsigned int n, bool used) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     std::vector<OutputGroup> GroupOutputs(const std::vector<COutput>& outputs, bool single_coin) const;\n "
      }
    ]
  },
  {
    "sha": "0b75a7f0680d16a41043864a897470324917b1e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYjc1YTdmMDY4MGQxNmE0MTA0Mzg2NGE4OTc0NzAzMjQ5MTdiMWU4",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-11-02T16:20:45Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-11-02T21:36:21Z"
      },
      "message": "wallet: Reuse existing batch in CWallet::SetUsedDestinationState",
      "tree": {
        "sha": "91e72e0079565a20b008083666f34152e150f412",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91e72e0079565a20b008083666f34152e150f412"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b75a7f0680d16a41043864a897470324917b1e8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b75a7f0680d16a41043864a897470324917b1e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0b75a7f0680d16a41043864a897470324917b1e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b75a7f0680d16a41043864a897470324917b1e8/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "01f45dd00eb032a19d142026e4d019944192da19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01f45dd00eb032a19d142026e4d019944192da19",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/01f45dd00eb032a19d142026e4d019944192da19"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 19,
      "deletions": 16
    },
    "files": [
      {
        "sha": "3e6bb16c4f9e33db2074dc433c268e3c10639bff",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b75a7f0680d16a41043864a897470324917b1e8/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b75a7f0680d16a41043864a897470324917b1e8/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=0b75a7f0680d16a41043864a897470324917b1e8",
        "patch": "@@ -170,12 +170,14 @@ class WalletImpl : public Wallet\n     bool addDestData(const CTxDestination& dest, const std::string& key, const std::string& value) override\n     {\n         LOCK(m_wallet->cs_wallet);\n-        return m_wallet->AddDestData(dest, key, value);\n+        WalletBatch batch{m_wallet->GetDatabase()};\n+        return m_wallet->AddDestData(batch, dest, key, value);\n     }\n     bool eraseDestData(const CTxDestination& dest, const std::string& key) override\n     {\n         LOCK(m_wallet->cs_wallet);\n-        return m_wallet->EraseDestData(dest, key);\n+        WalletBatch batch{m_wallet->GetDatabase()};\n+        return m_wallet->EraseDestData(batch, dest, key);\n     }\n     std::vector<std::string> getDestValues(const std::string& prefix) override\n     {"
      },
      {
        "sha": "4d11d3bee95496a0d09419f0f0afb79d85dae8f2",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b75a7f0680d16a41043864a897470324917b1e8/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b75a7f0680d16a41043864a897470324917b1e8/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=0b75a7f0680d16a41043864a897470324917b1e8",
        "patch": "@@ -338,9 +338,10 @@ BOOST_AUTO_TEST_CASE(LoadReceiveRequests)\n {\n     CTxDestination dest = PKHash();\n     LOCK(m_wallet.cs_wallet);\n-    m_wallet.AddDestData(dest, \"misc\", \"val_misc\");\n-    m_wallet.AddDestData(dest, \"rr0\", \"val_rr0\");\n-    m_wallet.AddDestData(dest, \"rr1\", \"val_rr1\");\n+    WalletBatch batch{m_wallet.GetDatabase()};\n+    m_wallet.AddDestData(batch, dest, \"misc\", \"val_misc\");\n+    m_wallet.AddDestData(batch, dest, \"rr0\", \"val_rr0\");\n+    m_wallet.AddDestData(batch, dest, \"rr1\", \"val_rr1\");\n \n     auto values = m_wallet.GetDestValues(\"rr\");\n     BOOST_CHECK_EQUAL(values.size(), 2U);"
      },
      {
        "sha": "2909019d9b5bdbd39db7c0cef279684b84558e56",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b75a7f0680d16a41043864a897470324917b1e8/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b75a7f0680d16a41043864a897470324917b1e8/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0b75a7f0680d16a41043864a897470324917b1e8",
        "patch": "@@ -691,7 +691,7 @@ bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)\n     return success;\n }\n \n-void CWallet::SetUsedDestinationState(const uint256& hash, unsigned int n, bool used)\n+void CWallet::SetUsedDestinationState(WalletBatch& batch, const uint256& hash, unsigned int n, bool used)\n {\n     AssertLockHeld(cs_wallet);\n     const CWalletTx* srctx = GetWalletTx(hash);\n@@ -701,9 +701,9 @@ void CWallet::SetUsedDestinationState(const uint256& hash, unsigned int n, bool\n     if (ExtractDestination(srctx->tx->vout[n].scriptPubKey, dst)) {\n         if (IsMine(dst)) {\n             if (used && !GetDestData(dst, \"used\", nullptr)) {\n-                AddDestData(dst, \"used\", \"p\"); // p for \"present\", opposite of absent (null)\n+                AddDestData(batch, dst, \"used\", \"p\"); // p for \"present\", opposite of absent (null)\n             } else if (!used && GetDestData(dst, \"used\", nullptr)) {\n-                EraseDestData(dst, \"used\");\n+                EraseDestData(batch, dst, \"used\");\n             }\n         }\n     }\n@@ -734,7 +734,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n         // Mark used destinations\n         for (const CTxIn& txin : wtxIn.tx->vin) {\n             const COutPoint& op = txin.prevout;\n-            SetUsedDestinationState(op.hash, op.n, true);\n+            SetUsedDestinationState(batch, op.hash, op.n, true);\n         }\n     }\n \n@@ -3410,20 +3410,20 @@ unsigned int CWallet::ComputeTimeSmart(const CWalletTx& wtx) const\n     return nTimeSmart;\n }\n \n-bool CWallet::AddDestData(const CTxDestination &dest, const std::string &key, const std::string &value)\n+bool CWallet::AddDestData(WalletBatch& batch, const CTxDestination &dest, const std::string &key, const std::string &value)\n {\n     if (boost::get<CNoDestination>(&dest))\n         return false;\n \n     mapAddressBook[dest].destdata.insert(std::make_pair(key, value));\n-    return WalletBatch(*database).WriteDestData(EncodeDestination(dest), key, value);\n+    return batch.WriteDestData(EncodeDestination(dest), key, value);\n }\n \n-bool CWallet::EraseDestData(const CTxDestination &dest, const std::string &key)\n+bool CWallet::EraseDestData(WalletBatch& batch, const CTxDestination &dest, const std::string &key)\n {\n     if (!mapAddressBook[dest].destdata.erase(key))\n         return false;\n-    return WalletBatch(*database).EraseDestData(EncodeDestination(dest), key);\n+    return batch.EraseDestData(EncodeDestination(dest), key);\n }\n \n void CWallet::LoadDestData(const CTxDestination &dest, const std::string &key, const std::string &value)"
      },
      {
        "sha": "525cf432908479f9e7afb2a9ecbe0a85aff99d19",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b75a7f0680d16a41043864a897470324917b1e8/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b75a7f0680d16a41043864a897470324917b1e8/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=0b75a7f0680d16a41043864a897470324917b1e8",
        "patch": "@@ -795,7 +795,7 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     // Whether this or any UTXO with the same CTxDestination has been spent.\n     bool IsUsedDestination(const CTxDestination& dst) const;\n     bool IsUsedDestination(const uint256& hash, unsigned int n) const;\n-    void SetUsedDestinationState(const uint256& hash, unsigned int n, bool used) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void SetUsedDestinationState(WalletBatch& batch, const uint256& hash, unsigned int n, bool used) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     std::vector<OutputGroup> GroupOutputs(const std::vector<COutput>& outputs, bool single_coin) const;\n \n@@ -820,9 +820,9 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     bool LoadMinVersion(int nVersion) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n \n     //! Adds a destination data tuple to the store, and saves it to disk\n-    bool AddDestData(const CTxDestination& dest, const std::string& key, const std::string& value) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool AddDestData(WalletBatch& batch, const CTxDestination& dest, const std::string& key, const std::string& value) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Erases a destination data tuple in the store and on disk\n-    bool EraseDestData(const CTxDestination& dest, const std::string& key) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool EraseDestData(WalletBatch& batch, const CTxDestination& dest, const std::string& key) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Adds a destination data tuple to the store, without saving it to disk\n     void LoadDestData(const CTxDestination& dest, const std::string& key, const std::string& value) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Look up a destination data tuple in the store, return true if found false otherwise"
      }
    ]
  }
]