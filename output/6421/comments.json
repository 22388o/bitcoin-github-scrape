[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120622404",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-120622404",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 120622404,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDYyMjQwNA==",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?u=eab5d0cdbb6cc25087cb61d4ca4a6f85255f42a7&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-11T13:51:02Z",
    "updated_at": "2015-07-11T13:51:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "Needs rebase because #6410 is merged now.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120622404/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120635982",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-120635982",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 120635982,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDYzNTk4Mg==",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?u=636a89c913ac407f52bb8d57c4fff384b98f421f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-11T16:04:54Z",
    "updated_at": "2015-07-11T16:04:54Z",
    "author_association": "MEMBER",
    "body": "Nits from #6331 rebased at https://github.com/sipa/bitcoin/compare/limitpool...jtimon:pr-6421-0.11.99 (will force push to jtimon/pr-6421-0.11.99 as this gets rebased).\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120635982/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120652090",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-120652090",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 120652090,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDY1MjA5MA==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-11T18:45:38Z",
    "updated_at": "2015-07-11T18:45:38Z",
    "author_association": "MEMBER",
    "body": "@lapp0 You suggested using \"the new transaction's fees should pay for the size of the new plus removed transaction\". That doesn't help, as you can create a sequence of transactions that each replace the previous one, and each have enough fees to pay for both. This would give you infinite relay bandwidth at fixed cost.\n\nThe solution is perhaps to remember for each mempool transaction what the size of everything it has replaced is, but that's a bit more complex than I'm willing to do now. I've chosen the conservative approach here which is to look at the fee difference instead.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120652090/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120652225",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-120652225",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 120652225,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDY1MjIyNQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-11T18:49:07Z",
    "updated_at": "2015-07-11T18:49:07Z",
    "author_association": "MEMBER",
    "body": "@jtimon It's probably a bit more complicated than just a score function, I now realize. The mempool code is trying to optimize for fee/byte (currently), independently of what sorting is implemented by the index. I think we'll need a policy-controlled \"cost\" (as a generalization of size, perhaps corrected for UTXO differences) and policy-controlled \"revenue\" (as a generalization of fee). The reason is that you can't compute the \"score\" of a collection of transactions - you need (revenue1+revenue2)/(cost1+cost2) rather than just score1+score2.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120652225/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120652531",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-120652531",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 120652531,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDY1MjUzMQ==",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?u=eab5d0cdbb6cc25087cb61d4ca4a6f85255f42a7&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-11T18:57:24Z",
    "updated_at": "2015-07-11T18:57:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "Slightly tested. Running this code (git commit tip 3c638fc0ba82a9d9c235f428d098a098fc0b6b16, not the latest tip) since some hours with `-maxmempool=100`. Since 1h i have a stable dynamic memory size of ~100MB. Graph: http://bitcoin.jonasschnelli.ch/charts/mempool6410/\n\nLog filtered after the \"stored orphan txs\": https://gist.githubusercontent.com/jonasschnelli/1f2e89d64887710f6c5b/raw/dba3d68d79cc649cd7e01c992d40da8d46073431/gistfile1.txt\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120652531/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120663063",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-120663063",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 120663063,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDY2MzA2Mw==",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?u=636a89c913ac407f52bb8d57c4fff384b98f421f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-11T21:42:09Z",
    "updated_at": "2015-07-11T21:42:09Z",
    "author_association": "MEMBER",
    "body": "@sipa answered in #6331: bike-shed the name of the variable, the getter and the comparator, but please don't make the type CFeeRate so that we have to fix it later. int64_t should work perfectly fine for these changes.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120663063/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120730086",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-120730086",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 120730086,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDczMDA4Ng==",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?u=636a89c913ac407f52bb8d57c4fff384b98f421f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-12T15:20:26Z",
    "updated_at": "2015-07-12T15:20:26Z",
    "author_association": "MEMBER",
    "body": "I believe this could be much simpler (and the end result better) after #5709 (is 10 commits but ready to be squashed into the first one), but I doubt people want to read step by step to be sure behavior is not being changed. At least not more now than when it was opened...\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120730086/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120753654",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-120753654",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 120753654,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDc1MzY1NA==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-12T18:43:43Z",
    "updated_at": "2015-07-12T18:44:00Z",
    "author_association": "MEMBER",
    "body": "@jtimon It's a bit more complicated. The replacement code needs to have a way to know whether replacing a set of transactions with another transaction is a good idea. Contrary to what I first thought, just having a score to compare is not enough - if the index order doesn't match the feerate well, its search for sets to remove will degrade or fail.\n\nOne way to generalize this to something policy-controllable is to have a \"general reward\" (typically fee) and a \"general cost\" (typically bytes) determined by the policy at mempool entry time, and then compare reward/cost ratios (typically feerates), both in the index, and in the replacement code (the limiting code, but also for example CPFP combination code and RBF code). But it's really not as simple as making the index order configurable - sorry for saying so at first.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120753654/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120754922",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-120754922",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 120754922,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDc1NDkyMg==",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?u=636a89c913ac407f52bb8d57c4fff384b98f421f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-12T19:12:25Z",
    "updated_at": "2015-07-12T19:12:25Z",
    "author_association": "MEMBER",
    "body": "Even in that case, both the \"general reward\" and the \"general cost\" indexes can use int64_t instead of CFeeRate  and size_t respectively. Can we agree on that first?\n\nI still don't understand why this needs transaction replacement. We can add it or not as normal and, after adding, trim to the desired size. with this, we could have a unified index that it's just reward/cost instead of two separate ones.\nBut for transaction replacement, #6416 is what I had in mind. Something more flexible that is independent from the index or the mempool entries themselves. I just realized that ApproveTxReplacement needs a CCoinsViewCache parameter and it would be a good idea to call it later. Even a \"general reward\" and \"general cost\" index in the mempool may not be enough for certain replacement policies, for example, zero-conf-safer-RBF (also known as FSS-RBF, but it seems to me that everything is \"first seen safe\").\nSo I don't think we need or can generally solve replacements here: expiring old transactions before adding a new transaction and forcing the mempool to a given size just after that (simply by dropping until it is enough from the bottom of the unified index) should be enough.\nIn my opinion adding transaction replacement will unnecessarily complicate things, not only for this PR, but also for later changes in replacement policies (for example adding an option to use ZCS-RBF instead of FS as replacement policy) and with later stages of your own plan (https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120464993 ):\n\n> - Generalize the feerate here to a unified policy-dependent score (effectively removing the priority as it exists today, as in #6405).\n> - Implement block creation using this score-based index.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120754922/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120755721",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-120755721",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 120755721,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDc1NTcyMQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-12T19:32:02Z",
    "updated_at": "2015-07-12T19:32:02Z",
    "author_association": "MEMBER",
    "body": "@jtimon There is a DoS attack possible by mempool limiting, where someone sends a transaction that ends up at the bottom of the mempool, and then sends another transaction with slightly higher feerate, causing the previous one to be evicted later on. This leads to network broadcast bandwidth at much lower cost than the actual network relay fee, as discovered by @lapp0.\n\nThe solution is to treat block size limiting as transaction replacement with the mempool bottom (sorted by feerate/score), and require that the new transaction pays in fee for the relay of the old transactions that we kicked out.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120755721/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120755945",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-120755945",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 120755945,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDc1NTk0NQ==",
    "user": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-12T19:37:22Z",
    "updated_at": "2015-07-12T19:38:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "@sipa You don't need to optimize a ratio, if you can represent both the rewards and costs in comparable units.  Then you could optimize the difference.  I wonder if unit costs could be represented in BTC/byte ...\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120755945/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120756145",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-120756145",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 120756145,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDc1NjE0NQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-12T19:42:04Z",
    "updated_at": "2015-07-12T19:42:04Z",
    "author_association": "MEMBER",
    "body": "@dgenr8 Optimizing feerate is what you expect miners to do in their mempool, as it maximizes income given a constrained (by rule or propagation economics) block size. \n\n@jtimon Yes, I agree that instead of feerate and size we can use int64_t. Or double even. But the logic is already complicated enough here. I really don't think it's wise to spend more mental power of maintainers and reviewers to understand how this code will at some point generalize to a configurable policy.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120756145/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120756823",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-120756823",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 120756823,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDc1NjgyMw==",
    "user": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-12T19:55:21Z",
    "updated_at": "2015-07-12T20:10:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "@sipa Miners don't care about relay cost, which you are now trying to include.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120756823/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120758333",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-120758333",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 120758333,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDc1ODMzMw==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-12T20:04:36Z",
    "updated_at": "2015-07-12T20:05:25Z",
    "author_association": "MEMBER",
    "body": "@dgenr8 Of course. This is DoS protection code for relaying nodes, not for miners. Its primary purpose is preventing people from being able to spam the network, in various ways. It aims to build a mempool which is as aligned with miner's incentives as possible, but is restricted to prevent network actors from causing too high memory consumption, get massive flooding bandwidth or consume too much CPU power on the nodes traversed by it.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120758333/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120758848",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-120758848",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 120758848,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDc1ODg0OA==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-12T20:10:35Z",
    "updated_at": "2015-07-12T20:10:35Z",
    "author_association": "MEMBER",
    "body": "Pushed a new version which tries more than just the bottom transactions and their dependencies in the mempool, is more efficient, and is better documented.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120758848/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120759269",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-120759269",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 120759269,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDc1OTI2OQ==",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?u=636a89c913ac407f52bb8d57c4fff384b98f421f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-12T20:20:37Z",
    "updated_at": "2015-07-12T20:22:16Z",
    "author_association": "MEMBER",
    "body": "> @jtimon Yes, I agree that instead of feerate and size we can use int64_t. Or double even. But the logic is already complicated enough here. I really don't think it's wise to spend more mental power of maintainers and reviewers to understand how this code will at some point generalize to a configurable policy.\n\nWhatever, If `CFeeRate(nFee, nTxSize)` is more readable than `nFee / nTxSize` and https://github.com/jtimon/bitcoin/commit/00baf3d667b4a9e6641903eab78eed3cd01a2f46 makes things more complicated (I strongly disagree), let's not waste the time of today's reviewers and let's waste the time of future maintainers instead. This doesn't generalize anything (it is functionally equivalent!), it's just avoids introducing unnecessary barriers to generalization at this point. But if we're going \"spend too much mental power\" by thinking about a cleaner history, let's not do it and let's do things wrong instead for the shake of preserving such a vaguely defined resource. Since this is urgent, let's not make perfectly reasonable nits that will \"waste\" our time, let's write now what we already know we will have to erase tomorrow. I think we've already wasted enough time discussing this already and since you've been arguing against the little nit, I'm sure @ashleyholman will not want to incorporate it to #6331.\nI'll just write something down to remember to fix up what you're doing wrong now, that's fine.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120759269/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120760638",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-120760638",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 120760638,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDc2MDYzOA==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-12T20:42:45Z",
    "updated_at": "2015-07-12T21:09:24Z",
    "author_association": "MEMBER",
    "body": "@jtimon Making score be anything but feerate won't work, as the replacement code relies on that now. Making it generalizable will require more thinking than we should be doing right now, and calling it score when it can't just be anything is confusing IMHO - sorry for suggesting this before. But can we please keep the discussion and changes about how mempool policy will be introduced separate from this discussion?\n\nI don't care about the usage of CFeeRate though. CTxMemPoolEntry::GetFeeRate() could just return an int64_t and compute nFees / nTxSize on the fly even.\n\nEDIT: nFees / nTxSize won't work, as that's satoshi per byte, which offers very low accuracy. Something with higher accuracy than CFeeRate (even a floating point number...) wouldn't hurt.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120760638/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120760699",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-120760699",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 120760699,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDc2MDY5OQ==",
    "user": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?u=0b02049ec38b6bb7d55c5c66d9bbeb0d4b822129&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-12T20:43:59Z",
    "updated_at": "2015-07-12T20:43:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "Using CFeeRate is sufficient.  No need to over-engineer and over-complicate the matter.  +1 @sipa \n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120760699/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120834071",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-120834071",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 120834071,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDgzNDA3MQ==",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?u=636a89c913ac407f52bb8d57c4fff384b98f421f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-13T07:08:19Z",
    "updated_at": "2015-07-13T07:08:19Z",
    "author_association": "MEMBER",
    "body": "@jtimon Making score be anything but feerate won't work, as the replacement code relies on that now. Making it generalizable will require more thinking than we should be doing right now, and calling it score when it can't just be anything is confusing IMHO - sorry for suggesting this before. But can we please keep the discussion and changes about how mempool policy will be introduced separate from this discussion?\n\nOf course, I'm not been talking about generalizing for a while now, if only you had read my code instead of arguing with me about a variable name and one line of code...\nI'm tired about discussing about one line of code and the name of a variable, a class and a method.\nI will pretend #6331 has been merged already and there's no time to nit it anymore (given that my little 1-line + bike-shedding nit is soooo #@$% controversial).\n\n> Using CFeeRate is sufficient. No need to over-engineer and over-complicate the matter. +1 @sipa\n\nNo, using int64_t and `nFees * 1000 / nTxSize` is enough, a custom class for this index is over-engineering.  \nBut sure, let's introduce mistakes when we have plenty of time to fix them before being merged. I may correct this mistake in the future myself (or don't, but it's clear I'm the only one that wants to fix the mistake before introducing it, so why keep wasting everybody's time with a perfectly reasonable nit for #6331 if it has already been labelled as \"too complicated\" and nobody wants to read the 1-line change).\n\n> I don't care about the usage of CFeeRate though. CTxMemPoolEntry::GetFeeRate() could just return an int64_t and compute nFees / nTxSize on the fly even.\n\nYou mean like https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120634244 ( https://github.com/bitcoin/bitcoin/commit/f86244ea960cb0a9fabf7c89886061034c46774b ) and later even-simpler versions of the nit?\n\n> EDIT: nFees / nTxSize won't work, as that's satoshi per byte, which offers very low accuracy. Something with higher accuracy than CFeeRate (even a floating point number...) wouldn't hurt.\n\n`nScore = _nFee * 1000 / nTxSize;` is completely equivalent and IMO simpler as noted in:\nhttps://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120634244\n\nBut I'm tired about this, as said #6331 is closed for me. Does #6421 still accept nits or should I keep them for my version of \"phase 3\"? \n\n> - Generalize the feerate here to a unified policy-dependent score (effectively removing the priority as it exists today, as in #6405).\n\nOr should I better wait for 0.15.99 to avoid distracting people and wasting (definitely scarcer than I thought, possibly non-renewable) \"mental power\"?\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120834071/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120934575",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-120934575",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 120934575,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDkzNDU3NQ==",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?u=636a89c913ac407f52bb8d57c4fff384b98f421f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-13T13:52:00Z",
    "updated_at": "2015-07-13T13:52:00Z",
    "author_association": "MEMBER",
    "body": "So here are some suggestions that could be incorporated to this or maybe left for later: https://github.com/sipa/bitcoin/compare/limitpool...jtimon:limitpool_nits\nHere's the same after further simplification and indentation: https://github.com/sipa/bitcoin/compare/limitpool...jtimon:post_limitpool\n\nBut let's focus on https://github.com/sipa/bitcoin/commit/c7ef38980ab48db7cc56a6ebdf1ca2c03ef2453c first (although a look to https://github.com/sipa/bitcoin/commit/655810b963a46d4df2ca573926e030beca085500 may actually help understand it better).\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120934575/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120936415",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-120936415",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 120936415,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDkzNjQxNQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-13T13:57:07Z",
    "updated_at": "2015-07-13T13:57:07Z",
    "author_association": "MEMBER",
    "body": "Added a commit that removes CFeeRate and the feerate variable, and replaces it by something more efficient.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120936415/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120951182",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-120951182",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 120951182,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDk1MTE4Mg==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-13T14:37:43Z",
    "updated_at": "2015-07-13T14:37:43Z",
    "author_association": "MEMBER",
    "body": "@jtimon The changes to the free transaction decision logic look good to me - much more readable than the combined ifs all the way. Would you care to rebase?\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120951182/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/121201918",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-121201918",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 121201918,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTIwMTkxOA==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-14T11:03:37Z",
    "updated_at": "2015-07-14T11:03:37Z",
    "author_association": "MEMBER",
    "body": "Going to test.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/121201918/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/121236540",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-121236540",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 121236540,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTIzNjU0MA==",
    "user": {
      "login": "mikehearn",
      "id": 971089,
      "node_id": "MDQ6VXNlcjk3MTA4OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/971089?u=f32bbe8d8d0f9e10b1387f0aa582b1ee83b8aac5&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikehearn",
      "html_url": "https://github.com/mikehearn",
      "followers_url": "https://api.github.com/users/mikehearn/followers",
      "following_url": "https://api.github.com/users/mikehearn/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikehearn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikehearn/subscriptions",
      "organizations_url": "https://api.github.com/users/mikehearn/orgs",
      "repos_url": "https://api.github.com/users/mikehearn/repos",
      "events_url": "https://api.github.com/users/mikehearn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikehearn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-14T13:23:26Z",
    "updated_at": "2015-07-14T13:23:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "Miner's incentives aren't quite to maximise fees gathered above all else. Miners need Bitcoin to actually work for regular users, even in the case where there is a DoS attack on the network that's based on paying high fees. Otherwise the utility of the coins they're mining and thus their profits go down. That's why the notion of priority was invented, and why there's a region of the block dedicated to high priority transactions.\n\nSo, having a unified scoring function that takes both priority and fee into account might work better.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/121236540/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/121291705",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-121291705",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 121291705,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTI5MTcwNQ==",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?u=636a89c913ac407f52bb8d57c4fff384b98f421f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-14T16:04:33Z",
    "updated_at": "2015-07-14T16:04:33Z",
    "author_association": "MEMBER",
    "body": "Rebased https://github.com/sipa/bitcoin/compare/limitpool...jtimon:post_limitpool again with some changes.\nIf we don't care about not limiting free transactions that don't pass AllowFree() check when the caller  specifies  fLimitFree=false, this change becomes really simple: https://github.com/sipa/bitcoin/commit/68f0129c29543d6e744a73f168627c733cd3d98e\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/121291705/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/121386738",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-121386738",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 121386738,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTM4NjczOA==",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?u=636a89c913ac407f52bb8d57c4fff384b98f421f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-14T21:05:48Z",
    "updated_at": "2015-07-14T21:05:48Z",
    "author_association": "MEMBER",
    "body": "What about https://github.com/sipa/bitcoin/commit/44d29ff871c409670e7b09cb030886d7719680f6 and https://github.com/sipa/bitcoin/commit/2604e37866d289cad862c9e956a62509e3417427\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/121386738/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/121408086",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-121408086",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 121408086,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTQwODA4Ng==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-14T22:13:02Z",
    "updated_at": "2015-07-14T22:13:02Z",
    "author_association": "MEMBER",
    "body": "@morcos @sdaftuar Now every transaction is only tried with a 1/10 chance, and we bail out after 10 (actually tried) transactions, and after 20 failures even without finishing the current transaction.\n\nI tried with up to 32 failures, and it seems that 99% of succesful replacements happen with <=10 failures.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/121408086/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/121608691",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-121608691",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 121608691,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTYwODY5MQ==",
    "user": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?u=b7dd63827227d69794b5fe28797b1bd107b930dd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-15T13:04:34Z",
    "updated_at": "2015-07-15T13:04:34Z",
    "author_association": "MEMBER",
    "body": "The main concern I have with this approach is finding the best set of \"packages\" (transactions and their dependents) to replace in the mempool is a knapsack problem, and it is hard to strike the right balance between doing too much work and rejecting a potential replacement transaction that intuitively should make it into the mempool.  Also any indeterminism could lead to an unfortunate feedback loop where the p2p network serves as your retry loop since some of your peers might have accepted a tx you rejected.\n\nI'm not completely convinced that using [minRelayFee doubling](https://github.com/morcos/bitcoin/commit/1ff50ca373d8684061b617d9183999e7f1b33251) is an inferior approach on it's own, but what about combining the two ideas?  \n\nSo suppose you have a soft limit of 200MB for the mempool.  If a tx would cause the mempool to surpass this, then first you do a fast check of whether it passes the exponentially increased relay minimum (suppose the min doubles at 200MB and then every 20MB after that).  If the tx passes this increased minimum then it's let into the mempool without evicting anything.  If the tx doesn't pass this, then it gets a shot of evicting some packages from the mempool as in this pull.  \n\nI think the advantage of this is that all txs that are \"clearly\" better and should make it into the mempool just make it in quickly.   We could add a hard cap if desired, but it seems unnecessary since at 600MB you'll need to pay 1,000,000 the orig min relay fee to be fast path accepted.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/121608691/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/121618187",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-121618187",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 121618187,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTYxODE4Nw==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-15T13:32:36Z",
    "updated_at": "2015-07-15T13:32:36Z",
    "author_association": "MEMBER",
    "body": "@morcos I agree, though I do like this approach of having a hard cap in case any kind of fee-based soft limit is somehow bypassed. I think a goal should be to have all of bitcoin core's internal data structures capped.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/121618187/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/121630158",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-121630158",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 121630158,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTYzMDE1OA==",
    "user": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-15T14:16:39Z",
    "updated_at": "2015-07-15T14:16:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "@morcos A selfish node can just assign dependent transactions a higher cost than independent ones.  They require more space (since parents are required) and they can take longer to confirm than other txes with the same fee rate (since parents may have a lower fee rate).\n\nIt's impossible to guarantee that you have spender's whole \"package\" anyway, so the rules really need to work on individual transaction level.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/121630158/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/121644660",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-121644660",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 121644660,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTY0NDY2MA==",
    "user": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?u=b7dd63827227d69794b5fe28797b1bd107b930dd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-15T15:02:36Z",
    "updated_at": "2015-07-15T15:02:36Z",
    "author_association": "MEMBER",
    "body": "@dgenr8 If I understand your first paragraph, yes I think thats the fundamental problem.  But I'm not sure what you mean by rules working on an individual transaction level.  You have to kick out dependent transactions, and so if you don't take into account the fees those transactions paid, you make it easy for someone to get free relay bandwidth by sticking in a long chain and then replacing the parent with one small transaction.\n\n@laanwj yes, I think its not a problem to have a hard cap as well\n\n@sipa Sigh... Even with the extra fee reservoir idea alluded to on IRC, it still seems its very difficult to solve for this problem of the individual transactions that are sorted to the bottom of the mempool tending to be part of longer chains which actually aren't cheap in fee rate and therefore very hard to kick out.   Maybe we'll take a look at the full package approach from the beginning...\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/121644660/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/121677678",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-121677678",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 121677678,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTY3NzY3OA==",
    "user": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-15T16:53:19Z",
    "updated_at": "2015-07-15T16:53:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "@morcos In what I described, every child \"pays\" for its parents up-front in reduced mempool/relay attractiveness.  Multiple children pay again for the same parent, and there is a recursive effect.\n\nUnconfirmed chains are expensive to process, have huge DoS risk, and limited usefulness.  Replacement complicates everything.  I mentioned in a [mailing list post](http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009419.html) an overall approach I took.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/121677678/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/121918988",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-121918988",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 121918988,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTkxODk4OA==",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?u=636a89c913ac407f52bb8d57c4fff384b98f421f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-16T10:19:53Z",
    "updated_at": "2015-07-16T10:20:29Z",
    "author_association": "MEMBER",
    "body": "It seems everybody is happy with https://github.com/sipa/bitcoin/commit/8adacf100a36d92e263fe6295c767b087168aeaa \nCan we merge that first (after rebase) while we discuss the last commit?\n\n@morcos I'm not sure I understand your complains, but if the mempool is capped there must be some replacement criteria, even if it's the dumb \"never replace\" we have now (that's why I think the last commit would be clearer and more forward compatible with https://github.com/sipa/bitcoin/commit/44d29ff871c409670e7b09cb030886d7719680f6 ).\n\nIn fact, capping the mempool with the current first seen replacement policy (that is, all replacements forbidden policy) would be the simplest way to cap the mempool (although not precisely the best way to cap it). Anything beyond that (always rejecting new transactions when the mempool is full) must necessarily be more complicated, but also hopefully better than never replacing.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/121918988/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/121920323",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-121920323",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 121920323,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTkyMDMyMw==",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?u=636a89c913ac407f52bb8d57c4fff384b98f421f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-16T10:23:37Z",
    "updated_at": "2015-07-16T10:27:13Z",
    "author_association": "MEMBER",
    "body": "Btw, there's slightly related optimizations in #6445. The most relevant parts for this PR being in AcceptToMemoryPool:\n- Don't calculate nValueOut 5 times \n- Don't calculate nValueIn 3 times\n- Don't call CCoinsViewCache::HaveInputs 3 times\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/121920323/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/121940451",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-121940451",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 121940451,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTk0MDQ1MQ==",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?u=636a89c913ac407f52bb8d57c4fff384b98f421f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-16T12:11:47Z",
    "updated_at": "2015-07-16T12:11:47Z",
    "author_association": "MEMBER",
    "body": "Rebased version (with my suggestions on top) in https://github.com/jtimon/bitcoin/commits/post_limitpool\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/121940451/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/121943497",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-121943497",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 121943497,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTk0MzQ5Nw==",
    "user": {
      "login": "Diapolo",
      "id": 1419649,
      "node_id": "MDQ6VXNlcjE0MTk2NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1419649?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Diapolo",
      "html_url": "https://github.com/Diapolo",
      "followers_url": "https://api.github.com/users/Diapolo/followers",
      "following_url": "https://api.github.com/users/Diapolo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Diapolo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Diapolo/subscriptions",
      "organizations_url": "https://api.github.com/users/Diapolo/orgs",
      "repos_url": "https://api.github.com/users/Diapolo/repos",
      "events_url": "https://api.github.com/users/Diapolo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Diapolo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-16T12:30:55Z",
    "updated_at": "2015-07-16T12:30:55Z",
    "author_association": "NONE",
    "body": "Can this be rebased, the Qt keyword pull sneaked in here ;).\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/121943497/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/142343500",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-142343500",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
    "id": 142343500,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MjM0MzUwMA==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-22T16:39:21Z",
    "updated_at": "2015-09-22T16:39:21Z",
    "author_association": "MEMBER",
    "body": "Superseded by a dozen other PRs.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/142343500/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34412933",
    "pull_request_review_id": null,
    "id": 34412933,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDEyOTMz",
    "diff_hunk": "@@ -856,25 +856,45 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CAmount nFees = nValueIn-nValueOut;\n         double dPriority = view.GetPriority(tx, chainActive.Height());\n \n+        // Try to make space in mempool\n+        std::set<uint256> stagedelete;\n+        CAmount nFeesDeleted = 0;\n+        size_t nSizeDeleted = 0;\n+        if (!mempool.StageTrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, nFees, stagedelete, nFeesDeleted, nSizeDeleted)) {\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool-full-no-space\");\n+        }\n+        if (!stagedelete.empty()) {\n+            BOOST_FOREACH(const CTxIn& in, tx.vin) {\n+                if (stagedelete.count(in.prevout.hash)) {\n+                    return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool-full-dependency\");\n+                }\n+            }\n+        }\n+\n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), mempool.HasNoInputsOf(tx));\n         unsigned int nSize = entry.GetTxSize();\n \n+        if ((double)nFeesDeleted * nSize < (double)nFees * nSizeDeleted) {\n+            // The new transaction's feerate is below that of the replaced transactions.\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool-full-no-improve\");\n+        }\n+\n         // Don't accept it if it can't get into a block\n-        CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n+        CAmount txMinFee = GetMinRelayFee(tx, nSize + nSizeDeleted, true);\n         if (fLimitFree && nFees < txMinFee)\n             return state.DoS(0, error(\"AcceptToMemoryPool: not enough fees %s, %d < %d\",\n                                       hash.ToString(), nFees, txMinFee),",
    "path": "src/main.cpp",
    "position": null,
    "original_position": 32,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "489726e5d0cfbc3050e0e5f608690c155c4b9916",
    "user": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Need to update this error msg.\n",
    "created_at": "2015-07-11T14:09:06Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34412933",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34412933"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34412933"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34412933/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 886,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34412938",
    "pull_request_review_id": null,
    "id": 34412938,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDEyOTM4",
    "diff_hunk": "@@ -429,5 +439,47 @@ bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n \n size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n-    return memusage::DynamicUsage(mapTx) + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+    // Estimate the overhead of mapTx to be 5 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+}\n+\n+size_t CTxMemPool::GuessDynamicMemoryUsage(const CTxMemPoolEntry& entry) const {\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) + entry.DynamicMemoryUsage() + memusage::IncrementalDynamicUsage(mapNextTx) * entry.GetTx().vin.size();\n+}\n+\n+bool CTxMemPool::StageTrimToSize(size_t sizelimit, const CAmount& maxfeeremove, std::set<uint256>& stage, CAmount& totalfeeremoved, size_t& totalsizeremove) {\n+    size_t expsize = DynamicMemoryUsage();\n+    indexed_transaction_set::nth_index<1>::type::reverse_iterator it = mapTx.get<1>().rbegin();\n+    while (expsize > sizelimit && it != mapTx.get<1>().rend()) {\n+        std::deque<uint256> todo;\n+        todo.push_back(it->GetTx().GetHash());\n+        while (!todo.empty()) {\n+            uint256 donow = todo.front();\n+            const CTxMemPoolEntry* origTx = &*mapTx.find(donow);\n+            todo.pop_front();\n+            if (!stage.count(donow)) {\n+                stage.insert(donow);\n+                totalfeeremoved += origTx->GetFee();\n+                if (totalfeeremoved > maxfeeremove) {\n+                    return false;",
    "path": "src/txmempool.cpp",
    "position": null,
    "original_position": 197,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "489726e5d0cfbc3050e0e5f608690c155c4b9916",
    "user": {
      "login": "ashleyholman",
      "id": 549484,
      "node_id": "MDQ6VXNlcjU0OTQ4NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/549484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ashleyholman",
      "html_url": "https://github.com/ashleyholman",
      "followers_url": "https://api.github.com/users/ashleyholman/followers",
      "following_url": "https://api.github.com/users/ashleyholman/following{/other_user}",
      "gists_url": "https://api.github.com/users/ashleyholman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ashleyholman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ashleyholman/subscriptions",
      "organizations_url": "https://api.github.com/users/ashleyholman/orgs",
      "repos_url": "https://api.github.com/users/ashleyholman/repos",
      "events_url": "https://api.github.com/users/ashleyholman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ashleyholman/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "What happens if the lowest fee-rate transaction in the pool is a parent transaction to a chain of high fee transactions?  Wouldn't that prevent any eviction from happening, even though there may be other transactions that could be removed to make room?\n",
    "created_at": "2015-07-11T14:09:34Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34412938",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34412938"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34412938"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34412938/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 464,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34412964",
    "pull_request_review_id": null,
    "id": 34412964,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDEyOTY0",
    "diff_hunk": "@@ -429,5 +439,47 @@ bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n \n size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n-    return memusage::DynamicUsage(mapTx) + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+    // Estimate the overhead of mapTx to be 5 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+}\n+\n+size_t CTxMemPool::GuessDynamicMemoryUsage(const CTxMemPoolEntry& entry) const {\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) + entry.DynamicMemoryUsage() + memusage::IncrementalDynamicUsage(mapNextTx) * entry.GetTx().vin.size();\n+}\n+\n+bool CTxMemPool::StageTrimToSize(size_t sizelimit, const CAmount& maxfeeremove, std::set<uint256>& stage, CAmount& totalfeeremoved, size_t& totalsizeremove) {\n+    size_t expsize = DynamicMemoryUsage();\n+    indexed_transaction_set::nth_index<1>::type::reverse_iterator it = mapTx.get<1>().rbegin();\n+    while (expsize > sizelimit && it != mapTx.get<1>().rend()) {\n+        std::deque<uint256> todo;\n+        todo.push_back(it->GetTx().GetHash());\n+        while (!todo.empty()) {\n+            uint256 donow = todo.front();\n+            const CTxMemPoolEntry* origTx = &*mapTx.find(donow);\n+            todo.pop_front();\n+            if (!stage.count(donow)) {\n+                stage.insert(donow);\n+                totalfeeremoved += origTx->GetFee();\n+                if (totalfeeremoved > maxfeeremove) {\n+                    return false;",
    "path": "src/txmempool.cpp",
    "position": null,
    "original_position": 197,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "489726e5d0cfbc3050e0e5f608690c155c4b9916",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yup. Fixing that is complicated and/or expensive.\n",
    "created_at": "2015-07-11T14:12:39Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34412964",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34412964"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34412964"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34412964/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 464,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34412968",
    "pull_request_review_id": null,
    "id": 34412968,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDEyOTY4",
    "diff_hunk": "@@ -50,6 +50,8 @@ struct CNodeStateStats;\n static const bool DEFAULT_ALERTS = true;\n /** Default for -maxorphantx, maximum number of orphan transactions kept in memory */\n static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;\n+/** Default for -maxmempool, maximum megabytes of the mempool */\n+static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;",
    "path": "src/main.h",
    "position": null,
    "original_position": 5,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "489726e5d0cfbc3050e0e5f608690c155c4b9916",
    "user": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Can you update this comment to clarify if we're talking about txs or ram?\n",
    "created_at": "2015-07-11T14:13:09Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34412968",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34412968"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34412968"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34412968/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 54,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34412978",
    "pull_request_review_id": null,
    "id": 34412978,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDEyOTc4",
    "diff_hunk": "@@ -429,5 +439,47 @@ bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n \n size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n-    return memusage::DynamicUsage(mapTx) + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+    // Estimate the overhead of mapTx to be 5 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+}\n+\n+size_t CTxMemPool::GuessDynamicMemoryUsage(const CTxMemPoolEntry& entry) const {\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) + entry.DynamicMemoryUsage() + memusage::IncrementalDynamicUsage(mapNextTx) * entry.GetTx().vin.size();\n+}\n+\n+bool CTxMemPool::StageTrimToSize(size_t sizelimit, const CAmount& maxfeeremove, std::set<uint256>& stage, CAmount& totalfeeremoved, size_t& totalsizeremove) {\n+    size_t expsize = DynamicMemoryUsage();\n+    indexed_transaction_set::nth_index<1>::type::reverse_iterator it = mapTx.get<1>().rbegin();\n+    while (expsize > sizelimit && it != mapTx.get<1>().rend()) {\n+        std::deque<uint256> todo;\n+        todo.push_back(it->GetTx().GetHash());\n+        while (!todo.empty()) {\n+            uint256 donow = todo.front();\n+            const CTxMemPoolEntry* origTx = &*mapTx.find(donow);\n+            todo.pop_front();\n+            if (!stage.count(donow)) {\n+                stage.insert(donow);\n+                totalfeeremoved += origTx->GetFee();\n+                if (totalfeeremoved > maxfeeremove) {\n+                    return false;",
    "path": "src/txmempool.cpp",
    "position": null,
    "original_position": 197,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "489726e5d0cfbc3050e0e5f608690c155c4b9916",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "(Efficient) code that implements CPFP will likely fix this, as I expect that it will maintain caches of sizes/fees of children of transactions.\n",
    "created_at": "2015-07-11T14:14:24Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34412978",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34412978"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34412978"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34412978/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 464,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34413002",
    "pull_request_review_id": null,
    "id": 34413002,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDEzMDAy",
    "diff_hunk": "@@ -856,25 +856,45 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CAmount nFees = nValueIn-nValueOut;\n         double dPriority = view.GetPriority(tx, chainActive.Height());\n \n+        // Try to make space in mempool\n+        std::set<uint256> stagedelete;\n+        CAmount nFeesDeleted = 0;\n+        size_t nSizeDeleted = 0;\n+        if (!mempool.StageTrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, nFees, stagedelete, nFeesDeleted, nSizeDeleted)) {\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool-full-no-space\");\n+        }\n+        if (!stagedelete.empty()) {\n+            BOOST_FOREACH(const CTxIn& in, tx.vin) {\n+                if (stagedelete.count(in.prevout.hash)) {\n+                    return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool-full-dependency\");\n+                }\n+            }\n+        }\n+\n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), mempool.HasNoInputsOf(tx));\n         unsigned int nSize = entry.GetTxSize();\n \n+        if ((double)nFeesDeleted * nSize < (double)nFees * nSizeDeleted) {\n+            // The new transaction's feerate is below that of the replaced transactions.\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool-full-no-improve\");\n+        }\n+\n         // Don't accept it if it can't get into a block\n-        CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n+        CAmount txMinFee = GetMinRelayFee(tx, nSize + nSizeDeleted, true);\n         if (fLimitFree && nFees < txMinFee)\n             return state.DoS(0, error(\"AcceptToMemoryPool: not enough fees %s, %d < %d\",\n                                       hash.ToString(), nFees, txMinFee),",
    "path": "src/main.cpp",
    "position": null,
    "original_position": 32,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "489726e5d0cfbc3050e0e5f608690c155c4b9916",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Suggestion?\n",
    "created_at": "2015-07-11T14:17:17Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34413002",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34413002"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34413002"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34413002/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 886,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34413014",
    "pull_request_review_id": null,
    "id": 34413014,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDEzMDE0",
    "diff_hunk": "@@ -50,6 +50,8 @@ struct CNodeStateStats;\n static const bool DEFAULT_ALERTS = true;\n /** Default for -maxorphantx, maximum number of orphan transactions kept in memory */\n static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;\n+/** Default for -maxmempool, maximum megabytes of the mempool */\n+static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;",
    "path": "src/main.h",
    "position": null,
    "original_position": 5,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "489726e5d0cfbc3050e0e5f608690c155c4b9916",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed.\n",
    "created_at": "2015-07-11T14:18:50Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34413014",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34413014"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34413014"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34413014/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 54,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34413107",
    "pull_request_review_id": null,
    "id": 34413107,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDEzMTA3",
    "diff_hunk": "@@ -856,25 +856,45 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CAmount nFees = nValueIn-nValueOut;\n         double dPriority = view.GetPriority(tx, chainActive.Height());\n \n+        // Try to make space in mempool\n+        std::set<uint256> stagedelete;\n+        CAmount nFeesDeleted = 0;\n+        size_t nSizeDeleted = 0;\n+        if (!mempool.StageTrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, nFees, stagedelete, nFeesDeleted, nSizeDeleted)) {\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool-full-no-space\");\n+        }\n+        if (!stagedelete.empty()) {\n+            BOOST_FOREACH(const CTxIn& in, tx.vin) {\n+                if (stagedelete.count(in.prevout.hash)) {\n+                    return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool-full-dependency\");\n+                }\n+            }\n+        }\n+\n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), mempool.HasNoInputsOf(tx));\n         unsigned int nSize = entry.GetTxSize();\n \n+        if ((double)nFeesDeleted * nSize < (double)nFees * nSizeDeleted) {\n+            // The new transaction's feerate is below that of the replaced transactions.\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool-full-no-improve\");\n+        }\n+\n         // Don't accept it if it can't get into a block\n-        CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n+        CAmount txMinFee = GetMinRelayFee(tx, nSize + nSizeDeleted, true);\n         if (fLimitFree && nFees < txMinFee)\n             return state.DoS(0, error(\"AcceptToMemoryPool: not enough fees %s, %d < %d\",\n                                       hash.ToString(), nFees, txMinFee),",
    "path": "src/main.cpp",
    "position": null,
    "original_position": 32,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "489726e5d0cfbc3050e0e5f608690c155c4b9916",
    "user": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Oh, actually I misread it; no changes needed.\n",
    "created_at": "2015-07-11T14:29:32Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34413107",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34413107"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34413107"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34413107/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 886,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34413313",
    "pull_request_review_id": null,
    "id": 34413313,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDEzMzEz",
    "diff_hunk": "@@ -429,5 +439,47 @@ bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n \n size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n-    return memusage::DynamicUsage(mapTx) + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+    // Estimate the overhead of mapTx to be 5 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+}\n+\n+size_t CTxMemPool::GuessDynamicMemoryUsage(const CTxMemPoolEntry& entry) const {\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) + entry.DynamicMemoryUsage() + memusage::IncrementalDynamicUsage(mapNextTx) * entry.GetTx().vin.size();\n+}\n+\n+bool CTxMemPool::StageTrimToSize(size_t sizelimit, const CAmount& maxfeeremove, std::set<uint256>& stage, CAmount& totalfeeremoved, size_t& totalsizeremove) {\n+    size_t expsize = DynamicMemoryUsage();\n+    indexed_transaction_set::nth_index<1>::type::reverse_iterator it = mapTx.get<1>().rbegin();\n+    while (expsize > sizelimit && it != mapTx.get<1>().rend()) {\n+        std::deque<uint256> todo;\n+        todo.push_back(it->GetTx().GetHash());\n+        while (!todo.empty()) {\n+            uint256 donow = todo.front();\n+            const CTxMemPoolEntry* origTx = &*mapTx.find(donow);\n+            todo.pop_front();\n+            if (!stage.count(donow)) {\n+                stage.insert(donow);\n+                totalfeeremoved += origTx->GetFee();\n+                if (totalfeeremoved > maxfeeremove) {\n+                    return false;",
    "path": "src/txmempool.cpp",
    "position": null,
    "original_position": 197,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "489726e5d0cfbc3050e0e5f608690c155c4b9916",
    "user": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "CPFP could work with this by turning individual transactions into \"packages\" of transactions whenever a parent pays more fees/KB than a child+parent. Removal would then remove the whole \"package\" in one go; there would never be a situation where removal was blocked.\n\nThat said, I'd be inclined to merge this pull-req first, then work on the fixes for the edge cases second.\n\nOn 11 July 2015 10:15:01 GMT-04:00, Pieter Wuille notifications@github.com wrote:\n\n> > +\n> > +bool CTxMemPool::StageTrimToSize(size_t sizelimit, const CAmount&\n> > maxfeeremove, std::set<uint256>& stage, CAmount& totalfeeremoved,\n> > size_t& totalsizeremove) {\n> > -    size_t expsize = DynamicMemoryUsage();\n> > -    indexed_transaction_set::nth_index<1>::type::reverse_iterator it\n> >   = mapTx.get<1>().rbegin();\n> > -    while (expsize > sizelimit && it != mapTx.get<1>().rend()) {\n> > -        std::deque<uint256> todo;\n> > -        todo.push_back(it->GetTx().GetHash());\n> > -        while (!todo.empty()) {\n> > -            uint256 donow = todo.front();\n> > -            const CTxMemPoolEntry\\* origTx = &*mapTx.find(donow);\n> > -            todo.pop_front();\n> > -            if (!stage.count(donow)) {\n> > -                stage.insert(donow);\n> > -                totalfeeremoved += origTx->GetFee();\n> > -                if (totalfeeremoved > maxfeeremove) {\n> > -                    return false;\n> \n> (Efficient) code that implements CPFP will likely fix this, as I expect\n> that it will maintain caches of sizes/fees of children of transactions.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/bitcoin/bitcoin/pull/6421/files#r34412978\n",
    "created_at": "2015-07-11T14:56:31Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34413313",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34413313"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34413313"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34413313/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 464,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34413453",
    "pull_request_review_id": null,
    "id": 34413453,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDEzNDUz",
    "diff_hunk": "@@ -429,5 +439,47 @@ bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n \n size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n-    return memusage::DynamicUsage(mapTx) + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+    // Estimate the overhead of mapTx to be 5 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+}\n+\n+size_t CTxMemPool::GuessDynamicMemoryUsage(const CTxMemPoolEntry& entry) const {\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) + entry.DynamicMemoryUsage() + memusage::IncrementalDynamicUsage(mapNextTx) * entry.GetTx().vin.size();\n+}\n+\n+bool CTxMemPool::StageTrimToSize(size_t sizelimit, const CAmount& maxfeeremove, std::set<uint256>& stage, CAmount& totalfeeremoved, size_t& totalsizeremove) {\n+    size_t expsize = DynamicMemoryUsage();\n+    indexed_transaction_set::nth_index<1>::type::reverse_iterator it = mapTx.get<1>().rbegin();\n+    while (expsize > sizelimit && it != mapTx.get<1>().rend()) {\n+        std::deque<uint256> todo;\n+        todo.push_back(it->GetTx().GetHash());\n+        while (!todo.empty()) {\n+            uint256 donow = todo.front();\n+            const CTxMemPoolEntry* origTx = &*mapTx.find(donow);\n+            todo.pop_front();\n+            if (!stage.count(donow)) {\n+                stage.insert(donow);\n+                totalfeeremoved += origTx->GetFee();\n+                if (totalfeeremoved > maxfeeremove) {\n+                    return false;",
    "path": "src/txmempool.cpp",
    "position": null,
    "original_position": 197,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "489726e5d0cfbc3050e0e5f608690c155c4b9916",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Agree.\n",
    "created_at": "2015-07-11T15:10:12Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34413453",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34413453"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34413453"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34413453/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 464,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34413490",
    "pull_request_review_id": null,
    "id": 34413490,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDEzNDkw",
    "diff_hunk": "@@ -429,5 +439,47 @@ bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n \n size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n-    return memusage::DynamicUsage(mapTx) + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+    // Estimate the overhead of mapTx to be 5 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+}\n+\n+size_t CTxMemPool::GuessDynamicMemoryUsage(const CTxMemPoolEntry& entry) const {\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) + entry.DynamicMemoryUsage() + memusage::IncrementalDynamicUsage(mapNextTx) * entry.GetTx().vin.size();\n+}\n+\n+bool CTxMemPool::StageTrimToSize(size_t sizelimit, const CAmount& maxfeeremove, std::set<uint256>& stage, CAmount& totalfeeremoved, size_t& totalsizeremove) {\n+    size_t expsize = DynamicMemoryUsage();\n+    indexed_transaction_set::nth_index<1>::type::reverse_iterator it = mapTx.get<1>().rbegin();\n+    while (expsize > sizelimit && it != mapTx.get<1>().rend()) {\n+        std::deque<uint256> todo;\n+        todo.push_back(it->GetTx().GetHash());\n+        while (!todo.empty()) {\n+            uint256 donow = todo.front();\n+            const CTxMemPoolEntry* origTx = &*mapTx.find(donow);\n+            todo.pop_front();\n+            if (!stage.count(donow)) {\n+                stage.insert(donow);\n+                totalfeeremoved += origTx->GetFee();\n+                if (totalfeeremoved > maxfeeremove) {\n+                    return false;",
    "path": "src/txmempool.cpp",
    "position": null,
    "original_position": 197,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "489726e5d0cfbc3050e0e5f608690c155c4b9916",
    "user": {
      "login": "ashleyholman",
      "id": 549484,
      "node_id": "MDQ6VXNlcjU0OTQ4NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/549484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ashleyholman",
      "html_url": "https://github.com/ashleyholman",
      "followers_url": "https://api.github.com/users/ashleyholman/followers",
      "following_url": "https://api.github.com/users/ashleyholman/following{/other_user}",
      "gists_url": "https://api.github.com/users/ashleyholman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ashleyholman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ashleyholman/subscriptions",
      "organizations_url": "https://api.github.com/users/ashleyholman/orgs",
      "repos_url": "https://api.github.com/users/ashleyholman/repos",
      "events_url": "https://api.github.com/users/ashleyholman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ashleyholman/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You could return to the outer loop and try again on the next tx, up until you hit one that has a feerate >= the one you are trying to add.  Although that does add a lot of extra work.\n",
    "created_at": "2015-07-11T15:13:39Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34413490",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34413490"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34413490"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34413490/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 464,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34413532",
    "pull_request_review_id": null,
    "id": 34413532,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDEzNTMy",
    "diff_hunk": "@@ -429,5 +439,47 @@ bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n \n size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n-    return memusage::DynamicUsage(mapTx) + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+    // Estimate the overhead of mapTx to be 5 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+}\n+\n+size_t CTxMemPool::GuessDynamicMemoryUsage(const CTxMemPoolEntry& entry) const {\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) + entry.DynamicMemoryUsage() + memusage::IncrementalDynamicUsage(mapNextTx) * entry.GetTx().vin.size();\n+}\n+\n+bool CTxMemPool::StageTrimToSize(size_t sizelimit, const CAmount& maxfeeremove, std::set<uint256>& stage, CAmount& totalfeeremoved, size_t& totalsizeremove) {\n+    size_t expsize = DynamicMemoryUsage();\n+    indexed_transaction_set::nth_index<1>::type::reverse_iterator it = mapTx.get<1>().rbegin();\n+    while (expsize > sizelimit && it != mapTx.get<1>().rend()) {\n+        std::deque<uint256> todo;\n+        todo.push_back(it->GetTx().GetHash());\n+        while (!todo.empty()) {\n+            uint256 donow = todo.front();\n+            const CTxMemPoolEntry* origTx = &*mapTx.find(donow);\n+            todo.pop_front();\n+            if (!stage.count(donow)) {\n+                stage.insert(donow);\n+                totalfeeremoved += origTx->GetFee();\n+                if (totalfeeremoved > maxfeeremove) {\n+                    return false;",
    "path": "src/txmempool.cpp",
    "position": null,
    "original_position": 197,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "489726e5d0cfbc3050e0e5f608690c155c4b9916",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "That risks quadratic work...\n",
    "created_at": "2015-07-11T15:20:45Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34413532",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34413532"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34413532"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34413532/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 464,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34431947",
    "pull_request_review_id": null,
    "id": 34431947,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDMxOTQ3",
    "diff_hunk": "@@ -62,6 +68,27 @@ class CTxMemPoolEntry\n     size_t DynamicMemoryUsage() const { return nUsageSize; }\n };\n \n+// extracts a TxMemPoolEntry's transaction hash\n+struct mempoolentry_txid\n+{\n+    typedef uint256 result_type;\n+    result_type operator() (const CTxMemPoolEntry &entry) const\n+    {\n+        return entry.GetTx().GetHash();\n+    }\n+};\n+\n+class CompareTxMemPoolEntryByFee",
    "path": "src/txmempool.h",
    "position": null,
    "original_position": 43,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "0a917df8e2c91a58fa8ed2667c867e27162b62e6",
    "user": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "s/CompareTxMemPoolEntryByFee/CompareTxMemPoolEntryByFeeRate/\n\nMore verbose sure, but let's not confuse people.\n",
    "created_at": "2015-07-13T03:52:17Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34431947",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34431947"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34431947"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34431947/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 81,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34432344",
    "pull_request_review_id": null,
    "id": 34432344,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDMyMzQ0",
    "diff_hunk": "@@ -138,6 +179,15 @@ class CTxMemPool\n     void ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta);\n     void ClearPrioritisation(const uint256 hash);\n \n+    /** Build a list of transaction (hashes) to remove such that:\n+     *  - The list is consistent (if a parent is included, all its dependencies are included as well).\n+     *  - Removing said list will reduce the DynamicMemoryUsage below sizelimit.\n+     *  - At most maxfeeremove worth of fees will be removed.\n+     *  - No transaction whose hash is in prot will be removed.\n+     */\n+    bool StageTrimToSize(size_t sizelimit, const CAmount& maxfeeremove, const CFeeRate& repfeerate, const std::set<uint256>& prot, std::set<uint256>& stage, CAmount& totalfeeremoved, size_t& totalsizeremoved);\n+    void RemoveStaged(std::set<uint256>& stage);",
    "path": "src/txmempool.h",
    "position": null,
    "original_position": 99,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "0a917df8e2c91a58fa8ed2667c867e27162b62e6",
    "user": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If RemoveStaged() is kept as a separate function, we should document what it does.\n\nEqually, should it remain a separate function? The code using it could very well be more clear if it just does the removal itself.\n",
    "created_at": "2015-07-13T04:10:28Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34432344",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34432344"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34432344"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34432344/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 192,
    "original_line": 189,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34436620",
    "pull_request_review_id": null,
    "id": 34436620,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDM2NjIw",
    "diff_hunk": "@@ -62,6 +68,27 @@ class CTxMemPoolEntry\n     size_t DynamicMemoryUsage() const { return nUsageSize; }\n };\n \n+// extracts a TxMemPoolEntry's transaction hash\n+struct mempoolentry_txid\n+{\n+    typedef uint256 result_type;\n+    result_type operator() (const CTxMemPoolEntry &entry) const\n+    {\n+        return entry.GetTx().GetHash();\n+    }\n+};\n+\n+class CompareTxMemPoolEntryByFee",
    "path": "src/txmempool.h",
    "position": null,
    "original_position": 43,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "0a917df8e2c91a58fa8ed2667c867e27162b62e6",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If we're only having 1 comparator (and having more than one would be over-complicating this), simply CompareTxMemPoolEntry or TxMemPoolEntryComparator is enough.\nOf course, both suggestions are just bike-shedding. \n",
    "created_at": "2015-07-13T06:47:49Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34436620",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34436620"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34436620"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34436620/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 81,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34452910",
    "pull_request_review_id": null,
    "id": 34452910,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDUyOTEw",
    "diff_hunk": "@@ -859,22 +859,39 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), mempool.HasNoInputsOf(tx));\n         unsigned int nSize = entry.GetTxSize();\n \n+        // Try to make space in mempool\n+        std::set<uint256> protect;\n+        BOOST_FOREACH(const CTxIn& in, tx.vin) {\n+            protect.insert(in.prevout.hash);\n+        }\n+        std::set<uint256> stagedelete;\n+        CAmount nFeesDeleted = 0;\n+        size_t nSizeDeleted = 0;\n+        if (!mempool.StageTrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, nFees, entry.GetFeeRate(), protect, stagedelete, nFeesDeleted, nSizeDeleted)) {",
    "path": "src/main.cpp",
    "position": null,
    "original_position": 39,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "0a917df8e2c91a58fa8ed2667c867e27162b62e6",
    "user": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It'd be better if we added the size of the new tx to the size limit, as right now the limit can be exceeded; I'm sure this is going to result in issues getting raised... GuessDynamicMemoryUsage() could be used for that if I understand its purpose correctly.\n",
    "created_at": "2015-07-13T11:08:43Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34452910",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34452910"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34452910"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34452910/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 870,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34453117",
    "pull_request_review_id": null,
    "id": 34453117,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDUzMTE3",
    "diff_hunk": "@@ -859,22 +859,39 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), mempool.HasNoInputsOf(tx));\n         unsigned int nSize = entry.GetTxSize();\n \n+        // Try to make space in mempool\n+        std::set<uint256> protect;\n+        BOOST_FOREACH(const CTxIn& in, tx.vin) {\n+            protect.insert(in.prevout.hash);\n+        }\n+        std::set<uint256> stagedelete;\n+        CAmount nFeesDeleted = 0;\n+        size_t nSizeDeleted = 0;\n+        if (!mempool.StageTrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, nFees, entry.GetFeeRate(), protect, stagedelete, nFeesDeleted, nSizeDeleted)) {",
    "path": "src/main.cpp",
    "position": null,
    "original_position": 39,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "0a917df8e2c91a58fa8ed2667c867e27162b62e6",
    "user": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Equally, maybe change StageTrimToSize() to take a CTransaction()/CTxMemPoolEntry() and figure out all that stuff itself?\n",
    "created_at": "2015-07-13T11:12:18Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34453117",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34453117"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34453117"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34453117/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 870,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34454760",
    "pull_request_review_id": null,
    "id": 34454760,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDU0NzYw",
    "diff_hunk": "@@ -429,5 +439,89 @@ bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n \n size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n-    return memusage::DynamicUsage(mapTx) + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+    // Estimate the overhead of mapTx to be 5 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+}\n+\n+size_t CTxMemPool::GuessDynamicMemoryUsage(const CTxMemPoolEntry& entry) const {\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) + entry.DynamicMemoryUsage() + memusage::IncrementalDynamicUsage(mapNextTx) * entry.GetTx().vin.size();\n+}\n+\n+bool CTxMemPool::StageTrimToSize(size_t sizelimit, const CAmount& maxfeeremove, const CFeeRate& repfeerate, const std::set<uint256>& prot, std::set<uint256>& stage, CAmount& totalfeeremoved, size_t& totalsizeremoved) {\n+    size_t expsize = DynamicMemoryUsage(); // Track the expected resulting memory usage of the mempool.\n+    indexed_transaction_set::nth_index<1>::type::reverse_iterator it = mapTx.get<1>().rbegin();\n+    int fails = 0; // Number of mempool transactions iterated over that were not included in the stage.\n+    // Iterate from lowest feerate to highest feerate in the mempool:\n+    while (expsize > sizelimit && it != mapTx.get<1>().rend()) {\n+        const uint256& hash = it->GetTx().GetHash();\n+        if (stage.count(hash)) {\n+            // If the transaction is already staged for deletion, we know its descendants are already processed, so skip it.\n+            it++;\n+            continue;\n+        }\n+        if (it->GetFeeRate() > repfeerate) {\n+            // If the transaction's feerate is worse than what we're looking for, we have processed everything in the mempool\n+            // that could improve the staged set. If we don't have an acceptable solution by now, bail out.\n+            return false;\n+        }\n+        std::deque<uint256> todo; // List of hashes that we still need to process (descendants of 'hash').\n+        std::set<uint256> now; // Set of hashes that will need to be added to stage if 'hash' is included.\n+        CAmount nowfee = 0; // Sum of the fees in 'now'.\n+        size_t nowsize = 0; // Sum of the tx sizes in 'now'.\n+        size_t nowusage = 0; // Sum of the memory usages of transactions in 'now'.\n+        int iternow = 0; // Transactions we've inspected so far while determining whether 'hash' is acceptable.\n+        todo.push_back(it->GetTx().GetHash()); // Add 'hash' to the todo list, to initiate processing its children.\n+        bool good = true; // Whether including 'hash' (and all its descendants) is a good idea.\n+        // Iterate breadth-first over all descendants of transaction with hash 'hash'.\n+        while (!todo.empty()) {\n+            uint256 hashnow = todo.front();\n+            if (prot.count(hashnow)) {\n+                // If this transaction is in the protected set, we're done with 'hash'.\n+                good = false;\n+                break;\n+            }\n+            iternow++; // We only count transactions we actually had to go find in the mempool.\n+            const CTxMemPoolEntry* origTx = &*mapTx.find(hashnow);\n+            nowfee += origTx->GetFee();\n+            if (totalfeeremoved + nowfee > maxfeeremove) {\n+                // If this pushes up to the total fees deleted too high, we're done with 'hash'.\n+                good = false;\n+                break;\n+            }\n+            todo.pop_front();\n+            // Add 'hashnow' to the 'now' set, and update its statistics.\n+            now.insert(hashnow);\n+            nowusage += GuessDynamicMemoryUsage(*origTx);\n+            nowsize += origTx->GetTxSize();\n+            // Find dependencies of 'hashnow' and them to todo.\n+            std::map<COutPoint, CInPoint>::iterator iter = mapNextTx.lower_bound(COutPoint(hashnow, 0));\n+            while (iter != mapNextTx.end() && iter->first.hash == hashnow) {\n+                const uint256& nexthash = iter->second.ptx->GetHash();\n+                if (!(stage.count(nexthash) || now.count(nexthash))) {\n+                    todo.push_back(nexthash);\n+                }\n+                iter++;\n+            }\n+        }",
    "path": "src/txmempool.cpp",
    "position": 244,
    "original_position": 238,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "0a917df8e2c91a58fa8ed2667c867e27162b62e6",
    "user": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The worst-case for this while() loop is that it traverses the entire mempool, setting iternow to the number of txs in the mempool; the fails/iternow check should probably be on the while loop instead.\n",
    "created_at": "2015-07-13T11:39:50Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34454760",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34454760"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34454760"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34454760/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 518,
    "original_line": 505,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34454910",
    "pull_request_review_id": null,
    "id": 34454910,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDU0OTEw",
    "diff_hunk": "@@ -62,6 +68,27 @@ class CTxMemPoolEntry\n     size_t DynamicMemoryUsage() const { return nUsageSize; }\n };\n \n+// extracts a TxMemPoolEntry's transaction hash\n+struct mempoolentry_txid\n+{\n+    typedef uint256 result_type;\n+    result_type operator() (const CTxMemPoolEntry &entry) const\n+    {\n+        return entry.GetTx().GetHash();\n+    }\n+};\n+\n+class CompareTxMemPoolEntryByFee",
    "path": "src/txmempool.h",
    "position": null,
    "original_position": 43,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "0a917df8e2c91a58fa8ed2667c867e27162b62e6",
    "user": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "NACK\n\nAny comparator is ultimately going to be about profit-per-byte. (modulo radical design changes to how the Bitcoin protocol works)\n",
    "created_at": "2015-07-13T11:42:45Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34454910",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34454910"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34454910"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34454910/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 81,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34456412",
    "pull_request_review_id": null,
    "id": 34456412,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDU2NDEy",
    "diff_hunk": "@@ -859,22 +859,39 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), mempool.HasNoInputsOf(tx));\n         unsigned int nSize = entry.GetTxSize();\n \n+        // Try to make space in mempool\n+        std::set<uint256> protect;\n+        BOOST_FOREACH(const CTxIn& in, tx.vin) {\n+            protect.insert(in.prevout.hash);\n+        }\n+        std::set<uint256> stagedelete;\n+        CAmount nFeesDeleted = 0;\n+        size_t nSizeDeleted = 0;\n+        if (!mempool.StageTrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, nFees, entry.GetFeeRate(), protect, stagedelete, nFeesDeleted, nSizeDeleted)) {\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool-full\");\n+        }\n+\n+        if ((double)nFeesDeleted * nSize > (double)nFees * nSizeDeleted) {\n+            // The new transaction's feerate is below that of the replaced transactions.\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool-full-no-improve\");\n+        }\n+\n         // Don't accept it if it can't get into a block\n         CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n-        if (fLimitFree && nFees < txMinFee)\n+        if (fLimitFree && nFees - nFeesDeleted < txMinFee)\n             return state.DoS(0, error(\"AcceptToMemoryPool: not enough fees %s, %d < %d\",",
    "path": "src/main.cpp",
    "position": null,
    "original_position": 52,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "0a917df8e2c91a58fa8ed2667c867e27162b62e6",
    "user": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Change this to nFees < txMinFee + nFeesDeleted and correspondingly change the DoS error message to \"%d < %d + %d\" - right now we could get the left hand to be > than the right hand in the error message printout.\n\nThat said, a look in my debug.log indicates that this code never gets triggered with this patch, not sure why yet.\n",
    "created_at": "2015-07-13T12:08:57Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34456412",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34456412"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34456412"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34456412/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 895,
    "original_line": 882,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34456479",
    "pull_request_review_id": null,
    "id": 34456479,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDU2NDc5",
    "diff_hunk": "@@ -859,22 +859,39 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), mempool.HasNoInputsOf(tx));\n         unsigned int nSize = entry.GetTxSize();\n \n+        // Try to make space in mempool\n+        std::set<uint256> protect;\n+        BOOST_FOREACH(const CTxIn& in, tx.vin) {\n+            protect.insert(in.prevout.hash);\n+        }\n+        std::set<uint256> stagedelete;\n+        CAmount nFeesDeleted = 0;\n+        size_t nSizeDeleted = 0;\n+        if (!mempool.StageTrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, nFees, entry.GetFeeRate(), protect, stagedelete, nFeesDeleted, nSizeDeleted)) {\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool-full\");\n+        }\n+\n+        if ((double)nFeesDeleted * nSize > (double)nFees * nSizeDeleted) {\n+            // The new transaction's feerate is below that of the replaced transactions.\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool-full-no-improve\");\n+        }\n+\n         // Don't accept it if it can't get into a block\n         CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n-        if (fLimitFree && nFees < txMinFee)\n+        if (fLimitFree && nFees - nFeesDeleted < txMinFee)\n             return state.DoS(0, error(\"AcceptToMemoryPool: not enough fees %s, %d < %d\",",
    "path": "src/main.cpp",
    "position": null,
    "original_position": 52,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "0a917df8e2c91a58fa8ed2667c867e27162b62e6",
    "user": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Of course, another possibility is to change nFees to nDeltaFees = nFees - nFeesDeleted everywhere.\n",
    "created_at": "2015-07-13T12:10:02Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34456479",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34456479"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34456479"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34456479/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 895,
    "original_line": 882,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34464994",
    "pull_request_review_id": null,
    "id": 34464994,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDY0OTk0",
    "diff_hunk": "@@ -429,5 +439,89 @@ bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n \n size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n-    return memusage::DynamicUsage(mapTx) + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+    // Estimate the overhead of mapTx to be 5 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+}\n+\n+size_t CTxMemPool::GuessDynamicMemoryUsage(const CTxMemPoolEntry& entry) const {\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) + entry.DynamicMemoryUsage() + memusage::IncrementalDynamicUsage(mapNextTx) * entry.GetTx().vin.size();\n+}\n+\n+bool CTxMemPool::StageTrimToSize(size_t sizelimit, const CAmount& maxfeeremove, const CFeeRate& repfeerate, const std::set<uint256>& prot, std::set<uint256>& stage, CAmount& totalfeeremoved, size_t& totalsizeremoved) {\n+    size_t expsize = DynamicMemoryUsage(); // Track the expected resulting memory usage of the mempool.\n+    indexed_transaction_set::nth_index<1>::type::reverse_iterator it = mapTx.get<1>().rbegin();\n+    int fails = 0; // Number of mempool transactions iterated over that were not included in the stage.\n+    // Iterate from lowest feerate to highest feerate in the mempool:\n+    while (expsize > sizelimit && it != mapTx.get<1>().rend()) {\n+        const uint256& hash = it->GetTx().GetHash();\n+        if (stage.count(hash)) {\n+            // If the transaction is already staged for deletion, we know its descendants are already processed, so skip it.\n+            it++;\n+            continue;\n+        }\n+        if (it->GetFeeRate() > repfeerate) {\n+            // If the transaction's feerate is worse than what we're looking for, we have processed everything in the mempool\n+            // that could improve the staged set. If we don't have an acceptable solution by now, bail out.\n+            return false;\n+        }\n+        std::deque<uint256> todo; // List of hashes that we still need to process (descendants of 'hash').\n+        std::set<uint256> now; // Set of hashes that will need to be added to stage if 'hash' is included.\n+        CAmount nowfee = 0; // Sum of the fees in 'now'.\n+        size_t nowsize = 0; // Sum of the tx sizes in 'now'.\n+        size_t nowusage = 0; // Sum of the memory usages of transactions in 'now'.\n+        int iternow = 0; // Transactions we've inspected so far while determining whether 'hash' is acceptable.\n+        todo.push_back(it->GetTx().GetHash()); // Add 'hash' to the todo list, to initiate processing its children.\n+        bool good = true; // Whether including 'hash' (and all its descendants) is a good idea.\n+        // Iterate breadth-first over all descendants of transaction with hash 'hash'.\n+        while (!todo.empty()) {\n+            uint256 hashnow = todo.front();\n+            if (prot.count(hashnow)) {\n+                // If this transaction is in the protected set, we're done with 'hash'.\n+                good = false;\n+                break;\n+            }\n+            iternow++; // We only count transactions we actually had to go find in the mempool.\n+            const CTxMemPoolEntry* origTx = &*mapTx.find(hashnow);\n+            nowfee += origTx->GetFee();\n+            if (totalfeeremoved + nowfee > maxfeeremove) {\n+                // If this pushes up to the total fees deleted too high, we're done with 'hash'.\n+                good = false;\n+                break;\n+            }\n+            todo.pop_front();\n+            // Add 'hashnow' to the 'now' set, and update its statistics.\n+            now.insert(hashnow);\n+            nowusage += GuessDynamicMemoryUsage(*origTx);\n+            nowsize += origTx->GetTxSize();\n+            // Find dependencies of 'hashnow' and them to todo.\n+            std::map<COutPoint, CInPoint>::iterator iter = mapNextTx.lower_bound(COutPoint(hashnow, 0));\n+            while (iter != mapNextTx.end() && iter->first.hash == hashnow) {\n+                const uint256& nexthash = iter->second.ptx->GetHash();\n+                if (!(stage.count(nexthash) || now.count(nexthash))) {\n+                    todo.push_back(nexthash);\n+                }\n+                iter++;\n+            }\n+        }",
    "path": "src/txmempool.cpp",
    "position": 244,
    "original_position": 238,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "0a917df8e2c91a58fa8ed2667c867e27162b62e6",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I've considered doing that, but that would prevent any removal of deep chains, effectively making those clog the mempool. However, we do add the fees of these transactions together, which are always of a higher feerate than the 'hash' being iterated. Once those accumulated fees exceed the total fees of the replacing transaction, we continue.\n\nPerhaps a iternow + fails > 100 safeguard is still useful or so.\n",
    "created_at": "2015-07-13T13:59:52Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34464994",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34464994"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34464994"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34464994/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 518,
    "original_line": 505,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34468166",
    "pull_request_review_id": null,
    "id": 34468166,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDY4MTY2",
    "diff_hunk": "@@ -62,6 +68,27 @@ class CTxMemPoolEntry\n     size_t DynamicMemoryUsage() const { return nUsageSize; }\n };\n \n+// extracts a TxMemPoolEntry's transaction hash\n+struct mempoolentry_txid\n+{\n+    typedef uint256 result_type;\n+    result_type operator() (const CTxMemPoolEntry &entry) const\n+    {\n+        return entry.GetTx().GetHash();\n+    }\n+};\n+\n+class CompareTxMemPoolEntryByFee",
    "path": "src/txmempool.h",
    "position": null,
    "original_position": 43,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "0a917df8e2c91a58fa8ed2667c867e27162b62e6",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I've renamed it to CompareTxMemPoolEntryByFeeRate, because that is what it currently does, and it can't be easily changed without breaking the limiter code.\n",
    "created_at": "2015-07-13T14:29:59Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34468166",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34468166"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34468166"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34468166/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 81,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34468321",
    "pull_request_review_id": null,
    "id": 34468321,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDY4MzIx",
    "diff_hunk": "@@ -138,6 +179,15 @@ class CTxMemPool\n     void ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta);\n     void ClearPrioritisation(const uint256 hash);\n \n+    /** Build a list of transaction (hashes) to remove such that:\n+     *  - The list is consistent (if a parent is included, all its dependencies are included as well).\n+     *  - Removing said list will reduce the DynamicMemoryUsage below sizelimit.\n+     *  - At most maxfeeremove worth of fees will be removed.\n+     *  - No transaction whose hash is in prot will be removed.\n+     */\n+    bool StageTrimToSize(size_t sizelimit, const CAmount& maxfeeremove, const CFeeRate& repfeerate, const std::set<uint256>& prot, std::set<uint256>& stage, CAmount& totalfeeremoved, size_t& totalsizeremoved);\n+    void RemoveStaged(std::set<uint256>& stage);",
    "path": "src/txmempool.h",
    "position": null,
    "original_position": 99,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "0a917df8e2c91a58fa8ed2667c867e27162b62e6",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The rationale here is that I would want the staged set to become a separate class, which tracks statistics of what is being removed etc. That would make it also safe to not expose removeUnchecked (way faster than remove, because it already contains all dependencies), but a RemoveStaged method would need to remain.\n",
    "created_at": "2015-07-13T14:31:20Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34468321",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34468321"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34468321"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34468321/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 192,
    "original_line": 189,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34468343",
    "pull_request_review_id": null,
    "id": 34468343,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDY4MzQz",
    "diff_hunk": "@@ -859,22 +859,39 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), mempool.HasNoInputsOf(tx));\n         unsigned int nSize = entry.GetTxSize();\n \n+        // Try to make space in mempool\n+        std::set<uint256> protect;\n+        BOOST_FOREACH(const CTxIn& in, tx.vin) {\n+            protect.insert(in.prevout.hash);\n+        }\n+        std::set<uint256> stagedelete;\n+        CAmount nFeesDeleted = 0;\n+        size_t nSizeDeleted = 0;\n+        if (!mempool.StageTrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, nFees, entry.GetFeeRate(), protect, stagedelete, nFeesDeleted, nSizeDeleted)) {",
    "path": "src/main.cpp",
    "position": null,
    "original_position": 39,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "0a917df8e2c91a58fa8ed2667c867e27162b62e6",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.\n",
    "created_at": "2015-07-13T14:31:34Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34468343",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34468343"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34468343"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34468343/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 870,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34468396",
    "pull_request_review_id": null,
    "id": 34468396,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDY4Mzk2",
    "diff_hunk": "@@ -859,22 +859,39 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), mempool.HasNoInputsOf(tx));\n         unsigned int nSize = entry.GetTxSize();\n \n+        // Try to make space in mempool\n+        std::set<uint256> protect;\n+        BOOST_FOREACH(const CTxIn& in, tx.vin) {\n+            protect.insert(in.prevout.hash);\n+        }\n+        std::set<uint256> stagedelete;\n+        CAmount nFeesDeleted = 0;\n+        size_t nSizeDeleted = 0;\n+        if (!mempool.StageTrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, nFees, entry.GetFeeRate(), protect, stagedelete, nFeesDeleted, nSizeDeleted)) {\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool-full\");\n+        }\n+\n+        if ((double)nFeesDeleted * nSize > (double)nFees * nSizeDeleted) {\n+            // The new transaction's feerate is below that of the replaced transactions.\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool-full-no-improve\");\n+        }\n+\n         // Don't accept it if it can't get into a block\n         CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n-        if (fLimitFree && nFees < txMinFee)\n+        if (fLimitFree && nFees - nFeesDeleted < txMinFee)\n             return state.DoS(0, error(\"AcceptToMemoryPool: not enough fees %s, %d < %d\",",
    "path": "src/main.cpp",
    "position": null,
    "original_position": 52,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "0a917df8e2c91a58fa8ed2667c867e27162b62e6",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You don't want to use modified fees for the \"absurdly large fees\" check, I think.\n",
    "created_at": "2015-07-13T14:32:10Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34468396",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34468396"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34468396"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34468396/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 895,
    "original_line": 882,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34471449",
    "pull_request_review_id": null,
    "id": 34471449,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDcxNDQ5",
    "diff_hunk": "@@ -62,6 +68,27 @@ class CTxMemPoolEntry\n     size_t DynamicMemoryUsage() const { return nUsageSize; }\n };\n \n+// extracts a TxMemPoolEntry's transaction hash\n+struct mempoolentry_txid\n+{\n+    typedef uint256 result_type;\n+    result_type operator() (const CTxMemPoolEntry &entry) const\n+    {\n+        return entry.GetTx().GetHash();\n+    }\n+};\n+\n+class CompareTxMemPoolEntryByFee",
    "path": "src/txmempool.h",
    "position": null,
    "original_position": 43,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "0a917df8e2c91a58fa8ed2667c867e27162b62e6",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Actually it does use the time too: https://github.com/bitcoin/bitcoin/pull/6421/files#diff-8304b3e94624036c3673f31eeb7e9de0R88\n",
    "created_at": "2015-07-13T14:58:21Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34471449",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34471449"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34471449"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34471449/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 81,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34498887",
    "pull_request_review_id": null,
    "id": 34498887,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDk4ODg3",
    "diff_hunk": "@@ -429,5 +438,99 @@ bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n \n size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n-    return memusage::DynamicUsage(mapTx) + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+    // Estimate the overhead of mapTx to be 5 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+}\n+\n+size_t CTxMemPool::GuessDynamicMemoryUsage(const CTxMemPoolEntry& entry) const {\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) + entry.DynamicMemoryUsage() + memusage::IncrementalDynamicUsage(mapNextTx) * entry.GetTx().vin.size();\n+}\n+\n+bool CTxMemPool::StageTrimToSize(size_t sizelimit, const CTxMemPoolEntry& toadd, std::set<uint256>& stage, CAmount& nFeesRemoved) {\n+    size_t nSizeRemoved = 0;\n+    std::set<uint256> protect;\n+    BOOST_FOREACH(const CTxIn& in, toadd.GetTx().vin) {\n+        protect.insert(in.prevout.hash);\n+    }\n+\n+    size_t expsize = DynamicMemoryUsage() + GuessDynamicMemoryUsage(toadd); // Track the expected resulting memory usage of the mempool.\n+    indexed_transaction_set::nth_index<1>::type::reverse_iterator it = mapTx.get<1>().rbegin();\n+    int fails = 0; // Number of mempool transactions iterated over that were not included in the stage.\n+    // Iterate from lowest feerate to highest feerate in the mempool:\n+    while (expsize > sizelimit && it != mapTx.get<1>().rend()) {\n+        const uint256& hash = it->GetTx().GetHash();\n+        if (stage.count(hash)) {\n+            // If the transaction is already staged for deletion, we know its descendants are already processed, so skip it.\n+            it++;\n+            continue;\n+        }\n+        if (CompareTxMemPoolEntryByFeeRate()(*it, toadd)) {\n+            // If the transaction's feerate is worse than what we're looking for, we have processed everything in the mempool\n+            // that could improve the staged set. If we don't have an acceptable solution by now, bail out.\n+            return false;\n+        }\n+        std::deque<uint256> todo; // List of hashes that we still need to process (descendants of 'hash').\n+        std::set<uint256> now; // Set of hashes that will need to be added to stage if 'hash' is included.\n+        CAmount nowfee = 0; // Sum of the fees in 'now'.\n+        size_t nowsize = 0; // Sum of the tx sizes in 'now'.\n+        size_t nowusage = 0; // Sum of the memory usages of transactions in 'now'.\n+        int iternow = 0; // Transactions we've inspected so far while determining whether 'hash' is acceptable.\n+        todo.push_back(it->GetTx().GetHash()); // Add 'hash' to the todo list, to initiate processing its children.\n+        bool good = true; // Whether including 'hash' (and all its descendants) is a good idea.\n+        // Iterate breadth-first over all descendants of transaction with hash 'hash'.\n+        while (!todo.empty()) {\n+            uint256 hashnow = todo.front();\n+            if (protect.count(hashnow)) {\n+                // If this transaction is in the protected set, we're done with 'hash'.\n+                good = false;\n+                break;\n+            }\n+            iternow++; // We only count transactions we actually had to go find in the mempool.\n+            const CTxMemPoolEntry* origTx = &*mapTx.find(hashnow);\n+            nowfee += origTx->GetFee();\n+            if (nFeesRemoved + nowfee > toadd.GetFee()) {\n+                // If this pushes up to the total fees deleted too high, we're done with 'hash'.\n+                good = false;\n+                break;\n+            }\n+            todo.pop_front();\n+            // Add 'hashnow' to the 'now' set, and update its statistics.\n+            now.insert(hashnow);\n+            nowusage += GuessDynamicMemoryUsage(*origTx);\n+            nowsize += origTx->GetTxSize();\n+            // Find dependencies of 'hashnow' and them to todo.\n+            std::map<COutPoint, CInPoint>::iterator iter = mapNextTx.lower_bound(COutPoint(hashnow, 0));\n+            while (iter != mapNextTx.end() && iter->first.hash == hashnow) {\n+                const uint256& nexthash = iter->second.ptx->GetHash();\n+                if (!(stage.count(nexthash) || now.count(nexthash))) {\n+                    todo.push_back(nexthash);\n+                }\n+                iter++;\n+            }\n+        }\n+        if (good) {\n+            stage.insert(now.begin(), now.end());\n+            nFeesRemoved += nowfee;\n+            nSizeRemoved += nowsize;\n+            expsize -= nowusage;\n+        } else {\n+            fails += iternow;\n+            if (fails == 20) {\n+                // Bail out after traversing 20 transactions that are not acceptable.\n+                return false;\n+            }\n+        }\n+        it++;\n+    }\n+    if ((double)nFeesRemoved * toadd.GetTxSize() > (double)toadd.GetFee() * nSizeRemoved) {",
    "path": "src/txmempool.cpp",
    "position": null,
    "original_position": 251,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "d7a7cc9e8a8a010beae6aa77f5a3a87e4b90ccf9",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think we should be doing this check on each \"package\" (of parent and child transactions) separately.  Otherwise I think it's possible for us to remove a package that has a higher fee rate than the transaction we're evaluating, because we're averaging together with lower feerate packages.\n",
    "created_at": "2015-07-13T19:02:11Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34498887",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34498887"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34498887"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34498887/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 525,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34501010",
    "pull_request_review_id": null,
    "id": 34501010,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NTAxMDEw",
    "diff_hunk": "@@ -429,5 +438,99 @@ bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n \n size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n-    return memusage::DynamicUsage(mapTx) + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+    // Estimate the overhead of mapTx to be 5 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+}\n+\n+size_t CTxMemPool::GuessDynamicMemoryUsage(const CTxMemPoolEntry& entry) const {\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) + entry.DynamicMemoryUsage() + memusage::IncrementalDynamicUsage(mapNextTx) * entry.GetTx().vin.size();\n+}\n+\n+bool CTxMemPool::StageTrimToSize(size_t sizelimit, const CTxMemPoolEntry& toadd, std::set<uint256>& stage, CAmount& nFeesRemoved) {\n+    size_t nSizeRemoved = 0;\n+    std::set<uint256> protect;\n+    BOOST_FOREACH(const CTxIn& in, toadd.GetTx().vin) {\n+        protect.insert(in.prevout.hash);\n+    }\n+\n+    size_t expsize = DynamicMemoryUsage() + GuessDynamicMemoryUsage(toadd); // Track the expected resulting memory usage of the mempool.\n+    indexed_transaction_set::nth_index<1>::type::reverse_iterator it = mapTx.get<1>().rbegin();\n+    int fails = 0; // Number of mempool transactions iterated over that were not included in the stage.\n+    // Iterate from lowest feerate to highest feerate in the mempool:\n+    while (expsize > sizelimit && it != mapTx.get<1>().rend()) {\n+        const uint256& hash = it->GetTx().GetHash();\n+        if (stage.count(hash)) {\n+            // If the transaction is already staged for deletion, we know its descendants are already processed, so skip it.\n+            it++;\n+            continue;\n+        }\n+        if (CompareTxMemPoolEntryByFeeRate()(*it, toadd)) {\n+            // If the transaction's feerate is worse than what we're looking for, we have processed everything in the mempool\n+            // that could improve the staged set. If we don't have an acceptable solution by now, bail out.\n+            return false;\n+        }\n+        std::deque<uint256> todo; // List of hashes that we still need to process (descendants of 'hash').\n+        std::set<uint256> now; // Set of hashes that will need to be added to stage if 'hash' is included.\n+        CAmount nowfee = 0; // Sum of the fees in 'now'.\n+        size_t nowsize = 0; // Sum of the tx sizes in 'now'.\n+        size_t nowusage = 0; // Sum of the memory usages of transactions in 'now'.\n+        int iternow = 0; // Transactions we've inspected so far while determining whether 'hash' is acceptable.\n+        todo.push_back(it->GetTx().GetHash()); // Add 'hash' to the todo list, to initiate processing its children.\n+        bool good = true; // Whether including 'hash' (and all its descendants) is a good idea.\n+        // Iterate breadth-first over all descendants of transaction with hash 'hash'.\n+        while (!todo.empty()) {\n+            uint256 hashnow = todo.front();\n+            if (protect.count(hashnow)) {\n+                // If this transaction is in the protected set, we're done with 'hash'.\n+                good = false;\n+                break;\n+            }\n+            iternow++; // We only count transactions we actually had to go find in the mempool.\n+            const CTxMemPoolEntry* origTx = &*mapTx.find(hashnow);\n+            nowfee += origTx->GetFee();\n+            if (nFeesRemoved + nowfee > toadd.GetFee()) {\n+                // If this pushes up to the total fees deleted too high, we're done with 'hash'.\n+                good = false;\n+                break;\n+            }\n+            todo.pop_front();\n+            // Add 'hashnow' to the 'now' set, and update its statistics.\n+            now.insert(hashnow);\n+            nowusage += GuessDynamicMemoryUsage(*origTx);\n+            nowsize += origTx->GetTxSize();\n+            // Find dependencies of 'hashnow' and them to todo.\n+            std::map<COutPoint, CInPoint>::iterator iter = mapNextTx.lower_bound(COutPoint(hashnow, 0));\n+            while (iter != mapNextTx.end() && iter->first.hash == hashnow) {\n+                const uint256& nexthash = iter->second.ptx->GetHash();\n+                if (!(stage.count(nexthash) || now.count(nexthash))) {\n+                    todo.push_back(nexthash);\n+                }\n+                iter++;\n+            }\n+        }\n+        if (good) {\n+            stage.insert(now.begin(), now.end());\n+            nFeesRemoved += nowfee;\n+            nSizeRemoved += nowsize;\n+            expsize -= nowusage;\n+        } else {\n+            fails += iternow;\n+            if (fails == 20) {\n+                // Bail out after traversing 20 transactions that are not acceptable.\n+                return false;\n+            }\n+        }\n+        it++;\n+    }\n+    if ((double)nFeesRemoved * toadd.GetTxSize() > (double)toadd.GetFee() * nSizeRemoved) {",
    "path": "src/txmempool.cpp",
    "position": null,
    "original_position": 251,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "d7a7cc9e8a8a010beae6aa77f5a3a87e4b90ccf9",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nice catch, I agree. I'll move the check.\n",
    "created_at": "2015-07-13T19:23:54Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34501010",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34501010"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34501010"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34501010/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 525,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34505227",
    "pull_request_review_id": null,
    "id": 34505227,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NTA1MjI3",
    "diff_hunk": "@@ -429,5 +438,99 @@ bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n \n size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n-    return memusage::DynamicUsage(mapTx) + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+    // Estimate the overhead of mapTx to be 5 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+}\n+\n+size_t CTxMemPool::GuessDynamicMemoryUsage(const CTxMemPoolEntry& entry) const {\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) + entry.DynamicMemoryUsage() + memusage::IncrementalDynamicUsage(mapNextTx) * entry.GetTx().vin.size();\n+}\n+\n+bool CTxMemPool::StageTrimToSize(size_t sizelimit, const CTxMemPoolEntry& toadd, std::set<uint256>& stage, CAmount& nFeesRemoved) {\n+    size_t nSizeRemoved = 0;\n+    std::set<uint256> protect;\n+    BOOST_FOREACH(const CTxIn& in, toadd.GetTx().vin) {\n+        protect.insert(in.prevout.hash);\n+    }\n+\n+    size_t expsize = DynamicMemoryUsage() + GuessDynamicMemoryUsage(toadd); // Track the expected resulting memory usage of the mempool.\n+    indexed_transaction_set::nth_index<1>::type::reverse_iterator it = mapTx.get<1>().rbegin();\n+    int fails = 0; // Number of mempool transactions iterated over that were not included in the stage.\n+    // Iterate from lowest feerate to highest feerate in the mempool:\n+    while (expsize > sizelimit && it != mapTx.get<1>().rend()) {\n+        const uint256& hash = it->GetTx().GetHash();\n+        if (stage.count(hash)) {\n+            // If the transaction is already staged for deletion, we know its descendants are already processed, so skip it.\n+            it++;\n+            continue;\n+        }\n+        if (CompareTxMemPoolEntryByFeeRate()(*it, toadd)) {\n+            // If the transaction's feerate is worse than what we're looking for, we have processed everything in the mempool\n+            // that could improve the staged set. If we don't have an acceptable solution by now, bail out.\n+            return false;\n+        }\n+        std::deque<uint256> todo; // List of hashes that we still need to process (descendants of 'hash').\n+        std::set<uint256> now; // Set of hashes that will need to be added to stage if 'hash' is included.\n+        CAmount nowfee = 0; // Sum of the fees in 'now'.\n+        size_t nowsize = 0; // Sum of the tx sizes in 'now'.\n+        size_t nowusage = 0; // Sum of the memory usages of transactions in 'now'.\n+        int iternow = 0; // Transactions we've inspected so far while determining whether 'hash' is acceptable.\n+        todo.push_back(it->GetTx().GetHash()); // Add 'hash' to the todo list, to initiate processing its children.\n+        bool good = true; // Whether including 'hash' (and all its descendants) is a good idea.\n+        // Iterate breadth-first over all descendants of transaction with hash 'hash'.\n+        while (!todo.empty()) {\n+            uint256 hashnow = todo.front();\n+            if (protect.count(hashnow)) {\n+                // If this transaction is in the protected set, we're done with 'hash'.\n+                good = false;\n+                break;\n+            }\n+            iternow++; // We only count transactions we actually had to go find in the mempool.\n+            const CTxMemPoolEntry* origTx = &*mapTx.find(hashnow);\n+            nowfee += origTx->GetFee();\n+            if (nFeesRemoved + nowfee > toadd.GetFee()) {\n+                // If this pushes up to the total fees deleted too high, we're done with 'hash'.\n+                good = false;\n+                break;\n+            }\n+            todo.pop_front();\n+            // Add 'hashnow' to the 'now' set, and update its statistics.\n+            now.insert(hashnow);\n+            nowusage += GuessDynamicMemoryUsage(*origTx);\n+            nowsize += origTx->GetTxSize();\n+            // Find dependencies of 'hashnow' and them to todo.\n+            std::map<COutPoint, CInPoint>::iterator iter = mapNextTx.lower_bound(COutPoint(hashnow, 0));\n+            while (iter != mapNextTx.end() && iter->first.hash == hashnow) {\n+                const uint256& nexthash = iter->second.ptx->GetHash();\n+                if (!(stage.count(nexthash) || now.count(nexthash))) {\n+                    todo.push_back(nexthash);\n+                }\n+                iter++;\n+            }\n+        }\n+        if (good) {\n+            stage.insert(now.begin(), now.end());\n+            nFeesRemoved += nowfee;\n+            nSizeRemoved += nowsize;\n+            expsize -= nowusage;\n+        } else {\n+            fails += iternow;\n+            if (fails == 20) {\n+                // Bail out after traversing 20 transactions that are not acceptable.\n+                return false;\n+            }\n+        }\n+        it++;\n+    }\n+    if ((double)nFeesRemoved * toadd.GetTxSize() > (double)toadd.GetFee() * nSizeRemoved) {",
    "path": "src/txmempool.cpp",
    "position": null,
    "original_position": 251,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "d7a7cc9e8a8a010beae6aa77f5a3a87e4b90ccf9",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think we should also compare the fee rate of each package of transactions to the feerate of this transaction + any unconfirmed parents of this transaction, to ensure that we're not removing a package that is economically preferable to the transaction we're considering.\n",
    "created_at": "2015-07-13T20:06:01Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34505227",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34505227"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34505227"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34505227/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 525,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34577450",
    "pull_request_review_id": null,
    "id": 34577450,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NTc3NDUw",
    "diff_hunk": "@@ -859,22 +859,29 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), mempool.HasNoInputsOf(tx));\n         unsigned int nSize = entry.GetTxSize();\n \n+        // Try to make space in mempool\n+        std::set<uint256> stagedelete;\n+        CAmount nFeesDeleted = 0;\n+        if (!mempool.StageTrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, entry, stagedelete, nFeesDeleted)) {\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool full\");\n+        }\n+\n         // Don't accept it if it can't get into a block\n         CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n-        if (fLimitFree && nFees < txMinFee)\n+        if (fLimitFree && nFees < txMinFee + nFeesDeleted)\n             return state.DoS(0, error(\"AcceptToMemoryPool: not enough fees %s, %d < %d\",\n-                                      hash.ToString(), nFees, txMinFee),\n+                                      hash.ToString(), nFees, txMinFee + nFeesDeleted),\n                              REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n \n         // Require that free transactions have sufficient priority to be mined in the next block.\n-        if (GetBoolArg(\"-relaypriority\", true) && nFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1))) {\n+        if (GetBoolArg(\"-relaypriority\", true) && nFees - nFeesDeleted < ::minRelayTxFee.GetFee(nSize) && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1))) {",
    "path": "src/main.cpp",
    "position": 79,
    "original_position": 49,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "8dc3a5060473eb5f1955154325e8416aff455c40",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why this doesn't also require fLimitFree ? Why call AllowFree() when AcceptToMemoryPool's caller is specifying fLimitFree=false ?\nI know this is older than this PR, but I have only asked myself that now...\n",
    "created_at": "2015-07-14T15:00:03Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34577450",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34577450"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34577450"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34577450/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 900,
    "original_line": 877,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34588467",
    "pull_request_review_id": null,
    "id": 34588467,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NTg4NDY3",
    "diff_hunk": "@@ -429,5 +438,99 @@ bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n \n size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n-    return memusage::DynamicUsage(mapTx) + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+    // Estimate the overhead of mapTx to be 5 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+}\n+\n+size_t CTxMemPool::GuessDynamicMemoryUsage(const CTxMemPoolEntry& entry) const {\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) + entry.DynamicMemoryUsage() + memusage::IncrementalDynamicUsage(mapNextTx) * entry.GetTx().vin.size();\n+}\n+\n+bool CTxMemPool::StageTrimToSize(size_t sizelimit, const CTxMemPoolEntry& toadd, std::set<uint256>& stage, CAmount& nFeesRemoved) {\n+    size_t nSizeRemoved = 0;\n+    std::set<uint256> protect;\n+    BOOST_FOREACH(const CTxIn& in, toadd.GetTx().vin) {\n+        protect.insert(in.prevout.hash);\n+    }\n+\n+    size_t expsize = DynamicMemoryUsage() + GuessDynamicMemoryUsage(toadd); // Track the expected resulting memory usage of the mempool.\n+    indexed_transaction_set::nth_index<1>::type::reverse_iterator it = mapTx.get<1>().rbegin();\n+    int fails = 0; // Number of mempool transactions iterated over that were not included in the stage.\n+    // Iterate from lowest feerate to highest feerate in the mempool:\n+    while (expsize > sizelimit && it != mapTx.get<1>().rend()) {\n+        const uint256& hash = it->GetTx().GetHash();\n+        if (stage.count(hash)) {\n+            // If the transaction is already staged for deletion, we know its descendants are already processed, so skip it.\n+            it++;\n+            continue;\n+        }\n+        if (CompareTxMemPoolEntryByFeeRate()(*it, toadd)) {\n+            // If the transaction's feerate is worse than what we're looking for, we have processed everything in the mempool\n+            // that could improve the staged set. If we don't have an acceptable solution by now, bail out.\n+            return false;\n+        }\n+        std::deque<uint256> todo; // List of hashes that we still need to process (descendants of 'hash').\n+        std::set<uint256> now; // Set of hashes that will need to be added to stage if 'hash' is included.\n+        CAmount nowfee = 0; // Sum of the fees in 'now'.\n+        size_t nowsize = 0; // Sum of the tx sizes in 'now'.\n+        size_t nowusage = 0; // Sum of the memory usages of transactions in 'now'.\n+        int iternow = 0; // Transactions we've inspected so far while determining whether 'hash' is acceptable.\n+        todo.push_back(it->GetTx().GetHash()); // Add 'hash' to the todo list, to initiate processing its children.\n+        bool good = true; // Whether including 'hash' (and all its descendants) is a good idea.\n+        // Iterate breadth-first over all descendants of transaction with hash 'hash'.\n+        while (!todo.empty()) {\n+            uint256 hashnow = todo.front();\n+            if (protect.count(hashnow)) {\n+                // If this transaction is in the protected set, we're done with 'hash'.\n+                good = false;\n+                break;\n+            }\n+            iternow++; // We only count transactions we actually had to go find in the mempool.\n+            const CTxMemPoolEntry* origTx = &*mapTx.find(hashnow);\n+            nowfee += origTx->GetFee();\n+            if (nFeesRemoved + nowfee > toadd.GetFee()) {\n+                // If this pushes up to the total fees deleted too high, we're done with 'hash'.\n+                good = false;\n+                break;\n+            }\n+            todo.pop_front();\n+            // Add 'hashnow' to the 'now' set, and update its statistics.\n+            now.insert(hashnow);\n+            nowusage += GuessDynamicMemoryUsage(*origTx);\n+            nowsize += origTx->GetTxSize();\n+            // Find dependencies of 'hashnow' and them to todo.\n+            std::map<COutPoint, CInPoint>::iterator iter = mapNextTx.lower_bound(COutPoint(hashnow, 0));\n+            while (iter != mapNextTx.end() && iter->first.hash == hashnow) {\n+                const uint256& nexthash = iter->second.ptx->GetHash();\n+                if (!(stage.count(nexthash) || now.count(nexthash))) {\n+                    todo.push_back(nexthash);\n+                }\n+                iter++;\n+            }\n+        }\n+        if (good && (double)nowfee * toadd.GetTxSize() > (double)toadd.GetFee() * nowsize) {\n+            // The new transaction's feerate is below that of the set we're removing.\n+            good = false;\n+        }\n+        if (good) {\n+            stage.insert(now.begin(), now.end());\n+            nFeesRemoved += nowfee;\n+            nSizeRemoved += nowsize;\n+            expsize -= nowusage;\n+        } else {\n+            fails += iternow;\n+            if (fails == 20) {",
    "path": "src/txmempool.cpp",
    "position": null,
    "original_position": 248,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "8dc3a5060473eb5f1955154325e8416aff455c40",
    "user": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Needs to be `(fails >= 20)` if iternow is the count of all the transactions in the package being considered.\n\nHowever, I'm not sure this is a great check, it still seems easy for the lowest fee transaction to be part of a package > 20 txs which fails at the end.  Then you'll never check any other starting transaction.  I'd rather have some variance in the starting transaction you check and put the cap on the # of starting transactions we check.  We could also limit as @petertodd and you suggest above that we never traverse a package too far.  This would mean that a very large package which had its parent sorted at the bottom of the feerate index would never get kicked.  But that's ok if there is some randomness as to which transaction you start with.  (And it eventually gets kicked by the janitor if not mined)\n",
    "created_at": "2015-07-14T16:30:13Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34588467",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34588467"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34588467"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34588467/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 522,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34612750",
    "pull_request_review_id": null,
    "id": 34612750,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NjEyNzUw",
    "diff_hunk": "@@ -429,5 +438,99 @@ bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n \n size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n-    return memusage::DynamicUsage(mapTx) + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+    // Estimate the overhead of mapTx to be 5 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+}\n+\n+size_t CTxMemPool::GuessDynamicMemoryUsage(const CTxMemPoolEntry& entry) const {\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) + entry.DynamicMemoryUsage() + memusage::IncrementalDynamicUsage(mapNextTx) * entry.GetTx().vin.size();\n+}\n+\n+bool CTxMemPool::StageTrimToSize(size_t sizelimit, const CTxMemPoolEntry& toadd, std::set<uint256>& stage, CAmount& nFeesRemoved) {\n+    size_t nSizeRemoved = 0;\n+    std::set<uint256> protect;\n+    BOOST_FOREACH(const CTxIn& in, toadd.GetTx().vin) {\n+        protect.insert(in.prevout.hash);\n+    }\n+\n+    size_t expsize = DynamicMemoryUsage() + GuessDynamicMemoryUsage(toadd); // Track the expected resulting memory usage of the mempool.\n+    indexed_transaction_set::nth_index<1>::type::reverse_iterator it = mapTx.get<1>().rbegin();\n+    int fails = 0; // Number of mempool transactions iterated over that were not included in the stage.\n+    // Iterate from lowest feerate to highest feerate in the mempool:\n+    while (expsize > sizelimit && it != mapTx.get<1>().rend()) {\n+        const uint256& hash = it->GetTx().GetHash();\n+        if (stage.count(hash)) {\n+            // If the transaction is already staged for deletion, we know its descendants are already processed, so skip it.\n+            it++;\n+            continue;\n+        }\n+        if (CompareTxMemPoolEntryByFeeRate()(*it, toadd)) {\n+            // If the transaction's feerate is worse than what we're looking for, we have processed everything in the mempool\n+            // that could improve the staged set. If we don't have an acceptable solution by now, bail out.\n+            return false;\n+        }\n+        std::deque<uint256> todo; // List of hashes that we still need to process (descendants of 'hash').\n+        std::set<uint256> now; // Set of hashes that will need to be added to stage if 'hash' is included.\n+        CAmount nowfee = 0; // Sum of the fees in 'now'.\n+        size_t nowsize = 0; // Sum of the tx sizes in 'now'.\n+        size_t nowusage = 0; // Sum of the memory usages of transactions in 'now'.\n+        int iternow = 0; // Transactions we've inspected so far while determining whether 'hash' is acceptable.\n+        todo.push_back(it->GetTx().GetHash()); // Add 'hash' to the todo list, to initiate processing its children.\n+        bool good = true; // Whether including 'hash' (and all its descendants) is a good idea.\n+        // Iterate breadth-first over all descendants of transaction with hash 'hash'.\n+        while (!todo.empty()) {\n+            uint256 hashnow = todo.front();\n+            if (protect.count(hashnow)) {\n+                // If this transaction is in the protected set, we're done with 'hash'.\n+                good = false;\n+                break;\n+            }\n+            iternow++; // We only count transactions we actually had to go find in the mempool.\n+            const CTxMemPoolEntry* origTx = &*mapTx.find(hashnow);\n+            nowfee += origTx->GetFee();\n+            if (nFeesRemoved + nowfee > toadd.GetFee()) {\n+                // If this pushes up to the total fees deleted too high, we're done with 'hash'.\n+                good = false;\n+                break;\n+            }\n+            todo.pop_front();\n+            // Add 'hashnow' to the 'now' set, and update its statistics.\n+            now.insert(hashnow);\n+            nowusage += GuessDynamicMemoryUsage(*origTx);\n+            nowsize += origTx->GetTxSize();\n+            // Find dependencies of 'hashnow' and them to todo.\n+            std::map<COutPoint, CInPoint>::iterator iter = mapNextTx.lower_bound(COutPoint(hashnow, 0));\n+            while (iter != mapNextTx.end() && iter->first.hash == hashnow) {\n+                const uint256& nexthash = iter->second.ptx->GetHash();\n+                if (!(stage.count(nexthash) || now.count(nexthash))) {\n+                    todo.push_back(nexthash);\n+                }\n+                iter++;\n+            }\n+        }\n+        if (good && (double)nowfee * toadd.GetTxSize() > (double)toadd.GetFee() * nowsize) {\n+            // The new transaction's feerate is below that of the set we're removing.\n+            good = false;\n+        }\n+        if (good) {\n+            stage.insert(now.begin(), now.end());\n+            nFeesRemoved += nowfee;\n+            nSizeRemoved += nowsize;\n+            expsize -= nowusage;\n+        } else {\n+            fails += iternow;\n+            if (fails == 20) {",
    "path": "src/txmempool.cpp",
    "position": null,
    "original_position": 248,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "8dc3a5060473eb5f1955154325e8416aff455c40",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Agree with @morcos -- I'm running various tests of this code, and I think a significant number of transactions are being rejected because of this issue with large transaction packages preventing new transactions from being accepted, even if the new transactions have a large fee.\n\nI'll try to quantify this more precisely and carefully as I test further, but as an example, I ran an analysis of this code (modified with the fails >= 20 bugfix mentioned above) on July 7 with a 10MB mempool limit, and I think 32%  (roughly 7500 out of almost 23000) of the transactions rejected due to a full mempool were transactions with a feerate greater than twice the average feerate of the whole mempool.\n",
    "created_at": "2015-07-14T20:05:00Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34612750",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34612750"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34612750"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34612750/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 522,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34612918",
    "pull_request_review_id": null,
    "id": 34612918,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NjEyOTE4",
    "diff_hunk": "@@ -429,5 +438,99 @@ bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n \n size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n-    return memusage::DynamicUsage(mapTx) + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+    // Estimate the overhead of mapTx to be 5 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+}\n+\n+size_t CTxMemPool::GuessDynamicMemoryUsage(const CTxMemPoolEntry& entry) const {\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) + entry.DynamicMemoryUsage() + memusage::IncrementalDynamicUsage(mapNextTx) * entry.GetTx().vin.size();\n+}\n+\n+bool CTxMemPool::StageTrimToSize(size_t sizelimit, const CTxMemPoolEntry& toadd, std::set<uint256>& stage, CAmount& nFeesRemoved) {\n+    size_t nSizeRemoved = 0;\n+    std::set<uint256> protect;\n+    BOOST_FOREACH(const CTxIn& in, toadd.GetTx().vin) {\n+        protect.insert(in.prevout.hash);\n+    }\n+\n+    size_t expsize = DynamicMemoryUsage() + GuessDynamicMemoryUsage(toadd); // Track the expected resulting memory usage of the mempool.\n+    indexed_transaction_set::nth_index<1>::type::reverse_iterator it = mapTx.get<1>().rbegin();\n+    int fails = 0; // Number of mempool transactions iterated over that were not included in the stage.\n+    // Iterate from lowest feerate to highest feerate in the mempool:\n+    while (expsize > sizelimit && it != mapTx.get<1>().rend()) {\n+        const uint256& hash = it->GetTx().GetHash();\n+        if (stage.count(hash)) {\n+            // If the transaction is already staged for deletion, we know its descendants are already processed, so skip it.\n+            it++;\n+            continue;\n+        }\n+        if (CompareTxMemPoolEntryByFeeRate()(*it, toadd)) {\n+            // If the transaction's feerate is worse than what we're looking for, we have processed everything in the mempool\n+            // that could improve the staged set. If we don't have an acceptable solution by now, bail out.\n+            return false;\n+        }\n+        std::deque<uint256> todo; // List of hashes that we still need to process (descendants of 'hash').\n+        std::set<uint256> now; // Set of hashes that will need to be added to stage if 'hash' is included.\n+        CAmount nowfee = 0; // Sum of the fees in 'now'.\n+        size_t nowsize = 0; // Sum of the tx sizes in 'now'.\n+        size_t nowusage = 0; // Sum of the memory usages of transactions in 'now'.\n+        int iternow = 0; // Transactions we've inspected so far while determining whether 'hash' is acceptable.\n+        todo.push_back(it->GetTx().GetHash()); // Add 'hash' to the todo list, to initiate processing its children.\n+        bool good = true; // Whether including 'hash' (and all its descendants) is a good idea.\n+        // Iterate breadth-first over all descendants of transaction with hash 'hash'.\n+        while (!todo.empty()) {\n+            uint256 hashnow = todo.front();\n+            if (protect.count(hashnow)) {\n+                // If this transaction is in the protected set, we're done with 'hash'.\n+                good = false;\n+                break;\n+            }\n+            iternow++; // We only count transactions we actually had to go find in the mempool.\n+            const CTxMemPoolEntry* origTx = &*mapTx.find(hashnow);\n+            nowfee += origTx->GetFee();\n+            if (nFeesRemoved + nowfee > toadd.GetFee()) {\n+                // If this pushes up to the total fees deleted too high, we're done with 'hash'.\n+                good = false;\n+                break;\n+            }\n+            todo.pop_front();\n+            // Add 'hashnow' to the 'now' set, and update its statistics.\n+            now.insert(hashnow);\n+            nowusage += GuessDynamicMemoryUsage(*origTx);\n+            nowsize += origTx->GetTxSize();\n+            // Find dependencies of 'hashnow' and them to todo.\n+            std::map<COutPoint, CInPoint>::iterator iter = mapNextTx.lower_bound(COutPoint(hashnow, 0));\n+            while (iter != mapNextTx.end() && iter->first.hash == hashnow) {\n+                const uint256& nexthash = iter->second.ptx->GetHash();\n+                if (!(stage.count(nexthash) || now.count(nexthash))) {\n+                    todo.push_back(nexthash);\n+                }\n+                iter++;\n+            }\n+        }\n+        if (good && (double)nowfee * toadd.GetTxSize() > (double)toadd.GetFee() * nowsize) {\n+            // The new transaction's feerate is below that of the set we're removing.\n+            good = false;\n+        }\n+        if (good) {\n+            stage.insert(now.begin(), now.end());\n+            nFeesRemoved += nowfee;\n+            nSizeRemoved += nowsize;\n+            expsize -= nowusage;\n+        } else {\n+            fails += iternow;\n+            if (fails == 20) {",
    "path": "src/txmempool.cpp",
    "position": null,
    "original_position": 248,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "8dc3a5060473eb5f1955154325e8416aff455c40",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm testing a change in the code that skips entries randomly, to sample a\nlarger subset of transactions for replacement in the long term.\n",
    "created_at": "2015-07-14T20:06:35Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34612918",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34612918"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34612918"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34612918/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 522,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34797429",
    "pull_request_review_id": null,
    "id": 34797429,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Nzk3NDI5",
    "diff_hunk": "@@ -108,6 +109,19 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n     return true;\n }\n \n+void CTxMemPool::removeUnchecked(const uint256& hash)\n+{\n+    indexed_transaction_set::iterator it = mapTx.find(hash);\n+\n+    BOOST_FOREACH(const CTxIn& txin, it->GetTx().vin)\n+        mapNextTx.erase(txin.prevout);\n+\n+    totalTxSize -= it->GetTxSize();\n+    cachedInnerUsage -= it->DynamicMemoryUsage();\n+    mapTx.erase(it);",
    "path": "src/txmempool.cpp",
    "position": 37,
    "original_position": 37,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "cf260b617f2598898afea28aff159368dd4f6b8e",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Shouldn't this be `mapTx.erase(hash);` ?\n",
    "created_at": "2015-07-16T15:06:21Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34797429",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34797429"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34797429"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34797429/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 121,
    "original_line": 121,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34797526",
    "pull_request_review_id": null,
    "id": 34797526,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Nzk3NTI2",
    "diff_hunk": "@@ -429,5 +438,107 @@ bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n \n size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n-    return memusage::DynamicUsage(mapTx) + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+    // Estimate the overhead of mapTx to be 5 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+}\n+\n+size_t CTxMemPool::GuessDynamicMemoryUsage(const CTxMemPoolEntry& entry) const {\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) + entry.DynamicMemoryUsage() + memusage::IncrementalDynamicUsage(mapNextTx) * entry.GetTx().vin.size();\n+}\n+\n+bool CTxMemPool::StageTrimToSize(size_t sizelimit, const CTxMemPoolEntry& toadd, std::set<uint256>& stage, CAmount& nFeesRemoved) {\n+    size_t nSizeRemoved = 0;\n+    std::set<uint256> protect;\n+    BOOST_FOREACH(const CTxIn& in, toadd.GetTx().vin) {\n+        protect.insert(in.prevout.hash);\n+    }\n+\n+    size_t expsize = DynamicMemoryUsage() + GuessDynamicMemoryUsage(toadd); // Track the expected resulting memory usage of the mempool.\n+    indexed_transaction_set::nth_index<1>::type::reverse_iterator it = mapTx.get<1>().rbegin();\n+    int fails = 0; // Number of mempool transactions iterated over that were not included in the stage.\n+    // Iterate from lowest feerate to highest feerate in the mempool:\n+    while (expsize > sizelimit && it != mapTx.get<1>().rend()) {\n+        const uint256& hash = it->GetTx().GetHash();\n+        if (stage.count(hash)) {\n+            // If the transaction is already staged for deletion, we know its descendants are already processed, so skip it.\n+            it++;\n+            continue;\n+        }\n+        if (CompareTxMemPoolEntryByFeeRate()(*it, toadd)) {\n+            // If the transaction's feerate is worse than what we're looking for, we have processed everything in the mempool\n+            // that could improve the staged set. If we don't have an acceptable solution by now, bail out.\n+            return false;\n+        }\n+        if (GetRand(10)) {\n+            // Only try 1/10 of the transactions, in order to have some chance to avoid very big chains.\n+            it++;\n+            continue;\n+        }\n+        std::deque<uint256> todo; // List of hashes that we still need to process (descendants of 'hash').\n+        std::set<uint256> now; // Set of hashes that will need to be added to stage if 'hash' is included.\n+        CAmount nowfee = 0; // Sum of the fees in 'now'.\n+        size_t nowsize = 0; // Sum of the tx sizes in 'now'.\n+        size_t nowusage = 0; // Sum of the memory usages of transactions in 'now'.\n+        int iternow = 0; // Transactions we've inspected so far while determining whether 'hash' is acceptable.\n+        todo.push_back(it->GetTx().GetHash()); // Add 'hash' to the todo list, to initiate processing its children.",
    "path": "src/txmempool.cpp",
    "position": 209,
    "original_position": 209,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "cf260b617f2598898afea28aff159368dd4f6b8e",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This can be just `todo.push_back(hash);`\n",
    "created_at": "2015-07-16T15:07:06Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34797526",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34797526"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34797526"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34797526/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 483,
    "original_line": 483,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34855569",
    "pull_request_review_id": null,
    "id": 34855569,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0ODU1NTY5",
    "diff_hunk": "@@ -429,5 +438,107 @@ bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n \n size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n-    return memusage::DynamicUsage(mapTx) + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+    // Estimate the overhead of mapTx to be 5 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+}\n+\n+size_t CTxMemPool::GuessDynamicMemoryUsage(const CTxMemPoolEntry& entry) const {\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) + entry.DynamicMemoryUsage() + memusage::IncrementalDynamicUsage(mapNextTx) * entry.GetTx().vin.size();\n+}\n+\n+bool CTxMemPool::StageTrimToSize(size_t sizelimit, const CTxMemPoolEntry& toadd, std::set<uint256>& stage, CAmount& nFeesRemoved) {\n+    size_t nSizeRemoved = 0;\n+    std::set<uint256> protect;\n+    BOOST_FOREACH(const CTxIn& in, toadd.GetTx().vin) {\n+        protect.insert(in.prevout.hash);\n+    }\n+\n+    size_t expsize = DynamicMemoryUsage() + GuessDynamicMemoryUsage(toadd); // Track the expected resulting memory usage of the mempool.\n+    indexed_transaction_set::nth_index<1>::type::reverse_iterator it = mapTx.get<1>().rbegin();\n+    int fails = 0; // Number of mempool transactions iterated over that were not included in the stage.\n+    // Iterate from lowest feerate to highest feerate in the mempool:\n+    while (expsize > sizelimit && it != mapTx.get<1>().rend()) {\n+        const uint256& hash = it->GetTx().GetHash();\n+        if (stage.count(hash)) {\n+            // If the transaction is already staged for deletion, we know its descendants are already processed, so skip it.\n+            it++;\n+            continue;\n+        }\n+        if (CompareTxMemPoolEntryByFeeRate()(*it, toadd)) {",
    "path": "src/txmempool.cpp",
    "position": null,
    "original_position": 193,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "cf260b617f2598898afea28aff159368dd4f6b8e",
    "user": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This test is better placed after we've randomly skipped some entries below.  Otherwise we might end up evicting something that actually has a better fee rate than the tx being considered.\n",
    "created_at": "2015-07-17T01:24:58Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34855569",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34855569"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34855569"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34855569/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 467,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34918202",
    "pull_request_review_id": null,
    "id": 34918202,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTE4MjAy",
    "diff_hunk": "@@ -429,5 +438,107 @@ bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n \n size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n-    return memusage::DynamicUsage(mapTx) + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+    // Estimate the overhead of mapTx to be 5 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+}\n+\n+size_t CTxMemPool::GuessDynamicMemoryUsage(const CTxMemPoolEntry& entry) const {\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) + entry.DynamicMemoryUsage() + memusage::IncrementalDynamicUsage(mapNextTx) * entry.GetTx().vin.size();\n+}\n+\n+bool CTxMemPool::StageTrimToSize(size_t sizelimit, const CTxMemPoolEntry& toadd, std::set<uint256>& stage, CAmount& nFeesRemoved) {\n+    size_t nSizeRemoved = 0;\n+    std::set<uint256> protect;\n+    BOOST_FOREACH(const CTxIn& in, toadd.GetTx().vin) {\n+        protect.insert(in.prevout.hash);\n+    }\n+\n+    size_t expsize = DynamicMemoryUsage() + GuessDynamicMemoryUsage(toadd); // Track the expected resulting memory usage of the mempool.\n+    indexed_transaction_set::nth_index<1>::type::reverse_iterator it = mapTx.get<1>().rbegin();\n+    int fails = 0; // Number of mempool transactions iterated over that were not included in the stage.\n+    // Iterate from lowest feerate to highest feerate in the mempool:\n+    while (expsize > sizelimit && it != mapTx.get<1>().rend()) {\n+        const uint256& hash = it->GetTx().GetHash();\n+        if (stage.count(hash)) {\n+            // If the transaction is already staged for deletion, we know its descendants are already processed, so skip it.\n+            it++;\n+            continue;\n+        }\n+        if (CompareTxMemPoolEntryByFeeRate()(*it, toadd)) {",
    "path": "src/txmempool.cpp",
    "position": null,
    "original_position": 193,
    "commit_id": "26d123a0287ecad86c324a37a7247ff3611a89ce",
    "original_commit_id": "cf260b617f2598898afea28aff159368dd4f6b8e",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Unless you're talking about an outer-loop transaction being hit which has an earlier (lower feerate) skipped transaction as dependency, I think the odds are small. But it won't hurt, both are very cheap checks.\n",
    "created_at": "2015-07-17T18:34:07Z",
    "updated_at": "2015-07-18T22:30:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34918202",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34918202"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34918202"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34918202/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 467,
    "side": "RIGHT"
  }
]