[
  {
    "sha": "f463cd107361a172a17e4c5510b06eb8a67aade0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNDYzY2QxMDczNjFhMTcyYTE3ZTRjNTUxMGIwNmViOGE2N2FhZGUw",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-03-28T17:15:47Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-04-09T14:37:49Z"
      },
      "message": "[wallet] Keep track of the best block time in the wallet\n\nMove nTimeBestReceived (which is only used for wallet\nrebroadcasts) into the wallet.",
      "tree": {
        "sha": "713da4c32558cf5acbc57a2805895482a3322a90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/713da4c32558cf5acbc57a2805895482a3322a90"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f463cd107361a172a17e4c5510b06eb8a67aade0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f463cd107361a172a17e4c5510b06eb8a67aade0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f463cd107361a172a17e4c5510b06eb8a67aade0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f463cd107361a172a17e4c5510b06eb8a67aade0/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f3ecf3025f82f84d42ec463990ff787647cc7bf5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3ecf3025f82f84d42ec463990ff787647cc7bf5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f3ecf3025f82f84d42ec463990ff787647cc7bf5"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 26,
      "deletions": 18
    },
    "files": [
      {
        "sha": "6c918b73f9a62e0ff5b9170b2136de0cf51a8edf",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f463cd107361a172a17e4c5510b06eb8a67aade0/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f463cd107361a172a17e4c5510b06eb8a67aade0/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=f463cd107361a172a17e4c5510b06eb8a67aade0",
        "patch": "@@ -202,16 +202,20 @@ class NotificationsHandlerImpl : public Handler, CValidationInterface\n     {\n         m_notifications->BlockDisconnected(*block);\n     }\n+    void UpdatedBlockTip(const CBlockIndex* index, const CBlockIndex* fork_index, bool is_ibd) override\n+    {\n+        m_notifications->UpdatedBlockTip();\n+    }\n     void ChainStateFlushed(const CBlockLocator& locator) override { m_notifications->ChainStateFlushed(locator); }\n-    void ResendWalletTransactions(int64_t best_block_time, CConnman*) override\n+    void ResendWalletTransactions(CConnman*) override\n     {\n         // `cs_main` is always held when this method is called, so it is safe to\n         // call `assumeLocked`. This is awkward, and the `assumeLocked` method\n         // should be able to be removed entirely if `ResendWalletTransactions`\n         // is replaced by a wallet timer as suggested in\n         // https://github.com/bitcoin/bitcoin/issues/15619\n         auto locked_chain = m_chain.assumeLocked();\n-        m_notifications->ResendWalletTransactions(*locked_chain, best_block_time);\n+        m_notifications->ResendWalletTransactions(*locked_chain);\n     }\n     Chain& m_chain;\n     Chain::Notifications* m_notifications;"
      },
      {
        "sha": "82e2c7eb231817f7e7addbb1b0234aedd6bb03da",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f463cd107361a172a17e4c5510b06eb8a67aade0/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f463cd107361a172a17e4c5510b06eb8a67aade0/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=f463cd107361a172a17e4c5510b06eb8a67aade0",
        "patch": "@@ -256,8 +256,9 @@ class Chain\n         virtual void TransactionRemovedFromMempool(const CTransactionRef& ptx) {}\n         virtual void BlockConnected(const CBlock& block, const std::vector<CTransactionRef>& tx_conflicted) {}\n         virtual void BlockDisconnected(const CBlock& block) {}\n+        virtual void UpdatedBlockTip() {}\n         virtual void ChainStateFlushed(const CBlockLocator& locator) {}\n-        virtual void ResendWalletTransactions(Lock& locked_chain, int64_t best_block_time) {}\n+        virtual void ResendWalletTransactions(Lock& locked_chain) {}\n     };\n \n     //! Register handler for notifications."
      },
      {
        "sha": "3fd3068fbd876d40daf0a6214a1108027f272c78",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f463cd107361a172a17e4c5510b06eb8a67aade0/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f463cd107361a172a17e4c5510b06eb8a67aade0/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=f463cd107361a172a17e4c5510b06eb8a67aade0",
        "patch": "@@ -175,8 +175,6 @@ namespace {\n     /** Expiration-time ordered list of (expire time, relay map entry) pairs. */\n     std::deque<std::pair<int64_t, MapRelay::iterator>> vRelayExpiration GUARDED_BY(cs_main);\n \n-    std::atomic<int64_t> nTimeBestReceived(0); // Used only to inform the wallet of when we last received a block\n-\n     struct IteratorComparator\n     {\n         template<typename I>\n@@ -1121,8 +1119,6 @@ void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CB\n         });\n         connman->WakeMessageHandler();\n     }\n-\n-    nTimeBestReceived = GetTime();\n }\n \n /**\n@@ -3555,7 +3551,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n         // transactions become unconfirmed and spams other nodes.\n         if (!fReindex && !fImporting && !IsInitialBlockDownload())\n         {\n-            GetMainSignals().Broadcast(nTimeBestReceived, connman);\n+            GetMainSignals().Broadcast(connman);\n         }\n \n         //"
      },
      {
        "sha": "abd229d5613d7d84f551bb9bffadd807b078f996",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f463cd107361a172a17e4c5510b06eb8a67aade0/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f463cd107361a172a17e4c5510b06eb8a67aade0/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=f463cd107361a172a17e4c5510b06eb8a67aade0",
        "patch": "@@ -37,7 +37,7 @@ struct MainSignalsInstance {\n     boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n     boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n     boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    boost::signals2::signal<void (CConnman* connman)> Broadcast;\n     boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n@@ -101,7 +101,7 @@ void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     conns.BlockDisconnected = g_signals.m_internals->BlockDisconnected.connect(std::bind(&CValidationInterface::BlockDisconnected, pwalletIn, std::placeholders::_1));\n     conns.TransactionRemovedFromMempool = g_signals.m_internals->TransactionRemovedFromMempool.connect(std::bind(&CValidationInterface::TransactionRemovedFromMempool, pwalletIn, std::placeholders::_1));\n     conns.ChainStateFlushed = g_signals.m_internals->ChainStateFlushed.connect(std::bind(&CValidationInterface::ChainStateFlushed, pwalletIn, std::placeholders::_1));\n-    conns.Broadcast = g_signals.m_internals->Broadcast.connect(std::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, std::placeholders::_1, std::placeholders::_2));\n+    conns.Broadcast = g_signals.m_internals->Broadcast.connect(std::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, std::placeholders::_1));\n     conns.BlockChecked = g_signals.m_internals->BlockChecked.connect(std::bind(&CValidationInterface::BlockChecked, pwalletIn, std::placeholders::_1, std::placeholders::_2));\n     conns.NewPoWValidBlock = g_signals.m_internals->NewPoWValidBlock.connect(std::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, std::placeholders::_1, std::placeholders::_2));\n }\n@@ -175,8 +175,8 @@ void CMainSignals::ChainStateFlushed(const CBlockLocator &locator) {\n     });\n }\n \n-void CMainSignals::Broadcast(int64_t nBestBlockTime, CConnman* connman) {\n-    m_internals->Broadcast(nBestBlockTime, connman);\n+void CMainSignals::Broadcast(CConnman* connman) {\n+    m_internals->Broadcast(connman);\n }\n \n void CMainSignals::BlockChecked(const CBlock& block, const CValidationState& state) {"
      },
      {
        "sha": "0d5bdd60fba048c8a0cca740cb79285646eb033a",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f463cd107361a172a17e4c5510b06eb8a67aade0/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f463cd107361a172a17e4c5510b06eb8a67aade0/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=f463cd107361a172a17e4c5510b06eb8a67aade0",
        "patch": "@@ -135,7 +135,7 @@ class CValidationInterface {\n      */\n     virtual void ChainStateFlushed(const CBlockLocator &locator) {}\n     /** Tells listeners to broadcast their data. */\n-    virtual void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) {}\n+    virtual void ResendWalletTransactions(CConnman* connman) {}\n     /**\n      * Notifies listeners of a block validation result.\n      * If the provided CValidationState IsValid, the provided block\n@@ -184,7 +184,7 @@ class CMainSignals {\n     void BlockConnected(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>> &);\n     void BlockDisconnected(const std::shared_ptr<const CBlock> &);\n     void ChainStateFlushed(const CBlockLocator &);\n-    void Broadcast(int64_t nBestBlockTime, CConnman* connman);\n+    void Broadcast(CConnman* connman);\n     void BlockChecked(const CBlock&, const CValidationState&);\n     void NewPoWValidBlock(const CBlockIndex *, const std::shared_ptr<const CBlock>&);\n };"
      },
      {
        "sha": "243b51a1e6c6a8c39e474384c3df7110962e693a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f463cd107361a172a17e4c5510b06eb8a67aade0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f463cd107361a172a17e4c5510b06eb8a67aade0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f463cd107361a172a17e4c5510b06eb8a67aade0",
        "patch": "@@ -1276,6 +1276,10 @@ void CWallet::BlockDisconnected(const CBlock& block) {\n     }\n }\n \n+void CWallet::UpdatedBlockTip()\n+{\n+    m_best_block_time = GetTime();\n+}\n \n \n void CWallet::BlockUntilSyncedToCurrentChain() {\n@@ -2110,7 +2114,7 @@ bool CWalletTx::IsEquivalentTo(const CWalletTx& _tx) const\n         return CTransaction(tx1) == CTransaction(tx2);\n }\n \n-void CWallet::ResendWalletTransactions(interfaces::Chain::Lock& locked_chain, int64_t nBestBlockTime)\n+void CWallet::ResendWalletTransactions(interfaces::Chain::Lock& locked_chain)\n {\n     // Do this infrequently and randomly to avoid giving away\n     // that these are our transactions.\n@@ -2120,7 +2124,7 @@ void CWallet::ResendWalletTransactions(interfaces::Chain::Lock& locked_chain, in\n     if (fFirst) return;\n \n     // Only do it if there's been a new block since last time\n-    if (nBestBlockTime < nLastResend) return;\n+    if (m_best_block_time < nLastResend) return;\n     nLastResend = GetTime();\n \n     int relayed_tx_count = 0;\n@@ -2133,7 +2137,7 @@ void CWallet::ResendWalletTransactions(interfaces::Chain::Lock& locked_chain, in\n             CWalletTx& wtx = item.second;\n             // only rebroadcast unconfirmed txes older than 5 minutes before the\n             // last block was found\n-            if (wtx.nTimeReceived > nBestBlockTime - 5 * 60) continue;\n+            if (wtx.nTimeReceived > m_best_block_time - 5 * 60) continue;\n             relayed_tx_count += wtx.RelayWalletTransaction(locked_chain) ? 1 : 0;\n         }\n     } // cs_wallet"
      },
      {
        "sha": "cef58c6419b9ebcbef03d19e5c43be16465b21e8",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f463cd107361a172a17e4c5510b06eb8a67aade0/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f463cd107361a172a17e4c5510b06eb8a67aade0/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f463cd107361a172a17e4c5510b06eb8a67aade0",
        "patch": "@@ -657,6 +657,8 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     int64_t nNextResend = 0;\n     int64_t nLastResend = 0;\n     bool fBroadcastTransactions = false;\n+    // Local time that the tip block was received. Used to schedule wallet rebroadcasts.\n+    std::atomic<int64_t> m_best_block_time {0};\n \n     /**\n      * Used to keep track of spent outpoints, and\n@@ -926,6 +928,7 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     void TransactionAddedToMempool(const CTransactionRef& tx) override;\n     void BlockConnected(const CBlock& block, const std::vector<CTransactionRef>& vtxConflicted) override;\n     void BlockDisconnected(const CBlock& block) override;\n+    void UpdatedBlockTip() override;\n     int64_t RescanFromTime(int64_t startTime, const WalletRescanReserver& reserver, bool update);\n \n     struct ScanResult {\n@@ -946,7 +949,7 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     ScanResult ScanForWalletTransactions(const uint256& first_block, const uint256& last_block, const WalletRescanReserver& reserver, bool fUpdate);\n     void TransactionRemovedFromMempool(const CTransactionRef &ptx) override;\n     void ReacceptWalletTransactions(interfaces::Chain::Lock& locked_chain) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    void ResendWalletTransactions(interfaces::Chain::Lock& locked_chain, int64_t nBestBlockTime) override;\n+    void ResendWalletTransactions(interfaces::Chain::Lock& locked_chain) override;\n     struct Balance {\n         CAmount m_mine_trusted{0};           //!< Trusted, at depth=GetBalance.min_depth or more\n         CAmount m_mine_untrusted_pending{0}; //!< Untrusted, but in mempool (pending)"
      }
    ]
  },
  {
    "sha": "52b760fc6a9b26e405a0553ee8285b0f03ca1604",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MmI3NjBmYzZhOWIyNmU0MDVhMDU1M2VlODI4NWIwZjAzY2ExNjA0",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-03-20T21:46:38Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-04-09T14:38:13Z"
      },
      "message": "[wallet] Schedule tx rebroadcasts in wallet\n\nRemoves the now-unused Broadcast/ResendWalletTransactions interface from\nvalidationinterface.\n\nThe wallet_resendwallettransactions.py needs a sleep added at the start\nto make sure that the rebroadcast scheduler is warmed up before the next\nblock is mined.",
      "tree": {
        "sha": "a4feae27b0681222a2f2b32e20a307ce089f4cbd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a4feae27b0681222a2f2b32e20a307ce089f4cbd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/52b760fc6a9b26e405a0553ee8285b0f03ca1604",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52b760fc6a9b26e405a0553ee8285b0f03ca1604",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/52b760fc6a9b26e405a0553ee8285b0f03ca1604",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52b760fc6a9b26e405a0553ee8285b0f03ca1604/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f463cd107361a172a17e4c5510b06eb8a67aade0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f463cd107361a172a17e4c5510b06eb8a67aade0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f463cd107361a172a17e4c5510b06eb8a67aade0"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 39,
      "deletions": 32
    },
    "files": [
      {
        "sha": "f278e5de95a24746b64fdd088916b59bf6e3ae59",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 10,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52b760fc6a9b26e405a0553ee8285b0f03ca1604/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52b760fc6a9b26e405a0553ee8285b0f03ca1604/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=52b760fc6a9b26e405a0553ee8285b0f03ca1604",
        "patch": "@@ -207,16 +207,6 @@ class NotificationsHandlerImpl : public Handler, CValidationInterface\n         m_notifications->UpdatedBlockTip();\n     }\n     void ChainStateFlushed(const CBlockLocator& locator) override { m_notifications->ChainStateFlushed(locator); }\n-    void ResendWalletTransactions(CConnman*) override\n-    {\n-        // `cs_main` is always held when this method is called, so it is safe to\n-        // call `assumeLocked`. This is awkward, and the `assumeLocked` method\n-        // should be able to be removed entirely if `ResendWalletTransactions`\n-        // is replaced by a wallet timer as suggested in\n-        // https://github.com/bitcoin/bitcoin/issues/15619\n-        auto locked_chain = m_chain.assumeLocked();\n-        m_notifications->ResendWalletTransactions(*locked_chain);\n-    }\n     Chain& m_chain;\n     Chain::Notifications* m_notifications;\n };\n@@ -351,6 +341,7 @@ class ChainImpl : public Chain\n     CAmount maxTxFee() override { return ::maxTxFee; }\n     bool getPruneMode() override { return ::fPruneMode; }\n     bool p2pEnabled() override { return g_connman != nullptr; }\n+    bool isReadyToBroadcast() override { return !::fImporting && !::fReindex && !IsInitialBlockDownload(); }\n     bool isInitialBlockDownload() override { return IsInitialBlockDownload(); }\n     bool shutdownRequested() override { return ShutdownRequested(); }\n     int64_t getAdjustedTime() override { return GetAdjustedTime(); }"
      },
      {
        "sha": "4e0ef49f6ccd2b3b9f9ebb8d226280596d3dd161",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52b760fc6a9b26e405a0553ee8285b0f03ca1604/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52b760fc6a9b26e405a0553ee8285b0f03ca1604/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=52b760fc6a9b26e405a0553ee8285b0f03ca1604",
        "patch": "@@ -223,6 +223,9 @@ class Chain\n     //! Check if p2p enabled.\n     virtual bool p2pEnabled() = 0;\n \n+    //! Check if the node is ready to broadcast transactions.\n+    virtual bool isReadyToBroadcast() = 0;\n+\n     //! Check if in IBD.\n     virtual bool isInitialBlockDownload() = 0;\n \n@@ -258,7 +261,6 @@ class Chain\n         virtual void BlockDisconnected(const CBlock& block) {}\n         virtual void UpdatedBlockTip() {}\n         virtual void ChainStateFlushed(const CBlockLocator& locator) {}\n-        virtual void ResendWalletTransactions(Lock& locked_chain) {}\n     };\n \n     //! Register handler for notifications."
      },
      {
        "sha": "044fcc90cd682a4bd2f1a7765fbcb2839a0150ef",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52b760fc6a9b26e405a0553ee8285b0f03ca1604/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52b760fc6a9b26e405a0553ee8285b0f03ca1604/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=52b760fc6a9b26e405a0553ee8285b0f03ca1604",
        "patch": "@@ -3546,14 +3546,6 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n             }\n         }\n \n-        // Resend wallet transactions that haven't gotten in a block yet\n-        // Except during reindex, importing and IBD, when old wallet\n-        // transactions become unconfirmed and spams other nodes.\n-        if (!fReindex && !fImporting && !IsInitialBlockDownload())\n-        {\n-            GetMainSignals().Broadcast(connman);\n-        }\n-\n         //\n         // Try sending block announcements via headers\n         //"
      },
      {
        "sha": "5d0ee1d1fcaa0550d17cdf824809b0129814c09a",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52b760fc6a9b26e405a0553ee8285b0f03ca1604/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52b760fc6a9b26e405a0553ee8285b0f03ca1604/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=52b760fc6a9b26e405a0553ee8285b0f03ca1604",
        "patch": "@@ -25,7 +25,6 @@ struct ValidationInterfaceConnections {\n     boost::signals2::scoped_connection BlockDisconnected;\n     boost::signals2::scoped_connection TransactionRemovedFromMempool;\n     boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection Broadcast;\n     boost::signals2::scoped_connection BlockChecked;\n     boost::signals2::scoped_connection NewPoWValidBlock;\n };\n@@ -37,7 +36,6 @@ struct MainSignalsInstance {\n     boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n     boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n     boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (CConnman* connman)> Broadcast;\n     boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n@@ -101,7 +99,6 @@ void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     conns.BlockDisconnected = g_signals.m_internals->BlockDisconnected.connect(std::bind(&CValidationInterface::BlockDisconnected, pwalletIn, std::placeholders::_1));\n     conns.TransactionRemovedFromMempool = g_signals.m_internals->TransactionRemovedFromMempool.connect(std::bind(&CValidationInterface::TransactionRemovedFromMempool, pwalletIn, std::placeholders::_1));\n     conns.ChainStateFlushed = g_signals.m_internals->ChainStateFlushed.connect(std::bind(&CValidationInterface::ChainStateFlushed, pwalletIn, std::placeholders::_1));\n-    conns.Broadcast = g_signals.m_internals->Broadcast.connect(std::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, std::placeholders::_1));\n     conns.BlockChecked = g_signals.m_internals->BlockChecked.connect(std::bind(&CValidationInterface::BlockChecked, pwalletIn, std::placeholders::_1, std::placeholders::_2));\n     conns.NewPoWValidBlock = g_signals.m_internals->NewPoWValidBlock.connect(std::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, std::placeholders::_1, std::placeholders::_2));\n }\n@@ -175,10 +172,6 @@ void CMainSignals::ChainStateFlushed(const CBlockLocator &locator) {\n     });\n }\n \n-void CMainSignals::Broadcast(CConnman* connman) {\n-    m_internals->Broadcast(connman);\n-}\n-\n void CMainSignals::BlockChecked(const CBlock& block, const CValidationState& state) {\n     m_internals->BlockChecked(block, state);\n }"
      },
      {
        "sha": "78f3026a801a9f13f90d6b83f42cc65d769e730d",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52b760fc6a9b26e405a0553ee8285b0f03ca1604/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52b760fc6a9b26e405a0553ee8285b0f03ca1604/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=52b760fc6a9b26e405a0553ee8285b0f03ca1604",
        "patch": "@@ -134,8 +134,6 @@ class CValidationInterface {\n      * Called on a background thread.\n      */\n     virtual void ChainStateFlushed(const CBlockLocator &locator) {}\n-    /** Tells listeners to broadcast their data. */\n-    virtual void ResendWalletTransactions(CConnman* connman) {}\n     /**\n      * Notifies listeners of a block validation result.\n      * If the provided CValidationState IsValid, the provided block\n@@ -184,7 +182,6 @@ class CMainSignals {\n     void BlockConnected(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>> &);\n     void BlockDisconnected(const std::shared_ptr<const CBlock> &);\n     void ChainStateFlushed(const CBlockLocator &);\n-    void Broadcast(CConnman* connman);\n     void BlockChecked(const CBlock&, const CValidationState&);\n     void NewPoWValidBlock(const CBlockIndex *, const std::shared_ptr<const CBlock>&);\n };"
      },
      {
        "sha": "a8096dc67110c65feaae98fd1374ad4b79215205",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52b760fc6a9b26e405a0553ee8285b0f03ca1604/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52b760fc6a9b26e405a0553ee8285b0f03ca1604/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=52b760fc6a9b26e405a0553ee8285b0f03ca1604",
        "patch": "@@ -211,8 +211,9 @@ void StartWallets(CScheduler& scheduler)\n         pwallet->postInitProcess();\n     }\n \n-    // Run a thread to flush wallet periodically\n+    // Schedule periodic wallet flushes and tx rebroadcasts\n     scheduler.scheduleEvery(MaybeCompactWalletDB, 500);\n+    scheduler.scheduleEvery(MaybeResendWalletTxs, 1000);\n }\n \n void FlushWallets()"
      },
      {
        "sha": "cf477982cadddfdb128bd4c0f532122290e86cd1",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 1,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52b760fc6a9b26e405a0553ee8285b0f03ca1604/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52b760fc6a9b26e405a0553ee8285b0f03ca1604/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=52b760fc6a9b26e405a0553ee8285b0f03ca1604",
        "patch": "@@ -2114,8 +2114,21 @@ bool CWalletTx::IsEquivalentTo(const CWalletTx& _tx) const\n         return CTransaction(tx1) == CTransaction(tx2);\n }\n \n+// Rebroadcast transactions from the wallet. We do this on a random timer\n+// to slightly obfuscate which transactions come from our wallet.\n+//\n+// Ideally, we'd only resend transactions that we think should have been\n+// mined in the most recent block. Any transaction that wasn't in the top\n+// blockweight of transactions in the mempool shouldn't have been mined,\n+// and so is probably just sitting in the mempool waiting to be confirmed.\n+// Rebroadcasting does nothing to speed up confirmation and only damages\n+// privacy.\n void CWallet::ResendWalletTransactions(interfaces::Chain::Lock& locked_chain)\n {\n+    // During reindex, importing and IBD, old wallet transactions become\n+    // unconfirmed. Don't resend them as that would spam other nodes.\n+    if (!chain().isReadyToBroadcast()) return;\n+\n     // Do this infrequently and randomly to avoid giving away\n     // that these are our transactions.\n     if (GetTime() < nNextResend || !fBroadcastTransactions) return;\n@@ -2149,7 +2162,13 @@ void CWallet::ResendWalletTransactions(interfaces::Chain::Lock& locked_chain)\n \n /** @} */ // end of mapWallet\n \n-\n+void MaybeResendWalletTxs()\n+{\n+    for (const std::shared_ptr<CWallet>& pwallet : GetWallets()) {\n+        auto locked_chain = pwallet->chain().lock();\n+        pwallet->ResendWalletTransactions(*locked_chain);\n+    }\n+}\n \n \n /** @defgroup Actions"
      },
      {
        "sha": "a0c5f63cee40ee126b60dd28fb4b27376905b8d5",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52b760fc6a9b26e405a0553ee8285b0f03ca1604/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52b760fc6a9b26e405a0553ee8285b0f03ca1604/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=52b760fc6a9b26e405a0553ee8285b0f03ca1604",
        "patch": "@@ -949,7 +949,7 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     ScanResult ScanForWalletTransactions(const uint256& first_block, const uint256& last_block, const WalletRescanReserver& reserver, bool fUpdate);\n     void TransactionRemovedFromMempool(const CTransactionRef &ptx) override;\n     void ReacceptWalletTransactions(interfaces::Chain::Lock& locked_chain) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    void ResendWalletTransactions(interfaces::Chain::Lock& locked_chain) override;\n+    void ResendWalletTransactions(interfaces::Chain::Lock& locked_chain);\n     struct Balance {\n         CAmount m_mine_trusted{0};           //!< Trusted, at depth=GetBalance.min_depth or more\n         CAmount m_mine_untrusted_pending{0}; //!< Untrusted, but in mempool (pending)\n@@ -1232,6 +1232,12 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     friend struct WalletTestingSetup;\n };\n \n+/**\n+ * Called periodically by the schedule thread. Prompts individual wallets to resend\n+ * their transactions. Actual rebroadcast schedule is managed by the wallets themselves.\n+ */\n+void MaybeResendWalletTxs();\n+\n /** A key allocated from the key pool. */\n class CReserveKey final : public CReserveScript\n {"
      },
      {
        "sha": "ec5e230e5ab8cc4b68e4903161ed1b0f89ade807",
        "filename": "test/functional/wallet_resendwallettransactions.py",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52b760fc6a9b26e405a0553ee8285b0f03ca1604/test/functional/wallet_resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52b760fc6a9b26e405a0553ee8285b0f03ca1604/test/functional/wallet_resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_resendwallettransactions.py?ref=52b760fc6a9b26e405a0553ee8285b0f03ca1604",
        "patch": "@@ -39,6 +39,12 @@ def run_test(self):\n         self.log.info(\"Create a new transaction and wait until it's broadcast\")\n         txid = int(node.sendtoaddress(node.getnewaddress(), 1), 16)\n \n+        # Wallet rebroadcast is first scheduled 1 sec after startup (see\n+        # nNextResend in ResendWalletTransactions()). Sleep for just over a\n+        # second to be certain that it has been called before the first\n+        # setmocktime call below.\n+        time.sleep(1.1)\n+\n         # Can take a few seconds due to transaction trickling\n         wait_until(lambda: node.p2p.tx_invs_received[txid] >= 1, lock=mininode_lock)\n "
      }
    ]
  },
  {
    "sha": "833d98ae073daf0f25f786f043f2ffa85155c8ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzNkOThhZTA3M2RhZjBmMjVmNzg2ZjA0M2YyZmZhODUxNTVjOGZm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-03-20T22:07:52Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-04-09T14:38:28Z"
      },
      "message": "[wallet] Remove unnecessary Chain::Lock parameter from ResendWalletTransactions",
      "tree": {
        "sha": "3c2ed9b9244af112b3e09613f08a19be0a144693",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c2ed9b9244af112b3e09613f08a19be0a144693"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/833d98ae073daf0f25f786f043f2ffa85155c8ff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/833d98ae073daf0f25f786f043f2ffa85155c8ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/833d98ae073daf0f25f786f043f2ffa85155c8ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/833d98ae073daf0f25f786f043f2ffa85155c8ff/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "52b760fc6a9b26e405a0553ee8285b0f03ca1604",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52b760fc6a9b26e405a0553ee8285b0f03ca1604",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/52b760fc6a9b26e405a0553ee8285b0f03ca1604"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "9f89cbefa0f3a855e0fb860a421a2bd9abf78c28",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/833d98ae073daf0f25f786f043f2ffa85155c8ff/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/833d98ae073daf0f25f786f043f2ffa85155c8ff/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=833d98ae073daf0f25f786f043f2ffa85155c8ff",
        "patch": "@@ -2123,7 +2123,7 @@ bool CWalletTx::IsEquivalentTo(const CWalletTx& _tx) const\n // and so is probably just sitting in the mempool waiting to be confirmed.\n // Rebroadcasting does nothing to speed up confirmation and only damages\n // privacy.\n-void CWallet::ResendWalletTransactions(interfaces::Chain::Lock& locked_chain)\n+void CWallet::ResendWalletTransactions()\n {\n     // During reindex, importing and IBD, old wallet transactions become\n     // unconfirmed. Don't resend them as that would spam other nodes.\n@@ -2142,7 +2142,8 @@ void CWallet::ResendWalletTransactions(interfaces::Chain::Lock& locked_chain)\n \n     int relayed_tx_count = 0;\n \n-    { // cs_wallet scope\n+    { // locked_chain and cs_wallet scope\n+        auto locked_chain = chain().lock();\n         LOCK(cs_wallet);\n \n         // Relay transactions\n@@ -2151,9 +2152,9 @@ void CWallet::ResendWalletTransactions(interfaces::Chain::Lock& locked_chain)\n             // only rebroadcast unconfirmed txes older than 5 minutes before the\n             // last block was found\n             if (wtx.nTimeReceived > m_best_block_time - 5 * 60) continue;\n-            relayed_tx_count += wtx.RelayWalletTransaction(locked_chain) ? 1 : 0;\n+            if (wtx.RelayWalletTransaction(*locked_chain)) ++relayed_tx_count;\n         }\n-    } // cs_wallet\n+    } // locked_chain and cs_wallet\n \n     if (relayed_tx_count > 0) {\n         WalletLogPrintf(\"%s: rebroadcast %u unconfirmed transactions\\n\", __func__, relayed_tx_count);\n@@ -2165,8 +2166,7 @@ void CWallet::ResendWalletTransactions(interfaces::Chain::Lock& locked_chain)\n void MaybeResendWalletTxs()\n {\n     for (const std::shared_ptr<CWallet>& pwallet : GetWallets()) {\n-        auto locked_chain = pwallet->chain().lock();\n-        pwallet->ResendWalletTransactions(*locked_chain);\n+        pwallet->ResendWalletTransactions();\n     }\n }\n "
      },
      {
        "sha": "587b2814c099fd16e31eb6aea6dc090c4b490024",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/833d98ae073daf0f25f786f043f2ffa85155c8ff/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/833d98ae073daf0f25f786f043f2ffa85155c8ff/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=833d98ae073daf0f25f786f043f2ffa85155c8ff",
        "patch": "@@ -949,7 +949,7 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     ScanResult ScanForWalletTransactions(const uint256& first_block, const uint256& last_block, const WalletRescanReserver& reserver, bool fUpdate);\n     void TransactionRemovedFromMempool(const CTransactionRef &ptx) override;\n     void ReacceptWalletTransactions(interfaces::Chain::Lock& locked_chain) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    void ResendWalletTransactions(interfaces::Chain::Lock& locked_chain);\n+    void ResendWalletTransactions();\n     struct Balance {\n         CAmount m_mine_trusted{0};           //!< Trusted, at depth=GetBalance.min_depth or more\n         CAmount m_mine_untrusted_pending{0}; //!< Untrusted, but in mempool (pending)"
      }
    ]
  }
]