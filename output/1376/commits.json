[
  {
    "sha": "f1861999d813c37d9730bc738544a920317bfab4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMTg2MTk5OWQ4MTNjMzdkOTczMGJjNzM4NTQ0YTkyMDMxN2JmYWI0",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-28T22:42:48Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-29T08:39:33Z"
      },
      "message": "Add -logtxpeer option",
      "tree": {
        "sha": "27500602f79a2cc3287b443344d05bd97be62451",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/27500602f79a2cc3287b443344d05bd97be62451"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f1861999d813c37d9730bc738544a920317bfab4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1861999d813c37d9730bc738544a920317bfab4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f1861999d813c37d9730bc738544a920317bfab4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1861999d813c37d9730bc738544a920317bfab4/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f6521b66f7d4e7c3d55e0fd1d006fd6311afc18f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6521b66f7d4e7c3d55e0fd1d006fd6311afc18f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f6521b66f7d4e7c3d55e0fd1d006fd6311afc18f"
      }
    ],
    "stats": {
      "total": 105,
      "additions": 81,
      "deletions": 24
    },
    "files": [
      {
        "sha": "f1cac47645939d09e332c1d8b894bc83f0e589b7",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1861999d813c37d9730bc738544a920317bfab4/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1861999d813c37d9730bc738544a920317bfab4/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f1861999d813c37d9730bc738544a920317bfab4",
        "patch": "@@ -355,6 +355,7 @@ bool AppInit2()\n     fPrintToConsole = GetBoolArg(\"-printtoconsole\");\n     fPrintToDebugger = GetBoolArg(\"-printtodebugger\");\n     fLogTimestamps = GetBoolArg(\"-logtimestamps\");\n+    fLogTxPeer = GetBoolArg(\"-logtxpeer\"); // Not shown in syntax output for privacy reasons.\n \n     if (mapArgs.count(\"-timeout\"))\n     {"
      },
      {
        "sha": "0eccdef7d8adfac34341216382f8c2de7c872cfb",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 78,
        "deletions": 24,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1861999d813c37d9730bc738544a920317bfab4/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1861999d813c37d9730bc738544a920317bfab4/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f1861999d813c37d9730bc738544a920317bfab4",
        "patch": "@@ -32,6 +32,7 @@ uint256 hashGenesisBlock(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3\n static CBigNum bnProofOfWorkLimit(~uint256(0) >> 32);\n CBlockIndex* pindexGenesisBlock = NULL;\n int nBestHeight = -1;\n+CNode* txnode = NULL;           // node calling AcceptToMemoryPool()\n CBigNum bnBestChainWork = 0;\n CBigNum bnBestInvalidWork = 0;\n uint256 hashBestChain = 0;\n@@ -425,10 +426,14 @@ int CMerkleTx::SetMerkleBranch(const CBlock* pblock)\n bool CTransaction::CheckTransaction() const\n {\n     // Basic checks that don't depend on any context\n-    if (vin.empty())\n+    if (vin.empty()) {\n+        if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n         return DoS(10, error(\"CTransaction::CheckTransaction() : vin empty\"));\n-    if (vout.empty())\n+    }\n+    if (vout.empty()) {\n+        if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n         return DoS(10, error(\"CTransaction::CheckTransaction() : vout empty\"));\n+    }\n     // Size limits\n     if (::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n         return DoS(100, error(\"CTransaction::CheckTransaction() : size limits failed\"));\n@@ -450,8 +455,11 @@ bool CTransaction::CheckTransaction() const\n     set<COutPoint> vInOutPoints;\n     BOOST_FOREACH(const CTxIn& txin, vin)\n     {\n-        if (vInOutPoints.count(txin.prevout))\n+        if (vInOutPoints.count(txin.prevout)) {\n+            if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n+            printf(\"CheckTransaction(): %s duplicate input\\n\", hash.ToString().substr(0,10).c_str());\n             return false;\n+        }\n         vInOutPoints.insert(txin.prevout);\n     }\n \n@@ -463,8 +471,10 @@ bool CTransaction::CheckTransaction() const\n     else\n     {\n         BOOST_FOREACH(const CTxIn& txin, vin)\n-            if (txin.prevout.IsNull())\n-                return DoS(10, error(\"CTransaction::CheckTransaction() : prevout is null\"));\n+            if (txin.prevout.IsNull()) {\n+                if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n+                return DoS(10, error(\"CheckTransaction(): %s prevout is null\", hash.ToString().substr(0,10).c_str()));\n+            }\n     }\n \n     return true;\n@@ -484,12 +494,16 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n         return tx.DoS(100, error(\"CTxMemPool::accept() : coinbase as individual tx\"));\n \n     // To help v0.1.5 clients who would see it as a negative number\n-    if ((int64)tx.nLockTime > std::numeric_limits<int>::max())\n+    if ((int64)tx.nLockTime > std::numeric_limits<int>::max()) {\n+        if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n         return error(\"CTxMemPool::accept() : not accepting nLockTime beyond 2038 yet\");\n+    }\n \n     // Rather not work on nonstandard transactions (unless -testnet)\n-    if (!fTestNet && !tx.IsStandard())\n+    if (!fTestNet && !tx.IsStandard()) {\n+        if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n         return error(\"CTxMemPool::accept() : nonstandard transaction type\");\n+    }\n \n     // Do we already have it?\n     uint256 hash = tx.GetHash();\n@@ -513,19 +527,39 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n             return false;\n \n             // Allow replacing with a newer version of the same transaction\n-            if (i != 0)\n+            if (i != 0) {\n+                if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n+                printf(\"txaccept: replacement failed as i != 0\\n\", hash.ToString().substr(0,10).c_str());\n                 return false;\n+            }\n             ptxOld = mapNextTx[outpoint].ptx;\n-            if (ptxOld->IsFinal())\n+            if (ptxOld->IsFinal()) {\n+                if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n+                printf(\"txaccept: replacement failed as old outpoint IsFinal\\n\", hash.ToString().substr(0,10).c_str()); \n                 return false;\n-            if (!tx.IsNewerThan(*ptxOld))\n+            }\n+            if (!tx.IsNewerThan(*ptxOld)) {\n+                if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n+                printf(\"txaccept: %s replacement failed as IsNewerThan\\n\", hash.ToString().substr(0,10).c_str());\n                 return false;\n+            }\n             for (unsigned int i = 0; i < tx.vin.size(); i++)\n             {\n                 COutPoint outpoint = tx.vin[i].prevout;\n-                if (!mapNextTx.count(outpoint) || mapNextTx[outpoint].ptx != ptxOld)\n+                if (!mapNextTx.count(outpoint)) {\n+                    if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n+                    printf(\"txaccept: %s replacement failed as no outpoint found\\n\", hash.ToString().substr(0,10).c_str());\n+                    return false;\n+                }\n+                if (mapNextTx[outpoint].ptx != ptxOld) {\n+                    if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n+                    printf(\"txaccept: %s replacement failed as outpoint is different\\n\", hash.ToString().substr(0,10).c_str());\n                     return false;\n+                }\n             }\n+            if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n+            printf(\"txaccept: %s is a replacement\\n\", hash.ToString().substr(0,10).c_str());\n+\n             break;\n         }\n     }\n@@ -537,16 +571,20 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n         bool fInvalid = false;\n         if (!tx.FetchInputs(txdb, mapUnused, false, false, mapInputs, fInvalid))\n         {\n-            if (fInvalid)\n+            if (fInvalid) {\n+                if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n                 return error(\"CTxMemPool::accept() : FetchInputs found invalid tx %s\", hash.ToString().substr(0,10).c_str());\n+            }\n             if (pfMissingInputs)\n                 *pfMissingInputs = true;\n             return false;\n         }\n \n         // Check for non-standard pay-to-script-hash in inputs\n-        if (!tx.AreInputsStandard(mapInputs) && !fTestNet)\n+        if (!tx.AreInputsStandard(mapInputs) && !fTestNet) {\n+            if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n             return error(\"CTxMemPool::accept() : nonstandard transaction input\");\n+        }\n \n         // Note: if you modify this code to accept non-standard transactions, then\n         // you should add code here to check that the transaction does a\n@@ -556,8 +594,13 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n         unsigned int nSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n \n         // Don't accept it if it can't get into a block\n-        if (nFees < tx.GetMinFee(1000, true, GMF_RELAY))\n-            return error(\"CTxMemPool::accept() : not enough fees\");\n+        if (nFees < tx.GetMinFee(1000, true, GMF_RELAY)) {\n+            if (txnode && fLogTxPeer)\n+                return error(\"CTxMemPool::accept(): %s from %s not enough fees\",\n+                  hash.ToString().substr(0,10).c_str(), txnode->addr.ToString().c_str());\n+            else\n+                return error(\"CTxMemPool::accept(): %s not enough fees\", hash.ToString().substr(0,10).c_str());\n+        }\n \n         // Continuously rate-limit free transactions\n         // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n@@ -576,21 +619,27 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n                 nLastTime = nNow;\n                 // -limitfreerelay unit is thousand-bytes-per-minute\n                 // At default rate it would take over a month to fill 1GB\n-                if (dFreeCount > GetArg(\"-limitfreerelay\", 15)*10*1000 && !IsFromMe(tx))\n-                    return error(\"CTxMemPool::accept() : free transaction rejected by rate limiter\");\n+                if (dFreeCount > GetArg(\"-limitfreerelay\", 15)*10*1000 && !IsFromMe(tx)) {\n+                    if (txnode && fLogTxPeer)\n+                        return error(\"CTxMemPool::accept(): free tx %s from %s rejected by rate limiter\",\n+                          hash.ToString().substr(0,10).c_str(), txnode->addr.ToString().c_str());\n+                    else\n+                        return error(\"CTxMemPool::accept(): free tx %s rejected by rate limiter\",\n+                          hash.ToString().substr(0,10).c_str());\n+                }\n                 if (fDebug)\n                     printf(\"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n                 dFreeCount += nSize;\n             }\n-        }\n+        } // nFees < MIN_RELAY_TX_FEE\n \n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n         if (!tx.ConnectInputs(mapInputs, mapUnused, CDiskTxPos(1,1,1), pindexBest, false, false))\n         {\n             return error(\"CTxMemPool::accept() : ConnectInputs failed %s\", hash.ToString().substr(0,10).c_str());\n         }\n-    }\n+    } // if (fCheckInputs)\n \n     // Store transaction in memory\n     {\n@@ -608,9 +657,8 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n     if (ptxOld)\n         EraseFromWallets(ptxOld->GetHash());\n \n-    printf(\"CTxMemPool::accept() : accepted %s (poolsz %u)\\n\",\n-           hash.ToString().substr(0,10).c_str(),\n-           mapTx.size());\n+    printf(\"mempool %lu: tx %s accepted \", mapTx.size(), hash.ToString().substr(0,10).c_str());\n+\n     return true;\n }\n \n@@ -2700,8 +2748,14 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         pfrom->AddInventoryKnown(inv);\n \n         bool fMissingInputs = false;\n+        txnode = pfrom; \n         if (tx.AcceptToMemoryPool(txdb, true, &fMissingInputs))\n         {\n+            txnode = NULL;\n+            if (fLogTxPeer)\n+                printf(\"from %s\\n\", pfrom->addr.ToString().c_str());\n+            else\n+                printf(\"\\n\");\n             SyncWithWallets(tx, NULL, true);\n             RelayMessage(inv, vMsg);\n             mapAlreadyAskedFor.erase(inv);\n@@ -2724,7 +2778,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n                     if (tx.AcceptToMemoryPool(txdb, true, &fMissingInputs2))\n                     {\n-                        printf(\"   accepted orphan tx %s\\n\", inv.hash.ToString().substr(0,10).c_str());\n+                        printf(\"(orphan)\\n\");\n                         SyncWithWallets(tx, NULL, true);\n                         RelayMessage(inv, vMsg);\n                         mapAlreadyAskedFor.erase(inv);\n@@ -2742,7 +2796,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n             BOOST_FOREACH(uint256 hash, vEraseQueue)\n                 EraseOrphanTx(hash);\n-        }\n+        } // if tx.AcceptToMemoryPool()\n         else if (fMissingInputs)\n         {\n             AddOrphanTx(vMsg);"
      },
      {
        "sha": "995eb40eb2f471289b24301bea768eb89330079a",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1861999d813c37d9730bc738544a920317bfab4/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1861999d813c37d9730bc738544a920317bfab4/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=f1861999d813c37d9730bc738544a920317bfab4",
        "patch": "@@ -69,6 +69,7 @@ string strMiscWarning;\n bool fTestNet = false;\n bool fNoListen = false;\n bool fLogTimestamps = false;\n+bool fLogTxPeer = false;\n CMedianFilter<int64> vTimeOffsets(200,0);\n bool fReopenDebugLog = false;\n "
      },
      {
        "sha": "7dd0b3947f428fd00a5a90aa2acb846bdae37b38",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1861999d813c37d9730bc738544a920317bfab4/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1861999d813c37d9730bc738544a920317bfab4/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=f1861999d813c37d9730bc738544a920317bfab4",
        "patch": "@@ -117,6 +117,7 @@ extern bool fTestNet;\n extern bool fNoListen;\n extern bool fLogTimestamps;\n extern bool fReopenDebugLog;\n+extern bool fLogTxPeer;\n \n void RandAddSeed();\n void RandAddSeedPerfmon();"
      }
    ]
  }
]