[
  {
    "sha": "6a94b1e3f83da86e21ac8a1183d7c89f6d86a516",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTk0YjFlM2Y4M2RhODZlMjFhYzhhMTE4M2Q3Yzg5ZjZkODZhNTE2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-02-27T10:22:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-05-28T12:30:00Z"
      },
      "message": "FormatMoney: make right-trimming zeros optional, on by default\n\nCurrently the FormatMoney function always trims trailing zeros apart\nfrom two if possible.\nAdd an option to avoid this trimming and always return a string with 8\ndecimals.",
      "tree": {
        "sha": "b99f6ec3000f7e14d0d4018fcc08aca38f43cb7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b99f6ec3000f7e14d0d4018fcc08aca38f43cb7e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a94b1e3f83da86e21ac8a1183d7c89f6d86a516",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a94b1e3f83da86e21ac8a1183d7c89f6d86a516",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a94b1e3f83da86e21ac8a1183d7c89f6d86a516",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a94b1e3f83da86e21ac8a1183d7c89f6d86a516/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd19892d98cb50a8001a63cf0a0c14d85a92550c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd19892d98cb50a8001a63cf0a0c14d85a92550c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd19892d98cb50a8001a63cf0a0c14d85a92550c"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 11,
      "deletions": 8
    },
    "files": [
      {
        "sha": "61a3c94a20bd28c447a7d5b93707d2a443e298e3",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a94b1e3f83da86e21ac8a1183d7c89f6d86a516/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a94b1e3f83da86e21ac8a1183d7c89f6d86a516/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=6a94b1e3f83da86e21ac8a1183d7c89f6d86a516",
        "patch": "@@ -305,7 +305,7 @@ int LogPrintStr(const std::string &str)\n     return ret;\n }\n \n-string FormatMoney(int64_t n, bool fPlus)\n+string FormatMoney(int64_t n, bool fPlus, bool fTrim)\n {\n     // Note: not using straight sprintf here because we do NOT want\n     // localized number formatting.\n@@ -314,12 +314,15 @@ string FormatMoney(int64_t n, bool fPlus)\n     int64_t remainder = n_abs%COIN;\n     string str = strprintf(\"%d.%08d\", quotient, remainder);\n \n-    // Right-trim excess zeros before the decimal point:\n-    int nTrim = 0;\n-    for (int i = str.size()-1; (str[i] == '0' && isdigit(str[i-2])); --i)\n-        ++nTrim;\n-    if (nTrim)\n-        str.erase(str.size()-nTrim, nTrim);\n+    if(fTrim)\n+    {\n+        // Right-trim excess zeros after the decimal point:\n+        int nTrim = 0;\n+        for (int i = str.size()-1; (str[i] == '0' && isdigit(str[i-2])); --i)\n+            ++nTrim;\n+        if (nTrim)\n+            str.erase(str.size()-nTrim, nTrim);\n+    }\n \n     if (n < 0)\n         str.insert((unsigned int)0, 1, '-');"
      },
      {
        "sha": "d518f7bb46e7cb3b280302a748b11a2f53e473dd",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a94b1e3f83da86e21ac8a1183d7c89f6d86a516/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a94b1e3f83da86e21ac8a1183d7c89f6d86a516/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=6a94b1e3f83da86e21ac8a1183d7c89f6d86a516",
        "patch": "@@ -152,7 +152,7 @@ static inline bool error(const char* format)\n }\n \n void PrintExceptionContinue(std::exception* pex, const char* pszThread);\n-std::string FormatMoney(int64_t n, bool fPlus=false);\n+std::string FormatMoney(int64_t n, bool fPlus=false, bool fTrim=true);\n bool ParseMoney(const std::string& str, int64_t& nRet);\n bool ParseMoney(const char* pszIn, int64_t& nRet);\n std::string SanitizeString(const std::string& str);"
      }
    ]
  },
  {
    "sha": "476971c696843d71d98c2f13913e233fb26d901b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzY5NzFjNjk2ODQzZDcxZDk4YzJmMTM5MTNlMjMzZmIyNmQ5MDFi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-02-27T10:33:11Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-05-28T12:30:00Z"
      },
      "message": "Move AmountFromValue and ValueFromAmount to rpcprotocol\n\nConverting monetary amounts is part of the RPC protocol,\nboth the client and server need to share the same implementation.",
      "tree": {
        "sha": "914a51b5e6f769c439671a58a8ab5b9fc94a1391",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/914a51b5e6f769c439671a58a8ab5b9fc94a1391"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/476971c696843d71d98c2f13913e233fb26d901b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/476971c696843d71d98c2f13913e233fb26d901b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/476971c696843d71d98c2f13913e233fb26d901b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/476971c696843d71d98c2f13913e233fb26d901b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a94b1e3f83da86e21ac8a1183d7c89f6d86a516",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a94b1e3f83da86e21ac8a1183d7c89f6d86a516",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a94b1e3f83da86e21ac8a1183d7c89f6d86a516"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 20,
      "deletions": 18
    },
    "files": [
      {
        "sha": "0636ecb0343b8c8e61b94c7eb3b901b214417fdd",
        "filename": "src/rpcprotocol.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/476971c696843d71d98c2f13913e233fb26d901b/src/rpcprotocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/476971c696843d71d98c2f13913e233fb26d901b/src/rpcprotocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.cpp?ref=476971c696843d71d98c2f13913e233fb26d901b",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"rpcprotocol.h\"\n \n+#include \"core.h\"\n #include \"util.h\"\n \n #include <stdint.h>\n@@ -251,3 +252,19 @@ Object JSONRPCError(int code, const string& message)\n     error.push_back(Pair(\"message\", message));\n     return error;\n }\n+\n+int64_t AmountFromValue(const Value& value)\n+{\n+    double dAmount = value.get_real();\n+    if (dAmount <= 0.0 || dAmount > 21000000.0)\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n+    int64_t nAmount = roundint64(dAmount * COIN);\n+    if (!MoneyRange(nAmount))\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n+    return nAmount;\n+}\n+\n+Value ValueFromAmount(int64_t amount)\n+{\n+    return (double)amount / (double)COIN;\n+}"
      },
      {
        "sha": "7d3e81931e5c635477fed8305bca17a378288d6e",
        "filename": "src/rpcprotocol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/476971c696843d71d98c2f13913e233fb26d901b/src/rpcprotocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/476971c696843d71d98c2f13913e233fb26d901b/src/rpcprotocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.h?ref=476971c696843d71d98c2f13913e233fb26d901b",
        "patch": "@@ -153,4 +153,7 @@ json_spirit::Object JSONRPCReplyObj(const json_spirit::Value& result, const json\n std::string JSONRPCReply(const json_spirit::Value& result, const json_spirit::Value& error, const json_spirit::Value& id);\n json_spirit::Object JSONRPCError(int code, const std::string& message);\n \n+extern int64_t AmountFromValue(const json_spirit::Value& value);\n+extern json_spirit::Value ValueFromAmount(int64_t amount);\n+\n #endif"
      },
      {
        "sha": "232fe018e7837677059f8f0ca02771b3bbd86c5b",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/476971c696843d71d98c2f13913e233fb26d901b/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/476971c696843d71d98c2f13913e233fb26d901b/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=476971c696843d71d98c2f13913e233fb26d901b",
        "patch": "@@ -81,22 +81,6 @@ void RPCTypeCheck(const Object& o,\n     }\n }\n \n-int64_t AmountFromValue(const Value& value)\n-{\n-    double dAmount = value.get_real();\n-    if (dAmount <= 0.0 || dAmount > 21000000.0)\n-        throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n-    int64_t nAmount = roundint64(dAmount * COIN);\n-    if (!MoneyRange(nAmount))\n-        throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n-    return nAmount;\n-}\n-\n-Value ValueFromAmount(int64_t amount)\n-{\n-    return (double)amount / (double)COIN;\n-}\n-\n std::string HexBits(unsigned int nBits)\n {\n     union {"
      },
      {
        "sha": "5b414e21ea8a76de9a5bd24999cecd1aa2ccd61b",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/476971c696843d71d98c2f13913e233fb26d901b/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/476971c696843d71d98c2f13913e233fb26d901b/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=476971c696843d71d98c2f13913e233fb26d901b",
        "patch": "@@ -103,8 +103,6 @@ extern void InitRPCMining();\n extern void ShutdownRPCMining();\n \n extern int64_t nWalletUnlockTime;\n-extern int64_t AmountFromValue(const json_spirit::Value& value);\n-extern json_spirit::Value ValueFromAmount(int64_t amount);\n extern double GetDifficulty(const CBlockIndex* blockindex = NULL);\n extern std::string HexBits(unsigned int nBits);\n extern std::string HelpRequiringPassphrase();"
      }
    ]
  },
  {
    "sha": "93bc5a068c5628b1b8be7bac92c708704c3ed0b9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5M2JjNWEwNjhjNTYyOGIxYjhiZTdiYWM5MmM3MDg3MDRjM2VkMGI5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-02-27T10:41:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-05-28T12:34:45Z"
      },
      "message": "Use ValueFromAmount in RPC client\n\nNo longer use doubles. This allows supporting alternative RPC\nrepresentations of monetary values.",
      "tree": {
        "sha": "ab40e91d37430b19e709da62091df1381dd9f01f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab40e91d37430b19e709da62091df1381dd9f01f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93bc5a068c5628b1b8be7bac92c708704c3ed0b9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93bc5a068c5628b1b8be7bac92c708704c3ed0b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/93bc5a068c5628b1b8be7bac92c708704c3ed0b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93bc5a068c5628b1b8be7bac92c708704c3ed0b9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "476971c696843d71d98c2f13913e233fb26d901b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/476971c696843d71d98c2f13913e233fb26d901b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/476971c696843d71d98c2f13913e233fb26d901b"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 21,
      "deletions": 12
    },
    "files": [
      {
        "sha": "829f3a2fda312617a5c809e26154167ae331a485",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 12,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93bc5a068c5628b1b8be7bac92c708704c3ed0b9/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93bc5a068c5628b1b8be7bac92c708704c3ed0b9/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=93bc5a068c5628b1b8be7bac92c708704c3ed0b9",
        "patch": "@@ -113,6 +113,15 @@ void ConvertTo(Value& value, bool fAllowNull=false)\n     }\n }\n \n+// Parse a monetary value from a string to the appropriate JSON type\n+void ConvertMonetaryValue(Value &value, bool fAllowNull=false)\n+{\n+    int64_t nAmount;\n+    if(!ParseMoney(value.get_str(), nAmount))\n+        throw runtime_error(string(\"Error parsing monetary value:\") + value.get_str());\n+    value = ValueFromAmount(nAmount);\n+}\n+\n // Convert strings to command-specific RPC representation\n Array RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams)\n {\n@@ -131,24 +140,24 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n     if (strMethod == \"setgenerate\"            && n > 1) ConvertTo<int64_t>(params[1]);\n     if (strMethod == \"getnetworkhashps\"       && n > 0) ConvertTo<int64_t>(params[0]);\n     if (strMethod == \"getnetworkhashps\"       && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"sendtoaddress\"          && n > 1) ConvertTo<double>(params[1]);\n-    if (strMethod == \"settxfee\"               && n > 0) ConvertTo<double>(params[0]);\n+    if (strMethod == \"sendtoaddress\"          && n > 1) ConvertMonetaryValue(params[1]);\n+    if (strMethod == \"settxfee\"               && n > 0) ConvertMonetaryValue(params[0]);\n     if (strMethod == \"getreceivedbyaddress\"   && n > 1) ConvertTo<int64_t>(params[1]);\n     if (strMethod == \"getreceivedbyaccount\"   && n > 1) ConvertTo<int64_t>(params[1]);\n     if (strMethod == \"listreceivedbyaddress\"  && n > 0) ConvertTo<int64_t>(params[0]);\n     if (strMethod == \"listreceivedbyaddress\"  && n > 1) ConvertTo<bool>(params[1]);\n     if (strMethod == \"listreceivedbyaccount\"  && n > 0) ConvertTo<int64_t>(params[0]);\n     if (strMethod == \"listreceivedbyaccount\"  && n > 1) ConvertTo<bool>(params[1]);\n-    if (strMethod == \"getbalance\"             && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"getblockhash\"           && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"move\"                   && n > 2) ConvertTo<double>(params[2]);\n-    if (strMethod == \"move\"                   && n > 3) ConvertTo<int64_t>(params[3]);\n-    if (strMethod == \"sendfrom\"               && n > 2) ConvertTo<double>(params[2]);\n-    if (strMethod == \"sendfrom\"               && n > 3) ConvertTo<int64_t>(params[3]);\n-    if (strMethod == \"listtransactions\"       && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"listtransactions\"       && n > 2) ConvertTo<int64_t>(params[2]);\n-    if (strMethod == \"listaccounts\"           && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"walletpassphrase\"       && n > 1) ConvertTo<int64_t>(params[1]);\n+    if (strMethod == \"getbalance\"             && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"getblockhash\"           && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+    if (strMethod == \"move\"                   && n > 2) ConvertMonetaryValue(params[2]);\n+    if (strMethod == \"move\"                   && n > 3) ConvertTo<boost::int64_t>(params[3]);\n+    if (strMethod == \"sendfrom\"               && n > 2) ConvertMonetaryValue(params[2]);\n+    if (strMethod == \"sendfrom\"               && n > 3) ConvertTo<boost::int64_t>(params[3]);\n+    if (strMethod == \"listtransactions\"       && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"listtransactions\"       && n > 2) ConvertTo<boost::int64_t>(params[2]);\n+    if (strMethod == \"listaccounts\"           && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+    if (strMethod == \"walletpassphrase\"       && n > 1) ConvertTo<boost::int64_t>(params[1]);\n     if (strMethod == \"getblocktemplate\"       && n > 0) ConvertTo<Object>(params[0]);\n     if (strMethod == \"listsinceblock\"         && n > 1) ConvertTo<int64_t>(params[1]);\n     if (strMethod == \"sendmany\"               && n > 1) ConvertTo<Object>(params[1]);"
      }
    ]
  },
  {
    "sha": "f3f8460fe51be719231612a921dd37af638df46a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmM2Y4NDYwZmU1MWJlNzE5MjMxNjEyYTkyMWRkMzdhZjYzOGRmNDZh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-02-27T10:43:05Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-05-28T12:36:28Z"
      },
      "message": "Add option `-rpcamount` to set format for monetary amounts in RPC\n\nSupport this option at both the client side and server side. Both sides need\nto be using the same value of this option, otherwise parse errors\nwill ensue.\n\nFour modes are available:\n\n- number-btc: Format as number in decimal BTC (default)\n- number-satoshis: Format as number in satoshis\n- string-btc: Format as string in decimal BTC\n- string-satoshis: Format as string in satoshis\n\nAlso add tests for AmountFromValue / ValueFromAmount for all four modes.",
      "tree": {
        "sha": "85387df57c54f5ca672f29b381f677774bfcc403",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/85387df57c54f5ca672f29b381f677774bfcc403"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3f8460fe51be719231612a921dd37af638df46a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3f8460fe51be719231612a921dd37af638df46a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f3f8460fe51be719231612a921dd37af638df46a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3f8460fe51be719231612a921dd37af638df46a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "93bc5a068c5628b1b8be7bac92c708704c3ed0b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93bc5a068c5628b1b8be7bac92c708704c3ed0b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/93bc5a068c5628b1b8be7bac92c708704c3ed0b9"
      }
    ],
    "stats": {
      "total": 260,
      "additions": 240,
      "deletions": 20
    },
    "files": [
      {
        "sha": "ff3c0c549a605d5f275396a03b6278e7fbd2dca0",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3f8460fe51be719231612a921dd37af638df46a/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3f8460fe51be719231612a921dd37af638df46a/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=f3f8460fe51be719231612a921dd37af638df46a",
        "patch": "@@ -53,6 +53,12 @@ static bool AppInitRPC(int argc, char* argv[])\n         fprintf(stdout, \"%s\", strUsage.c_str());\n         return false;\n     }\n+    std::string strAmountMode = GetArg(\"-rpcamount\", strRPCDefaultAmountMode);\n+    if (!SetRPCAmountMode(strAmountMode))\n+    {\n+        fprintf(stderr, \"Invalid -rpcamount setting: %s\\n\", strAmountMode.c_str());\n+        return false;\n+    }\n     return true;\n }\n "
      },
      {
        "sha": "ee7be7f3926c5a40e31bf424ef746492a4bc3f0d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3f8460fe51be719231612a921dd37af638df46a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3f8460fe51be719231612a921dd37af638df46a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f3f8460fe51be719231612a921dd37af638df46a",
        "patch": "@@ -304,6 +304,7 @@ std::string HelpMessage(HelpMessageMode hmm)\n \n     strUsage += \"\\n\" + _(\"RPC server options:\") + \"\\n\";\n     strUsage += \"  -server                \" + _(\"Accept command line and JSON-RPC commands\") + \"\\n\";\n+    strUsage += \"  -rpcamount=<format>    \" + strprintf(_(\"Use format for monetary amounts in RPC interface. Available options are number-decimal, number-satoshis, string-decimal, and string-satoshis (default: %s)\"), strRPCDefaultAmountMode) + \"\\n\";\n     strUsage += \"  -rpcbind=<addr>        \" + _(\"Bind to given address to listen for JSON-RPC connections. Use [host]:port notation for IPv6. This option can be specified multiple times (default: bind to all interfaces)\") + \"\\n\";\n     strUsage += \"  -rpcuser=<user>        \" + _(\"Username for JSON-RPC connections\") + \"\\n\";\n     strUsage += \"  -rpcpassword=<pw>      \" + _(\"Password for JSON-RPC connections\") + \"\\n\";\n@@ -585,6 +586,10 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n     strWalletFile = GetArg(\"-wallet\", \"wallet.dat\");\n #endif\n+    std::string strAmountMode = GetArg(\"-rpcamount\", strRPCDefaultAmountMode);\n+    if (!SetRPCAmountMode(strAmountMode))\n+        return InitError(strprintf(\"Invalid -rpcamount setting: %s\", strAmountMode.c_str()));\n+\n     // ********************************************************* Step 4: application initialization: dir lock, daemonize, pidfile, debug log\n \n     std::string strDataDir = GetDataDir().string();"
      },
      {
        "sha": "841a43072696686f7fb8345af7b5631050e348eb",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3f8460fe51be719231612a921dd37af638df46a/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3f8460fe51be719231612a921dd37af638df46a/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=f3f8460fe51be719231612a921dd37af638df46a",
        "patch": "@@ -271,6 +271,7 @@ std::string HelpMessageCli(bool mainProgram)\n         strUsage += _(\"RPC client options:\") + \"\\n\";\n     }\n \n+    strUsage += \"  -rpcamount=<format>    \" + strprintf(_(\"Use format for monetary amounts in RPC interface. Available options are number-decimal, number-satoshis, string-decimal, and string-satoshis (default: %s)\"), strRPCDefaultAmountMode) + \"\\n\";\n     strUsage += \"  -rpcconnect=<ip>       \" + _(\"Send commands to node running on <ip> (default: 127.0.0.1)\") + \"\\n\";\n     strUsage += \"  -rpcport=<port>        \" + _(\"Connect to JSON-RPC on <port> (default: 8332 or testnet: 18332)\") + \"\\n\";\n     strUsage += \"  -rpcwait               \" + _(\"Wait for RPC server to start\") + \"\\n\";"
      },
      {
        "sha": "f3d6d65c32aa8e71dcc1bd7f0e48c2ec4de1482a",
        "filename": "src/rpcprotocol.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 7,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3f8460fe51be719231612a921dd37af638df46a/src/rpcprotocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3f8460fe51be719231612a921dd37af638df46a/src/rpcprotocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.cpp?ref=f3f8460fe51be719231612a921dd37af638df46a",
        "patch": "@@ -26,6 +26,10 @@ using namespace boost;\n using namespace boost::asio;\n using namespace json_spirit;\n \n+/// How to represent monetary amounts in RPC protocol\n+RPCAmountMode nRPCAmountMode = RPC_AMOUNT_NUMBER_BTC;\n+std::string strRPCDefaultAmountMode = \"number-btc\";\n+\n //\n // HTTP protocol\n //\n@@ -255,16 +259,64 @@ Object JSONRPCError(int code, const string& message)\n \n int64_t AmountFromValue(const Value& value)\n {\n-    double dAmount = value.get_real();\n-    if (dAmount <= 0.0 || dAmount > 21000000.0)\n-        throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n-    int64_t nAmount = roundint64(dAmount * COIN);\n-    if (!MoneyRange(nAmount))\n-        throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n+    int64_t nAmount = 0;\n+    switch(nRPCAmountMode)\n+    {\n+    case RPC_AMOUNT_NUMBER_BTC:\n+        {\n+            double dAmount = value.get_real();\n+            if (dAmount < 0.0 || dAmount > 21000000.0)\n+                throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n+            nAmount = roundint64(dAmount * COIN);\n+        }\n+        break;\n+    case RPC_AMOUNT_NUMBER_SATOSHIS:\n+        nAmount = value.get_int64();\n+        break;\n+    case RPC_AMOUNT_STRING_BTC:\n+        if (!ParseMoney(value.get_str(), nAmount))\n+            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n+        break;\n+    case RPC_AMOUNT_STRING_SATOSHIS:\n+        if (!atoi64_err(value.get_str(), nAmount))\n+            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n+        break;\n+    default:\n+        throw std::runtime_error(\"Invalid amount mode\");\n+    }\n+    if (!MoneyRange(nAmount)) // Check for overflow\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"Amount out of range\");\n     return nAmount;\n }\n \n Value ValueFromAmount(int64_t amount)\n {\n-    return (double)amount / (double)COIN;\n+    switch(nRPCAmountMode)\n+    {\n+    case RPC_AMOUNT_NUMBER_BTC:\n+        return (double)amount / (double)COIN;\n+    case RPC_AMOUNT_NUMBER_SATOSHIS:\n+        return (boost::int64_t)amount;\n+    case RPC_AMOUNT_STRING_BTC:\n+        return FormatMoney(amount, false, false); /* no +, no right-trimming zeroes */\n+    case RPC_AMOUNT_STRING_SATOSHIS:\n+        return i64tostr(amount);\n+    default:\n+        throw std::runtime_error(\"Invalid amount mode\");\n+    }\n+}\n+\n+bool SetRPCAmountMode(const std::string name)\n+{\n+    if (name == \"number-btc\")\n+        nRPCAmountMode = RPC_AMOUNT_NUMBER_BTC;\n+    else if (name == \"number-satoshis\")\n+        nRPCAmountMode = RPC_AMOUNT_NUMBER_SATOSHIS;\n+    else if (name == \"string-btc\")\n+        nRPCAmountMode = RPC_AMOUNT_STRING_BTC;\n+    else if (name == \"string-satoshis\")\n+        nRPCAmountMode = RPC_AMOUNT_STRING_SATOSHIS;\n+    else\n+        return false;\n+    return true;\n }"
      },
      {
        "sha": "704b54bc8338b6bebf83945dc4b7a7ac0a15a6ba",
        "filename": "src/rpcprotocol.h",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3f8460fe51be719231612a921dd37af638df46a/src/rpcprotocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3f8460fe51be719231612a921dd37af638df46a/src/rpcprotocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.h?ref=f3f8460fe51be719231612a921dd37af638df46a",
        "patch": "@@ -125,8 +125,7 @@ class SSLIOStreamDevice : public boost::iostreams::device<boost::iostreams::bidi\n         boost::system::error_code error = boost::asio::error::host_not_found;\n         tcp::resolver::iterator end;\n         while (error && endpoint_iterator != end)\n-        {\n-            stream.lowest_layer().close();\n+        { stream.lowest_layer().close();\n             stream.lowest_layer().connect(*endpoint_iterator++, error);\n         }\n         if (error)\n@@ -140,6 +139,18 @@ class SSLIOStreamDevice : public boost::iostreams::device<boost::iostreams::bidi\n     boost::asio::ssl::stream<typename Protocol::socket>& stream;\n };\n \n+/// How to format and parse monetary amounts in RPC protocol\n+enum RPCAmountMode\n+{\n+    RPC_AMOUNT_NUMBER_BTC = 0,  /// Format as number in decimal BTC (default)\n+    RPC_AMOUNT_NUMBER_SATOSHIS, /// Format as number in satoshis\n+    RPC_AMOUNT_STRING_BTC,      /// Format as string in decimal BTC\n+    RPC_AMOUNT_STRING_SATOSHIS  /// Format as string in satoshis\n+};\n+\n+extern std::string strRPCDefaultAmountMode;\n+\n+bool SetRPCAmountMode(const std::string name);\n std::string HTTPPost(const std::string& strMsg, const std::map<std::string,std::string>& mapRequestHeaders);\n std::string HTTPReply(int nStatus, const std::string& strMsg, bool keepalive);\n bool ReadHTTPRequestLine(std::basic_istream<char>& stream, int &proto,"
      },
      {
        "sha": "e6e77cf26110280e8ac2205ac7f8a3affb810493",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 143,
        "deletions": 11,
        "changes": 154,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3f8460fe51be719231612a921dd37af638df46a/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3f8460fe51be719231612a921dd37af638df46a/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=f3f8460fe51be719231612a921dd37af638df46a",
        "patch": "@@ -108,8 +108,17 @@ BOOST_AUTO_TEST_CASE(rpc_rawsign)\n     BOOST_CHECK(find_value(r.get_obj(), \"complete\").get_bool() == true);\n }\n \n-BOOST_AUTO_TEST_CASE(rpc_format_monetary_values)\n+static Value ValueFromString(const std::string &str)\n+{\n+    Value value;\n+    BOOST_CHECK(read_string(str, value));\n+    return value;\n+}\n+\n+BOOST_AUTO_TEST_CASE(rpc_monetary_values_number_btc)\n {\n+    BOOST_CHECK(SetRPCAmountMode(\"number-btc\"));\n+\n     BOOST_CHECK(write_string(ValueFromAmount(0LL), false) == \"0.00000000\");\n     BOOST_CHECK(write_string(ValueFromAmount(1LL), false) == \"0.00000001\");\n     BOOST_CHECK(write_string(ValueFromAmount(17622195LL), false) == \"0.17622195\");\n@@ -118,17 +127,8 @@ BOOST_AUTO_TEST_CASE(rpc_format_monetary_values)\n     BOOST_CHECK(write_string(ValueFromAmount(100000000LL), false) == \"1.00000000\");\n     BOOST_CHECK(write_string(ValueFromAmount(2099999999999990LL), false) == \"20999999.99999990\");\n     BOOST_CHECK(write_string(ValueFromAmount(2099999999999999LL), false) == \"20999999.99999999\");\n-}\n \n-static Value ValueFromString(const std::string &str)\n-{\n-    Value value;\n-    BOOST_CHECK(read_string(str, value));\n-    return value;\n-}\n-\n-BOOST_AUTO_TEST_CASE(rpc_parse_monetary_values)\n-{\n+    BOOST_CHECK(AmountFromValue(ValueFromString(\"0.00000000\")) == 0LL);\n     BOOST_CHECK(AmountFromValue(ValueFromString(\"0.00000001\")) == 1LL);\n     BOOST_CHECK(AmountFromValue(ValueFromString(\"0.17622195\")) == 17622195LL);\n     BOOST_CHECK(AmountFromValue(ValueFromString(\"0.5\")) == 50000000LL);\n@@ -137,6 +137,138 @@ BOOST_AUTO_TEST_CASE(rpc_parse_monetary_values)\n     BOOST_CHECK(AmountFromValue(ValueFromString(\"1.00000000\")) == 100000000LL);\n     BOOST_CHECK(AmountFromValue(ValueFromString(\"20999999.9999999\")) == 2099999999999990LL);\n     BOOST_CHECK(AmountFromValue(ValueFromString(\"20999999.99999999\")) == 2099999999999999LL);\n+\n+    // Negative values not allowed\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"-1.0\")), Object);\n+\n+    // Integers will not cause a parsing error (should they?)\n+    // BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"100\")), std::runtime_error);\n+\n+    // Strings with and without decimal point should cause a parsing error\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"\\\"100\\\"\")), std::runtime_error);\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"\\\"100.100\\\"\")), std::runtime_error);\n+}\n+\n+BOOST_AUTO_TEST_CASE(rpc_monetary_values_string_btc)\n+{\n+    BOOST_CHECK(SetRPCAmountMode(\"string-btc\"));\n+\n+    BOOST_CHECK(write_string(ValueFromAmount(0LL), false) == \"\\\"0.00000000\\\"\");\n+    BOOST_CHECK(write_string(ValueFromAmount(1LL), false) == \"\\\"0.00000001\\\"\");\n+    BOOST_CHECK(write_string(ValueFromAmount(17622195LL), false) == \"\\\"0.17622195\\\"\");\n+    BOOST_CHECK(write_string(ValueFromAmount(50000000LL), false) == \"\\\"0.50000000\\\"\");\n+    BOOST_CHECK(write_string(ValueFromAmount(89898989LL), false) == \"\\\"0.89898989\\\"\");\n+    BOOST_CHECK(write_string(ValueFromAmount(100000000LL), false) == \"\\\"1.00000000\\\"\");\n+    BOOST_CHECK(write_string(ValueFromAmount(2099999999999990LL), false) == \"\\\"20999999.99999990\\\"\");\n+    BOOST_CHECK(write_string(ValueFromAmount(2099999999999999LL), false) == \"\\\"20999999.99999999\\\"\");\n+\n+    BOOST_CHECK(AmountFromValue(ValueFromString(\"\\\"0.00000000\\\"\")) == 0LL);\n+    BOOST_CHECK(AmountFromValue(ValueFromString(\"\\\"0.00000001\\\"\")) == 1LL);\n+    BOOST_CHECK(AmountFromValue(ValueFromString(\"\\\"0.17622195\\\"\")) == 17622195LL);\n+    BOOST_CHECK(AmountFromValue(ValueFromString(\"\\\"0.5\\\"\")) == 50000000LL);\n+    BOOST_CHECK(AmountFromValue(ValueFromString(\"\\\"0.50000000\\\"\")) == 50000000LL);\n+    BOOST_CHECK(AmountFromValue(ValueFromString(\"\\\"0.89898989\\\"\")) == 89898989LL);\n+    BOOST_CHECK(AmountFromValue(ValueFromString(\"\\\"1.00000000\\\"\")) == 100000000LL);\n+    BOOST_CHECK(AmountFromValue(ValueFromString(\"\\\"20999999.9999999\\\"\")) == 2099999999999990LL);\n+    BOOST_CHECK(AmountFromValue(ValueFromString(\"\\\"20999999.99999999\\\"\")) == 2099999999999999LL);\n+\n+    // Negative values not allowed\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"\\\"-1.0\\\"\")), Object);\n+\n+    // Doubles will cause a parsing error\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"100.100\")), std::runtime_error);\n+\n+    // Integers will cause a parsing error\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"100100\")), std::runtime_error);\n+\n+    // Strings without decimal point do not cause a parsing error (should they?)\n+    //BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"\\\"100\\\"\")), std::runtime_error);\n+\n+    // Strings with a comma will cause a parsing error\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"\\\"100,100\\\"\")), Object);\n+    // Noise at the end will cause a parsing error\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"\\\"100100a\\\"\")), Object);\n+\n+    // Overflow/underflow\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"\\\"999999999999999999999999999999\\\"\")), Object);\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"\\\"-999999999999999999999999999999\\\"\")), Object);\n+}\n+\n+BOOST_AUTO_TEST_CASE(rpc_monetary_values_number_satoshis)\n+{\n+    BOOST_CHECK(SetRPCAmountMode(\"number-satoshis\"));\n+\n+    BOOST_CHECK(write_string(ValueFromAmount(0LL), false) == \"0\");\n+    BOOST_CHECK(write_string(ValueFromAmount(1LL), false) == \"1\");\n+    BOOST_CHECK(write_string(ValueFromAmount(17622195LL), false) == \"17622195\");\n+    BOOST_CHECK(write_string(ValueFromAmount(50000000LL), false) == \"50000000\");\n+    BOOST_CHECK(write_string(ValueFromAmount(89898989LL), false) == \"89898989\");\n+    BOOST_CHECK(write_string(ValueFromAmount(100000000LL), false) == \"100000000\");\n+    BOOST_CHECK(write_string(ValueFromAmount(2099999999999990LL), false) == \"2099999999999990\");\n+    BOOST_CHECK(write_string(ValueFromAmount(2099999999999999LL), false) == \"2099999999999999\");\n+\n+    BOOST_CHECK(AmountFromValue(ValueFromString(\"0\")) == 0LL);\n+    BOOST_CHECK(AmountFromValue(ValueFromString(\"1\")) == 1LL);\n+    BOOST_CHECK(AmountFromValue(ValueFromString(\"17622195\")) == 17622195LL);\n+    BOOST_CHECK(AmountFromValue(ValueFromString(\"00000050000000\")) == 50000000LL);\n+    BOOST_CHECK(AmountFromValue(ValueFromString(\"50000000\")) == 50000000LL);\n+    BOOST_CHECK(AmountFromValue(ValueFromString(\"89898989\")) == 89898989LL);\n+    BOOST_CHECK(AmountFromValue(ValueFromString(\"100000000\")) == 100000000LL);\n+    BOOST_CHECK(AmountFromValue(ValueFromString(\"2099999999999990\")) == 2099999999999990LL);\n+    BOOST_CHECK(AmountFromValue(ValueFromString(\"2099999999999999\")) == 2099999999999999LL);\n+\n+    // Negative values not allowed\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"-1\")), Object);\n+\n+    // Floats will cause a parsing error\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"100.100\")), std::runtime_error);\n+\n+    // Strings with and without decimal point should cause a parsing error\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"\\\"100\\\"\")), std::runtime_error);\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"\\\"100.100\\\"\")), std::runtime_error);\n+}\n+\n+BOOST_AUTO_TEST_CASE(rpc_monetary_values_string_satoshis)\n+{\n+    BOOST_CHECK(SetRPCAmountMode(\"string-satoshis\"));\n+\n+    BOOST_CHECK(write_string(ValueFromAmount(0LL), false) == \"\\\"0\\\"\");\n+    BOOST_CHECK(write_string(ValueFromAmount(1LL), false) == \"\\\"1\\\"\");\n+    BOOST_CHECK(write_string(ValueFromAmount(17622195LL), false) == \"\\\"17622195\\\"\");\n+    BOOST_CHECK(write_string(ValueFromAmount(50000000LL), false) == \"\\\"50000000\\\"\");\n+    BOOST_CHECK(write_string(ValueFromAmount(89898989LL), false) == \"\\\"89898989\\\"\");\n+    BOOST_CHECK(write_string(ValueFromAmount(100000000LL), false) == \"\\\"100000000\\\"\");\n+    BOOST_CHECK(write_string(ValueFromAmount(2099999999999990LL), false) == \"\\\"2099999999999990\\\"\");\n+    BOOST_CHECK(write_string(ValueFromAmount(2099999999999999LL), false) == \"\\\"2099999999999999\\\"\");\n+\n+    BOOST_CHECK(AmountFromValue(ValueFromString(\"\\\"0\\\"\")) == 0LL);\n+    BOOST_CHECK(AmountFromValue(ValueFromString(\"\\\"1\\\"\")) == 1LL);\n+    BOOST_CHECK(AmountFromValue(ValueFromString(\"\\\"17622195\\\"\")) == 17622195LL);\n+    BOOST_CHECK(AmountFromValue(ValueFromString(\"\\\"50000000\\\"\")) == 50000000LL);\n+    BOOST_CHECK(AmountFromValue(ValueFromString(\"\\\"000000050000000\\\"\")) == 50000000LL);\n+    BOOST_CHECK(AmountFromValue(ValueFromString(\"\\\"89898989\\\"\")) == 89898989LL);\n+    BOOST_CHECK(AmountFromValue(ValueFromString(\"\\\"100000000\\\"\")) == 100000000LL);\n+    BOOST_CHECK(AmountFromValue(ValueFromString(\"\\\"2099999999999990\\\"\")) == 2099999999999990LL);\n+    BOOST_CHECK(AmountFromValue(ValueFromString(\"\\\"2099999999999999\\\"\")) == 2099999999999999LL);\n+\n+    // Negative values not allowed\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"\\\"-1\\\"\")), Object);\n+\n+    // Doubles will cause a parsing error\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"100.100\")), std::runtime_error);\n+\n+    // Integers will cause a parsing error\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"100100\")), std::runtime_error);\n+\n+    // Strings with decimal point or comma cause a parsing error\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"\\\"100.100\\\"\")), Object);\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"\\\"100,100\\\"\")), Object);\n+    // Noise at the end will cause a parsing error\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"\\\"100100a\\\"\")), Object);\n+\n+    // Overflow/underflow\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"\\\"999999999999999999999999999999\\\"\")), Object);\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"\\\"-999999999999999999999999999999\\\"\")), Object);\n }\n \n BOOST_AUTO_TEST_CASE(rpc_boostasiotocnetaddr)"
      },
      {
        "sha": "a6a5a05d3fcb1b6593b5ce4d9c4e993b9a5df4ce",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3f8460fe51be719231612a921dd37af638df46a/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3f8460fe51be719231612a921dd37af638df46a/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=f3f8460fe51be719231612a921dd37af638df46a",
        "patch": "@@ -235,6 +235,19 @@ inline int64_t atoi64(const std::string& str)\n #endif\n }\n \n+/// Variant of atoi64 with parse error flag return\n+/// Returns minimum or maximum integer respectively on overflow\n+inline bool atoi64_err(const std::string& str, int64_t &out)\n+{\n+    char *endptr = NULL;\n+#if defined(_MSC_VER)\n+    out = _strtoi64(str.c_str(), &endptr, 10);\n+#else\n+    out = strtoll(str.c_str(), &endptr, 10);\n+#endif\n+    return *endptr == '\\0';\n+}\n+\n inline int atoi(const std::string& str)\n {\n     return atoi(str.c_str());"
      }
    ]
  }
]