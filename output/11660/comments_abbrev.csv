jonasschnelli,2017-11-13T20:54:26Z,"Haven't looked at the code to deep. Using name based arguments rather then arguments by index would increase readability a lot (and we have the position already in the RPCTable).\nConcept ACK.",https://github.com/bitcoin/bitcoin/pull/11660#issuecomment-344054638,344054638,
promag,2017-11-14T15:48:10Z,@ryanofsky 👍 ,https://github.com/bitcoin/bitcoin/pull/11660#issuecomment-344301279,344301279,
jnewbery,2017-11-15T19:58:40Z,"I've had a quick skim and this looks like a good, clean change that maintains backwards-compatibility. @luke-jr, just so I understand the reasoning here, can you explain what the longer-term plan is:\n\n- as it stands, this PR maintains backward-compatible support for positional arguments, I assume any future PRs would do the same?\n- is the plan to slowly move all RPC methods to have `named_ar",https://github.com/bitcoin/bitcoin/pull/11660#issuecomment-344710437,344710437,
luke-jr,2017-11-15T20:06:17Z,"> as it stands, this PR maintains backward-compatible support for positional arguments, I assume any future PRs would do the same?\n\nPositional arguments are still fully supported. (No ""backward"" about it...)\n\n> is the plan to slowly move all RPC methods to have named_args set to true, and then remove the bool and special behaviour?\n\nRight\n\n> Are you also planning to remove the opti",https://github.com/bitcoin/bitcoin/pull/11660#issuecomment-344712537,344712537,
jnewbery,2017-11-15T20:09:40Z,">> Are you also planning to remove the options arguments and flatten them down into the regular arguments list?\n\n> That's what this does already...?\n\nPerhaps I was unclear - is the plan to remove the 'options' argument in the help text so that the 'standard' way to call the RPC is with the options as key-values in the request rather than in an options object in the request?",https://github.com/bitcoin/bitcoin/pull/11660#issuecomment-344713438,344713438,
luke-jr,2017-11-16T03:11:34Z,"I'm not sure. The help text covers both named and positional arguments, and an options Object is the ideal way to do many things with positional arguments.",https://github.com/bitcoin/bitcoin/pull/11660#issuecomment-344802341,344802341,
luke-jr,2018-03-31T20:25:01Z,Rebased...,https://github.com/bitcoin/bitcoin/pull/11660#issuecomment-377720939,377720939,
DrahtBot,2018-11-08T23:16:38Z,"<!--5fd3d806e98f4a0ca80977bb178665a0-->There hasn't been much activity lately and the patch still needs rebase, so I am closing this for now. Please let me know when you want to continue working on this, so the pull request can be re-opened.",https://github.com/bitcoin/bitcoin/pull/11660#issuecomment-437191607,437191607,
promag,2017-11-14T15:51:12Z,"```cpp\nif (want_named_args == in.params.isObject()) {\n    return in;\n}\n\nif (want_named_args) {\n    return transformPositionalArguments(...);\n}\n\nreturn transformNamedArguments(...);\n```",https://github.com/bitcoin/bitcoin/pull/11660#discussion_r150874001,150874001,src/rpc/server.cpp
promag,2017-11-14T15:53:09Z,`arg_names`.,https://github.com/bitcoin/bitcoin/pull/11660#discussion_r150874652,150874652,src/rpc/server.cpp
promag,2017-11-14T15:54:48Z,How about leaving options for other PR?,https://github.com/bitcoin/bitcoin/pull/11660#discussion_r150875214,150875214,src/rpc/server.cpp
promag,2017-11-14T15:54:58Z,Remove?,https://github.com/bitcoin/bitcoin/pull/11660#discussion_r150875255,150875255,src/rpc/server.h
promag,2017-11-14T15:55:08Z,Remove or add usage?,https://github.com/bitcoin/bitcoin/pull/11660#discussion_r150875317,150875317,src/rpc/server.cpp
promag,2017-11-14T16:09:59Z,"IMO `RPCTypeCheckObj` is not very elegant. Here argument type is checked, and below it is parsed (which can fail) and sometimes  it is validated (for instance out of bounds). Not to mention the ""argument is not required and can be null"" cases.\n\nSomething would be cleaner (don't mind the API):\n```cpp\nuint256 hash = RequestParamUint256(request, ""txid"");\n```\nAnd if it has a default argume",https://github.com/bitcoin/bitcoin/pull/11660#discussion_r150880371,150880371,src/wallet/rpcwallet.cpp
promag,2017-11-14T16:14:32Z,Just `if (request.fHelp)`?,https://github.com/bitcoin/bitcoin/pull/11660#discussion_r150881800,150881800,src/wallet/rpcwallet.cpp
promag,2017-11-14T16:19:15Z,Unnecessary `()`.,https://github.com/bitcoin/bitcoin/pull/11660#discussion_r150883316,150883316,src/rpc/server.cpp
promag,2017-11-14T16:19:51Z,~~Remove const from `want_named_args`~~.,https://github.com/bitcoin/bitcoin/pull/11660#discussion_r150883514,150883514,src/rpc/server.cpp
luke-jr,2017-11-15T16:45:10Z,Necessary for readable clarity...?,https://github.com/bitcoin/bitcoin/pull/11660#discussion_r151183775,151183775,src/rpc/server.cpp
luke-jr,2017-11-15T16:47:43Z,It's intended for #11413,https://github.com/bitcoin/bitcoin/pull/11660#discussion_r151184570,151184570,src/rpc/server.cpp
luke-jr,2017-11-15T16:47:59Z,Why?,https://github.com/bitcoin/bitcoin/pull/11660#discussion_r151184652,151184652,src/rpc/server.cpp
luke-jr,2017-11-15T16:48:38Z,That will fail to flatten `options`,https://github.com/bitcoin/bitcoin/pull/11660#discussion_r151184839,151184839,src/rpc/server.cpp
luke-jr,2017-11-15T16:49:04Z,It's needed for options-using RPCs...,https://github.com/bitcoin/bitcoin/pull/11660#discussion_r151184981,151184981,src/rpc/server.cpp
luke-jr,2017-11-15T16:49:25Z,That would change behaviour.,https://github.com/bitcoin/bitcoin/pull/11660#discussion_r151185128,151185128,src/wallet/rpcwallet.cpp
luke-jr,2017-11-15T16:50:29Z,How would we detect unexpected params?,https://github.com/bitcoin/bitcoin/pull/11660#discussion_r151185443,151185443,src/wallet/rpcwallet.cpp
ryanofsky,2017-11-16T13:28:39Z,"There's no need to have this new ""named_args"" bool field. Univalue's array access operator explicitly works on object values as well as array values:\n\nhttps://github.com/bitcoin/bitcoin/blob/99bc0b428b03b571afbc311b7f18fd3a707ac5af/src/univalue/lib/univalue.cpp#L211-L219\n\nSo instead of introducing different flavors of RPC functions where some receive array params and others receive object ",https://github.com/bitcoin/bitcoin/pull/11660#discussion_r151412448,151412448,src/wallet/rpcwallet.cpp
luke-jr,2017-11-16T13:41:24Z,"Hmm, interesting thought. It feels a bit too much like relying on undefined behaviour to me. It's also probably complicated to implement properly - so before I put a bunch of effort into that: What do others think?\n\nConsidering the bool is only temporary anyway (I can complete the conversion in a single PR?), is this worth it?",https://github.com/bitcoin/bitcoin/pull/11660#discussion_r151415264,151415264,src/wallet/rpcwallet.cpp
ryanofsky,2017-11-16T13:57:44Z,"> Considering the bool is only temporary anyway (I can complete the conversion in a single PR?), is this worth it?\n\nOh, I would say definitely not worth it if you are planning on getting rid of positional accesses entirely (and deleting transformNamedArguments).\n\n> It feels a bit too much like relying on undefined behaviour to me. \n\nI can see how this ""feels"" like relying on undefined ",https://github.com/bitcoin/bitcoin/pull/11660#discussion_r151419095,151419095,src/wallet/rpcwallet.cpp
promag,2017-11-16T14:08:39Z,How? Should be added there?,https://github.com/bitcoin/bitcoin/pull/11660#discussion_r151421833,151421833,src/rpc/server.cpp
luke-jr,2017-11-16T14:16:37Z,"It should probably fail if a named-args caller specifies `conf_target` with the explicit fee mode, or if `feerate` is specified with the automatic fee modes, so it would need to check if the duplication is merely because of positional arguments being used or not.",https://github.com/bitcoin/bitcoin/pull/11660#discussion_r151423856,151423856,src/rpc/server.cpp
