[
  {
    "sha": "3650668cdbbf369dd8f30c8e8eb5bb883325942d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNjUwNjY4Y2RiYmYzNjlkZDhmMzBjOGU4ZWI1YmI4ODMzMjU5NDJk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-09-25T13:19:23Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-09-25T13:19:23Z"
      },
      "message": "Squashed 'src/univalue/' changes from f32df99..daf1285\n\ndaf1285 Merge pull request #2 from jgarzik/master\nd9e62d3 Merge pull request #24 from MarcoFalke/Mf1608-cleanup\nfaf260f Rem unused vars and prefer prefix operator for non-primitive type\n09a2693 Merge pull request #22 from laanwj/2016_04_unicode\nc74a04c Merge pull request #23 from paveljanik/20160527_Wshadow\nfceb4f8 Do not shadow variables\n\ngit-subtree-dir: src/univalue\ngit-subtree-split: daf1285af60c2c73801c0f41469c9802c849343d",
      "tree": {
        "sha": "6ae2456f21359c3e87429fecfaf2b8de643a07de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6ae2456f21359c3e87429fecfaf2b8de643a07de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3650668cdbbf369dd8f30c8e8eb5bb883325942d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3650668cdbbf369dd8f30c8e8eb5bb883325942d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3650668cdbbf369dd8f30c8e8eb5bb883325942d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3650668cdbbf369dd8f30c8e8eb5bb883325942d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "60ab9b200654ef0914459711cf2b22be16be3dc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60ab9b200654ef0914459711cf2b22be16be3dc2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/60ab9b200654ef0914459711cf2b22be16be3dc2"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 24,
      "deletions": 27
    },
    "files": [
      {
        "sha": "e48b905bfb8571b2f071af5745e6845a6206153b",
        "filename": "include/univalue.h",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3650668cdbbf369dd8f30c8e8eb5bb883325942d/include/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3650668cdbbf369dd8f30c8e8eb5bb883325942d/include/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/include/univalue.h?ref=3650668cdbbf369dd8f30c8e8eb5bb883325942d",
        "patch": "@@ -56,7 +56,7 @@ class UniValue {\n     bool setNumStr(const std::string& val);\n     bool setInt(uint64_t val);\n     bool setInt(int64_t val);\n-    bool setInt(int val) { return setInt((int64_t)val); }\n+    bool setInt(int val_) { return setInt((int64_t)val_); }\n     bool setFloat(double val);\n     bool setStr(const std::string& val);\n     bool setArray();\n@@ -95,28 +95,28 @@ class UniValue {\n     bool push_backV(const std::vector<UniValue>& vec);\n \n     bool pushKV(const std::string& key, const UniValue& val);\n-    bool pushKV(const std::string& key, const std::string& val) {\n-        UniValue tmpVal(VSTR, val);\n+    bool pushKV(const std::string& key, const std::string& val_) {\n+        UniValue tmpVal(VSTR, val_);\n         return pushKV(key, tmpVal);\n     }\n     bool pushKV(const std::string& key, const char *val_) {\n-        std::string val(val_);\n-        return pushKV(key, val);\n+        std::string _val(val_);\n+        return pushKV(key, _val);\n     }\n-    bool pushKV(const std::string& key, int64_t val) {\n-        UniValue tmpVal(val);\n+    bool pushKV(const std::string& key, int64_t val_) {\n+        UniValue tmpVal(val_);\n         return pushKV(key, tmpVal);\n     }\n-    bool pushKV(const std::string& key, uint64_t val) {\n-        UniValue tmpVal(val);\n+    bool pushKV(const std::string& key, uint64_t val_) {\n+        UniValue tmpVal(val_);\n         return pushKV(key, tmpVal);\n     }\n-    bool pushKV(const std::string& key, int val) {\n-        UniValue tmpVal((int64_t)val);\n+    bool pushKV(const std::string& key, int val_) {\n+        UniValue tmpVal((int64_t)val_);\n         return pushKV(key, tmpVal);\n     }\n-    bool pushKV(const std::string& key, double val) {\n-        UniValue tmpVal(val);\n+    bool pushKV(const std::string& key, double val_) {\n+        UniValue tmpVal(val_);\n         return pushKV(key, tmpVal);\n     }\n     bool pushKVs(const UniValue& obj);"
      },
      {
        "sha": "1f8cee6d29839359cc99388f3d3d3fd47fbb2ad0",
        "filename": "lib/univalue.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 14,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3650668cdbbf369dd8f30c8e8eb5bb883325942d/lib/univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3650668cdbbf369dd8f30c8e8eb5bb883325942d/lib/univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/lib/univalue.cpp?ref=3650668cdbbf369dd8f30c8e8eb5bb883325942d",
        "patch": "@@ -119,32 +119,29 @@ bool UniValue::setNumStr(const string& val_)\n     return true;\n }\n \n-bool UniValue::setInt(uint64_t val)\n+bool UniValue::setInt(uint64_t val_)\n {\n-    string s;\n     ostringstream oss;\n \n-    oss << val;\n+    oss << val_;\n \n     return setNumStr(oss.str());\n }\n \n-bool UniValue::setInt(int64_t val)\n+bool UniValue::setInt(int64_t val_)\n {\n-    string s;\n     ostringstream oss;\n \n-    oss << val;\n+    oss << val_;\n \n     return setNumStr(oss.str());\n }\n \n-bool UniValue::setFloat(double val)\n+bool UniValue::setFloat(double val_)\n {\n-    string s;\n     ostringstream oss;\n \n-    oss << std::setprecision(16) << val;\n+    oss << std::setprecision(16) << val_;\n \n     bool ret = setNumStr(oss.str());\n     typ = VNUM;\n@@ -173,12 +170,12 @@ bool UniValue::setObject()\n     return true;\n }\n \n-bool UniValue::push_back(const UniValue& val)\n+bool UniValue::push_back(const UniValue& val_)\n {\n     if (typ != VARR)\n         return false;\n \n-    values.push_back(val);\n+    values.push_back(val_);\n     return true;\n }\n \n@@ -192,13 +189,13 @@ bool UniValue::push_backV(const std::vector<UniValue>& vec)\n     return true;\n }\n \n-bool UniValue::pushKV(const std::string& key, const UniValue& val)\n+bool UniValue::pushKV(const std::string& key, const UniValue& val_)\n {\n     if (typ != VOBJ)\n         return false;\n \n     keys.push_back(key);\n-    values.push_back(val);\n+    values.push_back(val_);\n     return true;\n }\n \n@@ -228,7 +225,7 @@ int UniValue::findKey(const std::string& key) const\n bool UniValue::checkObject(const std::map<std::string,UniValue::VType>& t)\n {\n     for (std::map<std::string,UniValue::VType>::const_iterator it = t.begin();\n-         it != t.end(); it++) {\n+         it != t.end(); ++it) {\n         int idx = findKey(it->first);\n         if (idx < 0)\n             return false;"
      }
    ]
  },
  {
    "sha": "9bf41af708e7efa9b9bc69886ca2fb4323f036b6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YmY0MWFmNzA4ZTdlZmE5YjliYzY5ODg2Y2EyZmI0MzIzZjAzNmI2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-09-25T13:19:23Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-09-25T13:19:23Z"
      },
      "message": "Merge commit '3650668cdbbf369dd8f30c8e8eb5bb883325942d' into HEAD",
      "tree": {
        "sha": "d0997921998de5e9656e022eb4e67cd9b3e460fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0997921998de5e9656e022eb4e67cd9b3e460fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9bf41af708e7efa9b9bc69886ca2fb4323f036b6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bf41af708e7efa9b9bc69886ca2fb4323f036b6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9bf41af708e7efa9b9bc69886ca2fb4323f036b6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bf41af708e7efa9b9bc69886ca2fb4323f036b6/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "24f72e9f3fd0ce64b944c2a474786f06ed5fa0fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24f72e9f3fd0ce64b944c2a474786f06ed5fa0fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/24f72e9f3fd0ce64b944c2a474786f06ed5fa0fd"
      },
      {
        "sha": "3650668cdbbf369dd8f30c8e8eb5bb883325942d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3650668cdbbf369dd8f30c8e8eb5bb883325942d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3650668cdbbf369dd8f30c8e8eb5bb883325942d"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 24,
      "deletions": 27
    },
    "files": [
      {
        "sha": "e48b905bfb8571b2f071af5745e6845a6206153b",
        "filename": "src/univalue/include/univalue.h",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bf41af708e7efa9b9bc69886ca2fb4323f036b6/src/univalue/include/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bf41af708e7efa9b9bc69886ca2fb4323f036b6/src/univalue/include/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/include/univalue.h?ref=9bf41af708e7efa9b9bc69886ca2fb4323f036b6",
        "patch": "@@ -56,7 +56,7 @@ class UniValue {\n     bool setNumStr(const std::string& val);\n     bool setInt(uint64_t val);\n     bool setInt(int64_t val);\n-    bool setInt(int val) { return setInt((int64_t)val); }\n+    bool setInt(int val_) { return setInt((int64_t)val_); }\n     bool setFloat(double val);\n     bool setStr(const std::string& val);\n     bool setArray();\n@@ -95,28 +95,28 @@ class UniValue {\n     bool push_backV(const std::vector<UniValue>& vec);\n \n     bool pushKV(const std::string& key, const UniValue& val);\n-    bool pushKV(const std::string& key, const std::string& val) {\n-        UniValue tmpVal(VSTR, val);\n+    bool pushKV(const std::string& key, const std::string& val_) {\n+        UniValue tmpVal(VSTR, val_);\n         return pushKV(key, tmpVal);\n     }\n     bool pushKV(const std::string& key, const char *val_) {\n-        std::string val(val_);\n-        return pushKV(key, val);\n+        std::string _val(val_);\n+        return pushKV(key, _val);\n     }\n-    bool pushKV(const std::string& key, int64_t val) {\n-        UniValue tmpVal(val);\n+    bool pushKV(const std::string& key, int64_t val_) {\n+        UniValue tmpVal(val_);\n         return pushKV(key, tmpVal);\n     }\n-    bool pushKV(const std::string& key, uint64_t val) {\n-        UniValue tmpVal(val);\n+    bool pushKV(const std::string& key, uint64_t val_) {\n+        UniValue tmpVal(val_);\n         return pushKV(key, tmpVal);\n     }\n-    bool pushKV(const std::string& key, int val) {\n-        UniValue tmpVal((int64_t)val);\n+    bool pushKV(const std::string& key, int val_) {\n+        UniValue tmpVal((int64_t)val_);\n         return pushKV(key, tmpVal);\n     }\n-    bool pushKV(const std::string& key, double val) {\n-        UniValue tmpVal(val);\n+    bool pushKV(const std::string& key, double val_) {\n+        UniValue tmpVal(val_);\n         return pushKV(key, tmpVal);\n     }\n     bool pushKVs(const UniValue& obj);"
      },
      {
        "sha": "1f8cee6d29839359cc99388f3d3d3fd47fbb2ad0",
        "filename": "src/univalue/lib/univalue.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 14,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bf41af708e7efa9b9bc69886ca2fb4323f036b6/src/univalue/lib/univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bf41af708e7efa9b9bc69886ca2fb4323f036b6/src/univalue/lib/univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue.cpp?ref=9bf41af708e7efa9b9bc69886ca2fb4323f036b6",
        "patch": "@@ -119,32 +119,29 @@ bool UniValue::setNumStr(const string& val_)\n     return true;\n }\n \n-bool UniValue::setInt(uint64_t val)\n+bool UniValue::setInt(uint64_t val_)\n {\n-    string s;\n     ostringstream oss;\n \n-    oss << val;\n+    oss << val_;\n \n     return setNumStr(oss.str());\n }\n \n-bool UniValue::setInt(int64_t val)\n+bool UniValue::setInt(int64_t val_)\n {\n-    string s;\n     ostringstream oss;\n \n-    oss << val;\n+    oss << val_;\n \n     return setNumStr(oss.str());\n }\n \n-bool UniValue::setFloat(double val)\n+bool UniValue::setFloat(double val_)\n {\n-    string s;\n     ostringstream oss;\n \n-    oss << std::setprecision(16) << val;\n+    oss << std::setprecision(16) << val_;\n \n     bool ret = setNumStr(oss.str());\n     typ = VNUM;\n@@ -173,12 +170,12 @@ bool UniValue::setObject()\n     return true;\n }\n \n-bool UniValue::push_back(const UniValue& val)\n+bool UniValue::push_back(const UniValue& val_)\n {\n     if (typ != VARR)\n         return false;\n \n-    values.push_back(val);\n+    values.push_back(val_);\n     return true;\n }\n \n@@ -192,13 +189,13 @@ bool UniValue::push_backV(const std::vector<UniValue>& vec)\n     return true;\n }\n \n-bool UniValue::pushKV(const std::string& key, const UniValue& val)\n+bool UniValue::pushKV(const std::string& key, const UniValue& val_)\n {\n     if (typ != VOBJ)\n         return false;\n \n     keys.push_back(key);\n-    values.push_back(val);\n+    values.push_back(val_);\n     return true;\n }\n \n@@ -228,7 +225,7 @@ int UniValue::findKey(const std::string& key) const\n bool UniValue::checkObject(const std::map<std::string,UniValue::VType>& t)\n {\n     for (std::map<std::string,UniValue::VType>::const_iterator it = t.begin();\n-         it != t.end(); it++) {\n+         it != t.end(); ++it) {\n         int idx = findKey(it->first);\n         if (idx < 0)\n             return false;"
      }
    ]
  }
]