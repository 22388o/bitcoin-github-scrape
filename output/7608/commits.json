[
  {
    "sha": "fa19b18c6378a570b4129936bde8b52b19e19182",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTE5YjE4YzYzNzhhNTcwYjQxMjk5MzZiZGU4YjUyYjE5ZTE5MTgy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-02-26T11:48:53Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-03-14T12:54:05Z"
      },
      "message": "[wallet] Move hardcoded file name out of log messages",
      "tree": {
        "sha": "ce7e7ac423c4cef28d79e13f497234a4e4e1b92a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce7e7ac423c4cef28d79e13f497234a4e4e1b92a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa19b18c6378a570b4129936bde8b52b19e19182",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa19b18c6378a570b4129936bde8b52b19e19182",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa19b18c6378a570b4129936bde8b52b19e19182",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa19b18c6378a570b4129936bde8b52b19e19182/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c15eb28241848ac76d2fe0fa26d7d7ce4cd00409",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c15eb28241848ac76d2fe0fa26d7d7ce4cd00409",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c15eb28241848ac76d2fe0fa26d7d7ce4cd00409"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 29,
      "deletions": 25
    },
    "files": [
      {
        "sha": "759f894ccbe67785d676e368a727174e2ee653cd",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa19b18c6378a570b4129936bde8b52b19e19182/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa19b18c6378a570b4129936bde8b52b19e19182/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fa19b18c6378a570b4129936bde8b52b19e19182",
        "patch": "@@ -394,7 +394,7 @@ static void SendMoney(const CTxDestination &address, CAmount nValue, bool fSubtr\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n     if (!pwalletMain->CommitTransaction(wtxNew, reservekey))\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of the wallet and coins were spent in the copy but not marked as spent here.\");\n }\n \n UniValue sendtoaddress(const UniValue& params, bool fHelp)\n@@ -1827,7 +1827,7 @@ UniValue backupwallet(const UniValue& params, bool fHelp)\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"backupwallet \\\"destination\\\"\\n\"\n-            \"\\nSafely copies wallet.dat to destination, which can be a directory or a path with filename.\\n\"\n+            \"\\nSafely copies current wallet file to destination, which can be a directory or a path with filename.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"destination\\\"   (string) The destination directory or file\\n\"\n             \"\\nExamples:\\n\""
      },
      {
        "sha": "bcfefa27ff2693694535caaea8cdec5b77d7eb71",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 13,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa19b18c6378a570b4129936bde8b52b19e19182/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa19b18c6378a570b4129936bde8b52b19e19182/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fa19b18c6378a570b4129936bde8b52b19e19182",
        "patch": "@@ -399,13 +399,14 @@ bool CWallet::Verify(const string& walletFile, string& warningString, string& er\n         CDBEnv::VerifyResult r = bitdb.Verify(walletFile, CWalletDB::Recover);\n         if (r == CDBEnv::RECOVER_OK)\n         {\n-            warningString += strprintf(_(\"Warning: wallet.dat corrupt, data salvaged!\"\n-                                     \" Original wallet.dat saved as wallet.{timestamp}.bak in %s; if\"\n-                                     \" your balance or transactions are incorrect you should\"\n-                                     \" restore from a backup.\"), GetDataDir());\n+            warningString += strprintf(_(\"Warning: Wallet file corrupt, data salvaged!\"\n+                                         \" Original %s saved as %s in %s; if\"\n+                                         \" your balance or transactions are incorrect you should\"\n+                                         \" restore from a backup.\"),\n+                walletFile, \"wallet.{timestamp}.bak\", GetDataDir());\n         }\n         if (r == CDBEnv::RECOVER_FAIL)\n-            errorString += _(\"wallet.dat corrupt, salvage failed\");\n+            errorString += strprintf(_(\"%s corrupt, salvage failed\"), walletFile);\n     }\n     \n     return true;\n@@ -2968,7 +2969,7 @@ std::string CWallet::GetWalletHelpString(bool showDebug)\n     strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in %s/kB) to add to transactions you send (default: %s)\"),\n                                                             CURRENCY_UNIT, FormatMoney(payTxFee.GetFeePerK())));\n     strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions on startup\"));\n-    strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet.dat on startup\"));\n+    strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet on startup\"));\n     strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), DEFAULT_SEND_FREE_TRANSACTIONS));\n     strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), DEFAULT_SPEND_ZEROCONF_CHANGE));\n     strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n@@ -3002,8 +3003,8 @@ CWallet* CWallet::InitLoadWallet(bool fDisableWallet, const std::string& strWall\n         CWallet *tempWallet = new CWallet(strWalletFile);\n         DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx);\n         if (nZapWalletRet != DB_LOAD_OK) {\n-            errorString = _(\"Error loading wallet.dat: Wallet corrupted\");\n-            uiInterface.InitMessage(_(\"Error loading wallet.dat: Wallet corrupted\"));\n+            errorString = strprintf(_(\"Error loading %s: Wallet corrupted\"), strWalletFile);\n+            uiInterface.InitMessage(strprintf(_(\"Error loading %s: Wallet corrupted\"), strWalletFile));\n             return NULL;\n         }\n \n@@ -3020,21 +3021,24 @@ CWallet* CWallet::InitLoadWallet(bool fDisableWallet, const std::string& strWall\n     if (nLoadWalletRet != DB_LOAD_OK)\n     {\n         if (nLoadWalletRet == DB_CORRUPT)\n-            errorString += _(\"Error loading wallet.dat: Wallet corrupted\") + \"\\n\";\n+            errorString += strprintf(_(\"Error loading %s: Wallet corrupted\"), strWalletFile) + \"\\n\";\n         else if (nLoadWalletRet == DB_NONCRITICAL_ERROR)\n         {\n-            warningString += _(\"Error reading wallet.dat! All keys read correctly, but transaction data\"\n-                          \" or address book entries might be missing or incorrect.\");\n+            warningString += strprintf(_(\"Error reading %s! All keys read correctly, but transaction data\"\n+                                         \" or address book entries might be missing or incorrect.\"),\n+                strWalletFile);\n         }\n         else if (nLoadWalletRet == DB_TOO_NEW)\n-            errorString += strprintf(_(\"Error loading wallet.dat: Wallet requires newer version of %s\"), _(PACKAGE_NAME)) + \"\\n\";\n+            errorString += strprintf(_(\"Error loading %s: Wallet requires newer version of %s\"),\n+                               strWalletFile, _(PACKAGE_NAME)) +\n+                           \"\\n\";\n         else if (nLoadWalletRet == DB_NEED_REWRITE)\n         {\n             errorString += strprintf(_(\"Wallet needed to be rewritten: restart %s to complete\"), _(PACKAGE_NAME)) + \"\\n\";\n             LogPrintf(\"%s\", errorString);\n         }\n         else\n-            errorString += _(\"Error loading wallet.dat\") + \"\\n\";\n+            errorString += strprintf(_(\"Error loading %s\"), strWalletFile) + \"\\n\";\n \n         if (!errorString.empty())\n             return NULL;"
      },
      {
        "sha": "0a4a1dae2f059fef3e9c4fcab473b241330ce2ee",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa19b18c6378a570b4129936bde8b52b19e19182/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa19b18c6378a570b4129936bde8b52b19e19182/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=fa19b18c6378a570b4129936bde8b52b19e19182",
        "patch": "@@ -847,16 +847,16 @@ void ThreadFlushWalletDB(const string& strFile)\n                     map<string, int>::iterator mi = bitdb.mapFileUseCount.find(strFile);\n                     if (mi != bitdb.mapFileUseCount.end())\n                     {\n-                        LogPrint(\"db\", \"Flushing wallet.dat\\n\");\n+                        LogPrint(\"db\", \"Flushing %s\\n\", strFile);\n                         nLastFlushed = nWalletDBUpdated;\n                         int64_t nStart = GetTimeMillis();\n \n-                        // Flush wallet.dat so it's self contained\n+                        // Flush wallet file so it's self contained\n                         bitdb.CloseDb(strFile);\n                         bitdb.CheckpointLSN(strFile);\n \n                         bitdb.mapFileUseCount.erase(mi++);\n-                        LogPrint(\"db\", \"Flushed wallet.dat %dms\\n\", GetTimeMillis() - nStart);\n+                        LogPrint(\"db\", \"Flushed %s %dms\\n\", strFile, GetTimeMillis() - nStart);\n                     }\n                 }\n             }\n@@ -879,7 +879,7 @@ bool BackupWallet(const CWallet& wallet, const string& strDest)\n                 bitdb.CheckpointLSN(wallet.strWalletFile);\n                 bitdb.mapFileUseCount.erase(wallet.strWalletFile);\n \n-                // Copy wallet.dat\n+                // Copy wallet file\n                 boost::filesystem::path pathSrc = GetDataDir() / wallet.strWalletFile;\n                 boost::filesystem::path pathDest(strDest);\n                 if (boost::filesystem::is_directory(pathDest))\n@@ -891,10 +891,10 @@ bool BackupWallet(const CWallet& wallet, const string& strDest)\n #else\n                     boost::filesystem::copy_file(pathSrc, pathDest);\n #endif\n-                    LogPrintf(\"copied wallet.dat to %s\\n\", pathDest.string());\n+                    LogPrintf(\"copied %s to %s\\n\", wallet.strWalletFile, pathDest.string());\n                     return true;\n                 } catch (const boost::filesystem::filesystem_error& e) {\n-                    LogPrintf(\"error copying wallet.dat to %s - %s\\n\", pathDest.string(), e.what());\n+                    LogPrintf(\"error copying %s to %s - %s\\n\", wallet.strWalletFile, pathDest.string(), e.what());\n                     return false;\n                 }\n             }\n@@ -905,15 +905,15 @@ bool BackupWallet(const CWallet& wallet, const string& strDest)\n }\n \n //\n-// Try to (very carefully!) recover wallet.dat if there is a problem.\n+// Try to (very carefully!) recover wallet file if there is a problem.\n //\n bool CWalletDB::Recover(CDBEnv& dbenv, const std::string& filename, bool fOnlyKeys)\n {\n     // Recovery procedure:\n-    // move wallet.dat to wallet.timestamp.bak\n+    // move wallet file to wallet.timestamp.bak\n     // Call Salvage with fAggressive=true to\n     // get as much data as possible.\n-    // Rewrite salvaged data to wallet.dat\n+    // Rewrite salvaged data to fresh wallet file\n     // Set -rescan so any missing transactions will be\n     // found.\n     int64_t now = GetTime();"
      },
      {
        "sha": "7e8cc4084e9730b228e82abd3113cc6907b41e28",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa19b18c6378a570b4129936bde8b52b19e19182/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa19b18c6378a570b4129936bde8b52b19e19182/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=fa19b18c6378a570b4129936bde8b52b19e19182",
        "patch": "@@ -73,7 +73,7 @@ class CKeyMetadata\n     }\n };\n \n-/** Access to the wallet database (wallet.dat) */\n+/** Access to the wallet database */\n class CWalletDB : public CDB\n {\n public:"
      }
    ]
  }
]