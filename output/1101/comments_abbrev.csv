luke-jr,2012-04-15T01:09:48Z,Note this is missing some important thread-safety issues I had cleaned up in #568 (which has been upstream-ready for months)\n,https://github.com/bitcoin/bitcoin/pull/1101#issuecomment-5136103,5136103,
jgarzik,2012-04-15T02:40:16Z,Nothing is -missing-.  There is a lock across the entirety of the RPC command execution.\n,https://github.com/bitcoin/bitcoin/pull/1101#issuecomment-5136460,5136460,
luke-jr,2012-04-15T04:09:04Z,"Ah, okay... that's what I missed when comparing the two.\n",https://github.com/bitcoin/bitcoin/pull/1101#issuecomment-5136773,5136773,
gavinandresen,2012-04-15T19:37:19Z,Any limit to the number of threads spawned?  Could somebody out-of-memory DoS if they just keep connecting to the RPC port a gazillion times and never closing the connections?\n,https://github.com/bitcoin/bitcoin/pull/1101#issuecomment-5141885,5141885,
luke-jr,2012-04-15T19:45:18Z,"I suspect you'd hit PID limits before memory, and socket limits before that. And since bitcoind uses select(), it would randomly corrupt memory. But that's already a problem anyway... :/\n",https://github.com/bitcoin/bitcoin/pull/1101#issuecomment-5141966,5141966,
jgarzik,2012-04-15T21:10:32Z,"There is no limit to the threads spawned -- but note that threads are spawned only after checking the IP filter list.\n\nThe first resource likely to be exhausted is a thread-group or systemwide thread limit, not memory.  But yes, if you pass the IP filter list, that can be DoS'd.\n\nShould not be a problem to add a simple simultaneous-threads limit here, though.\n",https://github.com/bitcoin/bitcoin/pull/1101#issuecomment-5142668,5142668,
gavinandresen,2012-04-16T23:46:18Z,"ACK. I assume the main benefit right now is the keepalive to save constant connection setup/teardown, since RPC calls will still be essentially single-threaded due to obtaining the cs_main and wallet locks. And the secondary benefit is we can eventually move to more fine-grained locks...\n",https://github.com/bitcoin/bitcoin/pull/1101#issuecomment-5165259,5165259,
gavinandresen,2012-04-21T23:43:01Z,Anybody else getting a compiler warning:\nsrc/bitcoinrpc.cpp:2618: warning: suggest a space before ‘;’ or explicit braces around empty body in ‘while’ statement [-Wempty-body]\n,https://github.com/bitcoin/bitcoin/pull/1101#issuecomment-5264452,5264452,
jgarzik,2012-04-22T05:06:25Z,"Rebased.  @gavinandresen do you still get a warning?\nIf yes, can you paste the code line as well as the warning, just for double-checking?\n",https://github.com/bitcoin/bitcoin/pull/1101#issuecomment-5265649,5265649,
gavinandresen,2012-04-23T18:44:25Z,"Still getting an error:\n\nbitcoinrpc.cpp: In function ‘void ThreadRPCServer3(void*)’:\nbitcoinrpc.cpp:2610: warning: suggest a space before ‘;’ or explicit braces around empty body in ‘while’ statement\n\nLine 2610 is:\n    while (0);\n\n... which looks to me like it should be deleted, since loop is defined as:  for(;;) in util.h\n",https://github.com/bitcoin/bitcoin/pull/1101#issuecomment-5288363,5288363,
jgarzik,2012-04-24T05:10:56Z,@gavinandresen fixed.  Merge error added some useless code.\n,https://github.com/bitcoin/bitcoin/pull/1101#issuecomment-5297675,5297675,
gavinandresen,2012-04-24T14:43:02Z,"Testing this, I got a crash on shutdown of Bitcoin-Qt; see \n  https://gist.github.com/2480177\n",https://github.com/bitcoin/bitcoin/pull/1101#issuecomment-5306003,5306003,
jgarzik,2012-05-09T00:29:15Z,"Rebased, and updated for recent table-driven RPC dispatch.  That change simplified our error handling, here.\n",https://github.com/bitcoin/bitcoin/pull/1101#issuecomment-5590186,5590186,
luke-jr,2012-05-01T16:46:54Z,"Shouldn't this be setting fRun to false also? (#1075 removes the first try block entirely, letting this handle errors)\n",https://github.com/bitcoin/bitcoin/pull/1101#discussion_r756921,756921,src/bitcoinrpc.cpp
luke-jr,2012-05-01T16:47:20Z,Same fRun thing here too... someone should probably note whether -32700 vs -1 is the correct response?\n,https://github.com/bitcoin/bitcoin/pull/1101#discussion_r756924,756924,src/bitcoinrpc.cpp
