DrahtBot,2021-11-07 00:30:22,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23438](https://github.com/bitcoin/bitcoin/pull/23438) (refactor: Use spans of std::byte in serialize by MarcoFalke)\n* [",https://github.com/bitcoin/bitcoin/pull/23451#issuecomment-962529810,962529810,
laanwj,2021-11-08 11:18:10,"> This adds (currently unused) span std::byte helpers, so that they can be used in new code.\n\nLet's make sure they are at least all used in tests in some way (I haven't checked if this is the case).",https://github.com/bitcoin/bitcoin/pull/23451#issuecomment-963051404,963051404,
MarcoFalke,2021-11-09 16:47:40,"Thanks for the tests. However, I think the line \n```\n   BOOST_CHECK_EQUAL(std::to_integer<int>(byte_span_char[6]), '\0');\n```\n\nis undefined behavior. The size of the span should be 6, so at most it is allowed to read [5].\nAlso, the `uint32_t` tests will fail on different endian hardware?\n\n\nI've pushed a commit with my own tests for all newly added functions.",https://github.com/bitcoin/bitcoin/pull/23451#issuecomment-964335333,964335333,
klementtan,2021-11-09 17:43:32,"reACK  faa3ec2. Verified that all the new `std::byte` helper functions are tested.\n\n@MarcoFalke Yup you're right, `[6]` would lead UB (it would have thrown assertion error if I compiled with`--enable-debug`) and the `uint32_t` tests would only work on little-endian machine. My bad! ðŸ˜…  ",https://github.com/bitcoin/bitcoin/pull/23451#issuecomment-964384434,964384434,
laanwj,2021-11-16 12:52:20,Code review ACK faa3ec2304051be7cfbe301cfbfbda3faf7514fc,https://github.com/bitcoin/bitcoin/pull/23451#issuecomment-970242043,970242043,
laanwj,2021-11-10 11:32:24,"I'm slightly surprised that this doesn't give an error anywhere. `value_type` was `uint8_t` before, not `char`.",https://github.com/bitcoin/bitcoin/pull/23451#discussion_r746501242,746501242,src/streams.h
laanwj,2021-11-10 11:38:03,"This is the most tricky change to review I think; whether the behavior here stays the same in all cases, also in edge cases at the end of the stream.",https://github.com/bitcoin/bitcoin/pull/23451#discussion_r746504988,746504988,src/pubkey.h
MarcoFalke,2021-11-10 11:51:37,This interface is not used in our code. It was added to have full compat with the std::vector interface. No opinion on whether that is a good goal.,https://github.com/bitcoin/bitcoin/pull/23451#discussion_r746514135,746514135,src/streams.h
MarcoFalke,2021-11-10 11:56:32,"The only change should be in the error message and a missing call to `memcpy`.\n\n```diff\n-CDataStream::read(): end of data\n+CDataStream::ignore(): end of data\n```\n\nThe commit is unrelated and not needed for the changes here, so I am happy to remove. If it will be removed, I'd later on need to replace `char dummy;` with `std::byte dummy;`.",https://github.com/bitcoin/bitcoin/pull/23451#discussion_r746517485,746517485,src/pubkey.h
laanwj,2021-11-10 18:31:52,I think that's a reasonably valid goal. Though we should at least test the function. Not in this PR though.,https://github.com/bitcoin/bitcoin/pull/23451#discussion_r746874689,746874689,src/streams.h
laanwj,2021-11-10 18:32:43,"I'm fine with keeping it. I personally think the change is correct, just mentioned it as a point of focus for reviewers.",https://github.com/bitcoin/bitcoin/pull/23451#discussion_r746875321,746875321,src/pubkey.h
