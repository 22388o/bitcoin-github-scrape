[
  {
    "sha": "fabe18d0b39b4b918bf60e3a313eaa36fb4067f2",
    "node_id": "C_kwDOABII59oAKGZhYmUxOGQwYjM5YjRiOTE4YmY2MGUzYTMxM2VhYTM2ZmI0MDY3ZjI",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-04T08:17:14Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-09T16:41:21Z"
      },
      "message": "Use value_type in CDataStream where possible\n\nAlso, simplify unit tests with the CDataStream::str method.",
      "tree": {
        "sha": "cc7ad20e29b4f6c872614c4dcca7e0bea617fc13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc7ad20e29b4f6c872614c4dcca7e0bea617fc13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fabe18d0b39b4b918bf60e3a313eaa36fb4067f2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgJ1Qv+PD0K0EEkP8q3i5BQBQYcigOkJ5LWrkry6Ve0GlSQByKJouh7vPh8vvaR\nZ150cdXLuykofphcqSQqtnBT6AOshCjvf7KLSUmKWpjvZP+5Jw5pQs6AKKzrIcMA\nRsAgKIZAIvt4anb+IOeIxLJK20/2oFDftLy7TWj+40c0jIQB4kbnUInhbnwfnZpl\nEOpefo3+vb9ONPeH8ykoqLrvQESe4TQ0Ti1yEgYjQ5rsdCKQ1dfMiShItPiJzPxD\nvWiZCVW+L/Zs4TuC5QTzZ9W/RnebAzPPD+wjzkGfT9MUV+2n/eKY8+O2LmbkUzKT\nD1xk7XBNKI2H/H6rX34krA06Tb0mFj0/kJNW/0c2JI7rsW/lM1aMx1jdvE+IGumr\ng/NsQP6XYKz0Ubrqu3M8XQ7iwdjyTLpX6C3nt6/8O/z+rwLzxVzFdh/UaJbj2KGe\nz8ItRvsHMuXp0lYSJDsbZaBMOfeJTNsKi3UL8JDBfhy/VpdDJsqHu8X7WEgKDXid\nrl0Gvi7i\n=fzzO\n-----END PGP SIGNATURE-----",
        "payload": "tree cc7ad20e29b4f6c872614c4dcca7e0bea617fc13\nparent 94db963de501e4aba6e5d8150a01ceb85753dee1\nauthor MarcoFalke <falke.marco@gmail.com> 1636013834 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1636476081 +0100\n\nUse value_type in CDataStream where possible\n\nAlso, simplify unit tests with the CDataStream::str method.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabe18d0b39b4b918bf60e3a313eaa36fb4067f2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fabe18d0b39b4b918bf60e3a313eaa36fb4067f2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabe18d0b39b4b918bf60e3a313eaa36fb4067f2/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94db963de501e4aba6e5d8150a01ceb85753dee1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94db963de501e4aba6e5d8150a01ceb85753dee1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94db963de501e4aba6e5d8150a01ceb85753dee1"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "9e8f379cd282e151480d4b5661e48c5f2577e049",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fabe18d0b39b4b918bf60e3a313eaa36fb4067f2/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fabe18d0b39b4b918bf60e3a313eaa36fb4067f2/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=fabe18d0b39b4b918bf60e3a313eaa36fb4067f2",
        "patch": "@@ -226,7 +226,7 @@ class CDataStream\n         : nType{nTypeIn},\n           nVersion{nVersionIn} {}\n \n-    explicit CDataStream(Span<const uint8_t> sp, int nTypeIn, int nVersionIn)\n+    explicit CDataStream(Span<const value_type> sp, int nTypeIn, int nVersionIn)\n         : vch(sp.data(), sp.data() + sp.size()),\n           nType{nTypeIn},\n           nVersion{nVersionIn} {}\n@@ -254,17 +254,17 @@ class CDataStream\n     iterator end()                                   { return vch.end(); }\n     size_type size() const                           { return vch.size() - nReadPos; }\n     bool empty() const                               { return vch.size() == nReadPos; }\n-    void resize(size_type n, value_type c=0)         { vch.resize(n + nReadPos, c); }\n+    void resize(size_type n, value_type c = value_type{}) { vch.resize(n + nReadPos, c); }\n     void reserve(size_type n)                        { vch.reserve(n + nReadPos); }\n     const_reference operator[](size_type pos) const  { return vch[pos + nReadPos]; }\n     reference operator[](size_type pos)              { return vch[pos + nReadPos]; }\n     void clear()                                     { vch.clear(); nReadPos = 0; }\n-    iterator insert(iterator it, const uint8_t x) { return vch.insert(it, x); }\n-    void insert(iterator it, size_type n, const uint8_t x) { vch.insert(it, n, x); }\n+    iterator insert(iterator it, const value_type x) { return vch.insert(it, x); }\n+    void insert(iterator it, size_type n, const value_type x) { vch.insert(it, n, x); }\n     value_type* data()                               { return vch.data() + nReadPos; }\n     const value_type* data() const                   { return vch.data() + nReadPos; }\n \n-    void insert(iterator it, std::vector<uint8_t>::const_iterator first, std::vector<uint8_t>::const_iterator last)\n+    void insert(iterator it, std::vector<value_type>::const_iterator first, std::vector<value_type>::const_iterator last)\n     {\n         if (last == first) return;\n         assert(last - first > 0);\n@@ -278,7 +278,7 @@ class CDataStream\n             vch.insert(it, first, last);\n     }\n \n-    void insert(iterator it, const char* first, const char* last)\n+    void insert(iterator it, const value_type* first, const value_type* last)\n     {\n         if (last == first) return;\n         assert(last - first > 0);"
      },
      {
        "sha": "b8d76c9608039dfae02f3078b1613af405801260",
        "filename": "src/test/streams_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fabe18d0b39b4b918bf60e3a313eaa36fb4067f2/src/test/streams_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fabe18d0b39b4b918bf60e3a313eaa36fb4067f2/src/test/streams_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/streams_tests.cpp?ref=fabe18d0b39b4b918bf60e3a313eaa36fb4067f2",
        "patch": "@@ -172,7 +172,7 @@ BOOST_AUTO_TEST_CASE(streams_serializedata_xor)\n     ds.Xor(key);\n     BOOST_CHECK_EQUAL(\n             std::string(expected_xor.begin(), expected_xor.end()),\n-            std::string(ds.begin(), ds.end()));\n+            ds.str());\n \n     in.push_back('\\x0f');\n     in.push_back('\\xf0');\n@@ -189,7 +189,7 @@ BOOST_AUTO_TEST_CASE(streams_serializedata_xor)\n     ds.Xor(key);\n     BOOST_CHECK_EQUAL(\n             std::string(expected_xor.begin(), expected_xor.end()),\n-            std::string(ds.begin(), ds.end()));\n+            ds.str());\n \n     // Multi character key\n \n@@ -210,7 +210,7 @@ BOOST_AUTO_TEST_CASE(streams_serializedata_xor)\n     ds.Xor(key);\n     BOOST_CHECK_EQUAL(\n             std::string(expected_xor.begin(), expected_xor.end()),\n-            std::string(ds.begin(), ds.end()));\n+            ds.str());\n }\n \n BOOST_AUTO_TEST_CASE(streams_buffered_file)"
      }
    ]
  },
  {
    "sha": "fa18038f519db76befb9a7bd0b1540143bfeb12b",
    "node_id": "C_kwDOABII59oAKGZhMTgwMzhmNTE5ZGI3NmJlZmI5YTdiZDBiMTU0MDE0M2JmZWIxMmI",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-06T18:08:29Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-09T16:41:35Z"
      },
      "message": "refactor: Use ignore helper when unserializing an invalid pubkey",
      "tree": {
        "sha": "7e8fe834727923443b53e92525b3ca3610b636ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7e8fe834727923443b53e92525b3ca3610b636ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa18038f519db76befb9a7bd0b1540143bfeb12b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUi5Jwv/cHruuaYHaxpm8zv4V6SYVrgLIE+t8Bh3fEFxG3OLGa7OeKnK8Hds5hNq\nSanaNol6Nvuck1eMyUqkWGPv4o4+pr0CXVr2cG1O/CbU7VGci+5tlPStNTw95Qyr\nopRof4rt5YVMhnSiOkaGyhc+emkERX2PdC/s01TeeorlhweORSXoY0Z+klrAX/e8\nwS/7XiJS82dAwgxWFGqBNlXLzCJBTen4Vj/WyUvC69oioMn2wRVDXxXeva39VRqo\n3hzcCzVuGBJ9+y0xS71JnJZAsgGJ0lZDvcvZIoZyIiiXc3HdpPiYUrO7vIBE1WCn\n3VWak5LKHVDX2HwFEvkUWCgf7H6TQiZmLg9hm8/lCtzm1nEdQaHJ+qMTZXV/0pAC\nEljA4WlmeYYlmOSIG22m3/GMjwsNrITuZCE9PuGC/ZTDRdMr5eQiz83N0WHIfyMy\ntVePbKUhnsXFn0KsVJ38vYu382113ys/CLoGnEbjAFXWQTBggSo5sydKy7KOmqIY\ndGU16Qk/\n=UF+G\n-----END PGP SIGNATURE-----",
        "payload": "tree 7e8fe834727923443b53e92525b3ca3610b636ad\nparent fabe18d0b39b4b918bf60e3a313eaa36fb4067f2\nauthor MarcoFalke <falke.marco@gmail.com> 1636222109 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1636476095 +0100\n\nrefactor: Use ignore helper when unserializing an invalid pubkey\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa18038f519db76befb9a7bd0b1540143bfeb12b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa18038f519db76befb9a7bd0b1540143bfeb12b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa18038f519db76befb9a7bd0b1540143bfeb12b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fabe18d0b39b4b918bf60e3a313eaa36fb4067f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabe18d0b39b4b918bf60e3a313eaa36fb4067f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fabe18d0b39b4b918bf60e3a313eaa36fb4067f2"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 2,
      "deletions": 4
    },
    "files": [
      {
        "sha": "ab0f429ca92527aef6ae2d4bd66a4753a4ffc109",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa18038f519db76befb9a7bd0b1540143bfeb12b/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa18038f519db76befb9a7bd0b1540143bfeb12b/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=fa18038f519db76befb9a7bd0b1540143bfeb12b",
        "patch": "@@ -141,17 +141,15 @@ class CPubKey\n     template <typename Stream>\n     void Unserialize(Stream& s)\n     {\n-        unsigned int len = ::ReadCompactSize(s);\n+        const unsigned int len(::ReadCompactSize(s));\n         if (len <= SIZE) {\n             s.read((char*)vch, len);\n             if (len != size()) {\n                 Invalidate();\n             }\n         } else {\n             // invalid pubkey, skip available data\n-            char dummy;\n-            while (len--)\n-                s.read(&dummy, 1);\n+            s.ignore(len);\n             Invalidate();\n         }\n     }"
      }
    ]
  },
  {
    "sha": "faa3ec2304051be7cfbe301cfbfbda3faf7514fc",
    "node_id": "C_kwDOABII59oAKGZhYTNlYzIzMDQwNTFiZTdjZmJlMzAxY2ZiZmJkYTNmYWY3NTE0ZmM",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-04T08:03:04Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-09T16:42:13Z"
      },
      "message": "span: Add std::byte helpers\n\nAlso, add Span<std::byte> interface to strencondings.",
      "tree": {
        "sha": "d4bd1d6efd163452352e275beec7674de246d9af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4bd1d6efd163452352e275beec7674de246d9af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faa3ec2304051be7cfbe301cfbfbda3faf7514fc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiakwv9FPM94mY140Vr1tLItlx2O6xM0jPtBeFwRQ+IpGXEoOEkXBdjNWvusCUg\njwj8niK25AjSgEf9RMqyI+Mq+DN713eYPscok2HRog3nG7zz1J8zuOZbO16qTdsH\njPNzSYQjzTN7RxD+aHchI2CQxsarMXAICPt9BqznDHxKx/MiPSl/t2qyPIzVUx+7\nJ6h32xJWCYUI+kz9XWPchlLDlbkG99XYHW6VWpaW1iqTJwEJVlC5KPFl8/Aju0Au\nSaDD7Vmo5NAEJOBJSXShb1HCXRw+wMQ1pB7qmNHrV5z3lQTKMSyySpJ/v0IvGcvz\n+nMCBtuL6MgRR0eHLZ97WyMGVWpj3VdJxnhKUx/b5zl4lpt+OO/M/X/5DOIuBYes\n4q3x/ZEad28TO4nhhLnAOXXn2MoJjAFJN4EJrqPRFCpt77gE5uBhPVzKg2Pil9tb\nih8HIv6tAsIsyzVcOC19L/RGtYWCOydVCrKhvy5AE0os/wvyPEifxmQ2rlTXOUdq\n1wWcX22G\n=LkKw\n-----END PGP SIGNATURE-----",
        "payload": "tree d4bd1d6efd163452352e275beec7674de246d9af\nparent fa18038f519db76befb9a7bd0b1540143bfeb12b\nauthor MarcoFalke <falke.marco@gmail.com> 1636012984 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1636476133 +0100\n\nspan: Add std::byte helpers\n\nAlso, add Span<std::byte> interface to strencondings.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa3ec2304051be7cfbe301cfbfbda3faf7514fc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faa3ec2304051be7cfbe301cfbfbda3faf7514fc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa3ec2304051be7cfbe301cfbfbda3faf7514fc/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa18038f519db76befb9a7bd0b1540143bfeb12b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa18038f519db76befb9a7bd0b1540143bfeb12b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa18038f519db76befb9a7bd0b1540143bfeb12b"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 56,
      "deletions": 11
    },
    "files": [
      {
        "sha": "78e8fc691db371313318f979707f227a8ca6e25c",
        "filename": "src/span.h",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa3ec2304051be7cfbe301cfbfbda3faf7514fc/src/span.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa3ec2304051be7cfbe301cfbfbda3faf7514fc/src/span.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/span.h?ref=faa3ec2304051be7cfbe301cfbfbda3faf7514fc",
        "patch": "@@ -180,6 +180,7 @@ class Span\n         return m_data[m_size - 1];\n     }\n     constexpr std::size_t size() const noexcept { return m_size; }\n+    constexpr std::size_t size_bytes() const noexcept { return sizeof(C) * m_size; }\n     constexpr bool empty() const noexcept { return size() == 0; }\n     CONSTEXPR_IF_NOT_DEBUG C& operator[](std::size_t pos) const noexcept\n     {\n@@ -236,11 +237,35 @@ T& SpanPopBack(Span<T>& span)\n     return back;\n }\n \n+// From C++20 as_bytes and as_writeable_bytes\n+template <typename T>\n+Span<const std::byte> AsBytes(Span<T> s) noexcept\n+{\n+    return {reinterpret_cast<const std::byte*>(s.data()), s.size_bytes()};\n+}\n+template <typename T>\n+Span<std::byte> AsWritableBytes(Span<T> s) noexcept\n+{\n+    return {reinterpret_cast<std::byte*>(s.data()), s.size_bytes()};\n+}\n+\n+template <typename V>\n+Span<const std::byte> MakeByteSpan(V&& v) noexcept\n+{\n+    return AsBytes(MakeSpan(std::forward<V>(v)));\n+}\n+template <typename V>\n+Span<std::byte> MakeWritableByteSpan(V&& v) noexcept\n+{\n+    return AsWritableBytes(MakeSpan(std::forward<V>(v)));\n+}\n+\n // Helper functions to safely cast to unsigned char pointers.\n inline unsigned char* UCharCast(char* c) { return (unsigned char*)c; }\n inline unsigned char* UCharCast(unsigned char* c) { return c; }\n inline const unsigned char* UCharCast(const char* c) { return (unsigned char*)c; }\n inline const unsigned char* UCharCast(const unsigned char* c) { return c; }\n+inline const unsigned char* UCharCast(const std::byte* c) { return reinterpret_cast<const unsigned char*>(c); }\n \n // Helper function to safely convert a Span to a Span<[const] unsigned char>.\n template <typename T> constexpr auto UCharSpanCast(Span<T> s) -> Span<typename std::remove_pointer<decltype(UCharCast(s.data()))>::type> { return {UCharCast(s.data()), s.size()}; }"
      },
      {
        "sha": "c5fce7bec0f2d519d0a90354f1749f8fbd4ea8cd",
        "filename": "src/test/base64_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa3ec2304051be7cfbe301cfbfbda3faf7514fc/src/test/base64_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa3ec2304051be7cfbe301cfbfbda3faf7514fc/src/test/base64_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base64_tests.cpp?ref=faa3ec2304051be7cfbe301cfbfbda3faf7514fc",
        "patch": "@@ -23,6 +23,16 @@ BOOST_AUTO_TEST_CASE(base64_testvectors)\n         BOOST_CHECK_EQUAL(strDec, vstrIn[i]);\n     }\n \n+    {\n+        const std::vector<uint8_t> in_u{0xff, 0x01, 0xff};\n+        const std::vector<std::byte> in_b{std::byte{0xff}, std::byte{0x01}, std::byte{0xff}};\n+        const std::string in_s{\"\\xff\\x01\\xff\"};\n+        const std::string out_exp{\"/wH/\"};\n+        BOOST_CHECK_EQUAL(EncodeBase64(in_u), out_exp);\n+        BOOST_CHECK_EQUAL(EncodeBase64(in_b), out_exp);\n+        BOOST_CHECK_EQUAL(EncodeBase64(in_s), out_exp);\n+    }\n+\n     // Decoding strings with embedded NUL characters should fail\n     bool failure;\n     (void)DecodeBase64(\"invalid\\0\"s, &failure);"
      },
      {
        "sha": "108bcecc663bbc56222ef1cb52e603a6ec08ddbf",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 5,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa3ec2304051be7cfbe301cfbfbda3faf7514fc/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa3ec2304051be7cfbe301cfbfbda3faf7514fc/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=faa3ec2304051be7cfbe301cfbfbda3faf7514fc",
        "patch": "@@ -151,12 +151,25 @@ BOOST_AUTO_TEST_CASE(util_HexStr)\n         HexStr(Span<const unsigned char>(ParseHex_expected, ParseHex_expected)),\n         \"\");\n \n-    std::vector<unsigned char> ParseHex_vec(ParseHex_expected, ParseHex_expected + 5);\n+    {\n+        const std::vector<char> in_s{ParseHex_expected, ParseHex_expected + 5};\n+        const Span<const uint8_t> in_u{MakeUCharSpan(in_s)};\n+        const Span<const std::byte> in_b{MakeByteSpan(in_s)};\n+        const std::string out_exp{\"04678afdb0\"};\n+\n+        BOOST_CHECK_EQUAL(HexStr(in_u), out_exp);\n+        BOOST_CHECK_EQUAL(HexStr(in_s), out_exp);\n+        BOOST_CHECK_EQUAL(HexStr(in_b), out_exp);\n+    }\n+}\n \n-    BOOST_CHECK_EQUAL(\n-        HexStr(ParseHex_vec),\n-        \"04678afdb0\"\n-    );\n+BOOST_AUTO_TEST_CASE(span_write_bytes)\n+{\n+    std::array mut_arr{uint8_t{0xaa}, uint8_t{0xbb}};\n+    const auto mut_bytes{MakeWritableByteSpan(mut_arr)};\n+    mut_bytes[1] = std::byte{0x11};\n+    BOOST_CHECK_EQUAL(mut_arr.at(0), 0xaa);\n+    BOOST_CHECK_EQUAL(mut_arr.at(1), 0x11);\n }\n \n BOOST_AUTO_TEST_CASE(util_Join)"
      },
      {
        "sha": "cc737f724c7b6781be96381d1354d9cc081ef5e6",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa3ec2304051be7cfbe301cfbfbda3faf7514fc/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa3ec2304051be7cfbe301cfbfbda3faf7514fc/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=faa3ec2304051be7cfbe301cfbfbda3faf7514fc",
        "patch": "@@ -138,11 +138,6 @@ std::string EncodeBase64(Span<const unsigned char> input)\n     return str;\n }\n \n-std::string EncodeBase64(const std::string& str)\n-{\n-    return EncodeBase64(MakeUCharSpan(str));\n-}\n-\n std::vector<unsigned char> DecodeBase64(const char* p, bool* pf_invalid)\n {\n     static const int decode64_table[256] ="
      },
      {
        "sha": "f5e636726adbf340ed31652d6385bb88066495b2",
        "filename": "src/util/strencodings.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa3ec2304051be7cfbe301cfbfbda3faf7514fc/src/util/strencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa3ec2304051be7cfbe301cfbfbda3faf7514fc/src/util/strencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.h?ref=faa3ec2304051be7cfbe301cfbfbda3faf7514fc",
        "patch": "@@ -50,7 +50,8 @@ bool IsHexNumber(const std::string& str);\n std::vector<unsigned char> DecodeBase64(const char* p, bool* pf_invalid = nullptr);\n std::string DecodeBase64(const std::string& str, bool* pf_invalid = nullptr);\n std::string EncodeBase64(Span<const unsigned char> input);\n-std::string EncodeBase64(const std::string& str);\n+inline std::string EncodeBase64(Span<const std::byte> input) { return EncodeBase64(MakeUCharSpan(input)); }\n+inline std::string EncodeBase64(const std::string& str) { return EncodeBase64(MakeUCharSpan(str)); }\n std::vector<unsigned char> DecodeBase32(const char* p, bool* pf_invalid = nullptr);\n std::string DecodeBase32(const std::string& str, bool* pf_invalid = nullptr);\n \n@@ -189,6 +190,7 @@ std::optional<T> ToIntegral(const std::string& str)\n  */\n std::string HexStr(const Span<const uint8_t> s);\n inline std::string HexStr(const Span<const char> s) { return HexStr(MakeUCharSpan(s)); }\n+inline std::string HexStr(const Span<const std::byte> s) { return HexStr(MakeUCharSpan(s)); }\n \n /**\n  * Format a paragraph of text to a fixed width, adding spaces for"
      }
    ]
  }
]