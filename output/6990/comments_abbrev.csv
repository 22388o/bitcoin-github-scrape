dcousens,2015-11-11T21:01:40Z,"> event_base_loopbreak was not doing what I expected it to. What I expected was that it sets a timeout, given that no other pending events it would exit in N seconds. However, what it does was delay the event loop exit with N seconds, even if nothing is pending.\n\n~~Sounds like you wanted `event_base_loopexit`? Ref:~~\n\n> The next event_base_loop() iteration after the given timer expires will co",https://github.com/bitcoin/bitcoin/pull/6990#issuecomment-155908505,155908505,
dcousens,2015-11-11T21:06:46Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/6990#issuecomment-155910770,155910770,
jonasschnelli,2015-11-12T07:46:07Z,utACK.\n,https://github.com/bitcoin/bitcoin/pull/6990#issuecomment-156026958,156026958,
laanwj,2015-11-12T08:48:18Z,"Some more information: it _appears_ that with `libevent` master, this issue doesn't exist.\n`event_base_loopexit` does actually do what I expect it to in the OP. As that is the version I'm normally using, that is why I didn't notice before.\n\nEdit: so I think we should still do this for backward compat, but at least I'm not crazy :)\n",https://github.com/bitcoin/bitcoin/pull/6990#issuecomment-156035713,156035713,
dcousens,2015-11-13T01:00:41Z,"@laanwj maybe just inline a comment to mention this _might_ be fixed in latest version of libevent?  Could be useful for some future refactoring,  save someone trying to establish whether there was a reason we moved away from it that they aren't aware of.\n",https://github.com/bitcoin/bitcoin/pull/6990#issuecomment-156285416,156285416,
laanwj,2015-11-13T09:14:04Z,"Will do\n\nEdit: OK, added comment and updated commit message.\n",https://github.com/bitcoin/bitcoin/pull/6990#issuecomment-156371163,156371163,
laanwj,2015-11-13T09:14:58Z,"Huh! I pushed this branch to bitcoin/bitcoin instead of my own repository. Oh well, no harm done, I'll just remove it again when it's merged.\n",https://github.com/bitcoin/bitcoin/pull/6990#issuecomment-156371536,156371536,
laanwj,2015-11-13T11:24:38Z,"~~@theuni can you take a look here as well?~~\nEdit: nm, you already did, but didn't ack\n",https://github.com/bitcoin/bitcoin/pull/6990#issuecomment-156402295,156402295,
gmaxwell,2015-11-13T19:32:03Z,ACK.\n,https://github.com/bitcoin/bitcoin/pull/6990#issuecomment-156535903,156535903,
dcousens,2015-11-14T08:51:27Z,"Awesome, thanks @laanwj :)\n",https://github.com/bitcoin/bitcoin/pull/6990#issuecomment-156671746,156671746,
MarcoFalke,2015-11-15T13:05:52Z,Post merge tested ACK!\n\n@laanwj this makes travis a lot faster. (runtime reduced for some rpc tests by 90%)\n\nBefore:\n\n```\n$ time for i in {1..10};do qa/pull-tester/rpc-tests.py disablewallet;done\nreal    1m53.003s\nuser    0m1.135s\nsys 0m0.437s\n\n$ time for i in {1..10};do qa/pull-tester/rpc-tests.py wallet;done\nreal    10m4.888s\nuser    0m21.829s\nsys 0m8.239s\n```\n\nAfter:\n\n```\nd,https://github.com/bitcoin/bitcoin/pull/6990#issuecomment-156810422,156810422,
dcousens,2015-11-11T21:06:00Z,"Out of interest, why do we have to wait [a hard coded timeout]?  Why can't we wait for all events to finish (and maybe just ignore all new incoming connections?)\n",https://github.com/bitcoin/bitcoin/pull/6990#discussion_r44586134,44586134,src/httpserver.cpp
MarcoFalke,2015-11-11T21:11:48Z,> all events to finish\n\nmay take a long time (minutes) depending what was going in in the past?\n,https://github.com/bitcoin/bitcoin/pull/6990#discussion_r44586809,44586809,src/httpserver.cpp
dcousens,2015-11-11T21:27:44Z,"@MarcoFalke but this doesn't stop new connections (or is that done elsewhere?) in that waiting time.  So conceptually, the status quo could be the same?\nThat is, new connections coming in, old ones still finishing. \n",https://github.com/bitcoin/bitcoin/pull/6990#discussion_r44588682,44588682,src/httpserver.cpp
theuni,2015-11-12T04:14:29Z,"New connections are stopped just above, see where the accept sockets are torn down.\n\nThough it does look like we should close connected sockets in http_reject_request_cb as well for good measure. @laanwj Is there a reason to keep them open once they've had a req rejected?\n",https://github.com/bitcoin/bitcoin/pull/6990#discussion_r44620210,44620210,src/httpserver.cpp
laanwj,2015-11-12T06:34:22Z,"- Waiting for all events to finish could take forever. There's tons of ways that someone could keep a connection option by slowly sending data. Also, timing events (such as the `walletpassphrase` timeout) may hold up the event queue.\n- Just breaking off everything in progress immediately prevents the answer to `stop` from getting back. We could just declare this a feature of course and be done wi",https://github.com/bitcoin/bitcoin/pull/6990#discussion_r44625420,44625420,src/httpserver.cpp
laanwj,2015-11-12T06:42:49Z,"> @MarcoFalke but this doesn't stop new connections (or is that done elsewhere?) in that waiting time.  So conceptually, the status quo could be the same?\n\nIt does:\n\n```\n        // Unlisten sockets\n        BOOST_FOREACH (evhttp_bound_socket *socket, boundSockets) {\n            evhttp_del_accept_socket(eventHTTP, socket);\n        }\n        // Reject requests on current connections\n       ",https://github.com/bitcoin/bitcoin/pull/6990#discussion_r44625742,44625742,src/httpserver.cpp
