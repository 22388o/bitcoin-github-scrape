BitcoinPullTester,2014-02-12T06:08:47Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/fdbc2b142d541f841e94119de909c8268dad61ac for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/cu",https://github.com/bitcoin/bitcoin/pull/3657#issuecomment-34841956,34841956,
b6393ce9-d324-4fe1-996b-acf82dbc3d53,2014-02-12T06:16:18Z,"As per the discussion [here](https://github.com/bitcoin/bitcoin/pull/3654), there is the question as to how calculating balances should be handled; this commit alters how balances are calculated.\n\nSipa [pointed out](https://github.com/bitcoin/bitcoin/pull/3654#issuecomment-34810058):\n\n> Not couning unconfirmed change in getbalance will result in users complaining ""I had 15000 BTC in my wallet,",https://github.com/bitcoin/bitcoin/pull/3657#issuecomment-34842268,34842268,
laanwj,2014-02-12T07:12:02Z,"Right - RPC has a 'getunconfirmedbalance' call since 0.9, and the GUI has shown the unconfirmed balance for a while.\n\nThis change would make unconfirmed change part of the unconfirmed balance (when `-nospendzeroconfchange`). It is a bit strange to people that are used to the old way (""why is such a large part of my wallet suddenly unconfirmed""). \n\nBut you have a point that this at least makes ",https://github.com/bitcoin/bitcoin/pull/3657#issuecomment-34844672,34844672,
gmaxwell,2014-02-12T07:14:18Z,"I didn't like this when I first looked at it, but I'm warming up to it.  I think what the regular balance display is showing is, indeed, what you can spend.\n\nWas there a reason we didn't promote the unconfirmed balance to the getinfo output?\n",https://github.com/bitcoin/bitcoin/pull/3657#issuecomment-34844772,34844772,
laanwj,2014-02-12T07:39:55Z,@gmaxwell Because Gavin was afraid of the things people would do with unconfirmed balances. See #3369. Also adding another (expensive) balance computation in there would have performance drawbacks. It's already a grabbag of random info.\n\nBut I agree after this change it makes sense to show unconfirmed balance there.\n,https://github.com/bitcoin/bitcoin/pull/3657#issuecomment-34845843,34845843,
laanwj,2014-02-12T11:51:05Z,"So, I replicated the mallability problem in regtest:\n![transactions](https://f.cloud.github.com/assets/126646/2147948/6ab8aac4-93db-11e3-8a48-b78e05eeaa5e.png)\n\nBalance looks like this without this change (and -nospendzeroconfchange):\n![without](https://f.cloud.github.com/assets/126646/2147959/98defcbe-93db-11e3-9afa-727983f0d4e7.png)\n\nBalance looks like this with this change (and -nospendze",https://github.com/bitcoin/bitcoin/pull/3657#issuecomment-34861581,34861581,
b6393ce9-d324-4fe1-996b-acf82dbc3d53,2014-02-12T17:56:33Z,"Your test case actually shows that this patch is working as intended: Confirmed transactions are accounted for properly, but unconfirmed transactions are a total crapshoot; indeed, this outcome is all that Bitcoin has ever guaranteed.\n\nFixing the computation of the sum `Total' can—and _should_—be left to another patch.\n",https://github.com/bitcoin/bitcoin/pull/3657#issuecomment-34896023,34896023,
b6393ce9-d324-4fe1-996b-acf82dbc3d53,2014-02-12T18:06:47Z,"In particular, I think it's important to distinguish between ""confirmed"" and ""spendable"". Hitherto, the reference client has conflated these two notions; this **_hiding of reality**_ is now coming back to bite us hard.\n\n---\n\nRegardless of whether a user wishes to treat unconfirmed change as _spendable_, it should _never_ be treated as _confirmed_ because&hellip; well&hellip; it's _not_ confirm",https://github.com/bitcoin/bitcoin/pull/3657#issuecomment-34897170,34897170,
gmaxwell,2014-02-12T18:15:18Z,"@b6393ce9-d324-4fe1-996b-acf82dbc3d53  I strongly disagree with your complaints about ""hiding reality"", but until now I've refrained from responding because correcting your philosophy is not critical to improving things.  But since you keep repeating it...   Part of the entire purpose of the software's front end is to make the software usable to humans by taking care of and reducing the visibility",https://github.com/bitcoin/bitcoin/pull/3657#issuecomment-34897980,34897980,
b6393ce9-d324-4fe1-996b-acf82dbc3d53,2014-02-12T18:26:46Z,"Abstraction is not about hiding reality (I should say ""_ignoring_ reality""); abstraction is about constraining one's view of reality in order to avoid distracting details—**the result of abstraction is still consistent with reality.**\n\nWhat we have here is not an abstraction; the results are not consistent with reality, as proved by this entire, extremely costly debacle.\n",https://github.com/bitcoin/bitcoin/pull/3657#issuecomment-34899194,34899194,
b733686a-14ea-4048-aa94-44c2cb029830,2014-02-12T19:02:20Z,"@b6393ce9-d324-4fe1-996b-acf82dbc3d53 Abstraction can be completely at odds with reality for the sake of usability and simplicity. For this reason the client pretends that change addresses do not exist, where if they were following the internal workings of the client they’d be presented on the receiving list as any other. This behavior in no way follows reality for the sake of users not needing to",https://github.com/bitcoin/bitcoin/pull/3657#issuecomment-34903267,34903267,
b6393ce9-d324-4fe1-996b-acf82dbc3d53,2014-02-12T19:13:22Z,- An abstraction is _never_ at odds with reality.\n  \n  An attempt that is at odds with reality is merely a mistake.\n- I am not disputing the example you are trying to describe; you are fabricating a straw man.\n,https://github.com/bitcoin/bitcoin/pull/3657#issuecomment-34904653,34904653,
dgenr8,2014-02-12T23:43:08Z,WALLET is a lousy abstraction in this instance.  There's no bitcoin in it.  It is a KEYRING.  This hindered my comprehension of the entire system for longer than I care to admit.\n,https://github.com/bitcoin/bitcoin/pull/3657#issuecomment-34932495,34932495,
b733686a-14ea-4048-aa94-44c2cb029830,2014-02-12T23:47:10Z,"@dgenr8 Wallet makes a lot more sense in the confines of the Bitcoin software being used as a means of storage and spending of monetary value. If you don't use terms that a user finds familiar, there's nothing to base the interaction metaphor on. To that end we use ""wallet"" as it's a concept the user finds familiar, you put coins in your wallet and that makes a reasonable amount of sense without e",https://github.com/bitcoin/bitcoin/pull/3657#issuecomment-34932771,34932771,
sipa,2014-02-12T23:56:43Z,"Also at a purely technical level, it is a misunderstanding that a Bitcoin wallet is just a keyring. The wallet also contains the knowledge of transactions that provide the outputs it can spend. Without that knowledge you cannot send money.\n\nA wallet contains both the coins, and the keys to prove that you own them. Despite that, the network will still prevent the same coin from being spent twice.",https://github.com/bitcoin/bitcoin/pull/3657#issuecomment-34933473,34933473,
b733686a-14ea-4048-aa94-44c2cb029830,2014-02-13T00:07:26Z,"@sipa I think that's somewhat due to the way people develop ""wallets"", in that they don't consider discovering unspent outputs a part of the process. The vast majority seem to offload the task to blockchain.info's API rather than managing themselves. The rest is just users being given simplistic explanations that they spread without the knowledge that they are limited.\n",https://github.com/bitcoin/bitcoin/pull/3657#issuecomment-34934218,34934218,
dgenr8,2014-02-13T01:19:37Z,"KEY as an abstraction would make some things easier to understand.\n\nPeople understand that keys can be copied without duplicating the contents of that which they unlock.  This would explain why wallets can be backed up.\n\nPeople understand that a key exists in a different location than that which it unlocks.  This would explain why the network must be consulted to determine what is spendable, a",https://github.com/bitcoin/bitcoin/pull/3657#issuecomment-34938843,34938843,
b733686a-14ea-4048-aa94-44c2cb029830,2014-02-13T02:14:47Z,"@dgenr8 Only it doesn't work like that. People expect funds to remain at an address after they have been sent there, which is where your analogy begins to break down. Why when a user makes a transaction does all or some of the funds in a vault disappear and move to one that's completely unrelated? If we are to avoid explaining inputs and change addresses to people, we've got to be higher leveled t",https://github.com/bitcoin/bitcoin/pull/3657#issuecomment-34941702,34941702,
dgenr8,2014-02-13T03:57:59Z,"Channeling @b6393ce9-d324-4fe1-996b-acf82dbc3d53 here.  Tell them the truth.  Tell them that the bank's transaction slips don't have a spot to fill in for how much to take out when spending a vault box's contents.  You have to empty the whole thing, so any change goes to another box.  Your wallet software actually makes a change box for you, amazingly, without any cooperation from the bank, until ",https://github.com/bitcoin/bitcoin/pull/3657#issuecomment-34946282,34946282,
laanwj,2014-02-13T07:56:13Z,This is getting out of hand... Let's not try to write a philosophy book here.\n,https://github.com/bitcoin/bitcoin/pull/3657#issuecomment-34955612,34955612,
laanwj,2014-02-13T11:27:39Z,"I do think we should merge this, as it makes getbalance with -nospendzeroconf say how much can really be spent now. To have it otherwise is confusing.\n\nAs -nospendzeroconf is not enabled by default people know what they're getting into when they enable it.\n",https://github.com/bitcoin/bitcoin/pull/3657#issuecomment-34969975,34969975,
gmaxwell,2014-02-13T11:40:29Z,After the fact ACK.\n,https://github.com/bitcoin/bitcoin/pull/3657#issuecomment-34970712,34970712,
