[
  {
    "sha": "c57f03ce1741b38af448bec7b22ab9f8ac21f067",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTdmMDNjZTE3NDFiMzhhZjQ0OGJlYzdiMjJhYjlmOGFjMjFmMDY3",
    "commit": {
      "author": {
        "name": "Calvin Kim",
        "email": "calvin@kcalvinalvin.info",
        "date": "2020-05-18T08:14:10Z"
      },
      "committer": {
        "name": "Calvin Kim",
        "email": "calvin@kcalvinalvin.info",
        "date": "2020-05-21T16:40:31Z"
      },
      "message": "refactor: Replace const char* to std::string\n\nSome functions should be returning std::string instead of const char*.\nThis commit changes that.",
      "tree": {
        "sha": "fc53ee2ad75995ae01f998dca70574754ee91f7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc53ee2ad75995ae01f998dca70574754ee91f7b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c57f03ce1741b38af448bec7b22ab9f8ac21f067",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c57f03ce1741b38af448bec7b22ab9f8ac21f067",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c57f03ce1741b38af448bec7b22ab9f8ac21f067",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c57f03ce1741b38af448bec7b22ab9f8ac21f067/comments",
    "author": {
      "login": "kcalvinalvin",
      "id": 37185887,
      "node_id": "MDQ6VXNlcjM3MTg1ODg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kcalvinalvin",
      "html_url": "https://github.com/kcalvinalvin",
      "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
      "following_url": "https://api.github.com/users/kcalvinalvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/kcalvinalvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kcalvinalvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
      "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
      "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
      "events_url": "https://api.github.com/users/kcalvinalvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kcalvinalvin",
      "id": 37185887,
      "node_id": "MDQ6VXNlcjM3MTg1ODg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kcalvinalvin",
      "html_url": "https://github.com/kcalvinalvin",
      "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
      "following_url": "https://api.github.com/users/kcalvinalvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/kcalvinalvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kcalvinalvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
      "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
      "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
      "events_url": "https://api.github.com/users/kcalvinalvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc5333d31f280e09bb1e8cdacfbe842f4ab9e69b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc5333d31f280e09bb1e8cdacfbe842f4ab9e69b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc5333d31f280e09bb1e8cdacfbe842f4ab9e69b"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 24,
      "deletions": 13
    },
    "files": [
      {
        "sha": "9bd1959a99617e428fe4cd5c7989e8b1dccd72c6",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=c57f03ce1741b38af448bec7b22ab9f8ac21f067",
        "patch": "@@ -20,6 +20,7 @@\n #include <functional>\n #include <memory>\n #include <stdio.h>\n+#include <string>\n #include <tuple>\n \n #include <event2/buffer.h>\n@@ -157,7 +158,7 @@ struct HTTPReply\n     std::string body;\n };\n \n-static const char *http_errorstring(int code)\n+static std::string http_errorstring(int code)\n {\n     switch(code) {\n #if LIBEVENT_VERSION_NUMBER >= 0x02010300"
      },
      {
        "sha": "1c0a8a096dcc1480e38f4518dfb72408b3d5084a",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=c57f03ce1741b38af448bec7b22ab9f8ac21f067",
        "patch": "@@ -19,6 +19,7 @@\n #include <boost/algorithm/string/split.hpp>\n \n #include <algorithm>\n+#include <string>\n \n CScript ParseScript(const std::string& s)\n {\n@@ -34,10 +35,9 @@ CScript ParseScript(const std::string& s)\n             if (op < OP_NOP && op != OP_RESERVED)\n                 continue;\n \n-            const char* name = GetOpName(static_cast<opcodetype>(op));\n-            if (strcmp(name, \"OP_UNKNOWN\") == 0)\n+            std::string strName = GetOpName(static_cast<opcodetype>(op));\n+            if (strName == \"OP_UNKNOWN\")\n                 continue;\n-            std::string strName(name);\n             mapOpNames[strName] = static_cast<opcodetype>(op);\n             // Convenience: OP_ADD and just ADD are both recognized:\n             boost::algorithm::replace_first(strName, \"OP_\", \"\");"
      },
      {
        "sha": "92c6fe7785fc3ac34c806b4a672a3af79debf5b4",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=c57f03ce1741b38af448bec7b22ab9f8ac21f067",
        "patch": "@@ -7,7 +7,9 @@\n \n #include <util/strencodings.h>\n \n-const char* GetOpName(opcodetype opcode)\n+#include <string>\n+\n+std::string GetOpName(opcodetype opcode)\n {\n     switch (opcode)\n     {"
      },
      {
        "sha": "dab8035fcd113894cef1224bef412897126e8d10",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=c57f03ce1741b38af448bec7b22ab9f8ac21f067",
        "patch": "@@ -193,7 +193,7 @@ enum opcodetype\n // Maximum value that an opcode can be\n static const unsigned int MAX_OPCODE = OP_NOP10;\n \n-const char* GetOpName(opcodetype opcode);\n+std::string GetOpName(opcodetype opcode);\n \n class scriptnum_error : public std::runtime_error\n {"
      },
      {
        "sha": "69e14803f1b5d48805c14991e180b05b39f65b3d",
        "filename": "src/script/script_error.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/script/script_error.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/script/script_error.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.cpp?ref=c57f03ce1741b38af448bec7b22ab9f8ac21f067",
        "patch": "@@ -5,7 +5,9 @@\n \n #include <script/script_error.h>\n \n-const char* ScriptErrorString(const ScriptError serror)\n+#include <string>\n+\n+std::string ScriptErrorString(const ScriptError serror)\n {\n     switch (serror)\n     {"
      },
      {
        "sha": "2978c147e144277190604345617df95e52d47e4c",
        "filename": "src/script/script_error.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/script/script_error.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/script/script_error.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.h?ref=c57f03ce1741b38af448bec7b22ab9f8ac21f067",
        "patch": "@@ -6,6 +6,8 @@\n #ifndef BITCOIN_SCRIPT_SCRIPT_ERROR_H\n #define BITCOIN_SCRIPT_SCRIPT_ERROR_H\n \n+#include <string>\n+\n typedef enum ScriptError_t\n {\n     SCRIPT_ERR_OK = 0,\n@@ -73,6 +75,6 @@ typedef enum ScriptError_t\n \n #define SCRIPT_ERR_LAST SCRIPT_ERR_ERROR_COUNT\n \n-const char* ScriptErrorString(const ScriptError error);\n+std::string ScriptErrorString(const ScriptError error);\n \n #endif // BITCOIN_SCRIPT_SCRIPT_ERROR_H"
      },
      {
        "sha": "c90c2c24a01fb66506f73086548b30fc3891408d",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=c57f03ce1741b38af448bec7b22ab9f8ac21f067",
        "patch": "@@ -9,6 +9,8 @@\n #include <pubkey.h>\n #include <script/script.h>\n \n+#include <string>\n+\n typedef std::vector<unsigned char> valtype;\n \n bool fAcceptDatacarrier = DEFAULT_ACCEPT_DATACARRIER;\n@@ -25,7 +27,7 @@ WitnessV0ScriptHash::WitnessV0ScriptHash(const CScript& in)\n     CSHA256().Write(in.data(), in.size()).Finalize(begin());\n }\n \n-const char* GetTxnOutputType(txnouttype t)\n+std::string GetTxnOutputType(txnouttype t)\n {\n     switch (t)\n     {\n@@ -39,7 +41,7 @@ const char* GetTxnOutputType(txnouttype t)\n     case TX_WITNESS_V0_SCRIPTHASH: return \"witness_v0_scripthash\";\n     case TX_WITNESS_UNKNOWN: return \"witness_unknown\";\n     }\n-    return nullptr;\n+    assert(false);\n }\n \n static bool MatchPayToPubkey(const CScript& script, valtype& pubkey)"
      },
      {
        "sha": "42f20e64644a45b5cd3dfac5e1065174eca30e4b",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=c57f03ce1741b38af448bec7b22ab9f8ac21f067",
        "patch": "@@ -11,6 +11,8 @@\n \n #include <boost/variant.hpp>\n \n+#include <string>\n+\n \n static const bool DEFAULT_ACCEPT_DATACARRIER = true;\n \n@@ -146,7 +148,7 @@ typedef boost::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash,\n bool IsValidDestination(const CTxDestination& dest);\n \n /** Get the name of a txnouttype as a C string, or nullptr if unknown. */\n-const char* GetTxnOutputType(txnouttype t);\n+std::string GetTxnOutputType(txnouttype t);\n \n /**\n  * Parse a scriptPubKey and identify script type for standard scripts. If"
      },
      {
        "sha": "cb3ae290d107b0a3e912e6f67f96a94781e424f5",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=c57f03ce1741b38af448bec7b22ab9f8ac21f067",
        "patch": "@@ -102,7 +102,7 @@ static ScriptErrorDesc script_errors[]={\n     {SCRIPT_ERR_SIG_FINDANDDELETE, \"SIG_FINDANDDELETE\"},\n };\n \n-static const char *FormatScriptError(ScriptError_t err)\n+static std::string FormatScriptError(ScriptError_t err)\n {\n     for (unsigned int i=0; i<ARRAYLEN(script_errors); ++i)\n         if (script_errors[i].err == err)\n@@ -134,7 +134,7 @@ void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, const CScript\n     CMutableTransaction tx = BuildSpendingTransaction(scriptSig, scriptWitness, txCredit);\n     CMutableTransaction tx2 = tx;\n     BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, &scriptWitness, flags, MutableTransactionSignatureChecker(&tx, 0, txCredit.vout[0].nValue), &err) == expect, message);\n-    BOOST_CHECK_MESSAGE(err == scriptError, std::string(FormatScriptError(err)) + \" where \" + std::string(FormatScriptError((ScriptError_t)scriptError)) + \" expected: \" + message);\n+    BOOST_CHECK_MESSAGE(err == scriptError, FormatScriptError(err) + \" where \" + FormatScriptError((ScriptError_t)scriptError) + \" expected: \" + message);\n \n     // Verify that removing flags from a passing test or adding flags to a failing test does not change the result.\n     for (int i = 0; i < 16; ++i) {"
      }
    ]
  }
]