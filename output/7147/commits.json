[
  {
    "sha": "ae98388b2289a56d76d0fd4708e22842f88695c4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZTk4Mzg4YjIyODlhNTZkNzZkMGZkNDcwOGUyMjg0MmY4ODY5NWM0",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-13T15:27:42Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-13T15:27:42Z"
      },
      "message": "[Qt] add startup option to reset Qt settings",
      "tree": {
        "sha": "0d7408c6daa3f06292ce1a7849d785142eed1cab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d7408c6daa3f06292ce1a7849d785142eed1cab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae98388b2289a56d76d0fd4708e22842f88695c4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWRgFuAAoJECnUvLZBb1Ps0RwQAI2+HT+9DnLuXrwGNuI18Id5\njKr3yONPXpKRjHmumz8FpT+Cta1C7ktDWjme55ZPEMUKM2oGZpDs4a3ZH9W8sf1N\nRahFu4sJT2dn99JPvcLPumtXikCzq2Gg0cp/ZI1Ji5LHwGMtB1jldkQE2uknhb7q\nOG7h7u3ni30Bc4MAlI0i05GEq3CU7bbtsoDNY+5yumnuwnEceNJCrTgVwUyHjMxm\nxuspPzUsPLDmisiY5iuaAz9z6fbyGZfe8BmdaDuwKmwClqrcEygNnXdJGf+V9fVM\no1+yBMhsyTf7gRPyzr/kB3Q7+LyuCkkl0CLp1usswnz1kO8Io2b++4LlPZpI7GzJ\nEtYO+70cy1ggejyUU8nqgwPURTPRvDaPEhkFYOya3iR/b2HKrzhYX1kShvAcnpFg\nttWNAix6/hKrO3C3tRVhX3qqVVd4Xgjxz9FPZcXkNIl2ZCut8CX0hFM7EWyH8v2M\ngkrBA1qUdY6qetZjirF080YlH8ofPwkDxiqHEjjxzE1C2jOU+nvMnEg+VK4PGsul\nptHCUJxVKsHyEYfHIRlrU1WX3luoZL2rkbOYTZi/vnPUdTl56yZqVEmcMiCgA8nq\nx3y1P73NlnJgeuAQjUqKxKD829/dQ2jx9QxOe7CX74UzKYfj+c3GhWjHp67ZTV3M\nu4g6pMAxHkPOK0v9bJCH\n=aC6i\n-----END PGP SIGNATURE-----",
        "payload": "tree 0d7408c6daa3f06292ce1a7849d785142eed1cab\nparent d2e987aa19295e5da40b843aad7970f781a96ccd\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1447428462 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1447428462 +0100\n\n[Qt] add startup option to reset Qt settings\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae98388b2289a56d76d0fd4708e22842f88695c4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae98388b2289a56d76d0fd4708e22842f88695c4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae98388b2289a56d76d0fd4708e22842f88695c4/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d2e987aa19295e5da40b843aad7970f781a96ccd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2e987aa19295e5da40b843aad7970f781a96ccd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d2e987aa19295e5da40b843aad7970f781a96ccd"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 12,
      "deletions": 9
    },
    "files": [
      {
        "sha": "06a6c239ef67e7c312b3f409e28260442da55377",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae98388b2289a56d76d0fd4708e22842f88695c4/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae98388b2289a56d76d0fd4708e22842f88695c4/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=ae98388b2289a56d76d0fd4708e22842f88695c4",
        "patch": "@@ -202,7 +202,7 @@ class BitcoinApplication: public QApplication\n     void createPaymentServer();\n #endif\n     /// Create options model\n-    void createOptionsModel();\n+    void createOptionsModel(bool resetSettings);\n     /// Create main window\n     void createWindow(const NetworkStyle *networkStyle);\n     /// Create splash screen\n@@ -352,9 +352,9 @@ void BitcoinApplication::createPaymentServer()\n }\n #endif\n \n-void BitcoinApplication::createOptionsModel()\n+void BitcoinApplication::createOptionsModel(bool resetSettings)\n {\n-    optionsModel = new OptionsModel();\n+    optionsModel = new OptionsModel(NULL, resetSettings);\n }\n \n void BitcoinApplication::createWindow(const NetworkStyle *networkStyle)\n@@ -645,7 +645,7 @@ int main(int argc, char *argv[])\n     qInstallMessageHandler(DebugMessageHandler);\n #endif\n     // Load GUI settings from QSettings\n-    app.createOptionsModel();\n+    app.createOptionsModel(mapArgs.count(\"-resetguisettings\") != 0);\n \n     // Subscribe to global signals from core\n     uiInterface.InitMessage.connect(InitMessage);"
      },
      {
        "sha": "3e5c6c72b1981b1bc9c7e9bafddab0f782d478f1",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae98388b2289a56d76d0fd4708e22842f88695c4/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae98388b2289a56d76d0fd4708e22842f88695c4/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=ae98388b2289a56d76d0fd4708e22842f88695c4",
        "patch": "@@ -26,10 +26,10 @@\n #include <QSettings>\n #include <QStringList>\n \n-OptionsModel::OptionsModel(QObject *parent) :\n+OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n     QAbstractListModel(parent)\n {\n-    Init();\n+    Init(resetSettings);\n }\n \n void OptionsModel::addOverriddenOption(const std::string &option)\n@@ -38,8 +38,11 @@ void OptionsModel::addOverriddenOption(const std::string &option)\n }\n \n // Writes all missing QSettings with their default values\n-void OptionsModel::Init()\n+void OptionsModel::Init(bool resetSettings)\n {\n+    if (resetSettings)\n+        Reset();\n+\n     QSettings settings;\n \n     // Ensure restart flag is unset on client startup"
      },
      {
        "sha": "d5bddb1a94086d704196178e18d2efbc46b66acd",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae98388b2289a56d76d0fd4708e22842f88695c4/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae98388b2289a56d76d0fd4708e22842f88695c4/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=ae98388b2289a56d76d0fd4708e22842f88695c4",
        "patch": "@@ -24,7 +24,7 @@ class OptionsModel : public QAbstractListModel\n     Q_OBJECT\n \n public:\n-    explicit OptionsModel(QObject *parent = 0);\n+    explicit OptionsModel(QObject *parent = 0, bool resetSettings = false);\n \n     enum OptionID {\n         StartAtStartup,         // bool\n@@ -48,7 +48,7 @@ class OptionsModel : public QAbstractListModel\n         OptionIDRowCount,\n     };\n \n-    void Init();\n+    void Init(bool resetSettings = false);\n     void Reset();\n \n     int rowCount(const QModelIndex & parent = QModelIndex()) const;"
      }
    ]
  },
  {
    "sha": "a78e6eaf5ca52629c1b958908fad98986e9343a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNzhlNmVhZjVjYTUyNjI5YzFiOTU4OTA4ZmFkOTg5ODZlOTM0M2E3",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-13T15:48:57Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-13T15:50:49Z"
      },
      "message": "Fix bug in mempool_tests unit test",
      "tree": {
        "sha": "83437d0b5dd3e1a2160dfc06d268a4b164d889ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/83437d0b5dd3e1a2160dfc06d268a4b164d889ab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a78e6eaf5ca52629c1b958908fad98986e9343a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a78e6eaf5ca52629c1b958908fad98986e9343a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a78e6eaf5ca52629c1b958908fad98986e9343a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a78e6eaf5ca52629c1b958908fad98986e9343a7/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d2e987aa19295e5da40b843aad7970f781a96ccd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2e987aa19295e5da40b843aad7970f781a96ccd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d2e987aa19295e5da40b843aad7970f781a96ccd"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "afb3b282f6ce1496c7772f91b82de688dc3701ab",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a78e6eaf5ca52629c1b958908fad98986e9343a7/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a78e6eaf5ca52629c1b958908fad98986e9343a7/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=a78e6eaf5ca52629c1b958908fad98986e9343a7",
        "patch": "@@ -377,8 +377,8 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     tx7.vout.resize(2);\n     tx7.vout[0].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n     tx7.vout[0].nValue = 10 * COIN;\n-    tx7.vout[0].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n-    tx7.vout[0].nValue = 10 * COIN;\n+    tx7.vout[1].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n+    tx7.vout[1].nValue = 10 * COIN;\n \n     pool.addUnchecked(tx4.GetHash(), CTxMemPoolEntry(tx4, 7000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx4)));\n     pool.addUnchecked(tx5.GetHash(), CTxMemPoolEntry(tx5, 1000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx5)));"
      }
    ]
  },
  {
    "sha": "4f09b77c7fa50afc19d4458c9dd05219c82a298d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZjA5Yjc3YzdmYTUwYWZjMTlkNDQ1OGM5ZGQwNTIxOWM4MmEyOThk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-13T15:47:16Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-13T15:51:44Z"
      },
      "message": "Merge pull request #6983\n\n48edf57 Update key.cpp to new secp256k1 API (Pieter Wuille)\n1d84107 Squashed 'src/secp256k1/' changes from 22f60a6..2bfb82b (Pieter Wuille)",
      "tree": {
        "sha": "9cb1a44ee881f4daa00f07876b18ba76c92f0b8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9cb1a44ee881f4daa00f07876b18ba76c92f0b8d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f09b77c7fa50afc19d4458c9dd05219c82a298d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWRgcQAAoJENuhpnN5oakxF4cQAMN6cEZScgctki43Q7GTrtX8\nrqgRJC7Uc955cQNemrfDmFpQJ9LxbJo/hXpJIFwosSYQMCc23Db5LH5TaaeWBdb3\nrl9jwlBvAi9okZlI1YJleW5kR/gzbIpwbUnGgPZMw2eebnXgJqlsfvyZ4W4XBS4Z\nr0GmHsMoYxrEvgaZ40uEm57P2SG7WcU4VnMMGFbVhMjmukz5t8Tc0Aty4BHWrOoa\njUOGAB/tJbZwdV9DnrFwxIRJL33r7LyHo99nQXi4M+/+vk1VlqwWesz2T6OymoBG\nWyJsx4lyf35d6q4qxNlU3bqDV7GNHIdcNox3VR/4JydincYgBNRlvMg4P+AfEZLf\nKuwsnFleAFLvu/cTcWmgeRogENe/sUnlMPLRL2lNDCPxri6UD7mBD+NRuulQuvMm\nZ/wJBJ1nWwjYQOLYRugZA/R09UBHwG2fLZj9+4l0OSEdNycVggdq4w20bQj0F3Og\nleNJXkP9R6eX/lm8GaYO4J2vbbt0hc6Q5zJJyDlLD8hYsAYiX7chWOQhzkt4pAp8\n88RntGOjq9q7MjALs4ragTv9+4Esk076y183HpC7ldus/Mho0uem2pm+SppU23xc\nfZcWfnBP0u1Cxfo/bETxwnKg2lH/KQbTt07A9BoytboMwXISME+CWTUHfvzDU5GJ\ns2TdZ7Ftw8duNwX9EY2T\n=do58\n-----END PGP SIGNATURE-----",
        "payload": "tree 9cb1a44ee881f4daa00f07876b18ba76c92f0b8d\nparent d2e987aa19295e5da40b843aad7970f781a96ccd\nparent 48edf5746af84e352a5619c44fb1bc4cf565875c\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1447429636 +0100\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1447429904 +0100\n\nMerge pull request #6983\n\n48edf57 Update key.cpp to new secp256k1 API (Pieter Wuille)\n1d84107 Squashed 'src/secp256k1/' changes from 22f60a6..2bfb82b (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f09b77c7fa50afc19d4458c9dd05219c82a298d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4f09b77c7fa50afc19d4458c9dd05219c82a298d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f09b77c7fa50afc19d4458c9dd05219c82a298d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d2e987aa19295e5da40b843aad7970f781a96ccd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2e987aa19295e5da40b843aad7970f781a96ccd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d2e987aa19295e5da40b843aad7970f781a96ccd"
      },
      {
        "sha": "48edf5746af84e352a5619c44fb1bc4cf565875c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48edf5746af84e352a5619c44fb1bc4cf565875c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/48edf5746af84e352a5619c44fb1bc4cf565875c"
      }
    ],
    "stats": {
      "total": 9801,
      "additions": 7860,
      "deletions": 1941
    },
    "files": [
      {
        "sha": "63a745393e37ab60a74e2c19a3d0c6c432cd65dd",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -958,7 +958,7 @@ PKGCONFIG_LIBDIR_TEMP=\"$PKG_CONFIG_LIBDIR\"\n unset PKG_CONFIG_LIBDIR\n PKG_CONFIG_LIBDIR=\"$PKGCONFIG_LIBDIR_TEMP\"\n \n-ac_configure_args=\"${ac_configure_args} --disable-shared --with-pic --with-bignum=no\"\n+ac_configure_args=\"${ac_configure_args} --disable-shared --with-pic --with-bignum=no --enable-module-recovery\"\n AC_CONFIG_SUBDIRS([src/secp256k1 src/univalue])\n \n AC_OUTPUT"
      },
      {
        "sha": "a24fa8a4baa59a87fbf6fcc3a30f66d4e4fec8ac",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 131,
        "deletions": 24,
        "changes": 155,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -7,17 +7,120 @@\n #include \"arith_uint256.h\"\n #include \"crypto/common.h\"\n #include \"crypto/hmac_sha512.h\"\n-#include \"eccryptoverify.h\"\n #include \"pubkey.h\"\n #include \"random.h\"\n \n #include <secp256k1.h>\n-#include \"ecwrapper.h\"\n+#include <secp256k1_recovery.h>\n \n-static secp256k1_context_t* secp256k1_context = NULL;\n+static secp256k1_context* secp256k1_context_sign = NULL;\n+\n+/** These functions are taken from the libsecp256k1 distribution and are very ugly. */\n+static int ec_privkey_import_der(const secp256k1_context* ctx, unsigned char *out32, const unsigned char *privkey, size_t privkeylen) {\n+    const unsigned char *end = privkey + privkeylen;\n+    int lenb = 0;\n+    int len = 0;\n+    memset(out32, 0, 32);\n+    /* sequence header */\n+    if (end < privkey+1 || *privkey != 0x30) {\n+        return 0;\n+    }\n+    privkey++;\n+    /* sequence length constructor */\n+    if (end < privkey+1 || !(*privkey & 0x80)) {\n+        return 0;\n+    }\n+    lenb = *privkey & ~0x80; privkey++;\n+    if (lenb < 1 || lenb > 2) {\n+        return 0;\n+    }\n+    if (end < privkey+lenb) {\n+        return 0;\n+    }\n+    /* sequence length */\n+    len = privkey[lenb-1] | (lenb > 1 ? privkey[lenb-2] << 8 : 0);\n+    privkey += lenb;\n+    if (end < privkey+len) {\n+        return 0;\n+    }\n+    /* sequence element 0: version number (=1) */\n+    if (end < privkey+3 || privkey[0] != 0x02 || privkey[1] != 0x01 || privkey[2] != 0x01) {\n+        return 0;\n+    }\n+    privkey += 3;\n+    /* sequence element 1: octet string, up to 32 bytes */\n+    if (end < privkey+2 || privkey[0] != 0x04 || privkey[1] > 0x20 || end < privkey+2+privkey[1]) {\n+        return 0;\n+    }\n+    memcpy(out32 + 32 - privkey[1], privkey + 2, privkey[1]);\n+    if (!secp256k1_ec_seckey_verify(ctx, out32)) {\n+        memset(out32, 0, 32);\n+        return 0;\n+    }\n+    return 1;\n+}\n+\n+static int ec_privkey_export_der(const secp256k1_context *ctx, unsigned char *privkey, size_t *privkeylen, const unsigned char *key32, int compressed) {\n+    secp256k1_pubkey pubkey;\n+    size_t pubkeylen = 0;\n+    if (!secp256k1_ec_pubkey_create(ctx, &pubkey, key32)) {\n+        *privkeylen = 0;\n+        return 0;\n+    }\n+    if (compressed) {\n+        static const unsigned char begin[] = {\n+            0x30,0x81,0xD3,0x02,0x01,0x01,0x04,0x20\n+        };\n+        static const unsigned char middle[] = {\n+            0xA0,0x81,0x85,0x30,0x81,0x82,0x02,0x01,0x01,0x30,0x2C,0x06,0x07,0x2A,0x86,0x48,\n+            0xCE,0x3D,0x01,0x01,0x02,0x21,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n+            0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n+            0xFF,0xFF,0xFE,0xFF,0xFF,0xFC,0x2F,0x30,0x06,0x04,0x01,0x00,0x04,0x01,0x07,0x04,\n+            0x21,0x02,0x79,0xBE,0x66,0x7E,0xF9,0xDC,0xBB,0xAC,0x55,0xA0,0x62,0x95,0xCE,0x87,\n+            0x0B,0x07,0x02,0x9B,0xFC,0xDB,0x2D,0xCE,0x28,0xD9,0x59,0xF2,0x81,0x5B,0x16,0xF8,\n+            0x17,0x98,0x02,0x21,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n+            0xFF,0xFF,0xFF,0xFF,0xFE,0xBA,0xAE,0xDC,0xE6,0xAF,0x48,0xA0,0x3B,0xBF,0xD2,0x5E,\n+            0x8C,0xD0,0x36,0x41,0x41,0x02,0x01,0x01,0xA1,0x24,0x03,0x22,0x00\n+        };\n+        unsigned char *ptr = privkey;\n+        memcpy(ptr, begin, sizeof(begin)); ptr += sizeof(begin);\n+        memcpy(ptr, key32, 32); ptr += 32;\n+        memcpy(ptr, middle, sizeof(middle)); ptr += sizeof(middle);\n+        pubkeylen = 33;\n+        secp256k1_ec_pubkey_serialize(ctx, ptr, &pubkeylen, &pubkey, SECP256K1_EC_COMPRESSED);\n+        ptr += pubkeylen;\n+        *privkeylen = ptr - privkey;\n+    } else {\n+        static const unsigned char begin[] = {\n+            0x30,0x82,0x01,0x13,0x02,0x01,0x01,0x04,0x20\n+        };\n+        static const unsigned char middle[] = {\n+            0xA0,0x81,0xA5,0x30,0x81,0xA2,0x02,0x01,0x01,0x30,0x2C,0x06,0x07,0x2A,0x86,0x48,\n+            0xCE,0x3D,0x01,0x01,0x02,0x21,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n+            0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n+            0xFF,0xFF,0xFE,0xFF,0xFF,0xFC,0x2F,0x30,0x06,0x04,0x01,0x00,0x04,0x01,0x07,0x04,\n+            0x41,0x04,0x79,0xBE,0x66,0x7E,0xF9,0xDC,0xBB,0xAC,0x55,0xA0,0x62,0x95,0xCE,0x87,\n+            0x0B,0x07,0x02,0x9B,0xFC,0xDB,0x2D,0xCE,0x28,0xD9,0x59,0xF2,0x81,0x5B,0x16,0xF8,\n+            0x17,0x98,0x48,0x3A,0xDA,0x77,0x26,0xA3,0xC4,0x65,0x5D,0xA4,0xFB,0xFC,0x0E,0x11,\n+            0x08,0xA8,0xFD,0x17,0xB4,0x48,0xA6,0x85,0x54,0x19,0x9C,0x47,0xD0,0x8F,0xFB,0x10,\n+            0xD4,0xB8,0x02,0x21,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n+            0xFF,0xFF,0xFF,0xFF,0xFE,0xBA,0xAE,0xDC,0xE6,0xAF,0x48,0xA0,0x3B,0xBF,0xD2,0x5E,\n+            0x8C,0xD0,0x36,0x41,0x41,0x02,0x01,0x01,0xA1,0x44,0x03,0x42,0x00\n+        };\n+        unsigned char *ptr = privkey;\n+        memcpy(ptr, begin, sizeof(begin)); ptr += sizeof(begin);\n+        memcpy(ptr, key32, 32); ptr += 32;\n+        memcpy(ptr, middle, sizeof(middle)); ptr += sizeof(middle);\n+        pubkeylen = 65;\n+        secp256k1_ec_pubkey_serialize(ctx, ptr, &pubkeylen, &pubkey, SECP256K1_EC_UNCOMPRESSED);\n+        ptr += pubkeylen;\n+        *privkeylen = ptr - privkey;\n+    }\n+    return 1;\n+}\n \n bool CKey::Check(const unsigned char *vch) {\n-    return eccrypto::Check(vch);\n+    return secp256k1_ec_seckey_verify(secp256k1_context_sign, vch);\n }\n \n void CKey::MakeNewKey(bool fCompressedIn) {\n@@ -30,7 +133,7 @@ void CKey::MakeNewKey(bool fCompressedIn) {\n }\n \n bool CKey::SetPrivKey(const CPrivKey &privkey, bool fCompressedIn) {\n-    if (!secp256k1_ec_privkey_import(secp256k1_context, (unsigned char*)begin(), &privkey[0], privkey.size()))\n+    if (!ec_privkey_import_der(secp256k1_context_sign, (unsigned char*)begin(), &privkey[0], privkey.size()))\n         return false;\n     fCompressed = fCompressedIn;\n     fValid = true;\n@@ -40,22 +143,25 @@ bool CKey::SetPrivKey(const CPrivKey &privkey, bool fCompressedIn) {\n CPrivKey CKey::GetPrivKey() const {\n     assert(fValid);\n     CPrivKey privkey;\n-    int privkeylen, ret;\n+    int ret;\n+    size_t privkeylen;\n     privkey.resize(279);\n     privkeylen = 279;\n-    ret = secp256k1_ec_privkey_export(secp256k1_context, begin(), (unsigned char*)&privkey[0], &privkeylen, fCompressed);\n+    ret = ec_privkey_export_der(secp256k1_context_sign, (unsigned char*)&privkey[0], &privkeylen, begin(), fCompressed ? SECP256K1_EC_COMPRESSED : SECP256K1_EC_UNCOMPRESSED);\n     assert(ret);\n     privkey.resize(privkeylen);\n     return privkey;\n }\n \n CPubKey CKey::GetPubKey() const {\n     assert(fValid);\n+    secp256k1_pubkey pubkey;\n+    size_t clen = 65;\n     CPubKey result;\n-    int clen = 65;\n-    int ret = secp256k1_ec_pubkey_create(secp256k1_context, (unsigned char*)result.begin(), &clen, begin(), fCompressed);\n-    assert((int)result.size() == clen);\n+    int ret = secp256k1_ec_pubkey_create(secp256k1_context_sign, &pubkey, begin());\n     assert(ret);\n+    secp256k1_ec_pubkey_serialize(secp256k1_context_sign, (unsigned char*)result.begin(), &clen, &pubkey, fCompressed ? SECP256K1_EC_COMPRESSED : SECP256K1_EC_UNCOMPRESSED);\n+    assert(result.size() == clen);\n     assert(result.IsValid());\n     return result;\n }\n@@ -64,11 +170,13 @@ bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, uint32_\n     if (!fValid)\n         return false;\n     vchSig.resize(72);\n-    int nSigLen = 72;\n+    size_t nSigLen = 72;\n     unsigned char extra_entropy[32] = {0};\n     WriteLE32(extra_entropy, test_case);\n-    int ret = secp256k1_ecdsa_sign(secp256k1_context, hash.begin(), (unsigned char*)&vchSig[0], &nSigLen, begin(), secp256k1_nonce_function_rfc6979, test_case ? extra_entropy : NULL);\n+    secp256k1_ecdsa_signature sig;\n+    int ret = secp256k1_ecdsa_sign(secp256k1_context_sign, &sig, hash.begin(), begin(), secp256k1_nonce_function_rfc6979, test_case ? extra_entropy : NULL);\n     assert(ret);\n+    secp256k1_ecdsa_signature_serialize_der(secp256k1_context_sign, (unsigned char*)&vchSig[0], &nSigLen, &sig);\n     vchSig.resize(nSigLen);\n     return true;\n }\n@@ -92,15 +200,18 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n         return false;\n     vchSig.resize(65);\n     int rec = -1;\n-    int ret = secp256k1_ecdsa_sign_compact(secp256k1_context, hash.begin(), &vchSig[1], begin(), secp256k1_nonce_function_rfc6979, NULL, &rec);\n+    secp256k1_ecdsa_recoverable_signature sig;\n+    int ret = secp256k1_ecdsa_sign_recoverable(secp256k1_context_sign, &sig, hash.begin(), begin(), secp256k1_nonce_function_rfc6979, NULL);\n+    assert(ret);\n+    secp256k1_ecdsa_recoverable_signature_serialize_compact(secp256k1_context_sign, (unsigned char*)&vchSig[1], &rec, &sig);\n     assert(ret);\n     assert(rec != -1);\n     vchSig[0] = 27 + rec + (fCompressed ? 4 : 0);\n     return true;\n }\n \n bool CKey::Load(CPrivKey &privkey, CPubKey &vchPubKey, bool fSkipCheck=false) {\n-    if (!secp256k1_ec_privkey_import(secp256k1_context, (unsigned char*)begin(), &privkey[0], privkey.size()))\n+    if (!ec_privkey_import_der(secp256k1_context_sign, (unsigned char*)begin(), &privkey[0], privkey.size()))\n         return false;\n     fCompressed = vchPubKey.IsCompressed();\n     fValid = true;\n@@ -126,7 +237,7 @@ bool CKey::Derive(CKey& keyChild, ChainCode &ccChild, unsigned int nChild, const\n     }\n     memcpy(ccChild.begin(), out+32, 32);\n     memcpy((unsigned char*)keyChild.begin(), begin(), 32);\n-    bool ret = secp256k1_ec_privkey_tweak_add(secp256k1_context, (unsigned char*)keyChild.begin(), out);\n+    bool ret = secp256k1_ec_privkey_tweak_add(secp256k1_context_sign, (unsigned char*)keyChild.begin(), out);\n     UnlockObject(out);\n     keyChild.fCompressed = true;\n     keyChild.fValid = ret;\n@@ -184,20 +295,16 @@ void CExtKey::Decode(const unsigned char code[74]) {\n }\n \n bool ECC_InitSanityCheck() {\n-    if (!CECKey::SanityCheck()) {\n-        return false;\n-    }\n     CKey key;\n     key.MakeNewKey(true);\n     CPubKey pubkey = key.GetPubKey();\n     return key.VerifyPubKey(pubkey);\n }\n \n-\n void ECC_Start() {\n-    assert(secp256k1_context == NULL);\n+    assert(secp256k1_context_sign == NULL);\n \n-    secp256k1_context_t *ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN);\n+    secp256k1_context *ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN);\n     assert(ctx != NULL);\n \n     {\n@@ -210,12 +317,12 @@ void ECC_Start() {\n         UnlockObject(seed);\n     }\n \n-    secp256k1_context = ctx;\n+    secp256k1_context_sign = ctx;\n }\n \n void ECC_Stop() {\n-    secp256k1_context_t *ctx = secp256k1_context;\n-    secp256k1_context = NULL;\n+    secp256k1_context *ctx = secp256k1_context_sign;\n+    secp256k1_context_sign = NULL;\n \n     if (ctx) {\n         secp256k1_context_destroy(ctx);"
      },
      {
        "sha": "e0b7b7a48a31f409d2531198d96574f35c88c24d",
        "filename": "src/secp256k1/.gitignore",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/.gitignore?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -1,9 +1,12 @@\n bench_inv\n+bench_ecdh\n bench_sign\n bench_verify\n+bench_schnorr_verify\n bench_recover\n bench_internal\n tests\n+gen_context\n *.exe\n *.so\n *.a\n@@ -28,6 +31,7 @@ build-aux/\n *~\n src/libsecp256k1-config.h\n src/libsecp256k1-config.h.in\n+src/ecmult_static_context.h\n m4/libtool.m4\n m4/ltoptions.m4\n m4/ltsugar.m4"
      },
      {
        "sha": "4e1e73c39f57b075519dce1b7d894efa20cd11d2",
        "filename": "src/secp256k1/.travis.yml",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/.travis.yml?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -8,20 +8,24 @@ compiler:\n   - gcc\n env:\n   global:\n-    - FIELD=auto  BIGNUM=auto  SCALAR=auto  ENDOMORPHISM=no  ASM=no  BUILD=check  EXTRAFLAGS= HOST=\n+    - FIELD=auto  BIGNUM=auto  SCALAR=auto  ENDOMORPHISM=no  STATICPRECOMPUTATION=yes  ASM=no  BUILD=check  EXTRAFLAGS=  HOST=  ECDH=no  schnorr=no  RECOVERY=no\n   matrix:\n-    - SCALAR=32bit\n+    - SCALAR=32bit    RECOVERY=yes\n+    - SCALAR=32bit    FIELD=32bit       ECDH=yes\n     - SCALAR=64bit\n-    - FIELD=64bit\n+    - FIELD=64bit     RECOVERY=yes\n     - FIELD=64bit     ENDOMORPHISM=yes\n+    - FIELD=64bit     ENDOMORPHISM=yes  ECDH=yes\n     - FIELD=64bit                       ASM=x86_64\n     - FIELD=64bit     ENDOMORPHISM=yes  ASM=x86_64\n-    - FIELD=32bit\n+    - FIELD=32bit     SCHNORR=yes\n     - FIELD=32bit     ENDOMORPHISM=yes\n     - BIGNUM=no\n-    - BIGNUM=no       ENDOMORPHISM=yes\n+    - BIGNUM=no       ENDOMORPHISM=yes SCHNORR=yes  RECOVERY=yes\n+    - BIGNUM=no       STATICPRECOMPUTATION=no\n     - BUILD=distcheck\n-    - EXTRAFLAGS=CFLAGS=-DDETERMINISTIC\n+    - EXTRAFLAGS=CPPFLAGS=-DDETERMINISTIC\n+    - EXTRAFLAGS=CFLAGS=-O0\n matrix:\n   fast_finish: true\n   include:\n@@ -55,5 +59,5 @@ before_script: ./autogen.sh\n script:\n  - if [ -n \"$HOST\" ]; then export USE_HOST=\"--host=$HOST\"; fi\n  - if [ \"x$HOST\" = \"xi686-linux-gnu\" ]; then export CC=\"$CC -m32\"; fi\n- - ./configure --enable-endomorphism=$ENDOMORPHISM --with-field=$FIELD --with-bignum=$BIGNUM --with-scalar=$SCALAR $EXTRAFLAGS $USE_HOST && make -j2 $BUILD\n+ - ./configure --enable-endomorphism=$ENDOMORPHISM --with-field=$FIELD --with-bignum=$BIGNUM --with-scalar=$SCALAR --enable-ecmult-static-precomputation=$STATICPRECOMPUTATION --enable-module-ecdh=$ECDH --enable-module-schnorr=$SCHNORR --enable-module-recovery=$RECOVERY $EXTRAFLAGS $USE_HOST && make -j2 $BUILD\n os: linux"
      },
      {
        "sha": "f4121f1705fad57aa72100abf2e3bc1d9de2edcb",
        "filename": "src/secp256k1/Makefile.am",
        "status": "modified",
        "additions": 44,
        "deletions": 10,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/Makefile.am?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -19,6 +19,8 @@ noinst_HEADERS += src/eckey.h\n noinst_HEADERS += src/eckey_impl.h\n noinst_HEADERS += src/ecmult.h\n noinst_HEADERS += src/ecmult_impl.h\n+noinst_HEADERS += src/ecmult_const.h\n+noinst_HEADERS += src/ecmult_const_impl.h\n noinst_HEADERS += src/ecmult_gen.h\n noinst_HEADERS += src/ecmult_gen_impl.h\n noinst_HEADERS += src/num.h\n@@ -38,40 +40,72 @@ noinst_HEADERS += src/hash_impl.h\n noinst_HEADERS += src/field.h\n noinst_HEADERS += src/field_impl.h\n noinst_HEADERS += src/bench.h\n+noinst_HEADERS += contrib/lax_der_parsing.h\n+noinst_HEADERS += contrib/lax_der_parsing.c\n+noinst_HEADERS += contrib/lax_der_privatekey_parsing.h\n+noinst_HEADERS += contrib/lax_der_privatekey_parsing.c\n \n pkgconfigdir = $(libdir)/pkgconfig\n pkgconfig_DATA = libsecp256k1.pc\n \n libsecp256k1_la_SOURCES = src/secp256k1.c\n-libsecp256k1_la_CPPFLAGS = -I$(top_srcdir)/include $(SECP_INCLUDES)\n+libsecp256k1_la_CPPFLAGS = -I$(top_srcdir)/include -I$(top_srcdir)/src $(SECP_INCLUDES)\n libsecp256k1_la_LIBADD = $(SECP_LIBS)\n \n \n noinst_PROGRAMS =\n if USE_BENCHMARK\n-noinst_PROGRAMS += bench_verify bench_recover bench_sign bench_internal\n+noinst_PROGRAMS += bench_verify bench_sign bench_internal\n bench_verify_SOURCES = src/bench_verify.c\n bench_verify_LDADD = libsecp256k1.la $(SECP_LIBS)\n-bench_verify_LDFLAGS = -static\n-bench_recover_SOURCES = src/bench_recover.c\n-bench_recover_LDADD = libsecp256k1.la $(SECP_LIBS)\n-bench_recover_LDFLAGS = -static\n bench_sign_SOURCES = src/bench_sign.c\n bench_sign_LDADD = libsecp256k1.la $(SECP_LIBS)\n-bench_sign_LDFLAGS = -static\n bench_internal_SOURCES = src/bench_internal.c\n bench_internal_LDADD = $(SECP_LIBS)\n-bench_internal_LDFLAGS = -static\n bench_internal_CPPFLAGS = $(SECP_INCLUDES)\n endif\n \n if USE_TESTS\n noinst_PROGRAMS += tests\n tests_SOURCES = src/tests.c\n-tests_CPPFLAGS = -DVERIFY $(SECP_INCLUDES) $(SECP_TEST_INCLUDES)\n+tests_CPPFLAGS = -DVERIFY -I$(top_srcdir)/src -I$(top_srcdir)/include $(SECP_INCLUDES) $(SECP_TEST_INCLUDES)\n tests_LDADD = $(SECP_LIBS) $(SECP_TEST_LIBS)\n tests_LDFLAGS = -static\n TESTS = tests\n endif\n \n-EXTRA_DIST = autogen.sh\n+if USE_ECMULT_STATIC_PRECOMPUTATION\n+CPPFLAGS_FOR_BUILD +=-I$(top_srcdir)/\n+CFLAGS_FOR_BUILD += -Wall -Wextra -Wno-unused-function\n+\n+gen_context_OBJECTS = gen_context.o\n+gen_context_BIN = gen_context$(BUILD_EXEEXT)\n+gen_%.o: src/gen_%.c\n+\t$(CC_FOR_BUILD) $(CPPFLAGS_FOR_BUILD) $(CFLAGS_FOR_BUILD) -c $< -o $@\n+\n+$(gen_context_BIN): $(gen_context_OBJECTS)\n+\t$(CC_FOR_BUILD) $^ -o $@\n+\n+$(libsecp256k1_la_OBJECTS): src/ecmult_static_context.h\n+$(tests_OBJECTS): src/ecmult_static_context.h\n+$(bench_internal_OBJECTS): src/ecmult_static_context.h\n+\n+src/ecmult_static_context.h: $(gen_context_BIN)\n+\t./$(gen_context_BIN)\n+\n+CLEANFILES = $(gen_context_BIN) src/ecmult_static_context.h\n+endif\n+\n+EXTRA_DIST = autogen.sh src/gen_context.c src/basic-config.h\n+\n+if ENABLE_MODULE_ECDH\n+include src/modules/ecdh/Makefile.am.include\n+endif\n+\n+if ENABLE_MODULE_SCHNORR\n+include src/modules/schnorr/Makefile.am.include\n+endif\n+\n+if ENABLE_MODULE_RECOVERY\n+include src/modules/recovery/Makefile.am.include\n+endif"
      },
      {
        "sha": "77fd346a79a6faea6e1c40e34465bb6a5b7f5895",
        "filename": "src/secp256k1/build-aux/m4/ax_prog_cc_for_build.m4",
        "status": "added",
        "additions": 125,
        "deletions": 0,
        "changes": 125,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/build-aux/m4/ax_prog_cc_for_build.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/build-aux/m4/ax_prog_cc_for_build.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/build-aux/m4/ax_prog_cc_for_build.m4?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -0,0 +1,125 @@\n+# ===========================================================================\n+#   http://www.gnu.org/software/autoconf-archive/ax_prog_cc_for_build.html\n+# ===========================================================================\n+#\n+# SYNOPSIS\n+#\n+#   AX_PROG_CC_FOR_BUILD\n+#\n+# DESCRIPTION\n+#\n+#   This macro searches for a C compiler that generates native executables,\n+#   that is a C compiler that surely is not a cross-compiler. This can be\n+#   useful if you have to generate source code at compile-time like for\n+#   example GCC does.\n+#\n+#   The macro sets the CC_FOR_BUILD and CPP_FOR_BUILD macros to anything\n+#   needed to compile or link (CC_FOR_BUILD) and preprocess (CPP_FOR_BUILD).\n+#   The value of these variables can be overridden by the user by specifying\n+#   a compiler with an environment variable (like you do for standard CC).\n+#\n+#   It also sets BUILD_EXEEXT and BUILD_OBJEXT to the executable and object\n+#   file extensions for the build platform, and GCC_FOR_BUILD to `yes' if\n+#   the compiler we found is GCC. All these variables but GCC_FOR_BUILD are\n+#   substituted in the Makefile.\n+#\n+# LICENSE\n+#\n+#   Copyright (c) 2008 Paolo Bonzini <bonzini@gnu.org>\n+#\n+#   Copying and distribution of this file, with or without modification, are\n+#   permitted in any medium without royalty provided the copyright notice\n+#   and this notice are preserved. This file is offered as-is, without any\n+#   warranty.\n+\n+#serial 8\n+\n+AU_ALIAS([AC_PROG_CC_FOR_BUILD], [AX_PROG_CC_FOR_BUILD])\n+AC_DEFUN([AX_PROG_CC_FOR_BUILD], [dnl\n+AC_REQUIRE([AC_PROG_CC])dnl\n+AC_REQUIRE([AC_PROG_CPP])dnl\n+AC_REQUIRE([AC_EXEEXT])dnl\n+AC_REQUIRE([AC_CANONICAL_HOST])dnl\n+\n+dnl Use the standard macros, but make them use other variable names\n+dnl\n+pushdef([ac_cv_prog_CPP], ac_cv_build_prog_CPP)dnl\n+pushdef([ac_cv_prog_gcc], ac_cv_build_prog_gcc)dnl\n+pushdef([ac_cv_prog_cc_works], ac_cv_build_prog_cc_works)dnl\n+pushdef([ac_cv_prog_cc_cross], ac_cv_build_prog_cc_cross)dnl\n+pushdef([ac_cv_prog_cc_g], ac_cv_build_prog_cc_g)dnl\n+pushdef([ac_cv_exeext], ac_cv_build_exeext)dnl\n+pushdef([ac_cv_objext], ac_cv_build_objext)dnl\n+pushdef([ac_exeext], ac_build_exeext)dnl\n+pushdef([ac_objext], ac_build_objext)dnl\n+pushdef([CC], CC_FOR_BUILD)dnl\n+pushdef([CPP], CPP_FOR_BUILD)dnl\n+pushdef([CFLAGS], CFLAGS_FOR_BUILD)dnl\n+pushdef([CPPFLAGS], CPPFLAGS_FOR_BUILD)dnl\n+pushdef([LDFLAGS], LDFLAGS_FOR_BUILD)dnl\n+pushdef([host], build)dnl\n+pushdef([host_alias], build_alias)dnl\n+pushdef([host_cpu], build_cpu)dnl\n+pushdef([host_vendor], build_vendor)dnl\n+pushdef([host_os], build_os)dnl\n+pushdef([ac_cv_host], ac_cv_build)dnl\n+pushdef([ac_cv_host_alias], ac_cv_build_alias)dnl\n+pushdef([ac_cv_host_cpu], ac_cv_build_cpu)dnl\n+pushdef([ac_cv_host_vendor], ac_cv_build_vendor)dnl\n+pushdef([ac_cv_host_os], ac_cv_build_os)dnl\n+pushdef([ac_cpp], ac_build_cpp)dnl\n+pushdef([ac_compile], ac_build_compile)dnl\n+pushdef([ac_link], ac_build_link)dnl\n+\n+save_cross_compiling=$cross_compiling\n+save_ac_tool_prefix=$ac_tool_prefix\n+cross_compiling=no\n+ac_tool_prefix=\n+\n+AC_PROG_CC\n+AC_PROG_CPP\n+AC_EXEEXT\n+\n+ac_tool_prefix=$save_ac_tool_prefix\n+cross_compiling=$save_cross_compiling\n+\n+dnl Restore the old definitions\n+dnl\n+popdef([ac_link])dnl\n+popdef([ac_compile])dnl\n+popdef([ac_cpp])dnl\n+popdef([ac_cv_host_os])dnl\n+popdef([ac_cv_host_vendor])dnl\n+popdef([ac_cv_host_cpu])dnl\n+popdef([ac_cv_host_alias])dnl\n+popdef([ac_cv_host])dnl\n+popdef([host_os])dnl\n+popdef([host_vendor])dnl\n+popdef([host_cpu])dnl\n+popdef([host_alias])dnl\n+popdef([host])dnl\n+popdef([LDFLAGS])dnl\n+popdef([CPPFLAGS])dnl\n+popdef([CFLAGS])dnl\n+popdef([CPP])dnl\n+popdef([CC])dnl\n+popdef([ac_objext])dnl\n+popdef([ac_exeext])dnl\n+popdef([ac_cv_objext])dnl\n+popdef([ac_cv_exeext])dnl\n+popdef([ac_cv_prog_cc_g])dnl\n+popdef([ac_cv_prog_cc_cross])dnl\n+popdef([ac_cv_prog_cc_works])dnl\n+popdef([ac_cv_prog_gcc])dnl\n+popdef([ac_cv_prog_CPP])dnl\n+\n+dnl Finally, set Makefile variables\n+dnl\n+BUILD_EXEEXT=$ac_build_exeext\n+BUILD_OBJEXT=$ac_build_objext\n+AC_SUBST(BUILD_EXEEXT)dnl\n+AC_SUBST(BUILD_OBJEXT)dnl\n+AC_SUBST([CFLAGS_FOR_BUILD])dnl\n+AC_SUBST([CPPFLAGS_FOR_BUILD])dnl\n+AC_SUBST([LDFLAGS_FOR_BUILD])dnl\n+])"
      },
      {
        "sha": "d41bbb648708ba06cd0285d96b66ca532348e1e8",
        "filename": "src/secp256k1/build-aux/m4/bitcoin_secp.m4",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/build-aux/m4/bitcoin_secp.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/build-aux/m4/bitcoin_secp.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/build-aux/m4/bitcoin_secp.m4?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -16,8 +16,7 @@ AC_MSG_RESULT([$has_64bit_asm])\n \n dnl\n AC_DEFUN([SECP_OPENSSL_CHECK],[\n-if test x\"$use_pkgconfig\" = x\"yes\"; then\n-    : #NOP\n+  has_libcrypto=no\n   m4_ifdef([PKG_CHECK_MODULES],[\n     PKG_CHECK_MODULES([CRYPTO], [libcrypto], [has_libcrypto=yes],[has_libcrypto=no])\n     if test x\"$has_libcrypto\" = x\"yes\"; then\n@@ -27,11 +26,16 @@ if test x\"$use_pkgconfig\" = x\"yes\"; then\n       LIBS=\"$TEMP_LIBS\"\n     fi\n   ])\n-else\n-  AC_CHECK_HEADER(openssl/crypto.h,[AC_CHECK_LIB(crypto, main,[has_libcrypto=yes; CRYPTO_LIBS=-lcrypto; AC_DEFINE(HAVE_LIBCRYPTO,1,[Define this symbol if libcrypto is installed])]\n-)])\n-  LIBS=\n-fi\n+  if test x$has_libcrypto = xno; then\n+    AC_CHECK_HEADER(openssl/crypto.h,[\n+      AC_CHECK_LIB(crypto, main,[\n+        has_libcrypto=yes\n+        CRYPTO_LIBS=-lcrypto\n+        AC_DEFINE(HAVE_LIBCRYPTO,1,[Define this symbol if libcrypto is installed])\n+      ])\n+    ])\n+    LIBS=\n+  fi\n if test x\"$has_libcrypto\" = x\"yes\" && test x\"$has_openssl_ec\" = x; then\n   AC_MSG_CHECKING(for EC functions in libcrypto)\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM([["
      },
      {
        "sha": "786d8dcfb99ece01e0e059429aa3591736054a24",
        "filename": "src/secp256k1/configure.ac",
        "status": "modified",
        "additions": 55,
        "deletions": 9,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/configure.ac?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -17,25 +17,19 @@ PKG_PROG_PKG_CONFIG\n AC_PATH_TOOL(AR, ar)\n AC_PATH_TOOL(RANLIB, ranlib)\n AC_PATH_TOOL(STRIP, strip)\n+AX_PROG_CC_FOR_BUILD\n \n if test \"x$CFLAGS\" = \"x\"; then\n   CFLAGS=\"-O3 -g\"\n fi\n \n+AM_PROG_CC_C_O\n+\n AC_PROG_CC_C89\n if test x\"$ac_cv_prog_cc_c89\" = x\"no\"; then\n   AC_MSG_ERROR([c89 compiler support required])\n fi\n \n-case $host in\n-  *mingw*)\n-     use_pkgconfig=no\n-     ;;\n-   *)\n-     use_pkgconfig=yes\n-     ;;\n-esac\n-\n case $host_os in\n   *darwin*)\n      if  test x$cross_compiling != xyes; then\n@@ -80,6 +74,14 @@ AC_COMPILE_IFELSE([AC_LANG_SOURCE([[char foo;]])],\n       CFLAGS=\"$saved_CFLAGS\"\n     ])\n \n+saved_CFLAGS=\"$CFLAGS\"\n+CFLAGS=\"$CFLAGS -fvisibility=hidden\"\n+AC_MSG_CHECKING([if ${CC} supports -fvisibility=hidden])\n+AC_COMPILE_IFELSE([AC_LANG_SOURCE([[char foo;]])],\n+    [ AC_MSG_RESULT([yes]) ],\n+    [ AC_MSG_RESULT([no])\n+      CFLAGS=\"$saved_CFLAGS\"\n+    ])\n \n AC_ARG_ENABLE(benchmark,\n     AS_HELP_STRING([--enable-benchmark],[compile benchmark (default is no)]),\n@@ -95,6 +97,26 @@ AC_ARG_ENABLE(endomorphism,\n     AS_HELP_STRING([--enable-endomorphism],[enable endomorphism (default is no)]),\n     [use_endomorphism=$enableval],\n     [use_endomorphism=no])\n+    \n+AC_ARG_ENABLE(ecmult_static_precomputation,\n+    AS_HELP_STRING([--enable-ecmult-static-precomputation],[enable precomputed ecmult table for signing (default is yes)]),\n+    [use_ecmult_static_precomputation=$enableval],\n+    [use_ecmult_static_precomputation=yes])\n+\n+AC_ARG_ENABLE(module_ecdh,\n+    AS_HELP_STRING([--enable-module-ecdh],[enable ECDH shared secret computation (default is no)]),\n+    [enable_module_ecdh=$enableval],\n+    [enable_module_ecdh=no])\n+\n+AC_ARG_ENABLE(module_schnorr,\n+    AS_HELP_STRING([--enable-module-schnorr],[enable Schnorr signature module (default is no)]),\n+    [enable_module_schnorr=$enableval],\n+    [enable_module_schnorr=no])\n+\n+AC_ARG_ENABLE(module_recovery,\n+    AS_HELP_STRING([--enable-module-recovery],[enable ECDSA pubkey recovery module (default is no)]),\n+    [enable_module_recovery=$enableval],\n+    [enable_module_recovery=no])\n \n AC_ARG_WITH([field], [AS_HELP_STRING([--with-field=64bit|32bit|auto],\n [Specify Field Implementation. Default is auto])],[req_field=$withval], [req_field=auto])\n@@ -305,13 +327,33 @@ if test x\"$use_endomorphism\" = x\"yes\"; then\n   AC_DEFINE(USE_ENDOMORPHISM, 1, [Define this symbol to use endomorphism optimization])\n fi\n \n+if test x\"$use_ecmult_static_precomputation\" = x\"yes\"; then\n+  AC_DEFINE(USE_ECMULT_STATIC_PRECOMPUTATION, 1, [Define this symbol to use a statically generated ecmult table])\n+fi\n+\n+if test x\"$enable_module_ecdh\" = x\"yes\"; then\n+  AC_DEFINE(ENABLE_MODULE_ECDH, 1, [Define this symbol to enable the ECDH module])\n+fi\n+\n+if test x\"$enable_module_schnorr\" = x\"yes\"; then\n+  AC_DEFINE(ENABLE_MODULE_SCHNORR, 1, [Define this symbol to enable the Schnorr signature module])\n+fi\n+\n+if test x\"$enable_module_recovery\" = x\"yes\"; then\n+  AC_DEFINE(ENABLE_MODULE_RECOVERY, 1, [Define this symbol to enable the ECDSA pubkey recovery module])\n+fi\n+\n AC_C_BIGENDIAN()\n \n AC_MSG_NOTICE([Using assembly optimizations: $set_asm])\n AC_MSG_NOTICE([Using field implementation: $set_field])\n AC_MSG_NOTICE([Using bignum implementation: $set_bignum])\n AC_MSG_NOTICE([Using scalar implementation: $set_scalar])\n AC_MSG_NOTICE([Using endomorphism optimizations: $use_endomorphism])\n+AC_MSG_NOTICE([Building ECDH module: $enable_module_ecdh])\n+\n+AC_MSG_NOTICE([Building Schnorr signatures module: $enable_module_schnorr])\n+AC_MSG_NOTICE([Building ECDSA pubkey recovery module: $enable_module_recovery])\n \n AC_CONFIG_HEADERS([src/libsecp256k1-config.h])\n AC_CONFIG_FILES([Makefile libsecp256k1.pc])\n@@ -321,6 +363,10 @@ AC_SUBST(SECP_TEST_LIBS)\n AC_SUBST(SECP_TEST_INCLUDES)\n AM_CONDITIONAL([USE_TESTS], [test x\"$use_tests\" != x\"no\"])\n AM_CONDITIONAL([USE_BENCHMARK], [test x\"$use_benchmark\" = x\"yes\"])\n+AM_CONDITIONAL([USE_ECMULT_STATIC_PRECOMPUTATION], [test x\"$use_ecmult_static_precomputation\" = x\"yes\"])\n+AM_CONDITIONAL([ENABLE_MODULE_ECDH], [test x\"$enable_module_ecdh\" = x\"yes\"])\n+AM_CONDITIONAL([ENABLE_MODULE_SCHNORR], [test x\"$enable_module_schnorr\" = x\"yes\"])\n+AM_CONDITIONAL([ENABLE_MODULE_RECOVERY], [test x\"$enable_module_recovery\" = x\"yes\"])\n \n dnl make sure nothing new is exported so that we don't break the cache\n PKGCONFIG_PATH_TEMP=\"$PKG_CONFIG_PATH\""
      },
      {
        "sha": "5b141a99481c71f18bffe38e71a763443b14ef4e",
        "filename": "src/secp256k1/contrib/lax_der_parsing.c",
        "status": "added",
        "additions": 150,
        "deletions": 0,
        "changes": 150,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/contrib/lax_der_parsing.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/contrib/lax_der_parsing.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/contrib/lax_der_parsing.c?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -0,0 +1,150 @@\n+/**********************************************************************\n+ * Copyright (c) 2015 Pieter Wuille                                   *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include <string.h>\n+#include <secp256k1.h>\n+\n+#include \"lax_der_parsing.h\"\n+\n+int ecdsa_signature_parse_der_lax(const secp256k1_context* ctx, secp256k1_ecdsa_signature* sig, const unsigned char *input, size_t inputlen) {\n+    size_t rpos, rlen, spos, slen;\n+    size_t pos = 0;\n+    size_t lenbyte;\n+    unsigned char tmpsig[64] = {0};\n+    int overflow = 0;\n+\n+    /* Hack to initialize sig with a correctly-parsed but invalid signature. */\n+    secp256k1_ecdsa_signature_parse_compact(ctx, sig, tmpsig);\n+\n+    /* Sequence tag byte */\n+    if (pos == inputlen || input[pos] != 0x30) {\n+        return 0;\n+    }\n+    pos++;\n+\n+    /* Sequence length bytes */\n+    if (pos == inputlen) {\n+        return 0;\n+    }\n+    lenbyte = input[pos++];\n+    if (lenbyte & 0x80) {\n+        lenbyte -= 0x80;\n+        if (pos + lenbyte > inputlen) {\n+            return 0;\n+        }\n+        pos += lenbyte;\n+    }\n+\n+    /* Integer tag byte for R */\n+    if (pos == inputlen || input[pos] != 0x02) {\n+        return 0;\n+    }\n+    pos++;\n+\n+    /* Integer length for R */\n+    if (pos == inputlen) {\n+        return 0;\n+    }\n+    lenbyte = input[pos++];\n+    if (lenbyte & 0x80) {\n+        lenbyte -= 0x80;\n+        if (pos + lenbyte > inputlen) {\n+            return 0;\n+        }\n+        while (lenbyte > 0 && input[pos] == 0) {\n+            pos++;\n+            lenbyte--;\n+        }\n+        if (lenbyte >= sizeof(size_t)) {\n+            return 0;\n+        }\n+        rlen = 0;\n+        while (lenbyte > 0) {\n+            rlen = (rlen << 8) + input[pos];\n+            pos++;\n+            lenbyte--;\n+        }\n+    } else {\n+        rlen = lenbyte;\n+    }\n+    if (rlen > inputlen - pos) {\n+        return 0;\n+    }\n+    rpos = pos;\n+    pos += rlen;\n+\n+    /* Integer tag byte for S */\n+    if (pos == inputlen || input[pos] != 0x02) {\n+        return 0;\n+    }\n+    pos++;\n+\n+    /* Integer length for S */\n+    if (pos == inputlen) {\n+        return 0;\n+    }\n+    lenbyte = input[pos++];\n+    if (lenbyte & 0x80) {\n+        lenbyte -= 0x80;\n+        if (pos + lenbyte > inputlen) {\n+            return 0;\n+        }\n+        while (lenbyte > 0 && input[pos] == 0) {\n+            pos++;\n+            lenbyte--;\n+        }\n+        if (lenbyte >= sizeof(size_t)) {\n+            return 0;\n+        }\n+        slen = 0;\n+        while (lenbyte > 0) {\n+            slen = (slen << 8) + input[pos];\n+            pos++;\n+            lenbyte--;\n+        }\n+    } else {\n+        slen = lenbyte;\n+    }\n+    if (slen > inputlen - pos) {\n+        return 0;\n+    }\n+    spos = pos;\n+    pos += slen;\n+\n+    /* Ignore leading zeroes in R */\n+    while (rlen > 0 && input[rpos] == 0) {\n+        rlen--;\n+        rpos++;\n+    }\n+    /* Copy R value */\n+    if (rlen > 32) {\n+        overflow = 1;\n+    } else {\n+        memcpy(tmpsig + 32 - rlen, input + rpos, rlen);\n+    }\n+\n+    /* Ignore leading zeroes in S */\n+    while (slen > 0 && input[spos] == 0) {\n+        slen--;\n+        spos++;\n+    }\n+    /* Copy S value */\n+    if (slen > 32) {\n+        overflow = 1;\n+    } else {\n+        memcpy(tmpsig + 64 - slen, input + spos, slen);\n+    }\n+\n+    if (!overflow) {\n+        overflow = !secp256k1_ecdsa_signature_parse_compact(ctx, sig, tmpsig);\n+    }\n+    if (overflow) {\n+        memset(tmpsig, 0, 64);\n+        secp256k1_ecdsa_signature_parse_compact(ctx, sig, tmpsig);\n+    }\n+    return 1;\n+}\n+"
      },
      {
        "sha": "6d27871a7ccda3dfc1d34e051a345205522a172f",
        "filename": "src/secp256k1/contrib/lax_der_parsing.h",
        "status": "added",
        "additions": 91,
        "deletions": 0,
        "changes": 91,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/contrib/lax_der_parsing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/contrib/lax_der_parsing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/contrib/lax_der_parsing.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -0,0 +1,91 @@\n+/**********************************************************************\n+ * Copyright (c) 2015 Pieter Wuille                                   *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+/****\n+ * Please do not link this file directly. It is not part of the libsecp256k1\n+ * project and does not promise any stability in its API, functionality or\n+ * presence. Projects which use this code should instead copy this header\n+ * and its accompanying .c file directly into their codebase.\n+ ****/\n+\n+/* This file defines a function that parses DER with various errors and\n+ * violations. This is not a part of the library itself, because the allowed\n+ * violations are chosen arbitrarily and do not follow or establish any\n+ * standard.\n+ *\n+ * In many places it matters that different implementations do not only accept\n+ * the same set of valid signatures, but also reject the same set of signatures.\n+ * The only means to accomplish that is by strictly obeying a standard, and not\n+ * accepting anything else.\n+ *\n+ * Nonetheless, sometimes there is a need for compatibility with systems that\n+ * use signatures which do not strictly obey DER. The snippet below shows how\n+ * certain violations are easily supported. You may need to adapt it.\n+ *\n+ * Do not use this for new systems. Use well-defined DER or compact signatures\n+ * instead if you have the choice (see secp256k1_ecdsa_signature_parse_der and\n+ * secp256k1_ecdsa_signature_parse_compact).\n+ *\n+ * The supported violations are:\n+ * - All numbers are parsed as nonnegative integers, even though X.609-0207\n+ *   section 8.3.3 specifies that integers are always encoded as two's\n+ *   complement.\n+ * - Integers can have length 0, even though section 8.3.1 says they can't.\n+ * - Integers with overly long padding are accepted, violation section\n+ *   8.3.2.\n+ * - 127-byte long length descriptors are accepted, even though section\n+ *   8.1.3.5.c says that they are not.\n+ * - Trailing garbage data inside or after the signature is ignored.\n+ * - The length descriptor of the sequence is ignored.\n+ *\n+ * Compared to for example OpenSSL, many violations are NOT supported:\n+ * - Using overly long tag descriptors for the sequence or integers inside,\n+ *   violating section 8.1.2.2.\n+ * - Encoding primitive integers as constructed values, violating section\n+ *   8.3.1.\n+ */\n+\n+#ifndef _SECP256K1_CONTRIB_LAX_DER_PARSING_H_\n+#define _SECP256K1_CONTRIB_LAX_DER_PARSING_H_\n+\n+#include <secp256k1.h>\n+\n+# ifdef __cplusplus\n+extern \"C\" {\n+# endif\n+\n+/** Parse a signature in \"lax DER\" format\n+ *\n+ *  Returns: 1 when the signature could be parsed, 0 otherwise.\n+ *  Args: ctx:      a secp256k1 context object\n+ *  Out:  sig:      a pointer to a signature object\n+ *  In:   input:    a pointer to the signature to be parsed\n+ *        inputlen: the length of the array pointed to be input\n+ *\n+ *  This function will accept any valid DER encoded signature, even if the\n+ *  encoded numbers are out of range. In addition, it will accept signatures\n+ *  which violate the DER spec in various ways. Its purpose is to allow\n+ *  validation of the Bitcoin blockchain, which includes non-DER signatures\n+ *  from before the network rules were updated to enforce DER. Note that\n+ *  the set of supported violations is a strict subset of what OpenSSL will\n+ *  accept.\n+ *\n+ *  After the call, sig will always be initialized. If parsing failed or the\n+ *  encoded numbers are out of range, signature validation with it is\n+ *  guaranteed to fail for every message and public key.\n+ */\n+int ecdsa_signature_parse_der_lax(\n+    const secp256k1_context* ctx,\n+    secp256k1_ecdsa_signature* sig,\n+    const unsigned char *input,\n+    size_t inputlen\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+#endif"
      },
      {
        "sha": "c2e63b4b8d7b379543dcee8ba9b0e4bdc957dc0a",
        "filename": "src/secp256k1/contrib/lax_der_privatekey_parsing.c",
        "status": "added",
        "additions": 113,
        "deletions": 0,
        "changes": 113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/contrib/lax_der_privatekey_parsing.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/contrib/lax_der_privatekey_parsing.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/contrib/lax_der_privatekey_parsing.c?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -0,0 +1,113 @@\n+/**********************************************************************\n+ * Copyright (c) 2014, 2015 Pieter Wuille                             *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include <string.h>\n+#include <secp256k1.h>\n+\n+#include \"lax_der_privatekey_parsing.h\"\n+\n+int ec_privkey_import_der(const secp256k1_context* ctx, unsigned char *out32, const unsigned char *privkey, size_t privkeylen) {\n+    const unsigned char *end = privkey + privkeylen;\n+    int lenb = 0;\n+    int len = 0;\n+    memset(out32, 0, 32);\n+    /* sequence header */\n+    if (end < privkey+1 || *privkey != 0x30) {\n+        return 0;\n+    }\n+    privkey++;\n+    /* sequence length constructor */\n+    if (end < privkey+1 || !(*privkey & 0x80)) {\n+        return 0;\n+    }\n+    lenb = *privkey & ~0x80; privkey++;\n+    if (lenb < 1 || lenb > 2) {\n+        return 0;\n+    }\n+    if (end < privkey+lenb) {\n+        return 0;\n+    }\n+    /* sequence length */\n+    len = privkey[lenb-1] | (lenb > 1 ? privkey[lenb-2] << 8 : 0);\n+    privkey += lenb;\n+    if (end < privkey+len) {\n+        return 0;\n+    }\n+    /* sequence element 0: version number (=1) */\n+    if (end < privkey+3 || privkey[0] != 0x02 || privkey[1] != 0x01 || privkey[2] != 0x01) {\n+        return 0;\n+    }\n+    privkey += 3;\n+    /* sequence element 1: octet string, up to 32 bytes */\n+    if (end < privkey+2 || privkey[0] != 0x04 || privkey[1] > 0x20 || end < privkey+2+privkey[1]) {\n+        return 0;\n+    }\n+    memcpy(out32 + 32 - privkey[1], privkey + 2, privkey[1]);\n+    if (!secp256k1_ec_seckey_verify(ctx, out32)) {\n+        memset(out32, 0, 32);\n+        return 0;\n+    }\n+    return 1;\n+}\n+\n+int ec_privkey_export_der(const secp256k1_context *ctx, unsigned char *privkey, size_t *privkeylen, const unsigned char *key32, int compressed) {\n+    secp256k1_pubkey pubkey;\n+    size_t pubkeylen = 0;\n+    if (!secp256k1_ec_pubkey_create(ctx, &pubkey, key32)) {\n+        *privkeylen = 0;\n+        return 0;\n+    }\n+    if (compressed) {\n+        static const unsigned char begin[] = {\n+            0x30,0x81,0xD3,0x02,0x01,0x01,0x04,0x20\n+        };\n+        static const unsigned char middle[] = {\n+            0xA0,0x81,0x85,0x30,0x81,0x82,0x02,0x01,0x01,0x30,0x2C,0x06,0x07,0x2A,0x86,0x48,\n+            0xCE,0x3D,0x01,0x01,0x02,0x21,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n+            0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n+            0xFF,0xFF,0xFE,0xFF,0xFF,0xFC,0x2F,0x30,0x06,0x04,0x01,0x00,0x04,0x01,0x07,0x04,\n+            0x21,0x02,0x79,0xBE,0x66,0x7E,0xF9,0xDC,0xBB,0xAC,0x55,0xA0,0x62,0x95,0xCE,0x87,\n+            0x0B,0x07,0x02,0x9B,0xFC,0xDB,0x2D,0xCE,0x28,0xD9,0x59,0xF2,0x81,0x5B,0x16,0xF8,\n+            0x17,0x98,0x02,0x21,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n+            0xFF,0xFF,0xFF,0xFF,0xFE,0xBA,0xAE,0xDC,0xE6,0xAF,0x48,0xA0,0x3B,0xBF,0xD2,0x5E,\n+            0x8C,0xD0,0x36,0x41,0x41,0x02,0x01,0x01,0xA1,0x24,0x03,0x22,0x00\n+        };\n+        unsigned char *ptr = privkey;\n+        memcpy(ptr, begin, sizeof(begin)); ptr += sizeof(begin);\n+        memcpy(ptr, key32, 32); ptr += 32;\n+        memcpy(ptr, middle, sizeof(middle)); ptr += sizeof(middle);\n+        pubkeylen = 33;\n+        secp256k1_ec_pubkey_serialize(ctx, ptr, &pubkeylen, &pubkey, SECP256K1_EC_COMPRESSED);\n+        ptr += pubkeylen;\n+        *privkeylen = ptr - privkey;\n+    } else {\n+        static const unsigned char begin[] = {\n+            0x30,0x82,0x01,0x13,0x02,0x01,0x01,0x04,0x20\n+        };\n+        static const unsigned char middle[] = {\n+            0xA0,0x81,0xA5,0x30,0x81,0xA2,0x02,0x01,0x01,0x30,0x2C,0x06,0x07,0x2A,0x86,0x48,\n+            0xCE,0x3D,0x01,0x01,0x02,0x21,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n+            0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n+            0xFF,0xFF,0xFE,0xFF,0xFF,0xFC,0x2F,0x30,0x06,0x04,0x01,0x00,0x04,0x01,0x07,0x04,\n+            0x41,0x04,0x79,0xBE,0x66,0x7E,0xF9,0xDC,0xBB,0xAC,0x55,0xA0,0x62,0x95,0xCE,0x87,\n+            0x0B,0x07,0x02,0x9B,0xFC,0xDB,0x2D,0xCE,0x28,0xD9,0x59,0xF2,0x81,0x5B,0x16,0xF8,\n+            0x17,0x98,0x48,0x3A,0xDA,0x77,0x26,0xA3,0xC4,0x65,0x5D,0xA4,0xFB,0xFC,0x0E,0x11,\n+            0x08,0xA8,0xFD,0x17,0xB4,0x48,0xA6,0x85,0x54,0x19,0x9C,0x47,0xD0,0x8F,0xFB,0x10,\n+            0xD4,0xB8,0x02,0x21,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n+            0xFF,0xFF,0xFF,0xFF,0xFE,0xBA,0xAE,0xDC,0xE6,0xAF,0x48,0xA0,0x3B,0xBF,0xD2,0x5E,\n+            0x8C,0xD0,0x36,0x41,0x41,0x02,0x01,0x01,0xA1,0x44,0x03,0x42,0x00\n+        };\n+        unsigned char *ptr = privkey;\n+        memcpy(ptr, begin, sizeof(begin)); ptr += sizeof(begin);\n+        memcpy(ptr, key32, 32); ptr += 32;\n+        memcpy(ptr, middle, sizeof(middle)); ptr += sizeof(middle);\n+        pubkeylen = 65;\n+        secp256k1_ec_pubkey_serialize(ctx, ptr, &pubkeylen, &pubkey, SECP256K1_EC_UNCOMPRESSED);\n+        ptr += pubkeylen;\n+        *privkeylen = ptr - privkey;\n+    }\n+    return 1;\n+}"
      },
      {
        "sha": "2fd088f8abf1393a0ca49542f262a81d8d6669ab",
        "filename": "src/secp256k1/contrib/lax_der_privatekey_parsing.h",
        "status": "added",
        "additions": 90,
        "deletions": 0,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/contrib/lax_der_privatekey_parsing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/contrib/lax_der_privatekey_parsing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/contrib/lax_der_privatekey_parsing.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -0,0 +1,90 @@\n+/**********************************************************************\n+ * Copyright (c) 2014, 2015 Pieter Wuille                             *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+/****\n+ * Please do not link this file directly. It is not part of the libsecp256k1\n+ * project and does not promise any stability in its API, functionality or\n+ * presence. Projects which use this code should instead copy this header\n+ * and its accompanying .c file directly into their codebase.\n+ ****/\n+\n+/* This file contains code snippets that parse DER private keys with\n+ * various errors and violations.  This is not a part of the library\n+ * itself, because the allowed violations are chosen arbitrarily and\n+ * do not follow or establish any standard.\n+ *\n+ * It also contains code to serialize private keys in a compatible\n+ * manner.\n+ *\n+ * These functions are meant for compatibility with applications\n+ * that require BER encoded keys. When working with secp256k1-specific\n+ * code, the simple 32-byte private keys normally used by the\n+ * library are sufficient.\n+ */\n+\n+#ifndef _SECP256K1_CONTRIB_BER_PRIVATEKEY_H_\n+#define _SECP256K1_CONTRIB_BER_PRIVATEKEY_H_\n+\n+#include <secp256k1.h>\n+\n+# ifdef __cplusplus\n+extern \"C\" {\n+# endif\n+\n+/** Export a private key in DER format.\n+ *\n+ *  Returns: 1 if the private key was valid.\n+ *  Args: ctx:        pointer to a context object, initialized for signing (cannot\n+ *                    be NULL)\n+ *  Out: privkey:     pointer to an array for storing the private key in BER.\n+ *                    Should have space for 279 bytes, and cannot be NULL.\n+ *       privkeylen:  Pointer to an int where the length of the private key in\n+ *                    privkey will be stored.\n+ *  In:  seckey:      pointer to a 32-byte secret key to export.\n+ *       compressed:  1 if the key should be exported in\n+ *                    compressed format, 0 otherwise\n+ *\n+ *  This function is purely meant for compatibility with applications that\n+ *  require BER encoded keys. When working with secp256k1-specific code, the\n+ *  simple 32-byte private keys are sufficient.\n+ *\n+ *  Note that this function does not guarantee correct DER output. It is\n+ *  guaranteed to be parsable by secp256k1_ec_privkey_import_der\n+ */\n+SECP256K1_WARN_UNUSED_RESULT int ec_privkey_export_der(\n+    const secp256k1_context* ctx,\n+    unsigned char *privkey,\n+    size_t *privkeylen,\n+    const unsigned char *seckey,\n+    int compressed\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n+\n+/** Import a private key in DER format.\n+ * Returns: 1 if a private key was extracted.\n+ * Args: ctx:        pointer to a context object (cannot be NULL).\n+ * Out:  seckey:     pointer to a 32-byte array for storing the private key.\n+ *                   (cannot be NULL).\n+ * In:   privkey:    pointer to a private key in DER format (cannot be NULL).\n+ *       privkeylen: length of the DER private key pointed to be privkey.\n+ *\n+ * This function will accept more than just strict DER, and even allow some BER\n+ * violations. The public key stored inside the DER-encoded private key is not\n+ * verified for correctness, nor are the curve parameters. Use this function\n+ * only if you know in advance it is supposed to contain a secp256k1 private\n+ * key.\n+ */\n+SECP256K1_WARN_UNUSED_RESULT int ec_privkey_import_der(\n+    const secp256k1_context* ctx,\n+    unsigned char *seckey,\n+    const unsigned char *privkey,\n+    size_t privkeylen\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+#endif"
      },
      {
        "sha": "7145dbcc54a79a52e319db1a7785672167694989",
        "filename": "src/secp256k1/include/secp256k1.h",
        "status": "modified",
        "additions": 466,
        "deletions": 230,
        "changes": 696,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/include/secp256k1.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/include/secp256k1.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/include/secp256k1.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -5,6 +5,99 @@\n extern \"C\" {\n # endif\n \n+#include <stddef.h>\n+\n+/* These rules specify the order of arguments in API calls:\n+ *\n+ * 1. Context pointers go first, followed by output arguments, combined\n+ *    output/input arguments, and finally input-only arguments.\n+ * 2. Array lengths always immediately the follow the argument whose length\n+ *    they describe, even if this violates rule 1.\n+ * 3. Within the OUT/OUTIN/IN groups, pointers to data that is typically generated\n+ *    later go first. This means: signatures, public nonces, private nonces,\n+ *    messages, public keys, secret keys, tweaks.\n+ * 4. Arguments that are not data pointers go last, from more complex to less\n+ *    complex: function pointers, algorithm names, messages, void pointers,\n+ *    counts, flags, booleans.\n+ * 5. Opaque data pointers follow the function pointer they are to be passed to.\n+ */\n+\n+/** Opaque data structure that holds context information (precomputed tables etc.).\n+ *\n+ *  The purpose of context structures is to cache large precomputed data tables\n+ *  that are expensive to construct, and also to maintain the randomization data\n+ *  for blinding.\n+ *\n+ *  Do not create a new context object for each operation, as construction is\n+ *  far slower than all other API calls (~100 times slower than an ECDSA\n+ *  verification).\n+ *\n+ *  A constructed context can safely be used from multiple threads\n+ *  simultaneously, but API call that take a non-const pointer to a context\n+ *  need exclusive access to it. In particular this is the case for\n+ *  secp256k1_context_destroy and secp256k1_context_randomize.\n+ *\n+ *  Regarding randomization, either do it once at creation time (in which case\n+ *  you do not need any locking for the other calls), or use a read-write lock.\n+ */\n+typedef struct secp256k1_context_struct secp256k1_context;\n+\n+/** Opaque data structure that holds a parsed and valid public key.\n+ *\n+ *  The exact representation of data inside is implementation defined and not\n+ *  guaranteed to be portable between different platforms or versions. It is\n+ *  however guaranteed to be 64 bytes in size, and can be safely copied/moved.\n+ *  If you need to convert to a format suitable for storage or transmission, use\n+ *  secp256k1_ec_pubkey_serialize and secp256k1_ec_pubkey_parse.\n+ *\n+ *  Furthermore, it is guaranteed that identical public keys (ignoring\n+ *  compression) will have identical representation, so they can be memcmp'ed.\n+ */\n+typedef struct {\n+    unsigned char data[64];\n+} secp256k1_pubkey;\n+\n+/** Opaque data structured that holds a parsed ECDSA signature.\n+ *\n+ *  The exact representation of data inside is implementation defined and not\n+ *  guaranteed to be portable between different platforms or versions. It is\n+ *  however guaranteed to be 64 bytes in size, and can be safely copied/moved.\n+ *  If you need to convert to a format suitable for storage or transmission, use\n+ *  the secp256k1_ecdsa_signature_serialize_* and\n+ *  secp256k1_ecdsa_signature_serialize_* functions.\n+ *\n+ *  Furthermore, it is guaranteed to identical signatures will have identical\n+ *  representation, so they can be memcmp'ed.\n+ */\n+typedef struct {\n+    unsigned char data[64];\n+} secp256k1_ecdsa_signature;\n+\n+/** A pointer to a function to deterministically generate a nonce.\n+ *\n+ * Returns: 1 if a nonce was successfully generated. 0 will cause signing to fail.\n+ * Out:     nonce32:   pointer to a 32-byte array to be filled by the function.\n+ * In:      msg32:     the 32-byte message hash being verified (will not be NULL)\n+ *          key32:     pointer to a 32-byte secret key (will not be NULL)\n+ *          algo16:    pointer to a 16-byte array describing the signature\n+ *                     algorithm (will be NULL for ECDSA for compatibility).\n+ *          data:      Arbitrary data pointer that is passed through.\n+ *          attempt:   how many iterations we have tried to find a nonce.\n+ *                     This will almost always be 0, but different attempt values\n+ *                     are required to result in a different nonce.\n+ *\n+ * Except for test cases, this function should compute some cryptographic hash of\n+ * the message, the algorithm, the key and the attempt.\n+ */\n+typedef int (*secp256k1_nonce_function)(\n+    unsigned char *nonce32,\n+    const unsigned char *msg32,\n+    const unsigned char *key32,\n+    const unsigned char *algo16,\n+    void *data,\n+    unsigned int attempt\n+);\n+\n # if !defined(SECP256K1_GNUC_PREREQ)\n #  if defined(__GNUC__)&&defined(__GNUC_MINOR__)\n #   define SECP256K1_GNUC_PREREQ(_maj,_min) \\\n@@ -26,6 +119,20 @@ extern \"C\" {\n #  define SECP256K1_INLINE inline\n # endif\n \n+#ifndef SECP256K1_API\n+# if defined(_WIN32)\n+#  ifdef SECP256K1_BUILD\n+#   define SECP256K1_API __declspec(dllexport)\n+#  else\n+#   define SECP256K1_API\n+#  endif\n+# elif defined(__GNUC__) && defined(SECP256K1_BUILD)\n+#  define SECP256K1_API __attribute__ ((visibility (\"default\")))\n+# else\n+#  define SECP256K1_API\n+# endif\n+#endif\n+\n /**Warning attributes\n   * NONNULL is not used if SECP256K1_BUILD is set to avoid the compiler optimizing out\n   * some paranoid null checks. */\n@@ -40,305 +147,434 @@ extern \"C\" {\n #  define SECP256K1_ARG_NONNULL(_x)\n # endif\n \n-/** Opaque data structure that holds context information (precomputed tables etc.).\n- *  Only functions that take a pointer to a non-const context require exclusive\n- *  access to it. Multiple functions that take a pointer to a const context may\n- *  run simultaneously.\n- */\n-typedef struct secp256k1_context_struct secp256k1_context_t;\n+/** All flags' lower 8 bits indicate what they're for. Do not use directly. */\n+#define SECP256K1_FLAGS_TYPE_MASK ((1 << 8) - 1)\n+#define SECP256K1_FLAGS_TYPE_CONTEXT (1 << 0)\n+#define SECP256K1_FLAGS_TYPE_COMPRESSION (1 << 1)\n+/** The higher bits contain the actual data. Do not use directly. */\n+#define SECP256K1_FLAGS_BIT_CONTEXT_VERIFY (1 << 8)\n+#define SECP256K1_FLAGS_BIT_CONTEXT_SIGN (1 << 9)\n+#define SECP256K1_FLAGS_BIT_COMPRESSION (1 << 8)\n \n /** Flags to pass to secp256k1_context_create. */\n-# define SECP256K1_CONTEXT_VERIFY (1 << 0)\n-# define SECP256K1_CONTEXT_SIGN   (1 << 1)\n+#define SECP256K1_CONTEXT_VERIFY (SECP256K1_FLAGS_TYPE_CONTEXT | SECP256K1_FLAGS_BIT_CONTEXT_VERIFY)\n+#define SECP256K1_CONTEXT_SIGN (SECP256K1_FLAGS_TYPE_CONTEXT | SECP256K1_FLAGS_BIT_CONTEXT_SIGN)\n+#define SECP256K1_CONTEXT_NONE (SECP256K1_FLAGS_TYPE_CONTEXT)\n+\n+/** Flag to pass to secp256k1_ec_pubkey_serialize and secp256k1_ec_privkey_export. */\n+#define SECP256K1_EC_COMPRESSED (SECP256K1_FLAGS_TYPE_COMPRESSION | SECP256K1_FLAGS_BIT_COMPRESSION)\n+#define SECP256K1_EC_UNCOMPRESSED (SECP256K1_FLAGS_TYPE_COMPRESSION)\n \n /** Create a secp256k1 context object.\n+ *\n  *  Returns: a newly created context object.\n  *  In:      flags: which parts of the context to initialize.\n  */\n-secp256k1_context_t* secp256k1_context_create(\n-  int flags\n+SECP256K1_API secp256k1_context* secp256k1_context_create(\n+    unsigned int flags\n ) SECP256K1_WARN_UNUSED_RESULT;\n \n /** Copies a secp256k1 context object.\n+ *\n  *  Returns: a newly created context object.\n- *  In:      ctx: an existing context to copy\n+ *  Args:    ctx: an existing context to copy (cannot be NULL)\n  */\n-secp256k1_context_t* secp256k1_context_clone(\n-  const secp256k1_context_t* ctx\n-) SECP256K1_WARN_UNUSED_RESULT;\n+SECP256K1_API secp256k1_context* secp256k1_context_clone(\n+    const secp256k1_context* ctx\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_WARN_UNUSED_RESULT;\n \n /** Destroy a secp256k1 context object.\n+ *\n  *  The context pointer may not be used afterwards.\n+ *  Args:   ctx: an existing context to destroy (cannot be NULL)\n+ */\n+SECP256K1_API void secp256k1_context_destroy(\n+    secp256k1_context* ctx\n+);\n+\n+/** Set a callback function to be called when an illegal argument is passed to\n+ *  an API call. It will only trigger for violations that are mentioned\n+ *  explicitly in the header.\n+ *\n+ *  The philosophy is that these shouldn't be dealt with through a\n+ *  specific return value, as calling code should not have branches to deal with\n+ *  the case that this code itself is broken.\n+ *\n+ *  On the other hand, during debug stage, one would want to be informed about\n+ *  such mistakes, and the default (crashing) may be inadvisable.\n+ *  When this callback is triggered, the API function called is guaranteed not\n+ *  to cause a crash, though its return value and output arguments are\n+ *  undefined.\n+ *\n+ *  Args: ctx:  an existing context object (cannot be NULL)\n+ *  In:   fun:  a pointer to a function to call when an illegal argument is\n+ *              passed to the API, taking a message and an opaque pointer\n+ *              (NULL restores a default handler that calls abort).\n+ *        data: the opaque pointer to pass to fun above.\n  */\n-void secp256k1_context_destroy(\n-  secp256k1_context_t* ctx\n+SECP256K1_API void secp256k1_context_set_illegal_callback(\n+    secp256k1_context* ctx,\n+    void (*fun)(const char* message, void* data),\n+    const void* data\n ) SECP256K1_ARG_NONNULL(1);\n \n+/** Set a callback function to be called when an internal consistency check\n+ *  fails. The default is crashing.\n+ *\n+ *  This can only trigger in case of a hardware failure, miscompilation,\n+ *  memory corruption, serious bug in the library, or other error would can\n+ *  otherwise result in undefined behaviour. It will not trigger due to mere\n+ *  incorrect usage of the API (see secp256k1_context_set_illegal_callback\n+ *  for that). After this callback returns, anything may happen, including\n+ *  crashing.\n+ *\n+ *  Args: ctx:  an existing context object (cannot be NULL)\n+ *  In:   fun:  a pointer to a function to call when an internal error occurs,\n+ *              taking a message and an opaque pointer (NULL restores a default\n+ *              handler that calls abort).\n+ *        data: the opaque pointer to pass to fun above.\n+ */\n+SECP256K1_API void secp256k1_context_set_error_callback(\n+    secp256k1_context* ctx,\n+    void (*fun)(const char* message, void* data),\n+    const void* data\n+) SECP256K1_ARG_NONNULL(1);\n+\n+/** Parse a variable-length public key into the pubkey object.\n+ *\n+ *  Returns: 1 if the public key was fully valid.\n+ *           0 if the public key could not be parsed or is invalid.\n+ *  Args: ctx:      a secp256k1 context object.\n+ *  Out:  pubkey:   pointer to a pubkey object. If 1 is returned, it is set to a\n+ *                  parsed version of input. If not, its value is undefined.\n+ *  In:   input:    pointer to a serialized public key\n+ *        inputlen: length of the array pointed to by input\n+ *\n+ *  This function supports parsing compressed (33 bytes, header byte 0x02 or\n+ *  0x03), uncompressed (65 bytes, header byte 0x04), or hybrid (65 bytes, header\n+ *  byte 0x06 or 0x07) format public keys.\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_ec_pubkey_parse(\n+    const secp256k1_context* ctx,\n+    secp256k1_pubkey* pubkey,\n+    const unsigned char *input,\n+    size_t inputlen\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Serialize a pubkey object into a serialized byte sequence.\n+ *\n+ *  Returns: 1 always.\n+ *  Args:   ctx:        a secp256k1 context object.\n+ *  Out:    output:     a pointer to a 65-byte (if compressed==0) or 33-byte (if\n+ *                      compressed==1) byte array to place the serialized key\n+ *                      in.\n+ *  In/Out: outputlen:  a pointer to an integer which is initially set to the\n+ *                      size of output, and is overwritten with the written\n+ *                      size.\n+ *  In:     pubkey:     a pointer to a secp256k1_pubkey containing an\n+ *                      initialized public key.\n+ *          flags:      SECP256K1_EC_COMPRESSED if serialization should be in\n+ *                      compressed format, otherwise SECP256K1_EC_UNCOMPRESSED.\n+ */\n+SECP256K1_API int secp256k1_ec_pubkey_serialize(\n+    const secp256k1_context* ctx,\n+    unsigned char *output,\n+    size_t *outputlen,\n+    const secp256k1_pubkey* pubkey,\n+    unsigned int flags\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n+\n+/** Parse an ECDSA signature in compact (64 bytes) format.\n+ *\n+ *  Returns: 1 when the signature could be parsed, 0 otherwise.\n+ *  Args: ctx:      a secp256k1 context object\n+ *  Out:  sig:      a pointer to a signature object\n+ *  In:   input64:  a pointer to the 64-byte array to parse\n+ *\n+ *  The signature must consist of a 32-byte big endian R value, followed by a\n+ *  32-byte big endian S value. If R or S fall outside of [0..order-1], the\n+ *  encoding is invalid. R and S with value 0 are allowed in the encoding.\n+ *\n+ *  After the call, sig will always be initialized. If parsing failed or R or\n+ *  S are zero, the resulting sig value is guaranteed to fail validation for any\n+ *  message and public key.\n+ */\n+SECP256K1_API int secp256k1_ecdsa_signature_parse_compact(\n+    const secp256k1_context* ctx,\n+    secp256k1_ecdsa_signature* sig,\n+    const unsigned char *input64\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Parse a DER ECDSA signature.\n+ *\n+ *  Returns: 1 when the signature could be parsed, 0 otherwise.\n+ *  Args: ctx:      a secp256k1 context object\n+ *  Out:  sig:      a pointer to a signature object\n+ *  In:   input:    a pointer to the signature to be parsed\n+ *        inputlen: the length of the array pointed to be input\n+ *\n+ *  This function will accept any valid DER encoded signature, even if the\n+ *  encoded numbers are out of range.\n+ *\n+ *  After the call, sig will always be initialized. If parsing failed or the\n+ *  encoded numbers are out of range, signature validation with it is\n+ *  guaranteed to fail for every message and public key.\n+ */\n+SECP256K1_API int secp256k1_ecdsa_signature_parse_der(\n+    const secp256k1_context* ctx,\n+    secp256k1_ecdsa_signature* sig,\n+    const unsigned char *input,\n+    size_t inputlen\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Serialize an ECDSA signature in DER format.\n+ *\n+ *  Returns: 1 if enough space was available to serialize, 0 otherwise\n+ *  Args:   ctx:       a secp256k1 context object\n+ *  Out:    output:    a pointer to an array to store the DER serialization\n+ *  In/Out: outputlen: a pointer to a length integer. Initially, this integer\n+ *                     should be set to the length of output. After the call\n+ *                     it will be set to the length of the serialization (even\n+ *                     if 0 was returned).\n+ *  In:     sig:       a pointer to an initialized signature object\n+ */\n+SECP256K1_API int secp256k1_ecdsa_signature_serialize_der(\n+    const secp256k1_context* ctx,\n+    unsigned char *output,\n+    size_t *outputlen,\n+    const secp256k1_ecdsa_signature* sig\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n+\n+/** Serialize an ECDSA signature in compact (64 byte) format.\n+ *\n+ *  Returns: 1\n+ *  Args:   ctx:       a secp256k1 context object\n+ *  Out:    output64:  a pointer to a 64-byte array to store the compact serialization\n+ *  In:     sig:       a pointer to an initialized signature object\n+ *\n+ *  See secp256k1_ecdsa_signature_parse_compact for details about the encoding.\n+ */\n+SECP256K1_API int secp256k1_ecdsa_signature_serialize_compact(\n+    const secp256k1_context* ctx,\n+    unsigned char *output64,\n+    const secp256k1_ecdsa_signature* sig\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n /** Verify an ECDSA signature.\n+ *\n  *  Returns: 1: correct signature\n- *           0: incorrect signature\n- *          -1: invalid public key\n- *          -2: invalid signature\n- * In:       ctx:       a secp256k1 context object, initialized for verification.\n+ *           0: incorrect or unparseable signature\n+ *  Args:    ctx:       a secp256k1 context object, initialized for verification.\n+ *  In:      sig:       the signature being verified (cannot be NULL)\n  *           msg32:     the 32-byte message hash being verified (cannot be NULL)\n- *           sig:       the signature being verified (cannot be NULL)\n- *           siglen:    the length of the signature\n- *           pubkey:    the public key to verify with (cannot be NULL)\n- *           pubkeylen: the length of pubkey\n+ *           pubkey:    pointer to an initialized public key to verify with (cannot be NULL)\n+ *\n+ * To avoid accepting malleable signatures, only ECDSA signatures in lower-S\n+ * form are accepted.\n+ *\n+ * If you need to accept ECDSA signatures from sources that do not obey this\n+ * rule, apply secp256k1_ecdsa_signature_normalize to the signature prior to\n+ * validation, but be aware that doing so results in malleable signatures.\n+ *\n+ * For details, see the comments for that function.\n  */\n-SECP256K1_WARN_UNUSED_RESULT int secp256k1_ecdsa_verify(\n-  const secp256k1_context_t* ctx,\n-  const unsigned char *msg32,\n-  const unsigned char *sig,\n-  int siglen,\n-  const unsigned char *pubkey,\n-  int pubkeylen\n-) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(5);\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_ecdsa_verify(\n+    const secp256k1_context* ctx,\n+    const secp256k1_ecdsa_signature *sig,\n+    const unsigned char *msg32,\n+    const secp256k1_pubkey *pubkey\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n-/** A pointer to a function to deterministically generate a nonce.\n- * Returns: 1 if a nonce was successfully generated. 0 will cause signing to fail.\n- * In:      msg32:     the 32-byte message hash being verified (will not be NULL)\n- *          key32:     pointer to a 32-byte secret key (will not be NULL)\n- *          attempt:   how many iterations we have tried to find a nonce.\n- *                     This will almost always be 0, but different attempt values\n- *                     are required to result in a different nonce.\n- *          data:      Arbitrary data pointer that is passed through.\n- * Out:     nonce32:   pointer to a 32-byte array to be filled by the function.\n- * Except for test cases, this function should compute some cryptographic hash of\n- * the message, the key and the attempt.\n+/** Convert a signature to a normalized lower-S form.\n+ *\n+ *  Returns: 1 if sigin was not normalized, 0 if it already was.\n+ *  Args: ctx:    a secp256k1 context object\n+ *  Out:  sigout: a pointer to a signature to fill with the normalized form,\n+ *                or copy if the input was already normalized. (can be NULL if\n+ *                you're only interested in whether the input was already\n+ *                normalized).\n+ *  In:   sigin:  a pointer to a signature to check/normalize (cannot be NULL,\n+ *                can be identical to sigout)\n+ *\n+ *  With ECDSA a third-party can forge a second distinct signature of the same\n+ *  message, given a single initial signature, but without knowing the key. This\n+ *  is done by negating the S value modulo the order of the curve, 'flipping'\n+ *  the sign of the random point R which is not included in the signature.\n+ *\n+ *  Forgery of the same message isn't universally problematic, but in systems\n+ *  where message malleability or uniqueness of signatures is important this can\n+ *  cause issues. This forgery can be blocked by all verifiers forcing signers\n+ *  to use a normalized form.\n+ *\n+ *  The lower-S form reduces the size of signatures slightly on average when\n+ *  variable length encodings (such as DER) are used and is cheap to verify,\n+ *  making it a good choice. Security of always using lower-S is assured because\n+ *  anyone can trivially modify a signature after the fact to enforce this\n+ *  property anyway.\n+ *\n+ *  The lower S value is always between 0x1 and\n+ *  0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\n+ *  inclusive.\n+ *\n+ *  No other forms of ECDSA malleability are known and none seem likely, but\n+ *  there is no formal proof that ECDSA, even with this additional restriction,\n+ *  is free of other malleability. Commonly used serialization schemes will also\n+ *  accept various non-unique encodings, so care should be taken when this\n+ *  property is required for an application.\n+ *\n+ *  The secp256k1_ecdsa_sign function will by default create signatures in the\n+ *  lower-S form, and secp256k1_ecdsa_verify will not accept others. In case\n+ *  signatures come from a system that cannot enforce this property,\n+ *  secp256k1_ecdsa_signature_normalize must be called before verification.\n  */\n-typedef int (*secp256k1_nonce_function_t)(\n-  unsigned char *nonce32,\n-  const unsigned char *msg32,\n-  const unsigned char *key32,\n-  unsigned int attempt,\n-  const void *data\n-);\n+SECP256K1_API int secp256k1_ecdsa_signature_normalize(\n+    const secp256k1_context* ctx,\n+    secp256k1_ecdsa_signature *sigout,\n+    const secp256k1_ecdsa_signature *sigin\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(3);\n \n /** An implementation of RFC6979 (using HMAC-SHA256) as nonce generation function.\n  * If a data pointer is passed, it is assumed to be a pointer to 32 bytes of\n  * extra entropy.\n  */\n-extern const secp256k1_nonce_function_t secp256k1_nonce_function_rfc6979;\n+SECP256K1_API extern const secp256k1_nonce_function secp256k1_nonce_function_rfc6979;\n \n /** A default safe nonce generation function (currently equal to secp256k1_nonce_function_rfc6979). */\n-extern const secp256k1_nonce_function_t secp256k1_nonce_function_default;\n-\n+SECP256K1_API extern const secp256k1_nonce_function secp256k1_nonce_function_default;\n \n /** Create an ECDSA signature.\n+ *\n  *  Returns: 1: signature created\n- *           0: the nonce generation function failed, the private key was invalid, or there is not\n- *              enough space in the signature (as indicated by siglen).\n- *  In:      ctx:    pointer to a context object, initialized for signing (cannot be NULL)\n- *           msg32:  the 32-byte message hash being signed (cannot be NULL)\n- *           seckey: pointer to a 32-byte secret key (cannot be NULL)\n- *           noncefp:pointer to a nonce generation function. If NULL, secp256k1_nonce_function_default is used\n- *           ndata:  pointer to arbitrary data used by the nonce generation function (can be NULL)\n+ *           0: the nonce generation function failed, or the private key was invalid.\n+ *  Args:    ctx:    pointer to a context object, initialized for signing (cannot be NULL)\n  *  Out:     sig:    pointer to an array where the signature will be placed (cannot be NULL)\n- *  In/Out:  siglen: pointer to an int with the length of sig, which will be updated\n- *                   to contain the actual signature length (<=72).\n- *\n- * The sig always has an s value in the lower half of the range (From 0x1\n- * to 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\n- * inclusive), unlike many other implementations.\n- * With ECDSA a third-party can can forge a second distinct signature\n- * of the same message given a single initial signature without knowing\n- * the key by setting s to its additive inverse mod-order, 'flipping' the\n- * sign of the random point R which is not included in the signature.\n- * Since the forgery is of the same message this isn't universally\n- * problematic, but in systems where message malleability or uniqueness\n- * of signatures is important this can cause issues.  This forgery can be\n- * blocked by all verifiers forcing signers to use a canonical form. The\n- * lower-S form reduces the size of signatures slightly on average when\n- * variable length encodings (such as DER) are used and is cheap to\n- * verify, making it a good choice. Security of always using lower-S is\n- * assured because anyone can trivially modify a signature after the\n- * fact to enforce this property.  Adjusting it inside the signing\n- * function avoids the need to re-serialize or have curve specific\n- * constants outside of the library.  By always using a canonical form\n- * even in applications where it isn't needed it becomes possible to\n- * impose a requirement later if a need is discovered.\n- * No other forms of ECDSA malleability are known and none seem likely,\n- * but there is no formal proof that ECDSA, even with this additional\n- * restriction, is free of other malleability.  Commonly used serialization\n- * schemes will also accept various non-unique encodings, so care should\n- * be taken when this property is required for an application.\n- */\n-int secp256k1_ecdsa_sign(\n-  const secp256k1_context_t* ctx,\n-  const unsigned char *msg32,\n-  unsigned char *sig,\n-  int *siglen,\n-  const unsigned char *seckey,\n-  secp256k1_nonce_function_t noncefp,\n-  const void *ndata\n-) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4) SECP256K1_ARG_NONNULL(5);\n-\n-/** Create a compact ECDSA signature (64 byte + recovery id).\n- *  Returns: 1: signature created\n- *           0: the nonce generation function failed, or the secret key was invalid.\n- *  In:      ctx:    pointer to a context object, initialized for signing (cannot be NULL)\n- *           msg32:  the 32-byte message hash being signed (cannot be NULL)\n+ *  In:      msg32:  the 32-byte message hash being signed (cannot be NULL)\n  *           seckey: pointer to a 32-byte secret key (cannot be NULL)\n  *           noncefp:pointer to a nonce generation function. If NULL, secp256k1_nonce_function_default is used\n  *           ndata:  pointer to arbitrary data used by the nonce generation function (can be NULL)\n- *  Out:     sig:    pointer to a 64-byte array where the signature will be placed (cannot be NULL)\n- *                   In case 0 is returned, the returned signature length will be zero.\n- *           recid:  pointer to an int, which will be updated to contain the recovery id (can be NULL)\n+ *\n+ * The created signature is always in lower-S form. See\n+ * secp256k1_ecdsa_signature_normalize for more details.\n  */\n-int secp256k1_ecdsa_sign_compact(\n-  const secp256k1_context_t* ctx,\n-  const unsigned char *msg32,\n-  unsigned char *sig64,\n-  const unsigned char *seckey,\n-  secp256k1_nonce_function_t noncefp,\n-  const void *ndata,\n-  int *recid\n+SECP256K1_API int secp256k1_ecdsa_sign(\n+    const secp256k1_context* ctx,\n+    secp256k1_ecdsa_signature *sig,\n+    const unsigned char *msg32,\n+    const unsigned char *seckey,\n+    secp256k1_nonce_function noncefp,\n+    const void *ndata\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n-/** Recover an ECDSA public key from a compact signature.\n- *  Returns: 1: public key successfully recovered (which guarantees a correct signature).\n- *           0: otherwise.\n- *  In:      ctx:        pointer to a context object, initialized for verification (cannot be NULL)\n- *           msg32:      the 32-byte message hash assumed to be signed (cannot be NULL)\n- *           sig64:      signature as 64 byte array (cannot be NULL)\n- *           compressed: whether to recover a compressed or uncompressed pubkey\n- *           recid:      the recovery id (0-3, as returned by ecdsa_sign_compact)\n- *  Out:     pubkey:     pointer to a 33 or 65 byte array to put the pubkey (cannot be NULL)\n- *           pubkeylen:  pointer to an int that will contain the pubkey length (cannot be NULL)\n- */\n-SECP256K1_WARN_UNUSED_RESULT int secp256k1_ecdsa_recover_compact(\n-  const secp256k1_context_t* ctx,\n-  const unsigned char *msg32,\n-  const unsigned char *sig64,\n-  unsigned char *pubkey,\n-  int *pubkeylen,\n-  int compressed,\n-  int recid\n-) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4) SECP256K1_ARG_NONNULL(5);\n-\n /** Verify an ECDSA secret key.\n+ *\n  *  Returns: 1: secret key is valid\n  *           0: secret key is invalid\n- *  In:      ctx: pointer to a context object (cannot be NULL)\n- *           seckey: pointer to a 32-byte secret key (cannot be NULL)\n+ *  Args:    ctx: pointer to a context object (cannot be NULL)\n+ *  In:      seckey: pointer to a 32-byte secret key (cannot be NULL)\n  */\n-SECP256K1_WARN_UNUSED_RESULT int secp256k1_ec_seckey_verify(\n-  const secp256k1_context_t* ctx,\n-  const unsigned char *seckey\n-) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2);\n-\n-/** Just validate a public key.\n- *  Returns: 1: public key is valid\n- *           0: public key is invalid\n- *  In:      ctx:       pointer to a context object (cannot be NULL)\n- *           pubkey:    pointer to a 33-byte or 65-byte public key (cannot be NULL).\n- *           pubkeylen: length of pubkey\n- */\n-SECP256K1_WARN_UNUSED_RESULT int secp256k1_ec_pubkey_verify(\n-  const secp256k1_context_t* ctx,\n-  const unsigned char *pubkey,\n-  int pubkeylen\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_ec_seckey_verify(\n+    const secp256k1_context* ctx,\n+    const unsigned char *seckey\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2);\n \n /** Compute the public key for a secret key.\n- *  In:     ctx:        pointer to a context object, initialized for signing (cannot be NULL)\n- *          compressed: whether the computed public key should be compressed\n- *          seckey:     pointer to a 32-byte private key (cannot be NULL)\n- *  Out:    pubkey:     pointer to a 33-byte (if compressed) or 65-byte (if uncompressed)\n- *                      area to store the public key (cannot be NULL)\n- *          pubkeylen:  pointer to int that will be updated to contains the pubkey's\n- *                      length (cannot be NULL)\n+ *\n  *  Returns: 1: secret was valid, public key stores\n  *           0: secret was invalid, try again\n+ *  Args:   ctx:        pointer to a context object, initialized for signing (cannot be NULL)\n+ *  Out:    pubkey:     pointer to the created public key (cannot be NULL)\n+ *  In:     seckey:     pointer to a 32-byte private key (cannot be NULL)\n  */\n-SECP256K1_WARN_UNUSED_RESULT int secp256k1_ec_pubkey_create(\n-  const secp256k1_context_t* ctx,\n-  unsigned char *pubkey,\n-  int *pubkeylen,\n-  const unsigned char *seckey,\n-  int compressed\n-) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n-\n-/** Decompress a public key.\n- * In:     ctx:       pointer to a context object (cannot be NULL)\n- * In/Out: pubkey:    pointer to a 65-byte array to put the decompressed public key.\n- *                    It must contain a 33-byte or 65-byte public key already (cannot be NULL)\n- *         pubkeylen: pointer to the size of the public key pointed to by pubkey (cannot be NULL)\n- *                    It will be updated to reflect the new size.\n- * Returns: 0: pubkey was invalid\n- *          1: pubkey was valid, and was replaced with its decompressed version\n- */\n-SECP256K1_WARN_UNUSED_RESULT int secp256k1_ec_pubkey_decompress(\n-  const secp256k1_context_t* ctx,\n-  unsigned char *pubkey,\n-  int *pubkeylen\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_ec_pubkey_create(\n+    const secp256k1_context* ctx,\n+    secp256k1_pubkey *pubkey,\n+    const unsigned char *seckey\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n-/** Export a private key in DER format.\n- * In: ctx: pointer to a context object, initialized for signing (cannot be NULL)\n+/** Tweak a private key by adding tweak to it.\n+ * Returns: 0 if the tweak was out of range (chance of around 1 in 2^128 for\n+ *          uniformly random 32-byte arrays, or if the resulting private key\n+ *          would be invalid (only when the tweak is the complement of the\n+ *          private key). 1 otherwise.\n+ * Args:    ctx:    pointer to a context object (cannot be NULL).\n+ * In/Out:  seckey: pointer to a 32-byte private key.\n+ * In:      tweak:  pointer to a 32-byte tweak.\n  */\n-SECP256K1_WARN_UNUSED_RESULT int secp256k1_ec_privkey_export(\n-  const secp256k1_context_t* ctx,\n-  const unsigned char *seckey,\n-  unsigned char *privkey,\n-  int *privkeylen,\n-  int compressed\n-) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n-\n-/** Import a private key in DER format. */\n-SECP256K1_WARN_UNUSED_RESULT int secp256k1_ec_privkey_import(\n-  const secp256k1_context_t* ctx,\n-  unsigned char *seckey,\n-  const unsigned char *privkey,\n-  int privkeylen\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_ec_privkey_tweak_add(\n+    const secp256k1_context* ctx,\n+    unsigned char *seckey,\n+    const unsigned char *tweak\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n-/** Tweak a private key by adding tweak to it. */\n-SECP256K1_WARN_UNUSED_RESULT int secp256k1_ec_privkey_tweak_add(\n-  const secp256k1_context_t* ctx,\n-  unsigned char *seckey,\n-  const unsigned char *tweak\n+/** Tweak a public key by adding tweak times the generator to it.\n+ * Returns: 0 if the tweak was out of range (chance of around 1 in 2^128 for\n+ *          uniformly random 32-byte arrays, or if the resulting public key\n+ *          would be invalid (only when the tweak is the complement of the\n+ *          corresponding private key). 1 otherwise.\n+ * Args:    ctx:    pointer to a context object initialized for validation\n+ *                  (cannot be NULL).\n+ * In/Out:  pubkey: pointer to a public key object.\n+ * In:      tweak:  pointer to a 32-byte tweak.\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_ec_pubkey_tweak_add(\n+    const secp256k1_context* ctx,\n+    secp256k1_pubkey *pubkey,\n+    const unsigned char *tweak\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n-/** Tweak a public key by adding tweak times the generator to it.\n- * In: ctx: pointer to a context object, initialized for verification (cannot be NULL)\n+/** Tweak a private key by multiplying it by a tweak.\n+ * Returns: 0 if the tweak was out of range (chance of around 1 in 2^128 for\n+ *          uniformly random 32-byte arrays, or equal to zero. 1 otherwise.\n+ * Args:   ctx:    pointer to a context object (cannot be NULL).\n+ * In/Out: seckey: pointer to a 32-byte private key.\n+ * In:     tweak:  pointer to a 32-byte tweak.\n  */\n-SECP256K1_WARN_UNUSED_RESULT int secp256k1_ec_pubkey_tweak_add(\n-  const secp256k1_context_t* ctx,\n-  unsigned char *pubkey,\n-  int pubkeylen,\n-  const unsigned char *tweak\n-) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(4);\n-\n-/** Tweak a private key by multiplying it with tweak. */\n-SECP256K1_WARN_UNUSED_RESULT int secp256k1_ec_privkey_tweak_mul(\n-  const secp256k1_context_t* ctx,\n-  unsigned char *seckey,\n-  const unsigned char *tweak\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_ec_privkey_tweak_mul(\n+    const secp256k1_context* ctx,\n+    unsigned char *seckey,\n+    const unsigned char *tweak\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n-/** Tweak a public key by multiplying it with tweak.\n- * In: ctx: pointer to a context object, initialized for verification (cannot be NULL)\n+/** Tweak a public key by multiplying it by a tweak value.\n+ * Returns: 0 if the tweak was out of range (chance of around 1 in 2^128 for\n+ *          uniformly random 32-byte arrays, or equal to zero. 1 otherwise.\n+ * Args:    ctx:    pointer to a context object initialized for validation\n+ *                 (cannot be NULL).\n+ * In/Out:  pubkey: pointer to a public key obkect.\n+ * In:      tweak:  pointer to a 32-byte tweak.\n  */\n-SECP256K1_WARN_UNUSED_RESULT int secp256k1_ec_pubkey_tweak_mul(\n-  const secp256k1_context_t* ctx,\n-  unsigned char *pubkey,\n-  int pubkeylen,\n-  const unsigned char *tweak\n-) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(4);\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_ec_pubkey_tweak_mul(\n+    const secp256k1_context* ctx,\n+    secp256k1_pubkey *pubkey,\n+    const unsigned char *tweak\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n /** Updates the context randomization.\n  *  Returns: 1: randomization successfully updated\n  *           0: error\n- *  In:      ctx:       pointer to a context object (cannot be NULL)\n- *           seed32:    pointer to a 32-byte random seed (NULL resets to initial state)\n+ *  Args:    ctx:       pointer to a context object (cannot be NULL)\n+ *  In:      seed32:    pointer to a 32-byte random seed (NULL resets to initial state)\n  */\n-SECP256K1_WARN_UNUSED_RESULT int secp256k1_context_randomize(\n-  secp256k1_context_t* ctx,\n-  const unsigned char *seed32\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_context_randomize(\n+    secp256k1_context* ctx,\n+    const unsigned char *seed32\n ) SECP256K1_ARG_NONNULL(1);\n \n+/** Add a number of public keys together.\n+ *  Returns: 1: the sum of the public keys is valid.\n+ *           0: the sum of the public keys is not valid.\n+ *  Args:   ctx:        pointer to a context object\n+ *  Out:    out:        pointer to a public key object for placing the resulting public key\n+ *                      (cannot be NULL)\n+ *  In:     ins:        pointer to array of pointers to public keys (cannot be NULL)\n+ *          n:          the number of public keys to add together (must be at least 1)\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_ec_pubkey_combine(\n+    const secp256k1_context* ctx,\n+    secp256k1_pubkey *out,\n+    const secp256k1_pubkey * const * ins,\n+    size_t n\n+) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n # ifdef __cplusplus\n }"
      },
      {
        "sha": "4b84d7a963499698ff6c8b920d337fed2d1cb5f7",
        "filename": "src/secp256k1/include/secp256k1_ecdh.h",
        "status": "added",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/include/secp256k1_ecdh.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/include/secp256k1_ecdh.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/include/secp256k1_ecdh.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -0,0 +1,31 @@\n+#ifndef _SECP256K1_ECDH_\n+# define _SECP256K1_ECDH_\n+\n+# include \"secp256k1.h\"\n+\n+# ifdef __cplusplus\n+extern \"C\" {\n+# endif\n+\n+/** Compute an EC Diffie-Hellman secret in constant time\n+ *  Returns: 1: exponentiation was successful\n+ *           0: scalar was invalid (zero or overflow)\n+ *  Args:    ctx:        pointer to a context object (cannot be NULL)\n+ *  Out:     result:     a 32-byte array which will be populated by an ECDH\n+ *                       secret computed from the point and scalar\n+ *  In:      pubkey:     a pointer to a secp256k1_pubkey containing an\n+ *                       initialized public key\n+ *           privkey:    a 32-byte scalar with which to multiply the point\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_ecdh(\n+  const secp256k1_context* ctx,\n+  unsigned char *result,\n+  const secp256k1_pubkey *pubkey,\n+  const unsigned char *privkey\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n+\n+# ifdef __cplusplus\n+}\n+# endif\n+\n+#endif"
      },
      {
        "sha": "05537972532fb89feb6693d07c19168688136f38",
        "filename": "src/secp256k1/include/secp256k1_recovery.h",
        "status": "added",
        "additions": 110,
        "deletions": 0,
        "changes": 110,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/include/secp256k1_recovery.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/include/secp256k1_recovery.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/include/secp256k1_recovery.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -0,0 +1,110 @@\n+#ifndef _SECP256K1_RECOVERY_\n+# define _SECP256K1_RECOVERY_\n+\n+# include \"secp256k1.h\"\n+\n+# ifdef __cplusplus\n+extern \"C\" {\n+# endif\n+\n+/** Opaque data structured that holds a parsed ECDSA signature,\n+ *  supporting pubkey recovery.\n+ *\n+ *  The exact representation of data inside is implementation defined and not\n+ *  guaranteed to be portable between different platforms or versions. It is\n+ *  however guaranteed to be 65 bytes in size, and can be safely copied/moved.\n+ *  If you need to convert to a format suitable for storage or transmission, use\n+ *  the secp256k1_ecdsa_signature_serialize_* and\n+ *  secp256k1_ecdsa_signature_parse_* functions.\n+ *\n+ *  Furthermore, it is guaranteed that identical signatures (including their\n+ *  recoverability) will have identical representation, so they can be\n+ *  memcmp'ed.\n+ */\n+typedef struct {\n+    unsigned char data[65];\n+} secp256k1_ecdsa_recoverable_signature;\n+\n+/** Parse a compact ECDSA signature (64 bytes + recovery id).\n+ *\n+ *  Returns: 1 when the signature could be parsed, 0 otherwise\n+ *  Args: ctx:     a secp256k1 context object\n+ *  Out:  sig:     a pointer to a signature object\n+ *  In:   input64: a pointer to a 64-byte compact signature\n+ *        recid:   the recovery id (0, 1, 2 or 3)\n+ */\n+SECP256K1_API int secp256k1_ecdsa_recoverable_signature_parse_compact(\n+    const secp256k1_context* ctx,\n+    secp256k1_ecdsa_recoverable_signature* sig,\n+    const unsigned char *input64,\n+    int recid\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Convert a recoverable signature into a normal signature.\n+ *\n+ *  Returns: 1\n+ *  Out: sig:    a pointer to a normal signature (cannot be NULL).\n+ *  In:  sigin:  a pointer to a recoverable signature (cannot be NULL).\n+ */\n+SECP256K1_API int secp256k1_ecdsa_recoverable_signature_convert(\n+    const secp256k1_context* ctx,\n+    secp256k1_ecdsa_signature* sig,\n+    const secp256k1_ecdsa_recoverable_signature* sigin\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Serialize an ECDSA signature in compact format (64 bytes + recovery id).\n+ *\n+ *  Returns: 1\n+ *  Args: ctx:      a secp256k1 context object\n+ *  Out:  output64: a pointer to a 64-byte array of the compact signature (cannot be NULL)\n+ *        recid:    a pointer to an integer to hold the recovery id (can be NULL).\n+ *  In:   sig:      a pointer to an initialized signature object (cannot be NULL)\n+ */\n+SECP256K1_API int secp256k1_ecdsa_recoverable_signature_serialize_compact(\n+    const secp256k1_context* ctx,\n+    unsigned char *output64,\n+    int *recid,\n+    const secp256k1_ecdsa_recoverable_signature* sig\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n+\n+/** Create a recoverable ECDSA signature.\n+ *\n+ *  Returns: 1: signature created\n+ *           0: the nonce generation function failed, or the private key was invalid.\n+ *  Args:    ctx:    pointer to a context object, initialized for signing (cannot be NULL)\n+ *  Out:     sig:    pointer to an array where the signature will be placed (cannot be NULL)\n+ *  In:      msg32:  the 32-byte message hash being signed (cannot be NULL)\n+ *           seckey: pointer to a 32-byte secret key (cannot be NULL)\n+ *           noncefp:pointer to a nonce generation function. If NULL, secp256k1_nonce_function_default is used\n+ *           ndata:  pointer to arbitrary data used by the nonce generation function (can be NULL)\n+ */\n+SECP256K1_API int secp256k1_ecdsa_sign_recoverable(\n+    const secp256k1_context* ctx,\n+    secp256k1_ecdsa_recoverable_signature *sig,\n+    const unsigned char *msg32,\n+    const unsigned char *seckey,\n+    secp256k1_nonce_function noncefp,\n+    const void *ndata\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n+\n+/** Recover an ECDSA public key from a signature.\n+ *\n+ *  Returns: 1: public key successfully recovered (which guarantees a correct signature).\n+ *           0: otherwise.\n+ *  Args:    ctx:        pointer to a context object, initialized for verification (cannot be NULL)\n+ *  Out:     pubkey:     pointer to the recovered public key (cannot be NULL)\n+ *  In:      sig:        pointer to initialized signature that supports pubkey recovery (cannot be NULL)\n+ *           msg32:      the 32-byte message hash assumed to be signed (cannot be NULL)\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_ecdsa_recover(\n+    const secp256k1_context* ctx,\n+    secp256k1_pubkey *pubkey,\n+    const secp256k1_ecdsa_recoverable_signature *sig,\n+    const unsigned char *msg32\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n+\n+# ifdef __cplusplus\n+}\n+# endif\n+\n+#endif"
      },
      {
        "sha": "dc32fec1eac0380e687399c0cf66e0c44cb2e1a3",
        "filename": "src/secp256k1/include/secp256k1_schnorr.h",
        "status": "added",
        "additions": 173,
        "deletions": 0,
        "changes": 173,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/include/secp256k1_schnorr.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/include/secp256k1_schnorr.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/include/secp256k1_schnorr.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -0,0 +1,173 @@\n+#ifndef _SECP256K1_SCHNORR_\n+# define _SECP256K1_SCHNORR_\n+\n+# include \"secp256k1.h\"\n+\n+# ifdef __cplusplus\n+extern \"C\" {\n+# endif\n+\n+/** Create a signature using a custom EC-Schnorr-SHA256 construction. It\n+ *  produces non-malleable 64-byte signatures which support public key recovery\n+ *  batch validation, and multiparty signing.\n+ *  Returns: 1: signature created\n+ *           0: the nonce generation function failed, or the private key was\n+ *              invalid.\n+ *  Args:    ctx:    pointer to a context object, initialized for signing\n+ *                   (cannot be NULL)\n+ *  Out:     sig64:  pointer to a 64-byte array where the signature will be\n+ *                   placed (cannot be NULL)\n+ *  In:      msg32:  the 32-byte message hash being signed (cannot be NULL)\n+ *           seckey: pointer to a 32-byte secret key (cannot be NULL)\n+ *           noncefp:pointer to a nonce generation function. If NULL,\n+ *                   secp256k1_nonce_function_default is used\n+ *           ndata:  pointer to arbitrary data used by the nonce generation\n+ *                   function (can be NULL)\n+ */\n+SECP256K1_API int secp256k1_schnorr_sign(\n+  const secp256k1_context* ctx,\n+  unsigned char *sig64,\n+  const unsigned char *msg32,\n+  const unsigned char *seckey,\n+  secp256k1_nonce_function noncefp,\n+  const void *ndata\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n+\n+/** Verify a signature created by secp256k1_schnorr_sign.\n+ *  Returns: 1: correct signature\n+ *           0: incorrect signature\n+ *  Args:    ctx:       a secp256k1 context object, initialized for verification.\n+ *  In:      sig64:     the 64-byte signature being verified (cannot be NULL)\n+ *           msg32:     the 32-byte message hash being verified (cannot be NULL)\n+ *           pubkey:    the public key to verify with (cannot be NULL)\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_schnorr_verify(\n+  const secp256k1_context* ctx,\n+  const unsigned char *sig64,\n+  const unsigned char *msg32,\n+  const secp256k1_pubkey *pubkey\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n+\n+/** Recover an EC public key from a Schnorr signature created using\n+ *  secp256k1_schnorr_sign.\n+ *  Returns: 1: public key successfully recovered (which guarantees a correct\n+ *           signature).\n+ *           0: otherwise.\n+ *  Args:    ctx:        pointer to a context object, initialized for\n+ *                       verification (cannot be NULL)\n+ *  Out:     pubkey:     pointer to a pubkey to set to the recovered public key\n+ *                       (cannot be NULL).\n+ *  In:      sig64:      signature as 64 byte array (cannot be NULL)\n+ *           msg32:      the 32-byte message hash assumed to be signed (cannot\n+ *                       be NULL)\n+ */\n+SECP256K1_API int secp256k1_schnorr_recover(\n+  const secp256k1_context* ctx,\n+  secp256k1_pubkey *pubkey,\n+  const unsigned char *sig64,\n+  const unsigned char *msg32\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n+\n+/** Generate a nonce pair deterministically for use with\n+ *  secp256k1_schnorr_partial_sign.\n+ *  Returns: 1: valid nonce pair was generated.\n+ *           0: otherwise (nonce generation function failed)\n+ *  Args:    ctx:         pointer to a context object, initialized for signing\n+ *                        (cannot be NULL)\n+ *  Out:     pubnonce:    public side of the nonce (cannot be NULL)\n+ *           privnonce32: private side of the nonce (32 byte) (cannot be NULL)\n+ *  In:      msg32:       the 32-byte message hash assumed to be signed (cannot\n+ *                        be NULL)\n+ *           sec32:       the 32-byte private key (cannot be NULL)\n+ *           noncefp:     pointer to a nonce generation function. If NULL,\n+ *                        secp256k1_nonce_function_default is used\n+ *           noncedata:   pointer to arbitrary data used by the nonce generation\n+ *                        function (can be NULL)\n+ *\n+ *  Do not use the output as a private/public key pair for signing/validation.\n+ */\n+SECP256K1_API int secp256k1_schnorr_generate_nonce_pair(\n+  const secp256k1_context* ctx,\n+  secp256k1_pubkey *pubnonce,\n+  unsigned char *privnonce32,\n+  const unsigned char *msg32,\n+  const unsigned char *sec32,\n+  secp256k1_nonce_function noncefp,\n+  const void* noncedata\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Produce a partial Schnorr signature, which can be combined using\n+ *  secp256k1_schnorr_partial_combine, to end up with a full signature that is\n+ *  verifiable using secp256k1_schnorr_verify.\n+ *  Returns: 1: signature created successfully.\n+ *           0: no valid signature exists with this combination of keys, nonces\n+ *              and message (chance around 1 in 2^128)\n+ *          -1: invalid private key, nonce, or public nonces.\n+ *  Args: ctx:             pointer to context object, initialized for signing (cannot\n+ *                         be NULL)\n+ *  Out:  sig64:           pointer to 64-byte array to put partial signature in\n+ *  In:   msg32:           pointer to 32-byte message to sign\n+ *        sec32:           pointer to 32-byte private key\n+ *        pubnonce_others: pointer to pubkey containing the sum of the other's\n+ *                         nonces (see secp256k1_ec_pubkey_combine)\n+ *        secnonce32:      pointer to 32-byte array containing our nonce\n+ *\n+ * The intended procedure for creating a multiparty signature is:\n+ * - Each signer S[i] with private key x[i] and public key Q[i] runs\n+ *   secp256k1_schnorr_generate_nonce_pair to produce a pair (k[i],R[i]) of\n+ *   private/public nonces.\n+ * - All signers communicate their public nonces to each other (revealing your\n+ *   private nonce can lead to discovery of your private key, so it should be\n+ *   considered secret).\n+ * - All signers combine all the public nonces they received (excluding their\n+ *   own) using secp256k1_ec_pubkey_combine to obtain an\n+ *   Rall[i] = sum(R[0..i-1,i+1..n]).\n+ * - All signers produce a partial signature using\n+ *   secp256k1_schnorr_partial_sign, passing in their own private key x[i],\n+ *   their own private nonce k[i], and the sum of the others' public nonces\n+ *   Rall[i].\n+ * - All signers communicate their partial signatures to each other.\n+ * - Someone combines all partial signatures using\n+ *   secp256k1_schnorr_partial_combine, to obtain a full signature.\n+ * - The resulting signature is validatable using secp256k1_schnorr_verify, with\n+ *   public key equal to the result of secp256k1_ec_pubkey_combine of the\n+ *   signers' public keys (sum(Q[0..n])).\n+ *\n+ *  Note that secp256k1_schnorr_partial_combine and secp256k1_ec_pubkey_combine\n+ *  function take their arguments in any order, and it is possible to\n+ *  pre-combine several inputs already with one call, and add more inputs later\n+ *  by calling the function again (they are commutative and associative).\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_schnorr_partial_sign(\n+  const secp256k1_context* ctx,\n+  unsigned char *sig64,\n+  const unsigned char *msg32,\n+  const unsigned char *sec32,\n+  const secp256k1_pubkey *pubnonce_others,\n+  const unsigned char *secnonce32\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4) SECP256K1_ARG_NONNULL(5) SECP256K1_ARG_NONNULL(6);\n+\n+/** Combine multiple Schnorr partial signatures.\n+ * Returns: 1: the passed signatures were successfully combined.\n+ *          0: the resulting signature is not valid (chance of 1 in 2^256)\n+ *         -1: some inputs were invalid, or the signatures were not created\n+ *             using the same set of nonces\n+ * Args:   ctx:      pointer to a context object\n+ * Out:    sig64:    pointer to a 64-byte array to place the combined signature\n+ *                   (cannot be NULL)\n+ * In:     sig64sin: pointer to an array of n pointers to 64-byte input\n+ *                   signatures\n+ *         n:        the number of signatures to combine (at least 1)\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_schnorr_partial_combine(\n+  const secp256k1_context* ctx,\n+  unsigned char *sig64,\n+  const unsigned char * const * sig64sin,\n+  size_t n\n+) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+# ifdef __cplusplus\n+}\n+# endif\n+\n+#endif"
      },
      {
        "sha": "c4c16eb7ca7dc9313430809cfc964bf5055d2831",
        "filename": "src/secp256k1/src/basic-config.h",
        "status": "added",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/basic-config.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/basic-config.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/basic-config.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -0,0 +1,32 @@\n+/**********************************************************************\n+ * Copyright (c) 2013, 2014 Pieter Wuille                             *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_BASIC_CONFIG_\n+#define _SECP256K1_BASIC_CONFIG_\n+\n+#ifdef USE_BASIC_CONFIG\n+\n+#undef USE_ASM_X86_64\n+#undef USE_ENDOMORPHISM\n+#undef USE_FIELD_10X26\n+#undef USE_FIELD_5X52\n+#undef USE_FIELD_INV_BUILTIN\n+#undef USE_FIELD_INV_NUM\n+#undef USE_NUM_GMP\n+#undef USE_NUM_NONE\n+#undef USE_SCALAR_4X64\n+#undef USE_SCALAR_8X32\n+#undef USE_SCALAR_INV_BUILTIN\n+#undef USE_SCALAR_INV_NUM\n+\n+#define USE_NUM_NONE 1\n+#define USE_FIELD_INV_BUILTIN 1\n+#define USE_SCALAR_INV_BUILTIN 1\n+#define USE_FIELD_10X26 1\n+#define USE_SCALAR_8X32 1\n+\n+#endif // USE_BASIC_CONFIG\n+#endif // _SECP256K1_BASIC_CONFIG_"
      },
      {
        "sha": "3a71b4aafa048d9ba79ad1fcb432139f94550a6c",
        "filename": "src/secp256k1/src/bench.h",
        "status": "modified",
        "additions": 15,
        "deletions": 5,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/bench.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -20,7 +20,9 @@ static double gettimedouble(void) {\n void print_number(double x) {\n     double y = x;\n     int c = 0;\n-    if (y < 0.0) y = -y;\n+    if (y < 0.0) {\n+        y = -y;\n+    }\n     while (y < 100.0) {\n         y *= 10.0;\n         c++;\n@@ -35,13 +37,21 @@ void run_benchmark(char *name, void (*benchmark)(void*), void (*setup)(void*), v\n     double max = 0.0;\n     for (i = 0; i < count; i++) {\n         double begin, total;\n-        if (setup) setup(data);\n+        if (setup != NULL) {\n+            setup(data);\n+        }\n         begin = gettimedouble();\n         benchmark(data);\n         total = gettimedouble() - begin;\n-        if (teardown) teardown(data);\n-        if (total < min) min = total;\n-        if (total > max) max = total;\n+        if (teardown != NULL) {\n+            teardown(data);\n+        }\n+        if (total < min) {\n+            min = total;\n+        }\n+        if (total > max) {\n+            max = total;\n+        }\n         sum += total;\n     }\n     printf(\"%s: min \", name);"
      },
      {
        "sha": "5a7c6376e08a1e8c274c7cb8998248c4692da201",
        "filename": "src/secp256k1/src/bench_ecdh.c",
        "status": "added",
        "additions": 53,
        "deletions": 0,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/bench_ecdh.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/bench_ecdh.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/bench_ecdh.c?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -0,0 +1,53 @@\n+/**********************************************************************\n+ * Copyright (c) 2015 Pieter Wuille, Andrew Poelstra                  *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include <string.h>\n+\n+#include \"include/secp256k1.h\"\n+#include \"include/secp256k1_ecdh.h\"\n+#include \"util.h\"\n+#include \"bench.h\"\n+\n+typedef struct {\n+    secp256k1_context *ctx;\n+    secp256k1_pubkey point;\n+    unsigned char scalar[32];\n+} bench_ecdh_t;\n+\n+static void bench_ecdh_setup(void* arg) {\n+    int i;\n+    bench_ecdh_t *data = (bench_ecdh_t*)arg;\n+    const unsigned char point[] = {\n+        0x03,\n+        0x54, 0x94, 0xc1, 0x5d, 0x32, 0x09, 0x97, 0x06,\n+        0xc2, 0x39, 0x5f, 0x94, 0x34, 0x87, 0x45, 0xfd,\n+        0x75, 0x7c, 0xe3, 0x0e, 0x4e, 0x8c, 0x90, 0xfb,\n+        0xa2, 0xba, 0xd1, 0x84, 0xf8, 0x83, 0xc6, 0x9f\n+    };\n+\n+    data->ctx = secp256k1_context_create(0);\n+    for (i = 0; i < 32; i++) {\n+        data->scalar[i] = i + 1;\n+    }\n+    CHECK(secp256k1_ec_pubkey_parse(data->ctx, &data->point, point, sizeof(point)) == 1);\n+}\n+\n+static void bench_ecdh(void* arg) {\n+    int i;\n+    unsigned char res[32];\n+    bench_ecdh_t *data = (bench_ecdh_t*)arg;\n+\n+    for (i = 0; i < 20000; i++) {\n+        CHECK(secp256k1_ecdh(data->ctx, res, &data->point, data->scalar) == 1);\n+    }\n+}\n+\n+int main(void) {\n+    bench_ecdh_t data;\n+\n+    run_benchmark(\"ecdh\", bench_ecdh, bench_ecdh_setup, NULL, &data, 10, 20000);\n+    return 0;\n+}"
      },
      {
        "sha": "7809f5f8cfeb4b6c53992382ada119de2ca550d1",
        "filename": "src/secp256k1/src/bench_internal.c",
        "status": "modified",
        "additions": 49,
        "deletions": 13,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/bench_internal.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/bench_internal.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/bench_internal.c?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -13,15 +13,17 @@\n #include \"field_impl.h\"\n #include \"group_impl.h\"\n #include \"scalar_impl.h\"\n+#include \"ecmult_const_impl.h\"\n #include \"ecmult_impl.h\"\n #include \"bench.h\"\n+#include \"secp256k1.c\"\n \n typedef struct {\n-    secp256k1_scalar_t scalar_x, scalar_y;\n-    secp256k1_fe_t fe_x, fe_y;\n-    secp256k1_ge_t ge_x, ge_y;\n-    secp256k1_gej_t gej_x, gej_y;\n-    unsigned char data[32];\n+    secp256k1_scalar scalar_x, scalar_y;\n+    secp256k1_fe fe_x, fe_y;\n+    secp256k1_ge ge_x, ge_y;\n+    secp256k1_gej gej_x, gej_y;\n+    unsigned char data[64];\n     int wnaf[256];\n } bench_inv_t;\n \n@@ -51,6 +53,7 @@ void bench_setup(void* arg) {\n     secp256k1_gej_set_ge(&data->gej_x, &data->ge_x);\n     secp256k1_gej_set_ge(&data->gej_y, &data->ge_y);\n     memcpy(data->data, init_x, 32);\n+    memcpy(data->data + 32, init_y, 32);\n }\n \n void bench_scalar_add(void* arg) {\n@@ -95,8 +98,8 @@ void bench_scalar_split(void* arg) {\n     bench_inv_t *data = (bench_inv_t*)arg;\n \n     for (i = 0; i < 20000; i++) {\n-        secp256k1_scalar_t l, r;\n-        secp256k1_scalar_split_lambda_var(&l, &r, &data->scalar_x);\n+        secp256k1_scalar l, r;\n+        secp256k1_scalar_split_lambda(&l, &r, &data->scalar_x);\n         secp256k1_scalar_add(&data->scalar_x, &data->scalar_x, &data->scalar_y);\n     }\n }\n@@ -193,7 +196,7 @@ void bench_group_double_var(void* arg) {\n     bench_inv_t *data = (bench_inv_t*)arg;\n \n     for (i = 0; i < 200000; i++) {\n-        secp256k1_gej_double_var(&data->gej_x, &data->gej_x);\n+        secp256k1_gej_double_var(&data->gej_x, &data->gej_x, NULL);\n     }\n }\n \n@@ -202,7 +205,7 @@ void bench_group_add_var(void* arg) {\n     bench_inv_t *data = (bench_inv_t*)arg;\n \n     for (i = 0; i < 200000; i++) {\n-        secp256k1_gej_add_var(&data->gej_x, &data->gej_x, &data->gej_y);\n+        secp256k1_gej_add_var(&data->gej_x, &data->gej_x, &data->gej_y, NULL);\n     }\n }\n \n@@ -220,7 +223,7 @@ void bench_group_add_affine_var(void* arg) {\n     bench_inv_t *data = (bench_inv_t*)arg;\n \n     for (i = 0; i < 200000; i++) {\n-        secp256k1_gej_add_ge_var(&data->gej_x, &data->gej_x, &data->ge_y);\n+        secp256k1_gej_add_ge_var(&data->gej_x, &data->gej_x, &data->ge_y, NULL);\n     }\n }\n \n@@ -229,7 +232,17 @@ void bench_ecmult_wnaf(void* arg) {\n     bench_inv_t *data = (bench_inv_t*)arg;\n \n     for (i = 0; i < 20000; i++) {\n-        secp256k1_ecmult_wnaf(data->wnaf, &data->scalar_x, WINDOW_A);\n+        secp256k1_ecmult_wnaf(data->wnaf, 256, &data->scalar_x, WINDOW_A);\n+        secp256k1_scalar_add(&data->scalar_x, &data->scalar_x, &data->scalar_y);\n+    }\n+}\n+\n+void bench_wnaf_const(void* arg) {\n+    int i;\n+    bench_inv_t *data = (bench_inv_t*)arg;\n+\n+    for (i = 0; i < 20000; i++) {\n+        secp256k1_wnaf_const(data->wnaf, data->scalar_x, WINDOW_A);\n         secp256k1_scalar_add(&data->scalar_x, &data->scalar_x, &data->scalar_y);\n     }\n }\n@@ -265,11 +278,27 @@ void bench_rfc6979_hmac_sha256(void* arg) {\n     secp256k1_rfc6979_hmac_sha256_t rng;\n \n     for (i = 0; i < 20000; i++) {\n-        secp256k1_rfc6979_hmac_sha256_initialize(&rng, data->data, 32, data->data, 32, NULL, 0);\n+        secp256k1_rfc6979_hmac_sha256_initialize(&rng, data->data, 64);\n         secp256k1_rfc6979_hmac_sha256_generate(&rng, data->data, 32);\n     }\n }\n \n+void bench_context_verify(void* arg) {\n+    int i;\n+    (void)arg;\n+    for (i = 0; i < 20; i++) {\n+        secp256k1_context_destroy(secp256k1_context_create(SECP256K1_CONTEXT_VERIFY));\n+    }\n+}\n+\n+void bench_context_sign(void* arg) {\n+    int i;\n+    (void)arg;\n+    for (i = 0; i < 200; i++) {\n+        secp256k1_context_destroy(secp256k1_context_create(SECP256K1_CONTEXT_SIGN));\n+    }\n+}\n+\n \n int have_flag(int argc, char** argv, char *flag) {\n     char** argm = argv + argc;\n@@ -278,7 +307,9 @@ int have_flag(int argc, char** argv, char *flag) {\n         return 1;\n     }\n     while (argv != NULL && argv != argm) {\n-        if (strcmp(*argv, flag) == 0) return 1;\n+        if (strcmp(*argv, flag) == 0) {\n+            return 1;\n+        }\n         argv++;\n     }\n     return 0;\n@@ -309,10 +340,15 @@ int main(int argc, char **argv) {\n     if (have_flag(argc, argv, \"group\") || have_flag(argc, argv, \"add\")) run_benchmark(\"group_add_affine\", bench_group_add_affine, bench_setup, NULL, &data, 10, 200000);\n     if (have_flag(argc, argv, \"group\") || have_flag(argc, argv, \"add\")) run_benchmark(\"group_add_affine_var\", bench_group_add_affine_var, bench_setup, NULL, &data, 10, 200000);\n \n+    if (have_flag(argc, argv, \"ecmult\") || have_flag(argc, argv, \"wnaf\")) run_benchmark(\"wnaf_const\", bench_wnaf_const, bench_setup, NULL, &data, 10, 20000);\n     if (have_flag(argc, argv, \"ecmult\") || have_flag(argc, argv, \"wnaf\")) run_benchmark(\"ecmult_wnaf\", bench_ecmult_wnaf, bench_setup, NULL, &data, 10, 20000);\n \n     if (have_flag(argc, argv, \"hash\") || have_flag(argc, argv, \"sha256\")) run_benchmark(\"hash_sha256\", bench_sha256, bench_setup, NULL, &data, 10, 20000);\n     if (have_flag(argc, argv, \"hash\") || have_flag(argc, argv, \"hmac\")) run_benchmark(\"hash_hmac_sha256\", bench_hmac_sha256, bench_setup, NULL, &data, 10, 20000);\n     if (have_flag(argc, argv, \"hash\") || have_flag(argc, argv, \"rng6979\")) run_benchmark(\"hash_rfc6979_hmac_sha256\", bench_rfc6979_hmac_sha256, bench_setup, NULL, &data, 10, 20000);\n+\n+    if (have_flag(argc, argv, \"context\") || have_flag(argc, argv, \"verify\")) run_benchmark(\"context_verify\", bench_context_verify, bench_setup, NULL, &data, 10, 20);\n+    if (have_flag(argc, argv, \"context\") || have_flag(argc, argv, \"sign\")) run_benchmark(\"context_sign\", bench_context_sign, bench_setup, NULL, &data, 10, 200);\n+\n     return 0;\n }"
      },
      {
        "sha": "6489378cc64ab46f79c0c35f556625ab46f5b195",
        "filename": "src/secp256k1/src/bench_recover.c",
        "status": "modified",
        "additions": 17,
        "deletions": 8,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/bench_recover.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/bench_recover.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/bench_recover.c?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -1,32 +1,37 @@\n /**********************************************************************\n- * Copyright (c) 2014 Pieter Wuille                                   *\n+ * Copyright (c) 2014-2015 Pieter Wuille                              *\n  * Distributed under the MIT software license, see the accompanying   *\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n #include \"include/secp256k1.h\"\n+#include \"include/secp256k1_recovery.h\"\n #include \"util.h\"\n #include \"bench.h\"\n \n typedef struct {\n-    secp256k1_context_t *ctx;\n+    secp256k1_context *ctx;\n     unsigned char msg[32];\n     unsigned char sig[64];\n } bench_recover_t;\n \n void bench_recover(void* arg) {\n     int i;\n     bench_recover_t *data = (bench_recover_t*)arg;\n-    unsigned char pubkey[33];\n+    secp256k1_pubkey pubkey;\n+    unsigned char pubkeyc[33];\n \n     for (i = 0; i < 20000; i++) {\n         int j;\n-        int pubkeylen = 33;\n-        CHECK(secp256k1_ecdsa_recover_compact(data->ctx, data->msg, data->sig, pubkey, &pubkeylen, 1, i % 2));\n+        size_t pubkeylen = 33;\n+        secp256k1_ecdsa_recoverable_signature sig;\n+        CHECK(secp256k1_ecdsa_recoverable_signature_parse_compact(data->ctx, &sig, data->sig, i % 2));\n+        CHECK(secp256k1_ecdsa_recover(data->ctx, &pubkey, &sig, data->msg));\n+        CHECK(secp256k1_ec_pubkey_serialize(data->ctx, pubkeyc, &pubkeylen, &pubkey, SECP256K1_EC_COMPRESSED));\n         for (j = 0; j < 32; j++) {\n             data->sig[j + 32] = data->msg[j];    /* Move former message to S. */\n             data->msg[j] = data->sig[j];         /* Move former R to message. */\n-            data->sig[j] = pubkey[j + 1];        /* Move recovered pubkey X coordinate to R (which must be a valid X coordinate). */\n+            data->sig[j] = pubkeyc[j + 1];       /* Move recovered pubkey X coordinate to R (which must be a valid X coordinate). */\n         }\n     }\n }\n@@ -35,8 +40,12 @@ void bench_recover_setup(void* arg) {\n     int i;\n     bench_recover_t *data = (bench_recover_t*)arg;\n \n-    for (i = 0; i < 32; i++) data->msg[i] = 1 + i;\n-    for (i = 0; i < 64; i++) data->sig[i] = 65 + i;\n+    for (i = 0; i < 32; i++) {\n+        data->msg[i] = 1 + i;\n+    }\n+    for (i = 0; i < 64; i++) {\n+        data->sig[i] = 65 + i;\n+    }\n }\n \n int main(void) {"
      },
      {
        "sha": "5f137dda23ef3a62326a6aee21cd152fa09860da",
        "filename": "src/secp256k1/src/bench_schnorr_verify.c",
        "status": "added",
        "additions": 73,
        "deletions": 0,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/bench_schnorr_verify.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/bench_schnorr_verify.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/bench_schnorr_verify.c?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -0,0 +1,73 @@\n+/**********************************************************************\n+ * Copyright (c) 2014 Pieter Wuille                                   *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include <stdio.h>\n+#include <string.h>\n+\n+#include \"include/secp256k1.h\"\n+#include \"include/secp256k1_schnorr.h\"\n+#include \"util.h\"\n+#include \"bench.h\"\n+\n+typedef struct {\n+    unsigned char key[32];\n+    unsigned char sig[64];\n+    unsigned char pubkey[33];\n+    size_t pubkeylen;\n+} benchmark_schnorr_sig_t;\n+\n+typedef struct {\n+    secp256k1_context *ctx;\n+    unsigned char msg[32];\n+    benchmark_schnorr_sig_t sigs[64];\n+    int numsigs;\n+} benchmark_schnorr_verify_t;\n+\n+static void benchmark_schnorr_init(void* arg) {\n+    int i, k;\n+    benchmark_schnorr_verify_t* data = (benchmark_schnorr_verify_t*)arg;\n+\n+    for (i = 0; i < 32; i++) {\n+        data->msg[i] = 1 + i;\n+    }\n+    for (k = 0; k < data->numsigs; k++) {\n+        secp256k1_pubkey pubkey;\n+        for (i = 0; i < 32; i++) {\n+            data->sigs[k].key[i] = 33 + i + k;\n+        }\n+        secp256k1_schnorr_sign(data->ctx, data->sigs[k].sig, data->msg, data->sigs[k].key, NULL, NULL);\n+        data->sigs[k].pubkeylen = 33;\n+        CHECK(secp256k1_ec_pubkey_create(data->ctx, &pubkey, data->sigs[k].key));\n+        CHECK(secp256k1_ec_pubkey_serialize(data->ctx, data->sigs[k].pubkey, &data->sigs[k].pubkeylen, &pubkey, SECP256K1_EC_COMPRESSED));\n+    }\n+}\n+\n+static void benchmark_schnorr_verify(void* arg) {\n+    int i;\n+    benchmark_schnorr_verify_t* data = (benchmark_schnorr_verify_t*)arg;\n+\n+    for (i = 0; i < 20000 / data->numsigs; i++) {\n+        secp256k1_pubkey pubkey;\n+        data->sigs[0].sig[(i >> 8) % 64] ^= (i & 0xFF);\n+        CHECK(secp256k1_ec_pubkey_parse(data->ctx, &pubkey, data->sigs[0].pubkey, data->sigs[0].pubkeylen));\n+        CHECK(secp256k1_schnorr_verify(data->ctx, data->sigs[0].sig, data->msg, &pubkey) == ((i & 0xFF) == 0));\n+        data->sigs[0].sig[(i >> 8) % 64] ^= (i & 0xFF);\n+    }\n+}\n+\n+\n+\n+int main(void) {\n+    benchmark_schnorr_verify_t data;\n+\n+    data.ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+\n+    data.numsigs = 1;\n+    run_benchmark(\"schnorr_verify\", benchmark_schnorr_verify, benchmark_schnorr_init, NULL, &data, 10, 20000);\n+\n+    secp256k1_context_destroy(data.ctx);\n+    return 0;\n+}"
      },
      {
        "sha": "ed7224d757e417cb324a3b2e15f0f3268fe68d3a",
        "filename": "src/secp256k1/src/bench_sign.c",
        "status": "modified",
        "additions": 14,
        "deletions": 8,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/bench_sign.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/bench_sign.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/bench_sign.c?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -9,7 +9,7 @@\n #include \"bench.h\"\n \n typedef struct {\n-    secp256k1_context_t* ctx;\n+    secp256k1_context* ctx;\n     unsigned char msg[32];\n     unsigned char key[32];\n } bench_sign_t;\n@@ -18,22 +18,28 @@ static void bench_sign_setup(void* arg) {\n     int i;\n     bench_sign_t *data = (bench_sign_t*)arg;\n \n-    for (i = 0; i < 32; i++) data->msg[i] = i + 1;\n-    for (i = 0; i < 32; i++) data->key[i] = i + 65;\n+    for (i = 0; i < 32; i++) {\n+        data->msg[i] = i + 1;\n+    }\n+    for (i = 0; i < 32; i++) {\n+        data->key[i] = i + 65;\n+    }\n }\n \n static void bench_sign(void* arg) {\n     int i;\n     bench_sign_t *data = (bench_sign_t*)arg;\n \n-    unsigned char sig[64];\n+    unsigned char sig[74];\n     for (i = 0; i < 20000; i++) {\n+        size_t siglen = 74;\n         int j;\n-        int recid = 0;\n-        CHECK(secp256k1_ecdsa_sign_compact(data->ctx, data->msg, sig, data->key, NULL, NULL, &recid));\n+        secp256k1_ecdsa_signature signature;\n+        CHECK(secp256k1_ecdsa_sign(data->ctx, &signature, data->msg, data->key, NULL, NULL));\n+        CHECK(secp256k1_ecdsa_signature_serialize_der(data->ctx, sig, &siglen, &signature));\n         for (j = 0; j < 32; j++) {\n-            data->msg[j] = sig[j];             /* Move former R to message. */\n-            data->key[j] = sig[j + 32];        /* Move former S to key.     */\n+            data->msg[j] = sig[j];\n+            data->key[j] = sig[j + 32];\n         }\n     }\n }"
      },
      {
        "sha": "5718320cda29888f442a77bebbeea649fc092ece",
        "filename": "src/secp256k1/src/bench_verify.c",
        "status": "modified",
        "additions": 20,
        "deletions": 8,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/bench_verify.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/bench_verify.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/bench_verify.c?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -12,24 +12,28 @@\n #include \"bench.h\"\n \n typedef struct {\n-    secp256k1_context_t *ctx;\n+    secp256k1_context *ctx;\n     unsigned char msg[32];\n     unsigned char key[32];\n     unsigned char sig[72];\n-    int siglen;\n+    size_t siglen;\n     unsigned char pubkey[33];\n-    int pubkeylen;\n+    size_t pubkeylen;\n } benchmark_verify_t;\n \n static void benchmark_verify(void* arg) {\n     int i;\n     benchmark_verify_t* data = (benchmark_verify_t*)arg;\n \n     for (i = 0; i < 20000; i++) {\n+        secp256k1_pubkey pubkey;\n+        secp256k1_ecdsa_signature sig;\n         data->sig[data->siglen - 1] ^= (i & 0xFF);\n         data->sig[data->siglen - 2] ^= ((i >> 8) & 0xFF);\n         data->sig[data->siglen - 3] ^= ((i >> 16) & 0xFF);\n-        CHECK(secp256k1_ecdsa_verify(data->ctx, data->msg, data->sig, data->siglen, data->pubkey, data->pubkeylen) == (i == 0));\n+        CHECK(secp256k1_ec_pubkey_parse(data->ctx, &pubkey, data->pubkey, data->pubkeylen) == 1);\n+        CHECK(secp256k1_ecdsa_signature_parse_der(data->ctx, &sig, data->sig, data->siglen) == 1);\n+        CHECK(secp256k1_ecdsa_verify(data->ctx, &sig, data->msg, &pubkey) == (i == 0));\n         data->sig[data->siglen - 1] ^= (i & 0xFF);\n         data->sig[data->siglen - 2] ^= ((i >> 8) & 0xFF);\n         data->sig[data->siglen - 3] ^= ((i >> 16) & 0xFF);\n@@ -38,16 +42,24 @@ static void benchmark_verify(void* arg) {\n \n int main(void) {\n     int i;\n+    secp256k1_pubkey pubkey;\n+    secp256k1_ecdsa_signature sig;\n     benchmark_verify_t data;\n \n     data.ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n \n-    for (i = 0; i < 32; i++) data.msg[i] = 1 + i;\n-    for (i = 0; i < 32; i++) data.key[i] = 33 + i;\n+    for (i = 0; i < 32; i++) {\n+        data.msg[i] = 1 + i;\n+    }\n+    for (i = 0; i < 32; i++) {\n+        data.key[i] = 33 + i;\n+    }\n     data.siglen = 72;\n-    secp256k1_ecdsa_sign(data.ctx, data.msg, data.sig, &data.siglen, data.key, NULL, NULL);\n+    CHECK(secp256k1_ecdsa_sign(data.ctx, &sig, data.msg, data.key, NULL, NULL));\n+    CHECK(secp256k1_ecdsa_signature_serialize_der(data.ctx, data.sig, &data.siglen, &sig));\n+    CHECK(secp256k1_ec_pubkey_create(data.ctx, &pubkey, data.key));\n     data.pubkeylen = 33;\n-    CHECK(secp256k1_ec_pubkey_create(data.ctx, data.pubkey, &data.pubkeylen, data.key, 1));\n+    CHECK(secp256k1_ec_pubkey_serialize(data.ctx, data.pubkey, &data.pubkeylen, &pubkey, SECP256K1_EC_COMPRESSED) == 1);\n \n     run_benchmark(\"ecdsa_verify\", benchmark_verify, NULL, NULL, &data, 10, 20000);\n "
      },
      {
        "sha": "54ae101b924138552080eb3fd088654ec481f6a3",
        "filename": "src/secp256k1/src/ecdsa.h",
        "status": "modified",
        "additions": 6,
        "deletions": 9,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/ecdsa.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/ecdsa.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecdsa.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -7,18 +7,15 @@\n #ifndef _SECP256K1_ECDSA_\n #define _SECP256K1_ECDSA_\n \n+#include <stddef.h>\n+\n #include \"scalar.h\"\n #include \"group.h\"\n #include \"ecmult.h\"\n \n-typedef struct {\n-    secp256k1_scalar_t r, s;\n-} secp256k1_ecdsa_sig_t;\n-\n-static int secp256k1_ecdsa_sig_parse(secp256k1_ecdsa_sig_t *r, const unsigned char *sig, int size);\n-static int secp256k1_ecdsa_sig_serialize(unsigned char *sig, int *size, const secp256k1_ecdsa_sig_t *a);\n-static int secp256k1_ecdsa_sig_verify(const secp256k1_ecmult_context_t *ctx, const secp256k1_ecdsa_sig_t *sig, const secp256k1_ge_t *pubkey, const secp256k1_scalar_t *message);\n-static int secp256k1_ecdsa_sig_sign(const secp256k1_ecmult_gen_context_t *ctx, secp256k1_ecdsa_sig_t *sig, const secp256k1_scalar_t *seckey, const secp256k1_scalar_t *message, const secp256k1_scalar_t *nonce, int *recid);\n-static int secp256k1_ecdsa_sig_recover(const secp256k1_ecmult_context_t *ctx, const secp256k1_ecdsa_sig_t *sig, secp256k1_ge_t *pubkey, const secp256k1_scalar_t *message, int recid);\n+static int secp256k1_ecdsa_sig_parse(secp256k1_scalar *r, secp256k1_scalar *s, const unsigned char *sig, size_t size);\n+static int secp256k1_ecdsa_sig_serialize(unsigned char *sig, size_t *size, const secp256k1_scalar *r, const secp256k1_scalar *s);\n+static int secp256k1_ecdsa_sig_verify(const secp256k1_ecmult_context *ctx, const secp256k1_scalar* r, const secp256k1_scalar* s, const secp256k1_ge *pubkey, const secp256k1_scalar *message);\n+static int secp256k1_ecdsa_sig_sign(const secp256k1_ecmult_gen_context *ctx, secp256k1_scalar* r, secp256k1_scalar* s, const secp256k1_scalar *seckey, const secp256k1_scalar *message, const secp256k1_scalar *nonce, int *recid);\n \n #endif"
      },
      {
        "sha": "d110b4bb1dcf33f5f9f73a20e03cd853a2ef0b0e",
        "filename": "src/secp256k1/src/ecdsa_impl.h",
        "status": "modified",
        "additions": 142,
        "deletions": 102,
        "changes": 244,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/ecdsa_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/ecdsa_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecdsa_impl.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -1,5 +1,5 @@\n /**********************************************************************\n- * Copyright (c) 2013, 2014 Pieter Wuille                               *\n+ * Copyright (c) 2013-2015 Pieter Wuille                              *\n  * Distributed under the MIT software license, see the accompanying   *\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n@@ -28,7 +28,7 @@\n  *  sage: '%x' % (EllipticCurve ([F (a), F (b)]).order())\n  *   'fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'\n  */\n-static const secp256k1_fe_t secp256k1_ecdsa_const_order_as_fe = SECP256K1_FE_CONST(\n+static const secp256k1_fe secp256k1_ecdsa_const_order_as_fe = SECP256K1_FE_CONST(\n     0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFEUL,\n     0xBAAEDCE6UL, 0xAF48A03BUL, 0xBFD25E8CUL, 0xD0364141UL\n );\n@@ -42,82 +42,150 @@ static const secp256k1_fe_t secp256k1_ecdsa_const_order_as_fe = SECP256K1_FE_CON\n  *  sage: '%x' % (p - EllipticCurve ([F (a), F (b)]).order())\n  *   '14551231950b75fc4402da1722fc9baee'\n  */\n-static const secp256k1_fe_t secp256k1_ecdsa_const_p_minus_order = SECP256K1_FE_CONST(\n+static const secp256k1_fe secp256k1_ecdsa_const_p_minus_order = SECP256K1_FE_CONST(\n     0, 0, 0, 1, 0x45512319UL, 0x50B75FC4UL, 0x402DA172UL, 0x2FC9BAEEUL\n );\n \n-static int secp256k1_ecdsa_sig_parse(secp256k1_ecdsa_sig_t *r, const unsigned char *sig, int size) {\n-    unsigned char ra[32] = {0}, sa[32] = {0};\n-    const unsigned char *rp;\n-    const unsigned char *sp;\n-    int lenr;\n-    int lens;\n-    int overflow;\n-    if (sig[0] != 0x30) {\n-        return 0;\n+static int secp256k1_der_read_len(const unsigned char **sigp, const unsigned char *sigend) {\n+    int lenleft, b1;\n+    size_t ret = 0;\n+    if (*sigp >= sigend) {\n+        return -1;\n     }\n-    lenr = sig[3];\n-    if (5+lenr >= size) {\n-        return 0;\n+    b1 = *((*sigp)++);\n+    if (b1 == 0xFF) {\n+        /* X.690-0207 8.1.3.5.c the value 0xFF shall not be used. */\n+        return -1;\n     }\n-    lens = sig[lenr+5];\n-    if (sig[1] != lenr+lens+4) {\n-        return 0;\n+    if ((b1 & 0x80) == 0) {\n+        /* X.690-0207 8.1.3.4 short form length octets */\n+        return b1;\n     }\n-    if (lenr+lens+6 > size) {\n-        return 0;\n+    if (b1 == 0x80) {\n+        /* Indefinite length is not allowed in DER. */\n+        return -1;\n+    }\n+    /* X.690-207 8.1.3.5 long form length octets */\n+    lenleft = b1 & 0x7F;\n+    if (lenleft > sigend - *sigp) {\n+        return -1;\n+    }\n+    if (**sigp == 0) {\n+        /* Not the shortest possible length encoding. */\n+        return -1;\n+    }\n+    if ((size_t)lenleft > sizeof(size_t)) {\n+        /* The resulting length would exceed the range of a size_t, so\n+         * certainly longer than the passed array size.\n+         */\n+        return -1;\n+    }\n+    while (lenleft > 0) {\n+        if ((ret >> ((sizeof(size_t) - 1) * 8)) != 0) {\n+        }\n+        ret = (ret << 8) | **sigp;\n+        if (ret + lenleft > (size_t)(sigend - *sigp)) {\n+            /* Result exceeds the length of the passed array. */\n+            return -1;\n+        }\n+        (*sigp)++;\n+        lenleft--;\n+    }\n+    if (ret < 128) {\n+        /* Not the shortest possible length encoding. */\n+        return -1;\n     }\n-    if (sig[2] != 0x02) {\n+    return ret;\n+}\n+\n+static int secp256k1_der_parse_integer(secp256k1_scalar *r, const unsigned char **sig, const unsigned char *sigend) {\n+    int overflow = 0;\n+    unsigned char ra[32] = {0};\n+    int rlen;\n+\n+    if (*sig == sigend || **sig != 0x02) {\n+        /* Not a primitive integer (X.690-0207 8.3.1). */\n         return 0;\n     }\n-    if (lenr == 0) {\n+    (*sig)++;\n+    rlen = secp256k1_der_read_len(sig, sigend);\n+    if (rlen <= 0 || (*sig) + rlen > sigend) {\n+        /* Exceeds bounds or not at least length 1 (X.690-0207 8.3.1).  */\n         return 0;\n     }\n-    if (sig[lenr+4] != 0x02) {\n+    if (**sig == 0x00 && rlen > 1 && (((*sig)[1]) & 0x80) == 0x00) {\n+        /* Excessive 0x00 padding. */\n         return 0;\n     }\n-    if (lens == 0) {\n+    if (**sig == 0xFF && rlen > 1 && (((*sig)[1]) & 0x80) == 0x80) {\n+        /* Excessive 0xFF padding. */\n         return 0;\n     }\n-    sp = sig + 6 + lenr;\n-    while (lens > 0 && sp[0] == 0) {\n-        lens--;\n-        sp++;\n+    if ((**sig & 0x80) == 0x80) {\n+        /* Negative. */\n+        overflow = 1;\n+    }\n+    while (rlen > 0 && **sig == 0) {\n+        /* Skip leading zero bytes */\n+        rlen--;\n+        (*sig)++;\n     }\n-    if (lens > 32) {\n+    if (rlen > 32) {\n+        overflow = 1;\n+    }\n+    if (!overflow) {\n+        memcpy(ra + 32 - rlen, *sig, rlen);\n+        secp256k1_scalar_set_b32(r, ra, &overflow);\n+    }\n+    if (overflow) {\n+        secp256k1_scalar_set_int(r, 0);\n+    }\n+    (*sig) += rlen;\n+    return 1;\n+}\n+\n+static int secp256k1_ecdsa_sig_parse(secp256k1_scalar *rr, secp256k1_scalar *rs, const unsigned char *sig, size_t size) {\n+    const unsigned char *sigend = sig + size;\n+    int rlen;\n+    if (sig == sigend || *(sig++) != 0x30) {\n+        /* The encoding doesn't start with a constructed sequence (X.690-0207 8.9.1). */\n         return 0;\n     }\n-    rp = sig + 4;\n-    while (lenr > 0 && rp[0] == 0) {\n-        lenr--;\n-        rp++;\n+    rlen = secp256k1_der_read_len(&sig, sigend);\n+    if (rlen < 0 || sig + rlen > sigend) {\n+        /* Tuple exceeds bounds */\n+        return 0;\n     }\n-    if (lenr > 32) {\n+    if (sig + rlen != sigend) {\n+        /* Garbage after tuple. */\n         return 0;\n     }\n-    memcpy(ra + 32 - lenr, rp, lenr);\n-    memcpy(sa + 32 - lens, sp, lens);\n-    overflow = 0;\n-    secp256k1_scalar_set_b32(&r->r, ra, &overflow);\n-    if (overflow) {\n+\n+    if (!secp256k1_der_parse_integer(rr, &sig, sigend)) {\n         return 0;\n     }\n-    secp256k1_scalar_set_b32(&r->s, sa, &overflow);\n-    if (overflow) {\n+    if (!secp256k1_der_parse_integer(rs, &sig, sigend)) {\n         return 0;\n     }\n+\n+    if (sig != sigend) {\n+        /* Trailing garbage inside tuple. */\n+        return 0;\n+    }\n+\n     return 1;\n }\n \n-static int secp256k1_ecdsa_sig_serialize(unsigned char *sig, int *size, const secp256k1_ecdsa_sig_t *a) {\n+static int secp256k1_ecdsa_sig_serialize(unsigned char *sig, size_t *size, const secp256k1_scalar* ar, const secp256k1_scalar* as) {\n     unsigned char r[33] = {0}, s[33] = {0};\n     unsigned char *rp = r, *sp = s;\n-    int lenR = 33, lenS = 33;\n-    secp256k1_scalar_get_b32(&r[1], &a->r);\n-    secp256k1_scalar_get_b32(&s[1], &a->s);\n+    size_t lenR = 33, lenS = 33;\n+    secp256k1_scalar_get_b32(&r[1], ar);\n+    secp256k1_scalar_get_b32(&s[1], as);\n     while (lenR > 1 && rp[0] == 0 && rp[1] < 0x80) { lenR--; rp++; }\n     while (lenS > 1 && sp[0] == 0 && sp[1] < 0x80) { lenS--; sp++; }\n     if (*size < 6+lenS+lenR) {\n+        *size = 6 + lenS + lenR;\n         return 0;\n     }\n     *size = 6 + lenS + lenR;\n@@ -132,26 +200,26 @@ static int secp256k1_ecdsa_sig_serialize(unsigned char *sig, int *size, const se\n     return 1;\n }\n \n-static int secp256k1_ecdsa_sig_verify(const secp256k1_ecmult_context_t *ctx, const secp256k1_ecdsa_sig_t *sig, const secp256k1_ge_t *pubkey, const secp256k1_scalar_t *message) {\n+static int secp256k1_ecdsa_sig_verify(const secp256k1_ecmult_context *ctx, const secp256k1_scalar *sigr, const secp256k1_scalar *sigs, const secp256k1_ge *pubkey, const secp256k1_scalar *message) {\n     unsigned char c[32];\n-    secp256k1_scalar_t sn, u1, u2;\n-    secp256k1_fe_t xr;\n-    secp256k1_gej_t pubkeyj;\n-    secp256k1_gej_t pr;\n+    secp256k1_scalar sn, u1, u2;\n+    secp256k1_fe xr;\n+    secp256k1_gej pubkeyj;\n+    secp256k1_gej pr;\n \n-    if (secp256k1_scalar_is_zero(&sig->r) || secp256k1_scalar_is_zero(&sig->s)) {\n+    if (secp256k1_scalar_is_zero(sigr) || secp256k1_scalar_is_zero(sigs)) {\n         return 0;\n     }\n \n-    secp256k1_scalar_inverse_var(&sn, &sig->s);\n+    secp256k1_scalar_inverse_var(&sn, sigs);\n     secp256k1_scalar_mul(&u1, &sn, message);\n-    secp256k1_scalar_mul(&u2, &sn, &sig->r);\n+    secp256k1_scalar_mul(&u2, &sn, sigr);\n     secp256k1_gej_set_ge(&pubkeyj, pubkey);\n     secp256k1_ecmult(ctx, &pr, &pubkeyj, &u2, &u1);\n     if (secp256k1_gej_is_infinity(&pr)) {\n         return 0;\n     }\n-    secp256k1_scalar_get_b32(c, &sig->r);\n+    secp256k1_scalar_get_b32(c, sigr);\n     secp256k1_fe_set_b32(&xr, c);\n \n     /** We now have the recomputed R point in pr, and its claimed x coordinate (modulo n)\n@@ -171,11 +239,11 @@ static int secp256k1_ecdsa_sig_verify(const secp256k1_ecmult_context_t *ctx, con\n      *  secp256k1_gej_eq_x implements the (xr * pr.z^2 mod p == pr.x) test.\n      */\n     if (secp256k1_gej_eq_x_var(&xr, &pr)) {\n-        /* xr.x == xr * xr.z^2 mod p, so the signature is valid. */\n+        /* xr * pr.z^2 mod p == pr.x, so the signature is valid. */\n         return 1;\n     }\n     if (secp256k1_fe_cmp_var(&xr, &secp256k1_ecdsa_const_p_minus_order) >= 0) {\n-        /* xr + p >= n, so we can skip testing the second case. */\n+        /* xr + n >= p, so we can skip testing the second case. */\n         return 0;\n     }\n     secp256k1_fe_add(&xr, &secp256k1_ecdsa_const_order_as_fe);\n@@ -186,73 +254,45 @@ static int secp256k1_ecdsa_sig_verify(const secp256k1_ecmult_context_t *ctx, con\n     return 0;\n }\n \n-static int secp256k1_ecdsa_sig_recover(const secp256k1_ecmult_context_t *ctx, const secp256k1_ecdsa_sig_t *sig, secp256k1_ge_t *pubkey, const secp256k1_scalar_t *message, int recid) {\n-    unsigned char brx[32];\n-    secp256k1_fe_t fx;\n-    secp256k1_ge_t x;\n-    secp256k1_gej_t xj;\n-    secp256k1_scalar_t rn, u1, u2;\n-    secp256k1_gej_t qj;\n-\n-    if (secp256k1_scalar_is_zero(&sig->r) || secp256k1_scalar_is_zero(&sig->s)) {\n-        return 0;\n-    }\n-\n-    secp256k1_scalar_get_b32(brx, &sig->r);\n-    VERIFY_CHECK(secp256k1_fe_set_b32(&fx, brx)); /* brx comes from a scalar, so is less than the order; certainly less than p */\n-    if (recid & 2) {\n-        if (secp256k1_fe_cmp_var(&fx, &secp256k1_ecdsa_const_p_minus_order) >= 0) {\n-            return 0;\n-        }\n-        secp256k1_fe_add(&fx, &secp256k1_ecdsa_const_order_as_fe);\n-    }\n-    if (!secp256k1_ge_set_xo_var(&x, &fx, recid & 1)) {\n-        return 0;\n-    }\n-    secp256k1_gej_set_ge(&xj, &x);\n-    secp256k1_scalar_inverse_var(&rn, &sig->r);\n-    secp256k1_scalar_mul(&u1, &rn, message);\n-    secp256k1_scalar_negate(&u1, &u1);\n-    secp256k1_scalar_mul(&u2, &rn, &sig->s);\n-    secp256k1_ecmult(ctx, &qj, &xj, &u2, &u1);\n-    secp256k1_ge_set_gej_var(pubkey, &qj);\n-    return !secp256k1_gej_is_infinity(&qj);\n-}\n-\n-static int secp256k1_ecdsa_sig_sign(const secp256k1_ecmult_gen_context_t *ctx, secp256k1_ecdsa_sig_t *sig, const secp256k1_scalar_t *seckey, const secp256k1_scalar_t *message, const secp256k1_scalar_t *nonce, int *recid) {\n+static int secp256k1_ecdsa_sig_sign(const secp256k1_ecmult_gen_context *ctx, secp256k1_scalar *sigr, secp256k1_scalar *sigs, const secp256k1_scalar *seckey, const secp256k1_scalar *message, const secp256k1_scalar *nonce, int *recid) {\n     unsigned char b[32];\n-    secp256k1_gej_t rp;\n-    secp256k1_ge_t r;\n-    secp256k1_scalar_t n;\n+    secp256k1_gej rp;\n+    secp256k1_ge r;\n+    secp256k1_scalar n;\n     int overflow = 0;\n \n     secp256k1_ecmult_gen(ctx, &rp, nonce);\n     secp256k1_ge_set_gej(&r, &rp);\n     secp256k1_fe_normalize(&r.x);\n     secp256k1_fe_normalize(&r.y);\n     secp256k1_fe_get_b32(b, &r.x);\n-    secp256k1_scalar_set_b32(&sig->r, b, &overflow);\n-    if (secp256k1_scalar_is_zero(&sig->r)) {\n-        /* P.x = order is on the curve, so technically sig->r could end up zero, which would be an invalid signature. */\n+    secp256k1_scalar_set_b32(sigr, b, &overflow);\n+    if (secp256k1_scalar_is_zero(sigr)) {\n+        /* P.x = order is on the curve, so technically sig->r could end up zero, which would be an invalid signature.\n+         * This branch is cryptographically unreachable as hitting it requires finding the discrete log of P.x = N.\n+         */\n         secp256k1_gej_clear(&rp);\n         secp256k1_ge_clear(&r);\n         return 0;\n     }\n     if (recid) {\n+        /* The overflow condition is cryptographically unreachable as hitting it requires finding the discrete log\n+         * of some P where P.x >= order, and only 1 in about 2^127 points meet this criteria.\n+         */\n         *recid = (overflow ? 2 : 0) | (secp256k1_fe_is_odd(&r.y) ? 1 : 0);\n     }\n-    secp256k1_scalar_mul(&n, &sig->r, seckey);\n+    secp256k1_scalar_mul(&n, sigr, seckey);\n     secp256k1_scalar_add(&n, &n, message);\n-    secp256k1_scalar_inverse(&sig->s, nonce);\n-    secp256k1_scalar_mul(&sig->s, &sig->s, &n);\n+    secp256k1_scalar_inverse(sigs, nonce);\n+    secp256k1_scalar_mul(sigs, sigs, &n);\n     secp256k1_scalar_clear(&n);\n     secp256k1_gej_clear(&rp);\n     secp256k1_ge_clear(&r);\n-    if (secp256k1_scalar_is_zero(&sig->s)) {\n+    if (secp256k1_scalar_is_zero(sigs)) {\n         return 0;\n     }\n-    if (secp256k1_scalar_is_high(&sig->s)) {\n-        secp256k1_scalar_negate(&sig->s, &sig->s);\n+    if (secp256k1_scalar_is_high(sigs)) {\n+        secp256k1_scalar_negate(sigs, sigs);\n         if (recid) {\n             *recid ^= 1;\n         }"
      },
      {
        "sha": "42739a3bea7c08abfbefb6e744a5ad904993ce18",
        "filename": "src/secp256k1/src/eckey.h",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/eckey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/eckey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/eckey.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -7,20 +7,19 @@\n #ifndef _SECP256K1_ECKEY_\n #define _SECP256K1_ECKEY_\n \n+#include <stddef.h>\n+\n #include \"group.h\"\n #include \"scalar.h\"\n #include \"ecmult.h\"\n #include \"ecmult_gen.h\"\n \n-static int secp256k1_eckey_pubkey_parse(secp256k1_ge_t *elem, const unsigned char *pub, int size);\n-static int secp256k1_eckey_pubkey_serialize(secp256k1_ge_t *elem, unsigned char *pub, int *size, int compressed);\n-\n-static int secp256k1_eckey_privkey_parse(secp256k1_scalar_t *key, const unsigned char *privkey, int privkeylen);\n-static int secp256k1_eckey_privkey_serialize(const secp256k1_ecmult_gen_context_t *ctx, unsigned char *privkey, int *privkeylen, const secp256k1_scalar_t *key, int compressed);\n+static int secp256k1_eckey_pubkey_parse(secp256k1_ge *elem, const unsigned char *pub, size_t size);\n+static int secp256k1_eckey_pubkey_serialize(secp256k1_ge *elem, unsigned char *pub, size_t *size, int compressed);\n \n-static int secp256k1_eckey_privkey_tweak_add(secp256k1_scalar_t *key, const secp256k1_scalar_t *tweak);\n-static int secp256k1_eckey_pubkey_tweak_add(const secp256k1_ecmult_context_t *ctx, secp256k1_ge_t *key, const secp256k1_scalar_t *tweak);\n-static int secp256k1_eckey_privkey_tweak_mul(secp256k1_scalar_t *key, const secp256k1_scalar_t *tweak);\n-static int secp256k1_eckey_pubkey_tweak_mul(const secp256k1_ecmult_context_t *ctx, secp256k1_ge_t *key, const secp256k1_scalar_t *tweak);\n+static int secp256k1_eckey_privkey_tweak_add(secp256k1_scalar *key, const secp256k1_scalar *tweak);\n+static int secp256k1_eckey_pubkey_tweak_add(const secp256k1_ecmult_context *ctx, secp256k1_ge *key, const secp256k1_scalar *tweak);\n+static int secp256k1_eckey_privkey_tweak_mul(secp256k1_scalar *key, const secp256k1_scalar *tweak);\n+static int secp256k1_eckey_pubkey_tweak_mul(const secp256k1_ecmult_context *ctx, secp256k1_ge *key, const secp256k1_scalar *tweak);\n \n #endif"
      },
      {
        "sha": "ce38071ac2e599dbb70255ec3b8dbf9deadc5fa0",
        "filename": "src/secp256k1/src/eckey_impl.h",
        "status": "modified",
        "additions": 12,
        "deletions": 115,
        "changes": 127,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/eckey_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/eckey_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/eckey_impl.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -14,12 +14,12 @@\n #include \"group.h\"\n #include \"ecmult_gen.h\"\n \n-static int secp256k1_eckey_pubkey_parse(secp256k1_ge_t *elem, const unsigned char *pub, int size) {\n+static int secp256k1_eckey_pubkey_parse(secp256k1_ge *elem, const unsigned char *pub, size_t size) {\n     if (size == 33 && (pub[0] == 0x02 || pub[0] == 0x03)) {\n-        secp256k1_fe_t x;\n+        secp256k1_fe x;\n         return secp256k1_fe_set_b32(&x, pub+1) && secp256k1_ge_set_xo_var(elem, &x, pub[0] == 0x03);\n     } else if (size == 65 && (pub[0] == 0x04 || pub[0] == 0x06 || pub[0] == 0x07)) {\n-        secp256k1_fe_t x, y;\n+        secp256k1_fe x, y;\n         if (!secp256k1_fe_set_b32(&x, pub+1) || !secp256k1_fe_set_b32(&y, pub+33)) {\n             return 0;\n         }\n@@ -33,7 +33,7 @@ static int secp256k1_eckey_pubkey_parse(secp256k1_ge_t *elem, const unsigned cha\n     }\n }\n \n-static int secp256k1_eckey_pubkey_serialize(secp256k1_ge_t *elem, unsigned char *pub, int *size, int compressed) {\n+static int secp256k1_eckey_pubkey_serialize(secp256k1_ge *elem, unsigned char *pub, size_t *size, int compressed) {\n     if (secp256k1_ge_is_infinity(elem)) {\n         return 0;\n     }\n@@ -51,120 +51,17 @@ static int secp256k1_eckey_pubkey_serialize(secp256k1_ge_t *elem, unsigned char\n     return 1;\n }\n \n-static int secp256k1_eckey_privkey_parse(secp256k1_scalar_t *key, const unsigned char *privkey, int privkeylen) {\n-    unsigned char c[32] = {0};\n-    const unsigned char *end = privkey + privkeylen;\n-    int lenb = 0;\n-    int len = 0;\n-    int overflow = 0;\n-    /* sequence header */\n-    if (end < privkey+1 || *privkey != 0x30) {\n-        return 0;\n-    }\n-    privkey++;\n-    /* sequence length constructor */\n-    if (end < privkey+1 || !(*privkey & 0x80)) {\n-        return 0;\n-    }\n-    lenb = *privkey & ~0x80; privkey++;\n-    if (lenb < 1 || lenb > 2) {\n-        return 0;\n-    }\n-    if (end < privkey+lenb) {\n-        return 0;\n-    }\n-    /* sequence length */\n-    len = privkey[lenb-1] | (lenb > 1 ? privkey[lenb-2] << 8 : 0);\n-    privkey += lenb;\n-    if (end < privkey+len) {\n-        return 0;\n-    }\n-    /* sequence element 0: version number (=1) */\n-    if (end < privkey+3 || privkey[0] != 0x02 || privkey[1] != 0x01 || privkey[2] != 0x01) {\n-        return 0;\n-    }\n-    privkey += 3;\n-    /* sequence element 1: octet string, up to 32 bytes */\n-    if (end < privkey+2 || privkey[0] != 0x04 || privkey[1] > 0x20 || end < privkey+2+privkey[1]) {\n-        return 0;\n-    }\n-    memcpy(c + 32 - privkey[1], privkey + 2, privkey[1]);\n-    secp256k1_scalar_set_b32(key, c, &overflow);\n-    memset(c, 0, 32);\n-    return !overflow;\n-}\n-\n-static int secp256k1_eckey_privkey_serialize(const secp256k1_ecmult_gen_context_t *ctx, unsigned char *privkey, int *privkeylen, const secp256k1_scalar_t *key, int compressed) {\n-    secp256k1_gej_t rp;\n-    secp256k1_ge_t r;\n-    int pubkeylen = 0;\n-    secp256k1_ecmult_gen(ctx, &rp, key);\n-    secp256k1_ge_set_gej(&r, &rp);\n-    if (compressed) {\n-        static const unsigned char begin[] = {\n-            0x30,0x81,0xD3,0x02,0x01,0x01,0x04,0x20\n-        };\n-        static const unsigned char middle[] = {\n-            0xA0,0x81,0x85,0x30,0x81,0x82,0x02,0x01,0x01,0x30,0x2C,0x06,0x07,0x2A,0x86,0x48,\n-            0xCE,0x3D,0x01,0x01,0x02,0x21,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n-            0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n-            0xFF,0xFF,0xFE,0xFF,0xFF,0xFC,0x2F,0x30,0x06,0x04,0x01,0x00,0x04,0x01,0x07,0x04,\n-            0x21,0x02,0x79,0xBE,0x66,0x7E,0xF9,0xDC,0xBB,0xAC,0x55,0xA0,0x62,0x95,0xCE,0x87,\n-            0x0B,0x07,0x02,0x9B,0xFC,0xDB,0x2D,0xCE,0x28,0xD9,0x59,0xF2,0x81,0x5B,0x16,0xF8,\n-            0x17,0x98,0x02,0x21,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n-            0xFF,0xFF,0xFF,0xFF,0xFE,0xBA,0xAE,0xDC,0xE6,0xAF,0x48,0xA0,0x3B,0xBF,0xD2,0x5E,\n-            0x8C,0xD0,0x36,0x41,0x41,0x02,0x01,0x01,0xA1,0x24,0x03,0x22,0x00\n-        };\n-        unsigned char *ptr = privkey;\n-        memcpy(ptr, begin, sizeof(begin)); ptr += sizeof(begin);\n-        secp256k1_scalar_get_b32(ptr, key); ptr += 32;\n-        memcpy(ptr, middle, sizeof(middle)); ptr += sizeof(middle);\n-        if (!secp256k1_eckey_pubkey_serialize(&r, ptr, &pubkeylen, 1)) {\n-            return 0;\n-        }\n-        ptr += pubkeylen;\n-        *privkeylen = ptr - privkey;\n-    } else {\n-        static const unsigned char begin[] = {\n-            0x30,0x82,0x01,0x13,0x02,0x01,0x01,0x04,0x20\n-        };\n-        static const unsigned char middle[] = {\n-            0xA0,0x81,0xA5,0x30,0x81,0xA2,0x02,0x01,0x01,0x30,0x2C,0x06,0x07,0x2A,0x86,0x48,\n-            0xCE,0x3D,0x01,0x01,0x02,0x21,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n-            0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n-            0xFF,0xFF,0xFE,0xFF,0xFF,0xFC,0x2F,0x30,0x06,0x04,0x01,0x00,0x04,0x01,0x07,0x04,\n-            0x41,0x04,0x79,0xBE,0x66,0x7E,0xF9,0xDC,0xBB,0xAC,0x55,0xA0,0x62,0x95,0xCE,0x87,\n-            0x0B,0x07,0x02,0x9B,0xFC,0xDB,0x2D,0xCE,0x28,0xD9,0x59,0xF2,0x81,0x5B,0x16,0xF8,\n-            0x17,0x98,0x48,0x3A,0xDA,0x77,0x26,0xA3,0xC4,0x65,0x5D,0xA4,0xFB,0xFC,0x0E,0x11,\n-            0x08,0xA8,0xFD,0x17,0xB4,0x48,0xA6,0x85,0x54,0x19,0x9C,0x47,0xD0,0x8F,0xFB,0x10,\n-            0xD4,0xB8,0x02,0x21,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n-            0xFF,0xFF,0xFF,0xFF,0xFE,0xBA,0xAE,0xDC,0xE6,0xAF,0x48,0xA0,0x3B,0xBF,0xD2,0x5E,\n-            0x8C,0xD0,0x36,0x41,0x41,0x02,0x01,0x01,0xA1,0x44,0x03,0x42,0x00\n-        };\n-        unsigned char *ptr = privkey;\n-        memcpy(ptr, begin, sizeof(begin)); ptr += sizeof(begin);\n-        secp256k1_scalar_get_b32(ptr, key); ptr += 32;\n-        memcpy(ptr, middle, sizeof(middle)); ptr += sizeof(middle);\n-        if (!secp256k1_eckey_pubkey_serialize(&r, ptr, &pubkeylen, 0)) {\n-            return 0;\n-        }\n-        ptr += pubkeylen;\n-        *privkeylen = ptr - privkey;\n-    }\n-    return 1;\n-}\n-\n-static int secp256k1_eckey_privkey_tweak_add(secp256k1_scalar_t *key, const secp256k1_scalar_t *tweak) {\n+static int secp256k1_eckey_privkey_tweak_add(secp256k1_scalar *key, const secp256k1_scalar *tweak) {\n     secp256k1_scalar_add(key, key, tweak);\n     if (secp256k1_scalar_is_zero(key)) {\n         return 0;\n     }\n     return 1;\n }\n \n-static int secp256k1_eckey_pubkey_tweak_add(const secp256k1_ecmult_context_t *ctx, secp256k1_ge_t *key, const secp256k1_scalar_t *tweak) {\n-    secp256k1_gej_t pt;\n-    secp256k1_scalar_t one;\n+static int secp256k1_eckey_pubkey_tweak_add(const secp256k1_ecmult_context *ctx, secp256k1_ge *key, const secp256k1_scalar *tweak) {\n+    secp256k1_gej pt;\n+    secp256k1_scalar one;\n     secp256k1_gej_set_ge(&pt, key);\n     secp256k1_scalar_set_int(&one, 1);\n     secp256k1_ecmult(ctx, &pt, &pt, &one, tweak);\n@@ -176,7 +73,7 @@ static int secp256k1_eckey_pubkey_tweak_add(const secp256k1_ecmult_context_t *ct\n     return 1;\n }\n \n-static int secp256k1_eckey_privkey_tweak_mul(secp256k1_scalar_t *key, const secp256k1_scalar_t *tweak) {\n+static int secp256k1_eckey_privkey_tweak_mul(secp256k1_scalar *key, const secp256k1_scalar *tweak) {\n     if (secp256k1_scalar_is_zero(tweak)) {\n         return 0;\n     }\n@@ -185,9 +82,9 @@ static int secp256k1_eckey_privkey_tweak_mul(secp256k1_scalar_t *key, const secp\n     return 1;\n }\n \n-static int secp256k1_eckey_pubkey_tweak_mul(const secp256k1_ecmult_context_t *ctx, secp256k1_ge_t *key, const secp256k1_scalar_t *tweak) {\n-    secp256k1_scalar_t zero;\n-    secp256k1_gej_t pt;\n+static int secp256k1_eckey_pubkey_tweak_mul(const secp256k1_ecmult_context *ctx, secp256k1_ge *key, const secp256k1_scalar *tweak) {\n+    secp256k1_scalar zero;\n+    secp256k1_gej pt;\n     if (secp256k1_scalar_is_zero(tweak)) {\n         return 0;\n     }"
      },
      {
        "sha": "20484134f5241402357e99dc119bd5b921d1a478",
        "filename": "src/secp256k1/src/ecmult.h",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/ecmult.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/ecmult.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecmult.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -12,20 +12,20 @@\n \n typedef struct {\n     /* For accelerating the computation of a*P + b*G: */\n-    secp256k1_ge_storage_t (*pre_g)[];    /* odd multiples of the generator */\n+    secp256k1_ge_storage (*pre_g)[];    /* odd multiples of the generator */\n #ifdef USE_ENDOMORPHISM\n-    secp256k1_ge_storage_t (*pre_g_128)[]; /* odd multiples of 2^128*generator */\n+    secp256k1_ge_storage (*pre_g_128)[]; /* odd multiples of 2^128*generator */\n #endif\n-} secp256k1_ecmult_context_t;\n+} secp256k1_ecmult_context;\n \n-static void secp256k1_ecmult_context_init(secp256k1_ecmult_context_t *ctx);\n-static void secp256k1_ecmult_context_build(secp256k1_ecmult_context_t *ctx);\n-static void secp256k1_ecmult_context_clone(secp256k1_ecmult_context_t *dst,\n-                                           const secp256k1_ecmult_context_t *src);\n-static void secp256k1_ecmult_context_clear(secp256k1_ecmult_context_t *ctx);\n-static int secp256k1_ecmult_context_is_built(const secp256k1_ecmult_context_t *ctx);\n+static void secp256k1_ecmult_context_init(secp256k1_ecmult_context *ctx);\n+static void secp256k1_ecmult_context_build(secp256k1_ecmult_context *ctx, const secp256k1_callback *cb);\n+static void secp256k1_ecmult_context_clone(secp256k1_ecmult_context *dst,\n+                                           const secp256k1_ecmult_context *src, const secp256k1_callback *cb);\n+static void secp256k1_ecmult_context_clear(secp256k1_ecmult_context *ctx);\n+static int secp256k1_ecmult_context_is_built(const secp256k1_ecmult_context *ctx);\n \n /** Double multiply: R = na*A + ng*G */\n-static void secp256k1_ecmult(const secp256k1_ecmult_context_t *ctx, secp256k1_gej_t *r, const secp256k1_gej_t *a, const secp256k1_scalar_t *na, const secp256k1_scalar_t *ng);\n+static void secp256k1_ecmult(const secp256k1_ecmult_context *ctx, secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_scalar *na, const secp256k1_scalar *ng);\n \n #endif"
      },
      {
        "sha": "2b0097655c1945393546aeef3c3b4d52c862b771",
        "filename": "src/secp256k1/src/ecmult_const.h",
        "status": "added",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/ecmult_const.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/ecmult_const.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecmult_const.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -0,0 +1,15 @@\n+/**********************************************************************\n+ * Copyright (c) 2015 Andrew Poelstra                                 *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_ECMULT_CONST_\n+#define _SECP256K1_ECMULT_CONST_\n+\n+#include \"scalar.h\"\n+#include \"group.h\"\n+\n+static void secp256k1_ecmult_const(secp256k1_gej *r, const secp256k1_ge *a, const secp256k1_scalar *q);\n+\n+#endif"
      },
      {
        "sha": "90ac94770ea1399eb092903fc8050b1ef3dc5c27",
        "filename": "src/secp256k1/src/ecmult_const_impl.h",
        "status": "added",
        "additions": 260,
        "deletions": 0,
        "changes": 260,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/ecmult_const_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/ecmult_const_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecmult_const_impl.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -0,0 +1,260 @@\n+/**********************************************************************\n+ * Copyright (c) 2015 Pieter Wuille, Andrew Poelstra                  *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_ECMULT_CONST_IMPL_\n+#define _SECP256K1_ECMULT_CONST_IMPL_\n+\n+#include \"scalar.h\"\n+#include \"group.h\"\n+#include \"ecmult_const.h\"\n+#include \"ecmult_impl.h\"\n+\n+#ifdef USE_ENDOMORPHISM\n+    #define WNAF_BITS 128\n+#else\n+    #define WNAF_BITS 256\n+#endif\n+#define WNAF_SIZE(w) ((WNAF_BITS + (w) - 1) / (w))\n+\n+/* This is like `ECMULT_TABLE_GET_GE` but is constant time */\n+#define ECMULT_CONST_TABLE_GET_GE(r,pre,n,w) do { \\\n+    int m; \\\n+    int abs_n = (n) * (((n) > 0) * 2 - 1); \\\n+    int idx_n = abs_n / 2; \\\n+    secp256k1_fe neg_y; \\\n+    VERIFY_CHECK(((n) & 1) == 1); \\\n+    VERIFY_CHECK((n) >= -((1 << ((w)-1)) - 1)); \\\n+    VERIFY_CHECK((n) <=  ((1 << ((w)-1)) - 1)); \\\n+    VERIFY_SETUP(secp256k1_fe_clear(&(r)->x)); \\\n+    VERIFY_SETUP(secp256k1_fe_clear(&(r)->y)); \\\n+    for (m = 0; m < ECMULT_TABLE_SIZE(w); m++) { \\\n+        /* This loop is used to avoid secret data in array indices. See\n+         * the comment in ecmult_gen_impl.h for rationale. */ \\\n+        secp256k1_fe_cmov(&(r)->x, &(pre)[m].x, m == idx_n); \\\n+        secp256k1_fe_cmov(&(r)->y, &(pre)[m].y, m == idx_n); \\\n+    } \\\n+    (r)->infinity = 0; \\\n+    secp256k1_fe_negate(&neg_y, &(r)->y, 1); \\\n+    secp256k1_fe_cmov(&(r)->y, &neg_y, (n) != abs_n); \\\n+} while(0)\n+\n+\n+/** Convert a number to WNAF notation. The number becomes represented by sum(2^{wi} * wnaf[i], i=0..return_val)\n+ *  with the following guarantees:\n+ *  - each wnaf[i] an odd integer between -(1 << w) and (1 << w)\n+ *  - each wnaf[i] is nonzero\n+ *  - the number of words set is returned; this is always (WNAF_BITS + w - 1) / w\n+ *\n+ *  Adapted from `The Width-w NAF Method Provides Small Memory and Fast Elliptic Scalar\n+ *  Multiplications Secure against Side Channel Attacks`, Okeya and Tagaki. M. Joye (Ed.)\n+ *  CT-RSA 2003, LNCS 2612, pp. 328-443, 2003. Springer-Verlagy Berlin Heidelberg 2003\n+ *\n+ *  Numbers reference steps of `Algorithm SPA-resistant Width-w NAF with Odd Scalar` on pp. 335\n+ */\n+static int secp256k1_wnaf_const(int *wnaf, secp256k1_scalar s, int w) {\n+    int global_sign;\n+    int skew = 0;\n+    int word = 0;\n+    /* 1 2 3 */\n+    int u_last;\n+    int u;\n+\n+#ifdef USE_ENDOMORPHISM\n+    int flip;\n+    int bit;\n+    secp256k1_scalar neg_s;\n+    int not_neg_one;\n+    /* If we are using the endomorphism, we cannot handle even numbers by negating\n+     * them, since we are working with 128-bit numbers whose negations would be 256\n+     * bits, eliminating the performance advantage. Instead we use a technique from\n+     * Section 4.2 of the Okeya/Tagaki paper, which is to add either 1 (for even)\n+     * or 2 (for odd) to the number we are encoding, then compensating after the\n+     * multiplication. */\n+    /* Negative 128-bit numbers will be negated, since otherwise they are 256-bit */\n+    flip = secp256k1_scalar_is_high(&s);\n+    /* We add 1 to even numbers, 2 to odd ones, noting that negation flips parity */\n+    bit = flip ^ (s.d[0] & 1);\n+    /* We check for negative one, since adding 2 to it will cause an overflow */\n+    secp256k1_scalar_negate(&neg_s, &s);\n+    not_neg_one = !secp256k1_scalar_is_one(&neg_s);\n+    secp256k1_scalar_cadd_bit(&s, bit, not_neg_one);\n+    /* If we had negative one, flip == 1, s.d[0] == 0, bit == 1, so caller expects\n+     * that we added two to it and flipped it. In fact for -1 these operations are\n+     * identical. We only flipped, but since skewing is required (in the sense that\n+     * the skew must be 1 or 2, never zero) and flipping is not, we need to change\n+     * our flags to claim that we only skewed. */\n+    global_sign = secp256k1_scalar_cond_negate(&s, flip);\n+    global_sign *= not_neg_one * 2 - 1;\n+    skew = 1 << bit;\n+#else\n+    /* Otherwise, we just negate to force oddness */\n+    int is_even = secp256k1_scalar_is_even(&s);\n+    global_sign = secp256k1_scalar_cond_negate(&s, is_even);\n+#endif\n+\n+    /* 4 */\n+    u_last = secp256k1_scalar_shr_int(&s, w);\n+    while (word * w < WNAF_BITS) {\n+        int sign;\n+        int even;\n+\n+        /* 4.1 4.4 */\n+        u = secp256k1_scalar_shr_int(&s, w);\n+        /* 4.2 */\n+        even = ((u & 1) == 0);\n+        sign = 2 * (u_last > 0) - 1;\n+        u += sign * even;\n+        u_last -= sign * even * (1 << w);\n+\n+        /* 4.3, adapted for global sign change */\n+        wnaf[word++] = u_last * global_sign;\n+\n+        u_last = u;\n+    }\n+    wnaf[word] = u * global_sign;\n+\n+    VERIFY_CHECK(secp256k1_scalar_is_zero(&s));\n+    VERIFY_CHECK(word == WNAF_SIZE(w));\n+    return skew;\n+}\n+\n+\n+static void secp256k1_ecmult_const(secp256k1_gej *r, const secp256k1_ge *a, const secp256k1_scalar *scalar) {\n+    secp256k1_ge pre_a[ECMULT_TABLE_SIZE(WINDOW_A)];\n+    secp256k1_ge tmpa;\n+    secp256k1_fe Z;\n+\n+#ifdef USE_ENDOMORPHISM\n+    secp256k1_ge pre_a_lam[ECMULT_TABLE_SIZE(WINDOW_A)];\n+    int wnaf_1[1 + WNAF_SIZE(WINDOW_A - 1)];\n+    int wnaf_lam[1 + WNAF_SIZE(WINDOW_A - 1)];\n+    int skew_1;\n+    int skew_lam;\n+    secp256k1_scalar q_1, q_lam;\n+#else\n+    int wnaf[1 + WNAF_SIZE(WINDOW_A - 1)];\n+#endif\n+\n+    int i;\n+    secp256k1_scalar sc = *scalar;\n+\n+    /* build wnaf representation for q. */\n+#ifdef USE_ENDOMORPHISM\n+    /* split q into q_1 and q_lam (where q = q_1 + q_lam*lambda, and q_1 and q_lam are ~128 bit) */\n+    secp256k1_scalar_split_lambda(&q_1, &q_lam, &sc);\n+    /* no need for zero correction when using endomorphism since even\n+     * numbers have one added to them anyway */\n+    skew_1   = secp256k1_wnaf_const(wnaf_1,   q_1,   WINDOW_A - 1);\n+    skew_lam = secp256k1_wnaf_const(wnaf_lam, q_lam, WINDOW_A - 1);\n+#else\n+    int is_zero = secp256k1_scalar_is_zero(scalar);\n+    /* the wNAF ladder cannot handle zero, so bump this to one .. we will\n+     * correct the result after the fact */\n+    sc.d[0] += is_zero;\n+    VERIFY_CHECK(!secp256k1_scalar_is_zero(&sc));\n+\n+    secp256k1_wnaf_const(wnaf, sc, WINDOW_A - 1);\n+#endif\n+\n+    /* Calculate odd multiples of a.\n+     * All multiples are brought to the same Z 'denominator', which is stored\n+     * in Z. Due to secp256k1' isomorphism we can do all operations pretending\n+     * that the Z coordinate was 1, use affine addition formulae, and correct\n+     * the Z coordinate of the result once at the end.\n+     */\n+    secp256k1_gej_set_ge(r, a);\n+    secp256k1_ecmult_odd_multiples_table_globalz_windowa(pre_a, &Z, r);\n+    for (i = 0; i < ECMULT_TABLE_SIZE(WINDOW_A); i++) {\n+        secp256k1_fe_normalize_weak(&pre_a[i].y);\n+    }\n+#ifdef USE_ENDOMORPHISM\n+    for (i = 0; i < ECMULT_TABLE_SIZE(WINDOW_A); i++) {\n+        secp256k1_ge_mul_lambda(&pre_a_lam[i], &pre_a[i]);\n+    }\n+#endif\n+\n+    /* first loop iteration (separated out so we can directly set r, rather\n+     * than having it start at infinity, get doubled several times, then have\n+     * its new value added to it) */\n+#ifdef USE_ENDOMORPHISM\n+    i = wnaf_1[WNAF_SIZE(WINDOW_A - 1)];\n+    VERIFY_CHECK(i != 0);\n+    ECMULT_CONST_TABLE_GET_GE(&tmpa, pre_a, i, WINDOW_A);\n+    secp256k1_gej_set_ge(r, &tmpa);\n+\n+    i = wnaf_lam[WNAF_SIZE(WINDOW_A - 1)];\n+    VERIFY_CHECK(i != 0);\n+    ECMULT_CONST_TABLE_GET_GE(&tmpa, pre_a_lam, i, WINDOW_A);\n+    secp256k1_gej_add_ge(r, r, &tmpa);\n+#else\n+    i = wnaf[WNAF_SIZE(WINDOW_A - 1)];\n+    VERIFY_CHECK(i != 0);\n+    ECMULT_CONST_TABLE_GET_GE(&tmpa, pre_a, i, WINDOW_A);\n+    secp256k1_gej_set_ge(r, &tmpa);\n+#endif\n+    /* remaining loop iterations */\n+    for (i = WNAF_SIZE(WINDOW_A - 1) - 1; i >= 0; i--) {\n+        int n;\n+        int j;\n+        for (j = 0; j < WINDOW_A - 1; ++j) {\n+            secp256k1_gej_double_nonzero(r, r, NULL);\n+        }\n+#ifdef USE_ENDOMORPHISM\n+        n = wnaf_1[i];\n+        ECMULT_CONST_TABLE_GET_GE(&tmpa, pre_a, n, WINDOW_A);\n+        VERIFY_CHECK(n != 0);\n+        secp256k1_gej_add_ge(r, r, &tmpa);\n+\n+        n = wnaf_lam[i];\n+        ECMULT_CONST_TABLE_GET_GE(&tmpa, pre_a_lam, n, WINDOW_A);\n+        VERIFY_CHECK(n != 0);\n+        secp256k1_gej_add_ge(r, r, &tmpa);\n+#else\n+        n = wnaf[i];\n+        VERIFY_CHECK(n != 0);\n+        ECMULT_CONST_TABLE_GET_GE(&tmpa, pre_a, n, WINDOW_A);\n+        secp256k1_gej_add_ge(r, r, &tmpa);\n+#endif\n+    }\n+\n+    secp256k1_fe_mul(&r->z, &r->z, &Z);\n+\n+#ifdef USE_ENDOMORPHISM\n+    {\n+        /* Correct for wNAF skew */\n+        secp256k1_ge correction = *a;\n+        secp256k1_ge_storage correction_1_stor;\n+        secp256k1_ge_storage correction_lam_stor;\n+        secp256k1_ge_storage a2_stor;\n+        secp256k1_gej tmpj;\n+        secp256k1_gej_set_ge(&tmpj, &correction);\n+        secp256k1_gej_double_var(&tmpj, &tmpj, NULL);\n+        secp256k1_ge_set_gej(&correction, &tmpj);\n+        secp256k1_ge_to_storage(&correction_1_stor, a);\n+        secp256k1_ge_to_storage(&correction_lam_stor, a);\n+        secp256k1_ge_to_storage(&a2_stor, &correction);\n+\n+        /* For odd numbers this is 2a (so replace it), for even ones a (so no-op) */\n+        secp256k1_ge_storage_cmov(&correction_1_stor, &a2_stor, skew_1 == 2);\n+        secp256k1_ge_storage_cmov(&correction_lam_stor, &a2_stor, skew_lam == 2);\n+\n+        /* Apply the correction */\n+        secp256k1_ge_from_storage(&correction, &correction_1_stor);\n+        secp256k1_ge_neg(&correction, &correction);\n+        secp256k1_gej_add_ge(r, r, &correction);\n+\n+        secp256k1_ge_from_storage(&correction, &correction_lam_stor);\n+        secp256k1_ge_neg(&correction, &correction);\n+        secp256k1_ge_mul_lambda(&correction, &correction);\n+        secp256k1_gej_add_ge(r, r, &correction);\n+    }\n+#else\n+    /* correct for zero */\n+    r->infinity |= is_zero;\n+#endif\n+}\n+\n+#endif"
      },
      {
        "sha": "eb2cc9ead6ed1df81b34bb5a579d0c61f991fd38",
        "filename": "src/secp256k1/src/ecmult_gen.h",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/ecmult_gen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/ecmult_gen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecmult_gen.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -23,21 +23,21 @@ typedef struct {\n      * None of the resulting prec group elements have a known scalar, and neither do any of\n      * the intermediate sums while computing a*G.\n      */\n-    secp256k1_ge_storage_t (*prec)[64][16]; /* prec[j][i] = 16^j * i * G + U_i */\n-    secp256k1_scalar_t blind;\n-    secp256k1_gej_t initial;\n-} secp256k1_ecmult_gen_context_t;\n+    secp256k1_ge_storage (*prec)[64][16]; /* prec[j][i] = 16^j * i * G + U_i */\n+    secp256k1_scalar blind;\n+    secp256k1_gej initial;\n+} secp256k1_ecmult_gen_context;\n \n-static void secp256k1_ecmult_gen_context_init(secp256k1_ecmult_gen_context_t* ctx);\n-static void secp256k1_ecmult_gen_context_build(secp256k1_ecmult_gen_context_t* ctx);\n-static void secp256k1_ecmult_gen_context_clone(secp256k1_ecmult_gen_context_t *dst,\n-                                               const secp256k1_ecmult_gen_context_t* src);\n-static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context_t* ctx);\n-static int secp256k1_ecmult_gen_context_is_built(const secp256k1_ecmult_gen_context_t* ctx);\n+static void secp256k1_ecmult_gen_context_init(secp256k1_ecmult_gen_context* ctx);\n+static void secp256k1_ecmult_gen_context_build(secp256k1_ecmult_gen_context* ctx, const secp256k1_callback* cb);\n+static void secp256k1_ecmult_gen_context_clone(secp256k1_ecmult_gen_context *dst,\n+                                               const secp256k1_ecmult_gen_context* src, const secp256k1_callback* cb);\n+static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context* ctx);\n+static int secp256k1_ecmult_gen_context_is_built(const secp256k1_ecmult_gen_context* ctx);\n \n /** Multiply with the generator: R = a*G */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context_t* ctx, secp256k1_gej_t *r, const secp256k1_scalar_t *a);\n+static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context* ctx, secp256k1_gej *r, const secp256k1_scalar *a);\n \n-static void secp256k1_ecmult_gen_blind(secp256k1_ecmult_gen_context_t *ctx, const unsigned char *seed32);\n+static void secp256k1_ecmult_gen_blind(secp256k1_ecmult_gen_context *ctx, const unsigned char *seed32);\n \n #endif"
      },
      {
        "sha": "b63c4d8662c70460070cd905f50a62b07b9a0aa0",
        "filename": "src/secp256k1/src/ecmult_gen_impl.h",
        "status": "modified",
        "additions": 64,
        "deletions": 38,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/ecmult_gen_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/ecmult_gen_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecmult_gen_impl.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -11,100 +11,120 @@\n #include \"group.h\"\n #include \"ecmult_gen.h\"\n #include \"hash_impl.h\"\n-\n-static void secp256k1_ecmult_gen_context_init(secp256k1_ecmult_gen_context_t *ctx) {\n+#ifdef USE_ECMULT_STATIC_PRECOMPUTATION\n+#include \"ecmult_static_context.h\"\n+#endif\n+static void secp256k1_ecmult_gen_context_init(secp256k1_ecmult_gen_context *ctx) {\n     ctx->prec = NULL;\n }\n \n-static void secp256k1_ecmult_gen_context_build(secp256k1_ecmult_gen_context_t *ctx) {\n-    secp256k1_ge_t prec[1024];\n-    secp256k1_gej_t gj;\n-    secp256k1_gej_t nums_gej;\n+static void secp256k1_ecmult_gen_context_build(secp256k1_ecmult_gen_context *ctx, const secp256k1_callback* cb) {\n+#ifndef USE_ECMULT_STATIC_PRECOMPUTATION\n+    secp256k1_ge prec[1024];\n+    secp256k1_gej gj;\n+    secp256k1_gej nums_gej;\n     int i, j;\n+#endif\n \n     if (ctx->prec != NULL) {\n         return;\n     }\n-\n-    ctx->prec = (secp256k1_ge_storage_t (*)[64][16])checked_malloc(sizeof(*ctx->prec));\n+#ifndef USE_ECMULT_STATIC_PRECOMPUTATION\n+    ctx->prec = (secp256k1_ge_storage (*)[64][16])checked_malloc(cb, sizeof(*ctx->prec));\n \n     /* get the generator */\n     secp256k1_gej_set_ge(&gj, &secp256k1_ge_const_g);\n \n     /* Construct a group element with no known corresponding scalar (nothing up my sleeve). */\n     {\n         static const unsigned char nums_b32[33] = \"The scalar for this x is unknown\";\n-        secp256k1_fe_t nums_x;\n-        secp256k1_ge_t nums_ge;\n-        VERIFY_CHECK(secp256k1_fe_set_b32(&nums_x, nums_b32));\n-        VERIFY_CHECK(secp256k1_ge_set_xo_var(&nums_ge, &nums_x, 0));\n+        secp256k1_fe nums_x;\n+        secp256k1_ge nums_ge;\n+        int r;\n+        r = secp256k1_fe_set_b32(&nums_x, nums_b32);\n+        (void)r;\n+        VERIFY_CHECK(r);\n+        r = secp256k1_ge_set_xo_var(&nums_ge, &nums_x, 0);\n+        (void)r;\n+        VERIFY_CHECK(r);\n         secp256k1_gej_set_ge(&nums_gej, &nums_ge);\n         /* Add G to make the bits in x uniformly distributed. */\n-        secp256k1_gej_add_ge_var(&nums_gej, &nums_gej, &secp256k1_ge_const_g);\n+        secp256k1_gej_add_ge_var(&nums_gej, &nums_gej, &secp256k1_ge_const_g, NULL);\n     }\n \n     /* compute prec. */\n     {\n-        secp256k1_gej_t precj[1024]; /* Jacobian versions of prec. */\n-        secp256k1_gej_t gbase;\n-        secp256k1_gej_t numsbase;\n+        secp256k1_gej precj[1024]; /* Jacobian versions of prec. */\n+        secp256k1_gej gbase;\n+        secp256k1_gej numsbase;\n         gbase = gj; /* 16^j * G */\n         numsbase = nums_gej; /* 2^j * nums. */\n         for (j = 0; j < 64; j++) {\n             /* Set precj[j*16 .. j*16+15] to (numsbase, numsbase + gbase, ..., numsbase + 15*gbase). */\n             precj[j*16] = numsbase;\n             for (i = 1; i < 16; i++) {\n-                secp256k1_gej_add_var(&precj[j*16 + i], &precj[j*16 + i - 1], &gbase);\n+                secp256k1_gej_add_var(&precj[j*16 + i], &precj[j*16 + i - 1], &gbase, NULL);\n             }\n             /* Multiply gbase by 16. */\n             for (i = 0; i < 4; i++) {\n-                secp256k1_gej_double_var(&gbase, &gbase);\n+                secp256k1_gej_double_var(&gbase, &gbase, NULL);\n             }\n             /* Multiply numbase by 2. */\n-            secp256k1_gej_double_var(&numsbase, &numsbase);\n+            secp256k1_gej_double_var(&numsbase, &numsbase, NULL);\n             if (j == 62) {\n                 /* In the last iteration, numsbase is (1 - 2^j) * nums instead. */\n                 secp256k1_gej_neg(&numsbase, &numsbase);\n-                secp256k1_gej_add_var(&numsbase, &numsbase, &nums_gej);\n+                secp256k1_gej_add_var(&numsbase, &numsbase, &nums_gej, NULL);\n             }\n         }\n-        secp256k1_ge_set_all_gej_var(1024, prec, precj);\n+        secp256k1_ge_set_all_gej_var(1024, prec, precj, cb);\n     }\n     for (j = 0; j < 64; j++) {\n         for (i = 0; i < 16; i++) {\n             secp256k1_ge_to_storage(&(*ctx->prec)[j][i], &prec[j*16 + i]);\n         }\n     }\n+#else\n+    (void)cb;\n+    ctx->prec = (secp256k1_ge_storage (*)[64][16])secp256k1_ecmult_static_context;\n+#endif\n     secp256k1_ecmult_gen_blind(ctx, NULL);\n }\n \n-static int secp256k1_ecmult_gen_context_is_built(const secp256k1_ecmult_gen_context_t* ctx) {\n+static int secp256k1_ecmult_gen_context_is_built(const secp256k1_ecmult_gen_context* ctx) {\n     return ctx->prec != NULL;\n }\n \n-static void secp256k1_ecmult_gen_context_clone(secp256k1_ecmult_gen_context_t *dst,\n-                                               const secp256k1_ecmult_gen_context_t *src) {\n+static void secp256k1_ecmult_gen_context_clone(secp256k1_ecmult_gen_context *dst,\n+                                               const secp256k1_ecmult_gen_context *src, const secp256k1_callback* cb) {\n     if (src->prec == NULL) {\n         dst->prec = NULL;\n     } else {\n-        dst->prec = (secp256k1_ge_storage_t (*)[64][16])checked_malloc(sizeof(*dst->prec));\n+#ifndef USE_ECMULT_STATIC_PRECOMPUTATION\n+        dst->prec = (secp256k1_ge_storage (*)[64][16])checked_malloc(cb, sizeof(*dst->prec));\n         memcpy(dst->prec, src->prec, sizeof(*dst->prec));\n+#else\n+        (void)cb;\n+        dst->prec = src->prec;\n+#endif\n         dst->initial = src->initial;\n         dst->blind = src->blind;\n     }\n }\n \n-static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context_t *ctx) {\n+static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx) {\n+#ifndef USE_ECMULT_STATIC_PRECOMPUTATION\n     free(ctx->prec);\n+#endif\n     secp256k1_scalar_clear(&ctx->blind);\n     secp256k1_gej_clear(&ctx->initial);\n     ctx->prec = NULL;\n }\n \n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context_t *ctx, secp256k1_gej_t *r, const secp256k1_scalar_t *gn) {\n-    secp256k1_ge_t add;\n-    secp256k1_ge_storage_t adds;\n-    secp256k1_scalar_t gnb;\n+static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n+    secp256k1_ge add;\n+    secp256k1_ge_storage adds;\n+    secp256k1_scalar gnb;\n     int bits;\n     int i, j;\n     memset(&adds, 0, sizeof(adds));\n@@ -136,14 +156,15 @@ static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context_t *ctx, secp\n }\n \n /* Setup blinding values for secp256k1_ecmult_gen. */\n-static void secp256k1_ecmult_gen_blind(secp256k1_ecmult_gen_context_t *ctx, const unsigned char *seed32) {\n-    secp256k1_scalar_t b;\n-    secp256k1_gej_t gb;\n-    secp256k1_fe_t s;\n+static void secp256k1_ecmult_gen_blind(secp256k1_ecmult_gen_context *ctx, const unsigned char *seed32) {\n+    secp256k1_scalar b;\n+    secp256k1_gej gb;\n+    secp256k1_fe s;\n     unsigned char nonce32[32];\n     secp256k1_rfc6979_hmac_sha256_t rng;\n     int retry;\n-    if (!seed32) {\n+    unsigned char keydata[64] = {0};\n+    if (seed32 == NULL) {\n         /* When seed is NULL, reset the initial point and blinding value. */\n         secp256k1_gej_set_ge(&ctx->initial, &secp256k1_ge_const_g);\n         secp256k1_gej_neg(&ctx->initial, &ctx->initial);\n@@ -155,13 +176,18 @@ static void secp256k1_ecmult_gen_blind(secp256k1_ecmult_gen_context_t *ctx, cons\n      *   and guards against weak or adversarial seeds.  This is a simpler and safer interface than\n      *   asking the caller for blinding values directly and expecting them to retry on failure.\n      */\n-    secp256k1_rfc6979_hmac_sha256_initialize(&rng, seed32 ? seed32 : nonce32, 32, nonce32, 32, NULL, 0);\n+    memcpy(keydata, nonce32, 32);\n+    if (seed32 != NULL) {\n+        memcpy(keydata + 32, seed32, 32);\n+    }\n+    secp256k1_rfc6979_hmac_sha256_initialize(&rng, keydata, seed32 ? 64 : 32);\n+    memset(keydata, 0, sizeof(keydata));\n     /* Retry for out of range results to achieve uniformity. */\n     do {\n         secp256k1_rfc6979_hmac_sha256_generate(&rng, nonce32, 32);\n         retry = !secp256k1_fe_set_b32(&s, nonce32);\n         retry |= secp256k1_fe_is_zero(&s);\n-    } while (retry);\n+    } while (retry); /* This branch true is cryptographically unreachable. Requires sha256_hmac output > Fp. */\n     /* Randomize the projection to defend against multiplier sidechannels. */\n     secp256k1_gej_rescale(&ctx->initial, &s);\n     secp256k1_fe_clear(&s);\n@@ -170,7 +196,7 @@ static void secp256k1_ecmult_gen_blind(secp256k1_ecmult_gen_context_t *ctx, cons\n         secp256k1_scalar_set_b32(&b, nonce32, &retry);\n         /* A blinding value of 0 works, but would undermine the projection hardening. */\n         retry |= secp256k1_scalar_is_zero(&b);\n-    } while (retry);\n+    } while (retry); /* This branch true is cryptographically unreachable. Requires sha256_hmac output > order. */\n     secp256k1_rfc6979_hmac_sha256_finalize(&rng);\n     memset(nonce32, 0, 32);\n     secp256k1_ecmult_gen(ctx, &gb, &b);"
      },
      {
        "sha": "e6e5f471880710ebbadb72c3d38ea60ca0fd6ab8",
        "filename": "src/secp256k1/src/ecmult_impl.h",
        "status": "modified",
        "additions": 170,
        "deletions": 98,
        "changes": 268,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/ecmult_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/ecmult_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecmult_impl.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -24,62 +24,107 @@\n #define WINDOW_G 16\n #endif\n \n-/** Fill a table 'pre' with precomputed odd multiples of a. W determines the size of the table.\n- *  pre will contains the values [1*a,3*a,5*a,...,(2^(w-1)-1)*a], so it needs place for\n- *  2^(w-2) entries.\n- *\n- *  There are two versions of this function:\n- *  - secp256k1_ecmult_precomp_wnaf_gej, which operates on group elements in jacobian notation,\n- *    fast to precompute, but slower to use in later additions.\n- *  - secp256k1_ecmult_precomp_wnaf_ge, which operates on group elements in affine notations,\n- *    (much) slower to precompute, but a bit faster to use in later additions.\n- *  To compute a*P + b*G, we use the jacobian version for P, and the affine version for G, as\n- *  G is constant, so it only needs to be done once in advance.\n+/** The number of entries a table with precomputed multiples needs to have. */\n+#define ECMULT_TABLE_SIZE(w) (1 << ((w)-2))\n+\n+/** Fill a table 'prej' with precomputed odd multiples of a. Prej will contain\n+ *  the values [1*a,3*a,...,(2*n-1)*a], so it space for n values. zr[0] will\n+ *  contain prej[0].z / a.z. The other zr[i] values = prej[i].z / prej[i-1].z.\n+ *  Prej's Z values are undefined, except for the last value.\n  */\n-static void secp256k1_ecmult_table_precomp_gej_var(secp256k1_gej_t *pre, const secp256k1_gej_t *a, int w) {\n-    secp256k1_gej_t d;\n+static void secp256k1_ecmult_odd_multiples_table(int n, secp256k1_gej *prej, secp256k1_fe *zr, const secp256k1_gej *a) {\n+    secp256k1_gej d;\n+    secp256k1_ge a_ge, d_ge;\n     int i;\n-    pre[0] = *a;\n-    secp256k1_gej_double_var(&d, &pre[0]);\n-    for (i = 1; i < (1 << (w-2)); i++) {\n-        secp256k1_gej_add_var(&pre[i], &d, &pre[i-1]);\n+\n+    VERIFY_CHECK(!a->infinity);\n+\n+    secp256k1_gej_double_var(&d, a, NULL);\n+\n+    /*\n+     * Perform the additions on an isomorphism where 'd' is affine: drop the z coordinate\n+     * of 'd', and scale the 1P starting value's x/y coordinates without changing its z.\n+     */\n+    d_ge.x = d.x;\n+    d_ge.y = d.y;\n+    d_ge.infinity = 0;\n+\n+    secp256k1_ge_set_gej_zinv(&a_ge, a, &d.z);\n+    prej[0].x = a_ge.x;\n+    prej[0].y = a_ge.y;\n+    prej[0].z = a->z;\n+    prej[0].infinity = 0;\n+\n+    zr[0] = d.z;\n+    for (i = 1; i < n; i++) {\n+        secp256k1_gej_add_ge_var(&prej[i], &prej[i-1], &d_ge, &zr[i]);\n     }\n+\n+    /*\n+     * Each point in 'prej' has a z coordinate too small by a factor of 'd.z'. Only\n+     * the final point's z coordinate is actually used though, so just update that.\n+     */\n+    secp256k1_fe_mul(&prej[n-1].z, &prej[n-1].z, &d.z);\n+}\n+\n+/** Fill a table 'pre' with precomputed odd multiples of a.\n+ *\n+ *  There are two versions of this function:\n+ *  - secp256k1_ecmult_odd_multiples_table_globalz_windowa which brings its\n+ *    resulting point set to a single constant Z denominator, stores the X and Y\n+ *    coordinates as ge_storage points in pre, and stores the global Z in rz.\n+ *    It only operates on tables sized for WINDOW_A wnaf multiples.\n+ *  - secp256k1_ecmult_odd_multiples_table_storage_var, which converts its\n+ *    resulting point set to actually affine points, and stores those in pre.\n+ *    It operates on tables of any size, but uses heap-allocated temporaries.\n+ *\n+ *  To compute a*P + b*G, we compute a table for P using the first function,\n+ *  and for G using the second (which requires an inverse, but it only needs to\n+ *  happen once).\n+ */\n+static void secp256k1_ecmult_odd_multiples_table_globalz_windowa(secp256k1_ge *pre, secp256k1_fe *globalz, const secp256k1_gej *a) {\n+    secp256k1_gej prej[ECMULT_TABLE_SIZE(WINDOW_A)];\n+    secp256k1_fe zr[ECMULT_TABLE_SIZE(WINDOW_A)];\n+\n+    /* Compute the odd multiples in Jacobian form. */\n+    secp256k1_ecmult_odd_multiples_table(ECMULT_TABLE_SIZE(WINDOW_A), prej, zr, a);\n+    /* Bring them to the same Z denominator. */\n+    secp256k1_ge_globalz_set_table_gej(ECMULT_TABLE_SIZE(WINDOW_A), pre, globalz, prej, zr);\n }\n \n-static void secp256k1_ecmult_table_precomp_ge_storage_var(secp256k1_ge_storage_t *pre, const secp256k1_gej_t *a, int w) {\n-    secp256k1_gej_t d;\n+static void secp256k1_ecmult_odd_multiples_table_storage_var(int n, secp256k1_ge_storage *pre, const secp256k1_gej *a, const secp256k1_callback *cb) {\n+    secp256k1_gej *prej = (secp256k1_gej*)checked_malloc(cb, sizeof(secp256k1_gej) * n);\n+    secp256k1_ge *prea = (secp256k1_ge*)checked_malloc(cb, sizeof(secp256k1_ge) * n);\n+    secp256k1_fe *zr = (secp256k1_fe*)checked_malloc(cb, sizeof(secp256k1_fe) * n);\n     int i;\n-    const int table_size = 1 << (w-2);\n-    secp256k1_gej_t *prej = (secp256k1_gej_t *)checked_malloc(sizeof(secp256k1_gej_t) * table_size);\n-    secp256k1_ge_t *prea = (secp256k1_ge_t *)checked_malloc(sizeof(secp256k1_ge_t) * table_size);\n-    prej[0] = *a;\n-    secp256k1_gej_double_var(&d, a);\n-    for (i = 1; i < table_size; i++) {\n-        secp256k1_gej_add_var(&prej[i], &d, &prej[i-1]);\n-    }\n-    secp256k1_ge_set_all_gej_var(table_size, prea, prej);\n-    for (i = 0; i < table_size; i++) {\n+\n+    /* Compute the odd multiples in Jacobian form. */\n+    secp256k1_ecmult_odd_multiples_table(n, prej, zr, a);\n+    /* Convert them in batch to affine coordinates. */\n+    secp256k1_ge_set_table_gej_var(n, prea, prej, zr);\n+    /* Convert them to compact storage form. */\n+    for (i = 0; i < n; i++) {\n         secp256k1_ge_to_storage(&pre[i], &prea[i]);\n     }\n-    free(prej);\n+\n     free(prea);\n+    free(prej);\n+    free(zr);\n }\n \n-/** The number of entries a table with precomputed multiples needs to have. */\n-#define ECMULT_TABLE_SIZE(w) (1 << ((w)-2))\n-\n /** The following two macro retrieves a particular odd multiple from a table\n  *  of precomputed multiples. */\n-#define ECMULT_TABLE_GET_GEJ(r,pre,n,w) do { \\\n+#define ECMULT_TABLE_GET_GE(r,pre,n,w) do { \\\n     VERIFY_CHECK(((n) & 1) == 1); \\\n     VERIFY_CHECK((n) >= -((1 << ((w)-1)) - 1)); \\\n     VERIFY_CHECK((n) <=  ((1 << ((w)-1)) - 1)); \\\n     if ((n) > 0) { \\\n         *(r) = (pre)[((n)-1)/2]; \\\n     } else { \\\n-        secp256k1_gej_neg((r), &(pre)[(-(n)-1)/2]); \\\n+        secp256k1_ge_neg((r), &(pre)[(-(n)-1)/2]); \\\n     } \\\n } while(0)\n+\n #define ECMULT_TABLE_GET_GE_STORAGE(r,pre,n,w) do { \\\n     VERIFY_CHECK(((n) & 1) == 1); \\\n     VERIFY_CHECK((n) >= -((1 << ((w)-1)) - 1)); \\\n@@ -92,15 +137,15 @@ static void secp256k1_ecmult_table_precomp_ge_storage_var(secp256k1_ge_storage_t\n     } \\\n } while(0)\n \n-static void secp256k1_ecmult_context_init(secp256k1_ecmult_context_t *ctx) {\n+static void secp256k1_ecmult_context_init(secp256k1_ecmult_context *ctx) {\n     ctx->pre_g = NULL;\n #ifdef USE_ENDOMORPHISM\n     ctx->pre_g_128 = NULL;\n #endif\n }\n \n-static void secp256k1_ecmult_context_build(secp256k1_ecmult_context_t *ctx) {\n-    secp256k1_gej_t gj;\n+static void secp256k1_ecmult_context_build(secp256k1_ecmult_context *ctx, const secp256k1_callback *cb) {\n+    secp256k1_gej gj;\n \n     if (ctx->pre_g != NULL) {\n         return;\n@@ -109,53 +154,53 @@ static void secp256k1_ecmult_context_build(secp256k1_ecmult_context_t *ctx) {\n     /* get the generator */\n     secp256k1_gej_set_ge(&gj, &secp256k1_ge_const_g);\n \n-    ctx->pre_g = (secp256k1_ge_storage_t (*)[])checked_malloc(sizeof((*ctx->pre_g)[0]) * ECMULT_TABLE_SIZE(WINDOW_G));\n+    ctx->pre_g = (secp256k1_ge_storage (*)[])checked_malloc(cb, sizeof((*ctx->pre_g)[0]) * ECMULT_TABLE_SIZE(WINDOW_G));\n \n     /* precompute the tables with odd multiples */\n-    secp256k1_ecmult_table_precomp_ge_storage_var(*ctx->pre_g, &gj, WINDOW_G);\n+    secp256k1_ecmult_odd_multiples_table_storage_var(ECMULT_TABLE_SIZE(WINDOW_G), *ctx->pre_g, &gj, cb);\n \n #ifdef USE_ENDOMORPHISM\n     {\n-        secp256k1_gej_t g_128j;\n+        secp256k1_gej g_128j;\n         int i;\n \n-        ctx->pre_g_128 = (secp256k1_ge_storage_t (*)[])checked_malloc(sizeof((*ctx->pre_g_128)[0]) * ECMULT_TABLE_SIZE(WINDOW_G));\n+        ctx->pre_g_128 = (secp256k1_ge_storage (*)[])checked_malloc(cb, sizeof((*ctx->pre_g_128)[0]) * ECMULT_TABLE_SIZE(WINDOW_G));\n \n         /* calculate 2^128*generator */\n         g_128j = gj;\n         for (i = 0; i < 128; i++) {\n-            secp256k1_gej_double_var(&g_128j, &g_128j);\n+            secp256k1_gej_double_var(&g_128j, &g_128j, NULL);\n         }\n-        secp256k1_ecmult_table_precomp_ge_storage_var(*ctx->pre_g_128, &g_128j, WINDOW_G);\n+        secp256k1_ecmult_odd_multiples_table_storage_var(ECMULT_TABLE_SIZE(WINDOW_G), *ctx->pre_g_128, &g_128j, cb);\n     }\n #endif\n }\n \n-static void secp256k1_ecmult_context_clone(secp256k1_ecmult_context_t *dst,\n-                                           const secp256k1_ecmult_context_t *src) {\n+static void secp256k1_ecmult_context_clone(secp256k1_ecmult_context *dst,\n+                                           const secp256k1_ecmult_context *src, const secp256k1_callback *cb) {\n     if (src->pre_g == NULL) {\n         dst->pre_g = NULL;\n     } else {\n         size_t size = sizeof((*dst->pre_g)[0]) * ECMULT_TABLE_SIZE(WINDOW_G);\n-        dst->pre_g = (secp256k1_ge_storage_t (*)[])checked_malloc(size);\n+        dst->pre_g = (secp256k1_ge_storage (*)[])checked_malloc(cb, size);\n         memcpy(dst->pre_g, src->pre_g, size);\n     }\n #ifdef USE_ENDOMORPHISM\n     if (src->pre_g_128 == NULL) {\n         dst->pre_g_128 = NULL;\n     } else {\n         size_t size = sizeof((*dst->pre_g_128)[0]) * ECMULT_TABLE_SIZE(WINDOW_G);\n-        dst->pre_g_128 = (secp256k1_ge_storage_t (*)[])checked_malloc(size);\n+        dst->pre_g_128 = (secp256k1_ge_storage (*)[])checked_malloc(cb, size);\n         memcpy(dst->pre_g_128, src->pre_g_128, size);\n     }\n #endif\n }\n \n-static int secp256k1_ecmult_context_is_built(const secp256k1_ecmult_context_t *ctx) {\n+static int secp256k1_ecmult_context_is_built(const secp256k1_ecmult_context *ctx) {\n     return ctx->pre_g != NULL;\n }\n \n-static void secp256k1_ecmult_context_clear(secp256k1_ecmult_context_t *ctx) {\n+static void secp256k1_ecmult_context_clear(secp256k1_ecmult_context *ctx) {\n     free(ctx->pre_g);\n #ifdef USE_ENDOMORPHISM\n     free(ctx->pre_g_128);\n@@ -168,54 +213,68 @@ static void secp256k1_ecmult_context_clear(secp256k1_ecmult_context_t *ctx) {\n  *  - each wnaf[i] is either 0, or an odd integer between -(1<<(w-1) - 1) and (1<<(w-1) - 1)\n  *  - two non-zero entries in wnaf are separated by at least w-1 zeroes.\n  *  - the number of set values in wnaf is returned. This number is at most 256, and at most one more\n- *  - than the number of bits in the (absolute value) of the input.\n+ *    than the number of bits in the (absolute value) of the input.\n  */\n-static int secp256k1_ecmult_wnaf(int *wnaf, const secp256k1_scalar_t *a, int w) {\n-    secp256k1_scalar_t s = *a;\n-    int set_bits = 0;\n+static int secp256k1_ecmult_wnaf(int *wnaf, int len, const secp256k1_scalar *a, int w) {\n+    secp256k1_scalar s = *a;\n+    int last_set_bit = -1;\n     int bit = 0;\n     int sign = 1;\n+    int carry = 0;\n+\n+    VERIFY_CHECK(wnaf != NULL);\n+    VERIFY_CHECK(0 <= len && len <= 256);\n+    VERIFY_CHECK(a != NULL);\n+    VERIFY_CHECK(2 <= w && w <= 31);\n+\n+    memset(wnaf, 0, len * sizeof(wnaf[0]));\n \n     if (secp256k1_scalar_get_bits(&s, 255, 1)) {\n         secp256k1_scalar_negate(&s, &s);\n         sign = -1;\n     }\n \n-    while (bit < 256) {\n+    while (bit < len) {\n         int now;\n         int word;\n-        if (secp256k1_scalar_get_bits(&s, bit, 1) == 0) {\n+        if (secp256k1_scalar_get_bits(&s, bit, 1) == (unsigned int)carry) {\n             bit++;\n             continue;\n         }\n-        while (set_bits < bit) {\n-            wnaf[set_bits++] = 0;\n-        }\n+\n         now = w;\n-        if (bit + now > 256) {\n-            now = 256 - bit;\n-        }\n-        word = secp256k1_scalar_get_bits_var(&s, bit, now);\n-        if (word & (1 << (w-1))) {\n-            secp256k1_scalar_add_bit(&s, bit + w);\n-            wnaf[set_bits++] = sign * (word - (1 << w));\n-        } else {\n-            wnaf[set_bits++] = sign * word;\n+        if (now > len - bit) {\n+            now = len - bit;\n         }\n+\n+        word = secp256k1_scalar_get_bits_var(&s, bit, now) + carry;\n+\n+        carry = (word >> (w-1)) & 1;\n+        word -= carry << w;\n+\n+        wnaf[bit] = sign * word;\n+        last_set_bit = bit;\n+\n         bit += now;\n     }\n-    return set_bits;\n+#ifdef VERIFY\n+    CHECK(carry == 0);\n+    while (bit < 256) {\n+        CHECK(secp256k1_scalar_get_bits(&s, bit++, 1) == 0);\n+    } \n+#endif\n+    return last_set_bit + 1;\n }\n \n-static void secp256k1_ecmult(const secp256k1_ecmult_context_t *ctx, secp256k1_gej_t *r, const secp256k1_gej_t *a, const secp256k1_scalar_t *na, const secp256k1_scalar_t *ng) {\n-    secp256k1_gej_t tmpj;\n-    secp256k1_gej_t pre_a[ECMULT_TABLE_SIZE(WINDOW_A)];\n-    secp256k1_ge_t tmpa;\n+static void secp256k1_ecmult(const secp256k1_ecmult_context *ctx, secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_scalar *na, const secp256k1_scalar *ng) {\n+    secp256k1_ge pre_a[ECMULT_TABLE_SIZE(WINDOW_A)];\n+    secp256k1_ge tmpa;\n+    secp256k1_fe Z;\n #ifdef USE_ENDOMORPHISM\n-    secp256k1_gej_t pre_a_lam[ECMULT_TABLE_SIZE(WINDOW_A)];\n-    secp256k1_scalar_t na_1, na_lam;\n+    secp256k1_ge pre_a_lam[ECMULT_TABLE_SIZE(WINDOW_A)];\n+    secp256k1_scalar na_1, na_lam;\n     /* Splitted G factors. */\n-    secp256k1_scalar_t ng_1, ng_128;\n+    secp256k1_scalar ng_1, ng_128;\n     int wnaf_na_1[130];\n     int wnaf_na_lam[130];\n     int bits_na_1;\n@@ -227,19 +286,19 @@ static void secp256k1_ecmult(const secp256k1_ecmult_context_t *ctx, secp256k1_ge\n #else\n     int wnaf_na[256];\n     int bits_na;\n-    int wnaf_ng[257];\n+    int wnaf_ng[256];\n     int bits_ng;\n #endif\n     int i;\n     int bits;\n \n #ifdef USE_ENDOMORPHISM\n     /* split na into na_1 and na_lam (where na = na_1 + na_lam*lambda, and na_1 and na_lam are ~128 bit) */\n-    secp256k1_scalar_split_lambda_var(&na_1, &na_lam, na);\n+    secp256k1_scalar_split_lambda(&na_1, &na_lam, na);\n \n     /* build wnaf representation for na_1 and na_lam. */\n-    bits_na_1   = secp256k1_ecmult_wnaf(wnaf_na_1,   &na_1,   WINDOW_A);\n-    bits_na_lam = secp256k1_ecmult_wnaf(wnaf_na_lam, &na_lam, WINDOW_A);\n+    bits_na_1   = secp256k1_ecmult_wnaf(wnaf_na_1,   130, &na_1,   WINDOW_A);\n+    bits_na_lam = secp256k1_ecmult_wnaf(wnaf_na_lam, 130, &na_lam, WINDOW_A);\n     VERIFY_CHECK(bits_na_1 <= 130);\n     VERIFY_CHECK(bits_na_lam <= 130);\n     bits = bits_na_1;\n@@ -248,70 +307,83 @@ static void secp256k1_ecmult(const secp256k1_ecmult_context_t *ctx, secp256k1_ge\n     }\n #else\n     /* build wnaf representation for na. */\n-    bits_na     = secp256k1_ecmult_wnaf(wnaf_na,     na,      WINDOW_A);\n+    bits_na     = secp256k1_ecmult_wnaf(wnaf_na,     256, na,      WINDOW_A);\n     bits = bits_na;\n #endif\n \n-    /* calculate odd multiples of a */\n-    secp256k1_ecmult_table_precomp_gej_var(pre_a, a, WINDOW_A);\n+    /* Calculate odd multiples of a.\n+     * All multiples are brought to the same Z 'denominator', which is stored\n+     * in Z. Due to secp256k1' isomorphism we can do all operations pretending\n+     * that the Z coordinate was 1, use affine addition formulae, and correct\n+     * the Z coordinate of the result once at the end.\n+     * The exception is the precomputed G table points, which are actually\n+     * affine. Compared to the base used for other points, they have a Z ratio\n+     * of 1/Z, so we can use secp256k1_gej_add_zinv_var, which uses the same\n+     * isomorphism to efficiently add with a known Z inverse.\n+     */\n+    secp256k1_ecmult_odd_multiples_table_globalz_windowa(pre_a, &Z, a);\n \n #ifdef USE_ENDOMORPHISM\n     for (i = 0; i < ECMULT_TABLE_SIZE(WINDOW_A); i++) {\n-        secp256k1_gej_mul_lambda(&pre_a_lam[i], &pre_a[i]);\n+        secp256k1_ge_mul_lambda(&pre_a_lam[i], &pre_a[i]);\n     }\n \n     /* split ng into ng_1 and ng_128 (where gn = gn_1 + gn_128*2^128, and gn_1 and gn_128 are ~128 bit) */\n     secp256k1_scalar_split_128(&ng_1, &ng_128, ng);\n \n     /* Build wnaf representation for ng_1 and ng_128 */\n-    bits_ng_1   = secp256k1_ecmult_wnaf(wnaf_ng_1,   &ng_1,   WINDOW_G);\n-    bits_ng_128 = secp256k1_ecmult_wnaf(wnaf_ng_128, &ng_128, WINDOW_G);\n+    bits_ng_1   = secp256k1_ecmult_wnaf(wnaf_ng_1,   129, &ng_1,   WINDOW_G);\n+    bits_ng_128 = secp256k1_ecmult_wnaf(wnaf_ng_128, 129, &ng_128, WINDOW_G);\n     if (bits_ng_1 > bits) {\n         bits = bits_ng_1;\n     }\n     if (bits_ng_128 > bits) {\n         bits = bits_ng_128;\n     }\n #else\n-    bits_ng     = secp256k1_ecmult_wnaf(wnaf_ng,     ng,      WINDOW_G);\n+    bits_ng     = secp256k1_ecmult_wnaf(wnaf_ng,     256, ng,      WINDOW_G);\n     if (bits_ng > bits) {\n         bits = bits_ng;\n     }\n #endif\n \n     secp256k1_gej_set_infinity(r);\n \n-    for (i = bits-1; i >= 0; i--) {\n+    for (i = bits - 1; i >= 0; i--) {\n         int n;\n-        secp256k1_gej_double_var(r, r);\n+        secp256k1_gej_double_var(r, r, NULL);\n #ifdef USE_ENDOMORPHISM\n         if (i < bits_na_1 && (n = wnaf_na_1[i])) {\n-            ECMULT_TABLE_GET_GEJ(&tmpj, pre_a, n, WINDOW_A);\n-            secp256k1_gej_add_var(r, r, &tmpj);\n+            ECMULT_TABLE_GET_GE(&tmpa, pre_a, n, WINDOW_A);\n+            secp256k1_gej_add_ge_var(r, r, &tmpa, NULL);\n         }\n         if (i < bits_na_lam && (n = wnaf_na_lam[i])) {\n-            ECMULT_TABLE_GET_GEJ(&tmpj, pre_a_lam, n, WINDOW_A);\n-            secp256k1_gej_add_var(r, r, &tmpj);\n+            ECMULT_TABLE_GET_GE(&tmpa, pre_a_lam, n, WINDOW_A);\n+            secp256k1_gej_add_ge_var(r, r, &tmpa, NULL);\n         }\n         if (i < bits_ng_1 && (n = wnaf_ng_1[i])) {\n             ECMULT_TABLE_GET_GE_STORAGE(&tmpa, *ctx->pre_g, n, WINDOW_G);\n-            secp256k1_gej_add_ge_var(r, r, &tmpa);\n+            secp256k1_gej_add_zinv_var(r, r, &tmpa, &Z);\n         }\n         if (i < bits_ng_128 && (n = wnaf_ng_128[i])) {\n             ECMULT_TABLE_GET_GE_STORAGE(&tmpa, *ctx->pre_g_128, n, WINDOW_G);\n-            secp256k1_gej_add_ge_var(r, r, &tmpa);\n+            secp256k1_gej_add_zinv_var(r, r, &tmpa, &Z);\n         }\n #else\n         if (i < bits_na && (n = wnaf_na[i])) {\n-            ECMULT_TABLE_GET_GEJ(&tmpj, pre_a, n, WINDOW_A);\n-            secp256k1_gej_add_var(r, r, &tmpj);\n+            ECMULT_TABLE_GET_GE(&tmpa, pre_a, n, WINDOW_A);\n+            secp256k1_gej_add_ge_var(r, r, &tmpa, NULL);\n         }\n         if (i < bits_ng && (n = wnaf_ng[i])) {\n             ECMULT_TABLE_GET_GE_STORAGE(&tmpa, *ctx->pre_g, n, WINDOW_G);\n-            secp256k1_gej_add_ge_var(r, r, &tmpa);\n+            secp256k1_gej_add_zinv_var(r, r, &tmpa, &Z);\n         }\n #endif\n     }\n+\n+    if (!r->infinity) {\n+        secp256k1_fe_mul(&r->z, &r->z, &Z);\n+    }\n }\n \n #endif"
      },
      {
        "sha": "2d52af5e366c221238543983bb6d215f80e51ef4",
        "filename": "src/secp256k1/src/field.h",
        "status": "modified",
        "additions": 32,
        "deletions": 30,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/field.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/field.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -10,7 +10,7 @@\n /** Field element module.\n  *\n  *  Field elements can be represented in several ways, but code accessing\n- *  it (and implementations) need to take certain properaties into account:\n+ *  it (and implementations) need to take certain properties into account:\n  *  - Each field element can be normalized or not.\n  *  - Each field element has a magnitude, which represents how far away\n  *    its representation is away from normalization. Normalized elements\n@@ -31,89 +31,91 @@\n #endif\n \n /** Normalize a field element. */\n-static void secp256k1_fe_normalize(secp256k1_fe_t *r);\n+static void secp256k1_fe_normalize(secp256k1_fe *r);\n \n /** Weakly normalize a field element: reduce it magnitude to 1, but don't fully normalize. */\n-static void secp256k1_fe_normalize_weak(secp256k1_fe_t *r);\n+static void secp256k1_fe_normalize_weak(secp256k1_fe *r);\n \n /** Normalize a field element, without constant-time guarantee. */\n-static void secp256k1_fe_normalize_var(secp256k1_fe_t *r);\n+static void secp256k1_fe_normalize_var(secp256k1_fe *r);\n \n /** Verify whether a field element represents zero i.e. would normalize to a zero value. The field\n  *  implementation may optionally normalize the input, but this should not be relied upon. */\n-static int secp256k1_fe_normalizes_to_zero(secp256k1_fe_t *r);\n+static int secp256k1_fe_normalizes_to_zero(secp256k1_fe *r);\n \n /** Verify whether a field element represents zero i.e. would normalize to a zero value. The field\n  *  implementation may optionally normalize the input, but this should not be relied upon. */\n-static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe_t *r);\n+static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe *r);\n \n /** Set a field element equal to a small integer. Resulting field element is normalized. */\n-static void secp256k1_fe_set_int(secp256k1_fe_t *r, int a);\n+static void secp256k1_fe_set_int(secp256k1_fe *r, int a);\n \n /** Verify whether a field element is zero. Requires the input to be normalized. */\n-static int secp256k1_fe_is_zero(const secp256k1_fe_t *a);\n+static int secp256k1_fe_is_zero(const secp256k1_fe *a);\n \n /** Check the \"oddness\" of a field element. Requires the input to be normalized. */\n-static int secp256k1_fe_is_odd(const secp256k1_fe_t *a);\n+static int secp256k1_fe_is_odd(const secp256k1_fe *a);\n \n /** Compare two field elements. Requires magnitude-1 inputs. */\n-static int secp256k1_fe_equal_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b);\n+static int secp256k1_fe_equal_var(const secp256k1_fe *a, const secp256k1_fe *b);\n \n /** Compare two field elements. Requires both inputs to be normalized */\n-static int secp256k1_fe_cmp_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b);\n+static int secp256k1_fe_cmp_var(const secp256k1_fe *a, const secp256k1_fe *b);\n \n-/** Set a field element equal to 32-byte big endian value. If succesful, the resulting field element is normalized. */\n-static int secp256k1_fe_set_b32(secp256k1_fe_t *r, const unsigned char *a);\n+/** Set a field element equal to 32-byte big endian value. If successful, the resulting field element is normalized. */\n+static int secp256k1_fe_set_b32(secp256k1_fe *r, const unsigned char *a);\n \n /** Convert a field element to a 32-byte big endian value. Requires the input to be normalized */\n-static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe_t *a);\n+static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe *a);\n \n /** Set a field element equal to the additive inverse of another. Takes a maximum magnitude of the input\n  *  as an argument. The magnitude of the output is one higher. */\n-static void secp256k1_fe_negate(secp256k1_fe_t *r, const secp256k1_fe_t *a, int m);\n+static void secp256k1_fe_negate(secp256k1_fe *r, const secp256k1_fe *a, int m);\n \n /** Multiplies the passed field element with a small integer constant. Multiplies the magnitude by that\n  *  small integer. */\n-static void secp256k1_fe_mul_int(secp256k1_fe_t *r, int a);\n+static void secp256k1_fe_mul_int(secp256k1_fe *r, int a);\n \n /** Adds a field element to another. The result has the sum of the inputs' magnitudes as magnitude. */\n-static void secp256k1_fe_add(secp256k1_fe_t *r, const secp256k1_fe_t *a);\n+static void secp256k1_fe_add(secp256k1_fe *r, const secp256k1_fe *a);\n \n /** Sets a field element to be the product of two others. Requires the inputs' magnitudes to be at most 8.\n  *  The output magnitude is 1 (but not guaranteed to be normalized). */\n-static void secp256k1_fe_mul(secp256k1_fe_t *r, const secp256k1_fe_t *a, const secp256k1_fe_t * SECP256K1_RESTRICT b);\n+static void secp256k1_fe_mul(secp256k1_fe *r, const secp256k1_fe *a, const secp256k1_fe * SECP256K1_RESTRICT b);\n \n /** Sets a field element to be the square of another. Requires the input's magnitude to be at most 8.\n  *  The output magnitude is 1 (but not guaranteed to be normalized). */\n-static void secp256k1_fe_sqr(secp256k1_fe_t *r, const secp256k1_fe_t *a);\n+static void secp256k1_fe_sqr(secp256k1_fe *r, const secp256k1_fe *a);\n \n-/** Sets a field element to be the (modular) square root (if any exist) of another. Requires the\n- *  input's magnitude to be at most 8. The output magnitude is 1 (but not guaranteed to be\n- *  normalized). Return value indicates whether a square root was found. */\n-static int secp256k1_fe_sqrt_var(secp256k1_fe_t *r, const secp256k1_fe_t *a);\n+/** If a has a square root, it is computed in r and 1 is returned. If a does not\n+ *  have a square root, the root of its negation is computed and 0 is returned.\n+ *  The input's magnitude can be at most 8. The output magnitude is 1 (but not\n+ *  guaranteed to be normalized). The result in r will always be a square\n+ *  itself. */\n+static int secp256k1_fe_sqrt_var(secp256k1_fe *r, const secp256k1_fe *a);\n \n /** Sets a field element to be the (modular) inverse of another. Requires the input's magnitude to be\n  *  at most 8. The output magnitude is 1 (but not guaranteed to be normalized). */\n-static void secp256k1_fe_inv(secp256k1_fe_t *r, const secp256k1_fe_t *a);\n+static void secp256k1_fe_inv(secp256k1_fe *r, const secp256k1_fe *a);\n \n /** Potentially faster version of secp256k1_fe_inv, without constant-time guarantee. */\n-static void secp256k1_fe_inv_var(secp256k1_fe_t *r, const secp256k1_fe_t *a);\n+static void secp256k1_fe_inv_var(secp256k1_fe *r, const secp256k1_fe *a);\n \n /** Calculate the (modular) inverses of a batch of field elements. Requires the inputs' magnitudes to be\n  *  at most 8. The output magnitudes are 1 (but not guaranteed to be normalized). The inputs and\n  *  outputs must not overlap in memory. */\n-static void secp256k1_fe_inv_all_var(size_t len, secp256k1_fe_t *r, const secp256k1_fe_t *a);\n+static void secp256k1_fe_inv_all_var(size_t len, secp256k1_fe *r, const secp256k1_fe *a);\n \n /** Convert a field element to the storage type. */\n-static void secp256k1_fe_to_storage(secp256k1_fe_storage_t *r, const secp256k1_fe_t*);\n+static void secp256k1_fe_to_storage(secp256k1_fe_storage *r, const secp256k1_fe *a);\n \n /** Convert a field element back from the storage type. */\n-static void secp256k1_fe_from_storage(secp256k1_fe_t *r, const secp256k1_fe_storage_t*);\n+static void secp256k1_fe_from_storage(secp256k1_fe *r, const secp256k1_fe_storage *a);\n \n /** If flag is true, set *r equal to *a; otherwise leave it. Constant-time. */\n-static void secp256k1_fe_storage_cmov(secp256k1_fe_storage_t *r, const secp256k1_fe_storage_t *a, int flag);\n+static void secp256k1_fe_storage_cmov(secp256k1_fe_storage *r, const secp256k1_fe_storage *a, int flag);\n \n /** If flag is true, set *r equal to *a; otherwise leave it. Constant-time. */\n-static void secp256k1_fe_cmov(secp256k1_fe_t *r, const secp256k1_fe_t *a, int flag);\n+static void secp256k1_fe_cmov(secp256k1_fe *r, const secp256k1_fe *a, int flag);\n \n #endif"
      },
      {
        "sha": "61ee1e09656442501ef8f16ea96dc48b19ead357",
        "filename": "src/secp256k1/src/field_10x26.h",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/field_10x26.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/field_10x26.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_10x26.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -16,20 +16,20 @@ typedef struct {\n     int magnitude;\n     int normalized;\n #endif\n-} secp256k1_fe_t;\n+} secp256k1_fe;\n \n /* Unpacks a constant into a overlapping multi-limbed FE element. */\n #define SECP256K1_FE_CONST_INNER(d7, d6, d5, d4, d3, d2, d1, d0) { \\\n     (d0) & 0x3FFFFFFUL, \\\n-    ((d0) >> 26) | ((d1) & 0xFFFFFUL) << 6, \\\n-    ((d1) >> 20) | ((d2) & 0x3FFFUL) << 12, \\\n-    ((d2) >> 14) | ((d3) & 0xFFUL) << 18, \\\n-    ((d3) >> 8) | ((d4) & 0x3) << 24, \\\n-    ((d4) >> 2) & 0x3FFFFFFUL, \\\n-    ((d4) >> 28) | ((d5) & 0x3FFFFFUL) << 4, \\\n-    ((d5) >> 22) | ((d6) & 0xFFFF) << 10, \\\n-    ((d6) >> 16) | ((d7) & 0x3FF) << 16, \\\n-    ((d7) >> 10) \\\n+    (((uint32_t)d0) >> 26) | (((uint32_t)(d1) & 0xFFFFFUL) << 6), \\\n+    (((uint32_t)d1) >> 20) | (((uint32_t)(d2) & 0x3FFFUL) << 12), \\\n+    (((uint32_t)d2) >> 14) | (((uint32_t)(d3) & 0xFFUL) << 18), \\\n+    (((uint32_t)d3) >> 8) | (((uint32_t)(d4) & 0x3UL) << 24), \\\n+    (((uint32_t)d4) >> 2) & 0x3FFFFFFUL, \\\n+    (((uint32_t)d4) >> 28) | (((uint32_t)(d5) & 0x3FFFFFUL) << 4), \\\n+    (((uint32_t)d5) >> 22) | (((uint32_t)(d6) & 0xFFFFUL) << 10), \\\n+    (((uint32_t)d6) >> 16) | (((uint32_t)(d7) & 0x3FFUL) << 16), \\\n+    (((uint32_t)d7) >> 10) \\\n }\n \n #ifdef VERIFY\n@@ -40,8 +40,8 @@ typedef struct {\n \n typedef struct {\n     uint32_t n[8];\n-} secp256k1_fe_storage_t;\n+} secp256k1_fe_storage;\n \n #define SECP256K1_FE_STORAGE_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {{ (d0), (d1), (d2), (d3), (d4), (d5), (d6), (d7) }}\n-\n+#define SECP256K1_FE_STORAGE_CONST_GET(d) d.n[7], d.n[6], d.n[5], d.n[4],d.n[3], d.n[2], d.n[1], d.n[0]\n #endif"
      },
      {
        "sha": "212cc5396af82689ec5a6b60e45972b9bf5f1f2b",
        "filename": "src/secp256k1/src/field_10x26_impl.h",
        "status": "modified",
        "additions": 28,
        "deletions": 26,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/field_10x26_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/field_10x26_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_10x26_impl.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -14,7 +14,7 @@\n #include \"field.h\"\n \n #ifdef VERIFY\n-static void secp256k1_fe_verify(const secp256k1_fe_t *a) {\n+static void secp256k1_fe_verify(const secp256k1_fe *a) {\n     const uint32_t *d = a->n;\n     int m = a->normalized ? 1 : 2 * a->magnitude, r = 1;\n     r &= (d[0] <= 0x3FFFFFFUL * m);\n@@ -41,12 +41,12 @@ static void secp256k1_fe_verify(const secp256k1_fe_t *a) {\n     VERIFY_CHECK(r == 1);\n }\n #else\n-static void secp256k1_fe_verify(const secp256k1_fe_t *a) {\n+static void secp256k1_fe_verify(const secp256k1_fe *a) {\n     (void)a;\n }\n #endif\n \n-static void secp256k1_fe_normalize(secp256k1_fe_t *r) {\n+static void secp256k1_fe_normalize(secp256k1_fe *r) {\n     uint32_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4],\n              t5 = r->n[5], t6 = r->n[6], t7 = r->n[7], t8 = r->n[8], t9 = r->n[9];\n \n@@ -101,7 +101,7 @@ static void secp256k1_fe_normalize(secp256k1_fe_t *r) {\n #endif\n }\n \n-static void secp256k1_fe_normalize_weak(secp256k1_fe_t *r) {\n+static void secp256k1_fe_normalize_weak(secp256k1_fe *r) {\n     uint32_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4],\n              t5 = r->n[5], t6 = r->n[6], t7 = r->n[7], t8 = r->n[8], t9 = r->n[9];\n \n@@ -132,7 +132,7 @@ static void secp256k1_fe_normalize_weak(secp256k1_fe_t *r) {\n #endif\n }\n \n-static void secp256k1_fe_normalize_var(secp256k1_fe_t *r) {\n+static void secp256k1_fe_normalize_var(secp256k1_fe *r) {\n     uint32_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4],\n              t5 = r->n[5], t6 = r->n[6], t7 = r->n[7], t8 = r->n[8], t9 = r->n[9];\n \n@@ -188,7 +188,7 @@ static void secp256k1_fe_normalize_var(secp256k1_fe_t *r) {\n #endif\n }\n \n-static int secp256k1_fe_normalizes_to_zero(secp256k1_fe_t *r) {\n+static int secp256k1_fe_normalizes_to_zero(secp256k1_fe *r) {\n     uint32_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4],\n              t5 = r->n[5], t6 = r->n[6], t7 = r->n[7], t8 = r->n[8], t9 = r->n[9];\n \n@@ -217,7 +217,7 @@ static int secp256k1_fe_normalizes_to_zero(secp256k1_fe_t *r) {\n     return (z0 == 0) | (z1 == 0x3FFFFFFUL);\n }\n \n-static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe_t *r) {\n+static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe *r) {\n     uint32_t t0, t1, t2, t3, t4, t5, t6, t7, t8, t9;\n     uint32_t z0, z1;\n     uint32_t x;\n@@ -252,7 +252,7 @@ static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe_t *r) {\n     t9 &= 0x03FFFFFUL;\n     t1 += (x << 6);\n \n-    t1 += (t0 >> 26); t0  = z0;\n+    t1 += (t0 >> 26);\n     t2 += (t1 >> 26); t1 &= 0x3FFFFFFUL; z0 |= t1; z1 &= t1 ^ 0x40UL;\n     t3 += (t2 >> 26); t2 &= 0x3FFFFFFUL; z0 |= t2; z1 &= t2;\n     t4 += (t3 >> 26); t3 &= 0x3FFFFFFUL; z0 |= t3; z1 &= t3;\n@@ -269,7 +269,7 @@ static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe_t *r) {\n     return (z0 == 0) | (z1 == 0x3FFFFFFUL);\n }\n \n-SECP256K1_INLINE static void secp256k1_fe_set_int(secp256k1_fe_t *r, int a) {\n+SECP256K1_INLINE static void secp256k1_fe_set_int(secp256k1_fe *r, int a) {\n     r->n[0] = a;\n     r->n[1] = r->n[2] = r->n[3] = r->n[4] = r->n[5] = r->n[6] = r->n[7] = r->n[8] = r->n[9] = 0;\n #ifdef VERIFY\n@@ -279,7 +279,7 @@ SECP256K1_INLINE static void secp256k1_fe_set_int(secp256k1_fe_t *r, int a) {\n #endif\n }\n \n-SECP256K1_INLINE static int secp256k1_fe_is_zero(const secp256k1_fe_t *a) {\n+SECP256K1_INLINE static int secp256k1_fe_is_zero(const secp256k1_fe *a) {\n     const uint32_t *t = a->n;\n #ifdef VERIFY\n     VERIFY_CHECK(a->normalized);\n@@ -288,15 +288,15 @@ SECP256K1_INLINE static int secp256k1_fe_is_zero(const secp256k1_fe_t *a) {\n     return (t[0] | t[1] | t[2] | t[3] | t[4] | t[5] | t[6] | t[7] | t[8] | t[9]) == 0;\n }\n \n-SECP256K1_INLINE static int secp256k1_fe_is_odd(const secp256k1_fe_t *a) {\n+SECP256K1_INLINE static int secp256k1_fe_is_odd(const secp256k1_fe *a) {\n #ifdef VERIFY\n     VERIFY_CHECK(a->normalized);\n     secp256k1_fe_verify(a);\n #endif\n     return a->n[0] & 1;\n }\n \n-SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe_t *a) {\n+SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe *a) {\n     int i;\n #ifdef VERIFY\n     a->magnitude = 0;\n@@ -307,7 +307,7 @@ SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe_t *a) {\n     }\n }\n \n-static int secp256k1_fe_cmp_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n+static int secp256k1_fe_cmp_var(const secp256k1_fe *a, const secp256k1_fe *b) {\n     int i;\n #ifdef VERIFY\n     VERIFY_CHECK(a->normalized);\n@@ -326,7 +326,7 @@ static int secp256k1_fe_cmp_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b\n     return 0;\n }\n \n-static int secp256k1_fe_set_b32(secp256k1_fe_t *r, const unsigned char *a) {\n+static int secp256k1_fe_set_b32(secp256k1_fe *r, const unsigned char *a) {\n     int i;\n     r->n[0] = r->n[1] = r->n[2] = r->n[3] = r->n[4] = 0;\n     r->n[5] = r->n[6] = r->n[7] = r->n[8] = r->n[9] = 0;\n@@ -350,7 +350,7 @@ static int secp256k1_fe_set_b32(secp256k1_fe_t *r, const unsigned char *a) {\n }\n \n /** Convert a field element to a 32-byte big endian value. Requires the input to be normalized */\n-static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe_t *a) {\n+static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe *a) {\n     int i;\n #ifdef VERIFY\n     VERIFY_CHECK(a->normalized);\n@@ -368,7 +368,7 @@ static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe_t *a) {\n     }\n }\n \n-SECP256K1_INLINE static void secp256k1_fe_negate(secp256k1_fe_t *r, const secp256k1_fe_t *a, int m) {\n+SECP256K1_INLINE static void secp256k1_fe_negate(secp256k1_fe *r, const secp256k1_fe *a, int m) {\n #ifdef VERIFY\n     VERIFY_CHECK(a->magnitude <= m);\n     secp256k1_fe_verify(a);\n@@ -390,7 +390,7 @@ SECP256K1_INLINE static void secp256k1_fe_negate(secp256k1_fe_t *r, const secp25\n #endif\n }\n \n-SECP256K1_INLINE static void secp256k1_fe_mul_int(secp256k1_fe_t *r, int a) {\n+SECP256K1_INLINE static void secp256k1_fe_mul_int(secp256k1_fe *r, int a) {\n     r->n[0] *= a;\n     r->n[1] *= a;\n     r->n[2] *= a;\n@@ -408,7 +408,7 @@ SECP256K1_INLINE static void secp256k1_fe_mul_int(secp256k1_fe_t *r, int a) {\n #endif\n }\n \n-SECP256K1_INLINE static void secp256k1_fe_add(secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n+SECP256K1_INLINE static void secp256k1_fe_add(secp256k1_fe *r, const secp256k1_fe *a) {\n #ifdef VERIFY\n     secp256k1_fe_verify(a);\n #endif\n@@ -1039,7 +1039,7 @@ SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint32_t *r, const uint32_t\n }\n \n \n-static void secp256k1_fe_mul(secp256k1_fe_t *r, const secp256k1_fe_t *a, const secp256k1_fe_t * SECP256K1_RESTRICT b) {\n+static void secp256k1_fe_mul(secp256k1_fe *r, const secp256k1_fe *a, const secp256k1_fe * SECP256K1_RESTRICT b) {\n #ifdef VERIFY\n     VERIFY_CHECK(a->magnitude <= 8);\n     VERIFY_CHECK(b->magnitude <= 8);\n@@ -1055,7 +1055,7 @@ static void secp256k1_fe_mul(secp256k1_fe_t *r, const secp256k1_fe_t *a, const s\n #endif\n }\n \n-static void secp256k1_fe_sqr(secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n+static void secp256k1_fe_sqr(secp256k1_fe *r, const secp256k1_fe *a) {\n #ifdef VERIFY\n     VERIFY_CHECK(a->magnitude <= 8);\n     secp256k1_fe_verify(a);\n@@ -1068,7 +1068,7 @@ static void secp256k1_fe_sqr(secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n #endif\n }\n \n-static SECP256K1_INLINE void secp256k1_fe_cmov(secp256k1_fe_t *r, const secp256k1_fe_t *a, int flag) {\n+static SECP256K1_INLINE void secp256k1_fe_cmov(secp256k1_fe *r, const secp256k1_fe *a, int flag) {\n     uint32_t mask0, mask1;\n     mask0 = flag + ~((uint32_t)0);\n     mask1 = ~mask0;\n@@ -1083,12 +1083,14 @@ static SECP256K1_INLINE void secp256k1_fe_cmov(secp256k1_fe_t *r, const secp256k\n     r->n[8] = (r->n[8] & mask0) | (a->n[8] & mask1);\n     r->n[9] = (r->n[9] & mask0) | (a->n[9] & mask1);\n #ifdef VERIFY\n-    r->magnitude = (r->magnitude & mask0) | (a->magnitude & mask1);\n-    r->normalized = (r->normalized & mask0) | (a->normalized & mask1);\n+    if (a->magnitude > r->magnitude) {\n+        r->magnitude = a->magnitude;\n+    }\n+    r->normalized &= a->normalized;\n #endif\n }\n \n-static SECP256K1_INLINE void secp256k1_fe_storage_cmov(secp256k1_fe_storage_t *r, const secp256k1_fe_storage_t *a, int flag) {\n+static SECP256K1_INLINE void secp256k1_fe_storage_cmov(secp256k1_fe_storage *r, const secp256k1_fe_storage *a, int flag) {\n     uint32_t mask0, mask1;\n     mask0 = flag + ~((uint32_t)0);\n     mask1 = ~mask0;\n@@ -1102,7 +1104,7 @@ static SECP256K1_INLINE void secp256k1_fe_storage_cmov(secp256k1_fe_storage_t *r\n     r->n[7] = (r->n[7] & mask0) | (a->n[7] & mask1);\n }\n \n-static void secp256k1_fe_to_storage(secp256k1_fe_storage_t *r, const secp256k1_fe_t *a) {\n+static void secp256k1_fe_to_storage(secp256k1_fe_storage *r, const secp256k1_fe *a) {\n #ifdef VERIFY\n     VERIFY_CHECK(a->normalized);\n #endif\n@@ -1116,7 +1118,7 @@ static void secp256k1_fe_to_storage(secp256k1_fe_storage_t *r, const secp256k1_f\n     r->n[7] = a->n[8] >> 16 | a->n[9] << 10;\n }\n \n-static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe_t *r, const secp256k1_fe_storage_t *a) {\n+static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const secp256k1_fe_storage *a) {\n     r->n[0] = a->n[0] & 0x3FFFFFFUL;\n     r->n[1] = a->n[0] >> 26 | ((a->n[1] << 6) & 0x3FFFFFFUL);\n     r->n[2] = a->n[1] >> 20 | ((a->n[2] << 12) & 0x3FFFFFFUL);"
      },
      {
        "sha": "8e69a560dccb6c99621dee52f67a2502343453ca",
        "filename": "src/secp256k1/src/field_5x52.h",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/field_5x52.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/field_5x52.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_5x52.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -16,15 +16,15 @@ typedef struct {\n     int magnitude;\n     int normalized;\n #endif\n-} secp256k1_fe_t;\n+} secp256k1_fe;\n \n /* Unpacks a constant into a overlapping multi-limbed FE element. */\n #define SECP256K1_FE_CONST_INNER(d7, d6, d5, d4, d3, d2, d1, d0) { \\\n-    (d0) | ((uint64_t)(d1) & 0xFFFFFUL) << 32, \\\n-    ((d1) >> 20) | ((uint64_t)(d2)) << 12 | ((uint64_t)(d3) & 0xFFUL) << 44, \\\n-    ((d3) >> 8) | ((uint64_t)(d4) & 0xFFFFFFFUL) << 24, \\\n-    ((d4) >> 28) | ((uint64_t)(d5)) << 4 | ((uint64_t)(d6) & 0xFFFFUL) << 36, \\\n-    ((d6) >> 16) | ((uint64_t)(d7)) << 16 \\\n+    (d0) | (((uint64_t)(d1) & 0xFFFFFUL) << 32), \\\n+    ((uint64_t)(d1) >> 20) | (((uint64_t)(d2)) << 12) | (((uint64_t)(d3) & 0xFFUL) << 44), \\\n+    ((uint64_t)(d3) >> 8) | (((uint64_t)(d4) & 0xFFFFFFFUL) << 24), \\\n+    ((uint64_t)(d4) >> 28) | (((uint64_t)(d5)) << 4) | (((uint64_t)(d6) & 0xFFFFUL) << 36), \\\n+    ((uint64_t)(d6) >> 16) | (((uint64_t)(d7)) << 16) \\\n }\n \n #ifdef VERIFY\n@@ -35,13 +35,13 @@ typedef struct {\n \n typedef struct {\n     uint64_t n[4];\n-} secp256k1_fe_storage_t;\n+} secp256k1_fe_storage;\n \n #define SECP256K1_FE_STORAGE_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {{ \\\n-    (d0) | ((uint64_t)(d1)) << 32, \\\n-    (d2) | ((uint64_t)(d3)) << 32, \\\n-    (d4) | ((uint64_t)(d5)) << 32, \\\n-    (d6) | ((uint64_t)(d7)) << 32 \\\n+    (d0) | (((uint64_t)(d1)) << 32), \\\n+    (d2) | (((uint64_t)(d3)) << 32), \\\n+    (d4) | (((uint64_t)(d5)) << 32), \\\n+    (d6) | (((uint64_t)(d7)) << 32) \\\n }}\n \n #endif"
      },
      {
        "sha": "b31e24ab811b06dc654a00e2139be8ac2466ac1d",
        "filename": "src/secp256k1/src/field_5x52_impl.h",
        "status": "modified",
        "additions": 28,
        "deletions": 26,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/field_5x52_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/field_5x52_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_5x52_impl.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -31,7 +31,7 @@\n  */\n \n #ifdef VERIFY\n-static void secp256k1_fe_verify(const secp256k1_fe_t *a) {\n+static void secp256k1_fe_verify(const secp256k1_fe *a) {\n     const uint64_t *d = a->n;\n     int m = a->normalized ? 1 : 2 * a->magnitude, r = 1;\n    /* secp256k1 'p' value defined in \"Standards for Efficient Cryptography\" (SEC2) 2.7.1. */\n@@ -51,12 +51,12 @@ static void secp256k1_fe_verify(const secp256k1_fe_t *a) {\n     VERIFY_CHECK(r == 1);\n }\n #else\n-static void secp256k1_fe_verify(const secp256k1_fe_t *a) {\n+static void secp256k1_fe_verify(const secp256k1_fe *a) {\n     (void)a;\n }\n #endif\n \n-static void secp256k1_fe_normalize(secp256k1_fe_t *r) {\n+static void secp256k1_fe_normalize(secp256k1_fe *r) {\n     uint64_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4];\n \n     /* Reduce t4 at the start so there will be at most a single carry from the first pass */\n@@ -99,7 +99,7 @@ static void secp256k1_fe_normalize(secp256k1_fe_t *r) {\n #endif\n }\n \n-static void secp256k1_fe_normalize_weak(secp256k1_fe_t *r) {\n+static void secp256k1_fe_normalize_weak(secp256k1_fe *r) {\n     uint64_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4];\n \n     /* Reduce t4 at the start so there will be at most a single carry from the first pass */\n@@ -123,7 +123,7 @@ static void secp256k1_fe_normalize_weak(secp256k1_fe_t *r) {\n #endif\n }\n \n-static void secp256k1_fe_normalize_var(secp256k1_fe_t *r) {\n+static void secp256k1_fe_normalize_var(secp256k1_fe *r) {\n     uint64_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4];\n \n     /* Reduce t4 at the start so there will be at most a single carry from the first pass */\n@@ -167,7 +167,7 @@ static void secp256k1_fe_normalize_var(secp256k1_fe_t *r) {\n #endif\n }\n \n-static int secp256k1_fe_normalizes_to_zero(secp256k1_fe_t *r) {\n+static int secp256k1_fe_normalizes_to_zero(secp256k1_fe *r) {\n     uint64_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4];\n \n     /* z0 tracks a possible raw value of 0, z1 tracks a possible raw value of P */\n@@ -190,7 +190,7 @@ static int secp256k1_fe_normalizes_to_zero(secp256k1_fe_t *r) {\n     return (z0 == 0) | (z1 == 0xFFFFFFFFFFFFFULL);\n }\n \n-static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe_t *r) {\n+static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe *r) {\n     uint64_t t0, t1, t2, t3, t4;\n     uint64_t z0, z1;\n     uint64_t x;\n@@ -219,7 +219,7 @@ static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe_t *r) {\n \n     t4 &= 0x0FFFFFFFFFFFFULL;\n \n-    t1 += (t0 >> 52); t0  = z0;\n+    t1 += (t0 >> 52);\n     t2 += (t1 >> 52); t1 &= 0xFFFFFFFFFFFFFULL; z0 |= t1; z1 &= t1;\n     t3 += (t2 >> 52); t2 &= 0xFFFFFFFFFFFFFULL; z0 |= t2; z1 &= t2;\n     t4 += (t3 >> 52); t3 &= 0xFFFFFFFFFFFFFULL; z0 |= t3; z1 &= t3;\n@@ -231,7 +231,7 @@ static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe_t *r) {\n     return (z0 == 0) | (z1 == 0xFFFFFFFFFFFFFULL);\n }\n \n-SECP256K1_INLINE static void secp256k1_fe_set_int(secp256k1_fe_t *r, int a) {\n+SECP256K1_INLINE static void secp256k1_fe_set_int(secp256k1_fe *r, int a) {\n     r->n[0] = a;\n     r->n[1] = r->n[2] = r->n[3] = r->n[4] = 0;\n #ifdef VERIFY\n@@ -241,7 +241,7 @@ SECP256K1_INLINE static void secp256k1_fe_set_int(secp256k1_fe_t *r, int a) {\n #endif\n }\n \n-SECP256K1_INLINE static int secp256k1_fe_is_zero(const secp256k1_fe_t *a) {\n+SECP256K1_INLINE static int secp256k1_fe_is_zero(const secp256k1_fe *a) {\n     const uint64_t *t = a->n;\n #ifdef VERIFY\n     VERIFY_CHECK(a->normalized);\n@@ -250,15 +250,15 @@ SECP256K1_INLINE static int secp256k1_fe_is_zero(const secp256k1_fe_t *a) {\n     return (t[0] | t[1] | t[2] | t[3] | t[4]) == 0;\n }\n \n-SECP256K1_INLINE static int secp256k1_fe_is_odd(const secp256k1_fe_t *a) {\n+SECP256K1_INLINE static int secp256k1_fe_is_odd(const secp256k1_fe *a) {\n #ifdef VERIFY\n     VERIFY_CHECK(a->normalized);\n     secp256k1_fe_verify(a);\n #endif\n     return a->n[0] & 1;\n }\n \n-SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe_t *a) {\n+SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe *a) {\n     int i;\n #ifdef VERIFY\n     a->magnitude = 0;\n@@ -269,7 +269,7 @@ SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe_t *a) {\n     }\n }\n \n-static int secp256k1_fe_cmp_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n+static int secp256k1_fe_cmp_var(const secp256k1_fe *a, const secp256k1_fe *b) {\n     int i;\n #ifdef VERIFY\n     VERIFY_CHECK(a->normalized);\n@@ -288,7 +288,7 @@ static int secp256k1_fe_cmp_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b\n     return 0;\n }\n \n-static int secp256k1_fe_set_b32(secp256k1_fe_t *r, const unsigned char *a) {\n+static int secp256k1_fe_set_b32(secp256k1_fe *r, const unsigned char *a) {\n     int i;\n     r->n[0] = r->n[1] = r->n[2] = r->n[3] = r->n[4] = 0;\n     for (i=0; i<32; i++) {\n@@ -311,7 +311,7 @@ static int secp256k1_fe_set_b32(secp256k1_fe_t *r, const unsigned char *a) {\n }\n \n /** Convert a field element to a 32-byte big endian value. Requires the input to be normalized */\n-static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe_t *a) {\n+static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe *a) {\n     int i;\n #ifdef VERIFY\n     VERIFY_CHECK(a->normalized);\n@@ -329,7 +329,7 @@ static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe_t *a) {\n     }\n }\n \n-SECP256K1_INLINE static void secp256k1_fe_negate(secp256k1_fe_t *r, const secp256k1_fe_t *a, int m) {\n+SECP256K1_INLINE static void secp256k1_fe_negate(secp256k1_fe *r, const secp256k1_fe *a, int m) {\n #ifdef VERIFY\n     VERIFY_CHECK(a->magnitude <= m);\n     secp256k1_fe_verify(a);\n@@ -346,7 +346,7 @@ SECP256K1_INLINE static void secp256k1_fe_negate(secp256k1_fe_t *r, const secp25\n #endif\n }\n \n-SECP256K1_INLINE static void secp256k1_fe_mul_int(secp256k1_fe_t *r, int a) {\n+SECP256K1_INLINE static void secp256k1_fe_mul_int(secp256k1_fe *r, int a) {\n     r->n[0] *= a;\n     r->n[1] *= a;\n     r->n[2] *= a;\n@@ -359,7 +359,7 @@ SECP256K1_INLINE static void secp256k1_fe_mul_int(secp256k1_fe_t *r, int a) {\n #endif\n }\n \n-SECP256K1_INLINE static void secp256k1_fe_add(secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n+SECP256K1_INLINE static void secp256k1_fe_add(secp256k1_fe *r, const secp256k1_fe *a) {\n #ifdef VERIFY\n     secp256k1_fe_verify(a);\n #endif\n@@ -375,7 +375,7 @@ SECP256K1_INLINE static void secp256k1_fe_add(secp256k1_fe_t *r, const secp256k1\n #endif\n }\n \n-static void secp256k1_fe_mul(secp256k1_fe_t *r, const secp256k1_fe_t *a, const secp256k1_fe_t * SECP256K1_RESTRICT b) {\n+static void secp256k1_fe_mul(secp256k1_fe *r, const secp256k1_fe *a, const secp256k1_fe * SECP256K1_RESTRICT b) {\n #ifdef VERIFY\n     VERIFY_CHECK(a->magnitude <= 8);\n     VERIFY_CHECK(b->magnitude <= 8);\n@@ -391,7 +391,7 @@ static void secp256k1_fe_mul(secp256k1_fe_t *r, const secp256k1_fe_t *a, const s\n #endif\n }\n \n-static void secp256k1_fe_sqr(secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n+static void secp256k1_fe_sqr(secp256k1_fe *r, const secp256k1_fe *a) {\n #ifdef VERIFY\n     VERIFY_CHECK(a->magnitude <= 8);\n     secp256k1_fe_verify(a);\n@@ -404,7 +404,7 @@ static void secp256k1_fe_sqr(secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n #endif\n }\n \n-static SECP256K1_INLINE void secp256k1_fe_cmov(secp256k1_fe_t *r, const secp256k1_fe_t *a, int flag) {\n+static SECP256K1_INLINE void secp256k1_fe_cmov(secp256k1_fe *r, const secp256k1_fe *a, int flag) {\n     uint64_t mask0, mask1;\n     mask0 = flag + ~((uint64_t)0);\n     mask1 = ~mask0;\n@@ -414,12 +414,14 @@ static SECP256K1_INLINE void secp256k1_fe_cmov(secp256k1_fe_t *r, const secp256k\n     r->n[3] = (r->n[3] & mask0) | (a->n[3] & mask1);\n     r->n[4] = (r->n[4] & mask0) | (a->n[4] & mask1);\n #ifdef VERIFY\n-    r->magnitude = (r->magnitude & mask0) | (a->magnitude & mask1);\n-    r->normalized = (r->normalized & mask0) | (a->normalized & mask1);\n+    if (a->magnitude > r->magnitude) {\n+        r->magnitude = a->magnitude;\n+    }\n+    r->normalized &= a->normalized;\n #endif\n }\n \n-static SECP256K1_INLINE void secp256k1_fe_storage_cmov(secp256k1_fe_storage_t *r, const secp256k1_fe_storage_t *a, int flag) {\n+static SECP256K1_INLINE void secp256k1_fe_storage_cmov(secp256k1_fe_storage *r, const secp256k1_fe_storage *a, int flag) {\n     uint64_t mask0, mask1;\n     mask0 = flag + ~((uint64_t)0);\n     mask1 = ~mask0;\n@@ -429,7 +431,7 @@ static SECP256K1_INLINE void secp256k1_fe_storage_cmov(secp256k1_fe_storage_t *r\n     r->n[3] = (r->n[3] & mask0) | (a->n[3] & mask1);\n }\n \n-static void secp256k1_fe_to_storage(secp256k1_fe_storage_t *r, const secp256k1_fe_t *a) {\n+static void secp256k1_fe_to_storage(secp256k1_fe_storage *r, const secp256k1_fe *a) {\n #ifdef VERIFY\n     VERIFY_CHECK(a->normalized);\n #endif\n@@ -439,7 +441,7 @@ static void secp256k1_fe_to_storage(secp256k1_fe_storage_t *r, const secp256k1_f\n     r->n[3] = a->n[3] >> 36 | a->n[4] << 16;\n }\n \n-static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe_t *r, const secp256k1_fe_storage_t *a) {\n+static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const secp256k1_fe_storage *a) {\n     r->n[0] = a->n[0] & 0xFFFFFFFFFFFFFULL;\n     r->n[1] = a->n[0] >> 52 | ((a->n[1] << 12) & 0xFFFFFFFFFFFFFULL);\n     r->n[2] = a->n[1] >> 40 | ((a->n[2] << 24) & 0xFFFFFFFFFFFFFULL);"
      },
      {
        "sha": "77f4aae2f97248eb5df77d33a1f9c18f8fa268b1",
        "filename": "src/secp256k1/src/field_impl.h",
        "status": "modified",
        "additions": 33,
        "deletions": 13,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/field_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/field_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_impl.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -21,15 +21,24 @@\n #error \"Please select field implementation\"\n #endif\n \n-SECP256K1_INLINE static int secp256k1_fe_equal_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n-    secp256k1_fe_t na;\n+SECP256K1_INLINE static int secp256k1_fe_equal_var(const secp256k1_fe *a, const secp256k1_fe *b) {\n+    secp256k1_fe na;\n     secp256k1_fe_negate(&na, a, 1);\n     secp256k1_fe_add(&na, b);\n     return secp256k1_fe_normalizes_to_zero_var(&na);\n }\n \n-static int secp256k1_fe_sqrt_var(secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n-    secp256k1_fe_t x2, x3, x6, x9, x11, x22, x44, x88, x176, x220, x223, t1;\n+static int secp256k1_fe_sqrt_var(secp256k1_fe *r, const secp256k1_fe *a) {\n+    /** Given that p is congruent to 3 mod 4, we can compute the square root of\n+     *  a mod p as the (p+1)/4'th power of a.\n+     *\n+     *  As (p+1)/4 is an even number, it will have the same result for a and for\n+     *  (-a). Only one of these two numbers actually has a square root however,\n+     *  so we test at the end by squaring and comparing to the input.\n+     *  Also because (p+1)/4 is an even number, the computed square root is\n+     *  itself always a square (a ** ((p+1)/4) is the square of a ** ((p+1)/8)).\n+     */\n+    secp256k1_fe x2, x3, x6, x9, x11, x22, x44, x88, x176, x220, x223, t1;\n     int j;\n \n     /** The binary representation of (p + 1)/4 has 3 blocks of 1s, with lengths in\n@@ -117,8 +126,8 @@ static int secp256k1_fe_sqrt_var(secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n     return secp256k1_fe_equal_var(&t1, a);\n }\n \n-static void secp256k1_fe_inv(secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n-    secp256k1_fe_t x2, x3, x6, x9, x11, x22, x44, x88, x176, x220, x223, t1;\n+static void secp256k1_fe_inv(secp256k1_fe *r, const secp256k1_fe *a) {\n+    secp256k1_fe x2, x3, x6, x9, x11, x22, x44, x88, x176, x220, x223, t1;\n     int j;\n \n     /** The binary representation of (p - 2) has 5 blocks of 1s, with lengths in\n@@ -207,11 +216,15 @@ static void secp256k1_fe_inv(secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n     secp256k1_fe_mul(r, a, &t1);\n }\n \n-static void secp256k1_fe_inv_var(secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n+static void secp256k1_fe_inv_var(secp256k1_fe *r, const secp256k1_fe *a) {\n #if defined(USE_FIELD_INV_BUILTIN)\n     secp256k1_fe_inv(r, a);\n #elif defined(USE_FIELD_INV_NUM)\n-    secp256k1_num_t n, m;\n+    secp256k1_num n, m;\n+    static const secp256k1_fe negone = SECP256K1_FE_CONST(\n+        0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL,\n+        0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFEUL, 0xFFFFFC2EUL\n+    );\n     /* secp256k1 field prime, value p defined in \"Standards for Efficient Cryptography\" (SEC2) 2.7.1. */\n     static const unsigned char prime[32] = {\n         0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n@@ -220,21 +233,28 @@ static void secp256k1_fe_inv_var(secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n         0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xFC,0x2F\n     };\n     unsigned char b[32];\n-    secp256k1_fe_t c = *a;\n+    int res;\n+    secp256k1_fe c = *a;\n     secp256k1_fe_normalize_var(&c);\n     secp256k1_fe_get_b32(b, &c);\n     secp256k1_num_set_bin(&n, b, 32);\n     secp256k1_num_set_bin(&m, prime, 32);\n     secp256k1_num_mod_inverse(&n, &n, &m);\n     secp256k1_num_get_bin(b, 32, &n);\n-    VERIFY_CHECK(secp256k1_fe_set_b32(r, b));\n+    res = secp256k1_fe_set_b32(r, b);\n+    (void)res;\n+    VERIFY_CHECK(res);\n+    /* Verify the result is the (unique) valid inverse using non-GMP code. */\n+    secp256k1_fe_mul(&c, &c, r);\n+    secp256k1_fe_add(&c, &negone);\n+    CHECK(secp256k1_fe_normalizes_to_zero_var(&c));\n #else\n #error \"Please select field inverse implementation\"\n #endif\n }\n \n-static void secp256k1_fe_inv_all_var(size_t len, secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n-    secp256k1_fe_t u;\n+static void secp256k1_fe_inv_all_var(size_t len, secp256k1_fe *r, const secp256k1_fe *a) {\n+    secp256k1_fe u;\n     size_t i;\n     if (len < 1) {\n         return;\n@@ -252,7 +272,7 @@ static void secp256k1_fe_inv_all_var(size_t len, secp256k1_fe_t *r, const secp25\n     secp256k1_fe_inv_var(&u, &r[--i]);\n \n     while (i > 0) {\n-        int j = i--;\n+        size_t j = i--;\n         secp256k1_fe_mul(&r[j], &r[i], &u);\n         secp256k1_fe_mul(&u, &u, &a[j]);\n     }"
      },
      {
        "sha": "1835fd491d16b7d8f4774327f25994a79ea1986a",
        "filename": "src/secp256k1/src/gen_context.c",
        "status": "added",
        "additions": 74,
        "deletions": 0,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/gen_context.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/gen_context.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/gen_context.c?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -0,0 +1,74 @@\n+/**********************************************************************\n+ * Copyright (c) 2013, 2014, 2015 Thomas Daede, Cory Fields           *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#define USE_BASIC_CONFIG 1\n+\n+#include \"basic-config.h\"\n+#include \"include/secp256k1.h\"\n+#include \"field_impl.h\"\n+#include \"scalar_impl.h\"\n+#include \"group_impl.h\"\n+#include \"ecmult_gen_impl.h\"\n+\n+static void default_error_callback_fn(const char* str, void* data) {\n+    (void)data;\n+    fprintf(stderr, \"[libsecp256k1] internal consistency check failed: %s\\n\", str);\n+    abort();\n+}\n+\n+static const secp256k1_callback default_error_callback = {\n+    default_error_callback_fn,\n+    NULL\n+};\n+\n+int main(int argc, char **argv) {\n+    secp256k1_ecmult_gen_context ctx;\n+    int inner;\n+    int outer;\n+    FILE* fp;\n+\n+    (void)argc;\n+    (void)argv;\n+\n+    fp = fopen(\"src/ecmult_static_context.h\",\"w\");\n+    if (fp == NULL) {\n+        fprintf(stderr, \"Could not open src/ecmult_static_context.h for writing!\\n\");\n+        return -1;\n+    }\n+    \n+    fprintf(fp, \"#ifndef _SECP256K1_ECMULT_STATIC_CONTEXT_\\n\");\n+    fprintf(fp, \"#define _SECP256K1_ECMULT_STATIC_CONTEXT_\\n\");\n+    fprintf(fp, \"#include \\\"group.h\\\"\\n\");\n+    fprintf(fp, \"#define SC SECP256K1_GE_STORAGE_CONST\\n\");\n+    fprintf(fp, \"static const secp256k1_ge_storage secp256k1_ecmult_static_context[64][16] = {\\n\");\n+\n+    secp256k1_ecmult_gen_context_init(&ctx);\n+    secp256k1_ecmult_gen_context_build(&ctx, &default_error_callback);\n+    for(outer = 0; outer != 64; outer++) {\n+        fprintf(fp,\"{\\n\");\n+        for(inner = 0; inner != 16; inner++) {\n+            fprintf(fp,\"    SC(%uu, %uu, %uu, %uu, %uu, %uu, %uu, %uu, %uu, %uu, %uu, %uu, %uu, %uu, %uu, %uu)\", SECP256K1_GE_STORAGE_CONST_GET((*ctx.prec)[outer][inner]));\n+            if (inner != 15) {\n+                fprintf(fp,\",\\n\");\n+            } else {\n+                fprintf(fp,\"\\n\");\n+            }\n+        }\n+        if (outer != 63) {\n+            fprintf(fp,\"},\\n\");\n+        } else {\n+            fprintf(fp,\"}\\n\");\n+        }\n+    }\n+    fprintf(fp,\"};\\n\");\n+    secp256k1_ecmult_gen_context_clear(&ctx);\n+    \n+    fprintf(fp, \"#undef SC\\n\");\n+    fprintf(fp, \"#endif\\n\");\n+    fclose(fp);\n+    \n+    return 0;\n+}"
      },
      {
        "sha": "ebfe1ca70cc1517ad692eda7c16cf32f8da78719",
        "filename": "src/secp256k1/src/group.h",
        "status": "modified",
        "additions": 63,
        "deletions": 43,
        "changes": 106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/group.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/group.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/group.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -12,110 +12,130 @@\n \n /** A group element of the secp256k1 curve, in affine coordinates. */\n typedef struct {\n-    secp256k1_fe_t x;\n-    secp256k1_fe_t y;\n+    secp256k1_fe x;\n+    secp256k1_fe y;\n     int infinity; /* whether this represents the point at infinity */\n-} secp256k1_ge_t;\n+} secp256k1_ge;\n \n #define SECP256K1_GE_CONST(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {SECP256K1_FE_CONST((a),(b),(c),(d),(e),(f),(g),(h)), SECP256K1_FE_CONST((i),(j),(k),(l),(m),(n),(o),(p)), 0}\n #define SECP256K1_GE_CONST_INFINITY {SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 0), SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 0), 1}\n \n /** A group element of the secp256k1 curve, in jacobian coordinates. */\n typedef struct {\n-    secp256k1_fe_t x; /* actual X: x/z^2 */\n-    secp256k1_fe_t y; /* actual Y: y/z^3 */\n-    secp256k1_fe_t z;\n+    secp256k1_fe x; /* actual X: x/z^2 */\n+    secp256k1_fe y; /* actual Y: y/z^3 */\n+    secp256k1_fe z;\n     int infinity; /* whether this represents the point at infinity */\n-} secp256k1_gej_t;\n+} secp256k1_gej;\n \n #define SECP256K1_GEJ_CONST(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {SECP256K1_FE_CONST((a),(b),(c),(d),(e),(f),(g),(h)), SECP256K1_FE_CONST((i),(j),(k),(l),(m),(n),(o),(p)), SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 1), 0}\n #define SECP256K1_GEJ_CONST_INFINITY {SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 0), SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 0), SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 0), 1}\n \n typedef struct {\n-    secp256k1_fe_storage_t x;\n-    secp256k1_fe_storage_t y;\n-} secp256k1_ge_storage_t;\n+    secp256k1_fe_storage x;\n+    secp256k1_fe_storage y;\n+} secp256k1_ge_storage;\n \n #define SECP256K1_GE_STORAGE_CONST(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {SECP256K1_FE_STORAGE_CONST((a),(b),(c),(d),(e),(f),(g),(h)), SECP256K1_FE_STORAGE_CONST((i),(j),(k),(l),(m),(n),(o),(p))}\n \n-/** Set a group element equal to the point at infinity */\n-static void secp256k1_ge_set_infinity(secp256k1_ge_t *r);\n+#define SECP256K1_GE_STORAGE_CONST_GET(t) SECP256K1_FE_STORAGE_CONST_GET(t.x), SECP256K1_FE_STORAGE_CONST_GET(t.y)\n \n /** Set a group element equal to the point with given X and Y coordinates */\n-static void secp256k1_ge_set_xy(secp256k1_ge_t *r, const secp256k1_fe_t *x, const secp256k1_fe_t *y);\n+static void secp256k1_ge_set_xy(secp256k1_ge *r, const secp256k1_fe *x, const secp256k1_fe *y);\n+\n+/** Set a group element (affine) equal to the point with the given X coordinate\n+ *  and a Y coordinate that is a quadratic residue modulo p. The return value\n+ *  is true iff a coordinate with the given X coordinate exists.\n+ */\n+static int secp256k1_ge_set_xquad_var(secp256k1_ge *r, const secp256k1_fe *x);\n \n /** Set a group element (affine) equal to the point with the given X coordinate, and given oddness\n  *  for Y. Return value indicates whether the result is valid. */\n-static int secp256k1_ge_set_xo_var(secp256k1_ge_t *r, const secp256k1_fe_t *x, int odd);\n+static int secp256k1_ge_set_xo_var(secp256k1_ge *r, const secp256k1_fe *x, int odd);\n \n /** Check whether a group element is the point at infinity. */\n-static int secp256k1_ge_is_infinity(const secp256k1_ge_t *a);\n+static int secp256k1_ge_is_infinity(const secp256k1_ge *a);\n \n /** Check whether a group element is valid (i.e., on the curve). */\n-static int secp256k1_ge_is_valid_var(const secp256k1_ge_t *a);\n+static int secp256k1_ge_is_valid_var(const secp256k1_ge *a);\n \n-static void secp256k1_ge_neg(secp256k1_ge_t *r, const secp256k1_ge_t *a);\n+static void secp256k1_ge_neg(secp256k1_ge *r, const secp256k1_ge *a);\n \n /** Set a group element equal to another which is given in jacobian coordinates */\n-static void secp256k1_ge_set_gej(secp256k1_ge_t *r, secp256k1_gej_t *a);\n+static void secp256k1_ge_set_gej(secp256k1_ge *r, secp256k1_gej *a);\n \n /** Set a batch of group elements equal to the inputs given in jacobian coordinates */\n-static void secp256k1_ge_set_all_gej_var(size_t len, secp256k1_ge_t *r, const secp256k1_gej_t *a);\n+static void secp256k1_ge_set_all_gej_var(size_t len, secp256k1_ge *r, const secp256k1_gej *a, const secp256k1_callback *cb);\n \n+/** Set a batch of group elements equal to the inputs given in jacobian\n+ *  coordinates (with known z-ratios). zr must contain the known z-ratios such\n+ *  that mul(a[i].z, zr[i+1]) == a[i+1].z. zr[0] is ignored. */\n+static void secp256k1_ge_set_table_gej_var(size_t len, secp256k1_ge *r, const secp256k1_gej *a, const secp256k1_fe *zr);\n \n-/** Set a group element (jacobian) equal to the point at infinity. */\n-static void secp256k1_gej_set_infinity(secp256k1_gej_t *r);\n+/** Bring a batch inputs given in jacobian coordinates (with known z-ratios) to\n+ *  the same global z \"denominator\". zr must contain the known z-ratios such\n+ *  that mul(a[i].z, zr[i+1]) == a[i+1].z. zr[0] is ignored. The x and y\n+ *  coordinates of the result are stored in r, the common z coordinate is\n+ *  stored in globalz. */\n+static void secp256k1_ge_globalz_set_table_gej(size_t len, secp256k1_ge *r, secp256k1_fe *globalz, const secp256k1_gej *a, const secp256k1_fe *zr);\n \n-/** Set a group element (jacobian) equal to the point with given X and Y coordinates. */\n-static void secp256k1_gej_set_xy(secp256k1_gej_t *r, const secp256k1_fe_t *x, const secp256k1_fe_t *y);\n+/** Set a group element (jacobian) equal to the point at infinity. */\n+static void secp256k1_gej_set_infinity(secp256k1_gej *r);\n \n /** Set a group element (jacobian) equal to another which is given in affine coordinates. */\n-static void secp256k1_gej_set_ge(secp256k1_gej_t *r, const secp256k1_ge_t *a);\n+static void secp256k1_gej_set_ge(secp256k1_gej *r, const secp256k1_ge *a);\n \n /** Compare the X coordinate of a group element (jacobian). */\n-static int secp256k1_gej_eq_x_var(const secp256k1_fe_t *x, const secp256k1_gej_t *a);\n+static int secp256k1_gej_eq_x_var(const secp256k1_fe *x, const secp256k1_gej *a);\n \n /** Set r equal to the inverse of a (i.e., mirrored around the X axis) */\n-static void secp256k1_gej_neg(secp256k1_gej_t *r, const secp256k1_gej_t *a);\n+static void secp256k1_gej_neg(secp256k1_gej *r, const secp256k1_gej *a);\n \n /** Check whether a group element is the point at infinity. */\n-static int secp256k1_gej_is_infinity(const secp256k1_gej_t *a);\n+static int secp256k1_gej_is_infinity(const secp256k1_gej *a);\n \n-/** Set r equal to the double of a. */\n-static void secp256k1_gej_double_var(secp256k1_gej_t *r, const secp256k1_gej_t *a);\n+/** Set r equal to the double of a. If rzr is not-NULL, r->z = a->z * *rzr (where infinity means an implicit z = 0).\n+ * a may not be zero. Constant time. */\n+static void secp256k1_gej_double_nonzero(secp256k1_gej *r, const secp256k1_gej *a, secp256k1_fe *rzr);\n \n-/** Set r equal to the sum of a and b. */\n-static void secp256k1_gej_add_var(secp256k1_gej_t *r, const secp256k1_gej_t *a, const secp256k1_gej_t *b);\n+/** Set r equal to the double of a. If rzr is not-NULL, r->z = a->z * *rzr (where infinity means an implicit z = 0). */\n+static void secp256k1_gej_double_var(secp256k1_gej *r, const secp256k1_gej *a, secp256k1_fe *rzr);\n+\n+/** Set r equal to the sum of a and b. If rzr is non-NULL, r->z = a->z * *rzr (a cannot be infinity in that case). */\n+static void secp256k1_gej_add_var(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_gej *b, secp256k1_fe *rzr);\n \n /** Set r equal to the sum of a and b (with b given in affine coordinates, and not infinity). */\n-static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, const secp256k1_ge_t *b);\n+static void secp256k1_gej_add_ge(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_ge *b);\n \n /** Set r equal to the sum of a and b (with b given in affine coordinates). This is more efficient\n     than secp256k1_gej_add_var. It is identical to secp256k1_gej_add_ge but without constant-time\n-    guarantee, and b is allowed to be infinity. */\n-static void secp256k1_gej_add_ge_var(secp256k1_gej_t *r, const secp256k1_gej_t *a, const secp256k1_ge_t *b);\n+    guarantee, and b is allowed to be infinity. If rzr is non-NULL, r->z = a->z * *rzr (a cannot be infinity in that case). */\n+static void secp256k1_gej_add_ge_var(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_ge *b, secp256k1_fe *rzr);\n+\n+/** Set r equal to the sum of a and b (with the inverse of b's Z coordinate passed as bzinv). */\n+static void secp256k1_gej_add_zinv_var(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_ge *b, const secp256k1_fe *bzinv);\n \n #ifdef USE_ENDOMORPHISM\n /** Set r to be equal to lambda times a, where lambda is chosen in a way such that this is very fast. */\n-static void secp256k1_gej_mul_lambda(secp256k1_gej_t *r, const secp256k1_gej_t *a);\n+static void secp256k1_ge_mul_lambda(secp256k1_ge *r, const secp256k1_ge *a);\n #endif\n \n-/** Clear a secp256k1_gej_t to prevent leaking sensitive information. */\n-static void secp256k1_gej_clear(secp256k1_gej_t *r);\n+/** Clear a secp256k1_gej to prevent leaking sensitive information. */\n+static void secp256k1_gej_clear(secp256k1_gej *r);\n \n-/** Clear a secp256k1_ge_t to prevent leaking sensitive information. */\n-static void secp256k1_ge_clear(secp256k1_ge_t *r);\n+/** Clear a secp256k1_ge to prevent leaking sensitive information. */\n+static void secp256k1_ge_clear(secp256k1_ge *r);\n \n /** Convert a group element to the storage type. */\n-static void secp256k1_ge_to_storage(secp256k1_ge_storage_t *r, const secp256k1_ge_t*);\n+static void secp256k1_ge_to_storage(secp256k1_ge_storage *r, const secp256k1_ge *a);\n \n /** Convert a group element back from the storage type. */\n-static void secp256k1_ge_from_storage(secp256k1_ge_t *r, const secp256k1_ge_storage_t*);\n+static void secp256k1_ge_from_storage(secp256k1_ge *r, const secp256k1_ge_storage *a);\n \n /** If flag is true, set *r equal to *a; otherwise leave it. Constant-time. */\n-static void secp256k1_ge_storage_cmov(secp256k1_ge_storage_t *r, const secp256k1_ge_storage_t *a, int flag);\n+static void secp256k1_ge_storage_cmov(secp256k1_ge_storage *r, const secp256k1_ge_storage *a, int flag);\n \n /** Rescale a jacobian point by b which must be non-zero. Constant-time. */\n-static void secp256k1_gej_rescale(secp256k1_gej_t *r, const secp256k1_fe_t *b);\n+static void secp256k1_gej_rescale(secp256k1_gej *r, const secp256k1_fe *b);\n \n #endif"
      },
      {
        "sha": "42e2f6e6ebf6cf854533944ebe6ceedb23951306",
        "filename": "src/secp256k1/src/group_impl.h",
        "status": "modified",
        "additions": 276,
        "deletions": 93,
        "changes": 369,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/group_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/group_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/group_impl.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -16,35 +16,41 @@\n /** Generator for secp256k1, value 'g' defined in\n  *  \"Standards for Efficient Cryptography\" (SEC2) 2.7.1.\n  */\n-static const secp256k1_ge_t secp256k1_ge_const_g = SECP256K1_GE_CONST(\n+static const secp256k1_ge secp256k1_ge_const_g = SECP256K1_GE_CONST(\n     0x79BE667EUL, 0xF9DCBBACUL, 0x55A06295UL, 0xCE870B07UL,\n     0x029BFCDBUL, 0x2DCE28D9UL, 0x59F2815BUL, 0x16F81798UL,\n     0x483ADA77UL, 0x26A3C465UL, 0x5DA4FBFCUL, 0x0E1108A8UL,\n     0xFD17B448UL, 0xA6855419UL, 0x9C47D08FUL, 0xFB10D4B8UL\n );\n \n-static void secp256k1_ge_set_infinity(secp256k1_ge_t *r) {\n-    r->infinity = 1;\n+static void secp256k1_ge_set_gej_zinv(secp256k1_ge *r, const secp256k1_gej *a, const secp256k1_fe *zi) {\n+    secp256k1_fe zi2; \n+    secp256k1_fe zi3;\n+    secp256k1_fe_sqr(&zi2, zi);\n+    secp256k1_fe_mul(&zi3, &zi2, zi);\n+    secp256k1_fe_mul(&r->x, &a->x, &zi2);\n+    secp256k1_fe_mul(&r->y, &a->y, &zi3);\n+    r->infinity = a->infinity;\n }\n \n-static void secp256k1_ge_set_xy(secp256k1_ge_t *r, const secp256k1_fe_t *x, const secp256k1_fe_t *y) {\n+static void secp256k1_ge_set_xy(secp256k1_ge *r, const secp256k1_fe *x, const secp256k1_fe *y) {\n     r->infinity = 0;\n     r->x = *x;\n     r->y = *y;\n }\n \n-static int secp256k1_ge_is_infinity(const secp256k1_ge_t *a) {\n+static int secp256k1_ge_is_infinity(const secp256k1_ge *a) {\n     return a->infinity;\n }\n \n-static void secp256k1_ge_neg(secp256k1_ge_t *r, const secp256k1_ge_t *a) {\n+static void secp256k1_ge_neg(secp256k1_ge *r, const secp256k1_ge *a) {\n     *r = *a;\n     secp256k1_fe_normalize_weak(&r->y);\n     secp256k1_fe_negate(&r->y, &r->y, 1);\n }\n \n-static void secp256k1_ge_set_gej(secp256k1_ge_t *r, secp256k1_gej_t *a) {\n-    secp256k1_fe_t z2, z3;\n+static void secp256k1_ge_set_gej(secp256k1_ge *r, secp256k1_gej *a) {\n+    secp256k1_fe z2, z3;\n     r->infinity = a->infinity;\n     secp256k1_fe_inv(&a->z, &a->z);\n     secp256k1_fe_sqr(&z2, &a->z);\n@@ -56,8 +62,8 @@ static void secp256k1_ge_set_gej(secp256k1_ge_t *r, secp256k1_gej_t *a) {\n     r->y = a->y;\n }\n \n-static void secp256k1_ge_set_gej_var(secp256k1_ge_t *r, secp256k1_gej_t *a) {\n-    secp256k1_fe_t z2, z3;\n+static void secp256k1_ge_set_gej_var(secp256k1_ge *r, secp256k1_gej *a) {\n+    secp256k1_fe z2, z3;\n     r->infinity = a->infinity;\n     if (a->infinity) {\n         return;\n@@ -72,98 +78,132 @@ static void secp256k1_ge_set_gej_var(secp256k1_ge_t *r, secp256k1_gej_t *a) {\n     r->y = a->y;\n }\n \n-static void secp256k1_ge_set_all_gej_var(size_t len, secp256k1_ge_t *r, const secp256k1_gej_t *a) {\n-    secp256k1_fe_t *az;\n-    secp256k1_fe_t *azi;\n+static void secp256k1_ge_set_all_gej_var(size_t len, secp256k1_ge *r, const secp256k1_gej *a, const secp256k1_callback *cb) {\n+    secp256k1_fe *az;\n+    secp256k1_fe *azi;\n     size_t i;\n     size_t count = 0;\n-    az = (secp256k1_fe_t *)checked_malloc(sizeof(secp256k1_fe_t) * len);\n+    az = (secp256k1_fe *)checked_malloc(cb, sizeof(secp256k1_fe) * len);\n     for (i = 0; i < len; i++) {\n         if (!a[i].infinity) {\n             az[count++] = a[i].z;\n         }\n     }\n \n-    azi = (secp256k1_fe_t *)checked_malloc(sizeof(secp256k1_fe_t) * count);\n+    azi = (secp256k1_fe *)checked_malloc(cb, sizeof(secp256k1_fe) * count);\n     secp256k1_fe_inv_all_var(count, azi, az);\n     free(az);\n \n     count = 0;\n     for (i = 0; i < len; i++) {\n         r[i].infinity = a[i].infinity;\n         if (!a[i].infinity) {\n-            secp256k1_fe_t zi2, zi3;\n-            secp256k1_fe_t *zi = &azi[count++];\n-            secp256k1_fe_sqr(&zi2, zi);\n-            secp256k1_fe_mul(&zi3, &zi2, zi);\n-            secp256k1_fe_mul(&r[i].x, &a[i].x, &zi2);\n-            secp256k1_fe_mul(&r[i].y, &a[i].y, &zi3);\n+            secp256k1_ge_set_gej_zinv(&r[i], &a[i], &azi[count++]);\n         }\n     }\n     free(azi);\n }\n \n-static void secp256k1_gej_set_infinity(secp256k1_gej_t *r) {\n+static void secp256k1_ge_set_table_gej_var(size_t len, secp256k1_ge *r, const secp256k1_gej *a, const secp256k1_fe *zr) {\n+    size_t i = len - 1;\n+    secp256k1_fe zi;\n+\n+    if (len > 0) {\n+        /* Compute the inverse of the last z coordinate, and use it to compute the last affine output. */\n+        secp256k1_fe_inv(&zi, &a[i].z);\n+        secp256k1_ge_set_gej_zinv(&r[i], &a[i], &zi);\n+\n+        /* Work out way backwards, using the z-ratios to scale the x/y values. */\n+        while (i > 0) {\n+            secp256k1_fe_mul(&zi, &zi, &zr[i]);\n+            i--;\n+            secp256k1_ge_set_gej_zinv(&r[i], &a[i], &zi);\n+        }\n+    }\n+}\n+\n+static void secp256k1_ge_globalz_set_table_gej(size_t len, secp256k1_ge *r, secp256k1_fe *globalz, const secp256k1_gej *a, const secp256k1_fe *zr) {\n+    size_t i = len - 1;\n+    secp256k1_fe zs;\n+\n+    if (len > 0) {\n+        /* The z of the final point gives us the \"global Z\" for the table. */\n+        r[i].x = a[i].x;\n+        r[i].y = a[i].y;\n+        *globalz = a[i].z;\n+        r[i].infinity = 0;\n+        zs = zr[i];\n+\n+        /* Work our way backwards, using the z-ratios to scale the x/y values. */\n+        while (i > 0) {\n+            if (i != len - 1) {\n+                secp256k1_fe_mul(&zs, &zs, &zr[i]);\n+            }\n+            i--;\n+            secp256k1_ge_set_gej_zinv(&r[i], &a[i], &zs);\n+        }\n+    }\n+}\n+\n+static void secp256k1_gej_set_infinity(secp256k1_gej *r) {\n     r->infinity = 1;\n     secp256k1_fe_set_int(&r->x, 0);\n     secp256k1_fe_set_int(&r->y, 0);\n     secp256k1_fe_set_int(&r->z, 0);\n }\n \n-static void secp256k1_gej_set_xy(secp256k1_gej_t *r, const secp256k1_fe_t *x, const secp256k1_fe_t *y) {\n-    r->infinity = 0;\n-    r->x = *x;\n-    r->y = *y;\n-    secp256k1_fe_set_int(&r->z, 1);\n-}\n-\n-static void secp256k1_gej_clear(secp256k1_gej_t *r) {\n+static void secp256k1_gej_clear(secp256k1_gej *r) {\n     r->infinity = 0;\n     secp256k1_fe_clear(&r->x);\n     secp256k1_fe_clear(&r->y);\n     secp256k1_fe_clear(&r->z);\n }\n \n-static void secp256k1_ge_clear(secp256k1_ge_t *r) {\n+static void secp256k1_ge_clear(secp256k1_ge *r) {\n     r->infinity = 0;\n     secp256k1_fe_clear(&r->x);\n     secp256k1_fe_clear(&r->y);\n }\n \n-static int secp256k1_ge_set_xo_var(secp256k1_ge_t *r, const secp256k1_fe_t *x, int odd) {\n-    secp256k1_fe_t x2, x3, c;\n+static int secp256k1_ge_set_xquad_var(secp256k1_ge *r, const secp256k1_fe *x) {\n+    secp256k1_fe x2, x3, c;\n     r->x = *x;\n     secp256k1_fe_sqr(&x2, x);\n     secp256k1_fe_mul(&x3, x, &x2);\n     r->infinity = 0;\n     secp256k1_fe_set_int(&c, 7);\n     secp256k1_fe_add(&c, &x3);\n-    if (!secp256k1_fe_sqrt_var(&r->y, &c)) {\n+    return secp256k1_fe_sqrt_var(&r->y, &c);\n+}\n+\n+static int secp256k1_ge_set_xo_var(secp256k1_ge *r, const secp256k1_fe *x, int odd) {\n+    if (!secp256k1_ge_set_xquad_var(r, x)) {\n         return 0;\n     }\n     secp256k1_fe_normalize_var(&r->y);\n     if (secp256k1_fe_is_odd(&r->y) != odd) {\n         secp256k1_fe_negate(&r->y, &r->y, 1);\n     }\n     return 1;\n+\n }\n \n-static void secp256k1_gej_set_ge(secp256k1_gej_t *r, const secp256k1_ge_t *a) {\n+static void secp256k1_gej_set_ge(secp256k1_gej *r, const secp256k1_ge *a) {\n    r->infinity = a->infinity;\n    r->x = a->x;\n    r->y = a->y;\n    secp256k1_fe_set_int(&r->z, 1);\n }\n \n-static int secp256k1_gej_eq_x_var(const secp256k1_fe_t *x, const secp256k1_gej_t *a) {\n-    secp256k1_fe_t r, r2;\n+static int secp256k1_gej_eq_x_var(const secp256k1_fe *x, const secp256k1_gej *a) {\n+    secp256k1_fe r, r2;\n     VERIFY_CHECK(!a->infinity);\n     secp256k1_fe_sqr(&r, &a->z); secp256k1_fe_mul(&r, &r, x);\n     r2 = a->x; secp256k1_fe_normalize_weak(&r2);\n     return secp256k1_fe_equal_var(&r, &r2);\n }\n \n-static void secp256k1_gej_neg(secp256k1_gej_t *r, const secp256k1_gej_t *a) {\n+static void secp256k1_gej_neg(secp256k1_gej *r, const secp256k1_gej *a) {\n     r->infinity = a->infinity;\n     r->x = a->x;\n     r->y = a->y;\n@@ -172,12 +212,12 @@ static void secp256k1_gej_neg(secp256k1_gej_t *r, const secp256k1_gej_t *a) {\n     secp256k1_fe_negate(&r->y, &r->y, 1);\n }\n \n-static int secp256k1_gej_is_infinity(const secp256k1_gej_t *a) {\n+static int secp256k1_gej_is_infinity(const secp256k1_gej *a) {\n     return a->infinity;\n }\n \n-static int secp256k1_gej_is_valid_var(const secp256k1_gej_t *a) {\n-    secp256k1_fe_t y2, x3, z2, z6;\n+static int secp256k1_gej_is_valid_var(const secp256k1_gej *a) {\n+    secp256k1_fe y2, x3, z2, z6;\n     if (a->infinity) {\n         return 0;\n     }\n@@ -196,8 +236,8 @@ static int secp256k1_gej_is_valid_var(const secp256k1_gej_t *a) {\n     return secp256k1_fe_equal_var(&y2, &x3);\n }\n \n-static int secp256k1_ge_is_valid_var(const secp256k1_ge_t *a) {\n-    secp256k1_fe_t y2, x3, c;\n+static int secp256k1_ge_is_valid_var(const secp256k1_ge *a) {\n+    secp256k1_fe y2, x3, c;\n     if (a->infinity) {\n         return 0;\n     }\n@@ -210,18 +250,27 @@ static int secp256k1_ge_is_valid_var(const secp256k1_ge_t *a) {\n     return secp256k1_fe_equal_var(&y2, &x3);\n }\n \n-static void secp256k1_gej_double_var(secp256k1_gej_t *r, const secp256k1_gej_t *a) {\n+static void secp256k1_gej_double_var(secp256k1_gej *r, const secp256k1_gej *a, secp256k1_fe *rzr) {\n     /* Operations: 3 mul, 4 sqr, 0 normalize, 12 mul_int/add/negate */\n-    secp256k1_fe_t t1,t2,t3,t4;\n+    secp256k1_fe t1,t2,t3,t4;\n     /** For secp256k1, 2Q is infinity if and only if Q is infinity. This is because if 2Q = infinity,\n      *  Q must equal -Q, or that Q.y == -(Q.y), or Q.y is 0. For a point on y^2 = x^3 + 7 to have\n      *  y=0, x^3 must be -7 mod p. However, -7 has no cube root mod p.\n      */\n     r->infinity = a->infinity;\n     if (r->infinity) {\n+        if (rzr != NULL) {\n+            secp256k1_fe_set_int(rzr, 1);\n+        }\n         return;\n     }\n \n+    if (rzr != NULL) {\n+        *rzr = a->y;\n+        secp256k1_fe_normalize_weak(rzr);\n+        secp256k1_fe_mul_int(rzr, 2);\n+    }\n+\n     secp256k1_fe_mul(&r->z, &a->z, &a->y);\n     secp256k1_fe_mul_int(&r->z, 2);       /* Z' = 2*Y*Z (2) */\n     secp256k1_fe_sqr(&t1, &a->x);\n@@ -244,17 +293,29 @@ static void secp256k1_gej_double_var(secp256k1_gej_t *r, const secp256k1_gej_t *\n     secp256k1_fe_add(&r->y, &t2);         /* Y' = 36*X^3*Y^2 - 27*X^6 - 8*Y^4 (4) */\n }\n \n-static void secp256k1_gej_add_var(secp256k1_gej_t *r, const secp256k1_gej_t *a, const secp256k1_gej_t *b) {\n+static SECP256K1_INLINE void secp256k1_gej_double_nonzero(secp256k1_gej *r, const secp256k1_gej *a, secp256k1_fe *rzr) {\n+    VERIFY_CHECK(!secp256k1_gej_is_infinity(a));\n+    secp256k1_gej_double_var(r, a, rzr);\n+}\n+\n+static void secp256k1_gej_add_var(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_gej *b, secp256k1_fe *rzr) {\n     /* Operations: 12 mul, 4 sqr, 2 normalize, 12 mul_int/add/negate */\n-    secp256k1_fe_t z22, z12, u1, u2, s1, s2, h, i, i2, h2, h3, t;\n+    secp256k1_fe z22, z12, u1, u2, s1, s2, h, i, i2, h2, h3, t;\n+\n     if (a->infinity) {\n+        VERIFY_CHECK(rzr == NULL);\n         *r = *b;\n         return;\n     }\n+\n     if (b->infinity) {\n+        if (rzr != NULL) {\n+            secp256k1_fe_set_int(rzr, 1);\n+        }\n         *r = *a;\n         return;\n     }\n+\n     r->infinity = 0;\n     secp256k1_fe_sqr(&z22, &b->z);\n     secp256k1_fe_sqr(&z12, &a->z);\n@@ -266,38 +327,47 @@ static void secp256k1_gej_add_var(secp256k1_gej_t *r, const secp256k1_gej_t *a,\n     secp256k1_fe_negate(&i, &s1, 1); secp256k1_fe_add(&i, &s2);\n     if (secp256k1_fe_normalizes_to_zero_var(&h)) {\n         if (secp256k1_fe_normalizes_to_zero_var(&i)) {\n-            secp256k1_gej_double_var(r, a);\n+            secp256k1_gej_double_var(r, a, rzr);\n         } else {\n+            if (rzr != NULL) {\n+                secp256k1_fe_set_int(rzr, 0);\n+            }\n             r->infinity = 1;\n         }\n         return;\n     }\n     secp256k1_fe_sqr(&i2, &i);\n     secp256k1_fe_sqr(&h2, &h);\n     secp256k1_fe_mul(&h3, &h, &h2);\n-    secp256k1_fe_mul(&r->z, &a->z, &b->z); secp256k1_fe_mul(&r->z, &r->z, &h);\n+    secp256k1_fe_mul(&h, &h, &b->z);\n+    if (rzr != NULL) {\n+        *rzr = h;\n+    }\n+    secp256k1_fe_mul(&r->z, &a->z, &h);\n     secp256k1_fe_mul(&t, &u1, &h2);\n     r->x = t; secp256k1_fe_mul_int(&r->x, 2); secp256k1_fe_add(&r->x, &h3); secp256k1_fe_negate(&r->x, &r->x, 3); secp256k1_fe_add(&r->x, &i2);\n     secp256k1_fe_negate(&r->y, &r->x, 5); secp256k1_fe_add(&r->y, &t); secp256k1_fe_mul(&r->y, &r->y, &i);\n     secp256k1_fe_mul(&h3, &h3, &s1); secp256k1_fe_negate(&h3, &h3, 1);\n     secp256k1_fe_add(&r->y, &h3);\n }\n \n-static void secp256k1_gej_add_ge_var(secp256k1_gej_t *r, const secp256k1_gej_t *a, const secp256k1_ge_t *b) {\n+static void secp256k1_gej_add_ge_var(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_ge *b, secp256k1_fe *rzr) {\n     /* 8 mul, 3 sqr, 4 normalize, 12 mul_int/add/negate */\n-    secp256k1_fe_t z12, u1, u2, s1, s2, h, i, i2, h2, h3, t;\n+    secp256k1_fe z12, u1, u2, s1, s2, h, i, i2, h2, h3, t;\n     if (a->infinity) {\n-        r->infinity = b->infinity;\n-        r->x = b->x;\n-        r->y = b->y;\n-        secp256k1_fe_set_int(&r->z, 1);\n+        VERIFY_CHECK(rzr == NULL);\n+        secp256k1_gej_set_ge(r, b);\n         return;\n     }\n     if (b->infinity) {\n+        if (rzr != NULL) {\n+            secp256k1_fe_set_int(rzr, 1);\n+        }\n         *r = *a;\n         return;\n     }\n     r->infinity = 0;\n+\n     secp256k1_fe_sqr(&z12, &a->z);\n     u1 = a->x; secp256k1_fe_normalize_weak(&u1);\n     secp256k1_fe_mul(&u2, &b->x, &z12);\n@@ -307,7 +377,69 @@ static void secp256k1_gej_add_ge_var(secp256k1_gej_t *r, const secp256k1_gej_t *\n     secp256k1_fe_negate(&i, &s1, 1); secp256k1_fe_add(&i, &s2);\n     if (secp256k1_fe_normalizes_to_zero_var(&h)) {\n         if (secp256k1_fe_normalizes_to_zero_var(&i)) {\n-            secp256k1_gej_double_var(r, a);\n+            secp256k1_gej_double_var(r, a, rzr);\n+        } else {\n+            if (rzr != NULL) {\n+                secp256k1_fe_set_int(rzr, 0);\n+            }\n+            r->infinity = 1;\n+        }\n+        return;\n+    }\n+    secp256k1_fe_sqr(&i2, &i);\n+    secp256k1_fe_sqr(&h2, &h);\n+    secp256k1_fe_mul(&h3, &h, &h2);\n+    if (rzr != NULL) {\n+        *rzr = h;\n+    }\n+    secp256k1_fe_mul(&r->z, &a->z, &h);\n+    secp256k1_fe_mul(&t, &u1, &h2);\n+    r->x = t; secp256k1_fe_mul_int(&r->x, 2); secp256k1_fe_add(&r->x, &h3); secp256k1_fe_negate(&r->x, &r->x, 3); secp256k1_fe_add(&r->x, &i2);\n+    secp256k1_fe_negate(&r->y, &r->x, 5); secp256k1_fe_add(&r->y, &t); secp256k1_fe_mul(&r->y, &r->y, &i);\n+    secp256k1_fe_mul(&h3, &h3, &s1); secp256k1_fe_negate(&h3, &h3, 1);\n+    secp256k1_fe_add(&r->y, &h3);\n+}\n+\n+static void secp256k1_gej_add_zinv_var(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_ge *b, const secp256k1_fe *bzinv) {\n+    /* 9 mul, 3 sqr, 4 normalize, 12 mul_int/add/negate */\n+    secp256k1_fe az, z12, u1, u2, s1, s2, h, i, i2, h2, h3, t;\n+\n+    if (b->infinity) {\n+        *r = *a;\n+        return;\n+    }\n+    if (a->infinity) {\n+        secp256k1_fe bzinv2, bzinv3;\n+        r->infinity = b->infinity;\n+        secp256k1_fe_sqr(&bzinv2, bzinv);\n+        secp256k1_fe_mul(&bzinv3, &bzinv2, bzinv);\n+        secp256k1_fe_mul(&r->x, &b->x, &bzinv2);\n+        secp256k1_fe_mul(&r->y, &b->y, &bzinv3);\n+        secp256k1_fe_set_int(&r->z, 1);\n+        return;\n+    }\n+    r->infinity = 0;\n+\n+    /** We need to calculate (rx,ry,rz) = (ax,ay,az) + (bx,by,1/bzinv). Due to\n+     *  secp256k1's isomorphism we can multiply the Z coordinates on both sides\n+     *  by bzinv, and get: (rx,ry,rz*bzinv) = (ax,ay,az*bzinv) + (bx,by,1).\n+     *  This means that (rx,ry,rz) can be calculated as\n+     *  (ax,ay,az*bzinv) + (bx,by,1), when not applying the bzinv factor to rz.\n+     *  The variable az below holds the modified Z coordinate for a, which is used\n+     *  for the computation of rx and ry, but not for rz.\n+     */\n+    secp256k1_fe_mul(&az, &a->z, bzinv);\n+\n+    secp256k1_fe_sqr(&z12, &az);\n+    u1 = a->x; secp256k1_fe_normalize_weak(&u1);\n+    secp256k1_fe_mul(&u2, &b->x, &z12);\n+    s1 = a->y; secp256k1_fe_normalize_weak(&s1);\n+    secp256k1_fe_mul(&s2, &b->y, &z12); secp256k1_fe_mul(&s2, &s2, &az);\n+    secp256k1_fe_negate(&h, &u1, 1); secp256k1_fe_add(&h, &u2);\n+    secp256k1_fe_negate(&i, &s1, 1); secp256k1_fe_add(&i, &s2);\n+    if (secp256k1_fe_normalizes_to_zero_var(&h)) {\n+        if (secp256k1_fe_normalizes_to_zero_var(&i)) {\n+            secp256k1_gej_double_var(r, a, NULL);\n         } else {\n             r->infinity = 1;\n         }\n@@ -324,11 +456,13 @@ static void secp256k1_gej_add_ge_var(secp256k1_gej_t *r, const secp256k1_gej_t *\n     secp256k1_fe_add(&r->y, &h3);\n }\n \n-static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, const secp256k1_ge_t *b) {\n-    /* Operations: 7 mul, 5 sqr, 5 normalize, 17 mul_int/add/negate/cmov */\n-    static const secp256k1_fe_t fe_1 = SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 1);\n-    secp256k1_fe_t zz, u1, u2, s1, s2, z, t, m, n, q, rr;\n-    int infinity;\n+\n+static void secp256k1_gej_add_ge(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_ge *b) {\n+    /* Operations: 7 mul, 5 sqr, 4 normalize, 21 mul_int/add/negate/cmov */\n+    static const secp256k1_fe fe_1 = SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 1);\n+    secp256k1_fe zz, u1, u2, s1, s2, t, tt, m, n, q, rr;\n+    secp256k1_fe m_alt, rr_alt;\n+    int infinity, degenerate;\n     VERIFY_CHECK(!b->infinity);\n     VERIFY_CHECK(a->infinity == 0 || a->infinity == 1);\n \n@@ -352,53 +486,102 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n      *    Y3 = 4*(R*(3*Q-2*R^2)-M^4)\n      *    Z3 = 2*M*Z\n      *  (Note that the paper uses xi = Xi / Zi and yi = Yi / Zi instead.)\n+     *\n+     *  This formula has the benefit of being the same for both addition\n+     *  of distinct points and doubling. However, it breaks down in the\n+     *  case that either point is infinity, or that y1 = -y2. We handle\n+     *  these cases in the following ways:\n+     *\n+     *    - If b is infinity we simply bail by means of a VERIFY_CHECK.\n+     *\n+     *    - If a is infinity, we detect this, and at the end of the\n+     *      computation replace the result (which will be meaningless,\n+     *      but we compute to be constant-time) with b.x : b.y : 1.\n+     *\n+     *    - If a = -b, we have y1 = -y2, which is a degenerate case.\n+     *      But here the answer is infinity, so we simply set the\n+     *      infinity flag of the result, overriding the computed values\n+     *      without even needing to cmov.\n+     *\n+     *    - If y1 = -y2 but x1 != x2, which does occur thanks to certain\n+     *      properties of our curve (specifically, 1 has nontrivial cube\n+     *      roots in our field, and the curve equation has no x coefficient)\n+     *      then the answer is not infinity but also not given by the above\n+     *      equation. In this case, we cmov in place an alternate expression\n+     *      for lambda. Specifically (y1 - y2)/(x1 - x2). Where both these\n+     *      expressions for lambda are defined, they are equal, and can be\n+     *      obtained from each other by multiplication by (y1 + y2)/(y1 + y2)\n+     *      then substitution of x^3 + 7 for y^2 (using the curve equation).\n+     *      For all pairs of nonzero points (a, b) at least one is defined,\n+     *      so this covers everything.\n      */\n \n     secp256k1_fe_sqr(&zz, &a->z);                       /* z = Z1^2 */\n     u1 = a->x; secp256k1_fe_normalize_weak(&u1);        /* u1 = U1 = X1*Z2^2 (1) */\n     secp256k1_fe_mul(&u2, &b->x, &zz);                  /* u2 = U2 = X2*Z1^2 (1) */\n     s1 = a->y; secp256k1_fe_normalize_weak(&s1);        /* s1 = S1 = Y1*Z2^3 (1) */\n-    secp256k1_fe_mul(&s2, &b->y, &zz);                  /* s2 = Y2*Z2^2 (1) */\n+    secp256k1_fe_mul(&s2, &b->y, &zz);                  /* s2 = Y2*Z1^2 (1) */\n     secp256k1_fe_mul(&s2, &s2, &a->z);                  /* s2 = S2 = Y2*Z1^3 (1) */\n-    z = a->z;                                           /* z = Z = Z1*Z2 (8) */\n     t = u1; secp256k1_fe_add(&t, &u2);                  /* t = T = U1+U2 (2) */\n     m = s1; secp256k1_fe_add(&m, &s2);                  /* m = M = S1+S2 (2) */\n-    secp256k1_fe_sqr(&n, &m);                           /* n = M^2 (1) */\n-    secp256k1_fe_mul(&q, &n, &t);                       /* q = Q = T*M^2 (1) */\n-    secp256k1_fe_sqr(&n, &n);                           /* n = M^4 (1) */\n     secp256k1_fe_sqr(&rr, &t);                          /* rr = T^2 (1) */\n-    secp256k1_fe_mul(&t, &u1, &u2); secp256k1_fe_negate(&t, &t, 1); /* t = -U1*U2 (2) */\n-    secp256k1_fe_add(&rr, &t);                                      /* rr = R = T^2-U1*U2 (3) */\n-    secp256k1_fe_sqr(&t, &rr);                                      /* t = R^2 (1) */\n-    secp256k1_fe_mul(&r->z, &m, &z);                                /* r->z = M*Z (1) */\n+    secp256k1_fe_negate(&m_alt, &u2, 1);                /* Malt = -X2*Z1^2 */\n+    secp256k1_fe_mul(&tt, &u1, &m_alt);                 /* tt = -U1*U2 (2) */\n+    secp256k1_fe_add(&rr, &tt);                         /* rr = R = T^2-U1*U2 (3) */\n+    /** If lambda = R/M = 0/0 we have a problem (except in the \"trivial\"\n+     *  case that Z = z1z2 = 0, and this is special-cased later on). */\n+    degenerate = secp256k1_fe_normalizes_to_zero(&m) &\n+                 secp256k1_fe_normalizes_to_zero(&rr);\n+    /* This only occurs when y1 == -y2 and x1^3 == x2^3, but x1 != x2.\n+     * This means either x1 == beta*x2 or beta*x1 == x2, where beta is\n+     * a nontrivial cube root of one. In either case, an alternate\n+     * non-indeterminate expression for lambda is (y1 - y2)/(x1 - x2),\n+     * so we set R/M equal to this. */\n+    rr_alt = s1;\n+    secp256k1_fe_mul_int(&rr_alt, 2);       /* rr = Y1*Z2^3 - Y2*Z1^3 (2) */\n+    secp256k1_fe_add(&m_alt, &u1);          /* Malt = X1*Z2^2 - X2*Z1^2 */\n+\n+    secp256k1_fe_cmov(&rr_alt, &rr, !degenerate);\n+    secp256k1_fe_cmov(&m_alt, &m, !degenerate);\n+    /* Now Ralt / Malt = lambda and is guaranteed not to be 0/0.\n+     * From here on out Ralt and Malt represent the numerator\n+     * and denominator of lambda; R and M represent the explicit\n+     * expressions x1^2 + x2^2 + x1x2 and y1 + y2. */\n+    secp256k1_fe_sqr(&n, &m_alt);                       /* n = Malt^2 (1) */\n+    secp256k1_fe_mul(&q, &n, &t);                       /* q = Q = T*Malt^2 (1) */\n+    /* These two lines use the observation that either M == Malt or M == 0,\n+     * so M^3 * Malt is either Malt^4 (which is computed by squaring), or\n+     * zero (which is \"computed\" by cmov). So the cost is one squaring\n+     * versus two multiplications. */\n+    secp256k1_fe_sqr(&n, &n);\n+    secp256k1_fe_cmov(&n, &m, degenerate);              /* n = M^3 * Malt (2) */\n+    secp256k1_fe_sqr(&t, &rr_alt);                      /* t = Ralt^2 (1) */\n+    secp256k1_fe_mul(&r->z, &a->z, &m_alt);             /* r->z = Malt*Z (1) */\n     infinity = secp256k1_fe_normalizes_to_zero(&r->z) * (1 - a->infinity);\n-    secp256k1_fe_mul_int(&r->z, 2 * (1 - a->infinity)); /* r->z = Z3 = 2*M*Z (2) */\n-    r->x = t;                                           /* r->x = R^2 (1) */\n+    secp256k1_fe_mul_int(&r->z, 2);                     /* r->z = Z3 = 2*Malt*Z (2) */\n     secp256k1_fe_negate(&q, &q, 1);                     /* q = -Q (2) */\n-    secp256k1_fe_add(&r->x, &q);                        /* r->x = R^2-Q (3) */\n-    secp256k1_fe_normalize(&r->x);\n-    secp256k1_fe_mul_int(&q, 3);                        /* q = -3*Q (6) */\n-    secp256k1_fe_mul_int(&t, 2);                        /* t = 2*R^2 (2) */\n-    secp256k1_fe_add(&t, &q);                           /* t = 2*R^2-3*Q (8) */\n-    secp256k1_fe_mul(&t, &t, &rr);                      /* t = R*(2*R^2-3*Q) (1) */\n-    secp256k1_fe_add(&t, &n);                           /* t = R*(2*R^2-3*Q)+M^4 (2) */\n-    secp256k1_fe_negate(&r->y, &t, 2);                  /* r->y = R*(3*Q-2*R^2)-M^4 (3) */\n+    secp256k1_fe_add(&t, &q);                           /* t = Ralt^2-Q (3) */\n+    secp256k1_fe_normalize_weak(&t);\n+    r->x = t;                                           /* r->x = Ralt^2-Q (1) */\n+    secp256k1_fe_mul_int(&t, 2);                        /* t = 2*x3 (2) */\n+    secp256k1_fe_add(&t, &q);                           /* t = 2*x3 - Q: (4) */\n+    secp256k1_fe_mul(&t, &t, &rr_alt);                  /* t = Ralt*(2*x3 - Q) (1) */\n+    secp256k1_fe_add(&t, &n);                           /* t = Ralt*(2*x3 - Q) + M^3*Malt (3) */\n+    secp256k1_fe_negate(&r->y, &t, 3);                  /* r->y = Ralt*(Q - 2x3) - M^3*Malt (4) */\n     secp256k1_fe_normalize_weak(&r->y);\n-    secp256k1_fe_mul_int(&r->x, 4 * (1 - a->infinity)); /* r->x = X3 = 4*(R^2-Q) */\n-    secp256k1_fe_mul_int(&r->y, 4 * (1 - a->infinity)); /* r->y = Y3 = 4*R*(3*Q-2*R^2)-4*M^4 (4) */\n+    secp256k1_fe_mul_int(&r->x, 4);                     /* r->x = X3 = 4*(Ralt^2-Q) */\n+    secp256k1_fe_mul_int(&r->y, 4);                     /* r->y = Y3 = 4*Ralt*(Q - 2x3) - 4*M^3*Malt (4) */\n \n-    /** In case a->infinity == 1, the above code results in r->x, r->y, and r->z all equal to 0.\n-     *  Replace r with b->x, b->y, 1 in that case.\n-     */\n+    /** In case a->infinity == 1, replace r with (b->x, b->y, 1). */\n     secp256k1_fe_cmov(&r->x, &b->x, a->infinity);\n     secp256k1_fe_cmov(&r->y, &b->y, a->infinity);\n     secp256k1_fe_cmov(&r->z, &fe_1, a->infinity);\n     r->infinity = infinity;\n }\n \n-static void secp256k1_gej_rescale(secp256k1_gej_t *r, const secp256k1_fe_t *s) {\n+static void secp256k1_gej_rescale(secp256k1_gej *r, const secp256k1_fe *s) {\n     /* Operations: 4 mul, 1 sqr */\n-    secp256k1_fe_t zz;\n+    secp256k1_fe zz;\n     VERIFY_CHECK(!secp256k1_fe_is_zero(s));\n     secp256k1_fe_sqr(&zz, s);\n     secp256k1_fe_mul(&r->x, &r->x, &zz);                /* r->x *= s^2 */\n@@ -407,8 +590,8 @@ static void secp256k1_gej_rescale(secp256k1_gej_t *r, const secp256k1_fe_t *s) {\n     secp256k1_fe_mul(&r->z, &r->z, s);                  /* r->z *= s   */\n }\n \n-static void secp256k1_ge_to_storage(secp256k1_ge_storage_t *r, const secp256k1_ge_t *a) {\n-    secp256k1_fe_t x, y;\n+static void secp256k1_ge_to_storage(secp256k1_ge_storage *r, const secp256k1_ge *a) {\n+    secp256k1_fe x, y;\n     VERIFY_CHECK(!a->infinity);\n     x = a->x;\n     secp256k1_fe_normalize(&x);\n@@ -418,20 +601,20 @@ static void secp256k1_ge_to_storage(secp256k1_ge_storage_t *r, const secp256k1_g\n     secp256k1_fe_to_storage(&r->y, &y);\n }\n \n-static void secp256k1_ge_from_storage(secp256k1_ge_t *r, const secp256k1_ge_storage_t *a) {\n+static void secp256k1_ge_from_storage(secp256k1_ge *r, const secp256k1_ge_storage *a) {\n     secp256k1_fe_from_storage(&r->x, &a->x);\n     secp256k1_fe_from_storage(&r->y, &a->y);\n     r->infinity = 0;\n }\n \n-static SECP256K1_INLINE void secp256k1_ge_storage_cmov(secp256k1_ge_storage_t *r, const secp256k1_ge_storage_t *a, int flag) {\n+static SECP256K1_INLINE void secp256k1_ge_storage_cmov(secp256k1_ge_storage *r, const secp256k1_ge_storage *a, int flag) {\n     secp256k1_fe_storage_cmov(&r->x, &a->x, flag);\n     secp256k1_fe_storage_cmov(&r->y, &a->y, flag);\n }\n \n #ifdef USE_ENDOMORPHISM\n-static void secp256k1_gej_mul_lambda(secp256k1_gej_t *r, const secp256k1_gej_t *a) {\n-    static const secp256k1_fe_t beta = SECP256K1_FE_CONST(\n+static void secp256k1_ge_mul_lambda(secp256k1_ge *r, const secp256k1_ge *a) {\n+    static const secp256k1_fe beta = SECP256K1_FE_CONST(\n         0x7ae96a2bul, 0x657c0710ul, 0x6e64479eul, 0xac3434e9ul,\n         0x9cf04975ul, 0x12f58995ul, 0xc1396c28ul, 0x719501eeul\n     );"
      },
      {
        "sha": "0ff01e63fa737af30aaae74a8f75fa322c8fc76f",
        "filename": "src/secp256k1/src/hash.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/hash.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -34,7 +34,7 @@ typedef struct {\n     int retry;\n } secp256k1_rfc6979_hmac_sha256_t;\n \n-static void secp256k1_rfc6979_hmac_sha256_initialize(secp256k1_rfc6979_hmac_sha256_t *rng, const unsigned char *key, size_t keylen, const unsigned char *msg, size_t msglen, const unsigned char *rnd, size_t rndlen);\n+static void secp256k1_rfc6979_hmac_sha256_initialize(secp256k1_rfc6979_hmac_sha256_t *rng, const unsigned char *key, size_t keylen);\n static void secp256k1_rfc6979_hmac_sha256_generate(secp256k1_rfc6979_hmac_sha256_t *rng, unsigned char *out, size_t outlen);\n static void secp256k1_rfc6979_hmac_sha256_finalize(secp256k1_rfc6979_hmac_sha256_t *rng);\n "
      },
      {
        "sha": "ae55df6d8a29a97f3e442ceeb9f4aab0dc70dadb",
        "filename": "src/secp256k1/src/hash_impl.h",
        "status": "modified",
        "additions": 1,
        "deletions": 11,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/hash_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/hash_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/hash_impl.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -202,7 +202,7 @@ static void secp256k1_hmac_sha256_finalize(secp256k1_hmac_sha256_t *hash, unsign\n }\n \n \n-static void secp256k1_rfc6979_hmac_sha256_initialize(secp256k1_rfc6979_hmac_sha256_t *rng, const unsigned char *key, size_t keylen, const unsigned char *msg, size_t msglen, const unsigned char *rnd, size_t rndlen) {\n+static void secp256k1_rfc6979_hmac_sha256_initialize(secp256k1_rfc6979_hmac_sha256_t *rng, const unsigned char *key, size_t keylen) {\n     secp256k1_hmac_sha256_t hmac;\n     static const unsigned char zero[1] = {0x00};\n     static const unsigned char one[1] = {0x01};\n@@ -215,11 +215,6 @@ static void secp256k1_rfc6979_hmac_sha256_initialize(secp256k1_rfc6979_hmac_sha2\n     secp256k1_hmac_sha256_write(&hmac, rng->v, 32);\n     secp256k1_hmac_sha256_write(&hmac, zero, 1);\n     secp256k1_hmac_sha256_write(&hmac, key, keylen);\n-    secp256k1_hmac_sha256_write(&hmac, msg, msglen);\n-    if (rnd && rndlen) {\n-        /* RFC6979 3.6 \"Additional data\". */\n-        secp256k1_hmac_sha256_write(&hmac, rnd, rndlen);\n-    }\n     secp256k1_hmac_sha256_finalize(&hmac, rng->k);\n     secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);\n     secp256k1_hmac_sha256_write(&hmac, rng->v, 32);\n@@ -230,11 +225,6 @@ static void secp256k1_rfc6979_hmac_sha256_initialize(secp256k1_rfc6979_hmac_sha2\n     secp256k1_hmac_sha256_write(&hmac, rng->v, 32);\n     secp256k1_hmac_sha256_write(&hmac, one, 1);\n     secp256k1_hmac_sha256_write(&hmac, key, keylen);\n-    secp256k1_hmac_sha256_write(&hmac, msg, msglen);\n-    if (rnd && rndlen) {\n-        /* RFC6979 3.6 \"Additional data\". */\n-        secp256k1_hmac_sha256_write(&hmac, rnd, rndlen);\n-    }\n     secp256k1_hmac_sha256_finalize(&hmac, rng->k);\n     secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);\n     secp256k1_hmac_sha256_write(&hmac, rng->v, 32);"
      },
      {
        "sha": "670b9c1152e753aa0f7cf4c3c078925d5a6ade05",
        "filename": "src/secp256k1/src/modules/ecdh/Makefile.am.include",
        "status": "added",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/modules/ecdh/Makefile.am.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/modules/ecdh/Makefile.am.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/modules/ecdh/Makefile.am.include?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -0,0 +1,8 @@\n+include_HEADERS += include/secp256k1_ecdh.h\n+noinst_HEADERS += src/modules/ecdh/main_impl.h\n+noinst_HEADERS += src/modules/ecdh/tests_impl.h\n+if USE_BENCHMARK\n+noinst_PROGRAMS += bench_ecdh\n+bench_ecdh_SOURCES = src/bench_ecdh.c\n+bench_ecdh_LDADD = libsecp256k1.la $(SECP_LIBS)\n+endif"
      },
      {
        "sha": "c23e4f82f7fe63a242279c1feec75447d99b0089",
        "filename": "src/secp256k1/src/modules/ecdh/main_impl.h",
        "status": "added",
        "additions": 54,
        "deletions": 0,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/modules/ecdh/main_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/modules/ecdh/main_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/modules/ecdh/main_impl.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -0,0 +1,54 @@\n+/**********************************************************************\n+ * Copyright (c) 2015 Andrew Poelstra                                 *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_MODULE_ECDH_MAIN_\n+#define _SECP256K1_MODULE_ECDH_MAIN_\n+\n+#include \"include/secp256k1_ecdh.h\"\n+#include \"ecmult_const_impl.h\"\n+\n+int secp256k1_ecdh(const secp256k1_context* ctx, unsigned char *result, const secp256k1_pubkey *point, const unsigned char *scalar) {\n+    int ret = 0;\n+    int overflow = 0;\n+    secp256k1_gej res;\n+    secp256k1_ge pt;\n+    secp256k1_scalar s;\n+    ARG_CHECK(result != NULL);\n+    ARG_CHECK(point != NULL);\n+    ARG_CHECK(scalar != NULL);\n+    (void)ctx;\n+\n+    secp256k1_pubkey_load(ctx, &pt, point);\n+    secp256k1_scalar_set_b32(&s, scalar, &overflow);\n+    if (overflow || secp256k1_scalar_is_zero(&s)) {\n+        ret = 0;\n+    } else {\n+        unsigned char x[32];\n+        unsigned char y[1];\n+        secp256k1_sha256_t sha;\n+\n+        secp256k1_ecmult_const(&res, &pt, &s);\n+        secp256k1_ge_set_gej(&pt, &res);\n+        /* Compute a hash of the point in compressed form\n+         * Note we cannot use secp256k1_eckey_pubkey_serialize here since it does not\n+         * expect its output to be secret and has a timing sidechannel. */\n+        secp256k1_fe_normalize(&pt.x);\n+        secp256k1_fe_normalize(&pt.y);\n+        secp256k1_fe_get_b32(x, &pt.x);\n+        y[0] = 0x02 | secp256k1_fe_is_odd(&pt.y);\n+\n+        secp256k1_sha256_initialize(&sha);\n+        secp256k1_sha256_write(&sha, y, sizeof(y));\n+        secp256k1_sha256_write(&sha, x, sizeof(x));\n+        secp256k1_sha256_finalize(&sha, result);\n+        ret = 1;\n+    }\n+\n+    secp256k1_scalar_clear(&s);\n+    return ret;\n+}\n+\n+#endif"
      },
      {
        "sha": "7badc9033f7eb44d6e467307d380c6b3e2c538c1",
        "filename": "src/secp256k1/src/modules/ecdh/tests_impl.h",
        "status": "added",
        "additions": 75,
        "deletions": 0,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/modules/ecdh/tests_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/modules/ecdh/tests_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/modules/ecdh/tests_impl.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -0,0 +1,75 @@\n+/**********************************************************************\n+ * Copyright (c) 2015 Andrew Poelstra                                 *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_MODULE_ECDH_TESTS_\n+#define _SECP256K1_MODULE_ECDH_TESTS_\n+\n+void test_ecdh_generator_basepoint(void) {\n+    unsigned char s_one[32] = { 0 };\n+    secp256k1_pubkey point[2];\n+    int i;\n+\n+    s_one[31] = 1;\n+    /* Check against pubkey creation when the basepoint is the generator */\n+    for (i = 0; i < 100; ++i) {\n+        secp256k1_sha256_t sha;\n+        unsigned char s_b32[32];\n+        unsigned char output_ecdh[32];\n+        unsigned char output_ser[32];\n+        unsigned char point_ser[33];\n+        size_t point_ser_len = sizeof(point_ser);\n+        secp256k1_scalar s;\n+\n+        random_scalar_order(&s);\n+        secp256k1_scalar_get_b32(s_b32, &s);\n+\n+        /* compute using ECDH function */\n+        CHECK(secp256k1_ec_pubkey_create(ctx, &point[0], s_one) == 1);\n+        CHECK(secp256k1_ecdh(ctx, output_ecdh, &point[0], s_b32) == 1);\n+        /* compute \"explicitly\" */\n+        CHECK(secp256k1_ec_pubkey_create(ctx, &point[1], s_b32) == 1);\n+        CHECK(secp256k1_ec_pubkey_serialize(ctx, point_ser, &point_ser_len, &point[1], SECP256K1_EC_COMPRESSED) == 1);\n+        CHECK(point_ser_len == sizeof(point_ser));\n+        secp256k1_sha256_initialize(&sha);\n+        secp256k1_sha256_write(&sha, point_ser, point_ser_len);\n+        secp256k1_sha256_finalize(&sha, output_ser);\n+        /* compare */\n+        CHECK(memcmp(output_ecdh, output_ser, sizeof(output_ser)) == 0);\n+    }\n+}\n+\n+void test_bad_scalar(void) {\n+    unsigned char s_zero[32] = { 0 };\n+    unsigned char s_overflow[32] = {\n+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,\n+        0xba, 0xae, 0xdc, 0xe6, 0xaf, 0x48, 0xa0, 0x3b,\n+        0xbf, 0xd2, 0x5e, 0x8c, 0xd0, 0x36, 0x41, 0x41\n+    };\n+    unsigned char s_rand[32] = { 0 };\n+    unsigned char output[32];\n+    secp256k1_scalar rand;\n+    secp256k1_pubkey point;\n+\n+    /* Create random point */\n+    random_scalar_order(&rand);\n+    secp256k1_scalar_get_b32(s_rand, &rand);\n+    CHECK(secp256k1_ec_pubkey_create(ctx, &point, s_rand) == 1);\n+\n+    /* Try to multiply it by bad values */\n+    CHECK(secp256k1_ecdh(ctx, output, &point, s_zero) == 0);\n+    CHECK(secp256k1_ecdh(ctx, output, &point, s_overflow) == 0);\n+    /* ...and a good one */\n+    s_overflow[31] -= 1;\n+    CHECK(secp256k1_ecdh(ctx, output, &point, s_overflow) == 1);\n+}\n+\n+void run_ecdh_tests(void) {\n+    test_ecdh_generator_basepoint();\n+    test_bad_scalar();\n+}\n+\n+#endif"
      },
      {
        "sha": "5de3ea33ea5e10888970143bd8d14d27c42578ad",
        "filename": "src/secp256k1/src/modules/recovery/Makefile.am.include",
        "status": "added",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/modules/recovery/Makefile.am.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/modules/recovery/Makefile.am.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/modules/recovery/Makefile.am.include?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -0,0 +1,8 @@\n+include_HEADERS += include/secp256k1_recovery.h\n+noinst_HEADERS += src/modules/recovery/main_impl.h\n+noinst_HEADERS += src/modules/recovery/tests_impl.h\n+if USE_BENCHMARK\n+noinst_PROGRAMS += bench_recover\n+bench_recover_SOURCES = src/bench_recover.c\n+bench_recover_LDADD = libsecp256k1.la $(SECP_LIBS)\n+endif"
      },
      {
        "sha": "ec42f4bb6cd8804a165ce9091a0825726d146180",
        "filename": "src/secp256k1/src/modules/recovery/main_impl.h",
        "status": "added",
        "additions": 193,
        "deletions": 0,
        "changes": 193,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/modules/recovery/main_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/modules/recovery/main_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/modules/recovery/main_impl.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -0,0 +1,193 @@\n+/**********************************************************************\n+ * Copyright (c) 2013-2015 Pieter Wuille                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_MODULE_RECOVERY_MAIN_\n+#define _SECP256K1_MODULE_RECOVERY_MAIN_\n+\n+#include \"include/secp256k1_recovery.h\"\n+\n+static void secp256k1_ecdsa_recoverable_signature_load(const secp256k1_context* ctx, secp256k1_scalar* r, secp256k1_scalar* s, int* recid, const secp256k1_ecdsa_recoverable_signature* sig) {\n+    (void)ctx;\n+    if (sizeof(secp256k1_scalar) == 32) {\n+        /* When the secp256k1_scalar type is exactly 32 byte, use its\n+         * representation inside secp256k1_ecdsa_signature, as conversion is very fast.\n+         * Note that secp256k1_ecdsa_signature_save must use the same representation. */\n+        memcpy(r, &sig->data[0], 32);\n+        memcpy(s, &sig->data[32], 32);\n+    } else {\n+        secp256k1_scalar_set_b32(r, &sig->data[0], NULL);\n+        secp256k1_scalar_set_b32(s, &sig->data[32], NULL);\n+    }\n+    *recid = sig->data[64];\n+}\n+\n+static void secp256k1_ecdsa_recoverable_signature_save(secp256k1_ecdsa_recoverable_signature* sig, const secp256k1_scalar* r, const secp256k1_scalar* s, int recid) {\n+    if (sizeof(secp256k1_scalar) == 32) {\n+        memcpy(&sig->data[0], r, 32);\n+        memcpy(&sig->data[32], s, 32);\n+    } else {\n+        secp256k1_scalar_get_b32(&sig->data[0], r);\n+        secp256k1_scalar_get_b32(&sig->data[32], s);\n+    }\n+    sig->data[64] = recid;\n+}\n+\n+int secp256k1_ecdsa_recoverable_signature_parse_compact(const secp256k1_context* ctx, secp256k1_ecdsa_recoverable_signature* sig, const unsigned char *input64, int recid) {\n+    secp256k1_scalar r, s;\n+    int ret = 1;\n+    int overflow = 0;\n+\n+    (void)ctx;\n+    ARG_CHECK(sig != NULL);\n+    ARG_CHECK(input64 != NULL);\n+    ARG_CHECK(recid >= 0 && recid <= 3);\n+\n+    secp256k1_scalar_set_b32(&r, &input64[0], &overflow);\n+    ret &= !overflow;\n+    secp256k1_scalar_set_b32(&s, &input64[32], &overflow);\n+    ret &= !overflow;\n+    if (ret) {\n+        secp256k1_ecdsa_recoverable_signature_save(sig, &r, &s, recid);\n+    } else {\n+        memset(sig, 0, sizeof(*sig));\n+    }\n+    return ret;\n+}\n+\n+int secp256k1_ecdsa_recoverable_signature_serialize_compact(const secp256k1_context* ctx, unsigned char *output64, int *recid, const secp256k1_ecdsa_recoverable_signature* sig) {\n+    secp256k1_scalar r, s;\n+\n+    (void)ctx;\n+    ARG_CHECK(output64 != NULL);\n+    ARG_CHECK(sig != NULL);\n+    ARG_CHECK(recid != NULL);\n+\n+    secp256k1_ecdsa_recoverable_signature_load(ctx, &r, &s, recid, sig);\n+    secp256k1_scalar_get_b32(&output64[0], &r);\n+    secp256k1_scalar_get_b32(&output64[32], &s);\n+    return 1;\n+}\n+\n+int secp256k1_ecdsa_recoverable_signature_convert(const secp256k1_context* ctx, secp256k1_ecdsa_signature* sig, const secp256k1_ecdsa_recoverable_signature* sigin) {\n+    secp256k1_scalar r, s;\n+    int recid;\n+\n+    (void)ctx;\n+    ARG_CHECK(sig != NULL);\n+    ARG_CHECK(sigin != NULL);\n+\n+    secp256k1_ecdsa_recoverable_signature_load(ctx, &r, &s, &recid, sigin);\n+    secp256k1_ecdsa_signature_save(sig, &r, &s);\n+    return 1;\n+}\n+\n+static int secp256k1_ecdsa_sig_recover(const secp256k1_ecmult_context *ctx, const secp256k1_scalar *sigr, const secp256k1_scalar* sigs, secp256k1_ge *pubkey, const secp256k1_scalar *message, int recid) {\n+    unsigned char brx[32];\n+    secp256k1_fe fx;\n+    secp256k1_ge x;\n+    secp256k1_gej xj;\n+    secp256k1_scalar rn, u1, u2;\n+    secp256k1_gej qj;\n+    int r;\n+\n+    if (secp256k1_scalar_is_zero(sigr) || secp256k1_scalar_is_zero(sigs)) {\n+        return 0;\n+    }\n+\n+    secp256k1_scalar_get_b32(brx, sigr);\n+    r = secp256k1_fe_set_b32(&fx, brx);\n+    (void)r;\n+    VERIFY_CHECK(r); /* brx comes from a scalar, so is less than the order; certainly less than p */\n+    if (recid & 2) {\n+        if (secp256k1_fe_cmp_var(&fx, &secp256k1_ecdsa_const_p_minus_order) >= 0) {\n+            return 0;\n+        }\n+        secp256k1_fe_add(&fx, &secp256k1_ecdsa_const_order_as_fe);\n+    }\n+    if (!secp256k1_ge_set_xo_var(&x, &fx, recid & 1)) {\n+        return 0;\n+    }\n+    secp256k1_gej_set_ge(&xj, &x);\n+    secp256k1_scalar_inverse_var(&rn, sigr);\n+    secp256k1_scalar_mul(&u1, &rn, message);\n+    secp256k1_scalar_negate(&u1, &u1);\n+    secp256k1_scalar_mul(&u2, &rn, sigs);\n+    secp256k1_ecmult(ctx, &qj, &xj, &u2, &u1);\n+    secp256k1_ge_set_gej_var(pubkey, &qj);\n+    return !secp256k1_gej_is_infinity(&qj);\n+}\n+\n+int secp256k1_ecdsa_sign_recoverable(const secp256k1_context* ctx, secp256k1_ecdsa_recoverable_signature *signature, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, const void* noncedata) {\n+    secp256k1_scalar r, s;\n+    secp256k1_scalar sec, non, msg;\n+    int recid;\n+    int ret = 0;\n+    int overflow = 0;\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(signature != NULL);\n+    ARG_CHECK(seckey != NULL);\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_default;\n+    }\n+\n+    secp256k1_scalar_set_b32(&sec, seckey, &overflow);\n+    /* Fail if the secret key is invalid. */\n+    if (!overflow && !secp256k1_scalar_is_zero(&sec)) {\n+        unsigned int count = 0;\n+        secp256k1_scalar_set_b32(&msg, msg32, NULL);\n+        while (1) {\n+            unsigned char nonce32[32];\n+            ret = noncefp(nonce32, msg32, seckey, NULL, (void*)noncedata, count);\n+            if (!ret) {\n+                break;\n+            }\n+            secp256k1_scalar_set_b32(&non, nonce32, &overflow);\n+            memset(nonce32, 0, 32);\n+            if (!secp256k1_scalar_is_zero(&non) && !overflow) {\n+                if (secp256k1_ecdsa_sig_sign(&ctx->ecmult_gen_ctx, &r, &s, &sec, &msg, &non, &recid)) {\n+                    break;\n+                }\n+            }\n+            count++;\n+        }\n+        secp256k1_scalar_clear(&msg);\n+        secp256k1_scalar_clear(&non);\n+        secp256k1_scalar_clear(&sec);\n+    }\n+    if (ret) {\n+        secp256k1_ecdsa_recoverable_signature_save(signature, &r, &s, recid);\n+    } else {\n+        memset(signature, 0, sizeof(*signature));\n+    }\n+    return ret;\n+}\n+\n+int secp256k1_ecdsa_recover(const secp256k1_context* ctx, secp256k1_pubkey *pubkey, const secp256k1_ecdsa_recoverable_signature *signature, const unsigned char *msg32) {\n+    secp256k1_ge q;\n+    secp256k1_scalar r, s;\n+    secp256k1_scalar m;\n+    int recid;\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_context_is_built(&ctx->ecmult_ctx));\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(signature != NULL);\n+    ARG_CHECK(pubkey != NULL);\n+\n+    secp256k1_ecdsa_recoverable_signature_load(ctx, &r, &s, &recid, signature);\n+    ARG_CHECK(recid >= 0 && recid < 4);\n+    secp256k1_scalar_set_b32(&m, msg32, NULL);\n+    if (secp256k1_ecdsa_sig_recover(&ctx->ecmult_ctx, &r, &s, &q, &m, recid)) {\n+        secp256k1_pubkey_save(pubkey, &q);\n+        return 1;\n+    } else {\n+        memset(pubkey, 0, sizeof(*pubkey));\n+        return 0;\n+    }\n+}\n+\n+#endif"
      },
      {
        "sha": "8932d5f0afc3f51adcb44b03b3ac3693a96184fc",
        "filename": "src/secp256k1/src/modules/recovery/tests_impl.h",
        "status": "added",
        "additions": 250,
        "deletions": 0,
        "changes": 250,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/modules/recovery/tests_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/modules/recovery/tests_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/modules/recovery/tests_impl.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -0,0 +1,250 @@\n+/**********************************************************************\n+ * Copyright (c) 2013-2015 Pieter Wuille                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_MODULE_RECOVERY_TESTS_\n+#define _SECP256K1_MODULE_RECOVERY_TESTS_\n+\n+void test_ecdsa_recovery_end_to_end(void) {\n+    unsigned char extra[32] = {0x00};\n+    unsigned char privkey[32];\n+    unsigned char message[32];\n+    secp256k1_ecdsa_signature signature[5];\n+    secp256k1_ecdsa_recoverable_signature rsignature[5];\n+    unsigned char sig[74];\n+    secp256k1_pubkey pubkey;\n+    secp256k1_pubkey recpubkey;\n+    int recid = 0;\n+\n+    /* Generate a random key and message. */\n+    {\n+        secp256k1_scalar msg, key;\n+        random_scalar_order_test(&msg);\n+        random_scalar_order_test(&key);\n+        secp256k1_scalar_get_b32(privkey, &key);\n+        secp256k1_scalar_get_b32(message, &msg);\n+    }\n+\n+    /* Construct and verify corresponding public key. */\n+    CHECK(secp256k1_ec_seckey_verify(ctx, privkey) == 1);\n+    CHECK(secp256k1_ec_pubkey_create(ctx, &pubkey, privkey) == 1);\n+\n+    /* Serialize/parse compact and verify/recover. */\n+    extra[0] = 0;\n+    CHECK(secp256k1_ecdsa_sign_recoverable(ctx, &rsignature[0], message, privkey, NULL, NULL) == 1);\n+    CHECK(secp256k1_ecdsa_sign(ctx, &signature[0], message, privkey, NULL, NULL) == 1);\n+    CHECK(secp256k1_ecdsa_sign_recoverable(ctx, &rsignature[4], message, privkey, NULL, NULL) == 1);\n+    CHECK(secp256k1_ecdsa_sign_recoverable(ctx, &rsignature[1], message, privkey, NULL, extra) == 1);\n+    extra[31] = 1;\n+    CHECK(secp256k1_ecdsa_sign_recoverable(ctx, &rsignature[2], message, privkey, NULL, extra) == 1);\n+    extra[31] = 0;\n+    extra[0] = 1;\n+    CHECK(secp256k1_ecdsa_sign_recoverable(ctx, &rsignature[3], message, privkey, NULL, extra) == 1);\n+    CHECK(secp256k1_ecdsa_recoverable_signature_serialize_compact(ctx, sig, &recid, &rsignature[4]) == 1);\n+    CHECK(secp256k1_ecdsa_recoverable_signature_convert(ctx, &signature[4], &rsignature[4]) == 1);\n+    CHECK(memcmp(&signature[4], &signature[0], 64) == 0);\n+    CHECK(secp256k1_ecdsa_verify(ctx, &signature[4], message, &pubkey) == 1);\n+    memset(&rsignature[4], 0, sizeof(rsignature[4]));\n+    CHECK(secp256k1_ecdsa_recoverable_signature_parse_compact(ctx, &rsignature[4], sig, recid) == 1);\n+    CHECK(secp256k1_ecdsa_recoverable_signature_convert(ctx, &signature[4], &rsignature[4]) == 1);\n+    CHECK(secp256k1_ecdsa_verify(ctx, &signature[4], message, &pubkey) == 1);\n+    /* Parse compact (with recovery id) and recover. */\n+    CHECK(secp256k1_ecdsa_recoverable_signature_parse_compact(ctx, &rsignature[4], sig, recid) == 1);\n+    CHECK(secp256k1_ecdsa_recover(ctx, &recpubkey, &rsignature[4], message) == 1);\n+    CHECK(memcmp(&pubkey, &recpubkey, sizeof(pubkey)) == 0);\n+    /* Serialize/destroy/parse signature and verify again. */\n+    CHECK(secp256k1_ecdsa_recoverable_signature_serialize_compact(ctx, sig, &recid, &rsignature[4]) == 1);\n+    sig[secp256k1_rand_bits(6)] += 1 + secp256k1_rand_int(255);\n+    CHECK(secp256k1_ecdsa_recoverable_signature_parse_compact(ctx, &rsignature[4], sig, recid) == 1);\n+    CHECK(secp256k1_ecdsa_recoverable_signature_convert(ctx, &signature[4], &rsignature[4]) == 1);\n+    CHECK(secp256k1_ecdsa_verify(ctx, &signature[4], message, &pubkey) == 0);\n+    /* Recover again */\n+    CHECK(secp256k1_ecdsa_recover(ctx, &recpubkey, &rsignature[4], message) == 0 ||\n+          memcmp(&pubkey, &recpubkey, sizeof(pubkey)) != 0);\n+}\n+\n+/* Tests several edge cases. */\n+void test_ecdsa_recovery_edge_cases(void) {\n+    const unsigned char msg32[32] = {\n+        'T', 'h', 'i', 's', ' ', 'i', 's', ' ',\n+        'a', ' ', 'v', 'e', 'r', 'y', ' ', 's',\n+        'e', 'c', 'r', 'e', 't', ' ', 'm', 'e',\n+        's', 's', 'a', 'g', 'e', '.', '.', '.'\n+    };\n+    const unsigned char sig64[64] = {\n+        /* Generated by signing the above message with nonce 'This is the nonce we will use...'\n+         * and secret key 0 (which is not valid), resulting in recid 0. */\n+        0x67, 0xCB, 0x28, 0x5F, 0x9C, 0xD1, 0x94, 0xE8,\n+        0x40, 0xD6, 0x29, 0x39, 0x7A, 0xF5, 0x56, 0x96,\n+        0x62, 0xFD, 0xE4, 0x46, 0x49, 0x99, 0x59, 0x63,\n+        0x17, 0x9A, 0x7D, 0xD1, 0x7B, 0xD2, 0x35, 0x32,\n+        0x4B, 0x1B, 0x7D, 0xF3, 0x4C, 0xE1, 0xF6, 0x8E,\n+        0x69, 0x4F, 0xF6, 0xF1, 0x1A, 0xC7, 0x51, 0xDD,\n+        0x7D, 0xD7, 0x3E, 0x38, 0x7E, 0xE4, 0xFC, 0x86,\n+        0x6E, 0x1B, 0xE8, 0xEC, 0xC7, 0xDD, 0x95, 0x57\n+    };\n+    secp256k1_pubkey pubkey;\n+    /* signature (r,s) = (4,4), which can be recovered with all 4 recids. */\n+    const unsigned char sigb64[64] = {\n+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,\n+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,\n+    };\n+    secp256k1_pubkey pubkeyb;\n+    secp256k1_ecdsa_recoverable_signature rsig;\n+    secp256k1_ecdsa_signature sig;\n+    int recid;\n+\n+    CHECK(secp256k1_ecdsa_recoverable_signature_parse_compact(ctx, &rsig, sig64, 0));\n+    CHECK(!secp256k1_ecdsa_recover(ctx, &pubkey, &rsig, msg32));\n+    CHECK(secp256k1_ecdsa_recoverable_signature_parse_compact(ctx, &rsig, sig64, 1));\n+    CHECK(secp256k1_ecdsa_recover(ctx, &pubkey, &rsig, msg32));\n+    CHECK(secp256k1_ecdsa_recoverable_signature_parse_compact(ctx, &rsig, sig64, 2));\n+    CHECK(!secp256k1_ecdsa_recover(ctx, &pubkey, &rsig, msg32));\n+    CHECK(secp256k1_ecdsa_recoverable_signature_parse_compact(ctx, &rsig, sig64, 3));\n+    CHECK(!secp256k1_ecdsa_recover(ctx, &pubkey, &rsig, msg32));\n+\n+    for (recid = 0; recid < 4; recid++) {\n+        int i;\n+        int recid2;\n+        /* (4,4) encoded in DER. */\n+        unsigned char sigbder[8] = {0x30, 0x06, 0x02, 0x01, 0x04, 0x02, 0x01, 0x04};\n+        unsigned char sigcder_zr[7] = {0x30, 0x05, 0x02, 0x00, 0x02, 0x01, 0x01};\n+        unsigned char sigcder_zs[7] = {0x30, 0x05, 0x02, 0x01, 0x01, 0x02, 0x00};\n+        unsigned char sigbderalt1[39] = {\n+            0x30, 0x25, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00,\n+            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+            0x00, 0x00, 0x00, 0x04, 0x02, 0x01, 0x04,\n+        };\n+        unsigned char sigbderalt2[39] = {\n+            0x30, 0x25, 0x02, 0x01, 0x04, 0x02, 0x20, 0x00,\n+            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,\n+        };\n+        unsigned char sigbderalt3[40] = {\n+            0x30, 0x26, 0x02, 0x21, 0x00, 0x00, 0x00, 0x00,\n+            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+            0x00, 0x00, 0x00, 0x00, 0x04, 0x02, 0x01, 0x04,\n+        };\n+        unsigned char sigbderalt4[40] = {\n+            0x30, 0x26, 0x02, 0x01, 0x04, 0x02, 0x21, 0x00,\n+            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,\n+        };\n+        /* (order + r,4) encoded in DER. */\n+        unsigned char sigbderlong[40] = {\n+            0x30, 0x26, 0x02, 0x21, 0x00, 0xFF, 0xFF, 0xFF,\n+            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n+            0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xBA, 0xAE, 0xDC,\n+            0xE6, 0xAF, 0x48, 0xA0, 0x3B, 0xBF, 0xD2, 0x5E,\n+            0x8C, 0xD0, 0x36, 0x41, 0x45, 0x02, 0x01, 0x04\n+        };\n+        CHECK(secp256k1_ecdsa_recoverable_signature_parse_compact(ctx, &rsig, sigb64, recid) == 1);\n+        CHECK(secp256k1_ecdsa_recover(ctx, &pubkeyb, &rsig, msg32) == 1);\n+        CHECK(secp256k1_ecdsa_signature_parse_der(ctx, &sig, sigbder, sizeof(sigbder)) == 1);\n+        CHECK(secp256k1_ecdsa_verify(ctx, &sig, msg32, &pubkeyb) == 1);\n+        for (recid2 = 0; recid2 < 4; recid2++) {\n+            secp256k1_pubkey pubkey2b;\n+            CHECK(secp256k1_ecdsa_recoverable_signature_parse_compact(ctx, &rsig, sigb64, recid2) == 1);\n+            CHECK(secp256k1_ecdsa_recover(ctx, &pubkey2b, &rsig, msg32) == 1);\n+            /* Verifying with (order + r,4) should always fail. */\n+            CHECK(secp256k1_ecdsa_signature_parse_der(ctx, &sig, sigbderlong, sizeof(sigbderlong)) == 1);\n+            CHECK(secp256k1_ecdsa_verify(ctx, &sig, msg32, &pubkeyb) == 0);\n+        }\n+        /* DER parsing tests. */\n+        /* Zero length r/s. */\n+        CHECK(secp256k1_ecdsa_signature_parse_der(ctx, &sig, sigcder_zr, sizeof(sigcder_zr)) == 0);\n+        CHECK(secp256k1_ecdsa_signature_parse_der(ctx, &sig, sigcder_zs, sizeof(sigcder_zs)) == 0);\n+        /* Leading zeros. */\n+        CHECK(secp256k1_ecdsa_signature_parse_der(ctx, &sig, sigbderalt1, sizeof(sigbderalt1)) == 0);\n+        CHECK(secp256k1_ecdsa_signature_parse_der(ctx, &sig, sigbderalt2, sizeof(sigbderalt2)) == 0);\n+        CHECK(secp256k1_ecdsa_signature_parse_der(ctx, &sig, sigbderalt3, sizeof(sigbderalt3)) == 0);\n+        CHECK(secp256k1_ecdsa_signature_parse_der(ctx, &sig, sigbderalt4, sizeof(sigbderalt4)) == 0);\n+        sigbderalt3[4] = 1;\n+        CHECK(secp256k1_ecdsa_signature_parse_der(ctx, &sig, sigbderalt3, sizeof(sigbderalt3)) == 1);\n+        CHECK(secp256k1_ecdsa_verify(ctx, &sig, msg32, &pubkeyb) == 0);\n+        sigbderalt4[7] = 1;\n+        CHECK(secp256k1_ecdsa_signature_parse_der(ctx, &sig, sigbderalt4, sizeof(sigbderalt4)) == 1);\n+        CHECK(secp256k1_ecdsa_verify(ctx, &sig, msg32, &pubkeyb) == 0);\n+        /* Damage signature. */\n+        sigbder[7]++;\n+        CHECK(secp256k1_ecdsa_signature_parse_der(ctx, &sig, sigbder, sizeof(sigbder)) == 1);\n+        CHECK(secp256k1_ecdsa_verify(ctx, &sig, msg32, &pubkeyb) == 0);\n+        sigbder[7]--;\n+        CHECK(secp256k1_ecdsa_signature_parse_der(ctx, &sig, sigbder, 6) == 0);\n+        CHECK(secp256k1_ecdsa_signature_parse_der(ctx, &sig, sigbder, sizeof(sigbder) - 1) == 0);\n+        for(i = 0; i < 8; i++) {\n+            int c;\n+            unsigned char orig = sigbder[i];\n+            /*Try every single-byte change.*/\n+            for (c = 0; c < 256; c++) {\n+                if (c == orig ) {\n+                    continue;\n+                }\n+                sigbder[i] = c;\n+                CHECK(secp256k1_ecdsa_signature_parse_der(ctx, &sig, sigbder, sizeof(sigbder)) == 0 || secp256k1_ecdsa_verify(ctx, &sig, msg32, &pubkeyb) == 0);\n+            }\n+            sigbder[i] = orig;\n+        }\n+    }\n+\n+    /* Test r/s equal to zero */\n+    {\n+        /* (1,1) encoded in DER. */\n+        unsigned char sigcder[8] = {0x30, 0x06, 0x02, 0x01, 0x01, 0x02, 0x01, 0x01};\n+        unsigned char sigc64[64] = {\n+            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n+            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n+        };\n+        secp256k1_pubkey pubkeyc;\n+        CHECK(secp256k1_ecdsa_recoverable_signature_parse_compact(ctx, &rsig, sigc64, 0) == 1);\n+        CHECK(secp256k1_ecdsa_recover(ctx, &pubkeyc, &rsig, msg32) == 1);\n+        CHECK(secp256k1_ecdsa_signature_parse_der(ctx, &sig, sigcder, sizeof(sigcder)) == 1);\n+        CHECK(secp256k1_ecdsa_verify(ctx, &sig, msg32, &pubkeyc) == 1);\n+        sigcder[4] = 0;\n+        sigc64[31] = 0;\n+        CHECK(secp256k1_ecdsa_recoverable_signature_parse_compact(ctx, &rsig, sigc64, 0) == 1);\n+        CHECK(secp256k1_ecdsa_recover(ctx, &pubkeyb, &rsig, msg32) == 0);\n+        CHECK(secp256k1_ecdsa_signature_parse_der(ctx, &sig, sigcder, sizeof(sigcder)) == 1);\n+        CHECK(secp256k1_ecdsa_verify(ctx, &sig, msg32, &pubkeyc) == 0);\n+        sigcder[4] = 1;\n+        sigcder[7] = 0;\n+        sigc64[31] = 1;\n+        sigc64[63] = 0;\n+        CHECK(secp256k1_ecdsa_recoverable_signature_parse_compact(ctx, &rsig, sigc64, 0) == 1);\n+        CHECK(secp256k1_ecdsa_recover(ctx, &pubkeyb, &rsig, msg32) == 0);\n+        CHECK(secp256k1_ecdsa_signature_parse_der(ctx, &sig, sigcder, sizeof(sigcder)) == 1);\n+        CHECK(secp256k1_ecdsa_verify(ctx, &sig, msg32, &pubkeyc) == 0);\n+    }\n+}\n+\n+void run_recovery_tests(void) {\n+    int i;\n+    for (i = 0; i < 64*count; i++) {\n+        test_ecdsa_recovery_end_to_end();\n+    }\n+    test_ecdsa_recovery_edge_cases();\n+}\n+\n+#endif"
      },
      {
        "sha": "b3bfa7d5cc49eeecd363ff8565953e430e6898d9",
        "filename": "src/secp256k1/src/modules/schnorr/Makefile.am.include",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/modules/schnorr/Makefile.am.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/modules/schnorr/Makefile.am.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/modules/schnorr/Makefile.am.include?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -0,0 +1,10 @@\n+include_HEADERS += include/secp256k1_schnorr.h\n+noinst_HEADERS += src/modules/schnorr/main_impl.h\n+noinst_HEADERS += src/modules/schnorr/schnorr.h\n+noinst_HEADERS += src/modules/schnorr/schnorr_impl.h\n+noinst_HEADERS += src/modules/schnorr/tests_impl.h\n+if USE_BENCHMARK\n+noinst_PROGRAMS += bench_schnorr_verify\n+bench_schnorr_verify_SOURCES = src/bench_schnorr_verify.c\n+bench_schnorr_verify_LDADD = libsecp256k1.la $(SECP_LIBS)\n+endif"
      },
      {
        "sha": "fa176a1767f5f8388a4960f4eaecabbeb56a4d4a",
        "filename": "src/secp256k1/src/modules/schnorr/main_impl.h",
        "status": "added",
        "additions": 164,
        "deletions": 0,
        "changes": 164,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/modules/schnorr/main_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/modules/schnorr/main_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/modules/schnorr/main_impl.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -0,0 +1,164 @@\n+/**********************************************************************\n+ * Copyright (c) 2014-2015 Pieter Wuille                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef SECP256K1_MODULE_SCHNORR_MAIN\n+#define SECP256K1_MODULE_SCHNORR_MAIN\n+\n+#include \"include/secp256k1_schnorr.h\"\n+#include \"modules/schnorr/schnorr_impl.h\"\n+\n+static void secp256k1_schnorr_msghash_sha256(unsigned char *h32, const unsigned char *r32, const unsigned char *msg32) {\n+    secp256k1_sha256_t sha;\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, r32, 32);\n+    secp256k1_sha256_write(&sha, msg32, 32);\n+    secp256k1_sha256_finalize(&sha, h32);\n+}\n+\n+static const unsigned char secp256k1_schnorr_algo16[17] = \"Schnorr+SHA256  \";\n+\n+int secp256k1_schnorr_sign(const secp256k1_context* ctx, unsigned char *sig64, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, const void* noncedata) {\n+    secp256k1_scalar sec, non;\n+    int ret = 0;\n+    int overflow = 0;\n+    unsigned int count = 0;\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(sig64 != NULL);\n+    ARG_CHECK(seckey != NULL);\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_default;\n+    }\n+\n+    secp256k1_scalar_set_b32(&sec, seckey, NULL);\n+    while (1) {\n+        unsigned char nonce32[32];\n+        ret = noncefp(nonce32, msg32, seckey, secp256k1_schnorr_algo16, (void*)noncedata, count);\n+        if (!ret) {\n+            break;\n+        }\n+        secp256k1_scalar_set_b32(&non, nonce32, &overflow);\n+        memset(nonce32, 0, 32);\n+        if (!secp256k1_scalar_is_zero(&non) && !overflow) {\n+            if (secp256k1_schnorr_sig_sign(&ctx->ecmult_gen_ctx, sig64, &sec, &non, NULL, secp256k1_schnorr_msghash_sha256, msg32)) {\n+                break;\n+            }\n+        }\n+        count++;\n+    }\n+    if (!ret) {\n+        memset(sig64, 0, 64);\n+    }\n+    secp256k1_scalar_clear(&non);\n+    secp256k1_scalar_clear(&sec);\n+    return ret;\n+}\n+\n+int secp256k1_schnorr_verify(const secp256k1_context* ctx, const unsigned char *sig64, const unsigned char *msg32, const secp256k1_pubkey *pubkey) {\n+    secp256k1_ge q;\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_context_is_built(&ctx->ecmult_ctx));\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(sig64 != NULL);\n+    ARG_CHECK(pubkey != NULL);\n+\n+    secp256k1_pubkey_load(ctx, &q, pubkey);\n+    return secp256k1_schnorr_sig_verify(&ctx->ecmult_ctx, sig64, &q, secp256k1_schnorr_msghash_sha256, msg32);\n+}\n+\n+int secp256k1_schnorr_recover(const secp256k1_context* ctx, secp256k1_pubkey *pubkey, const unsigned char *sig64, const unsigned char *msg32) {\n+    secp256k1_ge q;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_context_is_built(&ctx->ecmult_ctx));\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(sig64 != NULL);\n+    ARG_CHECK(pubkey != NULL);\n+\n+    if (secp256k1_schnorr_sig_recover(&ctx->ecmult_ctx, sig64, &q, secp256k1_schnorr_msghash_sha256, msg32)) {\n+        secp256k1_pubkey_save(pubkey, &q);\n+        return 1;\n+    } else {\n+        memset(pubkey, 0, sizeof(*pubkey));\n+        return 0;\n+    }\n+}\n+\n+int secp256k1_schnorr_generate_nonce_pair(const secp256k1_context* ctx, secp256k1_pubkey *pubnonce, unsigned char *privnonce32, const unsigned char *sec32, const unsigned char *msg32, secp256k1_nonce_function noncefp, const void* noncedata) {\n+    int count = 0;\n+    int ret = 1;\n+    secp256k1_gej Qj;\n+    secp256k1_ge Q;\n+    secp256k1_scalar sec;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(sec32 != NULL);\n+    ARG_CHECK(pubnonce != NULL);\n+    ARG_CHECK(privnonce32 != NULL);\n+\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_default;\n+    }\n+\n+    do {\n+        int overflow;\n+        ret = noncefp(privnonce32, sec32, msg32, secp256k1_schnorr_algo16, (void*)noncedata, count++);\n+        if (!ret) {\n+            break;\n+        }\n+        secp256k1_scalar_set_b32(&sec, privnonce32, &overflow);\n+        if (overflow || secp256k1_scalar_is_zero(&sec)) {\n+            continue;\n+        }\n+        secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &Qj, &sec);\n+        secp256k1_ge_set_gej(&Q, &Qj);\n+\n+        secp256k1_pubkey_save(pubnonce, &Q);\n+        break;\n+    } while(1);\n+\n+    secp256k1_scalar_clear(&sec);\n+    if (!ret) {\n+        memset(pubnonce, 0, sizeof(*pubnonce));\n+    }\n+    return ret;\n+}\n+\n+int secp256k1_schnorr_partial_sign(const secp256k1_context* ctx, unsigned char *sig64, const unsigned char *msg32, const unsigned char *sec32, const secp256k1_pubkey *pubnonce_others, const unsigned char *secnonce32) {\n+    int overflow = 0;\n+    secp256k1_scalar sec, non;\n+    secp256k1_ge pubnon;\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(sig64 != NULL);\n+    ARG_CHECK(sec32 != NULL);\n+    ARG_CHECK(secnonce32 != NULL);\n+    ARG_CHECK(pubnonce_others != NULL);\n+\n+    secp256k1_scalar_set_b32(&sec, sec32, &overflow);\n+    if (overflow || secp256k1_scalar_is_zero(&sec)) {\n+        return -1;\n+    }\n+    secp256k1_scalar_set_b32(&non, secnonce32, &overflow);\n+    if (overflow || secp256k1_scalar_is_zero(&non)) {\n+        return -1;\n+    }\n+    secp256k1_pubkey_load(ctx, &pubnon, pubnonce_others);\n+    return secp256k1_schnorr_sig_sign(&ctx->ecmult_gen_ctx, sig64, &sec, &non, &pubnon, secp256k1_schnorr_msghash_sha256, msg32);\n+}\n+\n+int secp256k1_schnorr_partial_combine(const secp256k1_context* ctx, unsigned char *sig64, const unsigned char * const *sig64sin, size_t n) {\n+    ARG_CHECK(sig64 != NULL);\n+    ARG_CHECK(n >= 1);\n+    ARG_CHECK(sig64sin != NULL);\n+    return secp256k1_schnorr_sig_combine(sig64, n, sig64sin);\n+}\n+\n+#endif"
      },
      {
        "sha": "de18147bd52ac0f70369114dfcb06947730cbaac",
        "filename": "src/secp256k1/src/modules/schnorr/schnorr.h",
        "status": "added",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/modules/schnorr/schnorr.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/modules/schnorr/schnorr.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/modules/schnorr/schnorr.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -0,0 +1,20 @@\n+/***********************************************************************\n+ * Copyright (c) 2014-2015 Pieter Wuille                               *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php. *\n+ ***********************************************************************/\n+\n+#ifndef _SECP256K1_MODULE_SCHNORR_H_\n+#define _SECP256K1_MODULE_SCHNORR_H_\n+\n+#include \"scalar.h\"\n+#include \"group.h\"\n+\n+typedef void (*secp256k1_schnorr_msghash)(unsigned char *h32, const unsigned char *r32, const unsigned char *msg32);\n+\n+static int secp256k1_schnorr_sig_sign(const secp256k1_ecmult_gen_context* ctx, unsigned char *sig64, const secp256k1_scalar *key, const secp256k1_scalar *nonce, const secp256k1_ge *pubnonce, secp256k1_schnorr_msghash hash, const unsigned char *msg32);\n+static int secp256k1_schnorr_sig_verify(const secp256k1_ecmult_context* ctx, const unsigned char *sig64, const secp256k1_ge *pubkey, secp256k1_schnorr_msghash hash, const unsigned char *msg32);\n+static int secp256k1_schnorr_sig_recover(const secp256k1_ecmult_context* ctx, const unsigned char *sig64, secp256k1_ge *pubkey, secp256k1_schnorr_msghash hash, const unsigned char *msg32);\n+static int secp256k1_schnorr_sig_combine(unsigned char *sig64, size_t n, const unsigned char * const *sig64ins);\n+\n+#endif"
      },
      {
        "sha": "e13ab6db7cca1173582c47597d42fb916f43fc22",
        "filename": "src/secp256k1/src/modules/schnorr/schnorr_impl.h",
        "status": "added",
        "additions": 207,
        "deletions": 0,
        "changes": 207,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/modules/schnorr/schnorr_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/modules/schnorr/schnorr_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/modules/schnorr/schnorr_impl.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -0,0 +1,207 @@\n+/***********************************************************************\n+ * Copyright (c) 2014-2015 Pieter Wuille                               *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php. *\n+ ***********************************************************************/\n+\n+#ifndef _SECP256K1_SCHNORR_IMPL_H_\n+#define _SECP256K1_SCHNORR_IMPL_H_\n+\n+#include <string.h>\n+\n+#include \"schnorr.h\"\n+#include \"num.h\"\n+#include \"field.h\"\n+#include \"group.h\"\n+#include \"ecmult.h\"\n+#include \"ecmult_gen.h\"\n+\n+/**\n+ * Custom Schnorr-based signature scheme. They support multiparty signing, public key\n+ * recovery and batch validation.\n+ *\n+ * Rationale for verifying R's y coordinate:\n+ * In order to support batch validation and public key recovery, the full R point must\n+ * be known to verifiers, rather than just its x coordinate. In order to not risk\n+ * being more strict in batch validation than normal validation, validators must be\n+ * required to reject signatures with incorrect y coordinate. This is only possible\n+ * by including a (relatively slow) field inverse, or a field square root. However,\n+ * batch validation offers potentially much higher benefits than this cost.\n+ *\n+ * Rationale for having an implicit y coordinate oddness:\n+ * If we commit to having the full R point known to verifiers, there are two mechanism.\n+ * Either include its oddness in the signature, or give it an implicit fixed value.\n+ * As the R y coordinate can be flipped by a simple negation of the nonce, we choose the\n+ * latter, as it comes with nearly zero impact on signing or validation performance, and\n+ * saves a byte in the signature.\n+ *\n+ * Signing:\n+ *   Inputs: 32-byte message m, 32-byte scalar key x (!=0), 32-byte scalar nonce k (!=0)\n+ *\n+ *   Compute point R = k * G. Reject nonce if R's y coordinate is odd (or negate nonce).\n+ *   Compute 32-byte r, the serialization of R's x coordinate.\n+ *   Compute scalar h = Hash(r || m). Reject nonce if h == 0 or h >= order.\n+ *   Compute scalar s = k - h * x.\n+ *   The signature is (r, s).\n+ *\n+ *\n+ * Verification:\n+ *   Inputs: 32-byte message m, public key point Q, signature: (32-byte r, scalar s)\n+ *\n+ *   Signature is invalid if s >= order.\n+ *   Signature is invalid if r >= p.\n+ *   Compute scalar h = Hash(r || m). Signature is invalid if h == 0 or h >= order.\n+ *   Option 1 (faster for single verification):\n+ *     Compute point R = h * Q + s * G. Signature is invalid if R is infinity or R's y coordinate is odd.\n+ *     Signature is valid if the serialization of R's x coordinate equals r.\n+ *   Option 2 (allows batch validation and pubkey recovery):\n+ *     Decompress x coordinate r into point R, with odd y coordinate. Fail if R is not on the curve.\n+ *     Signature is valid if R + h * Q + s * G == 0.\n+ */\n+\n+static int secp256k1_schnorr_sig_sign(const secp256k1_ecmult_gen_context* ctx, unsigned char *sig64, const secp256k1_scalar *key, const secp256k1_scalar *nonce, const secp256k1_ge *pubnonce, secp256k1_schnorr_msghash hash, const unsigned char *msg32) {\n+    secp256k1_gej Rj;\n+    secp256k1_ge Ra;\n+    unsigned char h32[32];\n+    secp256k1_scalar h, s;\n+    int overflow;\n+    secp256k1_scalar n;\n+\n+    if (secp256k1_scalar_is_zero(key) || secp256k1_scalar_is_zero(nonce)) {\n+        return 0;\n+    }\n+    n = *nonce;\n+\n+    secp256k1_ecmult_gen(ctx, &Rj, &n);\n+    if (pubnonce != NULL) {\n+        secp256k1_gej_add_ge(&Rj, &Rj, pubnonce);\n+    }\n+    secp256k1_ge_set_gej(&Ra, &Rj);\n+    secp256k1_fe_normalize(&Ra.y);\n+    if (secp256k1_fe_is_odd(&Ra.y)) {\n+        /* R's y coordinate is odd, which is not allowed (see rationale above).\n+           Force it to be even by negating the nonce. Note that this even works\n+           for multiparty signing, as the R point is known to all participants,\n+           which can all decide to flip the sign in unison, resulting in the\n+           overall R point to be negated too. */\n+        secp256k1_scalar_negate(&n, &n);\n+    }\n+    secp256k1_fe_normalize(&Ra.x);\n+    secp256k1_fe_get_b32(sig64, &Ra.x);\n+    hash(h32, sig64, msg32);\n+    overflow = 0;\n+    secp256k1_scalar_set_b32(&h, h32, &overflow);\n+    if (overflow || secp256k1_scalar_is_zero(&h)) {\n+        secp256k1_scalar_clear(&n);\n+        return 0;\n+    }\n+    secp256k1_scalar_mul(&s, &h, key);\n+    secp256k1_scalar_negate(&s, &s);\n+    secp256k1_scalar_add(&s, &s, &n);\n+    secp256k1_scalar_clear(&n);\n+    secp256k1_scalar_get_b32(sig64 + 32, &s);\n+    return 1;\n+}\n+\n+static int secp256k1_schnorr_sig_verify(const secp256k1_ecmult_context* ctx, const unsigned char *sig64, const secp256k1_ge *pubkey, secp256k1_schnorr_msghash hash, const unsigned char *msg32) {\n+    secp256k1_gej Qj, Rj;\n+    secp256k1_ge Ra;\n+    secp256k1_fe Rx;\n+    secp256k1_scalar h, s;\n+    unsigned char hh[32];\n+    int overflow;\n+\n+    if (secp256k1_ge_is_infinity(pubkey)) {\n+        return 0;\n+    }\n+    hash(hh, sig64, msg32);\n+    overflow = 0;\n+    secp256k1_scalar_set_b32(&h, hh, &overflow);\n+    if (overflow || secp256k1_scalar_is_zero(&h)) {\n+        return 0;\n+    }\n+    overflow = 0;\n+    secp256k1_scalar_set_b32(&s, sig64 + 32, &overflow);\n+    if (overflow) {\n+        return 0;\n+    }\n+    if (!secp256k1_fe_set_b32(&Rx, sig64)) {\n+        return 0;\n+    }\n+    secp256k1_gej_set_ge(&Qj, pubkey);\n+    secp256k1_ecmult(ctx, &Rj, &Qj, &h, &s);\n+    if (secp256k1_gej_is_infinity(&Rj)) {\n+        return 0;\n+    }\n+    secp256k1_ge_set_gej_var(&Ra, &Rj);\n+    secp256k1_fe_normalize_var(&Ra.y);\n+    if (secp256k1_fe_is_odd(&Ra.y)) {\n+        return 0;\n+    }\n+    return secp256k1_fe_equal_var(&Rx, &Ra.x);\n+}\n+\n+static int secp256k1_schnorr_sig_recover(const secp256k1_ecmult_context* ctx, const unsigned char *sig64, secp256k1_ge *pubkey, secp256k1_schnorr_msghash hash, const unsigned char *msg32) {\n+    secp256k1_gej Qj, Rj;\n+    secp256k1_ge Ra;\n+    secp256k1_fe Rx;\n+    secp256k1_scalar h, s;\n+    unsigned char hh[32];\n+    int overflow;\n+\n+    hash(hh, sig64, msg32);\n+    overflow = 0;\n+    secp256k1_scalar_set_b32(&h, hh, &overflow);\n+    if (overflow || secp256k1_scalar_is_zero(&h)) {\n+        return 0;\n+    }\n+    overflow = 0;\n+    secp256k1_scalar_set_b32(&s, sig64 + 32, &overflow);\n+    if (overflow) {\n+        return 0;\n+    }\n+    if (!secp256k1_fe_set_b32(&Rx, sig64)) {\n+        return 0;\n+    }\n+    if (!secp256k1_ge_set_xo_var(&Ra, &Rx, 0)) {\n+        return 0;\n+    }\n+    secp256k1_gej_set_ge(&Rj, &Ra);\n+    secp256k1_scalar_inverse_var(&h, &h);\n+    secp256k1_scalar_negate(&s, &s);\n+    secp256k1_scalar_mul(&s, &s, &h);\n+    secp256k1_ecmult(ctx, &Qj, &Rj, &h, &s);\n+    if (secp256k1_gej_is_infinity(&Qj)) {\n+        return 0;\n+    }\n+    secp256k1_ge_set_gej(pubkey, &Qj);\n+    return 1;\n+}\n+\n+static int secp256k1_schnorr_sig_combine(unsigned char *sig64, size_t n, const unsigned char * const *sig64ins) {\n+    secp256k1_scalar s = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 0);\n+    size_t i;\n+    for (i = 0; i < n; i++) {\n+        secp256k1_scalar si;\n+        int overflow;\n+        secp256k1_scalar_set_b32(&si, sig64ins[i] + 32, &overflow);\n+        if (overflow) {\n+            return -1;\n+        }\n+        if (i) {\n+            if (memcmp(sig64ins[i - 1], sig64ins[i], 32) != 0) {\n+                return -1;\n+            }\n+        }\n+        secp256k1_scalar_add(&s, &s, &si);\n+    }\n+    if (secp256k1_scalar_is_zero(&s)) {\n+        return 0;\n+    }\n+    memcpy(sig64, sig64ins[0], 32);\n+    secp256k1_scalar_get_b32(sig64 + 32, &s);\n+    secp256k1_scalar_clear(&s);\n+    return 1;\n+}\n+\n+#endif"
      },
      {
        "sha": "5bd14a03e3c65ba99c27e6694352bf9e4d9ab1cd",
        "filename": "src/secp256k1/src/modules/schnorr/tests_impl.h",
        "status": "added",
        "additions": 175,
        "deletions": 0,
        "changes": 175,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/modules/schnorr/tests_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/modules/schnorr/tests_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/modules/schnorr/tests_impl.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -0,0 +1,175 @@\n+/**********************************************************************\n+ * Copyright (c) 2014-2015 Pieter Wuille                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef SECP256K1_MODULE_SCHNORR_TESTS\n+#define SECP256K1_MODULE_SCHNORR_TESTS\n+\n+#include \"include/secp256k1_schnorr.h\"\n+\n+void test_schnorr_end_to_end(void) {\n+    unsigned char privkey[32];\n+    unsigned char message[32];\n+    unsigned char schnorr_signature[64];\n+    secp256k1_pubkey pubkey, recpubkey;\n+\n+    /* Generate a random key and message. */\n+    {\n+        secp256k1_scalar key;\n+        random_scalar_order_test(&key);\n+        secp256k1_scalar_get_b32(privkey, &key);\n+        secp256k1_rand256_test(message);\n+    }\n+\n+    /* Construct and verify corresponding public key. */\n+    CHECK(secp256k1_ec_seckey_verify(ctx, privkey) == 1);\n+    CHECK(secp256k1_ec_pubkey_create(ctx, &pubkey, privkey) == 1);\n+\n+    /* Schnorr sign. */\n+    CHECK(secp256k1_schnorr_sign(ctx, schnorr_signature, message, privkey, NULL, NULL) == 1);\n+    CHECK(secp256k1_schnorr_verify(ctx, schnorr_signature, message, &pubkey) == 1);\n+    CHECK(secp256k1_schnorr_recover(ctx, &recpubkey, schnorr_signature, message) == 1);\n+    CHECK(memcmp(&pubkey, &recpubkey, sizeof(pubkey)) == 0);\n+    /* Destroy signature and verify again. */\n+    schnorr_signature[secp256k1_rand_bits(6)] += 1 + secp256k1_rand_int(255);\n+    CHECK(secp256k1_schnorr_verify(ctx, schnorr_signature, message, &pubkey) == 0);\n+    CHECK(secp256k1_schnorr_recover(ctx, &recpubkey, schnorr_signature, message) != 1 ||\n+          memcmp(&pubkey, &recpubkey, sizeof(pubkey)) != 0);\n+}\n+\n+/** Horribly broken hash function. Do not use for anything but tests. */\n+void test_schnorr_hash(unsigned char *h32, const unsigned char *r32, const unsigned char *msg32) {\n+    int i;\n+    for (i = 0; i < 32; i++) {\n+        h32[i] = r32[i] ^ msg32[i];\n+    }\n+}\n+\n+void test_schnorr_sign_verify(void) {\n+    unsigned char msg32[32];\n+    unsigned char sig64[3][64];\n+    secp256k1_gej pubkeyj[3];\n+    secp256k1_ge pubkey[3];\n+    secp256k1_scalar nonce[3], key[3];\n+    int i = 0;\n+    int k;\n+\n+    secp256k1_rand256_test(msg32);\n+\n+    for (k = 0; k < 3; k++) {\n+        random_scalar_order_test(&key[k]);\n+\n+        do {\n+            random_scalar_order_test(&nonce[k]);\n+            if (secp256k1_schnorr_sig_sign(&ctx->ecmult_gen_ctx, sig64[k], &key[k], &nonce[k], NULL, &test_schnorr_hash, msg32)) {\n+                break;\n+            }\n+        } while(1);\n+\n+        secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &pubkeyj[k], &key[k]);\n+        secp256k1_ge_set_gej_var(&pubkey[k], &pubkeyj[k]);\n+        CHECK(secp256k1_schnorr_sig_verify(&ctx->ecmult_ctx, sig64[k], &pubkey[k], &test_schnorr_hash, msg32));\n+\n+        for (i = 0; i < 4; i++) {\n+            int pos = secp256k1_rand_bits(6);\n+            int mod = 1 + secp256k1_rand_int(255);\n+            sig64[k][pos] ^= mod;\n+            CHECK(secp256k1_schnorr_sig_verify(&ctx->ecmult_ctx, sig64[k], &pubkey[k], &test_schnorr_hash, msg32) == 0);\n+            sig64[k][pos] ^= mod;\n+        }\n+    }\n+}\n+\n+void test_schnorr_threshold(void) {\n+    unsigned char msg[32];\n+    unsigned char sec[5][32];\n+    secp256k1_pubkey pub[5];\n+    unsigned char nonce[5][32];\n+    secp256k1_pubkey pubnonce[5];\n+    unsigned char sig[5][64];\n+    const unsigned char* sigs[5];\n+    unsigned char allsig[64];\n+    const secp256k1_pubkey* pubs[5];\n+    secp256k1_pubkey allpub;\n+    int n, i;\n+    int damage;\n+    int ret = 0;\n+\n+    damage = secp256k1_rand_bits(1) ? (1 + secp256k1_rand_int(4)) : 0;\n+    secp256k1_rand256_test(msg);\n+    n = 2 + secp256k1_rand_int(4);\n+    for (i = 0; i < n; i++) {\n+        do {\n+            secp256k1_rand256_test(sec[i]);\n+        } while (!secp256k1_ec_seckey_verify(ctx, sec[i]));\n+        CHECK(secp256k1_ec_pubkey_create(ctx, &pub[i], sec[i]));\n+        CHECK(secp256k1_schnorr_generate_nonce_pair(ctx, &pubnonce[i], nonce[i], msg, sec[i], NULL, NULL));\n+        pubs[i] = &pub[i];\n+    }\n+    if (damage == 1) {\n+        nonce[secp256k1_rand_int(n)][secp256k1_rand_int(32)] ^= 1 + secp256k1_rand_int(255);\n+    } else if (damage == 2) {\n+        sec[secp256k1_rand_int(n)][secp256k1_rand_int(32)] ^= 1 + secp256k1_rand_int(255);\n+    }\n+    for (i = 0; i < n; i++) {\n+        secp256k1_pubkey allpubnonce;\n+        const secp256k1_pubkey *pubnonces[4];\n+        int j;\n+        for (j = 0; j < i; j++) {\n+            pubnonces[j] = &pubnonce[j];\n+        }\n+        for (j = i + 1; j < n; j++) {\n+            pubnonces[j - 1] = &pubnonce[j];\n+        }\n+        CHECK(secp256k1_ec_pubkey_combine(ctx, &allpubnonce, pubnonces, n - 1));\n+        ret |= (secp256k1_schnorr_partial_sign(ctx, sig[i], msg, sec[i], &allpubnonce, nonce[i]) != 1) * 1;\n+        sigs[i] = sig[i];\n+    }\n+    if (damage == 3) {\n+        sig[secp256k1_rand_int(n)][secp256k1_rand_bits(6)] ^= 1 + secp256k1_rand_int(255);\n+    }\n+    ret |= (secp256k1_ec_pubkey_combine(ctx, &allpub, pubs, n) != 1) * 2;\n+    if ((ret & 1) == 0) {\n+        ret |= (secp256k1_schnorr_partial_combine(ctx, allsig, sigs, n) != 1) * 4;\n+    }\n+    if (damage == 4) {\n+        allsig[secp256k1_rand_int(32)] ^= 1 + secp256k1_rand_int(255);\n+    }\n+    if ((ret & 7) == 0) {\n+        ret |= (secp256k1_schnorr_verify(ctx, allsig, msg, &allpub) != 1) * 8;\n+    }\n+    CHECK((ret == 0) == (damage == 0));\n+}\n+\n+void test_schnorr_recovery(void) {\n+    unsigned char msg32[32];\n+    unsigned char sig64[64];\n+    secp256k1_ge Q;\n+\n+    secp256k1_rand256_test(msg32);\n+    secp256k1_rand256_test(sig64);\n+    secp256k1_rand256_test(sig64 + 32);\n+    if (secp256k1_schnorr_sig_recover(&ctx->ecmult_ctx, sig64, &Q, &test_schnorr_hash, msg32) == 1) {\n+        CHECK(secp256k1_schnorr_sig_verify(&ctx->ecmult_ctx, sig64, &Q, &test_schnorr_hash, msg32) == 1);\n+    }\n+}\n+\n+void run_schnorr_tests(void) {\n+    int i;\n+    for (i = 0; i < 32*count; i++) {\n+        test_schnorr_end_to_end();\n+    }\n+    for (i = 0; i < 32 * count; i++) {\n+         test_schnorr_sign_verify();\n+    }\n+    for (i = 0; i < 16 * count; i++) {\n+         test_schnorr_recovery();\n+    }\n+    for (i = 0; i < 10 * count; i++) {\n+         test_schnorr_threshold();\n+    }\n+}\n+\n+#endif"
      },
      {
        "sha": "ebfa71eb44bda57b0ea6e4ea9a45d46fe0540c7a",
        "filename": "src/secp256k1/src/num.h",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/num.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/num.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/num.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -20,48 +20,48 @@\n #endif\n \n /** Copy a number. */\n-static void secp256k1_num_copy(secp256k1_num_t *r, const secp256k1_num_t *a);\n+static void secp256k1_num_copy(secp256k1_num *r, const secp256k1_num *a);\n \n /** Convert a number's absolute value to a binary big-endian string.\n  *  There must be enough place. */\n-static void secp256k1_num_get_bin(unsigned char *r, unsigned int rlen, const secp256k1_num_t *a);\n+static void secp256k1_num_get_bin(unsigned char *r, unsigned int rlen, const secp256k1_num *a);\n \n /** Set a number to the value of a binary big-endian string. */\n-static void secp256k1_num_set_bin(secp256k1_num_t *r, const unsigned char *a, unsigned int alen);\n+static void secp256k1_num_set_bin(secp256k1_num *r, const unsigned char *a, unsigned int alen);\n \n /** Compute a modular inverse. The input must be less than the modulus. */\n-static void secp256k1_num_mod_inverse(secp256k1_num_t *r, const secp256k1_num_t *a, const secp256k1_num_t *m);\n+static void secp256k1_num_mod_inverse(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *m);\n \n /** Compare the absolute value of two numbers. */\n-static int secp256k1_num_cmp(const secp256k1_num_t *a, const secp256k1_num_t *b);\n+static int secp256k1_num_cmp(const secp256k1_num *a, const secp256k1_num *b);\n \n /** Test whether two number are equal (including sign). */\n-static int secp256k1_num_eq(const secp256k1_num_t *a, const secp256k1_num_t *b);\n+static int secp256k1_num_eq(const secp256k1_num *a, const secp256k1_num *b);\n \n /** Add two (signed) numbers. */\n-static void secp256k1_num_add(secp256k1_num_t *r, const secp256k1_num_t *a, const secp256k1_num_t *b);\n+static void secp256k1_num_add(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b);\n \n /** Subtract two (signed) numbers. */\n-static void secp256k1_num_sub(secp256k1_num_t *r, const secp256k1_num_t *a, const secp256k1_num_t *b);\n+static void secp256k1_num_sub(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b);\n \n /** Multiply two (signed) numbers. */\n-static void secp256k1_num_mul(secp256k1_num_t *r, const secp256k1_num_t *a, const secp256k1_num_t *b);\n+static void secp256k1_num_mul(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b);\n \n /** Replace a number by its remainder modulo m. M's sign is ignored. The result is a number between 0 and m-1,\n     even if r was negative. */\n-static void secp256k1_num_mod(secp256k1_num_t *r, const secp256k1_num_t *m);\n+static void secp256k1_num_mod(secp256k1_num *r, const secp256k1_num *m);\n \n /** Right-shift the passed number by bits bits. */\n-static void secp256k1_num_shift(secp256k1_num_t *r, int bits);\n+static void secp256k1_num_shift(secp256k1_num *r, int bits);\n \n /** Check whether a number is zero. */\n-static int secp256k1_num_is_zero(const secp256k1_num_t *a);\n+static int secp256k1_num_is_zero(const secp256k1_num *a);\n \n /** Check whether a number is strictly negative. */\n-static int secp256k1_num_is_neg(const secp256k1_num_t *a);\n+static int secp256k1_num_is_neg(const secp256k1_num *a);\n \n /** Change a number's sign. */\n-static void secp256k1_num_negate(secp256k1_num_t *r);\n+static void secp256k1_num_negate(secp256k1_num *r);\n \n #endif\n "
      },
      {
        "sha": "7dd813088afc94ab54e2281d17edbc709e4b5c3d",
        "filename": "src/secp256k1/src/num_gmp.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/num_gmp.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/num_gmp.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/num_gmp.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -15,6 +15,6 @@ typedef struct {\n     mp_limb_t data[2*NUM_LIMBS];\n     int neg;\n     int limbs;\n-} secp256k1_num_t;\n+} secp256k1_num;\n \n #endif"
      },
      {
        "sha": "7b6a89719ab148df09a93a190133074edf8b069f",
        "filename": "src/secp256k1/src/num_gmp_impl.h",
        "status": "modified",
        "additions": 21,
        "deletions": 19,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/num_gmp_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/num_gmp_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/num_gmp_impl.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -15,18 +15,18 @@\n #include \"num.h\"\n \n #ifdef VERIFY\n-static void secp256k1_num_sanity(const secp256k1_num_t *a) {\n+static void secp256k1_num_sanity(const secp256k1_num *a) {\n     VERIFY_CHECK(a->limbs == 1 || (a->limbs > 1 && a->data[a->limbs-1] != 0));\n }\n #else\n #define secp256k1_num_sanity(a) do { } while(0)\n #endif\n \n-static void secp256k1_num_copy(secp256k1_num_t *r, const secp256k1_num_t *a) {\n+static void secp256k1_num_copy(secp256k1_num *r, const secp256k1_num *a) {\n     *r = *a;\n }\n \n-static void secp256k1_num_get_bin(unsigned char *r, unsigned int rlen, const secp256k1_num_t *a) {\n+static void secp256k1_num_get_bin(unsigned char *r, unsigned int rlen, const secp256k1_num *a) {\n     unsigned char tmp[65];\n     int len = 0;\n     int shift = 0;\n@@ -42,7 +42,7 @@ static void secp256k1_num_get_bin(unsigned char *r, unsigned int rlen, const sec\n     memset(tmp, 0, sizeof(tmp));\n }\n \n-static void secp256k1_num_set_bin(secp256k1_num_t *r, const unsigned char *a, unsigned int alen) {\n+static void secp256k1_num_set_bin(secp256k1_num *r, const unsigned char *a, unsigned int alen) {\n     int len;\n     VERIFY_CHECK(alen > 0);\n     VERIFY_CHECK(alen <= 64);\n@@ -59,7 +59,7 @@ static void secp256k1_num_set_bin(secp256k1_num_t *r, const unsigned char *a, un\n     }\n }\n \n-static void secp256k1_num_add_abs(secp256k1_num_t *r, const secp256k1_num_t *a, const secp256k1_num_t *b) {\n+static void secp256k1_num_add_abs(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b) {\n     mp_limb_t c = mpn_add(r->data, a->data, a->limbs, b->data, b->limbs);\n     r->limbs = a->limbs;\n     if (c != 0) {\n@@ -68,16 +68,17 @@ static void secp256k1_num_add_abs(secp256k1_num_t *r, const secp256k1_num_t *a,\n     }\n }\n \n-static void secp256k1_num_sub_abs(secp256k1_num_t *r, const secp256k1_num_t *a, const secp256k1_num_t *b) {\n+static void secp256k1_num_sub_abs(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b) {\n     mp_limb_t c = mpn_sub(r->data, a->data, a->limbs, b->data, b->limbs);\n+    (void)c;\n     VERIFY_CHECK(c == 0);\n     r->limbs = a->limbs;\n     while (r->limbs > 1 && r->data[r->limbs-1]==0) {\n         r->limbs--;\n     }\n }\n \n-static void secp256k1_num_mod(secp256k1_num_t *r, const secp256k1_num_t *m) {\n+static void secp256k1_num_mod(secp256k1_num *r, const secp256k1_num *m) {\n     secp256k1_num_sanity(r);\n     secp256k1_num_sanity(m);\n \n@@ -97,7 +98,7 @@ static void secp256k1_num_mod(secp256k1_num_t *r, const secp256k1_num_t *m) {\n     }\n }\n \n-static void secp256k1_num_mod_inverse(secp256k1_num_t *r, const secp256k1_num_t *a, const secp256k1_num_t *m) {\n+static void secp256k1_num_mod_inverse(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *m) {\n     int i;\n     mp_limb_t g[NUM_LIMBS+1];\n     mp_limb_t u[NUM_LIMBS+1];\n@@ -125,6 +126,7 @@ static void secp256k1_num_mod_inverse(secp256k1_num_t *r, const secp256k1_num_t\n     }\n     sn = NUM_LIMBS+1;\n     gn = mpn_gcdext(g, r->data, &sn, u, m->limbs, v, m->limbs);\n+    (void)gn;\n     VERIFY_CHECK(gn == 1);\n     VERIFY_CHECK(g[0] == 1);\n     r->neg = a->neg ^ m->neg;\n@@ -142,15 +144,15 @@ static void secp256k1_num_mod_inverse(secp256k1_num_t *r, const secp256k1_num_t\n     memset(v, 0, sizeof(v));\n }\n \n-static int secp256k1_num_is_zero(const secp256k1_num_t *a) {\n+static int secp256k1_num_is_zero(const secp256k1_num *a) {\n     return (a->limbs == 1 && a->data[0] == 0);\n }\n \n-static int secp256k1_num_is_neg(const secp256k1_num_t *a) {\n+static int secp256k1_num_is_neg(const secp256k1_num *a) {\n     return (a->limbs > 1 || a->data[0] != 0) && a->neg;\n }\n \n-static int secp256k1_num_cmp(const secp256k1_num_t *a, const secp256k1_num_t *b) {\n+static int secp256k1_num_cmp(const secp256k1_num *a, const secp256k1_num *b) {\n     if (a->limbs > b->limbs) {\n         return 1;\n     }\n@@ -160,7 +162,7 @@ static int secp256k1_num_cmp(const secp256k1_num_t *a, const secp256k1_num_t *b)\n     return mpn_cmp(a->data, b->data, a->limbs);\n }\n \n-static int secp256k1_num_eq(const secp256k1_num_t *a, const secp256k1_num_t *b) {\n+static int secp256k1_num_eq(const secp256k1_num *a, const secp256k1_num *b) {\n     if (a->limbs > b->limbs) {\n         return 0;\n     }\n@@ -173,7 +175,7 @@ static int secp256k1_num_eq(const secp256k1_num_t *a, const secp256k1_num_t *b)\n     return mpn_cmp(a->data, b->data, a->limbs) == 0;\n }\n \n-static void secp256k1_num_subadd(secp256k1_num_t *r, const secp256k1_num_t *a, const secp256k1_num_t *b, int bneg) {\n+static void secp256k1_num_subadd(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b, int bneg) {\n     if (!(b->neg ^ bneg ^ a->neg)) { /* a and b have the same sign */\n         r->neg = a->neg;\n         if (a->limbs >= b->limbs) {\n@@ -192,19 +194,19 @@ static void secp256k1_num_subadd(secp256k1_num_t *r, const secp256k1_num_t *a, c\n     }\n }\n \n-static void secp256k1_num_add(secp256k1_num_t *r, const secp256k1_num_t *a, const secp256k1_num_t *b) {\n+static void secp256k1_num_add(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b) {\n     secp256k1_num_sanity(a);\n     secp256k1_num_sanity(b);\n     secp256k1_num_subadd(r, a, b, 0);\n }\n \n-static void secp256k1_num_sub(secp256k1_num_t *r, const secp256k1_num_t *a, const secp256k1_num_t *b) {\n+static void secp256k1_num_sub(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b) {\n     secp256k1_num_sanity(a);\n     secp256k1_num_sanity(b);\n     secp256k1_num_subadd(r, a, b, 1);\n }\n \n-static void secp256k1_num_mul(secp256k1_num_t *r, const secp256k1_num_t *a, const secp256k1_num_t *b) {\n+static void secp256k1_num_mul(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b) {\n     mp_limb_t tmp[2*NUM_LIMBS+1];\n     secp256k1_num_sanity(a);\n     secp256k1_num_sanity(b);\n@@ -231,13 +233,13 @@ static void secp256k1_num_mul(secp256k1_num_t *r, const secp256k1_num_t *a, cons\n     memset(tmp, 0, sizeof(tmp));\n }\n \n-static void secp256k1_num_shift(secp256k1_num_t *r, int bits) {\n-    int i;\n+static void secp256k1_num_shift(secp256k1_num *r, int bits) {\n     if (bits % GMP_NUMB_BITS) {\n         /* Shift within limbs. */\n         mpn_rshift(r->data, r->data, r->limbs, bits % GMP_NUMB_BITS);\n     }\n     if (bits >= GMP_NUMB_BITS) {\n+        int i;\n         /* Shift full limbs. */\n         for (i = 0; i < r->limbs; i++) {\n             int index = i + (bits / GMP_NUMB_BITS);\n@@ -253,7 +255,7 @@ static void secp256k1_num_shift(secp256k1_num_t *r, int bits) {\n     }\n }\n \n-static void secp256k1_num_negate(secp256k1_num_t *r) {\n+static void secp256k1_num_negate(secp256k1_num *r) {\n     r->neg ^= 1;\n }\n "
      },
      {
        "sha": "b590ccd6dde6fa609bcbe11492a8e5d8718bc999",
        "filename": "src/secp256k1/src/scalar.h",
        "status": "modified",
        "additions": 34,
        "deletions": 23,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/scalar.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/scalar.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -22,72 +22,83 @@\n #endif\n \n /** Clear a scalar to prevent the leak of sensitive data. */\n-static void secp256k1_scalar_clear(secp256k1_scalar_t *r);\n+static void secp256k1_scalar_clear(secp256k1_scalar *r);\n \n /** Access bits from a scalar. All requested bits must belong to the same 32-bit limb. */\n-static unsigned int secp256k1_scalar_get_bits(const secp256k1_scalar_t *a, unsigned int offset, unsigned int count);\n+static unsigned int secp256k1_scalar_get_bits(const secp256k1_scalar *a, unsigned int offset, unsigned int count);\n \n /** Access bits from a scalar. Not constant time. */\n-static unsigned int secp256k1_scalar_get_bits_var(const secp256k1_scalar_t *a, unsigned int offset, unsigned int count);\n+static unsigned int secp256k1_scalar_get_bits_var(const secp256k1_scalar *a, unsigned int offset, unsigned int count);\n \n /** Set a scalar from a big endian byte array. */\n-static void secp256k1_scalar_set_b32(secp256k1_scalar_t *r, const unsigned char *bin, int *overflow);\n+static void secp256k1_scalar_set_b32(secp256k1_scalar *r, const unsigned char *bin, int *overflow);\n \n /** Set a scalar to an unsigned integer. */\n-static void secp256k1_scalar_set_int(secp256k1_scalar_t *r, unsigned int v);\n+static void secp256k1_scalar_set_int(secp256k1_scalar *r, unsigned int v);\n \n /** Convert a scalar to a byte array. */\n-static void secp256k1_scalar_get_b32(unsigned char *bin, const secp256k1_scalar_t* a);\n+static void secp256k1_scalar_get_b32(unsigned char *bin, const secp256k1_scalar* a);\n \n /** Add two scalars together (modulo the group order). Returns whether it overflowed. */\n-static int secp256k1_scalar_add(secp256k1_scalar_t *r, const secp256k1_scalar_t *a, const secp256k1_scalar_t *b);\n+static int secp256k1_scalar_add(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b);\n \n-/** Add a power of two to a scalar. The result is not allowed to overflow. */\n-static void secp256k1_scalar_add_bit(secp256k1_scalar_t *r, unsigned int bit);\n+/** Conditionally add a power of two to a scalar. The result is not allowed to overflow. */\n+static void secp256k1_scalar_cadd_bit(secp256k1_scalar *r, unsigned int bit, int flag);\n \n /** Multiply two scalars (modulo the group order). */\n-static void secp256k1_scalar_mul(secp256k1_scalar_t *r, const secp256k1_scalar_t *a, const secp256k1_scalar_t *b);\n+static void secp256k1_scalar_mul(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b);\n+\n+/** Shift a scalar right by some amount strictly between 0 and 16, returning\n+ *  the low bits that were shifted off */\n+static int secp256k1_scalar_shr_int(secp256k1_scalar *r, int n);\n \n /** Compute the square of a scalar (modulo the group order). */\n-static void secp256k1_scalar_sqr(secp256k1_scalar_t *r, const secp256k1_scalar_t *a);\n+static void secp256k1_scalar_sqr(secp256k1_scalar *r, const secp256k1_scalar *a);\n \n /** Compute the inverse of a scalar (modulo the group order). */\n-static void secp256k1_scalar_inverse(secp256k1_scalar_t *r, const secp256k1_scalar_t *a);\n+static void secp256k1_scalar_inverse(secp256k1_scalar *r, const secp256k1_scalar *a);\n \n /** Compute the inverse of a scalar (modulo the group order), without constant-time guarantee. */\n-static void secp256k1_scalar_inverse_var(secp256k1_scalar_t *r, const secp256k1_scalar_t *a);\n+static void secp256k1_scalar_inverse_var(secp256k1_scalar *r, const secp256k1_scalar *a);\n \n /** Compute the complement of a scalar (modulo the group order). */\n-static void secp256k1_scalar_negate(secp256k1_scalar_t *r, const secp256k1_scalar_t *a);\n+static void secp256k1_scalar_negate(secp256k1_scalar *r, const secp256k1_scalar *a);\n \n /** Check whether a scalar equals zero. */\n-static int secp256k1_scalar_is_zero(const secp256k1_scalar_t *a);\n+static int secp256k1_scalar_is_zero(const secp256k1_scalar *a);\n \n /** Check whether a scalar equals one. */\n-static int secp256k1_scalar_is_one(const secp256k1_scalar_t *a);\n+static int secp256k1_scalar_is_one(const secp256k1_scalar *a);\n+\n+/** Check whether a scalar, considered as an nonnegative integer, is even. */\n+static int secp256k1_scalar_is_even(const secp256k1_scalar *a);\n \n /** Check whether a scalar is higher than the group order divided by 2. */\n-static int secp256k1_scalar_is_high(const secp256k1_scalar_t *a);\n+static int secp256k1_scalar_is_high(const secp256k1_scalar *a);\n+\n+/** Conditionally negate a number, in constant time.\n+ * Returns -1 if the number was negated, 1 otherwise */\n+static int secp256k1_scalar_cond_negate(secp256k1_scalar *a, int flag);\n \n #ifndef USE_NUM_NONE\n /** Convert a scalar to a number. */\n-static void secp256k1_scalar_get_num(secp256k1_num_t *r, const secp256k1_scalar_t *a);\n+static void secp256k1_scalar_get_num(secp256k1_num *r, const secp256k1_scalar *a);\n \n /** Get the order of the group as a number. */\n-static void secp256k1_scalar_order_get_num(secp256k1_num_t *r);\n+static void secp256k1_scalar_order_get_num(secp256k1_num *r);\n #endif\n \n /** Compare two scalars. */\n-static int secp256k1_scalar_eq(const secp256k1_scalar_t *a, const secp256k1_scalar_t *b);\n+static int secp256k1_scalar_eq(const secp256k1_scalar *a, const secp256k1_scalar *b);\n \n #ifdef USE_ENDOMORPHISM\n /** Find r1 and r2 such that r1+r2*2^128 = a. */\n-static void secp256k1_scalar_split_128(secp256k1_scalar_t *r1, secp256k1_scalar_t *r2, const secp256k1_scalar_t *a);\n+static void secp256k1_scalar_split_128(secp256k1_scalar *r1, secp256k1_scalar *r2, const secp256k1_scalar *a);\n /** Find r1 and r2 such that r1+r2*lambda = a, and r1 and r2 are maximum 128 bits long (see secp256k1_gej_mul_lambda). */\n-static void secp256k1_scalar_split_lambda_var(secp256k1_scalar_t *r1, secp256k1_scalar_t *r2, const secp256k1_scalar_t *a);\n+static void secp256k1_scalar_split_lambda(secp256k1_scalar *r1, secp256k1_scalar *r2, const secp256k1_scalar *a);\n #endif\n \n /** Multiply a and b (without taking the modulus!), divide by 2**shift, and round to the nearest integer. Shift must be at least 256. */\n-static void secp256k1_scalar_mul_shift_var(secp256k1_scalar_t *r, const secp256k1_scalar_t *a, const secp256k1_scalar_t *b, unsigned int shift);\n+static void secp256k1_scalar_mul_shift_var(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b, unsigned int shift);\n \n #endif"
      },
      {
        "sha": "cff406038fbee85395fe88332bdd4fdefab8b8e2",
        "filename": "src/secp256k1/src/scalar_4x64.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/scalar_4x64.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/scalar_4x64.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar_4x64.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -12,7 +12,7 @@\n /** A scalar modulo the group order of the secp256k1 curve. */\n typedef struct {\n     uint64_t d[4];\n-} secp256k1_scalar_t;\n+} secp256k1_scalar;\n \n #define SECP256K1_SCALAR_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {{((uint64_t)(d1)) << 32 | (d0), ((uint64_t)(d3)) << 32 | (d2), ((uint64_t)(d5)) << 32 | (d4), ((uint64_t)(d7)) << 32 | (d6)}}\n "
      },
      {
        "sha": "aa2703dd23e8c97f493f989bd2d2b2558f398a5f",
        "filename": "src/secp256k1/src/scalar_4x64_impl.h",
        "status": "modified",
        "additions": 55,
        "deletions": 26,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/scalar_4x64_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/scalar_4x64_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar_4x64_impl.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -24,26 +24,26 @@\n #define SECP256K1_N_H_2 ((uint64_t)0xFFFFFFFFFFFFFFFFULL)\n #define SECP256K1_N_H_3 ((uint64_t)0x7FFFFFFFFFFFFFFFULL)\n \n-SECP256K1_INLINE static void secp256k1_scalar_clear(secp256k1_scalar_t *r) {\n+SECP256K1_INLINE static void secp256k1_scalar_clear(secp256k1_scalar *r) {\n     r->d[0] = 0;\n     r->d[1] = 0;\n     r->d[2] = 0;\n     r->d[3] = 0;\n }\n \n-SECP256K1_INLINE static void secp256k1_scalar_set_int(secp256k1_scalar_t *r, unsigned int v) {\n+SECP256K1_INLINE static void secp256k1_scalar_set_int(secp256k1_scalar *r, unsigned int v) {\n     r->d[0] = v;\n     r->d[1] = 0;\n     r->d[2] = 0;\n     r->d[3] = 0;\n }\n \n-SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits(const secp256k1_scalar_t *a, unsigned int offset, unsigned int count) {\n+SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {\n     VERIFY_CHECK((offset + count - 1) >> 6 == offset >> 6);\n     return (a->d[offset >> 6] >> (offset & 0x3F)) & ((((uint64_t)1) << count) - 1);\n }\n \n-SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits_var(const secp256k1_scalar_t *a, unsigned int offset, unsigned int count) {\n+SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits_var(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {\n     VERIFY_CHECK(count < 32);\n     VERIFY_CHECK(offset + count <= 256);\n     if ((offset + count - 1) >> 6 == offset >> 6) {\n@@ -54,7 +54,7 @@ SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits_var(const secp256\n     }\n }\n \n-SECP256K1_INLINE static int secp256k1_scalar_check_overflow(const secp256k1_scalar_t *a) {\n+SECP256K1_INLINE static int secp256k1_scalar_check_overflow(const secp256k1_scalar *a) {\n     int yes = 0;\n     int no = 0;\n     no |= (a->d[3] < SECP256K1_N_3); /* No need for a > check. */\n@@ -66,7 +66,7 @@ SECP256K1_INLINE static int secp256k1_scalar_check_overflow(const secp256k1_scal\n     return yes;\n }\n \n-SECP256K1_INLINE static int secp256k1_scalar_reduce(secp256k1_scalar_t *r, unsigned int overflow) {\n+SECP256K1_INLINE static int secp256k1_scalar_reduce(secp256k1_scalar *r, unsigned int overflow) {\n     uint128_t t;\n     VERIFY_CHECK(overflow <= 1);\n     t = (uint128_t)r->d[0] + overflow * SECP256K1_N_C_0;\n@@ -80,7 +80,7 @@ SECP256K1_INLINE static int secp256k1_scalar_reduce(secp256k1_scalar_t *r, unsig\n     return overflow;\n }\n \n-static int secp256k1_scalar_add(secp256k1_scalar_t *r, const secp256k1_scalar_t *a, const secp256k1_scalar_t *b) {\n+static int secp256k1_scalar_add(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {\n     int overflow;\n     uint128_t t = (uint128_t)a->d[0] + b->d[0];\n     r->d[0] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n@@ -96,9 +96,10 @@ static int secp256k1_scalar_add(secp256k1_scalar_t *r, const secp256k1_scalar_t\n     return overflow;\n }\n \n-static void secp256k1_scalar_add_bit(secp256k1_scalar_t *r, unsigned int bit) {\n+static void secp256k1_scalar_cadd_bit(secp256k1_scalar *r, unsigned int bit, int flag) {\n     uint128_t t;\n     VERIFY_CHECK(bit < 256);\n+    bit += ((uint32_t) flag - 1) & 0x100;  /* forcing (bit >> 6) > 3 makes this a noop */\n     t = (uint128_t)r->d[0] + (((uint64_t)((bit >> 6) == 0)) << (bit & 0x3F));\n     r->d[0] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n     t += (uint128_t)r->d[1] + (((uint64_t)((bit >> 6) == 1)) << (bit & 0x3F));\n@@ -113,7 +114,7 @@ static void secp256k1_scalar_add_bit(secp256k1_scalar_t *r, unsigned int bit) {\n #endif\n }\n \n-static void secp256k1_scalar_set_b32(secp256k1_scalar_t *r, const unsigned char *b32, int *overflow) {\n+static void secp256k1_scalar_set_b32(secp256k1_scalar *r, const unsigned char *b32, int *overflow) {\n     int over;\n     r->d[0] = (uint64_t)b32[31] | (uint64_t)b32[30] << 8 | (uint64_t)b32[29] << 16 | (uint64_t)b32[28] << 24 | (uint64_t)b32[27] << 32 | (uint64_t)b32[26] << 40 | (uint64_t)b32[25] << 48 | (uint64_t)b32[24] << 56;\n     r->d[1] = (uint64_t)b32[23] | (uint64_t)b32[22] << 8 | (uint64_t)b32[21] << 16 | (uint64_t)b32[20] << 24 | (uint64_t)b32[19] << 32 | (uint64_t)b32[18] << 40 | (uint64_t)b32[17] << 48 | (uint64_t)b32[16] << 56;\n@@ -125,18 +126,18 @@ static void secp256k1_scalar_set_b32(secp256k1_scalar_t *r, const unsigned char\n     }\n }\n \n-static void secp256k1_scalar_get_b32(unsigned char *bin, const secp256k1_scalar_t* a) {\n+static void secp256k1_scalar_get_b32(unsigned char *bin, const secp256k1_scalar* a) {\n     bin[0] = a->d[3] >> 56; bin[1] = a->d[3] >> 48; bin[2] = a->d[3] >> 40; bin[3] = a->d[3] >> 32; bin[4] = a->d[3] >> 24; bin[5] = a->d[3] >> 16; bin[6] = a->d[3] >> 8; bin[7] = a->d[3];\n     bin[8] = a->d[2] >> 56; bin[9] = a->d[2] >> 48; bin[10] = a->d[2] >> 40; bin[11] = a->d[2] >> 32; bin[12] = a->d[2] >> 24; bin[13] = a->d[2] >> 16; bin[14] = a->d[2] >> 8; bin[15] = a->d[2];\n     bin[16] = a->d[1] >> 56; bin[17] = a->d[1] >> 48; bin[18] = a->d[1] >> 40; bin[19] = a->d[1] >> 32; bin[20] = a->d[1] >> 24; bin[21] = a->d[1] >> 16; bin[22] = a->d[1] >> 8; bin[23] = a->d[1];\n     bin[24] = a->d[0] >> 56; bin[25] = a->d[0] >> 48; bin[26] = a->d[0] >> 40; bin[27] = a->d[0] >> 32; bin[28] = a->d[0] >> 24; bin[29] = a->d[0] >> 16; bin[30] = a->d[0] >> 8; bin[31] = a->d[0];\n }\n \n-SECP256K1_INLINE static int secp256k1_scalar_is_zero(const secp256k1_scalar_t *a) {\n+SECP256K1_INLINE static int secp256k1_scalar_is_zero(const secp256k1_scalar *a) {\n     return (a->d[0] | a->d[1] | a->d[2] | a->d[3]) == 0;\n }\n \n-static void secp256k1_scalar_negate(secp256k1_scalar_t *r, const secp256k1_scalar_t *a) {\n+static void secp256k1_scalar_negate(secp256k1_scalar *r, const secp256k1_scalar *a) {\n     uint64_t nonzero = 0xFFFFFFFFFFFFFFFFULL * (secp256k1_scalar_is_zero(a) == 0);\n     uint128_t t = (uint128_t)(~a->d[0]) + SECP256K1_N_0 + 1;\n     r->d[0] = t & nonzero; t >>= 64;\n@@ -148,11 +149,11 @@ static void secp256k1_scalar_negate(secp256k1_scalar_t *r, const secp256k1_scala\n     r->d[3] = t & nonzero;\n }\n \n-SECP256K1_INLINE static int secp256k1_scalar_is_one(const secp256k1_scalar_t *a) {\n+SECP256K1_INLINE static int secp256k1_scalar_is_one(const secp256k1_scalar *a) {\n     return ((a->d[0] ^ 1) | a->d[1] | a->d[2] | a->d[3]) == 0;\n }\n \n-static int secp256k1_scalar_is_high(const secp256k1_scalar_t *a) {\n+static int secp256k1_scalar_is_high(const secp256k1_scalar *a) {\n     int yes = 0;\n     int no = 0;\n     no |= (a->d[3] < SECP256K1_N_H_3);\n@@ -164,6 +165,22 @@ static int secp256k1_scalar_is_high(const secp256k1_scalar_t *a) {\n     return yes;\n }\n \n+static int secp256k1_scalar_cond_negate(secp256k1_scalar *r, int flag) {\n+    /* If we are flag = 0, mask = 00...00 and this is a no-op;\n+     * if we are flag = 1, mask = 11...11 and this is identical to secp256k1_scalar_negate */\n+    uint64_t mask = !flag - 1;\n+    uint64_t nonzero = (secp256k1_scalar_is_zero(r) != 0) - 1;\n+    uint128_t t = (uint128_t)(r->d[0] ^ mask) + ((SECP256K1_N_0 + 1) & mask);\n+    r->d[0] = t & nonzero; t >>= 64;\n+    t += (uint128_t)(r->d[1] ^ mask) + (SECP256K1_N_1 & mask);\n+    r->d[1] = t & nonzero; t >>= 64;\n+    t += (uint128_t)(r->d[2] ^ mask) + (SECP256K1_N_2 & mask);\n+    r->d[2] = t & nonzero; t >>= 64;\n+    t += (uint128_t)(r->d[3] ^ mask) + (SECP256K1_N_3 & mask);\n+    r->d[3] = t & nonzero;\n+    return 2 * (mask == 0) - 1;\n+}\n+\n /* Inspired by the macros in OpenSSL's crypto/bn/asm/x86_64-gcc.c. */\n \n /** Add a*b to the number defined by (c0,c1,c2). c2 must never overflow. */\n@@ -250,7 +267,7 @@ static int secp256k1_scalar_is_high(const secp256k1_scalar_t *a) {\n     VERIFY_CHECK(c2 == 0); \\\n }\n \n-static void secp256k1_scalar_reduce_512(secp256k1_scalar_t *r, const uint64_t *l) {\n+static void secp256k1_scalar_reduce_512(secp256k1_scalar *r, const uint64_t *l) {\n #ifdef USE_ASM_X86_64\n     /* Reduce 512 bits into 385. */\n     uint64_t m0, m1, m2, m3, m4, m5, m6;\n@@ -559,7 +576,7 @@ static void secp256k1_scalar_reduce_512(secp256k1_scalar_t *r, const uint64_t *l\n     secp256k1_scalar_reduce(r, c + secp256k1_scalar_check_overflow(r));\n }\n \n-static void secp256k1_scalar_mul_512(uint64_t l[8], const secp256k1_scalar_t *a, const secp256k1_scalar_t *b) {\n+static void secp256k1_scalar_mul_512(uint64_t l[8], const secp256k1_scalar *a, const secp256k1_scalar *b) {\n #ifdef USE_ASM_X86_64\n     const uint64_t *pb = b->d;\n     __asm__ __volatile__(\n@@ -721,12 +738,12 @@ static void secp256k1_scalar_mul_512(uint64_t l[8], const secp256k1_scalar_t *a,\n     extract(l[5]);\n     muladd_fast(a->d[3], b->d[3]);\n     extract_fast(l[6]);\n-    VERIFY_CHECK(c1 <= 0);\n+    VERIFY_CHECK(c1 == 0);\n     l[7] = c0;\n #endif\n }\n \n-static void secp256k1_scalar_sqr_512(uint64_t l[8], const secp256k1_scalar_t *a) {\n+static void secp256k1_scalar_sqr_512(uint64_t l[8], const secp256k1_scalar *a) {\n #ifdef USE_ASM_X86_64\n     __asm__ __volatile__(\n     /* Preload */\n@@ -871,19 +888,32 @@ static void secp256k1_scalar_sqr_512(uint64_t l[8], const secp256k1_scalar_t *a)\n #undef extract\n #undef extract_fast\n \n-static void secp256k1_scalar_mul(secp256k1_scalar_t *r, const secp256k1_scalar_t *a, const secp256k1_scalar_t *b) {\n+static void secp256k1_scalar_mul(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {\n     uint64_t l[8];\n     secp256k1_scalar_mul_512(l, a, b);\n     secp256k1_scalar_reduce_512(r, l);\n }\n \n-static void secp256k1_scalar_sqr(secp256k1_scalar_t *r, const secp256k1_scalar_t *a) {\n+static int secp256k1_scalar_shr_int(secp256k1_scalar *r, int n) {\n+    int ret;\n+    VERIFY_CHECK(n > 0);\n+    VERIFY_CHECK(n < 16);\n+    ret = r->d[0] & ((1 << n) - 1);\n+    r->d[0] = (r->d[0] >> n) + (r->d[1] << (64 - n));\n+    r->d[1] = (r->d[1] >> n) + (r->d[2] << (64 - n));\n+    r->d[2] = (r->d[2] >> n) + (r->d[3] << (64 - n));\n+    r->d[3] = (r->d[3] >> n);\n+    return ret;\n+}\n+\n+static void secp256k1_scalar_sqr(secp256k1_scalar *r, const secp256k1_scalar *a) {\n     uint64_t l[8];\n     secp256k1_scalar_sqr_512(l, a);\n     secp256k1_scalar_reduce_512(r, l);\n }\n \n-static void secp256k1_scalar_split_128(secp256k1_scalar_t *r1, secp256k1_scalar_t *r2, const secp256k1_scalar_t *a) {\n+#ifdef USE_ENDOMORPHISM\n+static void secp256k1_scalar_split_128(secp256k1_scalar *r1, secp256k1_scalar *r2, const secp256k1_scalar *a) {\n     r1->d[0] = a->d[0];\n     r1->d[1] = a->d[1];\n     r1->d[2] = 0;\n@@ -893,12 +923,13 @@ static void secp256k1_scalar_split_128(secp256k1_scalar_t *r1, secp256k1_scalar_\n     r2->d[2] = 0;\n     r2->d[3] = 0;\n }\n+#endif\n \n-SECP256K1_INLINE static int secp256k1_scalar_eq(const secp256k1_scalar_t *a, const secp256k1_scalar_t *b) {\n+SECP256K1_INLINE static int secp256k1_scalar_eq(const secp256k1_scalar *a, const secp256k1_scalar *b) {\n     return ((a->d[0] ^ b->d[0]) | (a->d[1] ^ b->d[1]) | (a->d[2] ^ b->d[2]) | (a->d[3] ^ b->d[3])) == 0;\n }\n \n-SECP256K1_INLINE static void secp256k1_scalar_mul_shift_var(secp256k1_scalar_t *r, const secp256k1_scalar_t *a, const secp256k1_scalar_t *b, unsigned int shift) {\n+SECP256K1_INLINE static void secp256k1_scalar_mul_shift_var(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b, unsigned int shift) {\n     uint64_t l[8];\n     unsigned int shiftlimbs;\n     unsigned int shiftlow;\n@@ -912,9 +943,7 @@ SECP256K1_INLINE static void secp256k1_scalar_mul_shift_var(secp256k1_scalar_t *\n     r->d[1] = shift < 448 ? (l[1 + shiftlimbs] >> shiftlow | (shift < 384 && shiftlow ? (l[2 + shiftlimbs] << shifthigh) : 0)) : 0;\n     r->d[2] = shift < 384 ? (l[2 + shiftlimbs] >> shiftlow | (shift < 320 && shiftlow ? (l[3 + shiftlimbs] << shifthigh) : 0)) : 0;\n     r->d[3] = shift < 320 ? (l[3 + shiftlimbs] >> shiftlow) : 0;\n-    if ((l[(shift - 1) >> 6] >> ((shift - 1) & 0x3f)) & 1) {\n-        secp256k1_scalar_add_bit(r, 0);\n-    }\n+    secp256k1_scalar_cadd_bit(r, 0, (l[(shift - 1) >> 6] >> ((shift - 1) & 0x3f)) & 1);\n }\n \n #endif"
      },
      {
        "sha": "1319664f654994b79cf1d50e18eb1fcd8e0026f5",
        "filename": "src/secp256k1/src/scalar_8x32.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/scalar_8x32.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/scalar_8x32.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar_8x32.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -12,7 +12,7 @@\n /** A scalar modulo the group order of the secp256k1 curve. */\n typedef struct {\n     uint32_t d[8];\n-} secp256k1_scalar_t;\n+} secp256k1_scalar;\n \n #define SECP256K1_SCALAR_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {{(d0), (d1), (d2), (d3), (d4), (d5), (d6), (d7)}}\n "
      },
      {
        "sha": "aae4f35c0856eb3bd0a1fd35d572a461bb0c7a35",
        "filename": "src/secp256k1/src/scalar_8x32_impl.h",
        "status": "modified",
        "additions": 65,
        "deletions": 25,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/scalar_8x32_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/scalar_8x32_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar_8x32_impl.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -34,7 +34,7 @@\n #define SECP256K1_N_H_6 ((uint32_t)0xFFFFFFFFUL)\n #define SECP256K1_N_H_7 ((uint32_t)0x7FFFFFFFUL)\n \n-SECP256K1_INLINE static void secp256k1_scalar_clear(secp256k1_scalar_t *r) {\n+SECP256K1_INLINE static void secp256k1_scalar_clear(secp256k1_scalar *r) {\n     r->d[0] = 0;\n     r->d[1] = 0;\n     r->d[2] = 0;\n@@ -45,7 +45,7 @@ SECP256K1_INLINE static void secp256k1_scalar_clear(secp256k1_scalar_t *r) {\n     r->d[7] = 0;\n }\n \n-SECP256K1_INLINE static void secp256k1_scalar_set_int(secp256k1_scalar_t *r, unsigned int v) {\n+SECP256K1_INLINE static void secp256k1_scalar_set_int(secp256k1_scalar *r, unsigned int v) {\n     r->d[0] = v;\n     r->d[1] = 0;\n     r->d[2] = 0;\n@@ -56,12 +56,12 @@ SECP256K1_INLINE static void secp256k1_scalar_set_int(secp256k1_scalar_t *r, uns\n     r->d[7] = 0;\n }\n \n-SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits(const secp256k1_scalar_t *a, unsigned int offset, unsigned int count) {\n+SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {\n     VERIFY_CHECK((offset + count - 1) >> 5 == offset >> 5);\n     return (a->d[offset >> 5] >> (offset & 0x1F)) & ((1 << count) - 1);\n }\n \n-SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits_var(const secp256k1_scalar_t *a, unsigned int offset, unsigned int count) {\n+SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits_var(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {\n     VERIFY_CHECK(count < 32);\n     VERIFY_CHECK(offset + count <= 256);\n     if ((offset + count - 1) >> 5 == offset >> 5) {\n@@ -72,7 +72,7 @@ SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits_var(const secp256\n     }\n }\n \n-SECP256K1_INLINE static int secp256k1_scalar_check_overflow(const secp256k1_scalar_t *a) {\n+SECP256K1_INLINE static int secp256k1_scalar_check_overflow(const secp256k1_scalar *a) {\n     int yes = 0;\n     int no = 0;\n     no |= (a->d[7] < SECP256K1_N_7); /* No need for a > check. */\n@@ -90,7 +90,7 @@ SECP256K1_INLINE static int secp256k1_scalar_check_overflow(const secp256k1_scal\n     return yes;\n }\n \n-SECP256K1_INLINE static int secp256k1_scalar_reduce(secp256k1_scalar_t *r, uint32_t overflow) {\n+SECP256K1_INLINE static int secp256k1_scalar_reduce(secp256k1_scalar *r, uint32_t overflow) {\n     uint64_t t;\n     VERIFY_CHECK(overflow <= 1);\n     t = (uint64_t)r->d[0] + overflow * SECP256K1_N_C_0;\n@@ -112,7 +112,7 @@ SECP256K1_INLINE static int secp256k1_scalar_reduce(secp256k1_scalar_t *r, uint3\n     return overflow;\n }\n \n-static int secp256k1_scalar_add(secp256k1_scalar_t *r, const secp256k1_scalar_t *a, const secp256k1_scalar_t *b) {\n+static int secp256k1_scalar_add(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {\n     int overflow;\n     uint64_t t = (uint64_t)a->d[0] + b->d[0];\n     r->d[0] = t & 0xFFFFFFFFULL; t >>= 32;\n@@ -136,9 +136,10 @@ static int secp256k1_scalar_add(secp256k1_scalar_t *r, const secp256k1_scalar_t\n     return overflow;\n }\n \n-static void secp256k1_scalar_add_bit(secp256k1_scalar_t *r, unsigned int bit) {\n+static void secp256k1_scalar_cadd_bit(secp256k1_scalar *r, unsigned int bit, int flag) {\n     uint64_t t;\n     VERIFY_CHECK(bit < 256);\n+    bit += ((uint32_t) flag - 1) & 0x100;  /* forcing (bit >> 5) > 7 makes this a noop */\n     t = (uint64_t)r->d[0] + (((uint32_t)((bit >> 5) == 0)) << (bit & 0x1F));\n     r->d[0] = t & 0xFFFFFFFFULL; t >>= 32;\n     t += (uint64_t)r->d[1] + (((uint32_t)((bit >> 5) == 1)) << (bit & 0x1F));\n@@ -161,7 +162,7 @@ static void secp256k1_scalar_add_bit(secp256k1_scalar_t *r, unsigned int bit) {\n #endif\n }\n \n-static void secp256k1_scalar_set_b32(secp256k1_scalar_t *r, const unsigned char *b32, int *overflow) {\n+static void secp256k1_scalar_set_b32(secp256k1_scalar *r, const unsigned char *b32, int *overflow) {\n     int over;\n     r->d[0] = (uint32_t)b32[31] | (uint32_t)b32[30] << 8 | (uint32_t)b32[29] << 16 | (uint32_t)b32[28] << 24;\n     r->d[1] = (uint32_t)b32[27] | (uint32_t)b32[26] << 8 | (uint32_t)b32[25] << 16 | (uint32_t)b32[24] << 24;\n@@ -177,7 +178,7 @@ static void secp256k1_scalar_set_b32(secp256k1_scalar_t *r, const unsigned char\n     }\n }\n \n-static void secp256k1_scalar_get_b32(unsigned char *bin, const secp256k1_scalar_t* a) {\n+static void secp256k1_scalar_get_b32(unsigned char *bin, const secp256k1_scalar* a) {\n     bin[0] = a->d[7] >> 24; bin[1] = a->d[7] >> 16; bin[2] = a->d[7] >> 8; bin[3] = a->d[7];\n     bin[4] = a->d[6] >> 24; bin[5] = a->d[6] >> 16; bin[6] = a->d[6] >> 8; bin[7] = a->d[6];\n     bin[8] = a->d[5] >> 24; bin[9] = a->d[5] >> 16; bin[10] = a->d[5] >> 8; bin[11] = a->d[5];\n@@ -188,11 +189,11 @@ static void secp256k1_scalar_get_b32(unsigned char *bin, const secp256k1_scalar_\n     bin[28] = a->d[0] >> 24; bin[29] = a->d[0] >> 16; bin[30] = a->d[0] >> 8; bin[31] = a->d[0];\n }\n \n-SECP256K1_INLINE static int secp256k1_scalar_is_zero(const secp256k1_scalar_t *a) {\n+SECP256K1_INLINE static int secp256k1_scalar_is_zero(const secp256k1_scalar *a) {\n     return (a->d[0] | a->d[1] | a->d[2] | a->d[3] | a->d[4] | a->d[5] | a->d[6] | a->d[7]) == 0;\n }\n \n-static void secp256k1_scalar_negate(secp256k1_scalar_t *r, const secp256k1_scalar_t *a) {\n+static void secp256k1_scalar_negate(secp256k1_scalar *r, const secp256k1_scalar *a) {\n     uint32_t nonzero = 0xFFFFFFFFUL * (secp256k1_scalar_is_zero(a) == 0);\n     uint64_t t = (uint64_t)(~a->d[0]) + SECP256K1_N_0 + 1;\n     r->d[0] = t & nonzero; t >>= 32;\n@@ -212,11 +213,11 @@ static void secp256k1_scalar_negate(secp256k1_scalar_t *r, const secp256k1_scala\n     r->d[7] = t & nonzero;\n }\n \n-SECP256K1_INLINE static int secp256k1_scalar_is_one(const secp256k1_scalar_t *a) {\n+SECP256K1_INLINE static int secp256k1_scalar_is_one(const secp256k1_scalar *a) {\n     return ((a->d[0] ^ 1) | a->d[1] | a->d[2] | a->d[3] | a->d[4] | a->d[5] | a->d[6] | a->d[7]) == 0;\n }\n \n-static int secp256k1_scalar_is_high(const secp256k1_scalar_t *a) {\n+static int secp256k1_scalar_is_high(const secp256k1_scalar *a) {\n     int yes = 0;\n     int no = 0;\n     no |= (a->d[7] < SECP256K1_N_H_7);\n@@ -234,6 +235,31 @@ static int secp256k1_scalar_is_high(const secp256k1_scalar_t *a) {\n     return yes;\n }\n \n+static int secp256k1_scalar_cond_negate(secp256k1_scalar *r, int flag) {\n+    /* If we are flag = 0, mask = 00...00 and this is a no-op;\n+     * if we are flag = 1, mask = 11...11 and this is identical to secp256k1_scalar_negate */\n+    uint32_t mask = !flag - 1;\n+    uint32_t nonzero = 0xFFFFFFFFUL * (secp256k1_scalar_is_zero(r) == 0);\n+    uint64_t t = (uint64_t)(r->d[0] ^ mask) + ((SECP256K1_N_0 + 1) & mask);\n+    r->d[0] = t & nonzero; t >>= 32;\n+    t += (uint64_t)(r->d[1] ^ mask) + (SECP256K1_N_1 & mask);\n+    r->d[1] = t & nonzero; t >>= 32;\n+    t += (uint64_t)(r->d[2] ^ mask) + (SECP256K1_N_2 & mask);\n+    r->d[2] = t & nonzero; t >>= 32;\n+    t += (uint64_t)(r->d[3] ^ mask) + (SECP256K1_N_3 & mask);\n+    r->d[3] = t & nonzero; t >>= 32;\n+    t += (uint64_t)(r->d[4] ^ mask) + (SECP256K1_N_4 & mask);\n+    r->d[4] = t & nonzero; t >>= 32;\n+    t += (uint64_t)(r->d[5] ^ mask) + (SECP256K1_N_5 & mask);\n+    r->d[5] = t & nonzero; t >>= 32;\n+    t += (uint64_t)(r->d[6] ^ mask) + (SECP256K1_N_6 & mask);\n+    r->d[6] = t & nonzero; t >>= 32;\n+    t += (uint64_t)(r->d[7] ^ mask) + (SECP256K1_N_7 & mask);\n+    r->d[7] = t & nonzero;\n+    return 2 * (mask == 0) - 1;\n+}\n+\n+\n /* Inspired by the macros in OpenSSL's crypto/bn/asm/x86_64-gcc.c. */\n \n /** Add a*b to the number defined by (c0,c1,c2). c2 must never overflow. */\n@@ -320,7 +346,7 @@ static int secp256k1_scalar_is_high(const secp256k1_scalar_t *a) {\n     VERIFY_CHECK(c2 == 0); \\\n }\n \n-static void secp256k1_scalar_reduce_512(secp256k1_scalar_t *r, const uint32_t *l) {\n+static void secp256k1_scalar_reduce_512(secp256k1_scalar *r, const uint32_t *l) {\n     uint64_t c;\n     uint32_t n0 = l[8], n1 = l[9], n2 = l[10], n3 = l[11], n4 = l[12], n5 = l[13], n6 = l[14], n7 = l[15];\n     uint32_t m0, m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12;\n@@ -462,7 +488,7 @@ static void secp256k1_scalar_reduce_512(secp256k1_scalar_t *r, const uint32_t *l\n     secp256k1_scalar_reduce(r, c + secp256k1_scalar_check_overflow(r));\n }\n \n-static void secp256k1_scalar_mul_512(uint32_t *l, const secp256k1_scalar_t *a, const secp256k1_scalar_t *b) {\n+static void secp256k1_scalar_mul_512(uint32_t *l, const secp256k1_scalar *a, const secp256k1_scalar *b) {\n     /* 96 bit accumulator. */\n     uint32_t c0 = 0, c1 = 0, c2 = 0;\n \n@@ -550,7 +576,7 @@ static void secp256k1_scalar_mul_512(uint32_t *l, const secp256k1_scalar_t *a, c\n     l[15] = c0;\n }\n \n-static void secp256k1_scalar_sqr_512(uint32_t *l, const secp256k1_scalar_t *a) {\n+static void secp256k1_scalar_sqr_512(uint32_t *l, const secp256k1_scalar *a) {\n     /* 96 bit accumulator. */\n     uint32_t c0 = 0, c1 = 0, c2 = 0;\n \n@@ -618,20 +644,36 @@ static void secp256k1_scalar_sqr_512(uint32_t *l, const secp256k1_scalar_t *a) {\n #undef extract\n #undef extract_fast\n \n-static void secp256k1_scalar_mul(secp256k1_scalar_t *r, const secp256k1_scalar_t *a, const secp256k1_scalar_t *b) {\n+static void secp256k1_scalar_mul(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {\n     uint32_t l[16];\n     secp256k1_scalar_mul_512(l, a, b);\n     secp256k1_scalar_reduce_512(r, l);\n }\n \n-static void secp256k1_scalar_sqr(secp256k1_scalar_t *r, const secp256k1_scalar_t *a) {\n+static int secp256k1_scalar_shr_int(secp256k1_scalar *r, int n) {\n+    int ret;\n+    VERIFY_CHECK(n > 0);\n+    VERIFY_CHECK(n < 16);\n+    ret = r->d[0] & ((1 << n) - 1);\n+    r->d[0] = (r->d[0] >> n) + (r->d[1] << (32 - n));\n+    r->d[1] = (r->d[1] >> n) + (r->d[2] << (32 - n));\n+    r->d[2] = (r->d[2] >> n) + (r->d[3] << (32 - n));\n+    r->d[3] = (r->d[3] >> n) + (r->d[4] << (32 - n));\n+    r->d[4] = (r->d[4] >> n) + (r->d[5] << (32 - n));\n+    r->d[5] = (r->d[5] >> n) + (r->d[6] << (32 - n));\n+    r->d[6] = (r->d[6] >> n) + (r->d[7] << (32 - n));\n+    r->d[7] = (r->d[7] >> n);\n+    return ret;\n+}\n+\n+static void secp256k1_scalar_sqr(secp256k1_scalar *r, const secp256k1_scalar *a) {\n     uint32_t l[16];\n     secp256k1_scalar_sqr_512(l, a);\n     secp256k1_scalar_reduce_512(r, l);\n }\n \n #ifdef USE_ENDOMORPHISM\n-static void secp256k1_scalar_split_128(secp256k1_scalar_t *r1, secp256k1_scalar_t *r2, const secp256k1_scalar_t *a) {\n+static void secp256k1_scalar_split_128(secp256k1_scalar *r1, secp256k1_scalar *r2, const secp256k1_scalar *a) {\n     r1->d[0] = a->d[0];\n     r1->d[1] = a->d[1];\n     r1->d[2] = a->d[2];\n@@ -651,11 +693,11 @@ static void secp256k1_scalar_split_128(secp256k1_scalar_t *r1, secp256k1_scalar_\n }\n #endif\n \n-SECP256K1_INLINE static int secp256k1_scalar_eq(const secp256k1_scalar_t *a, const secp256k1_scalar_t *b) {\n+SECP256K1_INLINE static int secp256k1_scalar_eq(const secp256k1_scalar *a, const secp256k1_scalar *b) {\n     return ((a->d[0] ^ b->d[0]) | (a->d[1] ^ b->d[1]) | (a->d[2] ^ b->d[2]) | (a->d[3] ^ b->d[3]) | (a->d[4] ^ b->d[4]) | (a->d[5] ^ b->d[5]) | (a->d[6] ^ b->d[6]) | (a->d[7] ^ b->d[7])) == 0;\n }\n \n-SECP256K1_INLINE static void secp256k1_scalar_mul_shift_var(secp256k1_scalar_t *r, const secp256k1_scalar_t *a, const secp256k1_scalar_t *b, unsigned int shift) {\n+SECP256K1_INLINE static void secp256k1_scalar_mul_shift_var(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b, unsigned int shift) {\n     uint32_t l[16];\n     unsigned int shiftlimbs;\n     unsigned int shiftlow;\n@@ -673,9 +715,7 @@ SECP256K1_INLINE static void secp256k1_scalar_mul_shift_var(secp256k1_scalar_t *\n     r->d[5] = shift < 352 ? (l[5 + shiftlimbs] >> shiftlow | (shift < 320 && shiftlow ? (l[6 + shiftlimbs] << shifthigh) : 0)) : 0;\n     r->d[6] = shift < 320 ? (l[6 + shiftlimbs] >> shiftlow | (shift < 288 && shiftlow ? (l[7 + shiftlimbs] << shifthigh) : 0)) : 0;\n     r->d[7] = shift < 288 ? (l[7 + shiftlimbs] >> shiftlow)  : 0;\n-    if ((l[(shift - 1) >> 5] >> ((shift - 1) & 0x1f)) & 1) {\n-        secp256k1_scalar_add_bit(r, 0);\n-    }\n+    secp256k1_scalar_cadd_bit(r, 0, (l[(shift - 1) >> 5] >> ((shift - 1) & 0x1f)) & 1);\n }\n \n #endif"
      },
      {
        "sha": "88ea97de863e9b7528b3c66e96743703c3006fe5",
        "filename": "src/secp256k1/src/scalar_impl.h",
        "status": "modified",
        "additions": 25,
        "deletions": 15,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/scalar_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/scalar_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar_impl.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -25,14 +25,14 @@\n #endif\n \n #ifndef USE_NUM_NONE\n-static void secp256k1_scalar_get_num(secp256k1_num_t *r, const secp256k1_scalar_t *a) {\n+static void secp256k1_scalar_get_num(secp256k1_num *r, const secp256k1_scalar *a) {\n     unsigned char c[32];\n     secp256k1_scalar_get_b32(c, a);\n     secp256k1_num_set_bin(r, c, 32);\n }\n \n /** secp256k1 curve order, see secp256k1_ecdsa_const_order_as_fe in ecdsa_impl.h */\n-static void secp256k1_scalar_order_get_num(secp256k1_num_t *r) {\n+static void secp256k1_scalar_order_get_num(secp256k1_num *r) {\n     static const unsigned char order[32] = {\n         0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n         0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,\n@@ -43,11 +43,11 @@ static void secp256k1_scalar_order_get_num(secp256k1_num_t *r) {\n }\n #endif\n \n-static void secp256k1_scalar_inverse(secp256k1_scalar_t *r, const secp256k1_scalar_t *x) {\n-    secp256k1_scalar_t *t;\n+static void secp256k1_scalar_inverse(secp256k1_scalar *r, const secp256k1_scalar *x) {\n+    secp256k1_scalar *t;\n     int i;\n     /* First compute x ^ (2^N - 1) for some values of N. */\n-    secp256k1_scalar_t x2, x3, x4, x6, x7, x8, x15, x30, x60, x120, x127;\n+    secp256k1_scalar x2, x3, x4, x6, x7, x8, x15, x30, x60, x120, x127;\n \n     secp256k1_scalar_sqr(&x2,  x);\n     secp256k1_scalar_mul(&x2, &x2,  x);\n@@ -234,18 +234,27 @@ static void secp256k1_scalar_inverse(secp256k1_scalar_t *r, const secp256k1_scal\n     secp256k1_scalar_mul(r, t, &x6); /* 111111 */\n }\n \n-static void secp256k1_scalar_inverse_var(secp256k1_scalar_t *r, const secp256k1_scalar_t *x) {\n+SECP256K1_INLINE static int secp256k1_scalar_is_even(const secp256k1_scalar *a) {\n+    /* d[0] is present and is the lowest word for all representations */\n+    return !(a->d[0] & 1);\n+}\n+\n+static void secp256k1_scalar_inverse_var(secp256k1_scalar *r, const secp256k1_scalar *x) {\n #if defined(USE_SCALAR_INV_BUILTIN)\n     secp256k1_scalar_inverse(r, x);\n #elif defined(USE_SCALAR_INV_NUM)\n     unsigned char b[32];\n-    secp256k1_num_t n, m;\n-    secp256k1_scalar_get_b32(b, x);\n+    secp256k1_num n, m;\n+    secp256k1_scalar t = *x;\n+    secp256k1_scalar_get_b32(b, &t);\n     secp256k1_num_set_bin(&n, b, 32);\n     secp256k1_scalar_order_get_num(&m);\n     secp256k1_num_mod_inverse(&n, &n, &m);\n     secp256k1_num_get_bin(b, 32, &n);\n     secp256k1_scalar_set_b32(r, b, NULL);\n+    /* Verify that the inverse was computed correctly, without GMP code. */\n+    secp256k1_scalar_mul(&t, &t, r);\n+    CHECK(secp256k1_scalar_is_one(&t));\n #else\n #error \"Please select scalar inverse implementation\"\n #endif\n@@ -290,30 +299,31 @@ static void secp256k1_scalar_inverse_var(secp256k1_scalar_t *r, const secp256k1_\n  * The function below splits a in r1 and r2, such that r1 + lambda * r2 == a (mod order).\n  */\n \n-static void secp256k1_scalar_split_lambda_var(secp256k1_scalar_t *r1, secp256k1_scalar_t *r2, const secp256k1_scalar_t *a) {\n-    secp256k1_scalar_t c1, c2;\n-    static const secp256k1_scalar_t minus_lambda = SECP256K1_SCALAR_CONST(\n+static void secp256k1_scalar_split_lambda(secp256k1_scalar *r1, secp256k1_scalar *r2, const secp256k1_scalar *a) {\n+    secp256k1_scalar c1, c2;\n+    static const secp256k1_scalar minus_lambda = SECP256K1_SCALAR_CONST(\n         0xAC9C52B3UL, 0x3FA3CF1FUL, 0x5AD9E3FDUL, 0x77ED9BA4UL,\n         0xA880B9FCUL, 0x8EC739C2UL, 0xE0CFC810UL, 0xB51283CFUL\n     );\n-    static const secp256k1_scalar_t minus_b1 = SECP256K1_SCALAR_CONST(\n+    static const secp256k1_scalar minus_b1 = SECP256K1_SCALAR_CONST(\n         0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n         0xE4437ED6UL, 0x010E8828UL, 0x6F547FA9UL, 0x0ABFE4C3UL\n     );\n-    static const secp256k1_scalar_t minus_b2 = SECP256K1_SCALAR_CONST(\n+    static const secp256k1_scalar minus_b2 = SECP256K1_SCALAR_CONST(\n         0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFEUL,\n         0x8A280AC5UL, 0x0774346DUL, 0xD765CDA8UL, 0x3DB1562CUL\n     );\n-    static const secp256k1_scalar_t g1 = SECP256K1_SCALAR_CONST(\n+    static const secp256k1_scalar g1 = SECP256K1_SCALAR_CONST(\n         0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00003086UL,\n         0xD221A7D4UL, 0x6BCDE86CUL, 0x90E49284UL, 0xEB153DABUL\n     );\n-    static const secp256k1_scalar_t g2 = SECP256K1_SCALAR_CONST(\n+    static const secp256k1_scalar g2 = SECP256K1_SCALAR_CONST(\n         0x00000000UL, 0x00000000UL, 0x00000000UL, 0x0000E443UL,\n         0x7ED6010EUL, 0x88286F54UL, 0x7FA90ABFUL, 0xE4C42212UL\n     );\n     VERIFY_CHECK(r1 != a);\n     VERIFY_CHECK(r2 != a);\n+    /* these _var calls are constant time since the shift amount is constant */\n     secp256k1_scalar_mul_shift_var(&c1, a, &g1, 272);\n     secp256k1_scalar_mul_shift_var(&c2, a, &g2, 272);\n     secp256k1_scalar_mul(&c1, &c1, &minus_b1);"
      },
      {
        "sha": "62d192baeb388d7254b0196d20e087a4155476a2",
        "filename": "src/secp256k1/src/secp256k1.c",
        "status": "modified",
        "additions": 402,
        "deletions": 253,
        "changes": 655,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/secp256k1.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/secp256k1.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/secp256k1.c?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -14,290 +14,436 @@\n #include \"scalar_impl.h\"\n #include \"group_impl.h\"\n #include \"ecmult_impl.h\"\n+#include \"ecmult_const_impl.h\"\n #include \"ecmult_gen_impl.h\"\n #include \"ecdsa_impl.h\"\n #include \"eckey_impl.h\"\n #include \"hash_impl.h\"\n \n+#define ARG_CHECK(cond) do { \\\n+    if (EXPECT(!(cond), 0)) { \\\n+        secp256k1_callback_call(&ctx->illegal_callback, #cond); \\\n+        return 0; \\\n+    } \\\n+} while(0)\n+\n+static void default_illegal_callback_fn(const char* str, void* data) {\n+    (void)data;\n+    fprintf(stderr, \"[libsecp256k1] illegal argument: %s\\n\", str);\n+    abort();\n+}\n+\n+static const secp256k1_callback default_illegal_callback = {\n+    default_illegal_callback_fn,\n+    NULL\n+};\n+\n+static void default_error_callback_fn(const char* str, void* data) {\n+    (void)data;\n+    fprintf(stderr, \"[libsecp256k1] internal consistency check failed: %s\\n\", str);\n+    abort();\n+}\n+\n+static const secp256k1_callback default_error_callback = {\n+    default_error_callback_fn,\n+    NULL\n+};\n+\n+\n struct secp256k1_context_struct {\n-    secp256k1_ecmult_context_t ecmult_ctx;\n-    secp256k1_ecmult_gen_context_t ecmult_gen_ctx;\n+    secp256k1_ecmult_context ecmult_ctx;\n+    secp256k1_ecmult_gen_context ecmult_gen_ctx;\n+    secp256k1_callback illegal_callback;\n+    secp256k1_callback error_callback;\n };\n \n-secp256k1_context_t* secp256k1_context_create(int flags) {\n-    secp256k1_context_t* ret = (secp256k1_context_t*)checked_malloc(sizeof(secp256k1_context_t));\n+secp256k1_context* secp256k1_context_create(unsigned int flags) {\n+    secp256k1_context* ret = (secp256k1_context*)checked_malloc(&default_error_callback, sizeof(secp256k1_context));\n+    ret->illegal_callback = default_illegal_callback;\n+    ret->error_callback = default_error_callback;\n+\n+    if (EXPECT((flags & SECP256K1_FLAGS_TYPE_MASK) != SECP256K1_FLAGS_TYPE_CONTEXT, 0)) {\n+            secp256k1_callback_call(&ret->illegal_callback,\n+                                    \"Invalid flags\");\n+            free(ret);\n+            return NULL;\n+    }\n \n     secp256k1_ecmult_context_init(&ret->ecmult_ctx);\n     secp256k1_ecmult_gen_context_init(&ret->ecmult_gen_ctx);\n \n-    if (flags & SECP256K1_CONTEXT_SIGN) {\n-        secp256k1_ecmult_gen_context_build(&ret->ecmult_gen_ctx);\n+    if (flags & SECP256K1_FLAGS_BIT_CONTEXT_SIGN) {\n+        secp256k1_ecmult_gen_context_build(&ret->ecmult_gen_ctx, &ret->error_callback);\n     }\n-    if (flags & SECP256K1_CONTEXT_VERIFY) {\n-        secp256k1_ecmult_context_build(&ret->ecmult_ctx);\n+    if (flags & SECP256K1_FLAGS_BIT_CONTEXT_VERIFY) {\n+        secp256k1_ecmult_context_build(&ret->ecmult_ctx, &ret->error_callback);\n     }\n \n     return ret;\n }\n \n-secp256k1_context_t* secp256k1_context_clone(const secp256k1_context_t* ctx) {\n-    secp256k1_context_t* ret = (secp256k1_context_t*)checked_malloc(sizeof(secp256k1_context_t));\n-    secp256k1_ecmult_context_clone(&ret->ecmult_ctx, &ctx->ecmult_ctx);\n-    secp256k1_ecmult_gen_context_clone(&ret->ecmult_gen_ctx, &ctx->ecmult_gen_ctx);\n+secp256k1_context* secp256k1_context_clone(const secp256k1_context* ctx) {\n+    secp256k1_context* ret = (secp256k1_context*)checked_malloc(&ctx->error_callback, sizeof(secp256k1_context));\n+    ret->illegal_callback = ctx->illegal_callback;\n+    ret->error_callback = ctx->error_callback;\n+    secp256k1_ecmult_context_clone(&ret->ecmult_ctx, &ctx->ecmult_ctx, &ctx->error_callback);\n+    secp256k1_ecmult_gen_context_clone(&ret->ecmult_gen_ctx, &ctx->ecmult_gen_ctx, &ctx->error_callback);\n     return ret;\n }\n \n-void secp256k1_context_destroy(secp256k1_context_t* ctx) {\n-    secp256k1_ecmult_context_clear(&ctx->ecmult_ctx);\n-    secp256k1_ecmult_gen_context_clear(&ctx->ecmult_gen_ctx);\n+void secp256k1_context_destroy(secp256k1_context* ctx) {\n+    if (ctx != NULL) {\n+        secp256k1_ecmult_context_clear(&ctx->ecmult_ctx);\n+        secp256k1_ecmult_gen_context_clear(&ctx->ecmult_gen_ctx);\n \n-    free(ctx);\n+        free(ctx);\n+    }\n }\n \n-int secp256k1_ecdsa_verify(const secp256k1_context_t* ctx, const unsigned char *msg32, const unsigned char *sig, int siglen, const unsigned char *pubkey, int pubkeylen) {\n-    secp256k1_ge_t q;\n-    secp256k1_ecdsa_sig_t s;\n-    secp256k1_scalar_t m;\n-    int ret = -3;\n-    DEBUG_CHECK(ctx != NULL);\n-    DEBUG_CHECK(secp256k1_ecmult_context_is_built(&ctx->ecmult_ctx));\n-    DEBUG_CHECK(msg32 != NULL);\n-    DEBUG_CHECK(sig != NULL);\n-    DEBUG_CHECK(pubkey != NULL);\n+void secp256k1_context_set_illegal_callback(secp256k1_context* ctx, void (*fun)(const char* message, void* data), const void* data) {\n+    if (fun == NULL) {\n+        fun = default_illegal_callback_fn;\n+    }\n+    ctx->illegal_callback.fn = fun;\n+    ctx->illegal_callback.data = data;\n+}\n \n-    secp256k1_scalar_set_b32(&m, msg32, NULL);\n+void secp256k1_context_set_error_callback(secp256k1_context* ctx, void (*fun)(const char* message, void* data), const void* data) {\n+    if (fun == NULL) {\n+        fun = default_error_callback_fn;\n+    }\n+    ctx->error_callback.fn = fun;\n+    ctx->error_callback.data = data;\n+}\n \n-    if (secp256k1_eckey_pubkey_parse(&q, pubkey, pubkeylen)) {\n-        if (secp256k1_ecdsa_sig_parse(&s, sig, siglen)) {\n-            if (secp256k1_ecdsa_sig_verify(&ctx->ecmult_ctx, &s, &q, &m)) {\n-                /* success is 1, all other values are fail */\n-                ret = 1;\n-            } else {\n-                ret = 0;\n-            }\n-        } else {\n-            ret = -2;\n-        }\n+static int secp256k1_pubkey_load(const secp256k1_context* ctx, secp256k1_ge* ge, const secp256k1_pubkey* pubkey) {\n+    if (sizeof(secp256k1_ge_storage) == 64) {\n+        /* When the secp256k1_ge_storage type is exactly 64 byte, use its\n+         * representation inside secp256k1_pubkey, as conversion is very fast.\n+         * Note that secp256k1_pubkey_save must use the same representation. */\n+        secp256k1_ge_storage s;\n+        memcpy(&s, &pubkey->data[0], 64);\n+        secp256k1_ge_from_storage(ge, &s);\n+    } else {\n+        /* Otherwise, fall back to 32-byte big endian for X and Y. */\n+        secp256k1_fe x, y;\n+        secp256k1_fe_set_b32(&x, pubkey->data);\n+        secp256k1_fe_set_b32(&y, pubkey->data + 32);\n+        secp256k1_ge_set_xy(ge, &x, &y);\n+    }\n+    ARG_CHECK(!secp256k1_fe_is_zero(&ge->x));\n+    return 1;\n+}\n+\n+static void secp256k1_pubkey_save(secp256k1_pubkey* pubkey, secp256k1_ge* ge) {\n+    if (sizeof(secp256k1_ge_storage) == 64) {\n+        secp256k1_ge_storage s;\n+        secp256k1_ge_to_storage(&s, ge);\n+        memcpy(&pubkey->data[0], &s, 64);\n     } else {\n-        ret = -1;\n+        VERIFY_CHECK(!secp256k1_ge_is_infinity(ge));\n+        secp256k1_fe_normalize_var(&ge->x);\n+        secp256k1_fe_normalize_var(&ge->y);\n+        secp256k1_fe_get_b32(pubkey->data, &ge->x);\n+        secp256k1_fe_get_b32(pubkey->data + 32, &ge->y);\n     }\n+}\n+\n+int secp256k1_ec_pubkey_parse(const secp256k1_context* ctx, secp256k1_pubkey* pubkey, const unsigned char *input, size_t inputlen) {\n+    secp256k1_ge Q;\n+\n+    (void)ctx;\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(pubkey != NULL);\n+    memset(pubkey, 0, sizeof(*pubkey));\n+    ARG_CHECK(input != NULL);\n+    if (!secp256k1_eckey_pubkey_parse(&Q, input, inputlen)) {\n+        return 0;\n+    }\n+    secp256k1_pubkey_save(pubkey, &Q);\n+    secp256k1_ge_clear(&Q);\n+    return 1;\n+}\n+\n+int secp256k1_ec_pubkey_serialize(const secp256k1_context* ctx, unsigned char *output, size_t *outputlen, const secp256k1_pubkey* pubkey, unsigned int flags) {\n+    secp256k1_ge Q;\n+    size_t len;\n+    int ret = 0;\n \n+    (void)ctx;\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(outputlen != NULL);\n+    ARG_CHECK(*outputlen >= ((flags & SECP256K1_FLAGS_BIT_COMPRESSION) ? 33 : 65));\n+    len = *outputlen;\n+    *outputlen = 0;\n+    ARG_CHECK(output != NULL);\n+    memset(output, 0, len);\n+    ARG_CHECK(pubkey != NULL);\n+    ARG_CHECK((flags & SECP256K1_FLAGS_TYPE_MASK) == SECP256K1_FLAGS_TYPE_COMPRESSION);\n+    if (secp256k1_pubkey_load(ctx, &Q, pubkey)) {\n+        ret = secp256k1_eckey_pubkey_serialize(&Q, output, &len, flags & SECP256K1_FLAGS_BIT_COMPRESSION);\n+        if (ret) {\n+            *outputlen = len;\n+        }\n+    }\n     return ret;\n }\n \n-static int nonce_function_rfc6979(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, unsigned int counter, const void *data) {\n-   secp256k1_rfc6979_hmac_sha256_t rng;\n-   unsigned int i;\n-   secp256k1_rfc6979_hmac_sha256_initialize(&rng, key32, 32, msg32, 32, (const unsigned char*)data, data != NULL ? 32 : 0);\n-   for (i = 0; i <= counter; i++) {\n-       secp256k1_rfc6979_hmac_sha256_generate(&rng, nonce32, 32);\n-   }\n-   secp256k1_rfc6979_hmac_sha256_finalize(&rng);\n-   return 1;\n+static void secp256k1_ecdsa_signature_load(const secp256k1_context* ctx, secp256k1_scalar* r, secp256k1_scalar* s, const secp256k1_ecdsa_signature* sig) {\n+    (void)ctx;\n+    if (sizeof(secp256k1_scalar) == 32) {\n+        /* When the secp256k1_scalar type is exactly 32 byte, use its\n+         * representation inside secp256k1_ecdsa_signature, as conversion is very fast.\n+         * Note that secp256k1_ecdsa_signature_save must use the same representation. */\n+        memcpy(r, &sig->data[0], 32);\n+        memcpy(s, &sig->data[32], 32);\n+    } else {\n+        secp256k1_scalar_set_b32(r, &sig->data[0], NULL);\n+        secp256k1_scalar_set_b32(s, &sig->data[32], NULL);\n+    }\n }\n \n-const secp256k1_nonce_function_t secp256k1_nonce_function_rfc6979 = nonce_function_rfc6979;\n-const secp256k1_nonce_function_t secp256k1_nonce_function_default = nonce_function_rfc6979;\n+static void secp256k1_ecdsa_signature_save(secp256k1_ecdsa_signature* sig, const secp256k1_scalar* r, const secp256k1_scalar* s) {\n+    if (sizeof(secp256k1_scalar) == 32) {\n+        memcpy(&sig->data[0], r, 32);\n+        memcpy(&sig->data[32], s, 32);\n+    } else {\n+        secp256k1_scalar_get_b32(&sig->data[0], r);\n+        secp256k1_scalar_get_b32(&sig->data[32], s);\n+    }\n+}\n \n-int secp256k1_ecdsa_sign(const secp256k1_context_t* ctx, const unsigned char *msg32, unsigned char *signature, int *signaturelen, const unsigned char *seckey, secp256k1_nonce_function_t noncefp, const void* noncedata) {\n-    secp256k1_ecdsa_sig_t sig;\n-    secp256k1_scalar_t sec, non, msg;\n-    int ret = 0;\n+int secp256k1_ecdsa_signature_parse_der(const secp256k1_context* ctx, secp256k1_ecdsa_signature* sig, const unsigned char *input, size_t inputlen) {\n+    secp256k1_scalar r, s;\n+\n+    (void)ctx;\n+    ARG_CHECK(sig != NULL);\n+    ARG_CHECK(input != NULL);\n+\n+    if (secp256k1_ecdsa_sig_parse(&r, &s, input, inputlen)) {\n+        secp256k1_ecdsa_signature_save(sig, &r, &s);\n+        return 1;\n+    } else {\n+        memset(sig, 0, sizeof(*sig));\n+        return 0;\n+    }\n+}\n+\n+int secp256k1_ecdsa_signature_parse_compact(const secp256k1_context* ctx, secp256k1_ecdsa_signature* sig, const unsigned char *input64) {\n+    secp256k1_scalar r, s;\n+    int ret = 1;\n     int overflow = 0;\n-    unsigned int count = 0;\n-    DEBUG_CHECK(ctx != NULL);\n-    DEBUG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n-    DEBUG_CHECK(msg32 != NULL);\n-    DEBUG_CHECK(signature != NULL);\n-    DEBUG_CHECK(signaturelen != NULL);\n-    DEBUG_CHECK(seckey != NULL);\n-    if (noncefp == NULL) {\n-        noncefp = secp256k1_nonce_function_default;\n+\n+    (void)ctx;\n+    ARG_CHECK(sig != NULL);\n+    ARG_CHECK(input64 != NULL);\n+\n+    secp256k1_scalar_set_b32(&r, &input64[0], &overflow);\n+    ret &= !overflow;\n+    secp256k1_scalar_set_b32(&s, &input64[32], &overflow);\n+    ret &= !overflow;\n+    if (ret) {\n+        secp256k1_ecdsa_signature_save(sig, &r, &s);\n+    } else {\n+        memset(sig, 0, sizeof(*sig));\n     }\n+    return ret;\n+}\n \n-    secp256k1_scalar_set_b32(&sec, seckey, &overflow);\n-    /* Fail if the secret key is invalid. */\n-    if (!overflow && !secp256k1_scalar_is_zero(&sec)) {\n-        secp256k1_scalar_set_b32(&msg, msg32, NULL);\n-        while (1) {\n-            unsigned char nonce32[32];\n-            ret = noncefp(nonce32, msg32, seckey, count, noncedata);\n-            if (!ret) {\n-                break;\n-            }\n-            secp256k1_scalar_set_b32(&non, nonce32, &overflow);\n-            memset(nonce32, 0, 32);\n-            if (!secp256k1_scalar_is_zero(&non) && !overflow) {\n-                if (secp256k1_ecdsa_sig_sign(&ctx->ecmult_gen_ctx, &sig, &sec, &msg, &non, NULL)) {\n-                    break;\n-                }\n-            }\n-            count++;\n-        }\n+int secp256k1_ecdsa_signature_serialize_der(const secp256k1_context* ctx, unsigned char *output, size_t *outputlen, const secp256k1_ecdsa_signature* sig) {\n+    secp256k1_scalar r, s;\n+\n+    (void)ctx;\n+    ARG_CHECK(output != NULL);\n+    ARG_CHECK(outputlen != NULL);\n+    ARG_CHECK(sig != NULL);\n+\n+    secp256k1_ecdsa_signature_load(ctx, &r, &s, sig);\n+    return secp256k1_ecdsa_sig_serialize(output, outputlen, &r, &s);\n+}\n+\n+int secp256k1_ecdsa_signature_serialize_compact(const secp256k1_context* ctx, unsigned char *output64, const secp256k1_ecdsa_signature* sig) {\n+    secp256k1_scalar r, s;\n+\n+    (void)ctx;\n+    ARG_CHECK(output64 != NULL);\n+    ARG_CHECK(sig != NULL);\n+\n+    secp256k1_ecdsa_signature_load(ctx, &r, &s, sig);\n+    secp256k1_scalar_get_b32(&output64[0], &r);\n+    secp256k1_scalar_get_b32(&output64[32], &s);\n+    return 1;\n+}\n+\n+int secp256k1_ecdsa_signature_normalize(const secp256k1_context* ctx, secp256k1_ecdsa_signature *sigout, const secp256k1_ecdsa_signature *sigin) {\n+    secp256k1_scalar r, s;\n+    int ret = 0;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(sigin != NULL);\n+\n+    secp256k1_ecdsa_signature_load(ctx, &r, &s, sigin);\n+    ret = secp256k1_scalar_is_high(&s);\n+    if (sigout != NULL) {\n         if (ret) {\n-            ret = secp256k1_ecdsa_sig_serialize(signature, signaturelen, &sig);\n+            secp256k1_scalar_negate(&s, &s);\n         }\n-        secp256k1_scalar_clear(&msg);\n-        secp256k1_scalar_clear(&non);\n-        secp256k1_scalar_clear(&sec);\n-    }\n-    if (!ret) {\n-        *signaturelen = 0;\n+        secp256k1_ecdsa_signature_save(sigout, &r, &s);\n     }\n+\n     return ret;\n }\n \n-int secp256k1_ecdsa_sign_compact(const secp256k1_context_t* ctx, const unsigned char *msg32, unsigned char *sig64, const unsigned char *seckey, secp256k1_nonce_function_t noncefp, const void* noncedata, int *recid) {\n-    secp256k1_ecdsa_sig_t sig;\n-    secp256k1_scalar_t sec, non, msg;\n+int secp256k1_ecdsa_verify(const secp256k1_context* ctx, const secp256k1_ecdsa_signature *sig, const unsigned char *msg32, const secp256k1_pubkey *pubkey) {\n+    secp256k1_ge q;\n+    secp256k1_scalar r, s;\n+    secp256k1_scalar m;\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_context_is_built(&ctx->ecmult_ctx));\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(sig != NULL);\n+    ARG_CHECK(pubkey != NULL);\n+\n+    secp256k1_scalar_set_b32(&m, msg32, NULL);\n+    secp256k1_ecdsa_signature_load(ctx, &r, &s, sig);\n+    return (!secp256k1_scalar_is_high(&s) &&\n+            secp256k1_pubkey_load(ctx, &q, pubkey) &&\n+            secp256k1_ecdsa_sig_verify(&ctx->ecmult_ctx, &r, &s, &q, &m));\n+}\n+\n+static int nonce_function_rfc6979(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, const unsigned char *algo16, void *data, unsigned int counter) {\n+   unsigned char keydata[112];\n+   int keylen = 64;\n+   secp256k1_rfc6979_hmac_sha256_t rng;\n+   unsigned int i;\n+   /* We feed a byte array to the PRNG as input, consisting of:\n+    * - the private key (32 bytes) and message (32 bytes), see RFC 6979 3.2d.\n+    * - optionally 32 extra bytes of data, see RFC 6979 3.6 Additional Data.\n+    * - optionally 16 extra bytes with the algorithm name.\n+    * Because the arguments have distinct fixed lengths it is not possible for\n+    *  different argument mixtures to emulate each other and result in the same\n+    *  nonces.\n+    */\n+   memcpy(keydata, key32, 32);\n+   memcpy(keydata + 32, msg32, 32);\n+   if (data != NULL) {\n+       memcpy(keydata + 64, data, 32);\n+       keylen = 96;\n+   }\n+   if (algo16 != NULL) {\n+       memcpy(keydata + keylen, algo16, 16);\n+       keylen += 16;\n+   }\n+   secp256k1_rfc6979_hmac_sha256_initialize(&rng, keydata, keylen);\n+   memset(keydata, 0, sizeof(keydata));\n+   for (i = 0; i <= counter; i++) {\n+       secp256k1_rfc6979_hmac_sha256_generate(&rng, nonce32, 32);\n+   }\n+   secp256k1_rfc6979_hmac_sha256_finalize(&rng);\n+   return 1;\n+}\n+\n+const secp256k1_nonce_function secp256k1_nonce_function_rfc6979 = nonce_function_rfc6979;\n+const secp256k1_nonce_function secp256k1_nonce_function_default = nonce_function_rfc6979;\n+\n+int secp256k1_ecdsa_sign(const secp256k1_context* ctx, secp256k1_ecdsa_signature *signature, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, const void* noncedata) {\n+    secp256k1_scalar r, s;\n+    secp256k1_scalar sec, non, msg;\n     int ret = 0;\n     int overflow = 0;\n-    unsigned int count = 0;\n-    DEBUG_CHECK(ctx != NULL);\n-    DEBUG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n-    DEBUG_CHECK(msg32 != NULL);\n-    DEBUG_CHECK(sig64 != NULL);\n-    DEBUG_CHECK(seckey != NULL);\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(signature != NULL);\n+    ARG_CHECK(seckey != NULL);\n     if (noncefp == NULL) {\n         noncefp = secp256k1_nonce_function_default;\n     }\n \n     secp256k1_scalar_set_b32(&sec, seckey, &overflow);\n     /* Fail if the secret key is invalid. */\n     if (!overflow && !secp256k1_scalar_is_zero(&sec)) {\n+        unsigned int count = 0;\n         secp256k1_scalar_set_b32(&msg, msg32, NULL);\n         while (1) {\n             unsigned char nonce32[32];\n-            ret = noncefp(nonce32, msg32, seckey, count, noncedata);\n+            ret = noncefp(nonce32, msg32, seckey, NULL, (void*)noncedata, count);\n             if (!ret) {\n                 break;\n             }\n             secp256k1_scalar_set_b32(&non, nonce32, &overflow);\n             memset(nonce32, 0, 32);\n-            if (!secp256k1_scalar_is_zero(&non) && !overflow) {\n-                if (secp256k1_ecdsa_sig_sign(&ctx->ecmult_gen_ctx, &sig, &sec, &msg, &non, recid)) {\n+            if (!overflow && !secp256k1_scalar_is_zero(&non)) {\n+                if (secp256k1_ecdsa_sig_sign(&ctx->ecmult_gen_ctx, &r, &s, &sec, &msg, &non, NULL)) {\n                     break;\n                 }\n             }\n             count++;\n         }\n-        if (ret) {\n-            secp256k1_scalar_get_b32(sig64, &sig.r);\n-            secp256k1_scalar_get_b32(sig64 + 32, &sig.s);\n-        }\n         secp256k1_scalar_clear(&msg);\n         secp256k1_scalar_clear(&non);\n         secp256k1_scalar_clear(&sec);\n     }\n-    if (!ret) {\n-        memset(sig64, 0, 64);\n-    }\n-    return ret;\n-}\n-\n-int secp256k1_ecdsa_recover_compact(const secp256k1_context_t* ctx, const unsigned char *msg32, const unsigned char *sig64, unsigned char *pubkey, int *pubkeylen, int compressed, int recid) {\n-    secp256k1_ge_t q;\n-    secp256k1_ecdsa_sig_t sig;\n-    secp256k1_scalar_t m;\n-    int ret = 0;\n-    int overflow = 0;\n-    DEBUG_CHECK(ctx != NULL);\n-    DEBUG_CHECK(secp256k1_ecmult_context_is_built(&ctx->ecmult_ctx));\n-    DEBUG_CHECK(msg32 != NULL);\n-    DEBUG_CHECK(sig64 != NULL);\n-    DEBUG_CHECK(pubkey != NULL);\n-    DEBUG_CHECK(pubkeylen != NULL);\n-    DEBUG_CHECK(recid >= 0 && recid <= 3);\n-\n-    secp256k1_scalar_set_b32(&sig.r, sig64, &overflow);\n-    if (!overflow) {\n-        secp256k1_scalar_set_b32(&sig.s, sig64 + 32, &overflow);\n-        if (!overflow) {\n-            secp256k1_scalar_set_b32(&m, msg32, NULL);\n-\n-            if (secp256k1_ecdsa_sig_recover(&ctx->ecmult_ctx, &sig, &q, &m, recid)) {\n-                ret = secp256k1_eckey_pubkey_serialize(&q, pubkey, pubkeylen, compressed);\n-            }\n-        }\n+    if (ret) {\n+        secp256k1_ecdsa_signature_save(signature, &r, &s);\n+    } else {\n+        memset(signature, 0, sizeof(*signature));\n     }\n     return ret;\n }\n \n-int secp256k1_ec_seckey_verify(const secp256k1_context_t* ctx, const unsigned char *seckey) {\n-    secp256k1_scalar_t sec;\n+int secp256k1_ec_seckey_verify(const secp256k1_context* ctx, const unsigned char *seckey) {\n+    secp256k1_scalar sec;\n     int ret;\n     int overflow;\n-    DEBUG_CHECK(ctx != NULL);\n-    DEBUG_CHECK(seckey != NULL);\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(seckey != NULL);\n     (void)ctx;\n \n     secp256k1_scalar_set_b32(&sec, seckey, &overflow);\n-    ret = !secp256k1_scalar_is_zero(&sec) && !overflow;\n+    ret = !overflow && !secp256k1_scalar_is_zero(&sec);\n     secp256k1_scalar_clear(&sec);\n     return ret;\n }\n \n-int secp256k1_ec_pubkey_verify(const secp256k1_context_t* ctx, const unsigned char *pubkey, int pubkeylen) {\n-    secp256k1_ge_t q;\n-    DEBUG_CHECK(ctx != NULL);\n-    DEBUG_CHECK(pubkey != NULL);\n-    (void)ctx;\n-\n-    return secp256k1_eckey_pubkey_parse(&q, pubkey, pubkeylen);\n-}\n-\n-int secp256k1_ec_pubkey_create(const secp256k1_context_t* ctx, unsigned char *pubkey, int *pubkeylen, const unsigned char *seckey, int compressed) {\n-    secp256k1_gej_t pj;\n-    secp256k1_ge_t p;\n-    secp256k1_scalar_t sec;\n+int secp256k1_ec_pubkey_create(const secp256k1_context* ctx, secp256k1_pubkey *pubkey, const unsigned char *seckey) {\n+    secp256k1_gej pj;\n+    secp256k1_ge p;\n+    secp256k1_scalar sec;\n     int overflow;\n     int ret = 0;\n-    DEBUG_CHECK(ctx != NULL);\n-    DEBUG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n-    DEBUG_CHECK(pubkey != NULL);\n-    DEBUG_CHECK(pubkeylen != NULL);\n-    DEBUG_CHECK(seckey != NULL);\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(pubkey != NULL);\n+    memset(pubkey, 0, sizeof(*pubkey));\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(seckey != NULL);\n \n     secp256k1_scalar_set_b32(&sec, seckey, &overflow);\n-    if (!overflow) {\n+    ret = (!overflow) & (!secp256k1_scalar_is_zero(&sec));\n+    if (ret) {\n         secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &pj, &sec);\n-        secp256k1_scalar_clear(&sec);\n         secp256k1_ge_set_gej(&p, &pj);\n-        ret = secp256k1_eckey_pubkey_serialize(&p, pubkey, pubkeylen, compressed);\n-    }\n-    if (!ret) {\n-        *pubkeylen = 0;\n-    }\n-    return ret;\n-}\n-\n-int secp256k1_ec_pubkey_decompress(const secp256k1_context_t* ctx, unsigned char *pubkey, int *pubkeylen) {\n-    secp256k1_ge_t p;\n-    int ret = 0;\n-    DEBUG_CHECK(pubkey != NULL);\n-    DEBUG_CHECK(pubkeylen != NULL);\n-    (void)ctx;\n-\n-    if (secp256k1_eckey_pubkey_parse(&p, pubkey, *pubkeylen)) {\n-        ret = secp256k1_eckey_pubkey_serialize(&p, pubkey, pubkeylen, 0);\n+        secp256k1_pubkey_save(pubkey, &p);\n     }\n+    secp256k1_scalar_clear(&sec);\n     return ret;\n }\n \n-int secp256k1_ec_privkey_tweak_add(const secp256k1_context_t* ctx, unsigned char *seckey, const unsigned char *tweak) {\n-    secp256k1_scalar_t term;\n-    secp256k1_scalar_t sec;\n+int secp256k1_ec_privkey_tweak_add(const secp256k1_context* ctx, unsigned char *seckey, const unsigned char *tweak) {\n+    secp256k1_scalar term;\n+    secp256k1_scalar sec;\n     int ret = 0;\n     int overflow = 0;\n-    DEBUG_CHECK(ctx != NULL);\n-    DEBUG_CHECK(seckey != NULL);\n-    DEBUG_CHECK(tweak != NULL);\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(seckey != NULL);\n+    ARG_CHECK(tweak != NULL);\n     (void)ctx;\n \n     secp256k1_scalar_set_b32(&term, tweak, &overflow);\n     secp256k1_scalar_set_b32(&sec, seckey, NULL);\n \n-    ret = secp256k1_eckey_privkey_tweak_add(&sec, &term) && !overflow;\n+    ret = !overflow && secp256k1_eckey_privkey_tweak_add(&sec, &term);\n+    memset(seckey, 0, 32);\n     if (ret) {\n         secp256k1_scalar_get_b32(seckey, &sec);\n     }\n@@ -307,45 +453,44 @@ int secp256k1_ec_privkey_tweak_add(const secp256k1_context_t* ctx, unsigned char\n     return ret;\n }\n \n-int secp256k1_ec_pubkey_tweak_add(const secp256k1_context_t* ctx, unsigned char *pubkey, int pubkeylen, const unsigned char *tweak) {\n-    secp256k1_ge_t p;\n-    secp256k1_scalar_t term;\n+int secp256k1_ec_pubkey_tweak_add(const secp256k1_context* ctx, secp256k1_pubkey *pubkey, const unsigned char *tweak) {\n+    secp256k1_ge p;\n+    secp256k1_scalar term;\n     int ret = 0;\n     int overflow = 0;\n-    DEBUG_CHECK(ctx != NULL);\n-    DEBUG_CHECK(secp256k1_ecmult_context_is_built(&ctx->ecmult_ctx));\n-    DEBUG_CHECK(pubkey != NULL);\n-    DEBUG_CHECK(tweak != NULL);\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_context_is_built(&ctx->ecmult_ctx));\n+    ARG_CHECK(pubkey != NULL);\n+    ARG_CHECK(tweak != NULL);\n \n     secp256k1_scalar_set_b32(&term, tweak, &overflow);\n-    if (!overflow) {\n-        ret = secp256k1_eckey_pubkey_parse(&p, pubkey, pubkeylen);\n-        if (ret) {\n-            ret = secp256k1_eckey_pubkey_tweak_add(&ctx->ecmult_ctx, &p, &term);\n-        }\n-        if (ret) {\n-            int oldlen = pubkeylen;\n-            ret = secp256k1_eckey_pubkey_serialize(&p, pubkey, &pubkeylen, oldlen <= 33);\n-            VERIFY_CHECK(pubkeylen == oldlen);\n+    ret = !overflow && secp256k1_pubkey_load(ctx, &p, pubkey);\n+    memset(pubkey, 0, sizeof(*pubkey));\n+    if (ret) {\n+        if (secp256k1_eckey_pubkey_tweak_add(&ctx->ecmult_ctx, &p, &term)) {\n+            secp256k1_pubkey_save(pubkey, &p);\n+        } else {\n+            ret = 0;\n         }\n     }\n \n     return ret;\n }\n \n-int secp256k1_ec_privkey_tweak_mul(const secp256k1_context_t* ctx, unsigned char *seckey, const unsigned char *tweak) {\n-    secp256k1_scalar_t factor;\n-    secp256k1_scalar_t sec;\n+int secp256k1_ec_privkey_tweak_mul(const secp256k1_context* ctx, unsigned char *seckey, const unsigned char *tweak) {\n+    secp256k1_scalar factor;\n+    secp256k1_scalar sec;\n     int ret = 0;\n     int overflow = 0;\n-    DEBUG_CHECK(ctx != NULL);\n-    DEBUG_CHECK(seckey != NULL);\n-    DEBUG_CHECK(tweak != NULL);\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(seckey != NULL);\n+    ARG_CHECK(tweak != NULL);\n     (void)ctx;\n \n     secp256k1_scalar_set_b32(&factor, tweak, &overflow);\n     secp256k1_scalar_set_b32(&sec, seckey, NULL);\n-    ret = secp256k1_eckey_privkey_tweak_mul(&sec, &factor) && !overflow;\n+    ret = !overflow && secp256k1_eckey_privkey_tweak_mul(&sec, &factor);\n+    memset(seckey, 0, 32);\n     if (ret) {\n         secp256k1_scalar_get_b32(seckey, &sec);\n     }\n@@ -355,65 +500,69 @@ int secp256k1_ec_privkey_tweak_mul(const secp256k1_context_t* ctx, unsigned char\n     return ret;\n }\n \n-int secp256k1_ec_pubkey_tweak_mul(const secp256k1_context_t* ctx, unsigned char *pubkey, int pubkeylen, const unsigned char *tweak) {\n-    secp256k1_ge_t p;\n-    secp256k1_scalar_t factor;\n+int secp256k1_ec_pubkey_tweak_mul(const secp256k1_context* ctx, secp256k1_pubkey *pubkey, const unsigned char *tweak) {\n+    secp256k1_ge p;\n+    secp256k1_scalar factor;\n     int ret = 0;\n     int overflow = 0;\n-    DEBUG_CHECK(ctx != NULL);\n-    DEBUG_CHECK(secp256k1_ecmult_context_is_built(&ctx->ecmult_ctx));\n-    DEBUG_CHECK(pubkey != NULL);\n-    DEBUG_CHECK(tweak != NULL);\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_context_is_built(&ctx->ecmult_ctx));\n+    ARG_CHECK(pubkey != NULL);\n+    ARG_CHECK(tweak != NULL);\n \n     secp256k1_scalar_set_b32(&factor, tweak, &overflow);\n-    if (!overflow) {\n-        ret = secp256k1_eckey_pubkey_parse(&p, pubkey, pubkeylen);\n-        if (ret) {\n-            ret = secp256k1_eckey_pubkey_tweak_mul(&ctx->ecmult_ctx, &p, &factor);\n-        }\n-        if (ret) {\n-            int oldlen = pubkeylen;\n-            ret = secp256k1_eckey_pubkey_serialize(&p, pubkey, &pubkeylen, oldlen <= 33);\n-            VERIFY_CHECK(pubkeylen == oldlen);\n+    ret = !overflow && secp256k1_pubkey_load(ctx, &p, pubkey);\n+    memset(pubkey, 0, sizeof(*pubkey));\n+    if (ret) {\n+        if (secp256k1_eckey_pubkey_tweak_mul(&ctx->ecmult_ctx, &p, &factor)) {\n+            secp256k1_pubkey_save(pubkey, &p);\n+        } else {\n+            ret = 0;\n         }\n     }\n \n     return ret;\n }\n \n-int secp256k1_ec_privkey_export(const secp256k1_context_t* ctx, const unsigned char *seckey, unsigned char *privkey, int *privkeylen, int compressed) {\n-    secp256k1_scalar_t key;\n-    int ret = 0;\n-    DEBUG_CHECK(seckey != NULL);\n-    DEBUG_CHECK(privkey != NULL);\n-    DEBUG_CHECK(privkeylen != NULL);\n-    DEBUG_CHECK(ctx != NULL);\n-    DEBUG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n-\n-    secp256k1_scalar_set_b32(&key, seckey, NULL);\n-    ret = secp256k1_eckey_privkey_serialize(&ctx->ecmult_gen_ctx, privkey, privkeylen, &key, compressed);\n-    secp256k1_scalar_clear(&key);\n-    return ret;\n+int secp256k1_context_randomize(secp256k1_context* ctx, const unsigned char *seed32) {\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    secp256k1_ecmult_gen_blind(&ctx->ecmult_gen_ctx, seed32);\n+    return 1;\n }\n \n-int secp256k1_ec_privkey_import(const secp256k1_context_t* ctx, unsigned char *seckey, const unsigned char *privkey, int privkeylen) {\n-    secp256k1_scalar_t key;\n-    int ret = 0;\n-    DEBUG_CHECK(seckey != NULL);\n-    DEBUG_CHECK(privkey != NULL);\n-    (void)ctx;\n+int secp256k1_ec_pubkey_combine(const secp256k1_context* ctx, secp256k1_pubkey *pubnonce, const secp256k1_pubkey * const *pubnonces, size_t n) {\n+    size_t i;\n+    secp256k1_gej Qj;\n+    secp256k1_ge Q;\n \n-    ret = secp256k1_eckey_privkey_parse(&key, privkey, privkeylen);\n-    if (ret) {\n-        secp256k1_scalar_get_b32(seckey, &key);\n-    }\n-    secp256k1_scalar_clear(&key);\n-    return ret;\n-}\n+    ARG_CHECK(pubnonce != NULL);\n+    memset(pubnonce, 0, sizeof(*pubnonce));\n+    ARG_CHECK(n >= 1);\n+    ARG_CHECK(pubnonces != NULL);\n \n-int secp256k1_context_randomize(secp256k1_context_t* ctx, const unsigned char *seed32) {\n-    DEBUG_CHECK(ctx != NULL);\n-    DEBUG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n-    secp256k1_ecmult_gen_blind(&ctx->ecmult_gen_ctx, seed32);\n+    secp256k1_gej_set_infinity(&Qj);\n+\n+    for (i = 0; i < n; i++) {\n+        secp256k1_pubkey_load(ctx, &Q, pubnonces[i]);\n+        secp256k1_gej_add_ge(&Qj, &Qj, &Q);\n+    }\n+    if (secp256k1_gej_is_infinity(&Qj)) {\n+        return 0;\n+    }\n+    secp256k1_ge_set_gej(&Q, &Qj);\n+    secp256k1_pubkey_save(pubnonce, &Q);\n     return 1;\n }\n+\n+#ifdef ENABLE_MODULE_ECDH\n+# include \"modules/ecdh/main_impl.h\"\n+#endif\n+\n+#ifdef ENABLE_MODULE_SCHNORR\n+# include \"modules/schnorr/main_impl.h\"\n+#endif\n+\n+#ifdef ENABLE_MODULE_RECOVERY\n+# include \"modules/recovery/main_impl.h\"\n+#endif"
      },
      {
        "sha": "f8efa93c7c3f3194a16db581927f69fe2d645d40",
        "filename": "src/secp256k1/src/testrand.h",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/testrand.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/testrand.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/testrand.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -16,13 +16,23 @@\n /** Seed the pseudorandom number generator for testing. */\n SECP256K1_INLINE static void secp256k1_rand_seed(const unsigned char *seed16);\n \n-/** Generate a pseudorandom 32-bit number. */\n+/** Generate a pseudorandom number in the range [0..2**32-1]. */\n static uint32_t secp256k1_rand32(void);\n \n+/** Generate a pseudorandom number in the range [0..2**bits-1]. Bits must be 1 or\n+ *  more. */\n+static uint32_t secp256k1_rand_bits(int bits);\n+\n+/** Generate a pseudorandom number in the range [0..range-1]. */\n+static uint32_t secp256k1_rand_int(uint32_t range);\n+\n /** Generate a pseudorandom 32-byte array. */\n static void secp256k1_rand256(unsigned char *b32);\n \n /** Generate a pseudorandom 32-byte array with long sequences of zero and one bits. */\n static void secp256k1_rand256_test(unsigned char *b32);\n \n+/** Generate pseudorandom bytes with long sequences of zero and one bits. */\n+static void secp256k1_rand_bytes_test(unsigned char *bytes, size_t len);\n+\n #endif"
      },
      {
        "sha": "15c7b9f12df05216c762af9c4056f3477516bc43",
        "filename": "src/secp256k1/src/testrand_impl.h",
        "status": "modified",
        "additions": 68,
        "deletions": 18,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/testrand_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/testrand_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/testrand_impl.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -1,5 +1,5 @@\n /**********************************************************************\n- * Copyright (c) 2013, 2014 Pieter Wuille                             *\n+ * Copyright (c) 2013-2015 Pieter Wuille                              *\n  * Distributed under the MIT software license, see the accompanying   *\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n@@ -16,9 +16,11 @@\n static secp256k1_rfc6979_hmac_sha256_t secp256k1_test_rng;\n static uint32_t secp256k1_test_rng_precomputed[8];\n static int secp256k1_test_rng_precomputed_used = 8;\n+static uint64_t secp256k1_test_rng_integer;\n+static int secp256k1_test_rng_integer_bits_left = 0;\n \n SECP256K1_INLINE static void secp256k1_rand_seed(const unsigned char *seed16) {\n-    secp256k1_rfc6979_hmac_sha256_initialize(&secp256k1_test_rng, (const unsigned char*)\"TestRNG\", 7, seed16, 16, NULL, 0);\n+    secp256k1_rfc6979_hmac_sha256_initialize(&secp256k1_test_rng, seed16, 16);\n }\n \n SECP256K1_INLINE static uint32_t secp256k1_rand32(void) {\n@@ -29,32 +31,80 @@ SECP256K1_INLINE static uint32_t secp256k1_rand32(void) {\n     return secp256k1_test_rng_precomputed[secp256k1_test_rng_precomputed_used++];\n }\n \n+static uint32_t secp256k1_rand_bits(int bits) {\n+    uint32_t ret;\n+    if (secp256k1_test_rng_integer_bits_left < bits) {\n+        secp256k1_test_rng_integer |= (((uint64_t)secp256k1_rand32()) << secp256k1_test_rng_integer_bits_left);\n+        secp256k1_test_rng_integer_bits_left += 32;\n+    }\n+    ret = secp256k1_test_rng_integer;\n+    secp256k1_test_rng_integer >>= bits;\n+    secp256k1_test_rng_integer_bits_left -= bits;\n+    ret &= ((~((uint32_t)0)) >> (32 - bits));\n+    return ret;\n+}\n+\n+static uint32_t secp256k1_rand_int(uint32_t range) {\n+    /* We want a uniform integer between 0 and range-1, inclusive.\n+     * B is the smallest number such that range <= 2**B.\n+     * two mechanisms implemented here:\n+     * - generate B bits numbers until one below range is found, and return it\n+     * - find the largest multiple M of range that is <= 2**(B+A), generate B+A\n+     *   bits numbers until one below M is found, and return it modulo range\n+     * The second mechanism consumes A more bits of entropy in every iteration,\n+     * but may need fewer iterations due to M being closer to 2**(B+A) then\n+     * range is to 2**B. The array below (indexed by B) contains a 0 when the\n+     * first mechanism is to be used, and the number A otherwise.\n+     */\n+    static const int addbits[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 1, 0};\n+    uint32_t trange, mult;\n+    int bits = 0;\n+    if (range <= 1) {\n+        return 0;\n+    }\n+    trange = range - 1;\n+    while (trange > 0) {\n+        trange >>= 1;\n+        bits++;\n+    }\n+    if (addbits[bits]) {\n+        bits = bits + addbits[bits];\n+        mult = ((~((uint32_t)0)) >> (32 - bits)) / range;\n+        trange = range * mult;\n+    } else {\n+        trange = range;\n+        mult = 1;\n+    }\n+    while(1) {\n+        uint32_t x = secp256k1_rand_bits(bits);\n+        if (x < trange) {\n+            return (mult == 1) ? x : (x % range);\n+        }\n+    }\n+}\n+\n static void secp256k1_rand256(unsigned char *b32) {\n     secp256k1_rfc6979_hmac_sha256_generate(&secp256k1_test_rng, b32, 32);\n }\n \n-static void secp256k1_rand256_test(unsigned char *b32) {\n-    int bits=0;\n-    uint64_t ent = 0;\n-    int entleft = 0;\n-    memset(b32, 0, 32);\n-    while (bits < 256) {\n+static void secp256k1_rand_bytes_test(unsigned char *bytes, size_t len) {\n+    size_t bits = 0;\n+    memset(bytes, 0, len);\n+    while (bits < len * 8) {\n         int now;\n         uint32_t val;\n-        if (entleft < 12) {\n-            ent |= ((uint64_t)secp256k1_rand32()) << entleft;\n-            entleft += 32;\n-        }\n-        now = 1 + ((ent % 64)*((ent >> 6) % 32)+16)/31;\n-        val = 1 & (ent >> 11);\n-        ent >>= 12;\n-        entleft -= 12;\n-        while (now > 0 && bits < 256) {\n-            b32[bits / 8] |= val << (bits % 8);\n+        now = 1 + (secp256k1_rand_bits(6) * secp256k1_rand_bits(5) + 16) / 31;\n+        val = secp256k1_rand_bits(1);\n+        while (now > 0 && bits < len * 8) {\n+            bytes[bits / 8] |= val << (bits % 8);\n             now--;\n             bits++;\n         }\n     }\n }\n \n+static void secp256k1_rand256_test(unsigned char *b32) {\n+    secp256k1_rand_bytes_test(b32, 32);\n+}\n+\n #endif"
      },
      {
        "sha": "687a5f2fdd80184c3a4cba9bec8603503b085b0d",
        "filename": "src/secp256k1/src/tests.c",
        "status": "modified",
        "additions": 2845,
        "deletions": 545,
        "changes": 3390,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/tests.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/tests.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/tests.c?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d"
      },
      {
        "sha": "4eef4ded47fd332d3d3f0865e8b197b1888c62fa",
        "filename": "src/secp256k1/src/util.h",
        "status": "modified",
        "additions": 16,
        "deletions": 10,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f09b77c7fa50afc19d4458c9dd05219c82a298d/src/secp256k1/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/util.h?ref=4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "patch": "@@ -15,6 +15,15 @@\n #include <stdint.h>\n #include <stdio.h>\n \n+typedef struct {\n+    void (*fn)(const char *text, void* data);\n+    const void* data;\n+} secp256k1_callback;\n+\n+static SECP256K1_INLINE void secp256k1_callback_call(const secp256k1_callback * const cb, const char * const text) {\n+    cb->fn(text, (void*)cb->data);\n+}\n+\n #ifdef DETERMINISTIC\n #define TEST_FAILURE(msg) do { \\\n     fprintf(stderr, \"%s\\n\", msg); \\\n@@ -47,23 +56,20 @@\n } while(0)\n #endif\n \n-/* Like assert(), but safe to use on expressions with side effects. */\n-#ifndef NDEBUG\n-#define DEBUG_CHECK CHECK\n-#else\n-#define DEBUG_CHECK(cond) do { (void)(cond); } while(0)\n-#endif\n-\n-/* Like DEBUG_CHECK(), but when VERIFY is defined instead of NDEBUG not defined. */\n+/* Like assert(), but when VERIFY is defined, and side-effect safe. */\n #ifdef VERIFY\n #define VERIFY_CHECK CHECK\n+#define VERIFY_SETUP(stmt) do { stmt; } while(0)\n #else\n #define VERIFY_CHECK(cond) do { (void)(cond); } while(0)\n+#define VERIFY_SETUP(stmt)\n #endif\n \n-static SECP256K1_INLINE void *checked_malloc(size_t size) {\n+static SECP256K1_INLINE void *checked_malloc(const secp256k1_callback* cb, size_t size) {\n     void *ret = malloc(size);\n-    CHECK(ret != NULL);\n+    if (ret == NULL) {\n+        secp256k1_callback_call(cb, \"Out of memory\");\n+    }\n     return ret;\n }\n "
      }
    ]
  },
  {
    "sha": "114b5812f6283f2325fc31e186b26c6d76f9551a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTRiNTgxMmY2MjgzZjIzMjVmYzMxZTE4NmIyNmM2ZDc2Zjk1NTFh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-10-29T06:11:24Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-13T17:15:20Z"
      },
      "message": "Prevector type",
      "tree": {
        "sha": "6c04a7ee882b7d8a291bb9507ddd5cf17e23f704",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c04a7ee882b7d8a291bb9507ddd5cf17e23f704"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/114b5812f6283f2325fc31e186b26c6d76f9551a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/114b5812f6283f2325fc31e186b26c6d76f9551a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/114b5812f6283f2325fc31e186b26c6d76f9551a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/114b5812f6283f2325fc31e186b26c6d76f9551a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4f09b77c7fa50afc19d4458c9dd05219c82a298d"
      }
    ],
    "stats": {
      "total": 942,
      "additions": 874,
      "deletions": 68
    },
    "files": [
      {
        "sha": "1cec0d4d61fbe2085757b9e6aaffd15533660f98",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/114b5812f6283f2325fc31e186b26c6d76f9551a/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/114b5812f6283f2325fc31e186b26c6d76f9551a/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=114b5812f6283f2325fc31e186b26c6d76f9551a",
        "patch": "@@ -125,6 +125,7 @@ BITCOIN_CORE_H = \\\n   policy/fees.h \\\n   policy/policy.h \\\n   pow.h \\\n+  prevector.h \\\n   primitives/block.h \\\n   primitives/transaction.h \\\n   protocol.h \\"
      },
      {
        "sha": "bc0a26317416c48b2f521d6c1c5d5a3d3f9eeb6d",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/114b5812f6283f2325fc31e186b26c6d76f9551a/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/114b5812f6283f2325fc31e186b26c6d76f9551a/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=114b5812f6283f2325fc31e186b26c6d76f9551a",
        "patch": "@@ -64,6 +64,7 @@ BITCOIN_TESTS =\\\n   test/pmt_tests.cpp \\\n   test/policyestimator_tests.cpp \\\n   test/pow_tests.cpp \\\n+  test/prevector_tests.cpp \\\n   test/reverselock_tests.cpp \\\n   test/rpc_tests.cpp \\\n   test/sanity_tests.cpp \\"
      },
      {
        "sha": "450537d059c20580d6b7e512babdd9d1927cc4a5",
        "filename": "src/core_memusage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/114b5812f6283f2325fc31e186b26c6d76f9551a/src/core_memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/114b5812f6283f2325fc31e186b26c6d76f9551a/src/core_memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_memusage.h?ref=114b5812f6283f2325fc31e186b26c6d76f9551a",
        "patch": "@@ -10,7 +10,7 @@\n #include \"memusage.h\"\n \n static inline size_t RecursiveDynamicUsage(const CScript& script) {\n-    return memusage::DynamicUsage(*static_cast<const std::vector<unsigned char>*>(&script));\n+    return memusage::DynamicUsage(*static_cast<const CScriptBase*>(&script));\n }\n \n static inline size_t RecursiveDynamicUsage(const COutPoint& out) {"
      },
      {
        "sha": "daa92a00970003be2d3e214cccaedd15102125c0",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/114b5812f6283f2325fc31e186b26c6d76f9551a/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/114b5812f6283f2325fc31e186b26c6d76f9551a/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=114b5812f6283f2325fc31e186b26c6d76f9551a",
        "patch": "@@ -8,6 +8,7 @@\n \n #include \"crypto/ripemd160.h\"\n #include \"crypto/sha256.h\"\n+#include \"prevector.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n #include \"version.h\"\n@@ -118,6 +119,13 @@ inline uint160 Hash160(const std::vector<unsigned char>& vch)\n     return Hash160(vch.begin(), vch.end());\n }\n \n+/** Compute the 160-bit hash of a vector. */\n+template<unsigned int N>\n+inline uint160 Hash160(const prevector<N, unsigned char>& vch)\n+{\n+    return Hash160(vch.begin(), vch.end());\n+}\n+\n /** A writer stream (for serialization) that computes a 256-bit hash. */\n class CHashWriter\n {"
      },
      {
        "sha": "49760e64c78cd293a7720f036778a101aed042f9",
        "filename": "src/memusage.h",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/114b5812f6283f2325fc31e186b26c6d76f9551a/src/memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/114b5812f6283f2325fc31e186b26c6d76f9551a/src/memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/memusage.h?ref=114b5812f6283f2325fc31e186b26c6d76f9551a",
        "patch": "@@ -46,7 +46,9 @@ template<typename X> static inline size_t DynamicUsage(const X * const &v) { ret\n static inline size_t MallocUsage(size_t alloc)\n {\n     // Measured on libc6 2.19 on Linux.\n-    if (sizeof(void*) == 8) {\n+    if (alloc == 0) {\n+        return 0;\n+    } else if (sizeof(void*) == 8) {\n         return ((alloc + 31) >> 4) << 4;\n     } else if (sizeof(void*) == 4) {\n         return ((alloc + 15) >> 3) << 3;\n@@ -74,6 +76,12 @@ static inline size_t DynamicUsage(const std::vector<X>& v)\n     return MallocUsage(v.capacity() * sizeof(X));\n }\n \n+template<unsigned int N, typename X, typename S, typename D>\n+static inline size_t DynamicUsage(const prevector<N, X, S, D>& v)\n+{\n+    return MallocUsage(v.allocated_memory());\n+}\n+\n template<typename X, typename Y>\n static inline size_t DynamicUsage(const std::set<X, Y>& s)\n {"
      },
      {
        "sha": "3e80ef5d336458807903451403c9aec463fc90c5",
        "filename": "src/prevector.h",
        "status": "added",
        "additions": 486,
        "deletions": 0,
        "changes": 486,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/114b5812f6283f2325fc31e186b26c6d76f9551a/src/prevector.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/114b5812f6283f2325fc31e186b26c6d76f9551a/src/prevector.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/prevector.h?ref=114b5812f6283f2325fc31e186b26c6d76f9551a",
        "patch": "@@ -0,0 +1,486 @@\n+#ifndef _BITCOIN_PREVECTOR_H_\n+#define _BITCOIN_PREVECTOR_H_\n+\n+#include <stdlib.h>\n+#include <stdint.h>\n+#include <string.h>\n+\n+#include <iterator>\n+\n+#pragma pack(push, 1)\n+/** Implements a drop-in replacement for std::vector<T> which stores up to N\n+ *  elements directly (without heap allocation). The types Size and Diff are\n+ *  used to store element counts, and can be any unsigned + signed type.\n+ *\n+ *  Storage layout is either:\n+ *  - Direct allocation:\n+ *    - Size _size: the number of used elements (between 0 and N)\n+ *    - T direct[N]: an array of N elements of type T\n+ *      (only the first _size are initialized).\n+ *  - Indirect allocation:\n+ *    - Size _size: the number of used elements plus N + 1\n+ *    - Size capacity: the number of allocated elements\n+ *    - T* indirect: a pointer to an array of capacity elements of type T\n+ *      (only the first _size are initialized).\n+ *\n+ *  The data type T must be movable by memmove/realloc(). Once we switch to C++,\n+ *  move constructors can be used instead.\n+ */\n+template<unsigned int N, typename T, typename Size = uint32_t, typename Diff = int32_t>\n+class prevector {\n+public:\n+    typedef Size size_type;\n+    typedef Diff difference_type;\n+    typedef T value_type;\n+    typedef value_type& reference;\n+    typedef const value_type& const_reference;\n+    typedef value_type* pointer;\n+    typedef const value_type* const_pointer;\n+\n+    class iterator {\n+        T* ptr;\n+    public:\n+        typedef Diff difference_type;\n+        typedef T value_type;\n+        typedef T* pointer;\n+        typedef T& reference;\n+        typedef std::random_access_iterator_tag iterator_category;\n+        iterator(T* ptr_) : ptr(ptr_) {}\n+        T& operator*() const { return *ptr; }\n+        T* operator->() const { return ptr; }\n+        T& operator[](size_type pos) { return ptr[pos]; }\n+        const T& operator[](size_type pos) const { return ptr[pos]; }\n+        iterator& operator++() { ptr++; return *this; }\n+        iterator& operator--() { ptr--; return *this; }\n+        iterator operator++(int) { iterator copy(*this); ++(*this); return copy; }\n+        iterator operator--(int) { iterator copy(*this); --(*this); return copy; }\n+        difference_type friend operator-(iterator a, iterator b) { return (&(*a) - &(*b)); }\n+        iterator operator+(size_type n) { return iterator(ptr + n); }\n+        iterator& operator+=(size_type n) { ptr += n; return *this; }\n+        iterator operator-(size_type n) { return iterator(ptr - n); }\n+        iterator& operator-=(size_type n) { ptr -= n; return *this; }\n+        bool operator==(iterator x) const { return ptr == x.ptr; }\n+        bool operator!=(iterator x) const { return ptr != x.ptr; }\n+        bool operator>=(iterator x) const { return ptr >= x.ptr; }\n+        bool operator<=(iterator x) const { return ptr <= x.ptr; }\n+        bool operator>(iterator x) const { return ptr > x.ptr; }\n+        bool operator<(iterator x) const { return ptr < x.ptr; }\n+    };\n+\n+    class reverse_iterator {\n+        T* ptr;\n+    public:\n+        typedef Diff difference_type;\n+        typedef T value_type;\n+        typedef T* pointer;\n+        typedef T& reference;\n+        typedef std::bidirectional_iterator_tag iterator_category;\n+        reverse_iterator(T* ptr_) : ptr(ptr_) {}\n+        T& operator*() { return *ptr; }\n+        const T& operator*() const { return *ptr; }\n+        T* operator->() { return ptr; }\n+        const T* operator->() const { return ptr; }\n+        reverse_iterator& operator--() { ptr++; return *this; }\n+        reverse_iterator& operator++() { ptr--; return *this; }\n+        reverse_iterator operator++(int) { reverse_iterator copy(*this); ++(*this); return copy; }\n+        reverse_iterator operator--(int) { reverse_iterator copy(*this); --(*this); return copy; }\n+        bool operator==(reverse_iterator x) const { return ptr == x.ptr; }\n+        bool operator!=(reverse_iterator x) const { return ptr != x.ptr; }\n+    };\n+\n+    class const_iterator {\n+        const T* ptr;\n+    public:\n+        typedef Diff difference_type;\n+        typedef const T value_type;\n+        typedef const T* pointer;\n+        typedef const T& reference;\n+        typedef std::random_access_iterator_tag iterator_category;\n+        const_iterator(const T* ptr_) : ptr(ptr_) {}\n+        const_iterator(iterator x) : ptr(&(*x)) {}\n+        const T& operator*() const { return *ptr; }\n+        const T* operator->() const { return ptr; }\n+        const T& operator[](size_type pos) const { return ptr[pos]; }\n+        const_iterator& operator++() { ptr++; return *this; }\n+        const_iterator& operator--() { ptr--; return *this; }\n+        const_iterator operator++(int) { const_iterator copy(*this); ++(*this); return copy; }\n+        const_iterator operator--(int) { const_iterator copy(*this); --(*this); return copy; }\n+        difference_type friend operator-(const_iterator a, const_iterator b) { return (&(*a) - &(*b)); }\n+        const_iterator operator+(size_type n) { return const_iterator(ptr + n); }\n+        const_iterator& operator+=(size_type n) { ptr += n; return *this; }\n+        const_iterator operator-(size_type n) { return const_iterator(ptr - n); }\n+        const_iterator& operator-=(size_type n) { ptr -= n; return *this; }\n+        bool operator==(const_iterator x) const { return ptr == x.ptr; }\n+        bool operator!=(const_iterator x) const { return ptr != x.ptr; }\n+        bool operator>=(const_iterator x) const { return ptr >= x.ptr; }\n+        bool operator<=(const_iterator x) const { return ptr <= x.ptr; }\n+        bool operator>(const_iterator x) const { return ptr > x.ptr; }\n+        bool operator<(const_iterator x) const { return ptr < x.ptr; }\n+    };\n+\n+    class const_reverse_iterator {\n+        const T* ptr;\n+    public:\n+        typedef Diff difference_type;\n+        typedef const T value_type;\n+        typedef const T* pointer;\n+        typedef const T& reference;\n+        typedef std::bidirectional_iterator_tag iterator_category;\n+        const_reverse_iterator(T* ptr_) : ptr(ptr_) {}\n+        const_reverse_iterator(reverse_iterator x) : ptr(&(*x)) {}\n+        const T& operator*() const { return *ptr; }\n+        const T* operator->() const { return ptr; }\n+        const_reverse_iterator& operator--() { ptr++; return *this; }\n+        const_reverse_iterator& operator++() { ptr--; return *this; }\n+        const_reverse_iterator operator++(int) { const_reverse_iterator copy(*this); ++(*this); return copy; }\n+        const_reverse_iterator operator--(int) { const_reverse_iterator copy(*this); --(*this); return copy; }\n+        bool operator==(const_reverse_iterator x) const { return ptr == x.ptr; }\n+        bool operator!=(const_reverse_iterator x) const { return ptr != x.ptr; }\n+    };\n+\n+private:\n+    size_type _size;\n+    union {\n+        char direct[sizeof(T) * N];\n+        struct {\n+            size_type capacity;\n+            char* indirect;\n+        };\n+    } _union;\n+\n+    T* direct_ptr(difference_type pos) { return reinterpret_cast<T*>(_union.direct) + pos; }\n+    const T* direct_ptr(difference_type pos) const { return reinterpret_cast<const T*>(_union.direct) + pos; }\n+    T* indirect_ptr(difference_type pos) { return reinterpret_cast<T*>(_union.indirect) + pos; }\n+    const T* indirect_ptr(difference_type pos) const { return reinterpret_cast<const T*>(_union.indirect) + pos; }\n+    bool is_direct() const { return _size <= N; }\n+\n+    void change_capacity(size_type new_capacity) {\n+        if (new_capacity <= N) {\n+            if (!is_direct()) {\n+                T* indirect = indirect_ptr(0);\n+                T* src = indirect;\n+                T* dst = direct_ptr(0);\n+                memcpy(dst, src, size() * sizeof(T));\n+                free(indirect);\n+                _size -= N + 1;\n+            }\n+        } else {\n+            if (!is_direct()) {\n+                _union.indirect = static_cast<char*>(realloc(_union.indirect, ((size_t)sizeof(T)) * new_capacity));\n+                _union.capacity = new_capacity;\n+            } else {\n+                char* new_indirect = static_cast<char*>(malloc(((size_t)sizeof(T)) * new_capacity));\n+                T* src = direct_ptr(0);\n+                T* dst = reinterpret_cast<T*>(new_indirect);\n+                memcpy(dst, src, size() * sizeof(T));\n+                _union.indirect = new_indirect;\n+                _union.capacity = new_capacity;\n+                _size += N + 1;\n+            }\n+        }\n+    }\n+\n+    T* item_ptr(difference_type pos) { return is_direct() ? direct_ptr(pos) : indirect_ptr(pos); }\n+    const T* item_ptr(difference_type pos) const { return is_direct() ? direct_ptr(pos) : indirect_ptr(pos); }\n+\n+public:\n+    void assign(size_type n, const T& val) {\n+        clear();\n+        if (capacity() < n) {\n+            change_capacity(n);\n+        }\n+        while (size() < n) {\n+            _size++;\n+            new(static_cast<void*>(item_ptr(size() - 1))) T(val);\n+        }\n+    }\n+\n+    template<typename InputIterator>\n+    void assign(InputIterator first, InputIterator last) {\n+        size_type n = last - first;\n+        clear();\n+        if (capacity() < n) {\n+            change_capacity(n);\n+        }\n+        while (first != last) {\n+            _size++;\n+            new(static_cast<void*>(item_ptr(size() - 1))) T(*first);\n+            ++first;\n+        }\n+    }\n+\n+    prevector() : _size(0) {}\n+\n+    explicit prevector(size_type n) : _size(0) {\n+        resize(n);\n+    }\n+\n+    explicit prevector(size_type n, const T& val = T()) : _size(0) {\n+        change_capacity(n);\n+        while (size() < n) {\n+            _size++;\n+            new(static_cast<void*>(item_ptr(size() - 1))) T(val);\n+        }\n+    }\n+\n+    template<typename InputIterator>\n+    prevector(InputIterator first, InputIterator last) : _size(0) {\n+        size_type n = last - first;\n+        change_capacity(n);\n+        while (first != last) {\n+            _size++;\n+            new(static_cast<void*>(item_ptr(size() - 1))) T(*first);\n+            ++first;\n+        }\n+    }\n+\n+    prevector(const prevector<N, T, Size, Diff>& other) : _size(0) {\n+        change_capacity(other.size());\n+        const_iterator it = other.begin();\n+        while (it != other.end()) {\n+            _size++;\n+            new(static_cast<void*>(item_ptr(size() - 1))) T(*it);\n+            ++it;\n+        }\n+    }\n+\n+    prevector& operator=(const prevector<N, T, Size, Diff>& other) {\n+        if (&other == this) {\n+            return *this;\n+        }\n+        resize(0);\n+        change_capacity(other.size());\n+        const_iterator it = other.begin();\n+        while (it != other.end()) {\n+            _size++;\n+            new(static_cast<void*>(item_ptr(size() - 1))) T(*it);\n+            ++it;\n+        }\n+        return *this;\n+    }\n+\n+    size_type size() const {\n+        return is_direct() ? _size : _size - N - 1;\n+    }\n+\n+    bool empty() const {\n+        return size() == 0;\n+    }\n+\n+    iterator begin() { return iterator(item_ptr(0)); }\n+    const_iterator begin() const { return const_iterator(item_ptr(0)); }\n+    iterator end() { return iterator(item_ptr(size())); }\n+    const_iterator end() const { return const_iterator(item_ptr(size())); }\n+\n+    reverse_iterator rbegin() { return reverse_iterator(item_ptr(size() - 1)); }\n+    const_reverse_iterator rbegin() const { return const_reverse_iterator(item_ptr(size() - 1)); }\n+    reverse_iterator rend() { return reverse_iterator(item_ptr(-1)); }\n+    const_reverse_iterator rend() const { return const_reverse_iterator(item_ptr(-1)); }\n+\n+    size_t capacity() const {\n+        if (is_direct()) {\n+            return N;\n+        } else {\n+            return _union.capacity;\n+        }\n+    }\n+\n+    T& operator[](size_type pos) {\n+        return *item_ptr(pos);\n+    }\n+\n+    const T& operator[](size_type pos) const {\n+        return *item_ptr(pos);\n+    }\n+\n+    void resize(size_type new_size) {\n+        while (size() > new_size) {\n+            item_ptr(size() - 1)->~T();\n+            _size--;\n+        }\n+        if (new_size > capacity()) {\n+            change_capacity(new_size);\n+        }\n+        while (size() < new_size) {\n+            _size++;\n+            new(static_cast<void*>(item_ptr(size() - 1))) T();\n+        }\n+    }\n+\n+    void reserve(size_type new_capacity) {\n+        if (new_capacity > capacity()) {\n+            change_capacity(new_capacity);\n+        }\n+    }\n+\n+    void shrink_to_fit() {\n+        change_capacity(size());\n+    }\n+\n+    void clear() {\n+        resize(0);\n+    }\n+\n+    iterator insert(iterator pos, const T& value) {\n+        size_type p = pos - begin();\n+        size_type new_size = size() + 1;\n+        if (capacity() < new_size) {\n+            change_capacity(new_size + (new_size >> 1));\n+        }\n+        memmove(item_ptr(p + 1), item_ptr(p), (size() - p) * sizeof(T));\n+        _size++;\n+        new(static_cast<void*>(item_ptr(p))) T(value);\n+        return iterator(item_ptr(p));\n+    }\n+\n+    void insert(iterator pos, size_type count, const T& value) {\n+        size_type p = pos - begin();\n+        size_type new_size = size() + count;\n+        if (capacity() < new_size) {\n+            change_capacity(new_size + (new_size >> 1));\n+        }\n+        memmove(item_ptr(p + count), item_ptr(p), (size() - p) * sizeof(T));\n+        _size += count;\n+        for (size_type i = 0; i < count; i++) {\n+            new(static_cast<void*>(item_ptr(p + i))) T(value);\n+        }\n+    }\n+\n+    template<typename InputIterator>\n+    void insert(iterator pos, InputIterator first, InputIterator last) {\n+        size_type p = pos - begin();\n+        difference_type count = last - first;\n+        size_type new_size = size() + count;\n+        if (capacity() < new_size) {\n+            change_capacity(new_size + (new_size >> 1));\n+        }\n+        memmove(item_ptr(p + count), item_ptr(p), (size() - p) * sizeof(T));\n+        _size += count;\n+        while (first != last) {\n+            new(static_cast<void*>(item_ptr(p))) T(*first);\n+            ++p;\n+            ++first;\n+        }\n+    }\n+\n+    iterator erase(iterator pos) {\n+        (*pos).~T();\n+        memmove(&(*pos), &(*pos) + 1, ((char*)&(*end())) - ((char*)(1 + &(*pos))));\n+        _size--;\n+        return pos;\n+    }\n+\n+    iterator erase(iterator first, iterator last) {\n+        iterator p = first;\n+        char* endp = (char*)&(*end());\n+        while (p != last) {\n+            (*p).~T();\n+            _size--;\n+            ++p;\n+        }\n+        memmove(&(*first), &(*last), endp - ((char*)(&(*last))));\n+        return first;\n+    }\n+\n+    void push_back(const T& value) {\n+        size_type new_size = size() + 1;\n+        if (capacity() < new_size) {\n+            change_capacity(new_size + (new_size >> 1));\n+        }\n+        new(item_ptr(size())) T(value);\n+        _size++;\n+    }\n+\n+    void pop_back() {\n+        _size--;\n+    }\n+\n+    T& front() {\n+        return *item_ptr(0);\n+    }\n+\n+    const T& front() const {\n+        return *item_ptr(0);\n+    }\n+\n+    T& back() {\n+        return *item_ptr(size() - 1);\n+    }\n+\n+    const T& back() const {\n+        return *item_ptr(size() - 1);\n+    }\n+\n+    void swap(prevector<N, T, Size, Diff>& other) {\n+        if (_size & other._size & 1) {\n+            std::swap(_union.capacity, other._union.capacity);\n+            std::swap(_union.indirect, other._union.indirect);\n+        } else {\n+            std::swap(_union, other._union);\n+        }\n+        std::swap(_size, other._size);\n+    }\n+\n+    ~prevector() {\n+        clear();\n+        if (!is_direct()) {\n+            free(_union.indirect);\n+            _union.indirect = NULL;\n+        }\n+    }\n+\n+    bool operator==(const prevector<N, T, Size, Diff>& other) const {\n+        if (other.size() != size()) {\n+            return false;\n+        }\n+        const_iterator b1 = begin();\n+        const_iterator b2 = other.begin();\n+        const_iterator e1 = end();\n+        while (b1 != e1) {\n+            if ((*b1) != (*b2)) {\n+                return false;\n+            }\n+            ++b1;\n+            ++b2;\n+        }\n+        return true;\n+    }\n+\n+    bool operator!=(const prevector<N, T, Size, Diff>& other) const {\n+        return !(*this == other);\n+    }\n+\n+    bool operator<(const prevector<N, T, Size, Diff>& other) const {\n+        if (size() < other.size()) {\n+            return true;\n+        }\n+        if (size() > other.size()) {\n+            return false;\n+        }\n+        const_iterator b1 = begin();\n+        const_iterator b2 = other.begin();\n+        const_iterator e1 = end();\n+        while (b1 != e1) {\n+            if ((*b1) < (*b2)) {\n+                return true;\n+            }\n+            if ((*b2) < (*b1)) {\n+                return false;\n+            }\n+            ++b1;\n+            ++b2;\n+        }\n+        return false;\n+    }\n+\n+    size_t allocated_memory() const {\n+        if (is_direct()) {\n+            return 0;\n+        } else {\n+            return ((size_t)(sizeof(T))) * _union.capacity;\n+        }\n+    }\n+};\n+#pragma pack(pop)\n+\n+#endif"
      },
      {
        "sha": "c5d8a64a6d6ab91f9994b6497473392013f7bc53",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/114b5812f6283f2325fc31e186b26c6d76f9551a/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/114b5812f6283f2325fc31e186b26c6d76f9551a/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=114b5812f6283f2325fc31e186b26c6d76f9551a",
        "patch": "@@ -74,7 +74,7 @@ class CTxIn\n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         READWRITE(prevout);\n-        READWRITE(scriptSig);\n+        READWRITE(*(CScriptBase*)(&scriptSig));\n         READWRITE(nSequence);\n     }\n \n@@ -119,7 +119,7 @@ class CTxOut\n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         READWRITE(nValue);\n-        READWRITE(scriptPubKey);\n+        READWRITE(*(CScriptBase*)(&scriptPubKey));\n     }\n \n     void SetNull()"
      },
      {
        "sha": "f7eae3d79c1a70db008fcd0d5ef9eaca6bd5d7eb",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/114b5812f6283f2325fc31e186b26c6d76f9551a/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/114b5812f6283f2325fc31e186b26c6d76f9551a/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=114b5812f6283f2325fc31e186b26c6d76f9551a",
        "patch": "@@ -201,7 +201,7 @@ QList<std::pair<CScript,CAmount> > PaymentRequestPlus::getPayTo() const\n         const unsigned char* scriptStr = (const unsigned char*)details.outputs(i).script().data();\n         CScript s(scriptStr, scriptStr+details.outputs(i).script().size());\n \n-        result.append(make_pair(s, details.outputs(i).amount()));\n+        result.append(std::make_pair(s, details.outputs(i).amount()));\n     }\n     return result;\n }"
      },
      {
        "sha": "e0853fef4e7cde88c8aab863bb4e1c5de77513c3",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/114b5812f6283f2325fc31e186b26c6d76f9551a/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/114b5812f6283f2325fc31e186b26c6d76f9551a/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=114b5812f6283f2325fc31e186b26c6d76f9551a",
        "patch": "@@ -1032,7 +1032,7 @@ class CTransactionSignatureSerializer {\n         // Serialize the script\n         if (nInput != nIn)\n             // Blank out other inputs' signatures\n-            ::Serialize(s, CScript(), nType, nVersion);\n+            ::Serialize(s, CScriptBase(), nType, nVersion);\n         else\n             SerializeScriptCode(s, nType, nVersion);\n         // Serialize the nSequence"
      },
      {
        "sha": "9c77ed9fc19dbf67766513a2fe89fcc1c7e5ceed",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/114b5812f6283f2325fc31e186b26c6d76f9551a/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/114b5812f6283f2325fc31e186b26c6d76f9551a/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=114b5812f6283f2325fc31e186b26c6d76f9551a",
        "patch": "@@ -205,9 +205,9 @@ bool CScript::IsPayToScriptHash() const\n {\n     // Extra-fast test for pay-to-script-hash CScripts:\n     return (this->size() == 23 &&\n-            this->at(0) == OP_HASH160 &&\n-            this->at(1) == 0x14 &&\n-            this->at(22) == OP_EQUAL);\n+            (*this)[0] == OP_HASH160 &&\n+            (*this)[1] == 0x14 &&\n+            (*this)[22] == OP_EQUAL);\n }\n \n bool CScript::IsPushOnly(const_iterator pc) const"
      },
      {
        "sha": "3650957fc9bfff678aea994dadcb37a0705a8576",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/114b5812f6283f2325fc31e186b26c6d76f9551a/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/114b5812f6283f2325fc31e186b26c6d76f9551a/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=114b5812f6283f2325fc31e186b26c6d76f9551a",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_SCRIPT_SCRIPT_H\n \n #include \"crypto/common.h\"\n+#include \"prevector.h\"\n \n #include <assert.h>\n #include <climits>\n@@ -354,8 +355,10 @@ class CScriptNum\n     int64_t m_value;\n };\n \n+typedef prevector<28, unsigned char> CScriptBase;\n+\n /** Serialized script, used inside transaction inputs and outputs */\n-class CScript : public std::vector<unsigned char>\n+class CScript : public CScriptBase\n {\n protected:\n     CScript& push_int64(int64_t n)\n@@ -376,9 +379,10 @@ class CScript : public std::vector<unsigned char>\n     }\n public:\n     CScript() { }\n-    CScript(const CScript& b) : std::vector<unsigned char>(b.begin(), b.end()) { }\n-    CScript(const_iterator pbegin, const_iterator pend) : std::vector<unsigned char>(pbegin, pend) { }\n-    CScript(const unsigned char* pbegin, const unsigned char* pend) : std::vector<unsigned char>(pbegin, pend) { }\n+    CScript(const CScript& b) : CScriptBase(b.begin(), b.end()) { }\n+    CScript(const_iterator pbegin, const_iterator pend) : CScriptBase(pbegin, pend) { }\n+    CScript(std::vector<unsigned char>::const_iterator pbegin, std::vector<unsigned char>::const_iterator pend) : CScriptBase(pbegin, pend) { }\n+    CScript(const unsigned char* pbegin, const unsigned char* pend) : CScriptBase(pbegin, pend) { }\n \n     CScript& operator+=(const CScript& b)\n     {\n@@ -611,7 +615,7 @@ class CScript : public std::vector<unsigned char>\n     void clear()\n     {\n         // The default std::vector::clear() does not release memory.\n-        std::vector<unsigned char>().swap(*this);\n+        CScriptBase().swap(*this);\n     }\n };\n "
      },
      {
        "sha": "90f557fc608726aeabb6ea82a985a9a643e8d0f3",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/114b5812f6283f2325fc31e186b26c6d76f9551a/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/114b5812f6283f2325fc31e186b26c6d76f9551a/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=114b5812f6283f2325fc31e186b26c6d76f9551a",
        "patch": "@@ -16,7 +16,7 @@\n \n using namespace std;\n \n-typedef vector<unsigned char> valtype;\n+typedef std::vector<unsigned char> valtype;\n \n TransactionSignatureCreator::TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, int nHashTypeIn) : BaseSignatureCreator(keystoreIn), txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), checker(txTo, nIn) {}\n \n@@ -118,7 +118,7 @@ bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPu\n         bool fSolved =\n             SignStep(creator, subscript, scriptSig, subType) && subType != TX_SCRIPTHASH;\n         // Append serialized subscript whether or not it is completely signed:\n-        scriptSig << static_cast<valtype>(subscript);\n+        scriptSig << valtype(subscript.begin(), subscript.end());\n         if (!fSolved) return false;\n     }\n "
      },
      {
        "sha": "5fe7fc1f3583cb83369b1cd5e36fa2baf2f8eb2a",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 119,
        "deletions": 38,
        "changes": 157,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/114b5812f6283f2325fc31e186b26c6d76f9551a/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/114b5812f6283f2325fc31e186b26c6d76f9551a/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=114b5812f6283f2325fc31e186b26c6d76f9551a",
        "patch": "@@ -20,7 +20,7 @@\n #include <utility>\n #include <vector>\n \n-class CScript;\n+#include \"prevector.h\"\n \n static const unsigned int MAX_SIZE = 0x02000000;\n \n@@ -49,26 +49,26 @@ inline T* NCONST_PTR(const T* val)\n  * @note These functions avoid the undefined case of indexing into an empty\n  * vector, as well as that of indexing after the end of the vector.\n  */\n-template <class T, class TAl>\n-inline T* begin_ptr(std::vector<T,TAl>& v)\n+template <typename V>\n+inline typename V::value_type* begin_ptr(V& v)\n {\n     return v.empty() ? NULL : &v[0];\n }\n /** Get begin pointer of vector (const version) */\n-template <class T, class TAl>\n-inline const T* begin_ptr(const std::vector<T,TAl>& v)\n+template <typename V>\n+inline const typename V::value_type* begin_ptr(const V& v)\n {\n     return v.empty() ? NULL : &v[0];\n }\n /** Get end pointer of vector (non-const version) */\n-template <class T, class TAl>\n-inline T* end_ptr(std::vector<T,TAl>& v)\n+template <typename V>\n+inline typename V::value_type* end_ptr(V& v)\n {\n     return v.empty() ? NULL : (&v[0] + v.size());\n }\n /** Get end pointer of vector (const version) */\n-template <class T, class TAl>\n-inline const T* end_ptr(const std::vector<T,TAl>& v)\n+template <typename V>\n+inline const typename V::value_type* end_ptr(const V& v)\n {\n     return v.empty() ? NULL : (&v[0] + v.size());\n }\n@@ -391,6 +391,12 @@ class CFlatData\n         pbegin = (char*)begin_ptr(v);\n         pend = (char*)end_ptr(v);\n     }\n+    template <unsigned int N, typename T, typename S, typename D>\n+    explicit CFlatData(prevector<N, T, S, D> &v)\n+    {\n+        pbegin = (char*)begin_ptr(v);\n+        pend = (char*)end_ptr(v);\n+    }\n     char* begin() { return pbegin; }\n     const char* begin() const { return pbegin; }\n     char* end() { return pend; }\n@@ -485,6 +491,20 @@ template<typename C> unsigned int GetSerializeSize(const std::basic_string<C>& s\n template<typename Stream, typename C> void Serialize(Stream& os, const std::basic_string<C>& str, int, int=0);\n template<typename Stream, typename C> void Unserialize(Stream& is, std::basic_string<C>& str, int, int=0);\n \n+/**\n+ * prevector\n+ * prevectors of unsigned char are a special case and are intended to be serialized as a single opaque blob.\n+ */\n+template<unsigned int N, typename T> unsigned int GetSerializeSize_impl(const prevector<N, T>& v, int nType, int nVersion, const unsigned char&);\n+template<unsigned int N, typename T, typename V> unsigned int GetSerializeSize_impl(const prevector<N, T>& v, int nType, int nVersion, const V&);\n+template<unsigned int N, typename T> inline unsigned int GetSerializeSize(const prevector<N, T>& v, int nType, int nVersion);\n+template<typename Stream, unsigned int N, typename T> void Serialize_impl(Stream& os, const prevector<N, T>& v, int nType, int nVersion, const unsigned char&);\n+template<typename Stream, unsigned int N, typename T, typename V> void Serialize_impl(Stream& os, const prevector<N, T>& v, int nType, int nVersion, const V&);\n+template<typename Stream, unsigned int N, typename T> inline void Serialize(Stream& os, const prevector<N, T>& v, int nType, int nVersion);\n+template<typename Stream, unsigned int N, typename T> void Unserialize_impl(Stream& is, prevector<N, T>& v, int nType, int nVersion, const unsigned char&);\n+template<typename Stream, unsigned int N, typename T, typename V> void Unserialize_impl(Stream& is, prevector<N, T>& v, int nType, int nVersion, const V&);\n+template<typename Stream, unsigned int N, typename T> inline void Unserialize(Stream& is, prevector<N, T>& v, int nType, int nVersion);\n+\n /**\n  * vector\n  * vectors of unsigned char are a special case and are intended to be serialized as a single opaque blob.\n@@ -499,13 +519,6 @@ template<typename Stream, typename T, typename A> void Unserialize_impl(Stream&\n template<typename Stream, typename T, typename A, typename V> void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const V&);\n template<typename Stream, typename T, typename A> inline void Unserialize(Stream& is, std::vector<T, A>& v, int nType, int nVersion);\n \n-/**\n- * others derived from vector\n- */\n-extern inline unsigned int GetSerializeSize(const CScript& v, int nType, int nVersion);\n-template<typename Stream> void Serialize(Stream& os, const CScript& v, int nType, int nVersion);\n-template<typename Stream> void Unserialize(Stream& is, CScript& v, int nType, int nVersion);\n-\n /**\n  * pair\n  */\n@@ -587,6 +600,96 @@ void Unserialize(Stream& is, std::basic_string<C>& str, int, int)\n \n \n \n+/**\n+ * prevector\n+ */\n+template<unsigned int N, typename T>\n+unsigned int GetSerializeSize_impl(const prevector<N, T>& v, int nType, int nVersion, const unsigned char&)\n+{\n+    return (GetSizeOfCompactSize(v.size()) + v.size() * sizeof(T));\n+}\n+\n+template<unsigned int N, typename T, typename V>\n+unsigned int GetSerializeSize_impl(const prevector<N, T>& v, int nType, int nVersion, const V&)\n+{\n+    unsigned int nSize = GetSizeOfCompactSize(v.size());\n+    for (typename prevector<N, T>::const_iterator vi = v.begin(); vi != v.end(); ++vi)\n+        nSize += GetSerializeSize((*vi), nType, nVersion);\n+    return nSize;\n+}\n+\n+template<unsigned int N, typename T>\n+inline unsigned int GetSerializeSize(const prevector<N, T>& v, int nType, int nVersion)\n+{\n+    return GetSerializeSize_impl(v, nType, nVersion, T());\n+}\n+\n+\n+template<typename Stream, unsigned int N, typename T>\n+void Serialize_impl(Stream& os, const prevector<N, T>& v, int nType, int nVersion, const unsigned char&)\n+{\n+    WriteCompactSize(os, v.size());\n+    if (!v.empty())\n+        os.write((char*)&v[0], v.size() * sizeof(T));\n+}\n+\n+template<typename Stream, unsigned int N, typename T, typename V>\n+void Serialize_impl(Stream& os, const prevector<N, T>& v, int nType, int nVersion, const V&)\n+{\n+    WriteCompactSize(os, v.size());\n+    for (typename prevector<N, T>::const_iterator vi = v.begin(); vi != v.end(); ++vi)\n+        ::Serialize(os, (*vi), nType, nVersion);\n+}\n+\n+template<typename Stream, unsigned int N, typename T>\n+inline void Serialize(Stream& os, const prevector<N, T>& v, int nType, int nVersion)\n+{\n+    Serialize_impl(os, v, nType, nVersion, T());\n+}\n+\n+\n+template<typename Stream, unsigned int N, typename T>\n+void Unserialize_impl(Stream& is, prevector<N, T>& v, int nType, int nVersion, const unsigned char&)\n+{\n+    // Limit size per read so bogus size value won't cause out of memory\n+    v.clear();\n+    unsigned int nSize = ReadCompactSize(is);\n+    unsigned int i = 0;\n+    while (i < nSize)\n+    {\n+        unsigned int blk = std::min(nSize - i, (unsigned int)(1 + 4999999 / sizeof(T)));\n+        v.resize(i + blk);\n+        is.read((char*)&v[i], blk * sizeof(T));\n+        i += blk;\n+    }\n+}\n+\n+template<typename Stream, unsigned int N, typename T, typename V>\n+void Unserialize_impl(Stream& is, prevector<N, T>& v, int nType, int nVersion, const V&)\n+{\n+    v.clear();\n+    unsigned int nSize = ReadCompactSize(is);\n+    unsigned int i = 0;\n+    unsigned int nMid = 0;\n+    while (nMid < nSize)\n+    {\n+        nMid += 5000000 / sizeof(T);\n+        if (nMid > nSize)\n+            nMid = nSize;\n+        v.resize(nMid);\n+        for (; i < nMid; i++)\n+            Unserialize(is, v[i], nType, nVersion);\n+    }\n+}\n+\n+template<typename Stream, unsigned int N, typename T>\n+inline void Unserialize(Stream& is, prevector<N, T>& v, int nType, int nVersion)\n+{\n+    Unserialize_impl(is, v, nType, nVersion, T());\n+}\n+\n+\n+\n /**\n  * vector\n  */\n@@ -677,28 +780,6 @@ inline void Unserialize(Stream& is, std::vector<T, A>& v, int nType, int nVersio\n \n \n \n-/**\n- * others derived from vector\n- */\n-inline unsigned int GetSerializeSize(const CScript& v, int nType, int nVersion)\n-{\n-    return GetSerializeSize((const std::vector<unsigned char>&)v, nType, nVersion);\n-}\n-\n-template<typename Stream>\n-void Serialize(Stream& os, const CScript& v, int nType, int nVersion)\n-{\n-    Serialize(os, (const std::vector<unsigned char>&)v, nType, nVersion);\n-}\n-\n-template<typename Stream>\n-void Unserialize(Stream& is, CScript& v, int nType, int nVersion)\n-{\n-    Unserialize(is, (std::vector<unsigned char>&)v, nType, nVersion);\n-}\n-\n-\n-\n /**\n  * pair\n  */"
      },
      {
        "sha": "d92b7ec62ec476af0f4205f4b0eb4c6f58e08d71",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/114b5812f6283f2325fc31e186b26c6d76f9551a/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/114b5812f6283f2325fc31e186b26c6d76f9551a/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=114b5812f6283f2325fc31e186b26c6d76f9551a",
        "patch": "@@ -186,7 +186,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n     tx.vin[0].prevout.hash = hash;\n-    tx.vin[0].scriptSig = CScript() << (std::vector<unsigned char>)script;\n+    tx.vin[0].scriptSig = CScript() << std::vector<unsigned char>(script.begin(), script.end());\n     tx.vout[0].nValue -= 1000000;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));"
      },
      {
        "sha": "01a45b540d512f4f27c45c8c209013951b1660bd",
        "filename": "src/test/prevector_tests.cpp",
        "status": "added",
        "additions": 217,
        "deletions": 0,
        "changes": 217,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/114b5812f6283f2325fc31e186b26c6d76f9551a/src/test/prevector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/114b5812f6283f2325fc31e186b26c6d76f9551a/src/test/prevector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/prevector_tests.cpp?ref=114b5812f6283f2325fc31e186b26c6d76f9551a",
        "patch": "@@ -0,0 +1,217 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <vector>\n+#include \"prevector.h\"\n+#include \"random.h\"\n+\n+#include \"serialize.h\"\n+#include \"streams.h\"\n+\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(PrevectorTests, TestingSetup)\n+\n+template<unsigned int N, typename T>\n+class prevector_tester {\n+    typedef std::vector<T> realtype;\n+    realtype real_vector;\n+\n+    typedef prevector<N, T> pretype;\n+    pretype pre_vector;\n+\n+    typedef typename pretype::size_type Size;\n+\n+    void test() {\n+        const pretype& const_pre_vector = pre_vector;\n+        BOOST_CHECK_EQUAL(real_vector.size(), pre_vector.size());\n+        BOOST_CHECK_EQUAL(real_vector.empty(), pre_vector.empty());\n+        for (Size s = 0; s < real_vector.size(); s++) {\n+             BOOST_CHECK(real_vector[s] == pre_vector[s]);\n+             BOOST_CHECK(&(pre_vector[s]) == &(pre_vector.begin()[s]));\n+             BOOST_CHECK(&(pre_vector[s]) == &*(pre_vector.begin() + s));\n+             BOOST_CHECK(&(pre_vector[s]) == &*((pre_vector.end() + s) - real_vector.size()));\n+        }\n+        // BOOST_CHECK(realtype(pre_vector) == real_vector);\n+        BOOST_CHECK(pretype(real_vector.begin(), real_vector.end()) == pre_vector);\n+        BOOST_CHECK(pretype(pre_vector.begin(), pre_vector.end()) == pre_vector);\n+        size_t pos = 0;\n+        BOOST_FOREACH(const T& v, pre_vector) {\n+             BOOST_CHECK(v == real_vector[pos++]);\n+        }\n+        BOOST_REVERSE_FOREACH(const T& v, pre_vector) {\n+             BOOST_CHECK(v == real_vector[--pos]);\n+        }\n+        BOOST_FOREACH(const T& v, const_pre_vector) {\n+             BOOST_CHECK(v == real_vector[pos++]);\n+        }\n+        BOOST_REVERSE_FOREACH(const T& v, const_pre_vector) {\n+             BOOST_CHECK(v == real_vector[--pos]);\n+        }\n+        CDataStream ss1(SER_DISK, 0);\n+        CDataStream ss2(SER_DISK, 0);\n+        ss1 << real_vector;\n+        ss2 << pre_vector;\n+        BOOST_CHECK_EQUAL(ss1.size(), ss2.size());\n+        for (Size s = 0; s < ss1.size(); s++) {\n+            BOOST_CHECK_EQUAL(ss1[s], ss2[s]);\n+        }\n+    }\n+\n+public:\n+    void resize(Size s) {\n+        real_vector.resize(s);\n+        BOOST_CHECK_EQUAL(real_vector.size(), s);\n+        pre_vector.resize(s);\n+        BOOST_CHECK_EQUAL(pre_vector.size(), s);\n+        test();\n+    }\n+\n+    void reserve(Size s) {\n+        real_vector.reserve(s);\n+        BOOST_CHECK(real_vector.capacity() >= s);\n+        pre_vector.reserve(s);\n+        BOOST_CHECK(pre_vector.capacity() >= s);\n+        test();\n+    }\n+\n+    void insert(Size position, const T& value) {\n+        real_vector.insert(real_vector.begin() + position, value);\n+        pre_vector.insert(pre_vector.begin() + position, value);\n+        test();\n+    }\n+\n+    void insert(Size position, Size count, const T& value) {\n+        real_vector.insert(real_vector.begin() + position, count, value);\n+        pre_vector.insert(pre_vector.begin() + position, count, value);\n+        test();\n+    }\n+\n+    template<typename I>\n+    void insert_range(Size position, I first, I last) {\n+        real_vector.insert(real_vector.begin() + position, first, last);\n+        pre_vector.insert(pre_vector.begin() + position, first, last);\n+        test();\n+    }\n+\n+    void erase(Size position) {\n+        real_vector.erase(real_vector.begin() + position);\n+        pre_vector.erase(pre_vector.begin() + position);\n+        test();\n+    }\n+\n+    void erase(Size first, Size last) {\n+        real_vector.erase(real_vector.begin() + first, real_vector.begin() + last);\n+        pre_vector.erase(pre_vector.begin() + first, pre_vector.begin() + last);\n+        test();\n+    }\n+\n+    void update(Size pos, const T& value) {\n+        real_vector[pos] = value;\n+        pre_vector[pos] = value;\n+        test();\n+    }\n+\n+    void push_back(const T& value) {\n+        real_vector.push_back(value);\n+        pre_vector.push_back(value);\n+        test();\n+    }\n+\n+    void pop_back() {\n+        real_vector.pop_back();\n+        pre_vector.pop_back();\n+        test();\n+    }\n+\n+    void clear() {\n+        real_vector.clear();\n+        pre_vector.clear();\n+    }\n+\n+    void assign(Size n, const T& value) {\n+        real_vector.assign(n, value);\n+        pre_vector.assign(n, value);\n+    }\n+\n+    Size size() {\n+        return real_vector.size();\n+    }\n+\n+    Size capacity() {\n+        return pre_vector.capacity();\n+    }\n+\n+    void shrink_to_fit() {\n+        pre_vector.shrink_to_fit();\n+        test();\n+    }\n+};\n+\n+BOOST_AUTO_TEST_CASE(PrevectorTestInt)\n+{\n+    for (int j = 0; j < 64; j++) {\n+        prevector_tester<8, int> test;\n+        for (int i = 0; i < 2048; i++) {\n+            int r = insecure_rand();\n+            if ((r % 4) == 0) {\n+                test.insert(insecure_rand() % (test.size() + 1), insecure_rand());\n+            }\n+            if (test.size() > 0 && ((r >> 2) % 4) == 1) {\n+                test.erase(insecure_rand() % test.size());\n+            }\n+            if (((r >> 4) % 8) == 2) {\n+                int new_size = std::max<int>(0, std::min<int>(30, test.size() + (insecure_rand() % 5) - 2));\n+                test.resize(new_size);\n+            }\n+            if (((r >> 7) % 8) == 3) {\n+                test.insert(insecure_rand() % (test.size() + 1), 1 + (insecure_rand() % 2), insecure_rand());\n+            }\n+            if (((r >> 10) % 8) == 4) {\n+                int del = std::min<int>(test.size(), 1 + (insecure_rand() % 2));\n+                int beg = insecure_rand() % (test.size() + 1 - del);\n+                test.erase(beg, beg + del);\n+            }\n+            if (((r >> 13) % 16) == 5) {\n+                test.push_back(insecure_rand());\n+            }\n+            if (test.size() > 0 && ((r >> 17) % 16) == 6) {\n+                test.pop_back();\n+            }\n+            if (((r >> 21) % 32) == 7) {\n+                int values[4];\n+                int num = 1 + (insecure_rand() % 4);\n+                for (int i = 0; i < num; i++) {\n+                    values[i] = insecure_rand();\n+                }\n+                test.insert_range(insecure_rand() % (test.size() + 1), values, values + num);\n+            }\n+            if (((r >> 26) % 32) == 8) {\n+                int del = std::min<int>(test.size(), 1 + (insecure_rand() % 4));\n+                int beg = insecure_rand() % (test.size() + 1 - del);\n+                test.erase(beg, beg + del);\n+            }\n+            r = insecure_rand();\n+            if (r % 32 == 9) {\n+                test.reserve(insecure_rand() % 32);\n+            }\n+            if ((r >> 5) % 64 == 10) {\n+                test.shrink_to_fit();\n+            }\n+            if (test.size() > 0) {\n+                test.update(insecure_rand() % test.size(), insecure_rand());\n+            }\n+            if (((r >> 11) & 1024) == 11) {\n+                test.clear();\n+            }\n+            if (((r >> 21) & 512) == 12) {\n+                test.assign(insecure_rand() % 32, insecure_rand());\n+            }\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "e36aca8dfaab2751108f41ad4ec692e51a6b94d9",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/114b5812f6283f2325fc31e186b26c6d76f9551a/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/114b5812f6283f2325fc31e186b26c6d76f9551a/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=114b5812f6283f2325fc31e186b26c6d76f9551a",
        "patch": "@@ -25,7 +25,7 @@ using namespace std;\n static std::vector<unsigned char>\n Serialize(const CScript& s)\n {\n-    std::vector<unsigned char> sSerialized(s);\n+    std::vector<unsigned char> sSerialized(s.begin(), s.end());\n     return sSerialized;\n }\n \n@@ -339,8 +339,8 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     // SignSignature doesn't know how to sign these. We're\n     // not testing validating signatures, so just create\n     // dummy signatures that DO include the correct P2SH scripts:\n-    txTo.vin[3].scriptSig << OP_11 << OP_11 << static_cast<vector<unsigned char> >(oneAndTwo);\n-    txTo.vin[4].scriptSig << static_cast<vector<unsigned char> >(fifteenSigops);\n+    txTo.vin[3].scriptSig << OP_11 << OP_11 << vector<unsigned char>(oneAndTwo.begin(), oneAndTwo.end());\n+    txTo.vin[4].scriptSig << vector<unsigned char>(fifteenSigops.begin(), fifteenSigops.end());\n \n     BOOST_CHECK(::AreInputsStandard(txTo, coins));\n     // 22 P2SH sigops for all inputs (1 for vin[0], 6 for vin[3], 15 for vin[4]\n@@ -362,7 +362,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txToNonStd1.vin.resize(1);\n     txToNonStd1.vin[0].prevout.n = 5;\n     txToNonStd1.vin[0].prevout.hash = txFrom.GetHash();\n-    txToNonStd1.vin[0].scriptSig << static_cast<vector<unsigned char> >(sixteenSigops);\n+    txToNonStd1.vin[0].scriptSig << vector<unsigned char>(sixteenSigops.begin(), sixteenSigops.end());\n \n     BOOST_CHECK(!::AreInputsStandard(txToNonStd1, coins));\n     BOOST_CHECK_EQUAL(GetP2SHSigOpCount(txToNonStd1, coins), 16U);\n@@ -374,7 +374,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txToNonStd2.vin.resize(1);\n     txToNonStd2.vin[0].prevout.n = 6;\n     txToNonStd2.vin[0].prevout.hash = txFrom.GetHash();\n-    txToNonStd2.vin[0].scriptSig << static_cast<vector<unsigned char> >(twentySigops);\n+    txToNonStd2.vin[0].scriptSig << vector<unsigned char>(twentySigops.begin(), twentySigops.end());\n \n     BOOST_CHECK(!::AreInputsStandard(txToNonStd2, coins));\n     BOOST_CHECK_EQUAL(GetP2SHSigOpCount(txToNonStd2, coins), 20U);"
      },
      {
        "sha": "0059e4a998ef2dc9148fc1490d59ef0765d7ce72",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/114b5812f6283f2325fc31e186b26c6d76f9551a/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/114b5812f6283f2325fc31e186b26c6d76f9551a/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=114b5812f6283f2325fc31e186b26c6d76f9551a",
        "patch": "@@ -260,7 +260,7 @@ class TestBuilder\n \n     TestBuilder& PushRedeem()\n     {\n-        DoPush(static_cast<std::vector<unsigned char> >(scriptPubKey));\n+        DoPush(std::vector<unsigned char>(scriptPubKey.begin(), scriptPubKey.end()));\n         return *this;\n     }\n \n@@ -892,7 +892,7 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSigCopy, scriptSig);\n     BOOST_CHECK(combined == scriptSigCopy || combined == scriptSig);\n     // dummy scriptSigCopy with placeholder, should always choose non-placeholder:\n-    scriptSigCopy = CScript() << OP_0 << static_cast<vector<unsigned char> >(pkSingle);\n+    scriptSigCopy = CScript() << OP_0 << vector<unsigned char>(pkSingle.begin(), pkSingle.end());\n     combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSigCopy, scriptSig);\n     BOOST_CHECK(combined == scriptSig);\n     combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSig, scriptSigCopy);"
      },
      {
        "sha": "ea2b9b795f0231a0ba2b19bd40c39ec7040a3f88",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/114b5812f6283f2325fc31e186b26c6d76f9551a/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/114b5812f6283f2325fc31e186b26c6d76f9551a/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=114b5812f6283f2325fc31e186b26c6d76f9551a",
        "patch": "@@ -20,7 +20,7 @@ using namespace std;\n static std::vector<unsigned char>\n Serialize(const CScript& s)\n {\n-    std::vector<unsigned char> sSerialized(s);\n+    std::vector<unsigned char> sSerialized(s.begin(), s.end());\n     return sSerialized;\n }\n "
      },
      {
        "sha": "e0f3e3aa04cae9e5759c561e2e1167e678295176",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/114b5812f6283f2325fc31e186b26c6d76f9551a/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/114b5812f6283f2325fc31e186b26c6d76f9551a/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=114b5812f6283f2325fc31e186b26c6d76f9551a",
        "patch": "@@ -113,19 +113,19 @@ bool CWalletDB::WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey)\n bool CWalletDB::WriteCScript(const uint160& hash, const CScript& redeemScript)\n {\n     nWalletDBUpdated++;\n-    return Write(std::make_pair(std::string(\"cscript\"), hash), redeemScript, false);\n+    return Write(std::make_pair(std::string(\"cscript\"), hash), *(const CScriptBase*)(&redeemScript), false);\n }\n \n bool CWalletDB::WriteWatchOnly(const CScript &dest)\n {\n     nWalletDBUpdated++;\n-    return Write(std::make_pair(std::string(\"watchs\"), dest), '1');\n+    return Write(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)), '1');\n }\n \n bool CWalletDB::EraseWatchOnly(const CScript &dest)\n {\n     nWalletDBUpdated++;\n-    return Erase(std::make_pair(std::string(\"watchs\"), dest));\n+    return Erase(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)));\n }\n \n bool CWalletDB::WriteBestBlock(const CBlockLocator& locator)\n@@ -421,7 +421,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         else if (strType == \"watchs\")\n         {\n             CScript script;\n-            ssKey >> script;\n+            ssKey >> *(CScriptBase*)(&script);\n             char fYes;\n             ssValue >> fYes;\n             if (fYes == '1')\n@@ -575,7 +575,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             uint160 hash;\n             ssKey >> hash;\n             CScript script;\n-            ssValue >> script;\n+            ssValue >> *(CScriptBase*)(&script);\n             if (!pwallet->LoadCScript(script))\n             {\n                 strErr = \"Error reading wallet database: LoadCScript failed\";"
      }
    ]
  },
  {
    "sha": "d3565604e3d94c074ee3f79b61dee9610b870a4c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzU2NTYwNGUzZDk0YzA3NGVlM2Y3OWI2MWRlZTk2MTBiODcwYTRj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-13T17:37:34Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-13T17:37:46Z"
      },
      "message": "Merge pull request #7007\n\na78e6ea Fix bug in mempool_tests unit test (Alex Morcos)",
      "tree": {
        "sha": "9fd01f83e17e0add5395870104b5555ff9b74708",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9fd01f83e17e0add5395870104b5555ff9b74708"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3565604e3d94c074ee3f79b61dee9610b870a4c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWRh/qAAoJEHSBCwEjRsmm2ykIAIrtct9WmTGxwvzVJDG5noL0\nslxkbWEruk1hQJtQ6UdaXlS4Xq7PR7fYT5vxWdAhM6wC1FVVOXsh3Lj0ZMMA/Q6D\ntrDB5Gr+JVAy4t+HxAaCgb69Wb2+oCNMKFNYdym9majrPAYiZ/jmhlVHIOXqrFWy\ns6LEXRFCF/ORG4YzA4vEE2SIWFoE832IrMCTraBuPgwlZ5zRVjVb8LhRvPMeimMo\n8C7j1tG2Y8p+UsJY8oPkvGqoGfYy7WPsj15Xeaebr+VR9kYGhmJBQvHvdKNPd4nC\nOIL+4EdSTmHfMO9IfsDb+yx9EgHztn0+OGjXwKNIU0rE/WdX1kjNJjfLJn5o3O0=\n=eI9o\n-----END PGP SIGNATURE-----",
        "payload": "tree 9fd01f83e17e0add5395870104b5555ff9b74708\nparent 4f09b77c7fa50afc19d4458c9dd05219c82a298d\nparent a78e6eaf5ca52629c1b958908fad98986e9343a7\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1447436254 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1447436266 +0100\n\nMerge pull request #7007\n\na78e6ea Fix bug in mempool_tests unit test (Alex Morcos)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3565604e3d94c074ee3f79b61dee9610b870a4c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d3565604e3d94c074ee3f79b61dee9610b870a4c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3565604e3d94c074ee3f79b61dee9610b870a4c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f09b77c7fa50afc19d4458c9dd05219c82a298d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4f09b77c7fa50afc19d4458c9dd05219c82a298d"
      },
      {
        "sha": "a78e6eaf5ca52629c1b958908fad98986e9343a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a78e6eaf5ca52629c1b958908fad98986e9343a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a78e6eaf5ca52629c1b958908fad98986e9343a7"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "afb3b282f6ce1496c7772f91b82de688dc3701ab",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3565604e3d94c074ee3f79b61dee9610b870a4c/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3565604e3d94c074ee3f79b61dee9610b870a4c/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=d3565604e3d94c074ee3f79b61dee9610b870a4c",
        "patch": "@@ -377,8 +377,8 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     tx7.vout.resize(2);\n     tx7.vout[0].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n     tx7.vout[0].nValue = 10 * COIN;\n-    tx7.vout[0].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n-    tx7.vout[0].nValue = 10 * COIN;\n+    tx7.vout[1].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n+    tx7.vout[1].nValue = 10 * COIN;\n \n     pool.addUnchecked(tx4.GetHash(), CTxMemPoolEntry(tx4, 7000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx4)));\n     pool.addUnchecked(tx5.GetHash(), CTxMemPoolEntry(tx5, 1000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx5)));"
      }
    ]
  },
  {
    "sha": "dbd2c135ddb96bdc3a4e870c2371cb1fac227135",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYmQyYzEzNWRkYjk2YmRjM2E0ZTg3MGMyMzcxY2IxZmFjMjI3MTM1",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-13T19:29:33Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-13T19:30:00Z"
      },
      "message": "Merge pull request #6990\n\na264c32 http: speed up shutdown (Wladimir J. van der Laan)",
      "tree": {
        "sha": "d37ef356cf90aaa62b4a107c9f9065c62728ee9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d37ef356cf90aaa62b4a107c9f9065c62728ee9e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dbd2c135ddb96bdc3a4e870c2371cb1fac227135",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCAAGBQJWRjo4AAoJEOq1r5TZ6avnhIAQAJXFVH0edo5A4KJa8gXYSUv1\nSRrPgRAz1M6BYnAX1hoNFVZyfN/bSZt6oTtRCaTZ5p43wK0fQQNzc7JguZ3zWxYr\nWB6F7n7Sf8eN/BOJy2+EnmDc9NDtmLa40qrcNYB1t2YRBCanTehRZSxz47n6Bq/H\nxvgqOq5DqDua4/FAr9qEPwORetteu6tBOFixrOzw+S4uApM2LAXcahWP0j3MMLdG\nmxjLqu2tg+CJbsqiXlS83SM4XS2usFW4crGBgsL3Yo+DoiNqPhgUP3uUieTwP9YK\nupsfNpAzHWlxpev/kpX9L1893XXx/HqYJBKxPAVZy2R1EG1OTGmI15DfsvOrL76N\n46wE8q7aJMSRzHZjNh1NRi3cXAunS3CiEpqXmEY65Lpm1TYbUYfBGwEtF4jcuO4E\nCVRFaiViBbTIES4wbKI+XWwK2SIlWKwYRPZ2Kisw9EANsPU9zKx14TiduVr0gpM3\n9pg+USya94Ktkawdn1aF3Xey4pscPL/i8JASxKNfzyLpTLmLPMbC8EMm+8jAVPHz\nXKlJuBU+2CX9I4oiDM4dHbt3gpEsBcF3AfB7Hxd/TJQtLhG71pELBIZEhfSKI6fi\nVrt5lneY918rNegV7ASBhWbUeS1TleKxc5J/UY3PnRkBCw6pXaWtB+3NhFOl/4gN\nDOnQ0noLbO9+lWLuwMBs\n=S/7y\n-----END PGP SIGNATURE-----",
        "payload": "tree d37ef356cf90aaa62b4a107c9f9065c62728ee9e\nparent d3565604e3d94c074ee3f79b61dee9610b870a4c\nparent a264c32e3321ae909ca59cb8ce8bf5d812dbc4e1\nauthor Gregory Maxwell <greg@xiph.org> 1447442973 -0800\ncommitter Gregory Maxwell <greg@xiph.org> 1447443000 -0800\n\nMerge pull request #6990\n\na264c32 http: speed up shutdown (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbd2c135ddb96bdc3a4e870c2371cb1fac227135",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dbd2c135ddb96bdc3a4e870c2371cb1fac227135",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbd2c135ddb96bdc3a4e870c2371cb1fac227135/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d3565604e3d94c074ee3f79b61dee9610b870a4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3565604e3d94c074ee3f79b61dee9610b870a4c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d3565604e3d94c074ee3f79b61dee9610b870a4c"
      },
      {
        "sha": "a264c32e3321ae909ca59cb8ce8bf5d812dbc4e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a264c32e3321ae909ca59cb8ce8bf5d812dbc4e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a264c32e3321ae909ca59cb8ce8bf5d812dbc4e1"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 22,
      "deletions": 12
    },
    "files": [
      {
        "sha": "424ef015c8ccd73d711fa64db37435999774e450",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 10,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbd2c135ddb96bdc3a4e870c2371cb1fac227135/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbd2c135ddb96bdc3a4e870c2371cb1fac227135/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=dbd2c135ddb96bdc3a4e870c2371cb1fac227135",
        "patch": "@@ -438,15 +438,17 @@ bool InitHTTPServer()\n     return true;\n }\n \n-bool StartHTTPServer(boost::thread_group& threadGroup)\n+boost::thread threadHTTP;\n+\n+bool StartHTTPServer()\n {\n     LogPrint(\"http\", \"Starting HTTP server\\n\");\n     int rpcThreads = std::max((long)GetArg(\"-rpcthreads\", DEFAULT_HTTP_THREADS), 1L);\n     LogPrintf(\"HTTP: starting %d worker threads\\n\", rpcThreads);\n-    threadGroup.create_thread(boost::bind(&ThreadHTTP, eventBase, eventHTTP));\n+    threadHTTP = boost::thread(boost::bind(&ThreadHTTP, eventBase, eventHTTP));\n \n     for (int i = 0; i < rpcThreads; i++)\n-        threadGroup.create_thread(boost::bind(&HTTPWorkQueueRun, workQueue));\n+        boost::thread(boost::bind(&HTTPWorkQueueRun, workQueue));\n     return true;\n }\n \n@@ -461,13 +463,6 @@ void InterruptHTTPServer()\n         // Reject requests on current connections\n         evhttp_set_gencb(eventHTTP, http_reject_request_cb, NULL);\n     }\n-    if (eventBase) {\n-        // Force-exit event loop after predefined time\n-        struct timeval tv;\n-        tv.tv_sec = 10;\n-        tv.tv_usec = 0;\n-        event_base_loopexit(eventBase, &tv);\n-    }\n     if (workQueue)\n         workQueue->Interrupt();\n }\n@@ -480,6 +475,20 @@ void StopHTTPServer()\n         workQueue->WaitExit();\n         delete workQueue;\n     }\n+    if (eventBase) {\n+        LogPrint(\"http\", \"Waiting for HTTP event thread to exit\\n\");\n+        // Give event loop a few seconds to exit (to send back last RPC responses), then break it\n+        // Before this was solved with event_base_loopexit, but that didn't work as expected in\n+        // at least libevent 2.0.21 and always introduced a delay. In libevent\n+        // master that appears to be solved, so in the future that solution\n+        // could be used again (if desirable).\n+        // (see discussion in https://github.com/bitcoin/bitcoin/pull/6990)\n+        if (!threadHTTP.try_join_for(boost::chrono::milliseconds(2000))) {\n+            LogPrintf(\"HTTP event loop did not exit within allotted time, sending loopbreak\\n\");\n+            event_base_loopbreak(eventBase);\n+            threadHTTP.join();\n+        }\n+    }\n     if (eventHTTP) {\n         evhttp_free(eventHTTP);\n         eventHTTP = 0;\n@@ -488,6 +497,7 @@ void StopHTTPServer()\n         event_base_free(eventBase);\n         eventBase = 0;\n     }\n+    LogPrint(\"http\", \"Stopped HTTP server\\n\");\n }\n \n struct event_base* EventBase()"
      },
      {
        "sha": "20a119cc5c9caa512638679ee0a2a192f8b31a3e",
        "filename": "src/httpserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbd2c135ddb96bdc3a4e870c2371cb1fac227135/src/httpserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbd2c135ddb96bdc3a4e870c2371cb1fac227135/src/httpserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.h?ref=dbd2c135ddb96bdc3a4e870c2371cb1fac227135",
        "patch": "@@ -28,7 +28,7 @@ bool InitHTTPServer();\n  * This is separate from InitHTTPServer to give users race-condition-free time\n  * to register their handlers between InitHTTPServer and StartHTTPServer.\n  */\n-bool StartHTTPServer(boost::thread_group& threadGroup);\n+bool StartHTTPServer();\n /** Interrupt HTTP server threads */\n void InterruptHTTPServer();\n /** Stop HTTP server */"
      },
      {
        "sha": "f2001236a2a23890f6c88ef6c42cf5b1aecf30a3",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbd2c135ddb96bdc3a4e870c2371cb1fac227135/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbd2c135ddb96bdc3a4e870c2371cb1fac227135/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=dbd2c135ddb96bdc3a4e870c2371cb1fac227135",
        "patch": "@@ -668,7 +668,7 @@ bool AppInitServers(boost::thread_group& threadGroup)\n         return false;\n     if (GetBoolArg(\"-rest\", false) && !StartREST())\n         return false;\n-    if (!StartHTTPServer(threadGroup))\n+    if (!StartHTTPServer())\n         return false;\n     return true;\n }"
      }
    ]
  },
  {
    "sha": "d61fcff07112411a1e7c28984777480e0c0873aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjFmY2ZmMDcxMTI0MTFhMWU3YzI4OTg0Nzc3NDgwZTBjMDg3M2Fh",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-11T09:10:48Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-13T20:04:12Z"
      },
      "message": "don't enforce maxuploadtargets disconnect for whitelisted peers",
      "tree": {
        "sha": "aeeba1fe49bc8b2cddf6fc6925e4f56adb02b47e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aeeba1fe49bc8b2cddf6fc6925e4f56adb02b47e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d61fcff07112411a1e7c28984777480e0c0873aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWRkI8AAoJECnUvLZBb1PsVBkQAKI7NodioiuI8zjaoX85beWz\nGSk8G0jdkEgVhquG1Ur/+79nED/qJwBLs1vU5T9vDvoOMCdyfytvT84g5BW6FiV3\nj2V501qT9lljZzxEdTORoT2EqxC5v8ruxYdUljJgyPevTHb//sNbKvOMv7E9aKx/\nqIAVCdI9ZWFHE1CQdYGmME72gSfaRK0yauNiTQrwXSqGJZxq3MCjnmt/Z7TLplxp\n/eojAdF8+pzdjiOvSZz68WmMozMnGbwoFrCZycxTlx9cO3tyEWJDCJtu8b1vUNL3\nBLJ6MHQ93BDwQzSYRbqf38MXZu5KlG+zFeuOs1n2sBtgsYv2GcGAFWyTYjA+KL6X\nBhlJiAcfefkmJYYCFpOpe579QmR8WC75X3qvh3JZa3HASiB9Etev7pLeL++z7jsy\nNLal52yl2ozZixco52Rinn0B3TscPh7zbZOWgW/+XGlSjgptXYWI34y6b+DVGX9g\nouPmJNQnPek3Bv8qGT7L7dkX7Uf3JshY/g17rWBSZSWEOFPh4ODBHuRqitoWogPb\nLjOKf6Y8cfbGqYkUXovkG8JXVEFYpaqUvwa+JVbUawrG6a4r8jn9IXBzy/bsWisn\nW49AnmzrQ8Joy6p9Ig1AwgPQ+TIDAwqKZsazi5b6lstL5VJ8o899X5EmuP4aK65R\nvtjEb/HIOHFtxFc3QR93\n=HXdp\n-----END PGP SIGNATURE-----",
        "payload": "tree aeeba1fe49bc8b2cddf6fc6925e4f56adb02b47e\nparent dbd2c135ddb96bdc3a4e870c2371cb1fac227135\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1447233048 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1447445052 +0100\n\ndon't enforce maxuploadtargets disconnect for whitelisted peers\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d61fcff07112411a1e7c28984777480e0c0873aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d61fcff07112411a1e7c28984777480e0c0873aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d61fcff07112411a1e7c28984777480e0c0873aa/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dbd2c135ddb96bdc3a4e870c2371cb1fac227135",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbd2c135ddb96bdc3a4e870c2371cb1fac227135",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dbd2c135ddb96bdc3a4e870c2371cb1fac227135"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 37,
      "deletions": 3
    },
    "files": [
      {
        "sha": "e714465db16d2884008df8f0833e6c56ca8781ff",
        "filename": "qa/rpc-tests/maxuploadtarget.py",
        "status": "modified",
        "additions": 35,
        "deletions": 2,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d61fcff07112411a1e7c28984777480e0c0873aa/qa/rpc-tests/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d61fcff07112411a1e7c28984777480e0c0873aa/qa/rpc-tests/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxuploadtarget.py?ref=d61fcff07112411a1e7c28984777480e0c0873aa",
        "patch": "@@ -195,7 +195,7 @@ def run_test(self):\n         daily_buffer = 144 * 1000000\n         max_bytes_available = max_bytes_per_day - daily_buffer\n         success_count = max_bytes_available / old_block_size\n-        \n+\n         # 144MB will be reserved for relaying new blocks, so expect this to\n         # succeed for ~70 tries.\n         for i in xrange(success_count):\n@@ -228,7 +228,7 @@ def run_test(self):\n         test_nodes[1].send_message(getdata_request)\n         test_nodes[1].wait_for_disconnect()\n         assert_equal(len(self.nodes[0].getpeerinfo()), 1)\n-        \n+\n         print \"Peer 1 disconnected after trying to download old block\"\n \n         print \"Advancing system time on node to clear counters...\"\n@@ -245,5 +245,38 @@ def run_test(self):\n \n         [c.disconnect_node() for c in connections]\n \n+        #stop and start node 0 with 1MB maxuploadtarget, whitelist 127.0.0.1\n+        print \"Restarting nodes with -whitelist=127.0.0.1\"\n+        stop_node(self.nodes[0], 0)\n+        self.nodes[0] = start_node(0, self.options.tmpdir, [\"-debug\", \"-whitelist=127.0.0.1\", \"-maxuploadtarget=1\", \"-blockmaxsize=999000\"])\n+\n+        #recreate/reconnect 3 test nodes\n+        test_nodes = []\n+        connections = []\n+\n+        for i in xrange(3):\n+            test_nodes.append(TestNode())\n+            connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_nodes[i]))\n+            test_nodes[i].add_connection(connections[i])\n+\n+        NetworkThread().start() # Start up network handling in another thread\n+        [x.wait_for_verack() for x in test_nodes]\n+\n+        #retrieve 20 blocks which should be enough to break the 1MB limit\n+        getdata_request.inv = [CInv(2, big_new_block)]\n+        for i in xrange(20):\n+            test_nodes[1].send_message(getdata_request)\n+            test_nodes[1].sync_with_ping()\n+            assert_equal(test_nodes[1].block_receive_map[big_new_block], i+1)\n+\n+        getdata_request.inv = [CInv(2, big_old_block)]\n+        test_nodes[1].send_message(getdata_request)\n+        test_nodes[1].wait_for_disconnect()\n+        assert_equal(len(self.nodes[0].getpeerinfo()), 3) #node is still connected because of the whitelist\n+\n+        print \"Peer 1 still connected after trying to download old block (whitelisted)\"\n+\n+        [c.disconnect_node() for c in connections]\n+\n if __name__ == '__main__':\n     MaxUploadTest().main()"
      },
      {
        "sha": "4647112d4cfac5ce84a7547a2593d1bb46a3386e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d61fcff07112411a1e7c28984777480e0c0873aa/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d61fcff07112411a1e7c28984777480e0c0873aa/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d61fcff07112411a1e7c28984777480e0c0873aa",
        "patch": "@@ -3867,8 +3867,9 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                     }\n                 }\n                 // disconnect node in case we have reached the outbound limit for serving historical blocks\n+                // never disconnect whitelisted nodes\n                 static const int nOneWeek = 7 * 24 * 60 * 60; // assume > 1 week = historical\n-                if (send && CNode::OutboundTargetReached(true) && ( ((pindexBestHeader != NULL) && (pindexBestHeader->GetBlockTime() - mi->second->GetBlockTime() > nOneWeek)) || inv.type == MSG_FILTERED_BLOCK) )\n+                if (send && CNode::OutboundTargetReached(true) && ( ((pindexBestHeader != NULL) && (pindexBestHeader->GetBlockTime() - mi->second->GetBlockTime() > nOneWeek)) || inv.type == MSG_FILTERED_BLOCK) && !pfrom->fWhitelisted)\n                 {\n                     LogPrint(\"net\", \"historical block serving limit reached, disconnect peer=%d\\n\", pfrom->GetId());\n "
      }
    ]
  },
  {
    "sha": "5760749ed8e244e0befab12434b1d8c9f6c8e90e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NzYwNzQ5ZWQ4ZTI0NGUwYmVmYWIxMjQzNGIxZDhjOWY2YzhlOTBl",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-13T20:10:51Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-13T20:10:51Z"
      },
      "message": "[docs] rename reducetraffic.md to reduce-traffic.md",
      "tree": {
        "sha": "953f547eb9b7718fa312f6b243ce1cdf4c545b94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/953f547eb9b7718fa312f6b243ce1cdf4c545b94"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5760749ed8e244e0befab12434b1d8c9f6c8e90e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWRkPLAAoJECnUvLZBb1Psu44P/0OkDecVUjrPmI6yUSePHkwh\nvt4ro8f12FF4DchUHFAn3MURVYNRiGDOFuz+VKPmmbKHKTFNyNYtiuNetpwTQt7n\n7ryVlIuxAzzXxsqOIAmPxMWltIWorO0i2V0LI6VbagM7505VZPJB7zFetLLRxEFY\nZK6peEjTV0maREwya53BZ2ozxCJ918GMc5i1x8YucpWtxSlHeZ3bEFk1EGtkh8oJ\n07aXivwvU/IRywp1KPIc0q7iKbb7hVzAs1Jw8wgLB12cIzUhISjaNrBm6qwSKC+F\nGV5/p2sD1qRKMFaxRstwUJh4js++C7yBe6Swg9cgx/qeSEvzMhIdOgYjlk7xAY6A\nqHjrxmsVVpFp8Hfgys4wEXklOwxPYJPxsHE0eTghsrLQ+Jvu4mgMpL5d2m8FI6Tp\n+EpqnF8RwTWu09rqFvqJTOHYaKiinI2bpR8gvaZ59M2kyCCbi+TI0HGbBZuNrZ/v\nAE3R5cAgMW88C5gx3gXgp1J6C+ZXuJXUMA5MOfss2YxE1gexD2VaC5AWbpDGGtEG\nvS8fvj1fgwRxU4iGSUPNd6gd8Wo6upy+n+qvDgxUcyCXb8/S/odOahUWTkcGCCTQ\n3fb1iXr4o44q7BtND/o4gqM+H4ETiuQXW/oS/to00louFQcpLiXIV+zAqBvGxlLZ\n+h8oMkSdyK3QMRFHqTiA\n=kx/m\n-----END PGP SIGNATURE-----",
        "payload": "tree 953f547eb9b7718fa312f6b243ce1cdf4c545b94\nparent d61fcff07112411a1e7c28984777480e0c0873aa\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1447445451 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1447445451 +0100\n\n[docs] rename reducetraffic.md to reduce-traffic.md\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5760749ed8e244e0befab12434b1d8c9f6c8e90e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5760749ed8e244e0befab12434b1d8c9f6c8e90e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5760749ed8e244e0befab12434b1d8c9f6c8e90e/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d61fcff07112411a1e7c28984777480e0c0873aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d61fcff07112411a1e7c28984777480e0c0873aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d61fcff07112411a1e7c28984777480e0c0873aa"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 3,
      "deletions": 35
    },
    "files": [
      {
        "sha": "a79571913acb1e9c3f6e3ec08401075005ef4524",
        "filename": "doc/reducetraffic.md",
        "status": "removed",
        "additions": 0,
        "deletions": 35,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d61fcff07112411a1e7c28984777480e0c0873aa/doc/reducetraffic.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d61fcff07112411a1e7c28984777480e0c0873aa/doc/reducetraffic.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/reducetraffic.md?ref=d61fcff07112411a1e7c28984777480e0c0873aa",
        "patch": "@@ -1,35 +0,0 @@\n-Reduce Traffic\n-==============\n-\n-Some node operators need to deal with bandwith caps imposed by their ISPs.\n-\n-By default, bitcoin-core allows up to 125 connections to different peers, 8 of\n-which are outbound. You can therefore, have at most 117 inbound connections.\n-\n-The default settings can result in relatively significant traffic consumption.\n-\n-Ways to reduce traffic:\n-\n-## 1. Use `-maxuploadtarget=<MiB per day>`\n-\n-A major component of the traffic is caused by serving historic blocks to other nodes\n-during the initial blocks download phase (syncing up a new node).\n-This option can be specified in MiB per day and is turned off by default.\n-This is *not* a hard limit; only a threshold to minimize the outbound\n-traffic. When the limit is about to be reached, the uploaded data is cut by no\n-longer serving historic blocks (blocks older than one week).\n-Keep in mind that new nodes require other nodes that are willing to serve\n-historic blocks. **The recommended minimum is 144 blocks per day (max. 144MB\n-per day)**\n-\n-## 2. Disable \"listening\" (`-listen=0`)\n-\n-Disabling listening will result in fewer nodes connected (remember the maximum of 8\n-outbound peers). Fewer nodes will result in less traffic usage as you are relaying\n-blocks and transactions to fewer nodes.\n-\n-## 3. Reduce maximum connections (`-maxconnections=<num>`)\n-\n-Reducing the maximum connected nodes to a miniumum could be desirable if traffic\n-limits are tiny. Keep in mind that bitcoin's trustless model works best if you are\n-connected to a handful of nodes."
      },
      {
        "sha": "e4dcc60cff303000622ecd4806b84de4b2a88c22",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5760749ed8e244e0befab12434b1d8c9f6c8e90e/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5760749ed8e244e0befab12434b1d8c9f6c8e90e/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=5760749ed8e244e0befab12434b1d8c9f6c8e90e",
        "patch": "@@ -184,6 +184,9 @@ This option can be specified in MiB per day and is turned off by default\n (`-maxuploadtarget=0`).\n The recommended minimum is 144 * MAX_BLOCK_SIZE (currently 144MB) per day.\n \n+Whitelisted peers will never be disconnected, although their traffic counts for\n+calculating the target.\n+\n A more detailed documentation about keeping traffic low can be found in\n [/doc/reducetraffic.md](/doc/reducetraffic.md).\n "
      }
    ]
  },
  {
    "sha": "748321eb5ba709feed716a3ccd0624a27767119f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDgzMjFlYjViYTcwOWZlZWQ3MTZhM2NjZDA2MjRhMjc3NjcxMTlm",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-11-13T20:35:04Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-11-13T20:35:04Z"
      },
      "message": "Add mediantime field to getblockchaininfo RPC call\n\nUseful now that BIP113 is enforced for transactions entering the\nmempool. Was previously only (indirectly) available by calling\ngetblocktemplate, a relatively expensive RPC call.",
      "tree": {
        "sha": "380a915c7225a5e3cc25b7bde340fd9f25fdc1b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/380a915c7225a5e3cc25b7bde340fd9f25fdc1b3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/748321eb5ba709feed716a3ccd0624a27767119f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGrBAABCACVBQJWRko9XhSAAAAAABUAQGJsb2NraGFzaEBiaXRjb2luLm9yZzAw\nMDAwMDAwMDAwMDAwMDAwMDlmYjY0ZjMwOWY4MTg3ZjNiYjk2Y2U4NmRhOWU2ZTkx\nYzc0ZDU3NmU3ODdhODEvFIAAAAAAFQARcGthLWFkZHJlc3NAZ251cGcub3JncGV0\nZUBwZXRlcnRvZC5vcmcACgkQwIXyHOf0udzVJggAi4B47KhAgw8ZKo0GeqTgIL6M\nQfXrKYqG95fylZYem5uGP+rkwbmzJIbrsIk2rpYuiMTeRzysX3fa3Zz1IQcaBF1Z\nLtMEDuKHiuGbLAA9iSWSnqWspllTbk6LVybueHE5XjxL7mdFKeOOL9ksStFiQ71l\nqQPTfiOWK+nRz5/8wxdzlkZwsnQr+0E3FyzH8nOsfo+O2AzUHoFe92Bkrxy2nmOh\nk/cWXHUMCJ7EkR2im6ZsRxFgz7MEyPzqNP8F7Dx4/scVWSOU0JFAj/OKWxnwHTtB\nyacA1bGd2f7w+HK1zSEycGd1+BspsEPT+rihLK7tZ3qu/CMbk99074f9SXNKMw==\n=Ik/P\n-----END PGP SIGNATURE-----",
        "payload": "tree 380a915c7225a5e3cc25b7bde340fd9f25fdc1b3\nparent dbd2c135ddb96bdc3a4e870c2371cb1fac227135\nauthor Peter Todd <pete@petertodd.org> 1447446904 -0500\ncommitter Peter Todd <pete@petertodd.org> 1447446904 -0500\n\nAdd mediantime field to getblockchaininfo RPC call\n\nUseful now that BIP113 is enforced for transactions entering the\nmempool. Was previously only (indirectly) available by calling\ngetblocktemplate, a relatively expensive RPC call.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/748321eb5ba709feed716a3ccd0624a27767119f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/748321eb5ba709feed716a3ccd0624a27767119f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/748321eb5ba709feed716a3ccd0624a27767119f/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dbd2c135ddb96bdc3a4e870c2371cb1fac227135",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbd2c135ddb96bdc3a4e870c2371cb1fac227135",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dbd2c135ddb96bdc3a4e870c2371cb1fac227135"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "bc86e181c497869bd63039fcc232dba2eaf87a58",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/748321eb5ba709feed716a3ccd0624a27767119f/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/748321eb5ba709feed716a3ccd0624a27767119f/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=748321eb5ba709feed716a3ccd0624a27767119f",
        "patch": "@@ -639,6 +639,7 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n     obj.push_back(Pair(\"headers\",               pindexBestHeader ? pindexBestHeader->nHeight : -1));\n     obj.push_back(Pair(\"bestblockhash\",         chainActive.Tip()->GetBlockHash().GetHex()));\n     obj.push_back(Pair(\"difficulty\",            (double)GetDifficulty()));\n+    obj.push_back(Pair(\"mediantime\",            (int64_t)chainActive.Tip()->GetMedianTimePast()));\n     obj.push_back(Pair(\"verificationprogress\",  Checkpoints::GuessVerificationProgress(Params().Checkpoints(), chainActive.Tip())));\n     obj.push_back(Pair(\"chainwork\",             chainActive.Tip()->nChainWork.GetHex()));\n     obj.push_back(Pair(\"pruned\",                fPruneMode));"
      }
    ]
  },
  {
    "sha": "61e1eb2e1c038ef10009921d0e991b4d1f262f51",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MWUxZWIyZTFjMDM4ZWYxMDAwOTkyMWQwZTk5MWI0ZDFmMjYyZjUx",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-11-13T20:45:29Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-11-13T20:45:29Z"
      },
      "message": "Actually use includeWatching value in fundrawtransaction\n\nPreviously if you called fundrawtransaction and set includeWatching to\nfalse it'd act as through you set it to true.",
      "tree": {
        "sha": "aca32db5092d2487a855d00c8a3180336a94f65c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aca32db5092d2487a855d00c8a3180336a94f65c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/61e1eb2e1c038ef10009921d0e991b4d1f262f51",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGrBAABCACVBQJWRkwnXhSAAAAAABUAQGJsb2NraGFzaEBiaXRjb2luLm9yZzAw\nMDAwMDAwMDAwMDAwMDAwMDlmYjY0ZjMwOWY4MTg3ZjNiYjk2Y2U4NmRhOWU2ZTkx\nYzc0ZDU3NmU3ODdhODEvFIAAAAAAFQARcGthLWFkZHJlc3NAZ251cGcub3JncGV0\nZUBwZXRlcnRvZC5vcmcACgkQwIXyHOf0udwi3Af9Fc/TJ/qpazl+t6RPNn6Js8zi\nR3xVljGPZHk5pZPL22HXv7VSpt427a4XHZN4k7RPnbkRC0Zf35BXF5ubdw5P4bge\ng3525sGRXAv4uQ+I9sKaC+bOvTSlhdl2XT5GTUFS7orKycQmc5A+owTpK3tNBBGS\nkH6IfI3DKACimDF026TZqavR0fQ+Ldy5bQblZCbD7dTlo1KSZaTmSb8E/BoeCZPK\nP4+f8hULZj10stXbj13N1vONsdJMCWaY0Va7/T0ICKsi5Tf0NqzwYp+1dNhisqB8\nEMnb5MpuMYgc33Y19k/SVt3qWCtky7zWnH/Z9JuKzQIfyK3caHX1/NfURA/dGQ==\n=goDF\n-----END PGP SIGNATURE-----",
        "payload": "tree aca32db5092d2487a855d00c8a3180336a94f65c\nparent dbd2c135ddb96bdc3a4e870c2371cb1fac227135\nauthor Peter Todd <pete@petertodd.org> 1447447529 -0500\ncommitter Peter Todd <pete@petertodd.org> 1447447529 -0500\n\nActually use includeWatching value in fundrawtransaction\n\nPreviously if you called fundrawtransaction and set includeWatching to\nfalse it'd act as through you set it to true.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61e1eb2e1c038ef10009921d0e991b4d1f262f51",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/61e1eb2e1c038ef10009921d0e991b4d1f262f51",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61e1eb2e1c038ef10009921d0e991b4d1f262f51/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dbd2c135ddb96bdc3a4e870c2371cb1fac227135",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbd2c135ddb96bdc3a4e870c2371cb1fac227135",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dbd2c135ddb96bdc3a4e870c2371cb1fac227135"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0bd1303272ba4883a5fe4d08cb869e176c89f154",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61e1eb2e1c038ef10009921d0e991b4d1f262f51/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61e1eb2e1c038ef10009921d0e991b4d1f262f51/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=61e1eb2e1c038ef10009921d0e991b4d1f262f51",
        "patch": "@@ -2420,7 +2420,7 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n \n     bool includeWatching = false;\n     if (params.size() > 1)\n-        includeWatching = true;\n+        includeWatching = params[1].get_bool();\n \n     CMutableTransaction tx(origTx);\n     CAmount nFee;"
      }
    ]
  },
  {
    "sha": "10953a7d3241f66ab3b2921e0825d6857f64f6f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMDk1M2E3ZDMyNDFmNjZhYjNiMjkyMWUwODI1ZDY4NTdmNjRmNmY3",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-11-13T20:52:07Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-11-13T20:53:46Z"
      },
      "message": "Better error message for fundrawtransaction w/ empty vout\n\nPreviously this case failed deep in Cwallet::CreateTransaction() with\nthe error message \"Transaction amounts must be positive\"",
      "tree": {
        "sha": "33aaafb75be171848b1147396d8b26ab36d3e37e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33aaafb75be171848b1147396d8b26ab36d3e37e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10953a7d3241f66ab3b2921e0825d6857f64f6f7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGrBAABCACVBQJWRk3fXhSAAAAAABUAQGJsb2NraGFzaEBiaXRjb2luLm9yZzAw\nMDAwMDAwMDAwMDAwMDAwMDlmYjY0ZjMwOWY4MTg3ZjNiYjk2Y2U4NmRhOWU2ZTkx\nYzc0ZDU3NmU3ODdhODEvFIAAAAAAFQARcGthLWFkZHJlc3NAZ251cGcub3JncGV0\nZUBwZXRlcnRvZC5vcmcACgkQwIXyHOf0udxszQf+Kj9QJu47H7i9SD//2tfiGqEm\nEapxwzn+JKFm0+EPmR5lh39/YxqenD8d6WTIj2Ofuhlc4nE+d4iUh+MkjJJI8gP+\n5ABqdl9NUnHS/JsWevQYnv/cqdd2rCp3Lm9L8qAMz6q+lEcmOGGHXMdPFGtouI6c\nTFr3tcMc2pJV6In6cqQIsNQBrIcLOqEhF31ra2wMmqZZcW9wjPnV8DH+gc5oOlEp\nKeG4/GRv0hNmCPO7463vabXKuQHbt2EG4rBS1wajYOghuU7Dj1QBf4P3eOLPwyIh\nP4M9cA3zEGOZuTUaxg9pYldhsODNRg4TfrZA2meoIpz7AktKhs3Up5LN/q6E7Q==\n=9bUH\n-----END PGP SIGNATURE-----",
        "payload": "tree 33aaafb75be171848b1147396d8b26ab36d3e37e\nparent 61e1eb2e1c038ef10009921d0e991b4d1f262f51\nauthor Peter Todd <pete@petertodd.org> 1447447927 -0500\ncommitter Peter Todd <pete@petertodd.org> 1447448026 -0500\n\nBetter error message for fundrawtransaction w/ empty vout\n\nPreviously this case failed deep in Cwallet::CreateTransaction() with\nthe error message \"Transaction amounts must be positive\"\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10953a7d3241f66ab3b2921e0825d6857f64f6f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10953a7d3241f66ab3b2921e0825d6857f64f6f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10953a7d3241f66ab3b2921e0825d6857f64f6f7/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "61e1eb2e1c038ef10009921d0e991b4d1f262f51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61e1eb2e1c038ef10009921d0e991b4d1f262f51",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/61e1eb2e1c038ef10009921d0e991b4d1f262f51"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7b7c9b325638cc919db42758fc9e9b903cd7ae9b",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10953a7d3241f66ab3b2921e0825d6857f64f6f7/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10953a7d3241f66ab3b2921e0825d6857f64f6f7/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=10953a7d3241f66ab3b2921e0825d6857f64f6f7",
        "patch": "@@ -2418,6 +2418,9 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     if (!DecodeHexTx(origTx, params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n \n+    if (origTx.vout.size() == 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"TX must have at least one output\");\n+\n     bool includeWatching = false;\n     if (params.size() > 1)\n         includeWatching = params[1].get_bool();"
      }
    ]
  },
  {
    "sha": "c277a63ed70d063541e1e939917159129c102fec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjc3YTYzZWQ3MGQwNjM1NDFlMWU5Mzk5MTcxNTkxMjljMTAyZmVj",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-11-13T21:36:54Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-11-13T21:36:54Z"
      },
      "message": "Clarify nLockTime-by-time comment in CheckFinalTx()",
      "tree": {
        "sha": "a530e4799639b35b9f2d576a7f206b1fbafb279d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a530e4799639b35b9f2d576a7f206b1fbafb279d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c277a63ed70d063541e1e939917159129c102fec",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGrBAABCACVBQJWRlg4XhSAAAAAABUAQGJsb2NraGFzaEBiaXRjb2luLm9yZzAw\nMDAwMDAwMDAwMDAwMDAwZDdmNWUyYWNjZGQ2NjBlYzgyN2VhNjQzZjY4ODkwMTZh\nYjNlZTZiZWZiNjkyNDQvFIAAAAAAFQARcGthLWFkZHJlc3NAZ251cGcub3JncGV0\nZUBwZXRlcnRvZC5vcmcACgkQwIXyHOf0udyfeQgAiOb+/svwVXiec9gMu/6sdIUx\n6o5kqFCNivPhkV5ilK8pvILoZXx5Hi9EPKo56WR/GMmKh5H0ELdB9qXL35wTgrGk\nnmTSfsMS+cmKdwv5kBwxrc+coBAwoktgFIzHrFSasr+YR/e5EKB8yIIvf8XbaTWF\nQog9te3aXetmqhxVYSEpxEAXZkipskF2zpylRm2D8vjIpVxiUPyR/3qMOXBXjJNG\nLSH/qAk5ZN79WUPx6RENNXg7tv3lsMESHXTFg8ZA3EKPYg2x4uJj0xj5yYowWUvP\n5+qxm9MWTmsIkoZWbVyI0Tis2Rm1i90Tlvf5MAOWxaJXkD5v6F0SKxPbT8Ljmg==\n=IIMm\n-----END PGP SIGNATURE-----",
        "payload": "tree a530e4799639b35b9f2d576a7f206b1fbafb279d\nparent 748321eb5ba709feed716a3ccd0624a27767119f\nauthor Peter Todd <pete@petertodd.org> 1447450614 -0500\ncommitter Peter Todd <pete@petertodd.org> 1447450614 -0500\n\nClarify nLockTime-by-time comment in CheckFinalTx()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c277a63ed70d063541e1e939917159129c102fec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c277a63ed70d063541e1e939917159129c102fec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c277a63ed70d063541e1e939917159129c102fec/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "748321eb5ba709feed716a3ccd0624a27767119f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/748321eb5ba709feed716a3ccd0624a27767119f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/748321eb5ba709feed716a3ccd0624a27767119f"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "baef017dc103e60970f480692dec55de1f693074",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c277a63ed70d063541e1e939917159129c102fec/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c277a63ed70d063541e1e939917159129c102fec/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c277a63ed70d063541e1e939917159129c102fec",
        "patch": "@@ -670,10 +670,11 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n     // IsFinalTx() with one more than chainActive.Height().\n     const int nBlockHeight = chainActive.Height() + 1;\n \n-    // Timestamps on the other hand don't get any special treatment,\n-    // because we can't know what timestamp the next block will have,\n-    // and there aren't timestamp applications where it matters.\n-    // However this changes once median past time-locks are enforced:\n+    // BIP113 will require that time-locked transactions have nLockTime set to\n+    // less than the median time of the previous block they're contained in.\n+    // When the next block is created its previous block will be the current\n+    // chain tip, so we use that to calculate the median time passed to\n+    // IsFinalTx() if LOCKTIME_MEDIAN_TIME_PAST is set.\n     const int64_t nBlockTime = (flags & LOCKTIME_MEDIAN_TIME_PAST)\n                              ? chainActive.Tip()->GetMedianTimePast()\n                              : GetAdjustedTime();"
      }
    ]
  },
  {
    "sha": "7259769d7f47c550a2c136585d94dc0e1dac24ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjU5NzY5ZDdmNDdjNTUwYTJjMTM2NTg1ZDk0ZGMwZTFkYWMyNGZm",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-11-13T21:49:47Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-11-13T21:49:47Z"
      },
      "message": "Document new mediantime field in getblockchaininfo",
      "tree": {
        "sha": "f088c66c121a27cbd9cbb325df88bff874ff05b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f088c66c121a27cbd9cbb325df88bff874ff05b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7259769d7f47c550a2c136585d94dc0e1dac24ff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7259769d7f47c550a2c136585d94dc0e1dac24ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7259769d7f47c550a2c136585d94dc0e1dac24ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7259769d7f47c550a2c136585d94dc0e1dac24ff/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c277a63ed70d063541e1e939917159129c102fec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c277a63ed70d063541e1e939917159129c102fec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c277a63ed70d063541e1e939917159129c102fec"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "989fc3704cbcf9b97996ce1bb8805ec51a1cf76e",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7259769d7f47c550a2c136585d94dc0e1dac24ff/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7259769d7f47c550a2c136585d94dc0e1dac24ff/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=7259769d7f47c550a2c136585d94dc0e1dac24ff",
        "patch": "@@ -608,6 +608,7 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n             \"  \\\"headers\\\": xxxxxx,        (numeric) the current number of headers we have validated\\n\"\n             \"  \\\"bestblockhash\\\": \\\"...\\\", (string) the hash of the currently best block\\n\"\n             \"  \\\"difficulty\\\": xxxxxx,     (numeric) the current difficulty\\n\"\n+            \"  \\\"mediantime\\\": xxxxxx,     (numeric) median time for the current best block\\n\"\n             \"  \\\"verificationprogress\\\": xxxx, (numeric) estimate of verification progress [0..1]\\n\"\n             \"  \\\"chainwork\\\": \\\"xxxx\\\"     (string) total amount of work in active chain, in hexadecimal\\n\"\n             \"  \\\"pruned\\\": xx,             (boolean) if the blocks are subject to pruning\\n\""
      }
    ]
  },
  {
    "sha": "6531f17a78e1e22c441d254eab83ce0a6d72b044",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTMxZjE3YTc4ZTFlMjJjNDQxZDI1NGVhYjgzY2UwYTZkNzJiMDQ0",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-11-13T21:57:10Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-11-13T21:57:10Z"
      },
      "message": "Add mediantime field to getblock and getblockheader",
      "tree": {
        "sha": "d4423cb25cd269a068a36a5f56a47382688a9ec8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4423cb25cd269a068a36a5f56a47382688a9ec8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6531f17a78e1e22c441d254eab83ce0a6d72b044",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGrBAABCACVBQJWRlzEXhSAAAAAABUAQGJsb2NraGFzaEBiaXRjb2luLm9yZzAw\nMDAwMDAwMDAwMDAwMDAwZDdmNWUyYWNjZGQ2NjBlYzgyN2VhNjQzZjY4ODkwMTZh\nYjNlZTZiZWZiNjkyNDQvFIAAAAAAFQARcGthLWFkZHJlc3NAZ251cGcub3JncGV0\nZUBwZXRlcnRvZC5vcmcACgkQwIXyHOf0udwtlwf+K+zuWxs7trrqc0r3iBi7CSwR\nmequpZgNk/I1PYjYYWQNeY0243ZtpWDmKRROCoQcp2iHG+lpr6hAXjTbdKgO7s/G\nSN845Wd2vh0eNTG9qvqASyO0NIu0w+8cpLIt2dLlbl3+WUYcAw/sFxFfV1TjlAPc\nz8o7BISwq0ldUlX9eWE5BNALvODIsikT6wPL2AG2e9PJLaJlxMlYO+t8oLsdF/Sk\nSHPlfLJzeNqLWuiqutU4yEHCAv1W8AcQkZH3KyJ35xKD77AKw4ZW4mUfp7BF+jzo\nfza7R2ITFULeyl4USJB0MpCUaVVbBVpZP3eX+yWve/6TXh9FE+HwjSe7CfDO6Q==\n=w7fc\n-----END PGP SIGNATURE-----",
        "payload": "tree d4423cb25cd269a068a36a5f56a47382688a9ec8\nparent 7259769d7f47c550a2c136585d94dc0e1dac24ff\nauthor Peter Todd <pete@petertodd.org> 1447451830 -0500\ncommitter Peter Todd <pete@petertodd.org> 1447451830 -0500\n\nAdd mediantime field to getblock and getblockheader\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6531f17a78e1e22c441d254eab83ce0a6d72b044",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6531f17a78e1e22c441d254eab83ce0a6d72b044",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6531f17a78e1e22c441d254eab83ce0a6d72b044/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7259769d7f47c550a2c136585d94dc0e1dac24ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7259769d7f47c550a2c136585d94dc0e1dac24ff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7259769d7f47c550a2c136585d94dc0e1dac24ff"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "012370ed10995e6cd7bbe030ad4abab2cfe259e5",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6531f17a78e1e22c441d254eab83ce0a6d72b044/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6531f17a78e1e22c441d254eab83ce0a6d72b044/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=6531f17a78e1e22c441d254eab83ce0a6d72b044",
        "patch": "@@ -71,6 +71,7 @@ UniValue blockheaderToJSON(const CBlockIndex* blockindex)\n     result.push_back(Pair(\"version\", blockindex->nVersion));\n     result.push_back(Pair(\"merkleroot\", blockindex->hashMerkleRoot.GetHex()));\n     result.push_back(Pair(\"time\", (int64_t)blockindex->nTime));\n+    result.push_back(Pair(\"mediantime\", (int64_t)blockindex->GetMedianTimePast()));\n     result.push_back(Pair(\"nonce\", (uint64_t)blockindex->nNonce));\n     result.push_back(Pair(\"bits\", strprintf(\"%08x\", blockindex->nBits)));\n     result.push_back(Pair(\"difficulty\", GetDifficulty(blockindex)));\n@@ -111,6 +112,7 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n     }\n     result.push_back(Pair(\"tx\", txs));\n     result.push_back(Pair(\"time\", block.GetBlockTime()));\n+    result.push_back(Pair(\"mediantime\", (int64_t)blockindex->GetMedianTimePast()));\n     result.push_back(Pair(\"nonce\", (uint64_t)block.nNonce));\n     result.push_back(Pair(\"bits\", strprintf(\"%08x\", block.nBits)));\n     result.push_back(Pair(\"difficulty\", GetDifficulty(blockindex)));\n@@ -313,6 +315,7 @@ UniValue getblockheader(const UniValue& params, bool fHelp)\n             \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n             \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n             \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n             \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n             \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n             \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n@@ -374,6 +377,7 @@ UniValue getblock(const UniValue& params, bool fHelp)\n             \"     ,...\\n\"\n             \"  ],\\n\"\n             \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n             \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n             \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n             \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\""
      }
    ]
  },
  {
    "sha": "b3ae384a8d1606948427b7bd2059d781a779b62a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiM2FlMzg0YThkMTYwNjk0ODQyN2I3YmQyMDU5ZDc4MWE3NzliNjJh",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-11-13T22:19:33Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-11-13T22:19:33Z"
      },
      "message": "Remove LOCK(cs_main) from decodescript\n\nCompletely static RPC call that doesn't change or even look at mutable\nstate anywhere.",
      "tree": {
        "sha": "8340228861d4a825d2bc180a62aff4a18b77035d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8340228861d4a825d2bc180a62aff4a18b77035d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3ae384a8d1606948427b7bd2059d781a779b62a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGrBAABCACVBQJWRmIYXhSAAAAAABUAQGJsb2NraGFzaEBiaXRjb2luLm9yZzAw\nMDAwMDAwMDAwMDAwMDAwNmE0OWY0ODg4ODI1ZjM0Y2Q0ZWE1YmYyNmI0NWI0OTll\nYjc0ZGJkNzhkYWE1ODMvFIAAAAAAFQARcGthLWFkZHJlc3NAZ251cGcub3JncGV0\nZUBwZXRlcnRvZC5vcmcACgkQwIXyHOf0udwEnQf/XFIVeza4NAHNTdDxIwJyyQNK\nbCZC6ueTuKMwJ7vFneSajQ8CIe2f+x0Ah/kLV5WuhvU3XT9DVNcVWAx6dp0VC8Kn\nWiYa7MiSp8Dm9OlR2lD2QO5L+/QS6ZlHs5LYY/ZdEH/PPJg/TuE8uFGL2B/ByUNk\nDbYquFP9LQ+fTFyVQGxNOG/dVezNWlPrJxdcn6wWA8R7AE7JOColgrVseJs3fT8t\nLTJ6JSJ3ZpPOkEvrIFacO8b1R5e9RnwkfHgGkoAodESG4O8KdV7c3XNMvDUts2lH\no585JYuz0rFZhMmD3EqD5dQexQ98/Q7eOtFpU1lxYfat1YFLYXb+fUTBB0M80w==\n=BQ92\n-----END PGP SIGNATURE-----",
        "payload": "tree 8340228861d4a825d2bc180a62aff4a18b77035d\nparent dbd2c135ddb96bdc3a4e870c2371cb1fac227135\nauthor Peter Todd <pete@petertodd.org> 1447453173 -0500\ncommitter Peter Todd <pete@petertodd.org> 1447453173 -0500\n\nRemove LOCK(cs_main) from decodescript\n\nCompletely static RPC call that doesn't change or even look at mutable\nstate anywhere.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3ae384a8d1606948427b7bd2059d781a779b62a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3ae384a8d1606948427b7bd2059d781a779b62a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3ae384a8d1606948427b7bd2059d781a779b62a/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dbd2c135ddb96bdc3a4e870c2371cb1fac227135",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbd2c135ddb96bdc3a4e870c2371cb1fac227135",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dbd2c135ddb96bdc3a4e870c2371cb1fac227135"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3bda4592450675fdc1efcbf64ab7a17c152cd228",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3ae384a8d1606948427b7bd2059d781a779b62a/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3ae384a8d1606948427b7bd2059d781a779b62a/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=b3ae384a8d1606948427b7bd2059d781a779b62a",
        "patch": "@@ -506,7 +506,6 @@ UniValue decodescript(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"decodescript\", \"\\\"hexstring\\\"\")\n         );\n \n-    LOCK(cs_main);\n     RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR));\n \n     UniValue r(UniValue::VOBJ);"
      }
    ]
  },
  {
    "sha": "e0a5ef84272b627a531f6bb46eb34c0ff16cef36",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMGE1ZWY4NDI3MmI2MjdhNTMxZjZiYjQ2ZWIzNGMwZmYxNmNlZjM2",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-14T05:16:39Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-14T05:17:20Z"
      },
      "message": "Merge pull request #7010\n\n10953a7 Better error message for fundrawtransaction w/ empty vout (Peter Todd)\n61e1eb2 Actually use includeWatching value in fundrawtransaction (Peter Todd)",
      "tree": {
        "sha": "33aaafb75be171848b1147396d8b26ab36d3e37e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33aaafb75be171848b1147396d8b26ab36d3e37e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0a5ef84272b627a531f6bb46eb34c0ff16cef36",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCAAGBQJWRsPgAAoJEOq1r5TZ6avnCiIQAKtX3X/hmJ85dZzEIv+9y6PA\nZ1YOHDqFRXArAocp3LUTFLuT8qCCTOEvnxJcFJ1eMGNn86IVJSliJk5GQXBpmiWi\n6JFUY6GC6H9xsPaCDTnE4UY+2jKgqGHPajxgdJDMJ3PazEFBnR2rV99JuNe4t5xB\nVCRj+DZeJ0wfQQrcDfhj91rBxUMwxrRJFFMBtWJqwfzmfFYikC5ifERARsFgRRl3\nG31yo6sHBjZB9pX5Ve6jKbyhWYV32dl/qMM8ylnkNcthweLBZdRS286xWR3NDIQY\nGEuaepwjnGA5WNi74/w+yeytCjmH6vk3g66rW0rdEd7M7ZG6Qub0e1xb6UBHIO4c\nWGeGb4lcjRj9pdfjApWlxLv5ue5D0FWHuUhz2bXXYT27wlsxMsZxGVv5cA3O2noZ\n+Bq18y1I0Il/qjgpGzEhoLwyGC/Ltn8SqmfC8PMtgynk4amDRY1j342AqRuYwx53\nAJE1DxZfAQav1qiTCaHPqdtQaIH6WDNhdG+mG9qjaOZDsji5xbAOgQEmez3Jk5ti\nkRrrYv7YdsB8pAq/n+4O97ibuDUZBHJvDdCW9tvQTHYjKCySQfUGFj452DJ0bJWG\n+pWEMjpYroda58Bqbas/eV0lqnts6WJoiKbfbO3KZvZISz6Ofbdi/MBybkHvoxQL\n+LtwQbw7cad3yNIH6C9F\n=8rNI\n-----END PGP SIGNATURE-----",
        "payload": "tree 33aaafb75be171848b1147396d8b26ab36d3e37e\nparent dbd2c135ddb96bdc3a4e870c2371cb1fac227135\nparent 10953a7d3241f66ab3b2921e0825d6857f64f6f7\nauthor Gregory Maxwell <greg@xiph.org> 1447478199 -0800\ncommitter Gregory Maxwell <greg@xiph.org> 1447478240 -0800\n\nMerge pull request #7010\n\n10953a7 Better error message for fundrawtransaction w/ empty vout (Peter Todd)\n61e1eb2 Actually use includeWatching value in fundrawtransaction (Peter Todd)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0a5ef84272b627a531f6bb46eb34c0ff16cef36",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0a5ef84272b627a531f6bb46eb34c0ff16cef36",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0a5ef84272b627a531f6bb46eb34c0ff16cef36/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dbd2c135ddb96bdc3a4e870c2371cb1fac227135",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbd2c135ddb96bdc3a4e870c2371cb1fac227135",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dbd2c135ddb96bdc3a4e870c2371cb1fac227135"
      },
      {
        "sha": "10953a7d3241f66ab3b2921e0825d6857f64f6f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10953a7d3241f66ab3b2921e0825d6857f64f6f7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10953a7d3241f66ab3b2921e0825d6857f64f6f7"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7b7c9b325638cc919db42758fc9e9b903cd7ae9b",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0a5ef84272b627a531f6bb46eb34c0ff16cef36/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0a5ef84272b627a531f6bb46eb34c0ff16cef36/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=e0a5ef84272b627a531f6bb46eb34c0ff16cef36",
        "patch": "@@ -2418,9 +2418,12 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     if (!DecodeHexTx(origTx, params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n \n+    if (origTx.vout.size() == 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"TX must have at least one output\");\n+\n     bool includeWatching = false;\n     if (params.size() > 1)\n-        includeWatching = true;\n+        includeWatching = params[1].get_bool();\n \n     CMutableTransaction tx(origTx);\n     CAmount nFee;"
      }
    ]
  },
  {
    "sha": "36baa9f4758716e3600945570ebb1a80a554f3c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNmJhYTlmNDc1ODcxNmUzNjAwOTQ1NTcwZWJiMWE4MGE1NTRmM2M5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-14T07:21:25Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-14T07:24:44Z"
      },
      "message": "Merge pull request #7013\n\nb3ae384 Remove LOCK(cs_main) from decodescript (Peter Todd)",
      "tree": {
        "sha": "dc6b9bf7ac0719550eed61572af74d350f4d2c9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc6b9bf7ac0719550eed61572af74d350f4d2c9d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36baa9f4758716e3600945570ebb1a80a554f3c9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWRuG8AAoJEHSBCwEjRsmmoIYH/RqhqaZHN0oytreOBscigDyB\nZxLlEtdOJnoccZzJYiUOXIi17aU0RBQnAiD43f4e9cGmQdRHF43qva/ktoF/LkRB\n1WZsspNFPQGi/wui14COI6Ei2LhFVbcjHGdrVusNy3YhoVxhWUz9O3Wc/AWGQLGN\nCXVidMsKdJ9ZWdq5kqS+Apx/Ildl3F49HDqY7RaspVEyS584sScPPwzhCqhJdI93\nLHscNmPVLFniGuJhWoozSqzWkT3r0QuBWwQYK4z3FFxRNI12u0Uw5m3MOJ8ohvN+\nDB01F85+et/1gF68VaCUWduYkugJAtV7sQQfyiRliwbizjSxm/lEMq9eHcjyPLs=\n=16zi\n-----END PGP SIGNATURE-----",
        "payload": "tree dc6b9bf7ac0719550eed61572af74d350f4d2c9d\nparent e0a5ef84272b627a531f6bb46eb34c0ff16cef36\nparent b3ae384a8d1606948427b7bd2059d781a779b62a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1447485685 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1447485884 +0100\n\nMerge pull request #7013\n\nb3ae384 Remove LOCK(cs_main) from decodescript (Peter Todd)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36baa9f4758716e3600945570ebb1a80a554f3c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36baa9f4758716e3600945570ebb1a80a554f3c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36baa9f4758716e3600945570ebb1a80a554f3c9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0a5ef84272b627a531f6bb46eb34c0ff16cef36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0a5ef84272b627a531f6bb46eb34c0ff16cef36",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0a5ef84272b627a531f6bb46eb34c0ff16cef36"
      },
      {
        "sha": "b3ae384a8d1606948427b7bd2059d781a779b62a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3ae384a8d1606948427b7bd2059d781a779b62a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b3ae384a8d1606948427b7bd2059d781a779b62a"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3bda4592450675fdc1efcbf64ab7a17c152cd228",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36baa9f4758716e3600945570ebb1a80a554f3c9/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36baa9f4758716e3600945570ebb1a80a554f3c9/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=36baa9f4758716e3600945570ebb1a80a554f3c9",
        "patch": "@@ -506,7 +506,6 @@ UniValue decodescript(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"decodescript\", \"\\\"hexstring\\\"\")\n         );\n \n-    LOCK(cs_main);\n     RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR));\n \n     UniValue r(UniValue::VOBJ);"
      }
    ]
  },
  {
    "sha": "44ac42e50d567b08d3cb3f3c5766588468ce5bbf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NGFjNDJlNTBkNTY3YjA4ZDNjYjNmM2M1NzY2NTg4NDY4Y2U1YmJm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-14T07:26:02Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-14T07:26:07Z"
      },
      "message": "Merge pull request #7004\n\na5bc8de add jonasschnellis key to git-verify-commits trusted-keys (Jonas Schnelli)\n160c72a update jonasschnellis gpg key (Jonas Schnelli)",
      "tree": {
        "sha": "a32e953caa8f6fde371324af2d8bf15e03c70270",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a32e953caa8f6fde371324af2d8bf15e03c70270"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/44ac42e50d567b08d3cb3f3c5766588468ce5bbf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWRuIPAAoJEHSBCwEjRsmmXtUH/1qRpD4AqBkXAgNzlBVpEIzB\nmxtZND1kpPV5sPMV8MK9433iU10tm2lIMWSZQ8WUAC6EnZEeIzVP/Di1s+WjsVfu\no/3F7srHQenVXqWxL2wLpnOBwCcjVk18gwYsSaJ9pxKXk8fp8BjS5ogsbvNv09oN\nd20Dzzscl21X7OELfhjwftfJhGLz6gvb77nXok3z1Cs121CJRCjyUho8QhpBy2JH\n16UKKONP1hB5D2KqIx3o33OQ4J8VzjwrqebjBar0mzoHE92r073lRVHMOuuC17B7\nQjElN5mNHAX/PSMY+8Bh207XQHZEjSTh+Vj68H9zNuiUsAGy9dhxJmwCJVfQWsU=\n=E+Xe\n-----END PGP SIGNATURE-----",
        "payload": "tree a32e953caa8f6fde371324af2d8bf15e03c70270\nparent 36baa9f4758716e3600945570ebb1a80a554f3c9\nparent a5bc8de1baf27d2c661133e4603010bbc00105e1\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1447485962 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1447485967 +0100\n\nMerge pull request #7004\n\na5bc8de add jonasschnellis key to git-verify-commits trusted-keys (Jonas Schnelli)\n160c72a update jonasschnellis gpg key (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44ac42e50d567b08d3cb3f3c5766588468ce5bbf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/44ac42e50d567b08d3cb3f3c5766588468ce5bbf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44ac42e50d567b08d3cb3f3c5766588468ce5bbf/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36baa9f4758716e3600945570ebb1a80a554f3c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36baa9f4758716e3600945570ebb1a80a554f3c9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36baa9f4758716e3600945570ebb1a80a554f3c9"
      },
      {
        "sha": "a5bc8de1baf27d2c661133e4603010bbc00105e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5bc8de1baf27d2c661133e4603010bbc00105e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a5bc8de1baf27d2c661133e4603010bbc00105e1"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3831eaea114f77f30f9638e6772f446055f3c68d",
        "filename": "contrib/gitian-downloader/jonasschnelli-key.pgp",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44ac42e50d567b08d3cb3f3c5766588468ce5bbf/contrib/gitian-downloader/jonasschnelli-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44ac42e50d567b08d3cb3f3c5766588468ce5bbf/contrib/gitian-downloader/jonasschnelli-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/jonasschnelli-key.pgp?ref=44ac42e50d567b08d3cb3f3c5766588468ce5bbf"
      },
      {
        "sha": "a0d0f82db3f4343a221111c1eeef0489bbba22b9",
        "filename": "contrib/verify-commits/trusted-keys",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44ac42e50d567b08d3cb3f3c5766588468ce5bbf/contrib/verify-commits/trusted-keys",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44ac42e50d567b08d3cb3f3c5766588468ce5bbf/contrib/verify-commits/trusted-keys",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/trusted-keys?ref=44ac42e50d567b08d3cb3f3c5766588468ce5bbf",
        "patch": "@@ -4,3 +4,4 @@\n AF8BE07C7049F3A26B239D5325B3083201782B2F\n 81291FA67D2C379A006A053FEAB5AF94D9E9ABE7\n 3F1888C6DCA92A6499C4911FDBA1A67379A1A931\n+32EE5C4C3FA15CCADB46ABE529D4BCB6416F53EC"
      }
    ]
  },
  {
    "sha": "e495ed5f08fa9b62174c7f8f4636e0e5f63a1f4d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNDk1ZWQ1ZjA4ZmE5YjYyMTc0YzdmOGY0NjM2ZTBlNWY2M2ExZjRk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-13T20:12:23Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-14T07:42:59Z"
      },
      "message": "add documentation for exluding whitelistes peer from maxuploadtarget",
      "tree": {
        "sha": "e48fafce353f8f4b3ce4c7c6b41279ec03257904",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e48fafce353f8f4b3ce4c7c6b41279ec03257904"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e495ed5f08fa9b62174c7f8f4636e0e5f63a1f4d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWRuYEAAoJECnUvLZBb1PsQXgQAJ5IVUe3xDA8++fP0GFTCGh3\nbFSshofj8s2+x+NJy0kM6Yh6YhsJUm+vCgmiv0FIuSkysAkX4J/3pktcCER2zyI7\nEoWMgKkHlScFihBX//+pzOR8EyTBlRikzNDOGdIlOBOLXIglKMUjSeqmsQzIlijS\nJgFTtwrDbPm9jilPdlMxS3ggR1IoCWcCPQDx7I25FjlSRRq4ElFdJPgd+VQUUrbv\n/xhVkum5xyqNZyU13sDdh/abXszCKyq8XTkENOloLMCbLc/zcPY9IxVUgOjnMFiL\nvj+NQYv6Bpv1jUTI5elfyEEF8rW9sjuxBHilxFfTJdEY3k9WxoUvGWa/QNnLkQcP\njyq+BDeQK7HVc12nVWW8THIuFklHBJUHgmznJjqnYLsQp+fpHfuPDf4yQzlOkmhP\n4OYXnTgD3gOerN759/lankr4/XJEwF4srSWxW/kcKALaiiskBxopTrxxWIVzduLs\nb4v/7p99FTO00DE66EBvWrSk2j0p+L0PO82CHOGILCx3fOgllSt+5gahB5n7C4q0\nXb6x2qrMlyXxmMS7XwRQ2F8QTaeyy99CQK/eB9Ew92CSOLxRLde8z+ZLu9WpYq/k\ndh2VbDSIFeYYyhvTNf8ysvsb4mtWo92qleZwP+rGV1x+LOSV4H+phQzAaGAYXmff\nhAWBs9POAdb/W2LaxHwr\n=+NXH\n-----END PGP SIGNATURE-----",
        "payload": "tree e48fafce353f8f4b3ce4c7c6b41279ec03257904\nparent 5760749ed8e244e0befab12434b1d8c9f6c8e90e\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1447445543 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1447486979 +0100\n\nadd documentation for exluding whitelistes peer from maxuploadtarget\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e495ed5f08fa9b62174c7f8f4636e0e5f63a1f4d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e495ed5f08fa9b62174c7f8f4636e0e5f63a1f4d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e495ed5f08fa9b62174c7f8f4636e0e5f63a1f4d/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5760749ed8e244e0befab12434b1d8c9f6c8e90e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5760749ed8e244e0befab12434b1d8c9f6c8e90e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5760749ed8e244e0befab12434b1d8c9f6c8e90e"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 38,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2d86588eb2ac6e8a65b2ad96aeeae9abbda7cb3a",
        "filename": "doc/reduce-traffic.md",
        "status": "added",
        "additions": 38,
        "deletions": 0,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e495ed5f08fa9b62174c7f8f4636e0e5f63a1f4d/doc/reduce-traffic.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e495ed5f08fa9b62174c7f8f4636e0e5f63a1f4d/doc/reduce-traffic.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/reduce-traffic.md?ref=e495ed5f08fa9b62174c7f8f4636e0e5f63a1f4d",
        "patch": "@@ -0,0 +1,38 @@\n+Reduce Traffic\n+==============\n+\n+Some node operators need to deal with bandwidth caps imposed by their ISPs.\n+\n+By default, bitcoin-core allows up to 125 connections to different peers, 8 of\n+which are outbound. You can therefore, have at most 117 inbound connections.\n+\n+The default settings can result in relatively significant traffic consumption.\n+\n+Ways to reduce traffic:\n+\n+## 1. Use `-maxuploadtarget=<MiB per day>`\n+\n+A major component of the traffic is caused by serving historic blocks to other nodes\n+during the initial blocks download phase (syncing up a new node).\n+This option can be specified in MiB per day and is turned off by default.\n+This is *not* a hard limit; only a threshold to minimize the outbound\n+traffic. When the limit is about to be reached, the uploaded data is cut by no\n+longer serving historic blocks (blocks older than one week).\n+Keep in mind that new nodes require other nodes that are willing to serve\n+historic blocks. **The recommended minimum is 144 blocks per day (max. 144MB\n+per day)**\n+\n+Whitelisted peers will never be disconnected, although their traffic counts for\n+calculating the target.\n+\n+## 2. Disable \"listening\" (`-listen=0`)\n+\n+Disabling listening will result in fewer nodes connected (remember the maximum of 8\n+outbound peers). Fewer nodes will result in less traffic usage as you are relaying\n+blocks and transactions to fewer nodes.\n+\n+## 3. Reduce maximum connections (`-maxconnections=<num>`)\n+\n+Reducing the maximum connected nodes to a minimum could be desirable if traffic\n+limits are tiny. Keep in mind that bitcoin's trustless model works best if you are\n+connected to a handful of nodes."
      }
    ]
  },
  {
    "sha": "9ffc687288dda3688d8d8e8ab95e612d47bac418",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZmZjNjg3Mjg4ZGRhMzY4OGQ4ZDhlOGFiOTVlNjEyZDQ3YmFjNDE4",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-14T07:54:16Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-14T07:54:36Z"
      },
      "message": "Merge pull request #6984\n\ne495ed5 add documentation for exluding whitelistes peer from maxuploadtarget (Jonas Schnelli)\n5760749 [docs] rename reducetraffic.md to reduce-traffic.md (Jonas Schnelli)\nd61fcff don't enforce maxuploadtargets disconnect for whitelisted peers (Jonas Schnelli)",
      "tree": {
        "sha": "b47139ee8a744ac5a8fdf7522e310086b031455c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b47139ee8a744ac5a8fdf7522e310086b031455c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ffc687288dda3688d8d8e8ab95e612d47bac418",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCAAGBQJWRui8AAoJEOq1r5TZ6avnnSQQAJ1FLypqLCqmbuggFTrbbjzB\nLku3lWBpOCl7P9a8uXt/zBnVxje4s13e4b0Umyl2VzK177CKz33M988saIqB5yEz\nQU4dPGG5X572GW4mbGEt3tv3lECC4vmcrJO0aB/niQTf8cMQ6lGKi5PoiFF3l3xi\nF+7izDDUXuYRJCklSNMfuERM2eTrGR9lm94m6IBqNYJfXfs1nfJBJGc/vKZ2tbvU\n7VUJgJrbUUp6+5AiBBnrQeFDVrI7Lj3IiXF9TbiFgaebuzpOuD4OwivxnmPh2EYM\n1Ye0pxwM5wlYtp2kLlQrx+vFQZne6Dh50gRO22qTx7XXxAjpYfNhB/RV/vxEcW0r\nSazTZmE3cO5a2YysiPp11li33cpXuXzr6CtofXkr/DAjp7EmiuhYaHWKC8pOXw4G\n7ekCf7+4v0MG4+B4aTpRVrwRA3rmozaGbfPmRbwgXcPUutJbiRHJR8/hrPYkSR8E\nCkCU1kxogNKPMsGhSeN3VP5ph4M90ctkyT8aYQd21FrCDBJLcNBlnVDeaSm+hKoZ\nTIDIkkVp/t9gYPSjvkMOSG48kgeFnrrbo8yRUI7kwrj1Oy2jzOC1Woiu1s2TDUgB\nTURn8rJFNFagUbjwgWkwFVk06ipiiBobdMxCKbwS9haBL0Oguwdk8RDm3aKftcXy\nzPAaXiGYaEIFZtwmpp0Q\n=Hf3a\n-----END PGP SIGNATURE-----",
        "payload": "tree b47139ee8a744ac5a8fdf7522e310086b031455c\nparent 44ac42e50d567b08d3cb3f3c5766588468ce5bbf\nparent e495ed5f08fa9b62174c7f8f4636e0e5f63a1f4d\nauthor Gregory Maxwell <greg@xiph.org> 1447487656 -0800\ncommitter Gregory Maxwell <greg@xiph.org> 1447487676 -0800\n\nMerge pull request #6984\n\ne495ed5 add documentation for exluding whitelistes peer from maxuploadtarget (Jonas Schnelli)\n5760749 [docs] rename reducetraffic.md to reduce-traffic.md (Jonas Schnelli)\nd61fcff don't enforce maxuploadtargets disconnect for whitelisted peers (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ffc687288dda3688d8d8e8ab95e612d47bac418",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ffc687288dda3688d8d8e8ab95e612d47bac418",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ffc687288dda3688d8d8e8ab95e612d47bac418/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "44ac42e50d567b08d3cb3f3c5766588468ce5bbf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44ac42e50d567b08d3cb3f3c5766588468ce5bbf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/44ac42e50d567b08d3cb3f3c5766588468ce5bbf"
      },
      {
        "sha": "e495ed5f08fa9b62174c7f8f4636e0e5f63a1f4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e495ed5f08fa9b62174c7f8f4636e0e5f63a1f4d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e495ed5f08fa9b62174c7f8f4636e0e5f63a1f4d"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 45,
      "deletions": 5
    },
    "files": [
      {
        "sha": "2d86588eb2ac6e8a65b2ad96aeeae9abbda7cb3a",
        "filename": "doc/reduce-traffic.md",
        "status": "renamed",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ffc687288dda3688d8d8e8ab95e612d47bac418/doc/reduce-traffic.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ffc687288dda3688d8d8e8ab95e612d47bac418/doc/reduce-traffic.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/reduce-traffic.md?ref=9ffc687288dda3688d8d8e8ab95e612d47bac418",
        "patch": "@@ -1,7 +1,7 @@\n Reduce Traffic\n ==============\n \n-Some node operators need to deal with bandwith caps imposed by their ISPs.\n+Some node operators need to deal with bandwidth caps imposed by their ISPs.\n \n By default, bitcoin-core allows up to 125 connections to different peers, 8 of\n which are outbound. You can therefore, have at most 117 inbound connections.\n@@ -22,6 +22,9 @@ Keep in mind that new nodes require other nodes that are willing to serve\n historic blocks. **The recommended minimum is 144 blocks per day (max. 144MB\n per day)**\n \n+Whitelisted peers will never be disconnected, although their traffic counts for\n+calculating the target.\n+\n ## 2. Disable \"listening\" (`-listen=0`)\n \n Disabling listening will result in fewer nodes connected (remember the maximum of 8\n@@ -30,6 +33,6 @@ blocks and transactions to fewer nodes.\n \n ## 3. Reduce maximum connections (`-maxconnections=<num>`)\n \n-Reducing the maximum connected nodes to a miniumum could be desirable if traffic\n+Reducing the maximum connected nodes to a minimum could be desirable if traffic\n limits are tiny. Keep in mind that bitcoin's trustless model works best if you are\n connected to a handful of nodes.",
        "previous_filename": "doc/reducetraffic.md"
      },
      {
        "sha": "e4dcc60cff303000622ecd4806b84de4b2a88c22",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ffc687288dda3688d8d8e8ab95e612d47bac418/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ffc687288dda3688d8d8e8ab95e612d47bac418/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=9ffc687288dda3688d8d8e8ab95e612d47bac418",
        "patch": "@@ -184,6 +184,9 @@ This option can be specified in MiB per day and is turned off by default\n (`-maxuploadtarget=0`).\n The recommended minimum is 144 * MAX_BLOCK_SIZE (currently 144MB) per day.\n \n+Whitelisted peers will never be disconnected, although their traffic counts for\n+calculating the target.\n+\n A more detailed documentation about keeping traffic low can be found in\n [/doc/reducetraffic.md](/doc/reducetraffic.md).\n "
      },
      {
        "sha": "e714465db16d2884008df8f0833e6c56ca8781ff",
        "filename": "qa/rpc-tests/maxuploadtarget.py",
        "status": "modified",
        "additions": 35,
        "deletions": 2,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ffc687288dda3688d8d8e8ab95e612d47bac418/qa/rpc-tests/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ffc687288dda3688d8d8e8ab95e612d47bac418/qa/rpc-tests/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxuploadtarget.py?ref=9ffc687288dda3688d8d8e8ab95e612d47bac418",
        "patch": "@@ -195,7 +195,7 @@ def run_test(self):\n         daily_buffer = 144 * 1000000\n         max_bytes_available = max_bytes_per_day - daily_buffer\n         success_count = max_bytes_available / old_block_size\n-        \n+\n         # 144MB will be reserved for relaying new blocks, so expect this to\n         # succeed for ~70 tries.\n         for i in xrange(success_count):\n@@ -228,7 +228,7 @@ def run_test(self):\n         test_nodes[1].send_message(getdata_request)\n         test_nodes[1].wait_for_disconnect()\n         assert_equal(len(self.nodes[0].getpeerinfo()), 1)\n-        \n+\n         print \"Peer 1 disconnected after trying to download old block\"\n \n         print \"Advancing system time on node to clear counters...\"\n@@ -245,5 +245,38 @@ def run_test(self):\n \n         [c.disconnect_node() for c in connections]\n \n+        #stop and start node 0 with 1MB maxuploadtarget, whitelist 127.0.0.1\n+        print \"Restarting nodes with -whitelist=127.0.0.1\"\n+        stop_node(self.nodes[0], 0)\n+        self.nodes[0] = start_node(0, self.options.tmpdir, [\"-debug\", \"-whitelist=127.0.0.1\", \"-maxuploadtarget=1\", \"-blockmaxsize=999000\"])\n+\n+        #recreate/reconnect 3 test nodes\n+        test_nodes = []\n+        connections = []\n+\n+        for i in xrange(3):\n+            test_nodes.append(TestNode())\n+            connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_nodes[i]))\n+            test_nodes[i].add_connection(connections[i])\n+\n+        NetworkThread().start() # Start up network handling in another thread\n+        [x.wait_for_verack() for x in test_nodes]\n+\n+        #retrieve 20 blocks which should be enough to break the 1MB limit\n+        getdata_request.inv = [CInv(2, big_new_block)]\n+        for i in xrange(20):\n+            test_nodes[1].send_message(getdata_request)\n+            test_nodes[1].sync_with_ping()\n+            assert_equal(test_nodes[1].block_receive_map[big_new_block], i+1)\n+\n+        getdata_request.inv = [CInv(2, big_old_block)]\n+        test_nodes[1].send_message(getdata_request)\n+        test_nodes[1].wait_for_disconnect()\n+        assert_equal(len(self.nodes[0].getpeerinfo()), 3) #node is still connected because of the whitelist\n+\n+        print \"Peer 1 still connected after trying to download old block (whitelisted)\"\n+\n+        [c.disconnect_node() for c in connections]\n+\n if __name__ == '__main__':\n     MaxUploadTest().main()"
      },
      {
        "sha": "4647112d4cfac5ce84a7547a2593d1bb46a3386e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ffc687288dda3688d8d8e8ab95e612d47bac418/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ffc687288dda3688d8d8e8ab95e612d47bac418/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9ffc687288dda3688d8d8e8ab95e612d47bac418",
        "patch": "@@ -3867,8 +3867,9 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                     }\n                 }\n                 // disconnect node in case we have reached the outbound limit for serving historical blocks\n+                // never disconnect whitelisted nodes\n                 static const int nOneWeek = 7 * 24 * 60 * 60; // assume > 1 week = historical\n-                if (send && CNode::OutboundTargetReached(true) && ( ((pindexBestHeader != NULL) && (pindexBestHeader->GetBlockTime() - mi->second->GetBlockTime() > nOneWeek)) || inv.type == MSG_FILTERED_BLOCK) )\n+                if (send && CNode::OutboundTargetReached(true) && ( ((pindexBestHeader != NULL) && (pindexBestHeader->GetBlockTime() - mi->second->GetBlockTime() > nOneWeek)) || inv.type == MSG_FILTERED_BLOCK) && !pfrom->fWhitelisted)\n                 {\n                     LogPrint(\"net\", \"historical block serving limit reached, disconnect peer=%d\\n\", pfrom->GetId());\n "
      }
    ]
  },
  {
    "sha": "4044f07d1c5eacb0ec732f1232489aa77fb7bb3b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MDQ0ZjA3ZDFjNWVhY2IwZWM3MzJmMTIzMjQ4OWFhNzdmYjdiYjNi",
    "commit": {
      "author": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-14T12:44:15Z"
      },
      "committer": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-14T12:52:21Z"
      },
      "message": "Add blocksonly mode",
      "tree": {
        "sha": "eccd67aef82aaf96c07322dc51681c8e06008d91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eccd67aef82aaf96c07322dc51681c8e06008d91"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4044f07d1c5eacb0ec732f1232489aa77fb7bb3b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4044f07d1c5eacb0ec732f1232489aa77fb7bb3b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4044f07d1c5eacb0ec732f1232489aa77fb7bb3b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4044f07d1c5eacb0ec732f1232489aa77fb7bb3b/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dbd2c135ddb96bdc3a4e870c2371cb1fac227135",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbd2c135ddb96bdc3a4e870c2371cb1fac227135",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dbd2c135ddb96bdc3a4e870c2371cb1fac227135"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a62e875f839b513bc5f963b5060635b7e71e3814",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4044f07d1c5eacb0ec732f1232489aa77fb7bb3b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4044f07d1c5eacb0ec732f1232489aa77fb7bb3b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=4044f07d1c5eacb0ec732f1232489aa77fb7bb3b",
        "patch": "@@ -460,7 +460,7 @@ void CNode::PushVersion()\n     else\n         LogPrint(\"net\", \"send version message: version %d, blocks=%d, us=%s, peer=%d\\n\", PROTOCOL_VERSION, nBestHeight, addrMe.ToString(), id);\n     PushMessage(\"version\", PROTOCOL_VERSION, nLocalServices, nTime, addrYou, addrMe,\n-                nLocalHostNonce, strSubVersion, nBestHeight, true);\n+                nLocalHostNonce, strSubVersion, nBestHeight, !GetBoolArg(\"-blocksonly\", false));\n }\n \n "
      }
    ]
  },
  {
    "sha": "420fa8143a81f60fea79ee05df553e89378f1054",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MjBmYTgxNDNhODFmNjBmZWE3OWVlMDVkZjU1M2U4OTM3OGYxMDU0",
    "commit": {
      "author": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-14T12:44:59Z"
      },
      "committer": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-14T12:52:21Z"
      },
      "message": "Do not process tx inv's in blocksonly mode",
      "tree": {
        "sha": "d54d46ae33da4644964b0bdcb6c0f1a2d090fec4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d54d46ae33da4644964b0bdcb6c0f1a2d090fec4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/420fa8143a81f60fea79ee05df553e89378f1054",
      "comment_count": 2,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/420fa8143a81f60fea79ee05df553e89378f1054",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/420fa8143a81f60fea79ee05df553e89378f1054",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/420fa8143a81f60fea79ee05df553e89378f1054/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4044f07d1c5eacb0ec732f1232489aa77fb7bb3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4044f07d1c5eacb0ec732f1232489aa77fb7bb3b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4044f07d1c5eacb0ec732f1232489aa77fb7bb3b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b35a0327335f50ea5e03ec2786a33b1623f47ad9",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/420fa8143a81f60fea79ee05df553e89378f1054/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/420fa8143a81f60fea79ee05df553e89378f1054/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=420fa8143a81f60fea79ee05df553e89378f1054",
        "patch": "@@ -4218,7 +4218,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             bool fAlreadyHave = AlreadyHave(inv);\n             LogPrint(\"net\", \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n \n-            if (!fAlreadyHave && !fImporting && !fReindex && inv.type != MSG_BLOCK)\n+            if (!fAlreadyHave && !fImporting && !fReindex && inv.type != MSG_BLOCK && !GetBoolArg(\"-blocksonly\", false))\n                 pfrom->AskFor(inv);\n \n             if (inv.type == MSG_BLOCK) {"
      }
    ]
  },
  {
    "sha": "3a964973fe9335f31c418b00e762ea04c3d3f088",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTk2NDk3M2ZlOTMzNWYzMWM0MThiMDBlNzYyZWEwNGMzZDNmMDg4",
    "commit": {
      "author": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-14T12:46:23Z"
      },
      "committer": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-14T12:52:21Z"
      },
      "message": "Add whitelistalwaysrelay option",
      "tree": {
        "sha": "41c38ed9f028280f3802c4ac863f2278eb34b2ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41c38ed9f028280f3802c4ac863f2278eb34b2ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a964973fe9335f31c418b00e762ea04c3d3f088",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a964973fe9335f31c418b00e762ea04c3d3f088",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a964973fe9335f31c418b00e762ea04c3d3f088",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a964973fe9335f31c418b00e762ea04c3d3f088/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "420fa8143a81f60fea79ee05df553e89378f1054",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/420fa8143a81f60fea79ee05df553e89378f1054",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/420fa8143a81f60fea79ee05df553e89378f1054"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 13,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8e5c31835230aca4e7aab98cc9635c4e1c417217",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a964973fe9335f31c418b00e762ea04c3d3f088/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a964973fe9335f31c418b00e762ea04c3d3f088/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3a964973fe9335f31c418b00e762ea04c3d3f088",
        "patch": "@@ -816,6 +816,16 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n #endif\n     }\n+\n+    // disable walletbroadcast in blocksonly mode\n+    if (GetBoolArg(\"-blocksonly\", false)) {\n+        if (SoftSetBoolArg(\"-whitelistalwaysrelay\", false))\n+            LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -whitelistalwaysrelay=0\\n\", __func__);\n+#ifdef ENABLE_WALLET\n+        if (SoftSetBoolArg(\"-walletbroadcast\", false))\n+            LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -walletbroadcast=0\\n\", __func__);\n+#endif\n+    }\n     \n     // Make sure enough file descriptors are available\n     int nBind = std::max((int)mapArgs.count(\"-bind\") + (int)mapArgs.count(\"-whitebind\"), 1);"
      },
      {
        "sha": "9842acb4b3749a6e512a537d22b568043f27f861",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a964973fe9335f31c418b00e762ea04c3d3f088/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a964973fe9335f31c418b00e762ea04c3d3f088/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3a964973fe9335f31c418b00e762ea04c3d3f088",
        "patch": "@@ -4465,7 +4465,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             assert(recentRejects);\n             recentRejects->insert(tx.GetHash());\n \n-            if (pfrom->fWhitelisted) {\n+            if (pfrom->fWhitelisted && GetBoolArg(\"-whitelistalwaysrelay\", DEFAULT_WHITELISTALWAYSRELAY)) {\n                 // Always relay transactions received from whitelisted peers, even\n                 // if they were rejected from the mempool, allowing the node to\n                 // function as a gateway for nodes hidden behind it."
      },
      {
        "sha": "c304b311e401f04db261aead89d93633236e92f8",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a964973fe9335f31c418b00e762ea04c3d3f088/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a964973fe9335f31c418b00e762ea04c3d3f088/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=3a964973fe9335f31c418b00e762ea04c3d3f088",
        "patch": "@@ -41,6 +41,8 @@ struct CNodeStateStats;\n \n /** Default for accepting alerts from the P2P network. */\n static const bool DEFAULT_ALERTS = true;\n+/** Default for DEFAULT_WHITELISTALWAYSRELAY. */\n+static const bool DEFAULT_WHITELISTALWAYSRELAY = true;\n /** Default for -minrelaytxfee, minimum relay fee for transactions */\n static const unsigned int DEFAULT_MIN_RELAY_TX_FEE = 1000;\n /** Default for -maxorphantx, maximum number of orphan transactions kept in memory */"
      }
    ]
  },
  {
    "sha": "762b13b4d8cce325ed10de733a502fa3aadeadee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjJiMTNiNGQ4Y2NlMzI1ZWQxMGRlNzMzYTUwMmZhM2FhZGVhZGVl",
    "commit": {
      "author": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-14T12:47:53Z"
      },
      "committer": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-14T12:54:01Z"
      },
      "message": "Add help text for blocksonly and whitelistalwaysrelay",
      "tree": {
        "sha": "a1318541ef4ba9ba66eb48220ce0ea3fda717aa4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a1318541ef4ba9ba66eb48220ce0ea3fda717aa4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/762b13b4d8cce325ed10de733a502fa3aadeadee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/762b13b4d8cce325ed10de733a502fa3aadeadee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/762b13b4d8cce325ed10de733a502fa3aadeadee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/762b13b4d8cce325ed10de733a502fa3aadeadee/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a964973fe9335f31c418b00e762ea04c3d3f088",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a964973fe9335f31c418b00e762ea04c3d3f088",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a964973fe9335f31c418b00e762ea04c3d3f088"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b2283195644b76f1975126ca1af6937872cb8914",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/762b13b4d8cce325ed10de733a502fa3aadeadee/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/762b13b4d8cce325ed10de733a502fa3aadeadee/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=762b13b4d8cce325ed10de733a502fa3aadeadee",
        "patch": "@@ -310,6 +310,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-alerts\", strprintf(_(\"Receive and display P2P network alerts (default: %u)\"), DEFAULT_ALERTS));\n     strUsage += HelpMessageOpt(\"-alertnotify=<cmd>\", _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\"));\n     strUsage += HelpMessageOpt(\"-blocknotify=<cmd>\", _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\"));\n+    if (showDebug)\n+        strUsage += HelpMessageOpt(\"-blocksonly\", strprintf(_(\"Whether to operate in a blocks only mode (default: %u)\"), DEFAULT_BLOCKSONLY));\n     strUsage += HelpMessageOpt(\"-checkblocks=<n>\", strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), DEFAULT_CHECKBLOCKS));\n     strUsage += HelpMessageOpt(\"-checklevel=<n>\", strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), DEFAULT_CHECKLEVEL));\n     strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\"));\n@@ -375,6 +377,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-whitebind=<addr>\", _(\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\"));\n     strUsage += HelpMessageOpt(\"-whitelist=<netmask>\", _(\"Whitelist peers connecting from the given netmask or IP address. Can be specified multiple times.\") +\n         \" \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\"));\n+    strUsage += HelpMessageOpt(\"-whitelistalwaysrelay\", _(\"Always relay transactions received from whitelisted peers.\"));\n     strUsage += HelpMessageOpt(\"-maxuploadtarget=<n>\", strprintf(_(\"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: %d)\"), DEFAULT_MAX_UPLOAD_TARGET));\n \n #ifdef ENABLE_WALLET"
      },
      {
        "sha": "a133818b4f02f3bf50945676617574026f749fef",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/762b13b4d8cce325ed10de733a502fa3aadeadee/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/762b13b4d8cce325ed10de733a502fa3aadeadee/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=762b13b4d8cce325ed10de733a502fa3aadeadee",
        "patch": "@@ -62,6 +62,8 @@ static const size_t MAPASKFOR_MAX_SZ = MAX_INV_SZ;\n static const unsigned int DEFAULT_MAX_PEER_CONNECTIONS = 125;\n /** The default for -maxuploadtarget. 0 = Unlimited */\n static const uint64_t DEFAULT_MAX_UPLOAD_TARGET = 0;\n+/** Default for blocks only*/\n+static const bool DEFAULT_BLOCKSONLY = false;\n \n unsigned int ReceiveFloodSize();\n unsigned int SendBufferSize();"
      }
    ]
  },
  {
    "sha": "71a2683f4b526b17adf317733b0aa18ffacecfdc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MWEyNjgzZjRiNTI2YjE3YWRmMzE3NzMzYjBhYTE4ZmZhY2VjZmRj",
    "commit": {
      "author": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-14T13:10:59Z"
      },
      "committer": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-14T13:10:59Z"
      },
      "message": "Use DEFAULT_BLOCKSONLY and DEFAULT_WHITELISTALWAYSRELAY constants",
      "tree": {
        "sha": "3fb18ea405aacb88f78c1c2e8f7e0f44ffd7b640",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3fb18ea405aacb88f78c1c2e8f7e0f44ffd7b640"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71a2683f4b526b17adf317733b0aa18ffacecfdc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71a2683f4b526b17adf317733b0aa18ffacecfdc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/71a2683f4b526b17adf317733b0aa18ffacecfdc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71a2683f4b526b17adf317733b0aa18ffacecfdc/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "762b13b4d8cce325ed10de733a502fa3aadeadee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/762b13b4d8cce325ed10de733a502fa3aadeadee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/762b13b4d8cce325ed10de733a502fa3aadeadee"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "666fa87318f906e661a70f167394f8a918756dc8",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71a2683f4b526b17adf317733b0aa18ffacecfdc/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71a2683f4b526b17adf317733b0aa18ffacecfdc/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=71a2683f4b526b17adf317733b0aa18ffacecfdc",
        "patch": "@@ -821,7 +821,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     }\n \n     // disable walletbroadcast in blocksonly mode\n-    if (GetBoolArg(\"-blocksonly\", false)) {\n+    if (GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY)) {\n         if (SoftSetBoolArg(\"-whitelistalwaysrelay\", false))\n             LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -whitelistalwaysrelay=0\\n\", __func__);\n #ifdef ENABLE_WALLET"
      },
      {
        "sha": "fb529eb5b6f62aa3b2e2be8a83da66c124f620de",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71a2683f4b526b17adf317733b0aa18ffacecfdc/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71a2683f4b526b17adf317733b0aa18ffacecfdc/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=71a2683f4b526b17adf317733b0aa18ffacecfdc",
        "patch": "@@ -4218,7 +4218,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             bool fAlreadyHave = AlreadyHave(inv);\n             LogPrint(\"net\", \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n \n-            if (!fAlreadyHave && !fImporting && !fReindex && inv.type != MSG_BLOCK && !GetBoolArg(\"-blocksonly\", false))\n+            if (!fAlreadyHave && !fImporting && !fReindex && inv.type != MSG_BLOCK && !GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY))\n                 pfrom->AskFor(inv);\n \n             if (inv.type == MSG_BLOCK) {"
      },
      {
        "sha": "000eefc858ba87ee3d9db800f8ecff4ebf40b6b1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71a2683f4b526b17adf317733b0aa18ffacecfdc/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71a2683f4b526b17adf317733b0aa18ffacecfdc/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=71a2683f4b526b17adf317733b0aa18ffacecfdc",
        "patch": "@@ -460,7 +460,7 @@ void CNode::PushVersion()\n     else\n         LogPrint(\"net\", \"send version message: version %d, blocks=%d, us=%s, peer=%d\\n\", PROTOCOL_VERSION, nBestHeight, addrMe.ToString(), id);\n     PushMessage(\"version\", PROTOCOL_VERSION, nLocalServices, nTime, addrYou, addrMe,\n-                nLocalHostNonce, strSubVersion, nBestHeight, !GetBoolArg(\"-blocksonly\", false));\n+                nLocalHostNonce, strSubVersion, nBestHeight, !GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY));\n }\n \n "
      }
    ]
  },
  {
    "sha": "59441a044570c4298f19b6bd873c8769e3ec0ba0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OTQ0MWEwNDQ1NzBjNDI5OGYxOWI2YmQ4NzNjODc2OWUzZWMwYmEw",
    "commit": {
      "author": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-14T13:12:05Z"
      },
      "committer": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-14T13:12:05Z"
      },
      "message": "Display DEFAULT_WHITELISTALWAYSRELAY in help text",
      "tree": {
        "sha": "42471dd5f9dd519d335467cc4961619d162fae24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/42471dd5f9dd519d335467cc4961619d162fae24"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59441a044570c4298f19b6bd873c8769e3ec0ba0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59441a044570c4298f19b6bd873c8769e3ec0ba0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/59441a044570c4298f19b6bd873c8769e3ec0ba0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59441a044570c4298f19b6bd873c8769e3ec0ba0/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "71a2683f4b526b17adf317733b0aa18ffacecfdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71a2683f4b526b17adf317733b0aa18ffacecfdc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71a2683f4b526b17adf317733b0aa18ffacecfdc"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3a4312ec0f7d059bfa62da2c0463e3ce0a19ed72",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59441a044570c4298f19b6bd873c8769e3ec0ba0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59441a044570c4298f19b6bd873c8769e3ec0ba0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=59441a044570c4298f19b6bd873c8769e3ec0ba0",
        "patch": "@@ -377,7 +377,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-whitebind=<addr>\", _(\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\"));\n     strUsage += HelpMessageOpt(\"-whitelist=<netmask>\", _(\"Whitelist peers connecting from the given netmask or IP address. Can be specified multiple times.\") +\n         \" \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\"));\n-    strUsage += HelpMessageOpt(\"-whitelistalwaysrelay\", _(\"Always relay transactions received from whitelisted peers.\"));\n+    strUsage += HelpMessageOpt(\"-whitelistalwaysrelay\", strprintf(_(\"Always relay transactions received from whitelisted peers (default: %d)\"), DEFAULT_WHITELISTALWAYSRELAY));\n     strUsage += HelpMessageOpt(\"-maxuploadtarget=<n>\", strprintf(_(\"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: %d)\"), DEFAULT_MAX_UPLOAD_TARGET));\n \n #ifdef ENABLE_WALLET"
      }
    ]
  },
  {
    "sha": "6a4982fb836e51ec01501f019ca8bce2b80e1267",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTQ5ODJmYjgzNmU1MWVjMDE1MDFmMDE5Y2E4YmNlMmI4MGUxMjY3",
    "commit": {
      "author": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-14T13:12:31Z"
      },
      "committer": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-14T13:12:31Z"
      },
      "message": "Fix fRelayTxs comment",
      "tree": {
        "sha": "20161e234609fa837be6114d0063d4282726c5b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20161e234609fa837be6114d0063d4282726c5b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a4982fb836e51ec01501f019ca8bce2b80e1267",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a4982fb836e51ec01501f019ca8bce2b80e1267",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a4982fb836e51ec01501f019ca8bce2b80e1267",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a4982fb836e51ec01501f019ca8bce2b80e1267/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "59441a044570c4298f19b6bd873c8769e3ec0ba0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59441a044570c4298f19b6bd873c8769e3ec0ba0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/59441a044570c4298f19b6bd873c8769e3ec0ba0"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ebdbe77565456fd9c7683415ead40f2e5d58fa58",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a4982fb836e51ec01501f019ca8bce2b80e1267/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a4982fb836e51ec01501f019ca8bce2b80e1267/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=6a4982fb836e51ec01501f019ca8bce2b80e1267",
        "patch": "@@ -344,7 +344,7 @@ class CNode\n     // We use fRelayTxes for two purposes -\n     // a) it allows us to not relay tx invs before receiving the peer's version message\n     // b) the peer may tell us in its version message that we should not relay tx invs\n-    //    until it has initialized its bloom filter.\n+    //    unless it loads a bloom filter.\n     bool fRelayTxes;\n     CSemaphoreGrant grantOutbound;\n     CCriticalSection cs_filter;"
      }
    ]
  },
  {
    "sha": "bbf49da408a609a4ca9ed4028fa3071dc6e77233",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYmY0OWRhNDA4YTYwOWE0Y2E5ZWQ0MDI4ZmEzMDcxZGM2ZTc3MjMz",
    "commit": {
      "author": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-14T13:14:01Z"
      },
      "committer": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-14T13:14:01Z"
      },
      "message": "Fix comment for blocksonly parameter interactions",
      "tree": {
        "sha": "9b97b601a25f7a64ba06985eb7ca844fd540ecf7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b97b601a25f7a64ba06985eb7ca844fd540ecf7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bbf49da408a609a4ca9ed4028fa3071dc6e77233",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbf49da408a609a4ca9ed4028fa3071dc6e77233",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bbf49da408a609a4ca9ed4028fa3071dc6e77233",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbf49da408a609a4ca9ed4028fa3071dc6e77233/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a4982fb836e51ec01501f019ca8bce2b80e1267",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a4982fb836e51ec01501f019ca8bce2b80e1267",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a4982fb836e51ec01501f019ca8bce2b80e1267"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "36c1dfbe863fcf7f59b3463964d0da72026df518",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbf49da408a609a4ca9ed4028fa3071dc6e77233/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbf49da408a609a4ca9ed4028fa3071dc6e77233/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=bbf49da408a609a4ca9ed4028fa3071dc6e77233",
        "patch": "@@ -820,7 +820,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n #endif\n     }\n \n-    // disable walletbroadcast in blocksonly mode\n+    // disable walletbroadcast and whitelistalwaysrelay in blocksonly mode\n     if (GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY)) {\n         if (SoftSetBoolArg(\"-whitelistalwaysrelay\", false))\n             LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -whitelistalwaysrelay=0\\n\", __func__);"
      }
    ]
  },
  {
    "sha": "b632145edeb376b4d1597f192ca00634f7d2866c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNjMyMTQ1ZWRlYjM3NmI0ZDE1OTdmMTkyY2EwMDYzNGY3ZDI4NjZj",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-14T13:14:15Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-14T13:23:00Z"
      },
      "message": "Merge pull request #6993\n\nbbf49da Fix comment for blocksonly parameter interactions (Patick Strateman)\n6a4982f Fix fRelayTxs comment (Patick Strateman)\n59441a0 Display DEFAULT_WHITELISTALWAYSRELAY in help text (Patick Strateman)\n71a2683 Use DEFAULT_BLOCKSONLY and DEFAULT_WHITELISTALWAYSRELAY constants (Patick Strateman)\n762b13b Add help text for blocksonly and whitelistalwaysrelay (Patick Strateman)\n3a96497 Add whitelistalwaysrelay option (Patick Strateman)\n420fa81 Do not process tx inv's in blocksonly mode (Patick Strateman)\n4044f07 Add blocksonly mode (Patick Strateman)",
      "tree": {
        "sha": "9d7b3565c2a09d1a3e138cff9c2f640517a13c16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d7b3565c2a09d1a3e138cff9c2f640517a13c16"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b632145edeb376b4d1597f192ca00634f7d2866c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCAAGBQJWRzW0AAoJEOq1r5TZ6avnIhUP/jDAfc0CxQCHBpSwxDrlfe8P\nKZ2n+KalZsWDg0bnQDGjqVkKdYGPF0NjQMx4sU7c9CY2uDegqbXUv6rGoLovahZH\nQTdVTPYwS0l7erTjSoW+llL4N6CHOu1HqDDtBBStawyKl0hdJajC+yw+M0y2NnC0\n8IDrzlswmZ2Q40YzZQuTwiLfxcD80xkWRFIa6wc30BsPWq/VvjV8q1oigg0WiBsF\n9eN8xSMN7R1mQCHgrtGbz+H5JrPaAGg7RZuh04jAGBGhA5tXHoae/Em7sBkOeoNV\n8sAsyIFahgTq5bMUlCPAiut83Xo1js0oLzkKyBZjfitsIXF4jv33kgVGuYiyvFJ5\n5z69IQht3DYisN4sQ+mwuSyfhLdxPjZWijz8Z2ODOkcS0pCMTs0WOxnx+da5QzUk\n9C+7VcOplnQvoChekCYqgzj+QD5gIVo1b3K30Y1qHPijjk34cPUc6MZcp7fEJbz8\nlOYKFJxwARkT5avJX3avx4lj38tZwwhN9e//T1q5aDSdAi4dJIAIqtH7wuvH7YdE\n+r1dyzkIzLF8mMhe38saejswArcrqjq5NsqvPIWgQGP2IU6PAgbas5WbrfehH6bF\nIroUIy3+6fyvDT15lwROP1tICewap/nRncicFZgaMaPbNLgAVt9fdLx2jjdc4Gr8\nQ7auLBKFWzwD+e8e8cwQ\n=CT0F\n-----END PGP SIGNATURE-----",
        "payload": "tree 9d7b3565c2a09d1a3e138cff9c2f640517a13c16\nparent 9ffc687288dda3688d8d8e8ab95e612d47bac418\nparent bbf49da408a609a4ca9ed4028fa3071dc6e77233\nauthor Gregory Maxwell <greg@xiph.org> 1447506855 -0800\ncommitter Gregory Maxwell <greg@xiph.org> 1447507380 -0800\n\nMerge pull request #6993\n\nbbf49da Fix comment for blocksonly parameter interactions (Patick Strateman)\n6a4982f Fix fRelayTxs comment (Patick Strateman)\n59441a0 Display DEFAULT_WHITELISTALWAYSRELAY in help text (Patick Strateman)\n71a2683 Use DEFAULT_BLOCKSONLY and DEFAULT_WHITELISTALWAYSRELAY constants (Patick Strateman)\n762b13b Add help text for blocksonly and whitelistalwaysrelay (Patick Strateman)\n3a96497 Add whitelistalwaysrelay option (Patick Strateman)\n420fa81 Do not process tx inv's in blocksonly mode (Patick Strateman)\n4044f07 Add blocksonly mode (Patick Strateman)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b632145edeb376b4d1597f192ca00634f7d2866c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b632145edeb376b4d1597f192ca00634f7d2866c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b632145edeb376b4d1597f192ca00634f7d2866c/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ffc687288dda3688d8d8e8ab95e612d47bac418",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ffc687288dda3688d8d8e8ab95e612d47bac418",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ffc687288dda3688d8d8e8ab95e612d47bac418"
      },
      {
        "sha": "bbf49da408a609a4ca9ed4028fa3071dc6e77233",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbf49da408a609a4ca9ed4028fa3071dc6e77233",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bbf49da408a609a4ca9ed4028fa3071dc6e77233"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 21,
      "deletions": 4
    },
    "files": [
      {
        "sha": "36c1dfbe863fcf7f59b3463964d0da72026df518",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b632145edeb376b4d1597f192ca00634f7d2866c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b632145edeb376b4d1597f192ca00634f7d2866c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b632145edeb376b4d1597f192ca00634f7d2866c",
        "patch": "@@ -310,6 +310,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-alerts\", strprintf(_(\"Receive and display P2P network alerts (default: %u)\"), DEFAULT_ALERTS));\n     strUsage += HelpMessageOpt(\"-alertnotify=<cmd>\", _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\"));\n     strUsage += HelpMessageOpt(\"-blocknotify=<cmd>\", _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\"));\n+    if (showDebug)\n+        strUsage += HelpMessageOpt(\"-blocksonly\", strprintf(_(\"Whether to operate in a blocks only mode (default: %u)\"), DEFAULT_BLOCKSONLY));\n     strUsage += HelpMessageOpt(\"-checkblocks=<n>\", strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), DEFAULT_CHECKBLOCKS));\n     strUsage += HelpMessageOpt(\"-checklevel=<n>\", strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), DEFAULT_CHECKLEVEL));\n     strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\"));\n@@ -375,6 +377,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-whitebind=<addr>\", _(\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\"));\n     strUsage += HelpMessageOpt(\"-whitelist=<netmask>\", _(\"Whitelist peers connecting from the given netmask or IP address. Can be specified multiple times.\") +\n         \" \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\"));\n+    strUsage += HelpMessageOpt(\"-whitelistalwaysrelay\", strprintf(_(\"Always relay transactions received from whitelisted peers (default: %d)\"), DEFAULT_WHITELISTALWAYSRELAY));\n     strUsage += HelpMessageOpt(\"-maxuploadtarget=<n>\", strprintf(_(\"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: %d)\"), DEFAULT_MAX_UPLOAD_TARGET));\n \n #ifdef ENABLE_WALLET\n@@ -816,6 +819,16 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n #endif\n     }\n+\n+    // disable walletbroadcast and whitelistalwaysrelay in blocksonly mode\n+    if (GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY)) {\n+        if (SoftSetBoolArg(\"-whitelistalwaysrelay\", false))\n+            LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -whitelistalwaysrelay=0\\n\", __func__);\n+#ifdef ENABLE_WALLET\n+        if (SoftSetBoolArg(\"-walletbroadcast\", false))\n+            LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -walletbroadcast=0\\n\", __func__);\n+#endif\n+    }\n     \n     // Make sure enough file descriptors are available\n     int nBind = std::max((int)mapArgs.count(\"-bind\") + (int)mapArgs.count(\"-whitebind\"), 1);"
      },
      {
        "sha": "9fca183bb00f77536af20be7d3d9e541f9ba9e29",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b632145edeb376b4d1597f192ca00634f7d2866c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b632145edeb376b4d1597f192ca00634f7d2866c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b632145edeb376b4d1597f192ca00634f7d2866c",
        "patch": "@@ -4219,7 +4219,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             bool fAlreadyHave = AlreadyHave(inv);\n             LogPrint(\"net\", \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n \n-            if (!fAlreadyHave && !fImporting && !fReindex && inv.type != MSG_BLOCK)\n+            if (!fAlreadyHave && !fImporting && !fReindex && inv.type != MSG_BLOCK && !GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY))\n                 pfrom->AskFor(inv);\n \n             if (inv.type == MSG_BLOCK) {\n@@ -4466,7 +4466,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             assert(recentRejects);\n             recentRejects->insert(tx.GetHash());\n \n-            if (pfrom->fWhitelisted) {\n+            if (pfrom->fWhitelisted && GetBoolArg(\"-whitelistalwaysrelay\", DEFAULT_WHITELISTALWAYSRELAY)) {\n                 // Always relay transactions received from whitelisted peers, even\n                 // if they were rejected from the mempool, allowing the node to\n                 // function as a gateway for nodes hidden behind it."
      },
      {
        "sha": "c304b311e401f04db261aead89d93633236e92f8",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b632145edeb376b4d1597f192ca00634f7d2866c/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b632145edeb376b4d1597f192ca00634f7d2866c/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=b632145edeb376b4d1597f192ca00634f7d2866c",
        "patch": "@@ -41,6 +41,8 @@ struct CNodeStateStats;\n \n /** Default for accepting alerts from the P2P network. */\n static const bool DEFAULT_ALERTS = true;\n+/** Default for DEFAULT_WHITELISTALWAYSRELAY. */\n+static const bool DEFAULT_WHITELISTALWAYSRELAY = true;\n /** Default for -minrelaytxfee, minimum relay fee for transactions */\n static const unsigned int DEFAULT_MIN_RELAY_TX_FEE = 1000;\n /** Default for -maxorphantx, maximum number of orphan transactions kept in memory */"
      },
      {
        "sha": "000eefc858ba87ee3d9db800f8ecff4ebf40b6b1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b632145edeb376b4d1597f192ca00634f7d2866c/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b632145edeb376b4d1597f192ca00634f7d2866c/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=b632145edeb376b4d1597f192ca00634f7d2866c",
        "patch": "@@ -460,7 +460,7 @@ void CNode::PushVersion()\n     else\n         LogPrint(\"net\", \"send version message: version %d, blocks=%d, us=%s, peer=%d\\n\", PROTOCOL_VERSION, nBestHeight, addrMe.ToString(), id);\n     PushMessage(\"version\", PROTOCOL_VERSION, nLocalServices, nTime, addrYou, addrMe,\n-                nLocalHostNonce, strSubVersion, nBestHeight, true);\n+                nLocalHostNonce, strSubVersion, nBestHeight, !GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY));\n }\n \n "
      },
      {
        "sha": "ebdbe77565456fd9c7683415ead40f2e5d58fa58",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b632145edeb376b4d1597f192ca00634f7d2866c/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b632145edeb376b4d1597f192ca00634f7d2866c/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=b632145edeb376b4d1597f192ca00634f7d2866c",
        "patch": "@@ -62,6 +62,8 @@ static const size_t MAPASKFOR_MAX_SZ = MAX_INV_SZ;\n static const unsigned int DEFAULT_MAX_PEER_CONNECTIONS = 125;\n /** The default for -maxuploadtarget. 0 = Unlimited */\n static const uint64_t DEFAULT_MAX_UPLOAD_TARGET = 0;\n+/** Default for blocks only*/\n+static const bool DEFAULT_BLOCKSONLY = false;\n \n unsigned int ReceiveFloodSize();\n unsigned int SendBufferSize();\n@@ -342,7 +344,7 @@ class CNode\n     // We use fRelayTxes for two purposes -\n     // a) it allows us to not relay tx invs before receiving the peer's version message\n     // b) the peer may tell us in its version message that we should not relay tx invs\n-    //    until it has initialized its bloom filter.\n+    //    unless it loads a bloom filter.\n     bool fRelayTxes;\n     CSemaphoreGrant grantOutbound;\n     CCriticalSection cs_filter;"
      }
    ]
  },
  {
    "sha": "33b7f83c593456c08d2be3edef785bb4a3850368",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozM2I3ZjgzYzU5MzQ1NmMwOGQyYmUzZWRlZjc4NWJiNGEzODUwMzY4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-14T20:44:35Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-14T21:33:13Z"
      },
      "message": "[qa] travis: cover *receivedby* rpcs",
      "tree": {
        "sha": "94fd43cd44e84a4ecf00067ce84ea5d49d56d63a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/94fd43cd44e84a4ecf00067ce84ea5d49d56d63a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/33b7f83c593456c08d2be3edef785bb4a3850368",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33b7f83c593456c08d2be3edef785bb4a3850368",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/33b7f83c593456c08d2be3edef785bb4a3850368",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33b7f83c593456c08d2be3edef785bb4a3850368/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bd629d77edbeac6ce71a34f6d557c4e00513be44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd629d77edbeac6ce71a34f6d557c4e00513be44",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bd629d77edbeac6ce71a34f6d557c4e00513be44"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a02a73cd0365726ac3495792b53bbb6a9f4c1516",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33b7f83c593456c08d2be3edef785bb4a3850368/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33b7f83c593456c08d2be3edef785bb4a3850368/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=33b7f83c593456c08d2be3edef785bb4a3850368",
        "patch": "@@ -69,6 +69,7 @@\n testScripts = [\n     'wallet.py',\n     'listtransactions.py',\n+    'receivedby.py',\n     'mempool_resurrect_test.py',\n     'txn_doublespend.py --mineblock',\n     'txn_clone.py',\n@@ -104,7 +105,6 @@\n     'forknotify.py',\n     'invalidateblock.py',\n     'keypool.py',\n-    'receivedby.py',\n #    'rpcbind_test.py', #temporary, bug in libevent, see #6655\n #    'script_test.py', #used for manual comparison of 2 binaries\n     'smartfees.py',"
      }
    ]
  },
  {
    "sha": "6e182686163ce3c15b878bd78c41d8d18db344f1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZTE4MjY4NjE2M2NlM2MxNWI4NzhiZDc4YzQxZDhkMThkYjM0NGYx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-28T18:11:20Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-15T15:06:57Z"
      },
      "message": "Switch to libsecp256k1-based validation for ECDSA",
      "tree": {
        "sha": "d4e0997b1459def528557d640a480937ffc207fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4e0997b1459def528557d640a480937ffc207fd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e182686163ce3c15b878bd78c41d8d18db344f1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e182686163ce3c15b878bd78c41d8d18db344f1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6e182686163ce3c15b878bd78c41d8d18db344f1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e182686163ce3c15b878bd78c41d8d18db344f1/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b632145edeb376b4d1597f192ca00634f7d2866c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b632145edeb376b4d1597f192ca00634f7d2866c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b632145edeb376b4d1597f192ca00634f7d2866c"
      }
    ],
    "stats": {
      "total": 689,
      "additions": 291,
      "deletions": 398
    },
    "files": [
      {
        "sha": "7db27f9facf563c6494c6a3bdfe470f474fb7e83",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e182686163ce3c15b878bd78c41d8d18db344f1/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e182686163ce3c15b878bd78c41d8d18db344f1/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=6e182686163ce3c15b878bd78c41d8d18db344f1",
        "patch": "@@ -190,6 +190,21 @@ calculating the target.\n A more detailed documentation about keeping traffic low can be found in\n [/doc/reducetraffic.md](/doc/reducetraffic.md).\n \n+Signature validation using libsecp256k1\n+---------------------------------------\n+\n+ECDSA signatures inside Bitcoin transactions now use validation using\n+[https://github.com/bitcoin/secp256k1](libsecp256k1) instead of OpenSSL.\n+\n+Depending on the platform, this means a significant speedup for raw signature\n+validation speed. The advantage is largest on x86_64, where validation is over\n+five times faster. In practice, this translates to a raw reindexing and new\n+block validation times that are less than half of what it was before.\n+\n+Libsecp256k1 has undergone very extensive testing and validation.\n+\n+A side effect of this change is that libconsensus no longer depends on OpenSSL.\n+\n 0.12.0 Change log\n =================\n "
      },
      {
        "sha": "f1e98dabdedd6be00057a8f197861273c48ff101",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e182686163ce3c15b878bd78c41d8d18db344f1/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e182686163ce3c15b878bd78c41d8d18db344f1/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=6e182686163ce3c15b878bd78c41d8d18db344f1",
        "patch": "@@ -104,8 +104,6 @@ BITCOIN_CORE_H = \\\n   consensus/validation.h \\\n   core_io.h \\\n   core_memusage.h \\\n-  eccryptoverify.h \\\n-  ecwrapper.h \\\n   hash.h \\\n   httprpc.h \\\n   httpserver.h \\\n@@ -272,8 +270,6 @@ libbitcoin_common_a_SOURCES = \\\n   compressor.cpp \\\n   core_read.cpp \\\n   core_write.cpp \\\n-  eccryptoverify.cpp \\\n-  ecwrapper.cpp \\\n   hash.cpp \\\n   key.cpp \\\n   keystore.cpp \\\n@@ -404,8 +400,6 @@ libbitcoinconsensus_la_SOURCES = \\\n   crypto/sha1.cpp \\\n   crypto/sha256.cpp \\\n   crypto/sha512.cpp \\\n-  eccryptoverify.cpp \\\n-  ecwrapper.cpp \\\n   hash.cpp \\\n   primitives/transaction.cpp \\\n   pubkey.cpp \\\n@@ -420,8 +414,8 @@ if GLIBC_BACK_COMPAT\n endif\n \n libbitcoinconsensus_la_LDFLAGS = $(AM_LDFLAGS) -no-undefined $(RELDFLAGS)\n-libbitcoinconsensus_la_LIBADD = $(CRYPTO_LIBS)\n-libbitcoinconsensus_la_CPPFLAGS = $(AM_CPPFLAGS) $(CRYPTO_CFLAGS) -I$(builddir)/obj -DBUILD_BITCOIN_INTERNAL\n+libbitcoinconsensus_la_LIBADD = $(LIBSECP256K1)\n+libbitcoinconsensus_la_CPPFLAGS = $(AM_CPPFLAGS) -I$(builddir)/obj -I$(srcdir)/secp256k1/include -DBUILD_BITCOIN_INTERNAL\n libbitcoinconsensus_la_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n \n endif"
      },
      {
        "sha": "9f8b2b98af490148c62128ec3e45d8680c698b28",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e182686163ce3c15b878bd78c41d8d18db344f1/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e182686163ce3c15b878bd78c41d8d18db344f1/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=6e182686163ce3c15b878bd78c41d8d18db344f1",
        "patch": "@@ -477,9 +477,15 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n \n class Secp256k1Init\n {\n+    ECCVerifyHandle globalVerifyHandle;\n+\n public:\n-    Secp256k1Init() { ECC_Start(); }\n-    ~Secp256k1Init() { ECC_Stop(); }\n+    Secp256k1Init() {\n+        ECC_Start();\n+    }\n+    ~Secp256k1Init() {\n+        ECC_Stop();\n+    }\n };\n \n static void MutateTx(CMutableTransaction& tx, const string& command,"
      },
      {
        "sha": "e894e1122c56894b176ae853040040c1de1f2432",
        "filename": "src/eccryptoverify.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 68,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b632145edeb376b4d1597f192ca00634f7d2866c/src/eccryptoverify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b632145edeb376b4d1597f192ca00634f7d2866c/src/eccryptoverify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/eccryptoverify.cpp?ref=b632145edeb376b4d1597f192ca00634f7d2866c",
        "patch": "@@ -1,68 +0,0 @@\n-// Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2014 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include \"eccryptoverify.h\"\n-\n-namespace {\n-\n-int CompareBigEndian(const unsigned char *c1, size_t c1len, const unsigned char *c2, size_t c2len) {\n-    while (c1len > c2len) {\n-        if (*c1)\n-            return 1;\n-        c1++;\n-        c1len--;\n-    }\n-    while (c2len > c1len) {\n-        if (*c2)\n-            return -1;\n-        c2++;\n-        c2len--;\n-    }\n-    while (c1len > 0) {\n-        if (*c1 > *c2)\n-            return 1;\n-        if (*c2 > *c1)\n-            return -1;\n-        c1++;\n-        c2++;\n-        c1len--;\n-    }\n-    return 0;\n-}\n-\n-/** Order of secp256k1's generator minus 1. */\n-const unsigned char vchMaxModOrder[32] = {\n-    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n-    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,\n-    0xBA,0xAE,0xDC,0xE6,0xAF,0x48,0xA0,0x3B,\n-    0xBF,0xD2,0x5E,0x8C,0xD0,0x36,0x41,0x40\n-};\n-\n-/** Half of the order of secp256k1's generator minus 1. */\n-const unsigned char vchMaxModHalfOrder[32] = {\n-    0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n-    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n-    0x5D,0x57,0x6E,0x73,0x57,0xA4,0x50,0x1D,\n-    0xDF,0xE9,0x2F,0x46,0x68,0x1B,0x20,0xA0\n-};\n-\n-const unsigned char vchZero[1] = {0};\n-} // anon namespace\n-\n-namespace eccrypto {\n-\n-bool Check(const unsigned char *vch) {\n-    return vch &&\n-           CompareBigEndian(vch, 32, vchZero, 0) > 0 &&\n-           CompareBigEndian(vch, 32, vchMaxModOrder, 32) <= 0;\n-}\n-\n-bool CheckSignatureElement(const unsigned char *vch, int len, bool half) {\n-    return vch &&\n-           CompareBigEndian(vch, len, vchZero, 0) > 0 &&\n-           CompareBigEndian(vch, len, half ? vchMaxModHalfOrder : vchMaxModOrder, 32) <= 0;\n-}\n-\n-} // namespace eccrypto"
      },
      {
        "sha": "c67c1e44fce878a07385089c9783c50a5f30707e",
        "filename": "src/eccryptoverify.h",
        "status": "removed",
        "additions": 0,
        "deletions": 21,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b632145edeb376b4d1597f192ca00634f7d2866c/src/eccryptoverify.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b632145edeb376b4d1597f192ca00634f7d2866c/src/eccryptoverify.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/eccryptoverify.h?ref=b632145edeb376b4d1597f192ca00634f7d2866c",
        "patch": "@@ -1,21 +0,0 @@\n-// Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2014 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_ECCRYPTOVERIFY_H\n-#define BITCOIN_ECCRYPTOVERIFY_H\n-\n-#include <vector>\n-#include <cstdlib>\n-\n-class uint256;\n-\n-namespace eccrypto {\n-\n-bool Check(const unsigned char *vch);\n-bool CheckSignatureElement(const unsigned char *vch, int len, bool half);\n-\n-} // eccrypto namespace\n-\n-#endif // BITCOIN_ECCRYPTOVERIFY_H"
      },
      {
        "sha": "f94bc954fd124c3a3428759b8b61ad9b14d77d9e",
        "filename": "src/ecwrapper.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 218,
        "changes": 218,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b632145edeb376b4d1597f192ca00634f7d2866c/src/ecwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b632145edeb376b4d1597f192ca00634f7d2866c/src/ecwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ecwrapper.cpp?ref=b632145edeb376b4d1597f192ca00634f7d2866c",
        "patch": "@@ -1,218 +0,0 @@\n-// Copyright (c) 2009-2014 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include \"ecwrapper.h\"\n-\n-#include \"serialize.h\"\n-#include \"uint256.h\"\n-\n-#include <openssl/bn.h>\n-#include <openssl/ecdsa.h>\n-#include <openssl/obj_mac.h>\n-\n-namespace {\n-\n-class ecgroup_order\n-{\n-public:\n-  static const EC_GROUP* get()\n-  {\n-      static const ecgroup_order wrapper;\n-      return wrapper.pgroup;\n-  }\n-\n-private:\n-  ecgroup_order()\n-  : pgroup(EC_GROUP_new_by_curve_name(NID_secp256k1))\n-  {\n-  }\n-\n-  ~ecgroup_order()\n-  {\n-    EC_GROUP_free(pgroup);\n-  }\n-\n-  EC_GROUP* pgroup;\n-};\n-\n-/**\n- * Perform ECDSA key recovery (see SEC1 4.1.6) for curves over (mod p)-fields\n- * recid selects which key is recovered\n- * if check is non-zero, additional checks are performed\n- */\n-int ECDSA_SIG_recover_key_GFp(EC_KEY *eckey, ECDSA_SIG *ecsig, const unsigned char *msg, int msglen, int recid, int check)\n-{\n-    if (!eckey) return 0;\n-\n-    int ret = 0;\n-    BN_CTX *ctx = NULL;\n-\n-    BIGNUM *x = NULL;\n-    BIGNUM *e = NULL;\n-    BIGNUM *order = NULL;\n-    BIGNUM *sor = NULL;\n-    BIGNUM *eor = NULL;\n-    BIGNUM *field = NULL;\n-    EC_POINT *R = NULL;\n-    EC_POINT *O = NULL;\n-    EC_POINT *Q = NULL;\n-    BIGNUM *rr = NULL;\n-    BIGNUM *zero = NULL;\n-    int n = 0;\n-    int i = recid / 2;\n-\n-    const EC_GROUP *group = EC_KEY_get0_group(eckey);\n-    if ((ctx = BN_CTX_new()) == NULL) { ret = -1; goto err; }\n-    BN_CTX_start(ctx);\n-    order = BN_CTX_get(ctx);\n-    if (!EC_GROUP_get_order(group, order, ctx)) { ret = -2; goto err; }\n-    x = BN_CTX_get(ctx);\n-    if (!BN_copy(x, order)) { ret=-1; goto err; }\n-    if (!BN_mul_word(x, i)) { ret=-1; goto err; }\n-    if (!BN_add(x, x, ecsig->r)) { ret=-1; goto err; }\n-    field = BN_CTX_get(ctx);\n-    if (!EC_GROUP_get_curve_GFp(group, field, NULL, NULL, ctx)) { ret=-2; goto err; }\n-    if (BN_cmp(x, field) >= 0) { ret=0; goto err; }\n-    if ((R = EC_POINT_new(group)) == NULL) { ret = -2; goto err; }\n-    if (!EC_POINT_set_compressed_coordinates_GFp(group, R, x, recid % 2, ctx)) { ret=0; goto err; }\n-    if (check)\n-    {\n-        if ((O = EC_POINT_new(group)) == NULL) { ret = -2; goto err; }\n-        if (!EC_POINT_mul(group, O, NULL, R, order, ctx)) { ret=-2; goto err; }\n-        if (!EC_POINT_is_at_infinity(group, O)) { ret = 0; goto err; }\n-    }\n-    if ((Q = EC_POINT_new(group)) == NULL) { ret = -2; goto err; }\n-    n = EC_GROUP_get_degree(group);\n-    e = BN_CTX_get(ctx);\n-    if (!BN_bin2bn(msg, msglen, e)) { ret=-1; goto err; }\n-    if (8*msglen > n) BN_rshift(e, e, 8-(n & 7));\n-    zero = BN_CTX_get(ctx);\n-    if (!BN_zero(zero)) { ret=-1; goto err; }\n-    if (!BN_mod_sub(e, zero, e, order, ctx)) { ret=-1; goto err; }\n-    rr = BN_CTX_get(ctx);\n-    if (!BN_mod_inverse(rr, ecsig->r, order, ctx)) { ret=-1; goto err; }\n-    sor = BN_CTX_get(ctx);\n-    if (!BN_mod_mul(sor, ecsig->s, rr, order, ctx)) { ret=-1; goto err; }\n-    eor = BN_CTX_get(ctx);\n-    if (!BN_mod_mul(eor, e, rr, order, ctx)) { ret=-1; goto err; }\n-    if (!EC_POINT_mul(group, Q, eor, R, sor, ctx)) { ret=-2; goto err; }\n-    if (!EC_KEY_set_public_key(eckey, Q)) { ret=-2; goto err; }\n-\n-    ret = 1;\n-\n-err:\n-    if (ctx) {\n-        BN_CTX_end(ctx);\n-        BN_CTX_free(ctx);\n-    }\n-    if (R != NULL) EC_POINT_free(R);\n-    if (O != NULL) EC_POINT_free(O);\n-    if (Q != NULL) EC_POINT_free(Q);\n-    return ret;\n-}\n-\n-} // anon namespace\n-\n-CECKey::CECKey() {\n-    pkey = EC_KEY_new();\n-    assert(pkey != NULL);\n-    int result = EC_KEY_set_group(pkey, ecgroup_order::get());\n-    assert(result);\n-}\n-\n-CECKey::~CECKey() {\n-    EC_KEY_free(pkey);\n-}\n-\n-void CECKey::GetPubKey(std::vector<unsigned char> &pubkey, bool fCompressed) {\n-    EC_KEY_set_conv_form(pkey, fCompressed ? POINT_CONVERSION_COMPRESSED : POINT_CONVERSION_UNCOMPRESSED);\n-    int nSize = i2o_ECPublicKey(pkey, NULL);\n-    assert(nSize);\n-    assert(nSize <= 65);\n-    pubkey.clear();\n-    pubkey.resize(nSize);\n-    unsigned char *pbegin(begin_ptr(pubkey));\n-    int nSize2 = i2o_ECPublicKey(pkey, &pbegin);\n-    assert(nSize == nSize2);\n-}\n-\n-bool CECKey::SetPubKey(const unsigned char* pubkey, size_t size) {\n-    return o2i_ECPublicKey(&pkey, &pubkey, size) != NULL;\n-}\n-\n-bool CECKey::Verify(const uint256 &hash, const std::vector<unsigned char>& vchSig) {\n-    if (vchSig.empty())\n-        return false;\n-\n-    // New versions of OpenSSL will reject non-canonical DER signatures. de/re-serialize first.\n-    unsigned char *norm_der = NULL;\n-    ECDSA_SIG *norm_sig = ECDSA_SIG_new();\n-    const unsigned char* sigptr = &vchSig[0];\n-    assert(norm_sig);\n-    if (d2i_ECDSA_SIG(&norm_sig, &sigptr, vchSig.size()) == NULL)\n-    {\n-        /* As of OpenSSL 1.0.0p d2i_ECDSA_SIG frees and nulls the pointer on\n-         * error. But OpenSSL's own use of this function redundantly frees the\n-         * result. As ECDSA_SIG_free(NULL) is a no-op, and in the absence of a\n-         * clear contract for the function behaving the same way is more\n-         * conservative.\n-         */\n-        ECDSA_SIG_free(norm_sig);\n-        return false;\n-    }\n-    int derlen = i2d_ECDSA_SIG(norm_sig, &norm_der);\n-    ECDSA_SIG_free(norm_sig);\n-    if (derlen <= 0)\n-        return false;\n-\n-    // -1 = error, 0 = bad sig, 1 = good\n-    bool ret = ECDSA_verify(0, (unsigned char*)&hash, sizeof(hash), norm_der, derlen, pkey) == 1;\n-    OPENSSL_free(norm_der);\n-    return ret;\n-}\n-\n-bool CECKey::Recover(const uint256 &hash, const unsigned char *p64, int rec)\n-{\n-    if (rec<0 || rec>=3)\n-        return false;\n-    ECDSA_SIG *sig = ECDSA_SIG_new();\n-    BN_bin2bn(&p64[0],  32, sig->r);\n-    BN_bin2bn(&p64[32], 32, sig->s);\n-    bool ret = ECDSA_SIG_recover_key_GFp(pkey, sig, (unsigned char*)&hash, sizeof(hash), rec, 0) == 1;\n-    ECDSA_SIG_free(sig);\n-    return ret;\n-}\n-\n-bool CECKey::TweakPublic(const unsigned char vchTweak[32]) {\n-    bool ret = true;\n-    BN_CTX *ctx = BN_CTX_new();\n-    BN_CTX_start(ctx);\n-    BIGNUM *bnTweak = BN_CTX_get(ctx);\n-    BIGNUM *bnOrder = BN_CTX_get(ctx);\n-    BIGNUM *bnOne = BN_CTX_get(ctx);\n-    const EC_GROUP *group = EC_KEY_get0_group(pkey);\n-    EC_GROUP_get_order(group, bnOrder, ctx); // what a grossly inefficient way to get the (constant) group order...\n-    BN_bin2bn(vchTweak, 32, bnTweak);\n-    if (BN_cmp(bnTweak, bnOrder) >= 0)\n-        ret = false; // extremely unlikely\n-    EC_POINT *point = EC_POINT_dup(EC_KEY_get0_public_key(pkey), group);\n-    BN_one(bnOne);\n-    EC_POINT_mul(group, point, bnTweak, point, bnOne, ctx);\n-    if (EC_POINT_is_at_infinity(group, point))\n-        ret = false; // ridiculously unlikely\n-    EC_KEY_set_public_key(pkey, point);\n-    EC_POINT_free(point);\n-    BN_CTX_end(ctx);\n-    BN_CTX_free(ctx);\n-    return ret;\n-}\n-\n-bool CECKey::SanityCheck()\n-{\n-    const EC_GROUP *pgroup = ecgroup_order::get();\n-    if(pgroup == NULL)\n-        return false;\n-    // TODO Is there more EC functionality that could be missing?\n-    return true;\n-}"
      },
      {
        "sha": "efb6cd18a775f11420f305e116168b58e1c264e5",
        "filename": "src/ecwrapper.h",
        "status": "removed",
        "additions": 0,
        "deletions": 40,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b632145edeb376b4d1597f192ca00634f7d2866c/src/ecwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b632145edeb376b4d1597f192ca00634f7d2866c/src/ecwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ecwrapper.h?ref=b632145edeb376b4d1597f192ca00634f7d2866c",
        "patch": "@@ -1,40 +0,0 @@\n-// Copyright (c) 2009-2014 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_ECWRAPPER_H\n-#define BITCOIN_ECWRAPPER_H\n-\n-#include <cstddef>\n-#include <vector>\n-\n-#include <openssl/ec.h>\n-\n-class uint256;\n-\n-/** RAII Wrapper around OpenSSL's EC_KEY */\n-class CECKey {\n-private:\n-    EC_KEY *pkey;\n-\n-public:\n-    CECKey();\n-    ~CECKey();\n-\n-    void GetPubKey(std::vector<unsigned char>& pubkey, bool fCompressed);\n-    bool SetPubKey(const unsigned char* pubkey, size_t size);\n-    bool Verify(const uint256 &hash, const std::vector<unsigned char>& vchSig);\n-\n-    /**\n-     * reconstruct public key from a compact signature\n-     * This is only slightly more CPU intensive than just verifying it.\n-     * If this function succeeds, the recovered public key is guaranteed to be valid\n-     * (the signature is a valid signature of the given data for that key)\n-     */\n-    bool Recover(const uint256 &hash, const unsigned char *p64, int rec);\n-\n-    bool TweakPublic(const unsigned char vchTweak[32]);\n-    static bool SanityCheck();\n-};\n-\n-#endif // BITCOIN_ECWRAPPER_H"
      },
      {
        "sha": "d768c4837ee987bf808eab129dc6f91eefed4399",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e182686163ce3c15b878bd78c41d8d18db344f1/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e182686163ce3c15b878bd78c41d8d18db344f1/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6e182686163ce3c15b878bd78c41d8d18db344f1",
        "patch": "@@ -154,6 +154,7 @@ class CCoinsViewErrorCatcher : public CCoinsViewBacked\n \n static CCoinsViewDB *pcoinsdbview = NULL;\n static CCoinsViewErrorCatcher *pcoinscatcher = NULL;\n+static boost::scoped_ptr<ECCVerifyHandle> globalVerifyHandle;\n \n void Interrupt(boost::thread_group& threadGroup)\n {\n@@ -243,6 +244,7 @@ void Shutdown()\n     delete pwalletMain;\n     pwalletMain = NULL;\n #endif\n+    globalVerifyHandle.reset();\n     ECC_Stop();\n     LogPrintf(\"%s: done\\n\", __func__);\n }\n@@ -649,8 +651,7 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n bool InitSanityCheck(void)\n {\n     if(!ECC_InitSanityCheck()) {\n-        InitError(\"OpenSSL appears to lack support for elliptic curve cryptography. For more \"\n-                  \"information, visit https://en.bitcoin.it/wiki/OpenSSL_and_EC_Libraries\");\n+        InitError(\"Elliptic curve cryptography sanity check failure. Aborting.\");\n         return false;\n     }\n     if (!glibc_sanity_test() || !glibcxx_sanity_test())\n@@ -991,6 +992,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     // Initialize elliptic curve code\n     ECC_Start();\n+    globalVerifyHandle.reset(new ECCVerifyHandle());\n \n     // Sanity check\n     if (!InitSanityCheck())"
      },
      {
        "sha": "6ebb152c75cf0ca01cdccb51b3a6fc658cffb1c4",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 233,
        "deletions": 27,
        "changes": 260,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e182686163ce3c15b878bd78c41d8d18db344f1/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e182686163ce3c15b878bd78c41d8d18db344f1/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=6e182686163ce3c15b878bd78c41d8d18db344f1",
        "patch": "@@ -4,53 +4,224 @@\n \n #include \"pubkey.h\"\n \n-#include \"eccryptoverify.h\"\n+#include <secp256k1.h>\n+#include <secp256k1_recovery.h>\n \n-#include \"ecwrapper.h\"\n+namespace\n+{\n+/* Global secp256k1_context object used for verification. */\n+secp256k1_context* secp256k1_context_verify = NULL;\n+}\n+\n+/** This function is taken from the libsecp256k1 distribution and implements\n+ *  DER parsing for ECDSA signatures, while supporting an arbitrary subset of\n+ *  format violations.\n+ *\n+ *  Supported violations include negative integers, excessive padding, garbage\n+ *  at the end, and overly long length descriptors. This is safe to use in\n+ *  Bitcoin because since the activation of BIP66, signatures are verified to be\n+ *  strict DER before being passed to this module, and we know it supports all\n+ *  violations present in the blockchain before that point.\n+ */\n+static int ecdsa_signature_parse_der_lax(const secp256k1_context* ctx, secp256k1_ecdsa_signature* sig, const unsigned char *input, size_t inputlen) {\n+    size_t rpos, rlen, spos, slen;\n+    size_t pos = 0;\n+    size_t lenbyte;\n+    unsigned char tmpsig[64] = {0};\n+    int overflow = 0;\n+\n+    /* Hack to initialize sig with a correctly-parsed but invalid signature. */\n+    secp256k1_ecdsa_signature_parse_compact(ctx, sig, tmpsig);\n+\n+    /* Sequence tag byte */\n+    if (pos == inputlen || input[pos] != 0x30) {\n+        return 0;\n+    }\n+    pos++;\n+\n+    /* Sequence length bytes */\n+    if (pos == inputlen) {\n+        return 0;\n+    }\n+    lenbyte = input[pos++];\n+    if (lenbyte & 0x80) {\n+        lenbyte -= 0x80;\n+        if (pos + lenbyte > inputlen) {\n+            return 0;\n+        }\n+        pos += lenbyte;\n+    }\n+\n+    /* Integer tag byte for R */\n+    if (pos == inputlen || input[pos] != 0x02) {\n+        return 0;\n+    }\n+    pos++;\n+\n+    /* Integer length for R */\n+    if (pos == inputlen) {\n+        return 0;\n+    }\n+    lenbyte = input[pos++];\n+    if (lenbyte & 0x80) {\n+        lenbyte -= 0x80;\n+        if (pos + lenbyte > inputlen) {\n+            return 0;\n+        }\n+        while (lenbyte > 0 && input[pos] == 0) {\n+            pos++;\n+            lenbyte--;\n+        }\n+        if (lenbyte >= sizeof(size_t)) {\n+            return 0;\n+        }\n+        rlen = 0;\n+        while (lenbyte > 0) {\n+            rlen = (rlen << 8) + input[pos];\n+            pos++;\n+            lenbyte--;\n+        }\n+    } else {\n+        rlen = lenbyte;\n+    }\n+    if (rlen > inputlen - pos) {\n+        return 0;\n+    }\n+    rpos = pos;\n+    pos += rlen;\n+\n+    /* Integer tag byte for S */\n+    if (pos == inputlen || input[pos] != 0x02) {\n+        return 0;\n+    }\n+    pos++;\n+\n+    /* Integer length for S */\n+    if (pos == inputlen) {\n+        return 0;\n+    }\n+    lenbyte = input[pos++];\n+    if (lenbyte & 0x80) {\n+        lenbyte -= 0x80;\n+        if (pos + lenbyte > inputlen) {\n+            return 0;\n+        }\n+        while (lenbyte > 0 && input[pos] == 0) {\n+            pos++;\n+            lenbyte--;\n+        }\n+        if (lenbyte >= sizeof(size_t)) {\n+            return 0;\n+        }\n+        slen = 0;\n+        while (lenbyte > 0) {\n+            slen = (slen << 8) + input[pos];\n+            pos++;\n+            lenbyte--;\n+        }\n+    } else {\n+        slen = lenbyte;\n+    }\n+    if (slen > inputlen - pos) {\n+        return 0;\n+    }\n+    spos = pos;\n+    pos += slen;\n+\n+    /* Ignore leading zeroes in R */\n+    while (rlen > 0 && input[rpos] == 0) {\n+        rlen--;\n+        rpos++;\n+    }\n+    /* Copy R value */\n+    if (rlen > 32) {\n+        overflow = 1;\n+    } else {\n+        memcpy(tmpsig + 32 - rlen, input + rpos, rlen);\n+    }\n+\n+    /* Ignore leading zeroes in S */\n+    while (slen > 0 && input[spos] == 0) {\n+        slen--;\n+        spos++;\n+    }\n+    /* Copy S value */\n+    if (slen > 32) {\n+        overflow = 1;\n+    } else {\n+        memcpy(tmpsig + 64 - slen, input + spos, slen);\n+    }\n+\n+    if (!overflow) {\n+        overflow = !secp256k1_ecdsa_signature_parse_compact(ctx, sig, tmpsig);\n+    }\n+    if (overflow) {\n+        /* Overwrite the result again with a correctly-parsed but invalid\n+           signature if parsing failed. */\n+        memset(tmpsig, 0, 64);\n+        secp256k1_ecdsa_signature_parse_compact(ctx, sig, tmpsig);\n+    }\n+    return 1;\n+}\n \n bool CPubKey::Verify(const uint256 &hash, const std::vector<unsigned char>& vchSig) const {\n     if (!IsValid())\n         return false;\n-    CECKey key;\n-    if (!key.SetPubKey(begin(), size()))\n+    secp256k1_pubkey pubkey;\n+    secp256k1_ecdsa_signature sig;\n+    if (!secp256k1_ec_pubkey_parse(secp256k1_context_verify, &pubkey, &(*this)[0], size())) {\n         return false;\n-    if (!key.Verify(hash, vchSig))\n+    }\n+    if (vchSig.size() == 0) {\n         return false;\n-    return true;\n+    }\n+    if (!ecdsa_signature_parse_der_lax(secp256k1_context_verify, &sig, &vchSig[0], vchSig.size())) {\n+        return false;\n+    }\n+    /* libsecp256k1's ECDSA verification requires lower-S signatures, which have\n+     * not historically been enforced in Bitcoin, so normalize them first. */\n+    secp256k1_ecdsa_signature_normalize(secp256k1_context_verify, &sig, &sig);\n+    return secp256k1_ecdsa_verify(secp256k1_context_verify, &sig, hash.begin(), &pubkey);\n }\n \n bool CPubKey::RecoverCompact(const uint256 &hash, const std::vector<unsigned char>& vchSig) {\n     if (vchSig.size() != 65)\n         return false;\n     int recid = (vchSig[0] - 27) & 3;\n     bool fComp = ((vchSig[0] - 27) & 4) != 0;\n-    CECKey key;\n-    if (!key.Recover(hash, &vchSig[1], recid))\n+    secp256k1_pubkey pubkey;\n+    secp256k1_ecdsa_recoverable_signature sig;\n+    if (!secp256k1_ecdsa_recoverable_signature_parse_compact(secp256k1_context_verify, &sig, &vchSig[1], recid)) {\n         return false;\n-    std::vector<unsigned char> pubkey;\n-    key.GetPubKey(pubkey, fComp);\n-    Set(pubkey.begin(), pubkey.end());\n+    }\n+    if (!secp256k1_ecdsa_recover(secp256k1_context_verify, &pubkey, &sig, hash.begin())) {\n+        return false;\n+    }\n+    unsigned char pub[65];\n+    size_t publen = 65;\n+    secp256k1_ec_pubkey_serialize(secp256k1_context_verify, pub, &publen, &pubkey, fComp ? SECP256K1_EC_COMPRESSED : SECP256K1_EC_UNCOMPRESSED);\n+    Set(pub, pub + publen);\n     return true;\n }\n \n bool CPubKey::IsFullyValid() const {\n     if (!IsValid())\n         return false;\n-    CECKey key;\n-    if (!key.SetPubKey(begin(), size()))\n-        return false;\n-    return true;\n+    secp256k1_pubkey pubkey;\n+    return secp256k1_ec_pubkey_parse(secp256k1_context_verify, &pubkey, &(*this)[0], size());\n }\n \n bool CPubKey::Decompress() {\n     if (!IsValid())\n         return false;\n-    CECKey key;\n-    if (!key.SetPubKey(begin(), size()))\n+    secp256k1_pubkey pubkey;\n+    if (!secp256k1_ec_pubkey_parse(secp256k1_context_verify, &pubkey, &(*this)[0], size())) {\n         return false;\n-    std::vector<unsigned char> pubkey;\n-    key.GetPubKey(pubkey, false);\n-    Set(pubkey.begin(), pubkey.end());\n+    }\n+    unsigned char pub[65];\n+    size_t publen = 65;\n+    secp256k1_ec_pubkey_serialize(secp256k1_context_verify, pub, &publen, &pubkey, SECP256K1_EC_UNCOMPRESSED);\n+    Set(pub, pub + publen);\n     return true;\n }\n \n@@ -61,13 +232,18 @@ bool CPubKey::Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChi\n     unsigned char out[64];\n     BIP32Hash(cc, nChild, *begin(), begin()+1, out);\n     memcpy(ccChild.begin(), out+32, 32);\n-    CECKey key;\n-    bool ret = key.SetPubKey(begin(), size());\n-    ret &= key.TweakPublic(out);\n-    std::vector<unsigned char> pubkey;\n-    key.GetPubKey(pubkey, true);\n-    pubkeyChild.Set(pubkey.begin(), pubkey.end());\n-    return ret;\n+    secp256k1_pubkey pubkey;\n+    if (!secp256k1_ec_pubkey_parse(secp256k1_context_verify, &pubkey, &(*this)[0], size())) {\n+        return false;\n+    }\n+    if (!secp256k1_ec_pubkey_tweak_add(secp256k1_context_verify, &pubkey, out)) {\n+        return false;\n+    }\n+    unsigned char pub[33];\n+    size_t publen = 33;\n+    secp256k1_ec_pubkey_serialize(secp256k1_context_verify, pub, &publen, &pubkey, SECP256K1_EC_COMPRESSED);\n+    pubkeyChild.Set(pub, pub + publen);\n+    return true;\n }\n \n void CExtPubKey::Encode(unsigned char code[74]) const {\n@@ -95,3 +271,33 @@ bool CExtPubKey::Derive(CExtPubKey &out, unsigned int nChild) const {\n     out.nChild = nChild;\n     return pubkey.Derive(out.pubkey, out.chaincode, nChild, chaincode);\n }\n+\n+/* static */ bool CPubKey::CheckLowS(const std::vector<unsigned char>& vchSig) {\n+    secp256k1_ecdsa_signature sig;\n+    if (!ecdsa_signature_parse_der_lax(secp256k1_context_verify, &sig, &vchSig[0], vchSig.size())) {\n+        return false;\n+    }\n+    return (!secp256k1_ecdsa_signature_normalize(secp256k1_context_verify, NULL, &sig));\n+}\n+\n+/* static */ int ECCVerifyHandle::refcount = 0;\n+\n+ECCVerifyHandle::ECCVerifyHandle()\n+{\n+    if (refcount == 0) {\n+        assert(secp256k1_context_verify == NULL);\n+        secp256k1_context_verify = secp256k1_context_create(SECP256K1_CONTEXT_VERIFY);\n+        assert(secp256k1_context_verify != NULL);\n+    }\n+    refcount++;\n+}\n+\n+ECCVerifyHandle::~ECCVerifyHandle()\n+{\n+    refcount--;\n+    if (refcount == 0) {\n+        assert(secp256k1_context_verify != NULL);\n+        secp256k1_context_destroy(secp256k1_context_verify);\n+        secp256k1_context_verify = NULL;\n+    }\n+}"
      },
      {
        "sha": "a1d437e706e5cca5bcbe1a9523d356c882a95e04",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e182686163ce3c15b878bd78c41d8d18db344f1/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e182686163ce3c15b878bd78c41d8d18db344f1/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=6e182686163ce3c15b878bd78c41d8d18db344f1",
        "patch": "@@ -177,6 +177,11 @@ class CPubKey\n      */\n     bool Verify(const uint256& hash, const std::vector<unsigned char>& vchSig) const;\n \n+    /**\n+     * Check whether a signature is normalized (lower-S).\n+     */\n+    static bool CheckLowS(const std::vector<unsigned char>& vchSig);\n+\n     //! Recover a public key from a compact signature.\n     bool RecoverCompact(const uint256& hash, const std::vector<unsigned char>& vchSig);\n \n@@ -205,4 +210,15 @@ struct CExtPubKey {\n     bool Derive(CExtPubKey& out, unsigned int nChild) const;\n };\n \n+/** Users of this module must hold an ECCVerifyHandle. The constructor and\n+ *  destructor of these are not allowed to run in parallel, though. */\n+class ECCVerifyHandle\n+{\n+    static int refcount;\n+\n+public:\n+    ECCVerifyHandle();\n+    ~ECCVerifyHandle();\n+};\n+\n #endif // BITCOIN_PUBKEY_H"
      },
      {
        "sha": "79504f6ad369245c01d4fb9483b187f9964db041",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e182686163ce3c15b878bd78c41d8d18db344f1/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e182686163ce3c15b878bd78c41d8d18db344f1/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=6e182686163ce3c15b878bd78c41d8d18db344f1",
        "patch": "@@ -6,6 +6,7 @@\n #include \"bitcoinconsensus.h\"\n \n #include \"primitives/transaction.h\"\n+#include \"pubkey.h\"\n #include \"script/interpreter.h\"\n #include \"version.h\"\n \n@@ -60,7 +61,13 @@ inline int set_error(bitcoinconsensus_error* ret, bitcoinconsensus_error serror)\n     return 0;\n }\n \n-} // anon namespace\n+struct ECCryptoClosure\n+{\n+    ECCVerifyHandle handle;\n+};\n+\n+ECCryptoClosure instance_of_eccryptoclosure;\n+}\n \n int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen,\n                                     const unsigned char *txTo        , unsigned int txToLen,"
      },
      {
        "sha": "8dcab832cb7099ea5686628f86014e62f57e6504",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 11,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e182686163ce3c15b878bd78c41d8d18db344f1/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e182686163ce3c15b878bd78c41d8d18db344f1/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=6e182686163ce3c15b878bd78c41d8d18db344f1",
        "patch": "@@ -9,7 +9,6 @@\n #include \"crypto/ripemd160.h\"\n #include \"crypto/sha1.h\"\n #include \"crypto/sha256.h\"\n-#include \"eccryptoverify.h\"\n #include \"pubkey.h\"\n #include \"script/script.h\"\n #include \"uint256.h\"\n@@ -165,16 +164,8 @@ bool static IsLowDERSignature(const valtype &vchSig, ScriptError* serror) {\n     if (!IsValidSignatureEncoding(vchSig)) {\n         return set_error(serror, SCRIPT_ERR_SIG_DER);\n     }\n-    unsigned int nLenR = vchSig[3];\n-    unsigned int nLenS = vchSig[5+nLenR];\n-    const unsigned char *S = &vchSig[6+nLenR];\n-    // If the S value is above the order of the curve divided by two, its\n-    // complement modulo the order could have been used instead, which is\n-    // one byte shorter when encoded correctly.\n-    if (!eccrypto::CheckSignatureElement(S, nLenS, true))\n-        return set_error(serror, SCRIPT_ERR_SIG_HIGH_S);\n-\n-    return true;\n+    std::vector<unsigned char> vchSigCopy(vchSig.begin(), vchSig.begin() + vchSig.size() - 1);\n+    return CPubKey::CheckLowS(vchSigCopy);\n }\n \n bool static IsDefinedHashtypeSignature(const valtype &vchSig) {"
      },
      {
        "sha": "f657d720381f9197a74139918ae8b5b9bce3a3e3",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e182686163ce3c15b878bd78c41d8d18db344f1/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e182686163ce3c15b878bd78c41d8d18db344f1/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=6e182686163ce3c15b878bd78c41d8d18db344f1",
        "patch": "@@ -3,6 +3,7 @@\n \n #include \"chainparamsbase.h\"\n #include \"key.h\"\n+#include \"pubkey.h\"\n #include \"txdb.h\"\n \n #include <boost/filesystem.hpp>\n@@ -12,6 +13,8 @@\n  * This just configures logging and chain parameters.\n  */\n struct BasicTestingSetup {\n+    ECCVerifyHandle globalVerifyHandle;\n+\n     BasicTestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n     ~BasicTestingSetup();\n };"
      }
    ]
  },
  {
    "sha": "4d29032a6437eaa147a69ce2857fb243bf3a1e49",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDI5MDMyYTY0MzdlYWExNDdhNjljZTI4NTdmYjI0M2JmM2ExZTQ5",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2015-11-16T01:13:30Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2015-11-16T01:13:30Z"
      },
      "message": "Fixed integer comparison warning.",
      "tree": {
        "sha": "8e42fd8a7be7f47efe1bca0f4d11cae17b5d44c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e42fd8a7be7f47efe1bca0f4d11cae17b5d44c7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d29032a6437eaa147a69ce2857fb243bf3a1e49",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d29032a6437eaa147a69ce2857fb243bf3a1e49",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d29032a6437eaa147a69ce2857fb243bf3a1e49",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d29032a6437eaa147a69ce2857fb243bf3a1e49/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b632145edeb376b4d1597f192ca00634f7d2866c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b632145edeb376b4d1597f192ca00634f7d2866c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b632145edeb376b4d1597f192ca00634f7d2866c"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5d053e7813eb62beda651972e8e764cdc8e0fada",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d29032a6437eaa147a69ce2857fb243bf3a1e49/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d29032a6437eaa147a69ce2857fb243bf3a1e49/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4d29032a6437eaa147a69ce2857fb243bf3a1e49",
        "patch": "@@ -2577,7 +2577,7 @@ bool FindBlockPos(CValidationState &state, CDiskBlockPos &pos, unsigned int nAdd\n         pos.nPos = vinfoBlockFile[nFile].nSize;\n     }\n \n-    if (nFile != nLastBlockFile) {\n+    if ((int)nFile != nLastBlockFile) {\n         if (!fKnown) {\n             LogPrintf(\"Leaving block file %i: %s\\n\", nFile, vinfoBlockFile[nFile].ToString());\n         }"
      }
    ]
  },
  {
    "sha": "814697c5569c760c8bdb426ea8ffb6bd74686cfa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MTQ2OTdjNTU2OWM3NjBjOGJkYjQyNmVhOGZmYjZiZDc0Njg2Y2Zh",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-16T07:39:04Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-16T07:39:42Z"
      },
      "message": "Merge pull request #7000\n\n773ae46 [Qt] add shortcurts for debug-/console-window (Jonas Schnelli)",
      "tree": {
        "sha": "c5c054bf89c781e8e3801826d293c206ff8251bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c5c054bf89c781e8e3801826d293c206ff8251bf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/814697c5569c760c8bdb426ea8ffb6bd74686cfa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWSYg+AAoJECnUvLZBb1PsOL4P/iu3EaKwMTHcOPAPc8v3XHfi\nge9n2R3SFdMWTqeH0fiYsN6S4jLOhAu8Jby7/D9h8OuKa+cQNvIiwXi8m0mAbM2X\n78sYtYsGy9wyoiEchPSlf96X7tptZFoSCzmsAZj3sNQ8TOquWptA+lVUlj3DE6IQ\ngMhnLTzMSjL3gC5Lfkz98gkPGVM1VgjJsScbu8xaFmX7/cKotW4/yHj5U/0bS4HW\n5PAt2vXER/dBXUpVyAhT0Y/oFrHlSxBLrp9frdXYV5OZkZCtOnKIu9tMX/SlPyw+\nWKIpwnEt97hOFMNvhyN9O8CwnjD3Ppmq2wDibwRRb+MWMQYL9b1eAJaArtyuY207\n67P0KpldGG0DsisWHQB8hHB2sbKVO99Bcnhb/LHUhaklf7R4a8Op3wlx7naMy33M\nIczOibx44YUWvccRjdGr96NQ8XENaPx83aEHhBq4vIYd7QZFILUNUlee5nq9IQQU\nAvZKQEIu2n94/V9CTQcA+yJbGI/syBefXTMCqQFcNiEZKAm0NQdT8/S2vPWvfTyM\nnNI+Ac3DHXn+jbwYt79hB7tFZ0Mr42gH4oX+vnLhzpaLuFATBipVg2ApCekE//Zo\nkpMFtTh/dDyQRDjUMN2X+YirA5HscTYjQhF/GY1iTUOtBWxff6DHLWdmAKngvD/5\ndXGMvkINYT6m1ITIexzm\n=7KPY\n-----END PGP SIGNATURE-----",
        "payload": "tree c5c054bf89c781e8e3801826d293c206ff8251bf\nparent b632145edeb376b4d1597f192ca00634f7d2866c\nparent 773ae4654ecc9272b32b6a7480b16fc30a5269f3\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1447659544 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1447659582 +0100\n\nMerge pull request #7000\n\n773ae46 [Qt] add shortcurts for debug-/console-window (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/814697c5569c760c8bdb426ea8ffb6bd74686cfa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/814697c5569c760c8bdb426ea8ffb6bd74686cfa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/814697c5569c760c8bdb426ea8ffb6bd74686cfa/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b632145edeb376b4d1597f192ca00634f7d2866c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b632145edeb376b4d1597f192ca00634f7d2866c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b632145edeb376b4d1597f192ca00634f7d2866c"
      },
      {
        "sha": "773ae4654ecc9272b32b6a7480b16fc30a5269f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/773ae4654ecc9272b32b6a7480b16fc30a5269f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/773ae4654ecc9272b32b6a7480b16fc30a5269f3"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 26,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6f9f6e90d638113aebbab051ef223216abdc9139",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/814697c5569c760c8bdb426ea8ffb6bd74686cfa/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/814697c5569c760c8bdb426ea8ffb6bd74686cfa/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=814697c5569c760c8bdb426ea8ffb6bd74686cfa",
        "patch": "@@ -44,6 +44,7 @@\n #include <QProgressBar>\n #include <QProgressDialog>\n #include <QSettings>\n+#include <QShortcut>\n #include <QStackedWidget>\n #include <QStatusBar>\n #include <QStyle>\n@@ -364,6 +365,9 @@ void BitcoinGUI::createActions()\n         connect(openAction, SIGNAL(triggered()), this, SLOT(openClicked()));\n     }\n #endif // ENABLE_WALLET\n+\n+    new QShortcut(QKeySequence(Qt::CTRL + Qt::SHIFT + Qt::Key_C), this, SLOT(showDebugWindowActivateConsole()));\n+    new QShortcut(QKeySequence(Qt::CTRL + Qt::SHIFT + Qt::Key_D), this, SLOT(showDebugWindow()));\n }\n \n void BitcoinGUI::createMenuBar()\n@@ -597,6 +601,12 @@ void BitcoinGUI::showDebugWindow()\n     rpcConsole->activateWindow();\n }\n \n+void BitcoinGUI::showDebugWindowActivateConsole()\n+{\n+    rpcConsole->setTabFocus(RPCConsole::TAB_CONSOLE);\n+    showDebugWindow();\n+}\n+\n void BitcoinGUI::showHelpMessageClicked()\n {\n     helpMessageDialog->show();"
      },
      {
        "sha": "2b98dabc5660ad4f4510af8c770d9bd832505ad0",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/814697c5569c760c8bdb426ea8ffb6bd74686cfa/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/814697c5569c760c8bdb426ea8ffb6bd74686cfa/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=814697c5569c760c8bdb426ea8ffb6bd74686cfa",
        "patch": "@@ -198,6 +198,8 @@ private Q_SLOTS:\n     void aboutClicked();\n     /** Show debug window */\n     void showDebugWindow();\n+    /** Show debug window and set focus to the console */\n+    void showDebugWindowActivateConsole();\n     /** Show help message dialog */\n     void showHelpMessageClicked();\n #ifndef Q_OS_MAC"
      },
      {
        "sha": "4554281e0fb241732165e79babfbbb5c23237b61",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/814697c5569c760c8bdb426ea8ffb6bd74686cfa/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/814697c5569c760c8bdb426ea8ffb6bd74686cfa/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=814697c5569c760c8bdb426ea8ffb6bd74686cfa",
        "patch": "@@ -856,3 +856,8 @@ void RPCConsole::showOrHideBanTableIfRequired()\n     ui->banlistWidget->setVisible(visible);\n     ui->banHeading->setVisible(visible);\n }\n+\n+void RPCConsole::setTabFocus(enum TabTypes tabType)\n+{\n+    ui->tabWidget->setCurrentIndex(tabType);\n+}"
      },
      {
        "sha": "0914612c3ed1bb5d7c326e8f1a7dd08b779278ee",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/814697c5569c760c8bdb426ea8ffb6bd74686cfa/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/814697c5569c760c8bdb426ea8ffb6bd74686cfa/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=814697c5569c760c8bdb426ea8ffb6bd74686cfa",
        "patch": "@@ -44,6 +44,13 @@ class RPCConsole: public QWidget\n         CMD_ERROR\n     };\n \n+    enum TabTypes {\n+        TAB_INFO = 0,\n+        TAB_CONSOLE = 1,\n+        TAB_GRAPH = 2,\n+        TAB_PEERS = 3\n+    };\n+\n protected:\n     virtual bool eventFilter(QObject* obj, QEvent *event);\n     void keyPressEvent(QKeyEvent *);\n@@ -91,6 +98,8 @@ public Q_SLOTS:\n     void banSelectedNode(int bantime);\n     /** Unban a selected node on the Bans tab */\n     void unbanSelectedNode();\n+    /** set which tab has the focus (is visible) */\n+    void setTabFocus(enum TabTypes tabType);\n \n Q_SIGNALS:\n     // For RPC command executor"
      }
    ]
  },
  {
    "sha": "6876a78b863e2d4f4c7ad94627bb35363f6fa720",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ODc2YTc4Yjg2M2UyZDRmNGM3YWQ5NDYyN2JiMzUzNjNmNmZhNzIw",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-16T08:37:51Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-16T08:38:08Z"
      },
      "message": "Merge pull request #6991\n\n9bd3f03 Clarify 'fee' field in fundrawtransaction help text (Peter Todd)",
      "tree": {
        "sha": "64a62a9dba91a67378dee35421298ec46faedeff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/64a62a9dba91a67378dee35421298ec46faedeff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6876a78b863e2d4f4c7ad94627bb35363f6fa720",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCAAGBQJWSZXwAAoJEOq1r5TZ6avnT2EP/AgMndE0OwPViyTuk2idfrWL\n5S+NZu9fP7CijI4DWLbDakKseaGTxxul8S6SBhEvGMC84qTYaFSL1P/6provhiL8\nQwCdtXDCZJ/FK1y5/WhYIPDD9nhSWtDhbsV9gd8FrYHvnnJK5PMh543ixkEUH+W7\nWH7BLW6UTamzmbjSoJ0cHb1wS7yn/d4zGzMrgtT4K6lFfoDXKNcILQaI9iyILi6I\nCMM7yklFDdD4zU9Ew/mRNJ/ytph8AbjNGaAI4OOSAjNE9StyRzP6bG6k7dJUVm5s\n34HL8ipOBperSxGP+niaXKM7C0XuI4aDAu5l3kE6NBCtatjIu2zplSiFR095cVlI\nv9wgcM8BizpI0DWDiy7NWFv4Ss/KjfefbGO+riQh2L6up0rLzGGbhfvRRQ3zSmNT\nDyF+sYZ3UT3KSGwzdTp0Fg2Cbb688wqih6kk9iSx9cEZEOaybH4DtLteO291/Hsv\nngj2iVDOIc6fuQ0T3vNyiRwM+bI8Z4ZK3UNqbqU2u0jkcFxvrwIY4OcpGNljS2O3\ngvq6yeBR9oOmFrbSO7bu+cmS4mxqLG/diLwCyjouXFXrjMVnDNqAfz5TVVKdPfDN\nodGBLQJwBQw6Moo9m28UqoXC3QNB5y32l3pKMhGr1lAmMEmxfdY8XjfgNg/re9LO\nCEdCczoj2scL1pXo+drw\n=5Q3u\n-----END PGP SIGNATURE-----",
        "payload": "tree 64a62a9dba91a67378dee35421298ec46faedeff\nparent 814697c5569c760c8bdb426ea8ffb6bd74686cfa\nparent 9bd3f035f09acba550e037de3028894a4047d6ae\nauthor Gregory Maxwell <greg@xiph.org> 1447663071 -0800\ncommitter Gregory Maxwell <greg@xiph.org> 1447663088 -0800\n\nMerge pull request #6991\n\n9bd3f03 Clarify 'fee' field in fundrawtransaction help text (Peter Todd)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6876a78b863e2d4f4c7ad94627bb35363f6fa720",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6876a78b863e2d4f4c7ad94627bb35363f6fa720",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6876a78b863e2d4f4c7ad94627bb35363f6fa720/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "814697c5569c760c8bdb426ea8ffb6bd74686cfa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/814697c5569c760c8bdb426ea8ffb6bd74686cfa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/814697c5569c760c8bdb426ea8ffb6bd74686cfa"
      },
      {
        "sha": "9bd3f035f09acba550e037de3028894a4047d6ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bd3f035f09acba550e037de3028894a4047d6ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9bd3f035f09acba550e037de3028894a4047d6ae"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bc00c62e9cfd0e65b6d9ff32482dfb287fc40731",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6876a78b863e2d4f4c7ad94627bb35363f6fa720/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6876a78b863e2d4f4c7ad94627bb35363f6fa720/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=6876a78b863e2d4f4c7ad94627bb35363f6fa720",
        "patch": "@@ -2396,7 +2396,7 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n                             \"\\nResult:\\n\"\n                             \"{\\n\"\n                             \"  \\\"hex\\\":       \\\"value\\\", (string)  The resulting raw transaction (hex-encoded string)\\n\"\n-                            \"  \\\"fee\\\":       n,         (numeric) The fee added to the transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee the resulting transaction pays\\n\"\n                             \"  \\\"changepos\\\": n          (numeric) The position of the added change output, or -1\\n\"\n                             \"}\\n\"\n                             \"\\\"hex\\\"             \\n\""
      }
    ]
  },
  {
    "sha": "aee22bf2886acd3151992c42f7c0ca5f2aae3fdf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZWUyMmJmMjg4NmFjZDMxNTE5OTJjNDJmN2MwY2E1ZjJhYWUzZmRm",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-14T13:54:21Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-16T09:21:54Z"
      },
      "message": "Avoid a compile error on hosts with libevent too old for EVENT_LOG_WARN.\n\nThis uses _EVENT_LOG_WARN instead, which appears to be defined in the\n old versions of libevent that I have on some systems.",
      "tree": {
        "sha": "67482439c3623b129721dda7eb79684751100594",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/67482439c3623b129721dda7eb79684751100594"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aee22bf2886acd3151992c42f7c0ca5f2aae3fdf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aee22bf2886acd3151992c42f7c0ca5f2aae3fdf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aee22bf2886acd3151992c42f7c0ca5f2aae3fdf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aee22bf2886acd3151992c42f7c0ca5f2aae3fdf/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b632145edeb376b4d1597f192ca00634f7d2866c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b632145edeb376b4d1597f192ca00634f7d2866c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b632145edeb376b4d1597f192ca00634f7d2866c"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "52f5675e853e34ad85d1dd684b17c6f5cdc381de",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aee22bf2886acd3151992c42f7c0ca5f2aae3fdf/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aee22bf2886acd3151992c42f7c0ca5f2aae3fdf/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=aee22bf2886acd3151992c42f7c0ca5f2aae3fdf",
        "patch": "@@ -365,6 +365,10 @@ static void HTTPWorkQueueRun(WorkQueue<HTTPClosure>* queue)\n /** libevent event log callback */\n static void libevent_log_cb(int severity, const char *msg)\n {\n+#ifndef EVENT_LOG_WARN\n+// EVENT_LOG_WARN was added in 2.0.19; but before then _EVENT_LOG_WARN existed.\n+# define EVENT_LOG_WARN _EVENT_LOG_WARN\n+#endif\n     if (severity >= EVENT_LOG_WARN) // Log warn messages and higher without debug category\n         LogPrintf(\"libevent: %s\\n\", msg);\n     else"
      }
    ]
  },
  {
    "sha": "d16d1b72d1b5bd7e71c0f03358f13711bccf3dc1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMTZkMWI3MmQxYjViZDdlNzFjMGYwMzM1OGYxMzcxMWJjY2YzZGMx",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-16T09:43:36Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-16T10:05:26Z"
      },
      "message": "[Qt] refactor and optimize proxy settings behavior",
      "tree": {
        "sha": "a16284c3f350d4ff6676c507d5b9b7423301708c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a16284c3f350d4ff6676c507d5b9b7423301708c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d16d1b72d1b5bd7e71c0f03358f13711bccf3dc1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWSapnAAoJECnUvLZBb1PsvEcP/RnQstbtv9DLGYWCxOnVNMyA\nH8CO8gkW7UckHPEOnGZGv/i8khPPI0Qv0wh4eX7kDWePvJkf6cbr8NmcRTM4GBLM\nymmAEV+LIGkzalGA50/kTGGwOhE/7RPnF6GB7RSuSDswR8GEVjcohLIuV+fP/b3j\nmhaKlwGAZ93v+6SHs8jtwyw2OBa8/PoRxhVtAHDolB7NnpUd79aEnV2T4BM9nbrS\ncdy2tSyctH0JaM4lX9sjKGwFX36GNA0bSk3s9aX/zF/x0tfjGA5SVm1Q6ksn3lw6\nr1YZesnRvXVk2lJX+QwXLfb/iCMlYluMlXuQQEPN3aPW3RbolmdmO6b6hgYyi1h1\nFe7kR1Atl+JKwWJku6rbmbrICw0HMQy6+qr+22qKnkrVXaxpZ3zPVo7iC34Ic+Hs\nyuaaOZhrTf3uTliVK5ZYWZ/lsUXceb9gcqr8uEcncwUE9jVlSzeduC5D7Gl7Kp5i\niO5d1zlS+Nm026mHgjF3BrCLM+Mscja889XT6sxhQ6LgSQBoz3ic14iaKvKDGxDo\nZpoK7LI+hMwyf1rQsULZj0xRGL7dNgirANgc5CuqJF81o/rzcYcmPmO88OYgnWta\nmzpa1dy4XN62y8X2WWpPEvNmgg+ZWq6CwgPOC7HDpeW3lRJRgbpd1cB+4rWlj1Co\ncJlp3Fahu+wdOy6WNYSc\n=Wa54\n-----END PGP SIGNATURE-----",
        "payload": "tree a16284c3f350d4ff6676c507d5b9b7423301708c\nparent 6876a78b863e2d4f4c7ad94627bb35363f6fa720\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1447667016 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1447668326 +0100\n\n[Qt] refactor and optimize proxy settings behavior\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d16d1b72d1b5bd7e71c0f03358f13711bccf3dc1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d16d1b72d1b5bd7e71c0f03358f13711bccf3dc1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d16d1b72d1b5bd7e71c0f03358f13711bccf3dc1/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6876a78b863e2d4f4c7ad94627bb35363f6fa720",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6876a78b863e2d4f4c7ad94627bb35363f6fa720",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6876a78b863e2d4f4c7ad94627bb35363f6fa720"
      }
    ],
    "stats": {
      "total": 113,
      "additions": 60,
      "deletions": 53
    },
    "files": [
      {
        "sha": "b94358451fe4a378ff6c00a3645559e98ace5a0d",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 44,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d16d1b72d1b5bd7e71c0f03358f13711bccf3dc1/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d16d1b72d1b5bd7e71c0f03358f13711bccf3dc1/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=d16d1b72d1b5bd7e71c0f03358f13711bccf3dc1",
        "patch": "@@ -34,8 +34,7 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     QDialog(parent),\n     ui(new Ui::OptionsDialog),\n     model(0),\n-    mapper(0),\n-    fProxyIpsValid(true)\n+    mapper(0)\n {\n     ui->setupUi(this);\n \n@@ -64,9 +63,6 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     connect(ui->connectSocksTor, SIGNAL(toggled(bool)), ui->proxyIpTor, SLOT(setEnabled(bool)));\n     connect(ui->connectSocksTor, SIGNAL(toggled(bool)), ui->proxyPortTor, SLOT(setEnabled(bool)));\n \n-    ui->proxyIp->installEventFilter(this);\n-    ui->proxyIpTor->installEventFilter(this);\n-\n     /* Window elements init */\n #ifdef Q_OS_MAC\n     /* remove Window tab on Mac */\n@@ -119,7 +115,10 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     mapper->setOrientation(Qt::Vertical);\n \n     /* setup/change UI elements when proxy IPs are invalid/valid */\n-    connect(this, SIGNAL(proxyIpChecks(QValidatedLineEdit *, int)), this, SLOT(doProxyIpChecks(QValidatedLineEdit *, int)));\n+    ui->proxyIp->setCheckValidator(new ProxyAddressValidator(parent));\n+    ui->proxyIpTor->setCheckValidator(new ProxyAddressValidator(parent));\n+    connect(ui->proxyIp, SIGNAL(validationDidChange(QValidatedLineEdit *)), this, SLOT(updateProxyValidationState(QValidatedLineEdit *)));\n+    connect(ui->proxyIpTor, SIGNAL(validationDidChange(QValidatedLineEdit *)), this, SLOT(updateProxyValidationState(QValidatedLineEdit *)));\n }\n \n OptionsDialog::~OptionsDialog()\n@@ -200,18 +199,6 @@ void OptionsDialog::setMapper()\n     mapper->addMapping(ui->thirdPartyTxUrls, OptionsModel::ThirdPartyTxUrls);\n }\n \n-void OptionsDialog::enableOkButton()\n-{\n-    /* prevent enabling of the OK button when data modified, if there is an invalid proxy address present */\n-    if(fProxyIpsValid)\n-        setOkButtonState(true);\n-}\n-\n-void OptionsDialog::disableOkButton()\n-{\n-    setOkButtonState(false);\n-}\n-\n void OptionsDialog::setOkButtonState(bool fState)\n {\n     ui->okButton->setEnabled(fState);\n@@ -269,24 +256,19 @@ void OptionsDialog::clearStatusLabel()\n     ui->statusLabel->clear();\n }\n \n-void OptionsDialog::doProxyIpChecks(QValidatedLineEdit *pUiProxyIp, int nProxyPort)\n+void OptionsDialog::updateProxyValidationState(QValidatedLineEdit *pUiProxyIp)\n {\n-    Q_UNUSED(nProxyPort);\n-\n-    CService addrProxy;\n-\n-    /* Check for a valid IPv4 / IPv6 address */\n-    if (!(fProxyIpsValid = LookupNumeric(pUiProxyIp->text().toStdString().c_str(), addrProxy)))\n+    QValidatedLineEdit *otherProxyWidget = (pUiProxyIp == ui->proxyIpTor) ? ui->proxyIp : ui->proxyIpTor;\n+    if (pUiProxyIp->isValid())\n     {\n-        disableOkButton();\n-        pUiProxyIp->setValid(false);\n-        ui->statusLabel->setStyleSheet(\"QLabel { color: red; }\");\n-        ui->statusLabel->setText(tr(\"The supplied proxy address is invalid.\"));\n+        setOkButtonState(otherProxyWidget->isValid()); //only enable ok button if both proxys are valid\n+        ui->statusLabel->clear();\n     }\n     else\n     {\n-        enableOkButton();\n-        ui->statusLabel->clear();\n+        setOkButtonState(false);\n+        ui->statusLabel->setStyleSheet(\"QLabel { color: red; }\");\n+        ui->statusLabel->setText(tr(\"The supplied proxy address is invalid.\"));\n     }\n }\n \n@@ -312,18 +294,18 @@ void OptionsDialog::updateDefaultProxyNets()\n     (strProxy == strDefaultProxyGUI.toStdString()) ? ui->proxyReachTor->setChecked(true) : ui->proxyReachTor->setChecked(false);\n }\n \n-bool OptionsDialog::eventFilter(QObject *object, QEvent *event)\n+ProxyAddressValidator::ProxyAddressValidator(QObject *parent) :\n+QValidator(parent)\n {\n-    if(event->type() == QEvent::FocusOut)\n-    {\n-        if(object == ui->proxyIp)\n-        {\n-            Q_EMIT proxyIpChecks(ui->proxyIp, ui->proxyPort->text().toInt());\n-        }\n-        else if(object == ui->proxyIpTor)\n-        {\n-            Q_EMIT proxyIpChecks(ui->proxyIpTor, ui->proxyPortTor->text().toInt());\n-        }\n-    }\n-    return QDialog::eventFilter(object, event);\n+}\n+\n+QValidator::State ProxyAddressValidator::validate(QString &input, int &pos) const\n+{\n+    Q_UNUSED(pos);\n+    // Validate the proxy\n+    proxyType addrProxy = proxyType(CService(input.toStdString(), 9050), true);\n+    if (addrProxy.IsValid())\n+        return QValidator::Acceptable;\n+\n+    return QValidator::Invalid;\n }"
      },
      {
        "sha": "7d6ca60c805812b8d0b2c6825ba713fb0c061239",
        "filename": "src/qt/optionsdialog.h",
        "status": "modified",
        "additions": 14,
        "deletions": 9,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d16d1b72d1b5bd7e71c0f03358f13711bccf3dc1/src/qt/optionsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d16d1b72d1b5bd7e71c0f03358f13711bccf3dc1/src/qt/optionsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.h?ref=d16d1b72d1b5bd7e71c0f03358f13711bccf3dc1",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_QT_OPTIONSDIALOG_H\n \n #include <QDialog>\n+#include <QValidator>\n \n class OptionsModel;\n class QValidatedLineEdit;\n@@ -18,6 +19,18 @@ namespace Ui {\n class OptionsDialog;\n }\n \n+/** Proxy address widget validator, checks for a valid proxy address.\n+ */\n+class ProxyAddressValidator : public QValidator\n+{\n+    Q_OBJECT\n+\n+public:\n+    explicit ProxyAddressValidator(QObject *parent);\n+\n+    State validate(QString &input, int &pos) const;\n+};\n+\n /** Preferences dialog. */\n class OptionsDialog : public QDialog\n {\n@@ -30,14 +43,7 @@ class OptionsDialog : public QDialog\n     void setModel(OptionsModel *model);\n     void setMapper();\n \n-protected:\n-    bool eventFilter(QObject *object, QEvent *event);\n-\n private Q_SLOTS:\n-    /* enable OK button */\n-    void enableOkButton();\n-    /* disable OK button */\n-    void disableOkButton();\n     /* set OK button state (enabled / disabled) */\n     void setOkButtonState(bool fState);\n     void on_resetButton_clicked();\n@@ -46,7 +52,7 @@ private Q_SLOTS:\n \n     void showRestartWarning(bool fPersistent = false);\n     void clearStatusLabel();\n-    void doProxyIpChecks(QValidatedLineEdit *pUiProxyIp, int nProxyPort);\n+    void updateProxyValidationState(QValidatedLineEdit *pUiProxyIp);\n     /* query the networks, for which the default proxy is used */\n     void updateDefaultProxyNets();\n \n@@ -57,7 +63,6 @@ private Q_SLOTS:\n     Ui::OptionsDialog *ui;\n     OptionsModel *model;\n     QDataWidgetMapper *mapper;\n-    bool fProxyIpsValid;\n };\n \n #endif // BITCOIN_QT_OPTIONSDIALOG_H"
      },
      {
        "sha": "5658a0bdcf6a12c53131462aa50ec3440fc0fea4",
        "filename": "src/qt/qvalidatedlineedit.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d16d1b72d1b5bd7e71c0f03358f13711bccf3dc1/src/qt/qvalidatedlineedit.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d16d1b72d1b5bd7e71c0f03358f13711bccf3dc1/src/qt/qvalidatedlineedit.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qvalidatedlineedit.cpp?ref=d16d1b72d1b5bd7e71c0f03358f13711bccf3dc1",
        "patch": "@@ -99,9 +99,25 @@ void QValidatedLineEdit::checkValidity()\n     }\n     else\n         setValid(false);\n+\n+    Q_EMIT validationDidChange(this);\n }\n \n void QValidatedLineEdit::setCheckValidator(const QValidator *v)\n {\n     checkValidator = v;\n }\n+\n+bool QValidatedLineEdit::isValid()\n+{\n+    // use checkValidator in case the QValidatedLineEdit is disabled\n+    if (checkValidator)\n+    {\n+        QString address = text();\n+        int pos = 0;\n+        if (checkValidator->validate(address, pos) == QValidator::Acceptable)\n+            return true;\n+    }\n+\n+    return valid;\n+}"
      },
      {
        "sha": "8cb6a425fad51d24b12723f585280ea6b8301725",
        "filename": "src/qt/qvalidatedlineedit.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d16d1b72d1b5bd7e71c0f03358f13711bccf3dc1/src/qt/qvalidatedlineedit.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d16d1b72d1b5bd7e71c0f03358f13711bccf3dc1/src/qt/qvalidatedlineedit.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qvalidatedlineedit.h?ref=d16d1b72d1b5bd7e71c0f03358f13711bccf3dc1",
        "patch": "@@ -18,6 +18,7 @@ class QValidatedLineEdit : public QLineEdit\n     explicit QValidatedLineEdit(QWidget *parent);\n     void clear();\n     void setCheckValidator(const QValidator *v);\n+    bool isValid();\n \n protected:\n     void focusInEvent(QFocusEvent *evt);\n@@ -31,6 +32,9 @@ public Q_SLOTS:\n     void setValid(bool valid);\n     void setEnabled(bool enabled);\n \n+Q_SIGNALS:\n+    void validationDidChange(QValidatedLineEdit *validatedLineEdit);\n+    \n private Q_SLOTS:\n     void markValid();\n     void checkValidity();"
      }
    ]
  },
  {
    "sha": "c6973ca03b9dbf919bc0c69af37d1aea6eaf9aba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNjk3M2NhMDNiOWRiZjkxOWJjMGM2OWFmMzdkMWFlYTZlYWY5YWJh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-15T17:48:18Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-16T11:01:32Z"
      },
      "message": "[qa] keypool: Fix white space to prepare transition to test framework",
      "tree": {
        "sha": "a9571ee556458dd677770131660f8e3dd7c16455",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9571ee556458dd677770131660f8e3dd7c16455"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6973ca03b9dbf919bc0c69af37d1aea6eaf9aba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6973ca03b9dbf919bc0c69af37d1aea6eaf9aba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c6973ca03b9dbf919bc0c69af37d1aea6eaf9aba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6973ca03b9dbf919bc0c69af37d1aea6eaf9aba/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6876a78b863e2d4f4c7ad94627bb35363f6fa720",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6876a78b863e2d4f4c7ad94627bb35363f6fa720",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6876a78b863e2d4f4c7ad94627bb35363f6fa720"
      }
    ],
    "stats": {
      "total": 198,
      "additions": 99,
      "deletions": 99
    },
    "files": [
      {
        "sha": "298563217d28a554cf2f1a20477e4eb3c90f10ac",
        "filename": "qa/rpc-tests/keypool.py",
        "status": "modified",
        "additions": 99,
        "deletions": 99,
        "changes": 198,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6973ca03b9dbf919bc0c69af37d1aea6eaf9aba/qa/rpc-tests/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6973ca03b9dbf919bc0c69af37d1aea6eaf9aba/qa/rpc-tests/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/keypool.py?ref=c6973ca03b9dbf919bc0c69af37d1aea6eaf9aba",
        "patch": "@@ -39,107 +39,107 @@ def check_array_result(object_array, to_match, expected):\n     if num_matched == 0:\n         raise AssertionError(\"No objects matched %s\"%(str(to_match)))\n \n-def run_test(nodes, tmpdir):\n-    # Encrypt wallet and wait to terminate\n-    nodes[0].encryptwallet('test')\n-    bitcoind_processes[0].wait()\n-    # Restart node 0\n-    nodes[0] = start_node(0, tmpdir)\n-    # Keep creating keys\n-    addr = nodes[0].getnewaddress()\n-    try:\n+    def run_test(nodes, tmpdir):\n+        # Encrypt wallet and wait to terminate\n+        nodes[0].encryptwallet('test')\n+        bitcoind_processes[0].wait()\n+        # Restart node 0\n+        nodes[0] = start_node(0, tmpdir)\n+        # Keep creating keys\n         addr = nodes[0].getnewaddress()\n-        raise AssertionError('Keypool should be exhausted after one address')\n-    except JSONRPCException,e:\n-        assert(e.error['code']==-12)\n-\n-    # put three new keys in the keypool\n-    nodes[0].walletpassphrase('test', 12000)\n-    nodes[0].keypoolrefill(3)\n-    nodes[0].walletlock()\n-\n-    # drain the keys\n-    addr = set()\n-    addr.add(nodes[0].getrawchangeaddress())\n-    addr.add(nodes[0].getrawchangeaddress())\n-    addr.add(nodes[0].getrawchangeaddress())\n-    addr.add(nodes[0].getrawchangeaddress())\n-    # assert that four unique addresses were returned\n-    assert(len(addr) == 4)\n-    # the next one should fail\n-    try:\n-        addr = nodes[0].getrawchangeaddress()\n-        raise AssertionError('Keypool should be exhausted after three addresses')\n-    except JSONRPCException,e:\n-        assert(e.error['code']==-12)\n-\n-    # refill keypool with three new addresses\n-    nodes[0].walletpassphrase('test', 12000)\n-    nodes[0].keypoolrefill(3)\n-    nodes[0].walletlock()\n-\n-    # drain them by mining\n-    nodes[0].generate(1)\n-    nodes[0].generate(1)\n-    nodes[0].generate(1)\n-    nodes[0].generate(1)\n-    try:\n+        try:\n+            addr = nodes[0].getnewaddress()\n+            raise AssertionError('Keypool should be exhausted after one address')\n+        except JSONRPCException,e:\n+            assert(e.error['code']==-12)\n+\n+        # put three new keys in the keypool\n+        nodes[0].walletpassphrase('test', 12000)\n+        nodes[0].keypoolrefill(3)\n+        nodes[0].walletlock()\n+\n+        # drain the keys\n+        addr = set()\n+        addr.add(nodes[0].getrawchangeaddress())\n+        addr.add(nodes[0].getrawchangeaddress())\n+        addr.add(nodes[0].getrawchangeaddress())\n+        addr.add(nodes[0].getrawchangeaddress())\n+        # assert that four unique addresses were returned\n+        assert(len(addr) == 4)\n+        # the next one should fail\n+        try:\n+            addr = nodes[0].getrawchangeaddress()\n+            raise AssertionError('Keypool should be exhausted after three addresses')\n+        except JSONRPCException,e:\n+            assert(e.error['code']==-12)\n+\n+        # refill keypool with three new addresses\n+        nodes[0].walletpassphrase('test', 12000)\n+        nodes[0].keypoolrefill(3)\n+        nodes[0].walletlock()\n+\n+        # drain them by mining\n         nodes[0].generate(1)\n-        raise AssertionError('Keypool should be exhausted after three addesses')\n-    except JSONRPCException,e:\n-        assert(e.error['code']==-12)\n-\n-def main():\n-    import optparse\n-\n-    parser = optparse.OptionParser(usage=\"%prog [options]\")\n-    parser.add_option(\"--nocleanup\", dest=\"nocleanup\", default=False, action=\"store_true\",\n-                      help=\"Leave bitcoinds and test.* datadir on exit or error\")\n-    parser.add_option(\"--srcdir\", dest=\"srcdir\", default=\"../../src\",\n-                      help=\"Source directory containing bitcoind/bitcoin-cli (default: %default%)\")\n-    parser.add_option(\"--tmpdir\", dest=\"tmpdir\", default=tempfile.mkdtemp(prefix=\"test\"),\n-                      help=\"Root directory for datadirs\")\n-    (options, args) = parser.parse_args()\n-\n-    os.environ['PATH'] = options.srcdir+\":\"+os.environ['PATH']\n-\n-    check_json_precision()\n-\n-    success = False\n-    nodes = []\n-    try:\n-        print(\"Initializing test directory \"+options.tmpdir)\n-        if not os.path.isdir(options.tmpdir):\n-            os.makedirs(options.tmpdir)\n-        initialize_chain(options.tmpdir)\n-\n-        nodes = start_nodes(1, options.tmpdir)\n-\n-        run_test(nodes, options.tmpdir)\n-\n-        success = True\n-\n-    except AssertionError as e:\n-        print(\"Assertion failed: \"+e.message)\n-    except JSONRPCException as e:\n-        print(\"JSONRPC error: \"+e.error['message'])\n-        traceback.print_tb(sys.exc_info()[2])\n-    except Exception as e:\n-        print(\"Unexpected exception caught during testing: \"+str(sys.exc_info()[0]))\n-        traceback.print_tb(sys.exc_info()[2])\n-\n-    if not options.nocleanup:\n-        print(\"Cleaning up\")\n-        stop_nodes(nodes)\n-        wait_bitcoinds()\n-        shutil.rmtree(options.tmpdir)\n-\n-    if success:\n-        print(\"Tests successful\")\n-        sys.exit(0)\n-    else:\n-        print(\"Failed\")\n-        sys.exit(1)\n+        nodes[0].generate(1)\n+        nodes[0].generate(1)\n+        nodes[0].generate(1)\n+        try:\n+            nodes[0].generate(1)\n+            raise AssertionError('Keypool should be exhausted after three addesses')\n+        except JSONRPCException,e:\n+            assert(e.error['code']==-12)\n+\n+    def main():\n+        import optparse\n+\n+        parser = optparse.OptionParser(usage=\"%prog [options]\")\n+        parser.add_option(\"--nocleanup\", dest=\"nocleanup\", default=False, action=\"store_true\",\n+                          help=\"Leave bitcoinds and test.* datadir on exit or error\")\n+        parser.add_option(\"--srcdir\", dest=\"srcdir\", default=\"../../src\",\n+                          help=\"Source directory containing bitcoind/bitcoin-cli (default: %default%)\")\n+        parser.add_option(\"--tmpdir\", dest=\"tmpdir\", default=tempfile.mkdtemp(prefix=\"test\"),\n+                          help=\"Root directory for datadirs\")\n+        (options, args) = parser.parse_args()\n+\n+        os.environ['PATH'] = options.srcdir+\":\"+os.environ['PATH']\n+\n+        check_json_precision()\n+\n+        success = False\n+        nodes = []\n+        try:\n+            print(\"Initializing test directory \"+options.tmpdir)\n+            if not os.path.isdir(options.tmpdir):\n+                os.makedirs(options.tmpdir)\n+            initialize_chain(options.tmpdir)\n+\n+            nodes = start_nodes(1, options.tmpdir)\n+\n+            run_test(nodes, options.tmpdir)\n+\n+            success = True\n+\n+        except AssertionError as e:\n+            print(\"Assertion failed: \"+e.message)\n+        except JSONRPCException as e:\n+            print(\"JSONRPC error: \"+e.error['message'])\n+            traceback.print_tb(sys.exc_info()[2])\n+        except Exception as e:\n+            print(\"Unexpected exception caught during testing: \"+str(sys.exc_info()[0]))\n+            traceback.print_tb(sys.exc_info()[2])\n+\n+        if not options.nocleanup:\n+            print(\"Cleaning up\")\n+            stop_nodes(nodes)\n+            wait_bitcoinds()\n+            shutil.rmtree(options.tmpdir)\n+\n+        if success:\n+            print(\"Tests successful\")\n+            sys.exit(0)\n+        else:\n+            print(\"Failed\")\n+            sys.exit(1)\n \n if __name__ == '__main__':\n     main()"
      }
    ]
  },
  {
    "sha": "4ea17905538bfef22f0c9bfb990e6d74d311f4e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZWExNzkwNTUzOGJmZWYyMmYwYzliZmI5OTBlNmQ3NGQzMTFmNGU1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-15T16:58:01Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-16T11:01:32Z"
      },
      "message": "[qa] keypool: DRY: Use test framework",
      "tree": {
        "sha": "e30490ca9298986d8f1ed5d76883839fd21393bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e30490ca9298986d8f1ed5d76883839fd21393bf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ea17905538bfef22f0c9bfb990e6d74d311f4e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ea17905538bfef22f0c9bfb990e6d74d311f4e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4ea17905538bfef22f0c9bfb990e6d74d311f4e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ea17905538bfef22f0c9bfb990e6d74d311f4e5/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c6973ca03b9dbf919bc0c69af37d1aea6eaf9aba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6973ca03b9dbf919bc0c69af37d1aea6eaf9aba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6973ca03b9dbf919bc0c69af37d1aea6eaf9aba"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 12,
      "deletions": 61
    },
    "files": [
      {
        "sha": "92d91e029ac67050b846d755d0d22cb9195d8082",
        "filename": "qa/rpc-tests/keypool.py",
        "status": "modified",
        "additions": 12,
        "deletions": 61,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ea17905538bfef22f0c9bfb990e6d74d311f4e5/qa/rpc-tests/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ea17905538bfef22f0c9bfb990e6d74d311f4e5/qa/rpc-tests/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/keypool.py?ref=4ea17905538bfef22f0c9bfb990e6d74d311f4e5",
        "patch": "@@ -6,15 +6,8 @@\n # Exercise the wallet keypool, and interaction with wallet encryption/locking\n \n # Add python-bitcoinrpc to module search path:\n-import os\n-import sys\n-\n-import json\n-import shutil\n-import subprocess\n-import tempfile\n-import traceback\n \n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n \n@@ -39,12 +32,15 @@ def check_array_result(object_array, to_match, expected):\n     if num_matched == 0:\n         raise AssertionError(\"No objects matched %s\"%(str(to_match)))\n \n-    def run_test(nodes, tmpdir):\n+class KeyPoolTest(BitcoinTestFramework):\n+\n+    def run_test(self):\n+        nodes = self.nodes\n         # Encrypt wallet and wait to terminate\n         nodes[0].encryptwallet('test')\n         bitcoind_processes[0].wait()\n         # Restart node 0\n-        nodes[0] = start_node(0, tmpdir)\n+        nodes[0] = start_node(0, self.options.tmpdir)\n         # Keep creating keys\n         addr = nodes[0].getnewaddress()\n         try:\n@@ -89,57 +85,12 @@ def run_test(nodes, tmpdir):\n         except JSONRPCException,e:\n             assert(e.error['code']==-12)\n \n-    def main():\n-        import optparse\n-\n-        parser = optparse.OptionParser(usage=\"%prog [options]\")\n-        parser.add_option(\"--nocleanup\", dest=\"nocleanup\", default=False, action=\"store_true\",\n-                          help=\"Leave bitcoinds and test.* datadir on exit or error\")\n-        parser.add_option(\"--srcdir\", dest=\"srcdir\", default=\"../../src\",\n-                          help=\"Source directory containing bitcoind/bitcoin-cli (default: %default%)\")\n-        parser.add_option(\"--tmpdir\", dest=\"tmpdir\", default=tempfile.mkdtemp(prefix=\"test\"),\n-                          help=\"Root directory for datadirs\")\n-        (options, args) = parser.parse_args()\n-\n-        os.environ['PATH'] = options.srcdir+\":\"+os.environ['PATH']\n-\n-        check_json_precision()\n-\n-        success = False\n-        nodes = []\n-        try:\n-            print(\"Initializing test directory \"+options.tmpdir)\n-            if not os.path.isdir(options.tmpdir):\n-                os.makedirs(options.tmpdir)\n-            initialize_chain(options.tmpdir)\n-\n-            nodes = start_nodes(1, options.tmpdir)\n-\n-            run_test(nodes, options.tmpdir)\n-\n-            success = True\n-\n-        except AssertionError as e:\n-            print(\"Assertion failed: \"+e.message)\n-        except JSONRPCException as e:\n-            print(\"JSONRPC error: \"+e.error['message'])\n-            traceback.print_tb(sys.exc_info()[2])\n-        except Exception as e:\n-            print(\"Unexpected exception caught during testing: \"+str(sys.exc_info()[0]))\n-            traceback.print_tb(sys.exc_info()[2])\n-\n-        if not options.nocleanup:\n-            print(\"Cleaning up\")\n-            stop_nodes(nodes)\n-            wait_bitcoinds()\n-            shutil.rmtree(options.tmpdir)\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain(self.options.tmpdir)\n \n-        if success:\n-            print(\"Tests successful\")\n-            sys.exit(0)\n-        else:\n-            print(\"Failed\")\n-            sys.exit(1)\n+    def setup_network(self):\n+        self.nodes = start_nodes(1, self.options.tmpdir)\n \n if __name__ == '__main__':\n-    main()\n+    KeyPoolTest().main()"
      }
    ]
  },
  {
    "sha": "dafefb79244d513cf68e2ce6db4b16edc58ae2f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYWZlZmI3OTI0NGQ1MTNjZjY4ZTJjZTZkYjRiMTZlZGM1OGFlMmY1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-16T11:03:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-16T11:03:19Z"
      },
      "message": "Merge pull request #7016\n\naee22bf Avoid a compile error on hosts with libevent too old for EVENT_LOG_WARN. (Gregory Maxwell)",
      "tree": {
        "sha": "6f552e168d1db1da4990fb3ec2758e460d5d5e4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6f552e168d1db1da4990fb3ec2758e460d5d5e4c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dafefb79244d513cf68e2ce6db4b16edc58ae2f5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWSbf3AAoJEHSBCwEjRsmm1xIIAKHZHKybrODhfGWcZS5Nonir\nndbZdUdmTcYfWZaTKlZ4sIYAjOLXHYa+nel2UaLeZ5ErY+RfVLhcY1JrGGkVTR6b\na9y1IuWQRNUH2N1PuG5LdQ3dcomkymmT19rqbXPhMx5s6EigGNhUBzvrT3KK0Ca3\nUIGhlpB1ITscgn769SWxeW6v83hnhKliPJJHZKp5y537OeDMCq+Ixai9RXHObirs\nANoq6DiqMM6w4XNWtT6rJ3zXCay/7mh38ELFkBmhRK1NYu9qYRO0P6Ec3tsUlcSk\nWQYn4K+0cHFtfD7nZl0HZtYr57mGEWDNetGkHzPYX+xTzveI/85In+lD5itgpls=\n=2RMu\n-----END PGP SIGNATURE-----",
        "payload": "tree 6f552e168d1db1da4990fb3ec2758e460d5d5e4c\nparent 6876a78b863e2d4f4c7ad94627bb35363f6fa720\nparent aee22bf2886acd3151992c42f7c0ca5f2aae3fdf\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1447671792 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1447671799 +0100\n\nMerge pull request #7016\n\naee22bf Avoid a compile error on hosts with libevent too old for EVENT_LOG_WARN. (Gregory Maxwell)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dafefb79244d513cf68e2ce6db4b16edc58ae2f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dafefb79244d513cf68e2ce6db4b16edc58ae2f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dafefb79244d513cf68e2ce6db4b16edc58ae2f5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6876a78b863e2d4f4c7ad94627bb35363f6fa720",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6876a78b863e2d4f4c7ad94627bb35363f6fa720",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6876a78b863e2d4f4c7ad94627bb35363f6fa720"
      },
      {
        "sha": "aee22bf2886acd3151992c42f7c0ca5f2aae3fdf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aee22bf2886acd3151992c42f7c0ca5f2aae3fdf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aee22bf2886acd3151992c42f7c0ca5f2aae3fdf"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "52f5675e853e34ad85d1dd684b17c6f5cdc381de",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dafefb79244d513cf68e2ce6db4b16edc58ae2f5/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dafefb79244d513cf68e2ce6db4b16edc58ae2f5/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=dafefb79244d513cf68e2ce6db4b16edc58ae2f5",
        "patch": "@@ -365,6 +365,10 @@ static void HTTPWorkQueueRun(WorkQueue<HTTPClosure>* queue)\n /** libevent event log callback */\n static void libevent_log_cb(int severity, const char *msg)\n {\n+#ifndef EVENT_LOG_WARN\n+// EVENT_LOG_WARN was added in 2.0.19; but before then _EVENT_LOG_WARN existed.\n+# define EVENT_LOG_WARN _EVENT_LOG_WARN\n+#endif\n     if (severity >= EVENT_LOG_WARN) // Log warn messages and higher without debug category\n         LogPrintf(\"libevent: %s\\n\", msg);\n     else"
      }
    ]
  },
  {
    "sha": "141c44ed6549acdc7f49fe039f017c020490ccf1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDFjNDRlZDY1NDlhY2RjN2Y0OWZlMDM5ZjAxN2MwMjA0OTBjY2Yx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-16T11:30:16Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-16T11:39:44Z"
      },
      "message": "[contrib] Update versionprefix to \"bitcoin-core\" in verify.sh",
      "tree": {
        "sha": "64fd84abfcc5d2cefe7fb2b5cc692b6f6cddd36a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/64fd84abfcc5d2cefe7fb2b5cc692b6f6cddd36a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/141c44ed6549acdc7f49fe039f017c020490ccf1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/141c44ed6549acdc7f49fe039f017c020490ccf1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/141c44ed6549acdc7f49fe039f017c020490ccf1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/141c44ed6549acdc7f49fe039f017c020490ccf1/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6876a78b863e2d4f4c7ad94627bb35363f6fa720",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6876a78b863e2d4f4c7ad94627bb35363f6fa720",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6876a78b863e2d4f4c7ad94627bb35363f6fa720"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "ac411087ac322fef9d0b07292ac2b2f2e9385c66",
        "filename": "contrib/verifysfbinaries/verify.sh",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/141c44ed6549acdc7f49fe039f017c020490ccf1/contrib/verifysfbinaries/verify.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/141c44ed6549acdc7f49fe039f017c020490ccf1/contrib/verifysfbinaries/verify.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifysfbinaries/verify.sh?ref=141c44ed6549acdc7f49fe039f017c020490ccf1",
        "patch": "@@ -17,15 +17,15 @@ function clean_up {\n WORKINGDIR=\"/tmp/bitcoin\"\n TMPFILE=\"hashes.tmp\"\n \n-#this URL is used if a version number is not specified as an argument to the script\n-SIGNATUREFILE=\"https://bitcoin.org/bin/0.9.2.1/SHA256SUMS.asc\"\n-\n SIGNATUREFILENAME=\"SHA256SUMS.asc\"\n RCSUBDIR=\"test/\"\n BASEDIR=\"https://bitcoin.org/bin/\"\n-VERSIONPREFIX=\"bitcoin-\"\n+VERSIONPREFIX=\"bitcoin-core-\"\n RCVERSIONSTRING=\"rc\"\n \n+#this URL is used if a version number is not specified as an argument to the script\n+SIGNATUREFILE=\"$BASEDIR\"\"$VERSIONPREFIX\"\"0.10.4/\"\"$RCSUBDIR\"\"$SIGNATUREFILENAME\"\n+\n if [ ! -d \"$WORKINGDIR\" ]; then\n    mkdir \"$WORKINGDIR\"\n fi\n@@ -62,7 +62,7 @@ WGETOUT=$(wget -N \"$BASEDIR$SIGNATUREFILENAME\" 2>&1)\n #and then see if wget completed successfully\n if [ $? -ne 0 ]; then\n    echo \"Error: couldn't fetch signature file. Have you specified the version number in the following format?\"\n-   echo \"[bitcoin-]<version>-[rc[0-9]] (example: bitcoin-0.9.2-rc1)\"\n+   echo \"[$VERSIONPREFIX]<version>-[$RCVERSIONSTRING[0-9]] (example: \"$VERSIONPREFIX\"0.10.4-\"$RCVERSIONSTRING\"1)\"\n    echo \"wget output:\"\n    echo \"$WGETOUT\"|sed 's/^/\\t/g'\n    exit 2"
      }
    ]
  },
  {
    "sha": "a6d5a6502a3dce23679a9be9e4884a4f77110cd1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNmQ1YTY1MDJhM2RjZTIzNjc5YTliZTllNDg4NGE0Zjc3MTEwY2Qx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-16T11:54:35Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-16T11:59:42Z"
      },
      "message": "[trivial] contrib: Fix `echo`s in verify.sh",
      "tree": {
        "sha": "20f90cdb99b06398f84da68f9135a448d3fafb55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20f90cdb99b06398f84da68f9135a448d3fafb55"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6d5a6502a3dce23679a9be9e4884a4f77110cd1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6d5a6502a3dce23679a9be9e4884a4f77110cd1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6d5a6502a3dce23679a9be9e4884a4f77110cd1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6d5a6502a3dce23679a9be9e4884a4f77110cd1/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "141c44ed6549acdc7f49fe039f017c020490ccf1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/141c44ed6549acdc7f49fe039f017c020490ccf1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/141c44ed6549acdc7f49fe039f017c020490ccf1"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "847c5075530571ad9e44234a82d53a52de841e1c",
        "filename": "contrib/verifysfbinaries/verify.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6d5a6502a3dce23679a9be9e4884a4f77110cd1/contrib/verifysfbinaries/verify.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6d5a6502a3dce23679a9be9e4884a4f77110cd1/contrib/verifysfbinaries/verify.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifysfbinaries/verify.sh?ref=a6d5a6502a3dce23679a9be9e4884a4f77110cd1",
        "patch": "@@ -82,7 +82,7 @@ if [ $RET -ne 0 ]; then\n       echo \"Bad signature.\"\n    elif [ $RET -eq 2 ]; then\n       #or if a gpg error has occurred\n-      echo \"gpg error. Do you have Gavin's code signing key installed?\"\n+      echo \"gpg error. Do you have the Bitcoin Core binary release signing key installed?\"\n    fi\n \n    echo \"gpg output:\"\n@@ -116,4 +116,6 @@ fi\n #everything matches! clean up the mess\n clean_up $FILES $SIGNATUREFILENAME $TMPFILE\n \n+echo -e \"Verified hashes of \\n$FILES\"\n+\n exit 0"
      }
    ]
  },
  {
    "sha": "e54ebbf6009716a7abcd4d8d3f7bd910e88decdc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTRlYmJmNjAwOTcxNmE3YWJjZDRkOGQzZjdiZDkxMGU4OGRlY2Rj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-16T12:24:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-16T12:25:18Z"
      },
      "message": "Merge pull request #6954\n\n6e18268 Switch to libsecp256k1-based validation for ECDSA (Pieter Wuille)",
      "tree": {
        "sha": "314d2f94a777a339b54cd2817402c8d951335efd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/314d2f94a777a339b54cd2817402c8d951335efd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWScsuAAoJEHSBCwEjRsmmUzUH/RnUXjkz57A2b4lWHg6T0CMI\nWU1dsQ7rFhlE8PPOSGA+O0wUVF5OemWNxQcYaKm52vMwo8sFcsPIzYjpL+GpIsXI\nZ0LHHlHvhUZ8cfLJebAiQ6IQigel/HggCOy9/5J4YWogz0Zfwhz0QDmWtwDTElQa\nT5bxPx0FhVubdUVt/eHSjtQTAwFEeLjJsNxYQq1wAWyO2WoDz9IwaJzHgvxfZ8+T\nc+dU6s8TyM9Yq0OnDhIKBv9lEhjlObcvqCLypfJlHDjCPSrz/Yd1Bjhk4Po1bsr8\nJDFTSaek8f6SMok3RrLDUX/BIeFcEuNILxgozDmSKaf5QJMXg4iDL7MZa7/pASg=\n=TFYS\n-----END PGP SIGNATURE-----",
        "payload": "tree 314d2f94a777a339b54cd2817402c8d951335efd\nparent dafefb79244d513cf68e2ce6db4b16edc58ae2f5\nparent 6e182686163ce3c15b878bd78c41d8d18db344f1\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1447676697 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1447676718 +0100\n\nMerge pull request #6954\n\n6e18268 Switch to libsecp256k1-based validation for ECDSA (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dafefb79244d513cf68e2ce6db4b16edc58ae2f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dafefb79244d513cf68e2ce6db4b16edc58ae2f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dafefb79244d513cf68e2ce6db4b16edc58ae2f5"
      },
      {
        "sha": "6e182686163ce3c15b878bd78c41d8d18db344f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e182686163ce3c15b878bd78c41d8d18db344f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6e182686163ce3c15b878bd78c41d8d18db344f1"
      }
    ],
    "stats": {
      "total": 689,
      "additions": 291,
      "deletions": 398
    },
    "files": [
      {
        "sha": "7db27f9facf563c6494c6a3bdfe470f474fb7e83",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=e54ebbf6009716a7abcd4d8d3f7bd910e88decdc",
        "patch": "@@ -190,6 +190,21 @@ calculating the target.\n A more detailed documentation about keeping traffic low can be found in\n [/doc/reducetraffic.md](/doc/reducetraffic.md).\n \n+Signature validation using libsecp256k1\n+---------------------------------------\n+\n+ECDSA signatures inside Bitcoin transactions now use validation using\n+[https://github.com/bitcoin/secp256k1](libsecp256k1) instead of OpenSSL.\n+\n+Depending on the platform, this means a significant speedup for raw signature\n+validation speed. The advantage is largest on x86_64, where validation is over\n+five times faster. In practice, this translates to a raw reindexing and new\n+block validation times that are less than half of what it was before.\n+\n+Libsecp256k1 has undergone very extensive testing and validation.\n+\n+A side effect of this change is that libconsensus no longer depends on OpenSSL.\n+\n 0.12.0 Change log\n =================\n "
      },
      {
        "sha": "f1e98dabdedd6be00057a8f197861273c48ff101",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=e54ebbf6009716a7abcd4d8d3f7bd910e88decdc",
        "patch": "@@ -104,8 +104,6 @@ BITCOIN_CORE_H = \\\n   consensus/validation.h \\\n   core_io.h \\\n   core_memusage.h \\\n-  eccryptoverify.h \\\n-  ecwrapper.h \\\n   hash.h \\\n   httprpc.h \\\n   httpserver.h \\\n@@ -272,8 +270,6 @@ libbitcoin_common_a_SOURCES = \\\n   compressor.cpp \\\n   core_read.cpp \\\n   core_write.cpp \\\n-  eccryptoverify.cpp \\\n-  ecwrapper.cpp \\\n   hash.cpp \\\n   key.cpp \\\n   keystore.cpp \\\n@@ -404,8 +400,6 @@ libbitcoinconsensus_la_SOURCES = \\\n   crypto/sha1.cpp \\\n   crypto/sha256.cpp \\\n   crypto/sha512.cpp \\\n-  eccryptoverify.cpp \\\n-  ecwrapper.cpp \\\n   hash.cpp \\\n   primitives/transaction.cpp \\\n   pubkey.cpp \\\n@@ -420,8 +414,8 @@ if GLIBC_BACK_COMPAT\n endif\n \n libbitcoinconsensus_la_LDFLAGS = $(AM_LDFLAGS) -no-undefined $(RELDFLAGS)\n-libbitcoinconsensus_la_LIBADD = $(CRYPTO_LIBS)\n-libbitcoinconsensus_la_CPPFLAGS = $(AM_CPPFLAGS) $(CRYPTO_CFLAGS) -I$(builddir)/obj -DBUILD_BITCOIN_INTERNAL\n+libbitcoinconsensus_la_LIBADD = $(LIBSECP256K1)\n+libbitcoinconsensus_la_CPPFLAGS = $(AM_CPPFLAGS) -I$(builddir)/obj -I$(srcdir)/secp256k1/include -DBUILD_BITCOIN_INTERNAL\n libbitcoinconsensus_la_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n \n endif"
      },
      {
        "sha": "9f8b2b98af490148c62128ec3e45d8680c698b28",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=e54ebbf6009716a7abcd4d8d3f7bd910e88decdc",
        "patch": "@@ -477,9 +477,15 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n \n class Secp256k1Init\n {\n+    ECCVerifyHandle globalVerifyHandle;\n+\n public:\n-    Secp256k1Init() { ECC_Start(); }\n-    ~Secp256k1Init() { ECC_Stop(); }\n+    Secp256k1Init() {\n+        ECC_Start();\n+    }\n+    ~Secp256k1Init() {\n+        ECC_Stop();\n+    }\n };\n \n static void MutateTx(CMutableTransaction& tx, const string& command,"
      },
      {
        "sha": "e894e1122c56894b176ae853040040c1de1f2432",
        "filename": "src/eccryptoverify.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 68,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dafefb79244d513cf68e2ce6db4b16edc58ae2f5/src/eccryptoverify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dafefb79244d513cf68e2ce6db4b16edc58ae2f5/src/eccryptoverify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/eccryptoverify.cpp?ref=dafefb79244d513cf68e2ce6db4b16edc58ae2f5",
        "patch": "@@ -1,68 +0,0 @@\n-// Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2014 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include \"eccryptoverify.h\"\n-\n-namespace {\n-\n-int CompareBigEndian(const unsigned char *c1, size_t c1len, const unsigned char *c2, size_t c2len) {\n-    while (c1len > c2len) {\n-        if (*c1)\n-            return 1;\n-        c1++;\n-        c1len--;\n-    }\n-    while (c2len > c1len) {\n-        if (*c2)\n-            return -1;\n-        c2++;\n-        c2len--;\n-    }\n-    while (c1len > 0) {\n-        if (*c1 > *c2)\n-            return 1;\n-        if (*c2 > *c1)\n-            return -1;\n-        c1++;\n-        c2++;\n-        c1len--;\n-    }\n-    return 0;\n-}\n-\n-/** Order of secp256k1's generator minus 1. */\n-const unsigned char vchMaxModOrder[32] = {\n-    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n-    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,\n-    0xBA,0xAE,0xDC,0xE6,0xAF,0x48,0xA0,0x3B,\n-    0xBF,0xD2,0x5E,0x8C,0xD0,0x36,0x41,0x40\n-};\n-\n-/** Half of the order of secp256k1's generator minus 1. */\n-const unsigned char vchMaxModHalfOrder[32] = {\n-    0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n-    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n-    0x5D,0x57,0x6E,0x73,0x57,0xA4,0x50,0x1D,\n-    0xDF,0xE9,0x2F,0x46,0x68,0x1B,0x20,0xA0\n-};\n-\n-const unsigned char vchZero[1] = {0};\n-} // anon namespace\n-\n-namespace eccrypto {\n-\n-bool Check(const unsigned char *vch) {\n-    return vch &&\n-           CompareBigEndian(vch, 32, vchZero, 0) > 0 &&\n-           CompareBigEndian(vch, 32, vchMaxModOrder, 32) <= 0;\n-}\n-\n-bool CheckSignatureElement(const unsigned char *vch, int len, bool half) {\n-    return vch &&\n-           CompareBigEndian(vch, len, vchZero, 0) > 0 &&\n-           CompareBigEndian(vch, len, half ? vchMaxModHalfOrder : vchMaxModOrder, 32) <= 0;\n-}\n-\n-} // namespace eccrypto"
      },
      {
        "sha": "c67c1e44fce878a07385089c9783c50a5f30707e",
        "filename": "src/eccryptoverify.h",
        "status": "removed",
        "additions": 0,
        "deletions": 21,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dafefb79244d513cf68e2ce6db4b16edc58ae2f5/src/eccryptoverify.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dafefb79244d513cf68e2ce6db4b16edc58ae2f5/src/eccryptoverify.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/eccryptoverify.h?ref=dafefb79244d513cf68e2ce6db4b16edc58ae2f5",
        "patch": "@@ -1,21 +0,0 @@\n-// Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2014 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_ECCRYPTOVERIFY_H\n-#define BITCOIN_ECCRYPTOVERIFY_H\n-\n-#include <vector>\n-#include <cstdlib>\n-\n-class uint256;\n-\n-namespace eccrypto {\n-\n-bool Check(const unsigned char *vch);\n-bool CheckSignatureElement(const unsigned char *vch, int len, bool half);\n-\n-} // eccrypto namespace\n-\n-#endif // BITCOIN_ECCRYPTOVERIFY_H"
      },
      {
        "sha": "f94bc954fd124c3a3428759b8b61ad9b14d77d9e",
        "filename": "src/ecwrapper.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 218,
        "changes": 218,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dafefb79244d513cf68e2ce6db4b16edc58ae2f5/src/ecwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dafefb79244d513cf68e2ce6db4b16edc58ae2f5/src/ecwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ecwrapper.cpp?ref=dafefb79244d513cf68e2ce6db4b16edc58ae2f5",
        "patch": "@@ -1,218 +0,0 @@\n-// Copyright (c) 2009-2014 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include \"ecwrapper.h\"\n-\n-#include \"serialize.h\"\n-#include \"uint256.h\"\n-\n-#include <openssl/bn.h>\n-#include <openssl/ecdsa.h>\n-#include <openssl/obj_mac.h>\n-\n-namespace {\n-\n-class ecgroup_order\n-{\n-public:\n-  static const EC_GROUP* get()\n-  {\n-      static const ecgroup_order wrapper;\n-      return wrapper.pgroup;\n-  }\n-\n-private:\n-  ecgroup_order()\n-  : pgroup(EC_GROUP_new_by_curve_name(NID_secp256k1))\n-  {\n-  }\n-\n-  ~ecgroup_order()\n-  {\n-    EC_GROUP_free(pgroup);\n-  }\n-\n-  EC_GROUP* pgroup;\n-};\n-\n-/**\n- * Perform ECDSA key recovery (see SEC1 4.1.6) for curves over (mod p)-fields\n- * recid selects which key is recovered\n- * if check is non-zero, additional checks are performed\n- */\n-int ECDSA_SIG_recover_key_GFp(EC_KEY *eckey, ECDSA_SIG *ecsig, const unsigned char *msg, int msglen, int recid, int check)\n-{\n-    if (!eckey) return 0;\n-\n-    int ret = 0;\n-    BN_CTX *ctx = NULL;\n-\n-    BIGNUM *x = NULL;\n-    BIGNUM *e = NULL;\n-    BIGNUM *order = NULL;\n-    BIGNUM *sor = NULL;\n-    BIGNUM *eor = NULL;\n-    BIGNUM *field = NULL;\n-    EC_POINT *R = NULL;\n-    EC_POINT *O = NULL;\n-    EC_POINT *Q = NULL;\n-    BIGNUM *rr = NULL;\n-    BIGNUM *zero = NULL;\n-    int n = 0;\n-    int i = recid / 2;\n-\n-    const EC_GROUP *group = EC_KEY_get0_group(eckey);\n-    if ((ctx = BN_CTX_new()) == NULL) { ret = -1; goto err; }\n-    BN_CTX_start(ctx);\n-    order = BN_CTX_get(ctx);\n-    if (!EC_GROUP_get_order(group, order, ctx)) { ret = -2; goto err; }\n-    x = BN_CTX_get(ctx);\n-    if (!BN_copy(x, order)) { ret=-1; goto err; }\n-    if (!BN_mul_word(x, i)) { ret=-1; goto err; }\n-    if (!BN_add(x, x, ecsig->r)) { ret=-1; goto err; }\n-    field = BN_CTX_get(ctx);\n-    if (!EC_GROUP_get_curve_GFp(group, field, NULL, NULL, ctx)) { ret=-2; goto err; }\n-    if (BN_cmp(x, field) >= 0) { ret=0; goto err; }\n-    if ((R = EC_POINT_new(group)) == NULL) { ret = -2; goto err; }\n-    if (!EC_POINT_set_compressed_coordinates_GFp(group, R, x, recid % 2, ctx)) { ret=0; goto err; }\n-    if (check)\n-    {\n-        if ((O = EC_POINT_new(group)) == NULL) { ret = -2; goto err; }\n-        if (!EC_POINT_mul(group, O, NULL, R, order, ctx)) { ret=-2; goto err; }\n-        if (!EC_POINT_is_at_infinity(group, O)) { ret = 0; goto err; }\n-    }\n-    if ((Q = EC_POINT_new(group)) == NULL) { ret = -2; goto err; }\n-    n = EC_GROUP_get_degree(group);\n-    e = BN_CTX_get(ctx);\n-    if (!BN_bin2bn(msg, msglen, e)) { ret=-1; goto err; }\n-    if (8*msglen > n) BN_rshift(e, e, 8-(n & 7));\n-    zero = BN_CTX_get(ctx);\n-    if (!BN_zero(zero)) { ret=-1; goto err; }\n-    if (!BN_mod_sub(e, zero, e, order, ctx)) { ret=-1; goto err; }\n-    rr = BN_CTX_get(ctx);\n-    if (!BN_mod_inverse(rr, ecsig->r, order, ctx)) { ret=-1; goto err; }\n-    sor = BN_CTX_get(ctx);\n-    if (!BN_mod_mul(sor, ecsig->s, rr, order, ctx)) { ret=-1; goto err; }\n-    eor = BN_CTX_get(ctx);\n-    if (!BN_mod_mul(eor, e, rr, order, ctx)) { ret=-1; goto err; }\n-    if (!EC_POINT_mul(group, Q, eor, R, sor, ctx)) { ret=-2; goto err; }\n-    if (!EC_KEY_set_public_key(eckey, Q)) { ret=-2; goto err; }\n-\n-    ret = 1;\n-\n-err:\n-    if (ctx) {\n-        BN_CTX_end(ctx);\n-        BN_CTX_free(ctx);\n-    }\n-    if (R != NULL) EC_POINT_free(R);\n-    if (O != NULL) EC_POINT_free(O);\n-    if (Q != NULL) EC_POINT_free(Q);\n-    return ret;\n-}\n-\n-} // anon namespace\n-\n-CECKey::CECKey() {\n-    pkey = EC_KEY_new();\n-    assert(pkey != NULL);\n-    int result = EC_KEY_set_group(pkey, ecgroup_order::get());\n-    assert(result);\n-}\n-\n-CECKey::~CECKey() {\n-    EC_KEY_free(pkey);\n-}\n-\n-void CECKey::GetPubKey(std::vector<unsigned char> &pubkey, bool fCompressed) {\n-    EC_KEY_set_conv_form(pkey, fCompressed ? POINT_CONVERSION_COMPRESSED : POINT_CONVERSION_UNCOMPRESSED);\n-    int nSize = i2o_ECPublicKey(pkey, NULL);\n-    assert(nSize);\n-    assert(nSize <= 65);\n-    pubkey.clear();\n-    pubkey.resize(nSize);\n-    unsigned char *pbegin(begin_ptr(pubkey));\n-    int nSize2 = i2o_ECPublicKey(pkey, &pbegin);\n-    assert(nSize == nSize2);\n-}\n-\n-bool CECKey::SetPubKey(const unsigned char* pubkey, size_t size) {\n-    return o2i_ECPublicKey(&pkey, &pubkey, size) != NULL;\n-}\n-\n-bool CECKey::Verify(const uint256 &hash, const std::vector<unsigned char>& vchSig) {\n-    if (vchSig.empty())\n-        return false;\n-\n-    // New versions of OpenSSL will reject non-canonical DER signatures. de/re-serialize first.\n-    unsigned char *norm_der = NULL;\n-    ECDSA_SIG *norm_sig = ECDSA_SIG_new();\n-    const unsigned char* sigptr = &vchSig[0];\n-    assert(norm_sig);\n-    if (d2i_ECDSA_SIG(&norm_sig, &sigptr, vchSig.size()) == NULL)\n-    {\n-        /* As of OpenSSL 1.0.0p d2i_ECDSA_SIG frees and nulls the pointer on\n-         * error. But OpenSSL's own use of this function redundantly frees the\n-         * result. As ECDSA_SIG_free(NULL) is a no-op, and in the absence of a\n-         * clear contract for the function behaving the same way is more\n-         * conservative.\n-         */\n-        ECDSA_SIG_free(norm_sig);\n-        return false;\n-    }\n-    int derlen = i2d_ECDSA_SIG(norm_sig, &norm_der);\n-    ECDSA_SIG_free(norm_sig);\n-    if (derlen <= 0)\n-        return false;\n-\n-    // -1 = error, 0 = bad sig, 1 = good\n-    bool ret = ECDSA_verify(0, (unsigned char*)&hash, sizeof(hash), norm_der, derlen, pkey) == 1;\n-    OPENSSL_free(norm_der);\n-    return ret;\n-}\n-\n-bool CECKey::Recover(const uint256 &hash, const unsigned char *p64, int rec)\n-{\n-    if (rec<0 || rec>=3)\n-        return false;\n-    ECDSA_SIG *sig = ECDSA_SIG_new();\n-    BN_bin2bn(&p64[0],  32, sig->r);\n-    BN_bin2bn(&p64[32], 32, sig->s);\n-    bool ret = ECDSA_SIG_recover_key_GFp(pkey, sig, (unsigned char*)&hash, sizeof(hash), rec, 0) == 1;\n-    ECDSA_SIG_free(sig);\n-    return ret;\n-}\n-\n-bool CECKey::TweakPublic(const unsigned char vchTweak[32]) {\n-    bool ret = true;\n-    BN_CTX *ctx = BN_CTX_new();\n-    BN_CTX_start(ctx);\n-    BIGNUM *bnTweak = BN_CTX_get(ctx);\n-    BIGNUM *bnOrder = BN_CTX_get(ctx);\n-    BIGNUM *bnOne = BN_CTX_get(ctx);\n-    const EC_GROUP *group = EC_KEY_get0_group(pkey);\n-    EC_GROUP_get_order(group, bnOrder, ctx); // what a grossly inefficient way to get the (constant) group order...\n-    BN_bin2bn(vchTweak, 32, bnTweak);\n-    if (BN_cmp(bnTweak, bnOrder) >= 0)\n-        ret = false; // extremely unlikely\n-    EC_POINT *point = EC_POINT_dup(EC_KEY_get0_public_key(pkey), group);\n-    BN_one(bnOne);\n-    EC_POINT_mul(group, point, bnTweak, point, bnOne, ctx);\n-    if (EC_POINT_is_at_infinity(group, point))\n-        ret = false; // ridiculously unlikely\n-    EC_KEY_set_public_key(pkey, point);\n-    EC_POINT_free(point);\n-    BN_CTX_end(ctx);\n-    BN_CTX_free(ctx);\n-    return ret;\n-}\n-\n-bool CECKey::SanityCheck()\n-{\n-    const EC_GROUP *pgroup = ecgroup_order::get();\n-    if(pgroup == NULL)\n-        return false;\n-    // TODO Is there more EC functionality that could be missing?\n-    return true;\n-}"
      },
      {
        "sha": "efb6cd18a775f11420f305e116168b58e1c264e5",
        "filename": "src/ecwrapper.h",
        "status": "removed",
        "additions": 0,
        "deletions": 40,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dafefb79244d513cf68e2ce6db4b16edc58ae2f5/src/ecwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dafefb79244d513cf68e2ce6db4b16edc58ae2f5/src/ecwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ecwrapper.h?ref=dafefb79244d513cf68e2ce6db4b16edc58ae2f5",
        "patch": "@@ -1,40 +0,0 @@\n-// Copyright (c) 2009-2014 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_ECWRAPPER_H\n-#define BITCOIN_ECWRAPPER_H\n-\n-#include <cstddef>\n-#include <vector>\n-\n-#include <openssl/ec.h>\n-\n-class uint256;\n-\n-/** RAII Wrapper around OpenSSL's EC_KEY */\n-class CECKey {\n-private:\n-    EC_KEY *pkey;\n-\n-public:\n-    CECKey();\n-    ~CECKey();\n-\n-    void GetPubKey(std::vector<unsigned char>& pubkey, bool fCompressed);\n-    bool SetPubKey(const unsigned char* pubkey, size_t size);\n-    bool Verify(const uint256 &hash, const std::vector<unsigned char>& vchSig);\n-\n-    /**\n-     * reconstruct public key from a compact signature\n-     * This is only slightly more CPU intensive than just verifying it.\n-     * If this function succeeds, the recovered public key is guaranteed to be valid\n-     * (the signature is a valid signature of the given data for that key)\n-     */\n-    bool Recover(const uint256 &hash, const unsigned char *p64, int rec);\n-\n-    bool TweakPublic(const unsigned char vchTweak[32]);\n-    static bool SanityCheck();\n-};\n-\n-#endif // BITCOIN_ECWRAPPER_H"
      },
      {
        "sha": "d768c4837ee987bf808eab129dc6f91eefed4399",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e54ebbf6009716a7abcd4d8d3f7bd910e88decdc",
        "patch": "@@ -154,6 +154,7 @@ class CCoinsViewErrorCatcher : public CCoinsViewBacked\n \n static CCoinsViewDB *pcoinsdbview = NULL;\n static CCoinsViewErrorCatcher *pcoinscatcher = NULL;\n+static boost::scoped_ptr<ECCVerifyHandle> globalVerifyHandle;\n \n void Interrupt(boost::thread_group& threadGroup)\n {\n@@ -243,6 +244,7 @@ void Shutdown()\n     delete pwalletMain;\n     pwalletMain = NULL;\n #endif\n+    globalVerifyHandle.reset();\n     ECC_Stop();\n     LogPrintf(\"%s: done\\n\", __func__);\n }\n@@ -649,8 +651,7 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n bool InitSanityCheck(void)\n {\n     if(!ECC_InitSanityCheck()) {\n-        InitError(\"OpenSSL appears to lack support for elliptic curve cryptography. For more \"\n-                  \"information, visit https://en.bitcoin.it/wiki/OpenSSL_and_EC_Libraries\");\n+        InitError(\"Elliptic curve cryptography sanity check failure. Aborting.\");\n         return false;\n     }\n     if (!glibc_sanity_test() || !glibcxx_sanity_test())\n@@ -991,6 +992,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     // Initialize elliptic curve code\n     ECC_Start();\n+    globalVerifyHandle.reset(new ECCVerifyHandle());\n \n     // Sanity check\n     if (!InitSanityCheck())"
      },
      {
        "sha": "6ebb152c75cf0ca01cdccb51b3a6fc658cffb1c4",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 233,
        "deletions": 27,
        "changes": 260,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=e54ebbf6009716a7abcd4d8d3f7bd910e88decdc",
        "patch": "@@ -4,53 +4,224 @@\n \n #include \"pubkey.h\"\n \n-#include \"eccryptoverify.h\"\n+#include <secp256k1.h>\n+#include <secp256k1_recovery.h>\n \n-#include \"ecwrapper.h\"\n+namespace\n+{\n+/* Global secp256k1_context object used for verification. */\n+secp256k1_context* secp256k1_context_verify = NULL;\n+}\n+\n+/** This function is taken from the libsecp256k1 distribution and implements\n+ *  DER parsing for ECDSA signatures, while supporting an arbitrary subset of\n+ *  format violations.\n+ *\n+ *  Supported violations include negative integers, excessive padding, garbage\n+ *  at the end, and overly long length descriptors. This is safe to use in\n+ *  Bitcoin because since the activation of BIP66, signatures are verified to be\n+ *  strict DER before being passed to this module, and we know it supports all\n+ *  violations present in the blockchain before that point.\n+ */\n+static int ecdsa_signature_parse_der_lax(const secp256k1_context* ctx, secp256k1_ecdsa_signature* sig, const unsigned char *input, size_t inputlen) {\n+    size_t rpos, rlen, spos, slen;\n+    size_t pos = 0;\n+    size_t lenbyte;\n+    unsigned char tmpsig[64] = {0};\n+    int overflow = 0;\n+\n+    /* Hack to initialize sig with a correctly-parsed but invalid signature. */\n+    secp256k1_ecdsa_signature_parse_compact(ctx, sig, tmpsig);\n+\n+    /* Sequence tag byte */\n+    if (pos == inputlen || input[pos] != 0x30) {\n+        return 0;\n+    }\n+    pos++;\n+\n+    /* Sequence length bytes */\n+    if (pos == inputlen) {\n+        return 0;\n+    }\n+    lenbyte = input[pos++];\n+    if (lenbyte & 0x80) {\n+        lenbyte -= 0x80;\n+        if (pos + lenbyte > inputlen) {\n+            return 0;\n+        }\n+        pos += lenbyte;\n+    }\n+\n+    /* Integer tag byte for R */\n+    if (pos == inputlen || input[pos] != 0x02) {\n+        return 0;\n+    }\n+    pos++;\n+\n+    /* Integer length for R */\n+    if (pos == inputlen) {\n+        return 0;\n+    }\n+    lenbyte = input[pos++];\n+    if (lenbyte & 0x80) {\n+        lenbyte -= 0x80;\n+        if (pos + lenbyte > inputlen) {\n+            return 0;\n+        }\n+        while (lenbyte > 0 && input[pos] == 0) {\n+            pos++;\n+            lenbyte--;\n+        }\n+        if (lenbyte >= sizeof(size_t)) {\n+            return 0;\n+        }\n+        rlen = 0;\n+        while (lenbyte > 0) {\n+            rlen = (rlen << 8) + input[pos];\n+            pos++;\n+            lenbyte--;\n+        }\n+    } else {\n+        rlen = lenbyte;\n+    }\n+    if (rlen > inputlen - pos) {\n+        return 0;\n+    }\n+    rpos = pos;\n+    pos += rlen;\n+\n+    /* Integer tag byte for S */\n+    if (pos == inputlen || input[pos] != 0x02) {\n+        return 0;\n+    }\n+    pos++;\n+\n+    /* Integer length for S */\n+    if (pos == inputlen) {\n+        return 0;\n+    }\n+    lenbyte = input[pos++];\n+    if (lenbyte & 0x80) {\n+        lenbyte -= 0x80;\n+        if (pos + lenbyte > inputlen) {\n+            return 0;\n+        }\n+        while (lenbyte > 0 && input[pos] == 0) {\n+            pos++;\n+            lenbyte--;\n+        }\n+        if (lenbyte >= sizeof(size_t)) {\n+            return 0;\n+        }\n+        slen = 0;\n+        while (lenbyte > 0) {\n+            slen = (slen << 8) + input[pos];\n+            pos++;\n+            lenbyte--;\n+        }\n+    } else {\n+        slen = lenbyte;\n+    }\n+    if (slen > inputlen - pos) {\n+        return 0;\n+    }\n+    spos = pos;\n+    pos += slen;\n+\n+    /* Ignore leading zeroes in R */\n+    while (rlen > 0 && input[rpos] == 0) {\n+        rlen--;\n+        rpos++;\n+    }\n+    /* Copy R value */\n+    if (rlen > 32) {\n+        overflow = 1;\n+    } else {\n+        memcpy(tmpsig + 32 - rlen, input + rpos, rlen);\n+    }\n+\n+    /* Ignore leading zeroes in S */\n+    while (slen > 0 && input[spos] == 0) {\n+        slen--;\n+        spos++;\n+    }\n+    /* Copy S value */\n+    if (slen > 32) {\n+        overflow = 1;\n+    } else {\n+        memcpy(tmpsig + 64 - slen, input + spos, slen);\n+    }\n+\n+    if (!overflow) {\n+        overflow = !secp256k1_ecdsa_signature_parse_compact(ctx, sig, tmpsig);\n+    }\n+    if (overflow) {\n+        /* Overwrite the result again with a correctly-parsed but invalid\n+           signature if parsing failed. */\n+        memset(tmpsig, 0, 64);\n+        secp256k1_ecdsa_signature_parse_compact(ctx, sig, tmpsig);\n+    }\n+    return 1;\n+}\n \n bool CPubKey::Verify(const uint256 &hash, const std::vector<unsigned char>& vchSig) const {\n     if (!IsValid())\n         return false;\n-    CECKey key;\n-    if (!key.SetPubKey(begin(), size()))\n+    secp256k1_pubkey pubkey;\n+    secp256k1_ecdsa_signature sig;\n+    if (!secp256k1_ec_pubkey_parse(secp256k1_context_verify, &pubkey, &(*this)[0], size())) {\n         return false;\n-    if (!key.Verify(hash, vchSig))\n+    }\n+    if (vchSig.size() == 0) {\n         return false;\n-    return true;\n+    }\n+    if (!ecdsa_signature_parse_der_lax(secp256k1_context_verify, &sig, &vchSig[0], vchSig.size())) {\n+        return false;\n+    }\n+    /* libsecp256k1's ECDSA verification requires lower-S signatures, which have\n+     * not historically been enforced in Bitcoin, so normalize them first. */\n+    secp256k1_ecdsa_signature_normalize(secp256k1_context_verify, &sig, &sig);\n+    return secp256k1_ecdsa_verify(secp256k1_context_verify, &sig, hash.begin(), &pubkey);\n }\n \n bool CPubKey::RecoverCompact(const uint256 &hash, const std::vector<unsigned char>& vchSig) {\n     if (vchSig.size() != 65)\n         return false;\n     int recid = (vchSig[0] - 27) & 3;\n     bool fComp = ((vchSig[0] - 27) & 4) != 0;\n-    CECKey key;\n-    if (!key.Recover(hash, &vchSig[1], recid))\n+    secp256k1_pubkey pubkey;\n+    secp256k1_ecdsa_recoverable_signature sig;\n+    if (!secp256k1_ecdsa_recoverable_signature_parse_compact(secp256k1_context_verify, &sig, &vchSig[1], recid)) {\n         return false;\n-    std::vector<unsigned char> pubkey;\n-    key.GetPubKey(pubkey, fComp);\n-    Set(pubkey.begin(), pubkey.end());\n+    }\n+    if (!secp256k1_ecdsa_recover(secp256k1_context_verify, &pubkey, &sig, hash.begin())) {\n+        return false;\n+    }\n+    unsigned char pub[65];\n+    size_t publen = 65;\n+    secp256k1_ec_pubkey_serialize(secp256k1_context_verify, pub, &publen, &pubkey, fComp ? SECP256K1_EC_COMPRESSED : SECP256K1_EC_UNCOMPRESSED);\n+    Set(pub, pub + publen);\n     return true;\n }\n \n bool CPubKey::IsFullyValid() const {\n     if (!IsValid())\n         return false;\n-    CECKey key;\n-    if (!key.SetPubKey(begin(), size()))\n-        return false;\n-    return true;\n+    secp256k1_pubkey pubkey;\n+    return secp256k1_ec_pubkey_parse(secp256k1_context_verify, &pubkey, &(*this)[0], size());\n }\n \n bool CPubKey::Decompress() {\n     if (!IsValid())\n         return false;\n-    CECKey key;\n-    if (!key.SetPubKey(begin(), size()))\n+    secp256k1_pubkey pubkey;\n+    if (!secp256k1_ec_pubkey_parse(secp256k1_context_verify, &pubkey, &(*this)[0], size())) {\n         return false;\n-    std::vector<unsigned char> pubkey;\n-    key.GetPubKey(pubkey, false);\n-    Set(pubkey.begin(), pubkey.end());\n+    }\n+    unsigned char pub[65];\n+    size_t publen = 65;\n+    secp256k1_ec_pubkey_serialize(secp256k1_context_verify, pub, &publen, &pubkey, SECP256K1_EC_UNCOMPRESSED);\n+    Set(pub, pub + publen);\n     return true;\n }\n \n@@ -61,13 +232,18 @@ bool CPubKey::Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChi\n     unsigned char out[64];\n     BIP32Hash(cc, nChild, *begin(), begin()+1, out);\n     memcpy(ccChild.begin(), out+32, 32);\n-    CECKey key;\n-    bool ret = key.SetPubKey(begin(), size());\n-    ret &= key.TweakPublic(out);\n-    std::vector<unsigned char> pubkey;\n-    key.GetPubKey(pubkey, true);\n-    pubkeyChild.Set(pubkey.begin(), pubkey.end());\n-    return ret;\n+    secp256k1_pubkey pubkey;\n+    if (!secp256k1_ec_pubkey_parse(secp256k1_context_verify, &pubkey, &(*this)[0], size())) {\n+        return false;\n+    }\n+    if (!secp256k1_ec_pubkey_tweak_add(secp256k1_context_verify, &pubkey, out)) {\n+        return false;\n+    }\n+    unsigned char pub[33];\n+    size_t publen = 33;\n+    secp256k1_ec_pubkey_serialize(secp256k1_context_verify, pub, &publen, &pubkey, SECP256K1_EC_COMPRESSED);\n+    pubkeyChild.Set(pub, pub + publen);\n+    return true;\n }\n \n void CExtPubKey::Encode(unsigned char code[74]) const {\n@@ -95,3 +271,33 @@ bool CExtPubKey::Derive(CExtPubKey &out, unsigned int nChild) const {\n     out.nChild = nChild;\n     return pubkey.Derive(out.pubkey, out.chaincode, nChild, chaincode);\n }\n+\n+/* static */ bool CPubKey::CheckLowS(const std::vector<unsigned char>& vchSig) {\n+    secp256k1_ecdsa_signature sig;\n+    if (!ecdsa_signature_parse_der_lax(secp256k1_context_verify, &sig, &vchSig[0], vchSig.size())) {\n+        return false;\n+    }\n+    return (!secp256k1_ecdsa_signature_normalize(secp256k1_context_verify, NULL, &sig));\n+}\n+\n+/* static */ int ECCVerifyHandle::refcount = 0;\n+\n+ECCVerifyHandle::ECCVerifyHandle()\n+{\n+    if (refcount == 0) {\n+        assert(secp256k1_context_verify == NULL);\n+        secp256k1_context_verify = secp256k1_context_create(SECP256K1_CONTEXT_VERIFY);\n+        assert(secp256k1_context_verify != NULL);\n+    }\n+    refcount++;\n+}\n+\n+ECCVerifyHandle::~ECCVerifyHandle()\n+{\n+    refcount--;\n+    if (refcount == 0) {\n+        assert(secp256k1_context_verify != NULL);\n+        secp256k1_context_destroy(secp256k1_context_verify);\n+        secp256k1_context_verify = NULL;\n+    }\n+}"
      },
      {
        "sha": "a1d437e706e5cca5bcbe1a9523d356c882a95e04",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=e54ebbf6009716a7abcd4d8d3f7bd910e88decdc",
        "patch": "@@ -177,6 +177,11 @@ class CPubKey\n      */\n     bool Verify(const uint256& hash, const std::vector<unsigned char>& vchSig) const;\n \n+    /**\n+     * Check whether a signature is normalized (lower-S).\n+     */\n+    static bool CheckLowS(const std::vector<unsigned char>& vchSig);\n+\n     //! Recover a public key from a compact signature.\n     bool RecoverCompact(const uint256& hash, const std::vector<unsigned char>& vchSig);\n \n@@ -205,4 +210,15 @@ struct CExtPubKey {\n     bool Derive(CExtPubKey& out, unsigned int nChild) const;\n };\n \n+/** Users of this module must hold an ECCVerifyHandle. The constructor and\n+ *  destructor of these are not allowed to run in parallel, though. */\n+class ECCVerifyHandle\n+{\n+    static int refcount;\n+\n+public:\n+    ECCVerifyHandle();\n+    ~ECCVerifyHandle();\n+};\n+\n #endif // BITCOIN_PUBKEY_H"
      },
      {
        "sha": "79504f6ad369245c01d4fb9483b187f9964db041",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=e54ebbf6009716a7abcd4d8d3f7bd910e88decdc",
        "patch": "@@ -6,6 +6,7 @@\n #include \"bitcoinconsensus.h\"\n \n #include \"primitives/transaction.h\"\n+#include \"pubkey.h\"\n #include \"script/interpreter.h\"\n #include \"version.h\"\n \n@@ -60,7 +61,13 @@ inline int set_error(bitcoinconsensus_error* ret, bitcoinconsensus_error serror)\n     return 0;\n }\n \n-} // anon namespace\n+struct ECCryptoClosure\n+{\n+    ECCVerifyHandle handle;\n+};\n+\n+ECCryptoClosure instance_of_eccryptoclosure;\n+}\n \n int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen,\n                                     const unsigned char *txTo        , unsigned int txToLen,"
      },
      {
        "sha": "8dcab832cb7099ea5686628f86014e62f57e6504",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 11,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=e54ebbf6009716a7abcd4d8d3f7bd910e88decdc",
        "patch": "@@ -9,7 +9,6 @@\n #include \"crypto/ripemd160.h\"\n #include \"crypto/sha1.h\"\n #include \"crypto/sha256.h\"\n-#include \"eccryptoverify.h\"\n #include \"pubkey.h\"\n #include \"script/script.h\"\n #include \"uint256.h\"\n@@ -165,16 +164,8 @@ bool static IsLowDERSignature(const valtype &vchSig, ScriptError* serror) {\n     if (!IsValidSignatureEncoding(vchSig)) {\n         return set_error(serror, SCRIPT_ERR_SIG_DER);\n     }\n-    unsigned int nLenR = vchSig[3];\n-    unsigned int nLenS = vchSig[5+nLenR];\n-    const unsigned char *S = &vchSig[6+nLenR];\n-    // If the S value is above the order of the curve divided by two, its\n-    // complement modulo the order could have been used instead, which is\n-    // one byte shorter when encoded correctly.\n-    if (!eccrypto::CheckSignatureElement(S, nLenS, true))\n-        return set_error(serror, SCRIPT_ERR_SIG_HIGH_S);\n-\n-    return true;\n+    std::vector<unsigned char> vchSigCopy(vchSig.begin(), vchSig.begin() + vchSig.size() - 1);\n+    return CPubKey::CheckLowS(vchSigCopy);\n }\n \n bool static IsDefinedHashtypeSignature(const valtype &vchSig) {"
      },
      {
        "sha": "f657d720381f9197a74139918ae8b5b9bce3a3e3",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=e54ebbf6009716a7abcd4d8d3f7bd910e88decdc",
        "patch": "@@ -3,6 +3,7 @@\n \n #include \"chainparamsbase.h\"\n #include \"key.h\"\n+#include \"pubkey.h\"\n #include \"txdb.h\"\n \n #include <boost/filesystem.hpp>\n@@ -12,6 +13,8 @@\n  * This just configures logging and chain parameters.\n  */\n struct BasicTestingSetup {\n+    ECCVerifyHandle globalVerifyHandle;\n+\n     BasicTestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n     ~BasicTestingSetup();\n };"
      }
    ]
  },
  {
    "sha": "c800c95997fc6365165e0d2645517f738aa4aad4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODAwYzk1OTk3ZmM2MzY1MTY1ZTBkMjY0NTUxN2Y3MzhhYTRhYWQ0",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-11-16T14:45:57Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-11-16T14:50:50Z"
      },
      "message": "Remove unmaintained example test script_test.py",
      "tree": {
        "sha": "f8459af254539abfa14bea067832300dcc704d83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8459af254539abfa14bea067832300dcc704d83"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c800c95997fc6365165e0d2645517f738aa4aad4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c800c95997fc6365165e0d2645517f738aa4aad4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c800c95997fc6365165e0d2645517f738aa4aad4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c800c95997fc6365165e0d2645517f738aa4aad4/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e54ebbf6009716a7abcd4d8d3f7bd910e88decdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc"
      }
    ],
    "stats": {
      "total": 260,
      "additions": 0,
      "deletions": 260
    },
    "files": [
      {
        "sha": "57f9f9bfa6595bf03436ea89b49dda4973cee34b",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c800c95997fc6365165e0d2645517f738aa4aad4/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c800c95997fc6365165e0d2645517f738aa4aad4/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=c800c95997fc6365165e0d2645517f738aa4aad4",
        "patch": "@@ -106,7 +106,6 @@\n     'keypool.py',\n     'receivedby.py',\n #    'rpcbind_test.py', #temporary, bug in libevent, see #6655\n-#    'script_test.py', #used for manual comparison of 2 binaries\n     'smartfees.py',\n     'maxblocksinflight.py',\n     'invalidblockrequest.py',"
      },
      {
        "sha": "afc44b51b5416b9bfa5589a5e8653ee5dfbffad7",
        "filename": "qa/rpc-tests/script_test.py",
        "status": "removed",
        "additions": 0,
        "deletions": 259,
        "changes": 259,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc/qa/rpc-tests/script_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc/qa/rpc-tests/script_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/script_test.py?ref=e54ebbf6009716a7abcd4d8d3f7bd910e88decdc",
        "patch": "@@ -1,259 +0,0 @@\n-#!/usr/bin/env python2\n-#\n-# Distributed under the MIT/X11 software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n-\n-'''\n-Test notes:\n-This test uses the script_valid and script_invalid tests from the unittest\n-framework to do end-to-end testing where we compare that two nodes agree on\n-whether blocks containing a given test script are valid.\n-\n-We generally ignore the script flags associated with each test (since we lack\n-the precision to test each script using those flags in this framework), but\n-for tests with SCRIPT_VERIFY_P2SH, we can use a block time after the BIP16 \n-switchover date to try to test with that flag enabled (and for tests without\n-that flag, we use a block time before the switchover date).\n-\n-NOTE: This test is very slow and may take more than 40 minutes to run.\n-'''\n-\n-from test_framework.test_framework import ComparisonTestFramework\n-from test_framework.util import *\n-from test_framework.comptool import TestInstance, TestManager\n-from test_framework.mininode import *\n-from test_framework.blocktools import *\n-from test_framework.script import *\n-import logging\n-import copy\n-import json\n-\n-script_valid_file   = \"../../src/test/data/script_valid.json\"\n-script_invalid_file = \"../../src/test/data/script_invalid.json\"\n-\n-# Pass in a set of json files to open. \n-class ScriptTestFile(object):\n-\n-    def __init__(self, files):\n-        self.files = files\n-        self.index = -1\n-        self.data = []\n-\n-    def load_files(self):\n-        for f in self.files:\n-            self.data.extend(json.loads(open(os.path.dirname(os.path.abspath(__file__))+\"/\"+f).read()))\n-\n-    # Skip over records that are not long enough to be tests\n-    def get_records(self):\n-        while (self.index < len(self.data)):\n-            if len(self.data[self.index]) >= 3:\n-                yield self.data[self.index]\n-            self.index += 1\n-\n-\n-# Helper for parsing the flags specified in the .json files\n-SCRIPT_VERIFY_NONE = 0\n-SCRIPT_VERIFY_P2SH = 1 \n-SCRIPT_VERIFY_STRICTENC = 1 << 1\n-SCRIPT_VERIFY_DERSIG = 1 << 2\n-SCRIPT_VERIFY_LOW_S = 1 << 3\n-SCRIPT_VERIFY_NULLDUMMY = 1 << 4\n-SCRIPT_VERIFY_SIGPUSHONLY = 1 << 5\n-SCRIPT_VERIFY_MINIMALDATA = 1 << 6\n-SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS = 1 << 7\n-SCRIPT_VERIFY_CLEANSTACK = 1 << 8\n-\n-flag_map = { \n-    \"\": SCRIPT_VERIFY_NONE,\n-    \"NONE\": SCRIPT_VERIFY_NONE, \n-    \"P2SH\": SCRIPT_VERIFY_P2SH,\n-    \"STRICTENC\": SCRIPT_VERIFY_STRICTENC,\n-    \"DERSIG\": SCRIPT_VERIFY_DERSIG,\n-    \"LOW_S\": SCRIPT_VERIFY_LOW_S,\n-    \"NULLDUMMY\": SCRIPT_VERIFY_NULLDUMMY,\n-    \"SIGPUSHONLY\": SCRIPT_VERIFY_SIGPUSHONLY,\n-    \"MINIMALDATA\": SCRIPT_VERIFY_MINIMALDATA,\n-    \"DISCOURAGE_UPGRADABLE_NOPS\": SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS,\n-    \"CLEANSTACK\": SCRIPT_VERIFY_CLEANSTACK,\n-}\n-\n-def ParseScriptFlags(flag_string):\n-    flags = 0\n-    for x in flag_string.split(\",\"):\n-        if x in flag_map:\n-            flags |= flag_map[x]\n-        else:\n-            print \"Error: unrecognized script flag: \", x\n-    return flags\n-\n-'''\n-Given a string that is a scriptsig or scriptpubkey from the .json files above,\n-convert it to a CScript()\n-'''\n-# Replicates behavior from core_read.cpp\n-def ParseScript(json_script):\n-    script = json_script.split(\" \")\n-    parsed_script = CScript()\n-    for x in script:\n-        if len(x) == 0:\n-            # Empty string, ignore.\n-            pass\n-        elif x.isdigit() or (len(x) >= 1 and x[0] == \"-\" and x[1:].isdigit()):\n-            # Number\n-            n = int(x, 0)\n-            if (n == -1) or (n >= 1 and n <= 16):\n-                parsed_script = CScript(bytes(parsed_script) + bytes(CScript([n])))\n-            else:\n-                parsed_script += CScriptNum(int(x, 0))\n-        elif x.startswith(\"0x\"):\n-            # Raw hex data, inserted NOT pushed onto stack:\n-            for i in xrange(2, len(x), 2):\n-                parsed_script = CScript(bytes(parsed_script) + bytes(chr(int(x[i:i+2],16))))\n-        elif x.startswith(\"'\") and x.endswith(\"'\") and len(x) >= 2:\n-            # Single-quoted string, pushed as data.\n-            parsed_script += CScript([x[1:-1]])\n-        else:\n-            # opcode, e.g. OP_ADD or ADD:\n-            tryopname = \"OP_\" + x\n-            if tryopname in OPCODES_BY_NAME:\n-                parsed_script += CScriptOp(OPCODES_BY_NAME[\"OP_\" + x])\n-            else:\n-                print \"ParseScript: error parsing '%s'\" % x\n-                return \"\"\n-    return parsed_script\n-            \n-class TestBuilder(object):\n-    def create_credit_tx(self, scriptPubKey, height):\n-        # self.tx1 is a coinbase transaction, modeled after the one created by script_tests.cpp\n-        # This allows us to reuse signatures created in the unit test framework.\n-        self.tx1 = create_coinbase(height)                 # this has a bip34 scriptsig,\n-        self.tx1.vin[0].scriptSig = CScript([0, 0])  # but this matches the unit tests\n-        self.tx1.vout[0].nValue = 0\n-        self.tx1.vout[0].scriptPubKey = scriptPubKey\n-        self.tx1.rehash()\n-    def create_spend_tx(self, scriptSig):\n-        self.tx2 = create_transaction(self.tx1, 0, CScript(), 0)\n-        self.tx2.vin[0].scriptSig = scriptSig\n-        self.tx2.vout[0].scriptPubKey = CScript()\n-        self.tx2.rehash()\n-    def rehash(self):\n-        self.tx1.rehash()\n-        self.tx2.rehash()\n-\n-# This test uses the (default) two nodes provided by ComparisonTestFramework,\n-# specified on the command line with --testbinary and --refbinary.\n-# See comptool.py\n-class ScriptTest(ComparisonTestFramework):\n-\n-    def run_test(self):\n-        # Set up the comparison tool TestManager\n-        test = TestManager(self, self.options.tmpdir)\n-        test.add_all_connections(self.nodes)\n-\n-        # Load scripts\n-        self.scripts = ScriptTestFile([script_valid_file, script_invalid_file])\n-        self.scripts.load_files()\n-\n-        # Some variables we re-use between test instances (to build blocks)\n-        self.tip = None\n-        self.block_time = None\n-\n-        NetworkThread().start()  # Start up network handling in another thread\n-        test.run()\n-\n-    def generate_test_instance(self, pubkeystring, scriptsigstring):\n-        scriptpubkey = ParseScript(pubkeystring)\n-        scriptsig = ParseScript(scriptsigstring)\n-\n-        test = TestInstance(sync_every_block=False)\n-        test_build = TestBuilder()\n-        test_build.create_credit_tx(scriptpubkey, self.height)\n-        test_build.create_spend_tx(scriptsig)\n-        test_build.rehash()\n-\n-        block = create_block(self.tip, test_build.tx1, self.block_time)\n-        self.block_time += 1\n-        block.solve()\n-        self.tip = block.sha256\n-        self.height += 1\n-        test.blocks_and_transactions = [[block, True]]\n-\n-        for i in xrange(100):\n-            block = create_block(self.tip, create_coinbase(self.height), self.block_time)\n-            self.block_time += 1\n-            block.solve()\n-            self.tip = block.sha256\n-            self.height += 1\n-            test.blocks_and_transactions.append([block, True])\n-\n-        block = create_block(self.tip, create_coinbase(self.height), self.block_time)\n-        self.block_time += 1\n-        block.vtx.append(test_build.tx2)\n-        block.hashMerkleRoot = block.calc_merkle_root()\n-        block.rehash()\n-        block.solve()\n-        test.blocks_and_transactions.append([block, None])\n-        return test   \n-\n-    # This generates the tests for TestManager.\n-    def get_tests(self):\n-        self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n-        self.block_time = 1333230000  # before the BIP16 switchover\n-        self.height = 1\n-\n-        '''\n-        Create a new block with an anyone-can-spend coinbase\n-        '''\n-        block = create_block(self.tip, create_coinbase(self.height), self.block_time)\n-        self.block_time += 1\n-        block.solve()\n-        self.tip = block.sha256\n-        self.height += 1\n-        yield TestInstance(objects=[[block, True]])\n-\n-        '''\n-        Build out to 100 blocks total, maturing the coinbase.\n-        '''\n-        test = TestInstance(objects=[], sync_every_block=False, sync_every_tx=False)\n-        for i in xrange(100):\n-            b = create_block(self.tip, create_coinbase(self.height), self.block_time)\n-            b.solve()\n-            test.blocks_and_transactions.append([b, True])\n-            self.tip = b.sha256\n-            self.block_time += 1\n-            self.height += 1\n-        yield test\n- \n-        ''' Iterate through script tests. '''\n-        counter = 0\n-        for script_test in self.scripts.get_records():\n-            ''' Reset the blockchain to genesis block + 100 blocks. '''\n-            if self.nodes[0].getblockcount() > 101:\n-                self.nodes[0].invalidateblock(self.nodes[0].getblockhash(102))\n-                self.nodes[1].invalidateblock(self.nodes[1].getblockhash(102))\n-\n-            self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n-            self.height = 102\n-\n-            [scriptsig, scriptpubkey, flags] = script_test[0:3]\n-            flags = ParseScriptFlags(flags)\n-\n-            # We can use block time to determine whether the nodes should be\n-            # enforcing BIP16.\n-            #\n-            # We intentionally let the block time grow by 1 each time.\n-            # This forces the block hashes to differ between tests, so that\n-            # a call to invalidateblock doesn't interfere with a later test.\n-            if (flags & SCRIPT_VERIFY_P2SH):\n-                self.block_time = 1333238400 + counter # Advance to enforcing BIP16\n-            else:\n-                self.block_time = 1333230000 + counter # Before the BIP16 switchover\n-\n-            print \"Script test: [%s]\" % script_test\n-\n-            yield self.generate_test_instance(scriptpubkey, scriptsig)\n-            counter += 1\n-\n-if __name__ == '__main__':\n-    ScriptTest().main()"
      }
    ]
  },
  {
    "sha": "9f251b7a9d911970b45e4dfd99e33add96306571",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZjI1MWI3YTlkOTExOTcwYjQ1ZTRkZmQ5OWUzM2FkZDk2MzA2NTcx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-28T17:08:53Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-16T15:39:23Z"
      },
      "message": "devtools: add libraries for bitcoin-qt to symbol check\n\nForgot to add these.\nAlso add a short description for each required library.",
      "tree": {
        "sha": "d2382355532984338a45d4d5fa84970860c9bf13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d2382355532984338a45d4d5fa84970860c9bf13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f251b7a9d911970b45e4dfd99e33add96306571",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f251b7a9d911970b45e4dfd99e33add96306571",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9f251b7a9d911970b45e4dfd99e33add96306571",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f251b7a9d911970b45e4dfd99e33add96306571/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e54ebbf6009716a7abcd4d8d3f7bd910e88decdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 18,
      "deletions": 1
    },
    "files": [
      {
        "sha": "93acfcdda44246931d47541671e776c9ba6699e4",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 18,
        "deletions": 1,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f251b7a9d911970b45e4dfd99e33add96306571/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f251b7a9d911970b45e4dfd99e33add96306571/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=9f251b7a9d911970b45e4dfd99e33add96306571",
        "patch": "@@ -49,7 +49,24 @@\n READELF_CMD = os.getenv('READELF', '/usr/bin/readelf')\n CPPFILT_CMD = os.getenv('CPPFILT', '/usr/bin/c++filt')\n # Allowed NEEDED libraries\n-ALLOWED_LIBRARIES = {'librt.so.1','libpthread.so.0','libanl.so.1','libm.so.6','libgcc_s.so.1','libc.so.6','ld-linux-x86-64.so.2'}\n+ALLOWED_LIBRARIES = {\n+# bitcoind and bitcoin-qt\n+'libgcc_s.so.1', # GCC base support\n+'libc.so.6', # C library\n+'libpthread.so.0', # threading\n+'libanl.so.1', # DNS resolve\n+'libm.so.6', # math library\n+'librt.so.1', # real-time (clock)\n+'ld-linux-x86-64.so.2', # 64-bit dynamic linker\n+'ld-linux.so.2', # 32-bit dynamic linker\n+# bitcoin-qt only\n+'libX11-xcb.so.1', # part of X11\n+'libX11.so.6', # part of X11\n+'libxcb.so.1', # part of X11\n+'libfontconfig.so.1', # font support\n+'libfreetype.so.6', # font parsing\n+'libdl.so.2' # programming interface to dynamic linker\n+}\n \n class CPPFilt(object):\n     '''"
      }
    ]
  },
  {
    "sha": "0b416c6e9c3f9f81bea16168f82af77f4e8724bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYjQxNmM2ZTljM2Y5ZjgxYmVhMTYxNjhmODJhZjc3ZjRlODcyNGJi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-28T19:27:10Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-16T15:39:24Z"
      },
      "message": "depends: qt PIDLIST_ABSOLUTE patch\n\nRemove sed-based qt PIDLIST_ABSOLUTE workaround, replace by a patch that\nworks for both old (such as used by Travis and Ubuntu Precise) and new\nmingw (Ubuntu Trusty).",
      "tree": {
        "sha": "52cab6766915ae53193d664cebb83f51579d632a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/52cab6766915ae53193d664cebb83f51579d632a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b416c6e9c3f9f81bea16168f82af77f4e8724bb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b416c6e9c3f9f81bea16168f82af77f4e8724bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0b416c6e9c3f9f81bea16168f82af77f4e8724bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b416c6e9c3f9f81bea16168f82af77f4e8724bb/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9f251b7a9d911970b45e4dfd99e33add96306571",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f251b7a9d911970b45e4dfd99e33add96306571",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9f251b7a9d911970b45e4dfd99e33add96306571"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 39,
      "deletions": 4
    },
    "files": [
      {
        "sha": "901b761fde1425b367f0b93483e2b2b003fa9203",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b416c6e9c3f9f81bea16168f82af77f4e8724bb/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b416c6e9c3f9f81bea16168f82af77f4e8724bb/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=0b416c6e9c3f9f81bea16168f82af77f4e8724bb",
        "patch": "@@ -8,7 +8,7 @@ $(package)_dependencies=openssl\n $(package)_linux_dependencies=freetype fontconfig dbus libxcb libX11 xproto libXext\n $(package)_build_subdir=qtbase\n $(package)_qt_libs=corelib network widgets gui plugins testlib\n-$(package)_patches=mac-qmake.conf fix-xcb-include-order.patch mingw-uuidof.patch\n+$(package)_patches=mac-qmake.conf fix-xcb-include-order.patch mingw-uuidof.patch pidlist_absolute.patch\n \n $(package)_qttranslations_file_name=qttranslations-$($(package)_suffix)\n $(package)_qttranslations_sha256_hash=c4bd6db6e426965c6f8824c54e81f68bbd61e2bae1bcadc328c6e81c45902a0d\n@@ -122,9 +122,6 @@ endef\n define $(package)_preprocess_cmds\n   sed -i.old \"s|updateqm.commands = \\$$$$\\$$$$LRELEASE|updateqm.commands = $($(package)_extract_dir)/qttools/bin/lrelease|\" qttranslations/translations/translations.pro && \\\n   sed -i.old \"s/src_plugins.depends = src_sql src_xml src_network/src_plugins.depends = src_xml src_network/\" qtbase/src/src.pro && \\\n-  sed -i.old \"s/PIDLIST_ABSOLUTE/ITEMIDLIST */\" qtbase/src/plugins/platforms/windows/qwindowscontext.h &&\\\n-  sed -i.old \"s/PIDLIST_ABSOLUTE/ITEMIDLIST */\" qtbase/src/plugins/platforms/windows/qwindowsdialoghelpers.cpp &&\\\n-  sed -i.old \"s/PCIDLIST_ABSOLUTE/const ITEMIDLIST */\" qtbase/src/plugins/platforms/windows/qwindowscontext.h &&\\\n   sed -i.old \"s|X11/extensions/XIproto.h|X11/X.h|\" qtbase/src/plugins/platforms/xcb/qxcbxsettings.cpp && \\\n   sed -i.old 's/if \\[ \"$$$$XPLATFORM_MAC\" = \"yes\" \\]; then xspecvals=$$$$(macSDKify/if \\[ \"$$$$BUILD_ON_MAC\" = \"yes\" \\]; then xspecvals=$$$$(macSDKify/' qtbase/configure && \\\n   mkdir -p qtbase/mkspecs/macx-clang-linux &&\\\n@@ -134,6 +131,7 @@ define $(package)_preprocess_cmds\n   cp -f $($(package)_patch_dir)/mac-qmake.conf qtbase/mkspecs/macx-clang-linux/qmake.conf && \\\n   patch -p1 < $($(package)_patch_dir)/fix-xcb-include-order.patch && \\\n   patch -p1 < $($(package)_patch_dir)/mingw-uuidof.patch && \\\n+  patch -p1 < $($(package)_patch_dir)/pidlist_absolute.patch && \\\n   echo \"QMAKE_CFLAGS     += $($(package)_cflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   echo \"QMAKE_CXXFLAGS   += $($(package)_cxxflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   echo \"QMAKE_LFLAGS     += $($(package)_ldflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\"
      },
      {
        "sha": "0b49c050dcc1f37fc86d289ecd7bf9b1c2607206",
        "filename": "depends/patches/qt/pidlist_absolute.patch",
        "status": "added",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b416c6e9c3f9f81bea16168f82af77f4e8724bb/depends/patches/qt/pidlist_absolute.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b416c6e9c3f9f81bea16168f82af77f4e8724bb/depends/patches/qt/pidlist_absolute.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/pidlist_absolute.patch?ref=0b416c6e9c3f9f81bea16168f82af77f4e8724bb",
        "patch": "@@ -0,0 +1,37 @@\n+diff -dur old/qtbase/src/plugins/platforms/windows/qwindowscontext.h new/qtbase/src/plugins/platforms/windows/qwindowscontext.h\n+--- old/qtbase/src/plugins/platforms/windows/qwindowscontext.h\t2015-06-29 22:04:40.000000000 +0200\n++++ new/qtbase/src/plugins/platforms/windows/qwindowscontext.h\t2015-11-01 12:55:59.751234846 +0100\n+@@ -124,10 +124,18 @@\n+     inline void init();\n+ \n+     typedef HRESULT (WINAPI *SHCreateItemFromParsingName)(PCWSTR, IBindCtx *, const GUID&, void **);\n++#if defined(Q_CC_MINGW) && (!defined(__MINGW64_VERSION_MAJOR) || __MINGW64_VERSION_MAJOR < 3)\n++    typedef HRESULT (WINAPI *SHGetKnownFolderIDList)(const GUID &, DWORD, HANDLE, ITEMIDLIST **);\n++#else\n+     typedef HRESULT (WINAPI *SHGetKnownFolderIDList)(const GUID &, DWORD, HANDLE, PIDLIST_ABSOLUTE *);\n++#endif\n+     typedef HRESULT (WINAPI *SHGetStockIconInfo)(int , int , _SHSTOCKICONINFO *);\n+     typedef HRESULT (WINAPI *SHGetImageList)(int, REFIID , void **);\n++#if defined(Q_CC_MINGW) && (!defined(__MINGW64_VERSION_MAJOR) || __MINGW64_VERSION_MAJOR < 3)\n++    typedef HRESULT (WINAPI *SHCreateItemFromIDList)(const ITEMIDLIST *, REFIID, void **);\n++#else\n+     typedef HRESULT (WINAPI *SHCreateItemFromIDList)(PCIDLIST_ABSOLUTE, REFIID, void **);\n++#endif\n+ \n+     SHCreateItemFromParsingName sHCreateItemFromParsingName;\n+     SHGetKnownFolderIDList sHGetKnownFolderIDList;\n+diff -dur old/qtbase/src/plugins/platforms/windows/qwindowsdialoghelpers.cpp new/qtbase/src/plugins/platforms/windows/qwindowsdialoghelpers.cpp\n+--- old/qtbase/src/plugins/platforms/windows/qwindowsdialoghelpers.cpp\t2015-06-29 22:04:40.000000000 +0200\n++++ new/qtbase/src/plugins/platforms/windows/qwindowsdialoghelpers.cpp\t2015-11-01 13:41:09.503149772 +0100\n+@@ -1008,7 +1008,11 @@\n+             qWarning() << __FUNCTION__ << \": Invalid CLSID: \" << url.path();\n+             return Q_NULLPTR;\n+         }\n++#if defined(Q_CC_MINGW) && (!defined(__MINGW64_VERSION_MAJOR) || __MINGW64_VERSION_MAJOR < 3)\n++        ITEMIDLIST *idList;\n++#else\n+         PIDLIST_ABSOLUTE idList;\n++#endif\n+         HRESULT hr = QWindowsContext::shell32dll.sHGetKnownFolderIDList(uuid, 0, 0, &idList);\n+         if (FAILED(hr)) {\n+             qErrnoWarning(\"%s: SHGetKnownFolderIDList(%s)) failed\", __FUNCTION__, qPrintable(url.toString()));"
      }
    ]
  },
  {
    "sha": "2e31d74b715515c344ba50f574831d6a73302aac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZTMxZDc0YjcxNTUxNWMzNDRiYTUwZjU3NDgzMWQ2YTczMzAyYWFj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-29T06:29:48Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-16T15:39:24Z"
      },
      "message": "gitian: use trusty for building",
      "tree": {
        "sha": "f27d5e3d4b5ca4aec555296c5e3c7478bcd23403",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f27d5e3d4b5ca4aec555296c5e3c7478bcd23403"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e31d74b715515c344ba50f574831d6a73302aac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e31d74b715515c344ba50f574831d6a73302aac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2e31d74b715515c344ba50f574831d6a73302aac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e31d74b715515c344ba50f574831d6a73302aac/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b416c6e9c3f9f81bea16168f82af77f4e8724bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b416c6e9c3f9f81bea16168f82af77f4e8724bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b416c6e9c3f9f81bea16168f82af77f4e8724bb"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 16,
      "deletions": 25
    },
    "files": [
      {
        "sha": "07c2ba98b182e5c329e834aa8d523a888fd5645f",
        "filename": "contrib/gitian-descriptors/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e31d74b715515c344ba50f574831d6a73302aac/contrib/gitian-descriptors/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e31d74b715515c344ba50f574831d6a73302aac/contrib/gitian-descriptors/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/README.md?ref=2e31d74b715515c344ba50f574831d6a73302aac",
        "patch": "@@ -27,7 +27,7 @@ Once you've got the right hardware and software:\n \n     # Create base images\n     cd gitian-builder\n-    bin/make-base-vm --suite precise --arch amd64\n+    bin/make-base-vm --suite trusty --arch amd64\n     cd ..\n \n     # Get inputs (see doc/release-process.md for exact inputs needed and where to get them)"
      },
      {
        "sha": "0c3c439dd96316915584b7af780502b853bc72fe",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 4,
        "deletions": 13,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e31d74b715515c344ba50f574831d6a73302aac/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e31d74b715515c344ba50f574831d6a73302aac/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=2e31d74b715515c344ba50f574831d6a73302aac",
        "patch": "@@ -2,20 +2,19 @@\n name: \"bitcoin-linux-0.12\"\n enable_cache: true\n suites:\n-- \"precise\"\n+- \"trusty\"\n architectures:\n - \"amd64\"\n packages: \n - \"g++-multilib\"\n - \"git-core\"\n - \"pkg-config\"\n-- \"autoconf2.13\"\n+- \"autoconf\"\n - \"libtool\"\n - \"automake\"\n - \"faketime\"\n - \"bsdmainutils\"\n - \"binutils-gold\"\n-- \"libstdc++6-4.6-pic\"\n reference_datetime: \"2015-06-01 00:00:00\"\n remotes:\n - \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n@@ -44,7 +43,7 @@ script: |\n   for prog in ${FAKETIME_PROGS}; do\n     echo '#!/bin/bash' > ${WRAP_DIR}/${prog}\n     echo \"REAL=\\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\\`\" >> ${WRAP_DIR}/${prog}\n-    echo 'export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${prog}\n+    echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${prog}\n     echo \"export FAKETIME=\\\"${REFERENCE_DATETIME}\\\"\" >> ${WRAP_DIR}/${prog}\n     echo \"\\$REAL \\$@\" >> $WRAP_DIR/${prog}\n     chmod +x ${WRAP_DIR}/${prog}\n@@ -55,7 +54,7 @@ script: |\n     for prog in ${FAKETIME_HOST_PROGS}; do\n         echo '#!/bin/bash' > ${WRAP_DIR}/${i}-${prog}\n         echo \"REAL=\\`which -a ${i}-${prog} | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\n-        echo 'export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}\n+        echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}\n         echo \"export FAKETIME=\\\"${REFERENCE_DATETIME}\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n         echo \"\\$REAL \\$@\" >> $WRAP_DIR/${i}-${prog}\n         chmod +x ${WRAP_DIR}/${i}-${prog}\n@@ -70,14 +69,6 @@ script: |\n     make ${MAKEOPTS} -C ${BASEPREFIX} HOST=\"${i}\"\n   done\n \n-  # Ubuntu precise hack: Not an issue in later versions.\n-  # Precise's libstdc++.a is non-pic. There's an optional libstdc++6-4.6-pic\n-  #   package which provides libstdc++_pic.a, but the linker can't find it.\n-  # Symlink it to a path that will be included in our link-line so that the\n-  # linker picks it up before the default libstdc++.a.\n-  # This is only necessary for 64bit.\n-  ln -s /usr/lib/gcc/x86_64-linux-gnu/4.6/libstdc++_pic.a ${BASEPREFIX}/x86_64-unknown-linux-gnu/lib/libstdc++.a\n-\n   # Create the release tarball using (arbitrarily) the first host\n   ./autogen.sh\n   ./configure --prefix=${BASEPREFIX}/`echo \"${HOSTS}\" | awk '{print $1;}'`"
      },
      {
        "sha": "aa9494b7ed69ee7d6ee18271dc6233c9a368e979",
        "filename": "contrib/gitian-descriptors/gitian-osx-signer.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e31d74b715515c344ba50f574831d6a73302aac/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e31d74b715515c344ba50f574831d6a73302aac/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx-signer.yml?ref=2e31d74b715515c344ba50f574831d6a73302aac",
        "patch": "@@ -1,7 +1,7 @@\n ---\n name: \"bitcoin-dmg-signer\"\n suites:\n-- \"precise\"\n+- \"trusty\"\n architectures:\n - \"amd64\"\n packages:\n@@ -23,7 +23,7 @@ script: |\n   for prog in ${FAKETIME_PROGS}; do\n     echo '#!/bin/bash' > ${WRAP_DIR}/${prog}\n     echo \"REAL=\\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\\`\" >> ${WRAP_DIR}/${prog}\n-    echo 'export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${prog}\n+    echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${prog}\n     echo \"export FAKETIME=\\\"${REFERENCE_DATETIME}\\\"\" >> ${WRAP_DIR}/${prog}\n     echo \"\\$REAL \\$@\" >> $WRAP_DIR/${prog}\n     chmod +x ${WRAP_DIR}/${prog}"
      },
      {
        "sha": "9ac774c8a05b9f2592be0746930abfc77a5dcc57",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e31d74b715515c344ba50f574831d6a73302aac/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e31d74b715515c344ba50f574831d6a73302aac/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=2e31d74b715515c344ba50f574831d6a73302aac",
        "patch": "@@ -2,14 +2,14 @@\n name: \"bitcoin-osx-0.12\"\n enable_cache: true\n suites:\n-- \"precise\"\n+- \"trusty\"\n architectures:\n - \"amd64\"\n packages: \n - \"g++\"\n - \"git-core\"\n - \"pkg-config\"\n-- \"autoconf2.13\"\n+- \"autoconf\"\n - \"libtool\"\n - \"automake\"\n - \"faketime\"\n@@ -49,7 +49,7 @@ script: |\n   for prog in ${FAKETIME_PROGS}; do\n     echo '#!/bin/bash' > ${WRAP_DIR}/${prog}\n     echo \"REAL=\\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\\`\" >> ${WRAP_DIR}/${prog}\n-    echo 'export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${prog}\n+    echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${prog}\n     echo \"export FAKETIME=\\\"${REFERENCE_DATETIME}\\\"\" >> ${WRAP_DIR}/${prog}\n     echo \"\\$REAL \\$@\" >> $WRAP_DIR/${prog}\n     chmod +x ${WRAP_DIR}/${prog}\n@@ -60,7 +60,7 @@ script: |\n     for prog in ${FAKETIME_HOST_PROGS}; do\n         echo '#!/bin/bash' > ${WRAP_DIR}/${i}-${prog}\n         echo \"REAL=\\`which -a ${i}-${prog} | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\n-        echo 'export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}\n+        echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}\n         echo \"export FAKETIME=\\\"${REFERENCE_DATETIME}\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n         echo \"\\$REAL \\$@\" >> $WRAP_DIR/${i}-${prog}\n         chmod +x ${WRAP_DIR}/${i}-${prog}"
      },
      {
        "sha": "a29d7ab4725765b227393f034043799267af03a6",
        "filename": "contrib/gitian-descriptors/gitian-win-signer.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e31d74b715515c344ba50f574831d6a73302aac/contrib/gitian-descriptors/gitian-win-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e31d74b715515c344ba50f574831d6a73302aac/contrib/gitian-descriptors/gitian-win-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win-signer.yml?ref=2e31d74b715515c344ba50f574831d6a73302aac",
        "patch": "@@ -1,7 +1,7 @@\n ---\n name: \"bitcoin-win-signer\"\n suites:\n-- \"precise\"\n+- \"trusty\"\n architectures:\n - \"amd64\"\n packages:"
      },
      {
        "sha": "4b8c29138872692159b55f954af3fde3d0ab0c24",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e31d74b715515c344ba50f574831d6a73302aac/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e31d74b715515c344ba50f574831d6a73302aac/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=2e31d74b715515c344ba50f574831d6a73302aac",
        "patch": "@@ -2,14 +2,14 @@\n name: \"bitcoin-win-0.12\"\n enable_cache: true\n suites:\n-- \"precise\"\n+- \"trusty\"\n architectures:\n - \"amd64\"\n packages: \n - \"g++\"\n - \"git-core\"\n - \"pkg-config\"\n-- \"autoconf2.13\"\n+- \"autoconf\"\n - \"libtool\"\n - \"automake\"\n - \"faketime\"\n@@ -46,7 +46,7 @@ script: |\n   for prog in ${FAKETIME_PROGS}; do\n     echo '#!/bin/bash' > ${WRAP_DIR}/${prog}\n     echo \"REAL=\\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\\`\" >> ${WRAP_DIR}/${prog}\n-    echo 'export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${prog}\n+    echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${prog}\n     echo \"export FAKETIME=\\\"${REFERENCE_DATETIME}\\\"\" >> ${WRAP_DIR}/${prog}\n     echo \"\\$REAL \\$@\" >> $WRAP_DIR/${prog}\n     chmod +x ${WRAP_DIR}/${prog}\n@@ -57,7 +57,7 @@ script: |\n     for prog in ${FAKETIME_HOST_PROGS}; do\n         echo '#!/bin/bash' > ${WRAP_DIR}/${i}-${prog}\n         echo \"REAL=\\`which -a ${i}-${prog} | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\n-        echo 'export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}\n+        echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}\n         echo \"export FAKETIME=\\\"${REFERENCE_DATETIME}\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n         echo \"\\$REAL \\$@\" >> $WRAP_DIR/${i}-${prog}\n         chmod +x ${WRAP_DIR}/${i}-${prog}"
      }
    ]
  },
  {
    "sha": "22eca7da22b67409d757d6859b1cf212e445dd39",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMmVjYTdkYTIyYjY3NDA5ZDc1N2Q2ODU5YjFjZjIxMmU0NDVkZDM5",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-16T20:10:22Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-16T20:33:06Z"
      },
      "message": "Add smart fee estimation functions\n\nThese are more useful fee and priority estimation functions. If there is no fee/pri high enough for the target you are aiming for, it will give you the estimate for the lowest target that you can reliably obtain.  This is better than defaulting to the minimum.  It will also pass back the target for which it returned an answer.",
      "tree": {
        "sha": "a5105ea18e0e84f7d30491da6b8e8fac66113529",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a5105ea18e0e84f7d30491da6b8e8fac66113529"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22eca7da22b67409d757d6859b1cf212e445dd39",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22eca7da22b67409d757d6859b1cf212e445dd39",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/22eca7da22b67409d757d6859b1cf212e445dd39",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22eca7da22b67409d757d6859b1cf212e445dd39/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e54ebbf6009716a7abcd4d8d3f7bd910e88decdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 75,
      "deletions": 0
    },
    "files": [
      {
        "sha": "eb6e9cc8bb122ff4ff3be367e03e1c2861bb7ef4",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22eca7da22b67409d757d6859b1cf212e445dd39/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22eca7da22b67409d757d6859b1cf212e445dd39/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=22eca7da22b67409d757d6859b1cf212e445dd39",
        "patch": "@@ -504,6 +504,28 @@ CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget)\n     return CFeeRate(median);\n }\n \n+CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoundAtTarget)\n+{\n+    if (answerFoundAtTarget)\n+        *answerFoundAtTarget = confTarget;\n+    // Return failure if trying to analyze a target we're not tracking\n+    if (confTarget <= 0 || (unsigned int)confTarget > feeStats.GetMaxConfirms())\n+        return CFeeRate(0);\n+\n+    double median = -1;\n+    while (median < 0 && (unsigned int)confTarget <= feeStats.GetMaxConfirms()) {\n+        median = feeStats.EstimateMedianVal(confTarget++, SUFFICIENT_FEETXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n+    }\n+\n+    if (answerFoundAtTarget)\n+        *answerFoundAtTarget = confTarget - 1;\n+\n+    if (median < 0)\n+        return CFeeRate(0);\n+\n+    return CFeeRate(median);\n+}\n+\n double CBlockPolicyEstimator::estimatePriority(int confTarget)\n {\n     // Return failure if trying to analyze a target we're not tracking\n@@ -513,6 +535,25 @@ double CBlockPolicyEstimator::estimatePriority(int confTarget)\n     return priStats.EstimateMedianVal(confTarget, SUFFICIENT_PRITXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n }\n \n+double CBlockPolicyEstimator::estimateSmartPriority(int confTarget, int *answerFoundAtTarget)\n+{\n+    if (answerFoundAtTarget)\n+        *answerFoundAtTarget = confTarget;\n+    // Return failure if trying to analyze a target we're not tracking\n+    if (confTarget <= 0 || (unsigned int)confTarget > priStats.GetMaxConfirms())\n+        return -1;\n+\n+    double median = -1;\n+    while (median < 0 && (unsigned int)confTarget <= priStats.GetMaxConfirms()) {\n+        median = priStats.EstimateMedianVal(confTarget++, SUFFICIENT_PRITXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n+    }\n+\n+    if (answerFoundAtTarget)\n+        *answerFoundAtTarget = confTarget - 1;\n+\n+    return median;\n+}\n+\n void CBlockPolicyEstimator::Write(CAutoFile& fileout)\n {\n     fileout << nBestSeenHeight;"
      },
      {
        "sha": "4c6e27fc112371e375e8030a6ecb5721e5df152a",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22eca7da22b67409d757d6859b1cf212e445dd39/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22eca7da22b67409d757d6859b1cf212e445dd39/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=22eca7da22b67409d757d6859b1cf212e445dd39",
        "patch": "@@ -242,9 +242,21 @@ class CBlockPolicyEstimator\n     /** Return a fee estimate */\n     CFeeRate estimateFee(int confTarget);\n \n+    /** Estimate fee rate needed to get be included in a block within\n+     *  confTarget blocks. If no answer can be given at confTarget, return an\n+     *  estimate at the lowest target where one can be given.\n+     */\n+    CFeeRate estimateSmartFee(int confTarget, int *answerFoundAtTarget);\n+\n     /** Return a priority estimate */\n     double estimatePriority(int confTarget);\n \n+    /** Estimate priority needed to get be included in a block within\n+     *  confTarget blocks. If no answer can be given at confTarget, return an\n+     *  estimate at the lowest target where one can be given.\n+     */\n+    double estimateSmartPriority(int confTarget, int *answerFoundAtTarget);\n+\n     /** Write estimation data to a file */\n     void Write(CAutoFile& fileout);\n "
      },
      {
        "sha": "503e73d454cbdf1ac7a17558400cd848b4378b7e",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22eca7da22b67409d757d6859b1cf212e445dd39/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22eca7da22b67409d757d6859b1cf212e445dd39/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=22eca7da22b67409d757d6859b1cf212e445dd39",
        "patch": "@@ -701,11 +701,21 @@ CFeeRate CTxMemPool::estimateFee(int nBlocks) const\n     LOCK(cs);\n     return minerPolicyEstimator->estimateFee(nBlocks);\n }\n+CFeeRate CTxMemPool::estimateSmartFee(int nBlocks, int *answerFoundAtBlocks) const\n+{\n+    LOCK(cs);\n+    return minerPolicyEstimator->estimateSmartFee(nBlocks, answerFoundAtBlocks);\n+}\n double CTxMemPool::estimatePriority(int nBlocks) const\n {\n     LOCK(cs);\n     return minerPolicyEstimator->estimatePriority(nBlocks);\n }\n+double CTxMemPool::estimateSmartPriority(int nBlocks, int *answerFoundAtBlocks) const\n+{\n+    LOCK(cs);\n+    return minerPolicyEstimator->estimateSmartPriority(nBlocks, answerFoundAtBlocks);\n+}\n \n bool\n CTxMemPool::WriteFeeEstimates(CAutoFile& fileout) const"
      },
      {
        "sha": "5d8231fb778d4875cab9b9652a35ea1078ca361a",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22eca7da22b67409d757d6859b1cf212e445dd39/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22eca7da22b67409d757d6859b1cf212e445dd39/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=22eca7da22b67409d757d6859b1cf212e445dd39",
        "patch": "@@ -454,9 +454,21 @@ class CTxMemPool\n \n     bool lookup(uint256 hash, CTransaction& result) const;\n \n+    /** Estimate fee rate needed to get into the next nBlocks\n+     *  If no answer can be given at nBlocks, return an estimate\n+     *  at the lowest number of blocks where one can be given\n+     */\n+    CFeeRate estimateSmartFee(int nBlocks, int *answerFoundAtBlocks = NULL) const;\n+\n     /** Estimate fee rate needed to get into the next nBlocks */\n     CFeeRate estimateFee(int nBlocks) const;\n \n+    /** Estimate priority needed to get into the next nBlocks\n+     *  If no answer can be given at nBlocks, return an estimate\n+     *  at the lowest number of blocks where one can be given\n+     */\n+    double estimateSmartPriority(int nBlocks, int *answerFoundAtBlocks = NULL) const;\n+\n     /** Estimate priority needed to get into the next nBlocks */\n     double estimatePriority(int nBlocks) const;\n     "
      }
    ]
  },
  {
    "sha": "4fe28236c0c16e20ddd539f38fc8d58db5eb83ed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZmUyODIzNmMwYzE2ZTIwZGRkNTM5ZjM4ZmM4ZDU4ZGI1ZWI4M2Vk",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-16T20:15:32Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-16T20:33:06Z"
      },
      "message": "Change wallet and GUI code to use new smart fee estimation calls.",
      "tree": {
        "sha": "edf34a26c606a43b2bc0e71809af3c7a1d87c4a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/edf34a26c606a43b2bc0e71809af3c7a1d87c4a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4fe28236c0c16e20ddd539f38fc8d58db5eb83ed",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fe28236c0c16e20ddd539f38fc8d58db5eb83ed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4fe28236c0c16e20ddd539f38fc8d58db5eb83ed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fe28236c0c16e20ddd539f38fc8d58db5eb83ed/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "22eca7da22b67409d757d6859b1cf212e445dd39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22eca7da22b67409d757d6859b1cf212e445dd39",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22eca7da22b67409d757d6859b1cf212e445dd39"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 22,
      "deletions": 24
    },
    "files": [
      {
        "sha": "cbc41f3416ef780c9f5fc57799bda7a41fdefbd7",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fe28236c0c16e20ddd539f38fc8d58db5eb83ed/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fe28236c0c16e20ddd539f38fc8d58db5eb83ed/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=4fe28236c0c16e20ddd539f38fc8d58db5eb83ed",
        "patch": "@@ -538,7 +538,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         nBytes = nBytesInputs + ((CoinControlDialog::payAmounts.size() > 0 ? CoinControlDialog::payAmounts.size() + 1 : 2) * 34) + 10; // always assume +1 output for change here\n \n         // Priority\n-        double mempoolEstimatePriority = mempool.estimatePriority(nTxConfirmTarget);\n+        double mempoolEstimatePriority = mempool.estimateSmartPriority(nTxConfirmTarget);\n         dPriority = dPriorityInputs / (nBytes - nBytesInputs + (nQuantityUncompressed * 29)); // 29 = 180 - 151 (uncompressed public keys are over the limit. max 151 bytes of the input are ignored for priority)\n         sPriorityLabel = CoinControlDialog::getPriorityLabel(dPriority, mempoolEstimatePriority);\n \n@@ -550,10 +550,8 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         // Fee\n         nPayFee = CWallet::GetMinimumFee(nBytes, nTxConfirmTarget, mempool);\n \n-        // Allow free?\n-        double dPriorityNeeded = mempoolEstimatePriority;\n-        if (dPriorityNeeded <= 0)\n-            dPriorityNeeded = AllowFreeThreshold(); // not enough data, back to hard-coded\n+        // Allow free? (require at least hard-coded threshold and default to that if no estimate)\n+        double dPriorityNeeded = std::max(mempoolEstimatePriority, AllowFreeThreshold());\n         fAllowFree = (dPriority >= dPriorityNeeded);\n \n         if (fSendFreeTransactions)\n@@ -649,8 +647,9 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     double dFeeVary;\n     if (payTxFee.GetFeePerK() > 0)\n         dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), payTxFee.GetFeePerK()) / 1000;\n-    else\n-        dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), mempool.estimateFee(nTxConfirmTarget).GetFeePerK()) / 1000;\n+    else {\n+        dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), mempool.estimateSmartFee(nTxConfirmTarget).GetFeePerK()) / 1000;\n+    }\n     QString toolTip4 = tr(\"Can vary +/- %1 satoshi(s) per input.\").arg(dFeeVary);\n \n     l3->setToolTip(toolTip4);\n@@ -686,7 +685,7 @@ void CoinControlDialog::updateView()\n     QFlags<Qt::ItemFlag> flgTristate = Qt::ItemIsSelectable | Qt::ItemIsEnabled | Qt::ItemIsUserCheckable | Qt::ItemIsTristate;\n \n     int nDisplayUnit = model->getOptionsModel()->getDisplayUnit();\n-    double mempoolEstimatePriority = mempool.estimatePriority(nTxConfirmTarget);\n+    double mempoolEstimatePriority = mempool.estimateSmartPriority(nTxConfirmTarget);\n \n     std::map<QString, std::vector<COutput> > mapCoins;\n     model->listCoins(mapCoins);"
      },
      {
        "sha": "e764d75b2a9cde48ad3f06a3508c4381b54c90d6",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fe28236c0c16e20ddd539f38fc8d58db5eb83ed/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fe28236c0c16e20ddd539f38fc8d58db5eb83ed/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=4fe28236c0c16e20ddd539f38fc8d58db5eb83ed",
        "patch": "@@ -633,7 +633,8 @@ void SendCoinsDialog::updateSmartFeeLabel()\n         return;\n \n     int nBlocksToConfirm = defaultConfirmTarget - ui->sliderSmartFee->value();\n-    CFeeRate feeRate = mempool.estimateFee(nBlocksToConfirm);\n+    int estimateFoundAtBlocks = nBlocksToConfirm;\n+    CFeeRate feeRate = mempool.estimateSmartFee(nBlocksToConfirm, &estimateFoundAtBlocks);\n     if (feeRate <= CFeeRate(0)) // not enough data => minfee\n     {\n         ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), CWallet::GetRequiredFee(1000)) + \"/kB\");\n@@ -644,7 +645,7 @@ void SendCoinsDialog::updateSmartFeeLabel()\n     {\n         ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), feeRate.GetFeePerK()) + \"/kB\");\n         ui->labelSmartFee2->hide();\n-        ui->labelFeeEstimation->setText(tr(\"Estimated to begin confirmation within %n block(s).\", \"\", nBlocksToConfirm));\n+        ui->labelFeeEstimation->setText(tr(\"Estimated to begin confirmation within %n block(s).\", \"\", estimateFoundAtBlocks));\n     }\n \n     updateFeeMinimizedLabel();"
      },
      {
        "sha": "9152a59cdf36f3176802368a69fe6b8257e01176",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 14,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fe28236c0c16e20ddd539f38fc8d58db5eb83ed/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fe28236c0c16e20ddd539f38fc8d58db5eb83ed/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=4fe28236c0c16e20ddd539f38fc8d58db5eb83ed",
        "patch": "@@ -2033,14 +2033,10 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 if (fSendFreeTransactions && nBytes <= MAX_FREE_TRANSACTION_CREATE_SIZE)\n                 {\n                     // Not enough fee: enough priority?\n-                    double dPriorityNeeded = mempool.estimatePriority(nTxConfirmTarget);\n-                    // Not enough mempool history to estimate: use hard-coded AllowFree.\n-                    if (dPriorityNeeded <= 0 && AllowFree(dPriority))\n-                        break;\n-\n-                    // Small enough, and priority high enough, to send for free\n-                    if (dPriorityNeeded > 0 && dPriority >= dPriorityNeeded)\n-                        break;\n+                    double dPriorityNeeded = mempool.estimateSmartPriority(nTxConfirmTarget);\n+                    // Require at least hard-coded AllowFree.\n+                    if (dPriority >= dPriorityNeeded && AllowFree(dPriority))\n+                            break;\n                 }\n \n                 CAmount nFeeNeeded = GetMinimumFee(nBytes, nTxConfirmTarget, mempool);\n@@ -2131,12 +2127,14 @@ CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarge\n     if (fPayAtLeastCustomFee && nFeeNeeded > 0 && nFeeNeeded < payTxFee.GetFeePerK())\n         nFeeNeeded = payTxFee.GetFeePerK();\n     // User didn't set: use -txconfirmtarget to estimate...\n-    if (nFeeNeeded == 0)\n-        nFeeNeeded = pool.estimateFee(nConfirmTarget).GetFee(nTxBytes);\n-    // ... unless we don't have enough mempool data, in which case fall\n-    // back to the required fee\n-    if (nFeeNeeded == 0)\n-        nFeeNeeded = GetRequiredFee(nTxBytes);\n+    if (nFeeNeeded == 0) {\n+        int estimateFoundTarget = nConfirmTarget;\n+        nFeeNeeded = pool.estimateSmartFee(nConfirmTarget, &estimateFoundTarget).GetFee(nTxBytes);\n+        // ... unless we don't have enough mempool data for our desired target\n+        // so we make sure we're paying at least minTxFee\n+        if (nFeeNeeded == 0 || (unsigned int)estimateFoundTarget > nConfirmTarget)\n+            nFeeNeeded = std::max(nFeeNeeded, GetRequiredFee(nTxBytes));\n+    }\n     // prevent user from paying a non-sense fee (like 1 satoshi): 0 < fee < minRelayFee\n     if (nFeeNeeded < ::minRelayTxFee.GetFee(nTxBytes))\n         nFeeNeeded = ::minRelayTxFee.GetFee(nTxBytes);"
      }
    ]
  },
  {
    "sha": "f22ac4a22c570921f1c2be121e6744a1564b2ce7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMjJhYzRhMjJjNTcwOTIxZjFjMmJlMTIxZTY3NDRhMTU2NGIyY2U3",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-16T20:18:15Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-16T20:33:06Z"
      },
      "message": "Increase success threshold for fee estimation to 95%\n\nThis provides more conservative estimates and reacts more quickly to a backlog.\nUnfortunately the unit test for fee estimation depends on the success threshold (and the decay) chosen; also modify the unit test for the new default success thresholds.",
      "tree": {
        "sha": "8954f41b86154f914d0cd96e70732ab30e3449c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8954f41b86154f914d0cd96e70732ab30e3449c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f22ac4a22c570921f1c2be121e6744a1564b2ce7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f22ac4a22c570921f1c2be121e6744a1564b2ce7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f22ac4a22c570921f1c2be121e6744a1564b2ce7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f22ac4a22c570921f1c2be121e6744a1564b2ce7/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4fe28236c0c16e20ddd539f38fc8d58db5eb83ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fe28236c0c16e20ddd539f38fc8d58db5eb83ed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4fe28236c0c16e20ddd539f38fc8d58db5eb83ed"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 22,
      "deletions": 19
    },
    "files": [
      {
        "sha": "07caa6e71362665425fba2e3f478d62d5232da50",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f22ac4a22c570921f1c2be121e6744a1564b2ce7/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f22ac4a22c570921f1c2be121e6744a1564b2ce7/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=f22ac4a22c570921f1c2be121e6744a1564b2ce7",
        "patch": "@@ -182,8 +182,8 @@ static const unsigned int MAX_BLOCK_CONFIRMS = 25;\n /** Decay of .998 is a half-life of 346 blocks or about 2.4 days */\n static const double DEFAULT_DECAY = .998;\n \n-/** Require greater than 85% of X fee transactions to be confirmed within Y blocks for X to be big enough */\n-static const double MIN_SUCCESS_PCT = .85;\n+/** Require greater than 95% of X fee transactions to be confirmed within Y blocks for X to be big enough */\n+static const double MIN_SUCCESS_PCT = .95;\n static const double UNLIKELY_PCT = .5;\n \n /** Require an avg of 1 tx in the combined fee bucket per block to have stat significance */"
      },
      {
        "sha": "63acb1cf93bdbbbbb65acb158b6fde73611e0a46",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 17,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f22ac4a22c570921f1c2be121e6744a1564b2ce7/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f22ac4a22c570921f1c2be121e6744a1564b2ce7/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=f22ac4a22c570921f1c2be121e6744a1564b2ce7",
        "patch": "@@ -83,11 +83,13 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n         block.clear();\n         if (blocknum == 30) {\n             // At this point we should need to combine 5 buckets to get enough data points\n-            // So estimateFee(1) should fail and estimateFee(2) should return somewhere around\n-            // 8*baserate\n+            // So estimateFee(1,2,3) should fail and estimateFee(4) should return somewhere around\n+            // 8*baserate.  estimateFee(4) %'s are 100,100,100,100,90 = average 98%\n             BOOST_CHECK(mpool.estimateFee(1) == CFeeRate(0));\n-            BOOST_CHECK(mpool.estimateFee(2).GetFeePerK() < 8*baseRate.GetFeePerK() + deltaFee);\n-            BOOST_CHECK(mpool.estimateFee(2).GetFeePerK() > 8*baseRate.GetFeePerK() - deltaFee);\n+            BOOST_CHECK(mpool.estimateFee(2) == CFeeRate(0));\n+            BOOST_CHECK(mpool.estimateFee(3) == CFeeRate(0));\n+            BOOST_CHECK(mpool.estimateFee(4).GetFeePerK() < 8*baseRate.GetFeePerK() + deltaFee);\n+            BOOST_CHECK(mpool.estimateFee(4).GetFeePerK() > 8*baseRate.GetFeePerK() - deltaFee);\n         }\n     }\n \n@@ -96,20 +98,21 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     // Highest feerate is 10*baseRate and gets in all blocks,\n     // second highest feerate is 9*baseRate and gets in 9/10 blocks = 90%,\n     // third highest feerate is 8*base rate, and gets in 8/10 blocks = 80%,\n-    // so estimateFee(1) should return 9*baseRate.\n-    // Third highest feerate has 90% chance of being included by 2 blocks,\n-    // so estimateFee(2) should return 8*baseRate etc...\n+    // so estimateFee(1) should return 10*baseRate.\n+    // Second highest feerate has 100% chance of being included by 2 blocks,\n+    // so estimateFee(2) should return 9*baseRate etc...\n     for (int i = 1; i < 10;i++) {\n         origFeeEst.push_back(mpool.estimateFee(i).GetFeePerK());\n         origPriEst.push_back(mpool.estimatePriority(i));\n         if (i > 1) { // Fee estimates should be monotonically decreasing\n             BOOST_CHECK(origFeeEst[i-1] <= origFeeEst[i-2]);\n             BOOST_CHECK(origPriEst[i-1] <= origPriEst[i-2]);\n         }\n-        BOOST_CHECK(origFeeEst[i-1] < (10-i)*baseRate.GetFeePerK() + deltaFee);\n-        BOOST_CHECK(origFeeEst[i-1] > (10-i)*baseRate.GetFeePerK() - deltaFee);\n-        BOOST_CHECK(origPriEst[i-1] < pow(10,10-i) * basepri + deltaPri);\n-        BOOST_CHECK(origPriEst[i-1] > pow(10,10-i) * basepri - deltaPri);\n+        int mult = 11-i;\n+        BOOST_CHECK(origFeeEst[i-1] < mult*baseRate.GetFeePerK() + deltaFee);\n+        BOOST_CHECK(origFeeEst[i-1] > mult*baseRate.GetFeePerK() - deltaFee);\n+        BOOST_CHECK(origPriEst[i-1] < pow(10,mult) * basepri + deltaPri);\n+        BOOST_CHECK(origPriEst[i-1] > pow(10,mult) * basepri - deltaPri);\n     }\n \n     // Mine 50 more blocks with no transactions happening, estimates shouldn't change\n@@ -140,8 +143,8 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     }\n \n     for (int i = 1; i < 10;i++) {\n-        BOOST_CHECK(mpool.estimateFee(i).GetFeePerK() > origFeeEst[i-1] - deltaFee);\n-        BOOST_CHECK(mpool.estimatePriority(i) > origPriEst[i-1] - deltaPri);\n+        BOOST_CHECK(mpool.estimateFee(i) == CFeeRate(0) || mpool.estimateFee(i).GetFeePerK() > origFeeEst[i-1] - deltaFee);\n+        BOOST_CHECK(mpool.estimatePriority(i) == -1 || mpool.estimatePriority(i) > origPriEst[i-1] - deltaPri);\n     }\n \n     // Mine all those transactions\n@@ -161,9 +164,9 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n         BOOST_CHECK(mpool.estimatePriority(i) > origPriEst[i-1] - deltaPri);\n     }\n \n-    // Mine 100 more blocks where everything is mined every block\n-    // Estimates should be below original estimates (not possible for last estimate)\n-    while (blocknum < 365) {\n+    // Mine 200 more blocks where everything is mined every block\n+    // Estimates should be below original estimates\n+    while (blocknum < 465) {\n         for (int j = 0; j < 10; j++) { // For each fee/pri multiple\n             for (int k = 0; k < 5; k++) { // add 4 fee txs for every priority tx\n                 tx.vin[0].prevout.n = 10000*blocknum+100*j+k;\n@@ -177,7 +180,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n         mpool.removeForBlock(block, ++blocknum, dummyConflicted);\n         block.clear();\n     }\n-    for (int i = 1; i < 9; i++) {\n+    for (int i = 1; i < 10; i++) {\n         BOOST_CHECK(mpool.estimateFee(i).GetFeePerK() < origFeeEst[i-1] - deltaFee);\n         BOOST_CHECK(mpool.estimatePriority(i) < origPriEst[i-1] - deltaPri);\n     }"
      }
    ]
  },
  {
    "sha": "63030514701828a06040413837f5eced9deeee03",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MzAzMDUxNDcwMTgyOGEwNjA0MDQxMzgzN2Y1ZWNlZDlkZWVlZTAz",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-16T20:21:51Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-16T20:33:06Z"
      },
      "message": "EstimateSmart functions consider mempool min fee",
      "tree": {
        "sha": "62be88c1ff41a297a3e1b58ff5ccd68789cb699c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/62be88c1ff41a297a3e1b58ff5ccd68789cb699c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/63030514701828a06040413837f5eced9deeee03",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63030514701828a06040413837f5eced9deeee03",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/63030514701828a06040413837f5eced9deeee03",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63030514701828a06040413837f5eced9deeee03/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f22ac4a22c570921f1c2be121e6744a1564b2ce7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f22ac4a22c570921f1c2be121e6744a1564b2ce7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f22ac4a22c570921f1c2be121e6744a1564b2ce7"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 22,
      "deletions": 8
    },
    "files": [
      {
        "sha": "a0bea3efbd10ca35addb3867c0b62e72c3d28fa3",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63030514701828a06040413837f5eced9deeee03/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63030514701828a06040413837f5eced9deeee03/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=63030514701828a06040413837f5eced9deeee03",
        "patch": "@@ -55,8 +55,6 @@ static const unsigned int DEFAULT_ANCESTOR_SIZE_LIMIT = 101;\n static const unsigned int DEFAULT_DESCENDANT_LIMIT = 25;\n /** Default for -limitdescendantsize, maximum kilobytes of in-mempool descendants */\n static const unsigned int DEFAULT_DESCENDANT_SIZE_LIMIT = 101;\n-/** Default for -maxmempool, maximum megabytes of mempool memory usage */\n-static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;\n /** Default for -mempoolexpiry, expiration time for mempool transactions in hours */\n static const unsigned int DEFAULT_MEMPOOL_EXPIRY = 72;\n /** The maximum size of a blk?????.dat file (since 0.8) */"
      },
      {
        "sha": "e139b06c72ac1ff5ad5cab027574b4b430272475",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63030514701828a06040413837f5eced9deeee03/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63030514701828a06040413837f5eced9deeee03/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=63030514701828a06040413837f5eced9deeee03",
        "patch": "@@ -4,6 +4,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"policy/fees.h\"\n+#include \"policy/policy.h\"\n \n #include \"amount.h\"\n #include \"primitives/transaction.h\"\n@@ -504,7 +505,7 @@ CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget)\n     return CFeeRate(median);\n }\n \n-CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoundAtTarget)\n+CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool *pool)\n {\n     if (answerFoundAtTarget)\n         *answerFoundAtTarget = confTarget;\n@@ -520,6 +521,11 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoun\n     if (answerFoundAtTarget)\n         *answerFoundAtTarget = confTarget - 1;\n \n+    // If mempool is limiting txs , return at least the min fee from the mempool\n+    CAmount minPoolFee = pool->GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n+    if (minPoolFee > 0 && minPoolFee > median)\n+        return CFeeRate(minPoolFee);\n+\n     if (median < 0)\n         return CFeeRate(0);\n \n@@ -535,14 +541,19 @@ double CBlockPolicyEstimator::estimatePriority(int confTarget)\n     return priStats.EstimateMedianVal(confTarget, SUFFICIENT_PRITXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n }\n \n-double CBlockPolicyEstimator::estimateSmartPriority(int confTarget, int *answerFoundAtTarget)\n+double CBlockPolicyEstimator::estimateSmartPriority(int confTarget, int *answerFoundAtTarget, const CTxMemPool *pool)\n {\n     if (answerFoundAtTarget)\n         *answerFoundAtTarget = confTarget;\n     // Return failure if trying to analyze a target we're not tracking\n     if (confTarget <= 0 || (unsigned int)confTarget > priStats.GetMaxConfirms())\n         return -1;\n \n+    // If mempool is limiting txs, no priority txs are allowed\n+    CAmount minPoolFee = pool->GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n+    if (minPoolFee > 0)\n+        return INF_PRIORITY;\n+\n     double median = -1;\n     while (median < 0 && (unsigned int)confTarget <= priStats.GetMaxConfirms()) {\n         median = priStats.EstimateMedianVal(confTarget++, SUFFICIENT_PRITXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n@@ -551,6 +562,7 @@ double CBlockPolicyEstimator::estimateSmartPriority(int confTarget, int *answerF\n     if (answerFoundAtTarget)\n         *answerFoundAtTarget = confTarget - 1;\n \n+\n     return median;\n }\n "
      },
      {
        "sha": "59e6bfbc06968d98b5f0e2973f087c17190bc9de",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63030514701828a06040413837f5eced9deeee03/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63030514701828a06040413837f5eced9deeee03/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=63030514701828a06040413837f5eced9deeee03",
        "patch": "@@ -15,6 +15,7 @@\n class CAutoFile;\n class CFeeRate;\n class CTxMemPoolEntry;\n+class CTxMemPool;\n \n /** \\class CBlockPolicyEstimator\n  * The BlockPolicyEstimator is used for estimating the fee or priority needed\n@@ -246,7 +247,7 @@ class CBlockPolicyEstimator\n      *  confTarget blocks. If no answer can be given at confTarget, return an\n      *  estimate at the lowest target where one can be given.\n      */\n-    CFeeRate estimateSmartFee(int confTarget, int *answerFoundAtTarget);\n+    CFeeRate estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool *pool);\n \n     /** Return a priority estimate */\n     double estimatePriority(int confTarget);\n@@ -255,7 +256,7 @@ class CBlockPolicyEstimator\n      *  confTarget blocks. If no answer can be given at confTarget, return an\n      *  estimate at the lowest target where one can be given.\n      */\n-    double estimateSmartPriority(int confTarget, int *answerFoundAtTarget);\n+    double estimateSmartPriority(int confTarget, int *answerFoundAtTarget, const CTxMemPool *pool);\n \n     /** Write estimation data to a file */\n     void Write(CAutoFile& fileout);"
      },
      {
        "sha": "c8d2c1a924df1a0cd15ba669fdfc6669e9da1542",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63030514701828a06040413837f5eced9deeee03/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63030514701828a06040413837f5eced9deeee03/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=63030514701828a06040413837f5eced9deeee03",
        "patch": "@@ -25,6 +25,8 @@ static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n static const unsigned int MAX_P2SH_SIGOPS = 15;\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static const unsigned int MAX_STANDARD_TX_SIGOPS = MAX_BLOCK_SIGOPS/5;\n+/** Default for -maxmempool, maximum megabytes of mempool memory usage */\n+static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;\n /**\n  * Standard script verification flags that standard transactions will comply\n  * with. However scripts violating these flags may still be present in valid"
      },
      {
        "sha": "ab7901d811aa62cb1e37d2ed8aea3ff748f3f334",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63030514701828a06040413837f5eced9deeee03/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63030514701828a06040413837f5eced9deeee03/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=63030514701828a06040413837f5eced9deeee03",
        "patch": "@@ -10,6 +10,7 @@\n #include \"coins.h\"\n #include \"consensus/validation.h\"\n #include \"main.h\"\n+#include \"policy/policy.h\"\n #include \"primitives/transaction.h\"\n #include \"rpcserver.h\"\n #include \"streams.h\""
      },
      {
        "sha": "58b8448bb6f7c2acf6c162f04a3c74f1173b2467",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63030514701828a06040413837f5eced9deeee03/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63030514701828a06040413837f5eced9deeee03/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=63030514701828a06040413837f5eced9deeee03",
        "patch": "@@ -704,7 +704,7 @@ CFeeRate CTxMemPool::estimateFee(int nBlocks) const\n CFeeRate CTxMemPool::estimateSmartFee(int nBlocks, int *answerFoundAtBlocks) const\n {\n     LOCK(cs);\n-    return minerPolicyEstimator->estimateSmartFee(nBlocks, answerFoundAtBlocks);\n+    return minerPolicyEstimator->estimateSmartFee(nBlocks, answerFoundAtBlocks, this);\n }\n double CTxMemPool::estimatePriority(int nBlocks) const\n {\n@@ -714,7 +714,7 @@ double CTxMemPool::estimatePriority(int nBlocks) const\n double CTxMemPool::estimateSmartPriority(int nBlocks, int *answerFoundAtBlocks) const\n {\n     LOCK(cs);\n-    return minerPolicyEstimator->estimateSmartPriority(nBlocks, answerFoundAtBlocks);\n+    return minerPolicyEstimator->estimateSmartPriority(nBlocks, answerFoundAtBlocks, this);\n }\n \n bool"
      }
    ]
  },
  {
    "sha": "e93a236d7a466baa14c3320349f27b8750c956c0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOTNhMjM2ZDdhNDY2YmFhMTRjMzMyMDM0OWYyN2I4NzUwYzk1NmMw",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-16T20:23:33Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-16T20:33:06Z"
      },
      "message": "add estimateSmartFee to the unit test",
      "tree": {
        "sha": "e463c4f04a9f736b0aea23163e4c3f8099e50381",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e463c4f04a9f736b0aea23163e4c3f8099e50381"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e93a236d7a466baa14c3320349f27b8750c956c0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e93a236d7a466baa14c3320349f27b8750c956c0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e93a236d7a466baa14c3320349f27b8750c956c0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e93a236d7a466baa14c3320349f27b8750c956c0/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "63030514701828a06040413837f5eced9deeee03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63030514701828a06040413837f5eced9deeee03",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/63030514701828a06040413837f5eced9deeee03"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 20,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e8765400d38108ab5b5182bd2b21622f636a2d81",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e93a236d7a466baa14c3320349f27b8750c956c0/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e93a236d7a466baa14c3320349f27b8750c956c0/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=e93a236d7a466baa14c3320349f27b8750c956c0",
        "patch": "@@ -90,6 +90,11 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n             BOOST_CHECK(mpool.estimateFee(3) == CFeeRate(0));\n             BOOST_CHECK(mpool.estimateFee(4).GetFeePerK() < 8*baseRate.GetFeePerK() + deltaFee);\n             BOOST_CHECK(mpool.estimateFee(4).GetFeePerK() > 8*baseRate.GetFeePerK() - deltaFee);\n+            int answerFound;\n+            BOOST_CHECK(mpool.estimateSmartFee(1, &answerFound) == mpool.estimateFee(4) && answerFound == 4);\n+            BOOST_CHECK(mpool.estimateSmartFee(3, &answerFound) == mpool.estimateFee(4) && answerFound == 4);\n+            BOOST_CHECK(mpool.estimateSmartFee(4, &answerFound) == mpool.estimateFee(4) && answerFound == 4);\n+            BOOST_CHECK(mpool.estimateSmartFee(8, &answerFound) == mpool.estimateFee(8) && answerFound == 8);\n         }\n     }\n \n@@ -142,9 +147,12 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n         mpool.removeForBlock(block, ++blocknum, dummyConflicted);\n     }\n \n+    int answerFound;\n     for (int i = 1; i < 10;i++) {\n         BOOST_CHECK(mpool.estimateFee(i) == CFeeRate(0) || mpool.estimateFee(i).GetFeePerK() > origFeeEst[i-1] - deltaFee);\n+        BOOST_CHECK(mpool.estimateSmartFee(i, &answerFound).GetFeePerK() > origFeeEst[answerFound-1] - deltaFee);\n         BOOST_CHECK(mpool.estimatePriority(i) == -1 || mpool.estimatePriority(i) > origPriEst[i-1] - deltaPri);\n+        BOOST_CHECK(mpool.estimateSmartPriority(i, &answerFound) > origPriEst[answerFound-1] - deltaPri);\n     }\n \n     // Mine all those transactions\n@@ -184,6 +192,18 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n         BOOST_CHECK(mpool.estimateFee(i).GetFeePerK() < origFeeEst[i-1] - deltaFee);\n         BOOST_CHECK(mpool.estimatePriority(i) < origPriEst[i-1] - deltaPri);\n     }\n+\n+    // Test that if the mempool is limited, estimateSmartFee won't return a value below the mempool min fee\n+    // and that estimateSmartPriority returns essentially an infinite value\n+    mpool.addUnchecked(tx.GetHash(),  CTxMemPoolEntry(tx, feeV[0][5], GetTime(), priV[1][5], blocknum, mpool.HasNoInputsOf(tx)));\n+    // evict that transaction which should set a mempool min fee of minRelayTxFee + feeV[0][5]\n+    mpool.TrimToSize(1);\n+    BOOST_CHECK(mpool.GetMinFee(1).GetFeePerK() > feeV[0][5]);\n+    for (int i = 1; i < 10; i++) {\n+        BOOST_CHECK(mpool.estimateSmartFee(i).GetFeePerK() >= mpool.estimateFee(i).GetFeePerK());\n+        BOOST_CHECK(mpool.estimateSmartFee(i).GetFeePerK() >= mpool.GetMinFee(1).GetFeePerK());\n+        BOOST_CHECK(mpool.estimateSmartPriority(i) == INF_PRIORITY);\n+    }\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "56106a3300f844afcadf6dce50d5ef1d337f50b9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NjEwNmEzMzAwZjg0NGFmY2FkZjZkY2U1MGQ1ZWYxZDMzN2Y1MGI5",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-16T20:26:57Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-16T20:42:31Z"
      },
      "message": "Expose RPC calls for estimatesmart functions\n\nAlso add testing for estimatesmartfee in smartfees.py",
      "tree": {
        "sha": "f6a0f45ee2744deac348d981b127c4ab5c7f1ee8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6a0f45ee2744deac348d981b127c4ab5c7f1ee8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/56106a3300f844afcadf6dce50d5ef1d337f50b9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56106a3300f844afcadf6dce50d5ef1d337f50b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/56106a3300f844afcadf6dce50d5ef1d337f50b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56106a3300f844afcadf6dce50d5ef1d337f50b9/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e93a236d7a466baa14c3320349f27b8750c956c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e93a236d7a466baa14c3320349f27b8750c956c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e93a236d7a466baa14c3320349f27b8750c956c0"
      }
    ],
    "stats": {
      "total": 130,
      "additions": 108,
      "deletions": 22
    },
    "files": [
      {
        "sha": "ecfffc1b45b432eefcb0e66bc3f3db7b8e8a44b0",
        "filename": "qa/rpc-tests/smartfees.py",
        "status": "modified",
        "additions": 30,
        "deletions": 22,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56106a3300f844afcadf6dce50d5ef1d337f50b9/qa/rpc-tests/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56106a3300f844afcadf6dce50d5ef1d337f50b9/qa/rpc-tests/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/smartfees.py?ref=56106a3300f844afcadf6dce50d5ef1d337f50b9",
        "patch": "@@ -120,15 +120,26 @@ def check_estimates(node, fees_seen, max_invalid, print_estimates = True):\n         last_e = e\n     valid_estimate = False\n     invalid_estimates = 0\n-    for e in all_estimates:\n+    for i,e in enumerate(all_estimates): # estimate is for i+1\n         if e >= 0:\n             valid_estimate = True\n+            # estimatesmartfee should return the same result\n+            assert_equal(node.estimatesmartfee(i+1)[\"feerate\"], e)\n+\n         else:\n             invalid_estimates += 1\n-        # Once we're at a high enough confirmation count that we can give an estimate\n-        # We should have estimates for all higher confirmation counts\n-        if valid_estimate and e < 0:\n-            raise AssertionError(\"Invalid estimate appears at higher confirm count than valid estimate\")\n+\n+            # estimatesmartfee should still be valid\n+            approx_estimate = node.estimatesmartfee(i+1)[\"feerate\"]\n+            answer_found = node.estimatesmartfee(i+1)[\"blocks\"]\n+            assert(approx_estimate > 0)\n+            assert(answer_found > i+1)\n+\n+            # Once we're at a high enough confirmation count that we can give an estimate\n+            # We should have estimates for all higher confirmation counts\n+            if valid_estimate:\n+                raise AssertionError(\"Invalid estimate appears at higher confirm count than valid estimate\")\n+\n     # Check on the expected number of different confirmation counts\n     # that we might not have valid estimates for\n     if invalid_estimates > max_invalid:\n@@ -184,13 +195,13 @@ def setup_network(self):\n         # NOTE: the CreateNewBlock code starts counting block size at 1,000 bytes,\n         # (17k is room enough for 110 or so transactions)\n         self.nodes.append(start_node(1, self.options.tmpdir,\n-                                     [\"-blockprioritysize=1500\", \"-blockmaxsize=18000\",\n+                                     [\"-blockprioritysize=1500\", \"-blockmaxsize=17000\",\n                                       \"-maxorphantx=1000\", \"-relaypriority=0\", \"-debug=estimatefee\"]))\n         connect_nodes(self.nodes[1], 0)\n \n         # Node2 is a stingy miner, that\n-        # produces too small blocks (room for only 70 or so transactions)\n-        node2args = [\"-blockprioritysize=0\", \"-blockmaxsize=12000\", \"-maxorphantx=1000\", \"-relaypriority=0\"]\n+        # produces too small blocks (room for only 55 or so transactions)\n+        node2args = [\"-blockprioritysize=0\", \"-blockmaxsize=8000\", \"-maxorphantx=1000\", \"-relaypriority=0\"]\n \n         self.nodes.append(start_node(2, self.options.tmpdir, node2args))\n         connect_nodes(self.nodes[0], 2)\n@@ -229,22 +240,19 @@ def run_test(self):\n         self.fees_per_kb = []\n         self.memutxo = []\n         self.confutxo = self.txouts # Start with the set of confirmed txouts after splitting\n-        print(\"Checking estimates for 1/2/3/6/15/25 blocks\")\n-        print(\"Creating transactions and mining them with a huge block size\")\n-        # Create transactions and mine 20 big blocks with node 0 such that the mempool is always emptied\n-        self.transact_and_mine(30, self.nodes[0])\n-        check_estimates(self.nodes[1], self.fees_per_kb, 1)\n+        print(\"Will output estimates for 1/2/3/6/15/25 blocks\")\n \n-        print(\"Creating transactions and mining them with a block size that can't keep up\")\n-        # Create transactions and mine 30 small blocks with node 2, but create txs faster than we can mine\n-        self.transact_and_mine(20, self.nodes[2])\n-        check_estimates(self.nodes[1], self.fees_per_kb, 3)\n+        for i in xrange(2):\n+            print(\"Creating transactions and mining them with a block size that can't keep up\")\n+            # Create transactions and mine 10 small blocks with node 2, but create txs faster than we can mine\n+            self.transact_and_mine(10, self.nodes[2])\n+            check_estimates(self.nodes[1], self.fees_per_kb, 14)\n \n-        print(\"Creating transactions and mining them at a block size that is just big enough\")\n-        # Generate transactions while mining 40 more blocks, this time with node1\n-        # which mines blocks with capacity just above the rate that transactions are being created\n-        self.transact_and_mine(40, self.nodes[1])\n-        check_estimates(self.nodes[1], self.fees_per_kb, 2)\n+            print(\"Creating transactions and mining them at a block size that is just big enough\")\n+            # Generate transactions while mining 10 more blocks, this time with node1\n+            # which mines blocks with capacity just above the rate that transactions are being created\n+            self.transact_and_mine(10, self.nodes[1])\n+            check_estimates(self.nodes[1], self.fees_per_kb, 2)\n \n         # Finish by mining a normal-sized block:\n         while len(self.nodes[1].getrawmempool()) > 0:"
      },
      {
        "sha": "cab5819017e9b897b4a8c61c01462ae6eb3bdf6a",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56106a3300f844afcadf6dce50d5ef1d337f50b9/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56106a3300f844afcadf6dce50d5ef1d337f50b9/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=56106a3300f844afcadf6dce50d5ef1d337f50b9",
        "patch": "@@ -96,6 +96,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getrawmempool\", 0 },\n     { \"estimatefee\", 0 },\n     { \"estimatepriority\", 0 },\n+    { \"estimatesmartfee\", 0 },\n+    { \"estimatesmartpriority\", 0 },\n     { \"prioritisetransaction\", 1 },\n     { \"prioritisetransaction\", 2 },\n     { \"setban\", 2 },"
      },
      {
        "sha": "38f3609224e1c25acf675ab011b620b2835916a7",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 72,
        "deletions": 0,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56106a3300f844afcadf6dce50d5ef1d337f50b9/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56106a3300f844afcadf6dce50d5ef1d337f50b9/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=56106a3300f844afcadf6dce50d5ef1d337f50b9",
        "patch": "@@ -726,3 +726,75 @@ UniValue estimatepriority(const UniValue& params, bool fHelp)\n \n     return mempool.estimatePriority(nBlocks);\n }\n+\n+UniValue estimatesmartfee(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"estimatesmartfee nblocks\\n\"\n+            \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n+            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n+            \"confirmation within nblocks blocks if possible and return the number of blocks\\n\"\n+            \"for which the estimate is valid.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. nblocks     (numeric)\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"feerate\\\" : x.x,     (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"  \\\"blocks\\\" : n         (numeric) block number where estimate was found\\n\"\n+            \"}\\n\"\n+            \"\\n\"\n+            \"A negative value is returned if not enough transactions and blocks\\n\"\n+            \"have been observed to make an estimate for any number of blocks.\\n\"\n+            \"However it will not return a value below the mempool reject fee.\\n\"\n+            \"\\nExample:\\n\"\n+            + HelpExampleCli(\"estimatesmartfee\", \"6\")\n+            );\n+\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VNUM));\n+\n+    int nBlocks = params[0].get_int();\n+\n+    UniValue result(UniValue::VOBJ);\n+    int answerFound;\n+    CFeeRate feeRate = mempool.estimateSmartFee(nBlocks, &answerFound);\n+    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n+    result.push_back(Pair(\"blocks\", answerFound));\n+    return result;\n+}\n+\n+UniValue estimatesmartpriority(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"estimatesmartpriority nblocks\\n\"\n+            \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n+            \"\\nEstimates the approximate priority a zero-fee transaction needs to begin\\n\"\n+            \"confirmation within nblocks blocks if possible and return the number of blocks\\n\"\n+            \"for which the estimate is valid.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. nblocks     (numeric)\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"priority\\\" : x.x,    (numeric) estimated priority\\n\"\n+            \"  \\\"blocks\\\" : n         (numeric) block number where estimate was found\\n\"\n+            \"}\\n\"\n+            \"\\n\"\n+            \"A negative value is returned if not enough transactions and blocks\\n\"\n+            \"have been observed to make an estimate for any number of blocks.\\n\"\n+            \"However if the mempool reject fee is set it will return 1e9 * MAX_MONEY.\\n\"\n+            \"\\nExample:\\n\"\n+            + HelpExampleCli(\"estimatesmartpriority\", \"6\")\n+            );\n+\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VNUM));\n+\n+    int nBlocks = params[0].get_int();\n+\n+    UniValue result(UniValue::VOBJ);\n+    int answerFound;\n+    double priority = mempool.estimateSmartPriority(nBlocks, &answerFound);\n+    result.push_back(Pair(\"priority\", priority));\n+    result.push_back(Pair(\"blocks\", answerFound));\n+    return result;\n+}"
      },
      {
        "sha": "83d2c2d5037fcd054f00941a5dbf6e55c35aa1ae",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56106a3300f844afcadf6dce50d5ef1d337f50b9/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56106a3300f844afcadf6dce50d5ef1d337f50b9/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=56106a3300f844afcadf6dce50d5ef1d337f50b9",
        "patch": "@@ -319,6 +319,8 @@ static const CRPCCommand vRPCCommands[] =\n     { \"util\",               \"verifymessage\",          &verifymessage,          true  },\n     { \"util\",               \"estimatefee\",            &estimatefee,            true  },\n     { \"util\",               \"estimatepriority\",       &estimatepriority,       true  },\n+    { \"util\",               \"estimatesmartfee\",       &estimatesmartfee,       true  },\n+    { \"util\",               \"estimatesmartpriority\",  &estimatesmartpriority,  true  },\n \n     /* Not shown in help */\n     { \"hidden\",             \"invalidateblock\",        &invalidateblock,        true  },"
      },
      {
        "sha": "fc88f82be8b5688b7ab7462d83866b2e66a18ac6",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56106a3300f844afcadf6dce50d5ef1d337f50b9/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56106a3300f844afcadf6dce50d5ef1d337f50b9/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=56106a3300f844afcadf6dce50d5ef1d337f50b9",
        "patch": "@@ -193,6 +193,8 @@ extern UniValue getblocktemplate(const UniValue& params, bool fHelp);\n extern UniValue submitblock(const UniValue& params, bool fHelp);\n extern UniValue estimatefee(const UniValue& params, bool fHelp);\n extern UniValue estimatepriority(const UniValue& params, bool fHelp);\n+extern UniValue estimatesmartfee(const UniValue& params, bool fHelp);\n+extern UniValue estimatesmartpriority(const UniValue& params, bool fHelp);\n \n extern UniValue getnewaddress(const UniValue& params, bool fHelp); // in rpcwallet.cpp\n extern UniValue getaccountaddress(const UniValue& params, bool fHelp);"
      }
    ]
  },
  {
    "sha": "0a547d2d550153b94837093249e5c870e45191b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYTU0N2QyZDU1MDE1M2I5NDgzNzA5MzI0OWU1Yzg3MGU0NTE5MWI4",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-17T00:34:42Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-17T00:34:51Z"
      },
      "message": "Merge pull request #7023\n\n4d29032 Fixed integer comparison warning. (Eric Lombrozo)",
      "tree": {
        "sha": "e19d29928c1dac5dfc29fb89dabb31fd1efb44ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e19d29928c1dac5dfc29fb89dabb31fd1efb44ed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a547d2d550153b94837093249e5c870e45191b8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCAAGBQJWSnYrAAoJEOq1r5TZ6avnVk8P/3SOVn2fQE4Xh6EHknVCrNpQ\n6AfJJH7eJzv/fnKp6FPnvQEkuF9jve6uRMuNcok8bxzIYo+hwPIOo63SAUhC6rWP\n9arUgt+2lgKnMHHwb1kBHzlu4QOTFg/ITBPZKoDYWXtczCUCnqBbzXQVr3Yg06kY\nmSKNfSnufhIyZtb6pBjpQTAQxIXOLQG6Hhq3/8G8OlTrqUkESqDuuqXM5mdXCB73\n/MStJUJUi8yRSvV8PFsg3xZIP+3stS/it6fItH52eY6s1wVFgyXkDz0upSvodzAJ\nFihpdK0KBTmbZB7G8KF5nb1Yrgmb5dPU4Fqyca838pWHRebjCoCFA3MoW1v6aJp/\nfq+S9EbHlTneQ5JoZezzwmk89nqkG7IyGnTBSNHaXyRBQptvLLPZMZJOZCdzUgT3\nHr6G+ADDTYpn6KH89n1AHWG/npRvybaTO6QM63v5tMg/0EP5qjEN1XF/65E6n+9h\nO+QFuX3/5G56pfLQJvVKURo71UoBtizO4/k4mryGDLiq9gQjis0loMgiKMpNIBWq\nUuol75RtoQ6/svF3/zT9hVBoe4R7jCLJ7l9MMVV5VqMzmhYy9PixXInsgJ+zUOCu\nV3VzlfE4p+t06Lu0GcNsaT6CVe1KE4K9bpgvvHiDIL3a8yspo4sSwTFizewvZThM\nd+d1RgS5ugrB1fCNGWJ4\n=Z5K3\n-----END PGP SIGNATURE-----",
        "payload": "tree e19d29928c1dac5dfc29fb89dabb31fd1efb44ed\nparent e54ebbf6009716a7abcd4d8d3f7bd910e88decdc\nparent 4d29032a6437eaa147a69ce2857fb243bf3a1e49\nauthor Gregory Maxwell <greg@xiph.org> 1447720482 -0800\ncommitter Gregory Maxwell <greg@xiph.org> 1447720491 -0800\n\nMerge pull request #7023\n\n4d29032 Fixed integer comparison warning. (Eric Lombrozo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a547d2d550153b94837093249e5c870e45191b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0a547d2d550153b94837093249e5c870e45191b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a547d2d550153b94837093249e5c870e45191b8/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e54ebbf6009716a7abcd4d8d3f7bd910e88decdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc"
      },
      {
        "sha": "4d29032a6437eaa147a69ce2857fb243bf3a1e49",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d29032a6437eaa147a69ce2857fb243bf3a1e49",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4d29032a6437eaa147a69ce2857fb243bf3a1e49"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5d053e7813eb62beda651972e8e764cdc8e0fada",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a547d2d550153b94837093249e5c870e45191b8/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a547d2d550153b94837093249e5c870e45191b8/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0a547d2d550153b94837093249e5c870e45191b8",
        "patch": "@@ -2577,7 +2577,7 @@ bool FindBlockPos(CValidationState &state, CDiskBlockPos &pos, unsigned int nAdd\n         pos.nPos = vinfoBlockFile[nFile].nSize;\n     }\n \n-    if (nFile != nLastBlockFile) {\n+    if ((int)nFile != nLastBlockFile) {\n         if (!fKnown) {\n             LogPrintf(\"Leaving block file %i: %s\\n\", nFile, vinfoBlockFile[nFile].ToString());\n         }"
      }
    ]
  },
  {
    "sha": "972bf9c529877e6e90691de5e0189492f2f3eb89",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NzJiZjljNTI5ODc3ZTZlOTA2OTFkZTVlMDE4OTQ5MmYyZjNlYjg5",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-17T00:37:53Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-17T00:39:33Z"
      },
      "message": "Merge pull request #6999\n\nf6d9d5e add (max)uploadtarget infos to getnettotals RPC help (Jonas Schnelli)",
      "tree": {
        "sha": "eed14b19f6d69c604959fb64046ec5b219095ba4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eed14b19f6d69c604959fb64046ec5b219095ba4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/972bf9c529877e6e90691de5e0189492f2f3eb89",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCAAGBQJWSndGAAoJEOq1r5TZ6avnNAkP/j2nAhSppzQ7N2mnTzqECNsR\nZp1c3WDX0q1o8NIo5SuvjyYfgkhBkAIeRe+JF5Bv4KQCxxXe0EsTQiZy2GVP3vk+\n7dg4sYBjbp9TXSj950JBF/86aV41j88H6EJC1CZBtqPfb4+VjLSgAIUkeh8qVUfU\na+EgCMs4hVGxeyZjLC9X5i5nSyPsLXAcJMw89+7Wd1HsI7NBFopLeG8pRRYrhZe/\n5LPJK4NZbud7dECM3dT8zhiF0SyGodWTbOc0rcBWGA2tQpTzszuPXgoYUKlmdc0g\nr1pC2BfD8qmSr4bH/vV/+bFTs1fWk5MQL5kXjbGVMn0mN4jr3Yw0EuzexQjedILW\nyzjmQKkgNuRf95r92yWXMoNR4uvElyK9VncBvXbF7P/IWgRd0FGoK2cAIUyvyQF5\n2nKrRsn3sgCEWqiOpKRl9uN1pisaWxdLC2V9gQOybkxZgg1pEdwy9M6yK6cLbxMK\nYzmqClwYDXx7UY/jJgveF7Y1iM4CUW0aJMBABW2QS49ZUfYIImFP7XZIMFLFpnVv\njQ6vaKYymFcFDDd93Co5/vCmijB/ctumBHLtSwG+gPQpXwQ3+9RxKc0xVuIzpOJh\n0pD/7sgt0Vhfwnzo/h6Qkk8H3pDh49GQJFi0/GrlNP7Dj+qFCsDs1KxarVORisz3\nOcx18bDJESJFKSz67OJh\n=ZeYm\n-----END PGP SIGNATURE-----",
        "payload": "tree eed14b19f6d69c604959fb64046ec5b219095ba4\nparent 0a547d2d550153b94837093249e5c870e45191b8\nparent f6d9d5ee75c9a2100fbf14c5a1e2211f973ac6e1\nauthor Gregory Maxwell <greg@xiph.org> 1447720673 -0800\ncommitter Gregory Maxwell <greg@xiph.org> 1447720773 -0800\n\nMerge pull request #6999\n\nf6d9d5e add (max)uploadtarget infos to getnettotals RPC help (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/972bf9c529877e6e90691de5e0189492f2f3eb89",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/972bf9c529877e6e90691de5e0189492f2f3eb89",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/972bf9c529877e6e90691de5e0189492f2f3eb89/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0a547d2d550153b94837093249e5c870e45191b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a547d2d550153b94837093249e5c870e45191b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a547d2d550153b94837093249e5c870e45191b8"
      },
      {
        "sha": "f6d9d5ee75c9a2100fbf14c5a1e2211f973ac6e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6d9d5ee75c9a2100fbf14c5a1e2211f973ac6e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f6d9d5ee75c9a2100fbf14c5a1e2211f973ac6e1"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 10,
      "deletions": 1
    },
    "files": [
      {
        "sha": "89150106494ac99ae372ef2e877122e38b397ae4",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/972bf9c529877e6e90691de5e0189492f2f3eb89/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/972bf9c529877e6e90691de5e0189492f2f3eb89/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=972bf9c529877e6e90691de5e0189492f2f3eb89",
        "patch": "@@ -368,7 +368,16 @@ UniValue getnettotals(const UniValue& params, bool fHelp)\n             \"{\\n\"\n             \"  \\\"totalbytesrecv\\\": n,   (numeric) Total bytes received\\n\"\n             \"  \\\"totalbytessent\\\": n,   (numeric) Total bytes sent\\n\"\n-            \"  \\\"timemillis\\\": t        (numeric) Total cpu time\\n\"\n+            \"  \\\"timemillis\\\": t,       (numeric) Total cpu time\\n\"\n+            \"  \\\"uploadtarget\\\":\\n\"\n+            \"  {\\n\"\n+            \"    \\\"timeframe\\\": n,                         (numeric) Length of the measuring timeframe in seconds\\n\"\n+            \"    \\\"target\\\": n,                            (numeric) Target in bytes\\n\"\n+            \"    \\\"target_reached\\\": true|false,           (boolean) True if target is reached\\n\"\n+            \"    \\\"serve_historical_blocks\\\": true|false,  (boolean) True if serving historical blocks\\n\"\n+            \"    \\\"bytes_left_in_cycle\\\": t,               (numeric) Bytes left in current time cycle\\n\"\n+            \"    \\\"time_left_in_cycle\\\": t                 (numeric) Seconds left in current time cycle\\n\"\n+            \"  }\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getnettotals\", \"\")"
      }
    ]
  },
  {
    "sha": "87ee0e2dbc1201a5104d524ace32c0134ead019f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4N2VlMGUyZGJjMTIwMWE1MTA0ZDUyNGFjZTMyYzAxMzRlYWQwMTlm",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-17T00:54:11Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-17T01:00:11Z"
      },
      "message": "Merge pull request #6986\n\n6bc9e40 Chainparams: Explicit CChainParams arg for miner: (Jorge Tim\u00f3n)\n598e494 Chainparams: Explicit CChainParams arg for main (pre miner): (Jorge Tim\u00f3n)",
      "tree": {
        "sha": "963d972d2e698da6860862612a5dbebd7f7a23d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/963d972d2e698da6860862612a5dbebd7f7a23d9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87ee0e2dbc1201a5104d524ace32c0134ead019f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCAAGBQJWSnwbAAoJEOq1r5TZ6avnNQUP/0ta0Ntvdhhc9swo8VOUEx7Z\nFJsAW6QNbX7w5XuIaGhesTjOnZayaMzE1qIwqYjdG/WReJzCjLUy2qUck+RRDCFu\nY2iW4oWXT54A3isWiuGDosbnVCiuGe5E2rX6S8LAUWhH1RZ+QeNcVpwBsWR7knja\nanSI4+ieGBR0AoftSDPXBlnsSA2bIrWBlgnL7j8HVlkBjQ0c7jYgH3kpt9En8fK7\ndIBV0dQFIqwrwQf5niR/kuI2NFFQqqj2xRp+mT4tNcfTCp/qe9NxazLZb7tc4OjL\nVCTMhGHiAnBA5j2wnIwpv5sgYlUcxl2bcvT+3HKlmQfGyXsB42AjteHXBVieoGRJ\nSCrzQQULwcDZoKFb3o2B3T6i7qhqOKvgoYMQMNazG6ziSGgicFPQjlNKDC+Bm9IG\nfJDMntZDjmOQabX9aAaCdd3nBbOT6+y5fQtGEDAXK/txGslm8SSaeWXcTnr4B/P6\n7pp+3dszbgyuRT8uBp8Xj2T2j9hhlj3u8i8j4yBE5Pdqm0yE2b/I3NfFr8QS4BJp\n0rZZIIvzVq1+mWBzX0uq8ycTYndYj3twx3yD3xlcKzMhjJcyaN5ANpGdyKwMtz+W\nAG3XGkBwdBEV0A5KEXx28u5dZAAlhSGk+OSLNvKyhxyPTpbc9gMnivM3z0aqHtVP\nPlZe6yvE00efOXu0PhOG\n=AXXA\n-----END PGP SIGNATURE-----",
        "payload": "tree 963d972d2e698da6860862612a5dbebd7f7a23d9\nparent 972bf9c529877e6e90691de5e0189492f2f3eb89\nparent 6bc9e4056b2bf4ff6549ed4d6d9ccf2fa822fef4\nauthor Gregory Maxwell <greg@xiph.org> 1447721651 -0800\ncommitter Gregory Maxwell <greg@xiph.org> 1447722011 -0800\n\nMerge pull request #6986\n\n6bc9e40 Chainparams: Explicit CChainParams arg for miner: (Jorge Tim\u00f3n)\n598e494 Chainparams: Explicit CChainParams arg for main (pre miner): (Jorge Tim\u00f3n)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87ee0e2dbc1201a5104d524ace32c0134ead019f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/87ee0e2dbc1201a5104d524ace32c0134ead019f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87ee0e2dbc1201a5104d524ace32c0134ead019f/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "972bf9c529877e6e90691de5e0189492f2f3eb89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/972bf9c529877e6e90691de5e0189492f2f3eb89",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/972bf9c529877e6e90691de5e0189492f2f3eb89"
      },
      {
        "sha": "6bc9e4056b2bf4ff6549ed4d6d9ccf2fa822fef4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bc9e4056b2bf4ff6549ed4d6d9ccf2fa822fef4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6bc9e4056b2bf4ff6549ed4d6d9ccf2fa822fef4"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 41,
      "deletions": 41
    },
    "files": [
      {
        "sha": "cd84e7747acd1dba9ef0e71b1dc5c691fa27c38d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87ee0e2dbc1201a5104d524ace32c0134ead019f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87ee0e2dbc1201a5104d524ace32c0134ead019f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=87ee0e2dbc1201a5104d524ace32c0134ead019f",
        "patch": "@@ -1603,7 +1603,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     scheduler.scheduleEvery(f, nPowTargetSpacing);\n \n     // Generate coins in the background\n-    GenerateBitcoins(GetBoolArg(\"-gen\", false), GetArg(\"-genproclimit\", DEFAULT_GENERATE_THREADS), Params());\n+    GenerateBitcoins(GetBoolArg(\"-gen\", false), GetArg(\"-genproclimit\", DEFAULT_GENERATE_THREADS), chainparams);\n \n     // ********************************************************* Step 12: finished\n "
      },
      {
        "sha": "a1f326fb13c2c08ea3688abcd597c8e717023a22",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87ee0e2dbc1201a5104d524ace32c0134ead019f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87ee0e2dbc1201a5104d524ace32c0134ead019f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=87ee0e2dbc1201a5104d524ace32c0134ead019f",
        "patch": "@@ -2927,9 +2927,8 @@ static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned\n }\n \n \n-bool ProcessNewBlock(CValidationState &state, const CNode* pfrom, const CBlock* pblock, bool fForceProcessing, CDiskBlockPos *dbp)\n+bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, const CNode* pfrom, const CBlock* pblock, bool fForceProcessing, CDiskBlockPos* dbp)\n {\n-    const CChainParams& chainparams = Params();\n     // Preliminary checks\n     bool checked = CheckBlock(*pblock, state);\n \n@@ -2958,9 +2957,8 @@ bool ProcessNewBlock(CValidationState &state, const CNode* pfrom, const CBlock*\n     return true;\n }\n \n-bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex * const pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot)\n+bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n-    const CChainParams& chainparams = Params();\n     AssertLockHeld(cs_main);\n     assert(pindexPrev && pindexPrev == chainActive.Tip());\n     if (fCheckpointsEnabled && !CheckIndexAgainstCheckpoint(pindexPrev, state, chainparams, block.GetHash()))\n@@ -3500,7 +3498,7 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n                 // process in case the block isn't known yet\n                 if (mapBlockIndex.count(hash) == 0 || (mapBlockIndex[hash]->nStatus & BLOCK_HAVE_DATA) == 0) {\n                     CValidationState state;\n-                    if (ProcessNewBlock(state, NULL, &block, true, dbp))\n+                    if (ProcessNewBlock(state, chainparams, NULL, &block, true, dbp))\n                         nLoaded++;\n                     if (state.IsError())\n                         break;\n@@ -3522,7 +3520,7 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n                             LogPrintf(\"%s: Processing out of order child %s of %s\\n\", __func__, block.GetHash().ToString(),\n                                     head.ToString());\n                             CValidationState dummy;\n-                            if (ProcessNewBlock(dummy, NULL, &block, true, &it->second))\n+                            if (ProcessNewBlock(dummy, chainparams, NULL, &block, true, &it->second))\n                             {\n                                 nLoaded++;\n                                 queue.push_back(block.GetHash());\n@@ -4562,7 +4560,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // Such an unrequested block may still be processed, subject to the\n         // conditions in AcceptBlock().\n         bool forceProcessing = pfrom->fWhitelisted && !IsInitialBlockDownload();\n-        ProcessNewBlock(state, pfrom, &block, forceProcessing, NULL);\n+        ProcessNewBlock(state, chainparams, pfrom, &block, forceProcessing, NULL);\n         int nDoS;\n         if (state.IsInvalid(nDoS)) {\n             assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes"
      },
      {
        "sha": "eb61ff9570b1485e7523d9fcddab58ccdafd88af",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87ee0e2dbc1201a5104d524ace32c0134ead019f/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87ee0e2dbc1201a5104d524ace32c0134ead019f/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=87ee0e2dbc1201a5104d524ace32c0134ead019f",
        "patch": "@@ -31,6 +31,7 @@\n class CBlockIndex;\n class CBlockTreeDB;\n class CBloomFilter;\n+class CChainParams;\n class CInv;\n class CScriptCheck;\n class CTxMemPool;\n@@ -161,7 +162,7 @@ void UnregisterNodeSignals(CNodeSignals& nodeSignals);\n  * @param[out]  dbp     If pblock is stored to disk (or already there), this will be set to its location.\n  * @return True if state.IsValid()\n  */\n-bool ProcessNewBlock(CValidationState &state, const CNode* pfrom, const CBlock* pblock, bool fForceProcessing, CDiskBlockPos *dbp);\n+bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, const CNode* pfrom, const CBlock* pblock, bool fForceProcessing, CDiskBlockPos* dbp);\n /** Check whether enough disk space is available for an incoming block */\n bool CheckDiskSpace(uint64_t nAdditionalBytes = 0);\n /** Open a block file (blk?????.dat) */\n@@ -380,7 +381,7 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex *pindexPrev);\n \n /** Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held) */\n-bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex *pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n+bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Store block on disk. If dbp is non-NULL, the file is known to already reside on disk */\n bool AcceptBlock(const CBlock& block, CValidationState& state, CBlockIndex **pindex, bool fRequested, CDiskBlockPos* dbp);"
      },
      {
        "sha": "bb6b51337271aa396674d781c590ccc53fc54380",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87ee0e2dbc1201a5104d524ace32c0134ead019f/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87ee0e2dbc1201a5104d524ace32c0134ead019f/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=87ee0e2dbc1201a5104d524ace32c0134ead019f",
        "patch": "@@ -99,9 +99,8 @@ int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParam\n     return nNewTime - nOldTime;\n }\n \n-CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n+CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& scriptPubKeyIn)\n {\n-    const CChainParams& chainparams = Params();\n     // Create new block\n     auto_ptr<CBlockTemplate> pblocktemplate(new CBlockTemplate());\n     if(!pblocktemplate.get())\n@@ -110,7 +109,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n \n     // -regtest only: allow overriding block.nVersion with\n     // -blockversion=N to test forking scenarios\n-    if (Params().MineBlocksOnDemand())\n+    if (chainparams.MineBlocksOnDemand())\n         pblock->nVersion = GetArg(\"-blockversion\", pblock->nVersion);\n \n     // Create coinbase tx\n@@ -345,13 +344,13 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n \n         // Fill in header\n         pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n-        UpdateTime(pblock, Params().GetConsensus(), pindexPrev);\n-        pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock, Params().GetConsensus());\n+        UpdateTime(pblock, chainparams.GetConsensus(), pindexPrev);\n+        pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock, chainparams.GetConsensus());\n         pblock->nNonce         = 0;\n         pblocktemplate->vTxSigOps[0] = GetLegacySigOpCount(pblock->vtx[0]);\n \n         CValidationState state;\n-        if (!TestBlockValidity(state, *pblock, pindexPrev, false, false))\n+        if (!TestBlockValidity(state, chainparams, *pblock, pindexPrev, false, false))\n             throw std::runtime_error(\"CreateNewBlock(): TestBlockValidity failed\");\n     }\n \n@@ -432,7 +431,7 @@ static bool ProcessBlockFound(const CBlock* pblock, const CChainParams& chainpar\n \n     // Process this block the same as if we had received it from another node\n     CValidationState state;\n-    if (!ProcessNewBlock(state, NULL, pblock, true, NULL))\n+    if (!ProcessNewBlock(state, chainparams, NULL, pblock, true, NULL))\n         return error(\"BitcoinMiner: ProcessNewBlock, block not accepted\");\n \n     return true;\n@@ -478,7 +477,7 @@ void static BitcoinMiner(const CChainParams& chainparams)\n             unsigned int nTransactionsUpdatedLast = mempool.GetTransactionsUpdated();\n             CBlockIndex* pindexPrev = chainActive.Tip();\n \n-            auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlock(coinbaseScript->reserveScript));\n+            auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlock(chainparams, coinbaseScript->reserveScript));\n             if (!pblocktemplate.get())\n             {\n                 LogPrintf(\"Error in BitcoinMiner: Keypool ran out, please call keypoolrefill before restarting the mining thread\\n\");"
      },
      {
        "sha": "7b544303e0d6b0ba64894fbb04f3cb6d38163a41",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87ee0e2dbc1201a5104d524ace32c0134ead019f/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87ee0e2dbc1201a5104d524ace32c0134ead019f/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=87ee0e2dbc1201a5104d524ace32c0134ead019f",
        "patch": "@@ -29,7 +29,7 @@ struct CBlockTemplate\n /** Run the miner threads */\n void GenerateBitcoins(bool fGenerate, int nThreads, const CChainParams& chainparams);\n /** Generate a new block, without valid proof-of-work */\n-CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn);\n+CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& scriptPubKeyIn);\n /** Modify the extranonce in a block */\n void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev);"
      },
      {
        "sha": "3fd07fc3749521a2cceb88ee8cda773c529db05f",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87ee0e2dbc1201a5104d524ace32c0134ead019f/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87ee0e2dbc1201a5104d524ace32c0134ead019f/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=87ee0e2dbc1201a5104d524ace32c0134ead019f",
        "patch": "@@ -157,7 +157,7 @@ UniValue generate(const UniValue& params, bool fHelp)\n     UniValue blockHashes(UniValue::VARR);\n     while (nHeight < nHeightEnd)\n     {\n-        auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlock(coinbaseScript->reserveScript));\n+        auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlock(Params(), coinbaseScript->reserveScript));\n         if (!pblocktemplate.get())\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Couldn't create new block\");\n         CBlock *pblock = &pblocktemplate->block;\n@@ -171,7 +171,7 @@ UniValue generate(const UniValue& params, bool fHelp)\n             ++pblock->nNonce;\n         }\n         CValidationState state;\n-        if (!ProcessNewBlock(state, NULL, pblock, true, NULL))\n+        if (!ProcessNewBlock(state, Params(), NULL, pblock, true, NULL))\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n         ++nHeight;\n         blockHashes.push_back(pblock->GetHash().GetHex());\n@@ -426,7 +426,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n             if (block.hashPrevBlock != pindexPrev->GetBlockHash())\n                 return \"inconclusive-not-best-prevblk\";\n             CValidationState state;\n-            TestBlockValidity(state, block, pindexPrev, false, true);\n+            TestBlockValidity(state, Params(), block, pindexPrev, false, true);\n             return BIP22ValidationResult(state);\n         }\n     }\n@@ -510,7 +510,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n             pblocktemplate = NULL;\n         }\n         CScript scriptDummy = CScript() << OP_TRUE;\n-        pblocktemplate = CreateNewBlock(scriptDummy);\n+        pblocktemplate = CreateNewBlock(Params(), scriptDummy);\n         if (!pblocktemplate)\n             throw JSONRPCError(RPC_OUT_OF_MEMORY, \"Out of memory\");\n \n@@ -652,7 +652,7 @@ UniValue submitblock(const UniValue& params, bool fHelp)\n     CValidationState state;\n     submitblock_StateCatcher sc(block.GetHash());\n     RegisterValidationInterface(&sc);\n-    bool fAccepted = ProcessNewBlock(state, NULL, &block, true, NULL);\n+    bool fAccepted = ProcessNewBlock(state, Params(), NULL, &block, true, NULL);\n     UnregisterValidationInterface(&sc);\n     if (fBlockPresent)\n     {"
      },
      {
        "sha": "f745b75a82b4d47376931cd6cd47e91812f507cb",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 14,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87ee0e2dbc1201a5104d524ace32c0134ead019f/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87ee0e2dbc1201a5104d524ace32c0134ead019f/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=87ee0e2dbc1201a5104d524ace32c0134ead019f",
        "patch": "@@ -59,6 +59,7 @@ struct {\n // NOTE: These tests rely on CreateNewBlock doing its own self-validation!\n BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n+    const CChainParams& chainparams = Params(CBaseChainParams::MAIN);\n     CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n     CBlockTemplate *pblocktemplate;\n     CMutableTransaction tx,tx2;\n@@ -69,7 +70,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     fCheckpointsEnabled = false;\n \n     // Simple block creation, nothing special yet:\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n \n     // We can't make transactions until we have inputs\n     // Therefore, load 100 blocks :)\n@@ -91,14 +92,14 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         pblock->hashMerkleRoot = pblock->ComputeMerkleRoot();\n         pblock->nNonce = blockinfo[i].nonce;\n         CValidationState state;\n-        BOOST_CHECK(ProcessNewBlock(state, NULL, pblock, true, NULL));\n+        BOOST_CHECK(ProcessNewBlock(state, chainparams, NULL, pblock, true, NULL));\n         BOOST_CHECK(state.IsValid());\n         pblock->hashPrevBlock = pblock->GetHash();\n     }\n     delete pblocktemplate;\n \n     // Just to make sure we can still make simple blocks\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n \n     // block sigops > limit: 1000 CHECKMULTISIG + 1\n@@ -116,7 +117,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n@@ -136,14 +137,14 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n     // orphan in mempool\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n@@ -161,7 +162,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = 5900000000LL;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n@@ -172,7 +173,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = 0;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n@@ -190,7 +191,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue -= 1000000;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n@@ -204,17 +205,17 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].scriptPubKey = CScript() << OP_2;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n     // subsidy changing\n     int nHeight = chainActive.Height();\n     chainActive.Tip()->nHeight = 209999;\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     chainActive.Tip()->nHeight = 210000;\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     chainActive.Tip()->nHeight = nHeight;\n \n@@ -246,7 +247,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx2, 11, GetTime(), 111.0, 11));\n     BOOST_CHECK(!CheckFinalTx(tx2, LOCKTIME_MEDIAN_TIME_PAST));\n \n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n \n     // Neither tx should have make it into the template.\n     BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 1);\n@@ -261,7 +262,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     //BOOST_CHECK(CheckFinalTx(tx));\n     //BOOST_CHECK(CheckFinalTx(tx2));\n \n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 2);\n     delete pblocktemplate;\n "
      },
      {
        "sha": "319e63ba55c1a7df3ed6b353ee8503c64f44cf7d",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87ee0e2dbc1201a5104d524ace32c0134ead019f/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87ee0e2dbc1201a5104d524ace32c0134ead019f/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=87ee0e2dbc1201a5104d524ace32c0134ead019f",
        "patch": "@@ -114,7 +114,8 @@ TestChain100Setup::TestChain100Setup() : TestingSetup(CBaseChainParams::REGTEST)\n CBlock\n TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>& txns, const CScript& scriptPubKey)\n {\n-    CBlockTemplate *pblocktemplate = CreateNewBlock(scriptPubKey);\n+    const CChainParams& chainparams = Params();\n+    CBlockTemplate *pblocktemplate = CreateNewBlock(chainparams, scriptPubKey);\n     CBlock& block = pblocktemplate->block;\n \n     // Replace mempool-selected txns with just coinbase plus passed-in txns:\n@@ -125,10 +126,10 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n     unsigned int extraNonce = 0;\n     IncrementExtraNonce(&block, chainActive.Tip(), extraNonce);\n \n-    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params(CBaseChainParams::REGTEST).GetConsensus())) ++block.nNonce;\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n \n     CValidationState state;\n-    ProcessNewBlock(state, NULL, &block, true, NULL);\n+    ProcessNewBlock(state, chainparams, NULL, &block, true, NULL);\n \n     CBlock result = block;\n     delete pblocktemplate;"
      }
    ]
  },
  {
    "sha": "e587bc3fd9ed7eb1aa787859748f37dd387f9cec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTg3YmMzZmQ5ZWQ3ZWIxYWE3ODc4NTk3NDhmMzdkZDM4N2Y5Y2Vj",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-14T22:04:15Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-17T01:41:32Z"
      },
      "message": "Implement helper class for CTxMemPoolEntry constructor\n\nThis is only for unit tests.",
      "tree": {
        "sha": "64af57efb50d03f9fc81f00dcf261d293cdfd803",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/64af57efb50d03f9fc81f00dcf261d293cdfd803"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e587bc3fd9ed7eb1aa787859748f37dd387f9cec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e587bc3fd9ed7eb1aa787859748f37dd387f9cec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e587bc3fd9ed7eb1aa787859748f37dd387f9cec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e587bc3fd9ed7eb1aa787859748f37dd387f9cec/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "87ee0e2dbc1201a5104d524ace32c0134ead019f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87ee0e2dbc1201a5104d524ace32c0134ead019f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/87ee0e2dbc1201a5104d524ace32c0134ead019f"
      }
    ],
    "stats": {
      "total": 136,
      "additions": 89,
      "deletions": 47
    },
    "files": [
      {
        "sha": "896e1237ed3894a847e018fe8af4343cf51b3b4f",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 32,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e587bc3fd9ed7eb1aa787859748f37dd387f9cec/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e587bc3fd9ed7eb1aa787859748f37dd387f9cec/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=e587bc3fd9ed7eb1aa787859748f37dd387f9cec",
        "patch": "@@ -17,6 +17,7 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n {\n     // Test CTxMemPool::remove functionality\n \n+    TestMemPoolEntryHelper entry;\n     // Parent transaction with three children,\n     // and three grand-children:\n     CMutableTransaction txParent;\n@@ -60,17 +61,17 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n     BOOST_CHECK_EQUAL(removed.size(), 0);\n \n     // Just the parent:\n-    testPool.addUnchecked(txParent.GetHash(), CTxMemPoolEntry(txParent, 0, 0, 0.0, 1));\n+    testPool.addUnchecked(txParent.GetHash(), entry.FromTx(txParent));\n     testPool.remove(txParent, removed, true);\n     BOOST_CHECK_EQUAL(removed.size(), 1);\n     removed.clear();\n     \n     // Parent, children, grandchildren:\n-    testPool.addUnchecked(txParent.GetHash(), CTxMemPoolEntry(txParent, 0, 0, 0.0, 1));\n+    testPool.addUnchecked(txParent.GetHash(), entry.FromTx(txParent));\n     for (int i = 0; i < 3; i++)\n     {\n-        testPool.addUnchecked(txChild[i].GetHash(), CTxMemPoolEntry(txChild[i], 0, 0, 0.0, 1));\n-        testPool.addUnchecked(txGrandChild[i].GetHash(), CTxMemPoolEntry(txGrandChild[i], 0, 0, 0.0, 1));\n+        testPool.addUnchecked(txChild[i].GetHash(), entry.FromTx(txChild[i]));\n+        testPool.addUnchecked(txGrandChild[i].GetHash(), entry.FromTx(txGrandChild[i]));\n     }\n     // Remove Child[0], GrandChild[0] should be removed:\n     testPool.remove(txChild[0], removed, true);\n@@ -90,8 +91,8 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n     // Add children and grandchildren, but NOT the parent (simulate the parent being in a block)\n     for (int i = 0; i < 3; i++)\n     {\n-        testPool.addUnchecked(txChild[i].GetHash(), CTxMemPoolEntry(txChild[i], 0, 0, 0.0, 1));\n-        testPool.addUnchecked(txGrandChild[i].GetHash(), CTxMemPoolEntry(txGrandChild[i], 0, 0, 0.0, 1));\n+        testPool.addUnchecked(txChild[i].GetHash(), entry.FromTx(txChild[i]));\n+        testPool.addUnchecked(txGrandChild[i].GetHash(), entry.FromTx(txGrandChild[i]));\n     }\n     // Now remove the parent, as might happen if a block-re-org occurs but the parent cannot be\n     // put into the mempool (maybe because it is non-standard):\n@@ -114,41 +115,45 @@ void CheckSort(CTxMemPool &pool, std::vector<std::string> &sortedOrder)\n BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n {\n     CTxMemPool pool(CFeeRate(0));\n+    TestMemPoolEntryHelper entry;\n+    entry.hadNoDependencies = true;\n \n     /* 3rd highest fee */\n     CMutableTransaction tx1 = CMutableTransaction();\n     tx1.vout.resize(1);\n     tx1.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx1.vout[0].nValue = 10 * COIN;\n-    pool.addUnchecked(tx1.GetHash(), CTxMemPoolEntry(tx1, 10000LL, 0, 10.0, 1, true));\n+    pool.addUnchecked(tx1.GetHash(), entry.Fee(10000LL).Priority(10.0).FromTx(tx1));\n \n     /* highest fee */\n     CMutableTransaction tx2 = CMutableTransaction();\n     tx2.vout.resize(1);\n     tx2.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx2.vout[0].nValue = 2 * COIN;\n-    pool.addUnchecked(tx2.GetHash(), CTxMemPoolEntry(tx2, 20000LL, 0, 9.0, 1, true));\n+    pool.addUnchecked(tx2.GetHash(), entry.Fee(20000LL).Priority(9.0).FromTx(tx2));\n \n     /* lowest fee */\n     CMutableTransaction tx3 = CMutableTransaction();\n     tx3.vout.resize(1);\n     tx3.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx3.vout[0].nValue = 5 * COIN;\n-    pool.addUnchecked(tx3.GetHash(), CTxMemPoolEntry(tx3, 0LL, 0, 100.0, 1, true));\n+    pool.addUnchecked(tx3.GetHash(), entry.Fee(0LL).Priority(100.0).FromTx(tx3));\n \n     /* 2nd highest fee */\n     CMutableTransaction tx4 = CMutableTransaction();\n     tx4.vout.resize(1);\n     tx4.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx4.vout[0].nValue = 6 * COIN;\n-    pool.addUnchecked(tx4.GetHash(), CTxMemPoolEntry(tx4, 15000LL, 0, 1.0, 1, true));\n+    pool.addUnchecked(tx4.GetHash(), entry.Fee(15000LL).Priority(1.0).FromTx(tx4));\n \n     /* equal fee rate to tx1, but newer */\n     CMutableTransaction tx5 = CMutableTransaction();\n     tx5.vout.resize(1);\n     tx5.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx5.vout[0].nValue = 11 * COIN;\n-    pool.addUnchecked(tx5.GetHash(), CTxMemPoolEntry(tx5, 10000LL, 1, 10.0, 1, true));\n+    entry.nTime = 1;\n+    entry.dPriority = 10.0;\n+    pool.addUnchecked(tx5.GetHash(), entry.Fee(10000LL).FromTx(tx5));\n     BOOST_CHECK_EQUAL(pool.size(), 5);\n \n     std::vector<std::string> sortedOrder;\n@@ -166,7 +171,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     tx6.vout.resize(1);\n     tx6.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx6.vout[0].nValue = 20 * COIN;\n-    pool.addUnchecked(tx6.GetHash(), CTxMemPoolEntry(tx6, 0LL, 1, 10.0, 1, true));\n+    pool.addUnchecked(tx6.GetHash(), entry.Fee(0LL).FromTx(tx6));\n     BOOST_CHECK_EQUAL(pool.size(), 6);\n     // Check that at this point, tx6 is sorted low\n     sortedOrder.insert(sortedOrder.begin(), tx6.GetHash().ToString());\n@@ -186,11 +191,10 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n \n     CTxMemPool::setEntries setAncestorsCalculated;\n     std::string dummy;\n-    CTxMemPoolEntry entry7(tx7, 2000000LL, 1, 10.0, 1, true);\n-    BOOST_CHECK_EQUAL(pool.CalculateMemPoolAncestors(entry7, setAncestorsCalculated, 100, 1000000, 1000, 1000000, dummy), true);\n+    BOOST_CHECK_EQUAL(pool.CalculateMemPoolAncestors(entry.Fee(2000000LL).FromTx(tx7), setAncestorsCalculated, 100, 1000000, 1000, 1000000, dummy), true);\n     BOOST_CHECK(setAncestorsCalculated == setAncestors);\n \n-    pool.addUnchecked(tx7.GetHash(), CTxMemPoolEntry(tx7, 2000000LL, 1, 10.0, 1, true), setAncestors);\n+    pool.addUnchecked(tx7.GetHash(), entry.FromTx(tx7), setAncestors);\n     BOOST_CHECK_EQUAL(pool.size(), 7);\n \n     // Now tx6 should be sorted higher (high fee child): tx7, tx6, tx2, ...\n@@ -208,7 +212,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     tx8.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx8.vout[0].nValue = 10 * COIN;\n     setAncestors.insert(pool.mapTx.find(tx7.GetHash()));\n-    pool.addUnchecked(tx8.GetHash(), CTxMemPoolEntry(tx8, 0LL, 2, 10.0, 1, true), setAncestors);\n+    pool.addUnchecked(tx8.GetHash(), entry.Fee(0LL).Time(2).FromTx(tx8), setAncestors);\n \n     // Now tx8 should be sorted low, but tx6/tx both high\n     sortedOrder.insert(sortedOrder.begin(), tx8.GetHash().ToString());\n@@ -222,7 +226,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     tx9.vout.resize(1);\n     tx9.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx9.vout[0].nValue = 1 * COIN;\n-    pool.addUnchecked(tx9.GetHash(), CTxMemPoolEntry(tx9, 0LL, 3, 10.0, 1, true), setAncestors);\n+    pool.addUnchecked(tx9.GetHash(), entry.Fee(0LL).Time(3).FromTx(tx9), setAncestors);\n \n     // tx9 should be sorted low\n     BOOST_CHECK_EQUAL(pool.size(), 9);\n@@ -245,11 +249,10 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     tx10.vout[0].nValue = 10 * COIN;\n \n     setAncestorsCalculated.clear();\n-    CTxMemPoolEntry entry10(tx10, 200000LL, 4, 10.0, 1, true);\n-    BOOST_CHECK_EQUAL(pool.CalculateMemPoolAncestors(entry10, setAncestorsCalculated, 100, 1000000, 1000, 1000000, dummy), true);\n+    BOOST_CHECK_EQUAL(pool.CalculateMemPoolAncestors(entry.Fee(200000LL).Time(4).FromTx(tx10), setAncestorsCalculated, 100, 1000000, 1000, 1000000, dummy), true);\n     BOOST_CHECK(setAncestorsCalculated == setAncestors);\n \n-    pool.addUnchecked(tx10.GetHash(), CTxMemPoolEntry(tx10, 200000LL, 4, 10.0, 1, true), setAncestors);\n+    pool.addUnchecked(tx10.GetHash(), entry.FromTx(tx10), setAncestors);\n \n     /**\n      *  tx8 and tx9 should both now be sorted higher\n@@ -284,22 +287,24 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n {\n     CTxMemPool pool(CFeeRate(1000));\n+    TestMemPoolEntryHelper entry;\n+    entry.dPriority = 10.0;\n \n     CMutableTransaction tx1 = CMutableTransaction();\n     tx1.vin.resize(1);\n     tx1.vin[0].scriptSig = CScript() << OP_1;\n     tx1.vout.resize(1);\n     tx1.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n     tx1.vout[0].nValue = 10 * COIN;\n-    pool.addUnchecked(tx1.GetHash(), CTxMemPoolEntry(tx1, 10000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx1)));\n+    pool.addUnchecked(tx1.GetHash(), entry.Fee(10000LL).FromTx(tx1, &pool));\n \n     CMutableTransaction tx2 = CMutableTransaction();\n     tx2.vin.resize(1);\n     tx2.vin[0].scriptSig = CScript() << OP_2;\n     tx2.vout.resize(1);\n     tx2.vout[0].scriptPubKey = CScript() << OP_2 << OP_EQUAL;\n     tx2.vout[0].nValue = 10 * COIN;\n-    pool.addUnchecked(tx2.GetHash(), CTxMemPoolEntry(tx2, 5000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx2)));\n+    pool.addUnchecked(tx2.GetHash(), entry.Fee(5000LL).FromTx(tx2, &pool));\n \n     pool.TrimToSize(pool.DynamicMemoryUsage()); // should do nothing\n     BOOST_CHECK(pool.exists(tx1.GetHash()));\n@@ -309,15 +314,15 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     BOOST_CHECK(pool.exists(tx1.GetHash()));\n     BOOST_CHECK(!pool.exists(tx2.GetHash()));\n \n-    pool.addUnchecked(tx2.GetHash(), CTxMemPoolEntry(tx2, 5000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx2)));\n+    pool.addUnchecked(tx2.GetHash(), entry.FromTx(tx2, &pool));\n     CMutableTransaction tx3 = CMutableTransaction();\n     tx3.vin.resize(1);\n     tx3.vin[0].prevout = COutPoint(tx2.GetHash(), 0);\n     tx3.vin[0].scriptSig = CScript() << OP_2;\n     tx3.vout.resize(1);\n     tx3.vout[0].scriptPubKey = CScript() << OP_3 << OP_EQUAL;\n     tx3.vout[0].nValue = 10 * COIN;\n-    pool.addUnchecked(tx3.GetHash(), CTxMemPoolEntry(tx3, 20000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx3)));\n+    pool.addUnchecked(tx3.GetHash(), entry.Fee(20000LL).FromTx(tx3, &pool));\n \n     pool.TrimToSize(pool.DynamicMemoryUsage() * 3 / 4); // tx3 should pay for tx2 (CPFP)\n     BOOST_CHECK(!pool.exists(tx1.GetHash()));\n@@ -380,10 +385,10 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     tx7.vout[1].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n     tx7.vout[1].nValue = 10 * COIN;\n \n-    pool.addUnchecked(tx4.GetHash(), CTxMemPoolEntry(tx4, 7000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx4)));\n-    pool.addUnchecked(tx5.GetHash(), CTxMemPoolEntry(tx5, 1000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx5)));\n-    pool.addUnchecked(tx6.GetHash(), CTxMemPoolEntry(tx6, 1100LL, 0, 10.0, 1, pool.HasNoInputsOf(tx6)));\n-    pool.addUnchecked(tx7.GetHash(), CTxMemPoolEntry(tx7, 9000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx7)));\n+    pool.addUnchecked(tx4.GetHash(), entry.Fee(7000LL).FromTx(tx4, &pool));\n+    pool.addUnchecked(tx5.GetHash(), entry.Fee(1000LL).FromTx(tx5, &pool));\n+    pool.addUnchecked(tx6.GetHash(), entry.Fee(1100LL).FromTx(tx6, &pool));\n+    pool.addUnchecked(tx7.GetHash(), entry.Fee(9000LL).FromTx(tx7, &pool));\n \n     // we only require this remove, at max, 2 txn, because its not clear what we're really optimizing for aside from that\n     pool.TrimToSize(pool.DynamicMemoryUsage() - 1);\n@@ -392,17 +397,17 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     BOOST_CHECK(!pool.exists(tx7.GetHash()));\n \n     if (!pool.exists(tx5.GetHash()))\n-        pool.addUnchecked(tx5.GetHash(), CTxMemPoolEntry(tx5, 1000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx5)));\n-    pool.addUnchecked(tx7.GetHash(), CTxMemPoolEntry(tx7, 9000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx7)));\n+        pool.addUnchecked(tx5.GetHash(), entry.Fee(1000LL).FromTx(tx5, &pool));\n+    pool.addUnchecked(tx7.GetHash(), entry.Fee(9000LL).FromTx(tx7, &pool));\n \n     pool.TrimToSize(pool.DynamicMemoryUsage() / 2); // should maximize mempool size by only removing 5/7\n     BOOST_CHECK(pool.exists(tx4.GetHash()));\n     BOOST_CHECK(!pool.exists(tx5.GetHash()));\n     BOOST_CHECK(pool.exists(tx6.GetHash()));\n     BOOST_CHECK(!pool.exists(tx7.GetHash()));\n \n-    pool.addUnchecked(tx5.GetHash(), CTxMemPoolEntry(tx5, 1000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx5)));\n-    pool.addUnchecked(tx7.GetHash(), CTxMemPoolEntry(tx7, 9000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx7)));\n+    pool.addUnchecked(tx5.GetHash(), entry.Fee(1000LL).FromTx(tx5, &pool));\n+    pool.addUnchecked(tx7.GetHash(), entry.Fee(9000LL).FromTx(tx7, &pool));\n \n     std::vector<CTransaction> vtx;\n     std::list<CTransaction> conflicts;"
      },
      {
        "sha": "dc20e34634ba1bb274e6d6a194c3c9b7b005f1db",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 12,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e587bc3fd9ed7eb1aa787859748f37dd387f9cec/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e587bc3fd9ed7eb1aa787859748f37dd387f9cec/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=e587bc3fd9ed7eb1aa787859748f37dd387f9cec",
        "patch": "@@ -65,6 +65,10 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     CMutableTransaction tx,tx2;\n     CScript script;\n     uint256 hash;\n+    TestMemPoolEntryHelper entry;\n+    entry.nFee = 11;\n+    entry.dPriority = 111.0;\n+    entry.nHeight = 11;\n \n     LOCK(cs_main);\n     fCheckpointsEnabled = false;\n@@ -114,7 +118,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     {\n         tx.vout[0].nValue -= 1000000;\n         hash = tx.GetHash();\n-        mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+        mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n@@ -134,7 +138,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     {\n         tx.vout[0].nValue -= 10000000;\n         hash = tx.GetHash();\n-        mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+        mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n@@ -143,7 +147,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     // orphan in mempool\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -153,15 +157,15 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].prevout.hash = txFirst[1]->GetHash();\n     tx.vout[0].nValue = 4900000000LL;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n     tx.vin[0].prevout.hash = hash;\n     tx.vin.resize(2);\n     tx.vin[1].scriptSig = CScript() << OP_1;\n     tx.vin[1].prevout.hash = txFirst[0]->GetHash();\n     tx.vin[1].prevout.n = 0;\n     tx.vout[0].nValue = 5900000000LL;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -172,7 +176,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].scriptSig = CScript() << OP_0 << OP_1;\n     tx.vout[0].nValue = 0;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -185,12 +189,12 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     script = CScript() << OP_0;\n     tx.vout[0].scriptPubKey = GetScriptForDestination(CScriptID(script));\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n     tx.vin[0].prevout.hash = hash;\n     tx.vin[0].scriptSig = CScript() << (std::vector<unsigned char>)script;\n     tx.vout[0].nValue -= 1000000;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -201,10 +205,10 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = 4900000000LL;\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n     tx.vout[0].scriptPubKey = CScript() << OP_2;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -230,7 +234,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n     tx.nLockTime = chainActive.Tip()->nHeight+1;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n     BOOST_CHECK(!CheckFinalTx(tx, LOCKTIME_MEDIAN_TIME_PAST));\n \n     // time locked\n@@ -244,7 +248,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx2.vout[0].scriptPubKey = CScript() << OP_1;\n     tx2.nLockTime = chainActive.Tip()->GetMedianTimePast()+1;\n     hash = tx2.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx2, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx2));\n     BOOST_CHECK(!CheckFinalTx(tx2, LOCKTIME_MEDIAN_TIME_PAST));\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));"
      },
      {
        "sha": "c4f6660f6aed9c237013a4d6d5b89b2a9faa1796",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e587bc3fd9ed7eb1aa787859748f37dd387f9cec/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e587bc3fd9ed7eb1aa787859748f37dd387f9cec/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=e587bc3fd9ed7eb1aa787859748f37dd387f9cec",
        "patch": "@@ -16,6 +16,7 @@ BOOST_FIXTURE_TEST_SUITE(policyestimator_tests, BasicTestingSetup)\n BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n {\n     CTxMemPool mpool(CFeeRate(1000));\n+    TestMemPoolEntryHelper entry;\n     CAmount basefee(2000);\n     double basepri = 1e6;\n     CAmount deltaFee(100);\n@@ -63,7 +64,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n             for (int k = 0; k < 5; k++) { // add 4 fee txs for every priority tx\n                 tx.vin[0].prevout.n = 10000*blocknum+100*j+k; // make transaction unique\n                 uint256 hash = tx.GetHash();\n-                mpool.addUnchecked(hash, CTxMemPoolEntry(tx, feeV[k/4][j], GetTime(), priV[k/4][j], blocknum, mpool.HasNoInputsOf(tx)));\n+                mpool.addUnchecked(hash, entry.Fee(feeV[k/4][j]).Time(GetTime()).Priority(priV[k/4][j]).Height(blocknum).FromTx(tx, &mpool));\n                 txHashes[j].push_back(hash);\n             }\n         }\n@@ -132,7 +133,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n             for (int k = 0; k < 5; k++) { // add 4 fee txs for every priority tx\n                 tx.vin[0].prevout.n = 10000*blocknum+100*j+k;\n                 uint256 hash = tx.GetHash();\n-                mpool.addUnchecked(hash, CTxMemPoolEntry(tx, feeV[k/4][j], GetTime(), priV[k/4][j], blocknum, mpool.HasNoInputsOf(tx)));\n+                mpool.addUnchecked(hash, entry.Fee(feeV[k/4][j]).Time(GetTime()).Priority(priV[k/4][j]).Height(blocknum).FromTx(tx, &mpool));\n                 txHashes[j].push_back(hash);\n             }\n         }\n@@ -168,7 +169,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n             for (int k = 0; k < 5; k++) { // add 4 fee txs for every priority tx\n                 tx.vin[0].prevout.n = 10000*blocknum+100*j+k;\n                 uint256 hash = tx.GetHash();\n-                mpool.addUnchecked(hash, CTxMemPoolEntry(tx, feeV[k/4][j], GetTime(), priV[k/4][j], blocknum, mpool.HasNoInputsOf(tx)));\n+                mpool.addUnchecked(hash, entry.Fee(feeV[k/4][j]).Time(GetTime()).Priority(priV[k/4][j]).Height(blocknum).FromTx(tx, &mpool));\n                 CTransaction btx;\n                 if (mpool.lookup(hash, btx))\n                     block.push_back(btx);"
      },
      {
        "sha": "9a3517a27b467f104aafe8f0e1b4f612d2d64a90",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e587bc3fd9ed7eb1aa787859748f37dd387f9cec/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e587bc3fd9ed7eb1aa787859748f37dd387f9cec/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=e587bc3fd9ed7eb1aa787859748f37dd387f9cec",
        "patch": "@@ -15,6 +15,7 @@\n #include \"pubkey.h\"\n #include \"random.h\"\n #include \"txdb.h\"\n+#include \"txmempool.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n #ifdef ENABLE_WALLET\n@@ -140,6 +141,12 @@ TestChain100Setup::~TestChain100Setup()\n {\n }\n \n+\n+CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(CMutableTransaction &tx, CTxMemPool *pool) {\n+    return CTxMemPoolEntry(tx, nFee, nTime, dPriority, nHeight,\n+                           pool ? pool->HasNoInputsOf(tx) : hadNoDependencies);\n+}\n+\n void Shutdown(void* parg)\n {\n   exit(0);"
      },
      {
        "sha": "815b2274117c78d7e26ade9269a6e8ded39fe589",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e587bc3fd9ed7eb1aa787859748f37dd387f9cec/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e587bc3fd9ed7eb1aa787859748f37dd387f9cec/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=e587bc3fd9ed7eb1aa787859748f37dd387f9cec",
        "patch": "@@ -54,4 +54,29 @@ struct TestChain100Setup : public TestingSetup {\n     CKey coinbaseKey; // private/public key needed to spend coinbase transactions\n };\n \n+class CTxMemPoolEntry;\n+class CTxMemPool;\n+\n+struct TestMemPoolEntryHelper\n+{\n+    // Default values\n+    CAmount nFee;\n+    int64_t nTime;\n+    double dPriority;\n+    unsigned int nHeight;\n+    bool hadNoDependencies;\n+\n+    TestMemPoolEntryHelper() :\n+        nFee(0), nTime(0), dPriority(0.0), nHeight(1),\n+        hadNoDependencies(false) { }\n+\n+    CTxMemPoolEntry FromTx(CMutableTransaction &tx, CTxMemPool *pool = NULL);\n+\n+    // Change the default value\n+    TestMemPoolEntryHelper &Fee(CAmount _fee) { nFee = _fee; return *this; }\n+    TestMemPoolEntryHelper &Time(int64_t _time) { nTime = _time; return *this; }\n+    TestMemPoolEntryHelper &Priority(double _priority) { dPriority = _priority; return *this; }\n+    TestMemPoolEntryHelper &Height(unsigned int _height) { nHeight = _height; return *this; }\n+    TestMemPoolEntryHelper &HadNoDependencies(bool _hnd) { hadNoDependencies = _hnd; return *this; }\n+};\n #endif"
      }
    ]
  },
  {
    "sha": "eac53ec992018a14db6f8a65a7ce333a4c8284cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYWM1M2VjOTkyMDE4YTE0ZGI2ZjhhNjVhN2NlMzMzYTRjODI4NGNj",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-17T07:28:00Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-17T07:28:37Z"
      },
      "message": "Merge pull request #7026\n\na6d5a65 [trivial] contrib: Fix `echo`s in verify.sh (MarcoFalke)\n141c44e [contrib] Update versionprefix to \"bitcoin-core\" in verify.sh (MarcoFalke)",
      "tree": {
        "sha": "5ac3bf7322ea7a047c468cee253cb75212651068",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ac3bf7322ea7a047c468cee253cb75212651068"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eac53ec992018a14db6f8a65a7ce333a4c8284cc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCAAGBQJWStclAAoJEOq1r5TZ6avnO1EQAKWaIrrSSTBTdXZvKwecSFVE\n9nfHaPMaupgO3m3MnHqt/aKE5CltaxmORvzd9I5t4PE6uGg3ma30G5Y+vYm0eNZL\nP/MZ41lIlGhCh2EgNZDHJXB91UK5ZMeByRK6SgKefJei8wiLQhPvKvK2uNKSyry8\njNba3evHbxf4JhBGLMDcINf1/NwaMKLVkzeL1FvX12n464Ec7TCAbS7dc9cLNPQA\n9E8fUPeSj1bai0BZ8bWKQc4dACR1O66KYxDQ6zflpcc+9Rpf7l25ZPrSY0nBtY5K\nYpgPzSVkkb0h1hR2D7c8uBUQ0iXRUmB96oTMRKua37GPH95eLOC9nEwlvH3dVhc9\nl5PN1YvHooctPfWcoiJkuULIZBE2+3oXutUh+0+EbzBMwtGELA0FGK3wTLYDHWq6\nVkdQEeLue8ZhhVMXdpCpiiFavzHJFKpKeceXSFD0zLJ2iolJFbdK6A4OdvKkGL2g\no5T6LqKn5zSX4pyFMqjNBnqf7y38pXMFIhgWkCrc5qvCaxlxjgSdziMbbijS+mni\nWIKPffHO3Evv41x06KVtvoVxs18SwRAMZq18rB0OCLkogX0GDV5YiETMy6N33egP\nPHVXn4hmxy1CXhU5spaNvLYm/WGqQuhJzHqsKdTJx8avTL9k20nY1Hr7F0+tBx2E\nvvIo4OZRVCGthuyOV2pw\n=EQzj\n-----END PGP SIGNATURE-----",
        "payload": "tree 5ac3bf7322ea7a047c468cee253cb75212651068\nparent 87ee0e2dbc1201a5104d524ace32c0134ead019f\nparent a6d5a6502a3dce23679a9be9e4884a4f77110cd1\nauthor Gregory Maxwell <greg@xiph.org> 1447745280 -0800\ncommitter Gregory Maxwell <greg@xiph.org> 1447745317 -0800\n\nMerge pull request #7026\n\na6d5a65 [trivial] contrib: Fix `echo`s in verify.sh (MarcoFalke)\n141c44e [contrib] Update versionprefix to \"bitcoin-core\" in verify.sh (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eac53ec992018a14db6f8a65a7ce333a4c8284cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eac53ec992018a14db6f8a65a7ce333a4c8284cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eac53ec992018a14db6f8a65a7ce333a4c8284cc/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "87ee0e2dbc1201a5104d524ace32c0134ead019f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87ee0e2dbc1201a5104d524ace32c0134ead019f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/87ee0e2dbc1201a5104d524ace32c0134ead019f"
      },
      {
        "sha": "a6d5a6502a3dce23679a9be9e4884a4f77110cd1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6d5a6502a3dce23679a9be9e4884a4f77110cd1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6d5a6502a3dce23679a9be9e4884a4f77110cd1"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 8,
      "deletions": 6
    },
    "files": [
      {
        "sha": "847c5075530571ad9e44234a82d53a52de841e1c",
        "filename": "contrib/verifysfbinaries/verify.sh",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eac53ec992018a14db6f8a65a7ce333a4c8284cc/contrib/verifysfbinaries/verify.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eac53ec992018a14db6f8a65a7ce333a4c8284cc/contrib/verifysfbinaries/verify.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifysfbinaries/verify.sh?ref=eac53ec992018a14db6f8a65a7ce333a4c8284cc",
        "patch": "@@ -17,15 +17,15 @@ function clean_up {\n WORKINGDIR=\"/tmp/bitcoin\"\n TMPFILE=\"hashes.tmp\"\n \n-#this URL is used if a version number is not specified as an argument to the script\n-SIGNATUREFILE=\"https://bitcoin.org/bin/0.9.2.1/SHA256SUMS.asc\"\n-\n SIGNATUREFILENAME=\"SHA256SUMS.asc\"\n RCSUBDIR=\"test/\"\n BASEDIR=\"https://bitcoin.org/bin/\"\n-VERSIONPREFIX=\"bitcoin-\"\n+VERSIONPREFIX=\"bitcoin-core-\"\n RCVERSIONSTRING=\"rc\"\n \n+#this URL is used if a version number is not specified as an argument to the script\n+SIGNATUREFILE=\"$BASEDIR\"\"$VERSIONPREFIX\"\"0.10.4/\"\"$RCSUBDIR\"\"$SIGNATUREFILENAME\"\n+\n if [ ! -d \"$WORKINGDIR\" ]; then\n    mkdir \"$WORKINGDIR\"\n fi\n@@ -62,7 +62,7 @@ WGETOUT=$(wget -N \"$BASEDIR$SIGNATUREFILENAME\" 2>&1)\n #and then see if wget completed successfully\n if [ $? -ne 0 ]; then\n    echo \"Error: couldn't fetch signature file. Have you specified the version number in the following format?\"\n-   echo \"[bitcoin-]<version>-[rc[0-9]] (example: bitcoin-0.9.2-rc1)\"\n+   echo \"[$VERSIONPREFIX]<version>-[$RCVERSIONSTRING[0-9]] (example: \"$VERSIONPREFIX\"0.10.4-\"$RCVERSIONSTRING\"1)\"\n    echo \"wget output:\"\n    echo \"$WGETOUT\"|sed 's/^/\\t/g'\n    exit 2\n@@ -82,7 +82,7 @@ if [ $RET -ne 0 ]; then\n       echo \"Bad signature.\"\n    elif [ $RET -eq 2 ]; then\n       #or if a gpg error has occurred\n-      echo \"gpg error. Do you have Gavin's code signing key installed?\"\n+      echo \"gpg error. Do you have the Bitcoin Core binary release signing key installed?\"\n    fi\n \n    echo \"gpg output:\"\n@@ -116,4 +116,6 @@ fi\n #everything matches! clean up the mess\n clean_up $FILES $SIGNATUREFILENAME $TMPFILE\n \n+echo -e \"Verified hashes of \\n$FILES\"\n+\n exit 0"
      }
    ]
  },
  {
    "sha": "cc975745d585edf6ae3a9313f45da6dbdee16cf6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzk3NTc0NWQ1ODVlZGY2YWUzYTkzMTNmNDVkYTZkYmRlZTE2Y2Y2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-16T14:33:40Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-17T12:03:59Z"
      },
      "message": "[qa] Split README.md to /qa and /qa/rpc-tests\n\n+ Update with new -help message",
      "tree": {
        "sha": "4dce55cd6a8046c22c3faf7a312b9e4478fee853",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4dce55cd6a8046c22c3faf7a312b9e4478fee853"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc975745d585edf6ae3a9313f45da6dbdee16cf6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc975745d585edf6ae3a9313f45da6dbdee16cf6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc975745d585edf6ae3a9313f45da6dbdee16cf6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc975745d585edf6ae3a9313f45da6dbdee16cf6/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e54ebbf6009716a7abcd4d8d3f7bd910e88decdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc"
      }
    ],
    "stats": {
      "total": 89,
      "additions": 46,
      "deletions": 43
    },
    "files": [
      {
        "sha": "93157f4f1f93ceadfe4b05bd64ea74b3d0b26f1e",
        "filename": "qa/README.md",
        "status": "added",
        "additions": 46,
        "deletions": 0,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc975745d585edf6ae3a9313f45da6dbdee16cf6/qa/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc975745d585edf6ae3a9313f45da6dbdee16cf6/qa/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/README.md?ref=cc975745d585edf6ae3a9313f45da6dbdee16cf6",
        "patch": "@@ -0,0 +1,46 @@\n+Notes\n+=====\n+\n+You can run any single test by calling `qa/pull-tester/rpc-tests.py <testname>`.\n+\n+Or you can run any combination of tests by calling `qa/pull-tester/rpc-tests.py <testname1> <testname2> <testname3> ...`\n+\n+Run the regression test suite with `qa/pull-tester/rpc-tests.py`\n+\n+Run all possible tests with `qa/pull-tester/rpc-tests.py -extended`\n+\n+Possible options:\n+\n+```\n+  -h, --help            show this help message and exit\n+  --nocleanup           Leave bitcoinds and test.* datadir on exit or error\n+  --noshutdown          Don't stop bitcoinds after the test execution\n+  --srcdir=SRCDIR       Source directory containing bitcoind/bitcoin-cli\n+                        (default: ../../src)\n+  --tmpdir=TMPDIR       Root directory for datadirs\n+  --tracerpc            Print out all RPC calls as they are made\n+  --coveragedir=COVERAGEDIR\n+                        Write tested RPC commands into this directory\n+```\n+\n+If you set the environment variable `PYTHON_DEBUG=1` you will get some debug output (example: `PYTHON_DEBUG=1 qa/pull-tester/rpc-tests.py wallet`). \n+\n+A 200-block -regtest blockchain and wallets for four nodes\n+is created the first time a regression test is run and\n+is stored in the cache/ directory. Each node has 25 mature\n+blocks (25*50=1250 BTC) in its wallet.\n+\n+After the first run, the cache/ blockchain and wallets are\n+copied into a temporary directory and used as the initial\n+test state.\n+\n+If you get into a bad state, you should be able\n+to recover with:\n+\n+```bash\n+rm -rf cache\n+killall bitcoind\n+```\n+\n+Further information about the test framework and individual rpc\n+tests is found in [qa/rpc-tests/README.md](/qa/rpc-tests/README.md)."
      },
      {
        "sha": "e8d77f7ef292209af29175f07673a0530affe1fa",
        "filename": "qa/rpc-tests/README.md",
        "status": "modified",
        "additions": 0,
        "deletions": 43,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc975745d585edf6ae3a9313f45da6dbdee16cf6/qa/rpc-tests/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc975745d585edf6ae3a9313f45da6dbdee16cf6/qa/rpc-tests/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/README.md?ref=cc975745d585edf6ae3a9313f45da6dbdee16cf6",
        "patch": "@@ -33,49 +33,6 @@ Helpers for script.py\n ### [test_framework/blocktools.py](test_framework/blocktools.py)\n Helper functions for creating blocks and transactions.\n \n-\n-Notes\n-=====\n-\n-You can run any single test by calling `qa/pull-tester/rpc-tests.py <testname>`.\n-\n-Or you can run any combination of tests by calling `qa/pull-tester/rpc-tests.py <testname1> <testname2> <testname3> ...`\n-\n-Run the regression test suite with `qa/pull-tester/rpc-tests.py`\n-\n-Run all possible tests with `qa/pull-tester/rpc-tests.py -extended`\n-\n-Possible options:\n-\n-```\n--h, --help       show this help message and exit\n-  --nocleanup      Leave bitcoinds and test.* datadir on exit or error\n-  --noshutdown     Don't stop bitcoinds after the test execution\n-  --srcdir=SRCDIR  Source directory containing bitcoind/bitcoin-cli (default:\n-                   ../../src)\n-  --tmpdir=TMPDIR  Root directory for datadirs\n-  --tracerpc       Print out all RPC calls as they are made\n-```\n-\n-If you set the environment variable `PYTHON_DEBUG=1` you will get some debug output (example: `PYTHON_DEBUG=1 qa/pull-tester/rpc-tests.py wallet`). \n-\n-A 200-block -regtest blockchain and wallets for four nodes\n-is created the first time a regression test is run and\n-is stored in the cache/ directory. Each node has 25 mature\n-blocks (25*50=1250 BTC) in its wallet.\n-\n-After the first run, the cache/ blockchain and wallets are\n-copied into a temporary directory and used as the initial\n-test state.\n-\n-If you get into a bad state, you should be able\n-to recover with:\n-\n-```bash\n-rm -rf cache\n-killall bitcoind\n-```\n-\n P2P test design notes\n ---------------------\n "
      }
    ]
  },
  {
    "sha": "bd42e6b6ecd31019ff2774512bdc22c5ca289fc5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDQyZTZiNmVjZDMxMDE5ZmYyNzc0NTEyYmRjMjJjNWNhMjg5ZmM1",
    "commit": {
      "author": {
        "name": "Michael Ford",
        "email": "fanquake@users.noreply.github.com",
        "date": "2015-11-17T14:21:02Z"
      },
      "committer": {
        "name": "Michael Ford",
        "email": "fanquake@users.noreply.github.com",
        "date": "2015-11-17T14:21:02Z"
      },
      "message": "[doc] Users now see 'Bitcoin Core' in the OSX bundle\n\nOn OS X users will see 'Bitcoin Core' after opening the DMG bundle.",
      "tree": {
        "sha": "c610759cb96ea7f0576a20aeb73b85340e2416c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c610759cb96ea7f0576a20aeb73b85340e2416c0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd42e6b6ecd31019ff2774512bdc22c5ca289fc5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd42e6b6ecd31019ff2774512bdc22c5ca289fc5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bd42e6b6ecd31019ff2774512bdc22c5ca289fc5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd42e6b6ecd31019ff2774512bdc22c5ca289fc5/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eac53ec992018a14db6f8a65a7ce333a4c8284cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eac53ec992018a14db6f8a65a7ce333a4c8284cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eac53ec992018a14db6f8a65a7ce333a4c8284cc"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f6df28a89b60d63304704b4c2aaef97a8053657c",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd42e6b6ecd31019ff2774512bdc22c5ca289fc5/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd42e6b6ecd31019ff2774512bdc22c5ca289fc5/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=bd42e6b6ecd31019ff2774512bdc22c5ca289fc5",
        "patch": "@@ -28,7 +28,7 @@ Unpack the files into a directory, and then run bitcoin-qt.exe.\n \n ### OS X\n \n-Drag Bitcoin-Qt to your applications folder, and then run Bitcoin-Qt.\n+Drag Bitcoin-Core to your applications folder, and then run Bitcoin-Core.\n \n ### Need Help?\n "
      }
    ]
  },
  {
    "sha": "2fcb84907d793dcf0952ceff069c97866079c2e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZmNiODQ5MDdkNzkzZGNmMDk1MmNlZmYwNjljOTc4NjYwNzljMmUw",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2015-11-17T14:59:45Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2015-11-17T14:59:45Z"
      },
      "message": "[doc][trivial] Remove source forge from Debian watch.",
      "tree": {
        "sha": "d0ffbfa7dd857dd82cd3fce99fb0087d1f44277b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0ffbfa7dd857dd82cd3fce99fb0087d1f44277b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2fcb84907d793dcf0952ceff069c97866079c2e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fcb84907d793dcf0952ceff069c97866079c2e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2fcb84907d793dcf0952ceff069c97866079c2e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fcb84907d793dcf0952ceff069c97866079c2e0/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eac53ec992018a14db6f8a65a7ce333a4c8284cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eac53ec992018a14db6f8a65a7ce333a4c8284cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eac53ec992018a14db6f8a65a7ce333a4c8284cc"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 0,
      "deletions": 2
    },
    "files": [
      {
        "sha": "4d9e0cfa577b6d8acac28a1e005f42388b7255c0",
        "filename": "contrib/debian/watch",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fcb84907d793dcf0952ceff069c97866079c2e0/contrib/debian/watch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fcb84907d793dcf0952ceff069c97866079c2e0/contrib/debian/watch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/watch?ref=2fcb84907d793dcf0952ceff069c97866079c2e0",
        "patch": "@@ -1,7 +1,5 @@\n # Run the \"uscan\" command to check for upstream updates and more.\n version=3\n # use qa.debian.org redirector; see man uscan\n-opts=uversionmangle=s/(\\d)(alpha|beta|rc)/$1~$2/;s/\\-src//,dversionmangle=s/~dfsg\\d*// \\\n- http://sf.net/bitcoin/bitcoin-(\\d.*)-linux\\.tar\\.gz debian\n opts=uversionmangle=s/(\\d)(alpha|beta|rc)/$1~$2/,dversionmangle=s/~dfsg\\d*// \\\n  http://githubredir.debian.net/github/bitcoin/bitcoin v(.*).tar.gz"
      }
    ]
  },
  {
    "sha": "70899d70b8ea4bfa506fa9b83f665206c19b6c17",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MDg5OWQ3MGI4ZWE0YmZhNTA2ZmE5YjgzZjY2NTIwNmMxOWI2YzE3",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2015-11-17T15:00:40Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2015-11-17T15:00:40Z"
      },
      "message": "[doc][trivial] Update Debian control description\n\nUpdate the description in debian/control to match that description in\nthe main bitcoin README.md",
      "tree": {
        "sha": "4468a8b90afa298dc0d5b769bb59d665e2dd2631",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4468a8b90afa298dc0d5b769bb59d665e2dd2631"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70899d70b8ea4bfa506fa9b83f665206c19b6c17",
      "comment_count": 1,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70899d70b8ea4bfa506fa9b83f665206c19b6c17",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/70899d70b8ea4bfa506fa9b83f665206c19b6c17",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70899d70b8ea4bfa506fa9b83f665206c19b6c17/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2fcb84907d793dcf0952ceff069c97866079c2e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fcb84907d793dcf0952ceff069c97866079c2e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2fcb84907d793dcf0952ceff069c97866079c2e0"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 15,
      "deletions": 21
    },
    "files": [
      {
        "sha": "490b2571c3f60b09b672ac573153f276c5dbca6c",
        "filename": "contrib/debian/control",
        "status": "modified",
        "additions": 15,
        "deletions": 21,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70899d70b8ea4bfa506fa9b83f665206c19b6c17/contrib/debian/control",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70899d70b8ea4bfa506fa9b83f665206c19b6c17/contrib/debian/control",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/control?ref=70899d70b8ea4bfa506fa9b83f665206c19b6c17",
        "patch": "@@ -31,14 +31,11 @@ Package: bitcoind\n Architecture: any\n Depends: ${shlibs:Depends}, ${misc:Depends}\n Description: peer-to-peer network based digital currency - daemon\n- Bitcoin is a free open source peer-to-peer electronic cash system that\n- is completely decentralized, without the need for a central server or\n- trusted parties.  Users hold the crypto keys to their own money and\n- transact directly with each other, with the help of a P2P network to\n- check for double-spending.\n- .\n- Full transaction history is stored locally at each client.  This\n- requires 20+ GB of space, slowly growing.\n+ Bitcoin is an experimental new digital currency that enables instant\n+ payments to anyone, anywhere in the world. Bitcoin uses peer-to-peer\n+ technology to operate with no central authority: managing transactions\n+ and issuing money are carried out collectively by the network. Bitcoin Core\n+ is the name of the open source software which enables the use of this currency.\n  .\n  This package provides the daemon, bitcoind, and the CLI tool\n  bitcoin-cli to interact with the daemon.\n@@ -47,26 +44,23 @@ Package: bitcoin-qt\n Architecture: any\n Depends: ${shlibs:Depends}, ${misc:Depends}\n Description: peer-to-peer network based digital currency - Qt GUI\n- Bitcoin is a free open source peer-to-peer electronic cash system that\n- is completely decentralized, without the need for a central server or\n- trusted parties.  Users hold the crypto keys to their own money and\n- transact directly with each other, with the help of a P2P network to\n- check for double-spending.\n- .\n- Full transaction history is stored locally at each client.  This\n- requires 20+ GB of space, slowly growing.\n+ Bitcoin is an experimental new digital currency that enables instant\n+ payments to anyone, anywhere in the world. Bitcoin uses peer-to-peer\n+ technology to operate with no central authority: managing transactions\n+ and issuing money are carried out collectively by the network. Bitcoin Core\n+ is the name of the open source software which enables the use of this currency.\n  .\n  This package provides Bitcoin-Qt, a GUI for Bitcoin based on Qt.\n \n Package: bitcoin-tx\n Architecture: any\n Depends: ${shlibs:Depends}, ${misc:Depends}\n Description: peer-to-peer digital currency - standalone transaction tool\n- Bitcoin is a free open source peer-to-peer electronic cash system that\n- is completely decentralized, without the need for a central server or\n- trusted parties.  Users hold the crypto keys to their own money and\n- transact directly with each other, with the help of a P2P network to\n- check for double-spending.\n+ Bitcoin is an experimental new digital currency that enables instant\n+ payments to anyone, anywhere in the world. Bitcoin uses peer-to-peer\n+ technology to operate with no central authority: managing transactions\n+ and issuing money are carried out collectively by the network. Bitcoin Core\n+ is the name of the open source software which enables the use of this currency.\n  .\n  This package provides bitcoin-tx, a command-line transaction creation\n  tool which can be used without a bitcoin daemon.  Some means of"
      }
    ]
  },
  {
    "sha": "e8df8a5077df673f1914f4a40bf54b126d13de1c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOGRmOGE1MDc3ZGY2NzNmMTkxNGY0YTQwYmY1NGIxMjZkMTNkZTFj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-17T16:58:11Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-17T16:58:20Z"
      },
      "message": "Merge pull request #7020\n\ne587bc3 Implement helper class for CTxMemPoolEntry constructor (Alex Morcos)",
      "tree": {
        "sha": "fef0fa941508ae83a5922d89c78f1546df0eec29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fef0fa941508ae83a5922d89c78f1546df0eec29"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8df8a5077df673f1914f4a40bf54b126d13de1c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWS1ysAAoJEHSBCwEjRsmmea4H/2Wp2+kj4QpSyWYn+e9rLKYn\nHV/areBvCI87vAwFmdpWBZ5GMZpAApEurjDqljCl5hMYGPDpTucHjmz3fW6ufXFN\nR78OpwY1bWZs7VNPGukfuo1Jbp/awqg34n2+Bm3s6+oI5JsT3+NRF19D4rWwGk6w\nPmr1nzm71OX7XaV+HT+jQO/0WTbw2WpRpCZ6zg5xIBfbAUWuoOAAc6WpO1JZdzHq\ni16RIWq6bSzOSgeS/HIoo8XJk4FDKUksTxvOHVeteoqFcQ1JZ5uBheiyv/DBpqOr\nuS+6LhY3rh4DIhL4ICuClj0cMs/ZEBi6diAWedD/uBwzcsjqd0e72CuptcA2G1M=\n=3Gfg\n-----END PGP SIGNATURE-----",
        "payload": "tree fef0fa941508ae83a5922d89c78f1546df0eec29\nparent eac53ec992018a14db6f8a65a7ce333a4c8284cc\nparent e587bc3fd9ed7eb1aa787859748f37dd387f9cec\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1447779491 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1447779500 +0100\n\nMerge pull request #7020\n\ne587bc3 Implement helper class for CTxMemPoolEntry constructor (Alex Morcos)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8df8a5077df673f1914f4a40bf54b126d13de1c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e8df8a5077df673f1914f4a40bf54b126d13de1c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8df8a5077df673f1914f4a40bf54b126d13de1c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eac53ec992018a14db6f8a65a7ce333a4c8284cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eac53ec992018a14db6f8a65a7ce333a4c8284cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eac53ec992018a14db6f8a65a7ce333a4c8284cc"
      },
      {
        "sha": "e587bc3fd9ed7eb1aa787859748f37dd387f9cec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e587bc3fd9ed7eb1aa787859748f37dd387f9cec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e587bc3fd9ed7eb1aa787859748f37dd387f9cec"
      }
    ],
    "stats": {
      "total": 136,
      "additions": 89,
      "deletions": 47
    },
    "files": [
      {
        "sha": "896e1237ed3894a847e018fe8af4343cf51b3b4f",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 32,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8df8a5077df673f1914f4a40bf54b126d13de1c/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8df8a5077df673f1914f4a40bf54b126d13de1c/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=e8df8a5077df673f1914f4a40bf54b126d13de1c",
        "patch": "@@ -17,6 +17,7 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n {\n     // Test CTxMemPool::remove functionality\n \n+    TestMemPoolEntryHelper entry;\n     // Parent transaction with three children,\n     // and three grand-children:\n     CMutableTransaction txParent;\n@@ -60,17 +61,17 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n     BOOST_CHECK_EQUAL(removed.size(), 0);\n \n     // Just the parent:\n-    testPool.addUnchecked(txParent.GetHash(), CTxMemPoolEntry(txParent, 0, 0, 0.0, 1));\n+    testPool.addUnchecked(txParent.GetHash(), entry.FromTx(txParent));\n     testPool.remove(txParent, removed, true);\n     BOOST_CHECK_EQUAL(removed.size(), 1);\n     removed.clear();\n     \n     // Parent, children, grandchildren:\n-    testPool.addUnchecked(txParent.GetHash(), CTxMemPoolEntry(txParent, 0, 0, 0.0, 1));\n+    testPool.addUnchecked(txParent.GetHash(), entry.FromTx(txParent));\n     for (int i = 0; i < 3; i++)\n     {\n-        testPool.addUnchecked(txChild[i].GetHash(), CTxMemPoolEntry(txChild[i], 0, 0, 0.0, 1));\n-        testPool.addUnchecked(txGrandChild[i].GetHash(), CTxMemPoolEntry(txGrandChild[i], 0, 0, 0.0, 1));\n+        testPool.addUnchecked(txChild[i].GetHash(), entry.FromTx(txChild[i]));\n+        testPool.addUnchecked(txGrandChild[i].GetHash(), entry.FromTx(txGrandChild[i]));\n     }\n     // Remove Child[0], GrandChild[0] should be removed:\n     testPool.remove(txChild[0], removed, true);\n@@ -90,8 +91,8 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n     // Add children and grandchildren, but NOT the parent (simulate the parent being in a block)\n     for (int i = 0; i < 3; i++)\n     {\n-        testPool.addUnchecked(txChild[i].GetHash(), CTxMemPoolEntry(txChild[i], 0, 0, 0.0, 1));\n-        testPool.addUnchecked(txGrandChild[i].GetHash(), CTxMemPoolEntry(txGrandChild[i], 0, 0, 0.0, 1));\n+        testPool.addUnchecked(txChild[i].GetHash(), entry.FromTx(txChild[i]));\n+        testPool.addUnchecked(txGrandChild[i].GetHash(), entry.FromTx(txGrandChild[i]));\n     }\n     // Now remove the parent, as might happen if a block-re-org occurs but the parent cannot be\n     // put into the mempool (maybe because it is non-standard):\n@@ -114,41 +115,45 @@ void CheckSort(CTxMemPool &pool, std::vector<std::string> &sortedOrder)\n BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n {\n     CTxMemPool pool(CFeeRate(0));\n+    TestMemPoolEntryHelper entry;\n+    entry.hadNoDependencies = true;\n \n     /* 3rd highest fee */\n     CMutableTransaction tx1 = CMutableTransaction();\n     tx1.vout.resize(1);\n     tx1.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx1.vout[0].nValue = 10 * COIN;\n-    pool.addUnchecked(tx1.GetHash(), CTxMemPoolEntry(tx1, 10000LL, 0, 10.0, 1, true));\n+    pool.addUnchecked(tx1.GetHash(), entry.Fee(10000LL).Priority(10.0).FromTx(tx1));\n \n     /* highest fee */\n     CMutableTransaction tx2 = CMutableTransaction();\n     tx2.vout.resize(1);\n     tx2.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx2.vout[0].nValue = 2 * COIN;\n-    pool.addUnchecked(tx2.GetHash(), CTxMemPoolEntry(tx2, 20000LL, 0, 9.0, 1, true));\n+    pool.addUnchecked(tx2.GetHash(), entry.Fee(20000LL).Priority(9.0).FromTx(tx2));\n \n     /* lowest fee */\n     CMutableTransaction tx3 = CMutableTransaction();\n     tx3.vout.resize(1);\n     tx3.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx3.vout[0].nValue = 5 * COIN;\n-    pool.addUnchecked(tx3.GetHash(), CTxMemPoolEntry(tx3, 0LL, 0, 100.0, 1, true));\n+    pool.addUnchecked(tx3.GetHash(), entry.Fee(0LL).Priority(100.0).FromTx(tx3));\n \n     /* 2nd highest fee */\n     CMutableTransaction tx4 = CMutableTransaction();\n     tx4.vout.resize(1);\n     tx4.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx4.vout[0].nValue = 6 * COIN;\n-    pool.addUnchecked(tx4.GetHash(), CTxMemPoolEntry(tx4, 15000LL, 0, 1.0, 1, true));\n+    pool.addUnchecked(tx4.GetHash(), entry.Fee(15000LL).Priority(1.0).FromTx(tx4));\n \n     /* equal fee rate to tx1, but newer */\n     CMutableTransaction tx5 = CMutableTransaction();\n     tx5.vout.resize(1);\n     tx5.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx5.vout[0].nValue = 11 * COIN;\n-    pool.addUnchecked(tx5.GetHash(), CTxMemPoolEntry(tx5, 10000LL, 1, 10.0, 1, true));\n+    entry.nTime = 1;\n+    entry.dPriority = 10.0;\n+    pool.addUnchecked(tx5.GetHash(), entry.Fee(10000LL).FromTx(tx5));\n     BOOST_CHECK_EQUAL(pool.size(), 5);\n \n     std::vector<std::string> sortedOrder;\n@@ -166,7 +171,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     tx6.vout.resize(1);\n     tx6.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx6.vout[0].nValue = 20 * COIN;\n-    pool.addUnchecked(tx6.GetHash(), CTxMemPoolEntry(tx6, 0LL, 1, 10.0, 1, true));\n+    pool.addUnchecked(tx6.GetHash(), entry.Fee(0LL).FromTx(tx6));\n     BOOST_CHECK_EQUAL(pool.size(), 6);\n     // Check that at this point, tx6 is sorted low\n     sortedOrder.insert(sortedOrder.begin(), tx6.GetHash().ToString());\n@@ -186,11 +191,10 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n \n     CTxMemPool::setEntries setAncestorsCalculated;\n     std::string dummy;\n-    CTxMemPoolEntry entry7(tx7, 2000000LL, 1, 10.0, 1, true);\n-    BOOST_CHECK_EQUAL(pool.CalculateMemPoolAncestors(entry7, setAncestorsCalculated, 100, 1000000, 1000, 1000000, dummy), true);\n+    BOOST_CHECK_EQUAL(pool.CalculateMemPoolAncestors(entry.Fee(2000000LL).FromTx(tx7), setAncestorsCalculated, 100, 1000000, 1000, 1000000, dummy), true);\n     BOOST_CHECK(setAncestorsCalculated == setAncestors);\n \n-    pool.addUnchecked(tx7.GetHash(), CTxMemPoolEntry(tx7, 2000000LL, 1, 10.0, 1, true), setAncestors);\n+    pool.addUnchecked(tx7.GetHash(), entry.FromTx(tx7), setAncestors);\n     BOOST_CHECK_EQUAL(pool.size(), 7);\n \n     // Now tx6 should be sorted higher (high fee child): tx7, tx6, tx2, ...\n@@ -208,7 +212,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     tx8.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx8.vout[0].nValue = 10 * COIN;\n     setAncestors.insert(pool.mapTx.find(tx7.GetHash()));\n-    pool.addUnchecked(tx8.GetHash(), CTxMemPoolEntry(tx8, 0LL, 2, 10.0, 1, true), setAncestors);\n+    pool.addUnchecked(tx8.GetHash(), entry.Fee(0LL).Time(2).FromTx(tx8), setAncestors);\n \n     // Now tx8 should be sorted low, but tx6/tx both high\n     sortedOrder.insert(sortedOrder.begin(), tx8.GetHash().ToString());\n@@ -222,7 +226,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     tx9.vout.resize(1);\n     tx9.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx9.vout[0].nValue = 1 * COIN;\n-    pool.addUnchecked(tx9.GetHash(), CTxMemPoolEntry(tx9, 0LL, 3, 10.0, 1, true), setAncestors);\n+    pool.addUnchecked(tx9.GetHash(), entry.Fee(0LL).Time(3).FromTx(tx9), setAncestors);\n \n     // tx9 should be sorted low\n     BOOST_CHECK_EQUAL(pool.size(), 9);\n@@ -245,11 +249,10 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     tx10.vout[0].nValue = 10 * COIN;\n \n     setAncestorsCalculated.clear();\n-    CTxMemPoolEntry entry10(tx10, 200000LL, 4, 10.0, 1, true);\n-    BOOST_CHECK_EQUAL(pool.CalculateMemPoolAncestors(entry10, setAncestorsCalculated, 100, 1000000, 1000, 1000000, dummy), true);\n+    BOOST_CHECK_EQUAL(pool.CalculateMemPoolAncestors(entry.Fee(200000LL).Time(4).FromTx(tx10), setAncestorsCalculated, 100, 1000000, 1000, 1000000, dummy), true);\n     BOOST_CHECK(setAncestorsCalculated == setAncestors);\n \n-    pool.addUnchecked(tx10.GetHash(), CTxMemPoolEntry(tx10, 200000LL, 4, 10.0, 1, true), setAncestors);\n+    pool.addUnchecked(tx10.GetHash(), entry.FromTx(tx10), setAncestors);\n \n     /**\n      *  tx8 and tx9 should both now be sorted higher\n@@ -284,22 +287,24 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n {\n     CTxMemPool pool(CFeeRate(1000));\n+    TestMemPoolEntryHelper entry;\n+    entry.dPriority = 10.0;\n \n     CMutableTransaction tx1 = CMutableTransaction();\n     tx1.vin.resize(1);\n     tx1.vin[0].scriptSig = CScript() << OP_1;\n     tx1.vout.resize(1);\n     tx1.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n     tx1.vout[0].nValue = 10 * COIN;\n-    pool.addUnchecked(tx1.GetHash(), CTxMemPoolEntry(tx1, 10000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx1)));\n+    pool.addUnchecked(tx1.GetHash(), entry.Fee(10000LL).FromTx(tx1, &pool));\n \n     CMutableTransaction tx2 = CMutableTransaction();\n     tx2.vin.resize(1);\n     tx2.vin[0].scriptSig = CScript() << OP_2;\n     tx2.vout.resize(1);\n     tx2.vout[0].scriptPubKey = CScript() << OP_2 << OP_EQUAL;\n     tx2.vout[0].nValue = 10 * COIN;\n-    pool.addUnchecked(tx2.GetHash(), CTxMemPoolEntry(tx2, 5000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx2)));\n+    pool.addUnchecked(tx2.GetHash(), entry.Fee(5000LL).FromTx(tx2, &pool));\n \n     pool.TrimToSize(pool.DynamicMemoryUsage()); // should do nothing\n     BOOST_CHECK(pool.exists(tx1.GetHash()));\n@@ -309,15 +314,15 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     BOOST_CHECK(pool.exists(tx1.GetHash()));\n     BOOST_CHECK(!pool.exists(tx2.GetHash()));\n \n-    pool.addUnchecked(tx2.GetHash(), CTxMemPoolEntry(tx2, 5000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx2)));\n+    pool.addUnchecked(tx2.GetHash(), entry.FromTx(tx2, &pool));\n     CMutableTransaction tx3 = CMutableTransaction();\n     tx3.vin.resize(1);\n     tx3.vin[0].prevout = COutPoint(tx2.GetHash(), 0);\n     tx3.vin[0].scriptSig = CScript() << OP_2;\n     tx3.vout.resize(1);\n     tx3.vout[0].scriptPubKey = CScript() << OP_3 << OP_EQUAL;\n     tx3.vout[0].nValue = 10 * COIN;\n-    pool.addUnchecked(tx3.GetHash(), CTxMemPoolEntry(tx3, 20000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx3)));\n+    pool.addUnchecked(tx3.GetHash(), entry.Fee(20000LL).FromTx(tx3, &pool));\n \n     pool.TrimToSize(pool.DynamicMemoryUsage() * 3 / 4); // tx3 should pay for tx2 (CPFP)\n     BOOST_CHECK(!pool.exists(tx1.GetHash()));\n@@ -380,10 +385,10 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     tx7.vout[1].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n     tx7.vout[1].nValue = 10 * COIN;\n \n-    pool.addUnchecked(tx4.GetHash(), CTxMemPoolEntry(tx4, 7000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx4)));\n-    pool.addUnchecked(tx5.GetHash(), CTxMemPoolEntry(tx5, 1000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx5)));\n-    pool.addUnchecked(tx6.GetHash(), CTxMemPoolEntry(tx6, 1100LL, 0, 10.0, 1, pool.HasNoInputsOf(tx6)));\n-    pool.addUnchecked(tx7.GetHash(), CTxMemPoolEntry(tx7, 9000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx7)));\n+    pool.addUnchecked(tx4.GetHash(), entry.Fee(7000LL).FromTx(tx4, &pool));\n+    pool.addUnchecked(tx5.GetHash(), entry.Fee(1000LL).FromTx(tx5, &pool));\n+    pool.addUnchecked(tx6.GetHash(), entry.Fee(1100LL).FromTx(tx6, &pool));\n+    pool.addUnchecked(tx7.GetHash(), entry.Fee(9000LL).FromTx(tx7, &pool));\n \n     // we only require this remove, at max, 2 txn, because its not clear what we're really optimizing for aside from that\n     pool.TrimToSize(pool.DynamicMemoryUsage() - 1);\n@@ -392,17 +397,17 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     BOOST_CHECK(!pool.exists(tx7.GetHash()));\n \n     if (!pool.exists(tx5.GetHash()))\n-        pool.addUnchecked(tx5.GetHash(), CTxMemPoolEntry(tx5, 1000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx5)));\n-    pool.addUnchecked(tx7.GetHash(), CTxMemPoolEntry(tx7, 9000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx7)));\n+        pool.addUnchecked(tx5.GetHash(), entry.Fee(1000LL).FromTx(tx5, &pool));\n+    pool.addUnchecked(tx7.GetHash(), entry.Fee(9000LL).FromTx(tx7, &pool));\n \n     pool.TrimToSize(pool.DynamicMemoryUsage() / 2); // should maximize mempool size by only removing 5/7\n     BOOST_CHECK(pool.exists(tx4.GetHash()));\n     BOOST_CHECK(!pool.exists(tx5.GetHash()));\n     BOOST_CHECK(pool.exists(tx6.GetHash()));\n     BOOST_CHECK(!pool.exists(tx7.GetHash()));\n \n-    pool.addUnchecked(tx5.GetHash(), CTxMemPoolEntry(tx5, 1000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx5)));\n-    pool.addUnchecked(tx7.GetHash(), CTxMemPoolEntry(tx7, 9000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx7)));\n+    pool.addUnchecked(tx5.GetHash(), entry.Fee(1000LL).FromTx(tx5, &pool));\n+    pool.addUnchecked(tx7.GetHash(), entry.Fee(9000LL).FromTx(tx7, &pool));\n \n     std::vector<CTransaction> vtx;\n     std::list<CTransaction> conflicts;"
      },
      {
        "sha": "dc20e34634ba1bb274e6d6a194c3c9b7b005f1db",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 12,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8df8a5077df673f1914f4a40bf54b126d13de1c/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8df8a5077df673f1914f4a40bf54b126d13de1c/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=e8df8a5077df673f1914f4a40bf54b126d13de1c",
        "patch": "@@ -65,6 +65,10 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     CMutableTransaction tx,tx2;\n     CScript script;\n     uint256 hash;\n+    TestMemPoolEntryHelper entry;\n+    entry.nFee = 11;\n+    entry.dPriority = 111.0;\n+    entry.nHeight = 11;\n \n     LOCK(cs_main);\n     fCheckpointsEnabled = false;\n@@ -114,7 +118,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     {\n         tx.vout[0].nValue -= 1000000;\n         hash = tx.GetHash();\n-        mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+        mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n@@ -134,7 +138,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     {\n         tx.vout[0].nValue -= 10000000;\n         hash = tx.GetHash();\n-        mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+        mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n@@ -143,7 +147,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     // orphan in mempool\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -153,15 +157,15 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].prevout.hash = txFirst[1]->GetHash();\n     tx.vout[0].nValue = 4900000000LL;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n     tx.vin[0].prevout.hash = hash;\n     tx.vin.resize(2);\n     tx.vin[1].scriptSig = CScript() << OP_1;\n     tx.vin[1].prevout.hash = txFirst[0]->GetHash();\n     tx.vin[1].prevout.n = 0;\n     tx.vout[0].nValue = 5900000000LL;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -172,7 +176,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].scriptSig = CScript() << OP_0 << OP_1;\n     tx.vout[0].nValue = 0;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -185,12 +189,12 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     script = CScript() << OP_0;\n     tx.vout[0].scriptPubKey = GetScriptForDestination(CScriptID(script));\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n     tx.vin[0].prevout.hash = hash;\n     tx.vin[0].scriptSig = CScript() << (std::vector<unsigned char>)script;\n     tx.vout[0].nValue -= 1000000;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -201,10 +205,10 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = 4900000000LL;\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n     tx.vout[0].scriptPubKey = CScript() << OP_2;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -230,7 +234,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n     tx.nLockTime = chainActive.Tip()->nHeight+1;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n     BOOST_CHECK(!CheckFinalTx(tx, LOCKTIME_MEDIAN_TIME_PAST));\n \n     // time locked\n@@ -244,7 +248,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx2.vout[0].scriptPubKey = CScript() << OP_1;\n     tx2.nLockTime = chainActive.Tip()->GetMedianTimePast()+1;\n     hash = tx2.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx2, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx2));\n     BOOST_CHECK(!CheckFinalTx(tx2, LOCKTIME_MEDIAN_TIME_PAST));\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));"
      },
      {
        "sha": "c4f6660f6aed9c237013a4d6d5b89b2a9faa1796",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8df8a5077df673f1914f4a40bf54b126d13de1c/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8df8a5077df673f1914f4a40bf54b126d13de1c/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=e8df8a5077df673f1914f4a40bf54b126d13de1c",
        "patch": "@@ -16,6 +16,7 @@ BOOST_FIXTURE_TEST_SUITE(policyestimator_tests, BasicTestingSetup)\n BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n {\n     CTxMemPool mpool(CFeeRate(1000));\n+    TestMemPoolEntryHelper entry;\n     CAmount basefee(2000);\n     double basepri = 1e6;\n     CAmount deltaFee(100);\n@@ -63,7 +64,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n             for (int k = 0; k < 5; k++) { // add 4 fee txs for every priority tx\n                 tx.vin[0].prevout.n = 10000*blocknum+100*j+k; // make transaction unique\n                 uint256 hash = tx.GetHash();\n-                mpool.addUnchecked(hash, CTxMemPoolEntry(tx, feeV[k/4][j], GetTime(), priV[k/4][j], blocknum, mpool.HasNoInputsOf(tx)));\n+                mpool.addUnchecked(hash, entry.Fee(feeV[k/4][j]).Time(GetTime()).Priority(priV[k/4][j]).Height(blocknum).FromTx(tx, &mpool));\n                 txHashes[j].push_back(hash);\n             }\n         }\n@@ -132,7 +133,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n             for (int k = 0; k < 5; k++) { // add 4 fee txs for every priority tx\n                 tx.vin[0].prevout.n = 10000*blocknum+100*j+k;\n                 uint256 hash = tx.GetHash();\n-                mpool.addUnchecked(hash, CTxMemPoolEntry(tx, feeV[k/4][j], GetTime(), priV[k/4][j], blocknum, mpool.HasNoInputsOf(tx)));\n+                mpool.addUnchecked(hash, entry.Fee(feeV[k/4][j]).Time(GetTime()).Priority(priV[k/4][j]).Height(blocknum).FromTx(tx, &mpool));\n                 txHashes[j].push_back(hash);\n             }\n         }\n@@ -168,7 +169,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n             for (int k = 0; k < 5; k++) { // add 4 fee txs for every priority tx\n                 tx.vin[0].prevout.n = 10000*blocknum+100*j+k;\n                 uint256 hash = tx.GetHash();\n-                mpool.addUnchecked(hash, CTxMemPoolEntry(tx, feeV[k/4][j], GetTime(), priV[k/4][j], blocknum, mpool.HasNoInputsOf(tx)));\n+                mpool.addUnchecked(hash, entry.Fee(feeV[k/4][j]).Time(GetTime()).Priority(priV[k/4][j]).Height(blocknum).FromTx(tx, &mpool));\n                 CTransaction btx;\n                 if (mpool.lookup(hash, btx))\n                     block.push_back(btx);"
      },
      {
        "sha": "9a3517a27b467f104aafe8f0e1b4f612d2d64a90",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8df8a5077df673f1914f4a40bf54b126d13de1c/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8df8a5077df673f1914f4a40bf54b126d13de1c/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=e8df8a5077df673f1914f4a40bf54b126d13de1c",
        "patch": "@@ -15,6 +15,7 @@\n #include \"pubkey.h\"\n #include \"random.h\"\n #include \"txdb.h\"\n+#include \"txmempool.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n #ifdef ENABLE_WALLET\n@@ -140,6 +141,12 @@ TestChain100Setup::~TestChain100Setup()\n {\n }\n \n+\n+CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(CMutableTransaction &tx, CTxMemPool *pool) {\n+    return CTxMemPoolEntry(tx, nFee, nTime, dPriority, nHeight,\n+                           pool ? pool->HasNoInputsOf(tx) : hadNoDependencies);\n+}\n+\n void Shutdown(void* parg)\n {\n   exit(0);"
      },
      {
        "sha": "815b2274117c78d7e26ade9269a6e8ded39fe589",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8df8a5077df673f1914f4a40bf54b126d13de1c/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8df8a5077df673f1914f4a40bf54b126d13de1c/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=e8df8a5077df673f1914f4a40bf54b126d13de1c",
        "patch": "@@ -54,4 +54,29 @@ struct TestChain100Setup : public TestingSetup {\n     CKey coinbaseKey; // private/public key needed to spend coinbase transactions\n };\n \n+class CTxMemPoolEntry;\n+class CTxMemPool;\n+\n+struct TestMemPoolEntryHelper\n+{\n+    // Default values\n+    CAmount nFee;\n+    int64_t nTime;\n+    double dPriority;\n+    unsigned int nHeight;\n+    bool hadNoDependencies;\n+\n+    TestMemPoolEntryHelper() :\n+        nFee(0), nTime(0), dPriority(0.0), nHeight(1),\n+        hadNoDependencies(false) { }\n+\n+    CTxMemPoolEntry FromTx(CMutableTransaction &tx, CTxMemPool *pool = NULL);\n+\n+    // Change the default value\n+    TestMemPoolEntryHelper &Fee(CAmount _fee) { nFee = _fee; return *this; }\n+    TestMemPoolEntryHelper &Time(int64_t _time) { nTime = _time; return *this; }\n+    TestMemPoolEntryHelper &Priority(double _priority) { dPriority = _priority; return *this; }\n+    TestMemPoolEntryHelper &Height(unsigned int _height) { nHeight = _height; return *this; }\n+    TestMemPoolEntryHelper &HadNoDependencies(bool _hnd) { hadNoDependencies = _hnd; return *this; }\n+};\n #endif"
      }
    ]
  },
  {
    "sha": "2aa49ce9fe618bda9bf70fd57b23fe4802f0aeff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYWE0OWNlOWZlNjE4YmRhOWJmNzBmZDU3YjIzZmU0ODAyZjBhZWZm",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-11-17T20:29:42Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-11-17T20:31:00Z"
      },
      "message": "Bugfix: Use unique autostart filenames on Linux for testnet/regtest",
      "tree": {
        "sha": "4e821e3b10d6a5f1b3e1db74595f776d04111aee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e821e3b10d6a5f1b3e1db74595f776d04111aee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2aa49ce9fe618bda9bf70fd57b23fe4802f0aeff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2aa49ce9fe618bda9bf70fd57b23fe4802f0aeff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2aa49ce9fe618bda9bf70fd57b23fe4802f0aeff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2aa49ce9fe618bda9bf70fd57b23fe4802f0aeff/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "67d4cbab461260cd51386a16a1a34bb9161e73a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67d4cbab461260cd51386a16a1a34bb9161e73a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67d4cbab461260cd51386a16a1a34bb9161e73a8"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9600a54c46705735e02a68722c8885cf2718f64d",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aa49ce9fe618bda9bf70fd57b23fe4802f0aeff/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aa49ce9fe618bda9bf70fd57b23fe4802f0aeff/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=2aa49ce9fe618bda9bf70fd57b23fe4802f0aeff",
        "patch": "@@ -354,7 +354,10 @@ boost::filesystem::path static GetAutostartDir()\n \n boost::filesystem::path static GetAutostartFilePath()\n {\n-    return GetAutostartDir() / \"bitcoin.desktop\";\n+    std::string chain = ChainNameFromCommandLine();\n+    if (chain == CBaseChainParams::MAIN)\n+        return GetAutostartDir() / \"bitcoin.desktop\";\n+    return GetAutostartDir() / strprintf(\"bitcoin-%s.lnk\", chain);\n }\n \n bool GetStartOnSystemStartup()"
      }
    ]
  },
  {
    "sha": "013a364138f7d318998643af1bbc749dc8c5a29c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTNhMzY0MTM4ZjdkMzE4OTk4NjQzYWYxYmJjNzQ5ZGM4YzVhMjlj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-17T22:11:09Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-17T22:11:09Z"
      },
      "message": "[contrib] Delete test-patches",
      "tree": {
        "sha": "556179e8388d44239794735c84aaf4543e6e3bfc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/556179e8388d44239794735c84aaf4543e6e3bfc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/013a364138f7d318998643af1bbc749dc8c5a29c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/013a364138f7d318998643af1bbc749dc8c5a29c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/013a364138f7d318998643af1bbc749dc8c5a29c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/013a364138f7d318998643af1bbc749dc8c5a29c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e54ebbf6009716a7abcd4d8d3f7bd910e88decdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 0,
      "deletions": 27
    },
    "files": [
      {
        "sha": "def40b0d6c2a5459ce26df10258a0485ecdb5bd1",
        "filename": "contrib/test-patches/README.md",
        "status": "removed",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc/contrib/test-patches/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc/contrib/test-patches/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/test-patches/README.md?ref=e54ebbf6009716a7abcd4d8d3f7bd910e88decdc",
        "patch": "@@ -1,7 +0,0 @@\n-### Test Patches ###\n-\n-These patches are applied when the automated pull-tester\n-tests each pull and when master is tested using jenkins.\n-You can find more information about the tests run at\n-[http://jenkins.bluematt.me/pull-tester/files/\n-](http://jenkins.bluematt.me/pull-tester/files/)\n\\ No newline at end of file"
      },
      {
        "sha": "1cd043d0d7739e927c297ec93afad552525aed7b",
        "filename": "contrib/test-patches/temp-revert-2.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc/contrib/test-patches/temp-revert-2.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc/contrib/test-patches/temp-revert-2.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/test-patches/temp-revert-2.patch?ref=e54ebbf6009716a7abcd4d8d3f7bd910e88decdc",
        "patch": "@@ -1,20 +0,0 @@\n-commit cfae26916dba311f6f75d444301c1f9362267c3e\n-Author: Matt Corallo <git@bluematt.me>\n-Date:   Sun Mar 24 20:45:50 2013 -0400\n-\n-    Revert \"Checkpoint at first block in 11 March chain fork\"\n-    \n-    This reverts commit f817c496a1482d05b22c8e539de67f07db1c09d9.\n-\n-diff --git a/src/checkpoints.cpp b/src/checkpoints.cpp\n-index 62234b9..9b11f0b 100644\n---- a/src/checkpoints.cpp\n-+++ b/src/checkpoints.cpp\n-@@ -44,7 +44,6 @@ namespace Checkpoints\n-         (193000, uint256(\"0x000000000000059f452a5f7340de6682a977387c17010ff6e6c3bd83ca8b1317\"))\n-         (210000, uint256(\"0x000000000000048b95347e83192f69cf0366076336c639f9b7228e9ba171342e\"))\n-         (216116, uint256(\"0x00000000000001b4f4b433e81ee46494af945cf96014816a4e2370f11b23df4e\"))\n--        (225430, uint256(\"0x00000000000001c108384350f74090433e7fcf79a606b8e797f065b130575932\"))\n-         ;\n-     static const CCheckpointData data = {\n-         &mapCheckpoints,"
      }
    ]
  },
  {
    "sha": "e855b0152fa9d23fd49ccdd1b8e9427826b44a67",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODU1YjAxNTJmYTlkMjNmZDQ5Y2NkZDFiOGU5NDI3ODI2YjQ0YTY3",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-18T03:23:39Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-18T03:23:39Z"
      },
      "message": "Fix debug log message for block files",
      "tree": {
        "sha": "c21affcfa0880034362adeaa3d7b54704eda2a1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c21affcfa0880034362adeaa3d7b54704eda2a1c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e855b0152fa9d23fd49ccdd1b8e9427826b44a67",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e855b0152fa9d23fd49ccdd1b8e9427826b44a67",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e855b0152fa9d23fd49ccdd1b8e9427826b44a67",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e855b0152fa9d23fd49ccdd1b8e9427826b44a67/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8df8a5077df673f1914f4a40bf54b126d13de1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8df8a5077df673f1914f4a40bf54b126d13de1c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8df8a5077df673f1914f4a40bf54b126d13de1c"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "86bf957436b86f38ddd9c27a203d90231ad52895",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e855b0152fa9d23fd49ccdd1b8e9427826b44a67/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e855b0152fa9d23fd49ccdd1b8e9427826b44a67/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e855b0152fa9d23fd49ccdd1b8e9427826b44a67",
        "patch": "@@ -2579,7 +2579,7 @@ bool FindBlockPos(CValidationState &state, CDiskBlockPos &pos, unsigned int nAdd\n \n     if ((int)nFile != nLastBlockFile) {\n         if (!fKnown) {\n-            LogPrintf(\"Leaving block file %i: %s\\n\", nFile, vinfoBlockFile[nFile].ToString());\n+            LogPrintf(\"Leaving block file %i: %s\\n\", nLastBlockFile, vinfoBlockFile[nLastBlockFile].ToString());\n         }\n         FlushBlockFile(!fKnown);\n         nLastBlockFile = nFile;"
      }
    ]
  },
  {
    "sha": "f3ea48ad8b85125b786fb31584107e262abb7985",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmM2VhNDhhZDhiODUxMjViNzg2ZmIzMTU4NDEwN2UyNjJhYmI3OTg1",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-18T08:17:44Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-18T08:18:03Z"
      },
      "message": "Merge pull request #7050\n\ne855b01 Fix debug log message for block files (Alex Morcos)",
      "tree": {
        "sha": "c21affcfa0880034362adeaa3d7b54704eda2a1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c21affcfa0880034362adeaa3d7b54704eda2a1c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3ea48ad8b85125b786fb31584107e262abb7985",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCAAGBQJWTDQ7AAoJEOq1r5TZ6avn9vIP/RTYc5KsPD8qbIeOg3LC2jYF\ndV7oyzv+xQG5z94zwQ5jlrT8bhnzH3TzCdgVkQMWBGQwnSCDVOKRNnRkX0/91jTI\nTZzES/kTyjmn9FA75XaFAFDle+MYtxxqSaoPvqrU9Z+ykRHZ3ogooO2d03nPB9yM\nun/8KFTH1Ho0pTFw2kwbqjZON1G9S6Ikt1wRMhXXR4UaT30pmpdlT5+J+owb/JqL\nIoCYasVj/GtWqkBv6hFVA/i/aT8X76+aW257OrzpiL3Eto+WZ/p7MNC3FqA0LIfc\nTI0bt3JKSZomGeSc8FuNmsYjGYiaRGRkl+DZ7/Vw1RDc0YQduzBCc9xeX3pR5ihM\nvNe3A4VbDF2qyoXTbGVjawc0gK6SIJAKNOfdKz8gT9KdNfrvgIRCWnVlxbaXmN5y\nU2wvvW633h5IWyDyo9rYOQik8pwNnvgtY0Frt+Z5siWjS2rC72i9d5ui6ZHa85Pr\nPFU/4SSNQMG9ny3xVPv1eAiIjuS3MdYhGbZLdidWlzA+MGkSmiwhNpERgstySW7C\nPB6K4MRPXiXYKlxmw7+o8ODuoop5qNMBcVycFlrZZxhwDeu9nmCZ8Qo8yM6G9/bO\n7ggF9U3iKOeHKaFFL9NcTo8vgXvJp7eluMEtj1kHHMhGK7aXr3N+pr3STrN5NC8B\nRI5tHtfRcGY8DNRl8jSl\n=sav2\n-----END PGP SIGNATURE-----",
        "payload": "tree c21affcfa0880034362adeaa3d7b54704eda2a1c\nparent e8df8a5077df673f1914f4a40bf54b126d13de1c\nparent e855b0152fa9d23fd49ccdd1b8e9427826b44a67\nauthor Gregory Maxwell <greg@xiph.org> 1447834664 -0800\ncommitter Gregory Maxwell <greg@xiph.org> 1447834683 -0800\n\nMerge pull request #7050\n\ne855b01 Fix debug log message for block files (Alex Morcos)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3ea48ad8b85125b786fb31584107e262abb7985",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f3ea48ad8b85125b786fb31584107e262abb7985",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3ea48ad8b85125b786fb31584107e262abb7985/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8df8a5077df673f1914f4a40bf54b126d13de1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8df8a5077df673f1914f4a40bf54b126d13de1c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8df8a5077df673f1914f4a40bf54b126d13de1c"
      },
      {
        "sha": "e855b0152fa9d23fd49ccdd1b8e9427826b44a67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e855b0152fa9d23fd49ccdd1b8e9427826b44a67",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e855b0152fa9d23fd49ccdd1b8e9427826b44a67"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "86bf957436b86f38ddd9c27a203d90231ad52895",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3ea48ad8b85125b786fb31584107e262abb7985/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3ea48ad8b85125b786fb31584107e262abb7985/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f3ea48ad8b85125b786fb31584107e262abb7985",
        "patch": "@@ -2579,7 +2579,7 @@ bool FindBlockPos(CValidationState &state, CDiskBlockPos &pos, unsigned int nAdd\n \n     if ((int)nFile != nLastBlockFile) {\n         if (!fKnown) {\n-            LogPrintf(\"Leaving block file %i: %s\\n\", nFile, vinfoBlockFile[nFile].ToString());\n+            LogPrintf(\"Leaving block file %i: %s\\n\", nLastBlockFile, vinfoBlockFile[nLastBlockFile].ToString());\n         }\n         FlushBlockFile(!fKnown);\n         nLastBlockFile = nFile;"
      }
    ]
  },
  {
    "sha": "7f8e90da335e851b8ec11e994a7da729ac73ef68",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZjhlOTBkYTMzNWU4NTFiOGVjMTFlOTk0YTdkYTcyOWFjNzNlZjY4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-18T08:49:55Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-18T08:50:07Z"
      },
      "message": "Merge pull request #7030\n\n013a364 [contrib] Delete test-patches (MarcoFalke)",
      "tree": {
        "sha": "8d08576e753c0c79a3dddac32d5da4855fe330fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d08576e753c0c79a3dddac32d5da4855fe330fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f8e90da335e851b8ec11e994a7da729ac73ef68",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWTDu/AAoJEHSBCwEjRsmmvxQH/2UBo1aqFk6bLhoUYful8Oz9\ncUGbs3uL9uGhdO+pXUSeaf/WbsV6qbmOAVfrtxxw5KJo4jn3eCrza9nlU65mIJZV\nppOUcbDFycaga5nQgEiFjAI8WHS+z/Ppd/ID0+V7lRafk1SiyPUN6nRh+ezQ7Quv\n3Nqs2+43gjceeN6mGrCdnm2NpGgPjzwktoDC2RecPHPZfjWB/VFYI2Ho/yDSpe/j\nlVs+qiZsx8OyC2nXqaYtDebyxrPiRxNGIIDkeh6vCO8eMw6F4AMzWQxE1TOikRsE\ng7j7+oTEv2ELA7wp8P3vOlSF/3TQ5JhHytzbcKF2VmuAwDZH1/ZuzOJvxhObM4g=\n=d4Yq\n-----END PGP SIGNATURE-----",
        "payload": "tree 8d08576e753c0c79a3dddac32d5da4855fe330fe\nparent f3ea48ad8b85125b786fb31584107e262abb7985\nparent 013a364138f7d318998643af1bbc749dc8c5a29c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1447836595 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1447836607 +0100\n\nMerge pull request #7030\n\n013a364 [contrib] Delete test-patches (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f8e90da335e851b8ec11e994a7da729ac73ef68",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f8e90da335e851b8ec11e994a7da729ac73ef68",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f8e90da335e851b8ec11e994a7da729ac73ef68/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f3ea48ad8b85125b786fb31584107e262abb7985",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3ea48ad8b85125b786fb31584107e262abb7985",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f3ea48ad8b85125b786fb31584107e262abb7985"
      },
      {
        "sha": "013a364138f7d318998643af1bbc749dc8c5a29c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/013a364138f7d318998643af1bbc749dc8c5a29c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/013a364138f7d318998643af1bbc749dc8c5a29c"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 0,
      "deletions": 27
    },
    "files": [
      {
        "sha": "def40b0d6c2a5459ce26df10258a0485ecdb5bd1",
        "filename": "contrib/test-patches/README.md",
        "status": "removed",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3ea48ad8b85125b786fb31584107e262abb7985/contrib/test-patches/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3ea48ad8b85125b786fb31584107e262abb7985/contrib/test-patches/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/test-patches/README.md?ref=f3ea48ad8b85125b786fb31584107e262abb7985",
        "patch": "@@ -1,7 +0,0 @@\n-### Test Patches ###\n-\n-These patches are applied when the automated pull-tester\n-tests each pull and when master is tested using jenkins.\n-You can find more information about the tests run at\n-[http://jenkins.bluematt.me/pull-tester/files/\n-](http://jenkins.bluematt.me/pull-tester/files/)\n\\ No newline at end of file"
      },
      {
        "sha": "1cd043d0d7739e927c297ec93afad552525aed7b",
        "filename": "contrib/test-patches/temp-revert-2.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3ea48ad8b85125b786fb31584107e262abb7985/contrib/test-patches/temp-revert-2.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3ea48ad8b85125b786fb31584107e262abb7985/contrib/test-patches/temp-revert-2.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/test-patches/temp-revert-2.patch?ref=f3ea48ad8b85125b786fb31584107e262abb7985",
        "patch": "@@ -1,20 +0,0 @@\n-commit cfae26916dba311f6f75d444301c1f9362267c3e\n-Author: Matt Corallo <git@bluematt.me>\n-Date:   Sun Mar 24 20:45:50 2013 -0400\n-\n-    Revert \"Checkpoint at first block in 11 March chain fork\"\n-    \n-    This reverts commit f817c496a1482d05b22c8e539de67f07db1c09d9.\n-\n-diff --git a/src/checkpoints.cpp b/src/checkpoints.cpp\n-index 62234b9..9b11f0b 100644\n---- a/src/checkpoints.cpp\n-+++ b/src/checkpoints.cpp\n-@@ -44,7 +44,6 @@ namespace Checkpoints\n-         (193000, uint256(\"0x000000000000059f452a5f7340de6682a977387c17010ff6e6c3bd83ca8b1317\"))\n-         (210000, uint256(\"0x000000000000048b95347e83192f69cf0366076336c639f9b7228e9ba171342e\"))\n-         (216116, uint256(\"0x00000000000001b4f4b433e81ee46494af945cf96014816a4e2370f11b23df4e\"))\n--        (225430, uint256(\"0x00000000000001c108384350f74090433e7fcf79a606b8e797f065b130575932\"))\n-         ;\n-     static const CCheckpointData data = {\n-         &mapCheckpoints,"
      }
    ]
  },
  {
    "sha": "e16ee1cd1e1fd604ab9c2c4a715166d3fb40a53b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTZlZTFjZDFlMWZkNjA0YWI5YzJjNGE3MTUxNjZkM2ZiNDBhNTNi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-17T23:26:07Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-18T10:59:12Z"
      },
      "message": "[qa] Extend README.md",
      "tree": {
        "sha": "07f4fbb374397226d6d4c1469f0aeba6f1edd7a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07f4fbb374397226d6d4c1469f0aeba6f1edd7a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e16ee1cd1e1fd604ab9c2c4a715166d3fb40a53b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e16ee1cd1e1fd604ab9c2c4a715166d3fb40a53b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e16ee1cd1e1fd604ab9c2c4a715166d3fb40a53b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e16ee1cd1e1fd604ab9c2c4a715166d3fb40a53b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cc975745d585edf6ae3a9313f45da6dbdee16cf6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc975745d585edf6ae3a9313f45da6dbdee16cf6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cc975745d585edf6ae3a9313f45da6dbdee16cf6"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 18,
      "deletions": 6
    },
    "files": [
      {
        "sha": "b40ad0e3967b98021e9bf36fd8f381aefd5dbe76",
        "filename": "README.md",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e16ee1cd1e1fd604ab9c2c4a715166d3fb40a53b/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e16ee1cd1e1fd604ab9c2c4a715166d3fb40a53b/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=e16ee1cd1e1fd604ab9c2c4a715166d3fb40a53b",
        "patch": "@@ -49,9 +49,10 @@ lots of money.\n ### Automated Testing\n \n Developers are strongly encouraged to write unit tests for new code, and to\n-submit new unit tests for old code. Unit tests can be compiled and run (assuming they weren't disabled in configure) with: `make check`\n+submit new unit tests for old code. Unit tests can be compiled and run\n+(assuming they weren't disabled in configure) with: `make check`\n \n-There are also regression and integration tests of the RPC interface, written\n+There are also [regression and integration tests](/qa) of the RPC interface, written\n in Python, that are run automatically on the build server.\n These tests can be run with: `qa/pull-tester/rpc-tests.py`\n "
      },
      {
        "sha": "758d1f47e5ec658cceeb96d9c8e3e06a14fe993e",
        "filename": "qa/README.md",
        "status": "modified",
        "additions": 15,
        "deletions": 4,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e16ee1cd1e1fd604ab9c2c4a715166d3fb40a53b/qa/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e16ee1cd1e1fd604ab9c2c4a715166d3fb40a53b/qa/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/README.md?ref=e16ee1cd1e1fd604ab9c2c4a715166d3fb40a53b",
        "patch": "@@ -1,5 +1,12 @@\n-Notes\n-=====\n+The [pull-tester](/qa/pull-tester/) folder contains a script to call\n+multiple tests from the [rpc-tests](/qa/rpc-tests/) folder.\n+\n+Every pull request to the bitcoin repository is built and run through\n+the regression test suite. You can also run all or only individual\n+tests locally.\n+\n+Running tests\n+=============\n \n You can run any single test by calling `qa/pull-tester/rpc-tests.py <testname>`.\n \n@@ -23,7 +30,8 @@ Possible options:\n                         Write tested RPC commands into this directory\n ```\n \n-If you set the environment variable `PYTHON_DEBUG=1` you will get some debug output (example: `PYTHON_DEBUG=1 qa/pull-tester/rpc-tests.py wallet`). \n+If you set the environment variable `PYTHON_DEBUG=1` you will get some debug\n+output (example: `PYTHON_DEBUG=1 qa/pull-tester/rpc-tests.py wallet`).\n \n A 200-block -regtest blockchain and wallets for four nodes\n is created the first time a regression test is run and\n@@ -42,5 +50,8 @@ rm -rf cache\n killall bitcoind\n ```\n \n+Writing tests\n+=============\n+You are encouraged to write tests for new or existing features.\n Further information about the test framework and individual rpc\n-tests is found in [qa/rpc-tests/README.md](/qa/rpc-tests/README.md).\n+tests is found in [qa/rpc-tests](/qa/rpc-tests)."
      }
    ]
  },
  {
    "sha": "2a8e8c2e3721c8cf560f08873b90265f8ab1a83b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYThlOGMyZTM3MjFjOGNmNTYwZjA4ODczYjkwMjY1ZjhhYjFhODNi",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-18T13:02:14Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-18T13:02:14Z"
      },
      "message": "[Qt] don't allow to store invalid proxy ports",
      "tree": {
        "sha": "1153ab88905ec200e07cd551a0e5b1cc667ebcec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1153ab88905ec200e07cd551a0e5b1cc667ebcec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a8e8c2e3721c8cf560f08873b90265f8ab1a83b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWTHbcAAoJECnUvLZBb1Ps8XwQAKGXFeWY4OlTYeEo3lUUoEV6\nzOwTYzYWVlO4af2f5XqaxUICoOx7depgZ4CPgLafjC44OBAKa4348hZk6FH/tpVO\nekv8kUZw7BX2oHVDfOP9UUUa5TnTU9qihpWmyHpoAMQAODMauDTh7z6FKlbnZ2bf\nXZS/SHXol/plFm1COmP/GyHJrO5ejCWv4tTVasam0ya4KrDQ0NBBj2SXd+37nalr\nJN8I7jVyVBET+UG2x3Ay7Bdp6vCKuF6YF8IbyT2fFiygZBZk8upFidyUg+zPR4AC\nHOBE89jrjQo23NpUa048GpdIc6jTdAY1a17opYInlKcojiIlQhbyp6WDPHt0uSNV\n5jNRyferlY9zzir0X94/5cxyx+DElSnyv9xE42Wv9zEAJDtzyUdyr7SGAppjOkkO\nraVyIC2h+/IHwcHdfVoVzt1SNYAAUg40uyKcZldeMHFuadnuv7e2fyrXWPUZHbK5\nfghPXHE7Zqb6DufXxHFo2m70r4vwDl2pUT2ssJBpK/bjeymv8cYa0aRkzARkHsRk\nOkBWiXeVDYMa5D9GnnztnEWlbtrqqMp1z5B1rbtcHx7UEKi1Qhg32tle2InHzaLB\nuHm+IVKfq0GoqUuc38DbFbNOxBiomH28BBEU0TFmirpA0ikqpS43iEcwWHjroov9\n0ZgrFInsMbYE3pjM1/Cb\n=n8Gl\n-----END PGP SIGNATURE-----",
        "payload": "tree 1153ab88905ec200e07cd551a0e5b1cc667ebcec\nparent d16d1b72d1b5bd7e71c0f03358f13711bccf3dc1\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1447851734 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1447851734 +0100\n\n[Qt] don't allow to store invalid proxy ports\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a8e8c2e3721c8cf560f08873b90265f8ab1a83b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a8e8c2e3721c8cf560f08873b90265f8ab1a83b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a8e8c2e3721c8cf560f08873b90265f8ab1a83b/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d16d1b72d1b5bd7e71c0f03358f13711bccf3dc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d16d1b72d1b5bd7e71c0f03358f13711bccf3dc1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d16d1b72d1b5bd7e71c0f03358f13711bccf3dc1"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 10,
      "deletions": 5
    },
    "files": [
      {
        "sha": "647c860bdc7ec3b0e18d7772444d0328bbaa1e59",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a8e8c2e3721c8cf560f08873b90265f8ab1a83b/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a8e8c2e3721c8cf560f08873b90265f8ab1a83b/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=2a8e8c2e3721c8cf560f08873b90265f8ab1a83b",
        "patch": "@@ -59,9 +59,11 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n \n     connect(ui->connectSocks, SIGNAL(toggled(bool)), ui->proxyIp, SLOT(setEnabled(bool)));\n     connect(ui->connectSocks, SIGNAL(toggled(bool)), ui->proxyPort, SLOT(setEnabled(bool)));\n+    connect(ui->connectSocks, SIGNAL(toggled(bool)), this, SLOT(updateProxyValidationState()));\n \n     connect(ui->connectSocksTor, SIGNAL(toggled(bool)), ui->proxyIpTor, SLOT(setEnabled(bool)));\n     connect(ui->connectSocksTor, SIGNAL(toggled(bool)), ui->proxyPortTor, SLOT(setEnabled(bool)));\n+    connect(ui->connectSocksTor, SIGNAL(toggled(bool)), this, SLOT(updateProxyValidationState()));\n \n     /* Window elements init */\n #ifdef Q_OS_MAC\n@@ -117,8 +119,10 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     /* setup/change UI elements when proxy IPs are invalid/valid */\n     ui->proxyIp->setCheckValidator(new ProxyAddressValidator(parent));\n     ui->proxyIpTor->setCheckValidator(new ProxyAddressValidator(parent));\n-    connect(ui->proxyIp, SIGNAL(validationDidChange(QValidatedLineEdit *)), this, SLOT(updateProxyValidationState(QValidatedLineEdit *)));\n-    connect(ui->proxyIpTor, SIGNAL(validationDidChange(QValidatedLineEdit *)), this, SLOT(updateProxyValidationState(QValidatedLineEdit *)));\n+    connect(ui->proxyIp, SIGNAL(validationDidChange(QValidatedLineEdit *)), this, SLOT(updateProxyValidationState()));\n+    connect(ui->proxyIpTor, SIGNAL(validationDidChange(QValidatedLineEdit *)), this, SLOT(updateProxyValidationState()));\n+    connect(ui->proxyPort, SIGNAL(textChanged(const QString&)), this, SLOT(updateProxyValidationState()));\n+    connect(ui->proxyPortTor, SIGNAL(textChanged(const QString&)), this, SLOT(updateProxyValidationState()));\n }\n \n OptionsDialog::~OptionsDialog()\n@@ -256,10 +260,11 @@ void OptionsDialog::clearStatusLabel()\n     ui->statusLabel->clear();\n }\n \n-void OptionsDialog::updateProxyValidationState(QValidatedLineEdit *pUiProxyIp)\n+void OptionsDialog::updateProxyValidationState()\n {\n+    QValidatedLineEdit *pUiProxyIp = ui->proxyIp;\n     QValidatedLineEdit *otherProxyWidget = (pUiProxyIp == ui->proxyIpTor) ? ui->proxyIp : ui->proxyIpTor;\n-    if (pUiProxyIp->isValid())\n+    if (pUiProxyIp->isValid() && (!ui->proxyPort->isEnabled() || ui->proxyPort->text().toInt() > 0) && (!ui->proxyPortTor->isEnabled() || ui->proxyPortTor->text().toInt() > 0))\n     {\n         setOkButtonState(otherProxyWidget->isValid()); //only enable ok button if both proxys are valid\n         ui->statusLabel->clear();"
      },
      {
        "sha": "489e35da49248bd546bdc03022488e1afe4f4bba",
        "filename": "src/qt/optionsdialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a8e8c2e3721c8cf560f08873b90265f8ab1a83b/src/qt/optionsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a8e8c2e3721c8cf560f08873b90265f8ab1a83b/src/qt/optionsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.h?ref=2a8e8c2e3721c8cf560f08873b90265f8ab1a83b",
        "patch": "@@ -52,7 +52,7 @@ private Q_SLOTS:\n \n     void showRestartWarning(bool fPersistent = false);\n     void clearStatusLabel();\n-    void updateProxyValidationState(QValidatedLineEdit *pUiProxyIp);\n+    void updateProxyValidationState();\n     /* query the networks, for which the default proxy is used */\n     void updateDefaultProxyNets();\n "
      }
    ]
  },
  {
    "sha": "03403d8c0f3b40f04ef9fac8781ac8e19ed304ec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzQwM2Q4YzBmM2I0MGYwNGVmOWZhYzg3ODFhYzhlMTllZDMwNGVj",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-18T13:27:46Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-18T13:28:21Z"
      },
      "message": "Merge pull request #6951\n\n513686d [qt] Use maxTxFee instead of 10000000 (MarcoFalke)",
      "tree": {
        "sha": "336800fa8312fd613f9529baa8018e611ebc8d50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/336800fa8312fd613f9529baa8018e611ebc8d50"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03403d8c0f3b40f04ef9fac8781ac8e19ed304ec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWTHz1AAoJECnUvLZBb1Pspn0P/jjWFpZ8uahczja3EXFz7FB2\nor58iZlLNuuG07xG2psarM1lJcbBclkhzuq5JRBJdzBLgI/e72ED46koRIv96hzB\nQ2AsIAK0C7uwY5c1YDF+/i+tUyJanCN/7U43OdE2+6kDI1Znf9619BdlWRW9qgBe\nT/0NwbXqktPK+4Bkw58S5pYnFXaj/dmmw4FJpJHfztnjxlSZSEljg1hE4W6/Gy/C\nkaxf7BvN45wur73i0SXZvW2SyguxbezRP4dRxMOguWApHmk8Ers5hz7e9ETEWmTj\nTbmB24PmeEalGEmokozwvww8TzFv0IrxfdERPNJSGjQeMX89H9T+z17R8YEy/ZRY\nB5/YRJRnCvQoqpTP/jN3eS2KUAJDPj/97FN+zb4yHNRGkNOaqIChBPgof3jqxbwX\n4P5QDt2UnZ++kAByUpmn5HufuQ71lXyNBns1cmmSIBxX+vryC/dT14oXtHn6rdvb\nZN8S20ZIOaC7P9Muxw76tKmt+t+B6hf//ozNyxqi/ZugHHJWIYnmpWAacv43FPSz\nvAqGZtCjiMTwjLpg88CkyadP+Y/gUYNqY5KazBda7/sfu4KvDZ8B1kVs8wagEuJD\n7DsxME8g58tgcQD9i1TVZdQEVnfKvqxdYIJ4mSHfNmVRfZCZGsQdRaTDQUXyujRv\nSL95pSV5MZqgpSKjja4G\n=cLRt\n-----END PGP SIGNATURE-----",
        "payload": "tree 336800fa8312fd613f9529baa8018e611ebc8d50\nparent 7f8e90da335e851b8ec11e994a7da729ac73ef68\nparent 513686dd43357b072004e72b089eb997fb75044a\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1447853266 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1447853301 +0100\n\nMerge pull request #6951\n\n513686d [qt] Use maxTxFee instead of 10000000 (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03403d8c0f3b40f04ef9fac8781ac8e19ed304ec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/03403d8c0f3b40f04ef9fac8781ac8e19ed304ec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03403d8c0f3b40f04ef9fac8781ac8e19ed304ec/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7f8e90da335e851b8ec11e994a7da729ac73ef68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f8e90da335e851b8ec11e994a7da729ac73ef68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7f8e90da335e851b8ec11e994a7da729ac73ef68"
      },
      {
        "sha": "513686dd43357b072004e72b089eb997fb75044a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/513686dd43357b072004e72b089eb997fb75044a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/513686dd43357b072004e72b089eb997fb75044a"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 5,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4b030fdaa07ee26fa57c2dc7f37c557a43777a84",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03403d8c0f3b40f04ef9fac8781ac8e19ed304ec/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03403d8c0f3b40f04ef9fac8781ac8e19ed304ec/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=03403d8c0f3b40f04ef9fac8781ac8e19ed304ec",
        "patch": "@@ -531,7 +531,7 @@ void SendCoinsDialog::processSendCoinsReturn(const WalletModel::SendCoinsReturn\n         msgParams.second = CClientUIInterface::MSG_ERROR;\n         break;\n     case WalletModel::AbsurdFee:\n-        msgParams.first = tr(\"A fee higher than %1 is considered an absurdly high fee.\").arg(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), 10000000));\n+        msgParams.first = tr(\"A fee higher than %1 is considered an absurdly high fee.\").arg(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), maxTxFee));\n         break;\n     case WalletModel::PaymentRequestExpired:\n         msgParams.first = tr(\"Payment request expired.\");"
      },
      {
        "sha": "690ea0811e9a88b16ef0ebf3e20412631fc918d7",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03403d8c0f3b40f04ef9fac8781ac8e19ed304ec/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03403d8c0f3b40f04ef9fac8781ac8e19ed304ec/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=03403d8c0f3b40f04ef9fac8781ac8e19ed304ec",
        "patch": "@@ -290,8 +290,10 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n             return TransactionCreationFailed;\n         }\n \n-        // reject absurdly high fee > 0.1 bitcoin\n-        if (nFeeRequired > 10000000)\n+        // reject absurdly high fee. (This can never happen because the\n+        // wallet caps the fee at maxTxFee. This merely serves as a\n+        // belt-and-suspenders check)\n+        if (nFeeRequired > maxTxFee)\n             return AbsurdFee;\n     }\n "
      }
    ]
  },
  {
    "sha": "73fa5e604356ab4182971376fd758b4680737b5a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3M2ZhNWU2MDQzNTZhYjQxODI5NzEzNzZmZDc1OGI0NjgwNzM3YjVh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-18T16:28:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-18T16:37:58Z"
      },
      "message": "Merge pull request #6932\n\n1cf3dd8 Add unit test for UpdateCoins (Alex Morcos)\n03c8282 Make CCoinsViewTest behave like CCoinsViewDB (Alex Morcos)\n14470f9 ModifyNewCoins saves database lookups (Alex Morcos)",
      "tree": {
        "sha": "0a26db42198a0249c729e65a412304e7f996cab4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a26db42198a0249c729e65a412304e7f996cab4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/73fa5e604356ab4182971376fd758b4680737b5a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWTKlmAAoJEHSBCwEjRsmm0FMIAJIyt6m8WEHNqoh0bylVH4DR\n9MN3x365vhFaDj/3upCSN9KA/2eEcj5I+N7w0JpJ3uYE2E30/keb9Lg6fvK3yB41\n6c9kfDphfIoP/ZW7iXEghdwI3PJye5e3y+YESqjn1Ha/GaZGoztYi+97cdHz2cYk\nwjnRUWE4z2zOXzHRwfBd2YWcPIoCZ9DThYoKjUc9BKgjYj9xrsgGId7lxrimnFq/\n216+ggxu7utYOgJpXuJWBRlx8EwL2/CH1xUrDbYNYo1Q6MKiz8txeogYShCW4reW\nqlnhzTVXl6RDQuLe/b8YzFy+qpy950MfuV7x0vQeYEg/XTG5PBvj5XIAEQR5Z3o=\n=OcVA\n-----END PGP SIGNATURE-----",
        "payload": "tree 0a26db42198a0249c729e65a412304e7f996cab4\nparent 03403d8c0f3b40f04ef9fac8781ac8e19ed304ec\nparent 1cf3dd80a614fddbafac387e446fd83d118e0c25\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1447864124 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1447864678 +0100\n\nMerge pull request #6932\n\n1cf3dd8 Add unit test for UpdateCoins (Alex Morcos)\n03c8282 Make CCoinsViewTest behave like CCoinsViewDB (Alex Morcos)\n14470f9 ModifyNewCoins saves database lookups (Alex Morcos)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73fa5e604356ab4182971376fd758b4680737b5a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/73fa5e604356ab4182971376fd758b4680737b5a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73fa5e604356ab4182971376fd758b4680737b5a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "03403d8c0f3b40f04ef9fac8781ac8e19ed304ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03403d8c0f3b40f04ef9fac8781ac8e19ed304ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/03403d8c0f3b40f04ef9fac8781ac8e19ed304ec"
      },
      {
        "sha": "1cf3dd80a614fddbafac387e446fd83d118e0c25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cf3dd80a614fddbafac387e446fd83d118e0c25",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1cf3dd80a614fddbafac387e446fd83d118e0c25"
      }
    ],
    "stats": {
      "total": 179,
      "additions": 170,
      "deletions": 9
    },
    "files": [
      {
        "sha": "96b336ce77d1ddb95e2b7934b8c568e9b9a3cddd",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73fa5e604356ab4182971376fd758b4680737b5a/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73fa5e604356ab4182971376fd758b4680737b5a/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=73fa5e604356ab4182971376fd758b4680737b5a",
        "patch": "@@ -117,6 +117,15 @@ CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n     return CCoinsModifier(*this, ret.first, cachedCoinUsage);\n }\n \n+CCoinsModifier CCoinsViewCache::ModifyNewCoins(const uint256 &txid) {\n+    assert(!hasModifier);\n+    std::pair<CCoinsMap::iterator, bool> ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry()));\n+    ret.first->second.coins.Clear();\n+    ret.first->second.flags = CCoinsCacheEntry::FRESH;\n+    ret.first->second.flags |= CCoinsCacheEntry::DIRTY;\n+    return CCoinsModifier(*this, ret.first, 0);\n+}\n+\n const CCoins* CCoinsViewCache::AccessCoins(const uint256 &txid) const {\n     CCoinsMap::const_iterator it = FetchCoins(txid);\n     if (it == cacheCoins.end()) {"
      },
      {
        "sha": "3b45cb0a34d459096085a47081ca2f0813cc0320",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73fa5e604356ab4182971376fd758b4680737b5a/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73fa5e604356ab4182971376fd758b4680737b5a/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=73fa5e604356ab4182971376fd758b4680737b5a",
        "patch": "@@ -419,6 +419,17 @@ class CCoinsViewCache : public CCoinsViewBacked\n      */\n     CCoinsModifier ModifyCoins(const uint256 &txid);\n \n+    /**\n+     * Return a modifiable reference to a CCoins. Assumes that no entry with the given\n+     * txid exists and creates a new one. This saves a database access in the case where\n+     * the coins were to be wiped out by FromTx anyway.  This should not be called with\n+     * the 2 historical coinbase duplicate pairs because the new coins are marked fresh, and\n+     * in the event the duplicate coinbase was spent before a flush, the now pruned coins\n+     * would not properly overwrite the first coinbase of the pair. Simultaneous modifications\n+     * are not allowed.\n+     */\n+    CCoinsModifier ModifyNewCoins(const uint256 &txid);\n+\n     /**\n      * Push the modifications applied to this cache to its base.\n      * Failure to call this method before destruction will cause the changes to be forgotten."
      },
      {
        "sha": "8fb121c00dbffa2aeece375f674f70822370ee7f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73fa5e604356ab4182971376fd758b4680737b5a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73fa5e604356ab4182971376fd758b4680737b5a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=73fa5e604356ab4182971376fd758b4680737b5a",
        "patch": "@@ -1310,10 +1310,17 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n                 undo.nVersion = coins->nVersion;\n             }\n         }\n+        // add outputs\n+        inputs.ModifyNewCoins(tx.GetHash())->FromTx(tx, nHeight);\n+    }\n+    else {\n+        // add outputs for coinbase tx\n+        // In this case call the full ModifyCoins which will do a database\n+        // lookup to be sure the coins do not already exist otherwise we do not\n+        // know whether to mark them fresh or not.  We want the duplicate coinbases\n+        // before BIP30 to still be properly overwritten.\n+        inputs.ModifyCoins(tx.GetHash())->FromTx(tx, nHeight);\n     }\n-\n-    // add outputs\n-    inputs.ModifyCoins(tx.GetHash())->FromTx(tx, nHeight);\n }\n \n void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, int nHeight)"
      },
      {
        "sha": "946f904dfa6dc41afffba5d5a5cf56bead5b86c6",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 140,
        "deletions": 6,
        "changes": 146,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73fa5e604356ab4182971376fd758b4680737b5a/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73fa5e604356ab4182971376fd758b4680737b5a/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=73fa5e604356ab4182971376fd758b4680737b5a",
        "patch": "@@ -6,6 +6,8 @@\n #include \"random.h\"\n #include \"uint256.h\"\n #include \"test/test_bitcoin.h\"\n+#include \"main.h\"\n+#include \"consensus/validation.h\"\n \n #include <vector>\n #include <map>\n@@ -45,15 +47,18 @@ class CCoinsViewTest : public CCoinsView\n     bool BatchWrite(CCoinsMap& mapCoins, const uint256& hashBlock)\n     {\n         for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end(); ) {\n-            map_[it->first] = it->second.coins;\n-            if (it->second.coins.IsPruned() && insecure_rand() % 3 == 0) {\n-                // Randomly delete empty entries on write.\n-                map_.erase(it->first);\n+            if (it->second.flags & CCoinsCacheEntry::DIRTY) {\n+                // Same optimization used in CCoinsViewDB is to only write dirty entries.\n+                map_[it->first] = it->second.coins;\n+                if (it->second.coins.IsPruned() && insecure_rand() % 3 == 0) {\n+                    // Randomly delete empty entries on write.\n+                    map_.erase(it->first);\n+                }\n             }\n             mapCoins.erase(it++);\n         }\n-        mapCoins.clear();\n-        hashBestBlock_ = hashBlock;\n+        if (!hashBlock.IsNull())\n+            hashBestBlock_ = hashBlock;\n         return true;\n     }\n \n@@ -197,4 +202,133 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n     BOOST_CHECK(missed_an_entry);\n }\n \n+// This test is similar to the previous test\n+// except the emphasis is on testing the functionality of UpdateCoins\n+// random txs are created and UpdateCoins is used to update the cache stack\n+// In particular it is tested that spending a duplicate coinbase tx\n+// has the expected effect (the other duplicate is overwitten at all cache levels)\n+BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n+{\n+    bool spent_a_duplicate_coinbase = false;\n+    // A simple map to track what we expect the cache stack to represent.\n+    std::map<uint256, CCoins> result;\n+\n+    // The cache stack.\n+    CCoinsViewTest base; // A CCoinsViewTest at the bottom.\n+    std::vector<CCoinsViewCacheTest*> stack; // A stack of CCoinsViewCaches on top.\n+    stack.push_back(new CCoinsViewCacheTest(&base)); // Start with one cache.\n+\n+    // Track the txids we've used and whether they have been spent or not\n+    std::map<uint256, CAmount> coinbaseids;\n+    std::set<uint256> alltxids;\n+    std::set<uint256> duplicateids;\n+\n+    for (unsigned int i = 0; i < NUM_SIMULATION_ITERATIONS; i++) {\n+        {\n+            CMutableTransaction tx;\n+            tx.vin.resize(1);\n+            tx.vout.resize(1);\n+            tx.vout[0].nValue = i; //Keep txs unique unless intended to duplicate\n+            unsigned int height = insecure_rand();\n+\n+            // 1/10 times create a coinbase\n+            if (insecure_rand() % 10 == 0 || coinbaseids.size() < 10) {\n+                // 1/100 times create a duplicate coinbase\n+                if (insecure_rand() % 10 == 0 && coinbaseids.size()) {\n+                    std::map<uint256, CAmount>::iterator coinbaseIt = coinbaseids.lower_bound(GetRandHash());\n+                    if (coinbaseIt == coinbaseids.end()) {\n+                        coinbaseIt = coinbaseids.begin();\n+                    }\n+                    //Use same random value to have same hash and be a true duplicate\n+                    tx.vout[0].nValue = coinbaseIt->second;\n+                    assert(tx.GetHash() == coinbaseIt->first);\n+                    duplicateids.insert(coinbaseIt->first);\n+                }\n+                else {\n+                    coinbaseids[tx.GetHash()] = tx.vout[0].nValue;\n+                }\n+                assert(CTransaction(tx).IsCoinBase());\n+            }\n+            // 9/10 times create a regular tx\n+            else {\n+                uint256 prevouthash;\n+                // equally likely to spend coinbase or non coinbase\n+                std::set<uint256>::iterator txIt = alltxids.lower_bound(GetRandHash());\n+                if (txIt == alltxids.end()) {\n+                    txIt = alltxids.begin();\n+                }\n+                prevouthash = *txIt;\n+\n+                // Construct the tx to spend the coins of prevouthash\n+                tx.vin[0].prevout.hash = prevouthash;\n+                tx.vin[0].prevout.n = 0;\n+\n+                // Update the expected result of prevouthash to know these coins are spent\n+                CCoins& oldcoins = result[prevouthash];\n+                oldcoins.Clear();\n+\n+                // It is of particular importance here that once we spend a coinbase tx hash\n+                // it is no longer available to be duplicated (or spent again)\n+                // BIP 34 in conjunction with enforcing BIP 30 (at least until BIP 34 was active)\n+                // results in the fact that no coinbases were duplicated after they were already spent\n+                alltxids.erase(prevouthash);\n+                coinbaseids.erase(prevouthash);\n+\n+                // The test is designed to ensure spending a duplicate coinbase will work properly\n+                // if that ever happens and not resurrect the previously overwritten coinbase\n+                if (duplicateids.count(prevouthash))\n+                    spent_a_duplicate_coinbase = true;\n+\n+                assert(!CTransaction(tx).IsCoinBase());\n+            }\n+            // Track this tx to possibly spend later\n+            alltxids.insert(tx.GetHash());\n+\n+            // Update the expected result to know about the new output coins\n+            CCoins &coins = result[tx.GetHash()];\n+            coins.FromTx(tx, height);\n+\n+            CValidationState dummy;\n+            UpdateCoins(tx, dummy, *(stack.back()), height);\n+        }\n+\n+        // Once every 1000 iterations and at the end, verify the full cache.\n+        if (insecure_rand() % 1000 == 1 || i == NUM_SIMULATION_ITERATIONS - 1) {\n+            for (std::map<uint256, CCoins>::iterator it = result.begin(); it != result.end(); it++) {\n+                const CCoins* coins = stack.back()->AccessCoins(it->first);\n+                if (coins) {\n+                    BOOST_CHECK(*coins == it->second);\n+                 } else {\n+                    BOOST_CHECK(it->second.IsPruned());\n+                 }\n+            }\n+        }\n+\n+        if (insecure_rand() % 100 == 0) {\n+            // Every 100 iterations, change the cache stack.\n+            if (stack.size() > 0 && insecure_rand() % 2 == 0) {\n+                stack.back()->Flush();\n+                delete stack.back();\n+                stack.pop_back();\n+            }\n+            if (stack.size() == 0 || (stack.size() < 4 && insecure_rand() % 2)) {\n+                CCoinsView* tip = &base;\n+                if (stack.size() > 0) {\n+                    tip = stack.back();\n+                }\n+                stack.push_back(new CCoinsViewCacheTest(tip));\n+           }\n+        }\n+    }\n+\n+    // Clean up the stack.\n+    while (stack.size() > 0) {\n+        delete stack.back();\n+        stack.pop_back();\n+    }\n+\n+    // Verify coverage.\n+    BOOST_CHECK(spent_a_duplicate_coinbase);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "072e2f864445bc6ef3b390255f08c9e8bec2ea94",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNzJlMmY4NjQ0NDViYzZlZjNiMzkwMjU1ZjA4YzllOGJlYzJlYTk0",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-03-26T17:52:10Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-18T17:03:50Z"
      },
      "message": "Alter assumptions in CCoinsViewCache::BatchWrite\n\nPreviously it would break if you flushed a parent cache while there was a child cache referring to it.  This change will allow the flushing of parent caches.",
      "tree": {
        "sha": "b1781d992e08263efa1b03b5f00f8f9c08760ac2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1781d992e08263efa1b03b5f00f8f9c08760ac2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/072e2f864445bc6ef3b390255f08c9e8bec2ea94",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/072e2f864445bc6ef3b390255f08c9e8bec2ea94",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/072e2f864445bc6ef3b390255f08c9e8bec2ea94",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/072e2f864445bc6ef3b390255f08c9e8bec2ea94/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "73fa5e604356ab4182971376fd758b4680737b5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73fa5e604356ab4182971376fd758b4680737b5a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/73fa5e604356ab4182971376fd758b4680737b5a"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 28,
      "deletions": 7
    },
    "files": [
      {
        "sha": "f0ea5c0459067ec43a5e507b675b1da23ffc959b",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 7,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/072e2f864445bc6ef3b390255f08c9e8bec2ea94/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/072e2f864445bc6ef3b390255f08c9e8bec2ea94/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=072e2f864445bc6ef3b390255f08c9e8bec2ea94",
        "patch": "@@ -160,18 +160,23 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n         if (it->second.flags & CCoinsCacheEntry::DIRTY) { // Ignore non-dirty entries (optimization).\n             CCoinsMap::iterator itUs = cacheCoins.find(it->first);\n             if (itUs == cacheCoins.end()) {\n-                if (!it->second.coins.IsPruned()) {\n-                    // The parent cache does not have an entry, while the child\n-                    // cache does have (a non-pruned) one. Move the data up, and\n-                    // mark it as fresh (if the grandparent did have it, we\n-                    // would have pulled it in at first GetCoins).\n-                    assert(it->second.flags & CCoinsCacheEntry::FRESH);\n+                // The parent cache does not have an entry, while the child does\n+                // We can ignore it if it's both FRESH and pruned in the child\n+                if (!(it->second.flags & CCoinsCacheEntry::FRESH && it->second.coins.IsPruned())) {\n+                    // Otherwise we will need to create it in the parent\n+                    // and move the data up and mark it as dirty\n                     CCoinsCacheEntry& entry = cacheCoins[it->first];\n                     entry.coins.swap(it->second.coins);\n                     cachedCoinsUsage += entry.coins.DynamicMemoryUsage();\n-                    entry.flags = CCoinsCacheEntry::DIRTY | CCoinsCacheEntry::FRESH;\n+                    entry.flags = CCoinsCacheEntry::DIRTY;\n+                    // We can mark it FRESH in the parent if it was FRESH in the child\n+                    // Otherwise it might have just been flushed from the parent's cache\n+                    // and already exist in the grandparent\n+                    if (it->second.flags & CCoinsCacheEntry::FRESH)\n+                        entry.flags |= CCoinsCacheEntry::FRESH;\n                 }\n             } else {\n+                // Found the entry in the parent cache\n                 if ((itUs->second.flags & CCoinsCacheEntry::FRESH) && it->second.coins.IsPruned()) {\n                     // The grandparent does not have an entry, and the child is\n                     // modified and being pruned. This means we can just delete"
      },
      {
        "sha": "9489a19f63041bd7ac72833ad2df71589ab53ffd",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/072e2f864445bc6ef3b390255f08c9e8bec2ea94/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/072e2f864445bc6ef3b390255f08c9e8bec2ea94/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=072e2f864445bc6ef3b390255f08c9e8bec2ea94",
        "patch": "@@ -164,14 +164,23 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n             }\n         }\n \n+        if (insecure_rand() % 100 == 0) {\n+            // Every 100 iterations, flush an intermediate cache\n+            if (stack.size() > 1 && insecure_rand() % 2 == 0) {\n+                unsigned int flushIndex = insecure_rand() % (stack.size() - 1);\n+                stack[flushIndex]->Flush();\n+            }\n+        }\n         if (insecure_rand() % 100 == 0) {\n             // Every 100 iterations, change the cache stack.\n             if (stack.size() > 0 && insecure_rand() % 2 == 0) {\n+                //Remove the top cache\n                 stack.back()->Flush();\n                 delete stack.back();\n                 stack.pop_back();\n             }\n             if (stack.size() == 0 || (stack.size() < 4 && insecure_rand() % 2)) {\n+                //Add a new cache\n                 CCoinsView* tip = &base;\n                 if (stack.size() > 0) {\n                     tip = stack.back();\n@@ -304,6 +313,13 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n             }\n         }\n \n+        if (insecure_rand() % 100 == 0) {\n+            // Every 100 iterations, flush an intermediate cache\n+            if (stack.size() > 1 && insecure_rand() % 2 == 0) {\n+                unsigned int flushIndex = insecure_rand() % (stack.size() - 1);\n+                stack[flushIndex]->Flush();\n+            }\n+        }\n         if (insecure_rand() % 100 == 0) {\n             // Every 100 iterations, change the cache stack.\n             if (stack.size() > 0 && insecure_rand() % 2 == 0) {"
      }
    ]
  },
  {
    "sha": "f71bfefcb0c06c4639a668a325acfd49aa7b3a8c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzFiZmVmY2IwYzA2YzQ2MzlhNjY4YTMyNWFjZmQ0OWFhN2IzYThj",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-16T08:00:09Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-18T20:50:32Z"
      },
      "message": "add UI help for -resetguisettings",
      "tree": {
        "sha": "c873d7926b585ee49b471482fa73ea4a0b9e0f7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c873d7926b585ee49b471482fa73ea4a0b9e0f7c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f71bfefcb0c06c4639a668a325acfd49aa7b3a8c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWTOSZAAoJECnUvLZBb1Ps0RMP/jWZzWxjofAItCTwdmjXcr7n\nYOHYFG3gHt0+bObfZJkAKe1XqaGMwDwGQ2gp8wZ9T7e+tlFjkocE9ywhEDJ6P4ue\ng/PKi1We4D7qZ2skpa/sQSBbtXQsodWIXenxSfJ/ey9PcupnqoH6TU0POT5vtx/7\nWXW+v9Gj17VMB6HuNoUhnlSgDo6+QvNKxzxeOlwsSCOKDIZoFMEqWn/bncIzQzWN\ns1wfwaaBZhvdjU8LYRYDUddhggbNCzVlAIfn/3kbQoc0HJ+v254lPavo9YnEB5aC\nVwD0b795tJEc+iuYEbkqU7FTtoT1OdT5xRXQCW37K8RfX0L+uBctER7NoWysZq/F\nzADA1NuccjSjF/iKpjDwfAqCkxKL6d/uNIUYr/qAHh5ZKbwJQNpAkveBzIrGdIt0\n0lAx4aDOABIdUHCrICws/vR4xgvi95QiohGyHuhVG8yW0El2897mVmKd3dTvfe2z\nU1OqHh0HCUgfv0GV1XjSHr+jHpq/CecmBz0HfGr/9QhhvJO4y8NkksAZcuU4tnRu\n7aEUNoiqFLfBZUHhfuJ7xxr/emv7EHWeppr59s6qaWrszLXseOmzvRPRSVsridsv\n3tlmXLfaExJn9EqG71dE6S37dHav5NgAXmm7LplqfWO9r/H3Pl/4WjCQuGyYMVrF\nGlz5u5NEYJGWMYsbCCtb\n=jfuB\n-----END PGP SIGNATURE-----",
        "payload": "tree c873d7926b585ee49b471482fa73ea4a0b9e0f7c\nparent ae98388b2289a56d76d0fd4708e22842f88695c4\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1447660809 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1447879832 +0100\n\nadd UI help for -resetguisettings\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f71bfefcb0c06c4639a668a325acfd49aa7b3a8c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f71bfefcb0c06c4639a668a325acfd49aa7b3a8c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f71bfefcb0c06c4639a668a325acfd49aa7b3a8c/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae98388b2289a56d76d0fd4708e22842f88695c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae98388b2289a56d76d0fd4708e22842f88695c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae98388b2289a56d76d0fd4708e22842f88695c4"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4883252c051e0dfbf06262fb3f7ea5197ffe38f6",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f71bfefcb0c06c4639a668a325acfd49aa7b3a8c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f71bfefcb0c06c4639a668a325acfd49aa7b3a8c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f71bfefcb0c06c4639a668a325acfd49aa7b3a8c",
        "patch": "@@ -496,6 +496,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-min\", _(\"Start minimized\"));\n         strUsage += HelpMessageOpt(\"-rootcertificates=<file>\", _(\"Set SSL root certificates for payment request (default: -system-)\"));\n         strUsage += HelpMessageOpt(\"-splash\", _(\"Show splash screen on startup (default: 1)\"));\n+        strUsage += HelpMessageOpt(\"-resetguisettings\", _(\"Reset all settings changes made over the GUI\"));\n         if (showDebug) {\n             strUsage += HelpMessageOpt(\"-uiplatform\", \"Select platform to customize UI for (one of windows, macosx, other; default: platform compiled on)\");\n         }"
      }
    ]
  },
  {
    "sha": "c5f211bbd0ab11e217836f0b12237bcc02f5a638",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNWYyMTFiYmQwYWIxMWUyMTc4MzZmMGIxMjIzN2JjYzAyZjVhNjM4",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2015-11-18T00:57:00Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2015-11-19T01:34:08Z"
      },
      "message": "[doc][trivial] Remove miniupnpc build notes build-unix",
      "tree": {
        "sha": "a6095208bdebcfb8f583569719dba3236def3898",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a6095208bdebcfb8f583569719dba3236def3898"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5f211bbd0ab11e217836f0b12237bcc02f5a638",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5f211bbd0ab11e217836f0b12237bcc02f5a638",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c5f211bbd0ab11e217836f0b12237bcc02f5a638",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5f211bbd0ab11e217836f0b12237bcc02f5a638/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8df8a5077df673f1914f4a40bf54b126d13de1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8df8a5077df673f1914f4a40bf54b126d13de1c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8df8a5077df673f1914f4a40bf54b126d13de1c"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 0,
      "deletions": 8
    },
    "files": [
      {
        "sha": "159a14060817d3660136248c15b3e062c39d596a",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5f211bbd0ab11e217836f0b12237bcc02f5a638/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5f211bbd0ab11e217836f0b12237bcc02f5a638/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=c5f211bbd0ab11e217836f0b12237bcc02f5a638",
        "patch": "@@ -135,14 +135,6 @@ turned off by default.  See the configure options for upnp behavior desired:\n \t--disable-upnp-default   (the default) UPnP support turned off by default at runtime\n \t--enable-upnp-default    UPnP support turned on by default at runtime\n \n-To build:\n-\n-\ttar -xzvf miniupnpc-1.6.tar.gz\n-\tcd miniupnpc-1.6\n-\tmake\n-\tsudo su\n-\tmake install\n-\n \n Berkeley DB\n -----------"
      }
    ]
  },
  {
    "sha": "cdcd816a1b55578ae8f89bbd5ecbc453973b710f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZGNkODE2YTFiNTU1NzhhZThmODliYmQ1ZWNiYzQ1Mzk3M2I3MTBm",
    "commit": {
      "author": {
        "name": "Daniel Cousens",
        "email": "github@dcousens.com",
        "date": "2015-11-19T01:34:19Z"
      },
      "committer": {
        "name": "Daniel Cousens",
        "email": "github@dcousens.com",
        "date": "2015-11-19T01:34:19Z"
      },
      "message": "init: amend ZMQ flag names",
      "tree": {
        "sha": "bd5a142accb238e576b2580ff154881f1ca53f92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd5a142accb238e576b2580ff154881f1ca53f92"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cdcd816a1b55578ae8f89bbd5ecbc453973b710f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdcd816a1b55578ae8f89bbd5ecbc453973b710f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cdcd816a1b55578ae8f89bbd5ecbc453973b710f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdcd816a1b55578ae8f89bbd5ecbc453973b710f/comments",
    "author": {
      "login": "dcousens",
      "id": 413395,
      "node_id": "MDQ6VXNlcjQxMzM5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcousens",
      "html_url": "https://github.com/dcousens",
      "followers_url": "https://api.github.com/users/dcousens/followers",
      "following_url": "https://api.github.com/users/dcousens/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcousens/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
      "organizations_url": "https://api.github.com/users/dcousens/orgs",
      "repos_url": "https://api.github.com/users/dcousens/repos",
      "events_url": "https://api.github.com/users/dcousens/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcousens/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dcousens",
      "id": 413395,
      "node_id": "MDQ6VXNlcjQxMzM5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcousens",
      "html_url": "https://github.com/dcousens",
      "followers_url": "https://api.github.com/users/dcousens/followers",
      "following_url": "https://api.github.com/users/dcousens/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcousens/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
      "organizations_url": "https://api.github.com/users/dcousens/orgs",
      "repos_url": "https://api.github.com/users/dcousens/repos",
      "events_url": "https://api.github.com/users/dcousens/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcousens/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7f8e90da335e851b8ec11e994a7da729ac73ef68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f8e90da335e851b8ec11e994a7da729ac73ef68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7f8e90da335e851b8ec11e994a7da729ac73ef68"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d1a98023ff8b79cdcb549fdb4757fa2b01b87abe",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdcd816a1b55578ae8f89bbd5ecbc453973b710f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdcd816a1b55578ae8f89bbd5ecbc453973b710f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=cdcd816a1b55578ae8f89bbd5ecbc453973b710f",
        "patch": "@@ -409,9 +409,9 @@ std::string HelpMessage(HelpMessageMode mode)\n #if ENABLE_ZMQ\n     strUsage += HelpMessageGroup(_(\"ZeroMQ notification options:\"));\n     strUsage += HelpMessageOpt(\"-zmqpubhashblock=<address>\", _(\"Enable publish hash block in <address>\"));\n-    strUsage += HelpMessageOpt(\"-zmqpubhashtransaction=<address>\", _(\"Enable publish hash transaction in <address>\"));\n+    strUsage += HelpMessageOpt(\"-zmqpubhashtx=<address>\", _(\"Enable publish hash transaction in <address>\"));\n     strUsage += HelpMessageOpt(\"-zmqpubrawblock=<address>\", _(\"Enable publish raw block in <address>\"));\n-    strUsage += HelpMessageOpt(\"-zmqpubrawtransaction=<address>\", _(\"Enable publish raw transaction in <address>\"));\n+    strUsage += HelpMessageOpt(\"-zmqpubrawtx=<address>\", _(\"Enable publish raw transaction in <address>\"));\n #endif\n \n     strUsage += HelpMessageGroup(_(\"Debugging/Testing options:\"));\n@@ -830,7 +830,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n             LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -walletbroadcast=0\\n\", __func__);\n #endif\n     }\n-    \n+\n     // Make sure enough file descriptors are available\n     int nBind = std::max((int)mapArgs.count(\"-bind\") + (int)mapArgs.count(\"-whitebind\"), 1);\n     int nUserMaxConnections = GetArg(\"-maxconnections\", DEFAULT_MAX_PEER_CONNECTIONS);"
      }
    ]
  },
  {
    "sha": "14075b189db9883b197ef291a57066b49d3249bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDA3NWIxODlkYjk4ODNiMTk3ZWYyOTFhNTcwNjZiNDlkMzI0OWJi",
    "commit": {
      "author": {
        "name": "Daniel Cousens",
        "email": "github@dcousens.com",
        "date": "2015-11-19T02:17:36Z"
      },
      "committer": {
        "name": "Daniel Cousens",
        "email": "github@dcousens.com",
        "date": "2015-11-19T02:17:36Z"
      },
      "message": "init: add zmq to debug categories",
      "tree": {
        "sha": "0f10183ef42b039ca1d054d07261d669b356bb5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f10183ef42b039ca1d054d07261d669b356bb5c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14075b189db9883b197ef291a57066b49d3249bb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14075b189db9883b197ef291a57066b49d3249bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14075b189db9883b197ef291a57066b49d3249bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14075b189db9883b197ef291a57066b49d3249bb/comments",
    "author": {
      "login": "dcousens",
      "id": 413395,
      "node_id": "MDQ6VXNlcjQxMzM5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcousens",
      "html_url": "https://github.com/dcousens",
      "followers_url": "https://api.github.com/users/dcousens/followers",
      "following_url": "https://api.github.com/users/dcousens/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcousens/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
      "organizations_url": "https://api.github.com/users/dcousens/orgs",
      "repos_url": "https://api.github.com/users/dcousens/repos",
      "events_url": "https://api.github.com/users/dcousens/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcousens/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dcousens",
      "id": 413395,
      "node_id": "MDQ6VXNlcjQxMzM5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcousens",
      "html_url": "https://github.com/dcousens",
      "followers_url": "https://api.github.com/users/dcousens/followers",
      "following_url": "https://api.github.com/users/dcousens/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcousens/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
      "organizations_url": "https://api.github.com/users/dcousens/orgs",
      "repos_url": "https://api.github.com/users/dcousens/repos",
      "events_url": "https://api.github.com/users/dcousens/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcousens/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cdcd816a1b55578ae8f89bbd5ecbc453973b710f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdcd816a1b55578ae8f89bbd5ecbc453973b710f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cdcd816a1b55578ae8f89bbd5ecbc453973b710f"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2d0bc5591f21806a6a2e8c84b57639337559c3e8",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14075b189db9883b197ef291a57066b49d3249bb/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14075b189db9883b197ef291a57066b49d3249bb/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=14075b189db9883b197ef291a57066b49d3249bb",
        "patch": "@@ -434,7 +434,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT));\n         strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n     }\n-    string debugCategories = \"addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, mempoolrej, net, proxy, prune, http, libevent\"; // Don't translate these and qt below\n+    string debugCategories = \"addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, mempoolrej, net, proxy, prune, http, libevent, zmq\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +"
      }
    ]
  },
  {
    "sha": "ffacd27def73834bc15706191c2ed9cb99f565a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZmFjZDI3ZGVmNzM4MzRiYzE1NzA2MTkxYzJlZDljYjk5ZjU2NWE2",
    "commit": {
      "author": {
        "name": "Daniel Cousens",
        "email": "github@dcousens.com",
        "date": "2015-11-19T02:27:18Z"
      },
      "committer": {
        "name": "Daniel Cousens",
        "email": "github@dcousens.com",
        "date": "2015-11-19T02:32:14Z"
      },
      "message": "zmq: prepend zmq to debug messages",
      "tree": {
        "sha": "61d091fe377a48ffbf3cc24be815269f35a8fc6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61d091fe377a48ffbf3cc24be815269f35a8fc6e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ffacd27def73834bc15706191c2ed9cb99f565a6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffacd27def73834bc15706191c2ed9cb99f565a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ffacd27def73834bc15706191c2ed9cb99f565a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffacd27def73834bc15706191c2ed9cb99f565a6/comments",
    "author": {
      "login": "dcousens",
      "id": 413395,
      "node_id": "MDQ6VXNlcjQxMzM5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcousens",
      "html_url": "https://github.com/dcousens",
      "followers_url": "https://api.github.com/users/dcousens/followers",
      "following_url": "https://api.github.com/users/dcousens/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcousens/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
      "organizations_url": "https://api.github.com/users/dcousens/orgs",
      "repos_url": "https://api.github.com/users/dcousens/repos",
      "events_url": "https://api.github.com/users/dcousens/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcousens/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dcousens",
      "id": 413395,
      "node_id": "MDQ6VXNlcjQxMzM5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcousens",
      "html_url": "https://github.com/dcousens",
      "followers_url": "https://api.github.com/users/dcousens/followers",
      "following_url": "https://api.github.com/users/dcousens/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcousens/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
      "organizations_url": "https://api.github.com/users/dcousens/orgs",
      "repos_url": "https://api.github.com/users/dcousens/repos",
      "events_url": "https://api.github.com/users/dcousens/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcousens/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "14075b189db9883b197ef291a57066b49d3249bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14075b189db9883b197ef291a57066b49d3249bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14075b189db9883b197ef291a57066b49d3249bb"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "be2aec7d159f143380369ac3bf447cb8c28801a0",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffacd27def73834bc15706191c2ed9cb99f565a6/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffacd27def73834bc15706191c2ed9cb99f565a6/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=ffacd27def73834bc15706191c2ed9cb99f565a6",
        "patch": "@@ -12,7 +12,7 @@\n \n void zmqError(const char *str)\n {\n-    LogPrint(\"zmq\", \"Error: %s, errno=%s\\n\", str, zmq_strerror(errno));\n+    LogPrint(\"zmq\", \"zmq: Error: %s, errno=%s\\n\", str, zmq_strerror(errno));\n }\n \n CZMQNotificationInterface::CZMQNotificationInterface() : pcontext(NULL)\n@@ -72,7 +72,7 @@ CZMQNotificationInterface* CZMQNotificationInterface::CreateWithArguments(const\n // Called at startup to conditionally set up ZMQ socket(s)\n bool CZMQNotificationInterface::Initialize()\n {\n-    LogPrint(\"zmq\", \"Initialize notification interface\\n\");\n+    LogPrint(\"zmq\", \"zmq: Initialize notification interface\\n\");\n     assert(!pcontext);\n \n     pcontext = zmq_init(1);\n@@ -110,7 +110,7 @@ bool CZMQNotificationInterface::Initialize()\n // Called during shutdown sequence\n void CZMQNotificationInterface::Shutdown()\n {\n-    LogPrint(\"zmq\", \"Shutdown notification interface\\n\");\n+    LogPrint(\"zmq\", \"zmq: Shutdown notification interface\\n\");\n     if (pcontext)\n     {\n         for (std::list<CZMQAbstractNotifier*>::iterator i=notifiers.begin(); i!=notifiers.end(); ++i)"
      },
      {
        "sha": "ddc8fe93e95a34591a9f08c6fb67bc11bda595d5",
        "filename": "src/zmq/zmqpublishnotifier.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffacd27def73834bc15706191c2ed9cb99f565a6/src/zmq/zmqpublishnotifier.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffacd27def73834bc15706191c2ed9cb99f565a6/src/zmq/zmqpublishnotifier.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqpublishnotifier.cpp?ref=ffacd27def73834bc15706191c2ed9cb99f565a6",
        "patch": "@@ -78,7 +78,7 @@ bool CZMQAbstractPublishNotifier::Initialize(void *pcontext)\n     }\n     else\n     {\n-        LogPrint(\"zmq\", \"  Reuse socket for address %s\\n\", address);\n+        LogPrint(\"zmq\", \"zmq: Reusing socket for address %s\\n\", address);\n \n         psocket = i->second->psocket;\n         mapPublishNotifiers.insert(std::make_pair(address, this));\n@@ -120,7 +120,7 @@ void CZMQAbstractPublishNotifier::Shutdown()\n bool CZMQPublishHashBlockNotifier::NotifyBlock(const CBlockIndex *pindex)\n {\n     uint256 hash = pindex->GetBlockHash();\n-    LogPrint(\"zmq\", \"Publish hash block %s\\n\", hash.GetHex());\n+    LogPrint(\"zmq\", \"zmq: Publish hashblock %s\\n\", hash.GetHex());\n     char data[32];\n     for (unsigned int i = 0; i < 32; i++)\n         data[31 - i] = hash.begin()[i];\n@@ -131,7 +131,7 @@ bool CZMQPublishHashBlockNotifier::NotifyBlock(const CBlockIndex *pindex)\n bool CZMQPublishHashTransactionNotifier::NotifyTransaction(const CTransaction &transaction)\n {\n     uint256 hash = transaction.GetHash();\n-    LogPrint(\"zmq\", \"Publish hash transaction %s\\n\", hash.GetHex());\n+    LogPrint(\"zmq\", \"zmq: Publish hashtx %s\\n\", hash.GetHex());\n     char data[32];\n     for (unsigned int i = 0; i < 32; i++)\n         data[31 - i] = hash.begin()[i];\n@@ -141,7 +141,7 @@ bool CZMQPublishHashTransactionNotifier::NotifyTransaction(const CTransaction &t\n \n bool CZMQPublishRawBlockNotifier::NotifyBlock(const CBlockIndex *pindex)\n {\n-    LogPrint(\"zmq\", \"Publish raw block %s\\n\", pindex->GetBlockHash().GetHex());\n+    LogPrint(\"zmq\", \"zmq: Publish rawblock %s\\n\", pindex->GetBlockHash().GetHex());\n \n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n@@ -164,7 +164,7 @@ bool CZMQPublishRawBlockNotifier::NotifyBlock(const CBlockIndex *pindex)\n bool CZMQPublishRawTransactionNotifier::NotifyTransaction(const CTransaction &transaction)\n {\n     uint256 hash = transaction.GetHash();\n-    LogPrint(\"zmq\", \"Publish raw transaction %s\\n\", hash.GetHex());\n+    LogPrint(\"zmq\", \"zmq: Publish rawtx %s\\n\", hash.GetHex());\n     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n     ss << transaction;\n     int rc = zmq_send_multipart(psocket, \"rawtx\", 5, &(*ss.begin()), ss.size(), 0);"
      }
    ]
  },
  {
    "sha": "2798e0b0d2e277ff611d2731e2746c8959bcd18c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNzk4ZTBiMGQyZTI3N2ZmNjExZDI3MzFlMjc0NmM4OTU5YmNkMThj",
    "commit": {
      "author": {
        "name": "daniel",
        "email": "arowser@gmail.com",
        "date": "2015-11-19T05:28:22Z"
      },
      "committer": {
        "name": "daniel",
        "email": "daniel.socials@gmail.com",
        "date": "2015-11-19T05:29:57Z"
      },
      "message": "add powerpc build support for openssl lib",
      "tree": {
        "sha": "a31f4f2a5720232784ff5c53c16952016fb22226",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a31f4f2a5720232784ff5c53c16952016fb22226"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2798e0b0d2e277ff611d2731e2746c8959bcd18c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2798e0b0d2e277ff611d2731e2746c8959bcd18c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2798e0b0d2e277ff611d2731e2746c8959bcd18c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2798e0b0d2e277ff611d2731e2746c8959bcd18c/comments",
    "author": {
      "login": "arowser",
      "id": 541066,
      "node_id": "MDQ6VXNlcjU0MTA2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/541066?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arowser",
      "html_url": "https://github.com/arowser",
      "followers_url": "https://api.github.com/users/arowser/followers",
      "following_url": "https://api.github.com/users/arowser/following{/other_user}",
      "gists_url": "https://api.github.com/users/arowser/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arowser/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arowser/subscriptions",
      "organizations_url": "https://api.github.com/users/arowser/orgs",
      "repos_url": "https://api.github.com/users/arowser/repos",
      "events_url": "https://api.github.com/users/arowser/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arowser/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "danielsocials",
      "id": 7897760,
      "node_id": "MDQ6VXNlcjc4OTc3NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7897760?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danielsocials",
      "html_url": "https://github.com/danielsocials",
      "followers_url": "https://api.github.com/users/danielsocials/followers",
      "following_url": "https://api.github.com/users/danielsocials/following{/other_user}",
      "gists_url": "https://api.github.com/users/danielsocials/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danielsocials/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danielsocials/subscriptions",
      "organizations_url": "https://api.github.com/users/danielsocials/orgs",
      "repos_url": "https://api.github.com/users/danielsocials/repos",
      "events_url": "https://api.github.com/users/danielsocials/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danielsocials/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "73fa5e604356ab4182971376fd758b4680737b5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73fa5e604356ab4182971376fd758b4680737b5a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/73fa5e604356ab4182971376fd758b4680737b5a"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c6452820a2de8ce9194fd0bfd560eb11451f7c6d",
        "filename": "depends/packages/openssl.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2798e0b0d2e277ff611d2731e2746c8959bcd18c/depends/packages/openssl.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2798e0b0d2e277ff611d2731e2746c8959bcd18c/depends/packages/openssl.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/openssl.mk?ref=2798e0b0d2e277ff611d2731e2746c8959bcd18c",
        "patch": "@@ -17,6 +17,7 @@ $(package)_config_opts_arm_linux=linux-generic32\n $(package)_config_opts_aarch64_linux=linux-generic64\n $(package)_config_opts_mipsel_linux=linux-generic32\n $(package)_config_opts_mips_linux=linux-generic32\n+$(package)_config_opts_powerpc_linux=linux-generic32\n $(package)_config_opts_x86_64_darwin=darwin64-x86_64-cc\n $(package)_config_opts_x86_64_mingw32=mingw64\n $(package)_config_opts_i686_mingw32=mingw"
      }
    ]
  },
  {
    "sha": "15765df3521b5221f5c05bed640ff169b22744a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTc2NWRmMzUyMWI1MjIxZjVjMDViZWQ2NDBmZjE2OWIyMjc0NGEz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-19T08:17:58Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-19T08:18:14Z"
      },
      "message": "Merge pull request #7041\n\nbd42e6b [doc] Users now see 'Bitcoin Core' in the OSX bundle (Michael Ford)",
      "tree": {
        "sha": "0246089f9e9435c47fd8208806b2c8e7d696476e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0246089f9e9435c47fd8208806b2c8e7d696476e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/15765df3521b5221f5c05bed640ff169b22744a3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWTYXGAAoJECnUvLZBb1Ps30UP/2x+UJSS+lARwBdfy0OSIdx3\nWs5m8xQ401f7eXyCu8GAbtdvj68BgyMrbFObWnb9mbd0ZtYa0QwRNZ4tM/H3XBeH\nuNqkoalSSjhvS6amJc7NWpjWwPId60uUXD3n63XVDx9jtrq/BLgI7ZdjcUiAqKUS\nwRD3+/PJ7e7/c7mACXga/mKIqLL7wBqhQhNmR5OHKUK4S0HosBSRtYmhCj6mWvNa\nE7BvrV3w69Feof64AWk1npYtzN0qYTgl9l/fH6ZMUE3pXoZCkA6pg6OUfs+hJeAR\nyFSyF3wQxcT4jdC3njw4gKz7qfpu5SABeV4+7y03YBjNAkMZ2mvosXn2FUh46wEv\nqErNk6Dn4l8JzoYDeNxn+PZXAqggQB0Om8bHcSZO+o4xJgaW+ZEJ3G8wbD+HoF4A\n5FArCjbx1OUFO/IPWlakZo6a0GTXCLUgzCZIxjI12sHRK41mqYV4WqlQuhr8fVab\nXgdT7Vw5Yj0EithVcLp90ZT4VAApP/M/PnBva2GpVbQ4c3tIZYb+GndbGWMGyZ1V\nN2nvtRwoy3Sid/T+gsPgE3edLGRroAZHlzAxhNCGTXegncTU1ABQkicH/r5FCMLr\nH4WBF5eeQoeOQoTjx16KjrW9JS8qthUCyfMRYZNltHbwWX7oatexCmJVQoI6iawB\nInH/mUbFi9GV03LUN7VA\n=d2kG\n-----END PGP SIGNATURE-----",
        "payload": "tree 0246089f9e9435c47fd8208806b2c8e7d696476e\nparent 73fa5e604356ab4182971376fd758b4680737b5a\nparent bd42e6b6ecd31019ff2774512bdc22c5ca289fc5\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1447921078 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1447921094 +0100\n\nMerge pull request #7041\n\nbd42e6b [doc] Users now see 'Bitcoin Core' in the OSX bundle (Michael Ford)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15765df3521b5221f5c05bed640ff169b22744a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/15765df3521b5221f5c05bed640ff169b22744a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15765df3521b5221f5c05bed640ff169b22744a3/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "73fa5e604356ab4182971376fd758b4680737b5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73fa5e604356ab4182971376fd758b4680737b5a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/73fa5e604356ab4182971376fd758b4680737b5a"
      },
      {
        "sha": "bd42e6b6ecd31019ff2774512bdc22c5ca289fc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd42e6b6ecd31019ff2774512bdc22c5ca289fc5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bd42e6b6ecd31019ff2774512bdc22c5ca289fc5"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f6df28a89b60d63304704b4c2aaef97a8053657c",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15765df3521b5221f5c05bed640ff169b22744a3/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15765df3521b5221f5c05bed640ff169b22744a3/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=15765df3521b5221f5c05bed640ff169b22744a3",
        "patch": "@@ -28,7 +28,7 @@ Unpack the files into a directory, and then run bitcoin-qt.exe.\n \n ### OS X\n \n-Drag Bitcoin-Qt to your applications folder, and then run Bitcoin-Qt.\n+Drag Bitcoin-Core to your applications folder, and then run Bitcoin-Core.\n \n ### Need Help?\n "
      }
    ]
  },
  {
    "sha": "f8e87d74c9b7308905b321a77fb1a7b69b658a01",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOGU4N2Q3NGM5YjczMDg5MDViMzIxYTc3ZmIxYTdiNjliNjU4YTAx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-19T09:12:06Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-19T09:12:11Z"
      },
      "message": "Merge pull request #7048\n\nc5f211b [doc][trivial] Remove miniupnpc build notes build-unix (fanquake)",
      "tree": {
        "sha": "326c06ecaf7382a02969484c91a0b091f9c6583a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/326c06ecaf7382a02969484c91a0b091f9c6583a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8e87d74c9b7308905b321a77fb1a7b69b658a01",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWTZJrAAoJEHSBCwEjRsmmmfoH/2i7vrOlbCS9VIyxX5MiAq+T\nk/Egb7AflqMBzGeELXc6Phf+CqI39nSjoIZk9kOmO8nbhR50j60GH+kMdKu5Cbrl\nqVql/XJZSBM4rq/ugue7p/a9O5TukbEbK6oCqOIo8U0Y6sMoxiQfJwtyLDkJOmbg\nMXixS0IuqsgNzoJnaZnapYAG7GA4UHHtIYuzobKYfpcPUWEna2id9cvkCDIhKItb\nTBT4qBuS35gsIOUSvTPvKY3EUhQN+envXQPGM5GauqoHGoEpjjiF93gZ5Oqfvjmo\n+5PQ6QzAOWAEs4fyaXsMu36WTmo6CUO/i5WS1BfeWIpQk9aYikCBdSzZV4niTXI=\n=QQCQ\n-----END PGP SIGNATURE-----",
        "payload": "tree 326c06ecaf7382a02969484c91a0b091f9c6583a\nparent 15765df3521b5221f5c05bed640ff169b22744a3\nparent c5f211bbd0ab11e217836f0b12237bcc02f5a638\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1447924326 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1447924331 +0100\n\nMerge pull request #7048\n\nc5f211b [doc][trivial] Remove miniupnpc build notes build-unix (fanquake)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8e87d74c9b7308905b321a77fb1a7b69b658a01",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f8e87d74c9b7308905b321a77fb1a7b69b658a01",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8e87d74c9b7308905b321a77fb1a7b69b658a01/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "15765df3521b5221f5c05bed640ff169b22744a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15765df3521b5221f5c05bed640ff169b22744a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/15765df3521b5221f5c05bed640ff169b22744a3"
      },
      {
        "sha": "c5f211bbd0ab11e217836f0b12237bcc02f5a638",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5f211bbd0ab11e217836f0b12237bcc02f5a638",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5f211bbd0ab11e217836f0b12237bcc02f5a638"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 0,
      "deletions": 8
    },
    "files": [
      {
        "sha": "159a14060817d3660136248c15b3e062c39d596a",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8e87d74c9b7308905b321a77fb1a7b69b658a01/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8e87d74c9b7308905b321a77fb1a7b69b658a01/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=f8e87d74c9b7308905b321a77fb1a7b69b658a01",
        "patch": "@@ -135,14 +135,6 @@ turned off by default.  See the configure options for upnp behavior desired:\n \t--disable-upnp-default   (the default) UPnP support turned off by default at runtime\n \t--enable-upnp-default    UPnP support turned on by default at runtime\n \n-To build:\n-\n-\ttar -xzvf miniupnpc-1.6.tar.gz\n-\tcd miniupnpc-1.6\n-\tmake\n-\tsudo su\n-\tmake install\n-\n \n Berkeley DB\n -----------"
      }
    ]
  },
  {
    "sha": "b4f3e9c09eab533179be8efe478a0f21c3f83e6c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNGYzZTljMDllYWI1MzMxNzliZThlZmU0NzhhMGYyMWMzZjgzZTZj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-17T10:17:09Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-19T10:08:29Z"
      },
      "message": "ui: Add \"Copy raw transaction data\" to transaction list context menu\n\nAdd a way to quickly copy transaction hex.\n\nPrimarily useful when manually submitting transactions,\ne.g. `-walletbroadcast=0` is set.",
      "tree": {
        "sha": "6b89bb89cd487db59149e372a4ed477e928ec0a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b89bb89cd487db59149e372a4ed477e928ec0a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b4f3e9c09eab533179be8efe478a0f21c3f83e6c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4f3e9c09eab533179be8efe478a0f21c3f83e6c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b4f3e9c09eab533179be8efe478a0f21c3f83e6c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4f3e9c09eab533179be8efe478a0f21c3f83e6c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eac53ec992018a14db6f8a65a7ce333a4c8284cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eac53ec992018a14db6f8a65a7ce333a4c8284cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eac53ec992018a14db6f8a65a7ce333a4c8284cc"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 26,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e8ada9f762dfa934e0a7cc575d6ef687d6a00b31",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4f3e9c09eab533179be8efe478a0f21c3f83e6c/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4f3e9c09eab533179be8efe478a0f21c3f83e6c/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=b4f3e9c09eab533179be8efe478a0f21c3f83e6c",
        "patch": "@@ -13,6 +13,7 @@\n #include \"transactionrecord.h\"\n #include \"walletmodel.h\"\n \n+#include \"core_io.h\"\n #include \"main.h\"\n #include \"sync.h\"\n #include \"uint256.h\"\n@@ -220,6 +221,18 @@ class TransactionTablePriv\n         }\n         return QString();\n     }\n+\n+    QString getTxHex(TransactionRecord *rec)\n+    {\n+        LOCK2(cs_main, wallet->cs_wallet);\n+        std::map<uint256, CWalletTx>::iterator mi = wallet->mapWallet.find(rec->hash);\n+        if(mi != wallet->mapWallet.end())\n+        {\n+            std::string strHex = EncodeHexTx(static_cast<CTransaction>(mi->second));\n+            return QString::fromStdString(strHex);\n+        }\n+        return QString();\n+    }\n };\n \n TransactionTableModel::TransactionTableModel(const PlatformStyle *platformStyle, CWallet* wallet, WalletModel *parent):\n@@ -594,6 +607,8 @@ QVariant TransactionTableModel::data(const QModelIndex &index, int role) const\n         return rec->getTxID();\n     case TxHashRole:\n         return QString::fromStdString(rec->hash.ToString());\n+    case TxHexRole:\n+        return priv->getTxHex(rec);\n     case ConfirmedRole:\n         return rec->status.countsForBalance;\n     case FormattedAmountRole:"
      },
      {
        "sha": "601f893d47ecb1c103b9429736d435fb21dae351",
        "filename": "src/qt/transactiontablemodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4f3e9c09eab533179be8efe478a0f21c3f83e6c/src/qt/transactiontablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4f3e9c09eab533179be8efe478a0f21c3f83e6c/src/qt/transactiontablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.h?ref=b4f3e9c09eab533179be8efe478a0f21c3f83e6c",
        "patch": "@@ -60,6 +60,8 @@ class TransactionTableModel : public QAbstractTableModel\n         TxIDRole,\n         /** Transaction hash */\n         TxHashRole,\n+        /** Transaction data, hex-encoded */\n+        TxHexRole,\n         /** Is transaction confirmed? */\n         ConfirmedRole,\n         /** Formatted amount, without brackets when unconfirmed */"
      },
      {
        "sha": "11e6d750ac320a493ec028382f35505b8d70024a",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4f3e9c09eab533179be8efe478a0f21c3f83e6c/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4f3e9c09eab533179be8efe478a0f21c3f83e6c/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=b4f3e9c09eab533179be8efe478a0f21c3f83e6c",
        "patch": "@@ -141,6 +141,7 @@ TransactionView::TransactionView(const PlatformStyle *platformStyle, QWidget *pa\n     QAction *copyLabelAction = new QAction(tr(\"Copy label\"), this);\n     QAction *copyAmountAction = new QAction(tr(\"Copy amount\"), this);\n     QAction *copyTxIDAction = new QAction(tr(\"Copy transaction ID\"), this);\n+    QAction *copyTxHexAction = new QAction(tr(\"Copy raw transaction\"), this);\n     QAction *editLabelAction = new QAction(tr(\"Edit label\"), this);\n     QAction *showDetailsAction = new QAction(tr(\"Show transaction details\"), this);\n \n@@ -149,6 +150,7 @@ TransactionView::TransactionView(const PlatformStyle *platformStyle, QWidget *pa\n     contextMenu->addAction(copyLabelAction);\n     contextMenu->addAction(copyAmountAction);\n     contextMenu->addAction(copyTxIDAction);\n+    contextMenu->addAction(copyTxHexAction);\n     contextMenu->addAction(editLabelAction);\n     contextMenu->addAction(showDetailsAction);\n \n@@ -170,6 +172,7 @@ TransactionView::TransactionView(const PlatformStyle *platformStyle, QWidget *pa\n     connect(copyLabelAction, SIGNAL(triggered()), this, SLOT(copyLabel()));\n     connect(copyAmountAction, SIGNAL(triggered()), this, SLOT(copyAmount()));\n     connect(copyTxIDAction, SIGNAL(triggered()), this, SLOT(copyTxID()));\n+    connect(copyTxHexAction, SIGNAL(triggered()), this, SLOT(copyTxHex()));\n     connect(editLabelAction, SIGNAL(triggered()), this, SLOT(editLabel()));\n     connect(showDetailsAction, SIGNAL(triggered()), this, SLOT(showDetails()));\n }\n@@ -380,6 +383,11 @@ void TransactionView::copyTxID()\n     GUIUtil::copyEntryData(transactionView, 0, TransactionTableModel::TxIDRole);\n }\n \n+void TransactionView::copyTxHex()\n+{\n+    GUIUtil::copyEntryData(transactionView, 0, TransactionTableModel::TxHexRole);\n+}\n+\n void TransactionView::editLabel()\n {\n     if(!transactionView->selectionModel() ||!model)"
      },
      {
        "sha": "dde700c4d1498abbd713e2a750b7418ed95aae8c",
        "filename": "src/qt/transactionview.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4f3e9c09eab533179be8efe478a0f21c3f83e6c/src/qt/transactionview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4f3e9c09eab533179be8efe478a0f21c3f83e6c/src/qt/transactionview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.h?ref=b4f3e9c09eab533179be8efe478a0f21c3f83e6c",
        "patch": "@@ -93,6 +93,7 @@ private Q_SLOTS:\n     void copyLabel();\n     void copyAmount();\n     void copyTxID();\n+    void copyTxHex();\n     void openThirdPartyTxUrl(QString url);\n     void updateWatchOnlyColumn(bool fHaveWatchOnly);\n "
      }
    ]
  },
  {
    "sha": "a0953cdf07769cf0004a7dd2c0d7e4b5dd0dc578",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMDk1M2NkZjA3NzY5Y2YwMDA0YTdkZDJjMGQ3ZTRiNWRkMGRjNTc4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-18T11:11:04Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-19T11:39:49Z"
      },
      "message": "[qa] python-bitcoinrpc is no longer a subtree\n\n* Only authproxy.py is taken from the python-bitcoinrpc",
      "tree": {
        "sha": "3655ec81ff294e82eeddf5eb66bd9ab009a40181",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3655ec81ff294e82eeddf5eb66bd9ab009a40181"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a0953cdf07769cf0004a7dd2c0d7e4b5dd0dc578",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0953cdf07769cf0004a7dd2c0d7e4b5dd0dc578",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a0953cdf07769cf0004a7dd2c0d7e4b5dd0dc578",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0953cdf07769cf0004a7dd2c0d7e4b5dd0dc578/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eac53ec992018a14db6f8a65a7ce333a4c8284cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eac53ec992018a14db6f8a65a7ce333a4c8284cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eac53ec992018a14db6f8a65a7ce333a4c8284cc"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 2,
      "deletions": 4
    },
    "files": [
      {
        "sha": "bbaa3925ecd12d31eab2d4e2bfd3028ed3cf3945",
        "filename": "qa/rpc-tests/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0953cdf07769cf0004a7dd2c0d7e4b5dd0dc578/qa/rpc-tests/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0953cdf07769cf0004a7dd2c0d7e4b5dd0dc578/qa/rpc-tests/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/README.md?ref=a0953cdf07769cf0004a7dd2c0d7e4b5dd0dc578",
        "patch": "@@ -1,10 +1,8 @@\n Regression tests\n ================\n \n-### [python-bitcoinrpc](https://github.com/jgarzik/python-bitcoinrpc)\n-Git subtree of [https://github.com/jgarzik/python-bitcoinrpc](https://github.com/jgarzik/python-bitcoinrpc).\n-Changes to python-bitcoinrpc should be made upstream, and then\n-pulled here using git subtree.\n+### [test_framework/authproxy.py](test_framework/authproxy.py)\n+Taken from the [python-bitcoinrpc repository](https://github.com/jgarzik/python-bitcoinrpc).\n \n ### [test_framework/test_framework.py](test_framework/test_framework.py)\n Base class for new regression tests."
      }
    ]
  },
  {
    "sha": "a1907772f021e010cfcf524e01819d62934b348e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMTkwNzc3MmYwMjFlMDEwY2ZjZjUyNGUwMTgxOWQ2MjkzNGIzNDhl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-19T11:52:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-19T11:52:27Z"
      },
      "message": "Merge pull request #7051\n\nb4f3e9c ui: Add \"Copy raw transaction data\" to transaction list context menu (Wladimir J. van der Laan)",
      "tree": {
        "sha": "c4a2989574e00e69deac3709e66b95d03daceae2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4a2989574e00e69deac3709e66b95d03daceae2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1907772f021e010cfcf524e01819d62934b348e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWTbf7AAoJEHSBCwEjRsmmy4cH/3ktUgcOo3bv2N0419rLTCPE\nQEh9zetaXuIeoJjAat95C+B9VANxAm9ases7VjDDx1hPcShXVFfIH6nqE4j4I86y\nbhGQU+WpKaICL3wKYuSCeQaXquZ0zzmxRh3PBFbCwC9Em5K7+wSlH581pYHCwG2n\nz9QU3YAysexjpYdNBAP6P6O+tFm+/xg4Ya/N2xPe/KjNCaqrvVBOB+ZAIVE8zemY\n7DY/is9zqJ0F6Zt7BWMjdtsnq2TlusZSjBtmEOrh1ZiuZMdov4MkI6RUU3kxjSY3\nKYLdEetDShe9BcegPEBhNfBd7dntDWxP1QciDAcW2ywWcKj3RFGJqa6JhoLf3Ac=\n=x5xh\n-----END PGP SIGNATURE-----",
        "payload": "tree c4a2989574e00e69deac3709e66b95d03daceae2\nparent f8e87d74c9b7308905b321a77fb1a7b69b658a01\nparent b4f3e9c09eab533179be8efe478a0f21c3f83e6c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1447933940 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1447933947 +0100\n\nMerge pull request #7051\n\nb4f3e9c ui: Add \"Copy raw transaction data\" to transaction list context menu (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1907772f021e010cfcf524e01819d62934b348e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a1907772f021e010cfcf524e01819d62934b348e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1907772f021e010cfcf524e01819d62934b348e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f8e87d74c9b7308905b321a77fb1a7b69b658a01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8e87d74c9b7308905b321a77fb1a7b69b658a01",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f8e87d74c9b7308905b321a77fb1a7b69b658a01"
      },
      {
        "sha": "b4f3e9c09eab533179be8efe478a0f21c3f83e6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4f3e9c09eab533179be8efe478a0f21c3f83e6c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b4f3e9c09eab533179be8efe478a0f21c3f83e6c"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 26,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e8ada9f762dfa934e0a7cc575d6ef687d6a00b31",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1907772f021e010cfcf524e01819d62934b348e/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1907772f021e010cfcf524e01819d62934b348e/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=a1907772f021e010cfcf524e01819d62934b348e",
        "patch": "@@ -13,6 +13,7 @@\n #include \"transactionrecord.h\"\n #include \"walletmodel.h\"\n \n+#include \"core_io.h\"\n #include \"main.h\"\n #include \"sync.h\"\n #include \"uint256.h\"\n@@ -220,6 +221,18 @@ class TransactionTablePriv\n         }\n         return QString();\n     }\n+\n+    QString getTxHex(TransactionRecord *rec)\n+    {\n+        LOCK2(cs_main, wallet->cs_wallet);\n+        std::map<uint256, CWalletTx>::iterator mi = wallet->mapWallet.find(rec->hash);\n+        if(mi != wallet->mapWallet.end())\n+        {\n+            std::string strHex = EncodeHexTx(static_cast<CTransaction>(mi->second));\n+            return QString::fromStdString(strHex);\n+        }\n+        return QString();\n+    }\n };\n \n TransactionTableModel::TransactionTableModel(const PlatformStyle *platformStyle, CWallet* wallet, WalletModel *parent):\n@@ -594,6 +607,8 @@ QVariant TransactionTableModel::data(const QModelIndex &index, int role) const\n         return rec->getTxID();\n     case TxHashRole:\n         return QString::fromStdString(rec->hash.ToString());\n+    case TxHexRole:\n+        return priv->getTxHex(rec);\n     case ConfirmedRole:\n         return rec->status.countsForBalance;\n     case FormattedAmountRole:"
      },
      {
        "sha": "601f893d47ecb1c103b9429736d435fb21dae351",
        "filename": "src/qt/transactiontablemodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1907772f021e010cfcf524e01819d62934b348e/src/qt/transactiontablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1907772f021e010cfcf524e01819d62934b348e/src/qt/transactiontablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.h?ref=a1907772f021e010cfcf524e01819d62934b348e",
        "patch": "@@ -60,6 +60,8 @@ class TransactionTableModel : public QAbstractTableModel\n         TxIDRole,\n         /** Transaction hash */\n         TxHashRole,\n+        /** Transaction data, hex-encoded */\n+        TxHexRole,\n         /** Is transaction confirmed? */\n         ConfirmedRole,\n         /** Formatted amount, without brackets when unconfirmed */"
      },
      {
        "sha": "11e6d750ac320a493ec028382f35505b8d70024a",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1907772f021e010cfcf524e01819d62934b348e/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1907772f021e010cfcf524e01819d62934b348e/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=a1907772f021e010cfcf524e01819d62934b348e",
        "patch": "@@ -141,6 +141,7 @@ TransactionView::TransactionView(const PlatformStyle *platformStyle, QWidget *pa\n     QAction *copyLabelAction = new QAction(tr(\"Copy label\"), this);\n     QAction *copyAmountAction = new QAction(tr(\"Copy amount\"), this);\n     QAction *copyTxIDAction = new QAction(tr(\"Copy transaction ID\"), this);\n+    QAction *copyTxHexAction = new QAction(tr(\"Copy raw transaction\"), this);\n     QAction *editLabelAction = new QAction(tr(\"Edit label\"), this);\n     QAction *showDetailsAction = new QAction(tr(\"Show transaction details\"), this);\n \n@@ -149,6 +150,7 @@ TransactionView::TransactionView(const PlatformStyle *platformStyle, QWidget *pa\n     contextMenu->addAction(copyLabelAction);\n     contextMenu->addAction(copyAmountAction);\n     contextMenu->addAction(copyTxIDAction);\n+    contextMenu->addAction(copyTxHexAction);\n     contextMenu->addAction(editLabelAction);\n     contextMenu->addAction(showDetailsAction);\n \n@@ -170,6 +172,7 @@ TransactionView::TransactionView(const PlatformStyle *platformStyle, QWidget *pa\n     connect(copyLabelAction, SIGNAL(triggered()), this, SLOT(copyLabel()));\n     connect(copyAmountAction, SIGNAL(triggered()), this, SLOT(copyAmount()));\n     connect(copyTxIDAction, SIGNAL(triggered()), this, SLOT(copyTxID()));\n+    connect(copyTxHexAction, SIGNAL(triggered()), this, SLOT(copyTxHex()));\n     connect(editLabelAction, SIGNAL(triggered()), this, SLOT(editLabel()));\n     connect(showDetailsAction, SIGNAL(triggered()), this, SLOT(showDetails()));\n }\n@@ -380,6 +383,11 @@ void TransactionView::copyTxID()\n     GUIUtil::copyEntryData(transactionView, 0, TransactionTableModel::TxIDRole);\n }\n \n+void TransactionView::copyTxHex()\n+{\n+    GUIUtil::copyEntryData(transactionView, 0, TransactionTableModel::TxHexRole);\n+}\n+\n void TransactionView::editLabel()\n {\n     if(!transactionView->selectionModel() ||!model)"
      },
      {
        "sha": "dde700c4d1498abbd713e2a750b7418ed95aae8c",
        "filename": "src/qt/transactionview.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1907772f021e010cfcf524e01819d62934b348e/src/qt/transactionview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1907772f021e010cfcf524e01819d62934b348e/src/qt/transactionview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.h?ref=a1907772f021e010cfcf524e01819d62934b348e",
        "patch": "@@ -93,6 +93,7 @@ private Q_SLOTS:\n     void copyLabel();\n     void copyAmount();\n     void copyTxID();\n+    void copyTxHex();\n     void openThirdPartyTxUrl(QString url);\n     void updateWatchOnlyColumn(bool fHaveWatchOnly);\n "
      }
    ]
  },
  {
    "sha": "52c563710ddd80a90c58205e866a42b01887ab63",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MmM1NjM3MTBkZGQ4MGE5MGM1ODIwNWU4NjZhNDJiMDE4ODdhYjYz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-19T11:58:09Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-19T11:58:09Z"
      },
      "message": "qt: Periodic translations update",
      "tree": {
        "sha": "eac3768562a546aa4f88ee0941566eb24b8427ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eac3768562a546aa4f88ee0941566eb24b8427ef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/52c563710ddd80a90c58205e866a42b01887ab63",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWTblgAAoJEHSBCwEjRsmmt0sH/A5PyuvwX/ahH43+517T7qTG\n/pB6wC8xxsPTJeZJebPa60Z+Ek2OyJ6+SBjyCts1XHKpxOoWlKrVa1/vM5MTXE++\nRMKtRhFKLsk0W/tQhVLqCFzNw7xixbvNp7AxxYM+hP+/6YmDglss/c9reMRRVGEe\nKzxe5pLvxoo33RtFKJ7eySt3M86EDhMLJ8QfFCNfPObdLaEngRumAayc6k/asObk\nUpW8yQdUeYXh/uzh95TOzLuzHbFcteHLar4n5djiHxADQcCrmnsgmJCFIys79/VJ\nW9xB2AMvsk/3Si5GzPaNdhOlb7Yx2BiDC7oTLE+FbLZA4jKndoLLOP5dGLCx+Do=\n=a2cF\n-----END PGP SIGNATURE-----",
        "payload": "tree eac3768562a546aa4f88ee0941566eb24b8427ef\nparent a1907772f021e010cfcf524e01819d62934b348e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1447934289 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1447934289 +0100\n\nqt: Periodic translations update\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52c563710ddd80a90c58205e866a42b01887ab63",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/52c563710ddd80a90c58205e866a42b01887ab63",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52c563710ddd80a90c58205e866a42b01887ab63/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1907772f021e010cfcf524e01819d62934b348e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1907772f021e010cfcf524e01819d62934b348e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1907772f021e010cfcf524e01819d62934b348e"
      }
    ],
    "stats": {
      "total": 1959,
      "additions": 686,
      "deletions": 1273
    },
    "files": [
      {
        "sha": "244904653821616f15a477e1dbab68ec02f4fcdc",
        "filename": "src/qt/bitcoinstrings.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/bitcoinstrings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/bitcoinstrings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinstrings.cpp?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -188,7 +188,9 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Activating best chain...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Add a node to connect to and attempt to keep the connection open\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Allow DNS lookups for -addnode, -seednode and -connect\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Always query for peer addresses via DNS lookup (default: %u)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Always relay transactions received from whitelisted peers (default: %d)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Attempt to recover private keys from a corrupt wallet.dat on startup\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Automatically create Tor hidden service (default: %d)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Block creation options:\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Cannot downgrade wallet\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Cannot resolve -bind address: '%s'\"),\n@@ -295,6 +297,8 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"The transaction amount is too small to pay th\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"This help message\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"This is experimental software.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Threshold for disconnecting misbehaving peers (default: %u)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Tor control port password (default: empty)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Tor control port to use if onion listening enabled (default: %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction amount too small\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction amounts must be positive\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction too large for fee policy\"),\n@@ -317,6 +321,7 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Wallet needed to be rewritten: restart Bitcoi\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Wallet options:\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Warning\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Warning: This version is obsolete; upgrade required!\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Whether to operate in a blocks only mode (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"You need to rebuild the database using -reindex to change -txindex\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Zapping all transactions from wallet...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"ZeroMQ notification options:\"),"
      },
      {
        "sha": "8a54f157912d6d6f2c68f230b34877d7d37d8274",
        "filename": "src/qt/locale/bitcoin_ar.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_ar.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_ar.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ar.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1689,10 +1689,6 @@\n         <source>Warning</source>\n         <translation>\u062a\u062d\u0630\u064a\u0631</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>\u062a\u062d\u062f\u064a\u062b \u0627\u0644\u0645\u062d\u0641\u0638\u0629 \u0644\u0644\u0646\u0633\u062e\u0629 \u0627\u0644\u0627\u062e\u064a\u0631\u0629</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0645\u0633\u0627\u0639\u062f\u0629 \u0647\u0630\u0647</translation>"
      },
      {
        "sha": "c1efc822ecf937f7a6ebebd2197d97018a86908a",
        "filename": "src/qt/locale/bitcoin_be_BY.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_be_BY.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_be_BY.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_be_BY.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1423,10 +1423,6 @@\n         <source>Wallet options:</source>\n         <translation>\u041e\u043f\u0446\u044b\u0456 \u0433\u0430\u043c\u0430\u043d\u0446\u0430:</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>\u0406\u043c\u043f\u0430\u0440\u0442\u0430\u0432\u0430\u043d\u043d\u0435 \u0431\u043b\u043e\u043a\u0430\u045e \u0437 \u0432\u043e\u043d\u043a\u0430\u0432\u0430\u0433\u0430 blk000??.dat \u0444\u0430\u0439\u043b\u0430</translation>\n-    </message>\n     <message>\n         <source>Activating best chain...</source>\n         <translation>\u0410\u043a\u0442\u044b\u0432\u0430\u0446\u044b\u044f \u043b\u0435\u043f\u0448\u0430\u0433\u0430 \u043b\u0430\u043d\u0446\u0443\u0433\u0430...</translation>\n@@ -1479,14 +1475,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>\u0412\u044b\u043a\u0430\u043d\u0430\u0446\u044c \u043a\u0430\u043c\u0430\u043d\u0434\u0443 \u043a\u0430\u043b\u0456 \u043b\u0435\u043f\u0448\u044b \u0431\u043b\u043e\u043a \u0437\u043c\u0435\u043d\u0456\u0446\u0446\u0430 (%s \u0437\u0430\u043c\u044f\u043d\u044f\u0435\u0446\u0446\u0430 \u043d\u0430 \u0445\u044d\u0448 \u0431\u043b\u043e\u043a\u0430)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>\u0410\u0431\u043d\u0430\u0432\u0456\u0446\u044c \u0433\u0430\u043c\u0430\u043d\u0435\u0446 \u043d\u0430 \u043d\u043e\u0432\u044b \u0444\u0430\u0440\u043c\u0430\u0442</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>\u041f\u0435\u0440\u0430\u0441\u043a\u0430\u043d\u0430\u0432\u0430\u0446\u044c \u043b\u0430\u043d\u0446\u0443\u0433 \u0431\u043b\u043e\u043a\u0430\u045e \u0434\u0437\u0435\u043b\u044f \u043f\u043e\u0448\u0443\u043a\u0443 \u0430\u0434\u0441\u0443\u0442\u043d\u044b\u0445 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u044b\u0439</translation>\n-    </message>\n     <message>\n         <source>Loading addresses...</source>\n         <translation>\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0430\u0434\u0440\u0430\u0441\u044b...</translation>"
      },
      {
        "sha": "8496a334812d887e086602b843b52337425c3c31",
        "filename": "src/qt/locale/bitcoin_bg.ts",
        "status": "modified",
        "additions": 50,
        "deletions": 22,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_bg.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_bg.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_bg.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -167,6 +167,10 @@\n         <source>Are you sure you wish to encrypt your wallet?</source>\n         <translation>\u041d\u0430\u0438\u0441\u0442\u0438\u043d\u0430 \u043b\u0438 \u0436\u0435\u043b\u0430\u0435\u0442\u0435 \u0434\u0430 \u0448\u0438\u0444\u0440\u0438\u0440\u0430\u0442\u0435 \u043f\u043e\u0440\u0442\u0444\u0435\u0439\u043b\u0430 \u0441\u0438?</translation>\n     </message>\n+    <message>\n+        <source>Bitcoin Core will close now to finish the encryption process. Remember that encrypting your wallet cannot fully protect your bitcoins from being stolen by malware infecting your computer.</source>\n+        <translation>\u0411\u0438\u0442\u043a\u043e\u0438\u043d \u0441\u0435\u0433\u0430 \u0449\u0435 \u0441\u0435 \u0437\u0430\u0442\u043e\u0432\u0440\u0438 \u0437\u0430 \u0434\u0430 \u0437\u0430\u0432\u044a\u0440\u0448\u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0430 \u043d\u0430 \u043a\u0440\u0438\u043f\u0442\u0438\u0440\u0430\u043d\u0435. \u0417\u0430\u043f\u043e\u043c\u043d\u0435\u0442\u0435, \u0447\u0435 \u043a\u0440\u0438\u043f\u0442\u0438\u0440\u0430\u043d\u0435\u0442\u043e \u043d\u0430 \u0432\u0430\u0448\u0438\u044f \u043f\u043e\u0440\u0442\u0435\u0444\u0435\u0439\u043b \u043d\u0435 \u043c\u043e\u0436\u0435 \u043d\u0430\u043f\u044a\u043b\u043d\u043e \u0434\u0430 \u043f\u0440\u0435\u0434\u043f\u0430\u0437\u0438 \u0432\u0430\u0448\u0438\u0442\u0435 \u043c\u043e\u043d\u0435\u0442\u0438 \u043e\u0442 \u043a\u0440\u0430\u0436\u0431\u0430 \u0447\u0440\u0435\u0437 \u0437\u043b\u043e\u0432\u0440\u0435\u0434\u0435\u043d \u0441\u043e\u0444\u0442\u0443\u0435\u0440, \u0438\u043d\u0444\u0435\u043a\u0442\u0438\u0440\u0430\u043b \u0432\u0430\u0448\u0438\u044f \u043a\u043e\u043c\u043f\u044e\u0442\u044a\u0440</translation>\n+    </message>\n     <message>\n         <source>IMPORTANT: Any previous backups you have made of your wallet file should be replaced with the newly generated, encrypted wallet file. For security reasons, previous backups of the unencrypted wallet file will become useless as soon as you start using the new, encrypted wallet.</source>\n         <translation>\u0412\u0410\u0416\u041d\u041e: \u0412\u0441\u0438\u0447\u043a\u0438 \u0441\u0442\u0430\u0440\u0438 \u0437\u0430\u043f\u0430\u0437\u0432\u0430\u043d\u0438\u044f, \u043a\u043e\u0438\u0442\u043e \u0441\u0442\u0435 \u043d\u0430\u043f\u0440\u0430\u0432\u0438\u043b\u0438 \u043d\u0430 \u0412\u0430\u0448\u0438\u044f\u0442 \u043f\u043e\u0440\u0442\u0444\u0435\u0439\u043b \u0442\u0440\u044f\u0431\u0432\u0430 \u0434\u0430 \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u0435 \u0441 \u0437\u0430\u043f\u0430\u0437\u0432\u0430\u043d\u0435 \u043d\u0430 \u043d\u043e\u0432\u043e\u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f, \u0448\u0438\u0444\u0440\u0438\u0440\u0430\u043d \u043f\u043e\u0440\u0442\u0444\u0435\u0439\u043b. \u041e\u0442 \u0441\u044a\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0437\u0430 \u0441\u0438\u0433\u0443\u0440\u043d\u043e\u0441\u0442, \u043f\u0440\u0435\u0434\u0438\u0448\u043d\u0438\u0442\u0435 \u0437\u0430\u043f\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0448\u0438\u0444\u0440\u0438\u0440\u0430\u043d\u0438 \u043f\u043e\u0440\u0442\u0444\u0435\u0439\u043b\u0438 \u0449\u0435 \u0441\u0442\u0430\u043d\u0430\u0442 \u043d\u0435\u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u0435\u043c\u0438 \u0432\u0435\u0434\u043d\u0430\u0433\u0430, \u0449\u043e\u043c \u0437\u0430\u043f\u043e\u0447\u043d\u0435\u0442\u0435 \u0434\u0430 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u0442\u0435 \u043d\u043e\u0432\u0438\u044f\u0442, \u0448\u0438\u0444\u0440\u0438\u0440\u0430\u043d \u043f\u043e\u0440\u0442\u0444\u0435\u0439\u043b.</translation>\n@@ -413,6 +417,10 @@\n         <source>%1 behind</source>\n         <translation>%1 \u0437\u0430\u0434</translation>\n     </message>\n+    <message>\n+        <source>Last received block was generated %1 ago.</source>\n+        <translation>\u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d \u0431\u043b\u043e\u043a \u0435 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0430\u043d \u043f\u0440\u0435\u0434\u0438 %1.</translation>\n+    </message>\n     <message>\n         <source>Transactions after this will not yet be visible.</source>\n         <translation>\u0422\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u0441\u043b\u0435\u0434 \u0442\u043e\u0432\u0430 \u043d\u044f\u043c\u0430 \u0432\u0441\u0435 \u043e\u0449\u0435 \u0434\u0430 \u0431\u044a\u0434\u0430\u0442 \u0432\u0438\u0434\u0438\u043c\u0438.</translation>\n@@ -635,6 +643,10 @@\n         <source>none</source>\n         <translation>\u043d\u0438\u0449\u043e</translation>\n     </message>\n+    <message>\n+        <source>This label turns red if the transaction size is greater than 1000 bytes.</source>\n+        <translation>\u0422\u043e\u0437\u0438 \u0435\u0442\u0438\u043a\u0435\u0442 \u0441\u0442\u0430\u0432\u0430 \u0447\u0435\u0440\u0432\u0435\u043d, \u043a\u043e\u0433\u0430\u0442\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u043d\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f\u0442\u0430 \u0435 \u043f\u043e-\u0433\u043e\u043b\u044f\u043c\u0430 \u043e\u0442 1000 \u0431\u0438\u0442\u0430.</translation>\n+    </message>\n     <message>\n         <source>yes</source>\n         <translation>\u0434\u0430</translation>\n@@ -849,6 +861,10 @@\n         <source>&amp;Network</source>\n         <translation>&amp;\u041c\u0440\u0435\u0436\u0430</translation>\n     </message>\n+    <message>\n+        <source>Automatically start Bitcoin Core after logging in to the system.</source>\n+        <translation>\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u043d\u043e \u0441\u0442\u0430\u0440\u0442\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 Bitcoin Core \u0441\u043b\u0435\u0434 \u0432\u043b\u0438\u0437\u0430\u043d\u0435 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0442\u0430.</translation>\n+    </message>\n     <message>\n         <source>W&amp;allet</source>\n         <translation>\u041f\u043e&amp;\u0440\u0442\u0444\u0435\u0439\u043b</translation>\n@@ -1047,10 +1063,22 @@\n         <source>Payment request file handling</source>\n         <translation>\u0424\u0430\u0439\u043b \u0437\u0430 \u0441\u043f\u0440\u0430\u0432\u044f\u043d\u0435 \u0441\u044a\u0441 \u0437\u0430\u044f\u0432\u043a\u0438</translation>\n     </message>\n+    <message>\n+        <source>Payment request expired.</source>\n+        <translation>\u0417\u0430\u044f\u0432\u043a\u0430\u0442\u0430 \u0437\u0430 \u043f\u043b\u0430\u0449\u0430\u043d\u0435 \u0435 \u0438\u0437\u0442\u0435\u043a\u043b\u0430.</translation>\n+    </message>\n+    <message>\n+        <source>Invalid payment request.</source>\n+        <translation>\u041d\u0435\u0432\u0430\u043b\u0438\u0434\u043d\u0430 \u0437\u0430\u044f\u0432\u043a\u0430 \u0437\u0430 \u043f\u043b\u0430\u0449\u0430\u043d\u0435.</translation>\n+    </message>\n     <message>\n         <source>Refund from %1</source>\n         <translation>\u0412\u044a\u0437\u0441\u0442\u0430\u043d\u043e\u0432\u044f\u0432\u0430\u043d\u0435 \u043d\u0430 \u0441\u0443\u043c\u0430 \u043e\u0442 %1</translation>\n     </message>\n+    <message>\n+        <source>Payment request %1 is too large (%2 bytes, allowed %3 bytes).</source>\n+        <translation>\u0417\u0430\u044f\u0432\u043a\u0430\u0442\u0430 \u0437\u0430 \u043f\u043b\u0430\u0449\u0430\u043d\u0435 %1 \u0435 \u0442\u0432\u044a\u0440\u0434\u0435 \u0433\u043e\u043b\u044f\u043c (%2 \u0431\u0430\u0439\u0442\u0430, \u043f\u043e\u0437\u0432\u043e\u043b\u0435\u043d\u0438 %3 \u0431\u0430\u0439\u0442\u0430).</translation>\n+    </message>\n     <message>\n         <source>Error communicating with %1: %2</source>\n         <translation>\u0413\u0440\u0435\u0448\u043a\u0430 \u043f\u0440\u0438 \u043a\u043e\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u044f\u0442\u0430 \u0441 %1: %2</translation>\n@@ -1235,14 +1263,6 @@\n         <source>Last Receive</source>\n         <translation>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438 \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u043e</translation>\n     </message>\n-    <message>\n-        <source>Bytes Sent</source>\n-        <translation>\u0418\u0437\u043f\u0440\u0430\u0442\u0435\u043d\u0438 \u0431\u0430\u0439\u0442\u043e\u0432\u0435</translation>\n-    </message>\n-    <message>\n-        <source>Bytes Received</source>\n-        <translation>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438 \u0431\u0430\u0439\u0442\u043e\u0432\u0435</translation>\n-    </message>\n     <message>\n         <source>Ping Time</source>\n         <translation>\u0412\u0440\u0435\u043c\u0435 \u0437\u0430 \u043e\u0442\u0433\u043e\u0432\u043e\u0440</translation>\n@@ -1331,6 +1351,14 @@\n         <source>Outbound</source>\n         <translation>\u0418\u0437\u0445\u043e\u0434\u044f\u0449\u0438</translation>\n     </message>\n+    <message>\n+        <source>Yes</source>\n+        <translation>\u0414\u0430</translation>\n+    </message>\n+    <message>\n+        <source>No</source>\n+        <translation>\u041d\u0435</translation>\n+    </message>\n     <message>\n         <source>Unknown</source>\n         <translation>\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u0435\u043d</translation>\n@@ -1535,6 +1563,10 @@\n         <source>per kilobyte</source>\n         <translation>\u0437\u0430 \u043a\u0438\u043b\u043e\u0431\u0430\u0439\u0442</translation>\n     </message>\n+    <message>\n+        <source>Hide</source>\n+        <translation>\u0421\u043a\u0440\u0438\u0439</translation>\n+    </message>\n     <message>\n         <source>total at least</source>\n         <translation>\u041a\u0440\u0430\u0439\u043d\u0430 \u0441\u0443\u043c\u0430 \u043f\u043e\u043d\u0435</translation>\n@@ -1644,8 +1676,8 @@\n         <translation>\u0413\u0440\u0435\u0448\u043a\u0430 \u043f\u0440\u0438 \u0441\u044a\u0437\u0434\u0430\u0432\u0430\u043d\u0435\u0442\u043e \u043d\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f!</translation>\n     </message>\n     <message>\n-        <source>Pay only the minimum fee of %1</source>\n-        <translation>\u041f\u043b\u0430\u0442\u0435\u0442\u0435 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u043d\u0430\u0442\u0430 \u0442\u0430\u043a\u0441\u0430 \u043e\u0442 %1</translation>\n+        <source>Payment request expired.</source>\n+        <translation>\u0417\u0430\u044f\u0432\u043a\u0430\u0442\u0430 \u0437\u0430 \u043f\u043b\u0430\u0449\u0430\u043d\u0435 \u0435 \u0438\u0437\u0442\u0435\u043a\u043b\u0430.</translation>\n     </message>\n     <message>\n         <source>Warning: Invalid Bitcoin address</source>\n@@ -1925,6 +1957,10 @@\n         <source>own address</source>\n         <translation>\u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d \u0430\u0434\u0440\u0435\u0441</translation>\n     </message>\n+    <message>\n+        <source>watch-only</source>\n+        <translation>\u0441\u0430\u043c\u043e \u0433\u043b\u0435\u0434\u0430\u043d\u0435</translation>\n+    </message>\n     <message>\n         <source>label</source>\n         <translation>\u0438\u043c\u0435</translation>\n@@ -2087,6 +2123,10 @@\n         <source>Mined</source>\n         <translation>\u0415\u043c\u0438\u0442\u0438\u0440\u0430\u043d\u0438</translation>\n     </message>\n+    <message>\n+        <source>watch-only</source>\n+        <translation>\u0441\u0430\u043c\u043e \u0433\u043b\u0435\u0434\u0430\u043d\u0435</translation>\n+    </message>\n     <message>\n         <source>(n/a)</source>\n         <translation>(n/a)</translation>\n@@ -2429,22 +2469,10 @@\n         <source>Warning</source>\n         <translation>\u041f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435</translation>\n     </message>\n-    <message>\n-        <source>on startup</source>\n-        <translation>\u043f\u043e \u0432\u0440\u0435\u043c\u0435 \u043d\u0430 \u0441\u0442\u0430\u0440\u0442\u0438\u0440\u0430\u043d\u0435\u0442\u043e</translation>\n-    </message>\n     <message>\n         <source>Password for JSON-RPC connections</source>\n         <translation>\u041f\u0430\u0440\u043e\u043b\u0430 \u0437\u0430  JSON-RPC \u0432\u0440\u044a\u0437\u043a\u0438\u0442\u0435</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>\u041e\u0431\u043d\u043e\u0432\u044f\u0432\u0430\u043d\u0435 \u043d\u0430 \u043f\u043e\u0440\u0442\u0444\u0435\u0439\u043b\u0430 \u0434\u043e \u043d\u0430\u0439-\u043d\u043e\u0432\u0438\u044f \u0444\u043e\u0440\u043c\u0430\u0442</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>\u041f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0441\u043a\u0430\u043d\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 \u0431\u043b\u043e\u043a-\u0432\u0440\u044a\u0437\u043a\u0430 \u0437\u0430 \u043b\u0438\u043f\u0441\u0432\u0430\u0449\u0438 \u043f\u043e\u0440\u0442\u0444\u0435\u0439\u043b\u043d\u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>\u0422\u043e\u0432\u0430 \u043f\u043e\u043c\u043e\u0449\u043d\u043e \u0441\u044a\u043e\u0431\u0449\u0435\u043d\u0438\u0435</translation>"
      },
      {
        "sha": "dcbe4dc4cbd049e0939d2f802cc990a00a6e5eed",
        "filename": "src/qt/locale/bitcoin_ca.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 32,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_ca.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_ca.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ca.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1493,14 +1493,6 @@\n         <source>Last Receive</source>\n         <translation>Darrera recepci\u00f3</translation>\n     </message>\n-    <message>\n-        <source>Bytes Sent</source>\n-        <translation>Bytes enviats</translation>\n-    </message>\n-    <message>\n-        <source>Bytes Received</source>\n-        <translation>Bytes rebuts</translation>\n-    </message>\n     <message>\n         <source>Ping Time</source>\n         <translation>Temps de ping</translation>\n@@ -2009,10 +2001,6 @@\n         <source>Estimated to begin confirmation within %n block(s).</source>\n         <translation><numerusform>Estimat per comen\u00e7ar la confirmaci\u00f3 en %n bloc.</numerusform><numerusform>Estimat per comen\u00e7ar la confirmaci\u00f3 en %n blocs.</numerusform></translation>\n     </message>\n-    <message>\n-        <source>Pay only the minimum fee of %1</source>\n-        <translation>Paga nom\u00e9s la comissi\u00f3 m\u00ednima de %1</translation>\n-    </message>\n     <message>\n         <source>The recipient address is not valid. Please recheck.</source>\n         <translation>L'adre\u00e7a de destinatari no \u00e9s v\u00e0lida. Torneu-la a comprovar.</translation>\n@@ -2859,10 +2847,6 @@\n         <source>&lt;category&gt; can be:</source>\n         <translation>&lt;category&gt; pot ser:</translation>\n     </message>\n-    <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>Intenta recuperar les claus privades d'un fitxer wallet.dat corrupte</translation>\n-    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>Opcions de la creaci\u00f3 de blocs:</translation>\n@@ -2983,10 +2967,6 @@\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>Cal que reconstru\u00efu la base de dades fent servir -reindex per canviar -txindex</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>Importa blocs de un fitxer blk000??.dat extern</translation>\n-    </message>\n     <message>\n         <source>Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times</source>\n         <translation>Permet les connexions JSON-RPC d'una font espec\u00edfica. V\u00e0lid per a &lt;ip&gt; s\u00f3n una IP individual (p. ex., 1.2.3.4), una xarxa / m\u00e0scara de xarxa (p. ex., 1.2.3.4/255.255.255.0) o una xarxa/CIDR (p. ex., 1.2.3.4/24). Es pot especificar aquesta opci\u00f3 moltes vegades</translation>\n@@ -3235,10 +3215,6 @@\n         <source>Zapping all transactions from wallet...</source>\n         <translation>Se suprimeixen totes les transaccions del moneder...</translation>\n     </message>\n-    <message>\n-        <source>on startup</source>\n-        <translation>a l'inici de l'aplicaci\u00f3</translation>\n-    </message>\n     <message>\n         <source>wallet.dat corrupt, salvage failed</source>\n         <translation>El fitxer wallet.data \u00e9s corrupte. El rescat de les dades ha fallat</translation>\n@@ -3251,14 +3227,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Executa l'ordre quan el millor bloc canvi\u00ef (%s en cmd es reempla\u00e7a per un resum de bloc)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>Actualitza el moneder a l'\u00faltim format</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>Reescaneja la cadena de blocs en les transaccions de moneder perdudes</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>Aquest misatge d'ajuda</translation>"
      },
      {
        "sha": "e717f53d47eee789b7f463cdebd859e82a9176f2",
        "filename": "src/qt/locale/bitcoin_ca@valencia.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 32,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_ca@valencia.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_ca@valencia.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ca@valencia.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1489,14 +1489,6 @@\n         <source>Last Receive</source>\n         <translation>Darrera recepci\u00f3</translation>\n     </message>\n-    <message>\n-        <source>Bytes Sent</source>\n-        <translation>Bytes enviats</translation>\n-    </message>\n-    <message>\n-        <source>Bytes Received</source>\n-        <translation>Bytes rebuts</translation>\n-    </message>\n     <message>\n         <source>Ping Time</source>\n         <translation>Temps de ping</translation>\n@@ -2005,10 +1997,6 @@\n         <source>Estimated to begin confirmation within %n block(s).</source>\n         <translation><numerusform>Estimat per comen\u00e7ar la confirmaci\u00f3 en %n bloc.</numerusform><numerusform>Estimat per comen\u00e7ar la confirmaci\u00f3 en %n blocs.</numerusform></translation>\n     </message>\n-    <message>\n-        <source>Pay only the minimum fee of %1</source>\n-        <translation>Paga nom\u00e9s la comissi\u00f3 m\u00ednima de %1</translation>\n-    </message>\n     <message>\n         <source>The recipient address is not valid. Please recheck.</source>\n         <translation>L'adre\u00e7a de destinatari no \u00e9s v\u00e0lida. Torneu-la a comprovar.</translation>\n@@ -2855,10 +2843,6 @@\n         <source>&lt;category&gt; can be:</source>\n         <translation>&lt;category&gt; pot ser:</translation>\n     </message>\n-    <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>Intenta recuperar les claus privades d'un fitxer wallet.dat corrupte</translation>\n-    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>Opcions de la creaci\u00f3 de blocs:</translation>\n@@ -2979,10 +2963,6 @@\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>Cal que reconstru\u00efu la base de dades fent servir -reindex per canviar -txindex</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>Importa blocs d'un fitxer blk000??.dat extern</translation>\n-    </message>\n     <message>\n         <source>Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times</source>\n         <translation>Permet les connexions JSON-RPC d'una font espec\u00edfica. V\u00e0lid per a &lt;ip&gt; s\u00f3n una IP individual (p. ex., 1.2.3.4), una xarxa / m\u00e0scara de xarxa (p. ex., 1.2.3.4/255.255.255.0) o una xarxa/CIDR (p. ex., 1.2.3.4/24). Es pot especificar esta opci\u00f3 moltes vegades</translation>\n@@ -3231,10 +3211,6 @@\n         <source>Zapping all transactions from wallet...</source>\n         <translation>Se suprimeixen totes les transaccions del moneder...</translation>\n     </message>\n-    <message>\n-        <source>on startup</source>\n-        <translation>a l'inici de l'aplicaci\u00f3</translation>\n-    </message>\n     <message>\n         <source>wallet.dat corrupt, salvage failed</source>\n         <translation>El fitxer wallet.data \u00e9s corrupte. El rescat de les dades ha fallat</translation>\n@@ -3247,14 +3223,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Executa l'orde quan el millor bloc canvie (%s en cmd es reempla\u00e7a per un resum de bloc)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>Actualitza el moneder a l'\u00faltim format</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>Reescaneja la cadena de blocs en les transaccions de moneder perdudes</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>Este misatge d'ajuda</translation>"
      },
      {
        "sha": "331ad835f6460bf94763e7ff760450d88a137d6d",
        "filename": "src/qt/locale/bitcoin_ca_ES.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 32,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_ca_ES.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_ca_ES.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ca_ES.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1493,14 +1493,6 @@\n         <source>Last Receive</source>\n         <translation>Darrera recepci\u00f3</translation>\n     </message>\n-    <message>\n-        <source>Bytes Sent</source>\n-        <translation>Bytes enviats</translation>\n-    </message>\n-    <message>\n-        <source>Bytes Received</source>\n-        <translation>Bytes rebuts</translation>\n-    </message>\n     <message>\n         <source>Ping Time</source>\n         <translation>Temps de ping</translation>\n@@ -2009,10 +2001,6 @@\n         <source>Estimated to begin confirmation within %n block(s).</source>\n         <translation><numerusform>Estimat per comen\u00e7ar la confirmaci\u00f3 en %n bloc.</numerusform><numerusform>Estimat per comen\u00e7ar la confirmaci\u00f3 en %n blocs.</numerusform></translation>\n     </message>\n-    <message>\n-        <source>Pay only the minimum fee of %1</source>\n-        <translation>Paga nom\u00e9s la comissi\u00f3 m\u00ednima de %1</translation>\n-    </message>\n     <message>\n         <source>The recipient address is not valid. Please recheck.</source>\n         <translation>L'adre\u00e7a de destinatari no \u00e9s v\u00e0lida. Torneu-la a comprovar.</translation>\n@@ -2859,10 +2847,6 @@\n         <source>&lt;category&gt; can be:</source>\n         <translation>&lt;category&gt; pot ser:</translation>\n     </message>\n-    <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>Intenta recuperar les claus privades d'un fitxer wallet.dat corrupte</translation>\n-    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>Opcions de la creaci\u00f3 de blocs:</translation>\n@@ -2983,10 +2967,6 @@\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>Cal que reconstru\u00efu la base de dades fent servir -reindex per canviar -txindex</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>Importa blocs de un fitxer blk000??.dat extern</translation>\n-    </message>\n     <message>\n         <source>Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times</source>\n         <translation>Permet les connexions JSON-RPC d'una font espec\u00edfica. V\u00e0lid per a &lt;ip&gt; s\u00f3n una IP individual (p. ex., 1.2.3.4), una xarxa / m\u00e0scara de xarxa (p. ex., 1.2.3.4/255.255.255.0) o una xarxa/CIDR (p. ex., 1.2.3.4/24). Es pot especificar aquesta opci\u00f3 moltes vegades</translation>\n@@ -3235,10 +3215,6 @@\n         <source>Zapping all transactions from wallet...</source>\n         <translation>Se suprimeixen totes les transaccions del moneder...</translation>\n     </message>\n-    <message>\n-        <source>on startup</source>\n-        <translation>a l'inici de l'aplicaci\u00f3</translation>\n-    </message>\n     <message>\n         <source>wallet.dat corrupt, salvage failed</source>\n         <translation>El fitxer wallet.data \u00e9s corrupte. El rescat de les dades ha fallat</translation>\n@@ -3251,14 +3227,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Executa l'ordre quan el millor bloc canvi\u00ef (%s en cmd es reempla\u00e7a per un resum de bloc)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>Actualitza el moneder a l'\u00faltim format</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>Reescaneja la cadena de blocs en les transaccions de moneder perdudes</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>Aquest misatge d'ajuda</translation>"
      },
      {
        "sha": "a2232dbe8e8145b13f165d45c38241ca024f73f9",
        "filename": "src/qt/locale/bitcoin_cs.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 32,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_cs.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_cs.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_cs.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1493,14 +1493,6 @@\n         <source>Last Receive</source>\n         <translation>Posledn\u00ed p\u0159\u00edjem</translation>\n     </message>\n-    <message>\n-        <source>Bytes Sent</source>\n-        <translation>Bajt\u016f odesl\u00e1no</translation>\n-    </message>\n-    <message>\n-        <source>Bytes Received</source>\n-        <translation>Bajt\u016f p\u0159ijato</translation>\n-    </message>\n     <message>\n         <source>Ping Time</source>\n         <translation>Odezva</translation>\n@@ -2009,10 +2001,6 @@\n         <source>Estimated to begin confirmation within %n block(s).</source>\n         <translation><numerusform>Potvrzov\u00e1n\u00ed by podle odhadu m\u011blo za\u010d\u00edt b\u011bhem %n bloku.</numerusform><numerusform>Potvrzov\u00e1n\u00ed by podle odhadu m\u011blo za\u010d\u00edt b\u011bhem %n blok\u016f.</numerusform><numerusform>Potvrzov\u00e1n\u00ed by podle odhadu m\u011blo za\u010d\u00edt b\u011bhem %n blok\u016f.</numerusform></translation>\n     </message>\n-    <message>\n-        <source>Pay only the minimum fee of %1</source>\n-        <translation>Zaplatit pouze minim\u00e1ln\u00ed poplatek %1</translation>\n-    </message>\n     <message>\n         <source>The recipient address is not valid. Please recheck.</source>\n         <translation>Adresa p\u0159\u00edjemce je neplatn\u00e1 \u2013 p\u0159ekontroluj ji pros\u00edm.</translation>\n@@ -2859,10 +2847,6 @@\n         <source>&lt;category&gt; can be:</source>\n         <translation>&lt;category&gt; m\u016f\u017ee b\u00fdt:</translation>\n     </message>\n-    <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>Pokusit se zachr\u00e1nit soukrom\u00e9 kl\u00ed\u010de z po\u0161kozen\u00e9ho souboru wallet.dat</translation>\n-    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>Mo\u017enosti vytv\u00e1\u0159en\u00ed bloku:</translation>\n@@ -2983,10 +2967,6 @@\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>Je t\u0159eba p\u0159estav\u011bt datab\u00e1zi pou\u017eit\u00edm -reindex, aby bylo mo\u017en\u00e9 zm\u011bnit -txindex</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>Importovat bloky z extern\u00edho souboru blk000??.dat</translation>\n-    </message>\n     <message>\n         <source>Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times</source>\n         <translation>Povolit JSON-RPC spojen\u00ed ze specifikovan\u00e9ho zdroje. Platnou hodnotou &lt;ip&gt; je jednotliv\u00e1 IP adresa (nap\u0159. 1.2.3.4), s\u00ed\u0165/maska (nap\u0159. 1.2.3.4/255.255.255.0) nebo s\u00ed\u0165/CIDR (nap\u0159. 1.2.3.4/24). Tuto volbu lze pou\u017e\u00edt i v\u00edcekr\u00e1t</translation>\n@@ -3235,10 +3215,6 @@\n         <source>Zapping all transactions from wallet...</source>\n         <translation>Vymazat v\u0161echny transakce z pen\u011b\u017eenky...</translation>\n     </message>\n-    <message>\n-        <source>on startup</source>\n-        <translation>p\u0159i startu</translation>\n-    </message>\n     <message>\n         <source>wallet.dat corrupt, salvage failed</source>\n         <translation>Soubor wallet.dat je po\u0161kozen, jeho z\u00e1chrana se nezda\u0159ila</translation>\n@@ -3251,14 +3227,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Spustit p\u0159\u00edkaz, kdy\u017e se zm\u011bn\u00ed nejlep\u0161\u00ed blok (%s se v p\u0159\u00edkazu nahrad\u00ed hashem bloku)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>P\u0159ev\u00e9st pen\u011b\u017eenku na nejnov\u011bj\u0161\u00ed form\u00e1t</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>P\u0159eskenovat \u0159et\u011bzec blok\u016f na chyb\u011bj\u00edc\u00ed transakce tv\u00e9 p\u011bn\u011b\u017eenky</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>Tato n\u00e1pov\u011bda</translation>"
      },
      {
        "sha": "93594dcb059ddc074dfa9172b40354b884b7b5dd",
        "filename": "src/qt/locale/bitcoin_da.ts",
        "status": "modified",
        "additions": 31,
        "deletions": 43,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_da.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_da.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_da.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1129,7 +1129,7 @@\n     </message>\n     <message>\n         <source>&amp;Unit to show amounts in:</source>\n-        <translation>&amp;Enhed at vise bel\u00f8b i:</translation>\n+        <translation>&amp;Enhed, som bel\u00f8b vises i:</translation>\n     </message>\n     <message>\n         <source>Choose the default subdivision unit to show in the interface and when sending coins.</source>\n@@ -1141,7 +1141,7 @@\n     </message>\n     <message>\n         <source>&amp;OK</source>\n-        <translation>&amp;O.k.</translation>\n+        <translation>&amp;Ok</translation>\n     </message>\n     <message>\n         <source>&amp;Cancel</source>\n@@ -1200,7 +1200,7 @@\n     </message>\n     <message>\n         <source>Pending:</source>\n-        <translation>Uafgjort:</translation>\n+        <translation>Afventende:</translation>\n     </message>\n     <message>\n         <source>Total of transactions that have yet to be confirmed, and do not yet count toward the spendable balance</source>\n@@ -1545,14 +1545,6 @@\n         <source>Last Receive</source>\n         <translation>Seneste modtagelse</translation>\n     </message>\n-    <message>\n-        <source>Bytes Sent</source>\n-        <translation>Byte sendt</translation>\n-    </message>\n-    <message>\n-        <source>Bytes Received</source>\n-        <translation>Byte modtaget</translation>\n-    </message>\n     <message>\n         <source>Ping Time</source>\n         <translation>Ping-tid</translation>\n@@ -2065,6 +2057,10 @@\n         <source>Copy change</source>\n         <translation>Kopi\u00e9r byttepenge</translation>\n     </message>\n+    <message>\n+        <source>Total Amount %1</source>\n+        <translation>Totalbel\u00f8b %1</translation>\n+    </message>\n     <message>\n         <source>or</source>\n         <translation>eller</translation>\n@@ -2097,18 +2093,14 @@\n         <source>Payment request expired.</source>\n         <translation>Betalingsanmodning er udl\u00f8bet.</translation>\n     </message>\n+    <message>\n+        <source>Pay only the required fee of %1</source>\n+        <translation>Betal kun det p\u00e5kr\u00e6vede gebyr p\u00e5 %1</translation>\n+    </message>\n     <message numerus=\"yes\">\n         <source>Estimated to begin confirmation within %n block(s).</source>\n         <translation><numerusform>Bekr\u00e6ftelse estimeres til at begynde inden for %n blok.</numerusform><numerusform>Bekr\u00e6ftelse estimeres til at begynde inden for %n blokke.</numerusform></translation>\n     </message>\n-    <message>\n-        <source>Pay only the minimum fee of %1</source>\n-        <translation>Betal kun det minimale gebyr p\u00e5 %1</translation>\n-    </message>\n-    <message>\n-        <source>Total Amount %1&lt;span style='font-size:10pt;font-weight:normal;'&gt;&lt;br /&gt;(=%2)&lt;/span&gt;</source>\n-        <translation>Totalbel\u00f8b %1&lt;span style='font-size:10pt;font-weight:normal;'&gt;&lt;br /&gt;(=%2)&lt;/span&gt;</translation>\n-    </message>\n     <message>\n         <source>The recipient address is not valid. Please recheck.</source>\n         <translation>Modtageradressen er ikke gyldig. Tjek venligst igen.</translation>\n@@ -2887,10 +2879,6 @@\n         <source>Accept command line and JSON-RPC commands</source>\n         <translation>Accept\u00e9r kommandolinje- og JSON-RPC-kommandoer</translation>\n     </message>\n-    <message>\n-        <source>Fees (in %s/kB) smaller than this are considered zero fee for relaying (default: %s)</source>\n-        <translation>Gebyrer (i %s/kB) mindre end dette opfattes som nul-gebyr under videresendelse (standard: %s)</translation>\n-    </message>\n     <message>\n         <source>If &lt;category&gt; is not supplied or if &lt;category&gt; = 1, output all debugging information.</source>\n         <translation>Hvis &lt;category&gt; ikke angives eller hvis &lt;category&gt; = 1, udskriv al fejlretningsinformation.</translation>\n@@ -3015,10 +3003,6 @@\n         <source>&lt;category&gt; can be:</source>\n         <translation>&lt;kategori&gt; kan v\u00e6re:</translation>\n     </message>\n-    <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>Fors\u00f8g at genskabe private n\u00f8gler fra \u00f8delagt wallet.dat</translation>\n-    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>Blokoprettelsestilvalg:</translation>\n@@ -3175,10 +3159,6 @@\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>Du er n\u00f8dt til at genopbygge databasen ved hj\u00e6lp af -reindex for at \u00e6ndre -txindex</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>Importerer blokke fra ekstern blk000??.dat fil</translation>\n-    </message>\n     <message>\n         <source>Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times</source>\n         <translation>Tillad JSON-RPC-forbindelser fra angivet kilde. Gyldig for &lt;ip&gt; er en enkelt IP (fx 1.2.3.4), et netv\u00e6rk/netmaske (fx 1.2.3.4/255.255.255.0) eller et netv\u00e6rk/CIDR (fx 1.2.3.4/24). Dette tilvalg kan angives flere gange</translation>\n@@ -3211,6 +3191,10 @@\n         <source>Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)</source>\n         <translation>Udf\u00f8r kommando, n\u00e5r en relevant alarm modtages eller vi ser en virkelig lang udsplitning (%s i cmd erstattes af besked)</translation>\n     </message>\n+    <message>\n+        <source>Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)</source>\n+        <translation>Gebyrer (i %s/kB) mindre end dette opfattes som intet gebyr for videresendelse, mining og oprettelse af transaktioner (standard: %s)</translation>\n+    </message>\n     <message>\n         <source>If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)</source>\n         <translation>Hvis paytxfee ikke er sat, inkluderes nok gebyr til at transaktioner begynder at blive bekr\u00e6ftet ingen for gennemsnitligt n blokke (standard: %u)</translation>\n@@ -3267,6 +3251,10 @@\n         <source>Activating best chain...</source>\n         <translation>Aktiverer bedste k\u00e6de\u2026</translation>\n     </message>\n+    <message>\n+        <source>Attempt to recover private keys from a corrupt wallet.dat on startup</source>\n+        <translation>Fors\u00f8g at genskabe private n\u00f8gler fra en \u00f8delagt wallet.dat under opstart</translation>\n+    </message>\n     <message>\n         <source>Cannot resolve -whitebind address: '%s'</source>\n         <translation>Kan ikke l\u00f8se -whitebind adresse: \"%s\"</translation>\n@@ -3291,6 +3279,10 @@\n         <source>Error reading from database, shutting down.</source>\n         <translation>Fejl under l\u00e6sning fra database; lukker ned.</translation>\n     </message>\n+    <message>\n+        <source>Imports blocks from external blk000??.dat file on startup</source>\n+        <translation>Importerer blokeringer fra ekstern blk000??.dat-fil under opstart</translation>\n+    </message>\n     <message>\n         <source>Information</source>\n         <translation>Information</translation>\n@@ -3347,6 +3339,10 @@\n         <source>Reducing -maxconnections from %d to %d, because of system limitations.</source>\n         <translation>Reducerer -maxconnections fra %d til %d p\u00e5 grund af systembegr\u00e6nsninger.</translation>\n     </message>\n+    <message>\n+        <source>Rescan the block chain for missing wallet transactions on startup</source>\n+        <translation>Genindl\u00e6s blokk\u00e6den efter manglende tegnebogstransaktioner under opstart</translation>\n+    </message>\n     <message>\n         <source>Send trace/debug info to console instead of debug.log file</source>\n         <translation>Send sporings-/fejls\u00f8gningsinformation til konsollen i stedet for debug.log filen</translation>\n@@ -3415,6 +3411,10 @@\n         <source>Unable to bind to %s on this computer (bind returned error %s)</source>\n         <translation>Ikke i stand til at tildele til %s p\u00e5 denne computer (bind returnerede fejl %s)</translation>\n     </message>\n+    <message>\n+        <source>Upgrade wallet to latest format on startup</source>\n+        <translation>Opgrad\u00e9r tegnebog til seneste format under opstart</translation>\n+    </message>\n     <message>\n         <source>Username for JSON-RPC connections</source>\n         <translation>Brugernavn til JSON-RPC-forbindelser</translation>\n@@ -3435,10 +3435,6 @@\n         <source>ZeroMQ notification options:</source>\n         <translation>ZeroMQ-notifikationsindstillinger:</translation>\n     </message>\n-    <message>\n-        <source>on startup</source>\n-        <translation>under opstart</translation>\n-    </message>\n     <message>\n         <source>wallet.dat corrupt, salvage failed</source>\n         <translation>wallet.dat \u00f8delagt, redning af data mislykkedes</translation>\n@@ -3451,14 +3447,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Udf\u00f8r kommando, n\u00e5r den bedste blok \u00e6ndres (%s i kommandoen erstattes med blokhash)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>Opgrader tegnebog til seneste format</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>Gennems\u00f8g blokk\u00e6den for manglende tegnebogstransaktioner</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>Denne hj\u00e6lpebesked</translation>"
      },
      {
        "sha": "42776f2c8bcd87ea1ec3b735bba4dd365f4db125",
        "filename": "src/qt/locale/bitcoin_de.ts",
        "status": "modified",
        "additions": 4,
        "deletions": 36,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_de.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_de.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_de.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1517,14 +1517,6 @@\n         <source>Last Receive</source>\n         <translation>Letzter Empfang</translation>\n     </message>\n-    <message>\n-        <source>Bytes Sent</source>\n-        <translation>\u00dcbertragene Byte</translation>\n-    </message>\n-    <message>\n-        <source>Bytes Received</source>\n-        <translation>Empfangene Byte</translation>\n-    </message>\n     <message>\n         <source>Ping Time</source>\n         <translation>Pingzeit</translation>\n@@ -2021,6 +2013,10 @@\n         <source>Copy change</source>\n         <translation>Wechselgeld kopieren</translation>\n     </message>\n+    <message>\n+        <source>Total Amount %1</source>\n+        <translation>Gesamtbetrag %1</translation>\n+    </message>\n     <message>\n         <source>or</source>\n         <translation>oder</translation>\n@@ -2057,14 +2053,6 @@\n         <source>Estimated to begin confirmation within %n block(s).</source>\n         <translation><numerusform>Voraussichtlicher Beginn der Best\u00e4tigung innerhalb von %n Block.</numerusform><numerusform>Voraussichtlicher Beginn der Best\u00e4tigung innerhalb von %n Bl\u00f6cken.</numerusform></translation>\n     </message>\n-    <message>\n-        <source>Pay only the minimum fee of %1</source>\n-        <translation>Nur die minimale Geb\u00fchr in H\u00f6he von %1 zahlen</translation>\n-    </message>\n-    <message>\n-        <source>Total Amount %1&lt;span style='font-size:10pt;font-weight:normal;'&gt;&lt;br /&gt;(=%2)&lt;/span&gt;</source>\n-        <translation>Gesamtbetrag %1&lt;span style='font-size:10pt;font-weight:normal;'&gt;&lt;br /&gt;(=%2)&lt;/span&gt;</translation>\n-    </message>\n     <message>\n         <source>The recipient address is not valid. Please recheck.</source>\n         <translation>Die Zahlungsadresse ist ung\u00fcltig, bitte nochmals \u00fcberpr\u00fcfen.</translation>\n@@ -2923,10 +2911,6 @@\n         <source>&lt;category&gt; can be:</source>\n         <translation>&lt;category&gt; kann sein:</translation>\n     </message>\n-    <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>Versuchen, private Schl\u00fcssel aus einer besch\u00e4digten wallet.dat wiederherzustellen</translation>\n-    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>Blockerzeugungsoptionen:</translation>\n@@ -3047,10 +3031,6 @@\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>Sie m\u00fcssen die Datenbank mit Hilfe von -reindex neu aufbauen, um -txindex zu ver\u00e4ndern</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>Bl\u00f6cke aus externer Datei blk000??.dat importieren</translation>\n-    </message>\n     <message>\n         <source>Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times</source>\n         <translation>JSON-RPC-Verbindungen von der angegeben Quelle erlauben. G\u00fcltig f\u00fcr &lt;ip&gt; ist eine einzelne IP-Adresse (z.B. 1.2.3.4), ein Netzwerk bzw. eine Netzmaske (z.B. 1.2.3.4/255.255.255.0), oder die CIDR-Notation (z.B. 1.2.3.4/24). Kann mehrmals angegeben werden.</translation>\n@@ -3303,10 +3283,6 @@\n         <source>ZeroMQ notification options:</source>\n         <translation>ZeroMQ-Benachrichtigungsoptionen:</translation>\n     </message>\n-    <message>\n-        <source>on startup</source>\n-        <translation>beim Starten</translation>\n-    </message>\n     <message>\n         <source>wallet.dat corrupt, salvage failed</source>\n         <translation>wallet.dat besch\u00e4digt, Datenrettung fehlgeschlagen</translation>\n@@ -3319,14 +3295,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Befehl ausf\u00fchren wenn der beste Block wechselt (%s im Befehl wird durch den Hash des Blocks ersetzt)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>Wallet auf das neueste Format aktualisieren</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>Blockkette erneut nach fehlenden Wallet-Transaktionen durchsuchen</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>Dieser Hilfetext</translation>"
      },
      {
        "sha": "d9f8dee5ef8cd68c6681d25c0c0f028b06bfed49",
        "filename": "src/qt/locale/bitcoin_el_GR.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 28,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_el_GR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_el_GR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_el_GR.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1388,14 +1388,6 @@\n         <source>Last Receive</source>\n         <translation>\u03a4\u03b5\u03bb\u03b5\u03c5\u03c4\u03b1\u03af\u03b1 \u03bb\u03ae\u03c8\u03b7</translation>\n     </message>\n-    <message>\n-        <source>Bytes Sent</source>\n-        <translation>\u03a3\u03c4\u03b1\u03bb\u03b8\u03ad\u03bd\u03c4\u03b1 bytes</translation>\n-    </message>\n-    <message>\n-        <source>Bytes Received</source>\n-        <translation>\u039b\u03b7\u03c6\u03b8\u03ad\u03bd\u03c4\u03b1 bytes</translation>\n-    </message>\n     <message>\n         <source>Ping Time</source>\n         <translation>\u03a7\u03c1\u03cc\u03bd\u03bf\u03c2 \u03ba\u03b1\u03b8\u03c5\u03c3\u03c4\u03ad\u03c1\u03b7\u03c3\u03b7\u03c2</translation>\n@@ -2554,10 +2546,6 @@\n         <source>(default: 1)</source>\n         <translation>(\u03c0\u03c1\u03bf\u03b5\u03c0\u03b9\u03bb\u03bf\u03b3\u03ae: 1)</translation>\n     </message>\n-    <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>\u03a0\u03c1\u03bf\u03c3\u03c0\u03ac\u03b8\u03b5\u03b9\u03b1 \u03b3\u03b9\u03b1 \u03b1\u03bd\u03b1\u03ba\u03c4\u03b7\u03c3\u03b5\u03b9 \u03b9\u03b4\u03b9\u03c9\u03c4\u03b9\u03ba\u03c9\u03bd \u03ba\u03bb\u03b5\u03b9\u03b4\u03b9\u03c9\u03bd \u03b1\u03c0\u03cc \u03b5\u03bd\u03b1 \u03b4\u03b9\u03b5\u03c6\u03b8\u03b1\u03c1\u03bc\u03ad\u03bd\u03bf \u03b1\u03c1\u03c7\u03b5\u03b9\u03bf wallet.dat </translation>\n-    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>\u0391\u03c0\u03bf\u03ba\u03bb\u03b5\u03b9\u03c3\u03bc\u03cc\u03c2 \u03b5\u03c0\u03b9\u03bb\u03bf\u03b3\u03c9\u03bd \u03b4\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03af\u03b1\u03c2: </translation>\n@@ -2638,10 +2626,6 @@\n         <source>Wallet options:</source>\n         <translation>\u0395\u03c0\u03b9\u03bb\u03bf\u03b3\u03ad\u03c2 \u03c0\u03bf\u03c1\u03c4\u03bf\u03c6\u03bf\u03bb\u03b9\u03bf\u03cd:</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>\u0395\u03b9\u03c3\u03b1\u03b3\u03c9\u03b3\u03ae \u03bc\u03c0\u03bb\u03bf\u03ba \u03b1\u03c0\u03cc \u03b5\u03be\u03c9\u03c4\u03b5\u03c1\u03b9\u03ba\u03cc \u03b1\u03c1\u03c7\u03b5\u03af\u03bf blk000?.dat</translation>\n-    </message>\n     <message>\n         <source>Cannot obtain a lock on data directory %s. Bitcoin Core is probably already running.</source>\n         <translation>\u0391\u03b4\u03c5\u03bd\u03b1\u03bc\u03af\u03b1 \u03ba\u03bb\u03b5\u03b9\u03b4\u03ce\u03bc\u03b1\u03c4\u03bf\u03c2 \u03c4\u03bf\u03c5 \u03c6\u03b1\u03ba\u03ad\u03bb\u03bf\u03c5 \u03b4\u03b5\u03b4\u03bf\u03bc\u03ad\u03bd\u03c9\u03bd %s. \u03a0\u03b9\u03b8\u03b1\u03bd\u03ce\u03c2 \u03c4\u03bf Bitcoin \u03bd\u03b1 \u03b5\u03af\u03bd\u03b1\u03b9 \u03ae\u03b4\u03b7 \u03b5\u03bd\u03b5\u03c1\u03b3\u03cc.</translation>\n@@ -2746,10 +2730,6 @@\n         <source>Zapping all transactions from wallet...</source>\n         <translation>\u039c\u03b5\u03c4\u03b1\u03c6\u03bf\u03c1\u03ac \u03cc\u03bb\u03c9\u03bd \u03c4\u03c9\u03bd \u03c3\u03c5\u03bd\u03b1\u03bb\u03bb\u03b1\u03b3\u03ce\u03bd \u03b1\u03c0\u03bf \u03c4\u03bf \u03c0\u03bf\u03c1\u03c4\u03bf\u03c6\u03cc\u03bb\u03b9</translation>\n     </message>\n-    <message>\n-        <source>on startup</source>\n-        <translation>\u03ba\u03b1\u03c4\u03ac \u03c4\u03b7\u03bd \u03b5\u03ba\u03ba\u03af\u03bd\u03b7\u03c3\u03b7</translation>\n-    </message>\n     <message>\n         <source>wallet.dat corrupt, salvage failed</source>\n         <translation>\u03a4\u03bf \u03b1\u03c1\u03c7\u03b5\u03b9\u03bf wallet.dat \u03b5\u03b9\u03bd\u03b1\u03b9 \u03b4\u03b9\u03b5\u03c6\u03b8\u03b1\u03c1\u03bc\u03ad\u03bd\u03bf, \u03b7 \u03b4\u03b9\u03ac\u03c3\u03c9\u03c3\u03b7 \u03b1\u03c0\u03ad\u03c4\u03c5\u03c7\u03b5</translation>\n@@ -2762,14 +2742,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>\u0395\u03ba\u03c4\u03ad\u03bb\u03b5\u03c3\u03b5 \u03c4\u03b7\u03bd \u03b5\u03bd\u03c4\u03bf\u03bb\u03ae \u03cc\u03c4\u03b1\u03bd \u03c4\u03bf \u03ba\u03b1\u03bb\u03cd\u03c4\u03b5\u03c1\u03bf \u03bc\u03c0\u03bb\u03bf\u03ba \u03b1\u03bb\u03bb\u03ac\u03be\u03b5\u03b9(%s \u03c3\u03c4\u03b7\u03bd \u03b5\u03bd\u03c4\u03bf\u03bb\u03ae \u03b1\u03bd\u03c4\u03b9\u03ba\u03b1\u03b8\u03af\u03c3\u03c4\u03b1\u03c4\u03b1\u03b9 \u03b1\u03c0\u03cc \u03c4\u03bf hash \u03c4\u03bf\u03c5 \u03bc\u03c0\u03bb\u03bf\u03ba)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>\u0391\u03bd\u03b1\u03b2\u03ac\u03b8\u03bc\u03b9\u03c3\u03b5 \u03c4\u03bf \u03c0\u03bf\u03c1\u03c4\u03bf\u03c6\u03cc\u03bb\u03b9 \u03c3\u03c4\u03b7\u03bd \u03c4\u03b5\u03bb\u03b5\u03c5\u03c4\u03b1\u03af\u03b1 \u03ad\u03ba\u03b4\u03bf\u03c3\u03b7</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>\u0395\u03c0\u03b1\u03bd\u03ad\u03bb\u03b5\u03b3\u03c7\u03bf\u03c2 \u03c4\u03b7\u03c2 \u03b1\u03bb\u03c5\u03c3\u03af\u03b4\u03b1\u03c2 \u03bc\u03c0\u03bb\u03bf\u03ba \u03b3\u03b9\u03b1 \u03b1\u03c0\u03bf\u03cd\u03c3\u03b5\u03c2 \u03c3\u03c5\u03bd\u03b1\u03bb\u03bb\u03b1\u03b3\u03ad\u03c2</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>\u0391\u03c5\u03c4\u03cc \u03c4\u03bf \u03ba\u03b5\u03af\u03bc\u03b5\u03bd\u03bf \u03b2\u03bf\u03ae\u03b8\u03b5\u03b9\u03b1\u03c2</translation>"
      },
      {
        "sha": "21df7325206f5e0624f428cddb21f2442276959d",
        "filename": "src/qt/locale/bitcoin_en.ts",
        "status": "modified",
        "additions": 66,
        "deletions": 36,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_en.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_en.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -299,17 +299,17 @@\n <context>\n     <name>BitcoinGUI</name>\n     <message>\n-        <location filename=\"../bitcoingui.cpp\" line=\"+324\"/>\n+        <location filename=\"../bitcoingui.cpp\" line=\"+325\"/>\n         <source>Sign &amp;message...</source>\n         <translation>Sign &amp;message...</translation>\n     </message>\n     <message>\n-        <location line=\"+353\"/>\n+        <location line=\"+362\"/>\n         <source>Synchronizing with network...</source>\n         <translation>Synchronizing with network...</translation>\n     </message>\n     <message>\n-        <location line=\"-429\"/>\n+        <location line=\"-438\"/>\n         <source>&amp;Overview</source>\n         <translation>&amp;Overview</translation>\n     </message>\n@@ -389,12 +389,12 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+180\"/>\n+        <location line=\"+183\"/>\n         <source>Bitcoin Core client</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+163\"/>\n+        <location line=\"+169\"/>\n         <source>Importing blocks from disk...</source>\n         <translation>Importing blocks from disk...</translation>\n     </message>\n@@ -404,7 +404,7 @@\n         <translation>Reindexing blocks on disk...</translation>\n     </message>\n     <message>\n-        <location line=\"-427\"/>\n+        <location line=\"-436\"/>\n         <source>Send coins to a Bitcoin address</source>\n         <translation>Send coins to a Bitcoin address</translation>\n     </message>\n@@ -434,12 +434,12 @@\n         <translation>&amp;Verify message...</translation>\n     </message>\n     <message>\n-        <location line=\"+450\"/>\n+        <location line=\"+459\"/>\n         <source>Bitcoin</source>\n         <translation>Bitcoin</translation>\n     </message>\n     <message>\n-        <location line=\"-660\"/>\n+        <location line=\"-669\"/>\n         <source>Wallet</source>\n         <translation>Wallet</translation>\n     </message>\n@@ -484,7 +484,7 @@\n         <translation>Verify messages to ensure they were signed with specified Bitcoin addresses</translation>\n     </message>\n     <message>\n-        <location line=\"+53\"/>\n+        <location line=\"+56\"/>\n         <source>&amp;File</source>\n         <translation>&amp;File</translation>\n     </message>\n@@ -504,7 +504,7 @@\n         <translation>Tabs toolbar</translation>\n     </message>\n     <message>\n-        <location line=\"-311\"/>\n+        <location line=\"-314\"/>\n         <source>Bitcoin Core</source>\n         <translation type=\"unfinished\">Bitcoin Core</translation>\n     </message>\n@@ -549,7 +549,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message numerus=\"yes\">\n-        <location line=\"+320\"/>\n+        <location line=\"+329\"/>\n         <source>%n active connection(s) to Bitcoin network</source>\n         <translation>\n             <numerusform>%n active connection to Bitcoin network</numerusform>\n@@ -3316,7 +3316,7 @@\n <context>\n     <name>TransactionTableModel</name>\n     <message>\n-        <location filename=\"../transactiontablemodel.cpp\" line=\"+233\"/>\n+        <location filename=\"../transactiontablemodel.cpp\" line=\"+246\"/>\n         <source>Date</source>\n         <translation>Date</translation>\n     </message>\n@@ -3419,7 +3419,7 @@\n         <translation>(n/a)</translation>\n     </message>\n     <message>\n-        <location line=\"+215\"/>\n+        <location line=\"+217\"/>\n         <source>Transaction status. Hover over this field to show number of confirmations.</source>\n         <translation>Transaction status. Hover over this field to show number of confirmations.</translation>\n     </message>\n@@ -3542,6 +3542,11 @@\n         <source>Copy transaction ID</source>\n         <translation>Copy transaction ID</translation>\n     </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>Copy raw transaction</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n     <message>\n         <location line=\"+1\"/>\n         <source>Edit label</source>\n@@ -3553,7 +3558,7 @@\n         <translation>Show transaction details</translation>\n     </message>\n     <message>\n-        <location line=\"+179\"/>\n+        <location line=\"+181\"/>\n         <source>Export Transaction History</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3618,7 +3623,7 @@\n         <translation>ID</translation>\n     </message>\n     <message>\n-        <location line=\"+116\"/>\n+        <location line=\"+121\"/>\n         <source>Range:</source>\n         <translation>Range:</translation>\n     </message>\n@@ -3698,7 +3703,7 @@\n <context>\n     <name>bitcoin-core</name>\n     <message>\n-        <location filename=\"../bitcoinstrings.cpp\" line=\"+258\"/>\n+        <location filename=\"../bitcoinstrings.cpp\" line=\"+260\"/>\n         <source>Options:</source>\n         <translation>Options:</translation>\n     </message>\n@@ -3718,7 +3723,7 @@\n         <translation>Specify your own public address</translation>\n     </message>\n     <message>\n-        <location line=\"-107\"/>\n+        <location line=\"-109\"/>\n         <source>Accept command line and JSON-RPC commands</source>\n         <translation>Accept command line and JSON-RPC commands</translation>\n     </message>\n@@ -3758,7 +3763,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+110\"/>\n+        <location line=\"+112\"/>\n         <source>Error: A fatal internal error occurred, see debug.log for details</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3778,12 +3783,12 @@\n         <translation>Run in the background as a daemon and accept commands</translation>\n     </message>\n     <message>\n-        <location line=\"+32\"/>\n+        <location line=\"+34\"/>\n         <source>Unable to start HTTP server. See debug log for details.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-119\"/>\n+        <location line=\"-123\"/>\n         <source>Accept connections from outside (default: 1 if no -proxy or -connect)</source>\n         <translation>Accept connections from outside (default: 1 if no -proxy or -connect)</translation>\n     </message>\n@@ -3878,7 +3883,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+9\"/>\n+        <location line=\"+11\"/>\n         <source>Block creation options:</source>\n         <translation>Block creation options:</translation>\n     </message>\n@@ -4018,7 +4023,7 @@\n         <translation>Specify wallet file (within data directory)</translation>\n     </message>\n     <message>\n-        <location line=\"+16\"/>\n+        <location line=\"+18\"/>\n         <source>Unsupported argument -benchmark ignored, use -debug=bench.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4068,12 +4073,12 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+1\"/>\n+        <location line=\"+2\"/>\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>You need to rebuild the database using -reindex to change -txindex</translation>\n     </message>\n     <message>\n-        <location line=\"-299\"/>\n+        <location line=\"-304\"/>\n         <source>Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4189,9 +4194,19 @@\n     </message>\n     <message>\n         <location line=\"+4\"/>\n+        <source>Always relay transactions received from whitelisted peers (default: %d)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+1\"/>\n         <source>Attempt to recover private keys from a corrupt wallet.dat on startup</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>Automatically create Tor hidden service (default: %d)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n     <message>\n         <location line=\"+5\"/>\n         <source>Cannot resolve -whitebind address: &apos;%s&apos;</source>\n@@ -4359,6 +4374,16 @@\n     </message>\n     <message>\n         <location line=\"+2\"/>\n+        <source>Tor control port password (default: empty)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>Tor control port to use if onion listening enabled (default: %s)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+1\"/>\n         <source>Transaction amount too small</source>\n         <translation>Transaction amount too small</translation>\n     </message>\n@@ -4408,7 +4433,12 @@\n         <translation>Warning</translation>\n     </message>\n     <message>\n-        <location line=\"+3\"/>\n+        <location line=\"+2\"/>\n+        <source>Whether to operate in a blocks only mode (default: %u)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+2\"/>\n         <source>Zapping all transactions from wallet...</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4423,27 +4453,27 @@\n         <translation>wallet.dat corrupt, salvage failed</translation>\n     </message>\n     <message>\n-        <location line=\"-64\"/>\n+        <location line=\"-67\"/>\n         <source>Password for JSON-RPC connections</source>\n         <translation>Password for JSON-RPC connections</translation>\n     </message>\n     <message>\n-        <location line=\"-196\"/>\n+        <location line=\"-198\"/>\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Execute command when the best block changes (%s in cmd is replaced by block hash)</translation>\n     </message>\n     <message>\n-        <location line=\"+232\"/>\n+        <location line=\"+234\"/>\n         <source>This help message</source>\n         <translation>This help message</translation>\n     </message>\n     <message>\n-        <location line=\"-106\"/>\n+        <location line=\"-108\"/>\n         <source>Allow DNS lookups for -addnode, -seednode and -connect</source>\n         <translation>Allow DNS lookups for -addnode, -seednode and -connect</translation>\n     </message>\n     <message>\n-        <location line=\"+58\"/>\n+        <location line=\"+60\"/>\n         <source>Loading addresses...</source>\n         <translation>Loading addresses...</translation>\n     </message>\n@@ -4453,7 +4483,7 @@\n         <translation>Error loading wallet.dat: Wallet corrupted</translation>\n     </message>\n     <message>\n-        <location line=\"-205\"/>\n+        <location line=\"-207\"/>\n         <source>(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4528,7 +4558,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+26\"/>\n+        <location line=\"+28\"/>\n         <source>Error loading wallet.dat</source>\n         <translation>Error loading wallet.dat</translation>\n     </message>\n@@ -4638,12 +4668,12 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+8\"/>\n+        <location line=\"+10\"/>\n         <source>Unknown network specified in -onlynet: &apos;%s&apos;</source>\n         <translation>Unknown network specified in -onlynet: &apos;%s&apos;</translation>\n     </message>\n     <message>\n-        <location line=\"-111\"/>\n+        <location line=\"-113\"/>\n         <source>Cannot resolve -bind address: &apos;%s&apos;</source>\n         <translation>Cannot resolve -bind address: &apos;%s&apos;</translation>\n     </message>\n@@ -4668,12 +4698,12 @@\n         <translation>Loading block index...</translation>\n     </message>\n     <message>\n-        <location line=\"-60\"/>\n+        <location line=\"-62\"/>\n         <source>Add a node to connect to and attempt to keep the connection open</source>\n         <translation>Add a node to connect to and attempt to keep the connection open</translation>\n     </message>\n     <message>\n-        <location line=\"+61\"/>\n+        <location line=\"+63\"/>\n         <source>Loading wallet...</source>\n         <translation>Loading wallet...</translation>\n     </message>"
      },
      {
        "sha": "4bd64f68d1cc934f912a496a84a2ecf445356e05",
        "filename": "src/qt/locale/bitcoin_eo.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_eo.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_eo.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_eo.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1123,10 +1123,6 @@\n         <source>Current number of blocks</source>\n         <translation>Aktuala nombro de blokoj</translation>\n     </message>\n-    <message>\n-        <source>Bytes Sent</source>\n-        <translation>Bajtoj Senditaj:</translation>\n-    </message>\n     <message>\n         <source>Last block time</source>\n         <translation>Horo de la lasta bloko</translation>\n@@ -2133,10 +2129,6 @@\n         <source>&lt;category&gt; can be:</source>\n         <translation>&lt;category&gt; povas esti:</translation>\n     </message>\n-    <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>Provo ripari privatajn s\u0302losilojn el difektita wallet.dat</translation>\n-    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>Blok-kreaj agordaj\u0302oj:</translation>\n@@ -2213,10 +2205,6 @@\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>Vi devas rekontrui la datumbazon kun -reindex por s\u0302ang\u0302i -txindex</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>Importas blokojn el ekstera dosiero blk000??.dat</translation>\n-    </message>\n     <message>\n         <source>Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)</source>\n         <translation>Plenumi komandon kiam rilata alerto ricevi\u011das, a\u016d kiam ni vidas tre longan forkon (%s en cms anstata\u016di\u011das per mesa\u011do)</translation>\n@@ -2297,14 +2285,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Plenumi komandon kiam plej bona bloko s\u0302ang\u0302ig\u0302as (%s en cmd anstatau\u0306ig\u0302as per bloka haketaj\u0302o)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>G\u0302isdatigi monujon al plej lasta formato</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>Reskani la blokc\u0302enon por mankantaj monujaj transakcioj</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>Tiu c\u0302i helpmesag\u0302o</translation>"
      },
      {
        "sha": "ec8261173be61170cfdc2ec488188077694baf24",
        "filename": "src/qt/locale/bitcoin_es.ts",
        "status": "modified",
        "additions": 85,
        "deletions": 37,
        "changes": 122,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_es.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_es.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_es.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -218,7 +218,15 @@\n </context>\n <context>\n     <name>BanTableModel</name>\n-    </context>\n+    <message>\n+        <source>IP/Netmask</source>\n+        <translation>IP/M\u00e1scara</translation>\n+    </message>\n+    <message>\n+        <source>Banned Until</source>\n+        <translation>Bloqueado Hasta</translation>\n+    </message>\n+</context>\n <context>\n     <name>BitcoinGUI</name>\n     <message>\n@@ -1067,6 +1075,18 @@\n         <source>Port of the proxy (e.g. 9050)</source>\n         <translation>Puerto del servidor proxy (ej. 9050)</translation>\n     </message>\n+    <message>\n+        <source>IPv4</source>\n+        <translation>IPv4</translation>\n+    </message>\n+    <message>\n+        <source>IPv6</source>\n+        <translation>IPv6</translation>\n+    </message>\n+    <message>\n+        <source>Tor</source>\n+        <translation>Tor</translation>\n+    </message>\n     <message>\n         <source>&amp;Window</source>\n         <translation>&amp;Ventana</translation>\n@@ -1453,6 +1473,10 @@\n         <source>&amp;Peers</source>\n         <translation>&amp;Pares</translation>\n     </message>\n+    <message>\n+        <source>Banned peers</source>\n+        <translation>Peers Bloqueados</translation>\n+    </message>\n     <message>\n         <source>Select a peer to view detailed information.</source>\n         <translation>Seleccionar un par para ver su informaci\u00f3n detallada.</translation>\n@@ -1465,6 +1489,18 @@\n         <source>Version</source>\n         <translation>Versi\u00f3n</translation>\n     </message>\n+    <message>\n+        <source>Starting Block</source>\n+        <translation>Importando bloques...</translation>\n+    </message>\n+    <message>\n+        <source>Synced Headers</source>\n+        <translation>Sincronizar Cabeceras</translation>\n+    </message>\n+    <message>\n+        <source>Synced Blocks</source>\n+        <translation>Bloques Sincronizados</translation>\n+    </message>\n     <message>\n         <source>User Agent</source>\n         <translation>User Agent</translation>\n@@ -1489,14 +1525,6 @@\n         <source>Last Receive</source>\n         <translation>Ultima recepci\u00f3n</translation>\n     </message>\n-    <message>\n-        <source>Bytes Sent</source>\n-        <translation>Bytes enviados</translation>\n-    </message>\n-    <message>\n-        <source>Bytes Received</source>\n-        <translation>Bytes recibidos</translation>\n-    </message>\n     <message>\n         <source>Ping Time</source>\n         <translation>Ping</translation>\n@@ -1549,6 +1577,26 @@\n         <source>Clear console</source>\n         <translation>Borrar consola</translation>\n     </message>\n+    <message>\n+        <source>&amp;Disconnect Node</source>\n+        <translation>Nodo &amp;Desconectado</translation>\n+    </message>\n+    <message>\n+        <source>1 &amp;hour</source>\n+        <translation>1 &amp;hora</translation>\n+    </message>\n+    <message>\n+        <source>1 &amp;day</source>\n+        <translation>1 &amp;d\u00eda</translation>\n+    </message>\n+    <message>\n+        <source>1 &amp;week</source>\n+        <translation>1 &amp;semana</translation>\n+    </message>\n+    <message>\n+        <source>1 &amp;year</source>\n+        <translation>1 &amp;a\u00f1o</translation>\n+    </message>\n     <message>\n         <source>Welcome to the Bitcoin Core RPC console.</source>\n         <translation>Bienvenido a la consola RPC de Bitcoin Core.</translation>\n@@ -1577,6 +1625,10 @@\n         <source>%1 GB</source>\n         <translation>%1 GB</translation>\n     </message>\n+    <message>\n+        <source>(node id: %1)</source>\n+        <translation>(nodo: %1)</translation>\n+    </message>\n     <message>\n         <source>via %1</source>\n         <translation>via %1</translation>\n@@ -1997,17 +2049,13 @@\n         <source>Payment request expired.</source>\n         <translation>Solicitud de pago caducada.</translation>\n     </message>\n-    <message numerus=\"yes\">\n-        <source>Estimated to begin confirmation within %n block(s).</source>\n-        <translation><numerusform>Estimado para empezar la confirmaci\u00f3n dentro de %n bloque.</numerusform><numerusform>Estimado para empezar la confirmaci\u00f3n dentro de %n bloques.</numerusform></translation>\n-    </message>\n     <message>\n-        <source>Pay only the minimum fee of %1</source>\n+        <source>Pay only the required fee of %1</source>\n         <translation>Paga s\u00f3lo la cuota m\u00ednima de %1</translation>\n     </message>\n-    <message>\n-        <source>Total Amount %1&lt;span style='font-size:10pt;font-weight:normal;'&gt;&lt;br /&gt;(=%2)&lt;/span&gt;</source>\n-        <translation>Monto Total %1&lt;span style='font-size:10pt;font-weight:normal;'&gt;&lt;br /&gt;(=%2)&lt;/span&gt;</translation>\n+    <message numerus=\"yes\">\n+        <source>Estimated to begin confirmation within %n block(s).</source>\n+        <translation><numerusform>Estimado para empezar la confirmaci\u00f3n dentro de %n bloque.</numerusform><numerusform>Estimado para empezar la confirmaci\u00f3n dentro de %n bloques.</numerusform></translation>\n     </message>\n     <message>\n         <source>The recipient address is not valid. Please recheck.</source>\n@@ -2793,6 +2841,10 @@\n         <source>Error: A fatal internal error occurred, see debug.log for details</source>\n         <translation>Un error interno fatal ocurri\u00f3, ver debug.log para detalles</translation>\n     </message>\n+    <message>\n+        <source>Fee (in %s/kB) to add to transactions you send (default: %s)</source>\n+        <translation>Comisi\u00f3n (en %s/KB) para agregar a las transacciones que env\u00ede (por defecto: %s)</translation>\n+    </message>\n     <message>\n         <source>Pruning blockstore...</source>\n         <translation>Poda blockstore ...</translation>\n@@ -2866,10 +2918,6 @@\n         <source>&lt;category&gt; can be:</source>\n         <translation>&lt;category&gt; puede ser:</translation>\n     </message>\n-    <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>Intento de recuperar claves privadas de un wallet.dat corrupto</translation>\n-    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>Opciones de creaci\u00f3n de bloques:</translation>\n@@ -2990,10 +3038,6 @@\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>Usted necesita reconstruir la base de datos utilizando -reindex para cambiar -txindex</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>Importa los bloques desde un archivo blk000??.dat externo</translation>\n-    </message>\n     <message>\n         <source>Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times</source>\n         <translation>Permitir conexiones JSON-RPC de origen especificado. V\u00e1lido para son una sola IP (por ejemplo 1.2.3.4), una red/m\u00e1scara de red (por ejemplo 1.2.3.4/255.255.255.0) o una red/CIDR (e.g. 1.2.3.4/24). Esta opci\u00f3n se puede especificar varias veces</translation>\n@@ -3078,6 +3122,10 @@\n         <source>Activating best chain...</source>\n         <translation>Activando la mejor cadena...</translation>\n     </message>\n+    <message>\n+        <source>Attempt to recover private keys from a corrupt wallet.dat on startup</source>\n+        <translation>Intento de recuperar claves privadas de un wallet.dat corrupto</translation>\n+    </message>\n     <message>\n         <source>Cannot resolve -whitebind address: '%s'</source>\n         <translation>No se puede resolver -whitebind address: '%s'</translation>\n@@ -3102,6 +3150,10 @@\n         <source>Error reading from database, shutting down.</source>\n         <translation>Error al leer la base de datos, cerrando.</translation>\n     </message>\n+    <message>\n+        <source>Imports blocks from external blk000??.dat file on startup</source>\n+        <translation>Importa los bloques desde un archivo externo blk000?.dat</translation>\n+    </message>\n     <message>\n         <source>Information</source>\n         <translation>Informaci\u00f3n</translation>\n@@ -3154,6 +3206,10 @@\n         <source>Receive and display P2P network alerts (default: %u)</source>\n         <translation>Recibir y mostrar alertas de red P2P (default: %u)</translation>\n     </message>\n+    <message>\n+        <source>Rescan the block chain for missing wallet transactions on startup</source>\n+        <translation>Rescanea la cadena de bloques para transacciones perdidas de la cartera</translation>\n+    </message>\n     <message>\n         <source>Send trace/debug info to console instead of debug.log file</source>\n         <translation>Enviar informaci\u00f3n de trazas/depuraci\u00f3n a la consola en lugar de al archivo debug.log</translation>\n@@ -3222,6 +3278,10 @@\n         <source>Unable to bind to %s on this computer (bind returned error %s)</source>\n         <translation>No es posible conectar con %s en este sistema (bind ha dado el error %s)</translation>\n     </message>\n+    <message>\n+        <source>Upgrade wallet to latest format on startup</source>\n+        <translation>Actualizar el monedero al \u00faltimo formato</translation>\n+    </message>\n     <message>\n         <source>Username for JSON-RPC connections</source>\n         <translation>Nombre de usuario para las conexiones JSON-RPC\n@@ -3239,10 +3299,6 @@\n         <source>Zapping all transactions from wallet...</source>\n         <translation>Eliminando todas las transacciones del monedero...</translation>\n     </message>\n-    <message>\n-        <source>on startup</source>\n-        <translation>al iniciar</translation>\n-    </message>\n     <message>\n         <source>wallet.dat corrupt, salvage failed</source>\n         <translation>wallet.dat corrupto. Ha fallado la recuperaci\u00f3n.</translation>\n@@ -3256,14 +3312,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Ejecutar un comando cuando cambia el mejor bloque (%s en cmd se sustituye por el hash de bloque)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>Actualizar el monedero al \u00faltimo formato</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>Volver a examinar la cadena de bloques en busca de transacciones del monedero perdidas</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>Este mensaje de ayuda"
      },
      {
        "sha": "df17411ab54afc4c67f10e1a259f5db9bb3c923f",
        "filename": "src/qt/locale/bitcoin_es_CL.ts",
        "status": "modified",
        "additions": 16,
        "deletions": 13,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_es_CL.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_es_CL.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_es_CL.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1304,10 +1304,6 @@\n         <source>Error: Disk space is low!</source>\n         <translation>Atenci\u00f3n: Poco espacio en el disco duro</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>Importar bloques desde el archivo externo blk000??.dat </translation>\n-    </message>\n     <message>\n         <source>Information</source>\n         <translation>Informaci\u00f3n</translation>\n@@ -1337,15 +1333,6 @@\n     <message>\n         <source>Password for JSON-RPC connections</source>\n         <translation>Contrase\u00f1a para las conexiones JSON-RPC\n-</translation>\n-    </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>Actualizar billetera al formato actual</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>Rescanea la cadena de bloques para transacciones perdidas de la cartera\n </translation>\n     </message>\n     <message>\n@@ -1374,6 +1361,14 @@\n         <source>Invalid -proxy address: '%s'</source>\n         <translation>Direcci\u00f3n -proxy invalida: '%s'</translation>\n     </message>\n+    <message>\n+        <source>Cannot resolve -bind address: '%s'</source>\n+        <translation>No se pudo resolver la direcci\u00f3n fija: '%s'</translation>\n+    </message>\n+    <message>\n+        <source>Cannot resolve -externalip address: '%s'</source>\n+        <translation>No se pudo resolver la direcci\u00f3n ip: '%s'</translation>\n+    </message>\n     <message>\n         <source>Invalid amount for -paytxfee=&lt;amount&gt;: '%s'</source>\n         <translation>Cantidad inv\u00e1lida para -paytxfee=&lt;amount&gt;: '%s'</translation>\n@@ -1394,6 +1389,14 @@\n         <source>Loading wallet...</source>\n         <translation>Cargando cartera...</translation>\n     </message>\n+    <message>\n+        <source>Cannot downgrade wallet</source>\n+        <translation>No es posible desactualizar la billetera</translation>\n+    </message>\n+    <message>\n+        <source>Cannot write default address</source>\n+        <translation>No se pudo escribir la direcci\u00f3n por defecto</translation>\n+    </message>\n     <message>\n         <source>Rescanning...</source>\n         <translation>Rescaneando...</translation>"
      },
      {
        "sha": "c67d642de73e92c9dfd37b04972ba0babf97885a",
        "filename": "src/qt/locale/bitcoin_es_DO.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_es_DO.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_es_DO.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_es_DO.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -2136,10 +2136,6 @@\n         <source>&lt;category&gt; can be:</source>\n         <translation>&lt;category&gt; puede ser:</translation>\n     </message>\n-    <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>Intento de recuperar claves privadas de un wallet.dat corrupto</translation>\n-    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>Opciones de creaci\u00f3n de bloques:</translation>\n@@ -2216,10 +2212,6 @@\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>Usted necesita reconstruir la base de datos utilizando -reindex para cambiar -txindex</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>Importa los bloques desde un archivo blk000??.dat externo</translation>\n-    </message>\n     <message>\n         <source>Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)</source>\n         <translation>Ejecutar un comando cuando se reciba una alerta importante o cuando veamos un fork demasiado largo (%s en cmd se reemplazar\u00e1 por el mensaje)</translation>\n@@ -2297,10 +2289,6 @@\n         <source>Warning</source>\n         <translation>Aviso</translation>\n     </message>\n-    <message>\n-        <source>on startup</source>\n-        <translation>al iniciar</translation>\n-    </message>\n     <message>\n         <source>wallet.dat corrupt, salvage failed</source>\n         <translation>wallet.dat corrupto. Ha fallado la recuperaci\u00f3n.</translation>\n@@ -2314,14 +2302,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Ejecutar un comando cuando cambia el mejor bloque (%s en cmd se sustituye por el hash de bloque)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>Actualizar el monedero al \u00faltimo formato</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>Volver a examinar la cadena de bloques en busca de transacciones del monedero perdidas</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>Este mensaje de ayuda"
      },
      {
        "sha": "9279834af36d4c58f484a18db39c68df3869b974",
        "filename": "src/qt/locale/bitcoin_et.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_et.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_et.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_et.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1679,10 +1679,6 @@\n         <source>Warning: wallet.dat corrupt, data salvaged! Original wallet.dat saved as wallet.{timestamp}.bak in %s; if your balance or transactions are incorrect you should restore from a backup.</source>\n         <translation>Hoiatus: toimus wallet.dat faili andmete p\u00e4\u00e4stmine! Originaal wallet.dat nimetati kaustas %s \u00fcmber wallet.{ajatempel}.bak'iks, j\u00e4\u00e4gi v\u00f5i tehingute ebak\u00f5lade puhul tuleks teha backup'ist taastamine.</translation>\n     </message>\n-    <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>P\u00fc\u00fca vigasest wallet.dat failist taastada turvav\u00f5tmed</translation>\n-    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>Blokeeri loomise valikud:</translation>\n@@ -1735,10 +1731,6 @@\n         <source>Wallet options:</source>\n         <translation>Rahakoti valikud:</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>Impordi blokid v\u00e4lisest blk000??.dat failist</translation>\n-    </message>\n     <message>\n         <source>Information</source>\n         <translation>Informatsioon</translation>\n@@ -1795,10 +1787,6 @@\n         <source>Warning</source>\n         <translation>Hoiatus</translation>\n     </message>\n-    <message>\n-        <source>on startup</source>\n-        <translation>k\u00e4ivitamisel</translation>\n-    </message>\n     <message>\n         <source>wallet.dat corrupt, salvage failed</source>\n         <translation>wallet.dat fail on katki, p\u00e4\u00e4stmine eba\u00f5nnestus</translation>\n@@ -1811,14 +1799,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>K\u00e4ivita k\u00e4sklus, kui parim plokk muutub (k\u00e4skluse %s asendatakse ploki hash'iga)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>Uuenda rahakott uusimasse vormingusse</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>Otsi ploki jadast rahakoti kadunud tehinguid</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>K\u00e4esolev abitekst</translation>"
      },
      {
        "sha": "fb4e25dfb81df3efed98804d3b25307854ec3347",
        "filename": "src/qt/locale/bitcoin_fa.ts",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_fa.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_fa.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_fa.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1615,10 +1615,18 @@\n         <source>Generated but not accepted</source>\n         <translation>\u062a\u0648\u0644\u06cc\u062f \u0634\u062f\u0647 \u0648\u0644\u06cc \u0642\u0628\u0648\u0644 \u0646\u0634\u062f\u0647</translation>\n     </message>\n+    <message>\n+        <source>Offline</source>\n+        <translation>\u0622\u0641\u0644\u0627\u06cc\u0646</translation>\n+    </message>\n     <message>\n         <source>Label</source>\n         <translation>\u0628\u0631\u0686\u0633\u0628</translation>\n     </message>\n+    <message>\n+        <source>Unconfirmed</source>\n+        <translation>\u062a\u0627\u06cc\u06cc\u062f \u0646\u0634\u062f\u0647</translation>\n+    </message>\n     <message>\n         <source>Received with</source>\n         <translation>\u062f\u0631\u06cc\u0627\u0641\u062a\u200c\u0634\u062f\u0647 \u0628\u0627</translation>\n@@ -1965,14 +1973,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>\u0632\u0645\u0627\u0646\u06cc \u06a9\u0647 \u0628\u0647\u062a\u0631\u06cc\u0646 \u0628\u0644\u0627\u06a9 \u062a\u063a\u06cc\u06cc\u0631 \u06a9\u0631\u062f\u060c \u062f\u0633\u062a\u0648\u0631 \u0631\u0627 \u0627\u062c\u0631\u0627 \u06a9\u0646 (%s \u062f\u0631 cmd \u0628\u0627 block hash \u062c\u0627\u06cc\u06af\u0632\u06cc\u0646 \u0634\u062f\u0647 \u0627\u0633\u062a)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>wallet  \u0631\u0627 \u0628\u0647 \u062c\u062f\u06cc\u062f\u062a\u0631\u06cc\u0646 \u0641\u0631\u0645\u062a \u0631\u0648\u0632\u0622\u0645\u062f \u06a9\u0646\u06cc\u062f</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>\u0627\u0633\u06a9\u0627\u0646 \u0645\u062c\u062f\u062f \u0632\u0646\u062c\u06cc\u0631 \u0628\u0644\u0648\u06a9\u0647\u0627 \u0628\u0631\u0627\u06cc \u06af\u0645 \u0648\u0627\u0644\u062a \u0645\u0639\u0627\u0645\u0644\u0647</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>\u067e\u06cc\u0627\u0645 \u06a9\u0645\u06a9\u06cc</translation>"
      },
      {
        "sha": "fd9de2e0493d5f20a1ce606f403ada533a3f2b08",
        "filename": "src/qt/locale/bitcoin_fa_IR.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_fa_IR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_fa_IR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_fa_IR.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1023,14 +1023,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>\u062f\u0633\u062a\u0648\u0631 \u0631\u0627 \u0648\u0642\u062a\u06cc \u0628\u0647\u062a\u0631\u06cc\u0646 \u0628\u0644\u0627\u06a9 \u062a\u063a\u06cc\u06cc\u0631 \u06a9\u0631\u062f \u0627\u062c\u0631\u0627 \u06a9\u0646 (%s \u062f\u0631 \u062f\u0633\u062a\u0648\u0631 \u062a\u0648\u0633\u0637 block hash \u062c\u0627\u06cc\u06af\u0632\u06cc\u0646 \u0634\u062f\u0647 \u0627\u0633\u062a)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>wallet \u0631\u0627 \u0628\u0647 \u062c\u062f\u06cc\u062f\u062a\u0631\u06cc\u0646 \u0646\u0633\u062e\u0647 \u0631\u0648\u0632\u0622\u0645\u062f \u06a9\u0646\u06cc\u062f</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>\u0632\u0646\u062c\u06cc\u0631\u0647 \u0628\u0644\u0627\u06a9 \u0631\u0627 \u0628\u0631\u0627\u06cc \u062a\u0631\u0627\u06a9\u0646\u0634 \u062c\u0627 \u0627\u0641\u062a\u0627\u062f\u0647 \u062f\u0631 WALLET \u062f\u0648\u0628\u0627\u0631\u0647 \u0627\u0633\u06a9\u0646 \u06a9\u0646\u06cc\u062f</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>\u0627\u06cc\u0646 \u067e\u06cc\u0627\u0645 \u0631\u0627\u0647\u0646\u0645\u0627</translation>"
      },
      {
        "sha": "7026fff1f580c8e18a31b3a09f0a791be458b2f2",
        "filename": "src/qt/locale/bitcoin_fi.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 32,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_fi.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_fi.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_fi.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1481,14 +1481,6 @@\n         <source>Last Receive</source>\n         <translation>Viimeisin vastaanotettu</translation>\n     </message>\n-    <message>\n-        <source>Bytes Sent</source>\n-        <translation>Tavua l\u00e4hetetty</translation>\n-    </message>\n-    <message>\n-        <source>Bytes Received</source>\n-        <translation>Tavua vastaanotettu</translation>\n-    </message>\n     <message>\n         <source>Ping Time</source>\n         <translation>Vasteaika</translation>\n@@ -1981,10 +1973,6 @@\n         <source>Payment request expired.</source>\n         <translation>Maksupyynt\u00f6 on vanhentunut.</translation>\n     </message>\n-    <message>\n-        <source>Pay only the minimum fee of %1</source>\n-        <translation>Maksa vain v\u00e4himm\u00e4iskulu %1</translation>\n-    </message>\n     <message>\n         <source>The recipient address is not valid. Please recheck.</source>\n         <translation>Vastaanottajan osoite ei ole kelvollinen. Tarkistathan uudelleen.</translation>\n@@ -2791,10 +2779,6 @@\n         <source>&lt;category&gt; can be:</source>\n         <translation>&lt;category&gt; voi olla:</translation>\n     </message>\n-    <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>Yritet\u00e4\u00e4n palauttaa privaattiavaimia korruptoituneesta wallet.dat -lompakkotiedostosta</translation>\n-    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>Lohkon luonnin asetukset:</translation>\n@@ -2911,10 +2895,6 @@\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>Sinun tulee uudelleenrakentaa tietokanta k\u00e4ytt\u00e4en -reindex vaihtaen -txindex</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>Tuodaan lohkoja ulkoisesta blk000??.dat tiedostosta</translation>\n-    </message>\n     <message>\n         <source>Cannot obtain a lock on data directory %s. Bitcoin Core is probably already running.</source>\n         <translation>Ei voida lukita data-hakemistoa %s. Bitcoin Core on luultavasti jo k\u00e4ynniss\u00e4.</translation>\n@@ -3059,10 +3039,6 @@\n         <source>Zapping all transactions from wallet...</source>\n         <translation>Tyhjennet\u00e4\u00e4n kaikki rahansiirrot lompakosta....</translation>\n     </message>\n-    <message>\n-        <source>on startup</source>\n-        <translation>k\u00e4ynnistyksess\u00e4</translation>\n-    </message>\n     <message>\n         <source>wallet.dat corrupt, salvage failed</source>\n         <translation>wallet.dat -lompakkotiedosto korruptoitunut, korjaaminen ep\u00e4onnistui</translation>\n@@ -3075,14 +3051,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Suorita k\u00e4sky kun paras lohko muuttuu (%s cmd on vaihdettu block hashin kanssa)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>P\u00e4ivit\u00e4 lompakko uusimpaan formaattiin</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>Skannaa uudelleen lohkoketju lompakon puuttuvien rahasiirtojen vuoksi</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>T\u00e4m\u00e4 ohjeviesti</translation>"
      },
      {
        "sha": "97dccdac067e254f01bc2274d1011a00d0e21bd2",
        "filename": "src/qt/locale/bitcoin_fr.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 36,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_fr.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_fr.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_fr.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1485,14 +1485,6 @@\n         <source>Last Receive</source>\n         <translation>Derni\u00e8re r\u00e9ception</translation>\n     </message>\n-    <message>\n-        <source>Bytes Sent</source>\n-        <translation>Octets envoy\u00e9s</translation>\n-    </message>\n-    <message>\n-        <source>Bytes Received</source>\n-        <translation>Octets re\u00e7us</translation>\n-    </message>\n     <message>\n         <source>Ping Time</source>\n         <translation>Temps de ping</translation>\n@@ -2001,14 +1993,6 @@\n         <source>Estimated to begin confirmation within %n block(s).</source>\n         <translation><numerusform>Il est estim\u00e9 que la confirmation commencera dans %n bloc.</numerusform><numerusform>Il est estim\u00e9 que la confirmation commencera dans %n blocs.</numerusform></translation>\n     </message>\n-    <message>\n-        <source>Pay only the minimum fee of %1</source>\n-        <translation>Payer seulement les frais minimum de %1</translation>\n-    </message>\n-    <message>\n-        <source>Total Amount %1&lt;span style='font-size:10pt;font-weight:normal;'&gt;&lt;br /&gt;(=%2)&lt;/span&gt;</source>\n-        <translation>Montant total %1&lt;span style='font-size:10pt;font-weight:normal;'&gt;&lt;br /&gt;(=%2)&lt;/span&gt;</translation>\n-    </message>\n     <message>\n         <source>The recipient address is not valid. Please recheck.</source>\n         <translation>L'adresse du destinataire est invalide. Veuillez la v\u00e9rifier.</translation>\n@@ -2859,10 +2843,6 @@\n         <source>&lt;category&gt; can be:</source>\n         <translation>&lt;category&gt; peut \u00eatre :</translation>\n     </message>\n-    <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>Tenter de r\u00e9cup\u00e9rer les clefs priv\u00e9es d'un wallet.dat corrompu</translation>\n-    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>Options de cr\u00e9ation de bloc :</translation>\n@@ -2983,10 +2963,6 @@\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>Vous devez reconstruire la base de donn\u00e9es en utilisant -reindex afin de modifier -txindex</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>Importe des blocs depuis un fichier blk000??.dat externe</translation>\n-    </message>\n     <message>\n         <source>Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times</source>\n         <translation>Permettre les connexions JSON-RPC de sources sp\u00e9cifiques. Valide pour &lt;ip&gt; qui sont une IP simple (p. ex. 1.2.3.4), un r\u00e9seau/masque r\u00e9seau (p. ex. 1.2.3.4/255.255.255.0) ou un r\u00e9seau/CIDR (p. ex. 1.2.3.4/24). Cette option peut \u00eatre \u00eatre sp\u00e9cifi\u00e9e plusieurs fois</translation>\n@@ -3235,10 +3211,6 @@\n         <source>Zapping all transactions from wallet...</source>\n         <translation>Supprimer toutes les transactions du portefeuille...</translation>\n     </message>\n-    <message>\n-        <source>on startup</source>\n-        <translation>au d\u00e9marrage</translation>\n-    </message>\n     <message>\n         <source>wallet.dat corrupt, salvage failed</source>\n         <translation>wallet.dat corrompu, la r\u00e9cup\u00e9ration a \u00e9chou\u00e9</translation>\n@@ -3251,14 +3223,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Ex\u00e9cuter la commande lorsque le meilleur bloc change (%s dans cmd est remplac\u00e9 par le hachage du bloc)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>Mettre \u00e0 niveau le portefeuille vers le format le plus r\u00e9cent</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>R\u00e9analyser la cha\u00eene de blocs pour les transactions de portefeuille manquantes</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>Ce message d'aide</translation>"
      },
      {
        "sha": "79f0d46d3f532b1c9945dd9a3211ba405f7d14eb",
        "filename": "src/qt/locale/bitcoin_gl.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_gl.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_gl.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_gl.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1965,10 +1965,6 @@\n         <source>&lt;category&gt; can be:</source>\n         <translation>&lt;categor\u00eda&gt; pode ser:</translation>\n     </message>\n-    <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>Tentar recuperar claves privadas dende un wallet.dat corrupto</translation>\n-    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>Opci\u00f3ns de creaci\u00f3n de bloque:</translation>\n@@ -2041,10 +2037,6 @@\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>Precisas reconstru\u00edr a base de datos empregando -reindex para cambiar -txindex</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>Importa bloques dende arquivos blk000??.dat externos</translation>\n-    </message>\n     <message>\n         <source>Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)</source>\n         <translation>Executar comando cando se recibe unha alerta relevante ou vemos un fork realmente longo (%s no cmd \u00e9 substitu\u00eddo pola mensaxe)</translation>\n@@ -2121,14 +2113,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Executar comando cando o mellor bloque cambie (%s no comando \u00e9 sustitu\u00eddo polo hash do bloque)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>Actualizar moedeiro ao formato m\u00e1is recente</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>Rescanear transacci\u00f3ns ausentes na cadea de bloques</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>Esta mensaxe de axuda</translation>"
      },
      {
        "sha": "048b268200a5f30ed32b42bdbeda17272a2f7454",
        "filename": "src/qt/locale/bitcoin_he.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 28,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_he.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_he.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_he.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1331,14 +1331,6 @@\n         <source>Last Receive</source>\n         <translation>\u05e7\u05d1\u05dc\u05d4 \u05d0\u05d7\u05e8\u05d5\u05e0\u05d4</translation>\n     </message>\n-    <message>\n-        <source>Bytes Sent</source>\n-        <translation>\u05d1\u05ea\u05d9\u05dd \u05e9\u05e0\u05e9\u05dc\u05d7\u05d5</translation>\n-    </message>\n-    <message>\n-        <source>Bytes Received</source>\n-        <translation>\u05d1\u05ea\u05d9\u05dd \u05e9\u05d4\u05ea\u05e7\u05d1\u05dc\u05d5</translation>\n-    </message>\n     <message>\n         <source>Ping Time</source>\n         <translation>\u05d6\u05de\u05df \u05d4\u05de\u05e2\u05e0\u05d4</translation>\n@@ -2533,10 +2525,6 @@\n         <source>&lt;category&gt; can be:</source>\n         <translation>&lt;\u05e7\u05d8\u05d2\u05d5\u05e8\u05d9\u05d4&gt; \u05d9\u05db\u05d5\u05dc\u05d4 \u05dc\u05d4\u05d9\u05d5\u05ea:</translation>\n     </message>\n-    <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>\u05e0\u05e1\u05d4 \u05dc\u05e9\u05d7\u05d6\u05e8 \u05de\u05e4\u05ea\u05d7\u05d5\u05ea \u05e4\u05e8\u05d8\u05d9\u05d9\u05dd \u05de\u05e7\u05d5\u05d1\u05e5 wallet.dat \u05de\u05d5\u05e9\u05d7\u05ea.</translation>\n-    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>\u05d0\u05e4\u05e9\u05e8\u05d5\u05d9\u05d5\u05ea \u05d9\u05e6\u05d9\u05e8\u05ea \u05de\u05e7\u05d8\u05e2:</translation>\n@@ -2641,10 +2629,6 @@\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>\u05e2\u05dc\u05d9\u05da \u05dc\u05d1\u05e0\u05d5\u05ea \u05de\u05d7\u05d3\u05e9 \u05d0\u05ea \u05de\u05e1\u05d3 \u05d4\u05e0\u05ea\u05d5\u05e0\u05d9\u05dd \u05ea\u05d5\u05da \u05e9\u05d9\u05de\u05d5\u05e9 \u05d1\u05be\u200e-reindex \u05e2\u05dc \u05de\u05e0\u05ea \u05dc\u05e9\u05e0\u05d5\u05ea \u05d0\u05ea \u200e-txindex</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>\u05de\u05d9\u05d5\u05d1\u05d0\u05d9\u05dd \u05de\u05e7\u05d8\u05e2\u05d9\u05dd \u05de\u05e7\u05d5\u05d1\u05e6\u05d9 blk000??.dat \u05d7\u05d9\u05e6\u05d5\u05e0\u05d9\u05d9\u05dd</translation>\n-    </message>\n     <message>\n         <source>Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)</source>\n         <translation>\u05d4\u05e8\u05e5 \u05e4\u05e7\u05d5\u05d3\u05d4 \u05db\u05d0\u05e9\u05e8 \u05d4\u05d4\u05ea\u05e8\u05d0\u05d4 \u05d4\u05e8\u05dc\u05d5\u05d5\u05e0\u05d8\u05d9\u05ea \u05de\u05ea\u05e7\u05d1\u05dc\u05ea \u05d0\u05d5 \u05db\u05e9\u05d0\u05e0\u05d7\u05e0\u05d5 \u05e2\u05d3\u05d9\u05dd \u05dc\u05e4\u05d9\u05e6\u05d5\u05dc \u05d0\u05e8\u05d5\u05da \u05de\u05d0\u05d5\u05d3 (%s \u05d1\u05e9\u05d5\u05e8\u05ea \u05d4\u05e4\u05e7\u05d5\u05d3\u05d4 \u05d9\u05d5\u05d7\u05dc\u05e3 \u05e2\"\u05d9 \u05d4\u05d4\u05d5\u05d3\u05e2\u05d4)</translation>\n@@ -2769,10 +2753,6 @@\n         <source>Warning</source>\n         <translation>\u05d0\u05d6\u05d4\u05e8\u05d4</translation>\n     </message>\n-    <message>\n-        <source>on startup</source>\n-        <translation>\u05e2\u05dd \u05d4\u05d4\u05e4\u05e2\u05dc\u05d4</translation>\n-    </message>\n     <message>\n         <source>wallet.dat corrupt, salvage failed</source>\n         <translation>\u05e7\u05d5\u05d1\u05e5 wallet.dat \u05de\u05d5\u05e9\u05d7\u05ea, \u05d4\u05d7\u05d9\u05dc\u05d5\u05e5 \u05e0\u05db\u05e9\u05dc</translation>\n@@ -2785,14 +2765,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>\u05d9\u05e9 \u05dc\u05d1\u05e6\u05e2 \u05e4\u05e7\u05d5\u05d3\u05d4 \u05d6\u05d5 \u05db\u05e9\u05d4\u05de\u05e7\u05d8\u05e2 \u05d4\u05d8\u05d5\u05d1 \u05d1\u05d9\u05d5\u05ea\u05e8 \u05de\u05e9\u05ea\u05e0\u05d4 (%s \u05d1\u05e4\u05e7\u05d5\u05d3\u05d4 \u05d9\u05d5\u05d7\u05dc\u05e3 \u05d1\u05d2\u05d9\u05d1\u05d5\u05d1 \u05d4\u05de\u05e7\u05d8\u05e2)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>\u05e9\u05d3\u05e8\u05d5\u05d2 \u05d4\u05d0\u05e8\u05e0\u05e7 \u05dc\u05de\u05d1\u05e0\u05d4 \u05d4\u05e2\u05d3\u05db\u05e0\u05d9</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>\u05d9\u05e9 \u05dc\u05e1\u05e8\u05d5\u05e7 \u05de\u05d7\u05d3\u05e9 \u05d0\u05ea \u05e9\u05e8\u05e9\u05e8\u05ea \u05d4\u05de\u05e7\u05d8\u05e2\u05d9\u05dd \u05dc\u05de\u05e6\u05d9\u05d0\u05ea \u05d4\u05e2\u05d1\u05e8\u05d5\u05ea \u05d7\u05e1\u05e8\u05d5\u05ea \u05d1\u05d0\u05e8\u05e0\u05e7</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>\u05d4\u05d5\u05d3\u05e2\u05ea \u05d4\u05e2\u05d6\u05e8\u05d4 \u05d4\u05d6\u05d5</translation>"
      },
      {
        "sha": "aa28ecf24f1a0b33dee0938b091689ace8f7d2ae",
        "filename": "src/qt/locale/bitcoin_hr.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_hr.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_hr.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_hr.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1057,14 +1057,6 @@\n         <source>Connection Time</source>\n         <translation>Trajanje veze</translation>\n     </message>\n-    <message>\n-        <source>Bytes Sent</source>\n-        <translation>Bajtova poslano</translation>\n-    </message>\n-    <message>\n-        <source>Bytes Received</source>\n-        <translation>Bajtova primljeno</translation>\n-    </message>\n     <message>\n         <source>Last block time</source>\n         <translation>Posljednje vrijeme bloka</translation>\n@@ -1783,10 +1775,6 @@\n         <source>Error: Disk space is low!</source>\n         <translation>Pogre\u0161ka: Nema dovoljno prostora na disku!</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>Uvozi blokove sa vanjske blk000??.dat datoteke</translation>\n-    </message>\n     <message>\n         <source>Information</source>\n         <translation>Informacija</translation>\n@@ -1815,14 +1803,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Izvr\u0161ite naredbu kada se najbolji blok promjeni (%s u cmd je zamjenjen sa block hash)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>Nadogradite nov\u010danik u posljednji format.</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>Ponovno pretra\u017ei lanac blokova za transakcije koje nedostaju</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>Ova poruka za pomo\u0107</translation>"
      },
      {
        "sha": "27cfedc728bbe1c76e01ab83d45245418875f2a1",
        "filename": "src/qt/locale/bitcoin_hu.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 17,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_hu.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_hu.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_hu.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1317,14 +1317,6 @@\n         <source>Last Receive</source>\n         <translation>Legut\u00f3bbi fogad\u00e1s</translation>\n     </message>\n-    <message>\n-        <source>Bytes Sent</source>\n-        <translation>K\u00fcld\u00f6tt b\u00e1jtok</translation>\n-    </message>\n-    <message>\n-        <source>Bytes Received</source>\n-        <translation>Fogadott b\u00e1jtok</translation>\n-    </message>\n     <message>\n         <source>Ping Time</source>\n         <translation>Ping id\u0151</translation>\n@@ -2467,15 +2459,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Parancs, amit akkor hajt v\u00e9gre, amikor a legjobb blokk megv\u00e1ltozik (%s a cmd-ban lecser\u00e9l\u0151dik a blokk hash-re)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>A T\u00e1rca friss\u00edt\u00e9se a legfrissebb form\u00e1tumra</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>Blokkl\u00e1nc \u00fajraszkennel\u00e9se hi\u00e1nyz\u00f3 t\u00e1rca-tranzakci\u00f3k ut\u00e1n\n-</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>Ez a s\u00fag\u00f3-\u00fczenet"
      },
      {
        "sha": "22ce3efecb9450ed2b5daa2c16547e33bb65f5c3",
        "filename": "src/qt/locale/bitcoin_id_ID.ts",
        "status": "modified",
        "additions": 157,
        "deletions": 17,
        "changes": 174,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_id_ID.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_id_ID.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_id_ID.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1,6 +1,10 @@\n <TS language=\"id_ID\" version=\"2.1\">\n <context>\n     <name>AddressBookPage</name>\n+    <message>\n+        <source>Right-click to edit address or label</source>\n+        <translation>Klik-kanan untuk mengubah alamat atau label</translation>\n+    </message>\n     <message>\n         <source>Create a new address</source>\n         <translation>Buat alamat baru</translation>\n@@ -453,6 +457,36 @@\n         <source>Catching up...</source>\n         <translation>Menyusul...</translation>\n     </message>\n+    <message>\n+        <source>Date: %1\n+</source>\n+        <translation>Tanggal: %1\n+</translation>\n+    </message>\n+    <message>\n+        <source>Amount: %1\n+</source>\n+        <translation>Jumlah: %1\n+</translation>\n+    </message>\n+    <message>\n+        <source>Type: %1\n+</source>\n+        <translation>Tipe: %1\n+</translation>\n+    </message>\n+    <message>\n+        <source>Label: %1\n+</source>\n+        <translation>Label: %1\n+</translation>\n+    </message>\n+    <message>\n+        <source>Address: %1\n+</source>\n+        <translation>Alamat: %1\n+</translation>\n+    </message>\n     <message>\n         <source>Sent transaction</source>\n         <translation>Transaksi terkirim</translation>\n@@ -479,6 +513,10 @@\n </context>\n <context>\n     <name>CoinControlDialog</name>\n+    <message>\n+        <source>Coin Selection</source>\n+        <translation>Pemilihan Koin</translation>\n+    </message>\n     <message>\n         <source>Quantity:</source>\n         <translation>Kuantitas:</translation>\n@@ -897,6 +935,18 @@\n         <source>Port of the proxy (e.g. 9050)</source>\n         <translation>Port proxy (cth. 9050)</translation>\n     </message>\n+    <message>\n+        <source>IPv4</source>\n+        <translation>IPv4</translation>\n+    </message>\n+    <message>\n+        <source>IPv6</source>\n+        <translation>IPv6</translation>\n+    </message>\n+    <message>\n+        <source>Tor</source>\n+        <translation>Tor</translation>\n+    </message>\n     <message>\n         <source>&amp;Window</source>\n         <translation>&amp;Jendela</translation>\n@@ -957,6 +1007,10 @@\n         <source>Client restart required to activate changes.</source>\n         <translation>Restart klien diperlukan untuk mengaktifkan perubahan.</translation>\n     </message>\n+    <message>\n+        <source>Client will be shut down. Do you want to proceed?</source>\n+        <translation>Klien akan dimatikan, apakah anda hendak melanjutkan?</translation>\n+    </message>\n     <message>\n         <source>This change would require a client restart.</source>\n         <translation>Perubahan ini akan memerlukan restart klien</translation>\n@@ -1000,6 +1054,10 @@\n         <source>Mined balance that has not yet matured</source>\n         <translation>Saldo ditambang yang masih terlalu muda</translation>\n     </message>\n+    <message>\n+        <source>Balances</source>\n+        <translation>Saldo:</translation>\n+    </message>\n     <message>\n         <source>Total:</source>\n         <translation>Jumlah:</translation>\n@@ -1019,6 +1077,10 @@\n         <source>Invalid payment address %1</source>\n         <translation>Alamat pembayaran salah %1</translation>\n     </message>\n+    <message>\n+        <source>Payment request rejected</source>\n+        <translation>Permintaan pembayaran ditolak</translation>\n+    </message>\n     <message>\n         <source>Requested payment amount of %1 is too small (considered dust).</source>\n         <translation>Nilai pembayaran %1 yang diminta oleh Anda terlalu sedikit (dianggap debu).</translation>\n@@ -1027,6 +1089,10 @@\n         <source>Payment request error</source>\n         <translation>Gagalan permintaan pembayaran</translation>\n     </message>\n+    <message>\n+        <source>Payment request expired.</source>\n+        <translation>Permintaan pembayaran telah kadaluarsa</translation>\n+    </message>\n     <message>\n         <source>Refund from %1</source>\n         <translation>Pembayaran kembali dari %1</translation>\n@@ -1050,13 +1116,21 @@\n </context>\n <context>\n     <name>PeerTableModel</name>\n+    <message>\n+        <source>User Agent</source>\n+        <translation>Agen Pengguna</translation>\n+    </message>\n     </context>\n <context>\n     <name>QObject</name>\n     <message>\n         <source>Amount</source>\n         <translation>Nilai</translation>\n     </message>\n+    <message>\n+        <source>Enter a Bitcoin address (e.g. %1)</source>\n+        <translation>Masukkan alamat Bitcoin (contoh %1)</translation>\n+    </message>\n     <message>\n         <source>%1 h</source>\n         <translation>%1 Jam</translation>\n@@ -1143,6 +1217,24 @@\n         <source>Current number of blocks</source>\n         <translation>Jumlah blok terkini</translation>\n     </message>\n+    <message>\n+        <source>Sent</source>\n+        <translation>Terkirim</translation>\n+    </message>\n+    <message>\n+        <source>Version</source>\n+        <translation>Versi</translation>\n+    </message>\n+    <message>\n+        <source>User Agent</source>\n+        <translation>Agen Pengguna\n+\n+</translation>\n+    </message>\n+    <message>\n+        <source>Services</source>\n+        <translation>Layanan</translation>\n+    </message>\n     <message>\n         <source>Last block time</source>\n         <translation>Waktu blok terakhir</translation>\n@@ -1187,6 +1279,26 @@\n         <source>Clear console</source>\n         <translation>Bersihkan konsol</translation>\n     </message>\n+    <message>\n+        <source>1 &amp;hour</source>\n+        <translation>1 &amp;jam</translation>\n+    </message>\n+    <message>\n+        <source>1 &amp;day</source>\n+        <translation>1 &amp;hari</translation>\n+    </message>\n+    <message>\n+        <source>1 &amp;week</source>\n+        <translation>1 &amp;minggu</translation>\n+    </message>\n+    <message>\n+        <source>1 &amp;year</source>\n+        <translation>1 &amp;tahun</translation>\n+    </message>\n+    <message>\n+        <source>Welcome to the Bitcoin Core RPC console.</source>\n+        <translation>Selamat datang di konsol RPC Bitcoin.</translation>\n+    </message>\n     <message>\n         <source>Use up and down arrows to navigate history, and &lt;b&gt;Ctrl-L&lt;/b&gt; to clear screen.</source>\n         <translation>Gunakan panah keatas dan kebawah untuk menampilkan sejarah, dan &lt;b&gt;Ctrl-L&lt;/b&gt; untuk bersihkan layar.</translation>\n@@ -1211,7 +1323,19 @@\n         <source>%1 GB</source>\n         <translation>%1 GB</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Yes</source>\n+        <translation>Ya</translation>\n+    </message>\n+    <message>\n+        <source>No</source>\n+        <translation>Tidak</translation>\n+    </message>\n+    <message>\n+        <source>Unknown</source>\n+        <translation>Tidak diketahui</translation>\n+    </message>\n+</context>\n <context>\n     <name>ReceiveCoinsDialog</name>\n     <message>\n@@ -1431,6 +1555,22 @@\n         <source>Custom change address</source>\n         <translation>Alamat uang kembali yang kustom</translation>\n     </message>\n+    <message>\n+        <source>Recommended:</source>\n+        <translation>Disarankan</translation>\n+    </message>\n+    <message>\n+        <source>Confirmation time:</source>\n+        <translation>Waktu konfirmasi:</translation>\n+    </message>\n+    <message>\n+        <source>normal</source>\n+        <translation>normal</translation>\n+    </message>\n+    <message>\n+        <source>fast</source>\n+        <translation>cepat</translation>\n+    </message>\n     <message>\n         <source>Send to multiple recipients at once</source>\n         <translation>Kirim ke beberapa penerima sekaligus</translation>\n@@ -1491,6 +1631,10 @@\n         <source>Copy change</source>\n         <translation>Salin uang kembali</translation>\n     </message>\n+    <message>\n+        <source>Total Amount %1</source>\n+        <translation>Jumlah Total %1</translation>\n+    </message>\n     <message>\n         <source>or</source>\n         <translation>atau</translation>\n@@ -1515,6 +1659,14 @@\n         <source>The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.</source>\n         <translation>Gagal: Transaksi ditolak. Ini mungkin terjadi jika beberapa dari koin dalam dompet Anda telah digunakan, seperti ketika Anda menggunakan salinan wallet.dat dan beberapa koin telah dibelanjakan dalam salinan tersebut tetapi disini tidak tertandai sebagai terpakai.</translation>\n     </message>\n+    <message>\n+        <source>A fee higher than %1 is considered an absurdly high fee.</source>\n+        <translation>Biaya yang lebih tinggi dari %1 dianggap biaya tak masuk akal.</translation>\n+    </message>\n+    <message>\n+        <source>Payment request expired.</source>\n+        <translation>Permintaan pembayaran telah kadaluarsa</translation>\n+    </message>\n     <message>\n         <source>Warning: Invalid Bitcoin address</source>\n         <translation>Awas: Alamat Bitcoin tidak sah</translation>\n@@ -2213,10 +2365,6 @@\n         <source>(default: 1)</source>\n         <translation>(pengaturan awal: 1)</translation>\n     </message>\n-    <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>Coba memulihkan kunci-kunci pribadi dari wallet.dat yang rusak</translation>\n-    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>Pilihan pembuatan blok:</translation>\n@@ -2305,14 +2453,14 @@\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>Harus membangun ulang database menggunakan -reindex supaya mengubah -txindex</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>Impor blok dari eksternal berkas blk000???.dat</translation>\n-    </message>\n     <message>\n         <source>Cannot obtain a lock on data directory %s. Bitcoin Core is probably already running.</source>\n         <translation>Tidak bisa mengunci data directory %s. Kemungkinan Bitcoin Core sudah mulai.</translation>\n     </message>\n+    <message>\n+        <source>Connect through SOCKS5 proxy</source>\n+        <translation>Hubungkan melalui proxy SOCKS5</translation>\n+    </message>\n     <message>\n         <source>Information</source>\n         <translation>Informasi</translation>\n@@ -2389,14 +2537,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Menjalankan perintah ketika perubahan blok terbaik (%s dalam cmd digantikan oleh hash blok)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>Perbarui dompet ke format terbaru</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>Pindai ulang rantai-blok untuk transaksi dompet yang hilang</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>Pesan bantuan ini</translation>"
      },
      {
        "sha": "7a2b7bd84331192f136f43654b2ff61c380a0e5a",
        "filename": "src/qt/locale/bitcoin_it.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 32,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_it.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_it.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_it.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1486,14 +1486,6 @@ Per specificare pi\u00f9 URL separarli con una barra verticale \"|\".</translation>\n         <source>Last Receive</source>\n         <translation>Ultima Ricezione</translation>\n     </message>\n-    <message>\n-        <source>Bytes Sent</source>\n-        <translation>Byte Inviati</translation>\n-    </message>\n-    <message>\n-        <source>Bytes Received</source>\n-        <translation>Byte Ricevuti</translation>\n-    </message>\n     <message>\n         <source>Ping Time</source>\n         <translation>Tempo di Ping</translation>\n@@ -1998,10 +1990,6 @@ Per specificare pi\u00f9 URL separarli con una barra verticale \"|\".</translation>\n         <source>Payment request expired.</source>\n         <translation>Richiesta di pagamento scaduta.</translation>\n     </message>\n-    <message>\n-        <source>Pay only the minimum fee of %1</source>\n-        <translation>Paga solamente la commissione minima di %1</translation>\n-    </message>\n     <message>\n         <source>The recipient address is not valid. Please recheck.</source>\n         <translation>L'indirizzo del beneficiario non \u00e8 valido. Si prega di ricontrollare.</translation>\n@@ -2852,10 +2840,6 @@ Per specificare pi\u00f9 URL separarli con una barra verticale \"|\".</translation>\n         <source>&lt;category&gt; can be:</source>\n         <translation>Valori possibili per &lt;category&gt;:</translation>\n     </message>\n-    <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>Tenta di recuperare le chiavi private da un wallet.dat corrotto</translation>\n-    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>Opzioni creazione blocco:</translation>\n@@ -2976,10 +2960,6 @@ Per specificare pi\u00f9 URL separarli con una barra verticale \"|\".</translation>\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>\u00c8 necessario ricostruire il database usando -reindex per cambiare -txindex</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>Importa blocchi da un file blk000??.dat esterno</translation>\n-    </message>\n     <message>\n         <source>Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times</source>\n         <translation>Permette connessioni JSON-RPC dall'origine specificata. I valori validi per &lt;ip&gt; sono un singolo IP (ad es. 1.2.3.4), una network/netmask (ad es. 1.2.3.4/255.255.255.0) oppure una network/CIDR (ad es. 1.2.3.4/24). Questa opzione pu\u00f2 essere specificata pi\u00f9 volte.</translation>\n@@ -3228,10 +3208,6 @@ Per specificare pi\u00f9 URL separarli con una barra verticale \"|\".</translation>\n         <source>Zapping all transactions from wallet...</source>\n         <translation>Eliminazione dal portamonete di tutte le transazioni...</translation>\n     </message>\n-    <message>\n-        <source>on startup</source>\n-        <translation>all'avvio</translation>\n-    </message>\n     <message>\n         <source>wallet.dat corrupt, salvage failed</source>\n         <translation>wallet.dat corrotto, recupero fallito</translation>\n@@ -3244,14 +3220,6 @@ Per specificare pi\u00f9 URL separarli con una barra verticale \"|\".</translation>\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Esegue un comando quando il miglior blocco cambia (%s nel cmd \u00e8 sostituito dall'hash del blocco)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>Aggiorna il wallet all'ultimo formato</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>Ripete la scansione della block chain per individuare le transazioni che mancano dal portamonete</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>Questo messaggio di aiuto</translation>"
      },
      {
        "sha": "140ed2445bc5267f948f7d258ba2dda968cd3e6b",
        "filename": "src/qt/locale/bitcoin_ja.ts",
        "status": "modified",
        "additions": 28,
        "deletions": 40,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_ja.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_ja.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ja.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1549,14 +1549,6 @@\n         <source>Last Receive</source>\n         <translation>\u6700\u7d42\u53d7\u4fe1</translation>\n     </message>\n-    <message>\n-        <source>Bytes Sent</source>\n-        <translation>\u9001\u4fe1\u6e08\u30d0\u30a4\u30c8\u6570</translation>\n-    </message>\n-    <message>\n-        <source>Bytes Received</source>\n-        <translation>\u53d7\u4fe1\u6e08\u30d0\u30a4\u30c8\u6570</translation>\n-    </message>\n     <message>\n         <source>Ping Time</source>\n         <translation>Ping\u6642\u9593</translation>\n@@ -2069,6 +2061,10 @@\n         <source>Copy change</source>\n         <translation>\u91e3\u308a\u92ad\u3092\u30b3\u30d4\u30fc</translation>\n     </message>\n+    <message>\n+        <source>Total Amount %1</source>\n+        <translation>\u5408\u8a08\uff1a\u3000%1</translation>\n+    </message>\n     <message>\n         <source>or</source>\n         <translation>\u307e\u305f\u306f</translation>\n@@ -2101,18 +2097,14 @@\n         <source>Payment request expired.</source>\n         <translation>\u652f\u6255\u3044\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u671f\u9650\u304c\u5207\u308c\u307e\u3057\u305f\u3002</translation>\n     </message>\n+    <message>\n+        <source>Pay only the required fee of %1</source>\n+        <translation>\u8981\u6c42\u624b\u6570\u6599 %1 \u306e\u307f\u3092\u652f\u6255\u3046</translation>\n+    </message>\n     <message numerus=\"yes\">\n         <source>Estimated to begin confirmation within %n block(s).</source>\n         <translation><numerusform>%n \u30d6\u30ed\u30c3\u30af\u4ee5\u5185\u306b\u691c\u8a3c\u304c\u958b\u59cb\u3055\u308c\u308b\u3068\u4e88\u60f3\u3055\u308c\u307e\u3059\u3002</numerusform></translation>\n     </message>\n-    <message>\n-        <source>Pay only the minimum fee of %1</source>\n-        <translation>\u6700\u5c0f\u624b\u6570\u6599 %1 \u306e\u307f\u3092\u652f\u6255\u3046</translation>\n-    </message>\n-    <message>\n-        <source>Total Amount %1&lt;span style='font-size:10pt;font-weight:normal;'&gt;&lt;br /&gt;(=%2)&lt;/span&gt;</source>\n-        <translation>\u7dcf\u984d %1&lt;span style='font-size:10pt;font-weight:normal;'&gt;&lt;br /&gt;(=%2)&lt;/span&gt;</translation>\n-    </message>\n     <message>\n         <source>The recipient address is not valid. Please recheck.</source>\n         <translation>\u53d7\u53d6\u30a2\u30c9\u30ec\u30b9\u304c\u4e0d\u6b63\u3067\u3059\u3002\u518d\u30c1\u30a7\u30c3\u30af\u3057\u3066\u304f\u3060\u3055\u3044\u3002</translation>\n@@ -2891,10 +2883,6 @@\n         <source>Accept command line and JSON-RPC commands</source>\n         <translation>\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u3068 JSON-RPC \u30b3\u30de\u30f3\u30c9\u3092\u8a31\u53ef</translation>\n     </message>\n-    <message>\n-        <source>Fees (in %s/kB) smaller than this are considered zero fee for relaying (default: %s)</source>\n-        <translation>\u4e2d\u7d99\u306e\u969b\u3001\u3053\u306e\u5024\u672a\u6e80\u306e\u624b\u6570\u6599 (%s/kB\u5358\u4f4d) \u306f\u30bc\u30ed\u3067\u3042\u308b\u3068\u307f\u306a\u3059 (\u30c7\u30d5\u30a9\u30eb\u30c8: %s)</translation>\n-    </message>\n     <message>\n         <source>If &lt;category&gt; is not supplied or if &lt;category&gt; = 1, output all debugging information.</source>\n         <translation>&lt;category&gt; \u304c\u4e0e\u3048\u3089\u308c\u306a\u304b\u3063\u305f\u5834\u5408\u3084 &lt;category&gt; = 1 \u306e\u5834\u5408\u306b\u306f\u3001\u3059\u3079\u3066\u306e\u30c7\u30d0\u30c3\u30b0\u60c5\u5831\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002</translation>\n@@ -3019,10 +3007,6 @@\n         <source>&lt;category&gt; can be:</source>\n         <translation>&lt;category&gt;\u306f\u4ee5\u4e0b\u306e\u5024\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\uff1a</translation>\n     </message>\n-    <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>\u58ca\u308c\u305f wallet.dat \u304b\u3089\u79d8\u5bc6\u9375\u3092\u5fa9\u65e7\u3059\u308b\u3053\u3068\u3092\u8a66\u3059</translation>\n-    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>\u30d6\u30ed\u30c3\u30af\u4f5c\u6210\u30aa\u30d7\u30b7\u30e7\u30f3:</translation>\n@@ -3180,10 +3164,6 @@\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>-txindex \u3092\u5909\u66f4\u3059\u308b\u306b\u306f -reindex \u3092\u4f7f\u7528\u3057\u3066\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u518d\u69cb\u7bc9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>\u5916\u90e8\u306e blk000??.dat \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30d6\u30ed\u30c3\u30af\u3092\u30a4\u30f3\u30dd\u30fc\u30c8</translation>\n-    </message>\n     <message>\n         <source>Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times</source>\n         <translation>\u6307\u5b9a\u3057\u305f\u30a2\u30af\u30bb\u30b9\u5143\u304b\u3089\u306eJSON-RPC\u63a5\u7d9a\u3092\u8a31\u53ef\u3059\u308b\u3002\u6709\u52b9\u306a&lt;ip&gt;\u306f\u3001\u5358\u4e00\u306eIP (\u4f8b 1.2.3.4)\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af/\u30cd\u30c3\u30c8\u30de\u30b9\u30af (1.2.3.4/255.255.255.0)\u3001\u307e\u305f\u306f\u30cd\u30c3\u30c8\u30ef\u30fc\u30af/CIDR (1.2.3.4/24)\u3067\u3059\u3002\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u8907\u6570\u56de\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002</translation>\n@@ -3216,6 +3196,10 @@\n         <source>Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)</source>\n         <translation>\u95a2\u9023\u306e\u30a2\u30e9\u30fc\u30c8\u3092\u3082\u3089\u3063\u3066\u3082\u3059\u3054\u304f\u9577\u3044\u306e\u30d5\u30a9\u30fc\u30af\u3092\u898b\u3066\u3082\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c (\u30b3\u30de\u30f3\u30c9\u306e\u4e2d\u306b\u3042\u308b\u306e%s\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u304b\u3089\u7f6e\u304d\u63db\u3048\u3055\u305b\u308b)</translation>\n     </message>\n+    <message>\n+        <source>Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)</source>\n+        <translation>\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u306e\u4e2d\u7d99\u3001\u63a1\u6398\u304a\u3088\u3073\u4f5c\u6210\u306e\u969b\u306b\u306f\u3001\u3053\u306e\u5024\u672a\u6e80\u306e\u624b\u6570\u6599 (%s/kB\u5358\u4f4d) \u306f\u30bc\u30ed\u3067\u3042\u308b\u3068\u307f\u306a\u3059 (\u30c7\u30d5\u30a9\u30eb\u30c8: %s)</translation>\n+    </message>\n     <message>\n         <source>If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)</source>\n         <translation>paytxfee \u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u5834\u5408\u3001\u5e73\u5747\u3057\u3066 n \u30d6\u30ed\u30c3\u30af\u4ee5\u5185\u306b\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u304c\u691c\u8a3c\u3055\u308c\u59cb\u3081\u308b\u306e\u306b\u5341\u5206\u306a\u624b\u6570\u6599\u3092\u542b\u3081\u308b (\u521d\u671f\u5024: %u)</translation>\n@@ -3272,6 +3256,10 @@\n         <source>Activating best chain...</source>\n         <translation>\u6700\u512a\u826f\u306e\u30c1\u30a7\u30a4\u30f3\u3092\u6709\u52b9\u5316\u3057\u3066\u3044\u307e\u3059...</translation>\n     </message>\n+    <message>\n+        <source>Attempt to recover private keys from a corrupt wallet.dat on startup</source>\n+        <translation>\u8d77\u52d5\u6642\u306b\u58ca\u308c\u305f wallet.dat \u304b\u3089\u79d8\u5bc6\u9375\u3092\u5fa9\u65e7\u3059\u308b\u3053\u3068\u3092\u8a66\u3059</translation>\n+    </message>\n     <message>\n         <source>Cannot resolve -whitebind address: '%s'</source>\n         <translation>-whitebind \u30a2\u30c9\u30ec\u30b9 '%s' \u3092\u89e3\u6c7a\u3067\u304d\u307e\u305b\u3093</translation>\n@@ -3296,6 +3284,10 @@\n         <source>Error reading from database, shutting down.</source>\n         <translation>\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u8aad\u307f\u8fbc\u307f\u30a8\u30e9\u30fc\u3002\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u3057\u307e\u3059\u3002</translation>\n     </message>\n+    <message>\n+        <source>Imports blocks from external blk000??.dat file on startup</source>\n+        <translation>\u8d77\u52d5\u6642\u306b\u5916\u90e8\u306e blk000??.dat \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30d6\u30ed\u30c3\u30af\u3092\u30a4\u30f3\u30dd\u30fc\u30c8</translation>\n+    </message>\n     <message>\n         <source>Information</source>\n         <translation>\u60c5\u5831</translation>\n@@ -3352,6 +3344,10 @@\n         <source>Reducing -maxconnections from %d to %d, because of system limitations.</source>\n         <translation>\u30b7\u30b9\u30c6\u30e0\u4e0a\u306e\u5236\u7d04\u304b\u3089\u3001-maxconnections \u3092 %d \u304b\u3089 %d \u306b\u524a\u6e1b\u3057\u307e\u3057\u305f\u3002</translation>\n     </message>\n+    <message>\n+        <source>Rescan the block chain for missing wallet transactions on startup</source>\n+        <translation>\u8d77\u52d5\u6642\u306b\u5931\u3063\u305f\u30a6\u30a9\u30ec\u30c3\u30c8\u306e\u53d6\u5f15\u306e\u30d6\u30ed\u30c3\u30af \u30c1\u30a7\u30fc\u30f3\u3092\u518d\u30b9\u30ad\u30e3\u30f3</translation>\n+    </message>\n     <message>\n         <source>Send trace/debug info to console instead of debug.log file</source>\n         <translation>\u30c8\u30ec\u30fc\u30b9/\u30c7\u30d0\u30c3\u30b0\u60c5\u5831\u3092 debug.log \u30d5\u30a1\u30a4\u30eb\u306e\u4ee3\u308f\u308a\u306b\u30b3\u30f3\u30bd\u30fc\u30eb\u3078\u9001\u308b</translation>\n@@ -3420,6 +3416,10 @@\n         <source>Unable to bind to %s on this computer (bind returned error %s)</source>\n         <translation>\u3053\u306e\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306e %s \u306b\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093 (\u30d0\u30a4\u30f3\u30c9\u304c\u8fd4\u3057\u305f\u30a8\u30e9\u30fc\u306f %s)</translation>\n     </message>\n+    <message>\n+        <source>Upgrade wallet to latest format on startup</source>\n+        <translation>\u8d77\u52d5\u6642\u306b\u30a6\u30a9\u30ec\u30c3\u30c8\u3092\u6700\u65b0\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9</translation>\n+    </message>\n     <message>\n         <source>Username for JSON-RPC connections</source>\n         <translation>JSON-RPC \u63a5\u7d9a\u306e\u30e6\u30fc\u30b6\u30fc\u540d</translation>\n@@ -3440,10 +3440,6 @@\n         <source>ZeroMQ notification options:</source>\n         <translation>ZeroMQ\u901a\u77e5\u30aa\u30d7\u30b7\u30e7\u30f3:</translation>\n     </message>\n-    <message>\n-        <source>on startup</source>\n-        <translation>\u8d77\u52d5\u6642</translation>\n-    </message>\n     <message>\n         <source>wallet.dat corrupt, salvage failed</source>\n         <translation>wallet.dat \u304c\u58ca\u308c\u3001\u5fa9\u65e7\u306b\u5931\u6557\u3057\u307e\u3057\u305f</translation>\n@@ -3456,14 +3452,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>\u6700\u826f\u306e\u30d6\u30ed\u30c3\u30af\u306b\u5909\u66f4\u3059\u308b\u969b\u306b\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c (cmd \u306e %s \u306f\u30d6\u30ed\u30c3\u30af \u30cf\u30c3\u30b7\u30e5\u306b\u7f6e\u63db\u3055\u308c\u308b)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>\u30a6\u30a9\u30ec\u30c3\u30c8\u3092\u6700\u65b0\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>\u5931\u3063\u305f\u30a6\u30a9\u30ec\u30c3\u30c8\u306e\u53d6\u5f15\u306e\u30d6\u30ed\u30c3\u30af \u30c1\u30a7\u30fc\u30f3\u3092\u518d\u30b9\u30ad\u30e3\u30f3</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>\u3053\u306e\u30d8\u30eb\u30d7 \u30e1\u30c3\u30bb\u30fc\u30b8</translation>"
      },
      {
        "sha": "e8f5286697e226e756e872635aef1cf7f5014a75",
        "filename": "src/qt/locale/bitcoin_ka.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_ka.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_ka.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ka.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -2233,10 +2233,6 @@\n         <source>&lt;category&gt; can be:</source>\n         <translation>&lt;category&gt; \u10e8\u10d4\u10d8\u10eb\u10da\u10d4\u10d1\u10d0 \u10d8\u10e7\u10dd\u10e1:</translation>\n     </message>\n-    <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>\u10de\u10d8\u10e0\u10d0\u10d3\u10d8 \u10d2\u10d0\u10e1\u10d0\u10e6\u10d4\u10d1\u10d4\u10d1\u10d8\u10e1 \u10d0\u10e6\u10d3\u10d2\u10d4\u10dc\u10d8\u10e1 \u10db\u10ea\u10d3\u10d4\u10da\u10dd\u10d1\u10d0 wallet.dat-\u10d8\u10d3\u10d0\u10dc</translation>\n-    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>\u10d1\u10da\u10dd\u10d9\u10d8\u10e1 \u10e8\u10d4\u10e5\u10db\u10dc\u10d8\u10e1 \u10dd\u10de\u10ea\u10d8\u10d4\u10d1\u10d8:</translation>\n@@ -2321,10 +2317,6 @@\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>\u10e1\u10d0\u10ed\u10d8\u10e0\u10dd\u10d0 \u10d1\u10d0\u10d6\u10d8\u10e1 \u10ee\u10d4\u10da\u10d0\u10ee\u10d0\u10da\u10d8 \u10d0\u10d2\u10d4\u10d1\u10d0, \u10d2\u10d0\u10db\u10dd\u10d8\u10e7\u10d4\u10dc\u10d4\u10d7 -reindex \u10e0\u10d0\u10d7\u10d0 \u10e8\u10d4\u10ea\u10d5\u10d0\u10da\u10dd\u10d7 -txindex</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>\u10d1\u10da\u10dd\u10d9\u10d4\u10d1\u10d8\u10e1 \u10d8\u10db\u10de\u10dd\u10e0\u10e2\u10d8 \u10d2\u10d0\u10e0\u10d4 blk000??.dat \u10e4\u10d0\u10d8\u10da\u10d8\u10d3\u10d0\u10dc</translation>\n-    </message>\n     <message>\n         <source>Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)</source>\n         <translation>\u10d1\u10e0\u10eb\u10d0\u10dc\u10d4\u10d1\u10d8\u10e1 \u10e8\u10d4\u10e1\u10e0\u10e3\u10da\u10d4\u10d1\u10d0 \u10e8\u10d4\u10e1\u10d0\u10d1\u10d0\u10db\u10d8\u10e1\u10d8 \u10e3\u10ec\u10e7\u10d4\u10d1\u10d8\u10e1 \u10db\u10d8\u10e6\u10d4\u10d1\u10d8\u10e1\u10d0\u10e1 \u10d0\u10dc \u10e0\u10dd\u10ea\u10d0 \u10e8\u10d4\u10d8\u10dc\u10d8\u10e8\u10dc\u10d4\u10d1\u10d0 \u10e1\u10d0\u10d2\u10e0\u10eb\u10dc\u10dd\u10d1\u10d8 \u10d2\u10d0\u10ee\u10da\u10d4\u10e9\u10d0 (cmd-\u10e8\u10d8 %s \u10e8\u10d4\u10d8\u10ea\u10d5\u10da\u10d4\u10d1\u10d0 \u10db\u10d4\u10e1\u10d8\u10ef\u10d8\u10d7)</translation>\n@@ -2409,14 +2401,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>\u10d9\u10dd\u10db\u10d0\u10dc\u10d3\u10d8\u10e1 \u10e8\u10d4\u10e1\u10e0\u10e3\u10da\u10d4\u10d1\u10d0 \u10e3\u10d9\u10d4\u10d7\u10d4\u10e1\u10d8 \u10d1\u10da\u10dd\u10d9\u10d8\u10e1 \u10d2\u10d0\u10db\u10dd\u10e9\u10d4\u10dc\u10d8\u10e1\u10d0\u10e1 (%s \u10d9\u10dd\u10db\u10d0\u10dc\u10d3\u10d0\u10e8\u10d8 \u10e9\u10d0\u10dc\u10d0\u10ea\u10d5\u10da\u10d3\u10d4\u10d1\u10d0 \u10d1\u10da\u10dd\u10d9\u10d8\u10e1 \u10f0\u10d4\u10e8\u10d8\u10d7)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>\u10e1\u10d0\u10e4\u10e3\u10da\u10d8\u10e1 \u10e4\u10dd\u10e0\u10db\u10d0\u10e2\u10d8\u10e1 \u10d2\u10d0\u10dc\u10d0\u10ee\u10da\u10d4\u10d1\u10d0</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>\u10d1\u10da\u10dd\u10d9\u10d4\u10d1\u10d8\u10e1 \u10ef\u10d0\u10ed\u10d5\u10d8\u10e1 \u10d2\u10d0\u10d3\u10d0\u10db\u10dd\u10ec\u10db\u10d4\u10d1\u10d0 \u10e1\u10d0\u10e4\u10e3\u10da\u10d4\u10e8\u10d8 \u10d2\u10d0\u10db\u10dd\u10e0\u10e9\u10d4\u10dc\u10d8\u10da \u10e2\u10e0\u10d0\u10dc\u10e1\u10d0\u10e5\u10ea\u10d8\u10d4\u10d1\u10d6\u10d4</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>\u10d4\u10e1 \u10e2\u10d4\u10e5\u10e1\u10e2\u10d8</translation>"
      },
      {
        "sha": "8243618f1135a387aa126e7d7e3c941ed7beb436",
        "filename": "src/qt/locale/bitcoin_ko_KR.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_ko_KR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_ko_KR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ko_KR.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -2303,10 +2303,6 @@\n         <source>(default: 1)</source>\n         <translation>(\uae30\ubcf8\uac12: 1)</translation>\n     </message>\n-    <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>\uc190\uc0c1\ub41c wallet.dat\uc5d0\uc11c \uac1c\uc778\ud0a4 \ubcf5\uc6d0\uc744 \uc2dc\ub3c4\ud569\ub2c8\ub2e4</translation>\n-    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>\ube14\ub85d \uc0dd\uc131 \uc635\uc158:</translation>\n@@ -2403,10 +2399,6 @@\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>-txindex\ub97c \ubc14\uafb8\uae30 \uc704\ud574\uc11c\ub294 -reindex\ub97c \uc0ac\uc6a9\ud574\uc11c \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub97c \uc7ac\uad6c\uc131\ud574\uc57c \ud569\ub2c8\ub2e4. </translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>\uc678\ubd80 blk000??.dat \ud30c\uc77c\uc5d0\uc11c \ube14\ub85d\uc744 \uac00\uc838\uc635\ub2c8\ub2e4.</translation>\n-    </message>\n     <message>\n         <source>Cannot obtain a lock on data directory %s. Bitcoin Core is probably already running.</source>\n         <translation>\ub370\uc774\ud130 \ub514\ub809\ud1a0\ub9ac %s\uc5d0 \ub77d\uc744 \uac78 \uc218 \uc5c6\uc5c8\uc2b5\ub2c8\ub2e4. \ube44\ud2b8\ucf54\uc778 \ucf54\uc5b4\uac00 \uc774\ubbf8 \uc2e4\ud589 \uc911\uc778 \uac83\uc73c\ub85c \ubcf4\uc785\ub2c8\ub2e4.</translation>\n@@ -2495,10 +2487,6 @@\n         <source>Zapping all transactions from wallet...</source>\n         <translation>\uc9c0\uac11\uc758 \ubaa8\ub4e0\uac70\ub798\ub0b4\uc5ed \uac74\ub108\ub6f0\uae30...</translation>\n     </message>\n-    <message>\n-        <source>on startup</source>\n-        <translation>\uad6c\ub3d9 \uc911</translation>\n-    </message>\n     <message>\n         <source>wallet.dat corrupt, salvage failed</source>\n         <translation>wallet.dat \ud30c\uc77c\uc774 \uc190\uc0c1\ub418\uc5c8\uace0 \ubcf5\uad6c\uac00 \uc2e4\ud328\ud558\uc600\uc2b5\ub2c8\ub2e4.</translation>\n@@ -2511,14 +2499,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>\ucd5c\uace0\uc758 \ube14\ub7ed\uc774 \ubcc0\ud558\uba74 \uba85\ub839\uc744 \uc2e4\ud589(cmd \uc5d0 \uc788\ub294 %s \ub294 \ube14\ub7ed \ud574\uc2dc\uc5d0 \uc758\ud574 \ub300\uccb4\ub418\uc5b4 \uc9d0)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>\uc9c0\uac11\uc744 \ucd5c\uadfc \ud615\uc2dd\uc73c\ub85c \uac1c\uc120\ud558\uc2dc\uc624</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>\ub204\ub77d\ub41c \uc9c0\uac11 \uc1a1\uae08\uc5d0 \ub300\ud55c \ube14\ub85d \uccb4\uc778 \ub2e4\uc2dc \uac80\uc0c9</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>\ub3c4\uc6c0\ub9d0 \uba54\uc2dc\uc9c0\uc785\ub2c8\ub2e4</translation>"
      },
      {
        "sha": "b297a35d4b7fbe50b549375953e4d4c04b6f213a",
        "filename": "src/qt/locale/bitcoin_la.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_la.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_la.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_la.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1409,10 +1409,6 @@\n         <source>Warning: wallet.dat corrupt, data salvaged! Original wallet.dat saved as wallet.{timestamp}.bak in %s; if your balance or transactions are incorrect you should restore from a backup.</source>\n         <translation>Monitio: wallet.data corrupta, data salvata!  Originalis wallet.dat salvata ut wallet.{timestamp}.bak in %s; si pendendum tuum vel transactiones pravae sunt, oportet ab conservato restituere.</translation>\n     </message>\n-    <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>Conare recipere claves privatas de corrupto wallet.dat</translation>\n-    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>Optiones creandi frustorum:</translation>\n@@ -1465,10 +1461,6 @@\n         <source>Verifying wallet...</source>\n         <translation>Verificante cassidilem...</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>Importat frusta ab externa plica blk000??.dat</translation>\n-    </message>\n     <message>\n         <source>Information</source>\n         <translation>Informatio</translation>\n@@ -1537,14 +1529,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Pelle mandatum quando optissimum frustum mutat (%s in mandato substituitur ab hash frusti)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>Progredere cassidile ad formam recentissimam</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>Iterum perlege catenam frustorum propter absentes cassidilis transactiones</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>Hic nuntius auxilii</translation>"
      },
      {
        "sha": "782097737531a3619879c64ab39ee52f393ee72e",
        "filename": "src/qt/locale/bitcoin_lt.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_lt.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_lt.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_lt.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -871,14 +871,6 @@\n         <source>Version</source>\n         <translation>Versija</translation>\n     </message>\n-    <message>\n-        <source>Bytes Sent</source>\n-        <translation>Nusi\u0173sti baitai</translation>\n-    </message>\n-    <message>\n-        <source>Bytes Received</source>\n-        <translation>Gauti baitai</translation>\n-    </message>\n     <message>\n         <source>Last block time</source>\n         <translation>Paskutinio bloko laikas</translation>\n@@ -1661,14 +1653,6 @@\n         <source>Password for JSON-RPC connections</source>\n         <translation>Slapta\u017eodis JSON-RPC sujungimams</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>Atnaujinti pinigin\u0119 \u012f naujausi\u0105 format\u0105</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>Ie\u0161koti  prarast\u0173 pinigin\u0117s sandori\u0173 blok\u0173 grandin\u0117je</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>Pagelbos \u017einut\u0117</translation>"
      },
      {
        "sha": "fa7abdf2ab91486b568437d93edb75aadcf6d6ae",
        "filename": "src/qt/locale/bitcoin_lv_LV.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_lv_LV.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_lv_LV.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_lv_LV.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -2121,10 +2121,6 @@\n         <source>&lt;category&gt; can be:</source>\n         <translation>&lt;category&gt; var b\u016bt:</translation>\n     </message>\n-    <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>M\u0113\u0123in\u0101t atg\u016bt priv\u0101t\u0101s atsl\u0113gas no boj\u0101ta wallet.dat</translation>\n-    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>Bloka izveido\u0161anas iestat\u012bjumi:</translation>\n@@ -2165,10 +2161,6 @@\n         <source>Wallet options:</source>\n         <translation>Maci\u0146a iesp\u0113jas:</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>Import\u0113t blokus no \u0101r\u0113j\u0101s blk000??.dat datnes</translation>\n-    </message>\n     <message>\n         <source>Information</source>\n         <translation>Inform\u0101cija</translation>\n@@ -2217,10 +2209,6 @@\n         <source>Warning</source>\n         <translation>Br\u012bdin\u0101jums</translation>\n     </message>\n-    <message>\n-        <source>on startup</source>\n-        <translation>start\u0113\u0161anas laik\u0101</translation>\n-    </message>\n     <message>\n         <source>wallet.dat corrupt, salvage failed</source>\n         <translation>wallet.dat ir boj\u0101ts, gl\u0101b\u0161ana neizdev\u0101s</translation>\n@@ -2233,14 +2221,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Izpild\u012bt komandu, kad lab\u0101k atbilsto\u0161ais bloks izmain\u0101s (%s cmd aizvieto ar bloka he\u0161u)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>Atjaunot maci\u0146a form\u0101tu uz jaun\u0101ko</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>Atk\u0101rtoti skan\u0113t bloku virkni, mekl\u0113jot tr\u016bksto\u0161\u0101s maci\u0146a transakcijas</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>\u0160is pal\u012bdz\u012bbas pazi\u0146ojums</translation>"
      },
      {
        "sha": "d1a59762242b21cbe36e7f7a7b048e11b78f7770",
        "filename": "src/qt/locale/bitcoin_mn.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_mn.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_mn.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_mn.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1033,10 +1033,6 @@\n         <source>Wallet options:</source>\n         <translation>\u0422\u04af\u0440\u04af\u0439\u0432\u0447\u0438\u0439\u043d \u0441\u043e\u043d\u0433\u043e\u043b\u0442\u0443\u0443\u0434:</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>\u0422\u04af\u0440\u04af\u0439\u0432\u0447\u0438\u0439\u0433 \u0445\u0430\u043c\u0433\u0438\u0439\u043d \u0441\u04af\u04af\u043b\u0438\u0439\u043d \u04af\u0435\u0438\u0439\u043d \u0444\u043e\u0440\u043c\u0430\u0442\u0440\u0443\u0443 \u0448\u0438\u043d\u044d\u0447\u043b\u044d\u0445</translation>\n-    </message>\n     <message>\n         <source>Loading addresses...</source>\n         <translation>\u0425\u0430\u044f\u0433\u0443\u0443\u0434\u044b\u0433 \u0430\u0447\u0430\u0430\u043b\u043b\u0430\u0436 \u0431\u0430\u0439\u043d\u0430...</translation>"
      },
      {
        "sha": "6cded5e13579872e75882470c1e81c16bd49f897",
        "filename": "src/qt/locale/bitcoin_nb.ts",
        "status": "modified",
        "additions": 28,
        "deletions": 40,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_nb.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_nb.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_nb.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1549,14 +1549,6 @@\n         <source>Last Receive</source>\n         <translation>Siste Mottatte</translation>\n     </message>\n-    <message>\n-        <source>Bytes Sent</source>\n-        <translation>Byte Sendt</translation>\n-    </message>\n-    <message>\n-        <source>Bytes Received</source>\n-        <translation>Byte Mottatt</translation>\n-    </message>\n     <message>\n         <source>Ping Time</source>\n         <translation>Ping-tid</translation>\n@@ -2069,6 +2061,10 @@\n         <source>Copy change</source>\n         <translation>Kopier veksel</translation>\n     </message>\n+    <message>\n+        <source>Total Amount %1</source>\n+        <translation>Totalt Bel\u00f8p %1</translation>\n+    </message>\n     <message>\n         <source>or</source>\n         <translation>eller</translation>\n@@ -2101,18 +2097,14 @@\n         <source>Payment request expired.</source>\n         <translation>Betalingsettersp\u00f8rringen har utl\u00f8pt.</translation>\n     </message>\n+    <message>\n+        <source>Pay only the required fee of %1</source>\n+        <translation>Betal kun p\u00e5krevd gebyr p\u00e5 %1</translation>\n+    </message>\n     <message numerus=\"yes\">\n         <source>Estimated to begin confirmation within %n block(s).</source>\n         <translation><numerusform>Ansl\u00e5tt til \u00e5 begynne bekreftelse innen %n blokk.</numerusform><numerusform>Ansl\u00e5tt til \u00e5 begynne bekreftelse innen %n blokker.</numerusform></translation>\n     </message>\n-    <message>\n-        <source>Pay only the minimum fee of %1</source>\n-        <translation>Betal kun minimumsgebyret p\u00e5 %1</translation>\n-    </message>\n-    <message>\n-        <source>Total Amount %1&lt;span style='font-size:10pt;font-weight:normal;'&gt;&lt;br /&gt;(=%2)&lt;/span&gt;</source>\n-        <translation>Totalt Bel\u00f8p %1&lt;span style='font-size:10pt;font-weight:normal;'&gt;&lt;br /&gt;(=%2)&lt;/span&gt;</translation>\n-    </message>\n     <message>\n         <source>The recipient address is not valid. Please recheck.</source>\n         <translation>Mottakeradressen er ikke gyldig. Vennligst kontroller p\u00e5 nytt.</translation>\n@@ -2891,10 +2883,6 @@\n         <source>Accept command line and JSON-RPC commands</source>\n         <translation>Ta imot kommandolinje- og JSON-RPC-kommandoer</translation>\n     </message>\n-    <message>\n-        <source>Fees (in %s/kB) smaller than this are considered zero fee for relaying (default: %s)</source>\n-        <translation>Gebyrer (i %s/kB) mindre enn dette vil anses som gebyrfrie (for videresending) (standard: %s)</translation>\n-    </message>\n     <message>\n         <source>If &lt;category&gt; is not supplied or if &lt;category&gt; = 1, output all debugging information.</source>\n         <translation>Hvis &lt;category&gt; ikke er oppgitt eller hvis &lt;category&gt; = 1, ta ut all informasjon for feils\u00f8king.</translation>\n@@ -3015,10 +3003,6 @@\n         <source>&lt;category&gt; can be:</source>\n         <translation>&lt;category&gt; kan v\u00e6re:</translation>\n     </message>\n-    <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>Fors\u00f8k \u00e5 berge private n\u00f8kler fra en korrupt wallet.dat</translation>\n-    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>Valg for opprettelse av blokker:</translation>\n@@ -3175,10 +3159,6 @@\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>Du m\u00e5 gjenoppbygge databasen med \u00e5 bruke -reindex for \u00e5 endre -txindex</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>Importerer blokker fra ekstern fil blk000??.dat</translation>\n-    </message>\n     <message>\n         <source>Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times</source>\n         <translation>Tillat JSON-RPC-tilkoblinger fra angitt kilde. Gyldig for &lt;ip&gt; er en enkelt IP (f. eks. 1.2.3.4), et nettverk/nettmaske (f. eks. 1.2.3.4/255.255.255.0) eller et nettverk/CIDR (f. eks. 1.2.3.4/24). Dette alternativet kan angis flere ganger</translation>\n@@ -3211,6 +3191,10 @@\n         <source>Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)</source>\n         <translation>Utf\u00f8r kommando n\u00e5r et relevant varsel er mottatt eller vi ser en veldig lang gaffel (%s i kommando er erstattet med melding)</translation>\n     </message>\n+    <message>\n+        <source>Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)</source>\n+        <translation>Gebyrer (i %s/kB) mindre enn dette anses som null gebyr for videresending, graving og laging av transaksjoner (standardverdi: %s)</translation>\n+    </message>\n     <message>\n         <source>If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)</source>\n         <translation>Hvis paytxfee ikke er angitt, inkluderer da nok i gebyr til at transaksjoner gjennomsnittligt bekreftes innen n blokker (standardverdi: %u)</translation>\n@@ -3267,6 +3251,10 @@\n         <source>Activating best chain...</source>\n         <translation>Aktiverer beste kjede...</translation>\n     </message>\n+    <message>\n+        <source>Attempt to recover private keys from a corrupt wallet.dat on startup</source>\n+        <translation>Fors\u00f8k \u00e5 berge private n\u00f8kler fra en korrupt wallet.dat ved oppstart</translation>\n+    </message>\n     <message>\n         <source>Cannot resolve -whitebind address: '%s'</source>\n         <translation>Kan ikke l\u00f8se -whitebind-adresse: '%s'</translation>\n@@ -3291,6 +3279,10 @@\n         <source>Error reading from database, shutting down.</source>\n         <translation>Feil ved lesing fra database, stenger ned.</translation>\n     </message>\n+    <message>\n+        <source>Imports blocks from external blk000??.dat file on startup</source>\n+        <translation>Importerer blokker fra ekstern fil blk000??.dat ved oppstart</translation>\n+    </message>\n     <message>\n         <source>Information</source>\n         <translation>Informasjon</translation>\n@@ -3347,6 +3339,10 @@\n         <source>Reducing -maxconnections from %d to %d, because of system limitations.</source>\n         <translation>Reduserer -maxconnections fra %d til %d, pga. systembegrensninger.</translation>\n     </message>\n+    <message>\n+        <source>Rescan the block chain for missing wallet transactions on startup</source>\n+        <translation>Se gjennom blokkjeden etter manglende lommeboktransaksjoner ved oppstart</translation>\n+    </message>\n     <message>\n         <source>Send trace/debug info to console instead of debug.log file</source>\n         <translation>Send spor-/feils\u00f8kingsinformasjon til konsollen istedenfor filen debug.log</translation>\n@@ -3415,6 +3411,10 @@\n         <source>Unable to bind to %s on this computer (bind returned error %s)</source>\n         <translation>Kan ikke binde til %s p\u00e5 denne datamaskinen (binding returnerte feilen %s)</translation>\n     </message>\n+    <message>\n+        <source>Upgrade wallet to latest format on startup</source>\n+        <translation>Oppgrader lommebok til nyeste format ved oppstart</translation>\n+    </message>\n     <message>\n         <source>Username for JSON-RPC connections</source>\n         <translation>Brukernavn for JSON-RPC forbindelser</translation>\n@@ -3435,10 +3435,6 @@\n         <source>ZeroMQ notification options:</source>\n         <translation>Valg for ZeroMQ-meldinger:</translation>\n     </message>\n-    <message>\n-        <source>on startup</source>\n-        <translation>ved oppstart</translation>\n-    </message>\n     <message>\n         <source>wallet.dat corrupt, salvage failed</source>\n         <translation>wallet.dat korrupt, bergning feilet</translation>\n@@ -3451,14 +3447,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Utf\u00f8r kommando n\u00e5r beste blokk endrer seg (%s i kommandoen erstattes med blokkens hash)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>Oppgrader lommebok til nyeste format</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>Se gjennom blokkjeden etter manglende lommeboktransaksjoner</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>Denne hjelpemeldingen</translation>"
      },
      {
        "sha": "c307f0ab6a61e0ffb30c0a8a3f7e88f5207d610f",
        "filename": "src/qt/locale/bitcoin_nl.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 32,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_nl.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_nl.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_nl.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1489,14 +1489,6 @@\n         <source>Last Receive</source>\n         <translation>Laatst ontvangen</translation>\n     </message>\n-    <message>\n-        <source>Bytes Sent</source>\n-        <translation>Bytes Verzonden</translation>\n-    </message>\n-    <message>\n-        <source>Bytes Received</source>\n-        <translation>Bytes Ontvangen</translation>\n-    </message>\n     <message>\n         <source>Ping Time</source>\n         <translation>Ping Tijd</translation>\n@@ -1993,10 +1985,6 @@\n         <source>Payment request expired.</source>\n         <translation>Betalingsverzoek verlopen.</translation>\n     </message>\n-    <message>\n-        <source>Pay only the minimum fee of %1</source>\n-        <translation>Betaal alleen de minimale transactiekosten van %1</translation>\n-    </message>\n     <message>\n         <source>The recipient address is not valid. Please recheck.</source>\n         <translation>Het adres van de ontvanger is niet geldig. Gelieve opnieuw te controleren..</translation>\n@@ -2839,10 +2827,6 @@\n         <source>&lt;category&gt; can be:</source>\n         <translation>&lt;category&gt; kan zijn:</translation>\n     </message>\n-    <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>Poog de geheime sleutels uit een corrupt wallet.dat bestand terug te halen</translation>\n-    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>Blokcreatie-opties:</translation>\n@@ -2955,10 +2939,6 @@\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>Om -txindex te kunnen veranderen dient u de database opnieuw te bouwen met gebruik van -reindex.</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>Importeert blokken van extern blk000??.dat bestand</translation>\n-    </message>\n     <message>\n         <source>Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times</source>\n         <translation>Sta JSON-RPC verbindingen toe vanuit een gespecificeerde bron. Geldig voor &lt;ip&gt; zijn een enkel IP (bijv. 1.2.3.4), een netwerk/netmask (bijv. 1.2.3.4/255.255.255.0) of een netwerk/CIDR (bijv. 1.2.3.4/24). Deze optie kan meerdere keren gespecificeerd worden.</translation>\n@@ -3188,10 +3168,6 @@\n         <source>Zapping all transactions from wallet...</source>\n         <translation>Bezig met het zappen van alle transacties van de portemonnee...</translation>\n     </message>\n-    <message>\n-        <source>on startup</source>\n-        <translation>bij opstarten</translation>\n-    </message>\n     <message>\n         <source>wallet.dat corrupt, salvage failed</source>\n         <translation>wallet.dat corrupt, veiligstellen mislukt</translation>\n@@ -3204,14 +3180,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Voer commando uit zodra het beste blok verandert (%s in cmd wordt vervangen door blockhash)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>Vernieuw portemonnee naar nieuwste versie</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>Doorzoek de blokketen op ontbrekende portemonnee-transacties</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>Dit helpbericht</translation>"
      },
      {
        "sha": "893ae43c554495784b66f5d6b54d37ff68dd32d6",
        "filename": "src/qt/locale/bitcoin_pam.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_pam.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_pam.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pam.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1405,14 +1405,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>I-execute ing command istung mialilan ya ing best block (%s in cmd is replaced by block hash)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>I-upgrade ing wallet king pekabayung porma</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>I-scan pasibayu ing block chain para kareng mauaualang transaksion</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>Ining saup a mensayi</translation>"
      },
      {
        "sha": "228e02a5ee7193435520eb75144008035c830572",
        "filename": "src/qt/locale/bitcoin_pl.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 36,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_pl.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_pl.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pl.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1489,14 +1489,6 @@\n         <source>Last Receive</source>\n         <translation>Ostatnio odebrano</translation>\n     </message>\n-    <message>\n-        <source>Bytes Sent</source>\n-        <translation>Bajt\u00f3w wys\u0142ano</translation>\n-    </message>\n-    <message>\n-        <source>Bytes Received</source>\n-        <translation>Bajt\u00f3w pobrano</translation>\n-    </message>\n     <message>\n         <source>Ping Time</source>\n         <translation>Czas odpowiedzi</translation>\n@@ -1993,14 +1985,6 @@\n         <source>Estimated to begin confirmation within %n block(s).</source>\n         <translation><numerusform>Przybli\u017cony czas zatwierdzenia: %n blok\u00f3w.</numerusform><numerusform>Przybli\u017cony czas zatwierdzenia: %n blok\u00f3w.</numerusform><numerusform>Przybli\u017cony czas zatwierdzenia: %n blok\u00f3w.</numerusform></translation>\n     </message>\n-    <message>\n-        <source>Pay only the minimum fee of %1</source>\n-        <translation>P\u0142ac tylko minimalna op\u0142at\u0119 %1</translation>\n-    </message>\n-    <message>\n-        <source>Total Amount %1&lt;span style='font-size:10pt;font-weight:normal;'&gt;&lt;br /&gt;(=%2)&lt;/span&gt;</source>\n-        <translation>Ca\u0142kowita kwota %1&lt;span style='font-size:10pt;font-weight:normal;'&gt;&lt;br /&gt;(=%2)&lt;/span&gt;</translation>\n-    </message>\n     <message>\n         <source>The recipient address is not valid. Please recheck.</source>\n         <translation>Adres odbiorcy jest nieprawid\u0142owy, prosz\u0119 sprawi\u0107 ponownie.</translation>\n@@ -2851,10 +2835,6 @@\n         <source>&lt;category&gt; can be:</source>\n         <translation>&lt;category&gt; mog\u0105 by\u0107:</translation>\n     </message>\n-    <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>Pr\u00f3buj odzyska\u0107 klucze prywatne z uszkodzonego wallet.dat</translation>\n-    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>Opcje tworzenia bloku:</translation>\n@@ -2975,10 +2955,6 @@\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>Musisz przebudowa\u0107 baz\u0119 u\u017cywaj\u0105c parametru -reindex aby zmieni\u0107 -txindex</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>Importuj bloki z zewn\u0119trznego pliku blk000??.dat</translation>\n-    </message>\n     <message>\n         <source>Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times</source>\n         <translation>Pozw\u00f3l na po\u0142\u0105czenia JSON-RPC z podanego \u017ar\u00f3d\u0142a. Jako &lt;ip&gt; prawid\u0142owe jest pojedyncze IP (np. 1.2.3.4), podsie\u0107/maska (np. 1.2.3.4/255.255.255.0) lub sie\u0107/CIDR (np. 1.2.3.4/24). Opcja ta mo\u017ce by\u0107 u\u017cyta wiele razy.</translation>\n@@ -3215,10 +3191,6 @@\n         <source>Zapping all transactions from wallet...</source>\n         <translation>Usuwam wszystkie transakcje z portfela...</translation>\n     </message>\n-    <message>\n-        <source>on startup</source>\n-        <translation>podczas uruchamiania</translation>\n-    </message>\n     <message>\n         <source>wallet.dat corrupt, salvage failed</source>\n         <translation>wallet.dat uszkodzony, odtworzenie si\u0119 nie powiod\u0142o</translation>\n@@ -3231,14 +3203,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Wykonaj polecenie kiedy najlepszy blok ulegnie zmianie (%s w komendzie zastanie zast\u0105pione przez hash bloku)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>Zaktualizuj portfel do najnowszego formatu.</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>Przeskanuj \u0142a\u0144cuch blok\u00f3w w poszukiwaniu zaginionych transakcji portfela</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>Ta wiadomo\u015b\u0107 pomocy</translation>"
      },
      {
        "sha": "4863591ac466448cb1823b3c35551b31ffb021dd",
        "filename": "src/qt/locale/bitcoin_pt_BR.ts",
        "status": "modified",
        "additions": 178,
        "deletions": 34,
        "changes": 212,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_pt_BR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_pt_BR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pt_BR.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -222,7 +222,15 @@\n </context>\n <context>\n     <name>BanTableModel</name>\n-    </context>\n+    <message>\n+        <source>IP/Netmask</source>\n+        <translation>IP/M\u00e1scara</translation>\n+    </message>\n+    <message>\n+        <source>Banned Until</source>\n+        <translation>Banido at\u00e9</translation>\n+    </message>\n+</context>\n <context>\n     <name>BitcoinGUI</name>\n     <message>\n@@ -379,7 +387,7 @@\n     </message>\n     <message>\n         <source>&amp;Settings</source>\n-        <translation>&amp;Configura\u00e7\u00f5es</translation>\n+        <translation>&amp;defini\u00e7\u00f5es</translation>\n     </message>\n     <message>\n         <source>&amp;Help</source>\n@@ -1067,6 +1075,30 @@\n         <source>Port of the proxy (e.g. 9050)</source>\n         <translation>Porta do servi\u00e7o de proxy (ex. 9050)</translation>\n     </message>\n+    <message>\n+        <source>Used for reaching peers via:</source>\n+        <translation>Usado para alcan\u00e7ar participantes via:</translation>\n+    </message>\n+    <message>\n+        <source>IPv4</source>\n+        <translation>IPv4</translation>\n+    </message>\n+    <message>\n+        <source>IPv6</source>\n+        <translation>IPv6</translation>\n+    </message>\n+    <message>\n+        <source>Tor</source>\n+        <translation>Tor</translation>\n+    </message>\n+    <message>\n+        <source>Connect to the Bitcoin network through a separate SOCKS5 proxy for Tor hidden services.</source>\n+        <translation>Conecte-se \u00e0 rede Bitcoin atrav\u00e9s de um proxy SOCKS5 separado para utilizar servi\u00e7os ocultos Tor.</translation>\n+    </message>\n+    <message>\n+        <source>Use separate SOCKS5 proxy to reach peers via Tor hidden services:</source>\n+        <translation>Use um proxy SOCKS5 separado para alcan\u00e7ar participantes da rede via servi\u00e7os ocultos Tor:</translation>\n+    </message>\n     <message>\n         <source>&amp;Window</source>\n         <translation>&amp;Janela</translation>\n@@ -1453,10 +1485,18 @@\n         <source>&amp;Peers</source>\n         <translation>&amp;Pares</translation>\n     </message>\n+    <message>\n+        <source>Banned peers</source>\n+        <translation>N\u00f3s banidos</translation>\n+    </message>\n     <message>\n         <source>Select a peer to view detailed information.</source>\n         <translation>Selecione um cliente para ver informa\u00e7\u00f5es detalhadas.</translation>\n     </message>\n+    <message>\n+        <source>Whitelisted</source>\n+        <translation>Lista branca</translation>\n+    </message>\n     <message>\n         <source>Direction</source>\n         <translation>Dire\u00e7\u00e3o</translation>\n@@ -1465,6 +1505,18 @@\n         <source>Version</source>\n         <translation>Vers\u00e3o</translation>\n     </message>\n+    <message>\n+        <source>Starting Block</source>\n+        <translation>Bloco inicial</translation>\n+    </message>\n+    <message>\n+        <source>Synced Headers</source>\n+        <translation>Cabe\u00e7alhos Sincronizados</translation>\n+    </message>\n+    <message>\n+        <source>Synced Blocks</source>\n+        <translation>Blocos Sincronizados</translation>\n+    </message>\n     <message>\n         <source>User Agent</source>\n         <translation>User Agent</translation>\n@@ -1489,18 +1541,14 @@\n         <source>Last Receive</source>\n         <translation>Ultimo Recebido</translation>\n     </message>\n-    <message>\n-        <source>Bytes Sent</source>\n-        <translation>Bytes Enviados</translation>\n-    </message>\n-    <message>\n-        <source>Bytes Received</source>\n-        <translation>Bytes recebidos</translation>\n-    </message>\n     <message>\n         <source>Ping Time</source>\n         <translation>Ping</translation>\n     </message>\n+    <message>\n+        <source>The duration of a currently outstanding ping.</source>\n+        <translation>A dura\u00e7\u00e3o de um ping excepcional no momento.</translation>\n+    </message>\n     <message>\n         <source>Last block time</source>\n         <translation>Hor\u00e1rio do \u00faltimo bloco</translation>\n@@ -1545,6 +1593,34 @@\n         <source>Clear console</source>\n         <translation>Limpar console</translation>\n     </message>\n+    <message>\n+        <source>&amp;Disconnect Node</source>\n+        <translation>&amp;Desconectar N\u00f3</translation>\n+    </message>\n+    <message>\n+        <source>Ban Node for</source>\n+        <translation>Banir n\u00f3 por</translation>\n+    </message>\n+    <message>\n+        <source>1 &amp;hour</source>\n+        <translation>1 &amp;hora</translation>\n+    </message>\n+    <message>\n+        <source>1 &amp;day</source>\n+        <translation>1 &amp;dia</translation>\n+    </message>\n+    <message>\n+        <source>1 &amp;week</source>\n+        <translation>1 &amp;semana</translation>\n+    </message>\n+    <message>\n+        <source>1 &amp;year</source>\n+        <translation>1 &amp;ano</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Unban Node</source>\n+        <translation>&amp;Desbanir n\u00f3</translation>\n+    </message>\n     <message>\n         <source>Welcome to the Bitcoin Core RPC console.</source>\n         <translation>Bem vindo ao console de RPC do Bitcoin.</translation>\n@@ -1573,6 +1649,10 @@\n         <source>%1 GB</source>\n         <translation>%1 GB</translation>\n     </message>\n+    <message>\n+        <source>(node id: %1)</source>\n+        <translation>(id do n\u00f3: %1)</translation>\n+    </message>\n     <message>\n         <source>via %1</source>\n         <translation>por %1</translation>\n@@ -1965,6 +2045,10 @@\n         <source>Copy change</source>\n         <translation>Copia altera\u00e7\u00e3o</translation>\n     </message>\n+    <message>\n+        <source>Total Amount %1</source>\n+        <translation>Quantia Total %1</translation>\n+    </message>\n     <message>\n         <source>or</source>\n         <translation>ou</translation>\n@@ -1997,14 +2081,14 @@\n         <source>Payment request expired.</source>\n         <translation>Pedido de pagamento expirado.</translation>\n     </message>\n+    <message>\n+        <source>Pay only the required fee of %1</source>\n+        <translation>Pagar somente a taxa requerida de %1</translation>\n+    </message>\n     <message numerus=\"yes\">\n         <source>Estimated to begin confirmation within %n block(s).</source>\n         <translation><numerusform>Confirma\u00e7\u00e3o estimada em %n bloco.</numerusform><numerusform>Confirma\u00e7\u00e3o estimada em %n blocos.</numerusform></translation>\n     </message>\n-    <message>\n-        <source>Pay only the minimum fee of %1</source>\n-        <translation>Pagar somente a taxa m\u00ednima de %1</translation>\n-    </message>\n     <message>\n         <source>The recipient address is not valid. Please recheck.</source>\n         <translation>O endere\u00e7o do destinat\u00e1rio \u00e9 inv\u00e1lido. Favor confirmar.</translation>\n@@ -2779,6 +2863,18 @@\n         <source>Accept command line and JSON-RPC commands</source>\n         <translation>Aceitar linha de comando e comandos JSON-RPC</translation>\n     </message>\n+    <message>\n+        <source>If &lt;category&gt; is not supplied or if &lt;category&gt; = 1, output all debugging information.</source>\n+        <translation>Se &lt;category&gt; n\u00e3o for suprida ou se &lt;category&gt; = 1, mostrar toda informa\u00e7\u00e3o de depura\u00e7\u00e3o.</translation>\n+    </message>\n+    <message>\n+        <source>Error: A fatal internal error occurred, see debug.log for details</source>\n+        <translation>Erro: Um erro interno fatal ocorreu, veja debug.log para detalhes</translation>\n+    </message>\n+    <message>\n+        <source>Fee (in %s/kB) to add to transactions you send (default: %s)</source>\n+        <translation>Taxa (em %s/kB) a ser adicionada \u00e0s transa\u00e7\u00f5es que voc\u00ea mandar (padr\u00e3o: %s)</translation>\n+    </message>\n     <message>\n         <source>Pruning blockstore...</source>\n         <translation>Prunando os blocos existentes...</translation>\n@@ -2787,6 +2883,10 @@\n         <source>Run in the background as a daemon and accept commands</source>\n         <translation>Rodar em segundo plano como servi\u00e7o e aceitar comandos</translation>\n     </message>\n+    <message>\n+        <source>Unable to start HTTP server. See debug log for details.</source>\n+        <translation>N\u00e3o foi poss\u00edvel iniciar o servidor HTTP. Veja o log para detaihes.</translation>\n+    </message>\n     <message>\n         <source>Accept connections from outside (default: 1 if no -proxy or -connect)</source>\n         <translation>Aceitar conex\u00f5es externas (padr\u00e3o: 1 se op\u00e7\u00f5es -proxy ou -connect n\u00e3o estiverem presentes)</translation>\n@@ -2811,6 +2911,10 @@\n         <source>Set the number of script verification threads (%u to %d, 0 = auto, &lt;0 = leave that many cores free, default: %d)</source>\n         <translation>Define o n\u00famero de threads de verifica\u00e7\u00e3o de script (%u a %d, 0 = autom\u00e1tico, &lt;0 = n\u00famero de cores deixados livres, padr\u00e3o: %d)</translation>\n     </message>\n+    <message>\n+        <source>The block database contains a block which appears to be from the future. This may be due to your computer's date and time being set incorrectly. Only rebuild the block database if you are sure that your computer's date and time are correct</source>\n+        <translation>O banco de dados de blocos cont\u00e9m um bloco que parece ser do futuro. Isso pode ser devido \u00e0 data e hora do seu computador estarem configuradas incorretamente. Apenas reconstrua o banco de dados de blocos se voc\u00ea estiver certo de que a data e hora de seu computador est\u00e3o corretas.</translation>\n+    </message>\n     <message>\n         <source>This is a pre-release test build - use at your own risk - do not use for mining or merchant applications</source>\n         <translation>Este pode ser um build de teste pr\u00e9-lan\u00e7amento - use por sua conta e risco - n\u00e3o use para minera\u00e7\u00e3o ou aplica\u00e7\u00f5es de com\u00e9rcio.</translation>\n@@ -2819,6 +2923,14 @@\n         <source>Unable to bind to %s on this computer. Bitcoin Core is probably already running.</source>\n         <translation>Imposs\u00edvel ouvir em %s neste computador. Provavelmente o Bitcoin j\u00e1 est\u00e1 sendo executado.</translation>\n     </message>\n+    <message>\n+        <source>Use UPnP to map the listening port (default: 1 when listening and no -proxy)</source>\n+        <translation>Use UPnP para mapear a porta escutada (padr\u00e3o: 1 quando escutando e sem -proxy)</translation>\n+    </message>\n+    <message>\n+        <source>WARNING: abnormally high number of blocks generated, %d blocks received in the last %d hours (%d expected)</source>\n+        <translation>AVISO: n\u00fameros estranhamente altos de blocos gerados, %d blocos recebidos nas \u00faltimas %d horas (%d esperados)</translation>\n+    </message>\n     <message>\n         <source>WARNING: check your network connection, %d blocks received in the last %d hours (%d expected)</source>\n         <translation>ATEN\u00c7\u00c3O: verifique sua conex\u00e3o %d blocos recebidos nas \u00faltimas %d horas (%d tempo estimado)</translation>\n@@ -2844,12 +2956,12 @@\n         <translation>(padr\u00e3o: 1)</translation>\n     </message>\n     <message>\n-        <source>&lt;category&gt; can be:</source>\n-        <translation>&lt;category&gt; pode ser:</translation>\n+        <source>-maxmempool must be at least %d MB</source>\n+        <translation>-maxmempool deve ser pelo menos %d MB</translation>\n     </message>\n     <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>Tentar recuperar chaves privadas de um arquivo wallet.dat corrompido</translation>\n+        <source>&lt;category&gt; can be:</source>\n+        <translation>&lt;category&gt; pode ser:</translation>\n     </message>\n     <message>\n         <source>Block creation options:</source>\n@@ -2915,6 +3027,10 @@\n         <source>Invalid -onion address: '%s'</source>\n         <translation>Endere\u00e7o -onion inv\u00e1lido: '%s'</translation>\n     </message>\n+    <message>\n+        <source>Keep the transaction memory pool below &lt;n&gt; megabytes (default: %u)</source>\n+        <translation>Mantenha a mempool de transa\u00e7\u00f5es abaixo de &lt;n&gt; megabytes (padr\u00e3o: %u)</translation>\n+    </message>\n     <message>\n         <source>Not enough file descriptors available.</source>\n         <translation>Decriptadores de arquivos dispon\u00edveis insuficientes.</translation>\n@@ -2943,10 +3059,26 @@\n         <source>Specify wallet file (within data directory)</source>\n         <translation>Especifique o arquivo da carteira (dentro do diret\u00f3rio de dados)</translation>\n     </message>\n+    <message>\n+        <source>Unsupported argument -benchmark ignored, use -debug=bench.</source>\n+        <translation>Argumento n\u00e3o suportado -benchmark ignorado, use -debug=bench.</translation>\n+    </message>\n+    <message>\n+        <source>Unsupported argument -debugnet ignored, use -debug=net.</source>\n+        <translation>Argumento n\u00e3o suportado -debugnet ignorado, use -debug=net</translation>\n+    </message>\n+    <message>\n+        <source>Unsupported argument -tor found, use -onion.</source>\n+        <translation>Argumento n\u00e3o suportador encontrado: -tor. Use -onion.</translation>\n+    </message>\n     <message>\n         <source>Use UPnP to map the listening port (default: %u)</source>\n         <translation>Use UPnP para mapear a porta de entrada (padr\u00e3o: %u)</translation>\n     </message>\n+    <message>\n+        <source>User Agent comment (%s) contains unsafe characters.</source>\n+        <translation>Coment\u00e1rio do Agente de Usu\u00e1rio (%s) cont\u00e9m caracteres inseguros.</translation>\n+    </message>\n     <message>\n         <source>Verifying blocks...</source>\n         <translation>Verificando blocos...</translation>\n@@ -2971,10 +3103,6 @@\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>Voc\u00ea precisa reconstruir o banco de dados utilizando -reindex</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>Importar blocos de um arquivo externo blk000??.dat</translation>\n-    </message>\n     <message>\n         <source>Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times</source>\n         <translation>Permitir conex\u00f5es JSON-RPC de uma fonte espec\u00edfica. V\u00e1lido para um \u00fanico ip (ex. 1.2.3.4), at\u00e9 uma rede/m\u00e1scara (ex. 1.2.3.4/255.255.255.0) ou uma rede/CIDR (ex. 1.2.3.4/24). Esta op\u00e7\u00e3o pode ser usada m\u00faltiplas vezes</translation>\n@@ -2987,6 +3115,10 @@\n         <source>Cannot obtain a lock on data directory %s. Bitcoin Core is probably already running.</source>\n         <translation>N\u00e3o foi poss\u00edvel obter acesso exclusivo ao diret\u00f3rio de dados %s. Provavelmente Bitcoin j\u00e1 est\u00e1 sendo executado.</translation>\n     </message>\n+    <message>\n+        <source>Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)</source>\n+        <translation>Criar novos arquivos com permiss\u00f5es padr\u00e3o do sistema, em vez de umask 077 (apenas efetivo com funcionalidade de carteira desabilitada)</translation>\n+    </message>\n     <message>\n         <source>Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)</source>\n         <translation>Descobrir o pr\u00f3prio IP (padr\u00e3o: 1 enquanto aguardando conex\u00f5es e sem -externalip ou -proxy)</translation>\n@@ -2999,6 +3131,10 @@\n         <source>Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)</source>\n         <translation>Executa um comando quando um alerta relevante \u00e9 recebido ou vemos uma longa segrega\u00e7\u00e3o (%s em cmd \u00e9 substitu\u00eddo pela mensagem)</translation>\n     </message>\n+    <message>\n+        <source>Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect)</source>\n+        <translation>Buscar por endere\u00e7os de peers via busca DNS, se estiver baixo em endere\u00e7os (padr\u00e3o: 1 a n\u00e3o ser que -connect)</translation>\n+    </message>\n     <message>\n         <source>Set maximum size of high-priority/low-fee transactions in bytes (default: %d)</source>\n         <translation>Define o tamanho m\u00e1ximo de alta-prioridade por taxa baixa nas transa\u00e7\u00f5es em bytes (padr\u00e3o: %d)</translation>\n@@ -3167,10 +3303,6 @@\n         <source>Zapping all transactions from wallet...</source>\n         <translation>Aniquilando todas as transa\u00e7\u00f5es da carteira...</translation>\n     </message>\n-    <message>\n-        <source>on startup</source>\n-        <translation>ao iniciar</translation>\n-    </message>\n     <message>\n         <source>wallet.dat corrupt, salvage failed</source>\n         <translation>wallet.dat corrompido, recupera\u00e7\u00e3o falhou</translation>\n@@ -3183,14 +3315,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Executa um comando quando o melhor bloco mudar (%s no comando ser\u00e1 substitu\u00eddo pelo hash do bloco)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>Atualizar carteira para o formato mais recente</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>Re-escanear blocos procurando por transa\u00e7\u00f5es perdidas da carteira</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>Exibe esta mensagem de ajuda</translation>\n@@ -3211,6 +3335,10 @@\n         <source>(default: %s)</source>\n         <translation>(padr\u00e3o: %s)</translation>\n     </message>\n+    <message>\n+        <source>Always query for peer addresses via DNS lookup (default: %u)</source>\n+        <translation>Sempre pergunte pelo endere\u00e7o de peer via pesquisa DNS (padr\u00e3o: %u)</translation>\n+    </message>\n     <message>\n         <source>Error loading wallet.dat</source>\n         <translation>Erro ao carregar wallet.dat</translation>\n@@ -3231,10 +3359,22 @@\n         <source>Invalid -proxy address: '%s'</source>\n         <translation>Endere\u00e7o -proxy inv\u00e1lido: '%s'</translation>\n     </message>\n+    <message>\n+        <source>Listen for JSON-RPC connections on &lt;port&gt; (default: %u or testnet: %u)</source>\n+        <translation>Escutar por conex\u00f5es JSON-RPC na porta &lt;port&gt; (padr\u00e3o: %u ou testnet: %u)</translation>\n+    </message>\n     <message>\n         <source>Listen for connections on &lt;port&gt; (default: %u or testnet: %u)</source>\n         <translation>Aguardar por conex\u00f5es na porta &lt;port&gt; (padr\u00e3o: %u ou testnet: %u)</translation>\n     </message>\n+    <message>\n+        <source>Maintain at most &lt;n&gt; connections to peers (default: %u)</source>\n+        <translation>Manter, no m\u00e1ximo, &lt;n&gt; conex\u00f5es com peers (padr\u00e3o: %u)</translation>\n+    </message>\n+    <message>\n+        <source>Make the wallet broadcast transactions</source>\n+        <translation>Fazer a carteira transmitir transa\u00e7\u00f5es</translation>\n+    </message>\n     <message>\n         <source>Prepend debug output with timestamp (default: %u)</source>\n         <translation>Adiciona timestamp como prefixo no debug (default: %u)</translation>\n@@ -3263,6 +3403,10 @@\n         <source>Specify pid file (default: %s)</source>\n         <translation>Especificar aqrquivo pid (default: %s)</translation>\n     </message>\n+    <message>\n+        <source>Spend unconfirmed change when sending transactions (default: %u)</source>\n+        <translation>Gastar troco n\u00e3o confirmado quando enviar transa\u00e7\u00f5es (padr\u00e3o: %u)</translation>\n+    </message>\n     <message>\n         <source>Unknown network specified in -onlynet: '%s'</source>\n         <translation>Rede desconhecida especificada em -onlynet: '%s'</translation>"
      },
      {
        "sha": "45490663637bbec7074ae31786663b0aad2073bd",
        "filename": "src/qt/locale/bitcoin_pt_PT.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 28,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_pt_PT.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_pt_PT.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pt_PT.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1490,14 +1490,6 @@\n         <source>Last Receive</source>\n         <translation>Ultimo Recebimento</translation>\n     </message>\n-    <message>\n-        <source>Bytes Sent</source>\n-        <translation>Bytes Enviados</translation>\n-    </message>\n-    <message>\n-        <source>Bytes Received</source>\n-        <translation>Bytes Recebidos</translation>\n-    </message>\n     <message>\n         <source>Ping Time</source>\n         <translation>Tempo de Lat\u00eancia</translation>\n@@ -1986,10 +1978,6 @@\n         <source>Payment request expired.</source>\n         <translation>Pedido de pagamento expirou.</translation>\n     </message>\n-    <message>\n-        <source>Pay only the minimum fee of %1</source>\n-        <translation>Pagar somente a taxa minima de %1</translation>\n-    </message>\n     <message>\n         <source>Warning: Invalid Bitcoin address</source>\n         <translation>Aviso: Endere\u00e7o Bitcoin inv\u00e1lido</translation>\n@@ -2792,10 +2780,6 @@\n         <source>&lt;category&gt; can be:</source>\n         <translation>&lt;categoria&gt; pode ser:</translation>\n     </message>\n-    <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>Tentar recuperar chaves privadas de um wallet.dat corrupto</translation>\n-    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>Op\u00e7\u00f5es de cria\u00e7\u00e3o de bloco:</translation>\n@@ -2908,10 +2892,6 @@\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>\u00c9 necess\u00e1rio reconstruir as bases de dados usando -reindex para mudar o -txindex</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>Importar blocos de um ficheiro blk000??.dat externo</translation>\n-    </message>\n     <message>\n         <source>Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times</source>\n         <translation>Permitir conex\u00e7\u00f5es JSON-RPC de fontes especificas. Valido para &lt;ip&gt; um unico IP (ex. 1.2.3.4), uma rede/netmask (ex. 1.2.3.4/255.255.255.0) ou uma rede/CIDR (ex. 1.2.3.4/24). Esta op\u00e7\u00e3o pode ser especificada varias vezes</translation>\n@@ -3032,14 +3012,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Executar comando quando o melhor bloco mudar (no comando, %s \u00e9 substitu\u00eddo pela hash do bloco)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>Atualize a carteira para o formato mais recente</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>Procurar transa\u00e7\u00f5es em falta na cadeia de blocos</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>Esta mensagem de ajuda</translation>"
      },
      {
        "sha": "72ab2c5bdb8d39c40006364ab2140463297c670c",
        "filename": "src/qt/locale/bitcoin_ro_RO.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 32,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_ro_RO.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_ro_RO.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ro_RO.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1465,14 +1465,6 @@\n         <source>Last Receive</source>\n         <translation>Ultima primire</translation>\n     </message>\n-    <message>\n-        <source>Bytes Sent</source>\n-        <translation>Octe\u0163i trimi\u015fi</translation>\n-    </message>\n-    <message>\n-        <source>Bytes Received</source>\n-        <translation>Octe\u0163i primi\u0163i</translation>\n-    </message>\n     <message>\n         <source>Ping Time</source>\n         <translation>Timp ping</translation>\n@@ -1941,10 +1933,6 @@\n         <source>Payment request expired.</source>\n         <translation>Cererea de plat\u0103 a expirat.</translation>\n     </message>\n-    <message>\n-        <source>Pay only the minimum fee of %1</source>\n-        <translation>Pl\u0103te\u015fte doar taxa minim\u0103 de %1</translation>\n-    </message>\n     <message>\n         <source>The recipient address is not valid. Please recheck.</source>\n         <translation>Adresa destinatarului nu este valid\u0103, v\u0103 rug\u0103m s\u0103 o verifica\u0163i.</translation>\n@@ -2735,10 +2723,6 @@\n         <source>&lt;category&gt; can be:</source>\n         <translation>&lt;category&gt; poate fi:</translation>\n     </message>\n-    <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>\u00cencercare de recuperare a cheilor private dintr-un wallet.dat corupt</translation>\n-    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>Op\u0163iuni creare bloc:</translation>\n@@ -2847,10 +2831,6 @@\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>Trebuie s\u0103 reconstrui\u0163i baza de date folosind -reindex pentru a schimba -txindex</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>Import\u0103 blocuri dintr-un fi\u015fier extern blk000??.dat</translation>\n-    </message>\n     <message>\n         <source>Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times</source>\n         <translation>Permite conexiunile JSON-RPC din sursa specificat\u0103. Valid pentru &lt;ip&gt; s\u00eent IP singulare (ex. 1.2.3.4), o re\u0163ea/masc\u0103-re\u0163ea (ex. 1.2.3.4/255.255.255.0) sau o re\u0163ea/CIDR (ex. 1.2.3.4/24). Aceast\u0103 op\u0163iune poate fi specificat\u0103 de mai multe ori</translation>\n@@ -3003,10 +2983,6 @@\n         <source>Zapping all transactions from wallet...</source>\n         <translation>\u015eterge toate tranzac\u0163iile din portofel...</translation>\n     </message>\n-    <message>\n-        <source>on startup</source>\n-        <translation>la pornire</translation>\n-    </message>\n     <message>\n         <source>wallet.dat corrupt, salvage failed</source>\n         <translation>wallet.dat corupt, salvare nereu\u015fit\u0103</translation>\n@@ -3019,14 +2995,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Execut\u0103 comanda c\u00eend cel mai bun bloc se modific\u0103 (%s \u00een cmd este \u00eenlocuit cu hash-ul blocului)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>Actualizeaz\u0103 portofelul la ultimul format</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>Rescaneaz\u0103 lan\u0163ul de bloc pentru tranzac\u0163iile portofel lips\u0103</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>Acest mesaj de ajutor</translation>"
      },
      {
        "sha": "b69a3bda54c5eb989db7f365ec0141cb1206e5c3",
        "filename": "src/qt/locale/bitcoin_ru.ts",
        "status": "modified",
        "additions": 4,
        "deletions": 32,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_ru.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_ru.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ru.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1043,6 +1043,10 @@\n         <source>Port of the proxy (e.g. 9050)</source>\n         <translation>\u041f\u043e\u0440\u0442 \u043f\u0440\u043e\u043a\u0441\u0438-\u0441\u0435\u0440\u0432\u0435\u0440\u0430 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, 9050)</translation>\n     </message>\n+    <message>\n+        <source>Tor</source>\n+        <translation>Tor</translation>\n+    </message>\n     <message>\n         <source>&amp;Window</source>\n         <translation>&amp;\u041e\u043a\u043d\u043e</translation>\n@@ -1465,14 +1469,6 @@\n         <source>Last Receive</source>\n         <translation>\u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0440\u0430\u0437 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043e</translation>\n     </message>\n-    <message>\n-        <source>Bytes Sent</source>\n-        <translation>\u0411\u0430\u0439\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043e</translation>\n-    </message>\n-    <message>\n-        <source>Bytes Received</source>\n-        <translation>\u0411\u0430\u0439\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043e</translation>\n-    </message>\n     <message>\n         <source>Ping Time</source>\n         <translation>\u0412\u0440\u0435\u043c\u044f \u0437\u0430\u0434\u0435\u0440\u0436\u043a\u0438</translation>\n@@ -1977,10 +1973,6 @@\n         <source>Payment request expired.</source>\n         <translation>\u0417\u0430\u043f\u0440\u043e\u0441 \u043f\u043b\u0430\u0442\u0435\u0436\u0430 \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u0435\u043d.</translation>\n     </message>\n-    <message>\n-        <source>Total Amount %1&lt;span style='font-size:10pt;font-weight:normal;'&gt;&lt;br /&gt;(=%2)&lt;/span&gt;</source>\n-        <translation>\u0412\u0441\u0435\u0433\u043e %1&lt;span style='font-size:10pt;font-weight:normal;'&gt;&lt;br /&gt;(=%2)&lt;/span&gt;</translation>\n-    </message>\n     <message>\n         <source>The recipient address is not valid. Please recheck.</source>\n         <translation>\u0410\u0434\u0440\u0435\u0441 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f \u043d\u0435\u0432\u0435\u0440\u043d\u044b\u0439. \u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u043f\u0435\u0440\u0435\u043f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435.</translation>\n@@ -2815,10 +2807,6 @@\n         <source>&lt;category&gt; can be:</source>\n         <translation>&lt;category&gt; \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c:</translation>\n     </message>\n-    <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>\u041f\u043e\u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u0435 \u043a\u043b\u044e\u0447\u0438 \u0438\u0437 \u043f\u043e\u0432\u0440\u0435\u0436\u0434\u0451\u043d\u043d\u043e\u0433\u043e wallet.dat</translation>\n-    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0431\u043b\u043e\u043a\u043e\u0432:</translation>\n@@ -2939,10 +2927,6 @@\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>\u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0435\u0440\u0435\u0441\u043e\u0431\u0440\u0430\u0442\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e -reindex, \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c -txindex</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>\u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0431\u043b\u043e\u043a\u0438 \u0438\u0437 \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u0444\u0430\u0439\u043b\u0430 blk000??.dat</translation>\n-    </message>\n     <message>\n         <source>Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times</source>\n         <translation>\u0420\u0430\u0437\u0440\u0435\u0448\u0438\u0442\u044c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f JSON-RPC \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430. \u0420\u0430\u0437\u0440\u0435\u0448\u0451\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f &lt;ip&gt; \u2014 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 IP (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, 1.2.3.4), \u0441\u0435\u0442\u044c/\u043c\u0430\u0441\u043a\u0430 \u0441\u0435\u0442\u0438 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, 1.2.3.4/255.255.255.0) \u0438\u043b\u0438 \u0441\u0435\u0442\u044c/CIDR (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, 1.2.3.4/24). \u042d\u0442\u0443 \u043e\u043f\u0446\u0438\u044e \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043a\u0440\u0430\u0442\u043d\u043e</translation>\n@@ -3191,10 +3175,6 @@\n         <source>Zapping all transactions from wallet...</source>\n         <translation>\u0421\u0442\u0438\u0440\u0430\u0435\u043c \u0432\u0441\u0435 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u0438\u0437 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430...</translation>\n     </message>\n-    <message>\n-        <source>on startup</source>\n-        <translation>\u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435</translation>\n-    </message>\n     <message>\n         <source>wallet.dat corrupt, salvage failed</source>\n         <translation>wallet.dat \u043f\u043e\u0432\u0440\u0435\u0436\u0434\u0451\u043d, \u0441\u043f\u0430\u0441\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c</translation>\n@@ -3207,14 +3187,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u0443, \u043a\u043e\u0433\u0434\u0430 \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u043e\u0432\u044b\u0439 \u0431\u043b\u043e\u043a (%s \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043d\u0430 \u0445\u044d\u0448 \u0431\u043b\u043e\u043a\u0430)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0431\u0443\u043c\u0430\u0436\u043d\u0438\u043a \u0434\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0444\u043e\u0440\u043c\u0430\u0442\u0430</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>\u041f\u0435\u0440\u0435\u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0446\u0435\u043f\u044c \u0431\u043b\u043e\u043a\u043e\u0432 \u043d\u0430 \u043f\u0440\u0435\u0434\u043c\u0435\u0442 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0432 \u0431\u0443\u043c\u0430\u0436\u043d\u0438\u043a\u0435 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>\u042d\u0442\u0430 \u0441\u043f\u0440\u0430\u0432\u043a\u0430</translation>"
      },
      {
        "sha": "83f5f2c8e7cbb7bf4101ca93fdca1729a0864beb",
        "filename": "src/qt/locale/bitcoin_sk.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 32,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_sk.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_sk.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_sk.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1493,14 +1493,6 @@\n         <source>Last Receive</source>\n         <translation>Posledn\u00e9 prijatie</translation>\n     </message>\n-    <message>\n-        <source>Bytes Sent</source>\n-        <translation>Odoslan\u00fdch bajtov</translation>\n-    </message>\n-    <message>\n-        <source>Bytes Received</source>\n-        <translation>Prijat\u00fdch bajtov</translation>\n-    </message>\n     <message>\n         <source>Ping Time</source>\n         <translation>\u010cas odozvy</translation>\n@@ -1997,10 +1989,6 @@\n         <source>Payment request expired.</source>\n         <translation>Vypr\u0161ala platnos\u0165 po\u017eiadavky na platbu.</translation>\n     </message>\n-    <message>\n-        <source>Pay only the minimum fee of %1</source>\n-        <translation>Zaplati\u0165 minim\u00e1lny poplatok %1</translation>\n-    </message>\n     <message>\n         <source>The recipient address is not valid. Please recheck.</source>\n         <translation>Adresa pr\u00edjemcu je neplatn\u00e1. Pros\u00edm, overte ju.</translation>\n@@ -2817,10 +2805,6 @@ The network does not appear to fully agree! Some miners appear to be experiencin\n         <source>&lt;category&gt; can be:</source>\n         <translation>&lt;category&gt; m\u00f4\u017ee by\u0165:</translation>\n     </message>\n-    <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>Pokus zachr\u00e1ni\u0165 s\u00fakromn\u00e9 k\u013e\u00fa\u010de z po\u0161koden\u00e9ho wallet.dat</translation>\n-    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>Vo\u013eby vytvorenia bloku:</translation>\n@@ -2929,10 +2913,6 @@ The network does not appear to fully agree! Some miners appear to be experiencin\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>Potrebujete prebudova\u0165 datab\u00e1zu pou\u017eit\u00edm -reindex zmeni\u0165 -txindex</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>Importuje bloky z extern\u00e9ho s\u00faboru blk000??.dat</translation>\n-    </message>\n     <message>\n         <source>Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times</source>\n         <translation>Povoli\u0165 JSON-RPC pripojenia zo zadan\u00e9ho zdroja. Pre &lt;ip&gt; s\u00fa platn\u00e9 jednoduch\u00e9 IP (napr. 1.2.3.4), sie\u0165/netmask (napr. 1.2.3.4/255.255.255.0) alebo sie\u0165/CIDR (napr. 1.2.3.4/24). T\u00e1to mo\u017enos\u0165 m\u00f4\u017ee by\u0165 zadan\u00e1 nieko\u013eko kr\u00e1t</translation>\n@@ -3145,10 +3125,6 @@ The network does not appear to fully agree! Some miners appear to be experiencin\n         <source>Zapping all transactions from wallet...</source>\n         <translation>Zmaza\u0165 v\u0161etky transakcie z pe\u0148a\u017eenky...</translation>\n     </message>\n-    <message>\n-        <source>on startup</source>\n-        <translation>pri \u0161tarte</translation>\n-    </message>\n     <message>\n         <source>wallet.dat corrupt, salvage failed</source>\n         <translation>wallet.dat je po\u0161koden\u00fd, z\u00e1chrana zlyhala</translation>\n@@ -3161,14 +3137,6 @@ The network does not appear to fully agree! Some miners appear to be experiencin\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Vykonaj pr\u00edkaz, ak zmeny v najlep\u0161om bloku (%s v pr\u00edkaze nahrad\u00ed blok hash)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>Aktualizuj pe\u0148a\u017eenku na najnov\u0161\u00ed form\u00e1t.</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>Znovu skenova\u0165 re\u0165az blokov pre ch\u00fdbaj\u00face transakcie</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>T\u00e1to pomocn\u00e1 spr\u00e1va</translation>"
      },
      {
        "sha": "ca65810396c945189eeb91807b17c2f3af65a73a",
        "filename": "src/qt/locale/bitcoin_sl_SI.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 32,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_sl_SI.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_sl_SI.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_sl_SI.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1489,14 +1489,6 @@\n         <source>Last Receive</source>\n         <translation>Nazadnje prejeto</translation>\n     </message>\n-    <message>\n-        <source>Bytes Sent</source>\n-        <translation>Oddanih bajtov</translation>\n-    </message>\n-    <message>\n-        <source>Bytes Received</source>\n-        <translation>Prejetih bajtov</translation>\n-    </message>\n     <message>\n         <source>Ping Time</source>\n         <translation>Odzivni \u010das</translation>\n@@ -2005,10 +1997,6 @@\n         <source>Estimated to begin confirmation within %n block(s).</source>\n         <translation><numerusform>Predviden za\u010detek potrditev po %n najdenem bloku.</numerusform><numerusform>Predviden za\u010detek potrditev po %n najdenih blokih.</numerusform><numerusform>Predviden za\u010detek potrditev po %n najdenih blokih.</numerusform><numerusform>Predviden za\u010detek potrditev po %n najdenih blokih.</numerusform></translation>\n     </message>\n-    <message>\n-        <source>Pay only the minimum fee of %1</source>\n-        <translation>Pla\u010dilo samo minimalne provizije v znesku %1</translation>\n-    </message>\n     <message>\n         <source>The recipient address is not valid. Please recheck.</source>\n         <translation>Naslov prejemnika je neveljaven. Prosimo, preverite.</translation>\n@@ -2851,10 +2839,6 @@\n         <source>&lt;category&gt; can be:</source>\n         <translation>&lt;category&gt; je lahko:</translation>\n     </message>\n-    <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>Sku\u0161aj obnoviti zasebne klju\u010de iz okvarjene datoteke wallet.dat</translation>\n-    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>Mo\u017enosti ustvarjanja blokov:</translation>\n@@ -2975,10 +2959,6 @@\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>Ob spremembi vrednosti opcije -txindex boste morali obnoviti bazo podatkov z uporabo opcije -reindex</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>Uvozi bloke iz zunanje datoteke blk000??.dat</translation>\n-    </message>\n     <message>\n         <source>Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times</source>\n         <translation>Iz navedenega vira dovoli povezave na JSON-RPC. Veljavne oblike vrednosti parametra &lt;ip&gt; so: edinstven naslov IP (npr.: 1.2.3.4), kombinacija omre\u017eje/netmask (npr.: 1.2.3.4/255.255.255.0), ali pa kombinacija omre\u017eje/CIDR (1.2.3.4/24). To opcijo lahko navedete ve\u010dkrat.</translation>\n@@ -3115,10 +3095,6 @@\n         <source>Zapping all transactions from wallet...</source>\n         <translation>Bri\u0161em vse transakcije iz denarnice ...</translation>\n     </message>\n-    <message>\n-        <source>on startup</source>\n-        <translation>ob zagonu</translation>\n-    </message>\n     <message>\n         <source>wallet.dat corrupt, salvage failed</source>\n         <translation>Datoteka wallet.dat je po\u0161kodovana in je ni bilo mogo\u010de obnoviti.</translation>\n@@ -3131,14 +3107,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Izvedi ukaz, ko je najden najbolj\u0161i blok (niz %s v ukazu bo zamenjan s hash vrednostjo bloka)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>Nadgradi denarnico na najnovej\u0161o razli\u010dico</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>S ponovnim pregledom verige blokov poi\u0161\u010di manjkajo\u010de transakcije iz denarnice</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>To sporo\u010dilo pomo\u010di</translation>"
      },
      {
        "sha": "425c077b2b83ebb6503827245c8743fd92940959",
        "filename": "src/qt/locale/bitcoin_sr.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_sr.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_sr.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_sr.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -761,10 +761,6 @@\n         <source>Password for JSON-RPC connections</source>\n         <translation>Lozinka za JSON-RPC konekcije</translation>\n     </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>Ponovo skeniraj lanac blokova za nedostaju\u0107e transakcije iz nov\u010danika</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>Ova poruka Pomo\u0107i</translation>"
      },
      {
        "sha": "69c175645b7f47269cb7775fa834562335ea5e12",
        "filename": "src/qt/locale/bitcoin_sv.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 40,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_sv.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_sv.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_sv.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1546,14 +1546,6 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Last Receive</source>\n         <translation>Senast mottagen</translation>\n     </message>\n-    <message>\n-        <source>Bytes Sent</source>\n-        <translation>Bytes s\u00e4nt</translation>\n-    </message>\n-    <message>\n-        <source>Bytes Received</source>\n-        <translation>Bytes mottaget</translation>\n-    </message>\n     <message>\n         <source>Ping Time</source>\n         <translation>Pingtid</translation>\n@@ -2098,14 +2090,6 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Estimated to begin confirmation within %n block(s).</source>\n         <translation><numerusform>Uppskattas till att p\u00e5b\u00f6rja bekr\u00e4ftelse inom %n block.</numerusform><numerusform>Uppskattas till att p\u00e5b\u00f6rja bekr\u00e4ftelse inom %n block.</numerusform></translation>\n     </message>\n-    <message>\n-        <source>Pay only the minimum fee of %1</source>\n-        <translation>Betala endast den minimala avgiften p\u00e5 %1</translation>\n-    </message>\n-    <message>\n-        <source>Total Amount %1&lt;span style='font-size:10pt;font-weight:normal;'&gt;&lt;br /&gt;(=%2)&lt;/span&gt;</source>\n-        <translation>Total summa %1&lt;span style='font-size:10pt;font-weight:normal;'&gt;&lt;br /&gt;(=%2)&lt;/span&gt;</translation>\n-    </message>\n     <message>\n         <source>The recipient address is not valid. Please recheck.</source>\n         <translation>Mottagarens adress \u00e4r ogiltig. Kontrollera igen.</translation>\n@@ -2880,10 +2864,6 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Accept command line and JSON-RPC commands</source>\n         <translation>Till\u00e5t kommandon fr\u00e5n kommandotolken och JSON-RPC-kommandon</translation>\n     </message>\n-    <message>\n-        <source>Fees (in %s/kB) smaller than this are considered zero fee for relaying (default: %s)</source>\n-        <translation>Avgift (i %s/kB) mindre \u00e4n detta betraktas som nollavgift f\u00f6r vidarebefordran(standard: %s)</translation>\n-    </message>\n     <message>\n         <source>If &lt;category&gt; is not supplied or if &lt;category&gt; = 1, output all debugging information.</source>\n         <translation>Om &lt;kategori&gt; inte anges eller om &lt;category&gt; = 1, visa all avlusningsinformation.</translation>\n@@ -3008,10 +2988,6 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>&lt;category&gt; can be:</source>\n         <translation>&lt;category&gt; Kan vara:</translation>\n     </message>\n-    <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>F\u00f6rs\u00f6k att r\u00e4dda de privata nycklarna fr\u00e5n en korrupt wallet.dat</translation>\n-    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>Block skapande inst\u00e4llningar:</translation>\n@@ -3168,10 +3144,6 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>Du m\u00e5ste \u00e5terskapa databasen med -reindex f\u00f6r att \u00e4ndra -txindex</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>Importerar block fr\u00e5n extern blk000??.dat fil</translation>\n-    </message>\n     <message>\n         <source>Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times</source>\n         <translation>Till\u00e5t JSON-RPC-anslutningar fr\u00e5n specifik k\u00e4lla. Till\u00e5tna &lt;ip&gt; \u00e4r enkel IP (t.ex 1.2.3.4), en n\u00e4tverk/n\u00e4tmask (t.ex. 1.2.3.4/255.255.255.0) eller ett n\u00e4tverk/CIDR (t.ex. 1.2.3.4/24). Detta alternativ anges flera g\u00e5nger</translation>\n@@ -3424,10 +3396,6 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>ZeroMQ notification options:</source>\n         <translation>ZeroMQ-alternativ f\u00f6r notiser:</translation>\n     </message>\n-    <message>\n-        <source>on startup</source>\n-        <translation>under uppstarten</translation>\n-    </message>\n     <message>\n         <source>wallet.dat corrupt, salvage failed</source>\n         <translation>wallet.dat korrupt, r\u00e4ddning misslyckades</translation>\n@@ -3440,14 +3408,6 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Exekvera kommando n\u00e4r det b\u00e4sta blocket \u00e4ndras (%s i cmd \u00e4r utbytt av blockhash)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>Uppgradera pl\u00e5nboken till senaste formatet</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>S\u00f6k i blockkedjan efter saknade pl\u00e5nboks transaktioner</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>Det h\u00e4r hj\u00e4lp medelandet</translation>"
      },
      {
        "sha": "fa8392b3dfd3366b6e7d02aa5d4d89b1bef343a4",
        "filename": "src/qt/locale/bitcoin_tr.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 32,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_tr.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_tr.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_tr.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1493,14 +1493,6 @@\n         <source>Last Receive</source>\n         <translation>Son Alma</translation>\n     </message>\n-    <message>\n-        <source>Bytes Sent</source>\n-        <translation>Yollanan Baytlar</translation>\n-    </message>\n-    <message>\n-        <source>Bytes Received</source>\n-        <translation>Al\u0131nan Baytlar</translation>\n-    </message>\n     <message>\n         <source>Ping Time</source>\n         <translation>Ping S\u00fcresi</translation>\n@@ -2005,10 +1997,6 @@\n         <source>Payment request expired.</source>\n         <translation>\u00d6deme talebinin \u00f6mr\u00fc doldu.</translation>\n     </message>\n-    <message>\n-        <source>Pay only the minimum fee of %1</source>\n-        <translation>Sadece asgari \u00fccret olan %1 tutar\u0131n\u0131 \u00f6de</translation>\n-    </message>\n     <message>\n         <source>The recipient address is not valid. Please recheck.</source>\n         <translation>Al\u0131c\u0131 adresi ge\u00e7erli de\u011fildir. L\u00fctfen denetleyiniz.</translation>\n@@ -2855,10 +2843,6 @@\n         <source>&lt;category&gt; can be:</source>\n         <translation>&lt;kategori&gt; \u015funlar olabilir:</translation>\n     </message>\n-    <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>Bozuk bir wallet.dat dosyas\u0131ndan \u00f6zel anahtarlar\u0131 geri kazanmay\u0131 dene</translation>\n-    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>Blok olu\u015fturma se\u00e7enekleri:</translation>\n@@ -2979,10 +2963,6 @@\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>-txindex'i de\u011fi\u015ftirmek i\u00e7in veritaban\u0131n\u0131 -reindex kullanarak tekrar in\u015fa etmeniz gerekmektedir</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>Harici blk000??.dat dosyas\u0131ndan bloklar\u0131 i\u00e7e aktar\u0131r</translation>\n-    </message>\n     <message>\n         <source>Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times</source>\n         <translation>Belirtilen kaynaktan JSON-RPC ba\u011flant\u0131lar\u0131n\u0131 kabul et. Bir &lt;ip&gt; i\u00e7in ge\u00e7erli olanlar \u015funlard\u0131r: salt IP adresi (mesela 1.2.3.4), bir \u015febeke/a\u011f maskesi (\u00f6rne\u011fin 1.2.3.4/255.255.255.0) ya da bir \u015febeke/CIDR (mesela 1.2.3.4/24). Bu se\u00e7enek birden fazla kez belirtilebilir</translation>\n@@ -3231,10 +3211,6 @@\n         <source>Zapping all transactions from wallet...</source>\n         <translation>C\u00fczdandaki t\u00fcm muameleler kald\u0131r\u0131l\u0131yor...</translation>\n     </message>\n-    <message>\n-        <source>on startup</source>\n-        <translation>ba\u015flang\u0131\u00e7ta</translation>\n-    </message>\n     <message>\n         <source>wallet.dat corrupt, salvage failed</source>\n         <translation>wallet.dat bozuk, geri kazan\u0131m ba\u015far\u0131s\u0131z oldu</translation>\n@@ -3247,14 +3223,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>En iyi blok de\u011fi\u015fti\u011finde komutu \u00e7al\u0131\u015ft\u0131r (komut i\u00e7in %s parametresi blok hash de\u011feri ile de\u011fi\u015ftirilecektir)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>C\u00fczdan\u0131 en yeni bi\u00e7ime g\u00fcncelle</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>Blok zincirini eksik c\u00fczdan muameleleri i\u00e7in tekrar tara</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>Bu yard\u0131m mesaj\u0131</translation>"
      },
      {
        "sha": "e0afa8eff8f3a3064f9c3f61db9c74797c83ab0a",
        "filename": "src/qt/locale/bitcoin_uk.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 40,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_uk.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_uk.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_uk.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1545,14 +1545,6 @@\n         <source>Last Receive</source>\n         <translation>\u0412\u043e\u0441\u0442\u0430\u043d\u043d\u0454 \u043e\u0442\u0440\u0438\u043c\u0430\u043d\u043e</translation>\n     </message>\n-    <message>\n-        <source>Bytes Sent</source>\n-        <translation>\u0411\u0430\u0439\u0442\u0456\u0432 \u0432\u0456\u0434\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e</translation>\n-    </message>\n-    <message>\n-        <source>Bytes Received</source>\n-        <translation>\u0411\u0430\u0439\u0442\u0456\u0432 \u043e\u0442\u0440\u0438\u043c\u0430\u043d\u043e</translation>\n-    </message>\n     <message>\n         <source>Ping Time</source>\n         <translation>\u0417\u0430\u0442\u0440\u0438\u043c\u043a\u0430</translation>\n@@ -2101,14 +2093,6 @@\n         <source>Estimated to begin confirmation within %n block(s).</source>\n         <translation><numerusform>\u041f\u0435\u0440\u0448\u0435 \u043f\u0456\u0434\u0442\u0432\u0435\u0440\u0434\u0436\u0435\u043d\u043d\u044f \u043e\u0447\u0456\u043a\u0443\u0454\u0442\u044c\u0441\u044f \u043f\u0440\u043e\u0442\u044f\u0433\u043e\u043c %n \u0431\u043b\u043e\u043a\u0443.</numerusform><numerusform>\u041f\u0435\u0440\u0448\u0435 \u043f\u0456\u0434\u0442\u0432\u0435\u0440\u0434\u0436\u0435\u043d\u043d\u044f \u043e\u0447\u0456\u043a\u0443\u0454\u0442\u044c\u0441\u044f \u043f\u0440\u043e\u0442\u044f\u0433\u043e\u043c %n \u0431\u043b\u043e\u043a\u0456\u0432.</numerusform><numerusform>\u041f\u0435\u0440\u0448\u0435 \u043f\u0456\u0434\u0442\u0432\u0435\u0440\u0434\u0436\u0435\u043d\u043d\u044f \u043e\u0447\u0456\u043a\u0443\u0454\u0442\u044c\u0441\u044f \u043f\u0440\u043e\u0442\u044f\u0433\u043e\u043c %n \u0431\u043b\u043e\u043a\u0456\u0432.</numerusform></translation>\n     </message>\n-    <message>\n-        <source>Pay only the minimum fee of %1</source>\n-        <translation>\u041f\u043b\u0430\u0442\u0438\u0442\u0438 \u0442\u0456\u043b\u044c\u043a\u0438 \u043c\u0456\u043d\u0456\u043c\u0430\u043b\u044c\u043d\u0443 \u043a\u043e\u043c\u0456\u0441\u0456\u044e \u0443 \u0440\u043e\u0437\u043c\u0456\u0440\u0456 %1</translation>\n-    </message>\n-    <message>\n-        <source>Total Amount %1&lt;span style='font-size:10pt;font-weight:normal;'&gt;&lt;br /&gt;(=%2)&lt;/span&gt;</source>\n-        <translation>\u0412\u0441\u044c\u043e\u0433\u043e %1&lt;span style='font-size:10pt;font-weight:normal;'&gt;&lt;br /&gt;(=%2)&lt;/span&gt;</translation>\n-    </message>\n     <message>\n         <source>The recipient address is not valid. Please recheck.</source>\n         <translation>\u0410\u0434\u0440\u0435\u0441\u0430 \u043e\u0442\u0440\u0438\u043c\u0443\u0432\u0430\u0447\u0430 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0430. \u0411\u0443\u0434\u044c \u043b\u0430\u0441\u043a\u0430, \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u0442\u0435 \u0457\u0457.</translation>\n@@ -2887,10 +2871,6 @@\n         <source>Accept command line and JSON-RPC commands</source>\n         <translation>\u041f\u0440\u0438\u0439\u043c\u0430\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u0438 \u0456\u0437 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0433\u043e \u0440\u044f\u0434\u043a\u0430 \u0442\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0438 JSON-RPC</translation>\n     </message>\n-    <message>\n-        <source>Fees (in %s/kB) smaller than this are considered zero fee for relaying (default: %s)</source>\n-        <translation>\u041a\u043e\u043c\u0456\u0441\u0456\u0457 (\u0432 %s/\u041a\u0411), \u0449\u043e \u043c\u0435\u043d\u0448\u0456 \u0437\u0430 \u0432\u043a\u0430\u0437\u0430\u043d\u0443, \u0432\u0432\u0430\u0436\u0430\u0442\u0438\u043c\u0443\u0442\u044c\u0441\u044f \u043d\u0443\u043b\u044c\u043e\u0432\u0438\u043c\u0438 (\u0434\u043b\u044f \u0440\u0435\u0442\u0440\u0430\u043d\u0441\u043b\u044f\u0446\u0456\u0457) (\u0442\u0438\u043f\u043e\u0432\u043e: %s)</translation>\n-    </message>\n     <message>\n         <source>If &lt;category&gt; is not supplied or if &lt;category&gt; = 1, output all debugging information.</source>\n         <translation>\u042f\u043a\u0449\u043e &lt;category&gt; \u043d\u0435 \u0437\u0430\u0434\u0430\u043d\u043e, \u0430\u0431\u043e \u0436 \u044f\u043a\u0449\u043e &lt;category&gt; = 1, \u0432\u0438\u0432\u043e\u0434\u0438\u0442\u044c \u0432\u0441\u044e \u043d\u0430\u043b\u0430\u0433\u043e\u0434\u0436\u0443\u0432\u0430\u043b\u044c\u043d\u0443 \u0456\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0456\u044e.</translation>\n@@ -3011,10 +2991,6 @@\n         <source>&lt;category&gt; can be:</source>\n         <translation>&lt;category&gt; \u043c\u043e\u0436\u0435 \u0431\u0443\u0442\u0438:</translation>\n     </message>\n-    <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>\u0421\u043f\u0440\u043e\u0431\u0430 \u0432\u0456\u0434\u043d\u043e\u0432\u0438\u0442\u0438 \u0437\u0430\u043a\u0440\u0438\u0442\u0456 \u043a\u043b\u044e\u0447\u0456 \u0437 \u043f\u043e\u0448\u043a\u043e\u0434\u0436\u0435\u043d\u043e\u0433\u043e wallet.dat</translation>\n-    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>\u041e\u043f\u0446\u0456\u0457 \u0441\u0442\u0432\u043e\u0440\u0435\u043d\u043d\u044f \u0431\u043b\u043e\u043a\u0443:</translation>\n@@ -3155,10 +3131,6 @@\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>\u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u0456\u0434\u043d\u043e \u043f\u0435\u0440\u0435\u0431\u0443\u0434\u0443\u0432\u0430\u0442\u0438 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u0438\u0445 \u0437 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u043d\u043d\u044f\u043c -reindex \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0449\u043e\u0431 \u0437\u043c\u0456\u043d\u0438\u0442\u0438 -txindex</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>\u0406\u043c\u043f\u043e\u0440\u0442 \u0431\u043b\u043e\u043a\u0456\u0432 \u0437 \u0437\u043e\u0432\u043d\u0456\u0448\u043d\u044c\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0443 blk000??.dat</translation>\n-    </message>\n     <message>\n         <source>Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times</source>\n         <translation>\u0414\u043e\u0437\u0432\u043e\u043b\u0438\u0442\u0438 \u043f\u0456\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044f \u043f\u043e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0443 JSON-RPC \u0437\u0456 \u0432\u043a\u0430\u0437\u0430\u043d\u043e\u0433\u043e \u0434\u0436\u0435\u0440\u0435\u043b\u0430. \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u044e \u0434\u043b\u044f &lt;ip&gt; \u0454 \u043e\u043a\u0440\u0435\u043c\u0430 IP-\u0430\u0434\u0440\u0435\u0441\u0430 (\u043d\u0430\u043f\u0440\u0438\u043a\u043b\u0430\u0434, 1.2.3.4), IP-\u0430\u0434\u0440\u0435\u0441\u0430 \u0442\u0430 \u043c\u0430\u0441\u043a\u0430 \u043f\u0456\u0434\u043c\u0435\u0440\u0435\u0436\u0456 (\u043d\u0430\u043f\u0440\u0438\u043a\u043b\u0430\u0434, 1.2.3.4/255.255.255.0) \u0430\u0431\u043e CIDR-\u0430\u0434\u0440\u0435\u0441\u0430 (\u043d\u0430\u043f\u0440\u0438\u043a\u043b\u0430\u0434, 1.2.3.4/24). \u0426\u0435\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043c\u043e\u0436\u043d\u0430 \u0432\u043a\u0430\u0437\u0443\u0432\u0430\u0442\u0438 \u0434\u0435\u043a\u0456\u043b\u044c\u043a\u0430 \u0440\u0430\u0437\u0456\u0432.</translation>\n@@ -3415,10 +3387,6 @@\n         <source>ZeroMQ notification options:</source>\n         <translation>\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438 \u0441\u043f\u043e\u0432\u0456\u0449\u0435\u043d\u044c ZeroMQ:</translation>\n     </message>\n-    <message>\n-        <source>on startup</source>\n-        <translation>\u043f\u0456\u0434 \u0447\u0430\u0441 \u0437\u0430\u043f\u0443\u0441\u043a\u0443</translation>\n-    </message>\n     <message>\n         <source>wallet.dat corrupt, salvage failed</source>\n         <translation>wallet.dat \u043f\u043e\u0448\u043a\u043e\u0434\u0436\u0435\u043d\u043e, \u0432\u0456\u0434\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044f \u043d\u0435 \u0432\u0434\u0430\u043b\u043e\u0441\u044f</translation>\n@@ -3431,14 +3399,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>\u0412\u0438\u043a\u043e\u043d\u0430\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u0443, \u043a\u043e\u043b\u0438 \u0437'\u044f\u0432\u0438\u0442\u044c\u0441\u044f \u043d\u043e\u0432\u0438\u0439 \u0431\u043b\u043e\u043a (%s \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0456 \u0437\u043c\u0456\u043d\u044e\u0454\u0442\u044c\u0441\u044f \u043d\u0430 \u0445\u0435\u0448 \u0431\u043b\u043e\u043a\u0443)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>\u041c\u043e\u0434\u0435\u0440\u043d\u0456\u0437\u0443\u0432\u0430\u0442\u0438 \u0433\u0430\u043c\u0430\u043d\u0435\u0446\u044c \u0434\u043e \u043d\u0430\u0439\u043d\u043e\u0432\u0456\u0448\u043e\u0433\u043e \u0444\u043e\u0440\u043c\u0430\u0442\u0443</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>\u041f\u0435\u0440\u0435\u0441\u043a\u0430\u043d\u0443\u0432\u0430\u0442\u0438 \u043b\u0430\u043d\u0446\u044e\u0436\u043e\u043a \u0431\u043b\u043e\u043a\u0456\u0432, \u0432 \u043f\u043e\u0448\u0443\u043a\u0443 \u0432\u0442\u0440\u0430\u0447\u0435\u043d\u0438\u0445 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0456\u0439</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>\u0414\u0430\u043d\u0430 \u0434\u043e\u0432\u0456\u0434\u043a\u0430</translation>"
      },
      {
        "sha": "004857cf016cd52e8b94ca358e2272b02cd6603d",
        "filename": "src/qt/locale/bitcoin_uz@Cyrl.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_uz@Cyrl.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_uz@Cyrl.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_uz@Cyrl.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1219,14 +1219,6 @@\n         <source>Last Receive</source>\n         <translation>\u0421\u045e\u043d\u0433\u0433\u0438 \u049b\u0430\u0431\u0443\u043b \u049b\u0438\u043b\u0438\u043d\u0433\u0430\u043d</translation>\n     </message>\n-    <message>\n-        <source>Bytes Sent</source>\n-        <translation>\u0416\u045e\u043d\u0430\u0442\u0438\u043b\u0433\u0430\u043d \u0431\u0430\u0439\u0442\u043b\u0430\u0440</translation>\n-    </message>\n-    <message>\n-        <source>Bytes Received</source>\n-        <translation>\u049a\u0430\u0431\u0443\u043b \u049b\u0438\u043b\u0438\u043d\u0433\u0430\u043d \u0431\u0430\u0439\u0442\u043b\u0430\u0440</translation>\n-    </message>\n     <message>\n         <source>Ping Time</source>\n         <translation>Ping \u0432\u0430\u049b\u0442\u0438</translation>"
      },
      {
        "sha": "c55aecd82dab2dd2a614e5c9985e41b422081770",
        "filename": "src/qt/locale/bitcoin_vi_VN.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_vi_VN.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_vi_VN.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_vi_VN.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -685,10 +685,6 @@\n         <source>Warning</source>\n         <translation>Ch\u00fa \u00fd</translation>\n     </message>\n-    <message>\n-        <source>on startup</source>\n-        <translation>khi kh\u1edfi \u0111\u1ed9ng</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>Th\u00f4ng \u0111i\u1ec7p tr\u1ee3 gi\u00fap n\u00e0y</translation>"
      },
      {
        "sha": "1cd7eed503a58c3a14c11e66c6bae3fb4c0d0c62",
        "filename": "src/qt/locale/bitcoin_zh_CN.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 36,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_zh_CN.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_zh_CN.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_zh_CN.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1521,14 +1521,6 @@\n         <source>Last Receive</source>\n         <translation>\u6700\u540e\u63a5\u6536</translation>\n     </message>\n-    <message>\n-        <source>Bytes Sent</source>\n-        <translation>\u53d1\u9001\u5b57\u8282</translation>\n-    </message>\n-    <message>\n-        <source>Bytes Received</source>\n-        <translation>\u63a5\u6536\u5b57\u8282</translation>\n-    </message>\n     <message>\n         <source>Ping Time</source>\n         <translation>Ping \u65f6\u95f4</translation>\n@@ -2057,14 +2049,6 @@\n         <source>Estimated to begin confirmation within %n block(s).</source>\n         <translation><numerusform>\u9884\u8ba1 %n \u4e2a\u6570\u636e\u5757\u540e\u88ab\u786e\u8ba4\u3002</numerusform></translation>\n     </message>\n-    <message>\n-        <source>Pay only the minimum fee of %1</source>\n-        <translation>\u53ea\u652f\u4ed8\u6700\u5c0f\u8d39\u7528 %1</translation>\n-    </message>\n-    <message>\n-        <source>Total Amount %1&lt;span style='font-size:10pt;font-weight:normal;'&gt;&lt;br /&gt;(=%2)&lt;/span&gt;</source>\n-        <translation>\u603b\u91d1\u989d %1&lt;span style='font-size:10pt;font-weight:normal;'&gt;&lt;br /&gt;(=%2)&lt;/span&gt;</translation>\n-    </message>\n     <message>\n         <source>The recipient address is not valid. Please recheck.</source>\n         <translation>\u63a5\u6536\u4eba\u5730\u5740\u65e0\u6548\u3002\u8bf7\u91cd\u65b0\u68c0\u67e5\u3002</translation>\n@@ -2924,10 +2908,6 @@\n         <source>&lt;category&gt; can be:</source>\n         <translation>&lt;category&gt; \u53ef\u80fd\u662f\uff1a</translation>\n     </message>\n-    <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>\u5c1d\u8bd5\u4ece\u635f\u574f\u7684\u94b1\u5305\u6587\u4ef6wallet.dat\u4e2d\u6062\u590d\u79c1\u94a5</translation>\n-    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>\u6570\u636e\u5757\u521b\u5efa\u9009\u9879\uff1a</translation>\n@@ -3048,10 +3028,6 @@\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>\u60a8\u9700\u8981\u5c06 -reindex \u6539\u4e3a -txindex \u4ee5\u91cd\u5efa\u6570\u636e\u5e93</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>\u4eceblk000??.dat\u6587\u4ef6\u5bfc\u5165\u6570\u636e\u5757</translation>\n-    </message>\n     <message>\n         <source>Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times</source>\n         <translation>\u5141\u8bb8\u6765\u81ea\u6307\u5b9a\u5730\u5740\u7684 JSON-RPC \u8fde\u63a5\u3002 &lt;ip&gt;\u4e3a\u5355\u4e00IP (\u5982: 1.2.3.4), \u7f51\u7edc/\u63a9\u7801 (\u5982: 1.2.3.4/255.255.255.0), \u7f51\u7edc/CIDR (\u5982:  1.2.3.4/24)\u3002\u8be5\u9009\u9879\u53ef\u591a\u6b21\u6307\u5b9a\u3002</translation>\n@@ -3301,10 +3277,6 @@\n         <source>ZeroMQ notification options:</source>\n         <translation>ZeroMQ \u901a\u77e5\u9009\u9879\uff1a</translation>\n     </message>\n-    <message>\n-        <source>on startup</source>\n-        <translation>\u542f\u52a8\u4e2d</translation>\n-    </message>\n     <message>\n         <source>wallet.dat corrupt, salvage failed</source>\n         <translation>\u94b1\u5305\u6587\u4ef6wallet.dat\u635f\u574f\uff0c\u62a2\u6551\u5907\u4efd\u5931\u8d25</translation>\n@@ -3318,14 +3290,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>\u5f53\u6700\u4f73\u6570\u636e\u5757\u53d8\u5316\u65f6\u6267\u884c\u547d\u4ee4 (\u547d\u4ee4\u884c\u4e2d\u7684 %s \u4f1a\u88ab\u66ff\u6362\u6210\u6570\u636e\u5757\u54c8\u5e0c\u503c)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>\u5c06\u94b1\u5305\u5347\u7ea7\u5230\u6700\u65b0\u7684\u683c\u5f0f</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>\u91cd\u65b0\u626b\u63cf\u533a\u5757\u94fe\u4ee5\u67e5\u627e\u9057\u6f0f\u7684\u94b1\u5305\u4ea4\u6613</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>\u672c\u5e2e\u52a9\u4fe1\u606f"
      },
      {
        "sha": "b4dbf85a334acaaf4f647cbb5666dd6869d695fb",
        "filename": "src/qt/locale/bitcoin_zh_TW.ts",
        "status": "modified",
        "additions": 26,
        "deletions": 38,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_zh_TW.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c563710ddd80a90c58205e866a42b01887ab63/src/qt/locale/bitcoin_zh_TW.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_zh_TW.ts?ref=52c563710ddd80a90c58205e866a42b01887ab63",
        "patch": "@@ -1549,14 +1549,6 @@\n         <source>Last Receive</source>\n         <translation>\u6700\u8fd1\u6536\u5230</translation>\n     </message>\n-    <message>\n-        <source>Bytes Sent</source>\n-        <translation>\u9001\u51fa\u4f4d\u5143\u7d44</translation>\n-    </message>\n-    <message>\n-        <source>Bytes Received</source>\n-        <translation>\u6536\u5230\u4f4d\u5143\u7d44</translation>\n-    </message>\n     <message>\n         <source>Ping Time</source>\n         <translation>Ping \u6642\u9593</translation>\n@@ -2069,6 +2061,10 @@\n         <source>Copy change</source>\n         <translation>\u8907\u88fd\u627e\u96f6\u91d1\u984d</translation>\n     </message>\n+    <message>\n+        <source>Total Amount %1</source>\n+        <translation>\u7e3d\u91d1\u984d %1</translation>\n+    </message>\n     <message>\n         <source>or</source>\n         <translation>\u6216</translation>\n@@ -2102,12 +2098,8 @@\n         <translation>\u4ed8\u6b3e\u7684\u8981\u6c42\u904e\u671f\u4e86\u3002</translation>\n     </message>\n     <message>\n-        <source>Pay only the minimum fee of %1</source>\n-        <translation>\u53ea\u4ed8\u6700\u4f4e\u624b\u7e8c\u8cbb %1</translation>\n-    </message>\n-    <message>\n-        <source>Total Amount %1&lt;span style='font-size:10pt;font-weight:normal;'&gt;&lt;br /&gt;(=%2)&lt;/span&gt;</source>\n-        <translation>\u7e3d\u91d1\u984d %1&lt;span style='font-size:10pt;font-weight:normal;'&gt;&lt;br /&gt;(=%2)&lt;/span&gt;</translation>\n+        <source>Pay only the required fee of %1</source>\n+        <translation>\u53ea\u4ed8\u5fc5\u8981\u7684\u624b\u7e8c\u8cbb %1</translation>\n     </message>\n     <message>\n         <source>The recipient address is not valid. Please recheck.</source>\n@@ -2888,10 +2880,6 @@\n         <translation>\u63a5\u53d7\u6307\u4ee4\u5217\u548c JSON-RPC \u6307\u4ee4\n </translation>\n     </message>\n-    <message>\n-        <source>Fees (in %s/kB) smaller than this are considered zero fee for relaying (default: %s)</source>\n-        <translation>\u7576\u8655\u7406\u8f49\u767c\u7684\u4ea4\u6613\u6642\uff0c\u5982\u679c\u6bcf\u5343\u4f4d\u5143\u7d44(kB)\u7684\u624b\u7e8c\u8cbb\u6bd4\u9019\u500b\u503c(\u55ae\u4f4d\u662f %s)\u4f4e\uff0c\u5c31\u8996\u70ba\u6c92\u4ed8\u624b\u7e8c\u8cbb(\u9810\u8a2d\u503c: %s)</translation>\n-    </message>\n     <message>\n         <source>If &lt;category&gt; is not supplied or if &lt;category&gt; = 1, output all debugging information.</source>\n         <translation>\u5982\u679c\u6c92\u6709\u63d0\u4f9b &lt;category&gt; \u6216\u662f\u503c\u70ba 1 \u5c31\u6703\u8f38\u51fa\u6240\u6709\u7684\u9664\u932f\u8cc7\u8a0a\u3002</translation>\n@@ -3016,10 +3004,6 @@\n         <source>&lt;category&gt; can be:</source>\n         <translation>&lt;category&gt; \u53ef\u4ee5\u662f:</translation>\n     </message>\n-    <message>\n-        <source>Attempt to recover private keys from a corrupt wallet.dat</source>\n-        <translation>\u5617\u8a66\u5f9e\u58de\u6389\u7684\u9322\u5305\u6a94 wallet.dat \u5fa9\u539f\u5bc6\u9470</translation>\n-    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>\u5340\u584a\u88fd\u9020\u9078\u9805:</translation>\n@@ -3172,10 +3156,6 @@\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>\u6539\u8b8a -txindex \u53c3\u6578\u5f8c\uff0c\u5fc5\u9808\u8981\u7528 -reindex \u53c3\u6578\u4f86\u91cd\u5efa\u8cc7\u6599\u5eab</translation>\n     </message>\n-    <message>\n-        <source>Imports blocks from external blk000??.dat file</source>\n-        <translation>\u5f9e\u5176\u5b83\u4f86\u6e90\u7684 blk000??.dat \u6a94\u532f\u5165\u5340\u584a</translation>\n-    </message>\n     <message>\n         <source>Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times</source>\n         <translation>\u5141\u8a31\u6307\u5b9a\u7684\u4f86\u6e90\u5efa\u7acb JSON-RPC \u9023\u7dda\u3002&lt;ip&gt; \u7684\u6709\u6548\u503c\u53ef\u4ee5\u662f\u4e00\u500b\u55ae\u7368\u4f4d\u5740(\u50cf\u662f 1.2.3.4)\uff0c\u4e00\u500b\u7db2\u6bb5/\u7db2\u6bb5\u7f69\u906e\u503c(\u50cf\u662f 1.2.3.4/255.255.255.0)\uff0c\u6216\u662f\u7db2\u6bb5/CIDR\u503c(\u50cf\u662f 1.2.3.4/24)\u3002\u9019\u500b\u9078\u9805\u53ef\u4ee5\u8a2d\u5b9a\u591a\u6b21\u3002</translation>\n@@ -3208,6 +3188,10 @@\n         <source>Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)</source>\n         <translation>\u7576\u6536\u5230\u76f8\u95dc\u8b66\u793a\uff0c\u6216\u767c\u73fe\u76f8\u7576\u9577\u7684\u5206\u652f\u6642\uff0c\u6240\u8981\u57f7\u884c\u7684\u6307\u4ee4(\u6307\u4ee4\u4e2d\u7684 %s \u6703\u88ab\u53d6\u4ee3\u6210\u8b66\u793a\u8a0a\u606f)</translation>\n     </message>\n+    <message>\n+        <source>Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)</source>\n+        <translation>\u7576\u8655\u7406\u8f49\u767c\u7684\u4ea4\u6613\u3001\u6316\u7926\u3001\u6216\u88fd\u9020\u4ea4\u6613\u6642\uff0c\u5982\u679c\u6bcf\u5343\u4f4d\u5143\u7d44(kB)\u7684\u624b\u7e8c\u8cbb\u6bd4\u9019\u500b\u503c(\u55ae\u4f4d\u662f %s)\u4f4e\uff0c\u5c31\u8996\u70ba\u6c92\u4ed8\u624b\u7e8c\u8cbb(\u9810\u8a2d\u503c: %s)</translation>\n+    </message>\n     <message>\n         <source>If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)</source>\n         <translation>\u7576\u6c92\u6709\u8a2d\u5b9a paytxfee \u6642\uff0c\u81ea\u52d5\u5305\u542b\u53ef\u4ee5\u8b93\u4ea4\u6613\u80fd\u5728\u5e73\u5747 n \u500b\u5340\u584a\u5167\u958b\u59cb\u78ba\u8a8d\u7684\u624b\u7e8c\u8cbb(\u9810\u8a2d\u503c: %u)</translation>\n@@ -3264,6 +3248,10 @@\n         <source>Activating best chain...</source>\n         <translation>\u555f\u7528\u6700\u4f73\u93c8\u7d50...</translation>\n     </message>\n+    <message>\n+        <source>Attempt to recover private keys from a corrupt wallet.dat on startup</source>\n+        <translation>\u555f\u52d5\u6642\u5617\u8a66\u5f9e\u58de\u6389\u7684\u9322\u5305\u6a94 wallet.dat \u5fa9\u539f\u5bc6\u9470</translation>\n+    </message>\n     <message>\n         <source>Cannot resolve -whitebind address: '%s'</source>\n         <translation>\u6c92\u8fa6\u6cd5\u89e3\u6790 -whitebind \u6307\u5b9a\u7684\u4f4d\u5740: '%s'</translation>\n@@ -3288,6 +3276,10 @@\n         <source>Error reading from database, shutting down.</source>\n         <translation>\u8b80\u53d6\u8cc7\u6599\u5eab\u6642\u767c\u751f\u932f\u8aa4\uff0c\u8981\u95dc\u9589\u4e86\u3002</translation>\n     </message>\n+    <message>\n+        <source>Imports blocks from external blk000??.dat file on startup</source>\n+        <translation>\u555f\u52d5\u6642\u5f9e\u5176\u5b83\u4f86\u6e90\u7684 blk000??.dat \u6a94\u532f\u5165\u5340\u584a</translation>\n+    </message>\n     <message>\n         <source>Information</source>\n         <translation>\u8cc7\u8a0a</translation>\n@@ -3344,6 +3336,10 @@\n         <source>Reducing -maxconnections from %d to %d, because of system limitations.</source>\n         <translation>\u56e0\u70ba\u7cfb\u7d71\u7684\u9650\u5236\uff0c\u5c07 -maxconnections \u53c3\u6578\u5f9e %d \u964d\u5230\u4e86 %d</translation>\n     </message>\n+    <message>\n+        <source>Rescan the block chain for missing wallet transactions on startup</source>\n+        <translation>\u555f\u52d5\u6642\u91cd\u65b0\u6383\u63cf\u5340\u584a\u93c8\uff0c\u4f86\u5c0b\u627e\u9322\u5305\u53ef\u80fd\u6f0f\u6389\u7684\u4ea4\u6613\u3002</translation>\n+    </message>\n     <message>\n         <source>Send trace/debug info to console instead of debug.log file</source>\n         <translation>\u5728\u7d42\u7aef\u6a5f\u986f\u793a\u8ffd\u8e64\u6216\u9664\u932f\u8cc7\u8a0a\uff0c\u800c\u4e0d\u662f\u5beb\u5230\u6a94\u6848 debug.log \u4e2d</translation>\n@@ -3412,6 +3408,10 @@\n         <source>Unable to bind to %s on this computer (bind returned error %s)</source>\n         <translation>\u7121\u6cd5\u548c\u9019\u53f0\u96fb\u8166\u4e0a\u7684 %s \u7e6b\u7d50(\u56de\u50b3\u932f\u8aa4 %s)</translation>\n     </message>\n+    <message>\n+        <source>Upgrade wallet to latest format on startup</source>\n+        <translation>\u555f\u52d5\u6642\u628a\u9322\u5305\u6a94\u6848\u5347\u7d1a\u6210\u6700\u65b0\u7684\u683c\u5f0f</translation>\n+    </message>\n     <message>\n         <source>Username for JSON-RPC connections</source>\n         <translation>JSON-RPC \u9023\u7dda\u4f7f\u7528\u8005\u540d\u7a31</translation>\n@@ -3432,10 +3432,6 @@\n         <source>ZeroMQ notification options:</source>\n         <translation>ZeroMQ \u901a\u77e5\u9078\u9805:</translation>\n     </message>\n-    <message>\n-        <source>on startup</source>\n-        <translation>\u7576\u555f\u52d5\u6642</translation>\n-    </message>\n     <message>\n         <source>wallet.dat corrupt, salvage failed</source>\n         <translation>\u9322\u5305\u6a94 weallet.dat \u58de\u6389\u4e86\uff0c\u62ef\u6551\u5931\u6557</translation>\n@@ -3448,14 +3444,6 @@\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>\u7576\u6700\u65b0\u5340\u584a\u6539\u8b8a\u6642\u8981\u57f7\u884c\u7684\u6307\u4ee4(\u6307\u4ee4\u4e2d\u7684 %s \u6703\u88ab\u53d6\u4ee3\u6210\u5340\u584a\u96dc\u6e4a\u503c)</translation>\n     </message>\n-    <message>\n-        <source>Upgrade wallet to latest format</source>\n-        <translation>\u628a\u9322\u5305\u6a94\u6848\u5347\u7d1a\u6210\u6700\u65b0\u7684\u683c\u5f0f</translation>\n-    </message>\n-    <message>\n-        <source>Rescan the block chain for missing wallet transactions</source>\n-        <translation>\u91cd\u65b0\u6383\u63cf\u5340\u584a\u93c8\uff0c\u4f86\u5c0b\u627e\u9322\u5305\u53ef\u80fd\u6f0f\u6389\u7684\u4ea4\u6613\u3002</translation>\n-    </message>\n     <message>\n         <source>This help message</source>\n         <translation>\u9019\u4e9b\u8aaa\u660e\u8a0a\u606f</translation>"
      }
    ]
  },
  {
    "sha": "957c0fd7c0efe2c39dde025a7d6d3d3047c86a1a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTdjMGZkN2MwZWZlMmMzOWRkZTAyNWE3ZDZkM2QzMDQ3Yzg2YTFh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-30T17:19:09Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-19T12:01:35Z"
      },
      "message": "gitian: make windows build deterministic",
      "tree": {
        "sha": "4ae5e0daba4bdbdaa394e368ecc4d9f1f9184891",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ae5e0daba4bdbdaa394e368ecc4d9f1f9184891"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/957c0fd7c0efe2c39dde025a7d6d3d3047c86a1a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/957c0fd7c0efe2c39dde025a7d6d3d3047c86a1a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/957c0fd7c0efe2c39dde025a7d6d3d3047c86a1a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/957c0fd7c0efe2c39dde025a7d6d3d3047c86a1a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2e31d74b715515c344ba50f574831d6a73302aac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e31d74b715515c344ba50f574831d6a73302aac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2e31d74b715515c344ba50f574831d6a73302aac"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 24,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6bb482d45f373491752ffcf77a63d864eb5e8a70",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/957c0fd7c0efe2c39dde025a7d6d3d3047c86a1a/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/957c0fd7c0efe2c39dde025a7d6d3d3047c86a1a/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=957c0fd7c0efe2c39dde025a7d6d3d3047c86a1a",
        "patch": "@@ -63,6 +63,30 @@ script: |\n         chmod +x ${WRAP_DIR}/${i}-${prog}\n     done\n   done\n+\n+  # Create per-host linker wrapper\n+  # This is only needed for trusty, as the mingw linker leaks a few bytes of\n+  # heap, causing non-determinism. See discussion in https://github.com/bitcoin/bitcoin/pull/6900\n+  for i in $HOSTS; do\n+    mkdir -p ${WRAP_DIR}/${i}\n+    for prog in collect2; do\n+        echo '#!/bin/bash' > ${WRAP_DIR}/${i}/${prog}\n+        REAL=$(${i}-gcc -print-prog-name=${prog})\n+        echo \"export MALLOC_PERTURB_=255\" >> ${WRAP_DIR}/${i}/${prog}\n+        echo \"${REAL} \\$@\" >> $WRAP_DIR/${i}/${prog}\n+        chmod +x ${WRAP_DIR}/${i}/${prog}\n+    done\n+    for prog in gcc g++; do\n+        echo '#!/bin/bash' > ${WRAP_DIR}/${i}-${prog}\n+        echo \"REAL=\\`which -a ${i}-${prog} | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\n+        echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}\n+        echo \"export FAKETIME=\\\"${REFERENCE_DATETIME}\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n+        echo \"export COMPILER_PATH=${WRAP_DIR}/${i}\" >> ${WRAP_DIR}/${i}-${prog}\n+        echo \"\\$REAL \\$@\" >> $WRAP_DIR/${i}-${prog}\n+        chmod +x ${WRAP_DIR}/${i}-${prog}\n+    done\n+  done\n+\n   export PATH=${WRAP_DIR}:${PATH}\n \n   cd bitcoin"
      }
    ]
  },
  {
    "sha": "2cecb2460002bc645e47e8517b21099b0faec818",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyY2VjYjI0NjAwMDJiYzY0NWU0N2U4NTE3YjIxMDk5YjBmYWVjODE4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-17T09:24:05Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-19T12:01:35Z"
      },
      "message": "doc: change suite to trusty in gitian-building.md",
      "tree": {
        "sha": "b7e3e1cefbc2336e93d7e1b99049090d2d090eef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b7e3e1cefbc2336e93d7e1b99049090d2d090eef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2cecb2460002bc645e47e8517b21099b0faec818",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cecb2460002bc645e47e8517b21099b0faec818",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2cecb2460002bc645e47e8517b21099b0faec818",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cecb2460002bc645e47e8517b21099b0faec818/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "957c0fd7c0efe2c39dde025a7d6d3d3047c86a1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/957c0fd7c0efe2c39dde025a7d6d3d3047c86a1a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/957c0fd7c0efe2c39dde025a7d6d3d3047c86a1a"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "019e8516962af7bce0553be679cac3ceb5fdd6c6",
        "filename": "doc/gitian-building.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cecb2460002bc645e47e8517b21099b0faec818/doc/gitian-building.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cecb2460002bc645e47e8517b21099b0faec818/doc/gitian-building.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building.md?ref=2cecb2460002bc645e47e8517b21099b0faec818",
        "patch": "@@ -320,7 +320,7 @@ Execute the following as user `debian`:\n \n ```bash\n cd gitian-builder\n-bin/make-base-vm --lxc --arch amd64 --suite precise\n+bin/make-base-vm --lxc --arch amd64 --suite trusty\n ```\n \n There will be a lot of warnings printed during the build of the image. These can be ignored."
      }
    ]
  },
  {
    "sha": "c983d6fcb47bafb4b82529f512310ccaef076ca2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTgzZDZmY2I0N2JhZmI0YjgyNTI5ZjUxMjMxMGNjYWVmMDc2Y2Ey",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-19T12:01:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-19T12:02:07Z"
      },
      "message": "Merge pull request #6900\n\n2cecb24 doc: change suite to trusty in gitian-building.md (Wladimir J. van der Laan)\n957c0fd gitian: make windows build deterministic (Wladimir J. van der Laan)\n2e31d74 gitian: use trusty for building (Wladimir J. van der Laan)\n0b416c6 depends: qt PIDLIST_ABSOLUTE patch (Wladimir J. van der Laan)\n9f251b7 devtools: add libraries for bitcoin-qt to symbol check (Wladimir J. van der Laan)",
      "tree": {
        "sha": "843e428adadf63e26285631e08519c85c28a2b27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/843e428adadf63e26285631e08519c85c28a2b27"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c983d6fcb47bafb4b82529f512310ccaef076ca2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWTbo/AAoJEHSBCwEjRsmmGtoH/2SUYJEfK4/FstUS0AVh5H7j\nhPuqRvatDdoMwR9x7VcNoqKUmHWidjvDpohZvehASEidsJF3wVe7MXgKQqYawJcY\nX5SUBzBU2Zqk4/q8lvUtg36SJuny1aOFx20AtV0wgo2bdbrFu9HMj1xNGUbA7F5n\nZpyHcF1snKapdaFlbe5AIdnODg0kpttoElsJ5HlEQ01gPeBB3JjcwSOJNIHWy1E9\nqgcrAxMLmSDCUOGPBxEljOqQHLMWE229MY7N+tgqLHFsjJ0s152T/PN3aZRcknGC\nY76Gs88rBWBCVt9vDk1PI+Qg+RjF2fuAciNlbFdoUIkUSuBwBRGIXb9zITZvh3U=\n=V58U\n-----END PGP SIGNATURE-----",
        "payload": "tree 843e428adadf63e26285631e08519c85c28a2b27\nparent 52c563710ddd80a90c58205e866a42b01887ab63\nparent 2cecb2460002bc645e47e8517b21099b0faec818\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1447934518 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1447934527 +0100\n\nMerge pull request #6900\n\n2cecb24 doc: change suite to trusty in gitian-building.md (Wladimir J. van der Laan)\n957c0fd gitian: make windows build deterministic (Wladimir J. van der Laan)\n2e31d74 gitian: use trusty for building (Wladimir J. van der Laan)\n0b416c6 depends: qt PIDLIST_ABSOLUTE patch (Wladimir J. van der Laan)\n9f251b7 devtools: add libraries for bitcoin-qt to symbol check (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c983d6fcb47bafb4b82529f512310ccaef076ca2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c983d6fcb47bafb4b82529f512310ccaef076ca2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c983d6fcb47bafb4b82529f512310ccaef076ca2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "52c563710ddd80a90c58205e866a42b01887ab63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52c563710ddd80a90c58205e866a42b01887ab63",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/52c563710ddd80a90c58205e866a42b01887ab63"
      },
      {
        "sha": "2cecb2460002bc645e47e8517b21099b0faec818",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cecb2460002bc645e47e8517b21099b0faec818",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2cecb2460002bc645e47e8517b21099b0faec818"
      }
    ],
    "stats": {
      "total": 129,
      "additions": 98,
      "deletions": 31
    },
    "files": [
      {
        "sha": "93acfcdda44246931d47541671e776c9ba6699e4",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 18,
        "deletions": 1,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c983d6fcb47bafb4b82529f512310ccaef076ca2/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c983d6fcb47bafb4b82529f512310ccaef076ca2/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=c983d6fcb47bafb4b82529f512310ccaef076ca2",
        "patch": "@@ -49,7 +49,24 @@\n READELF_CMD = os.getenv('READELF', '/usr/bin/readelf')\n CPPFILT_CMD = os.getenv('CPPFILT', '/usr/bin/c++filt')\n # Allowed NEEDED libraries\n-ALLOWED_LIBRARIES = {'librt.so.1','libpthread.so.0','libanl.so.1','libm.so.6','libgcc_s.so.1','libc.so.6','ld-linux-x86-64.so.2'}\n+ALLOWED_LIBRARIES = {\n+# bitcoind and bitcoin-qt\n+'libgcc_s.so.1', # GCC base support\n+'libc.so.6', # C library\n+'libpthread.so.0', # threading\n+'libanl.so.1', # DNS resolve\n+'libm.so.6', # math library\n+'librt.so.1', # real-time (clock)\n+'ld-linux-x86-64.so.2', # 64-bit dynamic linker\n+'ld-linux.so.2', # 32-bit dynamic linker\n+# bitcoin-qt only\n+'libX11-xcb.so.1', # part of X11\n+'libX11.so.6', # part of X11\n+'libxcb.so.1', # part of X11\n+'libfontconfig.so.1', # font support\n+'libfreetype.so.6', # font parsing\n+'libdl.so.2' # programming interface to dynamic linker\n+}\n \n class CPPFilt(object):\n     '''"
      },
      {
        "sha": "07c2ba98b182e5c329e834aa8d523a888fd5645f",
        "filename": "contrib/gitian-descriptors/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c983d6fcb47bafb4b82529f512310ccaef076ca2/contrib/gitian-descriptors/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c983d6fcb47bafb4b82529f512310ccaef076ca2/contrib/gitian-descriptors/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/README.md?ref=c983d6fcb47bafb4b82529f512310ccaef076ca2",
        "patch": "@@ -27,7 +27,7 @@ Once you've got the right hardware and software:\n \n     # Create base images\n     cd gitian-builder\n-    bin/make-base-vm --suite precise --arch amd64\n+    bin/make-base-vm --suite trusty --arch amd64\n     cd ..\n \n     # Get inputs (see doc/release-process.md for exact inputs needed and where to get them)"
      },
      {
        "sha": "0c3c439dd96316915584b7af780502b853bc72fe",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 4,
        "deletions": 13,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c983d6fcb47bafb4b82529f512310ccaef076ca2/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c983d6fcb47bafb4b82529f512310ccaef076ca2/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=c983d6fcb47bafb4b82529f512310ccaef076ca2",
        "patch": "@@ -2,20 +2,19 @@\n name: \"bitcoin-linux-0.12\"\n enable_cache: true\n suites:\n-- \"precise\"\n+- \"trusty\"\n architectures:\n - \"amd64\"\n packages: \n - \"g++-multilib\"\n - \"git-core\"\n - \"pkg-config\"\n-- \"autoconf2.13\"\n+- \"autoconf\"\n - \"libtool\"\n - \"automake\"\n - \"faketime\"\n - \"bsdmainutils\"\n - \"binutils-gold\"\n-- \"libstdc++6-4.6-pic\"\n reference_datetime: \"2015-06-01 00:00:00\"\n remotes:\n - \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n@@ -44,7 +43,7 @@ script: |\n   for prog in ${FAKETIME_PROGS}; do\n     echo '#!/bin/bash' > ${WRAP_DIR}/${prog}\n     echo \"REAL=\\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\\`\" >> ${WRAP_DIR}/${prog}\n-    echo 'export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${prog}\n+    echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${prog}\n     echo \"export FAKETIME=\\\"${REFERENCE_DATETIME}\\\"\" >> ${WRAP_DIR}/${prog}\n     echo \"\\$REAL \\$@\" >> $WRAP_DIR/${prog}\n     chmod +x ${WRAP_DIR}/${prog}\n@@ -55,7 +54,7 @@ script: |\n     for prog in ${FAKETIME_HOST_PROGS}; do\n         echo '#!/bin/bash' > ${WRAP_DIR}/${i}-${prog}\n         echo \"REAL=\\`which -a ${i}-${prog} | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\n-        echo 'export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}\n+        echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}\n         echo \"export FAKETIME=\\\"${REFERENCE_DATETIME}\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n         echo \"\\$REAL \\$@\" >> $WRAP_DIR/${i}-${prog}\n         chmod +x ${WRAP_DIR}/${i}-${prog}\n@@ -70,14 +69,6 @@ script: |\n     make ${MAKEOPTS} -C ${BASEPREFIX} HOST=\"${i}\"\n   done\n \n-  # Ubuntu precise hack: Not an issue in later versions.\n-  # Precise's libstdc++.a is non-pic. There's an optional libstdc++6-4.6-pic\n-  #   package which provides libstdc++_pic.a, but the linker can't find it.\n-  # Symlink it to a path that will be included in our link-line so that the\n-  # linker picks it up before the default libstdc++.a.\n-  # This is only necessary for 64bit.\n-  ln -s /usr/lib/gcc/x86_64-linux-gnu/4.6/libstdc++_pic.a ${BASEPREFIX}/x86_64-unknown-linux-gnu/lib/libstdc++.a\n-\n   # Create the release tarball using (arbitrarily) the first host\n   ./autogen.sh\n   ./configure --prefix=${BASEPREFIX}/`echo \"${HOSTS}\" | awk '{print $1;}'`"
      },
      {
        "sha": "aa9494b7ed69ee7d6ee18271dc6233c9a368e979",
        "filename": "contrib/gitian-descriptors/gitian-osx-signer.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c983d6fcb47bafb4b82529f512310ccaef076ca2/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c983d6fcb47bafb4b82529f512310ccaef076ca2/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx-signer.yml?ref=c983d6fcb47bafb4b82529f512310ccaef076ca2",
        "patch": "@@ -1,7 +1,7 @@\n ---\n name: \"bitcoin-dmg-signer\"\n suites:\n-- \"precise\"\n+- \"trusty\"\n architectures:\n - \"amd64\"\n packages:\n@@ -23,7 +23,7 @@ script: |\n   for prog in ${FAKETIME_PROGS}; do\n     echo '#!/bin/bash' > ${WRAP_DIR}/${prog}\n     echo \"REAL=\\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\\`\" >> ${WRAP_DIR}/${prog}\n-    echo 'export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${prog}\n+    echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${prog}\n     echo \"export FAKETIME=\\\"${REFERENCE_DATETIME}\\\"\" >> ${WRAP_DIR}/${prog}\n     echo \"\\$REAL \\$@\" >> $WRAP_DIR/${prog}\n     chmod +x ${WRAP_DIR}/${prog}"
      },
      {
        "sha": "9ac774c8a05b9f2592be0746930abfc77a5dcc57",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c983d6fcb47bafb4b82529f512310ccaef076ca2/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c983d6fcb47bafb4b82529f512310ccaef076ca2/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=c983d6fcb47bafb4b82529f512310ccaef076ca2",
        "patch": "@@ -2,14 +2,14 @@\n name: \"bitcoin-osx-0.12\"\n enable_cache: true\n suites:\n-- \"precise\"\n+- \"trusty\"\n architectures:\n - \"amd64\"\n packages: \n - \"g++\"\n - \"git-core\"\n - \"pkg-config\"\n-- \"autoconf2.13\"\n+- \"autoconf\"\n - \"libtool\"\n - \"automake\"\n - \"faketime\"\n@@ -49,7 +49,7 @@ script: |\n   for prog in ${FAKETIME_PROGS}; do\n     echo '#!/bin/bash' > ${WRAP_DIR}/${prog}\n     echo \"REAL=\\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\\`\" >> ${WRAP_DIR}/${prog}\n-    echo 'export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${prog}\n+    echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${prog}\n     echo \"export FAKETIME=\\\"${REFERENCE_DATETIME}\\\"\" >> ${WRAP_DIR}/${prog}\n     echo \"\\$REAL \\$@\" >> $WRAP_DIR/${prog}\n     chmod +x ${WRAP_DIR}/${prog}\n@@ -60,7 +60,7 @@ script: |\n     for prog in ${FAKETIME_HOST_PROGS}; do\n         echo '#!/bin/bash' > ${WRAP_DIR}/${i}-${prog}\n         echo \"REAL=\\`which -a ${i}-${prog} | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\n-        echo 'export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}\n+        echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}\n         echo \"export FAKETIME=\\\"${REFERENCE_DATETIME}\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n         echo \"\\$REAL \\$@\" >> $WRAP_DIR/${i}-${prog}\n         chmod +x ${WRAP_DIR}/${i}-${prog}"
      },
      {
        "sha": "a29d7ab4725765b227393f034043799267af03a6",
        "filename": "contrib/gitian-descriptors/gitian-win-signer.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c983d6fcb47bafb4b82529f512310ccaef076ca2/contrib/gitian-descriptors/gitian-win-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c983d6fcb47bafb4b82529f512310ccaef076ca2/contrib/gitian-descriptors/gitian-win-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win-signer.yml?ref=c983d6fcb47bafb4b82529f512310ccaef076ca2",
        "patch": "@@ -1,7 +1,7 @@\n ---\n name: \"bitcoin-win-signer\"\n suites:\n-- \"precise\"\n+- \"trusty\"\n architectures:\n - \"amd64\"\n packages:"
      },
      {
        "sha": "6bb482d45f373491752ffcf77a63d864eb5e8a70",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 28,
        "deletions": 4,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c983d6fcb47bafb4b82529f512310ccaef076ca2/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c983d6fcb47bafb4b82529f512310ccaef076ca2/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=c983d6fcb47bafb4b82529f512310ccaef076ca2",
        "patch": "@@ -2,14 +2,14 @@\n name: \"bitcoin-win-0.12\"\n enable_cache: true\n suites:\n-- \"precise\"\n+- \"trusty\"\n architectures:\n - \"amd64\"\n packages: \n - \"g++\"\n - \"git-core\"\n - \"pkg-config\"\n-- \"autoconf2.13\"\n+- \"autoconf\"\n - \"libtool\"\n - \"automake\"\n - \"faketime\"\n@@ -46,7 +46,7 @@ script: |\n   for prog in ${FAKETIME_PROGS}; do\n     echo '#!/bin/bash' > ${WRAP_DIR}/${prog}\n     echo \"REAL=\\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\\`\" >> ${WRAP_DIR}/${prog}\n-    echo 'export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${prog}\n+    echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${prog}\n     echo \"export FAKETIME=\\\"${REFERENCE_DATETIME}\\\"\" >> ${WRAP_DIR}/${prog}\n     echo \"\\$REAL \\$@\" >> $WRAP_DIR/${prog}\n     chmod +x ${WRAP_DIR}/${prog}\n@@ -57,12 +57,36 @@ script: |\n     for prog in ${FAKETIME_HOST_PROGS}; do\n         echo '#!/bin/bash' > ${WRAP_DIR}/${i}-${prog}\n         echo \"REAL=\\`which -a ${i}-${prog} | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\n-        echo 'export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}\n+        echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}\n         echo \"export FAKETIME=\\\"${REFERENCE_DATETIME}\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n         echo \"\\$REAL \\$@\" >> $WRAP_DIR/${i}-${prog}\n         chmod +x ${WRAP_DIR}/${i}-${prog}\n     done\n   done\n+\n+  # Create per-host linker wrapper\n+  # This is only needed for trusty, as the mingw linker leaks a few bytes of\n+  # heap, causing non-determinism. See discussion in https://github.com/bitcoin/bitcoin/pull/6900\n+  for i in $HOSTS; do\n+    mkdir -p ${WRAP_DIR}/${i}\n+    for prog in collect2; do\n+        echo '#!/bin/bash' > ${WRAP_DIR}/${i}/${prog}\n+        REAL=$(${i}-gcc -print-prog-name=${prog})\n+        echo \"export MALLOC_PERTURB_=255\" >> ${WRAP_DIR}/${i}/${prog}\n+        echo \"${REAL} \\$@\" >> $WRAP_DIR/${i}/${prog}\n+        chmod +x ${WRAP_DIR}/${i}/${prog}\n+    done\n+    for prog in gcc g++; do\n+        echo '#!/bin/bash' > ${WRAP_DIR}/${i}-${prog}\n+        echo \"REAL=\\`which -a ${i}-${prog} | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\n+        echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}\n+        echo \"export FAKETIME=\\\"${REFERENCE_DATETIME}\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n+        echo \"export COMPILER_PATH=${WRAP_DIR}/${i}\" >> ${WRAP_DIR}/${i}-${prog}\n+        echo \"\\$REAL \\$@\" >> $WRAP_DIR/${i}-${prog}\n+        chmod +x ${WRAP_DIR}/${i}-${prog}\n+    done\n+  done\n+\n   export PATH=${WRAP_DIR}:${PATH}\n \n   cd bitcoin"
      },
      {
        "sha": "901b761fde1425b367f0b93483e2b2b003fa9203",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c983d6fcb47bafb4b82529f512310ccaef076ca2/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c983d6fcb47bafb4b82529f512310ccaef076ca2/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=c983d6fcb47bafb4b82529f512310ccaef076ca2",
        "patch": "@@ -8,7 +8,7 @@ $(package)_dependencies=openssl\n $(package)_linux_dependencies=freetype fontconfig dbus libxcb libX11 xproto libXext\n $(package)_build_subdir=qtbase\n $(package)_qt_libs=corelib network widgets gui plugins testlib\n-$(package)_patches=mac-qmake.conf fix-xcb-include-order.patch mingw-uuidof.patch\n+$(package)_patches=mac-qmake.conf fix-xcb-include-order.patch mingw-uuidof.patch pidlist_absolute.patch\n \n $(package)_qttranslations_file_name=qttranslations-$($(package)_suffix)\n $(package)_qttranslations_sha256_hash=c4bd6db6e426965c6f8824c54e81f68bbd61e2bae1bcadc328c6e81c45902a0d\n@@ -122,9 +122,6 @@ endef\n define $(package)_preprocess_cmds\n   sed -i.old \"s|updateqm.commands = \\$$$$\\$$$$LRELEASE|updateqm.commands = $($(package)_extract_dir)/qttools/bin/lrelease|\" qttranslations/translations/translations.pro && \\\n   sed -i.old \"s/src_plugins.depends = src_sql src_xml src_network/src_plugins.depends = src_xml src_network/\" qtbase/src/src.pro && \\\n-  sed -i.old \"s/PIDLIST_ABSOLUTE/ITEMIDLIST */\" qtbase/src/plugins/platforms/windows/qwindowscontext.h &&\\\n-  sed -i.old \"s/PIDLIST_ABSOLUTE/ITEMIDLIST */\" qtbase/src/plugins/platforms/windows/qwindowsdialoghelpers.cpp &&\\\n-  sed -i.old \"s/PCIDLIST_ABSOLUTE/const ITEMIDLIST */\" qtbase/src/plugins/platforms/windows/qwindowscontext.h &&\\\n   sed -i.old \"s|X11/extensions/XIproto.h|X11/X.h|\" qtbase/src/plugins/platforms/xcb/qxcbxsettings.cpp && \\\n   sed -i.old 's/if \\[ \"$$$$XPLATFORM_MAC\" = \"yes\" \\]; then xspecvals=$$$$(macSDKify/if \\[ \"$$$$BUILD_ON_MAC\" = \"yes\" \\]; then xspecvals=$$$$(macSDKify/' qtbase/configure && \\\n   mkdir -p qtbase/mkspecs/macx-clang-linux &&\\\n@@ -134,6 +131,7 @@ define $(package)_preprocess_cmds\n   cp -f $($(package)_patch_dir)/mac-qmake.conf qtbase/mkspecs/macx-clang-linux/qmake.conf && \\\n   patch -p1 < $($(package)_patch_dir)/fix-xcb-include-order.patch && \\\n   patch -p1 < $($(package)_patch_dir)/mingw-uuidof.patch && \\\n+  patch -p1 < $($(package)_patch_dir)/pidlist_absolute.patch && \\\n   echo \"QMAKE_CFLAGS     += $($(package)_cflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   echo \"QMAKE_CXXFLAGS   += $($(package)_cxxflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   echo \"QMAKE_LFLAGS     += $($(package)_ldflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\"
      },
      {
        "sha": "0b49c050dcc1f37fc86d289ecd7bf9b1c2607206",
        "filename": "depends/patches/qt/pidlist_absolute.patch",
        "status": "added",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c983d6fcb47bafb4b82529f512310ccaef076ca2/depends/patches/qt/pidlist_absolute.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c983d6fcb47bafb4b82529f512310ccaef076ca2/depends/patches/qt/pidlist_absolute.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/pidlist_absolute.patch?ref=c983d6fcb47bafb4b82529f512310ccaef076ca2",
        "patch": "@@ -0,0 +1,37 @@\n+diff -dur old/qtbase/src/plugins/platforms/windows/qwindowscontext.h new/qtbase/src/plugins/platforms/windows/qwindowscontext.h\n+--- old/qtbase/src/plugins/platforms/windows/qwindowscontext.h\t2015-06-29 22:04:40.000000000 +0200\n++++ new/qtbase/src/plugins/platforms/windows/qwindowscontext.h\t2015-11-01 12:55:59.751234846 +0100\n+@@ -124,10 +124,18 @@\n+     inline void init();\n+ \n+     typedef HRESULT (WINAPI *SHCreateItemFromParsingName)(PCWSTR, IBindCtx *, const GUID&, void **);\n++#if defined(Q_CC_MINGW) && (!defined(__MINGW64_VERSION_MAJOR) || __MINGW64_VERSION_MAJOR < 3)\n++    typedef HRESULT (WINAPI *SHGetKnownFolderIDList)(const GUID &, DWORD, HANDLE, ITEMIDLIST **);\n++#else\n+     typedef HRESULT (WINAPI *SHGetKnownFolderIDList)(const GUID &, DWORD, HANDLE, PIDLIST_ABSOLUTE *);\n++#endif\n+     typedef HRESULT (WINAPI *SHGetStockIconInfo)(int , int , _SHSTOCKICONINFO *);\n+     typedef HRESULT (WINAPI *SHGetImageList)(int, REFIID , void **);\n++#if defined(Q_CC_MINGW) && (!defined(__MINGW64_VERSION_MAJOR) || __MINGW64_VERSION_MAJOR < 3)\n++    typedef HRESULT (WINAPI *SHCreateItemFromIDList)(const ITEMIDLIST *, REFIID, void **);\n++#else\n+     typedef HRESULT (WINAPI *SHCreateItemFromIDList)(PCIDLIST_ABSOLUTE, REFIID, void **);\n++#endif\n+ \n+     SHCreateItemFromParsingName sHCreateItemFromParsingName;\n+     SHGetKnownFolderIDList sHGetKnownFolderIDList;\n+diff -dur old/qtbase/src/plugins/platforms/windows/qwindowsdialoghelpers.cpp new/qtbase/src/plugins/platforms/windows/qwindowsdialoghelpers.cpp\n+--- old/qtbase/src/plugins/platforms/windows/qwindowsdialoghelpers.cpp\t2015-06-29 22:04:40.000000000 +0200\n++++ new/qtbase/src/plugins/platforms/windows/qwindowsdialoghelpers.cpp\t2015-11-01 13:41:09.503149772 +0100\n+@@ -1008,7 +1008,11 @@\n+             qWarning() << __FUNCTION__ << \": Invalid CLSID: \" << url.path();\n+             return Q_NULLPTR;\n+         }\n++#if defined(Q_CC_MINGW) && (!defined(__MINGW64_VERSION_MAJOR) || __MINGW64_VERSION_MAJOR < 3)\n++        ITEMIDLIST *idList;\n++#else\n+         PIDLIST_ABSOLUTE idList;\n++#endif\n+         HRESULT hr = QWindowsContext::shell32dll.sHGetKnownFolderIDList(uuid, 0, 0, &idList);\n+         if (FAILED(hr)) {\n+             qErrnoWarning(\"%s: SHGetKnownFolderIDList(%s)) failed\", __FUNCTION__, qPrintable(url.toString()));"
      },
      {
        "sha": "019e8516962af7bce0553be679cac3ceb5fdd6c6",
        "filename": "doc/gitian-building.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c983d6fcb47bafb4b82529f512310ccaef076ca2/doc/gitian-building.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c983d6fcb47bafb4b82529f512310ccaef076ca2/doc/gitian-building.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building.md?ref=c983d6fcb47bafb4b82529f512310ccaef076ca2",
        "patch": "@@ -320,7 +320,7 @@ Execute the following as user `debian`:\n \n ```bash\n cd gitian-builder\n-bin/make-base-vm --lxc --arch amd64 --suite precise\n+bin/make-base-vm --lxc --arch amd64 --suite trusty\n ```\n \n There will be a lot of warnings printed during the build of the image. These can be ignored."
      }
    ]
  },
  {
    "sha": "5945819717eb842df28cd9291a226d0505cb49d0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OTQ1ODE5NzE3ZWI4NDJkZjI4Y2Q5MjkxYTIyNmQwNTA1Y2I0OWQw",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-17T21:00:19Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-20T02:28:01Z"
      },
      "message": "Remove default arguments for CTxMemPoolEntry()",
      "tree": {
        "sha": "674dc0b1b890b91843b57c2bf5676ccd7bfcf8e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/674dc0b1b890b91843b57c2bf5676ccd7bfcf8e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5945819717eb842df28cd9291a226d0505cb49d0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5945819717eb842df28cd9291a226d0505cb49d0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5945819717eb842df28cd9291a226d0505cb49d0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5945819717eb842df28cd9291a226d0505cb49d0/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "96b802510da0750aabc4f3ba6750cb5ce76f2b8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96b802510da0750aabc4f3ba6750cb5ce76f2b8c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/96b802510da0750aabc4f3ba6750cb5ce76f2b8c"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e1ecad36020521b25fad850d9845e196baad3a00",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5945819717eb842df28cd9291a226d0505cb49d0/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5945819717eb842df28cd9291a226d0505cb49d0/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=5945819717eb842df28cd9291a226d0505cb49d0",
        "patch": "@@ -78,7 +78,7 @@ class CTxMemPoolEntry\n \n public:\n     CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n-                    int64_t _nTime, double _dPriority, unsigned int _nHeight, bool poolHasNoInputsOf = false);\n+                    int64_t _nTime, double _dPriority, unsigned int _nHeight, bool poolHasNoInputsOf);\n     CTxMemPoolEntry(const CTxMemPoolEntry& other);\n \n     const CTransaction& GetTx() const { return this->tx; }"
      }
    ]
  },
  {
    "sha": "71f1d9fd4ae2c2fc90d5487bdf2096f9eb5898d9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MWYxZDlmZDRhZTJjMmZjOTBkNTQ4N2JkZjIwOTZmOWViNTg5OGQ5",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-06-30T15:14:24Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-20T02:28:01Z"
      },
      "message": "Modify variable names for entry height and priority",
      "tree": {
        "sha": "cbd1ea0d8de0a4216475414daf7d479187fa657a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cbd1ea0d8de0a4216475414daf7d479187fa657a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71f1d9fd4ae2c2fc90d5487bdf2096f9eb5898d9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71f1d9fd4ae2c2fc90d5487bdf2096f9eb5898d9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/71f1d9fd4ae2c2fc90d5487bdf2096f9eb5898d9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71f1d9fd4ae2c2fc90d5487bdf2096f9eb5898d9/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5945819717eb842df28cd9291a226d0505cb49d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5945819717eb842df28cd9291a226d0505cb49d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5945819717eb842df28cd9291a226d0505cb49d0"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "ea3aad34a30cf580d8f7173ec993e6f2cac90c3a",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71f1d9fd4ae2c2fc90d5487bdf2096f9eb5898d9/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71f1d9fd4ae2c2fc90d5487bdf2096f9eb5898d9/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=71f1d9fd4ae2c2fc90d5487bdf2096f9eb5898d9",
        "patch": "@@ -19,9 +19,9 @@\n using namespace std;\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n-                                 int64_t _nTime, double _dPriority,\n-                                 unsigned int _nHeight, bool poolHasNoInputsOf):\n-    tx(_tx), nFee(_nFee), nTime(_nTime), dPriority(_dPriority), nHeight(_nHeight),\n+                                 int64_t _nTime, double _entryPriority,\n+                                 unsigned int _entryHeight, bool poolHasNoInputsOf):\n+    tx(_tx), nFee(_nFee), nTime(_nTime), entryPriority(_entryPriority), entryHeight(_entryHeight),\n     hadNoDependencies(poolHasNoInputsOf)\n {\n     nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n@@ -42,8 +42,8 @@ double\n CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n {\n     CAmount nValueIn = tx.GetValueOut()+nFee;\n-    double deltaPriority = ((double)(currentHeight-nHeight)*nValueIn)/nModSize;\n-    double dResult = dPriority + deltaPriority;\n+    double deltaPriority = ((double)(currentHeight-entryHeight)*nValueIn)/nModSize;\n+    double dResult = entryPriority + deltaPriority;\n     return dResult;\n }\n "
      },
      {
        "sha": "e189e2e46357df04b8a9c52e0e2f8cbbff809019",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71f1d9fd4ae2c2fc90d5487bdf2096f9eb5898d9/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71f1d9fd4ae2c2fc90d5487bdf2096f9eb5898d9/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=71f1d9fd4ae2c2fc90d5487bdf2096f9eb5898d9",
        "patch": "@@ -63,8 +63,8 @@ class CTxMemPoolEntry\n     size_t nModSize; //! ... and modified size for priority\n     size_t nUsageSize; //! ... and total memory usage\n     int64_t nTime; //! Local time when entering the mempool\n-    double dPriority; //! Priority when entering the mempool\n-    unsigned int nHeight; //! Chain height when entering the mempool\n+    double entryPriority; //! Priority when entering the mempool\n+    unsigned int entryHeight; //! Chain height when entering the mempool\n     bool hadNoDependencies; //! Not dependent on any other txs when it entered the mempool\n \n     // Information about descendants of this transaction that are in the\n@@ -78,15 +78,15 @@ class CTxMemPoolEntry\n \n public:\n     CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n-                    int64_t _nTime, double _dPriority, unsigned int _nHeight, bool poolHasNoInputsOf);\n+                    int64_t _nTime, double _entryPriority, unsigned int _entryHeight, bool poolHasNoInputsOf);\n     CTxMemPoolEntry(const CTxMemPoolEntry& other);\n \n     const CTransaction& GetTx() const { return this->tx; }\n     double GetPriority(unsigned int currentHeight) const;\n     const CAmount& GetFee() const { return nFee; }\n     size_t GetTxSize() const { return nTxSize; }\n     int64_t GetTime() const { return nTime; }\n-    unsigned int GetHeight() const { return nHeight; }\n+    unsigned int GetHeight() const { return entryHeight; }\n     bool WasClearAtEntry() const { return hadNoDependencies; }\n     size_t DynamicMemoryUsage() const { return nUsageSize; }\n "
      }
    ]
  },
  {
    "sha": "c0353064ddf71ad103bd19f6e7c10ff8e240ac46",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMDM1MzA2NGRkZjcxYWQxMDNiZDE5ZjZlN2MxMGZmOGUyNDBhYzQ2",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-13T15:05:21Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-20T02:44:35Z"
      },
      "message": "Change GetPriority calculation.\n\nCompute the value of inputs that already are in the chain at time of mempool entry and only increase priority due to aging for those inputs.  This effectively changes the CTxMemPoolEntry's GetPriority calculation from an upper bound to a lower bound.",
      "tree": {
        "sha": "9fec6d8c6ddb79925d90b2d12582e2dee3380de6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9fec6d8c6ddb79925d90b2d12582e2dee3380de6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c0353064ddf71ad103bd19f6e7c10ff8e240ac46",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0353064ddf71ad103bd19f6e7c10ff8e240ac46",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c0353064ddf71ad103bd19f6e7c10ff8e240ac46",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0353064ddf71ad103bd19f6e7c10ff8e240ac46/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "71f1d9fd4ae2c2fc90d5487bdf2096f9eb5898d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71f1d9fd4ae2c2fc90d5487bdf2096f9eb5898d9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71f1d9fd4ae2c2fc90d5487bdf2096f9eb5898d9"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 37,
      "deletions": 16
    },
    "files": [
      {
        "sha": "723e11470836006ff03b384792b75b007894c37f",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0353064ddf71ad103bd19f6e7c10ff8e240ac46/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0353064ddf71ad103bd19f6e7c10ff8e240ac46/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=c0353064ddf71ad103bd19f6e7c10ff8e240ac46",
        "patch": "@@ -243,8 +243,9 @@ bool CCoinsViewCache::HaveInputs(const CTransaction& tx) const\n     return true;\n }\n \n-double CCoinsViewCache::GetPriority(const CTransaction &tx, int nHeight) const\n+double CCoinsViewCache::GetPriority(const CTransaction &tx, int nHeight, CAmount &inChainInputValue) const\n {\n+    inChainInputValue = 0;\n     if (tx.IsCoinBase())\n         return 0.0;\n     double dResult = 0.0;\n@@ -253,8 +254,9 @@ double CCoinsViewCache::GetPriority(const CTransaction &tx, int nHeight) const\n         const CCoins* coins = AccessCoins(txin.prevout.hash);\n         assert(coins);\n         if (!coins->IsAvailable(txin.prevout.n)) continue;\n-        if (coins->nHeight < nHeight) {\n+        if (coins->nHeight <= nHeight) {\n             dResult += coins->vout[txin.prevout.n].nValue * (nHeight-coins->nHeight);\n+            inChainInputValue += coins->vout[txin.prevout.n].nValue;\n         }\n     }\n     return tx.ComputePriority(dResult);"
      },
      {
        "sha": "d174422100d3f424bce348fc77271197d17affc8",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0353064ddf71ad103bd19f6e7c10ff8e240ac46/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0353064ddf71ad103bd19f6e7c10ff8e240ac46/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=c0353064ddf71ad103bd19f6e7c10ff8e240ac46",
        "patch": "@@ -456,8 +456,12 @@ class CCoinsViewCache : public CCoinsViewBacked\n     //! Check whether all prevouts of the transaction are present in the UTXO set represented by this view\n     bool HaveInputs(const CTransaction& tx) const;\n \n-    //! Return priority of tx at height nHeight\n-    double GetPriority(const CTransaction &tx, int nHeight) const;\n+    /**\n+     * Return priority of tx at height nHeight. Also calculate the sum of the values of the inputs\n+     * that are already in the chain.  These are the inputs that will age and increase priority as\n+     * new blocks are added to the chain.\n+     */\n+    double GetPriority(const CTransaction &tx, int nHeight, CAmount &inChainInputValue) const;\n \n     const CTxOut &GetOutputFor(const CTxIn& input) const;\n "
      },
      {
        "sha": "55b0517349e44f7ef86cf8eb9b5e404e395a25b7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0353064ddf71ad103bd19f6e7c10ff8e240ac46/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0353064ddf71ad103bd19f6e7c10ff8e240ac46/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c0353064ddf71ad103bd19f6e7c10ff8e240ac46",
        "patch": "@@ -950,9 +950,10 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         CAmount nValueOut = tx.GetValueOut();\n         CAmount nFees = nValueIn-nValueOut;\n-        double dPriority = view.GetPriority(tx, chainActive.Height());\n+        CAmount inChainInputValue;\n+        double dPriority = view.GetPriority(tx, chainActive.Height(), inChainInputValue);\n \n-        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx));\n+        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx), inChainInputValue);\n         unsigned int nSize = entry.GetTxSize();\n \n         // Don't accept it if it can't get into a block\n@@ -964,7 +965,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CAmount mempoolRejectFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n         if (mempoolRejectFee > 0 && nFees < mempoolRejectFee) {\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nFees, mempoolRejectFee));\n-        } else if (GetBoolArg(\"-relaypriority\", DEFAULT_RELAYPRIORITY) && nFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1))) {\n+        } else if (GetBoolArg(\"-relaypriority\", DEFAULT_RELAYPRIORITY) && nFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(entry.GetPriority(chainActive.Height() + 1))) {\n             // Require that free transactions have sufficient priority to be mined in the next block.\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n         }"
      },
      {
        "sha": "644c3da213a99d54835c26dccf82e298cfeb6c32",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0353064ddf71ad103bd19f6e7c10ff8e240ac46/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0353064ddf71ad103bd19f6e7c10ff8e240ac46/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=c0353064ddf71ad103bd19f6e7c10ff8e240ac46",
        "patch": "@@ -196,7 +196,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n \n     // Test that if the mempool is limited, estimateSmartFee won't return a value below the mempool min fee\n     // and that estimateSmartPriority returns essentially an infinite value\n-    mpool.addUnchecked(tx.GetHash(),  CTxMemPoolEntry(tx, feeV[0][5], GetTime(), priV[1][5], blocknum, mpool.HasNoInputsOf(tx)));\n+    mpool.addUnchecked(tx.GetHash(),  entry.Fee(feeV[0][5]).Time(GetTime()).Priority(priV[1][5]).Height(blocknum).FromTx(tx, &mpool));\n     // evict that transaction which should set a mempool min fee of minRelayTxFee + feeV[0][5]\n     mpool.TrimToSize(1);\n     BOOST_CHECK(mpool.GetMinFee(1).GetFeePerK() > feeV[0][5]);"
      },
      {
        "sha": "351870014de1f901d85fc7290359455c3e4453ba",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0353064ddf71ad103bd19f6e7c10ff8e240ac46/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0353064ddf71ad103bd19f6e7c10ff8e240ac46/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=c0353064ddf71ad103bd19f6e7c10ff8e240ac46",
        "patch": "@@ -144,8 +144,13 @@ TestChain100Setup::~TestChain100Setup()\n \n \n CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(CMutableTransaction &tx, CTxMemPool *pool) {\n-    return CTxMemPoolEntry(tx, nFee, nTime, dPriority, nHeight,\n-                           pool ? pool->HasNoInputsOf(tx) : hadNoDependencies);\n+    CTransaction txn(tx);\n+    bool hasNoDependencies = pool ? pool->HasNoInputsOf(tx) : hadNoDependencies;\n+    // Hack to assume either its completely dependent on other mempool txs or not at all\n+    CAmount inChainValue = hasNoDependencies ? txn.GetValueOut() : 0;\n+\n+    return CTxMemPoolEntry(txn, nFee, nTime, dPriority, nHeight,\n+                           hasNoDependencies, inChainValue);\n }\n \n void Shutdown(void* parg)"
      },
      {
        "sha": "6d1df0b3d1452c43296bc3018782da2a54f9bec8",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0353064ddf71ad103bd19f6e7c10ff8e240ac46/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0353064ddf71ad103bd19f6e7c10ff8e240ac46/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=c0353064ddf71ad103bd19f6e7c10ff8e240ac46",
        "patch": "@@ -19,10 +19,10 @@\n using namespace std;\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n-                                 int64_t _nTime, double _entryPriority,\n-                                 unsigned int _entryHeight, bool poolHasNoInputsOf):\n+                                 int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n+                                 bool poolHasNoInputsOf, CAmount _inChainInputValue):\n     tx(_tx), nFee(_nFee), nTime(_nTime), entryPriority(_entryPriority), entryHeight(_entryHeight),\n-    hadNoDependencies(poolHasNoInputsOf)\n+    hadNoDependencies(poolHasNoInputsOf), inChainInputValue(_inChainInputValue)\n {\n     nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n     nModSize = tx.CalculateModifiedSize(nTxSize);\n@@ -31,6 +31,8 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n     nCountWithDescendants = 1;\n     nSizeWithDescendants = nTxSize;\n     nFeesWithDescendants = nFee;\n+    CAmount nValueIn = tx.GetValueOut()+nFee;\n+    assert(inChainInputValue <= nValueIn);\n }\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)\n@@ -41,9 +43,10 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)\n double\n CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n {\n-    CAmount nValueIn = tx.GetValueOut()+nFee;\n-    double deltaPriority = ((double)(currentHeight-entryHeight)*nValueIn)/nModSize;\n+    double deltaPriority = ((double)(currentHeight-entryHeight)*inChainInputValue)/nModSize;\n     double dResult = entryPriority + deltaPriority;\n+    if (dResult < 0) // This should only happen if it was called with a height below entry height\n+        dResult = 0;\n     return dResult;\n }\n "
      },
      {
        "sha": "c470bbe28f7d608bde1789dbdb904ff8cdf60c6a",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0353064ddf71ad103bd19f6e7c10ff8e240ac46/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0353064ddf71ad103bd19f6e7c10ff8e240ac46/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=c0353064ddf71ad103bd19f6e7c10ff8e240ac46",
        "patch": "@@ -66,6 +66,7 @@ class CTxMemPoolEntry\n     double entryPriority; //! Priority when entering the mempool\n     unsigned int entryHeight; //! Chain height when entering the mempool\n     bool hadNoDependencies; //! Not dependent on any other txs when it entered the mempool\n+    CAmount inChainInputValue; //! Sum of all txin values that are already in blockchain\n \n     // Information about descendants of this transaction that are in the\n     // mempool; if we remove this transaction we must remove all of these\n@@ -78,10 +79,15 @@ class CTxMemPoolEntry\n \n public:\n     CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n-                    int64_t _nTime, double _entryPriority, unsigned int _entryHeight, bool poolHasNoInputsOf);\n+                    int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n+                    bool poolHasNoInputsOf, CAmount _inChainInputValue);\n     CTxMemPoolEntry(const CTxMemPoolEntry& other);\n \n     const CTransaction& GetTx() const { return this->tx; }\n+    /**\n+     * Fast calculation of lower bound of current priority as update\n+     * from entry priority. Only inputs that were originally in-chain will age.\n+     */\n     double GetPriority(unsigned int currentHeight) const;\n     const CAmount& GetFee() const { return nFee; }\n     size_t GetTxSize() const { return nTxSize; }"
      }
    ]
  },
  {
    "sha": "b171c69c6010271fe793db1f84897b5fbc6d8dc6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTcxYzY5YzYwMTAyNzFmZTc5M2RiMWY4NDg5N2I1ZmJjNmQ4ZGM2",
    "commit": {
      "author": {
        "name": "Michael Ford",
        "email": "fanquake@users.noreply.github.com",
        "date": "2015-11-17T14:14:36Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2015-11-20T04:55:50Z"
      },
      "message": "[doc] Update OS X build notes for new qt5 configure\n\nYou no longer need to explicitly pass qt5 to configure, as it will now choose qt5 over qt4 if both are installed.\n\n[skip-ci]",
      "tree": {
        "sha": "60c82b8e9c59985b5ecab33fdd1b3c92eecf2f49",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/60c82b8e9c59985b5ecab33fdd1b3c92eecf2f49"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b171c69c6010271fe793db1f84897b5fbc6d8dc6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b171c69c6010271fe793db1f84897b5fbc6d8dc6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b171c69c6010271fe793db1f84897b5fbc6d8dc6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b171c69c6010271fe793db1f84897b5fbc6d8dc6/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eac53ec992018a14db6f8a65a7ce333a4c8284cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eac53ec992018a14db6f8a65a7ce333a4c8284cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eac53ec992018a14db6f8a65a7ce333a4c8284cc"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 11,
      "deletions": 9
    },
    "files": [
      {
        "sha": "c3cb1b78917d2e61901a7f6a9c3e17392bde2d72",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b171c69c6010271fe793db1f84897b5fbc6d8dc6/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b171c69c6010271fe793db1f84897b5fbc6d8dc6/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=b171c69c6010271fe793db1f84897b5fbc6d8dc6",
        "patch": "@@ -5,7 +5,7 @@ This guide will show you how to build bitcoind (headless client) for OS X.\n Notes\n -----\n \n-* Tested on OS X 10.7 through 10.10 on 64-bit Intel processors only.\n+* Tested on OS X 10.7 through 10.11 on 64-bit Intel processors only.\n \n * All of the commands should be executed in a Terminal application. The\n built-in one is located in `/Applications/Utilities`.\n@@ -24,7 +24,7 @@ be re-done or updated every time Xcode is updated.\n You will also need to install [Homebrew](http://brew.sh) in order to install library\n dependencies.\n \n-The installation of the actual dependencies is covered in the Instructions\n+The installation of the actual dependencies is covered in the instructions\n sections below.\n \n Instructions: Homebrew\n@@ -36,17 +36,19 @@ Instructions: Homebrew\n \n NOTE: Building with Qt4 is still supported, however, could result in a broken UI. As such, building with Qt5 is recommended.\n \n-### Building `bitcoind`\n+### Building `bitcoin`\n \n 1. Clone the GitHub tree to get the source code and go into the directory.\n \n         git clone https://github.com/bitcoin/bitcoin.git\n         cd bitcoin\n \n-2.  Build bitcoind:\n+2.  Build bitcoin-core:\n+    This will configure and build the headless bitcoin binaries as well as the gui (if Qt is found).\n+    You can disable the gui build by passing `--without-gui` to configure.\n \n         ./autogen.sh\n-        ./configure --with-gui=qt5\n+        ./configure\n         make\n \n 3.  It is also a good idea to build and run the unit tests:\n@@ -60,10 +62,10 @@ NOTE: Building with Qt4 is still supported, however, could result in a broken UI\n Use Qt Creator as IDE\n ------------------------\n You can use Qt Creator as IDE, for debugging and for manipulating forms, etc.\n-Download Qt Creator from http://www.qt.io/download/. Download the \"community edition\" and only install Qt Creator (uncheck the rest during the installation process).\n+Download Qt Creator from https://www.qt.io/download/. Download the \"community edition\" and only install Qt Creator (uncheck the rest during the installation process).\n \n 1. Make sure you installed everything through Homebrew mentioned above\n-2. Do a proper ./configure --with-gui=qt5 --enable-debug\n+2. Do a proper ./configure --enable-debug\n 3. In Qt Creator do \"New Project\" -> Import Project -> Import Existing Project\n 4. Enter \"bitcoin-qt\" as project name, enter src/qt as location\n 5. Leave the file selection as it is\n@@ -79,7 +81,7 @@ You can ignore this section if you are building `bitcoind` for your own use.\n \n bitcoind/bitcoin-cli binaries are not included in the Bitcoin-Qt.app bundle.\n \n-If you are building `bitcoind` or `Bitcoin-Qt` for others, your build machine should be set up\n+If you are building `bitcoind` or `Bitcoin Core` for others, your build machine should be set up\n as follows for maximum compatibility:\n \n All dependencies should be compiled with these flags:\n@@ -88,7 +90,7 @@ All dependencies should be compiled with these flags:\n  -arch x86_64\n  -isysroot $(xcode-select --print-path)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk\n \n-Once dependencies are compiled, see [doc/release-process.md](release-process.md) for how the Bitcoin-Qt.app\n+Once dependencies are compiled, see [doc/release-process.md](release-process.md) for how the Bitcoin Core\n bundle is packaged and signed to create the .dmg disk image that is distributed.\n \n Running"
      }
    ]
  },
  {
    "sha": "a1bfca80521ee99d70bc19a797484275d84e136f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMWJmY2E4MDUyMWVlOTlkNzBiYzE5YTc5NzQ4NDI3NWQ4NGUxMzZm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-20T07:35:25Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-20T07:35:29Z"
      },
      "message": "Merge pull request #7059\n\n2798e0b add powerpc build support for openssl lib (daniel)",
      "tree": {
        "sha": "6e0f95893f79685ed0d43839922470812e7afc2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e0f95893f79685ed0d43839922470812e7afc2a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1bfca80521ee99d70bc19a797484275d84e136f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWTs1BAAoJEHSBCwEjRsmm40YH+gKlRdpapKPUV9z6gl6v/L+s\nF4cjYUGzSG8BhrfdPudAZqx7qqs8fRdPbZqaIplNAXvyjO0ZOHXGNNy3CRD2cwjd\njkBXbS/7wsJfTEYKp5ESCz6ffuctTvcvyPxhNP+IMF15IZcLTBDrax59MCy1/cyx\nYpo1nyc1RAlWSfj/BJG+lE859yNE/byQ3ibvf+dKGeKyW9OZETabemfKjQgbodWe\n7E3XiRL4FIcXBBTNmz5x1JOzqU14FT2vQLho4HWRA2OhsqabrD6H2sRZcMTfZC4z\n4/6hDOnuUNFpUPEiU4h1/Krj8TpfwNfqD4PsY10T8EL6d81hdkw5h3QdcxxFboA=\n=myAs\n-----END PGP SIGNATURE-----",
        "payload": "tree 6e0f95893f79685ed0d43839922470812e7afc2a\nparent c983d6fcb47bafb4b82529f512310ccaef076ca2\nparent 2798e0b0d2e277ff611d2731e2746c8959bcd18c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448004925 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448004929 +0100\n\nMerge pull request #7059\n\n2798e0b add powerpc build support for openssl lib (daniel)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1bfca80521ee99d70bc19a797484275d84e136f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a1bfca80521ee99d70bc19a797484275d84e136f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1bfca80521ee99d70bc19a797484275d84e136f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c983d6fcb47bafb4b82529f512310ccaef076ca2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c983d6fcb47bafb4b82529f512310ccaef076ca2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c983d6fcb47bafb4b82529f512310ccaef076ca2"
      },
      {
        "sha": "2798e0b0d2e277ff611d2731e2746c8959bcd18c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2798e0b0d2e277ff611d2731e2746c8959bcd18c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2798e0b0d2e277ff611d2731e2746c8959bcd18c"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c6452820a2de8ce9194fd0bfd560eb11451f7c6d",
        "filename": "depends/packages/openssl.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1bfca80521ee99d70bc19a797484275d84e136f/depends/packages/openssl.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1bfca80521ee99d70bc19a797484275d84e136f/depends/packages/openssl.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/openssl.mk?ref=a1bfca80521ee99d70bc19a797484275d84e136f",
        "patch": "@@ -17,6 +17,7 @@ $(package)_config_opts_arm_linux=linux-generic32\n $(package)_config_opts_aarch64_linux=linux-generic64\n $(package)_config_opts_mipsel_linux=linux-generic32\n $(package)_config_opts_mips_linux=linux-generic32\n+$(package)_config_opts_powerpc_linux=linux-generic32\n $(package)_config_opts_x86_64_darwin=darwin64-x86_64-cc\n $(package)_config_opts_x86_64_mingw32=mingw64\n $(package)_config_opts_i686_mingw32=mingw"
      }
    ]
  },
  {
    "sha": "c197798d1b7364e8225beaaa716399441288203e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMTk3Nzk4ZDFiNzM2NGU4MjI1YmVhYWE3MTYzOTk0NDEyODgyMDNl",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-09T10:45:07Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-20T07:40:43Z"
      },
      "message": "[Qt] simple mempool info in debug window",
      "tree": {
        "sha": "56a9c09e5a07ce31295486c7411b56ddcebe4a39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/56a9c09e5a07ce31295486c7411b56ddcebe4a39"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c197798d1b7364e8225beaaa716399441288203e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWTs58AAoJECnUvLZBb1PswqYQAJCt+bFYS8x7EZn/+VQXPa1d\nntpdoJ0KfiFeKJQm2KcRpk1y5a65q2pwow5id+8ws/7HDUP+onjKXIFRPLNt2eiA\nwPOLdZvTKMSqLWyLjn2usc4/KrGfDpFIQ8Qw8hleL3OEIJYzPul7e3FVtsws+tw/\nE4gqtDV/MRc1ZyUlAOH8C2AzkMxirnLoGuU2EsO+NLkE3KDLlkrib4Cw2j3HCWzg\ny3Cmq/m0H0UDfPBs/ZXwk7loyFN2KOfVIe+IDUiM9x9eYxykP6mgH0foYXwowf3+\nxn+YCK+Z6EM14CeodL3Oy/H9NWZ8POW/D/f5VuBE2rXxN1Ikl99GyUQlVuBhWAN4\nwvHD0zuvhVDPf+HnazzR6Ii+cPJtGujcH/tIsfGaiWcuVaUU+2tvqFgeREMWog5f\nM+isOyNCY/cNEfaMtuXCxzx9t5pDfo/ZHWV47qZ7JrDaMbBCEK04RFQiWlxuWSQ3\nYB/lAzi0cU1lBRt3b7qi5xjG+oJTKNPRpbHLq+2IZQIxwc1Gu43YXtrQHBR+NKWE\n/ieXXvChkyNsJnDCbtQ29DZiv0bSdz4IVMLSxOG/4GHqMmzzjQJHbTbHMXZgfvde\niBfMZYK99CUONugvXxllOXLIGUc0f1O0QtOI4e0N20H9XQKflNglr0ylSHzMosNO\nxg1xt3k/G0PBAIN9B8EI\n=s/u3\n-----END PGP SIGNATURE-----",
        "payload": "tree 56a9c09e5a07ce31295486c7411b56ddcebe4a39\nparent 6176e9bf3d553862c67720d218a30553d771aa63\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1447065907 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1448005243 +0100\n\n[Qt] simple mempool info in debug window\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c197798d1b7364e8225beaaa716399441288203e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c197798d1b7364e8225beaaa716399441288203e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c197798d1b7364e8225beaaa716399441288203e/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6176e9bf3d553862c67720d218a30553d771aa63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6176e9bf3d553862c67720d218a30553d771aa63",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6176e9bf3d553862c67720d218a30553d771aa63"
      }
    ],
    "stats": {
      "total": 180,
      "additions": 136,
      "deletions": 44
    },
    "files": [
      {
        "sha": "566e8fa62d82e7c84a652e21242b2fda9627d4d7",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c197798d1b7364e8225beaaa716399441288203e/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c197798d1b7364e8225beaaa716399441288203e/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=c197798d1b7364e8225beaaa716399441288203e",
        "patch": "@@ -13,6 +13,7 @@\n #include \"checkpoints.h\"\n #include \"clientversion.h\"\n #include \"net.h\"\n+#include \"txmempool.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n \n@@ -88,6 +89,16 @@ QDateTime ClientModel::getLastBlockDate() const\n     return QDateTime::fromTime_t(Params().GenesisBlock().GetBlockTime()); // Genesis block's time of current network\n }\n \n+long ClientModel::getMempoolSize() const\n+{\n+    return mempool.size();\n+}\n+\n+size_t ClientModel::getMempoolDynamicUsage() const\n+{\n+    return mempool.DynamicMemoryUsage();\n+}\n+\n double ClientModel::getVerificationProgress() const\n {\n     LOCK(cs_main);\n@@ -122,6 +133,7 @@ void ClientModel::updateTimer()\n         Q_EMIT numBlocksChanged(newNumBlocks, newBlockDate);\n     }\n \n+    Q_EMIT mempoolSizeChanged(getMempoolSize(), getMempoolDynamicUsage());\n     Q_EMIT bytesChanged(getTotalBytesRecv(), getTotalBytesSent());\n }\n "
      },
      {
        "sha": "493a75933149d9fc274eb82e0c1c28f6df311d3d",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c197798d1b7364e8225beaaa716399441288203e/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c197798d1b7364e8225beaaa716399441288203e/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=c197798d1b7364e8225beaaa716399441288203e",
        "patch": "@@ -51,6 +51,11 @@ class ClientModel : public QObject\n     int getNumConnections(unsigned int flags = CONNECTIONS_ALL) const;\n     int getNumBlocks() const;\n \n+    //! Return number of transactions in the mempool\n+    long getMempoolSize() const;\n+    //! Return the dynamic memory usage of the mempool\n+    size_t getMempoolDynamicUsage() const;\n+    \n     quint64 getTotalBytesRecv() const;\n     quint64 getTotalBytesSent() const;\n \n@@ -89,6 +94,7 @@ class ClientModel : public QObject\n Q_SIGNALS:\n     void numConnectionsChanged(int count);\n     void numBlocksChanged(int count, const QDateTime& blockDate);\n+    void mempoolSizeChanged(long count, size_t mempoolSizeInBytes);\n     void alertsChanged(const QString &warnings);\n     void bytesChanged(quint64 totalBytesIn, quint64 totalBytesOut);\n "
      },
      {
        "sha": "e81a27a8305cf1235088c2527aed4bdfd7457308",
        "filename": "src/qt/forms/debugwindow.ui",
        "status": "modified",
        "additions": 104,
        "deletions": 44,
        "changes": 148,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c197798d1b7364e8225beaaa716399441288203e/src/qt/forms/debugwindow.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c197798d1b7364e8225beaaa716399441288203e/src/qt/forms/debugwindow.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/debugwindow.ui?ref=c197798d1b7364e8225beaaa716399441288203e",
        "patch": "@@ -23,7 +23,7 @@\n       <attribute name=\"title\">\n        <string>&amp;Information</string>\n       </attribute>\n-      <layout class=\"QGridLayout\" name=\"gridLayout\" columnstretch=\"0,1\">\n+      <layout class=\"QGridLayout\" name=\"gridLayout\" columnstretch=\"0,1,0\">\n        <property name=\"horizontalSpacing\">\n         <number>12</number>\n        </property>\n@@ -47,7 +47,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"1\" column=\"1\">\n+       <item row=\"1\" column=\"1\" colspan=\"2\">\n         <widget class=\"QLabel\" name=\"clientName\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -70,7 +70,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"2\" column=\"1\">\n+       <item row=\"2\" column=\"1\" colspan=\"2\">\n         <widget class=\"QLabel\" name=\"clientVersion\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -96,7 +96,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"3\" column=\"1\">\n+       <item row=\"3\" column=\"1\" colspan=\"2\">\n         <widget class=\"QLabel\" name=\"clientUserAgent\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -122,7 +122,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"4\" column=\"1\">\n+       <item row=\"4\" column=\"1\" colspan=\"2\">\n         <widget class=\"QLabel\" name=\"openSSLVersion\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -148,7 +148,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"5\" column=\"1\">\n+       <item row=\"5\" column=\"1\" colspan=\"2\">\n         <widget class=\"QLabel\" name=\"berkeleyDBVersion\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -171,7 +171,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"6\" column=\"1\">\n+       <item row=\"6\" column=\"1\" colspan=\"2\">\n         <widget class=\"QLabel\" name=\"buildDate\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -194,7 +194,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"7\" column=\"1\">\n+       <item row=\"7\" column=\"1\" colspan=\"2\">\n         <widget class=\"QLabel\" name=\"startupTime\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -210,27 +210,14 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"8\" column=\"0\">\n-        <widget class=\"QLabel\" name=\"label_11\">\n-         <property name=\"font\">\n-          <font>\n-           <weight>75</weight>\n-           <bold>true</bold>\n-          </font>\n-         </property>\n-         <property name=\"text\">\n-          <string>Network</string>\n-         </property>\n-        </widget>\n-       </item>\n        <item row=\"9\" column=\"0\">\n         <widget class=\"QLabel\" name=\"label_8\">\n          <property name=\"text\">\n           <string>Name</string>\n          </property>\n         </widget>\n        </item>\n-       <item row=\"9\" column=\"1\">\n+       <item row=\"9\" column=\"1\" colspan=\"2\">\n         <widget class=\"QLabel\" name=\"networkName\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -253,7 +240,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"10\" column=\"1\">\n+       <item row=\"10\" column=\"1\" colspan=\"2\">\n         <widget class=\"QLabel\" name=\"numberOfConnections\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -289,7 +276,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"12\" column=\"1\">\n+       <item row=\"12\" column=\"1\" colspan=\"2\">\n         <widget class=\"QLabel\" name=\"numberOfBlocks\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -306,13 +293,13 @@\n         </widget>\n        </item>\n        <item row=\"13\" column=\"0\">\n-        <widget class=\"QLabel\" name=\"label_2\">\n+        <widget class=\"QLabel\" name=\"labelLastBlockTime\">\n          <property name=\"text\">\n           <string>Last block time</string>\n          </property>\n         </widget>\n        </item>\n-       <item row=\"13\" column=\"1\">\n+       <item row=\"13\" column=\"1\" colspan=\"2\">\n         <widget class=\"QLabel\" name=\"lastBlockTime\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -329,45 +316,118 @@\n         </widget>\n        </item>\n        <item row=\"14\" column=\"0\">\n-        <spacer name=\"verticalSpacer_2\">\n-         <property name=\"orientation\">\n-          <enum>Qt::Vertical</enum>\n+        <widget class=\"QLabel\" name=\"labelMempoolTitle\">\n+         <property name=\"font\">\n+          <font>\n+           <weight>75</weight>\n+           <bold>true</bold>\n+          </font>\n          </property>\n-         <property name=\"sizeHint\" stdset=\"0\">\n-          <size>\n-           <width>20</width>\n-           <height>20</height>\n-          </size>\n+         <property name=\"text\">\n+          <string>Memory Pool</string>\n          </property>\n-        </spacer>\n+        </widget>\n        </item>\n        <item row=\"15\" column=\"0\">\n-        <widget class=\"QLabel\" name=\"labelDebugLogfile\">\n+        <widget class=\"QLabel\" name=\"labelNumberOfTransactions\">\n+         <property name=\"text\">\n+          <string>Current number of transactions</string>\n+         </property>\n+        </widget>\n+       </item>\n+       <item row=\"15\" column=\"1\">\n+        <widget class=\"QLabel\" name=\"mempoolNumberTxs\">\n+         <property name=\"cursor\">\n+          <cursorShape>IBeamCursor</cursorShape>\n+         </property>\n+         <property name=\"text\">\n+          <string>N/A</string>\n+         </property>\n+         <property name=\"textFormat\">\n+          <enum>Qt::PlainText</enum>\n+         </property>\n+         <property name=\"textInteractionFlags\">\n+          <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n+         </property>\n+        </widget>\n+       </item>\n+       <item row=\"8\" column=\"0\">\n+        <widget class=\"QLabel\" name=\"labelNetwork\">\n          <property name=\"font\">\n           <font>\n            <weight>75</weight>\n            <bold>true</bold>\n           </font>\n          </property>\n          <property name=\"text\">\n-          <string>Debug log file</string>\n+          <string>Network</string>\n          </property>\n         </widget>\n        </item>\n        <item row=\"16\" column=\"0\">\n-        <widget class=\"QPushButton\" name=\"openDebugLogfileButton\">\n-         <property name=\"toolTip\">\n-          <string>Open the Bitcoin Core debug log file from the current data directory. This can take a few seconds for large log files.</string>\n+        <widget class=\"QLabel\" name=\"labelMemoryUsage\">\n+         <property name=\"text\">\n+          <string>Memory usage</string>\n+         </property>\n+        </widget>\n+       </item>\n+       <item row=\"16\" column=\"1\">\n+        <widget class=\"QLabel\" name=\"mempoolSize\">\n+         <property name=\"cursor\">\n+          <cursorShape>IBeamCursor</cursorShape>\n          </property>\n          <property name=\"text\">\n-          <string>&amp;Open</string>\n+          <string>N/A</string>\n          </property>\n-         <property name=\"autoDefault\">\n-          <bool>false</bool>\n+         <property name=\"textFormat\">\n+          <enum>Qt::PlainText</enum>\n+         </property>\n+         <property name=\"textInteractionFlags\">\n+          <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n          </property>\n         </widget>\n        </item>\n-       <item row=\"17\" column=\"0\">\n+       <item row=\"14\" column=\"2\" rowspan=\"3\">\n+        <layout class=\"QVBoxLayout\" name=\"verticalLayoutDebugButton\">\n+         <property name=\"spacing\">\n+          <number>3</number>\n+         </property>\n+         <item>\n+          <spacer name=\"verticalSpacer_2\">\n+           <property name=\"orientation\">\n+            <enum>Qt::Vertical</enum>\n+           </property>\n+           <property name=\"sizeHint\" stdset=\"0\">\n+            <size>\n+             <width>10</width>\n+             <height>5</height>\n+            </size>\n+           </property>\n+          </spacer>\n+         </item>\n+         <item>\n+          <widget class=\"QLabel\" name=\"labelDebugLogfile\">\n+           <property name=\"text\">\n+            <string>Debug log file</string>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QPushButton\" name=\"openDebugLogfileButton\">\n+           <property name=\"toolTip\">\n+            <string>Open the Bitcoin Core debug log file from the current data directory. This can take a few seconds for large log files.</string>\n+           </property>\n+           <property name=\"text\">\n+            <string>&amp;Open</string>\n+           </property>\n+           <property name=\"autoDefault\">\n+            <bool>false</bool>\n+           </property>\n+          </widget>\n+         </item>\n+        </layout>\n+       </item>\n+       <item row=\"18\" column=\"0\">\n         <spacer name=\"verticalSpacer\">\n          <property name=\"orientation\">\n           <enum>Qt::Vertical</enum>"
      },
      {
        "sha": "07ce0c2845083efa8a905b8451358a8cebfdb48a",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c197798d1b7364e8225beaaa716399441288203e/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c197798d1b7364e8225beaaa716399441288203e/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=c197798d1b7364e8225beaaa716399441288203e",
        "patch": "@@ -343,6 +343,8 @@ void RPCConsole::setClientModel(ClientModel *model)\n         updateTrafficStats(model->getTotalBytesRecv(), model->getTotalBytesSent());\n         connect(model, SIGNAL(bytesChanged(quint64,quint64)), this, SLOT(updateTrafficStats(quint64, quint64)));\n \n+        connect(model, SIGNAL(mempoolSizeChanged(long,size_t)), this, SLOT(setMempoolSize(long,size_t)));\n+\n         // set up peer table\n         ui->peerWidget->setModel(model->getPeerTableModel());\n         ui->peerWidget->verticalHeader()->hide();\n@@ -523,6 +525,16 @@ void RPCConsole::setNumBlocks(int count, const QDateTime& blockDate)\n     ui->lastBlockTime->setText(blockDate.toString());\n }\n \n+void RPCConsole::setMempoolSize(long numberOfTxs, size_t dynUsage)\n+{\n+    ui->mempoolNumberTxs->setText(QString::number(numberOfTxs));\n+\n+    if (dynUsage < 1000000)\n+        ui->mempoolSize->setText(QString::number(dynUsage/1000.0, 'f', 2) + \" KB\");\n+    else\n+        ui->mempoolSize->setText(QString::number(dynUsage/1000000.0, 'f', 2) + \" MB\");\n+}\n+\n void RPCConsole::on_lineEdit_returnPressed()\n {\n     QString cmd = ui->lineEdit->text();"
      },
      {
        "sha": "5e749336cffdd30c267812d3a45c07da542e0c42",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c197798d1b7364e8225beaaa716399441288203e/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c197798d1b7364e8225beaaa716399441288203e/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=c197798d1b7364e8225beaaa716399441288203e",
        "patch": "@@ -77,6 +77,8 @@ public Q_SLOTS:\n     void setNumConnections(int count);\n     /** Set number of blocks and last block date shown in the UI */\n     void setNumBlocks(int count, const QDateTime& blockDate);\n+    /** Set size (number of transactions and memory usage) of the mempool in the UI */\n+    void setMempoolSize(long numberOfTxs, size_t dynUsage);\n     /** Go forward or back in history */\n     void browseHistory(int offset);\n     /** Scroll console view to end */"
      }
    ]
  },
  {
    "sha": "07b770caf3f57efb5f495661b33eda642e21b785",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowN2I3NzBjYWYzZjU3ZWZiNWY0OTU2NjFiMzNlZGE2NDJlMjFiNzg1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-20T08:00:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-20T08:01:07Z"
      },
      "message": "Merge pull request #7019\n\n33b7f83 [qa] travis: cover *receivedby* rpcs (MarcoFalke)",
      "tree": {
        "sha": "e2d3e7bf41ed33b02d9de8c4fa40738bfd132df5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2d3e7bf41ed33b02d9de8c4fa40738bfd132df5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/07b770caf3f57efb5f495661b33eda642e21b785",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWTtNDAAoJEHSBCwEjRsmmqsUIAJboEk6iBukujB8/Ie06p6vS\nOjO7iN9w8Y6A8JOkMXE8o02YIxHGROTbYUmjVfK5d3XvVtSg5FLyDtmxeGP0u1fg\nJgsHrrV89Lsv/5DhyX3Jb9G3zl/RznUzxs39OvrHRLD4tdNAHGn8oXjA8vbfB7Kz\nGFAcdVJw7sJcYkHIOw9i9dLdbhlhf0DkDwwd2YOvxUfBqxE1O/ohl9yDLQ43zxH9\ndXGy3hLQGsaaW4C4t92gcrg3+VecnnoQiFTZwBQgwvr8LejElm6nS2/gPqsvzKhZ\ngYsmxJpeIP2Jj3q508P1MXn2+gQKq6Mi+enVmq9GVG4Mj7qfERtR7NSdvH7P4yo=\n=byXj\n-----END PGP SIGNATURE-----",
        "payload": "tree e2d3e7bf41ed33b02d9de8c4fa40738bfd132df5\nparent a1bfca80521ee99d70bc19a797484275d84e136f\nparent 33b7f83c593456c08d2be3edef785bb4a3850368\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448006458 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448006467 +0100\n\nMerge pull request #7019\n\n33b7f83 [qa] travis: cover *receivedby* rpcs (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07b770caf3f57efb5f495661b33eda642e21b785",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/07b770caf3f57efb5f495661b33eda642e21b785",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07b770caf3f57efb5f495661b33eda642e21b785/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1bfca80521ee99d70bc19a797484275d84e136f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1bfca80521ee99d70bc19a797484275d84e136f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1bfca80521ee99d70bc19a797484275d84e136f"
      },
      {
        "sha": "33b7f83c593456c08d2be3edef785bb4a3850368",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33b7f83c593456c08d2be3edef785bb4a3850368",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/33b7f83c593456c08d2be3edef785bb4a3850368"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a02a73cd0365726ac3495792b53bbb6a9f4c1516",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07b770caf3f57efb5f495661b33eda642e21b785/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07b770caf3f57efb5f495661b33eda642e21b785/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=07b770caf3f57efb5f495661b33eda642e21b785",
        "patch": "@@ -69,6 +69,7 @@\n testScripts = [\n     'wallet.py',\n     'listtransactions.py',\n+    'receivedby.py',\n     'mempool_resurrect_test.py',\n     'txn_doublespend.py --mineblock',\n     'txn_clone.py',\n@@ -104,7 +105,6 @@\n     'forknotify.py',\n     'invalidateblock.py',\n     'keypool.py',\n-    'receivedby.py',\n #    'rpcbind_test.py', #temporary, bug in libevent, see #6655\n #    'script_test.py', #used for manual comparison of 2 binaries\n     'smartfees.py',"
      }
    ]
  },
  {
    "sha": "3522f49f5ae74fe3ef310fad6fa7e09d65c9c1b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNTIyZjQ5ZjVhZTc0ZmUzZWYzMTBmYWQ2ZmE3ZTA5ZDY1YzljMWI4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-20T09:14:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-20T09:14:21Z"
      },
      "message": "http: add Boost 1.49 compatibility\n\n`try_join_for` was introduced in Boost 1.50:\nhttp://www.boost.org/doc/libs/1_50_0/doc/html/thread/thread_management.html#thread.thread_management.thread.try_join_for\n\n1.49 has `timed_join`, one can accomplish the same with:\nhttp://www.boost.org/doc/libs/1_49_0/doc/html/thread/thread_management.html#thread.thread_management.thread.timed_join\n\nHowever, `timed_join` was deprecated in 1.50. So a conditional is\nnecessary.\n\nThis solution was tested in #7031.",
      "tree": {
        "sha": "68e8633d2b91fa23aa813fca57b72ab9158e5bec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68e8633d2b91fa23aa813fca57b72ab9158e5bec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3522f49f5ae74fe3ef310fad6fa7e09d65c9c1b8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3522f49f5ae74fe3ef310fad6fa7e09d65c9c1b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3522f49f5ae74fe3ef310fad6fa7e09d65c9c1b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3522f49f5ae74fe3ef310fad6fa7e09d65c9c1b8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "07b770caf3f57efb5f495661b33eda642e21b785",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07b770caf3f57efb5f495661b33eda642e21b785",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07b770caf3f57efb5f495661b33eda642e21b785"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "91518d7c5f2529feee67fb31835fc887aaea4374",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3522f49f5ae74fe3ef310fad6fa7e09d65c9c1b8/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3522f49f5ae74fe3ef310fad6fa7e09d65c9c1b8/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=3522f49f5ae74fe3ef310fad6fa7e09d65c9c1b8",
        "patch": "@@ -487,7 +487,11 @@ void StopHTTPServer()\n         // master that appears to be solved, so in the future that solution\n         // could be used again (if desirable).\n         // (see discussion in https://github.com/bitcoin/bitcoin/pull/6990)\n+#if BOOST_VERSION >= 105000\n         if (!threadHTTP.try_join_for(boost::chrono::milliseconds(2000))) {\n+#else\n+        if (!threadHTTP.timed_join(boost::posix_time::milliseconds(2000))) {\n+#endif\n             LogPrintf(\"HTTP event loop did not exit within allotted time, sending loopbreak\\n\");\n             event_base_loopbreak(eventBase);\n             threadHTTP.join();"
      }
    ]
  },
  {
    "sha": "5c2fd38d05b0da2fa0d1ec99f1db55b0d89180db",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YzJmZDM4ZDA1YjBkYTJmYTBkMWVjOTlmMWRiNTViMGQ4OTE4MGRi",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-11-20T11:51:36Z"
      },
      "committer": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-11-20T11:51:36Z"
      },
      "message": "Add missing \"blocktime\" description to listtransactions help, fix formatting.",
      "tree": {
        "sha": "2e4039c895643a41f3c8a5149e7a571cb02fca8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e4039c895643a41f3c8a5149e7a571cb02fca8b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c2fd38d05b0da2fa0d1ec99f1db55b0d89180db",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c2fd38d05b0da2fa0d1ec99f1db55b0d89180db",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5c2fd38d05b0da2fa0d1ec99f1db55b0d89180db",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c2fd38d05b0da2fa0d1ec99f1db55b0d89180db/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "07b770caf3f57efb5f495661b33eda642e21b785",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07b770caf3f57efb5f495661b33eda642e21b785",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07b770caf3f57efb5f495661b33eda642e21b785"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "63d45d9709527df03915e2e6300c19df51e053f4",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c2fd38d05b0da2fa0d1ec99f1db55b0d89180db/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c2fd38d05b0da2fa0d1ec99f1db55b0d89180db/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=5c2fd38d05b0da2fa0d1ec99f1db55b0d89180db",
        "patch": "@@ -1417,7 +1417,7 @@ UniValue listtransactions(const UniValue& params, bool fHelp)\n             \"    \\\"amount\\\": x.xxx,          (numeric) The amount in \" + CURRENCY_UNIT + \". This is negative for the 'send' category, and for the\\n\"\n             \"                                         'move' category for moves outbound. It is positive for the 'receive' category,\\n\"\n             \"                                         and for the 'move' category for inbound funds.\\n\"\n-            \"    \\\"vout\\\" : n,               (numeric) the vout value\\n\"\n+            \"    \\\"vout\\\": n,                (numeric) the vout value\\n\"\n             \"    \\\"fee\\\": x.xxx,             (numeric) The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the \\n\"\n             \"                                         'send' category of transactions.\\n\"\n             \"    \\\"confirmations\\\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and \\n\"\n@@ -1426,12 +1426,13 @@ UniValue listtransactions(const UniValue& params, bool fHelp)\n             \"                                          category of transactions.\\n\"\n             \"    \\\"blockindex\\\": n,          (numeric) The block index containing the transaction. Available for 'send' and 'receive'\\n\"\n             \"                                          category of transactions.\\n\"\n+            \"    \\\"blocktime\\\": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).\\n\"\n             \"    \\\"txid\\\": \\\"transactionid\\\", (string) The transaction id. Available for 'send' and 'receive' category of transactions.\\n\"\n             \"    \\\"time\\\": xxx,              (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).\\n\"\n             \"    \\\"timereceived\\\": xxx,      (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT). Available \\n\"\n             \"                                          for 'send' and 'receive' category of transactions.\\n\"\n             \"    \\\"comment\\\": \\\"...\\\",       (string) If a comment is associated with the transaction.\\n\"\n-            \"    \\\"label\\\" : \\\"label\\\"       (string) A comment for the address/transaction, if any\\n\"\n+            \"    \\\"label\\\": \\\"label\\\"        (string) A comment for the address/transaction, if any\\n\"\n             \"    \\\"otheraccount\\\": \\\"accountname\\\",  (string) For the 'move' category of transactions, the account the funds came \\n\"\n             \"                                          from (for receiving funds, positive amounts), or went to (for sending funds,\\n\"\n             \"                                          negative amounts).\\n\""
      }
    ]
  },
  {
    "sha": "776848acefa8345c7e510d31406160c4a1a24bca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NzY4NDhhY2VmYTgzNDVjN2U1MTBkMzE0MDYxNjBjNGExYTI0YmNh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-20T08:02:33Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-20T13:34:11Z"
      },
      "message": "Merge pull request #6979\n\nc197798 [Qt] simple mempool info in debug window (Jonas Schnelli)",
      "tree": {
        "sha": "6973c217b5167872c1e9d3897a05db6b680c8f12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6973c217b5167872c1e9d3897a05db6b680c8f12"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/776848acefa8345c7e510d31406160c4a1a24bca",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWTyFUAAoJEHSBCwEjRsmm9nAH/igc/qKYUfone2dHZ7I6duNQ\nxC4up7o0vnXTMGilpLYKB6UMbSXD66DLXsn+DOaTqOEK6NN3R7T6/q9xUwqCQQaB\nIhJv2GhnsxU/E9JEF/zLfii+2s7uJoCdeLxpBw+cUs1DlXn3B8aiob7ZIk4dnUzo\nqJSsyavzKgU38rcn2kuuYOXYdqWRpMTsbnzg2bSYngC2j3VDRYJOHFEVwtijJWzm\nQEjtJkB1AKF0AZMuLHKubgSM+HT5jOHw2gdoTNz2gPr2IXAYWnOs4sq0iTGy7MZd\n5R7oW1KjC9kh2pPC8Ul7k0LUCqp3ImCGfskL8n6v86ZCcN8vc/eFUGa1C05beDA=\n=OAbF\n-----END PGP SIGNATURE-----",
        "payload": "tree 6973c217b5167872c1e9d3897a05db6b680c8f12\nparent 07b770caf3f57efb5f495661b33eda642e21b785\nparent c197798d1b7364e8225beaaa716399441288203e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448006553 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448026451 +0100\n\nMerge pull request #6979\n\nc197798 [Qt] simple mempool info in debug window (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/776848acefa8345c7e510d31406160c4a1a24bca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/776848acefa8345c7e510d31406160c4a1a24bca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/776848acefa8345c7e510d31406160c4a1a24bca/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "07b770caf3f57efb5f495661b33eda642e21b785",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07b770caf3f57efb5f495661b33eda642e21b785",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07b770caf3f57efb5f495661b33eda642e21b785"
      },
      {
        "sha": "c197798d1b7364e8225beaaa716399441288203e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c197798d1b7364e8225beaaa716399441288203e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c197798d1b7364e8225beaaa716399441288203e"
      }
    ],
    "stats": {
      "total": 180,
      "additions": 136,
      "deletions": 44
    },
    "files": [
      {
        "sha": "566e8fa62d82e7c84a652e21242b2fda9627d4d7",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/776848acefa8345c7e510d31406160c4a1a24bca/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/776848acefa8345c7e510d31406160c4a1a24bca/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=776848acefa8345c7e510d31406160c4a1a24bca",
        "patch": "@@ -13,6 +13,7 @@\n #include \"checkpoints.h\"\n #include \"clientversion.h\"\n #include \"net.h\"\n+#include \"txmempool.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n \n@@ -88,6 +89,16 @@ QDateTime ClientModel::getLastBlockDate() const\n     return QDateTime::fromTime_t(Params().GenesisBlock().GetBlockTime()); // Genesis block's time of current network\n }\n \n+long ClientModel::getMempoolSize() const\n+{\n+    return mempool.size();\n+}\n+\n+size_t ClientModel::getMempoolDynamicUsage() const\n+{\n+    return mempool.DynamicMemoryUsage();\n+}\n+\n double ClientModel::getVerificationProgress() const\n {\n     LOCK(cs_main);\n@@ -122,6 +133,7 @@ void ClientModel::updateTimer()\n         Q_EMIT numBlocksChanged(newNumBlocks, newBlockDate);\n     }\n \n+    Q_EMIT mempoolSizeChanged(getMempoolSize(), getMempoolDynamicUsage());\n     Q_EMIT bytesChanged(getTotalBytesRecv(), getTotalBytesSent());\n }\n "
      },
      {
        "sha": "493a75933149d9fc274eb82e0c1c28f6df311d3d",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/776848acefa8345c7e510d31406160c4a1a24bca/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/776848acefa8345c7e510d31406160c4a1a24bca/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=776848acefa8345c7e510d31406160c4a1a24bca",
        "patch": "@@ -51,6 +51,11 @@ class ClientModel : public QObject\n     int getNumConnections(unsigned int flags = CONNECTIONS_ALL) const;\n     int getNumBlocks() const;\n \n+    //! Return number of transactions in the mempool\n+    long getMempoolSize() const;\n+    //! Return the dynamic memory usage of the mempool\n+    size_t getMempoolDynamicUsage() const;\n+    \n     quint64 getTotalBytesRecv() const;\n     quint64 getTotalBytesSent() const;\n \n@@ -89,6 +94,7 @@ class ClientModel : public QObject\n Q_SIGNALS:\n     void numConnectionsChanged(int count);\n     void numBlocksChanged(int count, const QDateTime& blockDate);\n+    void mempoolSizeChanged(long count, size_t mempoolSizeInBytes);\n     void alertsChanged(const QString &warnings);\n     void bytesChanged(quint64 totalBytesIn, quint64 totalBytesOut);\n "
      },
      {
        "sha": "2471470363efff5fd449dcf453d30fde09b89c3d",
        "filename": "src/qt/forms/debugwindow.ui",
        "status": "modified",
        "additions": 104,
        "deletions": 44,
        "changes": 148,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/776848acefa8345c7e510d31406160c4a1a24bca/src/qt/forms/debugwindow.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/776848acefa8345c7e510d31406160c4a1a24bca/src/qt/forms/debugwindow.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/debugwindow.ui?ref=776848acefa8345c7e510d31406160c4a1a24bca",
        "patch": "@@ -23,7 +23,7 @@\n       <attribute name=\"title\">\n        <string>&amp;Information</string>\n       </attribute>\n-      <layout class=\"QGridLayout\" name=\"gridLayout\" columnstretch=\"0,1\">\n+      <layout class=\"QGridLayout\" name=\"gridLayout\" columnstretch=\"0,1,0\">\n        <property name=\"horizontalSpacing\">\n         <number>12</number>\n        </property>\n@@ -47,7 +47,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"1\" column=\"1\">\n+       <item row=\"1\" column=\"1\" colspan=\"2\">\n         <widget class=\"QLabel\" name=\"clientName\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -70,7 +70,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"2\" column=\"1\">\n+       <item row=\"2\" column=\"1\" colspan=\"2\">\n         <widget class=\"QLabel\" name=\"clientVersion\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -96,7 +96,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"3\" column=\"1\">\n+       <item row=\"3\" column=\"1\" colspan=\"2\">\n         <widget class=\"QLabel\" name=\"clientUserAgent\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -122,7 +122,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"4\" column=\"1\">\n+       <item row=\"4\" column=\"1\" colspan=\"2\">\n         <widget class=\"QLabel\" name=\"openSSLVersion\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -148,7 +148,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"5\" column=\"1\">\n+       <item row=\"5\" column=\"1\" colspan=\"2\">\n         <widget class=\"QLabel\" name=\"berkeleyDBVersion\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -171,7 +171,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"6\" column=\"1\">\n+       <item row=\"6\" column=\"1\" colspan=\"2\">\n         <widget class=\"QLabel\" name=\"buildDate\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -194,7 +194,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"7\" column=\"1\">\n+       <item row=\"7\" column=\"1\" colspan=\"2\">\n         <widget class=\"QLabel\" name=\"startupTime\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -210,27 +210,14 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"8\" column=\"0\">\n-        <widget class=\"QLabel\" name=\"label_11\">\n-         <property name=\"font\">\n-          <font>\n-           <weight>75</weight>\n-           <bold>true</bold>\n-          </font>\n-         </property>\n-         <property name=\"text\">\n-          <string>Network</string>\n-         </property>\n-        </widget>\n-       </item>\n        <item row=\"9\" column=\"0\">\n         <widget class=\"QLabel\" name=\"label_8\">\n          <property name=\"text\">\n           <string>Name</string>\n          </property>\n         </widget>\n        </item>\n-       <item row=\"9\" column=\"1\">\n+       <item row=\"9\" column=\"1\" colspan=\"2\">\n         <widget class=\"QLabel\" name=\"networkName\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -253,7 +240,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"10\" column=\"1\">\n+       <item row=\"10\" column=\"1\" colspan=\"2\">\n         <widget class=\"QLabel\" name=\"numberOfConnections\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -289,7 +276,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"12\" column=\"1\">\n+       <item row=\"12\" column=\"1\" colspan=\"2\">\n         <widget class=\"QLabel\" name=\"numberOfBlocks\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -306,13 +293,13 @@\n         </widget>\n        </item>\n        <item row=\"13\" column=\"0\">\n-        <widget class=\"QLabel\" name=\"label_2\">\n+        <widget class=\"QLabel\" name=\"labelLastBlockTime\">\n          <property name=\"text\">\n           <string>Last block time</string>\n          </property>\n         </widget>\n        </item>\n-       <item row=\"13\" column=\"1\">\n+       <item row=\"13\" column=\"1\" colspan=\"2\">\n         <widget class=\"QLabel\" name=\"lastBlockTime\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -329,45 +316,118 @@\n         </widget>\n        </item>\n        <item row=\"14\" column=\"0\">\n-        <spacer name=\"verticalSpacer_2\">\n-         <property name=\"orientation\">\n-          <enum>Qt::Vertical</enum>\n+        <widget class=\"QLabel\" name=\"labelMempoolTitle\">\n+         <property name=\"font\">\n+          <font>\n+           <weight>75</weight>\n+           <bold>true</bold>\n+          </font>\n          </property>\n-         <property name=\"sizeHint\" stdset=\"0\">\n-          <size>\n-           <width>20</width>\n-           <height>20</height>\n-          </size>\n+         <property name=\"text\">\n+          <string>Memory Pool</string>\n          </property>\n-        </spacer>\n+        </widget>\n        </item>\n        <item row=\"15\" column=\"0\">\n-        <widget class=\"QLabel\" name=\"labelDebugLogfile\">\n+        <widget class=\"QLabel\" name=\"labelNumberOfTransactions\">\n+         <property name=\"text\">\n+          <string>Current number of transactions</string>\n+         </property>\n+        </widget>\n+       </item>\n+       <item row=\"15\" column=\"1\">\n+        <widget class=\"QLabel\" name=\"mempoolNumberTxs\">\n+         <property name=\"cursor\">\n+          <cursorShape>IBeamCursor</cursorShape>\n+         </property>\n+         <property name=\"text\">\n+          <string>N/A</string>\n+         </property>\n+         <property name=\"textFormat\">\n+          <enum>Qt::PlainText</enum>\n+         </property>\n+         <property name=\"textInteractionFlags\">\n+          <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n+         </property>\n+        </widget>\n+       </item>\n+       <item row=\"8\" column=\"0\">\n+        <widget class=\"QLabel\" name=\"labelNetwork\">\n          <property name=\"font\">\n           <font>\n            <weight>75</weight>\n            <bold>true</bold>\n           </font>\n          </property>\n          <property name=\"text\">\n-          <string>Debug log file</string>\n+          <string>Network</string>\n          </property>\n         </widget>\n        </item>\n        <item row=\"16\" column=\"0\">\n-        <widget class=\"QPushButton\" name=\"openDebugLogfileButton\">\n-         <property name=\"toolTip\">\n-          <string>Open the Bitcoin Core debug log file from the current data directory. This can take a few seconds for large log files.</string>\n+        <widget class=\"QLabel\" name=\"labelMemoryUsage\">\n+         <property name=\"text\">\n+          <string>Memory usage</string>\n+         </property>\n+        </widget>\n+       </item>\n+       <item row=\"16\" column=\"1\">\n+        <widget class=\"QLabel\" name=\"mempoolSize\">\n+         <property name=\"cursor\">\n+          <cursorShape>IBeamCursor</cursorShape>\n          </property>\n          <property name=\"text\">\n-          <string>&amp;Open</string>\n+          <string>N/A</string>\n          </property>\n-         <property name=\"autoDefault\">\n-          <bool>false</bool>\n+         <property name=\"textFormat\">\n+          <enum>Qt::PlainText</enum>\n+         </property>\n+         <property name=\"textInteractionFlags\">\n+          <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n          </property>\n         </widget>\n        </item>\n-       <item row=\"17\" column=\"0\">\n+       <item row=\"14\" column=\"2\" rowspan=\"3\">\n+        <layout class=\"QVBoxLayout\" name=\"verticalLayoutDebugButton\">\n+         <property name=\"spacing\">\n+          <number>3</number>\n+         </property>\n+         <item>\n+          <spacer name=\"verticalSpacer_2\">\n+           <property name=\"orientation\">\n+            <enum>Qt::Vertical</enum>\n+           </property>\n+           <property name=\"sizeHint\" stdset=\"0\">\n+            <size>\n+             <width>10</width>\n+             <height>5</height>\n+            </size>\n+           </property>\n+          </spacer>\n+         </item>\n+         <item>\n+          <widget class=\"QLabel\" name=\"labelDebugLogfile\">\n+           <property name=\"text\">\n+            <string>Debug log file</string>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QPushButton\" name=\"openDebugLogfileButton\">\n+           <property name=\"toolTip\">\n+            <string>Open the Bitcoin Core debug log file from the current data directory. This can take a few seconds for large log files.</string>\n+           </property>\n+           <property name=\"text\">\n+            <string>&amp;Open</string>\n+           </property>\n+           <property name=\"autoDefault\">\n+            <bool>false</bool>\n+           </property>\n+          </widget>\n+         </item>\n+        </layout>\n+       </item>\n+       <item row=\"18\" column=\"0\">\n         <spacer name=\"verticalSpacer\">\n          <property name=\"orientation\">\n           <enum>Qt::Vertical</enum>"
      },
      {
        "sha": "619c8631aed82f920d8eeca246b2e5a44a61c6a3",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/776848acefa8345c7e510d31406160c4a1a24bca/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/776848acefa8345c7e510d31406160c4a1a24bca/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=776848acefa8345c7e510d31406160c4a1a24bca",
        "patch": "@@ -343,6 +343,8 @@ void RPCConsole::setClientModel(ClientModel *model)\n         updateTrafficStats(model->getTotalBytesRecv(), model->getTotalBytesSent());\n         connect(model, SIGNAL(bytesChanged(quint64,quint64)), this, SLOT(updateTrafficStats(quint64, quint64)));\n \n+        connect(model, SIGNAL(mempoolSizeChanged(long,size_t)), this, SLOT(setMempoolSize(long,size_t)));\n+\n         // set up peer table\n         ui->peerWidget->setModel(model->getPeerTableModel());\n         ui->peerWidget->verticalHeader()->hide();\n@@ -523,6 +525,16 @@ void RPCConsole::setNumBlocks(int count, const QDateTime& blockDate)\n     ui->lastBlockTime->setText(blockDate.toString());\n }\n \n+void RPCConsole::setMempoolSize(long numberOfTxs, size_t dynUsage)\n+{\n+    ui->mempoolNumberTxs->setText(QString::number(numberOfTxs));\n+\n+    if (dynUsage < 1000000)\n+        ui->mempoolSize->setText(QString::number(dynUsage/1000.0, 'f', 2) + \" KB\");\n+    else\n+        ui->mempoolSize->setText(QString::number(dynUsage/1000000.0, 'f', 2) + \" MB\");\n+}\n+\n void RPCConsole::on_lineEdit_returnPressed()\n {\n     QString cmd = ui->lineEdit->text();"
      },
      {
        "sha": "4b242affcdc377b1985559505a184fac1f992e91",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/776848acefa8345c7e510d31406160c4a1a24bca/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/776848acefa8345c7e510d31406160c4a1a24bca/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=776848acefa8345c7e510d31406160c4a1a24bca",
        "patch": "@@ -84,6 +84,8 @@ public Q_SLOTS:\n     void setNumConnections(int count);\n     /** Set number of blocks and last block date shown in the UI */\n     void setNumBlocks(int count, const QDateTime& blockDate);\n+    /** Set size (number of transactions and memory usage) of the mempool in the UI */\n+    void setMempoolSize(long numberOfTxs, size_t dynUsage);\n     /** Go forward or back in history */\n     void browseHistory(int offset);\n     /** Scroll console view to end */"
      }
    ]
  },
  {
    "sha": "63b5840257a0b892228dfa9cce943b5a2bb94e1a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2M2I1ODQwMjU3YTBiODkyMjI4ZGZhOWNjZTk0M2I1YTJiYjk0ZTFh",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-11-20T21:23:01Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-11-20T21:23:01Z"
      },
      "message": "Fix usage of local python-bitcoinlib\n\nPreviously was using the system-wide python-bitcoinlib, if it existed,\nrather than the local copy that you check out in the README.",
      "tree": {
        "sha": "bea21499af9d8cf4d2667a9115986ba18d310e1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bea21499af9d8cf4d2667a9115986ba18d310e1d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/63b5840257a0b892228dfa9cce943b5a2bb94e1a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGrBAABCACVBQJWT49JXhSAAAAAABUAQGJsb2NraGFzaEBiaXRjb2luLm9yZzAw\nMDAwMDAwMDAwMDAwMDAwZDFmMWJjMDU4ZDUxODY0ZmJkMGRmNTZhODdkNDBjMzg0\nOTZiMzYxMjYzMmM2NzgvFIAAAAAAFQARcGthLWFkZHJlc3NAZ251cGcub3JncGV0\nZUBwZXRlcnRvZC5vcmcACgkQwIXyHOf0udykZwgAiklmtLupNAocwohMsLpz5BOO\nwA+cDIMw9iuV1yjh04AitYrhMBo/fxM9ZmqY7GQkJ9IfZnYO37mMelFf4nBQCmc9\n72TTDcDlB/3M6OP5auijj2iOIwOR45+gWx4s2//YaAIs1mN/U+CDWwwa3H0bhlpM\nBlwS0DLAcSj2NP+b4o07YsnNXcCZSdK2BFEMedYKZsEpS5Ut1QUoPD557h0KnwXm\nfbP28fZmxgDESqFQ8w4TaI5kAFQv9/qvA8RilPSxMcCRVBlrQdRgxxpVSP9heCa8\nuuKN/r/+dkilk+7A2S/QDHpfKiVEReU/FiDBtN0b8Bro6bGp/rFqsSmToCgJJQ==\n=X5dq\n-----END PGP SIGNATURE-----",
        "payload": "tree bea21499af9d8cf4d2667a9115986ba18d310e1d\nparent 16a2f93629f75d182871f288f0396afe6cdc8504\nauthor Peter Todd <pete@petertodd.org> 1448054581 -0500\ncommitter Peter Todd <pete@petertodd.org> 1448054581 -0500\n\nFix usage of local python-bitcoinlib\n\nPreviously was using the system-wide python-bitcoinlib, if it existed,\nrather than the local copy that you check out in the README.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63b5840257a0b892228dfa9cce943b5a2bb94e1a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/63b5840257a0b892228dfa9cce943b5a2bb94e1a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63b5840257a0b892228dfa9cce943b5a2bb94e1a/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "16a2f93629f75d182871f288f0396afe6cdc8504",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16a2f93629f75d182871f288f0396afe6cdc8504",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16a2f93629f75d182871f288f0396afe6cdc8504"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "1ee6c838752568ff7909ff2923381ca73127377a",
        "filename": "qa/replace-by-fee/rbf-tests.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63b5840257a0b892228dfa9cce943b5a2bb94e1a/qa/replace-by-fee/rbf-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63b5840257a0b892228dfa9cce943b5a2bb94e1a/qa/replace-by-fee/rbf-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/replace-by-fee/rbf-tests.py?ref=63b5840257a0b892228dfa9cce943b5a2bb94e1a",
        "patch": "@@ -10,8 +10,9 @@\n import os\n import sys\n \n-# Add python-bitcoinlib to module search path:\n-sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), \"python-bitcoinlib\"))\n+# Add python-bitcoinlib to module search path, prior to any system-wide\n+# python-bitcoinlib.\n+sys.path.insert(0, os.path.join(os.path.dirname(os.path.abspath(__file__)), \"python-bitcoinlib\"))\n \n import unittest\n "
      }
    ]
  },
  {
    "sha": "3587f6a0247d12b7d50b184b16248ccec3757ff0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNTg3ZjZhMDI0N2QxMmI3ZDUwYjE4NGIxNjI0OGNjZWMzNzU3ZmYw",
    "commit": {
      "author": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-18T00:59:18Z"
      },
      "committer": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-21T00:07:12Z"
      },
      "message": "Fix relay mechanism for whitelisted peers under blocks only mode.\n\nPreviously in blocks only mode all inv messages where type!=MSG_BLOCK would be\nrejected without regard for whitelisting or whitelistalwaysrelay.\n\nAs such whitelisted peers would never send the transaction (which would be\nprocessed).",
      "tree": {
        "sha": "94d04569ac4a536670c03d7a4b2c1d19f085b141",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/94d04569ac4a536670c03d7a4b2c1d19f085b141"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3587f6a0247d12b7d50b184b16248ccec3757ff0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3587f6a0247d12b7d50b184b16248ccec3757ff0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3587f6a0247d12b7d50b184b16248ccec3757ff0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3587f6a0247d12b7d50b184b16248ccec3757ff0/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "776848acefa8345c7e510d31406160c4a1a24bca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/776848acefa8345c7e510d31406160c4a1a24bca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/776848acefa8345c7e510d31406160c4a1a24bca"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 13,
      "deletions": 3
    },
    "files": [
      {
        "sha": "c7e67a1d74ca7b7888869031841c03c6cc55104c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 3,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3587f6a0247d12b7d50b184b16248ccec3757ff0/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3587f6a0247d12b7d50b184b16248ccec3757ff0/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3587f6a0247d12b7d50b184b16248ccec3757ff0",
        "patch": "@@ -4210,6 +4210,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             return error(\"message inv size() = %u\", vInv.size());\n         }\n \n+        bool fBlocksOnly = GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY);\n+\n+        // Allow whitelisted peers to send data other than blocks in blocks only mode if whitelistalwaysrelay is true\n+        if (pfrom->fWhitelisted && GetBoolArg(\"-whitelistalwaysrelay\", DEFAULT_WHITELISTALWAYSRELAY))\n+            fBlocksOnly = false;\n+\n         LOCK(cs_main);\n \n         std::vector<CInv> vToFetch;\n@@ -4224,9 +4230,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             bool fAlreadyHave = AlreadyHave(inv);\n             LogPrint(\"net\", \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n \n-            if (!fAlreadyHave && !fImporting && !fReindex && inv.type != MSG_BLOCK && !GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY))\n-                pfrom->AskFor(inv);\n-\n             if (inv.type == MSG_BLOCK) {\n                 UpdateBlockAvailability(pfrom->GetId(), inv.hash);\n                 if (!fAlreadyHave && !fImporting && !fReindex && !mapBlocksInFlight.count(inv.hash)) {\n@@ -4250,6 +4253,13 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     LogPrint(\"net\", \"getheaders (%d) %s to peer=%d\\n\", pindexBestHeader->nHeight, inv.hash.ToString(), pfrom->id);\n                 }\n             }\n+            else\n+            {\n+                if (fBlocksOnly)\n+                    LogPrint(\"net\", \"peer sent inv %s in violation of protocol peer=%d\\n\", inv.ToString(), pfrom->id);\n+                else if (!fAlreadyHave && !fImporting && !fReindex)\n+                    pfrom->AskFor(inv);\n+            }\n \n             // Track requests for our stuff\n             GetMainSignals().Inventory(inv.hash);"
      }
    ]
  },
  {
    "sha": "d8aaa51bec7d9e96eab78b88f494efb937a93bfb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOGFhYTUxYmVjN2Q5ZTk2ZWFiNzhiODhmNDk0ZWZiOTM3YTkzYmZi",
    "commit": {
      "author": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-18T01:01:43Z"
      },
      "committer": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-21T00:07:12Z"
      },
      "message": "Bail early in processing transactions in blocks only mode.\n\nPreviously unsolicited transactions would be processed as normal.",
      "tree": {
        "sha": "4176c4fb83c9f873907fa0f10a1245ce9a511829",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4176c4fb83c9f873907fa0f10a1245ce9a511829"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8aaa51bec7d9e96eab78b88f494efb937a93bfb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8aaa51bec7d9e96eab78b88f494efb937a93bfb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8aaa51bec7d9e96eab78b88f494efb937a93bfb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8aaa51bec7d9e96eab78b88f494efb937a93bfb/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3587f6a0247d12b7d50b184b16248ccec3757ff0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3587f6a0247d12b7d50b184b16248ccec3757ff0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3587f6a0247d12b7d50b184b16248ccec3757ff0"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "243a6475978e606ec650eac40d113a109ae02650",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8aaa51bec7d9e96eab78b88f494efb937a93bfb/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8aaa51bec7d9e96eab78b88f494efb937a93bfb/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d8aaa51bec7d9e96eab78b88f494efb937a93bfb",
        "patch": "@@ -4384,6 +4384,14 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n     else if (strCommand == \"tx\")\n     {\n+        // Stop processing the transaction early if\n+        // We are in blocks only mode and peer is either not whitelisted or whitelistalwaysrelay is off\n+        if (GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY) && (!pfrom->fWhitelisted || !GetBoolArg(\"-whitelistalwaysrelay\", DEFAULT_WHITELISTALWAYSRELAY)))\n+        {\n+            LogPrint(\"net\", \"peer sent transaction in violation of protocol peer=%d\\n\", pfrom->id);\n+            return true;\n+        }\n+\n         vector<uint256> vWorkQueue;\n         vector<uint256> vEraseQueue;\n         CTransaction tx;"
      }
    ]
  },
  {
    "sha": "08843ed99843078acb10eecda2045d5f0f1c2b4f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODg0M2VkOTk4NDMwNzhhY2IxMGVlY2RhMjA0NWQ1ZjBmMWMyYjRm",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-11-20T23:51:44Z"
      },
      "committer": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-21T00:07:12Z"
      },
      "message": "Add relaytxes status to getpeerinfo",
      "tree": {
        "sha": "43b6c4825707bd56cf426fdcecaa3630ce2e4874",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/43b6c4825707bd56cf426fdcecaa3630ce2e4874"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08843ed99843078acb10eecda2045d5f0f1c2b4f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08843ed99843078acb10eecda2045d5f0f1c2b4f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/08843ed99843078acb10eecda2045d5f0f1c2b4f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08843ed99843078acb10eecda2045d5f0f1c2b4f/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8aaa51bec7d9e96eab78b88f494efb937a93bfb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8aaa51bec7d9e96eab78b88f494efb937a93bfb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8aaa51bec7d9e96eab78b88f494efb937a93bfb"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "cff4c5450505b843421889a8ca294724a0f30753",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08843ed99843078acb10eecda2045d5f0f1c2b4f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08843ed99843078acb10eecda2045d5f0f1c2b4f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=08843ed99843078acb10eecda2045d5f0f1c2b4f",
        "patch": "@@ -617,6 +617,7 @@ void CNode::copyStats(CNodeStats &stats)\n {\n     stats.nodeid = this->GetId();\n     X(nServices);\n+    X(fRelayTxes);\n     X(nLastSend);\n     X(nLastRecv);\n     X(nTimeConnected);"
      },
      {
        "sha": "559cdf0878838bd6215241f9e1757ccabd81e1cc",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08843ed99843078acb10eecda2045d5f0f1c2b4f/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08843ed99843078acb10eecda2045d5f0f1c2b4f/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=08843ed99843078acb10eecda2045d5f0f1c2b4f",
        "patch": "@@ -180,6 +180,7 @@ class CNodeStats\n public:\n     NodeId nodeid;\n     uint64_t nServices;\n+    bool fRelayTxes;\n     int64_t nLastSend;\n     int64_t nLastRecv;\n     int64_t nTimeConnected;"
      },
      {
        "sha": "25788488915010283324ccfe248091be70398523",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08843ed99843078acb10eecda2045d5f0f1c2b4f/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08843ed99843078acb10eecda2045d5f0f1c2b4f/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=08843ed99843078acb10eecda2045d5f0f1c2b4f",
        "patch": "@@ -90,6 +90,7 @@ UniValue getpeerinfo(const UniValue& params, bool fHelp)\n             \"    \\\"addr\\\":\\\"host:port\\\",      (string) The ip address and port of the peer\\n\"\n             \"    \\\"addrlocal\\\":\\\"ip:port\\\",   (string) local address\\n\"\n             \"    \\\"services\\\":\\\"xxxxxxxxxxxxxxxx\\\",   (string) The services offered\\n\"\n+            \"    \\\"relaytxes\\\":true|false,    (boolean) Whether peer has asked us to relay transactions to it\\n\"\n             \"    \\\"lastsend\\\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last send\\n\"\n             \"    \\\"lastrecv\\\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last receive\\n\"\n             \"    \\\"bytessent\\\": n,            (numeric) The total bytes sent\\n\"\n@@ -134,6 +135,7 @@ UniValue getpeerinfo(const UniValue& params, bool fHelp)\n         if (!(stats.addrLocal.empty()))\n             obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n         obj.push_back(Pair(\"services\", strprintf(\"%016x\", stats.nServices)));\n+        obj.push_back(Pair(\"relaytxes\", stats.fRelayTxes));\n         obj.push_back(Pair(\"lastsend\", stats.nLastSend));\n         obj.push_back(Pair(\"lastrecv\", stats.nLastRecv));\n         obj.push_back(Pair(\"bytessent\", stats.nSendBytes));"
      }
    ]
  },
  {
    "sha": "3e7c89196ceb2742b62cd183d6fab74edc40647a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZTdjODkxOTZjZWIyNzQyYjYyY2QxODNkNmZhYjc0ZWRjNDA2NDdh",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-10-19T09:19:38Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-11-21T01:48:25Z"
      },
      "message": "Optimisation: Store transaction list order in memory rather than compute it every need\n\nHuge performance improvement (450%) for zapwallettxes",
      "tree": {
        "sha": "e1e14d18e88a0a88015e7c3c4642659b3b018487",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e1e14d18e88a0a88015e7c3c4642659b3b018487"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e7c89196ceb2742b62cd183d6fab74edc40647a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e7c89196ceb2742b62cd183d6fab74edc40647a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3e7c89196ceb2742b62cd183d6fab74edc40647a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e7c89196ceb2742b62cd183d6fab74edc40647a/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eac53ec992018a14db6f8a65a7ce333a4c8284cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eac53ec992018a14db6f8a65a7ce333a4c8284cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eac53ec992018a14db6f8a65a7ce333a4c8284cc"
      }
    ],
    "stats": {
      "total": 96,
      "additions": 44,
      "deletions": 52
    },
    "files": [
      {
        "sha": "4a294c6712d78be9d85fa21d0ecd56af50393955",
        "filename": "src/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e7c89196ceb2742b62cd183d6fab74edc40647a/src/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e7c89196ceb2742b62cd183d6fab74edc40647a/src/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/accounting_tests.cpp?ref=3e7c89196ceb2742b62cd183d6fab74edc40647a",
        "patch": "@@ -45,7 +45,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     ae.nTime = 1333333333;\n     ae.strOtherAccount = \"b\";\n     ae.strComment = \"\";\n-    walletdb.WriteAccountingEntry(ae);\n+    pwalletMain->AddAccountingEntry(ae, walletdb);\n \n     wtx.mapValue[\"comment\"] = \"z\";\n     pwalletMain->AddToWallet(wtx, false, &walletdb);\n@@ -55,7 +55,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n \n     ae.nTime = 1333333336;\n     ae.strOtherAccount = \"c\";\n-    walletdb.WriteAccountingEntry(ae);\n+    pwalletMain->AddAccountingEntry(ae, walletdb);\n \n     GetResults(walletdb, results);\n \n@@ -71,7 +71,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     ae.nTime = 1333333330;\n     ae.strOtherAccount = \"d\";\n     ae.nOrderPos = pwalletMain->IncOrderPosNext();\n-    walletdb.WriteAccountingEntry(ae);\n+    pwalletMain->AddAccountingEntry(ae, walletdb);\n \n     GetResults(walletdb, results);\n \n@@ -121,7 +121,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     ae.nTime = 1333333334;\n     ae.strOtherAccount = \"e\";\n     ae.nOrderPos = -1;\n-    walletdb.WriteAccountingEntry(ae);\n+    pwalletMain->AddAccountingEntry(ae, walletdb);\n \n     GetResults(walletdb, results);\n "
      },
      {
        "sha": "84881226c4530d3e6508c179956e1dfb47919445",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e7c89196ceb2742b62cd183d6fab74edc40647a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e7c89196ceb2742b62cd183d6fab74edc40647a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=3e7c89196ceb2742b62cd183d6fab74edc40647a",
        "patch": "@@ -835,7 +835,7 @@ UniValue movecmd(const UniValue& params, bool fHelp)\n     debit.nTime = nNow;\n     debit.strOtherAccount = strTo;\n     debit.strComment = strComment;\n-    walletdb.WriteAccountingEntry(debit);\n+    pwalletMain->AddAccountingEntry(debit, walletdb);\n \n     // Credit\n     CAccountingEntry credit;\n@@ -845,7 +845,7 @@ UniValue movecmd(const UniValue& params, bool fHelp)\n     credit.nTime = nNow;\n     credit.strOtherAccount = strFrom;\n     credit.strComment = strComment;\n-    walletdb.WriteAccountingEntry(credit);\n+    pwalletMain->AddAccountingEntry(credit, walletdb);\n \n     if (!walletdb.TxnCommit())\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"database error\");\n@@ -1470,11 +1470,10 @@ UniValue listtransactions(const UniValue& params, bool fHelp)\n \n     UniValue ret(UniValue::VARR);\n \n-    std::list<CAccountingEntry> acentries;\n-    CWallet::TxItems txOrdered = pwalletMain->OrderedTxItems(acentries, strAccount);\n+    const CWallet::TxItems & txOrdered = pwalletMain->wtxOrdered;\n \n     // iterate backwards until we have nCount items to return:\n-    for (CWallet::TxItems::reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n+    for (CWallet::TxItems::const_reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n     {\n         CWalletTx *const pwtx = (*it).second.first;\n         if (pwtx != 0)\n@@ -1579,8 +1578,7 @@ UniValue listaccounts(const UniValue& params, bool fHelp)\n         }\n     }\n \n-    list<CAccountingEntry> acentries;\n-    CWalletDB(pwalletMain->strWalletFile).ListAccountCreditDebit(\"*\", acentries);\n+    const list<CAccountingEntry> & acentries = pwalletMain->laccentries;\n     BOOST_FOREACH(const CAccountingEntry& entry, acentries)\n         mapAccountBalances[entry.strAccount] += entry.nCreditDebit;\n "
      },
      {
        "sha": "1b152f4192a3e1c57585c8fddeb73823e0daf131",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 29,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e7c89196ceb2742b62cd183d6fab74edc40647a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e7c89196ceb2742b62cd183d6fab74edc40647a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3e7c89196ceb2742b62cd183d6fab74edc40647a",
        "patch": "@@ -588,31 +588,6 @@ int64_t CWallet::IncOrderPosNext(CWalletDB *pwalletdb)\n     return nRet;\n }\n \n-CWallet::TxItems CWallet::OrderedTxItems(std::list<CAccountingEntry>& acentries, std::string strAccount)\n-{\n-    AssertLockHeld(cs_wallet); // mapWallet\n-    CWalletDB walletdb(strWalletFile);\n-\n-    // First: get all CWalletTx and CAccountingEntry into a sorted-by-order multimap.\n-    TxItems txOrdered;\n-\n-    // Note: maintaining indices in the database of (account,time) --> txid and (account, time) --> acentry\n-    // would make this much faster for applications that do this a lot.\n-    for (map<uint256, CWalletTx>::iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n-    {\n-        CWalletTx* wtx = &((*it).second);\n-        txOrdered.insert(make_pair(wtx->nOrderPos, TxPair(wtx, (CAccountingEntry*)0)));\n-    }\n-    acentries.clear();\n-    walletdb.ListAccountCreditDebit(strAccount, acentries);\n-    BOOST_FOREACH(CAccountingEntry& entry, acentries)\n-    {\n-        txOrdered.insert(make_pair(entry.nOrderPos, TxPair((CWalletTx*)0, &entry)));\n-    }\n-\n-    return txOrdered;\n-}\n-\n void CWallet::MarkDirty()\n {\n     {\n@@ -629,7 +604,9 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletD\n     if (fFromLoadWallet)\n     {\n         mapWallet[hash] = wtxIn;\n-        mapWallet[hash].BindWallet(this);\n+        CWalletTx& wtx = mapWallet[hash];\n+        wtx.BindWallet(this);\n+        wtxOrdered.insert(make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n         AddToSpends(hash);\n     }\n     else\n@@ -644,6 +621,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletD\n         {\n             wtx.nTimeReceived = GetAdjustedTime();\n             wtx.nOrderPos = IncOrderPosNext(pwalletdb);\n+            wtxOrdered.insert(make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n \n             wtx.nTimeSmart = wtx.nTimeReceived;\n             if (!wtxIn.hashBlock.IsNull())\n@@ -655,9 +633,8 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletD\n                     {\n                         // Tolerate times up to the last timestamp in the wallet not more than 5 minutes into the future\n                         int64_t latestTolerated = latestNow + 300;\n-                        std::list<CAccountingEntry> acentries;\n-                        TxItems txOrdered = OrderedTxItems(acentries);\n-                        for (TxItems::reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n+                        const TxItems & txOrdered = wtxOrdered;\n+                        for (TxItems::const_reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n                         {\n                             CWalletTx *const pwtx = (*it).second.first;\n                             if (pwtx == &wtx)\n@@ -2118,6 +2095,18 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n     return true;\n }\n \n+bool CWallet::AddAccountingEntry(const CAccountingEntry& acentry, CWalletDB & pwalletdb)\n+{\n+    if (!pwalletdb.WriteAccountingEntry_Backend(acentry))\n+        return false;\n+\n+    laccentries.push_back(acentry);\n+    CAccountingEntry & entry = laccentries.back();\n+    wtxOrdered.insert(make_pair(entry.nOrderPos, TxPair((CWalletTx*)0, &entry)));\n+\n+    return true;\n+}\n+\n CAmount CWallet::GetRequiredFee(unsigned int nTxBytes)\n {\n     return std::max(minTxFee.GetFee(nTxBytes), ::minRelayTxFee.GetFee(nTxBytes));"
      },
      {
        "sha": "7e846569ff19af23612d2b1efd3980fd005d6876",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 10,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e7c89196ceb2742b62cd183d6fab74edc40647a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e7c89196ceb2742b62cd183d6fab74edc40647a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=3e7c89196ceb2742b62cd183d6fab74edc40647a",
        "patch": "@@ -531,6 +531,11 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     }\n \n     std::map<uint256, CWalletTx> mapWallet;\n+    std::list<CAccountingEntry> laccentries;\n+\n+    typedef std::pair<CWalletTx*, CAccountingEntry*> TxPair;\n+    typedef std::multimap<int64_t, TxPair > TxItems;\n+    TxItems wtxOrdered;\n \n     int64_t nOrderPosNext;\n     std::map<uint256, int> mapRequestCount;\n@@ -617,16 +622,6 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      */\n     int64_t IncOrderPosNext(CWalletDB *pwalletdb = NULL);\n \n-    typedef std::pair<CWalletTx*, CAccountingEntry*> TxPair;\n-    typedef std::multimap<int64_t, TxPair > TxItems;\n-\n-    /**\n-     * Get the wallet's activity log\n-     * @return multimap of ordered transactions and accounting entries\n-     * @warning Returned pointers are *only* valid within the scope of passed acentries\n-     */\n-    TxItems OrderedTxItems(std::list<CAccountingEntry>& acentries, std::string strAccount = \"\");\n-\n     void MarkDirty();\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletDB* pwalletdb);\n     void SyncTransaction(const CTransaction& tx, const CBlock* pblock);\n@@ -656,6 +651,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n                            std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n \n+    bool AddAccountingEntry(const CAccountingEntry&, CWalletDB & pwalletdb);\n+\n     static CFeeRate minTxFee;\n     /**\n      * Estimate the minimum fee considering user set parameters"
      },
      {
        "sha": "9ce9f53bd97597b2c46e752514b1e8ace84b8b02",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e7c89196ceb2742b62cd183d6fab74edc40647a/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e7c89196ceb2742b62cd183d6fab74edc40647a/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=3e7c89196ceb2742b62cd183d6fab74edc40647a",
        "patch": "@@ -191,7 +191,7 @@ bool CWalletDB::WriteAccountingEntry(const uint64_t nAccEntryNum, const CAccount\n     return Write(std::make_pair(std::string(\"acentry\"), std::make_pair(acentry.strAccount, nAccEntryNum)), acentry);\n }\n \n-bool CWalletDB::WriteAccountingEntry(const CAccountingEntry& acentry)\n+bool CWalletDB::WriteAccountingEntry_Backend(const CAccountingEntry& acentry)\n {\n     return WriteAccountingEntry(++nAccountingEntryNumber, acentry);\n }\n@@ -709,6 +709,12 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n     if (wss.fAnyUnordered)\n         result = ReorderTransactions(pwallet);\n \n+    pwallet->laccentries.clear();\n+    ListAccountCreditDebit(\"*\", pwallet->laccentries);\n+    BOOST_FOREACH(CAccountingEntry& entry, pwallet->laccentries) {\n+        pwallet->wtxOrdered.insert(make_pair(entry.nOrderPos, CWallet::TxPair((CWalletTx*)0, &entry)));\n+    }\n+\n     return result;\n }\n "
      },
      {
        "sha": "3ebc05afd18dadd764c3ae06fffb495d243c4b5c",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e7c89196ceb2742b62cd183d6fab74edc40647a/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e7c89196ceb2742b62cd183d6fab74edc40647a/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=3e7c89196ceb2742b62cd183d6fab74edc40647a",
        "patch": "@@ -110,6 +110,9 @@ class CWalletDB : public CDB\n \n     bool WriteMinVersion(int nVersion);\n \n+    /// This writes directly to the database, and will not update the CWallet's cached accounting entries!\n+    /// Use wallet.AddAccountingEntry instead, to write *and* update its caches.\n+    bool WriteAccountingEntry_Backend(const CAccountingEntry& acentry);\n     bool ReadAccount(const std::string& strAccount, CAccount& account);\n     bool WriteAccount(const std::string& strAccount, const CAccount& account);\n \n@@ -118,7 +121,6 @@ class CWalletDB : public CDB\n     /// Erase destination data tuple from wallet database\n     bool EraseDestData(const std::string &address, const std::string &key);\n \n-    bool WriteAccountingEntry(const CAccountingEntry& acentry);\n     CAmount GetAccountCreditDebit(const std::string& strAccount);\n     void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& acentries);\n "
      }
    ]
  },
  {
    "sha": "616d61b20d56c0645412884df441eba781ec565d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTZkNjFiMjBkNTZjMDY0NTQxMjg4NGRmNDQxZWJhNzgxZWM1NjVk",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-21T02:36:58Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-21T02:52:44Z"
      },
      "message": "Merge pull request #6851\n\n3e7c891 Optimisation: Store transaction list order in memory rather than compute it every need (Luke Dashjr)",
      "tree": {
        "sha": "30c7e6299d5718510524401fbd0aa369605782b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/30c7e6299d5718510524401fbd0aa369605782b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/616d61b20d56c0645412884df441eba781ec565d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCAAGBQJWT9x8AAoJEOq1r5TZ6avnq1MP/0/U8itiaBpLCix7VRFun1Js\nEzqYrLZ91kkaEjk1fAsRAoF+vSzzty/xRLCW//y1mO94m/VijhrEMe++oH+ViLr4\nPU4F9nFdtMPpE/6Lwu4M+O8dSiJOm9EdRXGtlhxnqADEUCwdUIkaCWxI+J6QTM4b\nmARJgFlkwQHeUCBMApxvdRGVgYQynzA2ydBadZ3JeH7qv3IKL/BVuHIpxv84l/c7\n6bdbyKmyfJg6eOJmfg+Ucnwv9bCXS61eEz5GY5KP3db+RXkNlg91Z3XW5ctp6JCq\nzBDNJkekvLfzj7WEcjRtONBC+UCse+IRgtCZDODhCwWpnm+C0ogF1C6cm3PpB3f+\n5xeqOcbe4KodTRqlx132uf8Z69fpJoP9F+rfmqZoZJNhJ9vJPenfzpxtuqvcYcD6\nOAbaZ6jDT1YM33BxV6C1lC0dncwpbAF5EDvEWlGCZRn3urB61UxqOr0jf0vCVpoG\n4GK46V+tZZXv/mgZchGJ7E0jIIkz+90LY6hC+DKL/8eK1p0O/ZXjbulU9UzNeYBV\nFWaR1TV1LbEoohXZPytoTYFapc7aZiyxwvdPvaOhY7Qxt/LpVWVXoZ5xzitS0o8S\nL7gabqzkEtfZd4k95zlKcBLT0E4UpNTtOeJGxPvYlmROOqFaj8HSZsJsrs7rSao6\nLfW3gDXk046Kdr/cU0vb\n=fWQI\n-----END PGP SIGNATURE-----",
        "payload": "tree 30c7e6299d5718510524401fbd0aa369605782b5\nparent 776848acefa8345c7e510d31406160c4a1a24bca\nparent 3e7c89196ceb2742b62cd183d6fab74edc40647a\nauthor Gregory Maxwell <greg@xiph.org> 1448073418 -0800\ncommitter Gregory Maxwell <greg@xiph.org> 1448074364 -0800\n\nMerge pull request #6851\n\n3e7c891 Optimisation: Store transaction list order in memory rather than compute it every need (Luke Dashjr)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/616d61b20d56c0645412884df441eba781ec565d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/616d61b20d56c0645412884df441eba781ec565d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/616d61b20d56c0645412884df441eba781ec565d/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "776848acefa8345c7e510d31406160c4a1a24bca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/776848acefa8345c7e510d31406160c4a1a24bca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/776848acefa8345c7e510d31406160c4a1a24bca"
      },
      {
        "sha": "3e7c89196ceb2742b62cd183d6fab74edc40647a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e7c89196ceb2742b62cd183d6fab74edc40647a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e7c89196ceb2742b62cd183d6fab74edc40647a"
      }
    ],
    "stats": {
      "total": 96,
      "additions": 44,
      "deletions": 52
    },
    "files": [
      {
        "sha": "4a294c6712d78be9d85fa21d0ecd56af50393955",
        "filename": "src/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/616d61b20d56c0645412884df441eba781ec565d/src/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/616d61b20d56c0645412884df441eba781ec565d/src/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/accounting_tests.cpp?ref=616d61b20d56c0645412884df441eba781ec565d",
        "patch": "@@ -45,7 +45,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     ae.nTime = 1333333333;\n     ae.strOtherAccount = \"b\";\n     ae.strComment = \"\";\n-    walletdb.WriteAccountingEntry(ae);\n+    pwalletMain->AddAccountingEntry(ae, walletdb);\n \n     wtx.mapValue[\"comment\"] = \"z\";\n     pwalletMain->AddToWallet(wtx, false, &walletdb);\n@@ -55,7 +55,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n \n     ae.nTime = 1333333336;\n     ae.strOtherAccount = \"c\";\n-    walletdb.WriteAccountingEntry(ae);\n+    pwalletMain->AddAccountingEntry(ae, walletdb);\n \n     GetResults(walletdb, results);\n \n@@ -71,7 +71,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     ae.nTime = 1333333330;\n     ae.strOtherAccount = \"d\";\n     ae.nOrderPos = pwalletMain->IncOrderPosNext();\n-    walletdb.WriteAccountingEntry(ae);\n+    pwalletMain->AddAccountingEntry(ae, walletdb);\n \n     GetResults(walletdb, results);\n \n@@ -121,7 +121,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     ae.nTime = 1333333334;\n     ae.strOtherAccount = \"e\";\n     ae.nOrderPos = -1;\n-    walletdb.WriteAccountingEntry(ae);\n+    pwalletMain->AddAccountingEntry(ae, walletdb);\n \n     GetResults(walletdb, results);\n "
      },
      {
        "sha": "84881226c4530d3e6508c179956e1dfb47919445",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/616d61b20d56c0645412884df441eba781ec565d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/616d61b20d56c0645412884df441eba781ec565d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=616d61b20d56c0645412884df441eba781ec565d",
        "patch": "@@ -835,7 +835,7 @@ UniValue movecmd(const UniValue& params, bool fHelp)\n     debit.nTime = nNow;\n     debit.strOtherAccount = strTo;\n     debit.strComment = strComment;\n-    walletdb.WriteAccountingEntry(debit);\n+    pwalletMain->AddAccountingEntry(debit, walletdb);\n \n     // Credit\n     CAccountingEntry credit;\n@@ -845,7 +845,7 @@ UniValue movecmd(const UniValue& params, bool fHelp)\n     credit.nTime = nNow;\n     credit.strOtherAccount = strFrom;\n     credit.strComment = strComment;\n-    walletdb.WriteAccountingEntry(credit);\n+    pwalletMain->AddAccountingEntry(credit, walletdb);\n \n     if (!walletdb.TxnCommit())\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"database error\");\n@@ -1470,11 +1470,10 @@ UniValue listtransactions(const UniValue& params, bool fHelp)\n \n     UniValue ret(UniValue::VARR);\n \n-    std::list<CAccountingEntry> acentries;\n-    CWallet::TxItems txOrdered = pwalletMain->OrderedTxItems(acentries, strAccount);\n+    const CWallet::TxItems & txOrdered = pwalletMain->wtxOrdered;\n \n     // iterate backwards until we have nCount items to return:\n-    for (CWallet::TxItems::reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n+    for (CWallet::TxItems::const_reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n     {\n         CWalletTx *const pwtx = (*it).second.first;\n         if (pwtx != 0)\n@@ -1579,8 +1578,7 @@ UniValue listaccounts(const UniValue& params, bool fHelp)\n         }\n     }\n \n-    list<CAccountingEntry> acentries;\n-    CWalletDB(pwalletMain->strWalletFile).ListAccountCreditDebit(\"*\", acentries);\n+    const list<CAccountingEntry> & acentries = pwalletMain->laccentries;\n     BOOST_FOREACH(const CAccountingEntry& entry, acentries)\n         mapAccountBalances[entry.strAccount] += entry.nCreditDebit;\n "
      },
      {
        "sha": "1b152f4192a3e1c57585c8fddeb73823e0daf131",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 29,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/616d61b20d56c0645412884df441eba781ec565d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/616d61b20d56c0645412884df441eba781ec565d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=616d61b20d56c0645412884df441eba781ec565d",
        "patch": "@@ -588,31 +588,6 @@ int64_t CWallet::IncOrderPosNext(CWalletDB *pwalletdb)\n     return nRet;\n }\n \n-CWallet::TxItems CWallet::OrderedTxItems(std::list<CAccountingEntry>& acentries, std::string strAccount)\n-{\n-    AssertLockHeld(cs_wallet); // mapWallet\n-    CWalletDB walletdb(strWalletFile);\n-\n-    // First: get all CWalletTx and CAccountingEntry into a sorted-by-order multimap.\n-    TxItems txOrdered;\n-\n-    // Note: maintaining indices in the database of (account,time) --> txid and (account, time) --> acentry\n-    // would make this much faster for applications that do this a lot.\n-    for (map<uint256, CWalletTx>::iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n-    {\n-        CWalletTx* wtx = &((*it).second);\n-        txOrdered.insert(make_pair(wtx->nOrderPos, TxPair(wtx, (CAccountingEntry*)0)));\n-    }\n-    acentries.clear();\n-    walletdb.ListAccountCreditDebit(strAccount, acentries);\n-    BOOST_FOREACH(CAccountingEntry& entry, acentries)\n-    {\n-        txOrdered.insert(make_pair(entry.nOrderPos, TxPair((CWalletTx*)0, &entry)));\n-    }\n-\n-    return txOrdered;\n-}\n-\n void CWallet::MarkDirty()\n {\n     {\n@@ -629,7 +604,9 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletD\n     if (fFromLoadWallet)\n     {\n         mapWallet[hash] = wtxIn;\n-        mapWallet[hash].BindWallet(this);\n+        CWalletTx& wtx = mapWallet[hash];\n+        wtx.BindWallet(this);\n+        wtxOrdered.insert(make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n         AddToSpends(hash);\n     }\n     else\n@@ -644,6 +621,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletD\n         {\n             wtx.nTimeReceived = GetAdjustedTime();\n             wtx.nOrderPos = IncOrderPosNext(pwalletdb);\n+            wtxOrdered.insert(make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n \n             wtx.nTimeSmart = wtx.nTimeReceived;\n             if (!wtxIn.hashBlock.IsNull())\n@@ -655,9 +633,8 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletD\n                     {\n                         // Tolerate times up to the last timestamp in the wallet not more than 5 minutes into the future\n                         int64_t latestTolerated = latestNow + 300;\n-                        std::list<CAccountingEntry> acentries;\n-                        TxItems txOrdered = OrderedTxItems(acentries);\n-                        for (TxItems::reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n+                        const TxItems & txOrdered = wtxOrdered;\n+                        for (TxItems::const_reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n                         {\n                             CWalletTx *const pwtx = (*it).second.first;\n                             if (pwtx == &wtx)\n@@ -2118,6 +2095,18 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n     return true;\n }\n \n+bool CWallet::AddAccountingEntry(const CAccountingEntry& acentry, CWalletDB & pwalletdb)\n+{\n+    if (!pwalletdb.WriteAccountingEntry_Backend(acentry))\n+        return false;\n+\n+    laccentries.push_back(acentry);\n+    CAccountingEntry & entry = laccentries.back();\n+    wtxOrdered.insert(make_pair(entry.nOrderPos, TxPair((CWalletTx*)0, &entry)));\n+\n+    return true;\n+}\n+\n CAmount CWallet::GetRequiredFee(unsigned int nTxBytes)\n {\n     return std::max(minTxFee.GetFee(nTxBytes), ::minRelayTxFee.GetFee(nTxBytes));"
      },
      {
        "sha": "7e846569ff19af23612d2b1efd3980fd005d6876",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 10,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/616d61b20d56c0645412884df441eba781ec565d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/616d61b20d56c0645412884df441eba781ec565d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=616d61b20d56c0645412884df441eba781ec565d",
        "patch": "@@ -531,6 +531,11 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     }\n \n     std::map<uint256, CWalletTx> mapWallet;\n+    std::list<CAccountingEntry> laccentries;\n+\n+    typedef std::pair<CWalletTx*, CAccountingEntry*> TxPair;\n+    typedef std::multimap<int64_t, TxPair > TxItems;\n+    TxItems wtxOrdered;\n \n     int64_t nOrderPosNext;\n     std::map<uint256, int> mapRequestCount;\n@@ -617,16 +622,6 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      */\n     int64_t IncOrderPosNext(CWalletDB *pwalletdb = NULL);\n \n-    typedef std::pair<CWalletTx*, CAccountingEntry*> TxPair;\n-    typedef std::multimap<int64_t, TxPair > TxItems;\n-\n-    /**\n-     * Get the wallet's activity log\n-     * @return multimap of ordered transactions and accounting entries\n-     * @warning Returned pointers are *only* valid within the scope of passed acentries\n-     */\n-    TxItems OrderedTxItems(std::list<CAccountingEntry>& acentries, std::string strAccount = \"\");\n-\n     void MarkDirty();\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletDB* pwalletdb);\n     void SyncTransaction(const CTransaction& tx, const CBlock* pblock);\n@@ -656,6 +651,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n                            std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n \n+    bool AddAccountingEntry(const CAccountingEntry&, CWalletDB & pwalletdb);\n+\n     static CFeeRate minTxFee;\n     /**\n      * Estimate the minimum fee considering user set parameters"
      },
      {
        "sha": "9ce9f53bd97597b2c46e752514b1e8ace84b8b02",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/616d61b20d56c0645412884df441eba781ec565d/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/616d61b20d56c0645412884df441eba781ec565d/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=616d61b20d56c0645412884df441eba781ec565d",
        "patch": "@@ -191,7 +191,7 @@ bool CWalletDB::WriteAccountingEntry(const uint64_t nAccEntryNum, const CAccount\n     return Write(std::make_pair(std::string(\"acentry\"), std::make_pair(acentry.strAccount, nAccEntryNum)), acentry);\n }\n \n-bool CWalletDB::WriteAccountingEntry(const CAccountingEntry& acentry)\n+bool CWalletDB::WriteAccountingEntry_Backend(const CAccountingEntry& acentry)\n {\n     return WriteAccountingEntry(++nAccountingEntryNumber, acentry);\n }\n@@ -709,6 +709,12 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n     if (wss.fAnyUnordered)\n         result = ReorderTransactions(pwallet);\n \n+    pwallet->laccentries.clear();\n+    ListAccountCreditDebit(\"*\", pwallet->laccentries);\n+    BOOST_FOREACH(CAccountingEntry& entry, pwallet->laccentries) {\n+        pwallet->wtxOrdered.insert(make_pair(entry.nOrderPos, CWallet::TxPair((CWalletTx*)0, &entry)));\n+    }\n+\n     return result;\n }\n "
      },
      {
        "sha": "3ebc05afd18dadd764c3ae06fffb495d243c4b5c",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/616d61b20d56c0645412884df441eba781ec565d/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/616d61b20d56c0645412884df441eba781ec565d/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=616d61b20d56c0645412884df441eba781ec565d",
        "patch": "@@ -110,6 +110,9 @@ class CWalletDB : public CDB\n \n     bool WriteMinVersion(int nVersion);\n \n+    /// This writes directly to the database, and will not update the CWallet's cached accounting entries!\n+    /// Use wallet.AddAccountingEntry instead, to write *and* update its caches.\n+    bool WriteAccountingEntry_Backend(const CAccountingEntry& acentry);\n     bool ReadAccount(const std::string& strAccount, CAccount& account);\n     bool WriteAccount(const std::string& strAccount, const CAccount& account);\n \n@@ -118,7 +121,6 @@ class CWalletDB : public CDB\n     /// Erase destination data tuple from wallet database\n     bool EraseDestData(const std::string &address, const std::string &key);\n \n-    bool WriteAccountingEntry(const CAccountingEntry& acentry);\n     CAmount GetAccountCreditDebit(const std::string& strAccount);\n     void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& acentries);\n "
      }
    ]
  },
  {
    "sha": "31de2414c65d62b0f5e4dc7d967be1279ca2e027",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMWRlMjQxNGM2NWQ2MmIwZjVlNGRjN2Q5NjdiZTEyNzljYTJlMDI3",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-21T21:58:34Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-21T22:00:55Z"
      },
      "message": "Merge pull request #7011\n\n6531f17 Add mediantime field to getblock and getblockheader (Peter Todd)\n7259769 Document new mediantime field in getblockchaininfo (Peter Todd)\nc277a63 Clarify nLockTime-by-time comment in CheckFinalTx() (Peter Todd)\n748321e Add mediantime field to getblockchaininfo RPC call (Peter Todd)",
      "tree": {
        "sha": "9c0acc989f73c26694c69efff76b2891882c2f00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c0acc989f73c26694c69efff76b2891882c2f00"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31de2414c65d62b0f5e4dc7d967be1279ca2e027",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCAAGBQJWUOmXAAoJEOq1r5TZ6avnI1gP/RoSLgEQezbBjOhMMn8I2Add\n+QzVG1t6Xo634+ggCIiaDsGkHha4RXBSPJxFlBmSpo+I5JT9p0lagjwdTqivoBmL\nBLpFfEWnlW/kSe8KuWaGhMwPs1TSZ1C1Eoq2AqPUt1+/JNkvpLrqz6DgccseS/Bz\nFLAY5y7DSLjXDxBsiRyYZ3UVhs62BuUxaEAmZF2nwaDAYvPGmud51fbJogD13Xte\nnxWk7rcLEawxUZdAnIu0z7EX0pCMS9nCR1+r9dpgM5PH1h+G+/drAGKGzTbX6apC\nyvIwjSuOyKRInm3b5BZ7IcakOUu4eIIK5ZCiEjWvY/GX51bQb9vFpSDy/4lDvOtV\nMtUTYKA1rAMSAcVEyzxeeBfstbCUIyWUNoHIoPTJrlFXkLzfnIboBmB7mmsSAaty\nepGn8x/GtZX1yjqqNdRWiT034+d/uQUbxC3PNiZ4RCfrAkeBhtcnPyoWwgDNNMnA\njFtlFrkzPFTYuVW5NDyDqclvG15Ljybq+YMVb4L3Xc/N/GKG3bcQcxAe1oPlkRV9\nTTW3wijOVm/4Akw0YDBoF95DobfC+5WebSLxI26++I1778W6ywrt1ufk+ASzik/L\nQGhAmSoZ1g03v5BAsDY3W2WizjLq5YIRSDGDa40jOGUanAXhktzR08ZiB4QJORq7\nuwZcVYNQqUHV8kKYkH1D\n=4Ixj\n-----END PGP SIGNATURE-----",
        "payload": "tree 9c0acc989f73c26694c69efff76b2891882c2f00\nparent 616d61b20d56c0645412884df441eba781ec565d\nparent 6531f17a78e1e22c441d254eab83ce0a6d72b044\nauthor Gregory Maxwell <greg@xiph.org> 1448143114 -0800\ncommitter Gregory Maxwell <greg@xiph.org> 1448143255 -0800\n\nMerge pull request #7011\n\n6531f17 Add mediantime field to getblock and getblockheader (Peter Todd)\n7259769 Document new mediantime field in getblockchaininfo (Peter Todd)\nc277a63 Clarify nLockTime-by-time comment in CheckFinalTx() (Peter Todd)\n748321e Add mediantime field to getblockchaininfo RPC call (Peter Todd)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31de2414c65d62b0f5e4dc7d967be1279ca2e027",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/31de2414c65d62b0f5e4dc7d967be1279ca2e027",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31de2414c65d62b0f5e4dc7d967be1279ca2e027/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "616d61b20d56c0645412884df441eba781ec565d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/616d61b20d56c0645412884df441eba781ec565d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/616d61b20d56c0645412884df441eba781ec565d"
      },
      {
        "sha": "6531f17a78e1e22c441d254eab83ce0a6d72b044",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6531f17a78e1e22c441d254eab83ce0a6d72b044",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6531f17a78e1e22c441d254eab83ce0a6d72b044"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 11,
      "deletions": 4
    },
    "files": [
      {
        "sha": "439314f43bccee86ee6c462d00426f7aa29dccd2",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31de2414c65d62b0f5e4dc7d967be1279ca2e027/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31de2414c65d62b0f5e4dc7d967be1279ca2e027/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=31de2414c65d62b0f5e4dc7d967be1279ca2e027",
        "patch": "@@ -670,10 +670,11 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n     // IsFinalTx() with one more than chainActive.Height().\n     const int nBlockHeight = chainActive.Height() + 1;\n \n-    // Timestamps on the other hand don't get any special treatment,\n-    // because we can't know what timestamp the next block will have,\n-    // and there aren't timestamp applications where it matters.\n-    // However this changes once median past time-locks are enforced:\n+    // BIP113 will require that time-locked transactions have nLockTime set to\n+    // less than the median time of the previous block they're contained in.\n+    // When the next block is created its previous block will be the current\n+    // chain tip, so we use that to calculate the median time passed to\n+    // IsFinalTx() if LOCKTIME_MEDIAN_TIME_PAST is set.\n     const int64_t nBlockTime = (flags & LOCKTIME_MEDIAN_TIME_PAST)\n                              ? chainActive.Tip()->GetMedianTimePast()\n                              : GetAdjustedTime();"
      },
      {
        "sha": "012370ed10995e6cd7bbe030ad4abab2cfe259e5",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31de2414c65d62b0f5e4dc7d967be1279ca2e027/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31de2414c65d62b0f5e4dc7d967be1279ca2e027/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=31de2414c65d62b0f5e4dc7d967be1279ca2e027",
        "patch": "@@ -71,6 +71,7 @@ UniValue blockheaderToJSON(const CBlockIndex* blockindex)\n     result.push_back(Pair(\"version\", blockindex->nVersion));\n     result.push_back(Pair(\"merkleroot\", blockindex->hashMerkleRoot.GetHex()));\n     result.push_back(Pair(\"time\", (int64_t)blockindex->nTime));\n+    result.push_back(Pair(\"mediantime\", (int64_t)blockindex->GetMedianTimePast()));\n     result.push_back(Pair(\"nonce\", (uint64_t)blockindex->nNonce));\n     result.push_back(Pair(\"bits\", strprintf(\"%08x\", blockindex->nBits)));\n     result.push_back(Pair(\"difficulty\", GetDifficulty(blockindex)));\n@@ -111,6 +112,7 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n     }\n     result.push_back(Pair(\"tx\", txs));\n     result.push_back(Pair(\"time\", block.GetBlockTime()));\n+    result.push_back(Pair(\"mediantime\", (int64_t)blockindex->GetMedianTimePast()));\n     result.push_back(Pair(\"nonce\", (uint64_t)block.nNonce));\n     result.push_back(Pair(\"bits\", strprintf(\"%08x\", block.nBits)));\n     result.push_back(Pair(\"difficulty\", GetDifficulty(blockindex)));\n@@ -313,6 +315,7 @@ UniValue getblockheader(const UniValue& params, bool fHelp)\n             \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n             \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n             \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n             \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n             \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n             \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n@@ -374,6 +377,7 @@ UniValue getblock(const UniValue& params, bool fHelp)\n             \"     ,...\\n\"\n             \"  ],\\n\"\n             \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n             \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n             \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n             \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n@@ -608,6 +612,7 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n             \"  \\\"headers\\\": xxxxxx,        (numeric) the current number of headers we have validated\\n\"\n             \"  \\\"bestblockhash\\\": \\\"...\\\", (string) the hash of the currently best block\\n\"\n             \"  \\\"difficulty\\\": xxxxxx,     (numeric) the current difficulty\\n\"\n+            \"  \\\"mediantime\\\": xxxxxx,     (numeric) median time for the current best block\\n\"\n             \"  \\\"verificationprogress\\\": xxxx, (numeric) estimate of verification progress [0..1]\\n\"\n             \"  \\\"chainwork\\\": \\\"xxxx\\\"     (string) total amount of work in active chain, in hexadecimal\\n\"\n             \"  \\\"pruned\\\": xx,             (boolean) if the blocks are subject to pruning\\n\"\n@@ -639,6 +644,7 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n     obj.push_back(Pair(\"headers\",               pindexBestHeader ? pindexBestHeader->nHeight : -1));\n     obj.push_back(Pair(\"bestblockhash\",         chainActive.Tip()->GetBlockHash().GetHex()));\n     obj.push_back(Pair(\"difficulty\",            (double)GetDifficulty()));\n+    obj.push_back(Pair(\"mediantime\",            (int64_t)chainActive.Tip()->GetMedianTimePast()));\n     obj.push_back(Pair(\"verificationprogress\",  Checkpoints::GuessVerificationProgress(Params().Checkpoints(), chainActive.Tip())));\n     obj.push_back(Pair(\"chainwork\",             chainActive.Tip()->nChainWork.GetHex()));\n     obj.push_back(Pair(\"pruned\",                fPruneMode));"
      }
    ]
  },
  {
    "sha": "80ae230a52ab781806876ea8be174b1793b9b683",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MGFlMjMwYTUyYWI3ODE4MDY4NzZlYThiZTE3NGIxNzkzYjliNjgz",
    "commit": {
      "author": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-20T23:54:27Z"
      },
      "committer": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-22T00:09:52Z"
      },
      "message": "Improve log messages for blocks only violations.",
      "tree": {
        "sha": "cb58407947c434b5e7f96f72893f63b68c53ddd8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb58407947c434b5e7f96f72893f63b68c53ddd8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80ae230a52ab781806876ea8be174b1793b9b683",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80ae230a52ab781806876ea8be174b1793b9b683",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/80ae230a52ab781806876ea8be174b1793b9b683",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80ae230a52ab781806876ea8be174b1793b9b683/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "08843ed99843078acb10eecda2045d5f0f1c2b4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08843ed99843078acb10eecda2045d5f0f1c2b4f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/08843ed99843078acb10eecda2045d5f0f1c2b4f"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7242abb0cbf9ffcd174fca7188d86aa602684b3e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80ae230a52ab781806876ea8be174b1793b9b683/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80ae230a52ab781806876ea8be174b1793b9b683/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=80ae230a52ab781806876ea8be174b1793b9b683",
        "patch": "@@ -4256,7 +4256,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             else\n             {\n                 if (fBlocksOnly)\n-                    LogPrint(\"net\", \"peer sent inv %s in violation of protocol peer=%d\\n\", inv.ToString(), pfrom->id);\n+                    LogPrint(\"net\", \"transaction (%s) inv sent in violation of protocol peer=%d\\n\", inv.hash.ToString(), pfrom->id);\n                 else if (!fAlreadyHave && !fImporting && !fReindex)\n                     pfrom->AskFor(inv);\n             }\n@@ -4388,7 +4388,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // We are in blocks only mode and peer is either not whitelisted or whitelistalwaysrelay is off\n         if (GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY) && (!pfrom->fWhitelisted || !GetBoolArg(\"-whitelistalwaysrelay\", DEFAULT_WHITELISTALWAYSRELAY)))\n         {\n-            LogPrint(\"net\", \"peer sent transaction in violation of protocol peer=%d\\n\", pfrom->id);\n+            LogPrint(\"net\", \"transaction sent in violation of protocol peer=%d\\n\", pfrom->id);\n             return true;\n         }\n "
      }
    ]
  },
  {
    "sha": "4846543ac58c72ca5ec2b25e690c8e1a4247c048",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODQ2NTQzYWM1OGM3MmNhNWVjMmIyNWU2OTBjOGUxYTQyNDdjMDQ4",
    "commit": {
      "author": {
        "name": "tulip",
        "email": "tulip@JBinUp.local",
        "date": "2015-11-22T06:48:25Z"
      },
      "committer": {
        "name": "tulip",
        "email": "tulip@JBinUp.local",
        "date": "2015-11-22T06:48:25Z"
      },
      "message": "Move time data log print to 'net' category to reduce log noise",
      "tree": {
        "sha": "5ddff400e9ddbdac70fbedadf608f4967f60bbd2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ddff400e9ddbdac70fbedadf608f4967f60bbd2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4846543ac58c72ca5ec2b25e690c8e1a4247c048",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4846543ac58c72ca5ec2b25e690c8e1a4247c048",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4846543ac58c72ca5ec2b25e690c8e1a4247c048",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4846543ac58c72ca5ec2b25e690c8e1a4247c048/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "31de2414c65d62b0f5e4dc7d967be1279ca2e027",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31de2414c65d62b0f5e4dc7d967be1279ca2e027",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31de2414c65d62b0f5e4dc7d967be1279ca2e027"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "861c37598908e0c84f528194b8a66652e7133c92",
        "filename": "src/timedata.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4846543ac58c72ca5ec2b25e690c8e1a4247c048/src/timedata.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4846543ac58c72ca5ec2b25e690c8e1a4247c048/src/timedata.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.cpp?ref=4846543ac58c72ca5ec2b25e690c8e1a4247c048",
        "patch": "@@ -55,7 +55,7 @@ void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n     // Add data\n     static CMedianFilter<int64_t> vTimeOffsets(BITCOIN_TIMEDATA_MAX_SAMPLES, 0);\n     vTimeOffsets.input(nOffsetSample);\n-    LogPrintf(\"Added time data, samples %d, offset %+d (%+d minutes)\\n\", vTimeOffsets.size(), nOffsetSample, nOffsetSample/60);\n+    LogPrint(\"net\",\"added time data, samples %d, offset %+d (%+d minutes)\\n\", vTimeOffsets.size(), nOffsetSample, nOffsetSample/60);\n \n     // There is a known issue here (see issue #4521):\n     //\n@@ -105,11 +105,11 @@ void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n                 }\n             }\n         }\n-        if (fDebug) {\n-            BOOST_FOREACH(int64_t n, vSorted)\n-                LogPrintf(\"%+d  \", n);\n-            LogPrintf(\"|  \");\n-        }\n-        LogPrintf(\"nTimeOffset = %+d  (%+d minutes)\\n\", nTimeOffset, nTimeOffset/60);\n+        \n+        BOOST_FOREACH(int64_t n, vSorted)\n+            LogPrint(\"net\", \"%+d  \", n);\n+        LogPrint(\"net\", \"|  \");\n+        \n+        LogPrint(\"net\", \"nTimeOffset = %+d  (%+d minutes)\\n\", nTimeOffset, nTimeOffset/60);\n     }\n }"
      }
    ]
  },
  {
    "sha": "c322652b71b9642199490c44dcdf5371c53de585",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzIyNjUyYjcxYjk2NDIxOTk0OTBjNDRkY2RmNTM3MWM1M2RlNTg1",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-22T22:00:58Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-22T22:01:33Z"
      },
      "message": "Merge pull request #7046\n\n80ae230 Improve log messages for blocks only violations. (Patick Strateman)\n08843ed Add relaytxes status to getpeerinfo (Peter Todd)\nd8aaa51 Bail early in processing transactions in blocks only mode. (Patick Strateman)\n3587f6a Fix relay mechanism for whitelisted peers under blocks only mode. (Patick Strateman)",
      "tree": {
        "sha": "70664b5b04820286ea00be7a1cb51862bbaba6bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70664b5b04820286ea00be7a1cb51862bbaba6bc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c322652b71b9642199490c44dcdf5371c53de585",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCAAGBQJWUjs9AAoJEOq1r5TZ6avnn+gQAIA0uZPay1/IMVBarhOGMfjC\nHkmREIQ9h68xV253fsJdebPmDmqCJ2uEJ05eUeHv0VZHWwi2ttmEwOyWKRThMAIj\n/07pjxaKzn6Ks23SCjPsS5d/k92WU+3UrMwKZDSSRvn/xb9Y4OSaRHgTCSQULHYJ\nXWdLxJ7TmSt3u2BIB3oBxKSGcHrt//yUXAArsptGDHxM+k+qhmFrvMJiFcZ6o7H3\nQO7lc8/XJNjS+x1G30aLs4YQcDNmasrJ1gnCmWxtYVyaDGOus6Z1zDu7wWjUl0AC\njg2uF5b5kE4qvMgTosfFcP0U7bnBYbTTeQpthsj/NnJ/fkxi/1J5GICh4vhKR3fJ\nnxBYgTZjNsjY2WgpQImDCgZpkL7ahcciuFe0QTt36sILaiU6jgi4VtcLM24fZHmG\nkpRyGMA3xU5Ul9DlqDqsWwlLupUqhMA1ZoTeWkySaNY74NO+o/uz24wgwsGOV3KT\nIL2MxRXaO96qZktiX4hAad2dwcj+JcJl6QbsLn9v72OOa44iJ/MTyeJXiztJfahg\nos+bGKrkncjC3P/ai0KRpXrJg8vEq67mlgcb3euP7uuQ8KPwGBfKO/Em1PlwhVyH\nb5MC6NfksIWn2ay8LF3/hXBuVcz43nFCeY8v5ep8QN/b9HUn10jHMlDsAVj4c1he\nSJM4ZlUmJQyWsdRK+wps\n=mgpZ\n-----END PGP SIGNATURE-----",
        "payload": "tree 70664b5b04820286ea00be7a1cb51862bbaba6bc\nparent 31de2414c65d62b0f5e4dc7d967be1279ca2e027\nparent 80ae230a52ab781806876ea8be174b1793b9b683\nauthor Gregory Maxwell <greg@xiph.org> 1448229658 -0800\ncommitter Gregory Maxwell <greg@xiph.org> 1448229693 -0800\n\nMerge pull request #7046\n\n80ae230 Improve log messages for blocks only violations. (Patick Strateman)\n08843ed Add relaytxes status to getpeerinfo (Peter Todd)\nd8aaa51 Bail early in processing transactions in blocks only mode. (Patick Strateman)\n3587f6a Fix relay mechanism for whitelisted peers under blocks only mode. (Patick Strateman)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c322652b71b9642199490c44dcdf5371c53de585",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c322652b71b9642199490c44dcdf5371c53de585",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c322652b71b9642199490c44dcdf5371c53de585/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "31de2414c65d62b0f5e4dc7d967be1279ca2e027",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31de2414c65d62b0f5e4dc7d967be1279ca2e027",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31de2414c65d62b0f5e4dc7d967be1279ca2e027"
      },
      {
        "sha": "80ae230a52ab781806876ea8be174b1793b9b683",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80ae230a52ab781806876ea8be174b1793b9b683",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80ae230a52ab781806876ea8be174b1793b9b683"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 25,
      "deletions": 3
    },
    "files": [
      {
        "sha": "2579b642b84359b1191d632fb8bee43e5cd083e5",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 3,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c322652b71b9642199490c44dcdf5371c53de585/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c322652b71b9642199490c44dcdf5371c53de585/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c322652b71b9642199490c44dcdf5371c53de585",
        "patch": "@@ -4211,6 +4211,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             return error(\"message inv size() = %u\", vInv.size());\n         }\n \n+        bool fBlocksOnly = GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY);\n+\n+        // Allow whitelisted peers to send data other than blocks in blocks only mode if whitelistalwaysrelay is true\n+        if (pfrom->fWhitelisted && GetBoolArg(\"-whitelistalwaysrelay\", DEFAULT_WHITELISTALWAYSRELAY))\n+            fBlocksOnly = false;\n+\n         LOCK(cs_main);\n \n         std::vector<CInv> vToFetch;\n@@ -4225,9 +4231,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             bool fAlreadyHave = AlreadyHave(inv);\n             LogPrint(\"net\", \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n \n-            if (!fAlreadyHave && !fImporting && !fReindex && inv.type != MSG_BLOCK && !GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY))\n-                pfrom->AskFor(inv);\n-\n             if (inv.type == MSG_BLOCK) {\n                 UpdateBlockAvailability(pfrom->GetId(), inv.hash);\n                 if (!fAlreadyHave && !fImporting && !fReindex && !mapBlocksInFlight.count(inv.hash)) {\n@@ -4251,6 +4254,13 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     LogPrint(\"net\", \"getheaders (%d) %s to peer=%d\\n\", pindexBestHeader->nHeight, inv.hash.ToString(), pfrom->id);\n                 }\n             }\n+            else\n+            {\n+                if (fBlocksOnly)\n+                    LogPrint(\"net\", \"transaction (%s) inv sent in violation of protocol peer=%d\\n\", inv.hash.ToString(), pfrom->id);\n+                else if (!fAlreadyHave && !fImporting && !fReindex)\n+                    pfrom->AskFor(inv);\n+            }\n \n             // Track requests for our stuff\n             GetMainSignals().Inventory(inv.hash);\n@@ -4375,6 +4385,14 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n     else if (strCommand == \"tx\")\n     {\n+        // Stop processing the transaction early if\n+        // We are in blocks only mode and peer is either not whitelisted or whitelistalwaysrelay is off\n+        if (GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY) && (!pfrom->fWhitelisted || !GetBoolArg(\"-whitelistalwaysrelay\", DEFAULT_WHITELISTALWAYSRELAY)))\n+        {\n+            LogPrint(\"net\", \"transaction sent in violation of protocol peer=%d\\n\", pfrom->id);\n+            return true;\n+        }\n+\n         vector<uint256> vWorkQueue;\n         vector<uint256> vEraseQueue;\n         CTransaction tx;"
      },
      {
        "sha": "cff4c5450505b843421889a8ca294724a0f30753",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c322652b71b9642199490c44dcdf5371c53de585/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c322652b71b9642199490c44dcdf5371c53de585/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=c322652b71b9642199490c44dcdf5371c53de585",
        "patch": "@@ -617,6 +617,7 @@ void CNode::copyStats(CNodeStats &stats)\n {\n     stats.nodeid = this->GetId();\n     X(nServices);\n+    X(fRelayTxes);\n     X(nLastSend);\n     X(nLastRecv);\n     X(nTimeConnected);"
      },
      {
        "sha": "559cdf0878838bd6215241f9e1757ccabd81e1cc",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c322652b71b9642199490c44dcdf5371c53de585/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c322652b71b9642199490c44dcdf5371c53de585/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=c322652b71b9642199490c44dcdf5371c53de585",
        "patch": "@@ -180,6 +180,7 @@ class CNodeStats\n public:\n     NodeId nodeid;\n     uint64_t nServices;\n+    bool fRelayTxes;\n     int64_t nLastSend;\n     int64_t nLastRecv;\n     int64_t nTimeConnected;"
      },
      {
        "sha": "25788488915010283324ccfe248091be70398523",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c322652b71b9642199490c44dcdf5371c53de585/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c322652b71b9642199490c44dcdf5371c53de585/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=c322652b71b9642199490c44dcdf5371c53de585",
        "patch": "@@ -90,6 +90,7 @@ UniValue getpeerinfo(const UniValue& params, bool fHelp)\n             \"    \\\"addr\\\":\\\"host:port\\\",      (string) The ip address and port of the peer\\n\"\n             \"    \\\"addrlocal\\\":\\\"ip:port\\\",   (string) local address\\n\"\n             \"    \\\"services\\\":\\\"xxxxxxxxxxxxxxxx\\\",   (string) The services offered\\n\"\n+            \"    \\\"relaytxes\\\":true|false,    (boolean) Whether peer has asked us to relay transactions to it\\n\"\n             \"    \\\"lastsend\\\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last send\\n\"\n             \"    \\\"lastrecv\\\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last receive\\n\"\n             \"    \\\"bytessent\\\": n,            (numeric) The total bytes sent\\n\"\n@@ -134,6 +135,7 @@ UniValue getpeerinfo(const UniValue& params, bool fHelp)\n         if (!(stats.addrLocal.empty()))\n             obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n         obj.push_back(Pair(\"services\", strprintf(\"%016x\", stats.nServices)));\n+        obj.push_back(Pair(\"relaytxes\", stats.fRelayTxes));\n         obj.push_back(Pair(\"lastsend\", stats.nLastSend));\n         obj.push_back(Pair(\"lastrecv\", stats.nLastRecv));\n         obj.push_back(Pair(\"bytessent\", stats.nSendBytes));"
      }
    ]
  },
  {
    "sha": "9cdd407ca55b080952f6634e185a17d45cd124f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Y2RkNDA3Y2E1NWIwODA5NTJmNjYzNGUxODVhMTdkNDVjZDEyNGY4",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-22T22:46:57Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-22T22:47:40Z"
      },
      "message": "Merge pull request #7029\n\nc800c95 Remove unmaintained example test script_test.py (Suhas Daftuar)",
      "tree": {
        "sha": "f1870785d9e425740625efdacb701312c7ffdeda",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1870785d9e425740625efdacb701312c7ffdeda"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9cdd407ca55b080952f6634e185a17d45cd124f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCAAGBQJWUkYMAAoJEOq1r5TZ6avnzC0QALY/ofhtNAEG54OdFGKyQH4F\nU4fA/crpFtT75lLevP27Ra5O2VCty+yYJrdvkDqPP5LcY9TmRJMYtVJZrUKAPLae\nrs447GDnNp5LSHXi5QrOiamn8V9KgHDlCSpBhPUIoGpzNbcmkjTWJO54j3rD0kN4\nDOmKI4U7wI+TBRpRRm9Gfljq0ya6eFbqPJ6k65i/SgBAp5fDABt7fPVnpSsB9d9s\nw/BS1qXpTFx/S+SK4WF0qVUMPZew0MRTv5eoLDoQEIG7uaWZ31K3WOoOfGdUSblB\nJsdkADIE5sNUahjkdKSq5ML9Rs8nOfIVfK5Sl6kxn5t4QYXCh16VWbqmp349Y83j\n8UQlOGayKTdt8D4kssn93hs1IBNx0fqlJrvhPZcN/a5cFAjGiAjWsxZAmYb/5uAL\nFThGv/ejjh/I3fkTQ8/vnz+o2RqPm7YDCPpHFLYC2lVrSNcs9A2VzX05o774zsk1\nDRrQ/sMKsPNaRH6DBiExRZZ/e3qdD4bJo8idT6oqIFvnTxihZ4yK+Apx+MvaFpts\n6oau1UHDXEYUR3zhqZta6dLqAmri5RdXY+vMjXwCdMIO0WQcKoZCFw3HELITg96C\ngwRrcwqdy37vntbCPuoyApVvZ/lqvakeXVwPiDv0BLTvWIgljoKWoAxTyKzl9BGC\nESkSxVdMoVULjd947kaD\n=yEbX\n-----END PGP SIGNATURE-----",
        "payload": "tree f1870785d9e425740625efdacb701312c7ffdeda\nparent c322652b71b9642199490c44dcdf5371c53de585\nparent c800c95997fc6365165e0d2645517f738aa4aad4\nauthor Gregory Maxwell <greg@xiph.org> 1448232417 -0800\ncommitter Gregory Maxwell <greg@xiph.org> 1448232460 -0800\n\nMerge pull request #7029\n\nc800c95 Remove unmaintained example test script_test.py (Suhas Daftuar)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cdd407ca55b080952f6634e185a17d45cd124f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9cdd407ca55b080952f6634e185a17d45cd124f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cdd407ca55b080952f6634e185a17d45cd124f8/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c322652b71b9642199490c44dcdf5371c53de585",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c322652b71b9642199490c44dcdf5371c53de585",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c322652b71b9642199490c44dcdf5371c53de585"
      },
      {
        "sha": "c800c95997fc6365165e0d2645517f738aa4aad4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c800c95997fc6365165e0d2645517f738aa4aad4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c800c95997fc6365165e0d2645517f738aa4aad4"
      }
    ],
    "stats": {
      "total": 260,
      "additions": 0,
      "deletions": 260
    },
    "files": [
      {
        "sha": "7a30db68dd53d4d53eebdba9a780ed4d45c7fa91",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cdd407ca55b080952f6634e185a17d45cd124f8/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cdd407ca55b080952f6634e185a17d45cd124f8/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=9cdd407ca55b080952f6634e185a17d45cd124f8",
        "patch": "@@ -106,7 +106,6 @@\n     'invalidateblock.py',\n     'keypool.py',\n #    'rpcbind_test.py', #temporary, bug in libevent, see #6655\n-#    'script_test.py', #used for manual comparison of 2 binaries\n     'smartfees.py',\n     'maxblocksinflight.py',\n     'invalidblockrequest.py',"
      },
      {
        "sha": "afc44b51b5416b9bfa5589a5e8653ee5dfbffad7",
        "filename": "qa/rpc-tests/script_test.py",
        "status": "removed",
        "additions": 0,
        "deletions": 259,
        "changes": 259,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c322652b71b9642199490c44dcdf5371c53de585/qa/rpc-tests/script_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c322652b71b9642199490c44dcdf5371c53de585/qa/rpc-tests/script_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/script_test.py?ref=c322652b71b9642199490c44dcdf5371c53de585",
        "patch": "@@ -1,259 +0,0 @@\n-#!/usr/bin/env python2\n-#\n-# Distributed under the MIT/X11 software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n-\n-'''\n-Test notes:\n-This test uses the script_valid and script_invalid tests from the unittest\n-framework to do end-to-end testing where we compare that two nodes agree on\n-whether blocks containing a given test script are valid.\n-\n-We generally ignore the script flags associated with each test (since we lack\n-the precision to test each script using those flags in this framework), but\n-for tests with SCRIPT_VERIFY_P2SH, we can use a block time after the BIP16 \n-switchover date to try to test with that flag enabled (and for tests without\n-that flag, we use a block time before the switchover date).\n-\n-NOTE: This test is very slow and may take more than 40 minutes to run.\n-'''\n-\n-from test_framework.test_framework import ComparisonTestFramework\n-from test_framework.util import *\n-from test_framework.comptool import TestInstance, TestManager\n-from test_framework.mininode import *\n-from test_framework.blocktools import *\n-from test_framework.script import *\n-import logging\n-import copy\n-import json\n-\n-script_valid_file   = \"../../src/test/data/script_valid.json\"\n-script_invalid_file = \"../../src/test/data/script_invalid.json\"\n-\n-# Pass in a set of json files to open. \n-class ScriptTestFile(object):\n-\n-    def __init__(self, files):\n-        self.files = files\n-        self.index = -1\n-        self.data = []\n-\n-    def load_files(self):\n-        for f in self.files:\n-            self.data.extend(json.loads(open(os.path.dirname(os.path.abspath(__file__))+\"/\"+f).read()))\n-\n-    # Skip over records that are not long enough to be tests\n-    def get_records(self):\n-        while (self.index < len(self.data)):\n-            if len(self.data[self.index]) >= 3:\n-                yield self.data[self.index]\n-            self.index += 1\n-\n-\n-# Helper for parsing the flags specified in the .json files\n-SCRIPT_VERIFY_NONE = 0\n-SCRIPT_VERIFY_P2SH = 1 \n-SCRIPT_VERIFY_STRICTENC = 1 << 1\n-SCRIPT_VERIFY_DERSIG = 1 << 2\n-SCRIPT_VERIFY_LOW_S = 1 << 3\n-SCRIPT_VERIFY_NULLDUMMY = 1 << 4\n-SCRIPT_VERIFY_SIGPUSHONLY = 1 << 5\n-SCRIPT_VERIFY_MINIMALDATA = 1 << 6\n-SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS = 1 << 7\n-SCRIPT_VERIFY_CLEANSTACK = 1 << 8\n-\n-flag_map = { \n-    \"\": SCRIPT_VERIFY_NONE,\n-    \"NONE\": SCRIPT_VERIFY_NONE, \n-    \"P2SH\": SCRIPT_VERIFY_P2SH,\n-    \"STRICTENC\": SCRIPT_VERIFY_STRICTENC,\n-    \"DERSIG\": SCRIPT_VERIFY_DERSIG,\n-    \"LOW_S\": SCRIPT_VERIFY_LOW_S,\n-    \"NULLDUMMY\": SCRIPT_VERIFY_NULLDUMMY,\n-    \"SIGPUSHONLY\": SCRIPT_VERIFY_SIGPUSHONLY,\n-    \"MINIMALDATA\": SCRIPT_VERIFY_MINIMALDATA,\n-    \"DISCOURAGE_UPGRADABLE_NOPS\": SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS,\n-    \"CLEANSTACK\": SCRIPT_VERIFY_CLEANSTACK,\n-}\n-\n-def ParseScriptFlags(flag_string):\n-    flags = 0\n-    for x in flag_string.split(\",\"):\n-        if x in flag_map:\n-            flags |= flag_map[x]\n-        else:\n-            print \"Error: unrecognized script flag: \", x\n-    return flags\n-\n-'''\n-Given a string that is a scriptsig or scriptpubkey from the .json files above,\n-convert it to a CScript()\n-'''\n-# Replicates behavior from core_read.cpp\n-def ParseScript(json_script):\n-    script = json_script.split(\" \")\n-    parsed_script = CScript()\n-    for x in script:\n-        if len(x) == 0:\n-            # Empty string, ignore.\n-            pass\n-        elif x.isdigit() or (len(x) >= 1 and x[0] == \"-\" and x[1:].isdigit()):\n-            # Number\n-            n = int(x, 0)\n-            if (n == -1) or (n >= 1 and n <= 16):\n-                parsed_script = CScript(bytes(parsed_script) + bytes(CScript([n])))\n-            else:\n-                parsed_script += CScriptNum(int(x, 0))\n-        elif x.startswith(\"0x\"):\n-            # Raw hex data, inserted NOT pushed onto stack:\n-            for i in xrange(2, len(x), 2):\n-                parsed_script = CScript(bytes(parsed_script) + bytes(chr(int(x[i:i+2],16))))\n-        elif x.startswith(\"'\") and x.endswith(\"'\") and len(x) >= 2:\n-            # Single-quoted string, pushed as data.\n-            parsed_script += CScript([x[1:-1]])\n-        else:\n-            # opcode, e.g. OP_ADD or ADD:\n-            tryopname = \"OP_\" + x\n-            if tryopname in OPCODES_BY_NAME:\n-                parsed_script += CScriptOp(OPCODES_BY_NAME[\"OP_\" + x])\n-            else:\n-                print \"ParseScript: error parsing '%s'\" % x\n-                return \"\"\n-    return parsed_script\n-            \n-class TestBuilder(object):\n-    def create_credit_tx(self, scriptPubKey, height):\n-        # self.tx1 is a coinbase transaction, modeled after the one created by script_tests.cpp\n-        # This allows us to reuse signatures created in the unit test framework.\n-        self.tx1 = create_coinbase(height)                 # this has a bip34 scriptsig,\n-        self.tx1.vin[0].scriptSig = CScript([0, 0])  # but this matches the unit tests\n-        self.tx1.vout[0].nValue = 0\n-        self.tx1.vout[0].scriptPubKey = scriptPubKey\n-        self.tx1.rehash()\n-    def create_spend_tx(self, scriptSig):\n-        self.tx2 = create_transaction(self.tx1, 0, CScript(), 0)\n-        self.tx2.vin[0].scriptSig = scriptSig\n-        self.tx2.vout[0].scriptPubKey = CScript()\n-        self.tx2.rehash()\n-    def rehash(self):\n-        self.tx1.rehash()\n-        self.tx2.rehash()\n-\n-# This test uses the (default) two nodes provided by ComparisonTestFramework,\n-# specified on the command line with --testbinary and --refbinary.\n-# See comptool.py\n-class ScriptTest(ComparisonTestFramework):\n-\n-    def run_test(self):\n-        # Set up the comparison tool TestManager\n-        test = TestManager(self, self.options.tmpdir)\n-        test.add_all_connections(self.nodes)\n-\n-        # Load scripts\n-        self.scripts = ScriptTestFile([script_valid_file, script_invalid_file])\n-        self.scripts.load_files()\n-\n-        # Some variables we re-use between test instances (to build blocks)\n-        self.tip = None\n-        self.block_time = None\n-\n-        NetworkThread().start()  # Start up network handling in another thread\n-        test.run()\n-\n-    def generate_test_instance(self, pubkeystring, scriptsigstring):\n-        scriptpubkey = ParseScript(pubkeystring)\n-        scriptsig = ParseScript(scriptsigstring)\n-\n-        test = TestInstance(sync_every_block=False)\n-        test_build = TestBuilder()\n-        test_build.create_credit_tx(scriptpubkey, self.height)\n-        test_build.create_spend_tx(scriptsig)\n-        test_build.rehash()\n-\n-        block = create_block(self.tip, test_build.tx1, self.block_time)\n-        self.block_time += 1\n-        block.solve()\n-        self.tip = block.sha256\n-        self.height += 1\n-        test.blocks_and_transactions = [[block, True]]\n-\n-        for i in xrange(100):\n-            block = create_block(self.tip, create_coinbase(self.height), self.block_time)\n-            self.block_time += 1\n-            block.solve()\n-            self.tip = block.sha256\n-            self.height += 1\n-            test.blocks_and_transactions.append([block, True])\n-\n-        block = create_block(self.tip, create_coinbase(self.height), self.block_time)\n-        self.block_time += 1\n-        block.vtx.append(test_build.tx2)\n-        block.hashMerkleRoot = block.calc_merkle_root()\n-        block.rehash()\n-        block.solve()\n-        test.blocks_and_transactions.append([block, None])\n-        return test   \n-\n-    # This generates the tests for TestManager.\n-    def get_tests(self):\n-        self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n-        self.block_time = 1333230000  # before the BIP16 switchover\n-        self.height = 1\n-\n-        '''\n-        Create a new block with an anyone-can-spend coinbase\n-        '''\n-        block = create_block(self.tip, create_coinbase(self.height), self.block_time)\n-        self.block_time += 1\n-        block.solve()\n-        self.tip = block.sha256\n-        self.height += 1\n-        yield TestInstance(objects=[[block, True]])\n-\n-        '''\n-        Build out to 100 blocks total, maturing the coinbase.\n-        '''\n-        test = TestInstance(objects=[], sync_every_block=False, sync_every_tx=False)\n-        for i in xrange(100):\n-            b = create_block(self.tip, create_coinbase(self.height), self.block_time)\n-            b.solve()\n-            test.blocks_and_transactions.append([b, True])\n-            self.tip = b.sha256\n-            self.block_time += 1\n-            self.height += 1\n-        yield test\n- \n-        ''' Iterate through script tests. '''\n-        counter = 0\n-        for script_test in self.scripts.get_records():\n-            ''' Reset the blockchain to genesis block + 100 blocks. '''\n-            if self.nodes[0].getblockcount() > 101:\n-                self.nodes[0].invalidateblock(self.nodes[0].getblockhash(102))\n-                self.nodes[1].invalidateblock(self.nodes[1].getblockhash(102))\n-\n-            self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n-            self.height = 102\n-\n-            [scriptsig, scriptpubkey, flags] = script_test[0:3]\n-            flags = ParseScriptFlags(flags)\n-\n-            # We can use block time to determine whether the nodes should be\n-            # enforcing BIP16.\n-            #\n-            # We intentionally let the block time grow by 1 each time.\n-            # This forces the block hashes to differ between tests, so that\n-            # a call to invalidateblock doesn't interfere with a later test.\n-            if (flags & SCRIPT_VERIFY_P2SH):\n-                self.block_time = 1333238400 + counter # Advance to enforcing BIP16\n-            else:\n-                self.block_time = 1333230000 + counter # Before the BIP16 switchover\n-\n-            print \"Script test: [%s]\" % script_test\n-\n-            yield self.generate_test_instance(scriptpubkey, scriptsig)\n-            counter += 1\n-\n-if __name__ == '__main__':\n-    ScriptTest().main()"
      }
    ]
  },
  {
    "sha": "0b0fc179ab8795463e0a0f07e989ec6f592a1f90",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYjBmYzE3OWFiODc5NTQ2M2UwYTBmMDdlOTg5ZWM2ZjU5MmExZjkw",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-22T22:51:01Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-22T22:51:30Z"
      },
      "message": "Merge pull request #7028\n\ne16ee1c [qa] Extend README.md (MarcoFalke)\ncc97574 [qa] Split README.md to /qa and /qa/rpc-tests (MarcoFalke)",
      "tree": {
        "sha": "17fbe55805365e56becbadcf92ca7df1c120bfff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/17fbe55805365e56becbadcf92ca7df1c120bfff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b0fc179ab8795463e0a0f07e989ec6f592a1f90",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCAAGBQJWUkbyAAoJEOq1r5TZ6avntaIP/iNMwze6j+gSeH58g5aOfzNN\nh5kZu5WRPZSy/TJFqQ4c9xGNC4ks12ACn9HuXQ90MOSI5UBZ1zSZMNF3oIElq/Ov\n/7e1urAng26Q/qtDF/ac1joIrSbnOhvW/+Qzhn5hKN+XPMKJL/RBjNtOJfuUfc8D\n5CwVqPakRgyQbgs+gyBBBhvLOj8qZfiHS/X8qznhyt6RtPxRz0wPrmOi4NytSZ2R\nFDm+SbRYeuCWdB0rolb6yK9RAYGuXYyGt4NClW0nMhTukDV24teThRnjYjUi3tXu\n2YbcOReJdWyitGThqrBr4Jzw5CNK3lwkLYN1xg3l0j/mmD14YNPdXRVZetrJ1z5k\na+h/cem9fEstmugDHOAupU2u5Ue50Nqh+fpGOzC20bPA8jye5Fqc8cddEEMnAXoA\nrTXAeBbIx9B0eX+KdrrTZLfsivgAKi6DjGFC0B/we/lefNk+1auQVjQdnsxdvWCQ\npoakU8B2vx4JBOUxpxCytpVJ9NDst3ITD8KVGSiTQXnpDVk1ZpZ6QnxFPxwQbJTl\nfVohmRta+qE2mE1QJnvtSt7Qj+gIDM7iOoi65Y741dgtllbakZUHcI6aGISV0kyN\n7d1O9Ijm5MwauiusJBu83ACJuADlSTwhZFux7cqJ2t9hqthpbv78mfePJpMosAbW\nQbiVxvXuB2+PaZS8KBkX\n=vVdW\n-----END PGP SIGNATURE-----",
        "payload": "tree 17fbe55805365e56becbadcf92ca7df1c120bfff\nparent 9cdd407ca55b080952f6634e185a17d45cd124f8\nparent e16ee1cd1e1fd604ab9c2c4a715166d3fb40a53b\nauthor Gregory Maxwell <greg@xiph.org> 1448232661 -0800\ncommitter Gregory Maxwell <greg@xiph.org> 1448232690 -0800\n\nMerge pull request #7028\n\ne16ee1c [qa] Extend README.md (MarcoFalke)\ncc97574 [qa] Split README.md to /qa and /qa/rpc-tests (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b0fc179ab8795463e0a0f07e989ec6f592a1f90",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0b0fc179ab8795463e0a0f07e989ec6f592a1f90",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b0fc179ab8795463e0a0f07e989ec6f592a1f90/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9cdd407ca55b080952f6634e185a17d45cd124f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cdd407ca55b080952f6634e185a17d45cd124f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9cdd407ca55b080952f6634e185a17d45cd124f8"
      },
      {
        "sha": "e16ee1cd1e1fd604ab9c2c4a715166d3fb40a53b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e16ee1cd1e1fd604ab9c2c4a715166d3fb40a53b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e16ee1cd1e1fd604ab9c2c4a715166d3fb40a53b"
      }
    ],
    "stats": {
      "total": 105,
      "additions": 60,
      "deletions": 45
    },
    "files": [
      {
        "sha": "b40ad0e3967b98021e9bf36fd8f381aefd5dbe76",
        "filename": "README.md",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b0fc179ab8795463e0a0f07e989ec6f592a1f90/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b0fc179ab8795463e0a0f07e989ec6f592a1f90/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=0b0fc179ab8795463e0a0f07e989ec6f592a1f90",
        "patch": "@@ -49,9 +49,10 @@ lots of money.\n ### Automated Testing\n \n Developers are strongly encouraged to write unit tests for new code, and to\n-submit new unit tests for old code. Unit tests can be compiled and run (assuming they weren't disabled in configure) with: `make check`\n+submit new unit tests for old code. Unit tests can be compiled and run\n+(assuming they weren't disabled in configure) with: `make check`\n \n-There are also regression and integration tests of the RPC interface, written\n+There are also [regression and integration tests](/qa) of the RPC interface, written\n in Python, that are run automatically on the build server.\n These tests can be run with: `qa/pull-tester/rpc-tests.py`\n "
      },
      {
        "sha": "758d1f47e5ec658cceeb96d9c8e3e06a14fe993e",
        "filename": "qa/README.md",
        "status": "added",
        "additions": 57,
        "deletions": 0,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b0fc179ab8795463e0a0f07e989ec6f592a1f90/qa/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b0fc179ab8795463e0a0f07e989ec6f592a1f90/qa/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/README.md?ref=0b0fc179ab8795463e0a0f07e989ec6f592a1f90",
        "patch": "@@ -0,0 +1,57 @@\n+The [pull-tester](/qa/pull-tester/) folder contains a script to call\n+multiple tests from the [rpc-tests](/qa/rpc-tests/) folder.\n+\n+Every pull request to the bitcoin repository is built and run through\n+the regression test suite. You can also run all or only individual\n+tests locally.\n+\n+Running tests\n+=============\n+\n+You can run any single test by calling `qa/pull-tester/rpc-tests.py <testname>`.\n+\n+Or you can run any combination of tests by calling `qa/pull-tester/rpc-tests.py <testname1> <testname2> <testname3> ...`\n+\n+Run the regression test suite with `qa/pull-tester/rpc-tests.py`\n+\n+Run all possible tests with `qa/pull-tester/rpc-tests.py -extended`\n+\n+Possible options:\n+\n+```\n+  -h, --help            show this help message and exit\n+  --nocleanup           Leave bitcoinds and test.* datadir on exit or error\n+  --noshutdown          Don't stop bitcoinds after the test execution\n+  --srcdir=SRCDIR       Source directory containing bitcoind/bitcoin-cli\n+                        (default: ../../src)\n+  --tmpdir=TMPDIR       Root directory for datadirs\n+  --tracerpc            Print out all RPC calls as they are made\n+  --coveragedir=COVERAGEDIR\n+                        Write tested RPC commands into this directory\n+```\n+\n+If you set the environment variable `PYTHON_DEBUG=1` you will get some debug\n+output (example: `PYTHON_DEBUG=1 qa/pull-tester/rpc-tests.py wallet`).\n+\n+A 200-block -regtest blockchain and wallets for four nodes\n+is created the first time a regression test is run and\n+is stored in the cache/ directory. Each node has 25 mature\n+blocks (25*50=1250 BTC) in its wallet.\n+\n+After the first run, the cache/ blockchain and wallets are\n+copied into a temporary directory and used as the initial\n+test state.\n+\n+If you get into a bad state, you should be able\n+to recover with:\n+\n+```bash\n+rm -rf cache\n+killall bitcoind\n+```\n+\n+Writing tests\n+=============\n+You are encouraged to write tests for new or existing features.\n+Further information about the test framework and individual rpc\n+tests is found in [qa/rpc-tests](/qa/rpc-tests)."
      },
      {
        "sha": "e8d77f7ef292209af29175f07673a0530affe1fa",
        "filename": "qa/rpc-tests/README.md",
        "status": "modified",
        "additions": 0,
        "deletions": 43,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b0fc179ab8795463e0a0f07e989ec6f592a1f90/qa/rpc-tests/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b0fc179ab8795463e0a0f07e989ec6f592a1f90/qa/rpc-tests/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/README.md?ref=0b0fc179ab8795463e0a0f07e989ec6f592a1f90",
        "patch": "@@ -33,49 +33,6 @@ Helpers for script.py\n ### [test_framework/blocktools.py](test_framework/blocktools.py)\n Helper functions for creating blocks and transactions.\n \n-\n-Notes\n-=====\n-\n-You can run any single test by calling `qa/pull-tester/rpc-tests.py <testname>`.\n-\n-Or you can run any combination of tests by calling `qa/pull-tester/rpc-tests.py <testname1> <testname2> <testname3> ...`\n-\n-Run the regression test suite with `qa/pull-tester/rpc-tests.py`\n-\n-Run all possible tests with `qa/pull-tester/rpc-tests.py -extended`\n-\n-Possible options:\n-\n-```\n--h, --help       show this help message and exit\n-  --nocleanup      Leave bitcoinds and test.* datadir on exit or error\n-  --noshutdown     Don't stop bitcoinds after the test execution\n-  --srcdir=SRCDIR  Source directory containing bitcoind/bitcoin-cli (default:\n-                   ../../src)\n-  --tmpdir=TMPDIR  Root directory for datadirs\n-  --tracerpc       Print out all RPC calls as they are made\n-```\n-\n-If you set the environment variable `PYTHON_DEBUG=1` you will get some debug output (example: `PYTHON_DEBUG=1 qa/pull-tester/rpc-tests.py wallet`). \n-\n-A 200-block -regtest blockchain and wallets for four nodes\n-is created the first time a regression test is run and\n-is stored in the cache/ directory. Each node has 25 mature\n-blocks (25*50=1250 BTC) in its wallet.\n-\n-After the first run, the cache/ blockchain and wallets are\n-copied into a temporary directory and used as the initial\n-test state.\n-\n-If you get into a bad state, you should be able\n-to recover with:\n-\n-```bash\n-rm -rf cache\n-killall bitcoind\n-```\n-\n P2P test design notes\n ---------------------\n "
      }
    ]
  },
  {
    "sha": "5029698186445bf3cd69d0e720f019c472661bff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDI5Njk4MTg2NDQ1YmYzY2Q2OWQwZTcyMGYwMTljNDcyNjYxYmZm",
    "commit": {
      "author": {
        "name": "kazcw",
        "email": "keziahw@gmail.com",
        "date": "2014-07-16T21:31:41Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-23T01:18:54Z"
      },
      "message": "prevent peer flooding request queue for an inv\n\nmapAlreadyAskedFor does not keep track of which peer has a request queued for a\nparticular tx. As a result, a peer can blind a node to a tx indefinitely by\nsending many invs for the same tx, and then never replying to getdatas for it.\nEach inv received will be placed 2 minutes farther back in mapAlreadyAskedFor,\nso a short message containing 10 invs would render that tx unavailable for 20\nminutes.\n\nThis is fixed by disallowing a peer from having more than one entry for a\nparticular inv in mapAlreadyAskedFor at a time.",
      "tree": {
        "sha": "7557777e2ca8f70bf5213e81fd9d49ba1993b7ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7557777e2ca8f70bf5213e81fd9d49ba1993b7ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5029698186445bf3cd69d0e720f019c472661bff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5029698186445bf3cd69d0e720f019c472661bff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5029698186445bf3cd69d0e720f019c472661bff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5029698186445bf3cd69d0e720f019c472661bff/comments",
    "author": {
      "login": "kazcw",
      "id": 1047859,
      "node_id": "MDQ6VXNlcjEwNDc4NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1047859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kazcw",
      "html_url": "https://github.com/kazcw",
      "followers_url": "https://api.github.com/users/kazcw/followers",
      "following_url": "https://api.github.com/users/kazcw/following{/other_user}",
      "gists_url": "https://api.github.com/users/kazcw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kazcw/subscriptions",
      "organizations_url": "https://api.github.com/users/kazcw/orgs",
      "repos_url": "https://api.github.com/users/kazcw/repos",
      "events_url": "https://api.github.com/users/kazcw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kazcw/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b0fc179ab8795463e0a0f07e989ec6f592a1f90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b0fc179ab8795463e0a0f07e989ec6f592a1f90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b0fc179ab8795463e0a0f07e989ec6f592a1f90"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "05dedb5631e568dfd94351c3e7519eba4a923f3f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5029698186445bf3cd69d0e720f019c472661bff/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5029698186445bf3cd69d0e720f019c472661bff/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5029698186445bf3cd69d0e720f019c472661bff",
        "patch": "@@ -5226,6 +5226,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                     vGetData.clear();\n                 }\n             }\n+            pto->setAskFor.erase(inv.hash);\n             pto->mapAskFor.erase(pto->mapAskFor.begin());\n         }\n         if (!vGetData.empty())"
      },
      {
        "sha": "04119e9ddd196ec61424e2bc6bca574bd050ae86",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5029698186445bf3cd69d0e720f019c472661bff/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5029698186445bf3cd69d0e720f019c472661bff/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=5029698186445bf3cd69d0e720f019c472661bff",
        "patch": "@@ -2410,6 +2410,10 @@ void CNode::AskFor(const CInv& inv)\n {\n     if (mapAskFor.size() > MAPASKFOR_MAX_SZ)\n         return;\n+    // a peer may not occupy multiple positions in an inv's request queue\n+    if (!setAskFor.insert(inv.hash).second)\n+        return;\n+\n     // We're using mapAskFor as a priority queue,\n     // the key is the earliest time the request can be sent\n     int64_t nRequestTime;"
      },
      {
        "sha": "046811d54cc71613b87bb3c850856fb3e6c7ab94",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5029698186445bf3cd69d0e720f019c472661bff/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5029698186445bf3cd69d0e720f019c472661bff/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=5029698186445bf3cd69d0e720f019c472661bff",
        "patch": "@@ -382,6 +382,7 @@ class CNode\n     mruset<CInv> setInventoryKnown;\n     std::vector<CInv> vInventoryToSend;\n     CCriticalSection cs_inventory;\n+    std::set<uint256> setAskFor;\n     std::multimap<int64_t, CInv> mapAskFor;\n \n     // Ping time measurement:"
      }
    ]
  },
  {
    "sha": "ebb25f4c23adbcb55796c402bafd6064a136f16f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYmIyNWY0YzIzYWRiY2I1NTc5NmM0MDJiYWZkNjA2NGExMzZmMTZm",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-23T01:54:23Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-23T01:54:23Z"
      },
      "message": "Limit setAskFor and retire requested entries only when a getdata returns.\n\nThe setAskFor duplicate elimination was too eager and removed entries\n when we still had no getdata response, allowing the peer to keep\n INVing and not responding.",
      "tree": {
        "sha": "4f9ccbb6e0e8d46a47690caec79112d5726e16f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f9ccbb6e0e8d46a47690caec79112d5726e16f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ebb25f4c23adbcb55796c402bafd6064a136f16f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebb25f4c23adbcb55796c402bafd6064a136f16f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ebb25f4c23adbcb55796c402bafd6064a136f16f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebb25f4c23adbcb55796c402bafd6064a136f16f/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5029698186445bf3cd69d0e720f019c472661bff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5029698186445bf3cd69d0e720f019c472661bff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5029698186445bf3cd69d0e720f019c472661bff"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 8,
      "deletions": 3
    },
    "files": [
      {
        "sha": "2bcc4cbc54437b0293d6424a229baf77798ec5b1",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebb25f4c23adbcb55796c402bafd6064a136f16f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebb25f4c23adbcb55796c402bafd6064a136f16f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ebb25f4c23adbcb55796c402bafd6064a136f16f",
        "patch": "@@ -4406,6 +4406,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         bool fMissingInputs = false;\n         CValidationState state;\n \n+        pfrom->setAskFor.erase(inv.hash);\n         mapAlreadyAskedFor.erase(inv);\n \n         // Check for recently rejected (and do other quick existence checks)\n@@ -5225,8 +5226,10 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                     pto->PushMessage(\"getdata\", vGetData);\n                     vGetData.clear();\n                 }\n+            } else {\n+                //If we're not going to ask, don't expect a response.\n+                pto->setAskFor.erase(inv.hash);\n             }\n-            pto->setAskFor.erase(inv.hash);\n             pto->mapAskFor.erase(pto->mapAskFor.begin());\n         }\n         if (!vGetData.empty())"
      },
      {
        "sha": "a8b6ca9c5b61c0ea892d6bb72e2cd7de7e042f9a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebb25f4c23adbcb55796c402bafd6064a136f16f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebb25f4c23adbcb55796c402bafd6064a136f16f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=ebb25f4c23adbcb55796c402bafd6064a136f16f",
        "patch": "@@ -2408,9 +2408,9 @@ CNode::~CNode()\n \n void CNode::AskFor(const CInv& inv)\n {\n-    if (mapAskFor.size() > MAPASKFOR_MAX_SZ)\n+    if (mapAskFor.size() > MAPASKFOR_MAX_SZ || setAskFor.size() > SETASKFOR_MAX_SZ)\n         return;\n-    // a peer may not occupy multiple positions in an inv's request queue\n+    // a peer may not have multiple non-responded queue positions for a single inv item\n     if (!setAskFor.insert(inv.hash).second)\n         return;\n "
      },
      {
        "sha": "bf75899a402aaa87aa27f6a3b65d9ee149df6798",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebb25f4c23adbcb55796c402bafd6064a136f16f/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebb25f4c23adbcb55796c402bafd6064a136f16f/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=ebb25f4c23adbcb55796c402bafd6064a136f16f",
        "patch": "@@ -58,6 +58,8 @@ static const bool DEFAULT_UPNP = false;\n #endif\n /** The maximum number of entries in mapAskFor */\n static const size_t MAPASKFOR_MAX_SZ = MAX_INV_SZ;\n+/** The maximum number of entries in setAskFor (larger due to getdata latency)*/\n+static const size_t SETASKFOR_MAX_SZ = 2 * MAX_INV_SZ;\n /** The maximum number of peer connections to maintain. */\n static const unsigned int DEFAULT_MAX_PEER_CONNECTIONS = 125;\n /** The default for -maxuploadtarget. 0 = Unlimited */"
      }
    ]
  },
  {
    "sha": "2e29e7e247b6b74502c70612dab1f7f67de675c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZTI5ZTdlMjQ3YjZiNzQ1MDJjNzA2MTJkYWIxZjdmNjdkZTY3NWMz",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-17T12:40:24Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-11-23T11:14:40Z"
      },
      "message": "Globals: Remove a bunch of Params() calls from main.cpp:\n\n1) Chainparams: Explicit CChainParams arg for main:\n\n-AcceptBlock\n-AcceptBlockHeader\n-ActivateBestChain\n-ConnectTip\n-InitBlockIndex\n-LoadExternalBlockFile\n-VerifyDB parametric constructor\n\n2) Also pickup more Params()\\. in main.cpp\n\n3) Pass nPruneAfterHeight explicitly to new FindFilesToPrune() in main.cpp",
      "tree": {
        "sha": "c5e4e5a8d5364f501af5f7664b731e6f10cb0589",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c5e4e5a8d5364f501af5f7664b731e6f10cb0589"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e29e7e247b6b74502c70612dab1f7f67de675c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e29e7e247b6b74502c70612dab1f7f67de675c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2e29e7e247b6b74502c70612dab1f7f67de675c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e29e7e247b6b74502c70612dab1f7f67de675c3/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eac53ec992018a14db6f8a65a7ce333a4c8284cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eac53ec992018a14db6f8a65a7ce333a4c8284cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eac53ec992018a14db6f8a65a7ce333a4c8284cc"
      }
    ],
    "stats": {
      "total": 93,
      "additions": 44,
      "deletions": 49
    },
    "files": [
      {
        "sha": "3b82dfdc7caaa24747c4aa078cf5ec39c3dab879",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e29e7e247b6b74502c70612dab1f7f67de675c3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e29e7e247b6b74502c70612dab1f7f67de675c3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2e29e7e247b6b74502c70612dab1f7f67de675c3",
        "patch": "@@ -588,6 +588,7 @@ void CleanupBlockRevFiles()\n \n void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n {\n+    const CChainParams& chainparams = Params();\n     RenameThread(\"bitcoin-loadblk\");\n     // -reindex\n     if (fReindex) {\n@@ -601,14 +602,14 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n             if (!file)\n                 break; // This error is logged in OpenBlockFile\n             LogPrintf(\"Reindexing block file blk%05u.dat...\\n\", (unsigned int)nFile);\n-            LoadExternalBlockFile(file, &pos);\n+            LoadExternalBlockFile(chainparams, file, &pos);\n             nFile++;\n         }\n         pblocktree->WriteReindexing(false);\n         fReindex = false;\n         LogPrintf(\"Reindexing finished\\n\");\n         // To avoid ending up in a situation without genesis block, re-try initializing (no-op if reindexing worked):\n-        InitBlockIndex();\n+        InitBlockIndex(chainparams);\n     }\n \n     // hardcoded $DATADIR/bootstrap.dat\n@@ -619,7 +620,7 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n             CImportingNow imp;\n             boost::filesystem::path pathBootstrapOld = GetDataDir() / \"bootstrap.dat.old\";\n             LogPrintf(\"Importing bootstrap.dat...\\n\");\n-            LoadExternalBlockFile(file);\n+            LoadExternalBlockFile(chainparams, file);\n             RenameOver(pathBootstrap, pathBootstrapOld);\n         } else {\n             LogPrintf(\"Warning: Could not open bootstrap file %s\\n\", pathBootstrap.string());\n@@ -632,7 +633,7 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n         if (file) {\n             CImportingNow imp;\n             LogPrintf(\"Importing blocks file %s...\\n\", path.string());\n-            LoadExternalBlockFile(file);\n+            LoadExternalBlockFile(chainparams, file);\n         } else {\n             LogPrintf(\"Warning: Could not open blocks file %s\\n\", path.string());\n         }\n@@ -1297,7 +1298,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n \n                 // Initialize the block index (no-op if non-empty database was already loaded)\n-                if (!InitBlockIndex()) {\n+                if (!InitBlockIndex(chainparams)) {\n                     strLoadError = _(\"Error initializing block database\");\n                     break;\n                 }\n@@ -1332,7 +1333,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     }\n                 }\n \n-                if (!CVerifyDB().VerifyDB(pcoinsdbview, GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                if (!CVerifyDB().VerifyDB(chainparams, pcoinsdbview, GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n                               GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n                     strLoadError = _(\"Corrupted block database detected\");\n                     break;\n@@ -1556,7 +1557,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     uiInterface.InitMessage(_(\"Activating best chain...\"));\n     // scan for better chains in the block chain database, that are not yet connected in the active best chain\n     CValidationState state;\n-    if (!ActivateBestChain(state))\n+    if (!ActivateBestChain(state, chainparams))\n         strErrors << \"Failed to connect best block\";\n \n     std::vector<boost::filesystem::path> vImportFiles;"
      },
      {
        "sha": "4d88078f4118f976ba9cf8def69aff43ba27cf42",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 30,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e29e7e247b6b74502c70612dab1f7f67de675c3/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e29e7e247b6b74502c70612dab1f7f67de675c3/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=2e29e7e247b6b74502c70612dab1f7f67de675c3",
        "patch": "@@ -1939,6 +1939,7 @@ enum FlushStateMode {\n  * or always and in all cases if we're in prune mode and are deleting files.\n  */\n bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode) {\n+    const CChainParams& chainparams = Params();\n     LOCK2(cs_main, cs_LastBlockFile);\n     static int64_t nLastWrite = 0;\n     static int64_t nLastFlush = 0;\n@@ -1947,7 +1948,7 @@ bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode) {\n     bool fFlushForPrune = false;\n     try {\n     if (fPruneMode && fCheckForPruning && !fReindex) {\n-        FindFilesToPrune(setFilesToPrune);\n+        FindFilesToPrune(setFilesToPrune, chainparams.PruneAfterHeight());\n         fCheckForPruning = false;\n         if (!setFilesToPrune.empty()) {\n             fFlushForPrune = true;\n@@ -2147,8 +2148,8 @@ static int64_t nTimePostConnect = 0;\n  * Connect a new block to chainActive. pblock is either NULL or a pointer to a CBlock\n  * corresponding to pindexNew, to bypass loading it again from disk.\n  */\n-bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, const CBlock *pblock) {\n-    const CChainParams& chainparams = Params();\n+bool static ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const CBlock* pblock)\n+{\n     assert(pindexNew->pprev == chainActive.Tip());\n     mempool.check(pcoinsTip);\n     // Read block from disk.\n@@ -2280,8 +2281,8 @@ static void PruneBlockIndexCandidates() {\n  * Try to make some progress towards making pindexMostWork the active block.\n  * pblock is either NULL or a pointer to a CBlock corresponding to pindexMostWork.\n  */\n-static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMostWork, const CBlock *pblock) {\n-    const CChainParams& chainparams = Params();\n+static bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const CBlock* pblock)\n+{\n     AssertLockHeld(cs_main);\n     bool fInvalidFound = false;\n     const CBlockIndex *pindexOldTip = chainActive.Tip();\n@@ -2314,7 +2315,7 @@ static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMo\n \n     // Connect new blocks.\n     BOOST_REVERSE_FOREACH(CBlockIndex *pindexConnect, vpindexToConnect) {\n-        if (!ConnectTip(state, pindexConnect, pindexConnect == pindexMostWork ? pblock : NULL)) {\n+        if (!ConnectTip(state, chainparams, pindexConnect, pindexConnect == pindexMostWork ? pblock : NULL)) {\n             if (state.IsInvalid()) {\n                 // The block violates a consensus rule.\n                 if (!state.CorruptionPossible())\n@@ -2355,10 +2356,10 @@ static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMo\n  * or an activated best chain. pblock is either NULL or a pointer to a block\n  * that is already loaded (to avoid loading it again from disk).\n  */\n-bool ActivateBestChain(CValidationState &state, const CBlock *pblock) {\n+bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams, const CBlock* pblock)\n+{\n     CBlockIndex *pindexNewTip = NULL;\n     CBlockIndex *pindexMostWork = NULL;\n-    const CChainParams& chainparams = Params();\n     do {\n         boost::this_thread::interruption_point();\n \n@@ -2371,7 +2372,7 @@ bool ActivateBestChain(CValidationState &state, const CBlock *pblock) {\n             if (pindexMostWork == NULL || pindexMostWork == chainActive.Tip())\n                 return true;\n \n-            if (!ActivateBestChainStep(state, pindexMostWork, pblock && pblock->GetHash() == pindexMostWork->GetBlockHash() ? pblock : NULL))\n+            if (!ActivateBestChainStep(state, chainparams, pindexMostWork, pblock && pblock->GetHash() == pindexMostWork->GetBlockHash() ? pblock : NULL))\n                 return false;\n \n             pindexNewTip = chainActive.Tip();\n@@ -2850,9 +2851,9 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n     return true;\n }\n \n-bool AcceptBlock(const CBlock& block, CValidationState& state, CBlockIndex** ppindex, bool fRequested, CDiskBlockPos* dbp)\n+/** Store block on disk. If dbp is non-NULL, the file is known to already reside on disk */\n+static bool AcceptBlock(const CBlock& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, CDiskBlockPos* dbp)\n {\n-    const CChainParams& chainparams = Params();\n     AssertLockHeld(cs_main);\n \n     CBlockIndex *&pindex = *ppindex;\n@@ -2942,7 +2943,7 @@ bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, c\n \n         // Store to disk\n         CBlockIndex *pindex = NULL;\n-        bool ret = AcceptBlock(*pblock, state, &pindex, fRequested, dbp);\n+        bool ret = AcceptBlock(*pblock, state, chainparams, &pindex, fRequested, dbp);\n         if (pindex && pfrom) {\n             mapBlockSource[pindex->GetBlockHash()] = pfrom->GetId();\n         }\n@@ -2951,7 +2952,7 @@ bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, c\n             return error(\"%s: AcceptBlock FAILED\", __func__);\n     }\n \n-    if (!ActivateBestChain(state, pblock))\n+    if (!ActivateBestChain(state, chainparams, pblock))\n         return error(\"%s: ActivateBestChain failed\", __func__);\n \n     return true;\n@@ -3041,13 +3042,13 @@ void UnlinkPrunedFiles(std::set<int>& setFilesToPrune)\n }\n \n /* Calculate the block/rev files that should be deleted to remain under target*/\n-void FindFilesToPrune(std::set<int>& setFilesToPrune)\n+void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight)\n {\n     LOCK2(cs_main, cs_LastBlockFile);\n     if (chainActive.Tip() == NULL || nPruneTarget == 0) {\n         return;\n     }\n-    if (chainActive.Tip()->nHeight <= Params().PruneAfterHeight()) {\n+    if (chainActive.Tip()->nHeight <= nPruneAfterHeight) {\n         return;\n     }\n \n@@ -3275,9 +3276,8 @@ CVerifyDB::~CVerifyDB()\n     uiInterface.ShowProgress(\"\", 100);\n }\n \n-bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth)\n+bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth)\n {\n-    const CChainParams& chainparams = Params();\n     LOCK(cs_main);\n     if (chainActive.Tip() == NULL || chainActive.Tip()->pprev == NULL)\n         return true;\n@@ -3393,9 +3393,8 @@ bool LoadBlockIndex()\n     return true;\n }\n \n-\n-bool InitBlockIndex() {\n-    const CChainParams& chainparams = Params();\n+bool InitBlockIndex(const CChainParams& chainparams) \n+{\n     LOCK(cs_main);\n \n     // Initialize global variables that cannot be constructed at startup.\n@@ -3413,7 +3412,7 @@ bool InitBlockIndex() {\n     // Only add the genesis block if not reindexing (in which case we reuse the one already on disk)\n     if (!fReindex) {\n         try {\n-            CBlock &block = const_cast<CBlock&>(Params().GenesisBlock());\n+            CBlock &block = const_cast<CBlock&>(chainparams.GenesisBlock());\n             // Start new block file\n             unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n             CDiskBlockPos blockPos;\n@@ -3425,7 +3424,7 @@ bool InitBlockIndex() {\n             CBlockIndex *pindex = AddToBlockIndex(block);\n             if (!ReceivedBlockTransactions(block, state, pindex, blockPos))\n                 return error(\"LoadBlockIndex(): genesis block not accepted\");\n-            if (!ActivateBestChain(state, &block))\n+            if (!ActivateBestChain(state, chainparams, &block))\n                 return error(\"LoadBlockIndex(): genesis block cannot be activated\");\n             // Force a chainstate write so that when we VerifyDB in a moment, it doesn't check stale data\n             return FlushStateToDisk(state, FLUSH_STATE_ALWAYS);\n@@ -3437,11 +3436,8 @@ bool InitBlockIndex() {\n     return true;\n }\n \n-\n-\n-bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n+bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskBlockPos *dbp)\n {\n-    const CChainParams& chainparams = Params();\n     // Map of disk positions for blocks with unknown parent (only used for reindex)\n     static std::multimap<uint256, CDiskBlockPos> mapBlocksUnknownParent;\n     int64_t nStart = GetTimeMillis();\n@@ -3461,10 +3457,10 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n             try {\n                 // locate a header\n                 unsigned char buf[MESSAGE_START_SIZE];\n-                blkdat.FindByte(Params().MessageStart()[0]);\n+                blkdat.FindByte(chainparams.MessageStart()[0]);\n                 nRewind = blkdat.GetPos()+1;\n                 blkdat >> FLATDATA(buf);\n-                if (memcmp(buf, Params().MessageStart(), MESSAGE_START_SIZE))\n+                if (memcmp(buf, chainparams.MessageStart(), MESSAGE_START_SIZE))\n                     continue;\n                 // read size\n                 blkdat >> nSize;\n@@ -3858,7 +3854,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                         // best equivalent proof of work) than the best header chain we know about.\n                         send = mi->second->IsValid(BLOCK_VALID_SCRIPTS) && (pindexBestHeader != NULL) &&\n                             (pindexBestHeader->GetBlockTime() - mi->second->GetBlockTime() < nOneMonth) &&\n-                            (GetBlockProofEquivalentTime(*pindexBestHeader, *mi->second, *pindexBestHeader, Params().GetConsensus()) < nOneMonth);\n+                            (GetBlockProofEquivalentTime(*pindexBestHeader, *mi->second, *pindexBestHeader, consensusParams) < nOneMonth);\n                         if (!send) {\n                             LogPrintf(\"%s: ignoring request from peer=%i for old block that isn't in the main chain\\n\", __func__, pfrom->GetId());\n                         }\n@@ -4701,7 +4697,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         uint256 alertHash = alert.GetHash();\n         if (pfrom->setKnown.count(alertHash) == 0)\n         {\n-            if (alert.ProcessAlert(Params().AlertKey()))\n+            if (alert.ProcessAlert(chainparams.AlertKey()))\n             {\n                 // Relay\n                 pfrom->setKnown.insert(alertHash);"
      },
      {
        "sha": "35774f3e258a05afe681142ac87a15e81295056a",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e29e7e247b6b74502c70612dab1f7f67de675c3/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e29e7e247b6b74502c70612dab1f7f67de675c3/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=2e29e7e247b6b74502c70612dab1f7f67de675c3",
        "patch": "@@ -172,9 +172,9 @@ FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n /** Translation to a filesystem path */\n boost::filesystem::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix);\n /** Import blocks from an external file */\n-bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp = NULL);\n+bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskBlockPos *dbp = NULL);\n /** Initialize a new block tree database + block data on disk */\n-bool InitBlockIndex();\n+bool InitBlockIndex(const CChainParams& chainparams);\n /** Load the block tree and coins database from disk */\n bool LoadBlockIndex();\n /** Unload database information */\n@@ -199,7 +199,7 @@ std::string GetWarnings(const std::string& strFor);\n /** Retrieve a transaction (from memory pool, or from disk, if possible) */\n bool GetTransaction(const uint256 &hash, CTransaction &tx, const Consensus::Params& params, uint256 &hashBlock, bool fAllowSlow = false);\n /** Find the best known block, and make it the tip of the block chain */\n-bool ActivateBestChain(CValidationState &state, const CBlock *pblock = NULL);\n+bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams, const CBlock* pblock = NULL);\n CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n \n /**\n@@ -217,7 +217,7 @@ CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n  *\n  * @param[out]   setFilesToPrune   The set of file indices that can be unlinked will be returned\n  */\n-void FindFilesToPrune(std::set<int>& setFilesToPrune);\n+void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight);\n \n /**\n  *  Actually unlink the specified files\n@@ -383,9 +383,6 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n /** Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held) */\n bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n-/** Store block on disk. If dbp is non-NULL, the file is known to already reside on disk */\n-bool AcceptBlock(const CBlock& block, CValidationState& state, CBlockIndex **pindex, bool fRequested, CDiskBlockPos* dbp);\n-\n \n class CBlockFileInfo\n {\n@@ -446,7 +443,7 @@ class CVerifyDB {\n public:\n     CVerifyDB();\n     ~CVerifyDB();\n-    bool VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth);\n+    bool VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth);\n };\n \n /** Find the last common block between the parameter chain and a locator. */"
      },
      {
        "sha": "5fa707f94e3cf7ac52aa1dbfc7ff502a9f135494",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e29e7e247b6b74502c70612dab1f7f67de675c3/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e29e7e247b6b74502c70612dab1f7f67de675c3/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=2e29e7e247b6b74502c70612dab1f7f67de675c3",
        "patch": "@@ -562,7 +562,7 @@ UniValue verifychain(const UniValue& params, bool fHelp)\n     if (params.size() > 1)\n         nCheckDepth = params[1].get_int();\n \n-    return CVerifyDB().VerifyDB(pcoinsTip, nCheckLevel, nCheckDepth);\n+    return CVerifyDB().VerifyDB(Params(), pcoinsTip, nCheckLevel, nCheckDepth);\n }\n \n /** Implementation of IsSuperMajority with better feedback */\n@@ -828,7 +828,7 @@ UniValue invalidateblock(const UniValue& params, bool fHelp)\n     }\n \n     if (state.IsValid()) {\n-        ActivateBestChain(state);\n+        ActivateBestChain(state, Params());\n     }\n \n     if (!state.IsValid()) {\n@@ -867,7 +867,7 @@ UniValue reconsiderblock(const UniValue& params, bool fHelp)\n     }\n \n     if (state.IsValid()) {\n-        ActivateBestChain(state);\n+        ActivateBestChain(state, Params());\n     }\n \n     if (!state.IsValid()) {"
      },
      {
        "sha": "816abd928118dae960274325fb263bc4352d70a8",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e29e7e247b6b74502c70612dab1f7f67de675c3/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e29e7e247b6b74502c70612dab1f7f67de675c3/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=2e29e7e247b6b74502c70612dab1f7f67de675c3",
        "patch": "@@ -50,6 +50,7 @@ BasicTestingSetup::~BasicTestingSetup()\n \n TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(chainName)\n {\n+    const CChainParams& chainparams = Params();\n #ifdef ENABLE_WALLET\n         bitdb.MakeMock();\n #endif\n@@ -60,7 +61,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n         pblocktree = new CBlockTreeDB(1 << 20, true);\n         pcoinsdbview = new CCoinsViewDB(1 << 23, true);\n         pcoinsTip = new CCoinsViewCache(pcoinsdbview);\n-        InitBlockIndex();\n+        InitBlockIndex(chainparams);\n #ifdef ENABLE_WALLET\n         bool fFirstRun;\n         pwalletMain = new CWallet(\"wallet.dat\");"
      }
    ]
  },
  {
    "sha": "f91e29fd4d0e62519d413f27c8547c9f5245f8e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOTFlMjlmZDRkMGU2MjUxOWQ0MTNmMjdjODU0N2M5ZjUyNDVmOGU4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-24T07:42:22Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-24T07:42:29Z"
      },
      "message": "Merge pull request #7065\n\n3522f49 http: add Boost 1.49 compatibility (Wladimir J. van der Laan)",
      "tree": {
        "sha": "54c035eae66ba1188ca8da1d08336f650f2d0b50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/54c035eae66ba1188ca8da1d08336f650f2d0b50"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f91e29fd4d0e62519d413f27c8547c9f5245f8e8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWVBTlAAoJEHSBCwEjRsmmBn8H/jFSZvMZo1RaffdfEj47oWGq\nYA4ZvtSZ1lcADq4mGxaPPzeoZBsIi7shSC1MQ2eub/M50+TkTp0ikx+cbeYhjThK\nKXtuua8J3LActS0tjCO4/eM0aHrXSQmO+qqqveom5dR6+dRbhrZwnTiGcVpn99Dp\n80ubUvWoI/K+HnoYx1CmK2M9WIXAJieXf99Veftpha9s+wzBHcUZ4hnbI+pId3KH\nNrMpswfwdXRBvEvsISnbzn5Nr7qQ9nFk1ChEn7DgH5UOZeS5M5KFnd+eeILG5kmk\nNxxbYdfjxiACniOJuwoG3ceD8XbjrUgDuQh5F/fQR0zL4yLj5Ehc0E6FHLLuZ+0=\n=NPo6\n-----END PGP SIGNATURE-----",
        "payload": "tree 54c035eae66ba1188ca8da1d08336f650f2d0b50\nparent 0b0fc179ab8795463e0a0f07e989ec6f592a1f90\nparent 3522f49f5ae74fe3ef310fad6fa7e09d65c9c1b8\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448350942 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448350949 +0100\n\nMerge pull request #7065\n\n3522f49 http: add Boost 1.49 compatibility (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f91e29fd4d0e62519d413f27c8547c9f5245f8e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f91e29fd4d0e62519d413f27c8547c9f5245f8e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f91e29fd4d0e62519d413f27c8547c9f5245f8e8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b0fc179ab8795463e0a0f07e989ec6f592a1f90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b0fc179ab8795463e0a0f07e989ec6f592a1f90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b0fc179ab8795463e0a0f07e989ec6f592a1f90"
      },
      {
        "sha": "3522f49f5ae74fe3ef310fad6fa7e09d65c9c1b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3522f49f5ae74fe3ef310fad6fa7e09d65c9c1b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3522f49f5ae74fe3ef310fad6fa7e09d65c9c1b8"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "91518d7c5f2529feee67fb31835fc887aaea4374",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f91e29fd4d0e62519d413f27c8547c9f5245f8e8/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f91e29fd4d0e62519d413f27c8547c9f5245f8e8/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=f91e29fd4d0e62519d413f27c8547c9f5245f8e8",
        "patch": "@@ -487,7 +487,11 @@ void StopHTTPServer()\n         // master that appears to be solved, so in the future that solution\n         // could be used again (if desirable).\n         // (see discussion in https://github.com/bitcoin/bitcoin/pull/6990)\n+#if BOOST_VERSION >= 105000\n         if (!threadHTTP.try_join_for(boost::chrono::milliseconds(2000))) {\n+#else\n+        if (!threadHTTP.timed_join(boost::posix_time::milliseconds(2000))) {\n+#endif\n             LogPrintf(\"HTTP event loop did not exit within allotted time, sending loopbreak\\n\");\n             event_base_loopbreak(eventBase);\n             threadHTTP.join();"
      }
    ]
  },
  {
    "sha": "faf12bc2839d0a858b36c371aaf26902e49e380c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWYxMmJjMjgzOWQwYTg1OGIzNmMzNzFhYWYyNjkwMmU0OWUzODBj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-23T17:55:26Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-24T08:07:26Z"
      },
      "message": "OpenSSL 1.1.0: Fix text variant of the version number",
      "tree": {
        "sha": "70f9cff728765e1ecd34a22fa66567a90ca2c254",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70f9cff728765e1ecd34a22fa66567a90ca2c254"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faf12bc2839d0a858b36c371aaf26902e49e380c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf12bc2839d0a858b36c371aaf26902e49e380c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faf12bc2839d0a858b36c371aaf26902e49e380c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf12bc2839d0a858b36c371aaf26902e49e380c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "616d61b20d56c0645412884df441eba781ec565d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/616d61b20d56c0645412884df441eba781ec565d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/616d61b20d56c0645412884df441eba781ec565d"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4b3977d6df5cc13bd9abcd4840669c703d5ac298",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf12bc2839d0a858b36c371aaf26902e49e380c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf12bc2839d0a858b36c371aaf26902e49e380c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=faf12bc2839d0a858b36c371aaf26902e49e380c",
        "patch": "@@ -1026,7 +1026,12 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if (fPrintToDebugLog)\n         OpenDebugLog();\n \n+#if (OPENSSL_VERSION_NUMBER < 0x10100000L)\n     LogPrintf(\"Using OpenSSL version %s\\n\", SSLeay_version(SSLEAY_VERSION));\n+#else\n+    LogPrintf(\"Using OpenSSL version %s\\n\", OpenSSL_version(OPENSSL_VERSION));\n+#endif\n+\n #ifdef ENABLE_WALLET\n     LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));\n #endif"
      },
      {
        "sha": "b2b4fd0fab961eb854e368585cb3b5220c959fa8",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf12bc2839d0a858b36c371aaf26902e49e380c/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf12bc2839d0a858b36c371aaf26902e49e380c/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=faf12bc2839d0a858b36c371aaf26902e49e380c",
        "patch": "@@ -263,7 +263,13 @@ RPCConsole::RPCConsole(const PlatformStyle *platformStyle, QWidget *parent) :\n     connect(ui->btnClearTrafficGraph, SIGNAL(clicked()), ui->trafficGraph, SLOT(clear()));\n \n     // set library version labels\n+\n+#if (OPENSSL_VERSION_NUMBER < 0x10100000L)\n     ui->openSSLVersion->setText(SSLeay_version(SSLEAY_VERSION));\n+#else\n+    ui->openSSLVersion->setText(OpenSSL_version(OPENSSL_VERSION));\n+#endif\n+\n #ifdef ENABLE_WALLET\n     ui->berkeleyDBVersion->setText(DbEnv::version(0, 0, 0));\n #else"
      }
    ]
  },
  {
    "sha": "5ad54630935d1f340666de7bc9ffef9b8a1df296",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YWQ1NDYzMDkzNWQxZjM0MDY2NmRlN2JjOWZmZWY5YjhhMWRmMjk2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-24T08:21:37Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-24T08:21:37Z"
      },
      "message": "Squashed 'src/secp256k1/' changes from 2bfb82b..6c527ec\n\n6c527ec Merge pull request #357\n445f7f1 Fix for Windows compile issue\n\ngit-subtree-dir: src/secp256k1\ngit-subtree-split: 6c527eceee7f5105c33c98dfae24ffeffd71f7cf",
      "tree": {
        "sha": "e60aa1a9007cc6f6081bb19a3874f4444dcb75a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e60aa1a9007cc6f6081bb19a3874f4444dcb75a4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ad54630935d1f340666de7bc9ffef9b8a1df296",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ad54630935d1f340666de7bc9ffef9b8a1df296",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ad54630935d1f340666de7bc9ffef9b8a1df296",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ad54630935d1f340666de7bc9ffef9b8a1df296/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d84107924ab36e38092cae43f6ad50dd5ead9ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d84107924ab36e38092cae43f6ad50dd5ead9ed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d84107924ab36e38092cae43f6ad50dd5ead9ed"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7772a4e9d282c6f76c10c046092ec0538319d058",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ad54630935d1f340666de7bc9ffef9b8a1df296/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ad54630935d1f340666de7bc9ffef9b8a1df296/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=5ad54630935d1f340666de7bc9ffef9b8a1df296",
        "patch": "@@ -75,7 +75,7 @@ TESTS = tests\n endif\n \n if USE_ECMULT_STATIC_PRECOMPUTATION\n-CPPFLAGS_FOR_BUILD +=-I$(top_srcdir)/\n+CPPFLAGS_FOR_BUILD +=-I$(top_srcdir)\n CFLAGS_FOR_BUILD += -Wall -Wextra -Wno-unused-function\n \n gen_context_OBJECTS = gen_context.o"
      }
    ]
  },
  {
    "sha": "fa63e49b351b3620f8140b6081d17ddc3df9b69a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTYzZTQ5YjM1MWIzNjIwZjgxNDBiNjA4MWQxN2RkYzNkZjliNjlh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-24T08:25:50Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-24T08:22:18Z"
      },
      "message": "Merge commit '5ad54630935d1f340666de7bc9ffef9b8a1df296' into HEAD",
      "tree": {
        "sha": "c3f1b0eedf752f25035529898a94415005dc35cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3f1b0eedf752f25035529898a94415005dc35cb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa63e49b351b3620f8140b6081d17ddc3df9b69a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa63e49b351b3620f8140b6081d17ddc3df9b69a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa63e49b351b3620f8140b6081d17ddc3df9b69a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa63e49b351b3620f8140b6081d17ddc3df9b69a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b0fc179ab8795463e0a0f07e989ec6f592a1f90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b0fc179ab8795463e0a0f07e989ec6f592a1f90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b0fc179ab8795463e0a0f07e989ec6f592a1f90"
      },
      {
        "sha": "5ad54630935d1f340666de7bc9ffef9b8a1df296",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ad54630935d1f340666de7bc9ffef9b8a1df296",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ad54630935d1f340666de7bc9ffef9b8a1df296"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7772a4e9d282c6f76c10c046092ec0538319d058",
        "filename": "src/secp256k1/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa63e49b351b3620f8140b6081d17ddc3df9b69a/src/secp256k1/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa63e49b351b3620f8140b6081d17ddc3df9b69a/src/secp256k1/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/Makefile.am?ref=fa63e49b351b3620f8140b6081d17ddc3df9b69a",
        "patch": "@@ -75,7 +75,7 @@ TESTS = tests\n endif\n \n if USE_ECMULT_STATIC_PRECOMPUTATION\n-CPPFLAGS_FOR_BUILD +=-I$(top_srcdir)/\n+CPPFLAGS_FOR_BUILD +=-I$(top_srcdir)\n CFLAGS_FOR_BUILD += -Wall -Wextra -Wno-unused-function\n \n gen_context_OBJECTS = gen_context.o"
      }
    ]
  },
  {
    "sha": "ed34e0577e8d897a2c9ee2f30df9e3a762a8ba5a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDM0ZTA1NzdlOGQ4OTdhMmM5ZWUyZjMwZGY5ZTNhNzYyYThiYTVh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-24T08:29:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-24T08:29:46Z"
      },
      "message": "Merge pull request #7052\n\na0953cd [qa] python-bitcoinrpc is no longer a subtree (MarcoFalke)",
      "tree": {
        "sha": "a00fd689b26503e7a00976515b9191d9377c7540",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a00fd689b26503e7a00976515b9191d9377c7540"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed34e0577e8d897a2c9ee2f30df9e3a762a8ba5a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWVB/6AAoJEHSBCwEjRsmmUG8H/jdY1tGXoQH3yAKPKh2t/Xme\n4ufSWRR28UuLDD4ZLfvoh0p/JQFXB4CfT26FIe8udBEd2nOFMFL0rS2MQl/1f7A9\n2aF/cPgYgBJqFZlGfvAMXdGSDex8yeZWx0plIbvPiQpoGFVYRX0ByKrxfZnNf604\naNHlpiFut6MfFcBguJgxbXNw/XAJeP9oJfrKJ2Y+18q0ZzEPQCNCWqjARfv20Qcl\n2v10TlSGOC4iE+j1ovfK4GHIZd7rXB9x+Zq3HZZrks4WO2GdP+3uJk5PfIJkOWh1\n5IOVd+tbKiYaI0bY8m455w2d0cuq3is5mAzt7U4iU8ufhxV1rIuE1ei7e2yY4oA=\n=Rh7t\n-----END PGP SIGNATURE-----",
        "payload": "tree a00fd689b26503e7a00976515b9191d9377c7540\nparent f91e29fd4d0e62519d413f27c8547c9f5245f8e8\nparent a0953cdf07769cf0004a7dd2c0d7e4b5dd0dc578\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448353766 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448353786 +0100\n\nMerge pull request #7052\n\na0953cd [qa] python-bitcoinrpc is no longer a subtree (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed34e0577e8d897a2c9ee2f30df9e3a762a8ba5a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed34e0577e8d897a2c9ee2f30df9e3a762a8ba5a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed34e0577e8d897a2c9ee2f30df9e3a762a8ba5a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f91e29fd4d0e62519d413f27c8547c9f5245f8e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f91e29fd4d0e62519d413f27c8547c9f5245f8e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f91e29fd4d0e62519d413f27c8547c9f5245f8e8"
      },
      {
        "sha": "a0953cdf07769cf0004a7dd2c0d7e4b5dd0dc578",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0953cdf07769cf0004a7dd2c0d7e4b5dd0dc578",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a0953cdf07769cf0004a7dd2c0d7e4b5dd0dc578"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 2,
      "deletions": 4
    },
    "files": [
      {
        "sha": "898931936b448e1a69921bc9b82f6e82be444d3d",
        "filename": "qa/rpc-tests/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed34e0577e8d897a2c9ee2f30df9e3a762a8ba5a/qa/rpc-tests/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed34e0577e8d897a2c9ee2f30df9e3a762a8ba5a/qa/rpc-tests/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/README.md?ref=ed34e0577e8d897a2c9ee2f30df9e3a762a8ba5a",
        "patch": "@@ -1,10 +1,8 @@\n Regression tests\n ================\n \n-### [python-bitcoinrpc](https://github.com/jgarzik/python-bitcoinrpc)\n-Git subtree of [https://github.com/jgarzik/python-bitcoinrpc](https://github.com/jgarzik/python-bitcoinrpc).\n-Changes to python-bitcoinrpc should be made upstream, and then\n-pulled here using git subtree.\n+### [test_framework/authproxy.py](test_framework/authproxy.py)\n+Taken from the [python-bitcoinrpc repository](https://github.com/jgarzik/python-bitcoinrpc).\n \n ### [test_framework/test_framework.py](test_framework/test_framework.py)\n Base class for new regression tests."
      }
    ]
  },
  {
    "sha": "b1fcdec6879048bb0ba4acf41dfbc379842c8afc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMWZjZGVjNjg3OTA0OGJiMGJhNGFjZjQxZGZiYzM3OTg0MmM4YWZj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-24T08:32:38Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-24T08:32:44Z"
      },
      "message": "Merge pull request #7042\n\n70899d7 [doc][trivial] Update Debian control description (fanquake)\n2fcb849 [doc][trivial] Remove source forge from Debian watch. (fanquake)",
      "tree": {
        "sha": "e2632faab8b5606931450d30866f7cec5f47eef9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2632faab8b5606931450d30866f7cec5f47eef9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b1fcdec6879048bb0ba4acf41dfbc379842c8afc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWVCCsAAoJEHSBCwEjRsmmTugIAMPQcOCannR6EjcPKkluyngf\nruUirwOHo+xKT1/yqWsa+lYDW/eOjGnRyovPd1NSMRCS5wvPY5i9nh4vj5gJTERk\nWqt8/mN/EO5jowE254sZ5S7Xno3G9Rs0/pSzIbTLVwrUcdgGycP123FY0lSzTDyb\nE7VKSQG+XAnLHfVbew3HmJIIHTHVTqxhDzhx2xqrkkBCxyYbg+jypzmC4y8j9XZQ\ntJm4+gff1GVDNTS7qrJaRKtOVAlCIBL18dS+3QwoIr1JY8Db4PwGQMgHX7+w1DNd\nl+sr01sln65glMRnCQib9R58EtVqC4g7cjoY8iSd4c/PN42HQQKmqOWNG8PHKQM=\n=4isr\n-----END PGP SIGNATURE-----",
        "payload": "tree e2632faab8b5606931450d30866f7cec5f47eef9\nparent ed34e0577e8d897a2c9ee2f30df9e3a762a8ba5a\nparent 70899d70b8ea4bfa506fa9b83f665206c19b6c17\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448353958 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448353964 +0100\n\nMerge pull request #7042\n\n70899d7 [doc][trivial] Update Debian control description (fanquake)\n2fcb849 [doc][trivial] Remove source forge from Debian watch. (fanquake)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1fcdec6879048bb0ba4acf41dfbc379842c8afc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b1fcdec6879048bb0ba4acf41dfbc379842c8afc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1fcdec6879048bb0ba4acf41dfbc379842c8afc/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed34e0577e8d897a2c9ee2f30df9e3a762a8ba5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed34e0577e8d897a2c9ee2f30df9e3a762a8ba5a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed34e0577e8d897a2c9ee2f30df9e3a762a8ba5a"
      },
      {
        "sha": "70899d70b8ea4bfa506fa9b83f665206c19b6c17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70899d70b8ea4bfa506fa9b83f665206c19b6c17",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/70899d70b8ea4bfa506fa9b83f665206c19b6c17"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 15,
      "deletions": 23
    },
    "files": [
      {
        "sha": "490b2571c3f60b09b672ac573153f276c5dbca6c",
        "filename": "contrib/debian/control",
        "status": "modified",
        "additions": 15,
        "deletions": 21,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1fcdec6879048bb0ba4acf41dfbc379842c8afc/contrib/debian/control",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1fcdec6879048bb0ba4acf41dfbc379842c8afc/contrib/debian/control",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/control?ref=b1fcdec6879048bb0ba4acf41dfbc379842c8afc",
        "patch": "@@ -31,14 +31,11 @@ Package: bitcoind\n Architecture: any\n Depends: ${shlibs:Depends}, ${misc:Depends}\n Description: peer-to-peer network based digital currency - daemon\n- Bitcoin is a free open source peer-to-peer electronic cash system that\n- is completely decentralized, without the need for a central server or\n- trusted parties.  Users hold the crypto keys to their own money and\n- transact directly with each other, with the help of a P2P network to\n- check for double-spending.\n- .\n- Full transaction history is stored locally at each client.  This\n- requires 20+ GB of space, slowly growing.\n+ Bitcoin is an experimental new digital currency that enables instant\n+ payments to anyone, anywhere in the world. Bitcoin uses peer-to-peer\n+ technology to operate with no central authority: managing transactions\n+ and issuing money are carried out collectively by the network. Bitcoin Core\n+ is the name of the open source software which enables the use of this currency.\n  .\n  This package provides the daemon, bitcoind, and the CLI tool\n  bitcoin-cli to interact with the daemon.\n@@ -47,26 +44,23 @@ Package: bitcoin-qt\n Architecture: any\n Depends: ${shlibs:Depends}, ${misc:Depends}\n Description: peer-to-peer network based digital currency - Qt GUI\n- Bitcoin is a free open source peer-to-peer electronic cash system that\n- is completely decentralized, without the need for a central server or\n- trusted parties.  Users hold the crypto keys to their own money and\n- transact directly with each other, with the help of a P2P network to\n- check for double-spending.\n- .\n- Full transaction history is stored locally at each client.  This\n- requires 20+ GB of space, slowly growing.\n+ Bitcoin is an experimental new digital currency that enables instant\n+ payments to anyone, anywhere in the world. Bitcoin uses peer-to-peer\n+ technology to operate with no central authority: managing transactions\n+ and issuing money are carried out collectively by the network. Bitcoin Core\n+ is the name of the open source software which enables the use of this currency.\n  .\n  This package provides Bitcoin-Qt, a GUI for Bitcoin based on Qt.\n \n Package: bitcoin-tx\n Architecture: any\n Depends: ${shlibs:Depends}, ${misc:Depends}\n Description: peer-to-peer digital currency - standalone transaction tool\n- Bitcoin is a free open source peer-to-peer electronic cash system that\n- is completely decentralized, without the need for a central server or\n- trusted parties.  Users hold the crypto keys to their own money and\n- transact directly with each other, with the help of a P2P network to\n- check for double-spending.\n+ Bitcoin is an experimental new digital currency that enables instant\n+ payments to anyone, anywhere in the world. Bitcoin uses peer-to-peer\n+ technology to operate with no central authority: managing transactions\n+ and issuing money are carried out collectively by the network. Bitcoin Core\n+ is the name of the open source software which enables the use of this currency.\n  .\n  This package provides bitcoin-tx, a command-line transaction creation\n  tool which can be used without a bitcoin daemon.  Some means of"
      },
      {
        "sha": "4d9e0cfa577b6d8acac28a1e005f42388b7255c0",
        "filename": "contrib/debian/watch",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1fcdec6879048bb0ba4acf41dfbc379842c8afc/contrib/debian/watch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1fcdec6879048bb0ba4acf41dfbc379842c8afc/contrib/debian/watch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/watch?ref=b1fcdec6879048bb0ba4acf41dfbc379842c8afc",
        "patch": "@@ -1,7 +1,5 @@\n # Run the \"uscan\" command to check for upstream updates and more.\n version=3\n # use qa.debian.org redirector; see man uscan\n-opts=uversionmangle=s/(\\d)(alpha|beta|rc)/$1~$2/;s/\\-src//,dversionmangle=s/~dfsg\\d*// \\\n- http://sf.net/bitcoin/bitcoin-(\\d.*)-linux\\.tar\\.gz debian\n opts=uversionmangle=s/(\\d)(alpha|beta|rc)/$1~$2/,dversionmangle=s/~dfsg\\d*// \\\n  http://githubredir.debian.net/github/bitcoin/bitcoin v(.*).tar.gz"
      }
    ]
  },
  {
    "sha": "72dccfc29dfc38e107c7c8de304f9894bfd954fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MmRjY2ZjMjlkZmMzOGUxMDdjN2M4ZGUzMDRmOTg5NGJmZDk1NGZi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-24T08:50:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-24T08:51:02Z"
      },
      "message": "Merge pull request #7045\n\n2aa49ce Bugfix: Use unique autostart filenames on Linux for testnet/regtest (Luke Dashjr)",
      "tree": {
        "sha": "f6237843670d6970ffd470e233d03bdc682b8c98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6237843670d6970ffd470e233d03bdc682b8c98"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/72dccfc29dfc38e107c7c8de304f9894bfd954fb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWVCT2AAoJEHSBCwEjRsmmV94H/1qziMHdghLsul4Pb7J+6Gg4\nqDYofphNthURhj60ZG6s6ymSM0wJEj1u7FLftKx6SGZIYc9kW2QQezYXAHOTfsHo\n+LvT9tZmUhDlwMjpm7i/vLrfagO5EI+wB2JwU+MgkMcP//JxP/yp6dC+fEfBJguo\ny1fyywcZXMSLytFCN7uWp7gkMDXIbv68zGTXOm+KkISrxPEEaKz4T8CCFT+H3qzd\nLFKYvGIgOBK/5hBf3F/10MCfYo4Md2KABCSG7H8N47kjmTfcGnE8UE6Zf6EvGsgC\nz5jhgC5BT9ZaYhskbxoQFTZuvGo8IFEzA483m6Al+b7yyaHq4e6ws8/d5+Jtgp8=\n=0C2p\n-----END PGP SIGNATURE-----",
        "payload": "tree f6237843670d6970ffd470e233d03bdc682b8c98\nparent b1fcdec6879048bb0ba4acf41dfbc379842c8afc\nparent 2aa49ce9fe618bda9bf70fd57b23fe4802f0aeff\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448355057 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448355062 +0100\n\nMerge pull request #7045\n\n2aa49ce Bugfix: Use unique autostart filenames on Linux for testnet/regtest (Luke Dashjr)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72dccfc29dfc38e107c7c8de304f9894bfd954fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/72dccfc29dfc38e107c7c8de304f9894bfd954fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72dccfc29dfc38e107c7c8de304f9894bfd954fb/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b1fcdec6879048bb0ba4acf41dfbc379842c8afc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1fcdec6879048bb0ba4acf41dfbc379842c8afc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b1fcdec6879048bb0ba4acf41dfbc379842c8afc"
      },
      {
        "sha": "2aa49ce9fe618bda9bf70fd57b23fe4802f0aeff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2aa49ce9fe618bda9bf70fd57b23fe4802f0aeff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2aa49ce9fe618bda9bf70fd57b23fe4802f0aeff"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6dce9370d75d25a56dd1f72531fc7a3c38a9a862",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72dccfc29dfc38e107c7c8de304f9894bfd954fb/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72dccfc29dfc38e107c7c8de304f9894bfd954fb/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=72dccfc29dfc38e107c7c8de304f9894bfd954fb",
        "patch": "@@ -681,7 +681,10 @@ boost::filesystem::path static GetAutostartDir()\n \n boost::filesystem::path static GetAutostartFilePath()\n {\n-    return GetAutostartDir() / \"bitcoin.desktop\";\n+    std::string chain = ChainNameFromCommandLine();\n+    if (chain == CBaseChainParams::MAIN)\n+        return GetAutostartDir() / \"bitcoin.desktop\";\n+    return GetAutostartDir() / strprintf(\"bitcoin-%s.lnk\", chain);\n }\n \n bool GetStartOnSystemStartup()"
      }
    ]
  },
  {
    "sha": "b3caa9b7fa7695e60fc4002229b77f43db8ded67",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiM2NhYTliN2ZhNzY5NWU2MGZjNDAwMjIyOWI3N2Y0M2RiOGRlZDY3",
    "commit": {
      "author": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-24T09:47:32Z"
      },
      "committer": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-24T09:50:53Z"
      },
      "message": "Move bloom filter filtering logic outside of command \"switch\" (giant if/else).\n\nMoving this logic outside of the \"switch\" makes it far simpler to\nenable the forced disconnect by a parameter.",
      "tree": {
        "sha": "efec3088297baf50382a891a91f6a184bc677f39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/efec3088297baf50382a891a91f6a184bc677f39"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3caa9b7fa7695e60fc4002229b77f43db8ded67",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3caa9b7fa7695e60fc4002229b77f43db8ded67",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3caa9b7fa7695e60fc4002229b77f43db8ded67",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3caa9b7fa7695e60fc4002229b77f43db8ded67/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b0fc179ab8795463e0a0f07e989ec6f592a1f90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b0fc179ab8795463e0a0f07e989ec6f592a1f90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b0fc179ab8795463e0a0f07e989ec6f592a1f90"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 15,
      "deletions": 15
    },
    "files": [
      {
        "sha": "fd5637a8cda683b091c8e4750c8158c1551aaf3e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3caa9b7fa7695e60fc4002229b77f43db8ded67/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3caa9b7fa7695e60fc4002229b77f43db8ded67/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b3caa9b7fa7695e60fc4002229b77f43db8ded67",
        "patch": "@@ -3989,6 +3989,21 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     }\n \n \n+    if (!(nLocalServices & NODE_BLOOM) &&\n+              (strCommand == \"filterload\" ||\n+               strCommand == \"filteradd\" ||\n+               strCommand == \"filterclear\"))\n+    {\n+        if (pfrom->nVersion >= NO_BLOOM_VERSION) {\n+            Misbehaving(pfrom->GetId(), 100);\n+            return false;\n+        }\n+        //TODO: Enable this after reasonable network upgrade\n+        //else {\n+        //    pfrom->fDisconnect = true;\n+        //    return false;\n+        //}\n+    }\n \n \n     if (strCommand == \"version\")\n@@ -4750,21 +4765,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     }\n \n \n-    else if (!(nLocalServices & NODE_BLOOM) &&\n-              (strCommand == \"filterload\" ||\n-               strCommand == \"filteradd\" ||\n-               strCommand == \"filterclear\") &&\n-              //TODO: Remove this line after reasonable network upgrade\n-              pfrom->nVersion >= NO_BLOOM_VERSION)\n-    {\n-        if (pfrom->nVersion >= NO_BLOOM_VERSION)\n-            Misbehaving(pfrom->GetId(), 100);\n-        //TODO: Enable this after reasonable network upgrade\n-        //else\n-        //    pfrom->fDisconnect = true;\n-    }\n-\n-\n     else if (strCommand == \"filterload\")\n     {\n         CBloomFilter filter;"
      }
    ]
  },
  {
    "sha": "02a0f348c210af4054a3ae5a04d356b429349ebb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMmEwZjM0OGMyMTBhZjQwNTRhM2FlNWEwNGQzNTZiNDI5MzQ5ZWJi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-24T09:54:53Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-24T09:55:36Z"
      },
      "message": "Merge pull request #7066\n\n5c2fd38 Add missing \"blocktime\" description to listtransactions help, fix formatting. (Pavel Jan\u00edk)",
      "tree": {
        "sha": "ca91638fb4e3c96b8209405b0ba8ac8b63131e4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca91638fb4e3c96b8209405b0ba8ac8b63131e4d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02a0f348c210af4054a3ae5a04d356b429349ebb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWVDQYAAoJEHSBCwEjRsmmfjsH+QFkKDKnIHCIx8f9kn8bt3O2\nri6HjlSQZellC7WzRJCjA9IZnA/Wb0c7/LIG7zyU6M2CHQHye5hGWKedphieaZ3M\niWZXXQ9Xb7g6JjgXA1KEfxwPCeSIk0/Ra2tUSjHWuMILiyqZJooWHdwaTzYPL2fU\njIcDeAdQsL/ouYQfmuISL1JQdcJg+ey2bDNt3Py5Jj2QdnirjocN4qKrn+2M/UlX\nwT3t2sN3ofZ6o5GvK3pGQXBvp0s2TOEQpmflQo+va+KHI4YfsX9eVVvLvx7QglBw\nzeEqN2JssIlvS9pmQcn4jsgWWAlkXdrhkMewWMLuWCnPO4kL+3bhkLUa0AOcntA=\n=4dHi\n-----END PGP SIGNATURE-----",
        "payload": "tree ca91638fb4e3c96b8209405b0ba8ac8b63131e4d\nparent 72dccfc29dfc38e107c7c8de304f9894bfd954fb\nparent 5c2fd38d05b0da2fa0d1ec99f1db55b0d89180db\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448358893 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448358936 +0100\n\nMerge pull request #7066\n\n5c2fd38 Add missing \"blocktime\" description to listtransactions help, fix formatting. (Pavel Jan\u00edk)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02a0f348c210af4054a3ae5a04d356b429349ebb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/02a0f348c210af4054a3ae5a04d356b429349ebb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02a0f348c210af4054a3ae5a04d356b429349ebb/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "72dccfc29dfc38e107c7c8de304f9894bfd954fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72dccfc29dfc38e107c7c8de304f9894bfd954fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/72dccfc29dfc38e107c7c8de304f9894bfd954fb"
      },
      {
        "sha": "5c2fd38d05b0da2fa0d1ec99f1db55b0d89180db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c2fd38d05b0da2fa0d1ec99f1db55b0d89180db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c2fd38d05b0da2fa0d1ec99f1db55b0d89180db"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b6eaca80b3675625565a98ed32fd50ae9f2c5818",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02a0f348c210af4054a3ae5a04d356b429349ebb/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02a0f348c210af4054a3ae5a04d356b429349ebb/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=02a0f348c210af4054a3ae5a04d356b429349ebb",
        "patch": "@@ -1417,7 +1417,7 @@ UniValue listtransactions(const UniValue& params, bool fHelp)\n             \"    \\\"amount\\\": x.xxx,          (numeric) The amount in \" + CURRENCY_UNIT + \". This is negative for the 'send' category, and for the\\n\"\n             \"                                         'move' category for moves outbound. It is positive for the 'receive' category,\\n\"\n             \"                                         and for the 'move' category for inbound funds.\\n\"\n-            \"    \\\"vout\\\" : n,               (numeric) the vout value\\n\"\n+            \"    \\\"vout\\\": n,                (numeric) the vout value\\n\"\n             \"    \\\"fee\\\": x.xxx,             (numeric) The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the \\n\"\n             \"                                         'send' category of transactions.\\n\"\n             \"    \\\"confirmations\\\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and \\n\"\n@@ -1426,12 +1426,13 @@ UniValue listtransactions(const UniValue& params, bool fHelp)\n             \"                                          category of transactions.\\n\"\n             \"    \\\"blockindex\\\": n,          (numeric) The block index containing the transaction. Available for 'send' and 'receive'\\n\"\n             \"                                          category of transactions.\\n\"\n+            \"    \\\"blocktime\\\": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).\\n\"\n             \"    \\\"txid\\\": \\\"transactionid\\\", (string) The transaction id. Available for 'send' and 'receive' category of transactions.\\n\"\n             \"    \\\"time\\\": xxx,              (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).\\n\"\n             \"    \\\"timereceived\\\": xxx,      (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT). Available \\n\"\n             \"                                          for 'send' and 'receive' category of transactions.\\n\"\n             \"    \\\"comment\\\": \\\"...\\\",       (string) If a comment is associated with the transaction.\\n\"\n-            \"    \\\"label\\\" : \\\"label\\\"       (string) A comment for the address/transaction, if any\\n\"\n+            \"    \\\"label\\\": \\\"label\\\"        (string) A comment for the address/transaction, if any\\n\"\n             \"    \\\"otheraccount\\\": \\\"accountname\\\",  (string) For the 'move' category of transactions, the account the funds came \\n\"\n             \"                                          from (for receiving funds, positive amounts), or went to (for sending funds,\\n\"\n             \"                                          negative amounts).\\n\""
      }
    ]
  },
  {
    "sha": "0f4dc53fd6a19a763922b4c3888ce6542c594e01",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZjRkYzUzZmQ2YTE5YTc2MzkyMmI0YzM4ODhjZTY1NDJjNTk0ZTAx",
    "commit": {
      "author": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-24T09:51:53Z"
      },
      "committer": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-24T10:08:00Z"
      },
      "message": "Add enforcenodebloom option.\n\nPreviously peers which implement a protocol version less than NO_BLOOM_VERSION\nwould not be disconnected for sending a filter command, regardless of the\npeerbloomfilter option.\n\nMany node operators do not wish to provide expensive bloom filtering for SPV\nclients, previously they had to cherry pick the commit which enabled the\ndisconnect logic.\n\nThe default should remain false until a sufficient percent of SPV clients\nhave updated.",
      "tree": {
        "sha": "24400d2ed11d9b0e932ed3e2483eee77be53c7f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/24400d2ed11d9b0e932ed3e2483eee77be53c7f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f4dc53fd6a19a763922b4c3888ce6542c594e01",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f4dc53fd6a19a763922b4c3888ce6542c594e01",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0f4dc53fd6a19a763922b4c3888ce6542c594e01",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f4dc53fd6a19a763922b4c3888ce6542c594e01/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b3caa9b7fa7695e60fc4002229b77f43db8ded67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3caa9b7fa7695e60fc4002229b77f43db8ded67",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b3caa9b7fa7695e60fc4002229b77f43db8ded67"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 3,
      "deletions": 5
    },
    "files": [
      {
        "sha": "b0b58141a20d5389e0b0cf378ab454ed404ec914",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f4dc53fd6a19a763922b4c3888ce6542c594e01/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f4dc53fd6a19a763922b4c3888ce6542c594e01/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0f4dc53fd6a19a763922b4c3888ce6542c594e01",
        "patch": "@@ -3997,12 +3997,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         if (pfrom->nVersion >= NO_BLOOM_VERSION) {\n             Misbehaving(pfrom->GetId(), 100);\n             return false;\n+        } else if (GetBoolArg(\"-enforcenodebloom\", false)) {\n+            pfrom->fDisconnect = true;\n+            return false;\n         }\n-        //TODO: Enable this after reasonable network upgrade\n-        //else {\n-        //    pfrom->fDisconnect = true;\n-        //    return false;\n-        //}\n     }\n \n "
      }
    ]
  },
  {
    "sha": "9cf668844eebee18ea08a8c6e63758871ef4ea86",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Y2Y2Njg4NDRlZWJlZTE4ZWEwOGE4YzZlNjM3NTg4NzFlZjRlYTg2",
    "commit": {
      "author": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-24T09:57:08Z"
      },
      "committer": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-24T10:08:00Z"
      },
      "message": "Document both the peerbloomfilters and enforcenodebloom options.",
      "tree": {
        "sha": "f29166529c3af5f9d40c427d721e28518f95c96d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f29166529c3af5f9d40c427d721e28518f95c96d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9cf668844eebee18ea08a8c6e63758871ef4ea86",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cf668844eebee18ea08a8c6e63758871ef4ea86",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9cf668844eebee18ea08a8c6e63758871ef4ea86",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cf668844eebee18ea08a8c6e63758871ef4ea86/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f4dc53fd6a19a763922b4c3888ce6542c594e01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f4dc53fd6a19a763922b4c3888ce6542c594e01",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f4dc53fd6a19a763922b4c3888ce6542c594e01"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5d5c685533190c4b15d4b714597bacc9e6ff0389",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cf668844eebee18ea08a8c6e63758871ef4ea86/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cf668844eebee18ea08a8c6e63758871ef4ea86/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9cf668844eebee18ea08a8c6e63758871ef4ea86",
        "patch": "@@ -362,6 +362,9 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-onion=<ip:port>\", strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\"));\n     strUsage += HelpMessageOpt(\"-onlynet=<net>\", _(\"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\"));\n     strUsage += HelpMessageOpt(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-peerbloomfilters\", strprintf(_(\"Support filtering of blocks and transaction with bloom filters (default: %u)\"), 1));\n+    if (showDebug)\n+        strUsage += HelpMessageOpt(\"-enforcenodebloom\", strprintf(\"Enforce minimum protocol version to limit use of bloom filters (default: %u)\", 0));\n     strUsage += HelpMessageOpt(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), 8333, 18333));\n     strUsage += HelpMessageOpt(\"-proxy=<ip:port>\", _(\"Connect through SOCKS5 proxy\"));\n     strUsage += HelpMessageOpt(\"-proxyrandomize\", strprintf(_(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\"), 1));"
      }
    ]
  },
  {
    "sha": "fa472f330f40d4ffbc36fc8e89ef8db1ed0a0a87",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTQ3MmYzMzBmNDBkNGZmYmMzNmZjOGU4OWVmOGRiMWVkMGEwYTg3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-19T20:48:02Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-24T11:40:59Z"
      },
      "message": "[trivial] Fix -maxmempool InitError",
      "tree": {
        "sha": "57f6ae18571ba0e7619ce19cc9283abe94584549",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57f6ae18571ba0e7619ce19cc9283abe94584549"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa472f330f40d4ffbc36fc8e89ef8db1ed0a0a87",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa472f330f40d4ffbc36fc8e89ef8db1ed0a0a87",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa472f330f40d4ffbc36fc8e89ef8db1ed0a0a87",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa472f330f40d4ffbc36fc8e89ef8db1ed0a0a87/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c983d6fcb47bafb4b82529f512310ccaef076ca2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c983d6fcb47bafb4b82529f512310ccaef076ca2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c983d6fcb47bafb4b82529f512310ccaef076ca2"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "3f53fdcbf606dc62ea108f4ad3ba3526e0dd7376",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa472f330f40d4ffbc36fc8e89ef8db1ed0a0a87/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa472f330f40d4ffbc36fc8e89ef8db1ed0a0a87/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa472f330f40d4ffbc36fc8e89ef8db1ed0a0a87",
        "patch": "@@ -875,11 +875,11 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     fCheckBlockIndex = GetBoolArg(\"-checkblockindex\", chainparams.DefaultConsistencyChecks());\n     fCheckpointsEnabled = GetBoolArg(\"-checkpoints\", true);\n \n-    // -mempoollimit limits\n-    int64_t nMempoolSizeLimit = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n-    int64_t nMempoolDescendantSizeLimit = GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000;\n-    if (nMempoolSizeLimit < 0 || nMempoolSizeLimit < nMempoolDescendantSizeLimit * 40)\n-        return InitError(strprintf(_(\"-maxmempool must be at least %d MB\"), GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) / 25));\n+    // mempool limits\n+    int64_t nMempoolSizeMax = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    int64_t nMempoolSizeMin = GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n+    if (nMempoolSizeMax < 0 || nMempoolSizeMax < nMempoolSizeMin)\n+        return InitError(strprintf(_(\"-maxmempool must be at least %d MB\"), std::ceil(nMempoolSizeMin / 1000.0)));\n \n     // -par=0 means autodetect, but nScriptCheckThreads==0 means no concurrency\n     nScriptCheckThreads = GetArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS);"
      }
    ]
  },
  {
    "sha": "e30443244a7a50f2db70e593ec8a57e5086db3d9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMzA0NDMyNDRhN2E1MGYyZGI3MGU1OTNlYzhhNTdlNTA4NmRiM2Q5",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2015-11-24T13:53:14Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2015-11-24T13:53:14Z"
      },
      "message": "Pass reference to estimateSmartFee and cleanup whitespace",
      "tree": {
        "sha": "cf2d82fbe7ddf299852aaf04c7ca55f374855a7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf2d82fbe7ddf299852aaf04c7ca55f374855a7b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e30443244a7a50f2db70e593ec8a57e5086db3d9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e30443244a7a50f2db70e593ec8a57e5086db3d9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e30443244a7a50f2db70e593ec8a57e5086db3d9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e30443244a7a50f2db70e593ec8a57e5086db3d9/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "56106a3300f844afcadf6dce50d5ef1d337f50b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56106a3300f844afcadf6dce50d5ef1d337f50b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/56106a3300f844afcadf6dce50d5ef1d337f50b9"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 9,
      "deletions": 10
    },
    "files": [
      {
        "sha": "980ecf10dfc96f600345e8760e2e071cf38a89e2",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e30443244a7a50f2db70e593ec8a57e5086db3d9/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e30443244a7a50f2db70e593ec8a57e5086db3d9/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=e30443244a7a50f2db70e593ec8a57e5086db3d9",
        "patch": "@@ -505,7 +505,7 @@ CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget)\n     return CFeeRate(median);\n }\n \n-CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool *pool)\n+CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool)\n {\n     if (answerFoundAtTarget)\n         *answerFoundAtTarget = confTarget;\n@@ -522,7 +522,7 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoun\n         *answerFoundAtTarget = confTarget - 1;\n \n     // If mempool is limiting txs , return at least the min fee from the mempool\n-    CAmount minPoolFee = pool->GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n+    CAmount minPoolFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n     if (minPoolFee > 0 && minPoolFee > median)\n         return CFeeRate(minPoolFee);\n \n@@ -541,7 +541,7 @@ double CBlockPolicyEstimator::estimatePriority(int confTarget)\n     return priStats.EstimateMedianVal(confTarget, SUFFICIENT_PRITXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n }\n \n-double CBlockPolicyEstimator::estimateSmartPriority(int confTarget, int *answerFoundAtTarget, const CTxMemPool *pool)\n+double CBlockPolicyEstimator::estimateSmartPriority(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool)\n {\n     if (answerFoundAtTarget)\n         *answerFoundAtTarget = confTarget;\n@@ -550,7 +550,7 @@ double CBlockPolicyEstimator::estimateSmartPriority(int confTarget, int *answerF\n         return -1;\n \n     // If mempool is limiting txs, no priority txs are allowed\n-    CAmount minPoolFee = pool->GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n+    CAmount minPoolFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n     if (minPoolFee > 0)\n         return INF_PRIORITY;\n \n@@ -562,7 +562,6 @@ double CBlockPolicyEstimator::estimateSmartPriority(int confTarget, int *answerF\n     if (answerFoundAtTarget)\n         *answerFoundAtTarget = confTarget - 1;\n \n-\n     return median;\n }\n "
      },
      {
        "sha": "7a293267d42d0c33149d533addb3343844fd2889",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e30443244a7a50f2db70e593ec8a57e5086db3d9/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e30443244a7a50f2db70e593ec8a57e5086db3d9/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=e30443244a7a50f2db70e593ec8a57e5086db3d9",
        "patch": "@@ -247,7 +247,7 @@ class CBlockPolicyEstimator\n      *  confTarget blocks. If no answer can be given at confTarget, return an\n      *  estimate at the lowest target where one can be given.\n      */\n-    CFeeRate estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool *pool);\n+    CFeeRate estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool);\n \n     /** Return a priority estimate */\n     double estimatePriority(int confTarget);\n@@ -256,7 +256,7 @@ class CBlockPolicyEstimator\n      *  confTarget blocks. If no answer can be given at confTarget, return an\n      *  estimate at the lowest target where one can be given.\n      */\n-    double estimateSmartPriority(int confTarget, int *answerFoundAtTarget, const CTxMemPool *pool);\n+    double estimateSmartPriority(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool);\n \n     /** Write estimation data to a file */\n     void Write(CAutoFile& fileout);"
      },
      {
        "sha": "ec7971c2f1cca50586da420c888608116594ec9a",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e30443244a7a50f2db70e593ec8a57e5086db3d9/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e30443244a7a50f2db70e593ec8a57e5086db3d9/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=e30443244a7a50f2db70e593ec8a57e5086db3d9",
        "patch": "@@ -704,7 +704,7 @@ CFeeRate CTxMemPool::estimateFee(int nBlocks) const\n CFeeRate CTxMemPool::estimateSmartFee(int nBlocks, int *answerFoundAtBlocks) const\n {\n     LOCK(cs);\n-    return minerPolicyEstimator->estimateSmartFee(nBlocks, answerFoundAtBlocks, this);\n+    return minerPolicyEstimator->estimateSmartFee(nBlocks, answerFoundAtBlocks, *this);\n }\n double CTxMemPool::estimatePriority(int nBlocks) const\n {\n@@ -714,7 +714,7 @@ double CTxMemPool::estimatePriority(int nBlocks) const\n double CTxMemPool::estimateSmartPriority(int nBlocks, int *answerFoundAtBlocks) const\n {\n     LOCK(cs);\n-    return minerPolicyEstimator->estimateSmartPriority(nBlocks, answerFoundAtBlocks, this);\n+    return minerPolicyEstimator->estimateSmartPriority(nBlocks, answerFoundAtBlocks, *this);\n }\n \n bool"
      },
      {
        "sha": "cd5f9042f36e8982193b9ae90759c24e7a3a84f3",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e30443244a7a50f2db70e593ec8a57e5086db3d9/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e30443244a7a50f2db70e593ec8a57e5086db3d9/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e30443244a7a50f2db70e593ec8a57e5086db3d9",
        "patch": "@@ -2036,7 +2036,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                     double dPriorityNeeded = mempool.estimateSmartPriority(nTxConfirmTarget);\n                     // Require at least hard-coded AllowFree.\n                     if (dPriority >= dPriorityNeeded && AllowFree(dPriority))\n-                            break;\n+                        break;\n                 }\n \n                 CAmount nFeeNeeded = GetMinimumFee(nBytes, nTxConfirmTarget, mempool);"
      }
    ]
  },
  {
    "sha": "b19fe277dd6208b80fea837adf9e64631b07f946",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTlmZTI3N2RkNjIwOGI4MGZlYTgzN2FkZjllNjQ2MzFiMDdmOTQ2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-24T15:01:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-24T15:02:02Z"
      },
      "message": "Merge pull request #7075\n\n4846543 Move time data log print to 'net' category to reduce log noise (tulip)",
      "tree": {
        "sha": "970393915af34680d45363baea951f96cf000a88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/970393915af34680d45363baea951f96cf000a88"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b19fe277dd6208b80fea837adf9e64631b07f946",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWVHvqAAoJEHSBCwEjRsmmVjIIALN8aEt6lr7mqqDFr7+Xbvua\nLBd+qmBEgCUHxANJcFMnLFGYI56rd15XXfFyrZEgWdAALNhdI4yhMRYTXQB7Qsbi\ngUsAaImtZf4pDQdn7OsCxpxdyNB1hAcmyuUwG7z2/QdAtBmEyHIHMQIYC57oqc0w\nTpUmTc3hlXWNL81nngybZuPKIzzBvzOQgODluhGt6P7I/5Z6GDHVWnU6h3BO4Q7G\nxSfGJ23rPgkIS5oq07azdyJzK7aNtCcpNcH5rD4Eoxmnf2vAI+kalAVRUN/JKc8G\nPfmGA3zj6NEKR+Shf70FC5cbWDPapb86OCDu3AswrWLOH2dLf6oPCBoRklmnKX8=\n=Yx6U\n-----END PGP SIGNATURE-----",
        "payload": "tree 970393915af34680d45363baea951f96cf000a88\nparent 02a0f348c210af4054a3ae5a04d356b429349ebb\nparent 4846543ac58c72ca5ec2b25e690c8e1a4247c048\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448377317 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448377322 +0100\n\nMerge pull request #7075\n\n4846543 Move time data log print to 'net' category to reduce log noise (tulip)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b19fe277dd6208b80fea837adf9e64631b07f946",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b19fe277dd6208b80fea837adf9e64631b07f946",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b19fe277dd6208b80fea837adf9e64631b07f946/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02a0f348c210af4054a3ae5a04d356b429349ebb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02a0f348c210af4054a3ae5a04d356b429349ebb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02a0f348c210af4054a3ae5a04d356b429349ebb"
      },
      {
        "sha": "4846543ac58c72ca5ec2b25e690c8e1a4247c048",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4846543ac58c72ca5ec2b25e690c8e1a4247c048",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4846543ac58c72ca5ec2b25e690c8e1a4247c048"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "861c37598908e0c84f528194b8a66652e7133c92",
        "filename": "src/timedata.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b19fe277dd6208b80fea837adf9e64631b07f946/src/timedata.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b19fe277dd6208b80fea837adf9e64631b07f946/src/timedata.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.cpp?ref=b19fe277dd6208b80fea837adf9e64631b07f946",
        "patch": "@@ -55,7 +55,7 @@ void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n     // Add data\n     static CMedianFilter<int64_t> vTimeOffsets(BITCOIN_TIMEDATA_MAX_SAMPLES, 0);\n     vTimeOffsets.input(nOffsetSample);\n-    LogPrintf(\"Added time data, samples %d, offset %+d (%+d minutes)\\n\", vTimeOffsets.size(), nOffsetSample, nOffsetSample/60);\n+    LogPrint(\"net\",\"added time data, samples %d, offset %+d (%+d minutes)\\n\", vTimeOffsets.size(), nOffsetSample, nOffsetSample/60);\n \n     // There is a known issue here (see issue #4521):\n     //\n@@ -105,11 +105,11 @@ void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n                 }\n             }\n         }\n-        if (fDebug) {\n-            BOOST_FOREACH(int64_t n, vSorted)\n-                LogPrintf(\"%+d  \", n);\n-            LogPrintf(\"|  \");\n-        }\n-        LogPrintf(\"nTimeOffset = %+d  (%+d minutes)\\n\", nTimeOffset, nTimeOffset/60);\n+        \n+        BOOST_FOREACH(int64_t n, vSorted)\n+            LogPrint(\"net\", \"%+d  \", n);\n+        LogPrint(\"net\", \"|  \");\n+        \n+        LogPrint(\"net\", \"nTimeOffset = %+d  (%+d minutes)\\n\", nTimeOffset, nTimeOffset/60);\n     }\n }"
      }
    ]
  },
  {
    "sha": "392d3c5846db69dcbcc448d7504d0e4e73832ecf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTJkM2M1ODQ2ZGI2OWRjYmNjNDQ4ZDc1MDRkMGU0ZTczODMyZWNm",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-11-24T21:22:24Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-11-24T21:22:24Z"
      },
      "message": "build: Set osx permissions in the dmg to make Gatekeeper happy",
      "tree": {
        "sha": "b6619ec1593e0c5e95f6a87d42ed0b2397b5bd13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6619ec1593e0c5e95f6a87d42ed0b2397b5bd13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/392d3c5846db69dcbcc448d7504d0e4e73832ecf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/392d3c5846db69dcbcc448d7504d0e4e73832ecf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/392d3c5846db69dcbcc448d7504d0e4e73832ecf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/392d3c5846db69dcbcc448d7504d0e4e73832ecf/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b19fe277dd6208b80fea837adf9e64631b07f946",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b19fe277dd6208b80fea837adf9e64631b07f946",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b19fe277dd6208b80fea837adf9e64631b07f946"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b2b7811729d0bd30ca2ba0360ae34d3f2e1ad03f",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/392d3c5846db69dcbcc448d7504d0e4e73832ecf/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/392d3c5846db69dcbcc448d7504d0e4e73832ecf/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=392d3c5846db69dcbcc448d7504d0e4e73832ecf",
        "patch": "@@ -111,7 +111,7 @@ $(APP_DIST_DIR)/Applications:\n $(APP_DIST_EXTRAS): $(APP_DIST_DIR)/$(OSX_APP)/Contents/MacOS/Bitcoin-Qt\n \n $(OSX_DMG): $(APP_DIST_EXTRAS)\n-\t$(GENISOIMAGE) -no-cache-inodes -D -l -probe -V \"Bitcoin-Core\" -no-pad -r -apple -o $@ dist\n+\t$(GENISOIMAGE) -no-cache-inodes -D -l -probe -V \"Bitcoin-Core\" -no-pad -r -dir-mode 0755 -apple -o $@ dist\n \n $(APP_DIST_DIR)/.background/$(OSX_BACKGROUND_IMAGE): contrib/macdeploy/$(OSX_BACKGROUND_IMAGE)\n \t$(MKDIR_P) $(@D)"
      }
    ]
  },
  {
    "sha": "1bb289fe1b7d240e0d58ef13da30e45590231078",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYmIyODlmZTFiN2QyNDBlMGQ1OGVmMTNkYTMwZTQ1NTkwMjMxMDc4",
    "commit": {
      "author": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-25T02:39:19Z"
      },
      "committer": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-25T02:39:19Z"
      },
      "message": "Assert now > 0 in GetTime GetTimeMillis GetTimeMicros\n\nPreviously all of these functions could return negative values (for different\nreadons).  Large portions of the codebase currently assume that these\nfunctions return positive values.",
      "tree": {
        "sha": "5531277d67f4d5bef89be7069d95626e08ce540e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5531277d67f4d5bef89be7069d95626e08ce540e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1bb289fe1b7d240e0d58ef13da30e45590231078",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bb289fe1b7d240e0d58ef13da30e45590231078",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1bb289fe1b7d240e0d58ef13da30e45590231078",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bb289fe1b7d240e0d58ef13da30e45590231078/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b19fe277dd6208b80fea837adf9e64631b07f946",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b19fe277dd6208b80fea837adf9e64631b07f946",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b19fe277dd6208b80fea837adf9e64631b07f946"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 11,
      "deletions": 5
    },
    "files": [
      {
        "sha": "7d9f6210ebf7612784b27e646f13d191cdaf9a0a",
        "filename": "src/utiltime.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bb289fe1b7d240e0d58ef13da30e45590231078/src/utiltime.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bb289fe1b7d240e0d58ef13da30e45590231078/src/utiltime.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.cpp?ref=1bb289fe1b7d240e0d58ef13da30e45590231078",
        "patch": "@@ -20,7 +20,9 @@ int64_t GetTime()\n {\n     if (nMockTime) return nMockTime;\n \n-    return time(NULL);\n+    time_t now = time(NULL);\n+    assert(now > 0);\n+    return now;\n }\n \n void SetMockTime(int64_t nMockTimeIn)\n@@ -30,14 +32,18 @@ void SetMockTime(int64_t nMockTimeIn)\n \n int64_t GetTimeMillis()\n {\n-    return (boost::posix_time::microsec_clock::universal_time() -\n-            boost::posix_time::ptime(boost::gregorian::date(1970,1,1))).total_milliseconds();\n+    int64_t now = (boost::posix_time::microsec_clock::universal_time() -\n+                   boost::posix_time::ptime(boost::gregorian::date(1970,1,1))).total_milliseconds();\n+    assert(now > 0);\n+    return now;\n }\n \n int64_t GetTimeMicros()\n {\n-    return (boost::posix_time::microsec_clock::universal_time() -\n-            boost::posix_time::ptime(boost::gregorian::date(1970,1,1))).total_microseconds();\n+    int64_t now = (boost::posix_time::microsec_clock::universal_time() -\n+                   boost::posix_time::ptime(boost::gregorian::date(1970,1,1))).total_microseconds();\n+    assert(now > 0);\n+    return now;\n }\n \n /** Return a time useful for the debug log */"
      }
    ]
  },
  {
    "sha": "26af1ac7cbce11e44c66f3032dfe014eaf311e1c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNmFmMWFjN2NiY2UxMWU0NGM2NmYzMDMyZGZlMDE0ZWFmMzExZTFj",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-25T08:04:49Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-25T08:05:19Z"
      },
      "message": "Merge pull request #7006\n\nf71bfef add UI help for -resetguisettings (Jonas Schnelli)\nae98388 [Qt] add startup option to reset Qt settings (Jonas Schnelli)",
      "tree": {
        "sha": "68e947520f90f6893ea4aa8c876a1a192e9b3f0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68e947520f90f6893ea4aa8c876a1a192e9b3f0d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26af1ac7cbce11e44c66f3032dfe014eaf311e1c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWVWu/AAoJECnUvLZBb1Ps9gUP/2xFcxl9PjGvT5sjHOwOeSNt\n+Qr4Orun2cBnazcAw9/9TRe6ivSE5YYIrSyVhmd6qHLtVDyBOCdArMu3dUeNJU4Q\nCAUcHBi5VAOwKD4oe3VqIYbjmayeeYXMt+CaCRerlFNJxWM9t44r9Ml+hvaChSZy\nuyTwd6LgD3To5Kq+OVOsYZGXyTIRisS6AKf26s10N5L7PntZbULRQfNl/tyGwQv8\nskg1QNHMlUdfABuHIlNTLE0ktAJNoJtxCQrQj3m6mEqSyu+j5p4UcW1e3Zh3g7FM\njnYVe22xdBqDnom+bt9fghcHVB5zqKC7817Lk5BjhGLZgy7guoK/noVvksRHBEOu\nKab3vz3xpyT/O7aR8C8GIuD5hR0t61n113/c22qtPb5J9+V8qlzP5LuIiNTXoo76\nOjyLWeFebaGLoMk4XyktpHib3lF4E86DC2mtU25O4jx8xgyiH36FBzQ5UR+DCCOx\nezKglTmcOW8GgDOVyd9ULJU+Y9B+bh7hRyhHItvgsr+EdQP4kQw9ytclBTD2fb7o\nIcYmToiTJUWEUVWtpDF4MJ6tumjq36RUrSZ81U8AABly5b8f6dAXpHg4xS2oZ6oq\npMdkuvgCG5gVxYrn1jAgmy4P9jaxAo6QwP086+DOkyeh7F+f6Tr/7tINjR91aZY6\nG/ZyNAbRppUXj0RGtCAA\n=fDJN\n-----END PGP SIGNATURE-----",
        "payload": "tree 68e947520f90f6893ea4aa8c876a1a192e9b3f0d\nparent b19fe277dd6208b80fea837adf9e64631b07f946\nparent f71bfefcb0c06c4639a668a325acfd49aa7b3a8c\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1448438689 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1448438719 +0100\n\nMerge pull request #7006\n\nf71bfef add UI help for -resetguisettings (Jonas Schnelli)\nae98388 [Qt] add startup option to reset Qt settings (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26af1ac7cbce11e44c66f3032dfe014eaf311e1c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/26af1ac7cbce11e44c66f3032dfe014eaf311e1c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26af1ac7cbce11e44c66f3032dfe014eaf311e1c/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b19fe277dd6208b80fea837adf9e64631b07f946",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b19fe277dd6208b80fea837adf9e64631b07f946",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b19fe277dd6208b80fea837adf9e64631b07f946"
      },
      {
        "sha": "f71bfefcb0c06c4639a668a325acfd49aa7b3a8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f71bfefcb0c06c4639a668a325acfd49aa7b3a8c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f71bfefcb0c06c4639a668a325acfd49aa7b3a8c"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 13,
      "deletions": 9
    },
    "files": [
      {
        "sha": "162b18186c2e41e3d762cb16f12bcded62ac1684",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26af1ac7cbce11e44c66f3032dfe014eaf311e1c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26af1ac7cbce11e44c66f3032dfe014eaf311e1c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=26af1ac7cbce11e44c66f3032dfe014eaf311e1c",
        "patch": "@@ -501,6 +501,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-min\", _(\"Start minimized\"));\n         strUsage += HelpMessageOpt(\"-rootcertificates=<file>\", _(\"Set SSL root certificates for payment request (default: -system-)\"));\n         strUsage += HelpMessageOpt(\"-splash\", _(\"Show splash screen on startup (default: 1)\"));\n+        strUsage += HelpMessageOpt(\"-resetguisettings\", _(\"Reset all settings changes made over the GUI\"));\n         if (showDebug) {\n             strUsage += HelpMessageOpt(\"-uiplatform\", \"Select platform to customize UI for (one of windows, macosx, other; default: platform compiled on)\");\n         }"
      },
      {
        "sha": "06a6c239ef67e7c312b3f409e28260442da55377",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26af1ac7cbce11e44c66f3032dfe014eaf311e1c/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26af1ac7cbce11e44c66f3032dfe014eaf311e1c/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=26af1ac7cbce11e44c66f3032dfe014eaf311e1c",
        "patch": "@@ -202,7 +202,7 @@ class BitcoinApplication: public QApplication\n     void createPaymentServer();\n #endif\n     /// Create options model\n-    void createOptionsModel();\n+    void createOptionsModel(bool resetSettings);\n     /// Create main window\n     void createWindow(const NetworkStyle *networkStyle);\n     /// Create splash screen\n@@ -352,9 +352,9 @@ void BitcoinApplication::createPaymentServer()\n }\n #endif\n \n-void BitcoinApplication::createOptionsModel()\n+void BitcoinApplication::createOptionsModel(bool resetSettings)\n {\n-    optionsModel = new OptionsModel();\n+    optionsModel = new OptionsModel(NULL, resetSettings);\n }\n \n void BitcoinApplication::createWindow(const NetworkStyle *networkStyle)\n@@ -645,7 +645,7 @@ int main(int argc, char *argv[])\n     qInstallMessageHandler(DebugMessageHandler);\n #endif\n     // Load GUI settings from QSettings\n-    app.createOptionsModel();\n+    app.createOptionsModel(mapArgs.count(\"-resetguisettings\") != 0);\n \n     // Subscribe to global signals from core\n     uiInterface.InitMessage.connect(InitMessage);"
      },
      {
        "sha": "3e5c6c72b1981b1bc9c7e9bafddab0f782d478f1",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26af1ac7cbce11e44c66f3032dfe014eaf311e1c/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26af1ac7cbce11e44c66f3032dfe014eaf311e1c/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=26af1ac7cbce11e44c66f3032dfe014eaf311e1c",
        "patch": "@@ -26,10 +26,10 @@\n #include <QSettings>\n #include <QStringList>\n \n-OptionsModel::OptionsModel(QObject *parent) :\n+OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n     QAbstractListModel(parent)\n {\n-    Init();\n+    Init(resetSettings);\n }\n \n void OptionsModel::addOverriddenOption(const std::string &option)\n@@ -38,8 +38,11 @@ void OptionsModel::addOverriddenOption(const std::string &option)\n }\n \n // Writes all missing QSettings with their default values\n-void OptionsModel::Init()\n+void OptionsModel::Init(bool resetSettings)\n {\n+    if (resetSettings)\n+        Reset();\n+\n     QSettings settings;\n \n     // Ensure restart flag is unset on client startup"
      },
      {
        "sha": "d5bddb1a94086d704196178e18d2efbc46b66acd",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26af1ac7cbce11e44c66f3032dfe014eaf311e1c/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26af1ac7cbce11e44c66f3032dfe014eaf311e1c/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=26af1ac7cbce11e44c66f3032dfe014eaf311e1c",
        "patch": "@@ -24,7 +24,7 @@ class OptionsModel : public QAbstractListModel\n     Q_OBJECT\n \n public:\n-    explicit OptionsModel(QObject *parent = 0);\n+    explicit OptionsModel(QObject *parent = 0, bool resetSettings = false);\n \n     enum OptionID {\n         StartAtStartup,         // bool\n@@ -48,7 +48,7 @@ class OptionsModel : public QAbstractListModel\n         OptionIDRowCount,\n     };\n \n-    void Init();\n+    void Init(bool resetSettings = false);\n     void Reset();\n \n     int rowCount(const QModelIndex & parent = QModelIndex()) const;"
      }
    ]
  },
  {
    "sha": "c434940e833cef5c31ce2df287bc51dc34ada790",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDM0OTQwZTgzM2NlZjVjMzFjZTJkZjI4N2JjNTFkYzM0YWRhNzkw",
    "commit": {
      "author": {
        "name": "daniel",
        "email": "arowser@gmail.com",
        "date": "2015-11-23T02:05:50Z"
      },
      "committer": {
        "name": "daniel",
        "email": "daniel.socials@gmail.com",
        "date": "2015-11-25T08:19:24Z"
      },
      "message": "uint256::GetCheapHash bigendian compatibility",
      "tree": {
        "sha": "cda6794c83a918b70ab58c4667c85237d8ef94f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cda6794c83a918b70ab58c4667c85237d8ef94f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c434940e833cef5c31ce2df287bc51dc34ada790",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c434940e833cef5c31ce2df287bc51dc34ada790",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c434940e833cef5c31ce2df287bc51dc34ada790",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c434940e833cef5c31ce2df287bc51dc34ada790/comments",
    "author": {
      "login": "arowser",
      "id": 541066,
      "node_id": "MDQ6VXNlcjU0MTA2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/541066?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arowser",
      "html_url": "https://github.com/arowser",
      "followers_url": "https://api.github.com/users/arowser/followers",
      "following_url": "https://api.github.com/users/arowser/following{/other_user}",
      "gists_url": "https://api.github.com/users/arowser/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arowser/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arowser/subscriptions",
      "organizations_url": "https://api.github.com/users/arowser/orgs",
      "repos_url": "https://api.github.com/users/arowser/repos",
      "events_url": "https://api.github.com/users/arowser/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arowser/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "danielsocials",
      "id": 7897760,
      "node_id": "MDQ6VXNlcjc4OTc3NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7897760?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danielsocials",
      "html_url": "https://github.com/danielsocials",
      "followers_url": "https://api.github.com/users/danielsocials/followers",
      "following_url": "https://api.github.com/users/danielsocials/following{/other_user}",
      "gists_url": "https://api.github.com/users/danielsocials/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danielsocials/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danielsocials/subscriptions",
      "organizations_url": "https://api.github.com/users/danielsocials/orgs",
      "repos_url": "https://api.github.com/users/danielsocials/repos",
      "events_url": "https://api.github.com/users/danielsocials/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danielsocials/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b0fc179ab8795463e0a0f07e989ec6f592a1f90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b0fc179ab8795463e0a0f07e989ec6f592a1f90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b0fc179ab8795463e0a0f07e989ec6f592a1f90"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 2,
      "deletions": 4
    },
    "files": [
      {
        "sha": "6e37cd5d46f69db6de3d16c1bde1c4fc0373b259",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c434940e833cef5c31ce2df287bc51dc34ada790/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c434940e833cef5c31ce2df287bc51dc34ada790/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=c434940e833cef5c31ce2df287bc51dc34ada790",
        "patch": "@@ -12,6 +12,7 @@\n #include <stdint.h>\n #include <string>\n #include <vector>\n+#include \"crypto/common.h\"\n \n /** Template base class for fixed-sized opaque blobs. */\n template<unsigned int BITS>\n@@ -119,13 +120,10 @@ class uint256 : public base_blob<256> {\n      * used when the contents are considered uniformly random. It is not appropriate\n      * when the value can easily be influenced from outside as e.g. a network adversary could\n      * provide values to trigger worst-case behavior.\n-     * @note The result of this function is not stable between little and big endian.\n      */\n     uint64_t GetCheapHash() const\n     {\n-        uint64_t result;\n-        memcpy((void*)&result, (void*)data, 8);\n-        return result;\n+        return ReadLE64(data);\n     }\n \n     /** A more secure, salted hash function."
      }
    ]
  },
  {
    "sha": "348b281f8a672e02c066b452793f22231010fac1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDhiMjgxZjhhNjcyZTAyYzA2NmI0NTI3OTNmMjIyMzEwMTBmYWMx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-25T09:01:41Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-25T09:01:58Z"
      },
      "message": "Merge pull request #7092\n\n392d3c5 build: Set osx permissions in the dmg to make Gatekeeper happy (Cory Fields)",
      "tree": {
        "sha": "f85f2107915688392e5c282112640ea24dccabb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f85f2107915688392e5c282112640ea24dccabb7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/348b281f8a672e02c066b452793f22231010fac1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWVXkGAAoJEHSBCwEjRsmmDDcH/0MeBpd41naoL0oMAxlBnq7S\nCK8MfJrMuN76kZiEgLZfPoTDQ38pO/fUkweub1bpoIBQPKRY47NbcHqjFYu7ZXfk\nVppDRu27BLRo8cDI2TGLYMmwbAU4kqd9W5lv3pMyauN9ZDUmGtXD4JXn0MOXPpdB\nMUou4mjOa+TfZYVDOIhDa81f0uXapobTcw+DZRi4EZl2BkCzShVx59HD1/kc11IH\ngW4N2VcRGvI2ujkT61dmCK8NQWbEUEUze9jBiLN1/es1vNhxmrUTNsJHF8RXyzyL\ntuDWA+ycSFM9OMZaw5R1e/Efk5nmyuhj2qg9IH3JQ4Dvzc3ylf85TQlf5dBn8m4=\n=Dm19\n-----END PGP SIGNATURE-----",
        "payload": "tree f85f2107915688392e5c282112640ea24dccabb7\nparent 26af1ac7cbce11e44c66f3032dfe014eaf311e1c\nparent 392d3c5846db69dcbcc448d7504d0e4e73832ecf\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448442101 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448442118 +0100\n\nMerge pull request #7092\n\n392d3c5 build: Set osx permissions in the dmg to make Gatekeeper happy (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/348b281f8a672e02c066b452793f22231010fac1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/348b281f8a672e02c066b452793f22231010fac1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/348b281f8a672e02c066b452793f22231010fac1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26af1ac7cbce11e44c66f3032dfe014eaf311e1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26af1ac7cbce11e44c66f3032dfe014eaf311e1c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26af1ac7cbce11e44c66f3032dfe014eaf311e1c"
      },
      {
        "sha": "392d3c5846db69dcbcc448d7504d0e4e73832ecf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/392d3c5846db69dcbcc448d7504d0e4e73832ecf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/392d3c5846db69dcbcc448d7504d0e4e73832ecf"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b2b7811729d0bd30ca2ba0360ae34d3f2e1ad03f",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/348b281f8a672e02c066b452793f22231010fac1/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/348b281f8a672e02c066b452793f22231010fac1/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=348b281f8a672e02c066b452793f22231010fac1",
        "patch": "@@ -111,7 +111,7 @@ $(APP_DIST_DIR)/Applications:\n $(APP_DIST_EXTRAS): $(APP_DIST_DIR)/$(OSX_APP)/Contents/MacOS/Bitcoin-Qt\n \n $(OSX_DMG): $(APP_DIST_EXTRAS)\n-\t$(GENISOIMAGE) -no-cache-inodes -D -l -probe -V \"Bitcoin-Core\" -no-pad -r -apple -o $@ dist\n+\t$(GENISOIMAGE) -no-cache-inodes -D -l -probe -V \"Bitcoin-Core\" -no-pad -r -dir-mode 0755 -apple -o $@ dist\n \n $(APP_DIST_DIR)/.background/$(OSX_BACKGROUND_IMAGE): contrib/macdeploy/$(OSX_BACKGROUND_IMAGE)\n \t$(MKDIR_P) $(@D)"
      }
    ]
  },
  {
    "sha": "2b2ddc558e1cddb5ff54fd2d9e375793021a908e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYjJkZGM1NThlMWNkZGI1ZmY1NGZkMmQ5ZTM3NTc5MzAyMWE5MDhl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-25T10:23:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-25T10:31:59Z"
      },
      "message": "Merge pull request #7088\n\n5ad5463 Squashed 'src/secp256k1/' changes from 2bfb82b..6c527ec (MarcoFalke)",
      "tree": {
        "sha": "fb6b121865d8a6434029f2d036f161b649773c88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb6b121865d8a6434029f2d036f161b649773c88"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b2ddc558e1cddb5ff54fd2d9e375793021a908e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWVY4fAAoJEHSBCwEjRsmmhKQH/RYgGLHpIAf0ituLG6Q/xdWn\nDs0RodcQVjjqi4BKN77YvHK9dJk5Irfzv5lzIYAwlwM+rynOWnf05+vkMsj52ttR\nvfOlPt/h6OCZDtn8DSR0uGyL3SJX5EkqBHlh2Mv7Z5Lb2NhU0PfiH3FXd8iNVMGm\nqL0blKnigzsVNAwsAcDDa3ND+NrSzGqUMemzX+NppLqWR2eaGz3rbIxdODL7wJ/q\nkIKoiP3dlENx+L6nPZzJh4S7ShvXn4JTF+aCJ9Z3NnUHd/ktIjCEQv3ePIKwlI2R\n+x481KZTVOlhcHyiEp50IZFN15Eu272PQzc6eI2LQJtgC4FE0lcPEjH5oltGfh4=\n=KpRZ\n-----END PGP SIGNATURE-----",
        "payload": "tree fb6b121865d8a6434029f2d036f161b649773c88\nparent 348b281f8a672e02c066b452793f22231010fac1\nparent fa63e49b351b3620f8140b6081d17ddc3df9b69a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448447030 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448447519 +0100\n\nMerge pull request #7088\n\n5ad5463 Squashed 'src/secp256k1/' changes from 2bfb82b..6c527ec (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b2ddc558e1cddb5ff54fd2d9e375793021a908e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2b2ddc558e1cddb5ff54fd2d9e375793021a908e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b2ddc558e1cddb5ff54fd2d9e375793021a908e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "348b281f8a672e02c066b452793f22231010fac1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/348b281f8a672e02c066b452793f22231010fac1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/348b281f8a672e02c066b452793f22231010fac1"
      },
      {
        "sha": "fa63e49b351b3620f8140b6081d17ddc3df9b69a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa63e49b351b3620f8140b6081d17ddc3df9b69a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa63e49b351b3620f8140b6081d17ddc3df9b69a"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7772a4e9d282c6f76c10c046092ec0538319d058",
        "filename": "src/secp256k1/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b2ddc558e1cddb5ff54fd2d9e375793021a908e/src/secp256k1/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b2ddc558e1cddb5ff54fd2d9e375793021a908e/src/secp256k1/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/Makefile.am?ref=2b2ddc558e1cddb5ff54fd2d9e375793021a908e",
        "patch": "@@ -75,7 +75,7 @@ TESTS = tests\n endif\n \n if USE_ECMULT_STATIC_PRECOMPUTATION\n-CPPFLAGS_FOR_BUILD +=-I$(top_srcdir)/\n+CPPFLAGS_FOR_BUILD +=-I$(top_srcdir)\n CFLAGS_FOR_BUILD += -Wall -Wextra -Wno-unused-function\n \n gen_context_OBJECTS = gen_context.o"
      }
    ]
  },
  {
    "sha": "4ec3561eb3473638230ef780b41343bc6284b460",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZWMzNTYxZWIzNDczNjM4MjMwZWY3ODBiNDEzNDNiYzYyODRiNDYw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-25T12:19:48Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-25T12:59:49Z"
      },
      "message": "Replace scriptnum_test's normative ScriptNum implementation\n\nCompare against the scriptnum from Bitcoin Core 0.10 instead of OpenSSL.\nCloses #7086.",
      "tree": {
        "sha": "b56e639d4133bbd1818fc9e97a354f124b993c38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b56e639d4133bbd1818fc9e97a354f124b993c38"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ec3561eb3473638230ef780b41343bc6284b460",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ec3561eb3473638230ef780b41343bc6284b460",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4ec3561eb3473638230ef780b41343bc6284b460",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ec3561eb3473638230ef780b41343bc6284b460/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2b2ddc558e1cddb5ff54fd2d9e375793021a908e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b2ddc558e1cddb5ff54fd2d9e375793021a908e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2b2ddc558e1cddb5ff54fd2d9e375793021a908e"
      }
    ],
    "stats": {
      "total": 406,
      "additions": 206,
      "deletions": 200
    },
    "files": [
      {
        "sha": "fafc1a294473bffa39246debabb9c00a05995ec3",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ec3561eb3473638230ef780b41343bc6284b460/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ec3561eb3473638230ef780b41343bc6284b460/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=4ec3561eb3473638230ef780b41343bc6284b460",
        "patch": "@@ -35,7 +35,7 @@ GENERATED_TEST_FILES = $(JSON_TEST_FILES:.json=.json.h) $(RAW_TEST_FILES:.raw=.r\n \n BITCOIN_TESTS =\\\n   test/arith_uint256_tests.cpp \\\n-  test/bignum.h \\\n+  test/scriptnum10.h \\\n   test/addrman_tests.cpp \\\n   test/alert_tests.cpp \\\n   test/allocator_tests.cpp \\"
      },
      {
        "sha": "e7aeee9db606c870315542a50dca96b9eb7e2ff7",
        "filename": "src/test/bignum.h",
        "status": "removed",
        "additions": 0,
        "deletions": 180,
        "changes": 180,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b2ddc558e1cddb5ff54fd2d9e375793021a908e/src/test/bignum.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b2ddc558e1cddb5ff54fd2d9e375793021a908e/src/test/bignum.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bignum.h?ref=2b2ddc558e1cddb5ff54fd2d9e375793021a908e",
        "patch": "@@ -1,180 +0,0 @@\n-// Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_TEST_BIGNUM_H\n-#define BITCOIN_TEST_BIGNUM_H\n-\n-#include <algorithm>\n-#include <limits>\n-#include <stdexcept>\n-#include <stdint.h>\n-#include <string>\n-#include <vector>\n-\n-#include <openssl/bn.h>\n-\n-class bignum_error : public std::runtime_error\n-{\n-public:\n-    explicit bignum_error(const std::string& str) : std::runtime_error(str) {}\n-};\n-\n-\n-/** C++ wrapper for BIGNUM (OpenSSL bignum) */\n-class CBigNum : public BIGNUM\n-{\n-public:\n-    CBigNum()\n-    {\n-        BN_init(this);\n-    }\n-\n-    CBigNum(const CBigNum& b)\n-    {\n-        BN_init(this);\n-        if (!BN_copy(this, &b))\n-        {\n-            BN_clear_free(this);\n-            throw bignum_error(\"CBigNum::CBigNum(const CBigNum&): BN_copy failed\");\n-        }\n-    }\n-\n-    CBigNum& operator=(const CBigNum& b)\n-    {\n-        if (!BN_copy(this, &b))\n-            throw bignum_error(\"CBigNum::operator=: BN_copy failed\");\n-        return (*this);\n-    }\n-\n-    ~CBigNum()\n-    {\n-        BN_clear_free(this);\n-    }\n-\n-    CBigNum(long long n)          { BN_init(this); setint64(n); }\n-\n-    explicit CBigNum(const std::vector<unsigned char>& vch)\n-    {\n-        BN_init(this);\n-        setvch(vch);\n-    }\n-\n-    int getint() const\n-    {\n-        BN_ULONG n = BN_get_word(this);\n-        if (!BN_is_negative(this))\n-            return (n > (BN_ULONG)std::numeric_limits<int>::max() ? std::numeric_limits<int>::max() : n);\n-        else\n-            return (n > (BN_ULONG)std::numeric_limits<int>::max() ? std::numeric_limits<int>::min() : -(int)n);\n-    }\n-\n-    void setint64(int64_t sn)\n-    {\n-        unsigned char pch[sizeof(sn) + 6];\n-        unsigned char* p = pch + 4;\n-        bool fNegative;\n-        uint64_t n;\n-\n-        if (sn < (int64_t)0)\n-        {\n-            // Since the minimum signed integer cannot be represented as positive so long as its type is signed, \n-            // and it's not well-defined what happens if you make it unsigned before negating it,\n-            // we instead increment the negative integer by 1, convert it, then increment the (now positive) unsigned integer by 1 to compensate\n-            n = -(sn + 1);\n-            ++n;\n-            fNegative = true;\n-        } else {\n-            n = sn;\n-            fNegative = false;\n-        }\n-\n-        bool fLeadingZeroes = true;\n-        for (int i = 0; i < 8; i++)\n-        {\n-            unsigned char c = (n >> 56) & 0xff;\n-            n <<= 8;\n-            if (fLeadingZeroes)\n-            {\n-                if (c == 0)\n-                    continue;\n-                if (c & 0x80)\n-                    *p++ = (fNegative ? 0x80 : 0);\n-                else if (fNegative)\n-                    c |= 0x80;\n-                fLeadingZeroes = false;\n-            }\n-            *p++ = c;\n-        }\n-        unsigned int nSize = p - (pch + 4);\n-        pch[0] = (nSize >> 24) & 0xff;\n-        pch[1] = (nSize >> 16) & 0xff;\n-        pch[2] = (nSize >> 8) & 0xff;\n-        pch[3] = (nSize) & 0xff;\n-        BN_mpi2bn(pch, p - pch, this);\n-    }\n-\n-    void setvch(const std::vector<unsigned char>& vch)\n-    {\n-        std::vector<unsigned char> vch2(vch.size() + 4);\n-        unsigned int nSize = vch.size();\n-        // BIGNUM's byte stream format expects 4 bytes of\n-        // big endian size data info at the front\n-        vch2[0] = (nSize >> 24) & 0xff;\n-        vch2[1] = (nSize >> 16) & 0xff;\n-        vch2[2] = (nSize >> 8) & 0xff;\n-        vch2[3] = (nSize >> 0) & 0xff;\n-        // swap data to big endian\n-        reverse_copy(vch.begin(), vch.end(), vch2.begin() + 4);\n-        BN_mpi2bn(&vch2[0], vch2.size(), this);\n-    }\n-\n-    std::vector<unsigned char> getvch() const\n-    {\n-        unsigned int nSize = BN_bn2mpi(this, NULL);\n-        if (nSize <= 4)\n-            return std::vector<unsigned char>();\n-        std::vector<unsigned char> vch(nSize);\n-        BN_bn2mpi(this, &vch[0]);\n-        vch.erase(vch.begin(), vch.begin() + 4);\n-        reverse(vch.begin(), vch.end());\n-        return vch;\n-    }\n-\n-    friend inline const CBigNum operator-(const CBigNum& a, const CBigNum& b);\n-};\n-\n-\n-\n-inline const CBigNum operator+(const CBigNum& a, const CBigNum& b)\n-{\n-    CBigNum r;\n-    if (!BN_add(&r, &a, &b))\n-        throw bignum_error(\"CBigNum::operator+: BN_add failed\");\n-    return r;\n-}\n-\n-inline const CBigNum operator-(const CBigNum& a, const CBigNum& b)\n-{\n-    CBigNum r;\n-    if (!BN_sub(&r, &a, &b))\n-        throw bignum_error(\"CBigNum::operator-: BN_sub failed\");\n-    return r;\n-}\n-\n-inline const CBigNum operator-(const CBigNum& a)\n-{\n-    CBigNum r(a);\n-    BN_set_negative(&r, !BN_is_negative(&r));\n-    return r;\n-}\n-\n-inline bool operator==(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) == 0); }\n-inline bool operator!=(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) != 0); }\n-inline bool operator<=(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) <= 0); }\n-inline bool operator>=(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) >= 0); }\n-inline bool operator<(const CBigNum& a, const CBigNum& b)  { return (BN_cmp(&a, &b) < 0); }\n-inline bool operator>(const CBigNum& a, const CBigNum& b)  { return (BN_cmp(&a, &b) > 0); }\n-\n-#endif // BITCOIN_TEST_BIGNUM_H"
      },
      {
        "sha": "00419746b7ebfc946ee74ab9f14d65472f9e3902",
        "filename": "src/test/scriptnum10.h",
        "status": "added",
        "additions": 183,
        "deletions": 0,
        "changes": 183,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ec3561eb3473638230ef780b41343bc6284b460/src/test/scriptnum10.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ec3561eb3473638230ef780b41343bc6284b460/src/test/scriptnum10.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scriptnum10.h?ref=4ec3561eb3473638230ef780b41343bc6284b460",
        "patch": "@@ -0,0 +1,183 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TEST_SCRIPTNUM10_H\n+#define BITCOIN_TEST_SCRIPTNUM10_H\n+\n+#include <algorithm>\n+#include <limits>\n+#include <stdexcept>\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+#include \"assert.h\"\n+\n+class scriptnum10_error : public std::runtime_error\n+{\n+public:\n+    explicit scriptnum10_error(const std::string& str) : std::runtime_error(str) {}\n+};\n+\n+class CScriptNum10\n+{\n+/**\n+ * The ScriptNum implementation from Bitcoin Core 0.10.0, for cross-comparison.\n+ */\n+public:\n+\n+    explicit CScriptNum10(const int64_t& n)\n+    {\n+        m_value = n;\n+    }\n+\n+    static const size_t nDefaultMaxNumSize = 4;\n+\n+    explicit CScriptNum10(const std::vector<unsigned char>& vch, bool fRequireMinimal,\n+                        const size_t nMaxNumSize = nDefaultMaxNumSize)\n+    {\n+        if (vch.size() > nMaxNumSize) {\n+            throw scriptnum10_error(\"script number overflow\");\n+        }\n+        if (fRequireMinimal && vch.size() > 0) {\n+            // Check that the number is encoded with the minimum possible\n+            // number of bytes.\n+            //\n+            // If the most-significant-byte - excluding the sign bit - is zero\n+            // then we're not minimal. Note how this test also rejects the\n+            // negative-zero encoding, 0x80.\n+            if ((vch.back() & 0x7f) == 0) {\n+                // One exception: if there's more than one byte and the most\n+                // significant bit of the second-most-significant-byte is set\n+                // it would conflict with the sign bit. An example of this case\n+                // is +-255, which encode to 0xff00 and 0xff80 respectively.\n+                // (big-endian).\n+                if (vch.size() <= 1 || (vch[vch.size() - 2] & 0x80) == 0) {\n+                    throw scriptnum10_error(\"non-minimally encoded script number\");\n+                }\n+            }\n+        }\n+        m_value = set_vch(vch);\n+    }\n+\n+    inline bool operator==(const int64_t& rhs) const    { return m_value == rhs; }\n+    inline bool operator!=(const int64_t& rhs) const    { return m_value != rhs; }\n+    inline bool operator<=(const int64_t& rhs) const    { return m_value <= rhs; }\n+    inline bool operator< (const int64_t& rhs) const    { return m_value <  rhs; }\n+    inline bool operator>=(const int64_t& rhs) const    { return m_value >= rhs; }\n+    inline bool operator> (const int64_t& rhs) const    { return m_value >  rhs; }\n+\n+    inline bool operator==(const CScriptNum10& rhs) const { return operator==(rhs.m_value); }\n+    inline bool operator!=(const CScriptNum10& rhs) const { return operator!=(rhs.m_value); }\n+    inline bool operator<=(const CScriptNum10& rhs) const { return operator<=(rhs.m_value); }\n+    inline bool operator< (const CScriptNum10& rhs) const { return operator< (rhs.m_value); }\n+    inline bool operator>=(const CScriptNum10& rhs) const { return operator>=(rhs.m_value); }\n+    inline bool operator> (const CScriptNum10& rhs) const { return operator> (rhs.m_value); }\n+\n+    inline CScriptNum10 operator+(   const int64_t& rhs)    const { return CScriptNum10(m_value + rhs);}\n+    inline CScriptNum10 operator-(   const int64_t& rhs)    const { return CScriptNum10(m_value - rhs);}\n+    inline CScriptNum10 operator+(   const CScriptNum10& rhs) const { return operator+(rhs.m_value);   }\n+    inline CScriptNum10 operator-(   const CScriptNum10& rhs) const { return operator-(rhs.m_value);   }\n+\n+    inline CScriptNum10& operator+=( const CScriptNum10& rhs)       { return operator+=(rhs.m_value);  }\n+    inline CScriptNum10& operator-=( const CScriptNum10& rhs)       { return operator-=(rhs.m_value);  }\n+\n+    inline CScriptNum10 operator-()                         const\n+    {\n+        assert(m_value != std::numeric_limits<int64_t>::min());\n+        return CScriptNum10(-m_value);\n+    }\n+\n+    inline CScriptNum10& operator=( const int64_t& rhs)\n+    {\n+        m_value = rhs;\n+        return *this;\n+    }\n+\n+    inline CScriptNum10& operator+=( const int64_t& rhs)\n+    {\n+        assert(rhs == 0 || (rhs > 0 && m_value <= std::numeric_limits<int64_t>::max() - rhs) ||\n+                           (rhs < 0 && m_value >= std::numeric_limits<int64_t>::min() - rhs));\n+        m_value += rhs;\n+        return *this;\n+    }\n+\n+    inline CScriptNum10& operator-=( const int64_t& rhs)\n+    {\n+        assert(rhs == 0 || (rhs > 0 && m_value >= std::numeric_limits<int64_t>::min() + rhs) ||\n+                           (rhs < 0 && m_value <= std::numeric_limits<int64_t>::max() + rhs));\n+        m_value -= rhs;\n+        return *this;\n+    }\n+\n+    int getint() const\n+    {\n+        if (m_value > std::numeric_limits<int>::max())\n+            return std::numeric_limits<int>::max();\n+        else if (m_value < std::numeric_limits<int>::min())\n+            return std::numeric_limits<int>::min();\n+        return m_value;\n+    }\n+\n+    std::vector<unsigned char> getvch() const\n+    {\n+        return serialize(m_value);\n+    }\n+\n+    static std::vector<unsigned char> serialize(const int64_t& value)\n+    {\n+        if(value == 0)\n+            return std::vector<unsigned char>();\n+\n+        std::vector<unsigned char> result;\n+        const bool neg = value < 0;\n+        uint64_t absvalue = neg ? -value : value;\n+\n+        while(absvalue)\n+        {\n+            result.push_back(absvalue & 0xff);\n+            absvalue >>= 8;\n+        }\n+\n+//    - If the most significant byte is >= 0x80 and the value is positive, push a\n+//    new zero-byte to make the significant byte < 0x80 again.\n+\n+//    - If the most significant byte is >= 0x80 and the value is negative, push a\n+//    new 0x80 byte that will be popped off when converting to an integral.\n+\n+//    - If the most significant byte is < 0x80 and the value is negative, add\n+//    0x80 to it, since it will be subtracted and interpreted as a negative when\n+//    converting to an integral.\n+\n+        if (result.back() & 0x80)\n+            result.push_back(neg ? 0x80 : 0);\n+        else if (neg)\n+            result.back() |= 0x80;\n+\n+        return result;\n+    }\n+\n+private:\n+    static int64_t set_vch(const std::vector<unsigned char>& vch)\n+    {\n+      if (vch.empty())\n+          return 0;\n+\n+      int64_t result = 0;\n+      for (size_t i = 0; i != vch.size(); ++i)\n+          result |= static_cast<int64_t>(vch[i]) << 8*i;\n+\n+      // If the input vector's most significant byte is 0x80, remove it from\n+      // the result's msb and return a negative.\n+      if (vch.back() & 0x80)\n+          return -((int64_t)(result & ~(0x80ULL << (8 * (vch.size() - 1)))));\n+\n+      return result;\n+    }\n+\n+    int64_t m_value;\n+};\n+\n+\n+#endif // BITCOIN_TEST_BIGNUM_H"
      },
      {
        "sha": "2405ab3ffc0dcba7e8559c8de741ada8102a9174",
        "filename": "src/test/scriptnum_tests.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 19,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ec3561eb3473638230ef780b41343bc6284b460/src/test/scriptnum_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ec3561eb3473638230ef780b41343bc6284b460/src/test/scriptnum_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scriptnum_tests.cpp?ref=4ec3561eb3473638230ef780b41343bc6284b460",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bignum.h\"\n+#include \"scriptnum10.h\"\n #include \"script/script.h\"\n #include \"test/test_bitcoin.h\"\n \n@@ -16,45 +16,48 @@ static const int64_t values[] = \\\n { 0, 1, CHAR_MIN, CHAR_MAX, UCHAR_MAX, SHRT_MIN, USHRT_MAX, INT_MIN, INT_MAX, UINT_MAX, LONG_MIN, LONG_MAX };\n static const int64_t offsets[] = { 1, 0x79, 0x80, 0x81, 0xFF, 0x7FFF, 0x8000, 0xFFFF, 0x10000};\n \n-static bool verify(const CBigNum& bignum, const CScriptNum& scriptnum)\n+static bool verify(const CScriptNum10& bignum, const CScriptNum& scriptnum)\n {\n     return bignum.getvch() == scriptnum.getvch() && bignum.getint() == scriptnum.getint();\n }\n \n static void CheckCreateVch(const int64_t& num)\n {\n-    CBigNum bignum(num);\n+    CScriptNum10 bignum(num);\n     CScriptNum scriptnum(num);\n     BOOST_CHECK(verify(bignum, scriptnum));\n \n-    CBigNum bignum2(bignum.getvch());\n+    std::vector<unsigned char> vch = bignum.getvch();\n+\n+    CScriptNum10 bignum2(bignum.getvch(), false);\n+    vch = scriptnum.getvch();\n     CScriptNum scriptnum2(scriptnum.getvch(), false);\n     BOOST_CHECK(verify(bignum2, scriptnum2));\n \n-    CBigNum bignum3(scriptnum2.getvch());\n+    CScriptNum10 bignum3(scriptnum2.getvch(), false);\n     CScriptNum scriptnum3(bignum2.getvch(), false);\n     BOOST_CHECK(verify(bignum3, scriptnum3));\n }\n \n static void CheckCreateInt(const int64_t& num)\n {\n-    CBigNum bignum(num);\n+    CScriptNum10 bignum(num);\n     CScriptNum scriptnum(num);\n     BOOST_CHECK(verify(bignum, scriptnum));\n-    BOOST_CHECK(verify(bignum.getint(), CScriptNum(scriptnum.getint())));\n-    BOOST_CHECK(verify(scriptnum.getint(), CScriptNum(bignum.getint())));\n-    BOOST_CHECK(verify(CBigNum(scriptnum.getint()).getint(), CScriptNum(CScriptNum(bignum.getint()).getint())));\n+    BOOST_CHECK(verify(CScriptNum10(bignum.getint()), CScriptNum(scriptnum.getint())));\n+    BOOST_CHECK(verify(CScriptNum10(scriptnum.getint()), CScriptNum(bignum.getint())));\n+    BOOST_CHECK(verify(CScriptNum10(CScriptNum10(scriptnum.getint()).getint()), CScriptNum(CScriptNum(bignum.getint()).getint())));\n }\n \n \n static void CheckAdd(const int64_t& num1, const int64_t& num2)\n {\n-    const CBigNum bignum1(num1);\n-    const CBigNum bignum2(num2);\n+    const CScriptNum10 bignum1(num1);\n+    const CScriptNum10 bignum2(num2);\n     const CScriptNum scriptnum1(num1);\n     const CScriptNum scriptnum2(num2);\n-    CBigNum bignum3(num1);\n-    CBigNum bignum4(num1);\n+    CScriptNum10 bignum3(num1);\n+    CScriptNum10 bignum4(num1);\n     CScriptNum scriptnum3(num1);\n     CScriptNum scriptnum4(num1);\n \n@@ -71,7 +74,7 @@ static void CheckAdd(const int64_t& num1, const int64_t& num2)\n \n static void CheckNegate(const int64_t& num)\n {\n-    const CBigNum bignum(num);\n+    const CScriptNum10 bignum(num);\n     const CScriptNum scriptnum(num);\n \n     // -INT64_MIN is undefined\n@@ -81,8 +84,8 @@ static void CheckNegate(const int64_t& num)\n \n static void CheckSubtract(const int64_t& num1, const int64_t& num2)\n {\n-    const CBigNum bignum1(num1);\n-    const CBigNum bignum2(num2);\n+    const CScriptNum10 bignum1(num1);\n+    const CScriptNum10 bignum2(num2);\n     const CScriptNum scriptnum1(num1);\n     const CScriptNum scriptnum2(num2);\n     bool invalid = false;\n@@ -107,8 +110,8 @@ static void CheckSubtract(const int64_t& num1, const int64_t& num2)\n \n static void CheckCompare(const int64_t& num1, const int64_t& num2)\n {\n-    const CBigNum bignum1(num1);\n-    const CBigNum bignum2(num2);\n+    const CScriptNum10 bignum1(num1);\n+    const CScriptNum10 bignum2(num2);\n     const CScriptNum scriptnum1(num1);\n     const CScriptNum scriptnum2(num2);\n \n@@ -149,7 +152,7 @@ static void RunCreate(const int64_t& num)\n         CheckCreateVch(num);\n     else\n     {\n-        BOOST_CHECK_THROW (CheckCreateVch(num), scriptnum_error);\n+        BOOST_CHECK_THROW (CheckCreateVch(num), scriptnum10_error);\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "be281d8a83ca8fe7cf785a4608d1a8954b193191",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZTI4MWQ4YTgzY2E4ZmU3Y2Y3ODVhNDYwOGQxYTg5NTRiMTkzMTkx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-26T07:32:38Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-26T07:43:21Z"
      },
      "message": "Merge pull request #7087\n\n9cf6688 Document both the peerbloomfilters and enforcenodebloom options. (Patick Strateman)\n0f4dc53 Add enforcenodebloom option. (Patick Strateman)\nb3caa9b Move bloom filter filtering logic outside of command \"switch\" (giant if/else). (Patick Strateman)",
      "tree": {
        "sha": "320d1fc8892f741984c68c3f4adf09454e350d4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/320d1fc8892f741984c68c3f4adf09454e350d4e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be281d8a83ca8fe7cf785a4608d1a8954b193191",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWVrgZAAoJEHSBCwEjRsmmKQsH/3ZEjorQBxcGlCA8T+8CINhH\nCPELi/33d/MOUhaIbQOSHwxbitv3PhfuGQBEEIa2O2XU1fu6Mqp4sU6igJhIppWs\n6lt+aYitEnI/OmC3O952v66ShBqqOiCrQJAXpfrhcX0upoRhh9ZBI14o1yk4mcsk\nXkvBXoU8zGbkHemy1ZPbG3U4/SkqKmHQ/jSQUBkIIFTO8Ws766p3AKWeRj/9yLP7\nn0sDqpdh75aC0iz2hNSr3re3K3rRnI8ARgY/IXndJjaxy9Vkm9mSJ+ZeD7SVpDn2\nRBwZGw3cXg8Yg3PXPMy1d/6ZW96YgJKDML0JqYgqr3Rv0mjA39bpgZ1sCJBJ3Qc=\n=gAcQ\n-----END PGP SIGNATURE-----",
        "payload": "tree 320d1fc8892f741984c68c3f4adf09454e350d4e\nparent 2b2ddc558e1cddb5ff54fd2d9e375793021a908e\nparent 9cf668844eebee18ea08a8c6e63758871ef4ea86\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448523158 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448523801 +0100\n\nMerge pull request #7087\n\n9cf6688 Document both the peerbloomfilters and enforcenodebloom options. (Patick Strateman)\n0f4dc53 Add enforcenodebloom option. (Patick Strateman)\nb3caa9b Move bloom filter filtering logic outside of command \"switch\" (giant if/else). (Patick Strateman)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be281d8a83ca8fe7cf785a4608d1a8954b193191",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/be281d8a83ca8fe7cf785a4608d1a8954b193191",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be281d8a83ca8fe7cf785a4608d1a8954b193191/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2b2ddc558e1cddb5ff54fd2d9e375793021a908e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b2ddc558e1cddb5ff54fd2d9e375793021a908e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2b2ddc558e1cddb5ff54fd2d9e375793021a908e"
      },
      {
        "sha": "9cf668844eebee18ea08a8c6e63758871ef4ea86",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cf668844eebee18ea08a8c6e63758871ef4ea86",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9cf668844eebee18ea08a8c6e63758871ef4ea86"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 16,
      "deletions": 15
    },
    "files": [
      {
        "sha": "721ae225ca27764641ed89cfc747a4874eb9b8d2",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be281d8a83ca8fe7cf785a4608d1a8954b193191/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be281d8a83ca8fe7cf785a4608d1a8954b193191/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=be281d8a83ca8fe7cf785a4608d1a8954b193191",
        "patch": "@@ -362,6 +362,9 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-onion=<ip:port>\", strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\"));\n     strUsage += HelpMessageOpt(\"-onlynet=<net>\", _(\"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\"));\n     strUsage += HelpMessageOpt(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-peerbloomfilters\", strprintf(_(\"Support filtering of blocks and transaction with bloom filters (default: %u)\"), 1));\n+    if (showDebug)\n+        strUsage += HelpMessageOpt(\"-enforcenodebloom\", strprintf(\"Enforce minimum protocol version to limit use of bloom filters (default: %u)\", 0));\n     strUsage += HelpMessageOpt(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), 8333, 18333));\n     strUsage += HelpMessageOpt(\"-proxy=<ip:port>\", _(\"Connect through SOCKS5 proxy\"));\n     strUsage += HelpMessageOpt(\"-proxyrandomize\", strprintf(_(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\"), 1));"
      },
      {
        "sha": "b0b58141a20d5389e0b0cf378ab454ed404ec914",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 15,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be281d8a83ca8fe7cf785a4608d1a8954b193191/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be281d8a83ca8fe7cf785a4608d1a8954b193191/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=be281d8a83ca8fe7cf785a4608d1a8954b193191",
        "patch": "@@ -3989,6 +3989,19 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     }\n \n \n+    if (!(nLocalServices & NODE_BLOOM) &&\n+              (strCommand == \"filterload\" ||\n+               strCommand == \"filteradd\" ||\n+               strCommand == \"filterclear\"))\n+    {\n+        if (pfrom->nVersion >= NO_BLOOM_VERSION) {\n+            Misbehaving(pfrom->GetId(), 100);\n+            return false;\n+        } else if (GetBoolArg(\"-enforcenodebloom\", false)) {\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n \n \n     if (strCommand == \"version\")\n@@ -4750,21 +4763,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     }\n \n \n-    else if (!(nLocalServices & NODE_BLOOM) &&\n-              (strCommand == \"filterload\" ||\n-               strCommand == \"filteradd\" ||\n-               strCommand == \"filterclear\") &&\n-              //TODO: Remove this line after reasonable network upgrade\n-              pfrom->nVersion >= NO_BLOOM_VERSION)\n-    {\n-        if (pfrom->nVersion >= NO_BLOOM_VERSION)\n-            Misbehaving(pfrom->GetId(), 100);\n-        //TODO: Enable this after reasonable network upgrade\n-        //else\n-        //    pfrom->fDisconnect = true;\n-    }\n-\n-\n     else if (strCommand == \"filterload\")\n     {\n         CBloomFilter filter;"
      }
    ]
  },
  {
    "sha": "cde857f2d977fbe3f96c093f6ca3c9810494191d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZGU4NTdmMmQ5NzdmYmUzZjk2YzA5M2Y2Y2EzYzk4MTA0OTQxOTFk",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-11-24T15:27:38Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-11-26T10:14:31Z"
      },
      "message": "Connect to Tor hidden services by default\n\nAdds 127.0.0.1:9050 for the .onion proxy if we can succesfully connect\nto the control port.\n\nNatural followup to creating hidden services automatically.",
      "tree": {
        "sha": "39ba7a01ccf66a0748f287facbd69596c64bcf39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39ba7a01ccf66a0748f287facbd69596c64bcf39"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cde857f2d977fbe3f96c093f6ca3c9810494191d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGrBAABCACVBQJWVtuJXhSAAAAAABUAQGJsb2NraGFzaEBiaXRjb2luLm9yZzAw\nMDAwMDAwMDAwMDAwMDAwZTU0OTQ2YWIwNDYxYzA4OTMzZmJkZDljOTMwZjNjZjMz\nMzliMGJjNWZmNzc4YWMvFIAAAAAAFQARcGthLWFkZHJlc3NAZ251cGcub3JncGV0\nZUBwZXRlcnRvZC5vcmcACgkQJIFAPaXwkftJdggAslQew/0H3+CTYMRlJg+BpmUj\nlcO6n/F0wvST4huDztjKmjKhB6AA3ZBmOR8lTxN9CSIrRT28FGzOr67jE7eGwGTm\nFPJ89kKSDnhVBTbRgWLE/TEVtOibgFcuvqEa0+qQB34NPxUp8cjJkcdYSPSWTpZF\ne8VZwGA1jdheVG2nw28IcQXK/tDxs+GA7Q9s4Vqw0gLsR3qmyV0Wv3Yb0LvtVAXB\nOVRdGNJndA72+N+bzAQX0NYhqIM5XExNVPxW+GB6XgFt34VM7QiFc0atDXL2wYEQ\njGrfYVF7++74h7mhH/kuIcG8XXeiSV1IVNtuEE9lPPbrF59SPAGRT9AnsAGTAg==\n=zx7L\n-----END PGP SIGNATURE-----",
        "payload": "tree 39ba7a01ccf66a0748f287facbd69596c64bcf39\nparent 0b0fc179ab8795463e0a0f07e989ec6f592a1f90\nauthor Peter Todd <pete@petertodd.org> 1448378858 -0500\ncommitter Peter Todd <pete@petertodd.org> 1448532871 -0500\n\nConnect to Tor hidden services by default\n\nAdds 127.0.0.1:9050 for the .onion proxy if we can succesfully connect\nto the control port.\n\nNatural followup to creating hidden services automatically.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cde857f2d977fbe3f96c093f6ca3c9810494191d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cde857f2d977fbe3f96c093f6ca3c9810494191d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cde857f2d977fbe3f96c093f6ca3c9810494191d/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b0fc179ab8795463e0a0f07e989ec6f592a1f90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b0fc179ab8795463e0a0f07e989ec6f592a1f90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b0fc179ab8795463e0a0f07e989ec6f592a1f90"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 14,
      "deletions": 4
    },
    "files": [
      {
        "sha": "009baaed516a98f0e40c1480c29e3be93aeda4a7",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cde857f2d977fbe3f96c093f6ca3c9810494191d/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cde857f2d977fbe3f96c093f6ca3c9810494191d/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=cde857f2d977fbe3f96c093f6ca3c9810494191d",
        "patch": "@@ -151,17 +151,18 @@ mining with the getblocktemplate protocol to a pool: this will affect you at\n the pool operator's discretion, which must be no later than BIP65 achieving its\n 951/1001 status.\n \n-Automatically listen on Tor\n-----------------------------\n+Automatically use Tor hidden services\n+-------------------------------------\n \n Starting with Tor version 0.2.7.1 it is possible, through Tor's control socket\n API, to create and destroy 'ephemeral' hidden services programmatically.\n Bitcoin Core has been updated to make use of this.\n \n This means that if Tor is running (and proper authorization is available),\n Bitcoin Core automatically creates a hidden service to listen on, without\n-manual configuration. This will positively affect the number of available\n-.onion nodes.\n+manual configuration. Bitcoin Core will also use Tor automatically to connect\n+to other .onion nodes if the control socket can be successfully opened. This\n+will positively affect the number of available .onion nodes and their usage.\n \n This new feature is enabled by default if Bitcoin Core is listening, and\n a connection to Tor can be made. It can be configured with the `-listenonion`,"
      },
      {
        "sha": "31a2917203f12f673f6cfb90c87df3d3c54d3dfb",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cde857f2d977fbe3f96c093f6ca3c9810494191d/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cde857f2d977fbe3f96c093f6ca3c9810494191d/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=cde857f2d977fbe3f96c093f6ca3c9810494191d",
        "patch": "@@ -449,6 +449,15 @@ void TorController::auth_cb(TorControlConnection& conn, const TorControlReply& r\n {\n     if (reply.code == 250) {\n         LogPrint(\"tor\", \"tor: Authentication succesful\\n\");\n+\n+        // Now that we know Tor is running setup the proxy for onion addresses\n+        // if -onion isn't set to something else.\n+        if (GetArg(\"-onion\", \"\") == \"\") {\n+            proxyType addrOnion = proxyType(CService(\"127.0.0.1\", 9050), true);\n+            SetProxy(NET_TOR, addrOnion);\n+            SetReachable(NET_TOR);\n+        }\n+\n         // Finally - now create the service\n         if (private_key.empty()) // No private key, generate one\n             private_key = \"NEW:BEST\";"
      }
    ]
  },
  {
    "sha": "f8a8e27a6a1901152822d59622f9aeb25a78a78d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOGE4ZTI3YTZhMTkwMTE1MjgyMmQ1OTYyMmY5YWViMjVhNzhhNzhk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-26T10:18:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-26T10:18:31Z"
      },
      "message": "Merge pull request #7069\n\nfa472f3 [trivial] Fix -maxmempool InitError (MarcoFalke)",
      "tree": {
        "sha": "e594c4637752df8d8d80c726c96bc8e55e14dd1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e594c4637752df8d8d80c726c96bc8e55e14dd1e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8a8e27a6a1901152822d59622f9aeb25a78a78d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWVtx3AAoJEHSBCwEjRsmm5vYIAK5bSUzWOtHsR69qio/LH30A\nYCi3N9bqfk6VSnZ+QPGVG0v6iD35RDyGfn04V7eVmkB0AFSC1pHI5kNwCMER9qdA\nl/jtsw8a6z9FgTZEZhGH0QZQf6UVZaK6pVZ6FjlY1kpWV7HZtSxE+7ItNTdn4rit\nOKogiJghW3A6dWqGiT459K2J+iuZJ/ZdoENvsRtlV+STdlyr2IsFJ7ge1aTb61vd\n4IxjxzSAVQGHS3LjLLOkRqotRp0egEDIH5kX1p6BcfaquilxbbDcOvZRfBb4GTx1\nfqYbu9tgzmlnuXTV7n/SXKfX454OOpeypStt3kNcmYQc971feufbRmH02wdQU2E=\n=t/72\n-----END PGP SIGNATURE-----",
        "payload": "tree e594c4637752df8d8d80c726c96bc8e55e14dd1e\nparent be281d8a83ca8fe7cf785a4608d1a8954b193191\nparent fa472f330f40d4ffbc36fc8e89ef8db1ed0a0a87\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448533106 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448533111 +0100\n\nMerge pull request #7069\n\nfa472f3 [trivial] Fix -maxmempool InitError (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8a8e27a6a1901152822d59622f9aeb25a78a78d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f8a8e27a6a1901152822d59622f9aeb25a78a78d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8a8e27a6a1901152822d59622f9aeb25a78a78d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be281d8a83ca8fe7cf785a4608d1a8954b193191",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be281d8a83ca8fe7cf785a4608d1a8954b193191",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be281d8a83ca8fe7cf785a4608d1a8954b193191"
      },
      {
        "sha": "fa472f330f40d4ffbc36fc8e89ef8db1ed0a0a87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa472f330f40d4ffbc36fc8e89ef8db1ed0a0a87",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa472f330f40d4ffbc36fc8e89ef8db1ed0a0a87"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "953980c5b66e3eba1c4c634e47305832bce1fbfe",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8a8e27a6a1901152822d59622f9aeb25a78a78d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8a8e27a6a1901152822d59622f9aeb25a78a78d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f8a8e27a6a1901152822d59622f9aeb25a78a78d",
        "patch": "@@ -879,11 +879,11 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     fCheckBlockIndex = GetBoolArg(\"-checkblockindex\", chainparams.DefaultConsistencyChecks());\n     fCheckpointsEnabled = GetBoolArg(\"-checkpoints\", true);\n \n-    // -mempoollimit limits\n-    int64_t nMempoolSizeLimit = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n-    int64_t nMempoolDescendantSizeLimit = GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000;\n-    if (nMempoolSizeLimit < 0 || nMempoolSizeLimit < nMempoolDescendantSizeLimit * 40)\n-        return InitError(strprintf(_(\"-maxmempool must be at least %d MB\"), GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) / 25));\n+    // mempool limits\n+    int64_t nMempoolSizeMax = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    int64_t nMempoolSizeMin = GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n+    if (nMempoolSizeMax < 0 || nMempoolSizeMax < nMempoolSizeMin)\n+        return InitError(strprintf(_(\"-maxmempool must be at least %d MB\"), std::ceil(nMempoolSizeMin / 1000.0)));\n \n     // -par=0 means autodetect, but nScriptCheckThreads==0 means no concurrency\n     nScriptCheckThreads = GetArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS);"
      }
    ]
  },
  {
    "sha": "a9f3d3db5c0c8d1697998ed9b3e192ddbf9a31f4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOWYzZDNkYjVjMGM4ZDE2OTc5OThlZDliM2UxOTJkZGJmOWEzMWY0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-26T21:05:34Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-26T22:44:57Z"
      },
      "message": "Fix and improve relay from whitelisted peers\n\nThis makes sure that retransmits by a whitelisted peer also actually\nresult in a retransmit.\n\nFurther, this changes the logic to never relay in case we would assign\na DoS score, as we expect to get DoS banned ourselves as a result.",
      "tree": {
        "sha": "fcc6bce4bc12ff2ed22428f1599e85073f39876b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fcc6bce4bc12ff2ed22428f1599e85073f39876b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9f3d3db5c0c8d1697998ed9b3e192ddbf9a31f4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9f3d3db5c0c8d1697998ed9b3e192ddbf9a31f4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a9f3d3db5c0c8d1697998ed9b3e192ddbf9a31f4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9f3d3db5c0c8d1697998ed9b3e192ddbf9a31f4/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f8a8e27a6a1901152822d59622f9aeb25a78a78d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8a8e27a6a1901152822d59622f9aeb25a78a78d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f8a8e27a6a1901152822d59622f9aeb25a78a78d"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 14,
      "deletions": 11
    },
    "files": [
      {
        "sha": "6cb9f43c0e3862c1152a4468ead77dd91d6a460c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 11,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9f3d3db5c0c8d1697998ed9b3e192ddbf9a31f4/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9f3d3db5c0c8d1697998ed9b3e192ddbf9a31f4/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a9f3d3db5c0c8d1697998ed9b3e192ddbf9a31f4",
        "patch": "@@ -4421,11 +4421,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         mapAlreadyAskedFor.erase(inv);\n \n-        // Check for recently rejected (and do other quick existence checks)\n-        if (AlreadyHave(inv))\n-            return true;\n-\n-        if (AcceptToMemoryPool(mempool, state, tx, true, &fMissingInputs))\n+        if (!AlreadyHave(inv) && AcceptToMemoryPool(mempool, state, tx, true, &fMissingInputs))\n         {\n             mempool.check(pcoinsTip);\n             RelayTransaction(tx);\n@@ -4505,13 +4501,20 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n             if (pfrom->fWhitelisted && GetBoolArg(\"-whitelistalwaysrelay\", DEFAULT_WHITELISTALWAYSRELAY)) {\n                 // Always relay transactions received from whitelisted peers, even\n-                // if they were rejected from the mempool, allowing the node to\n-                // function as a gateway for nodes hidden behind it.\n+                // if they were already in the mempool or rejected from it due\n+                // to policy, allowing the node to function as a gateway for\n+                // nodes hidden behind it.\n                 //\n-                // FIXME: This includes invalid transactions, which means a\n-                // whitelisted peer could get us banned! We may want to change\n-                // that.\n-                RelayTransaction(tx);\n+                // Never relay transactions that we would assign a non-zero DoS\n+                // score for, as we expect peers to do the same with us in that\n+                // case.\n+                int nDoS = 0;\n+                if (!state.IsInvalid(nDoS) || nDoS == 0) {\n+                    LogPrintf(\"Force relaying tx %s from whitelisted peer=%d\\n\", tx.GetHash().ToString(), pfrom->id);\n+                    RelayTransaction(tx);\n+                } else {\n+                    LogPrintf(\"Not relaying invalid transaction %s from whitelisted peer=%d (%s)\\n\", tx.GetHash().ToString(), pfrom->id, FormatStateMessage(state));\n+                }\n             }\n         }\n         int nDoS = 0;"
      }
    ]
  },
  {
    "sha": "9a3e1a59dfed7cb0cf07a34f75d692280aecf2a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YTNlMWE1OWRmZWQ3Y2IwY2YwN2EzNGY3NWQ2OTIyODBhZWNmMmE2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-27T09:12:14Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-27T09:12:43Z"
      },
      "message": "Merge pull request #7058\n\nffacd27 zmq: prepend zmq to debug messages (Daniel Cousens)\n14075b1 init: add zmq to debug categories (Daniel Cousens)\ncdcd816 init: amend ZMQ flag names (Daniel Cousens)",
      "tree": {
        "sha": "494f7f027447f725e81f455a2ccf031a906ca1de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/494f7f027447f725e81f455a2ccf031a906ca1de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a3e1a59dfed7cb0cf07a34f75d692280aecf2a6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWWB6LAAoJEHSBCwEjRsmmyGQH/jW92gM+WO6Y2k5QWqRcV7Z5\nLyYZc9mVhGj3YszpRiNThYxaZV0Udme4MTIpxntlq1JKVlIooHBQkcWGXPSSxEHZ\nF+gEQNHtcy4aAfontbBTfNsl9n1yYZh/IGiFsoHy2m5Y/QVO2mmWNmbohWG0kPqc\n7FEqD17GYge2ENbghDiL8iCWvZIyUTojr4ubzYGsncKcMPS5RaCMcL5kNrEMHYQX\neD4qkcECkKvGNAEw+Rpk+PtlDJZPl31QYdwhaE5AOQAR+PMo24i/5vGI1FEeAhFk\nwq1EgLgjRHFCqxhEHqR6izgUpiL6ZYP8+s46EDEHO7XjWVThyu1kjrs7AHLNov0=\n=4ygs\n-----END PGP SIGNATURE-----",
        "payload": "tree 494f7f027447f725e81f455a2ccf031a906ca1de\nparent f8a8e27a6a1901152822d59622f9aeb25a78a78d\nparent ffacd27def73834bc15706191c2ed9cb99f565a6\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448615534 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448615563 +0100\n\nMerge pull request #7058\n\nffacd27 zmq: prepend zmq to debug messages (Daniel Cousens)\n14075b1 init: add zmq to debug categories (Daniel Cousens)\ncdcd816 init: amend ZMQ flag names (Daniel Cousens)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a3e1a59dfed7cb0cf07a34f75d692280aecf2a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9a3e1a59dfed7cb0cf07a34f75d692280aecf2a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a3e1a59dfed7cb0cf07a34f75d692280aecf2a6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f8a8e27a6a1901152822d59622f9aeb25a78a78d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8a8e27a6a1901152822d59622f9aeb25a78a78d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f8a8e27a6a1901152822d59622f9aeb25a78a78d"
      },
      {
        "sha": "ffacd27def73834bc15706191c2ed9cb99f565a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffacd27def73834bc15706191c2ed9cb99f565a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ffacd27def73834bc15706191c2ed9cb99f565a6"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "3028802b93552da239b060cb72775def1bb35059",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a3e1a59dfed7cb0cf07a34f75d692280aecf2a6/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a3e1a59dfed7cb0cf07a34f75d692280aecf2a6/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9a3e1a59dfed7cb0cf07a34f75d692280aecf2a6",
        "patch": "@@ -412,9 +412,9 @@ std::string HelpMessage(HelpMessageMode mode)\n #if ENABLE_ZMQ\n     strUsage += HelpMessageGroup(_(\"ZeroMQ notification options:\"));\n     strUsage += HelpMessageOpt(\"-zmqpubhashblock=<address>\", _(\"Enable publish hash block in <address>\"));\n-    strUsage += HelpMessageOpt(\"-zmqpubhashtransaction=<address>\", _(\"Enable publish hash transaction in <address>\"));\n+    strUsage += HelpMessageOpt(\"-zmqpubhashtx=<address>\", _(\"Enable publish hash transaction in <address>\"));\n     strUsage += HelpMessageOpt(\"-zmqpubrawblock=<address>\", _(\"Enable publish raw block in <address>\"));\n-    strUsage += HelpMessageOpt(\"-zmqpubrawtransaction=<address>\", _(\"Enable publish raw transaction in <address>\"));\n+    strUsage += HelpMessageOpt(\"-zmqpubrawtx=<address>\", _(\"Enable publish raw transaction in <address>\"));\n #endif\n \n     strUsage += HelpMessageGroup(_(\"Debugging/Testing options:\"));\n@@ -437,7 +437,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT));\n         strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n     }\n-    string debugCategories = \"addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, mempoolrej, net, proxy, prune, http, libevent\"; // Don't translate these and qt below\n+    string debugCategories = \"addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, mempoolrej, net, proxy, prune, http, libevent, zmq\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n@@ -834,7 +834,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n             LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -walletbroadcast=0\\n\", __func__);\n #endif\n     }\n-    \n+\n     // Make sure enough file descriptors are available\n     int nBind = std::max((int)mapArgs.count(\"-bind\") + (int)mapArgs.count(\"-whitebind\"), 1);\n     int nUserMaxConnections = GetArg(\"-maxconnections\", DEFAULT_MAX_PEER_CONNECTIONS);"
      },
      {
        "sha": "be2aec7d159f143380369ac3bf447cb8c28801a0",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a3e1a59dfed7cb0cf07a34f75d692280aecf2a6/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a3e1a59dfed7cb0cf07a34f75d692280aecf2a6/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=9a3e1a59dfed7cb0cf07a34f75d692280aecf2a6",
        "patch": "@@ -12,7 +12,7 @@\n \n void zmqError(const char *str)\n {\n-    LogPrint(\"zmq\", \"Error: %s, errno=%s\\n\", str, zmq_strerror(errno));\n+    LogPrint(\"zmq\", \"zmq: Error: %s, errno=%s\\n\", str, zmq_strerror(errno));\n }\n \n CZMQNotificationInterface::CZMQNotificationInterface() : pcontext(NULL)\n@@ -72,7 +72,7 @@ CZMQNotificationInterface* CZMQNotificationInterface::CreateWithArguments(const\n // Called at startup to conditionally set up ZMQ socket(s)\n bool CZMQNotificationInterface::Initialize()\n {\n-    LogPrint(\"zmq\", \"Initialize notification interface\\n\");\n+    LogPrint(\"zmq\", \"zmq: Initialize notification interface\\n\");\n     assert(!pcontext);\n \n     pcontext = zmq_init(1);\n@@ -110,7 +110,7 @@ bool CZMQNotificationInterface::Initialize()\n // Called during shutdown sequence\n void CZMQNotificationInterface::Shutdown()\n {\n-    LogPrint(\"zmq\", \"Shutdown notification interface\\n\");\n+    LogPrint(\"zmq\", \"zmq: Shutdown notification interface\\n\");\n     if (pcontext)\n     {\n         for (std::list<CZMQAbstractNotifier*>::iterator i=notifiers.begin(); i!=notifiers.end(); ++i)"
      },
      {
        "sha": "ddc8fe93e95a34591a9f08c6fb67bc11bda595d5",
        "filename": "src/zmq/zmqpublishnotifier.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a3e1a59dfed7cb0cf07a34f75d692280aecf2a6/src/zmq/zmqpublishnotifier.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a3e1a59dfed7cb0cf07a34f75d692280aecf2a6/src/zmq/zmqpublishnotifier.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqpublishnotifier.cpp?ref=9a3e1a59dfed7cb0cf07a34f75d692280aecf2a6",
        "patch": "@@ -78,7 +78,7 @@ bool CZMQAbstractPublishNotifier::Initialize(void *pcontext)\n     }\n     else\n     {\n-        LogPrint(\"zmq\", \"  Reuse socket for address %s\\n\", address);\n+        LogPrint(\"zmq\", \"zmq: Reusing socket for address %s\\n\", address);\n \n         psocket = i->second->psocket;\n         mapPublishNotifiers.insert(std::make_pair(address, this));\n@@ -120,7 +120,7 @@ void CZMQAbstractPublishNotifier::Shutdown()\n bool CZMQPublishHashBlockNotifier::NotifyBlock(const CBlockIndex *pindex)\n {\n     uint256 hash = pindex->GetBlockHash();\n-    LogPrint(\"zmq\", \"Publish hash block %s\\n\", hash.GetHex());\n+    LogPrint(\"zmq\", \"zmq: Publish hashblock %s\\n\", hash.GetHex());\n     char data[32];\n     for (unsigned int i = 0; i < 32; i++)\n         data[31 - i] = hash.begin()[i];\n@@ -131,7 +131,7 @@ bool CZMQPublishHashBlockNotifier::NotifyBlock(const CBlockIndex *pindex)\n bool CZMQPublishHashTransactionNotifier::NotifyTransaction(const CTransaction &transaction)\n {\n     uint256 hash = transaction.GetHash();\n-    LogPrint(\"zmq\", \"Publish hash transaction %s\\n\", hash.GetHex());\n+    LogPrint(\"zmq\", \"zmq: Publish hashtx %s\\n\", hash.GetHex());\n     char data[32];\n     for (unsigned int i = 0; i < 32; i++)\n         data[31 - i] = hash.begin()[i];\n@@ -141,7 +141,7 @@ bool CZMQPublishHashTransactionNotifier::NotifyTransaction(const CTransaction &t\n \n bool CZMQPublishRawBlockNotifier::NotifyBlock(const CBlockIndex *pindex)\n {\n-    LogPrint(\"zmq\", \"Publish raw block %s\\n\", pindex->GetBlockHash().GetHex());\n+    LogPrint(\"zmq\", \"zmq: Publish rawblock %s\\n\", pindex->GetBlockHash().GetHex());\n \n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n@@ -164,7 +164,7 @@ bool CZMQPublishRawBlockNotifier::NotifyBlock(const CBlockIndex *pindex)\n bool CZMQPublishRawTransactionNotifier::NotifyTransaction(const CTransaction &transaction)\n {\n     uint256 hash = transaction.GetHash();\n-    LogPrint(\"zmq\", \"Publish raw transaction %s\\n\", hash.GetHex());\n+    LogPrint(\"zmq\", \"zmq: Publish rawtx %s\\n\", hash.GetHex());\n     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n     ss << transaction;\n     int rc = zmq_send_multipart(psocket, \"rawtx\", 5, &(*ss.begin()), ss.size(), 0);"
      }
    ]
  },
  {
    "sha": "05d591839fe1fefb0cf359083bce87cb128f75a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNWQ1OTE4MzlmZTFmZWZiMGNmMzU5MDgzYmNlODdjYjEyOGY3NWE2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-27T11:05:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-27T11:44:00Z"
      },
      "message": "Merge pull request #5967\n\n072e2f8 Alter assumptions in CCoinsViewCache::BatchWrite (Alex Morcos)",
      "tree": {
        "sha": "64370546aae45a75f7af5060d565eef97dbc6bcb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/64370546aae45a75f7af5060d565eef97dbc6bcb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/05d591839fe1fefb0cf359083bce87cb128f75a6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWWEIAAAoJEHSBCwEjRsmm6XoIALpruriQ+eicaUhgdEDCse2y\n28mYesKHAYDWrH6G+T8uD3tiRCRR6FAJVcDveIueajOrkQaqcpwNdiqW1hPZV271\n4mKGPRDHV0sFJaEvY5zfK4r7QhrHMlagCGn5VP/qL4vObTnnoDbdU8cmzlCl8SWI\n8p5DuVi3BhieAHK2JfRCNQIuSHIlYvHIgKRYfJ8TBLPW4niH3+/fRdWBENlLWJ6o\nZWyPTEkNJR31xw4f4O1d4qugPmLnJSmtOAEqoTgrkhifckLtciIHRd8J0vn9/Avs\ntG23aB4Q5cHo+Zht0TlD+G6Mlg7CixM8ssKFa9LiyEsKhbYEdM2jTqTqazKONcE=\n=BRix\n-----END PGP SIGNATURE-----",
        "payload": "tree 64370546aae45a75f7af5060d565eef97dbc6bcb\nparent 9a3e1a59dfed7cb0cf07a34f75d692280aecf2a6\nparent 072e2f864445bc6ef3b390255f08c9e8bec2ea94\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448622326 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448624640 +0100\n\nMerge pull request #5967\n\n072e2f8 Alter assumptions in CCoinsViewCache::BatchWrite (Alex Morcos)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05d591839fe1fefb0cf359083bce87cb128f75a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/05d591839fe1fefb0cf359083bce87cb128f75a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05d591839fe1fefb0cf359083bce87cb128f75a6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9a3e1a59dfed7cb0cf07a34f75d692280aecf2a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a3e1a59dfed7cb0cf07a34f75d692280aecf2a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9a3e1a59dfed7cb0cf07a34f75d692280aecf2a6"
      },
      {
        "sha": "072e2f864445bc6ef3b390255f08c9e8bec2ea94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/072e2f864445bc6ef3b390255f08c9e8bec2ea94",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/072e2f864445bc6ef3b390255f08c9e8bec2ea94"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 28,
      "deletions": 7
    },
    "files": [
      {
        "sha": "f0ea5c0459067ec43a5e507b675b1da23ffc959b",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 7,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05d591839fe1fefb0cf359083bce87cb128f75a6/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05d591839fe1fefb0cf359083bce87cb128f75a6/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=05d591839fe1fefb0cf359083bce87cb128f75a6",
        "patch": "@@ -160,18 +160,23 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n         if (it->second.flags & CCoinsCacheEntry::DIRTY) { // Ignore non-dirty entries (optimization).\n             CCoinsMap::iterator itUs = cacheCoins.find(it->first);\n             if (itUs == cacheCoins.end()) {\n-                if (!it->second.coins.IsPruned()) {\n-                    // The parent cache does not have an entry, while the child\n-                    // cache does have (a non-pruned) one. Move the data up, and\n-                    // mark it as fresh (if the grandparent did have it, we\n-                    // would have pulled it in at first GetCoins).\n-                    assert(it->second.flags & CCoinsCacheEntry::FRESH);\n+                // The parent cache does not have an entry, while the child does\n+                // We can ignore it if it's both FRESH and pruned in the child\n+                if (!(it->second.flags & CCoinsCacheEntry::FRESH && it->second.coins.IsPruned())) {\n+                    // Otherwise we will need to create it in the parent\n+                    // and move the data up and mark it as dirty\n                     CCoinsCacheEntry& entry = cacheCoins[it->first];\n                     entry.coins.swap(it->second.coins);\n                     cachedCoinsUsage += entry.coins.DynamicMemoryUsage();\n-                    entry.flags = CCoinsCacheEntry::DIRTY | CCoinsCacheEntry::FRESH;\n+                    entry.flags = CCoinsCacheEntry::DIRTY;\n+                    // We can mark it FRESH in the parent if it was FRESH in the child\n+                    // Otherwise it might have just been flushed from the parent's cache\n+                    // and already exist in the grandparent\n+                    if (it->second.flags & CCoinsCacheEntry::FRESH)\n+                        entry.flags |= CCoinsCacheEntry::FRESH;\n                 }\n             } else {\n+                // Found the entry in the parent cache\n                 if ((itUs->second.flags & CCoinsCacheEntry::FRESH) && it->second.coins.IsPruned()) {\n                     // The grandparent does not have an entry, and the child is\n                     // modified and being pruned. This means we can just delete"
      },
      {
        "sha": "9489a19f63041bd7ac72833ad2df71589ab53ffd",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05d591839fe1fefb0cf359083bce87cb128f75a6/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05d591839fe1fefb0cf359083bce87cb128f75a6/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=05d591839fe1fefb0cf359083bce87cb128f75a6",
        "patch": "@@ -164,14 +164,23 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n             }\n         }\n \n+        if (insecure_rand() % 100 == 0) {\n+            // Every 100 iterations, flush an intermediate cache\n+            if (stack.size() > 1 && insecure_rand() % 2 == 0) {\n+                unsigned int flushIndex = insecure_rand() % (stack.size() - 1);\n+                stack[flushIndex]->Flush();\n+            }\n+        }\n         if (insecure_rand() % 100 == 0) {\n             // Every 100 iterations, change the cache stack.\n             if (stack.size() > 0 && insecure_rand() % 2 == 0) {\n+                //Remove the top cache\n                 stack.back()->Flush();\n                 delete stack.back();\n                 stack.pop_back();\n             }\n             if (stack.size() == 0 || (stack.size() < 4 && insecure_rand() % 2)) {\n+                //Add a new cache\n                 CCoinsView* tip = &base;\n                 if (stack.size() > 0) {\n                     tip = stack.back();\n@@ -304,6 +313,13 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n             }\n         }\n \n+        if (insecure_rand() % 100 == 0) {\n+            // Every 100 iterations, flush an intermediate cache\n+            if (stack.size() > 1 && insecure_rand() % 2 == 0) {\n+                unsigned int flushIndex = insecure_rand() % (stack.size() - 1);\n+                stack[flushIndex]->Flush();\n+            }\n+        }\n         if (insecure_rand() % 100 == 0) {\n             // Every 100 iterations, change the cache stack.\n             if (stack.size() > 0 && insecure_rand() % 2 == 0) {"
      }
    ]
  },
  {
    "sha": "e92377fa7f9a34a6e6474a1d03d6402856f90f38",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOTIzNzdmYTdmOWEzNGE2ZTY0NzRhMWQwM2Q2NDAyODU2ZjkwZjM4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-27T11:45:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-27T11:59:37Z"
      },
      "message": "Merge pull request #6134\n\ne304432 Pass reference to estimateSmartFee and cleanup whitespace (Suhas Daftuar)\n56106a3 Expose RPC calls for estimatesmart functions (Alex Morcos)\ne93a236 add estimateSmartFee to the unit test (Alex Morcos)\n6303051 EstimateSmart functions consider mempool min fee (Alex Morcos)\nf22ac4a Increase success threshold for fee estimation to 95% (Alex Morcos)\n4fe2823 Change wallet and GUI code to use new smart fee estimation calls. (Alex Morcos)\n22eca7d Add smart fee estimation functions (Alex Morcos)",
      "tree": {
        "sha": "bddaeed46e5fcf4a79256ce05a2d80f92e93c756",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bddaeed46e5fcf4a79256ce05a2d80f92e93c756"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e92377fa7f9a34a6e6474a1d03d6402856f90f38",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWWEWpAAoJEHSBCwEjRsmm35gIAJFI5CuoFkZ+sq+DI0cbSDYj\nFMYMzGiLsKZle8HaxEStn1/2Qwcd3u/QbzhThB98MwWzqeWWV0e3Djt+8oiMxynj\nYJMvywv6/2lMdKMjY9jX85/BM1835xsOac+4PJHV07ocC+Nr91ifmpbacwld85kM\nXsU7wYGgGnI1kVZjToaqxXipAJ8A72PQ7YOS2GIPKhqcaHnoPtnpz1pEvu9lDKFu\nDho2ZZJHZ1Ti/pfoF1gmGL3x/m94zc2v5bnYu9V5uAOBH13pCPlrlBLw+2Jbh5hC\nK7tNakO4vrlF5J5S6GEwEbV1soba7On9l37DvPYe3Iz7x3fh1/2psFOjdvfQ9Rg=\n=ExLo\n-----END PGP SIGNATURE-----",
        "payload": "tree bddaeed46e5fcf4a79256ce05a2d80f92e93c756\nparent 05d591839fe1fefb0cf359083bce87cb128f75a6\nparent e30443244a7a50f2db70e593ec8a57e5086db3d9\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448624730 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448625577 +0100\n\nMerge pull request #6134\n\ne304432 Pass reference to estimateSmartFee and cleanup whitespace (Suhas Daftuar)\n56106a3 Expose RPC calls for estimatesmart functions (Alex Morcos)\ne93a236 add estimateSmartFee to the unit test (Alex Morcos)\n6303051 EstimateSmart functions consider mempool min fee (Alex Morcos)\nf22ac4a Increase success threshold for fee estimation to 95% (Alex Morcos)\n4fe2823 Change wallet and GUI code to use new smart fee estimation calls. (Alex Morcos)\n22eca7d Add smart fee estimation functions (Alex Morcos)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e92377fa7f9a34a6e6474a1d03d6402856f90f38",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e92377fa7f9a34a6e6474a1d03d6402856f90f38",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e92377fa7f9a34a6e6474a1d03d6402856f90f38/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "05d591839fe1fefb0cf359083bce87cb128f75a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05d591839fe1fefb0cf359083bce87cb128f75a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/05d591839fe1fefb0cf359083bce87cb128f75a6"
      },
      {
        "sha": "e30443244a7a50f2db70e593ec8a57e5086db3d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e30443244a7a50f2db70e593ec8a57e5086db3d9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e30443244a7a50f2db70e593ec8a57e5086db3d9"
      }
    ],
    "stats": {
      "total": 327,
      "additions": 261,
      "deletions": 66
    },
    "files": [
      {
        "sha": "ecfffc1b45b432eefcb0e66bc3f3db7b8e8a44b0",
        "filename": "qa/rpc-tests/smartfees.py",
        "status": "modified",
        "additions": 30,
        "deletions": 22,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e92377fa7f9a34a6e6474a1d03d6402856f90f38/qa/rpc-tests/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e92377fa7f9a34a6e6474a1d03d6402856f90f38/qa/rpc-tests/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/smartfees.py?ref=e92377fa7f9a34a6e6474a1d03d6402856f90f38",
        "patch": "@@ -120,15 +120,26 @@ def check_estimates(node, fees_seen, max_invalid, print_estimates = True):\n         last_e = e\n     valid_estimate = False\n     invalid_estimates = 0\n-    for e in all_estimates:\n+    for i,e in enumerate(all_estimates): # estimate is for i+1\n         if e >= 0:\n             valid_estimate = True\n+            # estimatesmartfee should return the same result\n+            assert_equal(node.estimatesmartfee(i+1)[\"feerate\"], e)\n+\n         else:\n             invalid_estimates += 1\n-        # Once we're at a high enough confirmation count that we can give an estimate\n-        # We should have estimates for all higher confirmation counts\n-        if valid_estimate and e < 0:\n-            raise AssertionError(\"Invalid estimate appears at higher confirm count than valid estimate\")\n+\n+            # estimatesmartfee should still be valid\n+            approx_estimate = node.estimatesmartfee(i+1)[\"feerate\"]\n+            answer_found = node.estimatesmartfee(i+1)[\"blocks\"]\n+            assert(approx_estimate > 0)\n+            assert(answer_found > i+1)\n+\n+            # Once we're at a high enough confirmation count that we can give an estimate\n+            # We should have estimates for all higher confirmation counts\n+            if valid_estimate:\n+                raise AssertionError(\"Invalid estimate appears at higher confirm count than valid estimate\")\n+\n     # Check on the expected number of different confirmation counts\n     # that we might not have valid estimates for\n     if invalid_estimates > max_invalid:\n@@ -184,13 +195,13 @@ def setup_network(self):\n         # NOTE: the CreateNewBlock code starts counting block size at 1,000 bytes,\n         # (17k is room enough for 110 or so transactions)\n         self.nodes.append(start_node(1, self.options.tmpdir,\n-                                     [\"-blockprioritysize=1500\", \"-blockmaxsize=18000\",\n+                                     [\"-blockprioritysize=1500\", \"-blockmaxsize=17000\",\n                                       \"-maxorphantx=1000\", \"-relaypriority=0\", \"-debug=estimatefee\"]))\n         connect_nodes(self.nodes[1], 0)\n \n         # Node2 is a stingy miner, that\n-        # produces too small blocks (room for only 70 or so transactions)\n-        node2args = [\"-blockprioritysize=0\", \"-blockmaxsize=12000\", \"-maxorphantx=1000\", \"-relaypriority=0\"]\n+        # produces too small blocks (room for only 55 or so transactions)\n+        node2args = [\"-blockprioritysize=0\", \"-blockmaxsize=8000\", \"-maxorphantx=1000\", \"-relaypriority=0\"]\n \n         self.nodes.append(start_node(2, self.options.tmpdir, node2args))\n         connect_nodes(self.nodes[0], 2)\n@@ -229,22 +240,19 @@ def run_test(self):\n         self.fees_per_kb = []\n         self.memutxo = []\n         self.confutxo = self.txouts # Start with the set of confirmed txouts after splitting\n-        print(\"Checking estimates for 1/2/3/6/15/25 blocks\")\n-        print(\"Creating transactions and mining them with a huge block size\")\n-        # Create transactions and mine 20 big blocks with node 0 such that the mempool is always emptied\n-        self.transact_and_mine(30, self.nodes[0])\n-        check_estimates(self.nodes[1], self.fees_per_kb, 1)\n+        print(\"Will output estimates for 1/2/3/6/15/25 blocks\")\n \n-        print(\"Creating transactions and mining them with a block size that can't keep up\")\n-        # Create transactions and mine 30 small blocks with node 2, but create txs faster than we can mine\n-        self.transact_and_mine(20, self.nodes[2])\n-        check_estimates(self.nodes[1], self.fees_per_kb, 3)\n+        for i in xrange(2):\n+            print(\"Creating transactions and mining them with a block size that can't keep up\")\n+            # Create transactions and mine 10 small blocks with node 2, but create txs faster than we can mine\n+            self.transact_and_mine(10, self.nodes[2])\n+            check_estimates(self.nodes[1], self.fees_per_kb, 14)\n \n-        print(\"Creating transactions and mining them at a block size that is just big enough\")\n-        # Generate transactions while mining 40 more blocks, this time with node1\n-        # which mines blocks with capacity just above the rate that transactions are being created\n-        self.transact_and_mine(40, self.nodes[1])\n-        check_estimates(self.nodes[1], self.fees_per_kb, 2)\n+            print(\"Creating transactions and mining them at a block size that is just big enough\")\n+            # Generate transactions while mining 10 more blocks, this time with node1\n+            # which mines blocks with capacity just above the rate that transactions are being created\n+            self.transact_and_mine(10, self.nodes[1])\n+            check_estimates(self.nodes[1], self.fees_per_kb, 2)\n \n         # Finish by mining a normal-sized block:\n         while len(self.nodes[1].getrawmempool()) > 0:"
      },
      {
        "sha": "347624c520d257617736f48b50e05e88db34c51c",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e92377fa7f9a34a6e6474a1d03d6402856f90f38/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e92377fa7f9a34a6e6474a1d03d6402856f90f38/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=e92377fa7f9a34a6e6474a1d03d6402856f90f38",
        "patch": "@@ -56,8 +56,6 @@ static const unsigned int DEFAULT_ANCESTOR_SIZE_LIMIT = 101;\n static const unsigned int DEFAULT_DESCENDANT_LIMIT = 25;\n /** Default for -limitdescendantsize, maximum kilobytes of in-mempool descendants */\n static const unsigned int DEFAULT_DESCENDANT_SIZE_LIMIT = 101;\n-/** Default for -maxmempool, maximum megabytes of mempool memory usage */\n-static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;\n /** Default for -mempoolexpiry, expiration time for mempool transactions in hours */\n static const unsigned int DEFAULT_MEMPOOL_EXPIRY = 72;\n /** The maximum size of a blk?????.dat file (since 0.8) */"
      },
      {
        "sha": "980ecf10dfc96f600345e8760e2e071cf38a89e2",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e92377fa7f9a34a6e6474a1d03d6402856f90f38/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e92377fa7f9a34a6e6474a1d03d6402856f90f38/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=e92377fa7f9a34a6e6474a1d03d6402856f90f38",
        "patch": "@@ -4,6 +4,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"policy/fees.h\"\n+#include \"policy/policy.h\"\n \n #include \"amount.h\"\n #include \"primitives/transaction.h\"\n@@ -504,6 +505,33 @@ CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget)\n     return CFeeRate(median);\n }\n \n+CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool)\n+{\n+    if (answerFoundAtTarget)\n+        *answerFoundAtTarget = confTarget;\n+    // Return failure if trying to analyze a target we're not tracking\n+    if (confTarget <= 0 || (unsigned int)confTarget > feeStats.GetMaxConfirms())\n+        return CFeeRate(0);\n+\n+    double median = -1;\n+    while (median < 0 && (unsigned int)confTarget <= feeStats.GetMaxConfirms()) {\n+        median = feeStats.EstimateMedianVal(confTarget++, SUFFICIENT_FEETXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n+    }\n+\n+    if (answerFoundAtTarget)\n+        *answerFoundAtTarget = confTarget - 1;\n+\n+    // If mempool is limiting txs , return at least the min fee from the mempool\n+    CAmount minPoolFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n+    if (minPoolFee > 0 && minPoolFee > median)\n+        return CFeeRate(minPoolFee);\n+\n+    if (median < 0)\n+        return CFeeRate(0);\n+\n+    return CFeeRate(median);\n+}\n+\n double CBlockPolicyEstimator::estimatePriority(int confTarget)\n {\n     // Return failure if trying to analyze a target we're not tracking\n@@ -513,6 +541,30 @@ double CBlockPolicyEstimator::estimatePriority(int confTarget)\n     return priStats.EstimateMedianVal(confTarget, SUFFICIENT_PRITXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n }\n \n+double CBlockPolicyEstimator::estimateSmartPriority(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool)\n+{\n+    if (answerFoundAtTarget)\n+        *answerFoundAtTarget = confTarget;\n+    // Return failure if trying to analyze a target we're not tracking\n+    if (confTarget <= 0 || (unsigned int)confTarget > priStats.GetMaxConfirms())\n+        return -1;\n+\n+    // If mempool is limiting txs, no priority txs are allowed\n+    CAmount minPoolFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n+    if (minPoolFee > 0)\n+        return INF_PRIORITY;\n+\n+    double median = -1;\n+    while (median < 0 && (unsigned int)confTarget <= priStats.GetMaxConfirms()) {\n+        median = priStats.EstimateMedianVal(confTarget++, SUFFICIENT_PRITXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n+    }\n+\n+    if (answerFoundAtTarget)\n+        *answerFoundAtTarget = confTarget - 1;\n+\n+    return median;\n+}\n+\n void CBlockPolicyEstimator::Write(CAutoFile& fileout)\n {\n     fileout << nBestSeenHeight;"
      },
      {
        "sha": "7a293267d42d0c33149d533addb3343844fd2889",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 15,
        "deletions": 2,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e92377fa7f9a34a6e6474a1d03d6402856f90f38/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e92377fa7f9a34a6e6474a1d03d6402856f90f38/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=e92377fa7f9a34a6e6474a1d03d6402856f90f38",
        "patch": "@@ -15,6 +15,7 @@\n class CAutoFile;\n class CFeeRate;\n class CTxMemPoolEntry;\n+class CTxMemPool;\n \n /** \\class CBlockPolicyEstimator\n  * The BlockPolicyEstimator is used for estimating the fee or priority needed\n@@ -182,8 +183,8 @@ static const unsigned int MAX_BLOCK_CONFIRMS = 25;\n /** Decay of .998 is a half-life of 346 blocks or about 2.4 days */\n static const double DEFAULT_DECAY = .998;\n \n-/** Require greater than 85% of X fee transactions to be confirmed within Y blocks for X to be big enough */\n-static const double MIN_SUCCESS_PCT = .85;\n+/** Require greater than 95% of X fee transactions to be confirmed within Y blocks for X to be big enough */\n+static const double MIN_SUCCESS_PCT = .95;\n static const double UNLIKELY_PCT = .5;\n \n /** Require an avg of 1 tx in the combined fee bucket per block to have stat significance */\n@@ -242,9 +243,21 @@ class CBlockPolicyEstimator\n     /** Return a fee estimate */\n     CFeeRate estimateFee(int confTarget);\n \n+    /** Estimate fee rate needed to get be included in a block within\n+     *  confTarget blocks. If no answer can be given at confTarget, return an\n+     *  estimate at the lowest target where one can be given.\n+     */\n+    CFeeRate estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool);\n+\n     /** Return a priority estimate */\n     double estimatePriority(int confTarget);\n \n+    /** Estimate priority needed to get be included in a block within\n+     *  confTarget blocks. If no answer can be given at confTarget, return an\n+     *  estimate at the lowest target where one can be given.\n+     */\n+    double estimateSmartPriority(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool);\n+\n     /** Write estimation data to a file */\n     void Write(CAutoFile& fileout);\n "
      },
      {
        "sha": "c8d2c1a924df1a0cd15ba669fdfc6669e9da1542",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e92377fa7f9a34a6e6474a1d03d6402856f90f38/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e92377fa7f9a34a6e6474a1d03d6402856f90f38/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=e92377fa7f9a34a6e6474a1d03d6402856f90f38",
        "patch": "@@ -25,6 +25,8 @@ static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n static const unsigned int MAX_P2SH_SIGOPS = 15;\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static const unsigned int MAX_STANDARD_TX_SIGOPS = MAX_BLOCK_SIGOPS/5;\n+/** Default for -maxmempool, maximum megabytes of mempool memory usage */\n+static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;\n /**\n  * Standard script verification flags that standard transactions will comply\n  * with. However scripts violating these flags may still be present in valid"
      },
      {
        "sha": "cbc41f3416ef780c9f5fc57799bda7a41fdefbd7",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e92377fa7f9a34a6e6474a1d03d6402856f90f38/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e92377fa7f9a34a6e6474a1d03d6402856f90f38/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=e92377fa7f9a34a6e6474a1d03d6402856f90f38",
        "patch": "@@ -538,7 +538,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         nBytes = nBytesInputs + ((CoinControlDialog::payAmounts.size() > 0 ? CoinControlDialog::payAmounts.size() + 1 : 2) * 34) + 10; // always assume +1 output for change here\n \n         // Priority\n-        double mempoolEstimatePriority = mempool.estimatePriority(nTxConfirmTarget);\n+        double mempoolEstimatePriority = mempool.estimateSmartPriority(nTxConfirmTarget);\n         dPriority = dPriorityInputs / (nBytes - nBytesInputs + (nQuantityUncompressed * 29)); // 29 = 180 - 151 (uncompressed public keys are over the limit. max 151 bytes of the input are ignored for priority)\n         sPriorityLabel = CoinControlDialog::getPriorityLabel(dPriority, mempoolEstimatePriority);\n \n@@ -550,10 +550,8 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         // Fee\n         nPayFee = CWallet::GetMinimumFee(nBytes, nTxConfirmTarget, mempool);\n \n-        // Allow free?\n-        double dPriorityNeeded = mempoolEstimatePriority;\n-        if (dPriorityNeeded <= 0)\n-            dPriorityNeeded = AllowFreeThreshold(); // not enough data, back to hard-coded\n+        // Allow free? (require at least hard-coded threshold and default to that if no estimate)\n+        double dPriorityNeeded = std::max(mempoolEstimatePriority, AllowFreeThreshold());\n         fAllowFree = (dPriority >= dPriorityNeeded);\n \n         if (fSendFreeTransactions)\n@@ -649,8 +647,9 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     double dFeeVary;\n     if (payTxFee.GetFeePerK() > 0)\n         dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), payTxFee.GetFeePerK()) / 1000;\n-    else\n-        dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), mempool.estimateFee(nTxConfirmTarget).GetFeePerK()) / 1000;\n+    else {\n+        dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), mempool.estimateSmartFee(nTxConfirmTarget).GetFeePerK()) / 1000;\n+    }\n     QString toolTip4 = tr(\"Can vary +/- %1 satoshi(s) per input.\").arg(dFeeVary);\n \n     l3->setToolTip(toolTip4);\n@@ -686,7 +685,7 @@ void CoinControlDialog::updateView()\n     QFlags<Qt::ItemFlag> flgTristate = Qt::ItemIsSelectable | Qt::ItemIsEnabled | Qt::ItemIsUserCheckable | Qt::ItemIsTristate;\n \n     int nDisplayUnit = model->getOptionsModel()->getDisplayUnit();\n-    double mempoolEstimatePriority = mempool.estimatePriority(nTxConfirmTarget);\n+    double mempoolEstimatePriority = mempool.estimateSmartPriority(nTxConfirmTarget);\n \n     std::map<QString, std::vector<COutput> > mapCoins;\n     model->listCoins(mapCoins);"
      },
      {
        "sha": "7b714be5b1cb6c64b32bf8be03b26d56ff1374c7",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e92377fa7f9a34a6e6474a1d03d6402856f90f38/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e92377fa7f9a34a6e6474a1d03d6402856f90f38/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=e92377fa7f9a34a6e6474a1d03d6402856f90f38",
        "patch": "@@ -633,7 +633,8 @@ void SendCoinsDialog::updateSmartFeeLabel()\n         return;\n \n     int nBlocksToConfirm = defaultConfirmTarget - ui->sliderSmartFee->value();\n-    CFeeRate feeRate = mempool.estimateFee(nBlocksToConfirm);\n+    int estimateFoundAtBlocks = nBlocksToConfirm;\n+    CFeeRate feeRate = mempool.estimateSmartFee(nBlocksToConfirm, &estimateFoundAtBlocks);\n     if (feeRate <= CFeeRate(0)) // not enough data => minfee\n     {\n         ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), CWallet::GetRequiredFee(1000)) + \"/kB\");\n@@ -644,7 +645,7 @@ void SendCoinsDialog::updateSmartFeeLabel()\n     {\n         ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), feeRate.GetFeePerK()) + \"/kB\");\n         ui->labelSmartFee2->hide();\n-        ui->labelFeeEstimation->setText(tr(\"Estimated to begin confirmation within %n block(s).\", \"\", nBlocksToConfirm));\n+        ui->labelFeeEstimation->setText(tr(\"Estimated to begin confirmation within %n block(s).\", \"\", estimateFoundAtBlocks));\n     }\n \n     updateFeeMinimizedLabel();"
      },
      {
        "sha": "c80838e1f1d59471a691aea9040ab20eec2c16db",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e92377fa7f9a34a6e6474a1d03d6402856f90f38/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e92377fa7f9a34a6e6474a1d03d6402856f90f38/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=e92377fa7f9a34a6e6474a1d03d6402856f90f38",
        "patch": "@@ -10,6 +10,7 @@\n #include \"coins.h\"\n #include \"consensus/validation.h\"\n #include \"main.h\"\n+#include \"policy/policy.h\"\n #include \"primitives/transaction.h\"\n #include \"rpcserver.h\"\n #include \"streams.h\""
      },
      {
        "sha": "cab5819017e9b897b4a8c61c01462ae6eb3bdf6a",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e92377fa7f9a34a6e6474a1d03d6402856f90f38/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e92377fa7f9a34a6e6474a1d03d6402856f90f38/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=e92377fa7f9a34a6e6474a1d03d6402856f90f38",
        "patch": "@@ -96,6 +96,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getrawmempool\", 0 },\n     { \"estimatefee\", 0 },\n     { \"estimatepriority\", 0 },\n+    { \"estimatesmartfee\", 0 },\n+    { \"estimatesmartpriority\", 0 },\n     { \"prioritisetransaction\", 1 },\n     { \"prioritisetransaction\", 2 },\n     { \"setban\", 2 },"
      },
      {
        "sha": "19b031b86059d83f442ef1911618a1dbd9da25df",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 72,
        "deletions": 0,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e92377fa7f9a34a6e6474a1d03d6402856f90f38/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e92377fa7f9a34a6e6474a1d03d6402856f90f38/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=e92377fa7f9a34a6e6474a1d03d6402856f90f38",
        "patch": "@@ -726,3 +726,75 @@ UniValue estimatepriority(const UniValue& params, bool fHelp)\n \n     return mempool.estimatePriority(nBlocks);\n }\n+\n+UniValue estimatesmartfee(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"estimatesmartfee nblocks\\n\"\n+            \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n+            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n+            \"confirmation within nblocks blocks if possible and return the number of blocks\\n\"\n+            \"for which the estimate is valid.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. nblocks     (numeric)\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"feerate\\\" : x.x,     (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"  \\\"blocks\\\" : n         (numeric) block number where estimate was found\\n\"\n+            \"}\\n\"\n+            \"\\n\"\n+            \"A negative value is returned if not enough transactions and blocks\\n\"\n+            \"have been observed to make an estimate for any number of blocks.\\n\"\n+            \"However it will not return a value below the mempool reject fee.\\n\"\n+            \"\\nExample:\\n\"\n+            + HelpExampleCli(\"estimatesmartfee\", \"6\")\n+            );\n+\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VNUM));\n+\n+    int nBlocks = params[0].get_int();\n+\n+    UniValue result(UniValue::VOBJ);\n+    int answerFound;\n+    CFeeRate feeRate = mempool.estimateSmartFee(nBlocks, &answerFound);\n+    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n+    result.push_back(Pair(\"blocks\", answerFound));\n+    return result;\n+}\n+\n+UniValue estimatesmartpriority(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"estimatesmartpriority nblocks\\n\"\n+            \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n+            \"\\nEstimates the approximate priority a zero-fee transaction needs to begin\\n\"\n+            \"confirmation within nblocks blocks if possible and return the number of blocks\\n\"\n+            \"for which the estimate is valid.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. nblocks     (numeric)\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"priority\\\" : x.x,    (numeric) estimated priority\\n\"\n+            \"  \\\"blocks\\\" : n         (numeric) block number where estimate was found\\n\"\n+            \"}\\n\"\n+            \"\\n\"\n+            \"A negative value is returned if not enough transactions and blocks\\n\"\n+            \"have been observed to make an estimate for any number of blocks.\\n\"\n+            \"However if the mempool reject fee is set it will return 1e9 * MAX_MONEY.\\n\"\n+            \"\\nExample:\\n\"\n+            + HelpExampleCli(\"estimatesmartpriority\", \"6\")\n+            );\n+\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VNUM));\n+\n+    int nBlocks = params[0].get_int();\n+\n+    UniValue result(UniValue::VOBJ);\n+    int answerFound;\n+    double priority = mempool.estimateSmartPriority(nBlocks, &answerFound);\n+    result.push_back(Pair(\"priority\", priority));\n+    result.push_back(Pair(\"blocks\", answerFound));\n+    return result;\n+}"
      },
      {
        "sha": "83d2c2d5037fcd054f00941a5dbf6e55c35aa1ae",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e92377fa7f9a34a6e6474a1d03d6402856f90f38/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e92377fa7f9a34a6e6474a1d03d6402856f90f38/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=e92377fa7f9a34a6e6474a1d03d6402856f90f38",
        "patch": "@@ -319,6 +319,8 @@ static const CRPCCommand vRPCCommands[] =\n     { \"util\",               \"verifymessage\",          &verifymessage,          true  },\n     { \"util\",               \"estimatefee\",            &estimatefee,            true  },\n     { \"util\",               \"estimatepriority\",       &estimatepriority,       true  },\n+    { \"util\",               \"estimatesmartfee\",       &estimatesmartfee,       true  },\n+    { \"util\",               \"estimatesmartpriority\",  &estimatesmartpriority,  true  },\n \n     /* Not shown in help */\n     { \"hidden\",             \"invalidateblock\",        &invalidateblock,        true  },"
      },
      {
        "sha": "fc88f82be8b5688b7ab7462d83866b2e66a18ac6",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e92377fa7f9a34a6e6474a1d03d6402856f90f38/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e92377fa7f9a34a6e6474a1d03d6402856f90f38/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=e92377fa7f9a34a6e6474a1d03d6402856f90f38",
        "patch": "@@ -193,6 +193,8 @@ extern UniValue getblocktemplate(const UniValue& params, bool fHelp);\n extern UniValue submitblock(const UniValue& params, bool fHelp);\n extern UniValue estimatefee(const UniValue& params, bool fHelp);\n extern UniValue estimatepriority(const UniValue& params, bool fHelp);\n+extern UniValue estimatesmartfee(const UniValue& params, bool fHelp);\n+extern UniValue estimatesmartpriority(const UniValue& params, bool fHelp);\n \n extern UniValue getnewaddress(const UniValue& params, bool fHelp); // in rpcwallet.cpp\n extern UniValue getaccountaddress(const UniValue& params, bool fHelp);"
      },
      {
        "sha": "1315146f10976d0c670717acd5accadc729c8072",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 17,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e92377fa7f9a34a6e6474a1d03d6402856f90f38/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e92377fa7f9a34a6e6474a1d03d6402856f90f38/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=e92377fa7f9a34a6e6474a1d03d6402856f90f38",
        "patch": "@@ -84,11 +84,18 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n         block.clear();\n         if (blocknum == 30) {\n             // At this point we should need to combine 5 buckets to get enough data points\n-            // So estimateFee(1) should fail and estimateFee(2) should return somewhere around\n-            // 8*baserate\n+            // So estimateFee(1,2,3) should fail and estimateFee(4) should return somewhere around\n+            // 8*baserate.  estimateFee(4) %'s are 100,100,100,100,90 = average 98%\n             BOOST_CHECK(mpool.estimateFee(1) == CFeeRate(0));\n-            BOOST_CHECK(mpool.estimateFee(2).GetFeePerK() < 8*baseRate.GetFeePerK() + deltaFee);\n-            BOOST_CHECK(mpool.estimateFee(2).GetFeePerK() > 8*baseRate.GetFeePerK() - deltaFee);\n+            BOOST_CHECK(mpool.estimateFee(2) == CFeeRate(0));\n+            BOOST_CHECK(mpool.estimateFee(3) == CFeeRate(0));\n+            BOOST_CHECK(mpool.estimateFee(4).GetFeePerK() < 8*baseRate.GetFeePerK() + deltaFee);\n+            BOOST_CHECK(mpool.estimateFee(4).GetFeePerK() > 8*baseRate.GetFeePerK() - deltaFee);\n+            int answerFound;\n+            BOOST_CHECK(mpool.estimateSmartFee(1, &answerFound) == mpool.estimateFee(4) && answerFound == 4);\n+            BOOST_CHECK(mpool.estimateSmartFee(3, &answerFound) == mpool.estimateFee(4) && answerFound == 4);\n+            BOOST_CHECK(mpool.estimateSmartFee(4, &answerFound) == mpool.estimateFee(4) && answerFound == 4);\n+            BOOST_CHECK(mpool.estimateSmartFee(8, &answerFound) == mpool.estimateFee(8) && answerFound == 8);\n         }\n     }\n \n@@ -97,20 +104,21 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     // Highest feerate is 10*baseRate and gets in all blocks,\n     // second highest feerate is 9*baseRate and gets in 9/10 blocks = 90%,\n     // third highest feerate is 8*base rate, and gets in 8/10 blocks = 80%,\n-    // so estimateFee(1) should return 9*baseRate.\n-    // Third highest feerate has 90% chance of being included by 2 blocks,\n-    // so estimateFee(2) should return 8*baseRate etc...\n+    // so estimateFee(1) should return 10*baseRate.\n+    // Second highest feerate has 100% chance of being included by 2 blocks,\n+    // so estimateFee(2) should return 9*baseRate etc...\n     for (int i = 1; i < 10;i++) {\n         origFeeEst.push_back(mpool.estimateFee(i).GetFeePerK());\n         origPriEst.push_back(mpool.estimatePriority(i));\n         if (i > 1) { // Fee estimates should be monotonically decreasing\n             BOOST_CHECK(origFeeEst[i-1] <= origFeeEst[i-2]);\n             BOOST_CHECK(origPriEst[i-1] <= origPriEst[i-2]);\n         }\n-        BOOST_CHECK(origFeeEst[i-1] < (10-i)*baseRate.GetFeePerK() + deltaFee);\n-        BOOST_CHECK(origFeeEst[i-1] > (10-i)*baseRate.GetFeePerK() - deltaFee);\n-        BOOST_CHECK(origPriEst[i-1] < pow(10,10-i) * basepri + deltaPri);\n-        BOOST_CHECK(origPriEst[i-1] > pow(10,10-i) * basepri - deltaPri);\n+        int mult = 11-i;\n+        BOOST_CHECK(origFeeEst[i-1] < mult*baseRate.GetFeePerK() + deltaFee);\n+        BOOST_CHECK(origFeeEst[i-1] > mult*baseRate.GetFeePerK() - deltaFee);\n+        BOOST_CHECK(origPriEst[i-1] < pow(10,mult) * basepri + deltaPri);\n+        BOOST_CHECK(origPriEst[i-1] > pow(10,mult) * basepri - deltaPri);\n     }\n \n     // Mine 50 more blocks with no transactions happening, estimates shouldn't change\n@@ -140,9 +148,12 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n         mpool.removeForBlock(block, ++blocknum, dummyConflicted);\n     }\n \n+    int answerFound;\n     for (int i = 1; i < 10;i++) {\n-        BOOST_CHECK(mpool.estimateFee(i).GetFeePerK() > origFeeEst[i-1] - deltaFee);\n-        BOOST_CHECK(mpool.estimatePriority(i) > origPriEst[i-1] - deltaPri);\n+        BOOST_CHECK(mpool.estimateFee(i) == CFeeRate(0) || mpool.estimateFee(i).GetFeePerK() > origFeeEst[i-1] - deltaFee);\n+        BOOST_CHECK(mpool.estimateSmartFee(i, &answerFound).GetFeePerK() > origFeeEst[answerFound-1] - deltaFee);\n+        BOOST_CHECK(mpool.estimatePriority(i) == -1 || mpool.estimatePriority(i) > origPriEst[i-1] - deltaPri);\n+        BOOST_CHECK(mpool.estimateSmartPriority(i, &answerFound) > origPriEst[answerFound-1] - deltaPri);\n     }\n \n     // Mine all those transactions\n@@ -162,9 +173,9 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n         BOOST_CHECK(mpool.estimatePriority(i) > origPriEst[i-1] - deltaPri);\n     }\n \n-    // Mine 100 more blocks where everything is mined every block\n-    // Estimates should be below original estimates (not possible for last estimate)\n-    while (blocknum < 365) {\n+    // Mine 200 more blocks where everything is mined every block\n+    // Estimates should be below original estimates\n+    while (blocknum < 465) {\n         for (int j = 0; j < 10; j++) { // For each fee/pri multiple\n             for (int k = 0; k < 5; k++) { // add 4 fee txs for every priority tx\n                 tx.vin[0].prevout.n = 10000*blocknum+100*j+k;\n@@ -178,10 +189,22 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n         mpool.removeForBlock(block, ++blocknum, dummyConflicted);\n         block.clear();\n     }\n-    for (int i = 1; i < 9; i++) {\n+    for (int i = 1; i < 10; i++) {\n         BOOST_CHECK(mpool.estimateFee(i).GetFeePerK() < origFeeEst[i-1] - deltaFee);\n         BOOST_CHECK(mpool.estimatePriority(i) < origPriEst[i-1] - deltaPri);\n     }\n+\n+    // Test that if the mempool is limited, estimateSmartFee won't return a value below the mempool min fee\n+    // and that estimateSmartPriority returns essentially an infinite value\n+    mpool.addUnchecked(tx.GetHash(),  CTxMemPoolEntry(tx, feeV[0][5], GetTime(), priV[1][5], blocknum, mpool.HasNoInputsOf(tx)));\n+    // evict that transaction which should set a mempool min fee of minRelayTxFee + feeV[0][5]\n+    mpool.TrimToSize(1);\n+    BOOST_CHECK(mpool.GetMinFee(1).GetFeePerK() > feeV[0][5]);\n+    for (int i = 1; i < 10; i++) {\n+        BOOST_CHECK(mpool.estimateSmartFee(i).GetFeePerK() >= mpool.estimateFee(i).GetFeePerK());\n+        BOOST_CHECK(mpool.estimateSmartFee(i).GetFeePerK() >= mpool.GetMinFee(1).GetFeePerK());\n+        BOOST_CHECK(mpool.estimateSmartPriority(i) == INF_PRIORITY);\n+    }\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "ec7971c2f1cca50586da420c888608116594ec9a",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e92377fa7f9a34a6e6474a1d03d6402856f90f38/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e92377fa7f9a34a6e6474a1d03d6402856f90f38/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=e92377fa7f9a34a6e6474a1d03d6402856f90f38",
        "patch": "@@ -701,11 +701,21 @@ CFeeRate CTxMemPool::estimateFee(int nBlocks) const\n     LOCK(cs);\n     return minerPolicyEstimator->estimateFee(nBlocks);\n }\n+CFeeRate CTxMemPool::estimateSmartFee(int nBlocks, int *answerFoundAtBlocks) const\n+{\n+    LOCK(cs);\n+    return minerPolicyEstimator->estimateSmartFee(nBlocks, answerFoundAtBlocks, *this);\n+}\n double CTxMemPool::estimatePriority(int nBlocks) const\n {\n     LOCK(cs);\n     return minerPolicyEstimator->estimatePriority(nBlocks);\n }\n+double CTxMemPool::estimateSmartPriority(int nBlocks, int *answerFoundAtBlocks) const\n+{\n+    LOCK(cs);\n+    return minerPolicyEstimator->estimateSmartPriority(nBlocks, answerFoundAtBlocks, *this);\n+}\n \n bool\n CTxMemPool::WriteFeeEstimates(CAutoFile& fileout) const"
      },
      {
        "sha": "5d8231fb778d4875cab9b9652a35ea1078ca361a",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e92377fa7f9a34a6e6474a1d03d6402856f90f38/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e92377fa7f9a34a6e6474a1d03d6402856f90f38/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=e92377fa7f9a34a6e6474a1d03d6402856f90f38",
        "patch": "@@ -454,9 +454,21 @@ class CTxMemPool\n \n     bool lookup(uint256 hash, CTransaction& result) const;\n \n+    /** Estimate fee rate needed to get into the next nBlocks\n+     *  If no answer can be given at nBlocks, return an estimate\n+     *  at the lowest number of blocks where one can be given\n+     */\n+    CFeeRate estimateSmartFee(int nBlocks, int *answerFoundAtBlocks = NULL) const;\n+\n     /** Estimate fee rate needed to get into the next nBlocks */\n     CFeeRate estimateFee(int nBlocks) const;\n \n+    /** Estimate priority needed to get into the next nBlocks\n+     *  If no answer can be given at nBlocks, return an estimate\n+     *  at the lowest number of blocks where one can be given\n+     */\n+    double estimateSmartPriority(int nBlocks, int *answerFoundAtBlocks = NULL) const;\n+\n     /** Estimate priority needed to get into the next nBlocks */\n     double estimatePriority(int nBlocks) const;\n     "
      },
      {
        "sha": "c5246d909e30211444a70def6aba5b7bfa80cfa4",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 13,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e92377fa7f9a34a6e6474a1d03d6402856f90f38/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e92377fa7f9a34a6e6474a1d03d6402856f90f38/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e92377fa7f9a34a6e6474a1d03d6402856f90f38",
        "patch": "@@ -2010,13 +2010,9 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 if (fSendFreeTransactions && nBytes <= MAX_FREE_TRANSACTION_CREATE_SIZE)\n                 {\n                     // Not enough fee: enough priority?\n-                    double dPriorityNeeded = mempool.estimatePriority(nTxConfirmTarget);\n-                    // Not enough mempool history to estimate: use hard-coded AllowFree.\n-                    if (dPriorityNeeded <= 0 && AllowFree(dPriority))\n-                        break;\n-\n-                    // Small enough, and priority high enough, to send for free\n-                    if (dPriorityNeeded > 0 && dPriority >= dPriorityNeeded)\n+                    double dPriorityNeeded = mempool.estimateSmartPriority(nTxConfirmTarget);\n+                    // Require at least hard-coded AllowFree.\n+                    if (dPriority >= dPriorityNeeded && AllowFree(dPriority))\n                         break;\n                 }\n \n@@ -2120,12 +2116,14 @@ CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarge\n     if (fPayAtLeastCustomFee && nFeeNeeded > 0 && nFeeNeeded < payTxFee.GetFeePerK())\n         nFeeNeeded = payTxFee.GetFeePerK();\n     // User didn't set: use -txconfirmtarget to estimate...\n-    if (nFeeNeeded == 0)\n-        nFeeNeeded = pool.estimateFee(nConfirmTarget).GetFee(nTxBytes);\n-    // ... unless we don't have enough mempool data, in which case fall\n-    // back to the required fee\n-    if (nFeeNeeded == 0)\n-        nFeeNeeded = GetRequiredFee(nTxBytes);\n+    if (nFeeNeeded == 0) {\n+        int estimateFoundTarget = nConfirmTarget;\n+        nFeeNeeded = pool.estimateSmartFee(nConfirmTarget, &estimateFoundTarget).GetFee(nTxBytes);\n+        // ... unless we don't have enough mempool data for our desired target\n+        // so we make sure we're paying at least minTxFee\n+        if (nFeeNeeded == 0 || (unsigned int)estimateFoundTarget > nConfirmTarget)\n+            nFeeNeeded = std::max(nFeeNeeded, GetRequiredFee(nTxBytes));\n+    }\n     // prevent user from paying a non-sense fee (like 1 satoshi): 0 < fee < minRelayFee\n     if (nFeeNeeded < ::minRelayTxFee.GetFee(nTxBytes))\n         nFeeNeeded = ::minRelayTxFee.GetFee(nTxBytes);"
      }
    ]
  },
  {
    "sha": "0e935865b9ee3a79fc63f5766074b6f539a0cf85",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZTkzNTg2NWI5ZWUzYTc5ZmM2M2Y1NzY2MDc0YjZmNTM5YTBjZjg1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-27T12:07:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-27T12:20:39Z"
      },
      "message": "Merge pull request #6871\n\n63b5840 Fix usage of local python-bitcoinlib (Peter Todd)\n16a2f93 Fix incorrect locking of mempool during RBF replacement (Peter Todd)\n97203f5 Port test to rpc-test framework (Suhas Daftuar)\n20367d8 Add test for max replacement limit (Suhas Daftuar)\n73d9040 Improve RBF replacement criteria (Suhas Daftuar)\nb272ecf Reject replacements that add new unconfirmed inputs (Peter Todd)\nfc8c19a Prevent low feerate txs from (directly) replacing high feerate txs (Peter Todd)\n0137e6f Add tests for transaction replacement (Peter Todd)\n5891f87 Add opt-in full-RBF to mempool (Peter Todd)",
      "tree": {
        "sha": "a45b457922b02fc4bd77ccc380d23db506257b13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a45b457922b02fc4bd77ccc380d23db506257b13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0e935865b9ee3a79fc63f5766074b6f539a0cf85",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWWEqXAAoJEHSBCwEjRsmmZfgIALyeYjEBm4c1H9R3ABHN2bov\n4LR/tcKPE+iTrRcHtGfsBDGSrm2ncCUm6n7lB0i9L/E8nDQ+1heqzKrG0qzi2z/E\nkn+bnZylWCgZFAHrmtOyTQcYzJt/z8AYt5l5uhNJ7EwKNxDx/ISsYfeeYtluzcWp\nJE4s1uc2Jr7lyqysw37gwXgqOUseTnMwTnI89b3rup8Sav+34mnKGYM7Os5WO+ya\n7/XY+EIkUlKxXDGmiHpJIyXHiDO4Ew65E6aBE6N0SWc5h004rPWrY6oN4F0sg51o\nuoCpZ9YAtdvEOtEy/3Xq+9ewIgyF8HY6qGF4Yz6ebLzL8NwLJhexAajf8bLl05w=\n=6NDb\n-----END PGP SIGNATURE-----",
        "payload": "tree a45b457922b02fc4bd77ccc380d23db506257b13\nparent e92377fa7f9a34a6e6474a1d03d6402856f90f38\nparent 63b5840257a0b892228dfa9cce943b5a2bb94e1a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448626078 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448626839 +0100\n\nMerge pull request #6871\n\n63b5840 Fix usage of local python-bitcoinlib (Peter Todd)\n16a2f93 Fix incorrect locking of mempool during RBF replacement (Peter Todd)\n97203f5 Port test to rpc-test framework (Suhas Daftuar)\n20367d8 Add test for max replacement limit (Suhas Daftuar)\n73d9040 Improve RBF replacement criteria (Suhas Daftuar)\nb272ecf Reject replacements that add new unconfirmed inputs (Peter Todd)\nfc8c19a Prevent low feerate txs from (directly) replacing high feerate txs (Peter Todd)\n0137e6f Add tests for transaction replacement (Peter Todd)\n5891f87 Add opt-in full-RBF to mempool (Peter Todd)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e935865b9ee3a79fc63f5766074b6f539a0cf85",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0e935865b9ee3a79fc63f5766074b6f539a0cf85",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e935865b9ee3a79fc63f5766074b6f539a0cf85/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e92377fa7f9a34a6e6474a1d03d6402856f90f38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e92377fa7f9a34a6e6474a1d03d6402856f90f38",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e92377fa7f9a34a6e6474a1d03d6402856f90f38"
      },
      {
        "sha": "63b5840257a0b892228dfa9cce943b5a2bb94e1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63b5840257a0b892228dfa9cce943b5a2bb94e1a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/63b5840257a0b892228dfa9cce943b5a2bb94e1a"
      }
    ],
    "stats": {
      "total": 1098,
      "additions": 1089,
      "deletions": 9
    },
    "files": [
      {
        "sha": "3d156a2e7b933ab45755e0b5cd25515878f374b5",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e935865b9ee3a79fc63f5766074b6f539a0cf85/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e935865b9ee3a79fc63f5766074b6f539a0cf85/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=0e935865b9ee3a79fc63f5766074b6f539a0cf85",
        "patch": "@@ -112,6 +112,7 @@\n     'p2p-acceptblock.py',\n     'mempool_packages.py',\n     'maxuploadtarget.py',\n+    'replace-by-fee.py',\n ]\n \n #Enable ZMQ tests"
      },
      {
        "sha": "b2c4f4657aebb1a2bffcc5e7a7d1c3bcdefdd56f",
        "filename": "qa/replace-by-fee/.gitignore",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e935865b9ee3a79fc63f5766074b6f539a0cf85/qa/replace-by-fee/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e935865b9ee3a79fc63f5766074b6f539a0cf85/qa/replace-by-fee/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/replace-by-fee/.gitignore?ref=0e935865b9ee3a79fc63f5766074b6f539a0cf85",
        "patch": "@@ -0,0 +1 @@\n+python-bitcoinlib"
      },
      {
        "sha": "baad86de9a47564132aa68f805982bd0eb49c3ad",
        "filename": "qa/replace-by-fee/README.md",
        "status": "added",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e935865b9ee3a79fc63f5766074b6f539a0cf85/qa/replace-by-fee/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e935865b9ee3a79fc63f5766074b6f539a0cf85/qa/replace-by-fee/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/replace-by-fee/README.md?ref=0e935865b9ee3a79fc63f5766074b6f539a0cf85",
        "patch": "@@ -0,0 +1,13 @@\n+Replace-by-fee regression tests\n+===============================\n+\n+First get version v0.5.0 of the python-bitcoinlib library. In this directory\n+run:\n+\n+    git clone -n https://github.com/petertodd/python-bitcoinlib\n+    (cd python-bitcoinlib && git checkout 8270bfd9c6ac37907d75db3d8b9152d61c7255cd)\n+\n+Then run the tests themselves with a bitcoind available running in regtest\n+mode:\n+\n+    ./rbf-tests.py"
      },
      {
        "sha": "1ee6c838752568ff7909ff2923381ca73127377a",
        "filename": "qa/replace-by-fee/rbf-tests.py",
        "status": "added",
        "additions": 360,
        "deletions": 0,
        "changes": 360,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e935865b9ee3a79fc63f5766074b6f539a0cf85/qa/replace-by-fee/rbf-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e935865b9ee3a79fc63f5766074b6f539a0cf85/qa/replace-by-fee/rbf-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/replace-by-fee/rbf-tests.py?ref=0e935865b9ee3a79fc63f5766074b6f539a0cf85",
        "patch": "@@ -0,0 +1,360 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test replace-by-fee\n+#\n+\n+import os\n+import sys\n+\n+# Add python-bitcoinlib to module search path, prior to any system-wide\n+# python-bitcoinlib.\n+sys.path.insert(0, os.path.join(os.path.dirname(os.path.abspath(__file__)), \"python-bitcoinlib\"))\n+\n+import unittest\n+\n+import bitcoin\n+bitcoin.SelectParams('regtest')\n+\n+import bitcoin.rpc\n+\n+from bitcoin.core import *\n+from bitcoin.core.script import *\n+from bitcoin.wallet import *\n+\n+MAX_REPLACEMENT_LIMIT = 100\n+\n+class Test_ReplaceByFee(unittest.TestCase):\n+    proxy = None\n+\n+    @classmethod\n+    def setUpClass(cls):\n+        if cls.proxy is None:\n+            cls.proxy = bitcoin.rpc.Proxy()\n+\n+    @classmethod\n+    def mine_mempool(cls):\n+        \"\"\"Mine until mempool is empty\"\"\"\n+        mempool_size = 1\n+        while mempool_size:\n+            cls.proxy.call('generate', 1)\n+            new_mempool_size = len(cls.proxy.getrawmempool())\n+\n+            # It's possible to get stuck in a loop here if the mempool has\n+            # transactions that can't be mined.\n+            assert(new_mempool_size != mempool_size)\n+            mempool_size = new_mempool_size\n+\n+    @classmethod\n+    def tearDownClass(cls):\n+        # Make sure mining works\n+        cls.mine_mempool()\n+\n+    def make_txout(self, amount, confirmed=True, scriptPubKey=CScript([1])):\n+        \"\"\"Create a txout with a given amount and scriptPubKey\n+\n+        Mines coins as needed.\n+\n+        confirmed - txouts created will be confirmed in the blockchain;\n+                    unconfirmed otherwise.\n+        \"\"\"\n+        fee = 1*COIN\n+        while self.proxy.getbalance() < amount + fee:\n+            self.proxy.call('generate', 100)\n+\n+        addr = P2SHBitcoinAddress.from_redeemScript(CScript([]))\n+        txid = self.proxy.sendtoaddress(addr, amount + fee)\n+\n+        tx1 = self.proxy.getrawtransaction(txid)\n+\n+        i = None\n+        for i, txout in enumerate(tx1.vout):\n+            if txout.scriptPubKey == addr.to_scriptPubKey():\n+                break\n+        assert i is not None\n+\n+        tx2 = CTransaction([CTxIn(COutPoint(txid, i), CScript([1, CScript([])]), nSequence=0)],\n+                           [CTxOut(amount, scriptPubKey)])\n+\n+        tx2_txid = self.proxy.sendrawtransaction(tx2, True)\n+\n+        # If requested, ensure txouts are confirmed.\n+        if confirmed:\n+            self.mine_mempool()\n+\n+        return COutPoint(tx2_txid, 0)\n+\n+    def test_simple_doublespend(self):\n+        \"\"\"Simple doublespend\"\"\"\n+        tx0_outpoint = self.make_txout(1.1*COIN)\n+\n+        tx1a = CTransaction([CTxIn(tx0_outpoint, nSequence=0)],\n+                            [CTxOut(1*COIN, CScript([b'a']))])\n+        tx1a_txid = self.proxy.sendrawtransaction(tx1a, True)\n+\n+        # Should fail because we haven't changed the fee\n+        tx1b = CTransaction([CTxIn(tx0_outpoint, nSequence=0)],\n+                            [CTxOut(1*COIN, CScript([b'b']))])\n+\n+        try:\n+            tx1b_txid = self.proxy.sendrawtransaction(tx1b, True)\n+        except bitcoin.rpc.JSONRPCException as exp:\n+            self.assertEqual(exp.error['code'], -26) # insufficient fee\n+        else:\n+            self.fail()\n+\n+        # Extra 0.1 BTC fee\n+        tx1b = CTransaction([CTxIn(tx0_outpoint, nSequence=0)],\n+                            [CTxOut(0.9*COIN, CScript([b'b']))])\n+        tx1b_txid = self.proxy.sendrawtransaction(tx1b, True)\n+\n+        # tx1a is in fact replaced\n+        with self.assertRaises(IndexError):\n+            self.proxy.getrawtransaction(tx1a_txid)\n+\n+        self.assertEqual(tx1b, self.proxy.getrawtransaction(tx1b_txid))\n+\n+    def test_doublespend_chain(self):\n+        \"\"\"Doublespend of a long chain\"\"\"\n+\n+        initial_nValue = 50*COIN\n+        tx0_outpoint = self.make_txout(initial_nValue)\n+\n+        prevout = tx0_outpoint\n+        remaining_value = initial_nValue\n+        chain_txids = []\n+        while remaining_value > 10*COIN:\n+            remaining_value -= 1*COIN\n+            tx = CTransaction([CTxIn(prevout, nSequence=0)],\n+                              [CTxOut(remaining_value, CScript([1]))])\n+            txid = self.proxy.sendrawtransaction(tx, True)\n+            chain_txids.append(txid)\n+            prevout = COutPoint(txid, 0)\n+\n+        # Whether the double-spend is allowed is evaluated by including all\n+        # child fees - 40 BTC - so this attempt is rejected.\n+        dbl_tx = CTransaction([CTxIn(tx0_outpoint, nSequence=0)],\n+                              [CTxOut(initial_nValue - 30*COIN, CScript([1]))])\n+\n+        try:\n+            self.proxy.sendrawtransaction(dbl_tx, True)\n+        except bitcoin.rpc.JSONRPCException as exp:\n+            self.assertEqual(exp.error['code'], -26) # insufficient fee\n+        else:\n+            self.fail()\n+\n+        # Accepted with sufficient fee\n+        dbl_tx = CTransaction([CTxIn(tx0_outpoint, nSequence=0)],\n+                              [CTxOut(1*COIN, CScript([1]))])\n+        self.proxy.sendrawtransaction(dbl_tx, True)\n+\n+        for doublespent_txid in chain_txids:\n+            with self.assertRaises(IndexError):\n+                self.proxy.getrawtransaction(doublespent_txid)\n+\n+    def test_doublespend_tree(self):\n+        \"\"\"Doublespend of a big tree of transactions\"\"\"\n+\n+        initial_nValue = 50*COIN\n+        tx0_outpoint = self.make_txout(initial_nValue)\n+\n+        def branch(prevout, initial_value, max_txs, *, tree_width=5, fee=0.0001*COIN, _total_txs=None):\n+            if _total_txs is None:\n+                _total_txs = [0]\n+            if _total_txs[0] >= max_txs:\n+                return\n+\n+            txout_value = (initial_value - fee) // tree_width\n+            if txout_value < fee:\n+                return\n+\n+            vout = [CTxOut(txout_value, CScript([i+1]))\n+                    for i in range(tree_width)]\n+            tx = CTransaction([CTxIn(prevout, nSequence=0)],\n+                              vout)\n+\n+            self.assertTrue(len(tx.serialize()) < 100000)\n+            txid = self.proxy.sendrawtransaction(tx, True)\n+            yield tx\n+            _total_txs[0] += 1\n+\n+            for i, txout in enumerate(tx.vout):\n+                yield from branch(COutPoint(txid, i), txout_value,\n+                                  max_txs,\n+                                  tree_width=tree_width, fee=fee,\n+                                  _total_txs=_total_txs)\n+\n+        fee = 0.0001*COIN\n+        n = MAX_REPLACEMENT_LIMIT\n+        tree_txs = list(branch(tx0_outpoint, initial_nValue, n, fee=fee))\n+        self.assertEqual(len(tree_txs), n)\n+\n+        # Attempt double-spend, will fail because too little fee paid\n+        dbl_tx = CTransaction([CTxIn(tx0_outpoint, nSequence=0)],\n+                              [CTxOut(initial_nValue - fee*n, CScript([1]))])\n+        try:\n+            self.proxy.sendrawtransaction(dbl_tx, True)\n+        except bitcoin.rpc.JSONRPCException as exp:\n+            self.assertEqual(exp.error['code'], -26) # insufficient fee\n+        else:\n+            self.fail()\n+\n+        # 1 BTC fee is enough\n+        dbl_tx = CTransaction([CTxIn(tx0_outpoint, nSequence=0)],\n+                              [CTxOut(initial_nValue - fee*n - 1*COIN, CScript([1]))])\n+        self.proxy.sendrawtransaction(dbl_tx, True)\n+\n+        for tx in tree_txs:\n+            with self.assertRaises(IndexError):\n+                self.proxy.getrawtransaction(tx.GetHash())\n+\n+        # Try again, but with more total transactions than the \"max txs\n+        # double-spent at once\" anti-DoS limit.\n+        for n in (MAX_REPLACEMENT_LIMIT, MAX_REPLACEMENT_LIMIT*2):\n+            fee = 0.0001*COIN\n+            tx0_outpoint = self.make_txout(initial_nValue)\n+            tree_txs = list(branch(tx0_outpoint, initial_nValue, n, fee=fee))\n+            self.assertEqual(len(tree_txs), n)\n+\n+            dbl_tx = CTransaction([CTxIn(tx0_outpoint, nSequence=0)],\n+                                  [CTxOut(initial_nValue - fee*n, CScript([1]))])\n+            try:\n+                self.proxy.sendrawtransaction(dbl_tx, True)\n+            except bitcoin.rpc.JSONRPCException as exp:\n+                self.assertEqual(exp.error['code'], -26)\n+            else:\n+                self.fail()\n+\n+            for tx in tree_txs:\n+                self.proxy.getrawtransaction(tx.GetHash())\n+\n+    def test_replacement_feeperkb(self):\n+        \"\"\"Replacement requires fee-per-KB to be higher\"\"\"\n+        tx0_outpoint = self.make_txout(1.1*COIN)\n+\n+        tx1a = CTransaction([CTxIn(tx0_outpoint, nSequence=0)],\n+                            [CTxOut(1*COIN, CScript([b'a']))])\n+        tx1a_txid = self.proxy.sendrawtransaction(tx1a, True)\n+\n+        # Higher fee, but the fee per KB is much lower, so the replacement is\n+        # rejected.\n+        tx1b = CTransaction([CTxIn(tx0_outpoint, nSequence=0)],\n+                            [CTxOut(0.001*COIN,\n+                                    CScript([b'a'*999000]))])\n+\n+        try:\n+            tx1b_txid = self.proxy.sendrawtransaction(tx1b, True)\n+        except bitcoin.rpc.JSONRPCException as exp:\n+            self.assertEqual(exp.error['code'], -26) # insufficient fee\n+        else:\n+            self.fail()\n+\n+    def test_spends_of_conflicting_outputs(self):\n+        \"\"\"Replacements that spend conflicting tx outputs are rejected\"\"\"\n+        utxo1 = self.make_txout(1.2*COIN)\n+        utxo2 = self.make_txout(3.0*COIN)\n+\n+        tx1a = CTransaction([CTxIn(utxo1, nSequence=0)],\n+                            [CTxOut(1.1*COIN, CScript([b'a']))])\n+        tx1a_txid = self.proxy.sendrawtransaction(tx1a, True)\n+\n+        # Direct spend an output of the transaction we're replacing.\n+        tx2 = CTransaction([CTxIn(utxo1, nSequence=0), CTxIn(utxo2, nSequence=0),\n+                            CTxIn(COutPoint(tx1a_txid, 0), nSequence=0)],\n+                           tx1a.vout)\n+\n+        try:\n+            tx2_txid = self.proxy.sendrawtransaction(tx2, True)\n+        except bitcoin.rpc.JSONRPCException as exp:\n+            self.assertEqual(exp.error['code'], -26)\n+        else:\n+            self.fail()\n+\n+        # Spend tx1a's output to test the indirect case.\n+        tx1b = CTransaction([CTxIn(COutPoint(tx1a_txid, 0), nSequence=0)],\n+                            [CTxOut(1.0*COIN, CScript([b'a']))])\n+        tx1b_txid = self.proxy.sendrawtransaction(tx1b, True)\n+\n+        tx2 = CTransaction([CTxIn(utxo1, nSequence=0), CTxIn(utxo2, nSequence=0),\n+                            CTxIn(COutPoint(tx1b_txid, 0))],\n+                           tx1a.vout)\n+\n+        try:\n+            tx2_txid = self.proxy.sendrawtransaction(tx2, True)\n+        except bitcoin.rpc.JSONRPCException as exp:\n+            self.assertEqual(exp.error['code'], -26)\n+        else:\n+            self.fail()\n+\n+    def test_new_unconfirmed_inputs(self):\n+        \"\"\"Replacements that add new unconfirmed inputs are rejected\"\"\"\n+        confirmed_utxo = self.make_txout(1.1*COIN)\n+        unconfirmed_utxo = self.make_txout(0.1*COIN, False)\n+\n+        tx1 = CTransaction([CTxIn(confirmed_utxo)],\n+                           [CTxOut(1.0*COIN, CScript([b'a']))])\n+        tx1_txid = self.proxy.sendrawtransaction(tx1, True)\n+\n+        tx2 = CTransaction([CTxIn(confirmed_utxo), CTxIn(unconfirmed_utxo)],\n+                           tx1.vout)\n+\n+        try:\n+            tx2_txid = self.proxy.sendrawtransaction(tx2, True)\n+        except bitcoin.rpc.JSONRPCException as exp:\n+            self.assertEqual(exp.error['code'], -26)\n+        else:\n+            self.fail()\n+\n+    def test_too_many_replacements(self):\n+        \"\"\"Replacements that evict too many transactions are rejected\"\"\"\n+        # Try directly replacing more than MAX_REPLACEMENT_LIMIT\n+        # transactions\n+\n+        # Start by creating a single transaction with many outputs\n+        initial_nValue = 10*COIN\n+        utxo = self.make_txout(initial_nValue)\n+        fee = 0.0001*COIN\n+        split_value = int((initial_nValue-fee)/(MAX_REPLACEMENT_LIMIT+1))\n+        actual_fee = initial_nValue - split_value*(MAX_REPLACEMENT_LIMIT+1)\n+\n+        outputs = []\n+        for i in range(MAX_REPLACEMENT_LIMIT+1):\n+            outputs.append(CTxOut(split_value, CScript([1])))\n+\n+        splitting_tx = CTransaction([CTxIn(utxo, nSequence=0)], outputs)\n+        txid = self.proxy.sendrawtransaction(splitting_tx, True)\n+\n+        # Now spend each of those outputs individually\n+        for i in range(MAX_REPLACEMENT_LIMIT+1):\n+            tx_i = CTransaction([CTxIn(COutPoint(txid, i), nSequence=0)],\n+                                [CTxOut(split_value-fee, CScript([b'a']))])\n+            self.proxy.sendrawtransaction(tx_i, True)\n+\n+        # Now create doublespend of the whole lot, should fail\n+        # Need a big enough fee to cover all spending transactions and have\n+        # a higher fee rate\n+        double_spend_value = (split_value-100*fee)*(MAX_REPLACEMENT_LIMIT+1)\n+        inputs = []\n+        for i in range(MAX_REPLACEMENT_LIMIT+1):\n+            inputs.append(CTxIn(COutPoint(txid, i), nSequence=0))\n+        double_tx = CTransaction(inputs, [CTxOut(double_spend_value, CScript([b'a']))])\n+\n+        try:\n+            self.proxy.sendrawtransaction(double_tx, True)\n+        except bitcoin.rpc.JSONRPCException as exp:\n+            self.assertEqual(exp.error['code'], -26)\n+            self.assertEqual(\"too many potential replacements\" in exp.error['message'], True)\n+        else:\n+            self.fail()\n+\n+        # If we remove an input, it should pass\n+        double_tx = CTransaction(inputs[0:-1],\n+                                 [CTxOut(double_spend_value, CScript([b'a']))])\n+\n+        self.proxy.sendrawtransaction(double_tx, True)\n+\n+if __name__ == '__main__':\n+    unittest.main()"
      },
      {
        "sha": "537a1ed8d9712bd7bd71c658e24d9563da683e3f",
        "filename": "qa/rpc-tests/replace-by-fee.py",
        "status": "added",
        "additions": 512,
        "deletions": 0,
        "changes": 512,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e935865b9ee3a79fc63f5766074b6f539a0cf85/qa/rpc-tests/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e935865b9ee3a79fc63f5766074b6f539a0cf85/qa/rpc-tests/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/replace-by-fee.py?ref=0e935865b9ee3a79fc63f5766074b6f539a0cf85",
        "patch": "@@ -0,0 +1,512 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test replace by fee code\n+#\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+from test_framework.script import *\n+from test_framework.mininode import *\n+import binascii\n+\n+COIN = 100000000\n+MAX_REPLACEMENT_LIMIT = 100\n+\n+def satoshi_round(amount):\n+    return Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n+\n+def txToHex(tx):\n+    return binascii.hexlify(tx.serialize()).decode('utf-8')\n+\n+def make_utxo(node, amount, confirmed=True, scriptPubKey=CScript([1])):\n+    \"\"\"Create a txout with a given amount and scriptPubKey\n+\n+    Mines coins as needed.\n+\n+    confirmed - txouts created will be confirmed in the blockchain;\n+                unconfirmed otherwise.\n+    \"\"\"\n+    fee = 1*COIN\n+    while node.getbalance() < satoshi_round((amount + fee)/COIN):\n+        node.generate(100)\n+        #print (node.getbalance(), amount, fee)\n+\n+    new_addr = node.getnewaddress()\n+    #print new_addr\n+    txid = node.sendtoaddress(new_addr, satoshi_round((amount+fee)/COIN))\n+    tx1 = node.getrawtransaction(txid, 1)\n+    txid = int(txid, 16)\n+    i = None\n+\n+    for i, txout in enumerate(tx1['vout']):\n+        #print i, txout['scriptPubKey']['addresses']\n+        if txout['scriptPubKey']['addresses'] == [new_addr]:\n+            #print i\n+            break\n+    assert i is not None\n+\n+    tx2 = CTransaction()\n+    tx2.vin = [CTxIn(COutPoint(txid, i))]\n+    tx2.vout = [CTxOut(amount, scriptPubKey)]\n+    tx2.rehash()\n+\n+    tx2_hex = binascii.hexlify(tx2.serialize()).decode('utf-8')\n+    #print tx2_hex\n+\n+    signed_tx = node.signrawtransaction(binascii.hexlify(tx2.serialize()).decode('utf-8'))\n+\n+    txid = node.sendrawtransaction(signed_tx['hex'], True)\n+\n+    # If requested, ensure txouts are confirmed.\n+    if confirmed:\n+        while len(node.getrawmempool()):\n+            node.generate(1)\n+\n+    return COutPoint(int(txid, 16), 0)\n+\n+class ReplaceByFeeTest(BitcoinTestFramework):\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-maxorphantx=1000\",\n+                                                              \"-relaypriority=0\", \"-whitelist=127.0.0.1\"]))\n+        self.is_network_split = False\n+\n+    def run_test(self):\n+        make_utxo(self.nodes[0], 1*COIN)\n+\n+        print \"Running test simple doublespend...\"\n+        self.test_simple_doublespend()\n+\n+        print \"Running test doublespend chain...\"\n+        self.test_doublespend_chain()\n+\n+        print \"Running test doublespend tree...\"\n+        self.test_doublespend_tree()\n+\n+        print \"Running test replacement feeperkb...\"\n+        self.test_replacement_feeperkb()\n+\n+        print \"Running test spends of conflicting outputs...\"\n+        self.test_spends_of_conflicting_outputs()\n+\n+        print \"Running test new unconfirmed inputs...\"\n+        self.test_new_unconfirmed_inputs()\n+\n+        print \"Running test too many replacements...\"\n+        self.test_too_many_replacements()\n+\n+        print \"Running test opt-in...\"\n+        self.test_opt_in()\n+\n+        print \"Passed\\n\"\n+\n+    def test_simple_doublespend(self):\n+        \"\"\"Simple doublespend\"\"\"\n+        tx0_outpoint = make_utxo(self.nodes[0], 1.1*COIN)\n+\n+        tx1a = CTransaction()\n+        tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n+        tx1a.vout = [CTxOut(1*COIN, CScript([b'a']))]\n+        tx1a_hex = txToHex(tx1a)\n+        tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, True)\n+\n+        # Should fail because we haven't changed the fee\n+        tx1b = CTransaction()\n+        tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n+        tx1b.vout = [CTxOut(1*COIN, CScript([b'b']))]\n+        tx1b_hex = txToHex(tx1b)\n+\n+        try:\n+            tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, True)\n+        except JSONRPCException as exp:\n+            assert_equal(exp.error['code'], -26) # insufficient fee\n+        else:\n+            assert(False)\n+\n+        # Extra 0.1 BTC fee\n+        tx1b = CTransaction()\n+        tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n+        tx1b.vout = [CTxOut(0.9*COIN, CScript([b'b']))]\n+        tx1b_hex = txToHex(tx1b)\n+        tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, True)\n+\n+        mempool = self.nodes[0].getrawmempool()\n+\n+        assert (tx1a_txid not in mempool)\n+        assert (tx1b_txid in mempool)\n+\n+        assert_equal(tx1b_hex, self.nodes[0].getrawtransaction(tx1b_txid))\n+\n+    def test_doublespend_chain(self):\n+        \"\"\"Doublespend of a long chain\"\"\"\n+\n+        initial_nValue = 50*COIN\n+        tx0_outpoint = make_utxo(self.nodes[0], initial_nValue)\n+\n+        prevout = tx0_outpoint\n+        remaining_value = initial_nValue\n+        chain_txids = []\n+        while remaining_value > 10*COIN:\n+            remaining_value -= 1*COIN\n+            tx = CTransaction()\n+            tx.vin = [CTxIn(prevout, nSequence=0)]\n+            tx.vout = [CTxOut(remaining_value, CScript([1]))]\n+            tx_hex = txToHex(tx)\n+            txid = self.nodes[0].sendrawtransaction(tx_hex, True)\n+            chain_txids.append(txid)\n+            prevout = COutPoint(int(txid, 16), 0)\n+\n+        # Whether the double-spend is allowed is evaluated by including all\n+        # child fees - 40 BTC - so this attempt is rejected.\n+        dbl_tx = CTransaction()\n+        dbl_tx.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n+        dbl_tx.vout = [CTxOut(initial_nValue - 30*COIN, CScript([1]))]\n+        dbl_tx_hex = txToHex(dbl_tx)\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(dbl_tx_hex, True)\n+        except JSONRPCException as exp:\n+            assert_equal(exp.error['code'], -26) # insufficient fee\n+        else:\n+            assert(False) # transaction mistakenly accepted!\n+\n+        # Accepted with sufficient fee\n+        dbl_tx = CTransaction()\n+        dbl_tx.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n+        dbl_tx.vout = [CTxOut(1*COIN, CScript([1]))]\n+        dbl_tx_hex = txToHex(dbl_tx)\n+        self.nodes[0].sendrawtransaction(dbl_tx_hex, True)\n+\n+        mempool = self.nodes[0].getrawmempool()\n+        for doublespent_txid in chain_txids:\n+            assert(doublespent_txid not in mempool)\n+\n+    def test_doublespend_tree(self):\n+        \"\"\"Doublespend of a big tree of transactions\"\"\"\n+\n+        initial_nValue = 50*COIN\n+        tx0_outpoint = make_utxo(self.nodes[0], initial_nValue)\n+\n+        def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _total_txs=None):\n+            if _total_txs is None:\n+                _total_txs = [0]\n+            if _total_txs[0] >= max_txs:\n+                return\n+\n+            txout_value = (initial_value - fee) // tree_width\n+            if txout_value < fee:\n+                return\n+\n+            vout = [CTxOut(txout_value, CScript([i+1]))\n+                    for i in range(tree_width)]\n+            tx = CTransaction()\n+            tx.vin = [CTxIn(prevout, nSequence=0)]\n+            tx.vout = vout\n+            tx_hex = txToHex(tx)\n+\n+            assert(len(tx.serialize()) < 100000)\n+            txid = self.nodes[0].sendrawtransaction(tx_hex, True)\n+            yield tx\n+            _total_txs[0] += 1\n+\n+            txid = int(txid, 16)\n+\n+            for i, txout in enumerate(tx.vout):\n+                for x in branch(COutPoint(txid, i), txout_value,\n+                                  max_txs,\n+                                  tree_width=tree_width, fee=fee,\n+                                  _total_txs=_total_txs):\n+                    yield x\n+\n+        fee = 0.0001*COIN\n+        n = MAX_REPLACEMENT_LIMIT\n+        tree_txs = list(branch(tx0_outpoint, initial_nValue, n, fee=fee))\n+        assert_equal(len(tree_txs), n)\n+\n+        # Attempt double-spend, will fail because too little fee paid\n+        dbl_tx = CTransaction()\n+        dbl_tx.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n+        dbl_tx.vout = [CTxOut(initial_nValue - fee*n, CScript([1]))]\n+        dbl_tx_hex = txToHex(dbl_tx)\n+        try:\n+            self.nodes[0].sendrawtransaction(dbl_tx_hex, True)\n+        except JSONRPCException as exp:\n+            assert_equal(exp.error['code'], -26) # insufficient fee\n+        else:\n+            assert(False)\n+\n+        # 1 BTC fee is enough\n+        dbl_tx = CTransaction()\n+        dbl_tx.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n+        dbl_tx.vout = [CTxOut(initial_nValue - fee*n - 1*COIN, CScript([1]))]\n+        dbl_tx_hex = txToHex(dbl_tx)\n+        self.nodes[0].sendrawtransaction(dbl_tx_hex, True)\n+\n+        mempool = self.nodes[0].getrawmempool()\n+\n+        for tx in tree_txs:\n+            tx.rehash()\n+            assert (tx.hash not in mempool)\n+\n+        # Try again, but with more total transactions than the \"max txs\n+        # double-spent at once\" anti-DoS limit.\n+        for n in (MAX_REPLACEMENT_LIMIT+1, MAX_REPLACEMENT_LIMIT*2):\n+            fee = 0.0001*COIN\n+            tx0_outpoint = make_utxo(self.nodes[0], initial_nValue)\n+            tree_txs = list(branch(tx0_outpoint, initial_nValue, n, fee=fee))\n+            assert_equal(len(tree_txs), n)\n+\n+            dbl_tx = CTransaction()\n+            dbl_tx.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n+            dbl_tx.vout = [CTxOut(initial_nValue - 2*fee*n, CScript([1]))]\n+            dbl_tx_hex = txToHex(dbl_tx)\n+            try:\n+                self.nodes[0].sendrawtransaction(dbl_tx_hex, True)\n+            except JSONRPCException as exp:\n+                assert_equal(exp.error['code'], -26)\n+                assert_equal(\"too many potential replacements\" in exp.error['message'], True)\n+            else:\n+                assert(False)\n+\n+            for tx in tree_txs:\n+                tx.rehash()\n+                self.nodes[0].getrawtransaction(tx.hash)\n+\n+    def test_replacement_feeperkb(self):\n+        \"\"\"Replacement requires fee-per-KB to be higher\"\"\"\n+        tx0_outpoint = make_utxo(self.nodes[0], 1.1*COIN)\n+\n+        tx1a = CTransaction()\n+        tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n+        tx1a.vout = [CTxOut(1*COIN, CScript([b'a']))]\n+        tx1a_hex = txToHex(tx1a)\n+        tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, True)\n+\n+        # Higher fee, but the fee per KB is much lower, so the replacement is\n+        # rejected.\n+        tx1b = CTransaction()\n+        tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n+        tx1b.vout = [CTxOut(0.001*COIN, CScript([b'a'*999000]))]\n+        tx1b_hex = txToHex(tx1b)\n+\n+        try:\n+            tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, True)\n+        except JSONRPCException as exp:\n+            assert_equal(exp.error['code'], -26) # insufficient fee\n+        else:\n+            assert(False)\n+\n+    def test_spends_of_conflicting_outputs(self):\n+        \"\"\"Replacements that spend conflicting tx outputs are rejected\"\"\"\n+        utxo1 = make_utxo(self.nodes[0], 1.2*COIN)\n+        utxo2 = make_utxo(self.nodes[0], 3.0*COIN)\n+\n+        tx1a = CTransaction()\n+        tx1a.vin = [CTxIn(utxo1, nSequence=0)]\n+        tx1a.vout = [CTxOut(1.1*COIN, CScript([b'a']))]\n+        tx1a_hex = txToHex(tx1a)\n+        tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, True)\n+\n+        tx1a_txid = int(tx1a_txid, 16)\n+\n+        # Direct spend an output of the transaction we're replacing.\n+        tx2 = CTransaction()\n+        tx2.vin = [CTxIn(utxo1, nSequence=0), CTxIn(utxo2, nSequence=0)]\n+        tx2.vin.append(CTxIn(COutPoint(tx1a_txid, 0), nSequence=0))\n+        tx2.vout = tx1a.vout\n+        tx2_hex = txToHex(tx2)\n+\n+        try:\n+            tx2_txid = self.nodes[0].sendrawtransaction(tx2_hex, True)\n+        except JSONRPCException as exp:\n+            assert_equal(exp.error['code'], -26)\n+        else:\n+            assert(False)\n+\n+        # Spend tx1a's output to test the indirect case.\n+        tx1b = CTransaction()\n+        tx1b.vin = [CTxIn(COutPoint(tx1a_txid, 0), nSequence=0)]\n+        tx1b.vout = [CTxOut(1.0*COIN, CScript([b'a']))]\n+        tx1b_hex = txToHex(tx1b)\n+        tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, True)\n+        tx1b_txid = int(tx1b_txid, 16)\n+\n+        tx2 = CTransaction()\n+        tx2.vin = [CTxIn(utxo1, nSequence=0), CTxIn(utxo2, nSequence=0),\n+                   CTxIn(COutPoint(tx1b_txid, 0))]\n+        tx2.vout = tx1a.vout\n+        tx2_hex = txToHex(tx2)\n+\n+        try:\n+            tx2_txid = self.nodes[0].sendrawtransaction(tx2_hex, True)\n+        except JSONRPCException as exp:\n+            assert_equal(exp.error['code'], -26)\n+        else:\n+            assert(False)\n+\n+    def test_new_unconfirmed_inputs(self):\n+        \"\"\"Replacements that add new unconfirmed inputs are rejected\"\"\"\n+        confirmed_utxo = make_utxo(self.nodes[0], 1.1*COIN)\n+        unconfirmed_utxo = make_utxo(self.nodes[0], 0.1*COIN, False)\n+\n+        tx1 = CTransaction()\n+        tx1.vin = [CTxIn(confirmed_utxo)]\n+        tx1.vout = [CTxOut(1.0*COIN, CScript([b'a']))]\n+        tx1_hex = txToHex(tx1)\n+        tx1_txid = self.nodes[0].sendrawtransaction(tx1_hex, True)\n+\n+        tx2 = CTransaction()\n+        tx2.vin = [CTxIn(confirmed_utxo), CTxIn(unconfirmed_utxo)]\n+        tx2.vout = tx1.vout\n+        tx2_hex = txToHex(tx2)\n+\n+        try:\n+            tx2_txid = self.nodes[0].sendrawtransaction(tx2_hex, True)\n+        except JSONRPCException as exp:\n+            assert_equal(exp.error['code'], -26)\n+        else:\n+            assert(False)\n+\n+    def test_too_many_replacements(self):\n+        \"\"\"Replacements that evict too many transactions are rejected\"\"\"\n+        # Try directly replacing more than MAX_REPLACEMENT_LIMIT\n+        # transactions\n+\n+        # Start by creating a single transaction with many outputs\n+        initial_nValue = 10*COIN\n+        utxo = make_utxo(self.nodes[0], initial_nValue)\n+        fee = 0.0001*COIN\n+        split_value = int((initial_nValue-fee)/(MAX_REPLACEMENT_LIMIT+1))\n+        actual_fee = initial_nValue - split_value*(MAX_REPLACEMENT_LIMIT+1)\n+\n+        outputs = []\n+        for i in range(MAX_REPLACEMENT_LIMIT+1):\n+            outputs.append(CTxOut(split_value, CScript([1])))\n+\n+        splitting_tx = CTransaction()\n+        splitting_tx.vin = [CTxIn(utxo, nSequence=0)]\n+        splitting_tx.vout = outputs\n+        splitting_tx_hex = txToHex(splitting_tx)\n+\n+        txid = self.nodes[0].sendrawtransaction(splitting_tx_hex, True)\n+        txid = int(txid, 16)\n+\n+        # Now spend each of those outputs individually\n+        for i in range(MAX_REPLACEMENT_LIMIT+1):\n+            tx_i = CTransaction()\n+            tx_i.vin = [CTxIn(COutPoint(txid, i), nSequence=0)]\n+            tx_i.vout = [CTxOut(split_value-fee, CScript([b'a']))]\n+            tx_i_hex = txToHex(tx_i)\n+            self.nodes[0].sendrawtransaction(tx_i_hex, True)\n+\n+        # Now create doublespend of the whole lot; should fail.\n+        # Need a big enough fee to cover all spending transactions and have\n+        # a higher fee rate\n+        double_spend_value = (split_value-100*fee)*(MAX_REPLACEMENT_LIMIT+1)\n+        inputs = []\n+        for i in range(MAX_REPLACEMENT_LIMIT+1):\n+            inputs.append(CTxIn(COutPoint(txid, i), nSequence=0))\n+        double_tx = CTransaction()\n+        double_tx.vin = inputs\n+        double_tx.vout = [CTxOut(double_spend_value, CScript([b'a']))]\n+        double_tx_hex = txToHex(double_tx)\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(double_tx_hex, True)\n+        except JSONRPCException as exp:\n+            assert_equal(exp.error['code'], -26)\n+            assert_equal(\"too many potential replacements\" in exp.error['message'], True)\n+        else:\n+            assert(False)\n+\n+        # If we remove an input, it should pass\n+        double_tx = CTransaction()\n+        double_tx.vin = inputs[0:-1]\n+        double_tx.vout = [CTxOut(double_spend_value, CScript([b'a']))]\n+        double_tx_hex = txToHex(double_tx)\n+        self.nodes[0].sendrawtransaction(double_tx_hex, True)\n+\n+    def test_opt_in(self):\n+        \"\"\" Replacing should only work if orig tx opted in \"\"\"\n+        tx0_outpoint = make_utxo(self.nodes[0], 1.1*COIN)\n+\n+        # Create a non-opting in transaction\n+        tx1a = CTransaction()\n+        tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0xffffffff)]\n+        tx1a.vout = [CTxOut(1*COIN, CScript([b'a']))]\n+        tx1a_hex = txToHex(tx1a)\n+        tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, True)\n+\n+        # Shouldn't be able to double-spend\n+        tx1b = CTransaction()\n+        tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n+        tx1b.vout = [CTxOut(0.9*COIN, CScript([b'b']))]\n+        tx1b_hex = txToHex(tx1b)\n+\n+        try:\n+            tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, True)\n+        except JSONRPCException as exp:\n+            assert_equal(exp.error['code'], -26)\n+        else:\n+            print tx1b_txid\n+            assert(False)\n+\n+        tx1_outpoint = make_utxo(self.nodes[0], 1.1*COIN)\n+\n+        # Create a different non-opting in transaction\n+        tx2a = CTransaction()\n+        tx2a.vin = [CTxIn(tx1_outpoint, nSequence=0xfffffffe)]\n+        tx2a.vout = [CTxOut(1*COIN, CScript([b'a']))]\n+        tx2a_hex = txToHex(tx2a)\n+        tx2a_txid = self.nodes[0].sendrawtransaction(tx2a_hex, True)\n+\n+        # Still shouldn't be able to double-spend\n+        tx2b = CTransaction()\n+        tx2b.vin = [CTxIn(tx1_outpoint, nSequence=0)]\n+        tx2b.vout = [CTxOut(0.9*COIN, CScript([b'b']))]\n+        tx2b_hex = txToHex(tx2b)\n+\n+        try:\n+            tx2b_txid = self.nodes[0].sendrawtransaction(tx2b_hex, True)\n+        except JSONRPCException as exp:\n+            assert_equal(exp.error['code'], -26)\n+        else:\n+            assert(False)\n+\n+        # Now create a new transaction that spends from tx1a and tx2a\n+        # opt-in on one of the inputs\n+        # Transaction should be replaceable on either input\n+\n+        tx1a_txid = int(tx1a_txid, 16)\n+        tx2a_txid = int(tx2a_txid, 16)\n+\n+        tx3a = CTransaction()\n+        tx3a.vin = [CTxIn(COutPoint(tx1a_txid, 0), nSequence=0xffffffff),\n+                    CTxIn(COutPoint(tx2a_txid, 0), nSequence=0xfffffffd)]\n+        tx3a.vout = [CTxOut(0.9*COIN, CScript([b'c'])), CTxOut(0.9*COIN, CScript([b'd']))]\n+        tx3a_hex = txToHex(tx3a)\n+\n+        self.nodes[0].sendrawtransaction(tx3a_hex, True)\n+\n+        tx3b = CTransaction()\n+        tx3b.vin = [CTxIn(COutPoint(tx1a_txid, 0), nSequence=0)]\n+        tx3b.vout = [CTxOut(0.5*COIN, CScript([b'e']))]\n+        tx3b_hex = txToHex(tx3b)\n+\n+        tx3c = CTransaction()\n+        tx3c.vin = [CTxIn(COutPoint(tx2a_txid, 0), nSequence=0)]\n+        tx3c.vout = [CTxOut(0.5*COIN, CScript([b'f']))]\n+        tx3c_hex = txToHex(tx3c)\n+\n+        self.nodes[0].sendrawtransaction(tx3b_hex, True)\n+        # If tx3b was accepted, tx3c won't look like a replacement,\n+        # but make sure it is accepted anyway\n+        self.nodes[0].sendrawtransaction(tx3c_hex, True)\n+\n+if __name__ == '__main__':\n+    ReplaceByFeeTest().main()"
      },
      {
        "sha": "e48d0a6d4340f8d752e1a39e8d69d77e3712ee7c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 197,
        "deletions": 5,
        "changes": 202,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e935865b9ee3a79fc63f5766074b6f539a0cf85/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e935865b9ee3a79fc63f5766074b6f539a0cf85/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0e935865b9ee3a79fc63f5766074b6f539a0cf85",
        "patch": "@@ -832,15 +832,42 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         return state.Invalid(false, REJECT_ALREADY_KNOWN, \"txn-already-in-mempool\");\n \n     // Check for conflicts with in-memory transactions\n+    set<uint256> setConflicts;\n     {\n     LOCK(pool.cs); // protect pool.mapNextTx\n-    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+    BOOST_FOREACH(const CTxIn &txin, tx.vin)\n     {\n-        COutPoint outpoint = tx.vin[i].prevout;\n-        if (pool.mapNextTx.count(outpoint))\n+        if (pool.mapNextTx.count(txin.prevout))\n         {\n-            // Disable replacement feature for now\n-            return state.Invalid(false, REJECT_CONFLICT, \"txn-mempool-conflict\");\n+            const CTransaction *ptxConflicting = pool.mapNextTx[txin.prevout].ptx;\n+            if (!setConflicts.count(ptxConflicting->GetHash()))\n+            {\n+                // Allow opt-out of transaction replacement by setting\n+                // nSequence >= maxint-1 on all inputs.\n+                //\n+                // maxint-1 is picked to still allow use of nLockTime by\n+                // non-replacable transactions. All inputs rather than just one\n+                // is for the sake of multi-party protocols, where we don't\n+                // want a single party to be able to disable replacement.\n+                //\n+                // The opt-out ignores descendants as anyone relying on\n+                // first-seen mempool behavior should be checking all\n+                // unconfirmed ancestors anyway; doing otherwise is hopelessly\n+                // insecure.\n+                bool fReplacementOptOut = true;\n+                BOOST_FOREACH(const CTxIn &txin, ptxConflicting->vin)\n+                {\n+                    if (txin.nSequence < std::numeric_limits<unsigned int>::max()-1)\n+                    {\n+                        fReplacementOptOut = false;\n+                        break;\n+                    }\n+                }\n+                if (fReplacementOptOut)\n+                    return state.Invalid(false, REJECT_CONFLICT, \"txn-mempool-conflict\");\n+\n+                setConflicts.insert(ptxConflicting->GetHash());\n+            }\n         }\n     }\n     }\n@@ -958,6 +985,160 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             return state.DoS(0, false, REJECT_NONSTANDARD, \"too-long-mempool-chain\", false, errString);\n         }\n \n+        // A transaction that spends outputs that would be replaced by it is invalid. Now\n+        // that we have the set of all ancestors we can detect this\n+        // pathological case by making sure setConflicts and setAncestors don't\n+        // intersect.\n+        BOOST_FOREACH(CTxMemPool::txiter ancestorIt, setAncestors)\n+        {\n+            const uint256 &hashAncestor = ancestorIt->GetTx().GetHash();\n+            if (setConflicts.count(hashAncestor))\n+            {\n+                return state.DoS(10, error(\"AcceptToMemoryPool: %s spends conflicting transaction %s\",\n+                                           hash.ToString(),\n+                                           hashAncestor.ToString()),\n+                                 REJECT_INVALID, \"bad-txns-spends-conflicting-tx\");\n+            }\n+        }\n+\n+        // Check if it's economically rational to mine this transaction rather\n+        // than the ones it replaces.\n+        CAmount nConflictingFees = 0;\n+        size_t nConflictingSize = 0;\n+        uint64_t nConflictingCount = 0;\n+        CTxMemPool::setEntries allConflicting;\n+\n+        // If we don't hold the lock allConflicting might be incomplete; the\n+        // subsequent RemoveStaged() and addUnchecked() calls don't guarantee\n+        // mempool consistency for us.\n+        LOCK(pool.cs);\n+        if (setConflicts.size())\n+        {\n+            CFeeRate newFeeRate(nFees, nSize);\n+            set<uint256> setConflictsParents;\n+            const int maxDescendantsToVisit = 100;\n+            CTxMemPool::setEntries setIterConflicting;\n+            BOOST_FOREACH(const uint256 &hashConflicting, setConflicts)\n+            {\n+                CTxMemPool::txiter mi = pool.mapTx.find(hashConflicting);\n+                if (mi == pool.mapTx.end())\n+                    continue;\n+\n+                // Save these to avoid repeated lookups\n+                setIterConflicting.insert(mi);\n+\n+                // If this entry is \"dirty\", then we don't have descendant\n+                // state for this transaction, which means we probably have\n+                // lots of in-mempool descendants.\n+                // Don't allow replacements of dirty transactions, to ensure\n+                // that we don't spend too much time walking descendants.\n+                // This should be rare.\n+                if (mi->IsDirty()) {\n+                    return state.DoS(0,\n+                            error(\"AcceptToMemoryPool: rejecting replacement %s; cannot replace tx %s with untracked descendants\",\n+                                hash.ToString(),\n+                                mi->GetTx().GetHash().ToString()),\n+                            REJECT_NONSTANDARD, \"too many potential replacements\");\n+                }\n+\n+                // Don't allow the replacement to reduce the feerate of the\n+                // mempool.\n+                //\n+                // We usually don't want to accept replacements with lower\n+                // feerates than what they replaced as that would lower the\n+                // feerate of the next block. Requiring that the feerate always\n+                // be increased is also an easy-to-reason about way to prevent\n+                // DoS attacks via replacements.\n+                //\n+                // The mining code doesn't (currently) take children into\n+                // account (CPFP) so we only consider the feerates of\n+                // transactions being directly replaced, not their indirect\n+                // descendants. While that does mean high feerate children are\n+                // ignored when deciding whether or not to replace, we do\n+                // require the replacement to pay more overall fees too,\n+                // mitigating most cases.\n+                CFeeRate oldFeeRate(mi->GetFee(), mi->GetTxSize());\n+                if (newFeeRate <= oldFeeRate)\n+                {\n+                    return state.DoS(0,\n+                            error(\"AcceptToMemoryPool: rejecting replacement %s; new feerate %s <= old feerate %s\",\n+                                  hash.ToString(),\n+                                  newFeeRate.ToString(),\n+                                  oldFeeRate.ToString()),\n+                            REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n+                }\n+\n+                BOOST_FOREACH(const CTxIn &txin, mi->GetTx().vin)\n+                {\n+                    setConflictsParents.insert(txin.prevout.hash);\n+                }\n+\n+                nConflictingCount += mi->GetCountWithDescendants();\n+            }\n+            // This potentially overestimates the number of actual descendants\n+            // but we just want to be conservative to avoid doing too much\n+            // work.\n+            if (nConflictingCount <= maxDescendantsToVisit) {\n+                // If not too many to replace, then calculate the set of\n+                // transactions that would have to be evicted\n+                BOOST_FOREACH(CTxMemPool::txiter it, setIterConflicting) {\n+                    pool.CalculateDescendants(it, allConflicting);\n+                }\n+                BOOST_FOREACH(CTxMemPool::txiter it, allConflicting) {\n+                    nConflictingFees += it->GetFee();\n+                    nConflictingSize += it->GetTxSize();\n+                }\n+            } else {\n+                return state.DoS(0,\n+                        error(\"AcceptToMemoryPool: rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n+                            hash.ToString(),\n+                            nConflictingCount,\n+                            maxDescendantsToVisit),\n+                        REJECT_NONSTANDARD, \"too many potential replacements\");\n+            }\n+\n+            for (unsigned int j = 0; j < tx.vin.size(); j++)\n+            {\n+                // We don't want to accept replacements that require low\n+                // feerate junk to be mined first. Ideally we'd keep track of\n+                // the ancestor feerates and make the decision based on that,\n+                // but for now requiring all new inputs to be confirmed works.\n+                if (!setConflictsParents.count(tx.vin[j].prevout.hash))\n+                {\n+                    // Rather than check the UTXO set - potentially expensive -\n+                    // it's cheaper to just check if the new input refers to a\n+                    // tx that's in the mempool.\n+                    if (pool.mapTx.find(tx.vin[j].prevout.hash) != pool.mapTx.end())\n+                        return state.DoS(0, error(\"AcceptToMemoryPool: replacement %s adds unconfirmed input, idx %d\",\n+                                                  hash.ToString(), j),\n+                                         REJECT_NONSTANDARD, \"replacement-adds-unconfirmed\");\n+                }\n+            }\n+\n+            // The replacement must pay greater fees than the transactions it\n+            // replaces - if we did the bandwidth used by those conflicting\n+            // transactions would not be paid for.\n+            if (nFees < nConflictingFees)\n+            {\n+                return state.DoS(0, error(\"AcceptToMemoryPool: rejecting replacement %s, less fees than conflicting txs; %s < %s\",\n+                                          hash.ToString(), FormatMoney(nFees), FormatMoney(nConflictingFees)),\n+                                 REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n+            }\n+\n+            // Finally in addition to paying more fees than the conflicts the\n+            // new transaction must pay for its own bandwidth.\n+            CAmount nDeltaFees = nFees - nConflictingFees;\n+            if (nDeltaFees < ::minRelayTxFee.GetFee(nSize))\n+            {\n+                return state.DoS(0,\n+                        error(\"AcceptToMemoryPool: rejecting replacement %s, not enough additional fees to relay; %s < %s\",\n+                              hash.ToString(),\n+                              FormatMoney(nDeltaFees),\n+                              FormatMoney(::minRelayTxFee.GetFee(nSize))),\n+                        REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n+            }\n+        }\n+\n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n         if (!CheckInputs(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS, true))\n@@ -978,6 +1159,17 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n                 __func__, hash.ToString(), FormatStateMessage(state));\n         }\n \n+        // Remove conflicting transactions from the mempool\n+        BOOST_FOREACH(const CTxMemPool::txiter it, allConflicting)\n+        {\n+            LogPrint(\"mempool\", \"replacing tx %s with %s for %s BTC additional fees, %d delta bytes\\n\",\n+                    it->GetTx().GetHash().ToString(),\n+                    hash.ToString(),\n+                    FormatMoney(nFees - nConflictingFees),\n+                    (int)nSize - (int)nConflictingSize);\n+        }\n+        pool.RemoveStaged(allConflicting);\n+\n         // Store transaction in memory\n         pool.addUnchecked(hash, entry, setAncestors, !IsInitialBlockDownload());\n "
      },
      {
        "sha": "7f43120f7f54939434233f1de9b7543a894c4ed9",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e935865b9ee3a79fc63f5766074b6f539a0cf85/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e935865b9ee3a79fc63f5766074b6f539a0cf85/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=0e935865b9ee3a79fc63f5766074b6f539a0cf85",
        "patch": "@@ -420,6 +420,11 @@ class CTxMemPool\n      */\n     bool CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents = true);\n \n+    /** Populate setDescendants with all in-mempool descendants of hash.\n+     *  Assumes that setDescendants includes all in-mempool descendants of anything\n+     *  already in it.  */\n+    void CalculateDescendants(txiter it, setEntries &setDescendants);\n+\n     /** The minimum fee to get into the mempool, which may itself not be enough\n       *  for larger-sized transactions.\n       *  The minReasonableRelayFee constructor arg is used to bound the time it\n@@ -505,10 +510,6 @@ class CTxMemPool\n     void UpdateForRemoveFromMempool(const setEntries &entriesToRemove);\n     /** Sever link between specified transaction and direct children. */\n     void UpdateChildrenForRemoval(txiter entry);\n-    /** Populate setDescendants with all in-mempool descendants of hash.\n-     *  Assumes that setDescendants includes all in-mempool descendants of anything\n-     *  already in it.  */\n-    void CalculateDescendants(txiter it, setEntries &setDescendants);\n \n     /** Before calling removeUnchecked for a given transaction,\n      *  UpdateForRemoveFromMempool must be called on the entire (dependent) set"
      }
    ]
  },
  {
    "sha": "411b05ac9511395923976bfbd0c153ddabf2ebcf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTFiMDVhYzk1MTEzOTU5MjM5NzZiZmJkMGMxNTNkZGFiZjJlYmNm",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-10-08T07:58:31Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-27T12:26:00Z"
      },
      "message": "Refactor parameter interaction, call it before AppInit2()",
      "tree": {
        "sha": "bd7dd56d320a4c771acb6956e0e8849d25341423",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd7dd56d320a4c771acb6956e0e8849d25341423"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/411b05ac9511395923976bfbd0c153ddabf2ebcf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWWEvYAAoJECnUvLZBb1PsOEsP/2NzYcv1Z7kcnDFygPqg5kjY\nUajKo0F4R1vjzFzElvapMy27OZ2yF7bFXU1BUakvogvJR9AP40LgV8/b/1Fyp07E\nPvNW2y09qYxpDG6tk4PtcyH5VRVycTI79ewiBo0M8lCOJ8vf7smd90gh7DjZqNjI\n+vUjB6kRCZCBodxq0M/i83aGI29ImjMxuZ5H4okyYLHvUxKeWrxOn3tuAoSF9Jey\nMAxlCMl/1OwEwtTeXB4l7Qh9CWnE8Mvj3+UtH9cTEomZojwsduQNceXBamXtGs7d\nEc7KMxiMdm0y0xi94MLIFRliIaf8AbRvPC6yrpfLZEGd09EGhhP/SsguKAwABo5v\nUBHh1GkGx/eH8rGX712rcyukyF3NF+gqVhCuVOLJpcUmbD13anN4YaMtXINq4dAw\nUTLwUJRKRZ/UMrWZeKBZ6aACXqwzATiXBfagnMv3dClYWoXKzIW8xO80uZNqJBOv\nsIFTJQJ7DRk8f5I9tvkXu9DftuVfHOpJ/a9wAI7oKyo9VdATKCmD6Kbhk6aSeRUK\ncOJYbneC/h9geoQwpWlo0L+uq7D60RjfVIzrVbmbba7U2EO4+pboYJ1BnUCCaioX\nVuSb22ghG5TBHGy+IjGQvIJkRZakFGOWjSOetUySi1X+JUwN3C46BEoCOoJvgUOR\n+Ha39S4qcBGOOEUnwv5z\n=yzjm\n-----END PGP SIGNATURE-----",
        "payload": "tree bd7dd56d320a4c771acb6956e0e8849d25341423\nparent 05d591839fe1fefb0cf359083bce87cb128f75a6\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1444291111 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1448627160 +0100\n\nRefactor parameter interaction, call it before AppInit2()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/411b05ac9511395923976bfbd0c153ddabf2ebcf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/411b05ac9511395923976bfbd0c153ddabf2ebcf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/411b05ac9511395923976bfbd0c153ddabf2ebcf/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "05d591839fe1fefb0cf359083bce87cb128f75a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05d591839fe1fefb0cf359083bce87cb128f75a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/05d591839fe1fefb0cf359083bce87cb128f75a6"
      }
    ],
    "stats": {
      "total": 127,
      "additions": 67,
      "deletions": 60
    },
    "files": [
      {
        "sha": "f1875731d584f8608f92075c294b002ac7c0976f",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/411b05ac9511395923976bfbd0c153ddabf2ebcf/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/411b05ac9511395923976bfbd0c153ddabf2ebcf/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=411b05ac9511395923976bfbd0c153ddabf2ebcf",
        "patch": "@@ -151,6 +151,7 @@ bool AppInit(int argc, char* argv[])\n #endif\n         SoftSetBoolArg(\"-server\", true);\n \n+        InitParameterInteraction();\n         fRet = AppInit2(threadGroup, scheduler);\n     }\n     catch (const std::exception& e) {"
      },
      {
        "sha": "1e817c18edcd86b66713198d460bdd6bec667beb",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 64,
        "deletions": 60,
        "changes": 124,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/411b05ac9511395923976bfbd0c153ddabf2ebcf/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/411b05ac9511395923976bfbd0c153ddabf2ebcf/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=411b05ac9511395923976bfbd0c153ddabf2ebcf",
        "patch": "@@ -681,6 +681,70 @@ bool AppInitServers(boost::thread_group& threadGroup)\n     return true;\n }\n \n+// Parameter interaction based on rules\n+void InitParameterInteraction()\n+{\n+    // when specifying an explicit binding address, you want to listen on it\n+    // even when -connect or -proxy is specified\n+    if (mapArgs.count(\"-bind\")) {\n+        if (SoftSetBoolArg(\"-listen\", true))\n+            LogPrintf(\"%s: parameter interaction: -bind set -> setting -listen=1\\n\", __func__);\n+    }\n+    if (mapArgs.count(\"-whitebind\")) {\n+        if (SoftSetBoolArg(\"-listen\", true))\n+            LogPrintf(\"%s: parameter interaction: -whitebind set -> setting -listen=1\\n\", __func__);\n+    }\n+\n+    if (mapArgs.count(\"-connect\") && mapMultiArgs[\"-connect\"].size() > 0) {\n+        // when only connecting to trusted nodes, do not seed via DNS, or listen by default\n+        if (SoftSetBoolArg(\"-dnsseed\", false))\n+            LogPrintf(\"%s: parameter interaction: -connect set -> setting -dnsseed=0\\n\", __func__);\n+        if (SoftSetBoolArg(\"-listen\", false))\n+            LogPrintf(\"%s: parameter interaction: -connect set -> setting -listen=0\\n\", __func__);\n+    }\n+\n+    if (mapArgs.count(\"-proxy\")) {\n+        // to protect privacy, do not listen by default if a default proxy server is specified\n+        if (SoftSetBoolArg(\"-listen\", false))\n+            LogPrintf(\"%s: parameter interaction: -proxy set -> setting -listen=0\\n\", __func__);\n+        // to protect privacy, do not use UPNP when a proxy is set. The user may still specify -listen=1\n+        // to listen locally, so don't rely on this happening through -listen below.\n+        if (SoftSetBoolArg(\"-upnp\", false))\n+            LogPrintf(\"%s: parameter interaction: -proxy set -> setting -upnp=0\\n\", __func__);\n+        // to protect privacy, do not discover addresses by default\n+        if (SoftSetBoolArg(\"-discover\", false))\n+            LogPrintf(\"%s: parameter interaction: -proxy set -> setting -discover=0\\n\", __func__);\n+    }\n+\n+    if (!GetBoolArg(\"-listen\", DEFAULT_LISTEN)) {\n+        // do not map ports or try to retrieve public IP when not listening (pointless)\n+        if (SoftSetBoolArg(\"-upnp\", false))\n+            LogPrintf(\"%s: parameter interaction: -listen=0 -> setting -upnp=0\\n\", __func__);\n+        if (SoftSetBoolArg(\"-discover\", false))\n+            LogPrintf(\"%s: parameter interaction: -listen=0 -> setting -discover=0\\n\", __func__);\n+        if (SoftSetBoolArg(\"-listenonion\", false))\n+            LogPrintf(\"%s: parameter interaction: -listen=0 -> setting -listenonion=0\\n\", __func__);\n+    }\n+\n+    if (mapArgs.count(\"-externalip\")) {\n+        // if an explicit public IP is specified, do not try to find others\n+        if (SoftSetBoolArg(\"-discover\", false))\n+            LogPrintf(\"%s: parameter interaction: -externalip set -> setting -discover=0\\n\", __func__);\n+    }\n+\n+    if (GetBoolArg(\"-salvagewallet\", false)) {\n+        // Rewrite just private keys: rescan to find transactions\n+        if (SoftSetBoolArg(\"-rescan\", true))\n+            LogPrintf(\"%s: parameter interaction: -salvagewallet=1 -> setting -rescan=1\\n\", __func__);\n+    }\n+\n+    // -zapwallettx implies a rescan\n+    if (GetBoolArg(\"-zapwallettxes\", false)) {\n+        if (SoftSetBoolArg(\"-rescan\", true))\n+            LogPrintf(\"%s: parameter interaction: -zapwallettxes=<mode> -> setting -rescan=1\\n\", __func__);\n+    }\n+}\n+\n /** Initialize bitcoin.\n  *  @pre Parameters should be parsed and config file should be read.\n  */\n@@ -754,66 +818,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     LogPrintf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");\n     LogPrintf(\"Bitcoin version %s (%s)\\n\", FormatFullVersion(), CLIENT_DATE);\n \n-    // when specifying an explicit binding address, you want to listen on it\n-    // even when -connect or -proxy is specified\n-    if (mapArgs.count(\"-bind\")) {\n-        if (SoftSetBoolArg(\"-listen\", true))\n-            LogPrintf(\"%s: parameter interaction: -bind set -> setting -listen=1\\n\", __func__);\n-    }\n-    if (mapArgs.count(\"-whitebind\")) {\n-        if (SoftSetBoolArg(\"-listen\", true))\n-            LogPrintf(\"%s: parameter interaction: -whitebind set -> setting -listen=1\\n\", __func__);\n-    }\n-\n-    if (mapArgs.count(\"-connect\") && mapMultiArgs[\"-connect\"].size() > 0) {\n-        // when only connecting to trusted nodes, do not seed via DNS, or listen by default\n-        if (SoftSetBoolArg(\"-dnsseed\", false))\n-            LogPrintf(\"%s: parameter interaction: -connect set -> setting -dnsseed=0\\n\", __func__);\n-        if (SoftSetBoolArg(\"-listen\", false))\n-            LogPrintf(\"%s: parameter interaction: -connect set -> setting -listen=0\\n\", __func__);\n-    }\n-\n-    if (mapArgs.count(\"-proxy\")) {\n-        // to protect privacy, do not listen by default if a default proxy server is specified\n-        if (SoftSetBoolArg(\"-listen\", false))\n-            LogPrintf(\"%s: parameter interaction: -proxy set -> setting -listen=0\\n\", __func__);\n-        // to protect privacy, do not use UPNP when a proxy is set. The user may still specify -listen=1\n-        // to listen locally, so don't rely on this happening through -listen below.\n-        if (SoftSetBoolArg(\"-upnp\", false))\n-            LogPrintf(\"%s: parameter interaction: -proxy set -> setting -upnp=0\\n\", __func__);\n-        // to protect privacy, do not discover addresses by default\n-        if (SoftSetBoolArg(\"-discover\", false))\n-            LogPrintf(\"%s: parameter interaction: -proxy set -> setting -discover=0\\n\", __func__);\n-    }\n-\n-    if (!GetBoolArg(\"-listen\", DEFAULT_LISTEN)) {\n-        // do not map ports or try to retrieve public IP when not listening (pointless)\n-        if (SoftSetBoolArg(\"-upnp\", false))\n-            LogPrintf(\"%s: parameter interaction: -listen=0 -> setting -upnp=0\\n\", __func__);\n-        if (SoftSetBoolArg(\"-discover\", false))\n-            LogPrintf(\"%s: parameter interaction: -listen=0 -> setting -discover=0\\n\", __func__);\n-        if (SoftSetBoolArg(\"-listenonion\", false))\n-            LogPrintf(\"%s: parameter interaction: -listen=0 -> setting -listenonion=0\\n\", __func__);\n-    }\n-\n-    if (mapArgs.count(\"-externalip\")) {\n-        // if an explicit public IP is specified, do not try to find others\n-        if (SoftSetBoolArg(\"-discover\", false))\n-            LogPrintf(\"%s: parameter interaction: -externalip set -> setting -discover=0\\n\", __func__);\n-    }\n-\n-    if (GetBoolArg(\"-salvagewallet\", false)) {\n-        // Rewrite just private keys: rescan to find transactions\n-        if (SoftSetBoolArg(\"-rescan\", true))\n-            LogPrintf(\"%s: parameter interaction: -salvagewallet=1 -> setting -rescan=1\\n\", __func__);\n-    }\n-\n-    // -zapwallettx implies a rescan\n-    if (GetBoolArg(\"-zapwallettxes\", false)) {\n-        if (SoftSetBoolArg(\"-rescan\", true))\n-            LogPrintf(\"%s: parameter interaction: -zapwallettxes=<mode> -> setting -rescan=1\\n\", __func__);\n-    }\n-\n     // if using block pruning, then disable txindex\n     if (GetArg(\"-prune\", 0)) {\n         if (GetBoolArg(\"-txindex\", false))"
      },
      {
        "sha": "dcd1765da9c8aac9ce5c2af4fb67af24dafb2480",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/411b05ac9511395923976bfbd0c153ddabf2ebcf/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/411b05ac9511395923976bfbd0c153ddabf2ebcf/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=411b05ac9511395923976bfbd0c153ddabf2ebcf",
        "patch": "@@ -23,6 +23,8 @@ bool ShutdownRequested();\n /** Interrupt threads */\n void Interrupt(boost::thread_group& threadGroup);\n void Shutdown();\n+//!Parameter interaction: change current parameters depending on various rules\n+void InitParameterInteraction();\n bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler);\n \n /** The help message mode determines what help message to show */"
      }
    ]
  },
  {
    "sha": "68354e75e94c28bbe5aee1b1c3e4c5cb93c2c9ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ODM1NGU3NWU5NGMyOGJiZTVhZWUxYjFjM2U0YzVjYjkzYzJjOWFk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-10-08T08:01:29Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-27T12:26:01Z"
      },
      "message": "[QT] Call inits parameter interaction before we create the options model",
      "tree": {
        "sha": "02f5cacf4aaaa0de6b7a36847c79ad5aca940c6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/02f5cacf4aaaa0de6b7a36847c79ad5aca940c6f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/68354e75e94c28bbe5aee1b1c3e4c5cb93c2c9ad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWWEvZAAoJECnUvLZBb1PsXNcP+gPLEyI7C0B+6KpETO1prASO\nAe+7jP+0PWPm6ZMzrOCQ06v9gcHUt4Yb6iOpdBQRZan/CyeKaat/4I5HYHUG4jw0\n5Uc+tR7F9iEU+yuEwEFZdQ0q45FgVYkGcJefylKxcKD5D3u1waquFCkcTP7H0ZwV\ngyeNIDhJk3Iyyxs5NvxwzyGfAt/ViYoCq+tw+jlYmEbHzqZ/DnHf9SKEkKLBQOsB\nBffOIVGfDy5paTIbIxFIwtgW83MYfzWQFXl8b7vt//UcRo4uH9jK8ns/7m7g2kKw\nEkixlPUSW2tZG9Q7Q33jAe9+4iehaQ/Hiywnz/pRJid3a//DOC782WL6ZMTXUwoq\nYtvIVI3B6npDN8sYXxKKGOQVQzqIiuOPDP9yMrIws6ysOLrIoIgkcgvtQP3DAg4I\nUO0xaT4YplETtYQBNkCrQMrPIOaUK4YtMYXkP6TXZw3saUSQhafDBLagzJStcP9w\noddtfA/V+p06/mq+1x89XRhp1Du8Td6RYVysv6Ho6VO2Y+5qwHd1XIqkS5CLbvJ1\nprWgCsp2C2Fbn2rZKHNoA4GheWOH5j4rd2ATT5THu+kDn02aGGcAnqVU7BJr4qvV\n2nG70qbFUCoUHz88b80wWhDCnY7BTBJor5PzcizuH6681mn013DMV8curedso3qr\nk8GLTIDbcH7WonEzDVjl\n=SlNq\n-----END PGP SIGNATURE-----",
        "payload": "tree 02f5cacf4aaaa0de6b7a36847c79ad5aca940c6f\nparent 411b05ac9511395923976bfbd0c153ddabf2ebcf\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1444291289 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1448627161 +0100\n\n[QT] Call inits parameter interaction before we create the options model\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68354e75e94c28bbe5aee1b1c3e4c5cb93c2c9ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/68354e75e94c28bbe5aee1b1c3e4c5cb93c2c9ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68354e75e94c28bbe5aee1b1c3e4c5cb93c2c9ad/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "411b05ac9511395923976bfbd0c153ddabf2ebcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/411b05ac9511395923976bfbd0c153ddabf2ebcf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/411b05ac9511395923976bfbd0c153ddabf2ebcf"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "372a6f62a5a61b9510ccaf60c4dbe50fc8386038",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68354e75e94c28bbe5aee1b1c3e4c5cb93c2c9ad/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68354e75e94c28bbe5aee1b1c3e4c5cb93c2c9ad/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=68354e75e94c28bbe5aee1b1c3e4c5cb93c2c9ad",
        "patch": "@@ -201,6 +201,8 @@ class BitcoinApplication: public QApplication\n     /// Create payment server\n     void createPaymentServer();\n #endif\n+    /// parameter interaction/setup based on rules\n+    void parameterSetup();\n     /// Create options model\n     void createOptionsModel(bool resetSettings);\n     /// Create main window\n@@ -397,6 +399,11 @@ void BitcoinApplication::startThread()\n     coreThread->start();\n }\n \n+void BitcoinApplication::parameterSetup()\n+{\n+    InitParameterInteraction();\n+}\n+\n void BitcoinApplication::requestInitialize()\n {\n     qDebug() << __func__ << \": Requesting initialize\";\n@@ -644,6 +651,8 @@ int main(int argc, char *argv[])\n     // Install qDebug() message handler to route to debug.log\n     qInstallMessageHandler(DebugMessageHandler);\n #endif\n+    // Allow parameter interaction before we create the options model\n+    app.parameterSetup();\n     // Load GUI settings from QSettings\n     app.createOptionsModel(mapArgs.count(\"-resetguisettings\") != 0);\n "
      }
    ]
  },
  {
    "sha": "df661476133364956a188f892de97974e69f8d6c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjY2MTQ3NjEzMzM2NDk1NmExODhmODkyZGU5Nzk3NGU2OWY4ZDZj",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-10-08T08:01:29Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-27T12:26:28Z"
      },
      "message": "Move -blocksonly parameter interaction to the new ParameterInteraction() function",
      "tree": {
        "sha": "cba0d647da25f07e4acc0877b67712816f9de23a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cba0d647da25f07e4acc0877b67712816f9de23a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df661476133364956a188f892de97974e69f8d6c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWWEv0AAoJECnUvLZBb1PsQxIQAJzSNirgH4s3qwryCJZGRTVi\nrYB1ORKEL+O5y1T9e+haIPYPhr3ZXkTfQEty3MfshQuP6VEN2jtwaRwZ34weuxHv\nILzVx1zWXrKSDI4xSVRE+xkXxeLX7AyxcsNIF+tRIQZWMPOrGEHe3uoLZVq181yJ\nImsERXwLiMu0HUq4Cx9vintDNm3upOXe5tLbL5gYufomeGaZsb/Tka0EAPdYEYUI\niy8iKoKDKMVu2QKfRdPC55OIMuyi3WYwGWVQh1HlJHgnP3wbxoPTms8jUYxrHzrC\nD15afLX41X53Mr2MIiFPXw3OIHpDmjhWf3SwkJSe0+X0vyu3sC0EF5gCzmuwMK05\nrIKiM/Gw9GNSevDQmBV9di62dMxIhN7zyQF/ryYnpiSjCauy0q7jnqiLmsWeia7r\ncBhvmd6SD9cWO+NdYVgroCdD48YHV+DwxcpskVEWztpznu7N8x3rTDzF5u7l/SzT\nB8JndQf0RpDTPQmrVZC/ksVOyNMq/sdtpUQ1/US1Dg+Dxgf8ozrt13srfECkYOZ2\nTurWouaFzHEkZsWSEZy4M2mAnf2DL24QIXCjyjxNMxziCtXv/YRBTtwoedWP/u2l\nzQK3G6x+lOESHW3AG9orNo52TlOiLnwoudVTvLcIvHv/WyEjoH+HIahpGF4XVnTX\n4sAE/OIoSertg+iIauk4\n=RAis\n-----END PGP SIGNATURE-----",
        "payload": "tree cba0d647da25f07e4acc0877b67712816f9de23a\nparent 68354e75e94c28bbe5aee1b1c3e4c5cb93c2c9ad\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1444291289 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1448627188 +0100\n\nMove -blocksonly parameter interaction to the new ParameterInteraction() function\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df661476133364956a188f892de97974e69f8d6c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df661476133364956a188f892de97974e69f8d6c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df661476133364956a188f892de97974e69f8d6c/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "68354e75e94c28bbe5aee1b1c3e4c5cb93c2c9ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68354e75e94c28bbe5aee1b1c3e4c5cb93c2c9ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/68354e75e94c28bbe5aee1b1c3e4c5cb93c2c9ad"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a69da3d4c9c9418749b7419590a23e4c0d9baf7a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df661476133364956a188f892de97974e69f8d6c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df661476133364956a188f892de97974e69f8d6c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=df661476133364956a188f892de97974e69f8d6c",
        "patch": "@@ -743,6 +743,16 @@ void InitParameterInteraction()\n         if (SoftSetBoolArg(\"-rescan\", true))\n             LogPrintf(\"%s: parameter interaction: -zapwallettxes=<mode> -> setting -rescan=1\\n\", __func__);\n     }\n+\n+    // disable walletbroadcast and whitelistalwaysrelay in blocksonly mode\n+    if (GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY)) {\n+        if (SoftSetBoolArg(\"-whitelistalwaysrelay\", false))\n+            LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -whitelistalwaysrelay=0\\n\", __func__);\n+#ifdef ENABLE_WALLET\n+        if (SoftSetBoolArg(\"-walletbroadcast\", false))\n+            LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -walletbroadcast=0\\n\", __func__);\n+#endif\n+    }\n }\n \n /** Initialize bitcoin."
      }
    ]
  },
  {
    "sha": "a46f87f0c17323d8853d95f8ea99f8fb0f3bda1a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDZmODdmMGMxNzMyM2Q4ODUzZDk1ZjhlYTk5ZjhmYjBmM2JkYTFh",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-26T13:03:27Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-27T12:26:28Z"
      },
      "message": "Initialize logging before we do parameter interaction",
      "tree": {
        "sha": "5a2ae26880b3b406b566ee0a46c75862ddd63485",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a2ae26880b3b406b566ee0a46c75862ddd63485"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a46f87f0c17323d8853d95f8ea99f8fb0f3bda1a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWWEv0AAoJECnUvLZBb1PsWs8QAJHqzGGEjuiSMZxpouWv8yXu\nyHwTj8K6uq1Q5vlJXbhNyYnqAuudQWW9yKpMozW0klxLAJ381Z6KkPdsKCVaZz9b\nnuERKlKz7hQjB5sjReiHAZiidhHXogeDSaq2sRizys9zRpEtqh55Br62sDzzH7fT\nXS3XqEqK57UyvJBo/VMTPOQzJ1GW1m6KS9HN7ZGgUwqrLTmrGO0VQdLnqB6uCsy9\nsWZQ3H1127QrvWRxGLvopYkq/R+Q1J0v31qoidLsMVtZnNiqKXB75ipV26uSlLzf\n4xYKOqBwYeU3nuSuHXGWWsEsbnAEKP4XRsxGxKE/tUFVxxKN9jT+0wBBQQVJrHmf\n8JvacV9YJmciW5c2i6mVFM1vyc2rUgxHKzNvlA3hwvmOO5EXRnlBgp/1AQbkaOLY\ny9kVTkSJOXCBVwuYfPUtIhxtPfDxPZGoPXaT0cbt6WuzmCMNj2e/omkrmO9untDI\nxCiH/4YoHbZeonNTcQjCH9uTIjawDCxFwh/Z6viawwk5WCAnMi6MtY2rq0iyILUl\nsQrEj5nX0viEg4VOJE1Cf9i3DQiDa0RIqB1W8GYTWU1jgCN0APzQSram6s2qtaHK\nzlQb/Z7G64N6V3bqXMhfG7islDT8CiR6kPmdVLeMfIMYHA6qRYX7us30OCMLKYHj\nN6hLG8w0D5F0Uq7EqyAR\n=Rc3z\n-----END PGP SIGNATURE-----",
        "payload": "tree 5a2ae26880b3b406b566ee0a46c75862ddd63485\nparent df661476133364956a188f892de97974e69f8d6c\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1448543007 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1448627188 +0100\n\nInitialize logging before we do parameter interaction\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a46f87f0c17323d8853d95f8ea99f8fb0f3bda1a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a46f87f0c17323d8853d95f8ea99f8fb0f3bda1a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a46f87f0c17323d8853d95f8ea99f8fb0f3bda1a/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df661476133364956a188f892de97974e69f8d6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df661476133364956a188f892de97974e69f8d6c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df661476133364956a188f892de97974e69f8d6c"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 16,
      "deletions": 7
    },
    "files": [
      {
        "sha": "4cee2d3cf0e6c24fe73262cad4960b53adac1321",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a46f87f0c17323d8853d95f8ea99f8fb0f3bda1a/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a46f87f0c17323d8853d95f8ea99f8fb0f3bda1a/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=a46f87f0c17323d8853d95f8ea99f8fb0f3bda1a",
        "patch": "@@ -151,6 +151,8 @@ bool AppInit(int argc, char* argv[])\n #endif\n         SoftSetBoolArg(\"-server\", true);\n \n+        // Set this early so that parameter interactions go to console\n+        InitLogging();\n         InitParameterInteraction();\n         fRet = AppInit2(threadGroup, scheduler);\n     }"
      },
      {
        "sha": "479a3f75d1e0d71952c2026c76b48262002bd8dd",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a46f87f0c17323d8853d95f8ea99f8fb0f3bda1a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a46f87f0c17323d8853d95f8ea99f8fb0f3bda1a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a46f87f0c17323d8853d95f8ea99f8fb0f3bda1a",
        "patch": "@@ -755,6 +755,17 @@ void InitParameterInteraction()\n     }\n }\n \n+void InitLogging()\n+{\n+    fPrintToConsole = GetBoolArg(\"-printtoconsole\", false);\n+    fLogTimestamps = GetBoolArg(\"-logtimestamps\", true);\n+    fLogTimeMicros = GetBoolArg(\"-logtimemicros\", DEFAULT_LOGTIMEMICROS);\n+    fLogIPs = GetBoolArg(\"-logips\", false);\n+\n+    LogPrintf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");\n+    LogPrintf(\"Bitcoin version %s (%s)\\n\", FormatFullVersion(), CLIENT_DATE);\n+}\n+\n /** Initialize bitcoin.\n  *  @pre Parameters should be parsed and config file should be read.\n  */\n@@ -819,14 +830,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // ********************************************************* Step 2: parameter interactions\n     const CChainParams& chainparams = Params();\n \n-    // Set this early so that parameter interactions go to console\n-    fPrintToConsole = GetBoolArg(\"-printtoconsole\", false);\n-    fLogTimestamps = GetBoolArg(\"-logtimestamps\", true);\n-    fLogTimeMicros = GetBoolArg(\"-logtimemicros\", DEFAULT_LOGTIMEMICROS);\n-    fLogIPs = GetBoolArg(\"-logips\", false);\n \n-    LogPrintf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");\n-    LogPrintf(\"Bitcoin version %s (%s)\\n\", FormatFullVersion(), CLIENT_DATE);\n \n     // if using block pruning, then disable txindex\n     if (GetArg(\"-prune\", 0)) {"
      },
      {
        "sha": "d4872e779480d67ad24515657bdac3f2ec437d66",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a46f87f0c17323d8853d95f8ea99f8fb0f3bda1a/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a46f87f0c17323d8853d95f8ea99f8fb0f3bda1a/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=a46f87f0c17323d8853d95f8ea99f8fb0f3bda1a",
        "patch": "@@ -23,6 +23,8 @@ bool ShutdownRequested();\n /** Interrupt threads */\n void Interrupt(boost::thread_group& threadGroup);\n void Shutdown();\n+//!Initialize the logging infrastructure\n+void InitLogging();\n //!Parameter interaction: change current parameters depending on various rules\n void InitParameterInteraction();\n bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler);"
      },
      {
        "sha": "d407e539efc77355b7d4b2bd25329a8ba1e2bddd",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a46f87f0c17323d8853d95f8ea99f8fb0f3bda1a/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a46f87f0c17323d8853d95f8ea99f8fb0f3bda1a/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=a46f87f0c17323d8853d95f8ea99f8fb0f3bda1a",
        "patch": "@@ -401,6 +401,7 @@ void BitcoinApplication::startThread()\n \n void BitcoinApplication::parameterSetup()\n {\n+    InitLogging();\n     InitParameterInteraction();\n }\n "
      }
    ]
  },
  {
    "sha": "5ca149a3db4a9f4e5ea93353494b40f2f1713e76",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Y2ExNDlhM2RiNGE5ZjRlNWVhOTMzNTM0OTRiNDBmMmYxNzEzZTc2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-27T12:26:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-27T12:29:54Z"
      },
      "message": "Merge pull request #7053\n\n2e29e7e Globals: Remove a bunch of Params() calls from main.cpp: (Jorge Tim\u00f3n)",
      "tree": {
        "sha": "16bcbe5588de1b0e98635e2e8d8e824a63f45935",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/16bcbe5588de1b0e98635e2e8d8e824a63f45935"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ca149a3db4a9f4e5ea93353494b40f2f1713e76",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWWEzCAAoJEHSBCwEjRsmm9cAH/Am7ZliVWwlh4/JZtqbE1LCD\n3NMYu3F507Xhgns/2nVQkPlboXebxbVRxa/9bwXWQnyLheE+DAzTcsLjZtuAOsu0\ntA47P8rvBFpUPnJUsg739namxBbdUdubYjmLhdBF8nIB8ciuIFdYLLOq4HWI9IIx\nhS02+kTkaYI25ApjoTbt3AVLY8FxX/EQnD6FDIoyXoJ3ACsX5sVOF9EFRGqOv9ZL\nQbVKwDraWytMTd27s1P0MGZFmITQVRvv+/x8LxcKL2CmhZHXlwW5q5KXSajAq2Ei\ngVF34wZMKmPcVrL0dtRugiITgOsUf6xfPKRpZOjFXgjTrLe8z9kOwI6/oI4JkQ0=\n=yEHs\n-----END PGP SIGNATURE-----",
        "payload": "tree 16bcbe5588de1b0e98635e2e8d8e824a63f45935\nparent 0e935865b9ee3a79fc63f5766074b6f539a0cf85\nparent 2e29e7e247b6b74502c70612dab1f7f67de675c3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448627217 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448627394 +0100\n\nMerge pull request #7053\n\n2e29e7e Globals: Remove a bunch of Params() calls from main.cpp: (Jorge Tim\u00f3n)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ca149a3db4a9f4e5ea93353494b40f2f1713e76",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ca149a3db4a9f4e5ea93353494b40f2f1713e76",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ca149a3db4a9f4e5ea93353494b40f2f1713e76/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0e935865b9ee3a79fc63f5766074b6f539a0cf85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e935865b9ee3a79fc63f5766074b6f539a0cf85",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0e935865b9ee3a79fc63f5766074b6f539a0cf85"
      },
      {
        "sha": "2e29e7e247b6b74502c70612dab1f7f67de675c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e29e7e247b6b74502c70612dab1f7f67de675c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2e29e7e247b6b74502c70612dab1f7f67de675c3"
      }
    ],
    "stats": {
      "total": 93,
      "additions": 44,
      "deletions": 49
    },
    "files": [
      {
        "sha": "3ae3e444068be446473320c49d3565e4b996d817",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ca149a3db4a9f4e5ea93353494b40f2f1713e76/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ca149a3db4a9f4e5ea93353494b40f2f1713e76/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=5ca149a3db4a9f4e5ea93353494b40f2f1713e76",
        "patch": "@@ -592,6 +592,7 @@ void CleanupBlockRevFiles()\n \n void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n {\n+    const CChainParams& chainparams = Params();\n     RenameThread(\"bitcoin-loadblk\");\n     // -reindex\n     if (fReindex) {\n@@ -605,14 +606,14 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n             if (!file)\n                 break; // This error is logged in OpenBlockFile\n             LogPrintf(\"Reindexing block file blk%05u.dat...\\n\", (unsigned int)nFile);\n-            LoadExternalBlockFile(file, &pos);\n+            LoadExternalBlockFile(chainparams, file, &pos);\n             nFile++;\n         }\n         pblocktree->WriteReindexing(false);\n         fReindex = false;\n         LogPrintf(\"Reindexing finished\\n\");\n         // To avoid ending up in a situation without genesis block, re-try initializing (no-op if reindexing worked):\n-        InitBlockIndex();\n+        InitBlockIndex(chainparams);\n     }\n \n     // hardcoded $DATADIR/bootstrap.dat\n@@ -623,7 +624,7 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n             CImportingNow imp;\n             boost::filesystem::path pathBootstrapOld = GetDataDir() / \"bootstrap.dat.old\";\n             LogPrintf(\"Importing bootstrap.dat...\\n\");\n-            LoadExternalBlockFile(file);\n+            LoadExternalBlockFile(chainparams, file);\n             RenameOver(pathBootstrap, pathBootstrapOld);\n         } else {\n             LogPrintf(\"Warning: Could not open bootstrap file %s\\n\", pathBootstrap.string());\n@@ -636,7 +637,7 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n         if (file) {\n             CImportingNow imp;\n             LogPrintf(\"Importing blocks file %s...\\n\", path.string());\n-            LoadExternalBlockFile(file);\n+            LoadExternalBlockFile(chainparams, file);\n         } else {\n             LogPrintf(\"Warning: Could not open blocks file %s\\n\", path.string());\n         }\n@@ -1301,7 +1302,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n \n                 // Initialize the block index (no-op if non-empty database was already loaded)\n-                if (!InitBlockIndex()) {\n+                if (!InitBlockIndex(chainparams)) {\n                     strLoadError = _(\"Error initializing block database\");\n                     break;\n                 }\n@@ -1336,7 +1337,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     }\n                 }\n \n-                if (!CVerifyDB().VerifyDB(pcoinsdbview, GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                if (!CVerifyDB().VerifyDB(chainparams, pcoinsdbview, GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n                               GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n                     strLoadError = _(\"Corrupted block database detected\");\n                     break;\n@@ -1560,7 +1561,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     uiInterface.InitMessage(_(\"Activating best chain...\"));\n     // scan for better chains in the block chain database, that are not yet connected in the active best chain\n     CValidationState state;\n-    if (!ActivateBestChain(state))\n+    if (!ActivateBestChain(state, chainparams))\n         strErrors << \"Failed to connect best block\";\n \n     std::vector<boost::filesystem::path> vImportFiles;"
      },
      {
        "sha": "ceb5cb66f3e58c4451207a9b511a37b9d5895e02",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 30,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ca149a3db4a9f4e5ea93353494b40f2f1713e76/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ca149a3db4a9f4e5ea93353494b40f2f1713e76/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5ca149a3db4a9f4e5ea93353494b40f2f1713e76",
        "patch": "@@ -2139,6 +2139,7 @@ enum FlushStateMode {\n  * or always and in all cases if we're in prune mode and are deleting files.\n  */\n bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode) {\n+    const CChainParams& chainparams = Params();\n     LOCK2(cs_main, cs_LastBlockFile);\n     static int64_t nLastWrite = 0;\n     static int64_t nLastFlush = 0;\n@@ -2147,7 +2148,7 @@ bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode) {\n     bool fFlushForPrune = false;\n     try {\n     if (fPruneMode && fCheckForPruning && !fReindex) {\n-        FindFilesToPrune(setFilesToPrune);\n+        FindFilesToPrune(setFilesToPrune, chainparams.PruneAfterHeight());\n         fCheckForPruning = false;\n         if (!setFilesToPrune.empty()) {\n             fFlushForPrune = true;\n@@ -2347,8 +2348,8 @@ static int64_t nTimePostConnect = 0;\n  * Connect a new block to chainActive. pblock is either NULL or a pointer to a CBlock\n  * corresponding to pindexNew, to bypass loading it again from disk.\n  */\n-bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, const CBlock *pblock) {\n-    const CChainParams& chainparams = Params();\n+bool static ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const CBlock* pblock)\n+{\n     assert(pindexNew->pprev == chainActive.Tip());\n     mempool.check(pcoinsTip);\n     // Read block from disk.\n@@ -2480,8 +2481,8 @@ static void PruneBlockIndexCandidates() {\n  * Try to make some progress towards making pindexMostWork the active block.\n  * pblock is either NULL or a pointer to a CBlock corresponding to pindexMostWork.\n  */\n-static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMostWork, const CBlock *pblock) {\n-    const CChainParams& chainparams = Params();\n+static bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const CBlock* pblock)\n+{\n     AssertLockHeld(cs_main);\n     bool fInvalidFound = false;\n     const CBlockIndex *pindexOldTip = chainActive.Tip();\n@@ -2514,7 +2515,7 @@ static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMo\n \n     // Connect new blocks.\n     BOOST_REVERSE_FOREACH(CBlockIndex *pindexConnect, vpindexToConnect) {\n-        if (!ConnectTip(state, pindexConnect, pindexConnect == pindexMostWork ? pblock : NULL)) {\n+        if (!ConnectTip(state, chainparams, pindexConnect, pindexConnect == pindexMostWork ? pblock : NULL)) {\n             if (state.IsInvalid()) {\n                 // The block violates a consensus rule.\n                 if (!state.CorruptionPossible())\n@@ -2555,10 +2556,10 @@ static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMo\n  * or an activated best chain. pblock is either NULL or a pointer to a block\n  * that is already loaded (to avoid loading it again from disk).\n  */\n-bool ActivateBestChain(CValidationState &state, const CBlock *pblock) {\n+bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams, const CBlock* pblock)\n+{\n     CBlockIndex *pindexNewTip = NULL;\n     CBlockIndex *pindexMostWork = NULL;\n-    const CChainParams& chainparams = Params();\n     do {\n         boost::this_thread::interruption_point();\n \n@@ -2571,7 +2572,7 @@ bool ActivateBestChain(CValidationState &state, const CBlock *pblock) {\n             if (pindexMostWork == NULL || pindexMostWork == chainActive.Tip())\n                 return true;\n \n-            if (!ActivateBestChainStep(state, pindexMostWork, pblock && pblock->GetHash() == pindexMostWork->GetBlockHash() ? pblock : NULL))\n+            if (!ActivateBestChainStep(state, chainparams, pindexMostWork, pblock && pblock->GetHash() == pindexMostWork->GetBlockHash() ? pblock : NULL))\n                 return false;\n \n             pindexNewTip = chainActive.Tip();\n@@ -3050,9 +3051,9 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n     return true;\n }\n \n-bool AcceptBlock(const CBlock& block, CValidationState& state, CBlockIndex** ppindex, bool fRequested, CDiskBlockPos* dbp)\n+/** Store block on disk. If dbp is non-NULL, the file is known to already reside on disk */\n+static bool AcceptBlock(const CBlock& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, CDiskBlockPos* dbp)\n {\n-    const CChainParams& chainparams = Params();\n     AssertLockHeld(cs_main);\n \n     CBlockIndex *&pindex = *ppindex;\n@@ -3142,7 +3143,7 @@ bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, c\n \n         // Store to disk\n         CBlockIndex *pindex = NULL;\n-        bool ret = AcceptBlock(*pblock, state, &pindex, fRequested, dbp);\n+        bool ret = AcceptBlock(*pblock, state, chainparams, &pindex, fRequested, dbp);\n         if (pindex && pfrom) {\n             mapBlockSource[pindex->GetBlockHash()] = pfrom->GetId();\n         }\n@@ -3151,7 +3152,7 @@ bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, c\n             return error(\"%s: AcceptBlock FAILED\", __func__);\n     }\n \n-    if (!ActivateBestChain(state, pblock))\n+    if (!ActivateBestChain(state, chainparams, pblock))\n         return error(\"%s: ActivateBestChain failed\", __func__);\n \n     return true;\n@@ -3241,13 +3242,13 @@ void UnlinkPrunedFiles(std::set<int>& setFilesToPrune)\n }\n \n /* Calculate the block/rev files that should be deleted to remain under target*/\n-void FindFilesToPrune(std::set<int>& setFilesToPrune)\n+void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight)\n {\n     LOCK2(cs_main, cs_LastBlockFile);\n     if (chainActive.Tip() == NULL || nPruneTarget == 0) {\n         return;\n     }\n-    if (chainActive.Tip()->nHeight <= Params().PruneAfterHeight()) {\n+    if (chainActive.Tip()->nHeight <= nPruneAfterHeight) {\n         return;\n     }\n \n@@ -3475,9 +3476,8 @@ CVerifyDB::~CVerifyDB()\n     uiInterface.ShowProgress(\"\", 100);\n }\n \n-bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth)\n+bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth)\n {\n-    const CChainParams& chainparams = Params();\n     LOCK(cs_main);\n     if (chainActive.Tip() == NULL || chainActive.Tip()->pprev == NULL)\n         return true;\n@@ -3593,9 +3593,8 @@ bool LoadBlockIndex()\n     return true;\n }\n \n-\n-bool InitBlockIndex() {\n-    const CChainParams& chainparams = Params();\n+bool InitBlockIndex(const CChainParams& chainparams) \n+{\n     LOCK(cs_main);\n \n     // Initialize global variables that cannot be constructed at startup.\n@@ -3613,7 +3612,7 @@ bool InitBlockIndex() {\n     // Only add the genesis block if not reindexing (in which case we reuse the one already on disk)\n     if (!fReindex) {\n         try {\n-            CBlock &block = const_cast<CBlock&>(Params().GenesisBlock());\n+            CBlock &block = const_cast<CBlock&>(chainparams.GenesisBlock());\n             // Start new block file\n             unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n             CDiskBlockPos blockPos;\n@@ -3625,7 +3624,7 @@ bool InitBlockIndex() {\n             CBlockIndex *pindex = AddToBlockIndex(block);\n             if (!ReceivedBlockTransactions(block, state, pindex, blockPos))\n                 return error(\"LoadBlockIndex(): genesis block not accepted\");\n-            if (!ActivateBestChain(state, &block))\n+            if (!ActivateBestChain(state, chainparams, &block))\n                 return error(\"LoadBlockIndex(): genesis block cannot be activated\");\n             // Force a chainstate write so that when we VerifyDB in a moment, it doesn't check stale data\n             return FlushStateToDisk(state, FLUSH_STATE_ALWAYS);\n@@ -3637,11 +3636,8 @@ bool InitBlockIndex() {\n     return true;\n }\n \n-\n-\n-bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n+bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskBlockPos *dbp)\n {\n-    const CChainParams& chainparams = Params();\n     // Map of disk positions for blocks with unknown parent (only used for reindex)\n     static std::multimap<uint256, CDiskBlockPos> mapBlocksUnknownParent;\n     int64_t nStart = GetTimeMillis();\n@@ -3661,10 +3657,10 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n             try {\n                 // locate a header\n                 unsigned char buf[MESSAGE_START_SIZE];\n-                blkdat.FindByte(Params().MessageStart()[0]);\n+                blkdat.FindByte(chainparams.MessageStart()[0]);\n                 nRewind = blkdat.GetPos()+1;\n                 blkdat >> FLATDATA(buf);\n-                if (memcmp(buf, Params().MessageStart(), MESSAGE_START_SIZE))\n+                if (memcmp(buf, chainparams.MessageStart(), MESSAGE_START_SIZE))\n                     continue;\n                 // read size\n                 blkdat >> nSize;\n@@ -4058,7 +4054,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                         // best equivalent proof of work) than the best header chain we know about.\n                         send = mi->second->IsValid(BLOCK_VALID_SCRIPTS) && (pindexBestHeader != NULL) &&\n                             (pindexBestHeader->GetBlockTime() - mi->second->GetBlockTime() < nOneMonth) &&\n-                            (GetBlockProofEquivalentTime(*pindexBestHeader, *mi->second, *pindexBestHeader, Params().GetConsensus()) < nOneMonth);\n+                            (GetBlockProofEquivalentTime(*pindexBestHeader, *mi->second, *pindexBestHeader, consensusParams) < nOneMonth);\n                         if (!send) {\n                             LogPrintf(\"%s: ignoring request from peer=%i for old block that isn't in the main chain\\n\", __func__, pfrom->GetId());\n                         }\n@@ -4932,7 +4928,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         uint256 alertHash = alert.GetHash();\n         if (pfrom->setKnown.count(alertHash) == 0)\n         {\n-            if (alert.ProcessAlert(Params().AlertKey()))\n+            if (alert.ProcessAlert(chainparams.AlertKey()))\n             {\n                 // Relay\n                 pfrom->setKnown.insert(alertHash);"
      },
      {
        "sha": "f738e3eb5712f67814025f4b0c16f96db55c0eaa",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ca149a3db4a9f4e5ea93353494b40f2f1713e76/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ca149a3db4a9f4e5ea93353494b40f2f1713e76/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=5ca149a3db4a9f4e5ea93353494b40f2f1713e76",
        "patch": "@@ -170,9 +170,9 @@ FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n /** Translation to a filesystem path */\n boost::filesystem::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix);\n /** Import blocks from an external file */\n-bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp = NULL);\n+bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskBlockPos *dbp = NULL);\n /** Initialize a new block tree database + block data on disk */\n-bool InitBlockIndex();\n+bool InitBlockIndex(const CChainParams& chainparams);\n /** Load the block tree and coins database from disk */\n bool LoadBlockIndex();\n /** Unload database information */\n@@ -197,7 +197,7 @@ std::string GetWarnings(const std::string& strFor);\n /** Retrieve a transaction (from memory pool, or from disk, if possible) */\n bool GetTransaction(const uint256 &hash, CTransaction &tx, const Consensus::Params& params, uint256 &hashBlock, bool fAllowSlow = false);\n /** Find the best known block, and make it the tip of the block chain */\n-bool ActivateBestChain(CValidationState &state, const CBlock *pblock = NULL);\n+bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams, const CBlock* pblock = NULL);\n CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n \n /**\n@@ -215,7 +215,7 @@ CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n  *\n  * @param[out]   setFilesToPrune   The set of file indices that can be unlinked will be returned\n  */\n-void FindFilesToPrune(std::set<int>& setFilesToPrune);\n+void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight);\n \n /**\n  *  Actually unlink the specified files\n@@ -381,9 +381,6 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n /** Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held) */\n bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n-/** Store block on disk. If dbp is non-NULL, the file is known to already reside on disk */\n-bool AcceptBlock(const CBlock& block, CValidationState& state, CBlockIndex **pindex, bool fRequested, CDiskBlockPos* dbp);\n-\n \n class CBlockFileInfo\n {\n@@ -444,7 +441,7 @@ class CVerifyDB {\n public:\n     CVerifyDB();\n     ~CVerifyDB();\n-    bool VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth);\n+    bool VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth);\n };\n \n /** Find the last common block between the parameter chain and a locator. */"
      },
      {
        "sha": "c872822759910a99fca07bd6a330ce234134f561",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ca149a3db4a9f4e5ea93353494b40f2f1713e76/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ca149a3db4a9f4e5ea93353494b40f2f1713e76/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=5ca149a3db4a9f4e5ea93353494b40f2f1713e76",
        "patch": "@@ -567,7 +567,7 @@ UniValue verifychain(const UniValue& params, bool fHelp)\n     if (params.size() > 1)\n         nCheckDepth = params[1].get_int();\n \n-    return CVerifyDB().VerifyDB(pcoinsTip, nCheckLevel, nCheckDepth);\n+    return CVerifyDB().VerifyDB(Params(), pcoinsTip, nCheckLevel, nCheckDepth);\n }\n \n /** Implementation of IsSuperMajority with better feedback */\n@@ -835,7 +835,7 @@ UniValue invalidateblock(const UniValue& params, bool fHelp)\n     }\n \n     if (state.IsValid()) {\n-        ActivateBestChain(state);\n+        ActivateBestChain(state, Params());\n     }\n \n     if (!state.IsValid()) {\n@@ -874,7 +874,7 @@ UniValue reconsiderblock(const UniValue& params, bool fHelp)\n     }\n \n     if (state.IsValid()) {\n-        ActivateBestChain(state);\n+        ActivateBestChain(state, Params());\n     }\n \n     if (!state.IsValid()) {"
      },
      {
        "sha": "2fe190f885d323a8b90c526625df4517f0cfd2cf",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ca149a3db4a9f4e5ea93353494b40f2f1713e76/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ca149a3db4a9f4e5ea93353494b40f2f1713e76/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=5ca149a3db4a9f4e5ea93353494b40f2f1713e76",
        "patch": "@@ -51,6 +51,7 @@ BasicTestingSetup::~BasicTestingSetup()\n \n TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(chainName)\n {\n+    const CChainParams& chainparams = Params();\n #ifdef ENABLE_WALLET\n         bitdb.MakeMock();\n #endif\n@@ -61,7 +62,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n         pblocktree = new CBlockTreeDB(1 << 20, true);\n         pcoinsdbview = new CCoinsViewDB(1 << 23, true);\n         pcoinsTip = new CCoinsViewCache(pcoinsdbview);\n-        InitBlockIndex();\n+        InitBlockIndex(chainparams);\n #ifdef ENABLE_WALLET\n         bool fFirstRun;\n         pwalletMain = new CWallet(\"wallet.dat\");"
      }
    ]
  },
  {
    "sha": "9b637589740089a56a81a79d38f4be522cfa43c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YjYzNzU4OTc0MDA4OWE1NmE4MWE3OWQzOGY0YmU1MjJjZmE0M2Mz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-27T12:35:49Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-27T12:36:11Z"
      },
      "message": "util: Don't set strMiscWarning on every exception\n\nFixes #6809 - run-of-the-mill exceptions should not get into\nstrMiscWarning (which is reported by `getinfo`).",
      "tree": {
        "sha": "561ec2cbc6842d3dbc379adef6026db81d56d17f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/561ec2cbc6842d3dbc379adef6026db81d56d17f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b637589740089a56a81a79d38f4be522cfa43c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b637589740089a56a81a79d38f4be522cfa43c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b637589740089a56a81a79d38f4be522cfa43c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b637589740089a56a81a79d38f4be522cfa43c3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5ca149a3db4a9f4e5ea93353494b40f2f1713e76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ca149a3db4a9f4e5ea93353494b40f2f1713e76",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ca149a3db4a9f4e5ea93353494b40f2f1713e76"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a852bc317695e239245535765cd2a80df005c51f",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b637589740089a56a81a79d38f4be522cfa43c3/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b637589740089a56a81a79d38f4be522cfa43c3/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=9b637589740089a56a81a79d38f4be522cfa43c3",
        "patch": "@@ -447,7 +447,6 @@ void PrintExceptionContinue(const std::exception* pex, const char* pszThread)\n     std::string message = FormatException(pex, pszThread);\n     LogPrintf(\"\\n\\n************************\\n%s\\n\", message);\n     fprintf(stderr, \"\\n\\n************************\\n%s\\n\", message.c_str());\n-    strMiscWarning = message;\n }\n \n boost::filesystem::path GetDefaultDataDir()"
      }
    ]
  },
  {
    "sha": "2a94cd67e80555aec3ba13d5129b1f5402b0c5b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYTk0Y2Q2N2U4MDU1NWFlYzNiYTEzZDUxMjliMWY1NDAyYjBjNWI0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-27T12:34:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-27T12:45:14Z"
      },
      "message": "Merge pull request #6780\n\na46f87f Initialize logging before we do parameter interaction (Jonas Schnelli)\ndf66147 Move -blocksonly parameter interaction to the new ParameterInteraction() function (Jonas Schnelli)\n68354e7 [QT] Call inits parameter interaction before we create the options model (Jonas Schnelli)\n411b05a Refactor parameter interaction, call it before AppInit2() (Jonas Schnelli)",
      "tree": {
        "sha": "e215dd05d37b8c17f1fe3e5d4ff5841a74620481",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e215dd05d37b8c17f1fe3e5d4ff5841a74620481"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a94cd67e80555aec3ba13d5129b1f5402b0c5b4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWWFBaAAoJEHSBCwEjRsmmSncH/1UD9Gy5aGBIJjuGo4ystEF4\nLh6/Z8/xtacZiSsLy2Cd5kvbL9iwZIy8jvfdN4BIkLMHenna+aQD2rTXiRJ8A9kS\nKMKbpSG9rsQWx4gM5Dj01ahMDmuvQAWpV/3ZyG/WXf1TKe7QbEtx5BG4THwz6eqx\nnSbCKBqn/VU6eFH6pao/w/b555S5SlgCPJw/dneWIqeOPH2dQ1/g2/lnjQBdYla4\nLF99ZfylTRwwbNJKlW/XCJXvUmd+tlAbRlw/mPM2M9kIuMgRlqTUN+DeSSgXHVUl\nYxaBwK4bvTp14TH1AP9un/LMFLn54LtgSKdEAeho2/LWDwxEJ165cZiMjdotPTk=\n=gk2I\n-----END PGP SIGNATURE-----",
        "payload": "tree e215dd05d37b8c17f1fe3e5d4ff5841a74620481\nparent 5ca149a3db4a9f4e5ea93353494b40f2f1713e76\nparent a46f87f0c17323d8853d95f8ea99f8fb0f3bda1a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448627648 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448628314 +0100\n\nMerge pull request #6780\n\na46f87f Initialize logging before we do parameter interaction (Jonas Schnelli)\ndf66147 Move -blocksonly parameter interaction to the new ParameterInteraction() function (Jonas Schnelli)\n68354e7 [QT] Call inits parameter interaction before we create the options model (Jonas Schnelli)\n411b05a Refactor parameter interaction, call it before AppInit2() (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a94cd67e80555aec3ba13d5129b1f5402b0c5b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a94cd67e80555aec3ba13d5129b1f5402b0c5b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a94cd67e80555aec3ba13d5129b1f5402b0c5b4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5ca149a3db4a9f4e5ea93353494b40f2f1713e76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ca149a3db4a9f4e5ea93353494b40f2f1713e76",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ca149a3db4a9f4e5ea93353494b40f2f1713e76"
      },
      {
        "sha": "a46f87f0c17323d8853d95f8ea99f8fb0f3bda1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a46f87f0c17323d8853d95f8ea99f8fb0f3bda1a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a46f87f0c17323d8853d95f8ea99f8fb0f3bda1a"
      }
    ],
    "stats": {
      "total": 169,
      "additions": 102,
      "deletions": 67
    },
    "files": [
      {
        "sha": "4cee2d3cf0e6c24fe73262cad4960b53adac1321",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a94cd67e80555aec3ba13d5129b1f5402b0c5b4/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a94cd67e80555aec3ba13d5129b1f5402b0c5b4/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=2a94cd67e80555aec3ba13d5129b1f5402b0c5b4",
        "patch": "@@ -151,6 +151,9 @@ bool AppInit(int argc, char* argv[])\n #endif\n         SoftSetBoolArg(\"-server\", true);\n \n+        // Set this early so that parameter interactions go to console\n+        InitLogging();\n+        InitParameterInteraction();\n         fRet = AppInit2(threadGroup, scheduler);\n     }\n     catch (const std::exception& e) {"
      },
      {
        "sha": "bc6d724d719d440c400aeaee85986f2afac3e42d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 85,
        "deletions": 67,
        "changes": 152,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a94cd67e80555aec3ba13d5129b1f5402b0c5b4/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a94cd67e80555aec3ba13d5129b1f5402b0c5b4/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2a94cd67e80555aec3ba13d5129b1f5402b0c5b4",
        "patch": "@@ -682,6 +682,91 @@ bool AppInitServers(boost::thread_group& threadGroup)\n     return true;\n }\n \n+// Parameter interaction based on rules\n+void InitParameterInteraction()\n+{\n+    // when specifying an explicit binding address, you want to listen on it\n+    // even when -connect or -proxy is specified\n+    if (mapArgs.count(\"-bind\")) {\n+        if (SoftSetBoolArg(\"-listen\", true))\n+            LogPrintf(\"%s: parameter interaction: -bind set -> setting -listen=1\\n\", __func__);\n+    }\n+    if (mapArgs.count(\"-whitebind\")) {\n+        if (SoftSetBoolArg(\"-listen\", true))\n+            LogPrintf(\"%s: parameter interaction: -whitebind set -> setting -listen=1\\n\", __func__);\n+    }\n+\n+    if (mapArgs.count(\"-connect\") && mapMultiArgs[\"-connect\"].size() > 0) {\n+        // when only connecting to trusted nodes, do not seed via DNS, or listen by default\n+        if (SoftSetBoolArg(\"-dnsseed\", false))\n+            LogPrintf(\"%s: parameter interaction: -connect set -> setting -dnsseed=0\\n\", __func__);\n+        if (SoftSetBoolArg(\"-listen\", false))\n+            LogPrintf(\"%s: parameter interaction: -connect set -> setting -listen=0\\n\", __func__);\n+    }\n+\n+    if (mapArgs.count(\"-proxy\")) {\n+        // to protect privacy, do not listen by default if a default proxy server is specified\n+        if (SoftSetBoolArg(\"-listen\", false))\n+            LogPrintf(\"%s: parameter interaction: -proxy set -> setting -listen=0\\n\", __func__);\n+        // to protect privacy, do not use UPNP when a proxy is set. The user may still specify -listen=1\n+        // to listen locally, so don't rely on this happening through -listen below.\n+        if (SoftSetBoolArg(\"-upnp\", false))\n+            LogPrintf(\"%s: parameter interaction: -proxy set -> setting -upnp=0\\n\", __func__);\n+        // to protect privacy, do not discover addresses by default\n+        if (SoftSetBoolArg(\"-discover\", false))\n+            LogPrintf(\"%s: parameter interaction: -proxy set -> setting -discover=0\\n\", __func__);\n+    }\n+\n+    if (!GetBoolArg(\"-listen\", DEFAULT_LISTEN)) {\n+        // do not map ports or try to retrieve public IP when not listening (pointless)\n+        if (SoftSetBoolArg(\"-upnp\", false))\n+            LogPrintf(\"%s: parameter interaction: -listen=0 -> setting -upnp=0\\n\", __func__);\n+        if (SoftSetBoolArg(\"-discover\", false))\n+            LogPrintf(\"%s: parameter interaction: -listen=0 -> setting -discover=0\\n\", __func__);\n+        if (SoftSetBoolArg(\"-listenonion\", false))\n+            LogPrintf(\"%s: parameter interaction: -listen=0 -> setting -listenonion=0\\n\", __func__);\n+    }\n+\n+    if (mapArgs.count(\"-externalip\")) {\n+        // if an explicit public IP is specified, do not try to find others\n+        if (SoftSetBoolArg(\"-discover\", false))\n+            LogPrintf(\"%s: parameter interaction: -externalip set -> setting -discover=0\\n\", __func__);\n+    }\n+\n+    if (GetBoolArg(\"-salvagewallet\", false)) {\n+        // Rewrite just private keys: rescan to find transactions\n+        if (SoftSetBoolArg(\"-rescan\", true))\n+            LogPrintf(\"%s: parameter interaction: -salvagewallet=1 -> setting -rescan=1\\n\", __func__);\n+    }\n+\n+    // -zapwallettx implies a rescan\n+    if (GetBoolArg(\"-zapwallettxes\", false)) {\n+        if (SoftSetBoolArg(\"-rescan\", true))\n+            LogPrintf(\"%s: parameter interaction: -zapwallettxes=<mode> -> setting -rescan=1\\n\", __func__);\n+    }\n+\n+    // disable walletbroadcast and whitelistalwaysrelay in blocksonly mode\n+    if (GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY)) {\n+        if (SoftSetBoolArg(\"-whitelistalwaysrelay\", false))\n+            LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -whitelistalwaysrelay=0\\n\", __func__);\n+#ifdef ENABLE_WALLET\n+        if (SoftSetBoolArg(\"-walletbroadcast\", false))\n+            LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -walletbroadcast=0\\n\", __func__);\n+#endif\n+    }\n+}\n+\n+void InitLogging()\n+{\n+    fPrintToConsole = GetBoolArg(\"-printtoconsole\", false);\n+    fLogTimestamps = GetBoolArg(\"-logtimestamps\", true);\n+    fLogTimeMicros = GetBoolArg(\"-logtimemicros\", DEFAULT_LOGTIMEMICROS);\n+    fLogIPs = GetBoolArg(\"-logips\", false);\n+\n+    LogPrintf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");\n+    LogPrintf(\"Bitcoin version %s (%s)\\n\", FormatFullVersion(), CLIENT_DATE);\n+}\n+\n /** Initialize bitcoin.\n  *  @pre Parameters should be parsed and config file should be read.\n  */\n@@ -746,74 +831,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // ********************************************************* Step 2: parameter interactions\n     const CChainParams& chainparams = Params();\n \n-    // Set this early so that parameter interactions go to console\n-    fPrintToConsole = GetBoolArg(\"-printtoconsole\", false);\n-    fLogTimestamps = GetBoolArg(\"-logtimestamps\", true);\n-    fLogTimeMicros = GetBoolArg(\"-logtimemicros\", DEFAULT_LOGTIMEMICROS);\n-    fLogIPs = GetBoolArg(\"-logips\", false);\n-\n-    LogPrintf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");\n-    LogPrintf(\"Bitcoin version %s (%s)\\n\", FormatFullVersion(), CLIENT_DATE);\n-\n-    // when specifying an explicit binding address, you want to listen on it\n-    // even when -connect or -proxy is specified\n-    if (mapArgs.count(\"-bind\")) {\n-        if (SoftSetBoolArg(\"-listen\", true))\n-            LogPrintf(\"%s: parameter interaction: -bind set -> setting -listen=1\\n\", __func__);\n-    }\n-    if (mapArgs.count(\"-whitebind\")) {\n-        if (SoftSetBoolArg(\"-listen\", true))\n-            LogPrintf(\"%s: parameter interaction: -whitebind set -> setting -listen=1\\n\", __func__);\n-    }\n-\n-    if (mapArgs.count(\"-connect\") && mapMultiArgs[\"-connect\"].size() > 0) {\n-        // when only connecting to trusted nodes, do not seed via DNS, or listen by default\n-        if (SoftSetBoolArg(\"-dnsseed\", false))\n-            LogPrintf(\"%s: parameter interaction: -connect set -> setting -dnsseed=0\\n\", __func__);\n-        if (SoftSetBoolArg(\"-listen\", false))\n-            LogPrintf(\"%s: parameter interaction: -connect set -> setting -listen=0\\n\", __func__);\n-    }\n-\n-    if (mapArgs.count(\"-proxy\")) {\n-        // to protect privacy, do not listen by default if a default proxy server is specified\n-        if (SoftSetBoolArg(\"-listen\", false))\n-            LogPrintf(\"%s: parameter interaction: -proxy set -> setting -listen=0\\n\", __func__);\n-        // to protect privacy, do not use UPNP when a proxy is set. The user may still specify -listen=1\n-        // to listen locally, so don't rely on this happening through -listen below.\n-        if (SoftSetBoolArg(\"-upnp\", false))\n-            LogPrintf(\"%s: parameter interaction: -proxy set -> setting -upnp=0\\n\", __func__);\n-        // to protect privacy, do not discover addresses by default\n-        if (SoftSetBoolArg(\"-discover\", false))\n-            LogPrintf(\"%s: parameter interaction: -proxy set -> setting -discover=0\\n\", __func__);\n-    }\n-\n-    if (!GetBoolArg(\"-listen\", DEFAULT_LISTEN)) {\n-        // do not map ports or try to retrieve public IP when not listening (pointless)\n-        if (SoftSetBoolArg(\"-upnp\", false))\n-            LogPrintf(\"%s: parameter interaction: -listen=0 -> setting -upnp=0\\n\", __func__);\n-        if (SoftSetBoolArg(\"-discover\", false))\n-            LogPrintf(\"%s: parameter interaction: -listen=0 -> setting -discover=0\\n\", __func__);\n-        if (SoftSetBoolArg(\"-listenonion\", false))\n-            LogPrintf(\"%s: parameter interaction: -listen=0 -> setting -listenonion=0\\n\", __func__);\n-    }\n-\n-    if (mapArgs.count(\"-externalip\")) {\n-        // if an explicit public IP is specified, do not try to find others\n-        if (SoftSetBoolArg(\"-discover\", false))\n-            LogPrintf(\"%s: parameter interaction: -externalip set -> setting -discover=0\\n\", __func__);\n-    }\n-\n-    if (GetBoolArg(\"-salvagewallet\", false)) {\n-        // Rewrite just private keys: rescan to find transactions\n-        if (SoftSetBoolArg(\"-rescan\", true))\n-            LogPrintf(\"%s: parameter interaction: -salvagewallet=1 -> setting -rescan=1\\n\", __func__);\n-    }\n \n-    // -zapwallettx implies a rescan\n-    if (GetBoolArg(\"-zapwallettxes\", false)) {\n-        if (SoftSetBoolArg(\"-rescan\", true))\n-            LogPrintf(\"%s: parameter interaction: -zapwallettxes=<mode> -> setting -rescan=1\\n\", __func__);\n-    }\n \n     // if using block pruning, then disable txindex\n     if (GetArg(\"-prune\", 0)) {"
      },
      {
        "sha": "d4872e779480d67ad24515657bdac3f2ec437d66",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a94cd67e80555aec3ba13d5129b1f5402b0c5b4/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a94cd67e80555aec3ba13d5129b1f5402b0c5b4/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=2a94cd67e80555aec3ba13d5129b1f5402b0c5b4",
        "patch": "@@ -23,6 +23,10 @@ bool ShutdownRequested();\n /** Interrupt threads */\n void Interrupt(boost::thread_group& threadGroup);\n void Shutdown();\n+//!Initialize the logging infrastructure\n+void InitLogging();\n+//!Parameter interaction: change current parameters depending on various rules\n+void InitParameterInteraction();\n bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler);\n \n /** The help message mode determines what help message to show */"
      },
      {
        "sha": "d407e539efc77355b7d4b2bd25329a8ba1e2bddd",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a94cd67e80555aec3ba13d5129b1f5402b0c5b4/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a94cd67e80555aec3ba13d5129b1f5402b0c5b4/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=2a94cd67e80555aec3ba13d5129b1f5402b0c5b4",
        "patch": "@@ -201,6 +201,8 @@ class BitcoinApplication: public QApplication\n     /// Create payment server\n     void createPaymentServer();\n #endif\n+    /// parameter interaction/setup based on rules\n+    void parameterSetup();\n     /// Create options model\n     void createOptionsModel(bool resetSettings);\n     /// Create main window\n@@ -397,6 +399,12 @@ void BitcoinApplication::startThread()\n     coreThread->start();\n }\n \n+void BitcoinApplication::parameterSetup()\n+{\n+    InitLogging();\n+    InitParameterInteraction();\n+}\n+\n void BitcoinApplication::requestInitialize()\n {\n     qDebug() << __func__ << \": Requesting initialize\";\n@@ -644,6 +652,8 @@ int main(int argc, char *argv[])\n     // Install qDebug() message handler to route to debug.log\n     qInstallMessageHandler(DebugMessageHandler);\n #endif\n+    // Allow parameter interaction before we create the options model\n+    app.parameterSetup();\n     // Load GUI settings from QSettings\n     app.createOptionsModel(mapArgs.count(\"-resetguisettings\") != 0);\n "
      }
    ]
  },
  {
    "sha": "9502b7f634a7f75e06708ddd38ab8931313e19c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTAyYjdmNjM0YTdmNzVlMDY3MDhkZGQzOGFiODkzMTMxM2UxOWM5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-27T13:08:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-27T13:08:40Z"
      },
      "message": "Merge pull request #7083\n\nfaf12bc OpenSSL 1.1.0: Fix text variant of the version number (MarcoFalke)",
      "tree": {
        "sha": "45d877d6b3f2804ea8cbb0c93b19f140584a83a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45d877d6b3f2804ea8cbb0c93b19f140584a83a5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9502b7f634a7f75e06708ddd38ab8931313e19c9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWWFXYAAoJEHSBCwEjRsmm72IH/A9AafDyuMaNrVrVyNwIO78w\nGKFstxGBNt+ZToXjd4dT4h+h1+1jMfjJF+YkHQrwffptI/l5RhOnjzD/lNoM/pKn\nxJvV0tVpijlI2zGKmzTumgyy0hbgormF0NQA+IbpUNyZJckgZXVLvdVStg3NKhO9\ncb7VADLbjVUGe/xQ1Tq3qLJSHftG+/F3mrrHxaH1uqjAj0C3CjQOhxnqMjfWM9ax\nIA7CLUQ3EvDkZ3VXTrTugz1Go6mV3hL6ZHAZu3BJl1duyys/CNvQdcJPr3wM9Z7a\nTFGM6DackQeGUPoO9E7inOylbEgsvpARdCgGHItCYEc8UXZX+no92GS9chCVr1o=\n=SAMf\n-----END PGP SIGNATURE-----",
        "payload": "tree 45d877d6b3f2804ea8cbb0c93b19f140584a83a5\nparent 2a94cd67e80555aec3ba13d5129b1f5402b0c5b4\nparent faf12bc2839d0a858b36c371aaf26902e49e380c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448629699 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448629720 +0100\n\nMerge pull request #7083\n\nfaf12bc OpenSSL 1.1.0: Fix text variant of the version number (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9502b7f634a7f75e06708ddd38ab8931313e19c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9502b7f634a7f75e06708ddd38ab8931313e19c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9502b7f634a7f75e06708ddd38ab8931313e19c9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a94cd67e80555aec3ba13d5129b1f5402b0c5b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a94cd67e80555aec3ba13d5129b1f5402b0c5b4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a94cd67e80555aec3ba13d5129b1f5402b0c5b4"
      },
      {
        "sha": "faf12bc2839d0a858b36c371aaf26902e49e380c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf12bc2839d0a858b36c371aaf26902e49e380c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faf12bc2839d0a858b36c371aaf26902e49e380c"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3e46958afc3b7ea96877aa535c797aff9c68a6e6",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9502b7f634a7f75e06708ddd38ab8931313e19c9/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9502b7f634a7f75e06708ddd38ab8931313e19c9/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9502b7f634a7f75e06708ddd38ab8931313e19c9",
        "patch": "@@ -1049,7 +1049,12 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if (fPrintToDebugLog)\n         OpenDebugLog();\n \n+#if (OPENSSL_VERSION_NUMBER < 0x10100000L)\n     LogPrintf(\"Using OpenSSL version %s\\n\", SSLeay_version(SSLEAY_VERSION));\n+#else\n+    LogPrintf(\"Using OpenSSL version %s\\n\", OpenSSL_version(OPENSSL_VERSION));\n+#endif\n+\n #ifdef ENABLE_WALLET\n     LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));\n #endif"
      },
      {
        "sha": "b2b4fd0fab961eb854e368585cb3b5220c959fa8",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9502b7f634a7f75e06708ddd38ab8931313e19c9/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9502b7f634a7f75e06708ddd38ab8931313e19c9/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=9502b7f634a7f75e06708ddd38ab8931313e19c9",
        "patch": "@@ -263,7 +263,13 @@ RPCConsole::RPCConsole(const PlatformStyle *platformStyle, QWidget *parent) :\n     connect(ui->btnClearTrafficGraph, SIGNAL(clicked()), ui->trafficGraph, SLOT(clear()));\n \n     // set library version labels\n+\n+#if (OPENSSL_VERSION_NUMBER < 0x10100000L)\n     ui->openSSLVersion->setText(SSLeay_version(SSLEAY_VERSION));\n+#else\n+    ui->openSSLVersion->setText(OpenSSL_version(OPENSSL_VERSION));\n+#endif\n+\n #ifdef ENABLE_WALLET\n     ui->berkeleyDBVersion->setText(DbEnv::version(0, 0, 0));\n #else"
      }
    ]
  },
  {
    "sha": "d8368a07baf2a6555557c038cbcecb615c24bdf6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODM2OGEwN2JhZjJhNjU1NTU1N2MwMzhjYmNlY2I2MTVjMjRiZGY2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-27T13:09:14Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-27T13:16:55Z"
      },
      "message": "Merge pull request #7095\n\n4ec3561 Replace scriptnum_test's normative ScriptNum implementation (Wladimir J. van der Laan)",
      "tree": {
        "sha": "9613c1cc0fc530a0ceeb7da73eee4b03fb43eaef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9613c1cc0fc530a0ceeb7da73eee4b03fb43eaef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8368a07baf2a6555557c038cbcecb615c24bdf6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWWFfHAAoJEHSBCwEjRsmm1XMIALEFmQKDiNEafssScW5bnKq6\nX8TYtpT7hmnOWDqCXA9VIOexp1zxDYkyAF67Qno8pPllo74hI4KqIw533gLsTcdH\nQ/54cO8qYQps0DNQXNX2trfRh/FU3h7hIxyWXF5Kx1mP1hSFyJmCirr1nf9cUcKe\niwH6HBTvvsK6I7WVbCxpNadx99JpuV0RodFDT6TcKsNGcNWqRUnW4MU4FUmH8XQC\nbNWtISKZMInUOIiBpg2RNnfs41OcP21r33CqO4HaSk88GfEXg2AnN50uWcNMMAAf\nkGHSmOIId5crQH+G21TpSNUxJlxS8TLYU9PZlNLZsA/T+OFrEKVKPn9MQo6IqMw=\n=DyT/\n-----END PGP SIGNATURE-----",
        "payload": "tree 9613c1cc0fc530a0ceeb7da73eee4b03fb43eaef\nparent 9502b7f634a7f75e06708ddd38ab8931313e19c9\nparent 4ec3561eb3473638230ef780b41343bc6284b460\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448629754 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448630215 +0100\n\nMerge pull request #7095\n\n4ec3561 Replace scriptnum_test's normative ScriptNum implementation (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8368a07baf2a6555557c038cbcecb615c24bdf6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8368a07baf2a6555557c038cbcecb615c24bdf6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8368a07baf2a6555557c038cbcecb615c24bdf6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9502b7f634a7f75e06708ddd38ab8931313e19c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9502b7f634a7f75e06708ddd38ab8931313e19c9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9502b7f634a7f75e06708ddd38ab8931313e19c9"
      },
      {
        "sha": "4ec3561eb3473638230ef780b41343bc6284b460",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ec3561eb3473638230ef780b41343bc6284b460",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ec3561eb3473638230ef780b41343bc6284b460"
      }
    ],
    "stats": {
      "total": 406,
      "additions": 206,
      "deletions": 200
    },
    "files": [
      {
        "sha": "fafc1a294473bffa39246debabb9c00a05995ec3",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8368a07baf2a6555557c038cbcecb615c24bdf6/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8368a07baf2a6555557c038cbcecb615c24bdf6/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=d8368a07baf2a6555557c038cbcecb615c24bdf6",
        "patch": "@@ -35,7 +35,7 @@ GENERATED_TEST_FILES = $(JSON_TEST_FILES:.json=.json.h) $(RAW_TEST_FILES:.raw=.r\n \n BITCOIN_TESTS =\\\n   test/arith_uint256_tests.cpp \\\n-  test/bignum.h \\\n+  test/scriptnum10.h \\\n   test/addrman_tests.cpp \\\n   test/alert_tests.cpp \\\n   test/allocator_tests.cpp \\"
      },
      {
        "sha": "e7aeee9db606c870315542a50dca96b9eb7e2ff7",
        "filename": "src/test/bignum.h",
        "status": "removed",
        "additions": 0,
        "deletions": 180,
        "changes": 180,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9502b7f634a7f75e06708ddd38ab8931313e19c9/src/test/bignum.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9502b7f634a7f75e06708ddd38ab8931313e19c9/src/test/bignum.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bignum.h?ref=9502b7f634a7f75e06708ddd38ab8931313e19c9",
        "patch": "@@ -1,180 +0,0 @@\n-// Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_TEST_BIGNUM_H\n-#define BITCOIN_TEST_BIGNUM_H\n-\n-#include <algorithm>\n-#include <limits>\n-#include <stdexcept>\n-#include <stdint.h>\n-#include <string>\n-#include <vector>\n-\n-#include <openssl/bn.h>\n-\n-class bignum_error : public std::runtime_error\n-{\n-public:\n-    explicit bignum_error(const std::string& str) : std::runtime_error(str) {}\n-};\n-\n-\n-/** C++ wrapper for BIGNUM (OpenSSL bignum) */\n-class CBigNum : public BIGNUM\n-{\n-public:\n-    CBigNum()\n-    {\n-        BN_init(this);\n-    }\n-\n-    CBigNum(const CBigNum& b)\n-    {\n-        BN_init(this);\n-        if (!BN_copy(this, &b))\n-        {\n-            BN_clear_free(this);\n-            throw bignum_error(\"CBigNum::CBigNum(const CBigNum&): BN_copy failed\");\n-        }\n-    }\n-\n-    CBigNum& operator=(const CBigNum& b)\n-    {\n-        if (!BN_copy(this, &b))\n-            throw bignum_error(\"CBigNum::operator=: BN_copy failed\");\n-        return (*this);\n-    }\n-\n-    ~CBigNum()\n-    {\n-        BN_clear_free(this);\n-    }\n-\n-    CBigNum(long long n)          { BN_init(this); setint64(n); }\n-\n-    explicit CBigNum(const std::vector<unsigned char>& vch)\n-    {\n-        BN_init(this);\n-        setvch(vch);\n-    }\n-\n-    int getint() const\n-    {\n-        BN_ULONG n = BN_get_word(this);\n-        if (!BN_is_negative(this))\n-            return (n > (BN_ULONG)std::numeric_limits<int>::max() ? std::numeric_limits<int>::max() : n);\n-        else\n-            return (n > (BN_ULONG)std::numeric_limits<int>::max() ? std::numeric_limits<int>::min() : -(int)n);\n-    }\n-\n-    void setint64(int64_t sn)\n-    {\n-        unsigned char pch[sizeof(sn) + 6];\n-        unsigned char* p = pch + 4;\n-        bool fNegative;\n-        uint64_t n;\n-\n-        if (sn < (int64_t)0)\n-        {\n-            // Since the minimum signed integer cannot be represented as positive so long as its type is signed, \n-            // and it's not well-defined what happens if you make it unsigned before negating it,\n-            // we instead increment the negative integer by 1, convert it, then increment the (now positive) unsigned integer by 1 to compensate\n-            n = -(sn + 1);\n-            ++n;\n-            fNegative = true;\n-        } else {\n-            n = sn;\n-            fNegative = false;\n-        }\n-\n-        bool fLeadingZeroes = true;\n-        for (int i = 0; i < 8; i++)\n-        {\n-            unsigned char c = (n >> 56) & 0xff;\n-            n <<= 8;\n-            if (fLeadingZeroes)\n-            {\n-                if (c == 0)\n-                    continue;\n-                if (c & 0x80)\n-                    *p++ = (fNegative ? 0x80 : 0);\n-                else if (fNegative)\n-                    c |= 0x80;\n-                fLeadingZeroes = false;\n-            }\n-            *p++ = c;\n-        }\n-        unsigned int nSize = p - (pch + 4);\n-        pch[0] = (nSize >> 24) & 0xff;\n-        pch[1] = (nSize >> 16) & 0xff;\n-        pch[2] = (nSize >> 8) & 0xff;\n-        pch[3] = (nSize) & 0xff;\n-        BN_mpi2bn(pch, p - pch, this);\n-    }\n-\n-    void setvch(const std::vector<unsigned char>& vch)\n-    {\n-        std::vector<unsigned char> vch2(vch.size() + 4);\n-        unsigned int nSize = vch.size();\n-        // BIGNUM's byte stream format expects 4 bytes of\n-        // big endian size data info at the front\n-        vch2[0] = (nSize >> 24) & 0xff;\n-        vch2[1] = (nSize >> 16) & 0xff;\n-        vch2[2] = (nSize >> 8) & 0xff;\n-        vch2[3] = (nSize >> 0) & 0xff;\n-        // swap data to big endian\n-        reverse_copy(vch.begin(), vch.end(), vch2.begin() + 4);\n-        BN_mpi2bn(&vch2[0], vch2.size(), this);\n-    }\n-\n-    std::vector<unsigned char> getvch() const\n-    {\n-        unsigned int nSize = BN_bn2mpi(this, NULL);\n-        if (nSize <= 4)\n-            return std::vector<unsigned char>();\n-        std::vector<unsigned char> vch(nSize);\n-        BN_bn2mpi(this, &vch[0]);\n-        vch.erase(vch.begin(), vch.begin() + 4);\n-        reverse(vch.begin(), vch.end());\n-        return vch;\n-    }\n-\n-    friend inline const CBigNum operator-(const CBigNum& a, const CBigNum& b);\n-};\n-\n-\n-\n-inline const CBigNum operator+(const CBigNum& a, const CBigNum& b)\n-{\n-    CBigNum r;\n-    if (!BN_add(&r, &a, &b))\n-        throw bignum_error(\"CBigNum::operator+: BN_add failed\");\n-    return r;\n-}\n-\n-inline const CBigNum operator-(const CBigNum& a, const CBigNum& b)\n-{\n-    CBigNum r;\n-    if (!BN_sub(&r, &a, &b))\n-        throw bignum_error(\"CBigNum::operator-: BN_sub failed\");\n-    return r;\n-}\n-\n-inline const CBigNum operator-(const CBigNum& a)\n-{\n-    CBigNum r(a);\n-    BN_set_negative(&r, !BN_is_negative(&r));\n-    return r;\n-}\n-\n-inline bool operator==(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) == 0); }\n-inline bool operator!=(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) != 0); }\n-inline bool operator<=(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) <= 0); }\n-inline bool operator>=(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) >= 0); }\n-inline bool operator<(const CBigNum& a, const CBigNum& b)  { return (BN_cmp(&a, &b) < 0); }\n-inline bool operator>(const CBigNum& a, const CBigNum& b)  { return (BN_cmp(&a, &b) > 0); }\n-\n-#endif // BITCOIN_TEST_BIGNUM_H"
      },
      {
        "sha": "00419746b7ebfc946ee74ab9f14d65472f9e3902",
        "filename": "src/test/scriptnum10.h",
        "status": "added",
        "additions": 183,
        "deletions": 0,
        "changes": 183,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8368a07baf2a6555557c038cbcecb615c24bdf6/src/test/scriptnum10.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8368a07baf2a6555557c038cbcecb615c24bdf6/src/test/scriptnum10.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scriptnum10.h?ref=d8368a07baf2a6555557c038cbcecb615c24bdf6",
        "patch": "@@ -0,0 +1,183 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TEST_SCRIPTNUM10_H\n+#define BITCOIN_TEST_SCRIPTNUM10_H\n+\n+#include <algorithm>\n+#include <limits>\n+#include <stdexcept>\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+#include \"assert.h\"\n+\n+class scriptnum10_error : public std::runtime_error\n+{\n+public:\n+    explicit scriptnum10_error(const std::string& str) : std::runtime_error(str) {}\n+};\n+\n+class CScriptNum10\n+{\n+/**\n+ * The ScriptNum implementation from Bitcoin Core 0.10.0, for cross-comparison.\n+ */\n+public:\n+\n+    explicit CScriptNum10(const int64_t& n)\n+    {\n+        m_value = n;\n+    }\n+\n+    static const size_t nDefaultMaxNumSize = 4;\n+\n+    explicit CScriptNum10(const std::vector<unsigned char>& vch, bool fRequireMinimal,\n+                        const size_t nMaxNumSize = nDefaultMaxNumSize)\n+    {\n+        if (vch.size() > nMaxNumSize) {\n+            throw scriptnum10_error(\"script number overflow\");\n+        }\n+        if (fRequireMinimal && vch.size() > 0) {\n+            // Check that the number is encoded with the minimum possible\n+            // number of bytes.\n+            //\n+            // If the most-significant-byte - excluding the sign bit - is zero\n+            // then we're not minimal. Note how this test also rejects the\n+            // negative-zero encoding, 0x80.\n+            if ((vch.back() & 0x7f) == 0) {\n+                // One exception: if there's more than one byte and the most\n+                // significant bit of the second-most-significant-byte is set\n+                // it would conflict with the sign bit. An example of this case\n+                // is +-255, which encode to 0xff00 and 0xff80 respectively.\n+                // (big-endian).\n+                if (vch.size() <= 1 || (vch[vch.size() - 2] & 0x80) == 0) {\n+                    throw scriptnum10_error(\"non-minimally encoded script number\");\n+                }\n+            }\n+        }\n+        m_value = set_vch(vch);\n+    }\n+\n+    inline bool operator==(const int64_t& rhs) const    { return m_value == rhs; }\n+    inline bool operator!=(const int64_t& rhs) const    { return m_value != rhs; }\n+    inline bool operator<=(const int64_t& rhs) const    { return m_value <= rhs; }\n+    inline bool operator< (const int64_t& rhs) const    { return m_value <  rhs; }\n+    inline bool operator>=(const int64_t& rhs) const    { return m_value >= rhs; }\n+    inline bool operator> (const int64_t& rhs) const    { return m_value >  rhs; }\n+\n+    inline bool operator==(const CScriptNum10& rhs) const { return operator==(rhs.m_value); }\n+    inline bool operator!=(const CScriptNum10& rhs) const { return operator!=(rhs.m_value); }\n+    inline bool operator<=(const CScriptNum10& rhs) const { return operator<=(rhs.m_value); }\n+    inline bool operator< (const CScriptNum10& rhs) const { return operator< (rhs.m_value); }\n+    inline bool operator>=(const CScriptNum10& rhs) const { return operator>=(rhs.m_value); }\n+    inline bool operator> (const CScriptNum10& rhs) const { return operator> (rhs.m_value); }\n+\n+    inline CScriptNum10 operator+(   const int64_t& rhs)    const { return CScriptNum10(m_value + rhs);}\n+    inline CScriptNum10 operator-(   const int64_t& rhs)    const { return CScriptNum10(m_value - rhs);}\n+    inline CScriptNum10 operator+(   const CScriptNum10& rhs) const { return operator+(rhs.m_value);   }\n+    inline CScriptNum10 operator-(   const CScriptNum10& rhs) const { return operator-(rhs.m_value);   }\n+\n+    inline CScriptNum10& operator+=( const CScriptNum10& rhs)       { return operator+=(rhs.m_value);  }\n+    inline CScriptNum10& operator-=( const CScriptNum10& rhs)       { return operator-=(rhs.m_value);  }\n+\n+    inline CScriptNum10 operator-()                         const\n+    {\n+        assert(m_value != std::numeric_limits<int64_t>::min());\n+        return CScriptNum10(-m_value);\n+    }\n+\n+    inline CScriptNum10& operator=( const int64_t& rhs)\n+    {\n+        m_value = rhs;\n+        return *this;\n+    }\n+\n+    inline CScriptNum10& operator+=( const int64_t& rhs)\n+    {\n+        assert(rhs == 0 || (rhs > 0 && m_value <= std::numeric_limits<int64_t>::max() - rhs) ||\n+                           (rhs < 0 && m_value >= std::numeric_limits<int64_t>::min() - rhs));\n+        m_value += rhs;\n+        return *this;\n+    }\n+\n+    inline CScriptNum10& operator-=( const int64_t& rhs)\n+    {\n+        assert(rhs == 0 || (rhs > 0 && m_value >= std::numeric_limits<int64_t>::min() + rhs) ||\n+                           (rhs < 0 && m_value <= std::numeric_limits<int64_t>::max() + rhs));\n+        m_value -= rhs;\n+        return *this;\n+    }\n+\n+    int getint() const\n+    {\n+        if (m_value > std::numeric_limits<int>::max())\n+            return std::numeric_limits<int>::max();\n+        else if (m_value < std::numeric_limits<int>::min())\n+            return std::numeric_limits<int>::min();\n+        return m_value;\n+    }\n+\n+    std::vector<unsigned char> getvch() const\n+    {\n+        return serialize(m_value);\n+    }\n+\n+    static std::vector<unsigned char> serialize(const int64_t& value)\n+    {\n+        if(value == 0)\n+            return std::vector<unsigned char>();\n+\n+        std::vector<unsigned char> result;\n+        const bool neg = value < 0;\n+        uint64_t absvalue = neg ? -value : value;\n+\n+        while(absvalue)\n+        {\n+            result.push_back(absvalue & 0xff);\n+            absvalue >>= 8;\n+        }\n+\n+//    - If the most significant byte is >= 0x80 and the value is positive, push a\n+//    new zero-byte to make the significant byte < 0x80 again.\n+\n+//    - If the most significant byte is >= 0x80 and the value is negative, push a\n+//    new 0x80 byte that will be popped off when converting to an integral.\n+\n+//    - If the most significant byte is < 0x80 and the value is negative, add\n+//    0x80 to it, since it will be subtracted and interpreted as a negative when\n+//    converting to an integral.\n+\n+        if (result.back() & 0x80)\n+            result.push_back(neg ? 0x80 : 0);\n+        else if (neg)\n+            result.back() |= 0x80;\n+\n+        return result;\n+    }\n+\n+private:\n+    static int64_t set_vch(const std::vector<unsigned char>& vch)\n+    {\n+      if (vch.empty())\n+          return 0;\n+\n+      int64_t result = 0;\n+      for (size_t i = 0; i != vch.size(); ++i)\n+          result |= static_cast<int64_t>(vch[i]) << 8*i;\n+\n+      // If the input vector's most significant byte is 0x80, remove it from\n+      // the result's msb and return a negative.\n+      if (vch.back() & 0x80)\n+          return -((int64_t)(result & ~(0x80ULL << (8 * (vch.size() - 1)))));\n+\n+      return result;\n+    }\n+\n+    int64_t m_value;\n+};\n+\n+\n+#endif // BITCOIN_TEST_BIGNUM_H"
      },
      {
        "sha": "2405ab3ffc0dcba7e8559c8de741ada8102a9174",
        "filename": "src/test/scriptnum_tests.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 19,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8368a07baf2a6555557c038cbcecb615c24bdf6/src/test/scriptnum_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8368a07baf2a6555557c038cbcecb615c24bdf6/src/test/scriptnum_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scriptnum_tests.cpp?ref=d8368a07baf2a6555557c038cbcecb615c24bdf6",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bignum.h\"\n+#include \"scriptnum10.h\"\n #include \"script/script.h\"\n #include \"test/test_bitcoin.h\"\n \n@@ -16,45 +16,48 @@ static const int64_t values[] = \\\n { 0, 1, CHAR_MIN, CHAR_MAX, UCHAR_MAX, SHRT_MIN, USHRT_MAX, INT_MIN, INT_MAX, UINT_MAX, LONG_MIN, LONG_MAX };\n static const int64_t offsets[] = { 1, 0x79, 0x80, 0x81, 0xFF, 0x7FFF, 0x8000, 0xFFFF, 0x10000};\n \n-static bool verify(const CBigNum& bignum, const CScriptNum& scriptnum)\n+static bool verify(const CScriptNum10& bignum, const CScriptNum& scriptnum)\n {\n     return bignum.getvch() == scriptnum.getvch() && bignum.getint() == scriptnum.getint();\n }\n \n static void CheckCreateVch(const int64_t& num)\n {\n-    CBigNum bignum(num);\n+    CScriptNum10 bignum(num);\n     CScriptNum scriptnum(num);\n     BOOST_CHECK(verify(bignum, scriptnum));\n \n-    CBigNum bignum2(bignum.getvch());\n+    std::vector<unsigned char> vch = bignum.getvch();\n+\n+    CScriptNum10 bignum2(bignum.getvch(), false);\n+    vch = scriptnum.getvch();\n     CScriptNum scriptnum2(scriptnum.getvch(), false);\n     BOOST_CHECK(verify(bignum2, scriptnum2));\n \n-    CBigNum bignum3(scriptnum2.getvch());\n+    CScriptNum10 bignum3(scriptnum2.getvch(), false);\n     CScriptNum scriptnum3(bignum2.getvch(), false);\n     BOOST_CHECK(verify(bignum3, scriptnum3));\n }\n \n static void CheckCreateInt(const int64_t& num)\n {\n-    CBigNum bignum(num);\n+    CScriptNum10 bignum(num);\n     CScriptNum scriptnum(num);\n     BOOST_CHECK(verify(bignum, scriptnum));\n-    BOOST_CHECK(verify(bignum.getint(), CScriptNum(scriptnum.getint())));\n-    BOOST_CHECK(verify(scriptnum.getint(), CScriptNum(bignum.getint())));\n-    BOOST_CHECK(verify(CBigNum(scriptnum.getint()).getint(), CScriptNum(CScriptNum(bignum.getint()).getint())));\n+    BOOST_CHECK(verify(CScriptNum10(bignum.getint()), CScriptNum(scriptnum.getint())));\n+    BOOST_CHECK(verify(CScriptNum10(scriptnum.getint()), CScriptNum(bignum.getint())));\n+    BOOST_CHECK(verify(CScriptNum10(CScriptNum10(scriptnum.getint()).getint()), CScriptNum(CScriptNum(bignum.getint()).getint())));\n }\n \n \n static void CheckAdd(const int64_t& num1, const int64_t& num2)\n {\n-    const CBigNum bignum1(num1);\n-    const CBigNum bignum2(num2);\n+    const CScriptNum10 bignum1(num1);\n+    const CScriptNum10 bignum2(num2);\n     const CScriptNum scriptnum1(num1);\n     const CScriptNum scriptnum2(num2);\n-    CBigNum bignum3(num1);\n-    CBigNum bignum4(num1);\n+    CScriptNum10 bignum3(num1);\n+    CScriptNum10 bignum4(num1);\n     CScriptNum scriptnum3(num1);\n     CScriptNum scriptnum4(num1);\n \n@@ -71,7 +74,7 @@ static void CheckAdd(const int64_t& num1, const int64_t& num2)\n \n static void CheckNegate(const int64_t& num)\n {\n-    const CBigNum bignum(num);\n+    const CScriptNum10 bignum(num);\n     const CScriptNum scriptnum(num);\n \n     // -INT64_MIN is undefined\n@@ -81,8 +84,8 @@ static void CheckNegate(const int64_t& num)\n \n static void CheckSubtract(const int64_t& num1, const int64_t& num2)\n {\n-    const CBigNum bignum1(num1);\n-    const CBigNum bignum2(num2);\n+    const CScriptNum10 bignum1(num1);\n+    const CScriptNum10 bignum2(num2);\n     const CScriptNum scriptnum1(num1);\n     const CScriptNum scriptnum2(num2);\n     bool invalid = false;\n@@ -107,8 +110,8 @@ static void CheckSubtract(const int64_t& num1, const int64_t& num2)\n \n static void CheckCompare(const int64_t& num1, const int64_t& num2)\n {\n-    const CBigNum bignum1(num1);\n-    const CBigNum bignum2(num2);\n+    const CScriptNum10 bignum1(num1);\n+    const CScriptNum10 bignum2(num2);\n     const CScriptNum scriptnum1(num1);\n     const CScriptNum scriptnum2(num2);\n \n@@ -149,7 +152,7 @@ static void RunCreate(const int64_t& num)\n         CheckCreateVch(num);\n     else\n     {\n-        BOOST_CHECK_THROW (CheckCreateVch(num), scriptnum_error);\n+        BOOST_CHECK_THROW (CheckCreateVch(num), scriptnum10_error);\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "d6454f6cb23e3af0dae84a70aee57aed54bca04b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjQ1NGY2Y2IyM2UzYWYwZGFlODRhNzBhZWU1N2FlZDU0YmNhMDRi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-27T13:17:10Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-27T14:07:49Z"
      },
      "message": "Merge pull request #7090\n\ncde857f Connect to Tor hidden services by default (Peter Todd)",
      "tree": {
        "sha": "38677df791291eca1fff4d4af62a5de73ed8eca0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38677df791291eca1fff4d4af62a5de73ed8eca0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6454f6cb23e3af0dae84a70aee57aed54bca04b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWWGO1AAoJEHSBCwEjRsmmvbYIAJtp94JfOptcpCpB/3kRVCo6\nOme1iHnLxiEt7naGsUNibq+E7+JqD4BC5zVLQFJtW2BYsqlJ73D/ILS93qF/F752\najFojbZFcZQ4GH6i/z3WBXzon1p38pH65FegLsF0ZI0I9rpYyezf9fqaEzu2YorK\nh8qsbC39SXceuxRyIUoSYVc1U3RwuIQLgnq7VrPC0KQAbCSiSQm9/hm7vcSffAYR\nQdYHTE8Jkg7I7yJ1upO2b6KnApz0N9il0L+UKyNtAJ7Tq2wTctRKyL1lgqEwNHoH\nN1fIo/peF2Ce7VtV8OCER7QDf5qJOPXgikdfPGG7BSOR9mViGTw9wdOeMlvztbI=\n=cFai\n-----END PGP SIGNATURE-----",
        "payload": "tree 38677df791291eca1fff4d4af62a5de73ed8eca0\nparent d8368a07baf2a6555557c038cbcecb615c24bdf6\nparent cde857f2d977fbe3f96c093f6ca3c9810494191d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448630230 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448633269 +0100\n\nMerge pull request #7090\n\ncde857f Connect to Tor hidden services by default (Peter Todd)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6454f6cb23e3af0dae84a70aee57aed54bca04b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d6454f6cb23e3af0dae84a70aee57aed54bca04b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6454f6cb23e3af0dae84a70aee57aed54bca04b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8368a07baf2a6555557c038cbcecb615c24bdf6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8368a07baf2a6555557c038cbcecb615c24bdf6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8368a07baf2a6555557c038cbcecb615c24bdf6"
      },
      {
        "sha": "cde857f2d977fbe3f96c093f6ca3c9810494191d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cde857f2d977fbe3f96c093f6ca3c9810494191d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cde857f2d977fbe3f96c093f6ca3c9810494191d"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 14,
      "deletions": 4
    },
    "files": [
      {
        "sha": "009baaed516a98f0e40c1480c29e3be93aeda4a7",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6454f6cb23e3af0dae84a70aee57aed54bca04b/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6454f6cb23e3af0dae84a70aee57aed54bca04b/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=d6454f6cb23e3af0dae84a70aee57aed54bca04b",
        "patch": "@@ -151,17 +151,18 @@ mining with the getblocktemplate protocol to a pool: this will affect you at\n the pool operator's discretion, which must be no later than BIP65 achieving its\n 951/1001 status.\n \n-Automatically listen on Tor\n-----------------------------\n+Automatically use Tor hidden services\n+-------------------------------------\n \n Starting with Tor version 0.2.7.1 it is possible, through Tor's control socket\n API, to create and destroy 'ephemeral' hidden services programmatically.\n Bitcoin Core has been updated to make use of this.\n \n This means that if Tor is running (and proper authorization is available),\n Bitcoin Core automatically creates a hidden service to listen on, without\n-manual configuration. This will positively affect the number of available\n-.onion nodes.\n+manual configuration. Bitcoin Core will also use Tor automatically to connect\n+to other .onion nodes if the control socket can be successfully opened. This\n+will positively affect the number of available .onion nodes and their usage.\n \n This new feature is enabled by default if Bitcoin Core is listening, and\n a connection to Tor can be made. It can be configured with the `-listenonion`,"
      },
      {
        "sha": "31a2917203f12f673f6cfb90c87df3d3c54d3dfb",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6454f6cb23e3af0dae84a70aee57aed54bca04b/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6454f6cb23e3af0dae84a70aee57aed54bca04b/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=d6454f6cb23e3af0dae84a70aee57aed54bca04b",
        "patch": "@@ -449,6 +449,15 @@ void TorController::auth_cb(TorControlConnection& conn, const TorControlReply& r\n {\n     if (reply.code == 250) {\n         LogPrint(\"tor\", \"tor: Authentication succesful\\n\");\n+\n+        // Now that we know Tor is running setup the proxy for onion addresses\n+        // if -onion isn't set to something else.\n+        if (GetArg(\"-onion\", \"\") == \"\") {\n+            proxyType addrOnion = proxyType(CService(\"127.0.0.1\", 9050), true);\n+            SetProxy(NET_TOR, addrOnion);\n+            SetReachable(NET_TOR);\n+        }\n+\n         // Finally - now create the service\n         if (private_key.empty()) // No private key, generate one\n             private_key = \"NEW:BEST\";"
      }
    ]
  },
  {
    "sha": "f3d0fdd3924f5f8eeeb2ed4b8e60d04797248e58",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmM2QwZmRkMzkyNGY1ZjhlZWViMmVkNGI4ZTYwZDA0Nzk3MjQ4ZTU4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-27T14:08:04Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-27T14:11:36Z"
      },
      "message": "Merge pull request #7114\n\n9b63758 util: Don't set strMiscWarning on every exception (Wladimir J. van der Laan)",
      "tree": {
        "sha": "47d8d0628dc521a30dbe2244e75c8d35544ea89e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/47d8d0628dc521a30dbe2244e75c8d35544ea89e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3d0fdd3924f5f8eeeb2ed4b8e60d04797248e58",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWWGSYAAoJEHSBCwEjRsmmgAIH/RbpSwcyCszbIaYpL9ltizj4\nl1pR521ICFQWfNACwQWsaM4NPzYh6+zjGj1Lysk9s2Yl1ftzNZMj6r1nwmNtNDpS\nd2InvMjNmeCzOnvi0c7B/tTvh+NDZz7INmqlSl1G6A4hBfuRpIGgJedTwEd0Aqvy\nFoBpbWNyzHRuef9L6aP5OqY96o5DP/blNgulIUPknMVN1s0SMb846YtzMMm8WePB\nY2SLaEc7PZqtJOjJmzuBuCpX/by8WtxdVV18ANsFG1PYppvLoxZ4L5Bpz6qM29jt\nr9Pwy0WrdTfOP4ovkqMIRwN7nXPabk1I0DaC9vLX8L8UknzJUhhvFKpt+i6FcG0=\n=mMbZ\n-----END PGP SIGNATURE-----",
        "payload": "tree 47d8d0628dc521a30dbe2244e75c8d35544ea89e\nparent d6454f6cb23e3af0dae84a70aee57aed54bca04b\nparent 9b637589740089a56a81a79d38f4be522cfa43c3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448633284 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448633496 +0100\n\nMerge pull request #7114\n\n9b63758 util: Don't set strMiscWarning on every exception (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3d0fdd3924f5f8eeeb2ed4b8e60d04797248e58",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f3d0fdd3924f5f8eeeb2ed4b8e60d04797248e58",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3d0fdd3924f5f8eeeb2ed4b8e60d04797248e58/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d6454f6cb23e3af0dae84a70aee57aed54bca04b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6454f6cb23e3af0dae84a70aee57aed54bca04b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6454f6cb23e3af0dae84a70aee57aed54bca04b"
      },
      {
        "sha": "9b637589740089a56a81a79d38f4be522cfa43c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b637589740089a56a81a79d38f4be522cfa43c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b637589740089a56a81a79d38f4be522cfa43c3"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a852bc317695e239245535765cd2a80df005c51f",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3d0fdd3924f5f8eeeb2ed4b8e60d04797248e58/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3d0fdd3924f5f8eeeb2ed4b8e60d04797248e58/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=f3d0fdd3924f5f8eeeb2ed4b8e60d04797248e58",
        "patch": "@@ -447,7 +447,6 @@ void PrintExceptionContinue(const std::exception* pex, const char* pszThread)\n     std::string message = FormatException(pex, pszThread);\n     LogPrintf(\"\\n\\n************************\\n%s\\n\", message);\n     fprintf(stderr, \"\\n\\n************************\\n%s\\n\", message.c_str());\n-    strMiscWarning = message;\n }\n \n boost::filesystem::path GetDefaultDataDir()"
      }
    ]
  },
  {
    "sha": "93e0514fd083971dcef1fea8d107895244270f4c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5M2UwNTE0ZmQwODM5NzFkY2VmMWZlYThkMTA3ODk1MjQ0MjcwZjRj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-27T14:24:28Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-27T14:24:41Z"
      },
      "message": "Merge pull request #7078\n\nc434940 uint256::GetCheapHash bigendian compatibility (daniel)",
      "tree": {
        "sha": "8c87ef4bb3cb3bd05a3da2c963546260ba153980",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c87ef4bb3cb3bd05a3da2c963546260ba153980"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93e0514fd083971dcef1fea8d107895244270f4c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWWGepAAoJEHSBCwEjRsmmO8oIAJ+socSkdzjBZC0R3okdWsq0\nhIH+YMJUM7ceZUk9pP9tgOweRuJTVZpUOzJd+/PRr0ZUQ00hlA/vFGtDXjnlR6nd\nySPoWnWHxgvm9KS/ZoZ5l5WGgYlGIKSsxFQEtu1FEa4IkTTn6gqR3+NTvFhhww3/\nqaf1BlRr0JTbAVycr7gRdQ7F/mima0yosstX8oYsDyXcPQe7T4utkvwHcrjSmAZW\n7ts7P7o3vqbeP1VKNWAU4S/CGIhwaonUo2ola+bgi/ERyi8anXAbOhFSLLz7jDau\nI4ovMm7fnz6pFQtt2uEBTvLFdyCF/pjAhORK9q+5W8bWW9GO4UGXVPphszcwQQM=\n=SWtr\n-----END PGP SIGNATURE-----",
        "payload": "tree 8c87ef4bb3cb3bd05a3da2c963546260ba153980\nparent f3d0fdd3924f5f8eeeb2ed4b8e60d04797248e58\nparent c434940e833cef5c31ce2df287bc51dc34ada790\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448634268 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448634281 +0100\n\nMerge pull request #7078\n\nc434940 uint256::GetCheapHash bigendian compatibility (daniel)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93e0514fd083971dcef1fea8d107895244270f4c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/93e0514fd083971dcef1fea8d107895244270f4c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93e0514fd083971dcef1fea8d107895244270f4c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f3d0fdd3924f5f8eeeb2ed4b8e60d04797248e58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3d0fdd3924f5f8eeeb2ed4b8e60d04797248e58",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f3d0fdd3924f5f8eeeb2ed4b8e60d04797248e58"
      },
      {
        "sha": "c434940e833cef5c31ce2df287bc51dc34ada790",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c434940e833cef5c31ce2df287bc51dc34ada790",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c434940e833cef5c31ce2df287bc51dc34ada790"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 2,
      "deletions": 4
    },
    "files": [
      {
        "sha": "6e37cd5d46f69db6de3d16c1bde1c4fc0373b259",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93e0514fd083971dcef1fea8d107895244270f4c/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93e0514fd083971dcef1fea8d107895244270f4c/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=93e0514fd083971dcef1fea8d107895244270f4c",
        "patch": "@@ -12,6 +12,7 @@\n #include <stdint.h>\n #include <string>\n #include <vector>\n+#include \"crypto/common.h\"\n \n /** Template base class for fixed-sized opaque blobs. */\n template<unsigned int BITS>\n@@ -119,13 +120,10 @@ class uint256 : public base_blob<256> {\n      * used when the contents are considered uniformly random. It is not appropriate\n      * when the value can easily be influenced from outside as e.g. a network adversary could\n      * provide values to trigger worst-case behavior.\n-     * @note The result of this function is not stable between little and big endian.\n      */\n     uint64_t GetCheapHash() const\n     {\n-        uint64_t result;\n-        memcpy((void*)&result, (void*)data, 8);\n-        return result;\n+        return ReadLE64(data);\n     }\n \n     /** A more secure, salted hash function."
      }
    ]
  },
  {
    "sha": "ee60e5625bf8a11c8e5509b9cea8b6465056c448",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTYwZTU2MjViZjhhMTFjOGU1NTA5YjljZWE4YjY0NjUwNTZjNDQ4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-17T16:35:40Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-27T14:31:01Z"
      },
      "message": "Add merkle.{h,cpp}, generic merkle root/branch algorithm",
      "tree": {
        "sha": "4369d0745993de5ee1b347d67bd37f6284b753a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4369d0745993de5ee1b347d67bd37f6284b753a3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee60e5625bf8a11c8e5509b9cea8b6465056c448",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee60e5625bf8a11c8e5509b9cea8b6465056c448",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee60e5625bf8a11c8e5509b9cea8b6465056c448",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee60e5625bf8a11c8e5509b9cea8b6465056c448/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "93e0514fd083971dcef1fea8d107895244270f4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93e0514fd083971dcef1fea8d107895244270f4c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/93e0514fd083971dcef1fea8d107895244270f4c"
      }
    ],
    "stats": {
      "total": 171,
      "additions": 171,
      "deletions": 0
    },
    "files": [
      {
        "sha": "40f2e19af03f67f8e23c255d2a800626e304a483",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee60e5625bf8a11c8e5509b9cea8b6465056c448/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee60e5625bf8a11c8e5509b9cea8b6465056c448/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=ee60e5625bf8a11c8e5509b9cea8b6465056c448",
        "patch": "@@ -100,6 +100,7 @@ BITCOIN_CORE_H = \\\n   compat/sanity.h \\\n   compressor.h \\\n   consensus/consensus.h \\\n+  consensus/merkle.h \\\n   consensus/params.h \\\n   consensus/validation.h \\\n   core_io.h \\\n@@ -268,6 +269,7 @@ libbitcoin_common_a_SOURCES = \\\n   chainparams.cpp \\\n   coins.cpp \\\n   compressor.cpp \\\n+  consensus/merkle.cpp \\\n   core_read.cpp \\\n   core_write.cpp \\\n   hash.cpp \\"
      },
      {
        "sha": "6be9c26df241e806671a639c1ce7c96600fb5f25",
        "filename": "src/consensus/merkle.cpp",
        "status": "added",
        "additions": 152,
        "deletions": 0,
        "changes": 152,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee60e5625bf8a11c8e5509b9cea8b6465056c448/src/consensus/merkle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee60e5625bf8a11c8e5509b9cea8b6465056c448/src/consensus/merkle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/merkle.cpp?ref=ee60e5625bf8a11c8e5509b9cea8b6465056c448",
        "patch": "@@ -0,0 +1,152 @@\n+#include \"merkle.h\"\n+#include \"hash.h\"\n+#include \"utilstrencodings.h\"\n+\n+/*     WARNING! If you're reading this because you're learning about crypto\n+       and/or designing a new system that will use merkle trees, keep in mind\n+       that the following merkle tree algorithm has a serious flaw related to\n+       duplicate txids, resulting in a vulnerability (CVE-2012-2459).\n+\n+       The reason is that if the number of hashes in the list at a given time\n+       is odd, the last one is duplicated before computing the next level (which\n+       is unusual in Merkle trees). This results in certain sequences of\n+       transactions leading to the same merkle root. For example, these two\n+       trees:\n+\n+                    A               A\n+                  /  \\            /   \\\n+                B     C         B       C\n+               / \\    |        / \\     / \\\n+              D   E   F       D   E   F   F\n+             / \\ / \\ / \\     / \\ / \\ / \\ / \\\n+             1 2 3 4 5 6     1 2 3 4 5 6 5 6\n+\n+       for transaction lists [1,2,3,4,5,6] and [1,2,3,4,5,6,5,6] (where 5 and\n+       6 are repeated) result in the same root hash A (because the hash of both\n+       of (F) and (F,F) is C).\n+\n+       The vulnerability results from being able to send a block with such a\n+       transaction list, with the same merkle root, and the same block hash as\n+       the original without duplication, resulting in failed validation. If the\n+       receiving node proceeds to mark that block as permanently invalid\n+       however, it will fail to accept further unmodified (and thus potentially\n+       valid) versions of the same block. We defend against this by detecting\n+       the case where we would hash two identical hashes at the end of the list\n+       together, and treating that identically to the block having an invalid\n+       merkle root. Assuming no double-SHA256 collisions, this will detect all\n+       known ways of changing the transactions without affecting the merkle\n+       root.\n+*/\n+\n+/* This implements a constant-space merkle root/path calculator, limited to 2^32 leaves. */\n+static void MerkleComputation(const std::vector<uint256>& leaves, uint256* proot, bool* pmutated, uint32_t branchpos, std::vector<uint256>* pbranch) {\n+    if (pbranch) pbranch->clear();\n+    if (leaves.size() == 0) {\n+        if (pmutated) *pmutated = false;\n+        if (proot) *proot = uint256();\n+        return;\n+    }\n+    bool mutated = false;\n+    // count is the number of leaves processed so far.\n+    uint32_t count = 0;\n+    // inner is an array of eagerly computed subtree hashes, indexed by tree\n+    // level (0 being the leaves).\n+    // For example, when count is 25 (11001 in binary), inner[4] is the hash of\n+    // the first 16 leaves, inner[3] of the next 8 leaves, and inner[0] equal to\n+    // the last leaf. The other inner entries are undefined.\n+    uint256 inner[32];\n+    // Which position in inner is a hash that depends on the matching leaf.\n+    int matchlevel = -1;\n+    // First process all leaves into 'inner' values.\n+    while (count < leaves.size()) {\n+        uint256 h = leaves[count];\n+        bool matchh = count == branchpos;\n+        count++;\n+        int level;\n+        // For each of the lower bits in count that are 0, do 1 step. Each\n+        // corresponds to an inner value that existed before processing the\n+        // current leaf, and each needs a hash to combine it.\n+        for (level = 0; !(count & (((uint32_t)1) << level)); level++) {\n+            if (pbranch) {\n+                if (matchh) {\n+                    pbranch->push_back(inner[level]);\n+                } else if (matchlevel == level) {\n+                    pbranch->push_back(h);\n+                    matchh = true;\n+                }\n+            }\n+            mutated |= (inner[level] == h);\n+            CHash256().Write(inner[level].begin(), 32).Write(h.begin(), 32).Finalize(h.begin());\n+        }\n+        // Store the resulting hash at inner position level.\n+        inner[level] = h;\n+        if (matchh) {\n+            matchlevel = level;\n+        }\n+    }\n+    // Do a final 'sweep' over the rightmost branch of the tree to process\n+    // odd levels, and reduce everything to a single top value.\n+    // Level is the level (counted from the bottom) up to which we've sweeped.\n+    int level = 0;\n+    // As long as bit number level in count is zero, skip it. It means there\n+    // is nothing left at this level.\n+    while (!(count & (((uint32_t)1) << level))) {\n+        level++;\n+    }\n+    uint256 h = inner[level];\n+    bool matchh = matchlevel == level;\n+    while (count != (((uint32_t)1) << level)) {\n+        // If we reach this point, h is an inner value that is not the top.\n+        // We combine it with itself (Bitcoin's special rule for odd levels in\n+        // the tree) to produce a higher level one.\n+        if (pbranch && matchh) {\n+            pbranch->push_back(h);\n+        }\n+        CHash256().Write(h.begin(), 32).Write(h.begin(), 32).Finalize(h.begin());\n+        // Increment count to the value it would have if two entries at this\n+        // level had existed.\n+        count += (((uint32_t)1) << level);\n+        level++;\n+        // And propagate the result upwards accordingly.\n+        while (!(count & (((uint32_t)1) << level))) {\n+            if (pbranch) {\n+                if (matchh) {\n+                    pbranch->push_back(inner[level]);\n+                } else if (matchlevel == level) {\n+                    pbranch->push_back(h);\n+                    matchh = true;\n+                }\n+            }\n+            CHash256().Write(inner[level].begin(), 32).Write(h.begin(), 32).Finalize(h.begin());\n+            level++;\n+        }\n+    }\n+    // Return result.\n+    if (pmutated) *pmutated = mutated;\n+    if (proot) *proot = h;\n+}\n+\n+uint256 ComputeMerkleRoot(const std::vector<uint256>& leaves, bool* mutated) {\n+    uint256 hash;\n+    MerkleComputation(leaves, &hash, mutated, -1, NULL);\n+    return hash;\n+}\n+\n+std::vector<uint256> ComputeMerkleBranch(const std::vector<uint256>& leaves, uint32_t position) {\n+    std::vector<uint256> ret;\n+    MerkleComputation(leaves, NULL, NULL, position, &ret);\n+    return ret;\n+}\n+\n+uint256 ComputeMerkleRootFromBranch(const uint256& leaf, const std::vector<uint256>& vMerkleBranch, uint32_t nIndex) {\n+    uint256 hash = leaf;\n+    for (std::vector<uint256>::const_iterator it = vMerkleBranch.begin(); it != vMerkleBranch.end(); ++it) {\n+        if (nIndex & 1) {\n+            hash = Hash(BEGIN(*it), END(*it), BEGIN(hash), END(hash));\n+        } else {\n+            hash = Hash(BEGIN(hash), END(hash), BEGIN(*it), END(*it));\n+        }\n+        nIndex >>= 1;\n+    }\n+    return hash;\n+}"
      },
      {
        "sha": "7fd13d3e4325d903aedd9f9b8b6d74deba403e07",
        "filename": "src/consensus/merkle.h",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee60e5625bf8a11c8e5509b9cea8b6465056c448/src/consensus/merkle.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee60e5625bf8a11c8e5509b9cea8b6465056c448/src/consensus/merkle.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/merkle.h?ref=ee60e5625bf8a11c8e5509b9cea8b6465056c448",
        "patch": "@@ -0,0 +1,17 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_MERKLE\n+#define BITCOIN_MERKLE\n+\n+#include <stdint.h>\n+#include <vector>\n+\n+#include \"uint256.h\"\n+\n+uint256 ComputeMerkleRoot(const std::vector<uint256>& leaves, bool* mutated = NULL);\n+std::vector<uint256> ComputeMerkleBranch(const std::vector<uint256>& leaves, uint32_t position);\n+uint256 ComputeMerkleRootFromBranch(const uint256& leaf, const std::vector<uint256>& branch, uint32_t position);\n+\n+#endif"
      }
    ]
  },
  {
    "sha": "eece63fa72566068cb2a1bf85c95a72a5ba59bc9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZWNlNjNmYTcyNTY2MDY4Y2IyYTFiZjg1Yzk1YTcyYTViYTU5YmM5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-17T16:35:44Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-27T14:36:52Z"
      },
      "message": "Switch blocks to a constant-space Merkle root/branch algorithm.\n\nThis switches the Merkle tree logic for blocks to one that runs in constant (small) space.\nThe old code is moved to tests, and a new test is added that for various combinations of\nblock sizes, transaction positions to compute a branch for, and mutations:\n * Verifies that the old code and new code agree for the Merkle root.\n * Verifies that the old code and new code agree for the Merkle branch.\n * Verifies that the computed Merkle branch is valid.\n * Verifies that mutations don't change the Merkle root.\n * Verifies that mutations are correctly detected.",
      "tree": {
        "sha": "093633b56700e77f3bc4d8fda2b3032d2aa7c4dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/093633b56700e77f3bc4d8fda2b3032d2aa7c4dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eece63fa72566068cb2a1bf85c95a72a5ba59bc9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eece63fa72566068cb2a1bf85c95a72a5ba59bc9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eece63fa72566068cb2a1bf85c95a72a5ba59bc9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eece63fa72566068cb2a1bf85c95a72a5ba59bc9/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ee60e5625bf8a11c8e5509b9cea8b6465056c448",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee60e5625bf8a11c8e5509b9cea8b6465056c448",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee60e5625bf8a11c8e5509b9cea8b6465056c448"
      }
    ],
    "stats": {
      "total": 257,
      "additions": 182,
      "deletions": 75
    },
    "files": [
      {
        "sha": "c377183ad53ab143a7f5fbe5aee42dd061914f33",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eece63fa72566068cb2a1bf85c95a72a5ba59bc9/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eece63fa72566068cb2a1bf85c95a72a5ba59bc9/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=eece63fa72566068cb2a1bf85c95a72a5ba59bc9",
        "patch": "@@ -57,6 +57,7 @@ BITCOIN_TESTS =\\\n   test/dbwrapper_tests.cpp \\\n   test/main_tests.cpp \\\n   test/mempool_tests.cpp \\\n+  test/merkle_tests.cpp \\\n   test/miner_tests.cpp \\\n   test/mruset_tests.cpp \\\n   test/multisig_tests.cpp \\"
      },
      {
        "sha": "a46866a2be8fd8bb1c0573aba241293fd96fb12d",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eece63fa72566068cb2a1bf85c95a72a5ba59bc9/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eece63fa72566068cb2a1bf85c95a72a5ba59bc9/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=eece63fa72566068cb2a1bf85c95a72a5ba59bc9",
        "patch": "@@ -4,6 +4,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"chainparams.h\"\n+#include \"consensus/merkle.h\"\n \n #include \"tinyformat.h\"\n #include \"util.h\"\n@@ -32,7 +33,7 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesi\n     genesis.nVersion = nVersion;\n     genesis.vtx.push_back(txNew);\n     genesis.hashPrevBlock.SetNull();\n-    genesis.hashMerkleRoot = genesis.ComputeMerkleRoot();\n+    genesis.hashMerkleRoot = BlockMerkleRoot(genesis);\n     return genesis;\n }\n "
      },
      {
        "sha": "9a8afa8a33f3b2043dac36a009ae46c5254883a0",
        "filename": "src/consensus/merkle.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eece63fa72566068cb2a1bf85c95a72a5ba59bc9/src/consensus/merkle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eece63fa72566068cb2a1bf85c95a72a5ba59bc9/src/consensus/merkle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/merkle.cpp?ref=eece63fa72566068cb2a1bf85c95a72a5ba59bc9",
        "patch": "@@ -150,3 +150,23 @@ uint256 ComputeMerkleRootFromBranch(const uint256& leaf, const std::vector<uint2\n     }\n     return hash;\n }\n+\n+uint256 BlockMerkleRoot(const CBlock& block, bool* mutated)\n+{\n+    std::vector<uint256> leaves;\n+    leaves.resize(block.vtx.size());\n+    for (size_t s = 0; s < block.vtx.size(); s++) {\n+        leaves[s] = block.vtx[s].GetHash();\n+    }\n+    return ComputeMerkleRoot(leaves, mutated);\n+}\n+\n+std::vector<uint256> BlockMerkleBranch(const CBlock& block, uint32_t position)\n+{\n+    std::vector<uint256> leaves;\n+    leaves.resize(block.vtx.size());\n+    for (size_t s = 0; s < block.vtx.size(); s++) {\n+        leaves[s] = block.vtx[s].GetHash();\n+    }\n+    return ComputeMerkleBranch(leaves, position);\n+}"
      },
      {
        "sha": "6ef59745ac6538ebbcee0d94228650c2fb133a77",
        "filename": "src/consensus/merkle.h",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eece63fa72566068cb2a1bf85c95a72a5ba59bc9/src/consensus/merkle.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eece63fa72566068cb2a1bf85c95a72a5ba59bc9/src/consensus/merkle.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/merkle.h?ref=eece63fa72566068cb2a1bf85c95a72a5ba59bc9",
        "patch": "@@ -8,10 +8,25 @@\n #include <stdint.h>\n #include <vector>\n \n+#include \"primitives/transaction.h\"\n+#include \"primitives/block.h\"\n #include \"uint256.h\"\n \n uint256 ComputeMerkleRoot(const std::vector<uint256>& leaves, bool* mutated = NULL);\n std::vector<uint256> ComputeMerkleBranch(const std::vector<uint256>& leaves, uint32_t position);\n uint256 ComputeMerkleRootFromBranch(const uint256& leaf, const std::vector<uint256>& branch, uint32_t position);\n \n+/*\n+ * Compute the Merkle root of the transactions in a block.\n+ * *mutated is set to true if a duplicated subtree was found.\n+ */\n+uint256 BlockMerkleRoot(const CBlock& block, bool* mutated = NULL);\n+\n+/*\n+ * Compute the Merkle branch for the tree of transactions in a block, for a\n+ * given position.\n+ * This can be verified using ComputeMerkleRootFromBranch.\n+ */\n+std::vector<uint256> BlockMerkleBranch(const CBlock& block, uint32_t position);\n+\n #endif"
      },
      {
        "sha": "191b2b3c12bc5d2af9050a43b26269db17346c82",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eece63fa72566068cb2a1bf85c95a72a5ba59bc9/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eece63fa72566068cb2a1bf85c95a72a5ba59bc9/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=eece63fa72566068cb2a1bf85c95a72a5ba59bc9",
        "patch": "@@ -12,6 +12,7 @@\n #include \"checkpoints.h\"\n #include \"checkqueue.h\"\n #include \"consensus/consensus.h\"\n+#include \"consensus/merkle.h\"\n #include \"consensus/validation.h\"\n #include \"hash.h\"\n #include \"init.h\"\n@@ -2876,7 +2877,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     // Check the merkle root.\n     if (fCheckMerkleRoot) {\n         bool mutated;\n-        uint256 hashMerkleRoot2 = block.ComputeMerkleRoot(&mutated);\n+        uint256 hashMerkleRoot2 = BlockMerkleRoot(block, &mutated);\n         if (block.hashMerkleRoot != hashMerkleRoot2)\n             return state.DoS(100, error(\"CheckBlock(): hashMerkleRoot mismatch\"),\n                              REJECT_INVALID, \"bad-txnmrklroot\", true);"
      },
      {
        "sha": "8187e58186dba8176028e88719341f8fbb463e9d",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eece63fa72566068cb2a1bf85c95a72a5ba59bc9/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eece63fa72566068cb2a1bf85c95a72a5ba59bc9/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=eece63fa72566068cb2a1bf85c95a72a5ba59bc9",
        "patch": "@@ -10,6 +10,7 @@\n #include \"chainparams.h\"\n #include \"coins.h\"\n #include \"consensus/consensus.h\"\n+#include \"consensus/merkle.h\"\n #include \"consensus/validation.h\"\n #include \"hash.h\"\n #include \"main.h\"\n@@ -373,7 +374,7 @@ void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned\n     assert(txCoinbase.vin[0].scriptSig.size() <= 100);\n \n     pblock->vtx[0] = txCoinbase;\n-    pblock->hashMerkleRoot = pblock->ComputeMerkleRoot();\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n }\n \n //////////////////////////////////////////////////////////////////////////////"
      },
      {
        "sha": "7280c18f7766a74f4ef45432f7499ea9952b00c7",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 63,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eece63fa72566068cb2a1bf85c95a72a5ba59bc9/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eece63fa72566068cb2a1bf85c95a72a5ba59bc9/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=eece63fa72566068cb2a1bf85c95a72a5ba59bc9",
        "patch": "@@ -15,69 +15,6 @@ uint256 CBlockHeader::GetHash() const\n     return SerializeHash(*this);\n }\n \n-uint256 CBlock::ComputeMerkleRoot(bool* fMutated) const\n-{\n-    /* WARNING! If you're reading this because you're learning about crypto\n-       and/or designing a new system that will use merkle trees, keep in mind\n-       that the following merkle tree algorithm has a serious flaw related to\n-       duplicate txids, resulting in a vulnerability (CVE-2012-2459).\n-\n-       The reason is that if the number of hashes in the list at a given time\n-       is odd, the last one is duplicated before computing the next level (which\n-       is unusual in Merkle trees). This results in certain sequences of\n-       transactions leading to the same merkle root. For example, these two\n-       trees:\n-\n-                    A               A\n-                  /  \\            /   \\\n-                B     C         B       C\n-               / \\    |        / \\     / \\\n-              D   E   F       D   E   F   F\n-             / \\ / \\ / \\     / \\ / \\ / \\ / \\\n-             1 2 3 4 5 6     1 2 3 4 5 6 5 6\n-\n-       for transaction lists [1,2,3,4,5,6] and [1,2,3,4,5,6,5,6] (where 5 and\n-       6 are repeated) result in the same root hash A (because the hash of both\n-       of (F) and (F,F) is C).\n-\n-       The vulnerability results from being able to send a block with such a\n-       transaction list, with the same merkle root, and the same block hash as\n-       the original without duplication, resulting in failed validation. If the\n-       receiving node proceeds to mark that block as permanently invalid\n-       however, it will fail to accept further unmodified (and thus potentially\n-       valid) versions of the same block. We defend against this by detecting\n-       the case where we would hash two identical hashes at the end of the list\n-       together, and treating that identically to the block having an invalid\n-       merkle root. Assuming no double-SHA256 collisions, this will detect all\n-       known ways of changing the transactions without affecting the merkle\n-       root.\n-    */\n-    std::vector<uint256> vMerkleTree;\n-    vMerkleTree.reserve(vtx.size() * 2 + 16); // Safe upper bound for the number of total nodes.\n-    for (std::vector<CTransaction>::const_iterator it(vtx.begin()); it != vtx.end(); ++it)\n-        vMerkleTree.push_back(it->GetHash());\n-    int j = 0;\n-    bool mutated = false;\n-    for (int nSize = vtx.size(); nSize > 1; nSize = (nSize + 1) / 2)\n-    {\n-        for (int i = 0; i < nSize; i += 2)\n-        {\n-            int i2 = std::min(i+1, nSize-1);\n-            if (i2 == i + 1 && i2 + 1 == nSize && vMerkleTree[j+i] == vMerkleTree[j+i2]) {\n-                // Two identical hashes at the end of the list at a particular level.\n-                mutated = true;\n-            }\n-            vMerkleTree.push_back(Hash(BEGIN(vMerkleTree[j+i]),  END(vMerkleTree[j+i]),\n-                                       BEGIN(vMerkleTree[j+i2]), END(vMerkleTree[j+i2])));\n-        }\n-        j += nSize;\n-    }\n-    if (fMutated) {\n-        *fMutated = mutated;\n-    }\n-    return (vMerkleTree.empty() ? uint256() : vMerkleTree.back());\n-}\n-\n std::string CBlock::ToString() const\n {\n     std::stringstream s;"
      },
      {
        "sha": "5c017d436f50ec5e7ac95d965fc2a3964b152d8b",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eece63fa72566068cb2a1bf85c95a72a5ba59bc9/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eece63fa72566068cb2a1bf85c95a72a5ba59bc9/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=eece63fa72566068cb2a1bf85c95a72a5ba59bc9",
        "patch": "@@ -118,12 +118,6 @@ class CBlock : public CBlockHeader\n         return block;\n     }\n \n-    // Build the merkle tree for this block and return the merkle root.\n-    // If non-NULL, *mutated is set to whether mutation was detected in the merkle\n-    // tree (a duplication of transactions in the block leading to an identical\n-    // merkle root).\n-    uint256 ComputeMerkleRoot(bool* mutated = NULL) const;\n-\n     std::string ToString() const;\n };\n "
      },
      {
        "sha": "2b92d239e90ec204df7115b5dd0eca3a5d45d82c",
        "filename": "src/test/main_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eece63fa72566068cb2a1bf85c95a72a5ba59bc9/src/test/main_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eece63fa72566068cb2a1bf85c95a72a5ba59bc9/src/test/main_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/main_tests.cpp?ref=eece63fa72566068cb2a1bf85c95a72a5ba59bc9",
        "patch": "@@ -72,5 +72,4 @@ BOOST_AUTO_TEST_CASE(test_combiner_all)\n     Test.disconnect(&ReturnTrue);\n     BOOST_CHECK(Test());\n }\n-\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "1e31f2e6791fa853dfcb249bee5d139f2ee24306",
        "filename": "src/test/merkle_tests.cpp",
        "status": "added",
        "additions": 136,
        "deletions": 0,
        "changes": 136,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eece63fa72566068cb2a1bf85c95a72a5ba59bc9/src/test/merkle_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eece63fa72566068cb2a1bf85c95a72a5ba59bc9/src/test/merkle_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/merkle_tests.cpp?ref=eece63fa72566068cb2a1bf85c95a72a5ba59bc9",
        "patch": "@@ -0,0 +1,136 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"consensus/merkle.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"random.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(merkle_tests, TestingSetup)\n+\n+// Older version of the merkle root computation code, for comparison.\n+static uint256 BlockBuildMerkleTree(const CBlock& block, bool* fMutated, std::vector<uint256>& vMerkleTree)\n+{\n+    vMerkleTree.clear();\n+    vMerkleTree.reserve(block.vtx.size() * 2 + 16); // Safe upper bound for the number of total nodes.\n+    for (std::vector<CTransaction>::const_iterator it(block.vtx.begin()); it != block.vtx.end(); ++it)\n+        vMerkleTree.push_back(it->GetHash());\n+    int j = 0;\n+    bool mutated = false;\n+    for (int nSize = block.vtx.size(); nSize > 1; nSize = (nSize + 1) / 2)\n+    {\n+        for (int i = 0; i < nSize; i += 2)\n+        {\n+            int i2 = std::min(i+1, nSize-1);\n+            if (i2 == i + 1 && i2 + 1 == nSize && vMerkleTree[j+i] == vMerkleTree[j+i2]) {\n+                // Two identical hashes at the end of the list at a particular level.\n+                mutated = true;\n+            }\n+            vMerkleTree.push_back(Hash(vMerkleTree[j+i].begin(), vMerkleTree[j+i].end(),\n+                                       vMerkleTree[j+i2].begin(), vMerkleTree[j+i2].end()));\n+        }\n+        j += nSize;\n+    }\n+    if (fMutated) {\n+        *fMutated = mutated;\n+    }\n+    return (vMerkleTree.empty() ? uint256() : vMerkleTree.back());\n+}\n+\n+// Older version of the merkle branch computation code, for comparison.\n+static std::vector<uint256> BlockGetMerkleBranch(const CBlock& block, const std::vector<uint256>& vMerkleTree, int nIndex)\n+{\n+    std::vector<uint256> vMerkleBranch;\n+    int j = 0;\n+    for (int nSize = block.vtx.size(); nSize > 1; nSize = (nSize + 1) / 2)\n+    {\n+        int i = std::min(nIndex^1, nSize-1);\n+        vMerkleBranch.push_back(vMerkleTree[j+i]);\n+        nIndex >>= 1;\n+        j += nSize;\n+    }\n+    return vMerkleBranch;\n+}\n+\n+static inline int ctz(uint32_t i) {\n+    if (i == 0) return 0;\n+    int j = 0;\n+    while (!(i & 1)) {\n+        j++;\n+        i >>= 1;\n+    }\n+    return j;\n+}\n+\n+BOOST_AUTO_TEST_CASE(merkle_test)\n+{\n+    for (int i = 0; i < 32; i++) {\n+        // Try 32 block sizes: all sizes from 0 to 16 inclusive, and then 15 random sizes.\n+        int ntx = (i <= 16) ? i : 17 + (insecure_rand() % 4000);\n+        // Try up to 3 mutations.\n+        for (int mutate = 0; mutate <= 3; mutate++) {\n+            int duplicate1 = mutate >= 1 ? 1 << ctz(ntx) : 0; // The last how many transactions to duplicate first.\n+            if (duplicate1 >= ntx) break; // Duplication of the entire tree results in a different root (it adds a level).\n+            int ntx1 = ntx + duplicate1; // The resulting number of transactions after the first duplication.\n+            int duplicate2 = mutate >= 2 ? 1 << ctz(ntx1) : 0; // Likewise for the second mutation.\n+            if (duplicate2 >= ntx1) break;\n+            int ntx2 = ntx1 + duplicate2;\n+            int duplicate3 = mutate >= 3 ? 1 << ctz(ntx2) : 0; // And for the the third mutation.\n+            if (duplicate3 >= ntx2) break;\n+            int ntx3 = ntx2 + duplicate3;\n+            // Build a block with ntx different transactions.\n+            CBlock block;\n+            block.vtx.resize(ntx);\n+            for (int j = 0; j < ntx; j++) {\n+                CMutableTransaction mtx;\n+                mtx.nLockTime = j;\n+                block.vtx[j] = mtx;\n+            }\n+            // Compute the root of the block before mutating it.\n+            bool unmutatedMutated = false;\n+            uint256 unmutatedRoot = BlockMerkleRoot(block, &unmutatedMutated);\n+            BOOST_CHECK(unmutatedMutated == false);\n+            // Optionally mutate by duplicating the last transactions, resulting in the same merkle root.\n+            block.vtx.resize(ntx3);\n+            for (int j = 0; j < duplicate1; j++) {\n+                block.vtx[ntx + j] = block.vtx[ntx + j - duplicate1];\n+            }\n+            for (int j = 0; j < duplicate2; j++) {\n+                block.vtx[ntx1 + j] = block.vtx[ntx1 + j - duplicate2];\n+            }\n+            for (int j = 0; j < duplicate3; j++) {\n+                block.vtx[ntx2 + j] = block.vtx[ntx2 + j - duplicate3];\n+            }\n+            // Compute the merkle root and merkle tree using the old mechanism.\n+            bool oldMutated = false;\n+            std::vector<uint256> merkleTree;\n+            uint256 oldRoot = BlockBuildMerkleTree(block, &oldMutated, merkleTree);\n+            // Compute the merkle root using the new mechanism.\n+            bool newMutated = false;\n+            uint256 newRoot = BlockMerkleRoot(block, &newMutated);\n+            BOOST_CHECK(oldRoot == newRoot);\n+            BOOST_CHECK(newRoot == unmutatedRoot);\n+            BOOST_CHECK((newRoot == uint256()) == (ntx == 0));\n+            BOOST_CHECK(oldMutated == newMutated);\n+            BOOST_CHECK(newMutated == !!mutate);\n+            // If no mutation was done (once for every ntx value), try up to 16 branches.\n+            if (mutate == 0) {\n+                for (int loop = 0; loop < std::min(ntx, 16); loop++) {\n+                    // If ntx <= 16, try all branches. Otherise, try 16 random ones.\n+                    int mtx = loop;\n+                    if (ntx > 16) {\n+                        mtx = insecure_rand() % ntx;\n+                    }\n+                    std::vector<uint256> newBranch = BlockMerkleBranch(block, mtx);\n+                    std::vector<uint256> oldBranch = BlockGetMerkleBranch(block, merkleTree, mtx);\n+                    BOOST_CHECK(oldBranch == newBranch);\n+                    BOOST_CHECK(ComputeMerkleRootFromBranch(block.vtx[mtx].GetHash(), newBranch, mtx) == oldRoot);\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "1d7c9f65c096c486f96893b679099875d6a7582f",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eece63fa72566068cb2a1bf85c95a72a5ba59bc9/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eece63fa72566068cb2a1bf85c95a72a5ba59bc9/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=eece63fa72566068cb2a1bf85c95a72a5ba59bc9",
        "patch": "@@ -5,6 +5,7 @@\n #include \"chainparams.h\"\n #include \"coins.h\"\n #include \"consensus/consensus.h\"\n+#include \"consensus/merkle.h\"\n #include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"miner.h\"\n@@ -93,7 +94,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         pblock->vtx[0] = CTransaction(txCoinbase);\n         if (txFirst.size() < 2)\n             txFirst.push_back(new CTransaction(pblock->vtx[0]));\n-        pblock->hashMerkleRoot = pblock->ComputeMerkleRoot();\n+        pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n         pblock->nNonce = blockinfo[i].nonce;\n         CValidationState state;\n         BOOST_CHECK(ProcessNewBlock(state, chainparams, NULL, pblock, true, NULL));"
      },
      {
        "sha": "0d7fb2bc35cdfd2db5ed3345f1bbb87007091769",
        "filename": "src/test/pmt_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eece63fa72566068cb2a1bf85c95a72a5ba59bc9/src/test/pmt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eece63fa72566068cb2a1bf85c95a72a5ba59bc9/src/test/pmt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pmt_tests.cpp?ref=eece63fa72566068cb2a1bf85c95a72a5ba59bc9",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"consensus/merkle.h\"\n #include \"merkleblock.h\"\n #include \"serialize.h\"\n #include \"streams.h\"\n@@ -48,7 +49,7 @@ BOOST_AUTO_TEST_CASE(pmt_test1)\n         }\n \n         // calculate actual merkle root and height\n-        uint256 merkleRoot1 = block.ComputeMerkleRoot();\n+        uint256 merkleRoot1 = BlockMerkleRoot(block);\n         std::vector<uint256> vTxid(nTx, uint256());\n         for (unsigned int j=0; j<nTx; j++)\n             vTxid[j] = block.vtx[j].GetHash();"
      }
    ]
  },
  {
    "sha": "a64d7b4e4246cbb56bba08bf87b6696c03d6972a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNjRkN2I0ZTQyNDZjYmI1NmJiYTA4YmY4N2I2Njk2YzAzZDY5NzJh",
    "commit": {
      "author": {
        "name": "paveljanik",
        "email": "Pavel@Janik.cz",
        "date": "2015-11-27T15:44:30Z"
      },
      "committer": {
        "name": "paveljanik",
        "email": "Pavel@Janik.cz",
        "date": "2015-11-27T15:44:30Z"
      },
      "message": "Print correct minimum mempool size in MB",
      "tree": {
        "sha": "9085ad53cbf619f8420d87da346559b3e25670c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9085ad53cbf619f8420d87da346559b3e25670c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a64d7b4e4246cbb56bba08bf87b6696c03d6972a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a64d7b4e4246cbb56bba08bf87b6696c03d6972a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a64d7b4e4246cbb56bba08bf87b6696c03d6972a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a64d7b4e4246cbb56bba08bf87b6696c03d6972a/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "93e0514fd083971dcef1fea8d107895244270f4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93e0514fd083971dcef1fea8d107895244270f4c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/93e0514fd083971dcef1fea8d107895244270f4c"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "12999668b590a94e25eb08fdf30fdf9ad53d9951",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a64d7b4e4246cbb56bba08bf87b6696c03d6972a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a64d7b4e4246cbb56bba08bf87b6696c03d6972a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a64d7b4e4246cbb56bba08bf87b6696c03d6972a",
        "patch": "@@ -902,7 +902,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     int64_t nMempoolSizeMax = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     int64_t nMempoolSizeMin = GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n     if (nMempoolSizeMax < 0 || nMempoolSizeMax < nMempoolSizeMin)\n-        return InitError(strprintf(_(\"-maxmempool must be at least %d MB\"), std::ceil(nMempoolSizeMin / 1000.0)));\n+        return InitError(strprintf(_(\"-maxmempool must be at least %d MB\"), std::ceil(nMempoolSizeMin / 1000000.0)));\n \n     // -par=0 means autodetect, but nScriptCheckThreads==0 means no concurrency\n     nScriptCheckThreads = GetArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS);"
      }
    ]
  },
  {
    "sha": "8284feb3c91f91505c66d5c3b7ef8349b7d79862",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Mjg0ZmViM2M5MWY5MTUwNWM2NmQ1YzNiN2VmODM0OWI3ZDc5ODYy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-27T15:59:41Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-27T15:59:44Z"
      },
      "message": "Merge pull request #7117\n\na64d7b4 Print correct minimum mempool size in MB (paveljanik)",
      "tree": {
        "sha": "9085ad53cbf619f8420d87da346559b3e25670c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9085ad53cbf619f8420d87da346559b3e25670c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8284feb3c91f91505c66d5c3b7ef8349b7d79862",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWWH3wAAoJEHSBCwEjRsmmKkQH/jczeeHD+xJrnymjUwFdvxJq\nazLSAylt52qyeRPy7onXz89ACS7/dLtf/oVfz+bL+dqJIFH0+zHW3lAezREsPku5\nohvh+x2pTFaF5pNvT58b9gz0m9gcyF4MKPhjllgctrp0LfVhlAbC6JoD45WuLGgx\nldEGPymxPiTI0O6LjNdYk8C/KHkfzzah5ac6x5oCer/YqscvcRdQr5wi8vUMtHpZ\n45eTrlX2U+54A0PXNwwrBdwLHRjkUdB05aBe75yod0ozNEKIIe2ie2Ly76i4zGk/\ncwQ6mYlBUg0cP2P0NJDKLUxKv46Sedni4zRmEe1Jwb1iOjQgprD9nOhj1LI8JrU=\n=58Y9\n-----END PGP SIGNATURE-----",
        "payload": "tree 9085ad53cbf619f8420d87da346559b3e25670c4\nparent 93e0514fd083971dcef1fea8d107895244270f4c\nparent a64d7b4e4246cbb56bba08bf87b6696c03d6972a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448639981 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448639984 +0100\n\nMerge pull request #7117\n\na64d7b4 Print correct minimum mempool size in MB (paveljanik)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8284feb3c91f91505c66d5c3b7ef8349b7d79862",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8284feb3c91f91505c66d5c3b7ef8349b7d79862",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8284feb3c91f91505c66d5c3b7ef8349b7d79862/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "93e0514fd083971dcef1fea8d107895244270f4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93e0514fd083971dcef1fea8d107895244270f4c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/93e0514fd083971dcef1fea8d107895244270f4c"
      },
      {
        "sha": "a64d7b4e4246cbb56bba08bf87b6696c03d6972a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a64d7b4e4246cbb56bba08bf87b6696c03d6972a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a64d7b4e4246cbb56bba08bf87b6696c03d6972a"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "12999668b590a94e25eb08fdf30fdf9ad53d9951",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8284feb3c91f91505c66d5c3b7ef8349b7d79862/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8284feb3c91f91505c66d5c3b7ef8349b7d79862/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8284feb3c91f91505c66d5c3b7ef8349b7d79862",
        "patch": "@@ -902,7 +902,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     int64_t nMempoolSizeMax = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     int64_t nMempoolSizeMin = GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n     if (nMempoolSizeMax < 0 || nMempoolSizeMax < nMempoolSizeMin)\n-        return InitError(strprintf(_(\"-maxmempool must be at least %d MB\"), std::ceil(nMempoolSizeMin / 1000.0)));\n+        return InitError(strprintf(_(\"-maxmempool must be at least %d MB\"), std::ceil(nMempoolSizeMin / 1000000.0)));\n \n     // -par=0 means autodetect, but nScriptCheckThreads==0 means no concurrency\n     nScriptCheckThreads = GetArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS);"
      }
    ]
  },
  {
    "sha": "8332457e95c9cedcfdc1d4e7e1b2d945fb54dc03",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzMyNDU3ZTk1YzljZWRjZmRjMWQ0ZTdlMWIyZDk0NWZiNTRkYzAz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-28T13:14:38Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-28T13:15:04Z"
      },
      "message": "Merge pull request #7003\n\nb8c06ef doc: Add non-style-related development guidelines (Wladimir J. van der Laan)",
      "tree": {
        "sha": "768f70f5d26c8254a7b58f89149840d46c5f9550",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/768f70f5d26c8254a7b58f89149840d46c5f9550"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8332457e95c9cedcfdc1d4e7e1b2d945fb54dc03",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWWajYAAoJENuhpnN5oakx7wQP/jxJM4EEumJNAQU9nPj/Bk2M\nnqR7fICwDYHore5qKj90sK9D+nhlpfu86YjzwKYEM2pkjj0m5FVMCDpVhfyqAT0K\nal+PKDuD4hCnZrrfhFIcrz2BEmw5F054y9VgJUIa2KDWyHwlxLrjP9QwqdGGb+Un\nCLrPLvENA6u81a/NRxt5Yv3+BLY5/CM540M+xKEvLiI96VGvdNwhBVqDdd2JxTHs\nC3QFzABXX8i2rR49rBvxU1GAjUv+XQXfPxb2f3QYZZIF+nRa+0JiTmAQIbTBaTuP\ni6zYlaVyNrK9BvQcq8VIOOmmzKfWtGW03xJdkZ44UBvdUTlI9qhU9Or1llIpDRoZ\nXKTxHzQJKVkWtv0LhXvAI2vcU4I3X76SzVEHvSIFvBxhhoc1KqMXbyy6wJEs6OqQ\nIxqaKsJiZBcoLwpJZzUrkIfnRgWs3MGw+XnMz5FIt6a+wpAs0Aegd9226yX9tzAd\ntKginOreiyappjQW099Uqz8cC49JVGSdDBdoafyGc7j4RLJ5iz7ICzx5Gu6X64bu\nEaJQHGlOro7m+IbVnZTTd6wSHZIfnYA8GUXgO10pA2QPhBwsb9+OMbenmY639oV5\njSvDMQ//liG+9AqEy79E94BMCDeMJYhR1MQwki3/TzD6DFsAQ+gUZxtbxz0Du/Ar\nuznjOhcjAUsfmMaYDsXu\n=lYPA\n-----END PGP SIGNATURE-----",
        "payload": "tree 768f70f5d26c8254a7b58f89149840d46c5f9550\nparent 8284feb3c91f91505c66d5c3b7ef8349b7d79862\nparent b8c06ef409792dd9a6d14d46b50787fa7a6fb33d\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1448716478 +0100\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1448716504 +0100\n\nMerge pull request #7003\n\nb8c06ef doc: Add non-style-related development guidelines (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8332457e95c9cedcfdc1d4e7e1b2d945fb54dc03",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8332457e95c9cedcfdc1d4e7e1b2d945fb54dc03",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8332457e95c9cedcfdc1d4e7e1b2d945fb54dc03/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8284feb3c91f91505c66d5c3b7ef8349b7d79862",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8284feb3c91f91505c66d5c3b7ef8349b7d79862",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8284feb3c91f91505c66d5c3b7ef8349b7d79862"
      },
      {
        "sha": "b8c06ef409792dd9a6d14d46b50787fa7a6fb33d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8c06ef409792dd9a6d14d46b50787fa7a6fb33d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b8c06ef409792dd9a6d14d46b50787fa7a6fb33d"
      }
    ],
    "stats": {
      "total": 169,
      "additions": 169,
      "deletions": 0
    },
    "files": [
      {
        "sha": "01eea931ad945781b8a10e36e82d9cde66ad55eb",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 169,
        "deletions": 0,
        "changes": 169,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8332457e95c9cedcfdc1d4e7e1b2d945fb54dc03/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8332457e95c9cedcfdc1d4e7e1b2d945fb54dc03/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=8332457e95c9cedcfdc1d4e7e1b2d945fb54dc03",
        "patch": "@@ -204,3 +204,172 @@ If a set of tools is used by the build system or scripts the repository (for\n example, lcov) it is perfectly acceptable to add its files to `.gitignore`\n and commit them.\n \n+Development guidelines\n+============================\n+\n+A few non-style-related recommendations for developers, as well as points to\n+pay attention to for reviewers of Bitcoin Core code.\n+\n+General Bitcoin Core\n+----------------------\n+\n+- New features should be exposed on RPC first, then can be made available in the GUI\n+\n+  - *Rationale*: RPC allows for better automatic testing. The test suite for\n+    the GUI is very limited\n+\n+- Make sure pulls pass Travis CI before merging\n+\n+  - *Rationale*: Makes sure that they pass thorough testing, and that the tester will keep passing\n+     on the master branch. Otherwise all new pull requests will start failing the tests, resulting in\n+     confusion and mayhem\n+ \n+  - *Explanation*: If the test suite is to be updated for a change, this has to\n+    be done first \n+\n+Wallet\n+-------\n+\n+- Make sure that that no crashes happen with run-time option `-disablewallet`.\n+\n+  - *Rationale*: In RPC code that conditionally use the wallet (such as\n+    `validateaddress`) it is easy to forget that global pointer `pwalletMain`\n+    can be NULL. See `qa/rpc-tests/disablewallet.py` for functional tests\n+    exercising the API with `-disablewallet`\n+\n+- Include `db_cxx.h` (BerkeleyDB header) only when `ENABLE_WALLET` is set\n+\n+  - *Rationale*: Otherwise compilation of the disable-wallet build will fail in environments without BerkeleyDB\n+\n+General C++\n+-------------\n+\n+- Assertions should not have side-effects\n+\n+  - *Rationale*: Even though the source code is set to to refuse to compile\n+    with assertions disabled, having side-effects in assertions is unexpected and\n+    makes the code harder to understand\n+\n+- If you use the .h, you must link the .cpp\n+\n+  - *Rationale*: Include files are the interface for the implementation file. Including one but\n+      not linking the other is confusing. Please avoid that. Moving functions from\n+      the `.h` to the `.cpp` should not result in build errors\n+\n+- Use the RAII (Resource Acquisition Is Initialization) paradigm where possible. For example by using\n+  `scoped_pointer` for allocations in a function.\n+\n+  - *Rationale*: This avoids memory and resource leaks, and ensures exception safety\n+\n+C++ data structures\n+--------------------\n+\n+- Never use the std::map [] syntax when reading from a map, but instead use .find()\n+\n+  - *Rationale*: [] does an insert (of the default element) if the item doesn't\n+    exist in the map yet. This has resulted in memory leaks in the past, as well as\n+    race conditions (expecting read-read behavior). Using [] is fine for *writing* to a map\n+\n+- Do not compare an iterator from one data structure with an iterator of\n+  another data structure (even if of the same type)\n+\n+  - *Rationale*: Behavior is undefined. In C++ parlor this means \"may reformat\n+    the universe\", in practice this has resulted in at least one hard-to-debug crash bug\n+\n+- Watch out for vector out-of-bounds exceptions. `&vch[0]` is illegal for an\n+  empty vector, `&vch[vch.size()]` is always illegal. Use `begin_ptr(vch)` and\n+  `end_ptr(vch)` to get the begin and end pointer instead (defined in\n+  `serialize.h`)\n+\n+- Vector bounds checking is only enabled in debug mode. Do not rely on it\n+\n+- Make sure that constructors initialize all fields. If this is skipped for a\n+  good reason (i.e., optimization on the critical path), add an explicit\n+  comment about this\n+\n+  - *Rationale*: Ensure determinism by avoiding accidental use of uninitialized\n+    values. Also, static analyzers balk about this.\n+\n+- Use explicitly signed or unsigned `char`s, or even better `uint8_t` and\n+  `int8_t`. Do not use bare `char` unless it is to pass to a third-party API.\n+  This type can be signed or unsigned depending on the architecture, which can\n+  lead to interoperability problems or dangerous conditions such as\n+  out-of-bounds array accesses\n+\n+- Prefer explicit constructions over implicit ones that rely on 'magical' C++ behavior\n+\n+  - *Rationale*: Easier to understand what is happening, thus easier to spot mistakes, even for those\n+  that are not language lawyers\n+\n+Strings and formatting\n+------------------------\n+\n+- Be careful of LogPrint versus LogPrintf. LogPrint takes a 'category' argument, LogPrintf does not.\n+\n+  - *Rationale*: Confusion of these can result in runtime exceptions due to\n+    formatting mismatch, and it is easy to get wrong because of subtly similar naming\n+\n+- Use std::string, avoid C string manipulation functions\n+\n+  - *Rationale*: C++ string handling is marginally safer, less scope for\n+    buffer overflows and surprises with \\0 characters. Also some C string manipulations\n+    tend to act differently depending on platform, or even the user locale\n+\n+- Use ParseInt32, ParseInt64, ParseDouble from `utilstrencodings.h` for number parsing\n+\n+  - *Rationale*: These functions do overflow checking, and avoid pesky locale issues\n+\n+- For `strprintf`, `LogPrint`, `LogPrintf` formatting characters don't need size specifiers\n+\n+  - *Rationale*: Bitcoin Core uses tinyformat, which is type safe. Leave them out to avoid confusion\n+\n+Threads and synchronization\n+----------------------------\n+\n+- Build and run tests with `-DDEBUG_LOCKORDER` to verify that no potential\n+  deadlocks are introduced. As of 0.12, this is defined by default when\n+  configuring with `--enable-debug`\n+\n+- When using `LOCK`/`TRY_LOCK` be aware that the lock exists in the context of\n+  the current scope, so surround the statement and the code that needs the lock\n+  with braces\n+\n+  OK:\n+\n+```c++\n+{\n+    TRY_LOCK(cs_vNodes, lockNodes);\n+    ...\n+}\n+```\n+\n+  Wrong:\n+\n+```c++\n+TRY_LOCK(cs_vNodes, lockNodes);\n+{\n+    ...\n+}\n+```\n+\n+Source code organization\n+--------------------------\n+\n+- Implementation code should go into the `.cpp` file and not the `.h`, unless necessary due to template usage or\n+  when performance due to inlining is critical\n+\n+  - *Rationale*: Shorter and simpler header files are easier to read, and reduce compile time\n+\n+- Don't import anything into the global namespace (`using namespace ...`). Use\n+  fully specified types such as `std::string`.\n+\n+  - *Rationale*: Avoids symbol conflicts\n+\n+GUI\n+-----\n+\n+- Do not display or manipulate dialogs in model code (classes `*Model`)\n+\n+  - *Rationale*: Model classes pass through events and data from the core, they\n+    should not interact with the user. That's where View classes come in. The converse also\n+    holds: try to not directly access core data structures from Views."
      }
    ]
  },
  {
    "sha": "92aa7311d64cb1a0109d63d6bf7406c119bf94cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MmFhNzMxMWQ2NGNiMWEwMTA5ZDYzZDZiZjc0MDZjMTE5YmY5NGNk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-28T13:17:42Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-28T13:17:50Z"
      },
      "message": "Merge pull request #6942\n\ne482a7f Fix CCoins serialization documentation (Peter Josling)",
      "tree": {
        "sha": "30865918e04c79e2035d3973b1c7aebf010ae311",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/30865918e04c79e2035d3973b1c7aebf010ae311"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92aa7311d64cb1a0109d63d6bf7406c119bf94cd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWWal+AAoJENuhpnN5oakxnC0P/11N9sG8IIz/0epNHzlhPA5F\nkEvpdCWSb3i8viCEu9s92HI60ktFNk4celvxOqioABYaWnrc488PT1RSFN2nEB2J\nHsiWl3bmhvZSB+norCBoa3suL5uQlaiIdr9aFFffLlMqy8+UaIiE0/GwhkRkRJx4\nN5xJrdB80sQCa3ydYZzpxxRnS+pg07IfQ6smb2ByF73rGL38ZNmzZefbAXI7Tvol\ns2Wodehh4ua5w+fYObITYZVo0ouvGd9wOpzQ8zGCrTXE8q9TMLJgWgH7irlEyzoc\nYtbr5n/jTmgu8LPUMfbPQx4wzEHqpikxNkD7JRdwhSi0pjCDlBQdyaAgF7DZJiGr\nM5xZ+oY1xbiTZW3U2J5Yjzl02/a3EILtdihhsdmemnmw8zkcfE4EaqVEI5Wmt55y\nXxRoq/+D7eeGYTRPCEreQyomfhtsysbBdEU9zKyhIOZR7f1hLKa/TVdzPj0cW9lG\nbi33G8kbmN+jnGnBfR4VpnIysqY55RWRYcBwiSVXb/dMtQ0Duqr44pUX6HYyOrB4\nhabOymSn1Hx6oOgfPWX9bQvLGpjoPQBHjBroGPL8fHjeEG6RLttrOhzPvnoBCgnI\nrQe5lu3i/hXNYgOZOePtzs6E205cGVJgenuTl0QqA2UBRcgm578+KXlJsaUSEcWj\nrYZp9MIbPreSKBLWE6TD\n=fljw\n-----END PGP SIGNATURE-----",
        "payload": "tree 30865918e04c79e2035d3973b1c7aebf010ae311\nparent 8332457e95c9cedcfdc1d4e7e1b2d945fb54dc03\nparent e482a7fe6b46fbf4ee91f31af1ff084e74fd25e5\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1448716662 +0100\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1448716670 +0100\n\nMerge pull request #6942\n\ne482a7f Fix CCoins serialization documentation (Peter Josling)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92aa7311d64cb1a0109d63d6bf7406c119bf94cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92aa7311d64cb1a0109d63d6bf7406c119bf94cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92aa7311d64cb1a0109d63d6bf7406c119bf94cd/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8332457e95c9cedcfdc1d4e7e1b2d945fb54dc03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8332457e95c9cedcfdc1d4e7e1b2d945fb54dc03",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8332457e95c9cedcfdc1d4e7e1b2d945fb54dc03"
      },
      {
        "sha": "e482a7fe6b46fbf4ee91f31af1ff084e74fd25e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e482a7fe6b46fbf4ee91f31af1ff084e74fd25e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e482a7fe6b46fbf4ee91f31af1ff084e74fd25e5"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "99b25de45b6bb0b5fbb4f611d9618f606de24051",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92aa7311d64cb1a0109d63d6bf7406c119bf94cd/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92aa7311d64cb1a0109d63d6bf7406c119bf94cd/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=92aa7311d64cb1a0109d63d6bf7406c119bf94cd",
        "patch": "@@ -29,11 +29,11 @@\n  * - VARINT(nHeight)\n  *\n  * The nCode value consists of:\n- * - bit 1: IsCoinBase()\n- * - bit 2: vout[0] is not spent\n- * - bit 4: vout[1] is not spent\n+ * - bit 0: IsCoinBase()\n+ * - bit 1: vout[0] is not spent\n+ * - bit 2: vout[1] is not spent\n  * - The higher bits encode N, the number of non-zero bytes in the following bitvector.\n- *   - In case both bit 2 and bit 4 are unset, they encode N-1, as there must be at\n+ *   - In case both bit 1 and bit 2 are unset, they encode N-1, as there must be at\n  *     least one non-spent output).\n  *\n  * Example: 0104835800816115944e077fe7c803cfa57f29b36bf87c1d358bb85e\n@@ -58,7 +58,7 @@\n  *\n  *  - version = 1\n  *  - code = 9 (coinbase, neither vout[0] or vout[1] are unspent,\n- *                2 (1, +1 because both bit 2 and bit 4 are unset) non-zero bitvector bytes follow)\n+ *                2 (1, +1 because both bit 1 and bit 2 are unset) non-zero bitvector bytes follow)\n  *  - unspentness bitvector: bits 2 (0x04) and 14 (0x4000) are set, so vout[2+2] and vout[14+2] are unspent\n  *  - vout[4]: 86ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4ee\n  *             * 86ef97d579: compact amount representation for 234925952 (2.35 BTC)"
      }
    ]
  },
  {
    "sha": "996d3117c7b00093afbeaf1ec9174475fbd9df2e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTZkMzExN2M3YjAwMDkzYWZiZWFmMWVjOTE3NDQ3NWZiZDlkZjJl",
    "commit": {
      "author": {
        "name": "Nick",
        "email": "nikzhavoronkov@gmail.com",
        "date": "2015-11-21T02:35:11Z"
      },
      "committer": {
        "name": "Nick Zhavoronkov",
        "email": "nikzhavoronkov@gmail.com",
        "date": "2015-11-28T14:06:56Z"
      },
      "message": "[RPC] Add transaction size to JSON output\n\nThis may be useful for blockchain explorers.",
      "tree": {
        "sha": "3c188b2924c0c93c5571f306564446882f3ff1e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c188b2924c0c93c5571f306564446882f3ff1e0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/996d3117c7b00093afbeaf1ec9174475fbd9df2e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/996d3117c7b00093afbeaf1ec9174475fbd9df2e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/996d3117c7b00093afbeaf1ec9174475fbd9df2e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/996d3117c7b00093afbeaf1ec9174475fbd9df2e/comments",
    "author": {
      "login": "Har01d",
      "id": 14060856,
      "node_id": "MDQ6VXNlcjE0MDYwODU2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14060856?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Har01d",
      "html_url": "https://github.com/Har01d",
      "followers_url": "https://api.github.com/users/Har01d/followers",
      "following_url": "https://api.github.com/users/Har01d/following{/other_user}",
      "gists_url": "https://api.github.com/users/Har01d/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Har01d/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Har01d/subscriptions",
      "organizations_url": "https://api.github.com/users/Har01d/orgs",
      "repos_url": "https://api.github.com/users/Har01d/repos",
      "events_url": "https://api.github.com/users/Har01d/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Har01d/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Har01d",
      "id": 14060856,
      "node_id": "MDQ6VXNlcjE0MDYwODU2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14060856?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Har01d",
      "html_url": "https://github.com/Har01d",
      "followers_url": "https://api.github.com/users/Har01d/followers",
      "following_url": "https://api.github.com/users/Har01d/following{/other_user}",
      "gists_url": "https://api.github.com/users/Har01d/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Har01d/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Har01d/subscriptions",
      "organizations_url": "https://api.github.com/users/Har01d/orgs",
      "repos_url": "https://api.github.com/users/Har01d/repos",
      "events_url": "https://api.github.com/users/Har01d/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Har01d/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "776848acefa8345c7e510d31406160c4a1a24bca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/776848acefa8345c7e510d31406160c4a1a24bca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/776848acefa8345c7e510d31406160c4a1a24bca"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1f2d77aef0fa25d831e7f11856ac28ece95c69f3",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/996d3117c7b00093afbeaf1ec9174475fbd9df2e/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/996d3117c7b00093afbeaf1ec9174475fbd9df2e/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=996d3117c7b00093afbeaf1ec9174475fbd9df2e",
        "patch": "@@ -62,6 +62,7 @@ void ScriptPubKeyToJSON(const CScript& scriptPubKey, UniValue& out, bool fInclud\n void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n {\n     entry.push_back(Pair(\"txid\", tx.GetHash().GetHex()));\n+    entry.push_back(Pair(\"size\", (int)::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION)));\n     entry.push_back(Pair(\"version\", tx.nVersion));\n     entry.push_back(Pair(\"locktime\", (int64_t)tx.nLockTime));\n     UniValue vin(UniValue::VARR);\n@@ -133,6 +134,7 @@ UniValue getrawtransaction(const UniValue& params, bool fHelp)\n             \"{\\n\"\n             \"  \\\"hex\\\" : \\\"data\\\",       (string) The serialized, hex-encoded data for 'txid'\\n\"\n             \"  \\\"txid\\\" : \\\"id\\\",        (string) The transaction id (same as provided)\\n\"\n+            \"  \\\"size\\\" : n,             (numeric) The transaction size\\n\"\n             \"  \\\"version\\\" : n,          (numeric) The version\\n\"\n             \"  \\\"locktime\\\" : ttt,       (numeric) The lock time\\n\"\n             \"  \\\"vin\\\" : [               (array of json objects)\\n\"\n@@ -429,6 +431,7 @@ UniValue decoderawtransaction(const UniValue& params, bool fHelp)\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"txid\\\" : \\\"id\\\",        (string) The transaction id\\n\"\n+            \"  \\\"size\\\" : n,             (numeric) The transaction size\\n\"\n             \"  \\\"version\\\" : n,          (numeric) The version\\n\"\n             \"  \\\"locktime\\\" : ttt,       (numeric) The lock time\\n\"\n             \"  \\\"vin\\\" : [               (array of json objects)\\n\""
      },
      {
        "sha": "ce22975005b1bb14b9b7e0fd433398681fc64f35",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/996d3117c7b00093afbeaf1ec9174475fbd9df2e/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/996d3117c7b00093afbeaf1ec9174475fbd9df2e/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=996d3117c7b00093afbeaf1ec9174475fbd9df2e",
        "patch": "@@ -72,6 +72,7 @@ BOOST_AUTO_TEST_CASE(rpc_rawparams)\n     BOOST_CHECK_THROW(CallRPC(\"decoderawtransaction DEADBEEF\"), runtime_error);\n     string rawtx = \"0100000001a15d57094aa7a21a28cb20b59aab8fc7d1149a3bdbcddba9c622e4f5f6a99ece010000006c493046022100f93bb0e7d8db7bd46e40132d1f8242026e045f03a0efe71bbb8e3f475e970d790221009337cd7f1f929f00cc6ff01f03729b069a7c21b59b1736ddfee5db5946c5da8c0121033b9b137ee87d5a812d6f506efdd37f0affa7ffc310711c06c7f3e097c9447c52ffffffff0100e1f505000000001976a9140389035a9225b3839e2bbf32d826a1e222031fd888ac00000000\";\n     BOOST_CHECK_NO_THROW(r = CallRPC(string(\"decoderawtransaction \")+rawtx));\n+    BOOST_CHECK_EQUAL(find_value(r.get_obj(), \"size\").get_int(), 193);\n     BOOST_CHECK_EQUAL(find_value(r.get_obj(), \"version\").get_int(), 1);\n     BOOST_CHECK_EQUAL(find_value(r.get_obj(), \"locktime\").get_int(), 0);\n     BOOST_CHECK_THROW(r = CallRPC(string(\"decoderawtransaction \")+rawtx+\" extra\"), runtime_error);"
      }
    ]
  },
  {
    "sha": "b966aa836a3bc5bfa1314248258308f0026d41bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOTY2YWE4MzZhM2JjNWJmYTEzMTQyNDgyNTgzMDhmMDAyNmQ0MWJi",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-06-27T19:21:41Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-28T17:47:29Z"
      },
      "message": "Constrain constant values to a single location in code",
      "tree": {
        "sha": "479a641f12deef9df483b368876cbd8ede3da5e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/479a641f12deef9df483b368876cbd8ede3da5e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b966aa836a3bc5bfa1314248258308f0026d41bb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b966aa836a3bc5bfa1314248258308f0026d41bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b966aa836a3bc5bfa1314248258308f0026d41bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b966aa836a3bc5bfa1314248258308f0026d41bb/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "92aa7311d64cb1a0109d63d6bf7406c119bf94cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92aa7311d64cb1a0109d63d6bf7406c119bf94cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92aa7311d64cb1a0109d63d6bf7406c119bf94cd"
      }
    ],
    "stats": {
      "total": 196,
      "additions": 118,
      "deletions": 78
    },
    "files": [
      {
        "sha": "58ced1ade94d9acd57ea8203fd88ab92c1e25ce8",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -22,17 +22,18 @@\n \n using namespace std;\n \n+static const char DEFAULT_RPCCONNECT[] = \"127.0.0.1\";\n static const int DEFAULT_HTTP_CLIENT_TIMEOUT=900;\n \n std::string HelpMessageCli()\n {\n     string strUsage;\n     strUsage += HelpMessageGroup(_(\"Options:\"));\n     strUsage += HelpMessageOpt(\"-?\", _(\"This help message\"));\n-    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\"));\n+    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), BITCOIN_CONF_FILENAME));\n     strUsage += HelpMessageOpt(\"-datadir=<dir>\", _(\"Specify data directory\"));\n     AppendParamsHelpMessages(strUsage);\n-    strUsage += HelpMessageOpt(\"-rpcconnect=<ip>\", strprintf(_(\"Send commands to node running on <ip> (default: %s)\"), \"127.0.0.1\"));\n+    strUsage += HelpMessageOpt(\"-rpcconnect=<ip>\", strprintf(_(\"Send commands to node running on <ip> (default: %s)\"), DEFAULT_RPCCONNECT));\n     strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\"), 8332, 18332));\n     strUsage += HelpMessageOpt(\"-rpcwait\", _(\"Wait for RPC server to start\"));\n     strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n@@ -141,7 +142,7 @@ static void http_request_done(struct evhttp_request *req, void *ctx)\n \n UniValue CallRPC(const string& strMethod, const UniValue& params)\n {\n-    std::string host = GetArg(\"-rpcconnect\", \"127.0.0.1\");\n+    std::string host = GetArg(\"-rpcconnect\", DEFAULT_RPCCONNECT);\n     int port = GetArg(\"-rpcport\", BaseParams().RPCPort());\n \n     // Create event base"
      },
      {
        "sha": "55331a3c6c4ab07241b82906de3a5be98c97f08f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 50,
        "changes": 106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -24,6 +24,7 @@\n #include \"net.h\"\n #include \"policy/policy.h\"\n #include \"rpcserver.h\"\n+#include \"script/sigcache.h\"\n #include \"script/standard.h\"\n #include \"script/sigcache.h\"\n #include \"scheduler.h\"\n@@ -66,6 +67,10 @@ using namespace std;\n CWallet* pwalletMain = NULL;\n #endif\n bool fFeeEstimatesInitialized = false;\n+static const bool DEFAULT_PROXYRANDOMIZE = true;\n+static const bool DEFAULT_REST_ENABLE = false;\n+static const bool DEFAULT_SAFEMODE = true;\n+static const bool DEFAULT_STOPAFTERBLOCKIMPORT = false;\n \n #if ENABLE_ZMQ\n static CZMQNotificationInterface* pzmqNotificationInterface = NULL;\n@@ -296,7 +301,7 @@ void OnRPCPreCommand(const CRPCCommand& cmd)\n {\n     // Observe safe mode\n     string strWarning = GetWarnings(\"rpc\");\n-    if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\", false) &&\n+    if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\", !DEFAULT_SAFEMODE) &&\n         !cmd.okSafeMode)\n         throw JSONRPCError(RPC_FORBIDDEN_BY_SAFE_MODE, string(\"Safe mode: \") + strWarning);\n }\n@@ -316,7 +321,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-blocksonly\", strprintf(_(\"Whether to operate in a blocks only mode (default: %u)\"), DEFAULT_BLOCKSONLY));\n     strUsage += HelpMessageOpt(\"-checkblocks=<n>\", strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), DEFAULT_CHECKBLOCKS));\n     strUsage += HelpMessageOpt(\"-checklevel=<n>\", strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), DEFAULT_CHECKLEVEL));\n-    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\"));\n+    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), BITCOIN_CONF_FILENAME));\n     if (mode == HMM_BITCOIND)\n     {\n #ifndef WIN32\n@@ -332,7 +337,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-par=<n>\", strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"),\n         -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS));\n #ifndef WIN32\n-    strUsage += HelpMessageOpt(\"-pid=<file>\", strprintf(_(\"Specify pid file (default: %s)\"), \"bitcoind.pid\"));\n+    strUsage += HelpMessageOpt(\"-pid=<file>\", strprintf(_(\"Specify pid file (default: %s)\"), BITCOIN_PID_FILENAME));\n #endif\n     strUsage += HelpMessageOpt(\"-prune=<n>\", strprintf(_(\"Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. \"\n             \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n@@ -341,33 +346,33 @@ std::string HelpMessage(HelpMessageMode mode)\n #ifndef WIN32\n     strUsage += HelpMessageOpt(\"-sysperms\", _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\"));\n #endif\n-    strUsage += HelpMessageOpt(\"-txindex\", strprintf(_(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-txindex\", strprintf(_(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\"), DEFAULT_TXINDEX));\n \n     strUsage += HelpMessageGroup(_(\"Connection options:\"));\n     strUsage += HelpMessageOpt(\"-addnode=<ip>\", _(\"Add a node to connect to and attempt to keep the connection open\"));\n-    strUsage += HelpMessageOpt(\"-banscore=<n>\", strprintf(_(\"Threshold for disconnecting misbehaving peers (default: %u)\"), 100));\n-    strUsage += HelpMessageOpt(\"-bantime=<n>\", strprintf(_(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\"), 86400));\n+    strUsage += HelpMessageOpt(\"-banscore=<n>\", strprintf(_(\"Threshold for disconnecting misbehaving peers (default: %u)\"), DEFAULT_BANSCORE_THRESHOLD));\n+    strUsage += HelpMessageOpt(\"-bantime=<n>\", strprintf(_(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\"), DEFAULT_MISBEHAVING_BANTIME));\n     strUsage += HelpMessageOpt(\"-bind=<addr>\", _(\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\"));\n     strUsage += HelpMessageOpt(\"-connect=<ip>\", _(\"Connect only to the specified node(s)\"));\n     strUsage += HelpMessageOpt(\"-discover\", _(\"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\"));\n-    strUsage += HelpMessageOpt(\"-dns\", _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \" \" + _(\"(default: 1)\"));\n+    strUsage += HelpMessageOpt(\"-dns\", strprintf(_(\"Allow DNS lookups for -addnode, -seednode and -connect (default: %u)\"), fNameLookup));\n     strUsage += HelpMessageOpt(\"-dnsseed\", _(\"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect)\"));\n     strUsage += HelpMessageOpt(\"-externalip=<ip>\", _(\"Specify your own public address\"));\n-    strUsage += HelpMessageOpt(\"-forcednsseed\", strprintf(_(\"Always query for peer addresses via DNS lookup (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-forcednsseed\", strprintf(_(\"Always query for peer addresses via DNS lookup (default: %u)\"), DEFAULT_FORCEDNSSEED));\n     strUsage += HelpMessageOpt(\"-listen\", _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\"));\n     strUsage += HelpMessageOpt(\"-listenonion\", strprintf(_(\"Automatically create Tor hidden service (default: %d)\"), DEFAULT_LISTEN_ONION));\n     strUsage += HelpMessageOpt(\"-maxconnections=<n>\", strprintf(_(\"Maintain at most <n> connections to peers (default: %u)\"), DEFAULT_MAX_PEER_CONNECTIONS));\n-    strUsage += HelpMessageOpt(\"-maxreceivebuffer=<n>\", strprintf(_(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"), 5000));\n-    strUsage += HelpMessageOpt(\"-maxsendbuffer=<n>\", strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), 1000));\n+    strUsage += HelpMessageOpt(\"-maxreceivebuffer=<n>\", strprintf(_(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXRECEIVEBUFFER));\n+    strUsage += HelpMessageOpt(\"-maxsendbuffer=<n>\", strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXSENDBUFFER));\n     strUsage += HelpMessageOpt(\"-onion=<ip:port>\", strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\"));\n     strUsage += HelpMessageOpt(\"-onlynet=<net>\", _(\"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\"));\n-    strUsage += HelpMessageOpt(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), fIsBareMultisigStd));\n     strUsage += HelpMessageOpt(\"-peerbloomfilters\", strprintf(_(\"Support filtering of blocks and transaction with bloom filters (default: %u)\"), 1));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-enforcenodebloom\", strprintf(\"Enforce minimum protocol version to limit use of bloom filters (default: %u)\", 0));\n-    strUsage += HelpMessageOpt(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), 8333, 18333));\n+    strUsage += HelpMessageOpt(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), Params(CBaseChainParams::MAIN).GetDefaultPort(), Params(CBaseChainParams::TESTNET).GetDefaultPort()));\n     strUsage += HelpMessageOpt(\"-proxy=<ip:port>\", _(\"Connect through SOCKS5 proxy\"));\n-    strUsage += HelpMessageOpt(\"-proxyrandomize\", strprintf(_(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-proxyrandomize\", strprintf(_(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\"), DEFAULT_PROXYRANDOMIZE));\n     strUsage += HelpMessageOpt(\"-seednode=<ip>\", _(\"Connect to a node to retrieve peer addresses, and disconnect\"));\n     strUsage += HelpMessageOpt(\"-timeout=<n>\", strprintf(_(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\"), DEFAULT_CONNECT_TIMEOUT));\n     strUsage += HelpMessageOpt(\"-torcontrol=<ip>:<port>\", strprintf(_(\"Tor control port to use if onion listening enabled (default: %s)\"), DEFAULT_TOR_CONTROL));\n@@ -388,22 +393,22 @@ std::string HelpMessage(HelpMessageMode mode)\n #ifdef ENABLE_WALLET\n     strUsage += HelpMessageGroup(_(\"Wallet options:\"));\n     strUsage += HelpMessageOpt(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"));\n-    strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), 100));\n+    strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), DEFAULT_KEYPOOL_SIZE));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\",\n             CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)));\n     strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in %s/kB) to add to transactions you send (default: %s)\"),\n         CURRENCY_UNIT, FormatMoney(payTxFee.GetFeePerK())));\n     strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions on startup\"));\n     strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet.dat on startup\"));\n-    strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), 0));\n-    strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), fSendFreeTransactions));\n+    strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), bSpendZeroConfChange));\n     strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n     strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees (in %s) to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\"),\n         CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)));\n     strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format on startup\"));\n     strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), \"wallet.dat\"));\n-    strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), true));\n+    strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_WALLETBROADCAST));\n     strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));\n     strUsage += HelpMessageOpt(\"-zapwallettxes=<mode>\", _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") +\n         \" \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\"));\n@@ -420,18 +425,18 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageGroup(_(\"Debugging/Testing options:\"));\n     if (showDebug)\n     {\n-        strUsage += HelpMessageOpt(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", 1));\n+        strUsage += HelpMessageOpt(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", fCheckpointsEnabled));\n #ifdef ENABLE_WALLET\n         strUsage += HelpMessageOpt(\"-dblogsize=<n>\", strprintf(\"Flush wallet database activity from memory to disk log every <n> megabytes (default: %u)\", DEFAULT_WALLET_DBLOGSIZE));\n #endif\n-        strUsage += HelpMessageOpt(\"-disablesafemode\", strprintf(\"Disable safemode, override a real safe mode event (default: %u)\", 0));\n-        strUsage += HelpMessageOpt(\"-testsafemode\", strprintf(\"Force safe mode (default: %u)\", 0));\n+        strUsage += HelpMessageOpt(\"-disablesafemode\", strprintf(\"Disable safemode, override a real safe mode event (default: %u)\", !DEFAULT_SAFEMODE));\n+        strUsage += HelpMessageOpt(\"-testsafemode\", strprintf(\"Force safe mode (default: %u)\", DEFAULT_TESTSAFEMODE));\n         strUsage += HelpMessageOpt(\"-dropmessagestest=<n>\", \"Randomly drop 1 of every <n> network messages\");\n         strUsage += HelpMessageOpt(\"-fuzzmessagestest=<n>\", \"Randomly fuzz 1 of every <n> network messages\");\n #ifdef ENABLE_WALLET\n-        strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", 1));\n+        strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", DEFAULT_FLUSHWALLET));\n #endif\n-        strUsage += HelpMessageOpt(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", 0));\n+        strUsage += HelpMessageOpt(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", DEFAULT_STOPAFTERBLOCKIMPORT));\n         strUsage += HelpMessageOpt(\"-limitancestorcount=<n>\", strprintf(\"Do not accept transactions if number of in-mempool ancestors is <n> or more (default: %u)\", DEFAULT_ANCESTOR_LIMIT));\n         strUsage += HelpMessageOpt(\"-limitancestorsize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool ancestors exceeds <n> kilobytes (default: %u)\", DEFAULT_ANCESTOR_SIZE_LIMIT));\n         strUsage += HelpMessageOpt(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT));\n@@ -442,25 +447,25 @@ std::string HelpMessage(HelpMessageMode mode)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n         _(\"If <category> is not supplied or if <category> = 1, output all debugging information.\") + _(\"<category> can be:\") + \" \" + debugCategories + \".\");\n-    strUsage += HelpMessageOpt(\"-gen\", strprintf(_(\"Generate coins (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-gen\", strprintf(_(\"Generate coins (default: %u)\"), DEFAULT_GENERATE));\n     strUsage += HelpMessageOpt(\"-genproclimit=<n>\", strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), DEFAULT_GENERATE_THREADS));\n     strUsage += HelpMessageOpt(\"-help-debug\", _(\"Show all debugging options (usage: --help -help-debug)\"));\n-    strUsage += HelpMessageOpt(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), 0));\n-    strUsage += HelpMessageOpt(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), fLogIPs));\n+    strUsage += HelpMessageOpt(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), fLogTimestamps));\n     if (showDebug)\n     {\n         strUsage += HelpMessageOpt(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS));\n-        strUsage += HelpMessageOpt(\"-limitfreerelay=<n>\", strprintf(\"Continuously rate-limit free transactions to <n>*1000 bytes per minute (default: %u)\", 15));\n-        strUsage += HelpMessageOpt(\"-relaypriority\", strprintf(\"Require high priority for relaying free or low-fee transactions (default: %u)\", 1));\n+        strUsage += HelpMessageOpt(\"-limitfreerelay=<n>\", strprintf(\"Continuously rate-limit free transactions to <n>*1000 bytes per minute (default: %u)\", DEFAULT_LIMITFREERELAY));\n+        strUsage += HelpMessageOpt(\"-relaypriority\", strprintf(\"Require high priority for relaying free or low-fee transactions (default: %u)\", DEFAULT_RELAYPRIORITY));\n         strUsage += HelpMessageOpt(\"-maxsigcachesize=<n>\", strprintf(\"Limit size of signature cache to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE));\n     }\n     strUsage += HelpMessageOpt(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\"),\n         CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)));\n     strUsage += HelpMessageOpt(\"-printtoconsole\", _(\"Send trace/debug info to console instead of debug.log file\"));\n     if (showDebug)\n     {\n-        strUsage += HelpMessageOpt(\"-printpriority\", strprintf(\"Log transaction priority and fee per kB when mining blocks (default: %u)\", 0));\n-        strUsage += HelpMessageOpt(\"-privdb\", strprintf(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\", 1));\n+        strUsage += HelpMessageOpt(\"-printpriority\", strprintf(\"Log transaction priority and fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY));\n+        strUsage += HelpMessageOpt(\"-privdb\", strprintf(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\", DEFAULT_WALLET_PRIVDB));\n     }\n     strUsage += HelpMessageOpt(\"-shrinkdebugfile\", _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\"));\n \n@@ -469,19 +474,19 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !Params(CBaseChainParams::TESTNET).RequireStandard()));\n-    strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), fAcceptDatacarrier));\n     strUsage += HelpMessageOpt(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY));\n \n     strUsage += HelpMessageGroup(_(\"Block creation options:\"));\n-    strUsage += HelpMessageOpt(\"-blockminsize=<n>\", strprintf(_(\"Set minimum block size in bytes (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-blockminsize=<n>\", strprintf(_(\"Set minimum block size in bytes (default: %u)\"), DEFAULT_BLOCK_MIN_SIZE));\n     strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", strprintf(_(\"Set maximum block size in bytes (default: %d)\"), DEFAULT_BLOCK_MAX_SIZE));\n     strUsage += HelpMessageOpt(\"-blockprioritysize=<n>\", strprintf(_(\"Set maximum size of high-priority/low-fee transactions in bytes (default: %d)\"), DEFAULT_BLOCK_PRIORITY_SIZE));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-blockversion=<n>\", strprintf(\"Override block version to test forking scenarios (default: %d)\", (int)CBlock::CURRENT_VERSION));\n \n     strUsage += HelpMessageGroup(_(\"RPC server options:\"));\n     strUsage += HelpMessageOpt(\"-server\", _(\"Accept command line and JSON-RPC commands\"));\n-    strUsage += HelpMessageOpt(\"-rest\", strprintf(_(\"Accept public REST requests (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-rest\", strprintf(_(\"Accept public REST requests (default: %u)\"), DEFAULT_REST_ENABLE));\n     strUsage += HelpMessageOpt(\"-rpcbind=<addr>\", _(\"Bind to given address to listen for JSON-RPC connections. Use [host]:port notation for IPv6. This option can be specified multiple times (default: bind to all interfaces)\"));\n     strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n@@ -497,13 +502,13 @@ std::string HelpMessage(HelpMessageMode mode)\n     {\n         strUsage += HelpMessageGroup(_(\"UI Options:\"));\n         if (showDebug) {\n-            strUsage += HelpMessageOpt(\"-allowselfsignedrootcertificates\", \"Allow self signed root certificates (default: 0)\");\n+            strUsage += HelpMessageOpt(\"-allowselfsignedrootcertificates\", strprintf(\"Allow self signed root certificates (default: %u)\", DEFAULT_SELFSIGNED_ROOTCERTS));\n         }\n-        strUsage += HelpMessageOpt(\"-choosedatadir\", _(\"Choose data directory on startup (default: 0)\"));\n+        strUsage += HelpMessageOpt(\"-choosedatadir\", strprintf(_(\"Choose data directory on startup (default: %u)\"), DEFAULT_CHOOSE_DATADIR));\n         strUsage += HelpMessageOpt(\"-lang=<lang>\", _(\"Set language, for example \\\"de_DE\\\" (default: system locale)\"));\n         strUsage += HelpMessageOpt(\"-min\", _(\"Start minimized\"));\n         strUsage += HelpMessageOpt(\"-rootcertificates=<file>\", _(\"Set SSL root certificates for payment request (default: -system-)\"));\n-        strUsage += HelpMessageOpt(\"-splash\", _(\"Show splash screen on startup (default: 1)\"));\n+        strUsage += HelpMessageOpt(\"-splash\", strprintf(_(\"Show splash screen on startup (default: %u)\"), DEFAULT_SPLASHSCREEN));\n         strUsage += HelpMessageOpt(\"-resetguisettings\", _(\"Reset all settings changes made over the GUI\"));\n         if (showDebug) {\n             strUsage += HelpMessageOpt(\"-uiplatform\", \"Select platform to customize UI for (one of windows, macosx, other; default: platform compiled on)\");\n@@ -643,7 +648,7 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n         }\n     }\n \n-    if (GetBoolArg(\"-stopafterblockimport\", false)) {\n+    if (GetBoolArg(\"-stopafterblockimport\", DEFAULT_STOPAFTERBLOCKIMPORT)) {\n         LogPrintf(\"Stopping after block import\\n\");\n         StartShutdown();\n     }\n@@ -675,7 +680,7 @@ bool AppInitServers(boost::thread_group& threadGroup)\n         return false;\n     if (!StartHTTPRPC())\n         return false;\n-    if (GetBoolArg(\"-rest\", false) && !StartREST())\n+    if (GetBoolArg(\"-rest\", DEFAULT_REST_ENABLE) && !StartREST())\n         return false;\n     if (!StartHTTPServer())\n         return false;\n@@ -759,9 +764,9 @@ void InitParameterInteraction()\n void InitLogging()\n {\n     fPrintToConsole = GetBoolArg(\"-printtoconsole\", false);\n-    fLogTimestamps = GetBoolArg(\"-logtimestamps\", true);\n+    fLogTimestamps = GetBoolArg(\"-logtimestamps\", fLogTimestamps);\n     fLogTimeMicros = GetBoolArg(\"-logtimemicros\", DEFAULT_LOGTIMEMICROS);\n-    fLogIPs = GetBoolArg(\"-logips\", false);\n+    fLogIPs = GetBoolArg(\"-logips\", fLogIPs);\n \n     LogPrintf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");\n     LogPrintf(\"Bitcoin version %s (%s)\\n\", FormatFullVersion(), CLIENT_DATE);\n@@ -835,7 +840,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     // if using block pruning, then disable txindex\n     if (GetArg(\"-prune\", 0)) {\n-        if (GetBoolArg(\"-txindex\", false))\n+        if (GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n #ifdef ENABLE_WALLET\n         if (GetBoolArg(\"-rescan\", false)) {\n@@ -896,7 +901,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         mempool.setSanityCheck(1.0 / ratio);\n     }\n     fCheckBlockIndex = GetBoolArg(\"-checkblockindex\", chainparams.DefaultConsistencyChecks());\n-    fCheckpointsEnabled = GetBoolArg(\"-checkpoints\", true);\n+    fCheckpointsEnabled = GetBoolArg(\"-checkpoints\", fCheckpointsEnabled);\n \n     // mempool limits\n     int64_t nMempoolSizeMax = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n@@ -994,13 +999,14 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n     nTxConfirmTarget = GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n-    bSpendZeroConfChange = GetBoolArg(\"-spendzeroconfchange\", true);\n-    fSendFreeTransactions = GetBoolArg(\"-sendfreetransactions\", false);\n+    bSpendZeroConfChange = GetBoolArg(\"-spendzeroconfchange\", bSpendZeroConfChange);\n+    fSendFreeTransactions = GetBoolArg(\"-sendfreetransactions\", fSendFreeTransactions);\n \n     std::string strWalletFile = GetArg(\"-wallet\", \"wallet.dat\");\n #endif // ENABLE_WALLET\n \n-    fIsBareMultisigStd = GetBoolArg(\"-permitbaremultisig\", true);\n+    fIsBareMultisigStd = GetBoolArg(\"-permitbaremultisig\", fIsBareMultisigStd);\n+    fAcceptDatacarrier = GetBoolArg(\"-datacarrier\", fAcceptDatacarrier);\n     nMaxDatacarrierBytes = GetArg(\"-datacarriersize\", nMaxDatacarrierBytes);\n \n     fAlerts = GetBoolArg(\"-alerts\", DEFAULT_ALERTS);\n@@ -1151,7 +1157,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n \n-    bool proxyRandomize = GetBoolArg(\"-proxyrandomize\", true);\n+    bool proxyRandomize = GetBoolArg(\"-proxyrandomize\", DEFAULT_PROXYRANDOMIZE);\n     // -proxy sets a proxy for all outgoing network traffic\n     // -noproxy (or -proxy=0) as well as the empty string can be used to not set a proxy, this is the default\n     std::string proxyArg = GetArg(\"-proxy\", \"\");\n@@ -1186,7 +1192,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // see Step 2: parameter interactions for more information about these\n     fListen = GetBoolArg(\"-listen\", DEFAULT_LISTEN);\n     fDiscover = GetBoolArg(\"-discover\", true);\n-    fNameLookup = GetBoolArg(\"-dns\", true);\n+    fNameLookup = GetBoolArg(\"-dns\", fNameLookup);\n \n     bool fBound = false;\n     if (fListen) {\n@@ -1275,7 +1281,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n     nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greated than nMaxDbcache\n     int64_t nBlockTreeDBCache = nTotalCache / 8;\n-    if (nBlockTreeDBCache > (1 << 21) && !GetBoolArg(\"-txindex\", false))\n+    if (nBlockTreeDBCache > (1 << 21) && !GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n         nBlockTreeDBCache = (1 << 21); // block tree db cache shouldn't be larger than 2 MiB\n     nTotalCache -= nBlockTreeDBCache;\n     int64_t nCoinDBCache = std::min(nTotalCache / 2, (nTotalCache / 4) + (1 << 23)); // use 25%-50% of the remainder for disk cache\n@@ -1331,7 +1337,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 }\n \n                 // Check for changed -txindex state\n-                if (fTxIndex != GetBoolArg(\"-txindex\", false)) {\n+                if (fTxIndex != GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n                     strLoadError = _(\"You need to rebuild the database using -reindex to change -txindex\");\n                     break;\n                 }\n@@ -1557,7 +1563,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 }\n             }\n         }\n-        pwalletMain->SetBroadcastTransactions(GetBoolArg(\"-walletbroadcast\", true));\n+        pwalletMain->SetBroadcastTransactions(GetBoolArg(\"-walletbroadcast\", DEFAULT_WALLETBROADCAST));\n     } // (!fDisableWallet)\n #else // ENABLE_WALLET\n     LogPrintf(\"No wallet support compiled in!\\n\");\n@@ -1631,7 +1637,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     scheduler.scheduleEvery(f, nPowTargetSpacing);\n \n     // Generate coins in the background\n-    GenerateBitcoins(GetBoolArg(\"-gen\", false), GetArg(\"-genproclimit\", DEFAULT_GENERATE_THREADS), chainparams);\n+    GenerateBitcoins(GetBoolArg(\"-gen\", DEFAULT_GENERATE), GetArg(\"-genproclimit\", DEFAULT_GENERATE_THREADS), chainparams);\n \n     // ********************************************************* Step 12: finished\n "
      },
      {
        "sha": "2c43d21f8bfdee7072e395efb3afc5c9877c88ae",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -941,7 +941,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CAmount mempoolRejectFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n         if (mempoolRejectFee > 0 && nFees < mempoolRejectFee) {\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nFees, mempoolRejectFee));\n-        } else if (GetBoolArg(\"-relaypriority\", true) && nFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1))) {\n+        } else if (GetBoolArg(\"-relaypriority\", DEFAULT_RELAYPRIORITY) && nFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1))) {\n             // Require that free transactions have sufficient priority to be mined in the next block.\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n         }\n@@ -963,7 +963,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             nLastTime = nNow;\n             // -limitfreerelay unit is thousand-bytes-per-minute\n             // At default rate it would take over a month to fill 1GB\n-            if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n+            if (dFreeCount >= GetArg(\"-limitfreerelay\", DEFAULT_LIMITFREERELAY) * 10 * 1000)\n                 return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"rate limited free transaction\");\n             LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n             dFreeCount += nSize;\n@@ -1436,7 +1436,7 @@ void Misbehaving(NodeId pnode, int howmuch)\n         return;\n \n     state->nMisbehavior += howmuch;\n-    int banscore = GetArg(\"-banscore\", 100);\n+    int banscore = GetArg(\"-banscore\", DEFAULT_BANSCORE_THRESHOLD);\n     if (state->nMisbehavior >= banscore && state->nMisbehavior - howmuch < banscore)\n     {\n         LogPrintf(\"%s: %s (%d -> %d) BAN THRESHOLD EXCEEDED\\n\", __func__, state->name, state->nMisbehavior-howmuch, state->nMisbehavior);\n@@ -3605,7 +3605,7 @@ bool InitBlockIndex(const CChainParams& chainparams)\n         return true;\n \n     // Use the provided setting for -txindex in the new database\n-    fTxIndex = GetBoolArg(\"-txindex\", false);\n+    fTxIndex = GetBoolArg(\"-txindex\", DEFAULT_TXINDEX);\n     pblocktree->WriteFlag(\"txindex\", fTxIndex);\n     LogPrintf(\"Initializing databases...\\n\");\n \n@@ -3936,7 +3936,7 @@ std::string GetWarnings(const std::string& strFor)\n     if (!CLIENT_VERSION_IS_RELEASE)\n         strStatusBar = _(\"This is a pre-release test build - use at your own risk - do not use for mining or merchant applications\");\n \n-    if (GetBoolArg(\"-testsafemode\", false))\n+    if (GetBoolArg(\"-testsafemode\", DEFAULT_TESTSAFEMODE))\n         strStatusBar = strRPC = \"testsafemode enabled\";\n \n     // Misc warnings like out of disk space and clock is wrong"
      },
      {
        "sha": "5264e9219b9e3224679c070465db4720569ea5f3",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -86,6 +86,13 @@ static const unsigned int DATABASE_WRITE_INTERVAL = 60 * 60;\n static const unsigned int DATABASE_FLUSH_INTERVAL = 24 * 60 * 60;\n /** Maximum length of reject messages. */\n static const unsigned int MAX_REJECT_MESSAGE_LENGTH = 111;\n+static const unsigned int DEFAULT_LIMITFREERELAY = 15;\n+static const bool DEFAULT_RELAYPRIORITY = true;\n+\n+static const bool DEFAULT_TXINDEX = false;\n+static const unsigned int DEFAULT_BANSCORE_THRESHOLD = 100;\n+\n+static const bool DEFAULT_TESTSAFEMODE = false;\n \n struct BlockHasher\n {"
      },
      {
        "sha": "5b711210dbe7929f4d10f7c921f369142897a1cb",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -153,7 +153,7 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n         // Priority order to process transactions\n         list<COrphan> vOrphan; // list memory doesn't move\n         map<uint256, vector<COrphan*> > mapDependers;\n-        bool fPrintPriority = GetBoolArg(\"-printpriority\", false);\n+        bool fPrintPriority = GetBoolArg(\"-printpriority\", DEFAULT_PRINTPRIORITY);\n \n         // This vector will be sorted into a priority queue:\n         vector<TxPriority> vecPriority;"
      },
      {
        "sha": "16c8e2a976f13fc9cf690724e8e18924b72693d2",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -17,8 +17,11 @@ class CScript;\n class CWallet;\n namespace Consensus { struct Params; };\n \n+static const bool DEFAULT_GENERATE = false;\n static const int DEFAULT_GENERATE_THREADS = 1;\n \n+static const bool DEFAULT_PRINTPRIORITY = false;\n+\n struct CBlockTemplate\n {\n     CBlock block;"
      },
      {
        "sha": "abc7cbb8f41fe397a9c1d34d7d33b2a015f298b9",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -521,12 +521,11 @@ void CNode::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t banti\n     banEntry.banReason = banReason;\n     if (bantimeoffset <= 0)\n     {\n-        bantimeoffset = GetArg(\"-bantime\", 60*60*24); // Default 24-hour ban\n+        bantimeoffset = GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME);\n         sinceUnixEpoch = false;\n     }\n     banEntry.nBanUntil = (sinceUnixEpoch ? 0 : GetTime() )+bantimeoffset;\n \n-\n     LOCK(cs_setBanned);\n     if (setBanned[subNet].nBanUntil < banEntry.nBanUntil)\n         setBanned[subNet] = banEntry;\n@@ -1414,7 +1413,7 @@ void ThreadDNSAddressSeed()\n {\n     // goal: only query DNS seeds if address need is acute\n     if ((addrman.size() > 0) &&\n-        (!GetBoolArg(\"-forcednsseed\", false))) {\n+        (!GetBoolArg(\"-forcednsseed\", DEFAULT_FORCEDNSSEED))) {\n         MilliSleep(11 * 1000);\n \n         LOCK(cs_vNodes);\n@@ -2337,8 +2336,8 @@ bool CAddrDB::Read(CAddrMan& addr)\n     return true;\n }\n \n-unsigned int ReceiveFloodSize() { return 1000*GetArg(\"-maxreceivebuffer\", 5*1000); }\n-unsigned int SendBufferSize() { return 1000*GetArg(\"-maxsendbuffer\", 1*1000); }\n+unsigned int ReceiveFloodSize() { return 1000*GetArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER); }\n+unsigned int SendBufferSize() { return 1000*GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER); }\n \n CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNameIn, bool fInboundIn) :\n     ssSend(SER_NETWORK, INIT_PROTO_VERSION),"
      },
      {
        "sha": "3664ce9a7084242fe1e2db865baa1beb7da8680c",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -65,6 +65,13 @@ static const uint64_t DEFAULT_MAX_UPLOAD_TARGET = 0;\n /** Default for blocks only*/\n static const bool DEFAULT_BLOCKSONLY = false;\n \n+static const bool DEFAULT_FORCEDNSSEED = false;\n+static const size_t DEFAULT_MAXRECEIVEBUFFER = 5 * 1000;\n+static const size_t DEFAULT_MAXSENDBUFFER    = 1 * 1000;\n+\n+// NOTE: When adjusting this, update rpcnet:setban's help (\"24h\")\n+static const unsigned int DEFAULT_MISBEHAVING_BANTIME = 60 * 60 * 24;  // Default 24-hour ban\n+\n unsigned int ReceiveFloodSize();\n unsigned int SendBufferSize();\n "
      },
      {
        "sha": "fa6598c1ef9aed92008f732d55f362e13e6d8315",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -40,7 +40,7 @@ static proxyType proxyInfo[NET_MAX];\n static proxyType nameProxy;\n static CCriticalSection cs_proxyInfos;\n int nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;\n-bool fNameLookup = false;\n+bool fNameLookup = true;\n \n static const unsigned char pchIPv4[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff };\n "
      },
      {
        "sha": "46c7f18942540781e2d3e8d00770385dddff1862",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -50,7 +50,7 @@ bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n         if (m < 1 || m > n)\n             return false;\n     } else if (whichType == TX_NULL_DATA &&\n-               (!GetBoolArg(\"-datacarrier\", true) || scriptPubKey.size() > nMaxDatacarrierBytes))\n+               (!fAcceptDatacarrier || scriptPubKey.size() > nMaxDatacarrierBytes))\n           return false;\n \n     return whichType != TX_NONSTANDARD;"
      },
      {
        "sha": "1fa5ef5f5d07c99ab7ca681f444d4e23a75293be",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -660,7 +660,7 @@ int main(int argc, char *argv[])\n     // Subscribe to global signals from core\n     uiInterface.InitMessage.connect(InitMessage);\n \n-    if (GetBoolArg(\"-splash\", true) && !GetBoolArg(\"-min\", false))\n+    if (GetBoolArg(\"-splash\", DEFAULT_SPLASHSCREEN) && !GetBoolArg(\"-min\", false))\n         app.createSplashScreen(networkStyle.data());\n \n     try"
      },
      {
        "sha": "ab63e98d40970ad8e00323ece9b146d390e8b160",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -162,7 +162,7 @@ void Intro::pickDataDirectory()\n     /* 2) Allow QSettings to override default dir */\n     dataDir = settings.value(\"strDataDir\", dataDir).toString();\n \n-    if(!fs::exists(GUIUtil::qstringToBoostPath(dataDir)) || GetBoolArg(\"-choosedatadir\", false))\n+    if(!fs::exists(GUIUtil::qstringToBoostPath(dataDir)) || GetBoolArg(\"-choosedatadir\", DEFAULT_CHOOSE_DATADIR))\n     {\n         /* If current default data directory does not exist, let the user choose one */\n         Intro intro;"
      },
      {
        "sha": "1f54c62b6ee454834e858ce18d9c91a22949c05f",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -145,7 +145,7 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n             int error = X509_STORE_CTX_get_error(store_ctx);\n             // For testing payment requests, we allow self signed root certs!\n             // This option is just shown in the UI options, if -help-debug is enabled.\n-            if (!(error == X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT && GetBoolArg(\"-allowselfsignedrootcertificates\", false))) {\n+            if (!(error == X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT && GetBoolArg(\"-allowselfsignedrootcertificates\", DEFAULT_SELFSIGNED_ROOTCERTS))) {\n                 throw SSLVerifyError(X509_verify_cert_error_string(error));\n             } else {\n                qDebug() << \"PaymentRequestPlus::getMerchant: Allowing self signed root certificate, because -allowselfsignedrootcertificates is true.\";"
      },
      {
        "sha": "c8649ec27d759598065d66de0cc8bb3b11563c2a",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -99,7 +99,7 @@ UniValue getgenerate(const UniValue& params, bool fHelp)\n         throw runtime_error(\n             \"getgenerate\\n\"\n             \"\\nReturn if the server is set to generate coins or not. The default is false.\\n\"\n-            \"It is set with the command line argument -gen (or bitcoin.conf setting gen)\\n\"\n+            \"It is set with the command line argument -gen (or \" + std::string(BITCOIN_CONF_FILENAME) + \" setting gen)\\n\"\n             \"It can also be set with the setgenerate call.\\n\"\n             \"\\nResult\\n\"\n             \"true|false      (boolean) If the server is set to generate coins or not\\n\"\n@@ -109,7 +109,7 @@ UniValue getgenerate(const UniValue& params, bool fHelp)\n         );\n \n     LOCK(cs_main);\n-    return GetBoolArg(\"-gen\", false);\n+    return GetBoolArg(\"-gen\", DEFAULT_GENERATE);\n }\n \n UniValue generate(const UniValue& params, bool fHelp)"
      },
      {
        "sha": "60cf7ae49d5754bac34539cd8865617c6c3931c1",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -16,6 +16,7 @@ using namespace std;\n \n typedef vector<unsigned char> valtype;\n \n+bool fAcceptDatacarrier = true;\n unsigned nMaxDatacarrierBytes = MAX_OP_RETURN_RELAY;\n \n CScriptID::CScriptID(const CScript& in) : uint160(Hash160(in.begin(), in.end())) {}"
      },
      {
        "sha": "140306861affc7998e196021ba2b61502e30378a",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -26,6 +26,7 @@ class CScriptID : public uint160\n };\n \n static const unsigned int MAX_OP_RETURN_RELAY = 83; //! bytes (+1 for OP_RETURN, +2 for the pushdata opcodes)\n+extern bool fAcceptDatacarrier;\n extern unsigned nMaxDatacarrierBytes;\n \n /**"
      },
      {
        "sha": "b6d30b98e9d34346df6071755c56aef0758d5a10",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -99,6 +99,9 @@ namespace boost {\n \n using namespace std;\n \n+const char * const BITCOIN_CONF_FILENAME = \"bitcoin.conf\";\n+const char * const BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n+\n map<string, string> mapArgs;\n map<string, vector<string> > mapMultiArgs;\n bool fDebug = false;\n@@ -107,7 +110,7 @@ bool fPrintToDebugLog = true;\n bool fDaemon = false;\n bool fServer = false;\n string strMiscWarning;\n-bool fLogTimestamps = false;\n+bool fLogTimestamps = true;\n bool fLogTimeMicros = DEFAULT_LOGTIMEMICROS;\n bool fLogIPs = false;\n volatile bool fReopenDebugLog = false;\n@@ -520,7 +523,7 @@ void ClearDatadirCache()\n \n boost::filesystem::path GetConfigFile()\n {\n-    boost::filesystem::path pathConfigFile(GetArg(\"-conf\", \"bitcoin.conf\"));\n+    boost::filesystem::path pathConfigFile(GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n     if (!pathConfigFile.is_complete())\n         pathConfigFile = GetDataDir(false) / pathConfigFile;\n \n@@ -554,7 +557,7 @@ void ReadConfigFile(map<string, string>& mapSettingsRet,\n #ifndef WIN32\n boost::filesystem::path GetPidFile()\n {\n-    boost::filesystem::path pathPidFile(GetArg(\"-pid\", \"bitcoind.pid\"));\n+    boost::filesystem::path pathPidFile(GetArg(\"-pid\", BITCOIN_PID_FILENAME));\n     if (!pathPidFile.is_complete()) pathPidFile = GetDataDir() / pathPidFile;\n     return pathPidFile;\n }"
      },
      {
        "sha": "b9971f74432b246ee8101db2865818d6dbf0658b",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -51,6 +51,13 @@ extern bool fLogIPs;\n extern volatile bool fReopenDebugLog;\n extern CTranslationInterface translationInterface;\n \n+extern const char * const BITCOIN_CONF_FILENAME;\n+extern const char * const BITCOIN_PID_FILENAME;\n+\n+static const bool DEFAULT_SELFSIGNED_ROOTCERTS = false;\n+static const bool DEFAULT_CHOOSE_DATADIR = false;\n+static const bool DEFAULT_SPLASHSCREEN = true;\n+\n /**\n  * Translation function: Call Translate signal on UI interface, which returns a boost::optional result.\n  * If no translation slot is registered, nothing is returned, and simply return the input."
      },
      {
        "sha": "4b9dbebddd5eac4434bc0dc446699dceab770989",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -85,7 +85,7 @@ bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n     LogPrintf(\"CDBEnv::Open: LogDir=%s ErrorFile=%s\\n\", pathLogDir.string(), pathErrorFile.string());\n \n     unsigned int nEnvFlags = 0;\n-    if (GetBoolArg(\"-privdb\", true))\n+    if (GetBoolArg(\"-privdb\", DEFAULT_WALLET_PRIVDB))\n         nEnvFlags |= DB_PRIVATE;\n \n     dbenv->set_lg_dir(pathLogDir.string().c_str());"
      },
      {
        "sha": "7f58d03f08c3a7368aa54ae7c6cb165f1e805a98",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -21,6 +21,7 @@\n #include <db_cxx.h>\n \n static const unsigned int DEFAULT_WALLET_DBLOGSIZE = 100;\n+static const bool DEFAULT_WALLET_PRIVDB = true;\n \n extern unsigned int nWalletDBUpdated;\n "
      },
      {
        "sha": "1aec97756a85f7a92cc7adb824300f17d436492c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -2260,7 +2260,7 @@ bool CWallet::NewKeyPool()\n         if (IsLocked())\n             return false;\n \n-        int64_t nKeys = max(GetArg(\"-keypool\", 100), (int64_t)0);\n+        int64_t nKeys = max(GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t)0);\n         for (int i = 0; i < nKeys; i++)\n         {\n             int64_t nIndex = i+1;\n@@ -2287,7 +2287,7 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n         if (kpSize > 0)\n             nTargetSize = kpSize;\n         else\n-            nTargetSize = max(GetArg(\"-keypool\", 100), (int64_t) 0);\n+            nTargetSize = max(GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n \n         while (setKeyPool.size() < (nTargetSize + 1))\n         {"
      },
      {
        "sha": "2fd3b4cabdfff62ae6401160e21be6e7829653fc",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -37,6 +37,7 @@ extern bool bSpendZeroConfChange;\n extern bool fSendFreeTransactions;\n extern bool fPayAtLeastCustomFee;\n \n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 100;\n //! -paytxfee default\n static const CAmount DEFAULT_TRANSACTION_FEE = 0;\n //! -paytxfee will warn if called with a higher fee than this amount (in satoshis) per KB\n@@ -53,6 +54,7 @@ static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 2;\n static const CAmount nHighTransactionMaxFeeWarning = 100 * nHighTransactionFeeWarning;\n //! Largest (in bytes) free transaction we're willing to create\n static const unsigned int MAX_FREE_TRANSACTION_CREATE_SIZE = 1000;\n+static const bool DEFAULT_WALLETBROADCAST = true;\n \n class CAccountingEntry;\n class CBlockIndex;"
      },
      {
        "sha": "5c08ee6d6cdd03cf3ce5e3aa9dbff970cf0a014c",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -810,7 +810,7 @@ void ThreadFlushWalletDB(const string& strFile)\n     if (fOneThread)\n         return;\n     fOneThread = true;\n-    if (!GetBoolArg(\"-flushwallet\", true))\n+    if (!GetBoolArg(\"-flushwallet\", DEFAULT_FLUSHWALLET))\n         return;\n \n     unsigned int nLastSeen = nWalletDBUpdated;"
      },
      {
        "sha": "77f7958814ef3675e16d832b81c93c01a3fa3a11",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -16,6 +16,8 @@\n #include <utility>\n #include <vector>\n \n+static const bool DEFAULT_FLUSHWALLET = true;\n+\n class CAccount;\n class CAccountingEntry;\n struct CBlockLocator;"
      }
    ]
  },
  {
    "sha": "3307bdb3331732e781c77a88ef7053fe23c78701",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzA3YmRiMzMzMTczMmU3ODFjNzdhODhlZjcwNTNmZTIzYzc4NzAx",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-07-01T04:29:50Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-28T17:47:29Z"
      },
      "message": "Bugfix: Omit wallet-related options from -help when wallet is not supported",
      "tree": {
        "sha": "cfede4ac8fcd53cbe3c827cd50332dfad10e543d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cfede4ac8fcd53cbe3c827cd50332dfad10e543d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3307bdb3331732e781c77a88ef7053fe23c78701",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3307bdb3331732e781c77a88ef7053fe23c78701",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3307bdb3331732e781c77a88ef7053fe23c78701",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3307bdb3331732e781c77a88ef7053fe23c78701/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b966aa836a3bc5bfa1314248258308f0026d41bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b966aa836a3bc5bfa1314248258308f0026d41bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b966aa836a3bc5bfa1314248258308f0026d41bb"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "eccdaca54c5b60e79359ddcad4b0c68f6283e625",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3307bdb3331732e781c77a88ef7053fe23c78701/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3307bdb3331732e781c77a88ef7053fe23c78701/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3307bdb3331732e781c77a88ef7053fe23c78701",
        "patch": "@@ -24,7 +24,6 @@\n #include \"net.h\"\n #include \"policy/policy.h\"\n #include \"rpcserver.h\"\n-#include \"script/sigcache.h\"\n #include \"script/standard.h\"\n #include \"script/sigcache.h\"\n #include \"scheduler.h\"\n@@ -465,7 +464,9 @@ std::string HelpMessage(HelpMessageMode mode)\n     if (showDebug)\n     {\n         strUsage += HelpMessageOpt(\"-printpriority\", strprintf(\"Log transaction priority and fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY));\n+#ifdef ENABLE_WALLET\n         strUsage += HelpMessageOpt(\"-privdb\", strprintf(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\", DEFAULT_WALLET_PRIVDB));\n+#endif\n     }\n     strUsage += HelpMessageOpt(\"-shrinkdebugfile\", _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\"));\n "
      }
    ]
  },
  {
    "sha": "faf93f37fe47fe326fcc4955302a66f24eb13b65",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWY5M2YzN2ZlNDdmZTMyNmZjYzQ5NTUzMDJhNjZmMjRlYjEzYjY1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-09T18:16:38Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-28T18:01:11Z"
      },
      "message": "[trivial] Reuse translation and cleanup DEFAULT_* values\n\n* DEFAULT_DISABLE_SAFEMODE = false\n* Use DEFAULT_* constants for extern bools",
      "tree": {
        "sha": "a1f2ed7942c30233341f58f85cff6eaf2e14cb5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a1f2ed7942c30233341f58f85cff6eaf2e14cb5e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faf93f37fe47fe326fcc4955302a66f24eb13b65",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf93f37fe47fe326fcc4955302a66f24eb13b65",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faf93f37fe47fe326fcc4955302a66f24eb13b65",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf93f37fe47fe326fcc4955302a66f24eb13b65/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3307bdb3331732e781c77a88ef7053fe23c78701",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3307bdb3331732e781c77a88ef7053fe23c78701",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3307bdb3331732e781c77a88ef7053fe23c78701"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 42,
      "deletions": 28
    },
    "files": [
      {
        "sha": "5c1abb54ef9a252368ab22d50acca61c669b8be0",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=faf93f37fe47fe326fcc4955302a66f24eb13b65",
        "patch": "@@ -68,7 +68,7 @@ CWallet* pwalletMain = NULL;\n bool fFeeEstimatesInitialized = false;\n static const bool DEFAULT_PROXYRANDOMIZE = true;\n static const bool DEFAULT_REST_ENABLE = false;\n-static const bool DEFAULT_SAFEMODE = true;\n+static const bool DEFAULT_DISABLE_SAFEMODE = false;\n static const bool DEFAULT_STOPAFTERBLOCKIMPORT = false;\n \n #if ENABLE_ZMQ\n@@ -300,7 +300,7 @@ void OnRPCPreCommand(const CRPCCommand& cmd)\n {\n     // Observe safe mode\n     string strWarning = GetWarnings(\"rpc\");\n-    if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\", !DEFAULT_SAFEMODE) &&\n+    if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\", DEFAULT_DISABLE_SAFEMODE) &&\n         !cmd.okSafeMode)\n         throw JSONRPCError(RPC_FORBIDDEN_BY_SAFE_MODE, string(\"Safe mode: \") + strWarning);\n }\n@@ -354,7 +354,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-bind=<addr>\", _(\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\"));\n     strUsage += HelpMessageOpt(\"-connect=<ip>\", _(\"Connect only to the specified node(s)\"));\n     strUsage += HelpMessageOpt(\"-discover\", _(\"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\"));\n-    strUsage += HelpMessageOpt(\"-dns\", strprintf(_(\"Allow DNS lookups for -addnode, -seednode and -connect (default: %u)\"), fNameLookup));\n+    strUsage += HelpMessageOpt(\"-dns\", _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_NAME_LOOKUP));\n     strUsage += HelpMessageOpt(\"-dnsseed\", _(\"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect)\"));\n     strUsage += HelpMessageOpt(\"-externalip=<ip>\", _(\"Specify your own public address\"));\n     strUsage += HelpMessageOpt(\"-forcednsseed\", strprintf(_(\"Always query for peer addresses via DNS lookup (default: %u)\"), DEFAULT_FORCEDNSSEED));\n@@ -365,7 +365,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-maxsendbuffer=<n>\", strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXSENDBUFFER));\n     strUsage += HelpMessageOpt(\"-onion=<ip:port>\", strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\"));\n     strUsage += HelpMessageOpt(\"-onlynet=<net>\", _(\"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\"));\n-    strUsage += HelpMessageOpt(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), fIsBareMultisigStd));\n+    strUsage += HelpMessageOpt(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), DEFAULT_PERMIT_BAREMULTISIG));\n     strUsage += HelpMessageOpt(\"-peerbloomfilters\", strprintf(_(\"Support filtering of blocks and transaction with bloom filters (default: %u)\"), 1));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-enforcenodebloom\", strprintf(\"Enforce minimum protocol version to limit use of bloom filters (default: %u)\", 0));\n@@ -400,8 +400,8 @@ std::string HelpMessage(HelpMessageMode mode)\n         CURRENCY_UNIT, FormatMoney(payTxFee.GetFeePerK())));\n     strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions on startup\"));\n     strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet.dat on startup\"));\n-    strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), fSendFreeTransactions));\n-    strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), bSpendZeroConfChange));\n+    strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), DEFAULT_SEND_FREE_TRANSACTIONS));\n+    strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), DEFAULT_SPEND_ZEROCONF_CHANGE));\n     strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n     strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees (in %s) to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\"),\n         CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)));\n@@ -424,11 +424,11 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageGroup(_(\"Debugging/Testing options:\"));\n     if (showDebug)\n     {\n-        strUsage += HelpMessageOpt(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", fCheckpointsEnabled));\n+        strUsage += HelpMessageOpt(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", DEFAULT_CHECKPOINTS_ENABLED));\n #ifdef ENABLE_WALLET\n         strUsage += HelpMessageOpt(\"-dblogsize=<n>\", strprintf(\"Flush wallet database activity from memory to disk log every <n> megabytes (default: %u)\", DEFAULT_WALLET_DBLOGSIZE));\n #endif\n-        strUsage += HelpMessageOpt(\"-disablesafemode\", strprintf(\"Disable safemode, override a real safe mode event (default: %u)\", !DEFAULT_SAFEMODE));\n+        strUsage += HelpMessageOpt(\"-disablesafemode\", strprintf(\"Disable safemode, override a real safe mode event (default: %u)\", DEFAULT_DISABLE_SAFEMODE));\n         strUsage += HelpMessageOpt(\"-testsafemode\", strprintf(\"Force safe mode (default: %u)\", DEFAULT_TESTSAFEMODE));\n         strUsage += HelpMessageOpt(\"-dropmessagestest=<n>\", \"Randomly drop 1 of every <n> network messages\");\n         strUsage += HelpMessageOpt(\"-fuzzmessagestest=<n>\", \"Randomly fuzz 1 of every <n> network messages\");\n@@ -449,8 +449,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-gen\", strprintf(_(\"Generate coins (default: %u)\"), DEFAULT_GENERATE));\n     strUsage += HelpMessageOpt(\"-genproclimit=<n>\", strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), DEFAULT_GENERATE_THREADS));\n     strUsage += HelpMessageOpt(\"-help-debug\", _(\"Show all debugging options (usage: --help -help-debug)\"));\n-    strUsage += HelpMessageOpt(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), fLogIPs));\n-    strUsage += HelpMessageOpt(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), fLogTimestamps));\n+    strUsage += HelpMessageOpt(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), DEFAULT_LOGIPS));\n+    strUsage += HelpMessageOpt(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), DEFAULT_LOGTIMESTAMPS));\n     if (showDebug)\n     {\n         strUsage += HelpMessageOpt(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS));\n@@ -475,7 +475,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !Params(CBaseChainParams::TESTNET).RequireStandard()));\n-    strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), fAcceptDatacarrier));\n+    strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), DEFAULT_ACCEPT_DATACARRIER));\n     strUsage += HelpMessageOpt(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY));\n \n     strUsage += HelpMessageGroup(_(\"Block creation options:\"));\n@@ -765,9 +765,9 @@ void InitParameterInteraction()\n void InitLogging()\n {\n     fPrintToConsole = GetBoolArg(\"-printtoconsole\", false);\n-    fLogTimestamps = GetBoolArg(\"-logtimestamps\", fLogTimestamps);\n+    fLogTimestamps = GetBoolArg(\"-logtimestamps\", DEFAULT_LOGTIMESTAMPS);\n     fLogTimeMicros = GetBoolArg(\"-logtimemicros\", DEFAULT_LOGTIMEMICROS);\n-    fLogIPs = GetBoolArg(\"-logips\", fLogIPs);\n+    fLogIPs = GetBoolArg(\"-logips\", DEFAULT_LOGIPS);\n \n     LogPrintf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");\n     LogPrintf(\"Bitcoin version %s (%s)\\n\", FormatFullVersion(), CLIENT_DATE);\n@@ -902,7 +902,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         mempool.setSanityCheck(1.0 / ratio);\n     }\n     fCheckBlockIndex = GetBoolArg(\"-checkblockindex\", chainparams.DefaultConsistencyChecks());\n-    fCheckpointsEnabled = GetBoolArg(\"-checkpoints\", fCheckpointsEnabled);\n+    fCheckpointsEnabled = GetBoolArg(\"-checkpoints\", DEFAULT_CHECKPOINTS_ENABLED);\n \n     // mempool limits\n     int64_t nMempoolSizeMax = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n@@ -1000,14 +1000,14 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n     nTxConfirmTarget = GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n-    bSpendZeroConfChange = GetBoolArg(\"-spendzeroconfchange\", bSpendZeroConfChange);\n-    fSendFreeTransactions = GetBoolArg(\"-sendfreetransactions\", fSendFreeTransactions);\n+    bSpendZeroConfChange = GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);\n+    fSendFreeTransactions = GetBoolArg(\"-sendfreetransactions\", DEFAULT_SEND_FREE_TRANSACTIONS);\n \n     std::string strWalletFile = GetArg(\"-wallet\", \"wallet.dat\");\n #endif // ENABLE_WALLET\n \n-    fIsBareMultisigStd = GetBoolArg(\"-permitbaremultisig\", fIsBareMultisigStd);\n-    fAcceptDatacarrier = GetBoolArg(\"-datacarrier\", fAcceptDatacarrier);\n+    fIsBareMultisigStd = GetBoolArg(\"-permitbaremultisig\", DEFAULT_PERMIT_BAREMULTISIG);\n+    fAcceptDatacarrier = GetBoolArg(\"-datacarrier\", DEFAULT_ACCEPT_DATACARRIER);\n     nMaxDatacarrierBytes = GetArg(\"-datacarriersize\", nMaxDatacarrierBytes);\n \n     fAlerts = GetBoolArg(\"-alerts\", DEFAULT_ALERTS);\n@@ -1193,7 +1193,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // see Step 2: parameter interactions for more information about these\n     fListen = GetBoolArg(\"-listen\", DEFAULT_LISTEN);\n     fDiscover = GetBoolArg(\"-discover\", true);\n-    fNameLookup = GetBoolArg(\"-dns\", fNameLookup);\n+    fNameLookup = GetBoolArg(\"-dns\", DEFAULT_NAME_LOOKUP);\n \n     bool fBound = false;\n     if (fListen) {"
      },
      {
        "sha": "6b6840ce8ca2106d2b7609cce0bb013f896161ff",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=faf93f37fe47fe326fcc4955302a66f24eb13b65",
        "patch": "@@ -66,10 +66,10 @@ bool fReindex = false;\n bool fTxIndex = false;\n bool fHavePruned = false;\n bool fPruneMode = false;\n-bool fIsBareMultisigStd = true;\n+bool fIsBareMultisigStd = DEFAULT_PERMIT_BAREMULTISIG;\n bool fRequireStandard = true;\n bool fCheckBlockIndex = false;\n-bool fCheckpointsEnabled = true;\n+bool fCheckpointsEnabled = DEFAULT_CHECKPOINTS_ENABLED;\n size_t nCoinCacheUsage = 5000 * 300;\n uint64_t nPruneTarget = 0;\n bool fAlerts = DEFAULT_ALERTS;"
      },
      {
        "sha": "dfa2fcb537ee65f2dd6b418e4be0120ea2d35f11",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=faf93f37fe47fe326fcc4955302a66f24eb13b65",
        "patch": "@@ -64,6 +64,7 @@ static const unsigned int MAX_BLOCKFILE_SIZE = 0x8000000; // 128 MiB\n static const unsigned int BLOCKFILE_CHUNK_SIZE = 0x1000000; // 16 MiB\n /** The pre-allocation chunk size for rev?????.dat files (since 0.8) */\n static const unsigned int UNDOFILE_CHUNK_SIZE = 0x100000; // 1 MiB\n+\n /** Maximum number of script-checking threads allowed */\n static const int MAX_SCRIPTCHECK_THREADS = 16;\n /** -par default (number of script-checking threads, 0 = auto) */\n@@ -89,6 +90,9 @@ static const unsigned int MAX_REJECT_MESSAGE_LENGTH = 111;\n static const unsigned int DEFAULT_LIMITFREERELAY = 15;\n static const bool DEFAULT_RELAYPRIORITY = true;\n \n+/** Default for -permitbaremultisig */\n+static const bool DEFAULT_PERMIT_BAREMULTISIG = true;\n+static const bool DEFAULT_CHECKPOINTS_ENABLED = true;\n static const bool DEFAULT_TXINDEX = false;\n static const unsigned int DEFAULT_BANSCORE_THRESHOLD = 100;\n "
      },
      {
        "sha": "05214cb026fe583ddce63be0ee0f44b9da89b2f3",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=faf93f37fe47fe326fcc4955302a66f24eb13b65",
        "patch": "@@ -40,7 +40,7 @@ static proxyType proxyInfo[NET_MAX];\n static proxyType nameProxy;\n static CCriticalSection cs_proxyInfos;\n int nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;\n-bool fNameLookup = true;\n+bool fNameLookup = DEFAULT_NAME_LOOKUP;\n \n static const unsigned char pchIPv4[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff };\n "
      },
      {
        "sha": "9c2df0338e20a974696c3afdb4bedd60355b6f87",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=faf93f37fe47fe326fcc4955302a66f24eb13b65",
        "patch": "@@ -19,8 +19,10 @@\n extern int nConnectTimeout;\n extern bool fNameLookup;\n \n-/** -timeout default */\n+//! -timeout default\n static const int DEFAULT_CONNECT_TIMEOUT = 5000;\n+//! -dns default\n+static const int DEFAULT_NAME_LOOKUP = true;\n \n #ifdef WIN32\n // In MSVC, this is defined as a macro, undefine it to prevent a compile and link error"
      },
      {
        "sha": "4863b96391963d115b7870fd903cc0253044da1f",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=faf93f37fe47fe326fcc4955302a66f24eb13b65",
        "patch": "@@ -16,7 +16,7 @@ using namespace std;\n \n typedef vector<unsigned char> valtype;\n \n-bool fAcceptDatacarrier = true;\n+bool fAcceptDatacarrier = DEFAULT_ACCEPT_DATACARRIER;\n unsigned nMaxDatacarrierBytes = MAX_OP_RETURN_RELAY;\n \n CScriptID::CScriptID(const CScript& in) : uint160(Hash160(in.begin(), in.end())) {}"
      },
      {
        "sha": "2b9fbe78dd1d41c9ccee122b50f0c2183d3422ae",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=faf93f37fe47fe326fcc4955302a66f24eb13b65",
        "patch": "@@ -13,6 +13,8 @@\n \n #include <stdint.h>\n \n+static const bool DEFAULT_ACCEPT_DATACARRIER = true;\n+\n class CKeyID;\n class CScript;\n "
      },
      {
        "sha": "19131817125f00c007c91305aae430e0d643a080",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=faf93f37fe47fe326fcc4955302a66f24eb13b65",
        "patch": "@@ -110,9 +110,9 @@ bool fPrintToDebugLog = true;\n bool fDaemon = false;\n bool fServer = false;\n string strMiscWarning;\n-bool fLogTimestamps = true;\n+bool fLogTimestamps = DEFAULT_LOGTIMESTAMPS;\n bool fLogTimeMicros = DEFAULT_LOGTIMEMICROS;\n-bool fLogIPs = false;\n+bool fLogIPs = DEFAULT_LOGIPS;\n volatile bool fReopenDebugLog = false;\n CTranslationInterface translationInterface;\n "
      },
      {
        "sha": "25ab27a8ed8512d230360e3caf96e79013cf1fd3",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=faf93f37fe47fe326fcc4955302a66f24eb13b65",
        "patch": "@@ -29,6 +29,8 @@\n #include <boost/thread/exceptions.hpp>\n \n static const bool DEFAULT_LOGTIMEMICROS = false;\n+static const bool DEFAULT_LOGIPS        = false;\n+static const bool DEFAULT_LOGTIMESTAMPS = true;\n \n /** Signals for translation. */\n class CTranslationInterface"
      },
      {
        "sha": "69b163ebc90b04f77e5101f6783457358fffe724",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=faf93f37fe47fe326fcc4955302a66f24eb13b65",
        "patch": "@@ -39,8 +39,8 @@ using namespace std;\n CFeeRate payTxFee(DEFAULT_TRANSACTION_FEE);\n CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n unsigned int nTxConfirmTarget = DEFAULT_TX_CONFIRM_TARGET;\n-bool bSpendZeroConfChange = true;\n-bool fSendFreeTransactions = false;\n+bool bSpendZeroConfChange = DEFAULT_SPEND_ZEROCONF_CHANGE;\n+bool fSendFreeTransactions = DEFAULT_SEND_FREE_TRANSACTIONS;\n bool fPayAtLeastCustomFee = true;\n \n /**"
      },
      {
        "sha": "a4199488fc8cdbe4b2db38401052cd1c3e9087c3",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=faf93f37fe47fe326fcc4955302a66f24eb13b65",
        "patch": "@@ -48,6 +48,10 @@ static const CAmount DEFAULT_TRANSACTION_MINFEE = 1000;\n static const CAmount DEFAULT_TRANSACTION_MAXFEE = 0.1 * COIN;\n //! minimum change amount\n static const CAmount MIN_CHANGE = CENT;\n+//! Default for -spendzeroconfchange\n+static const bool DEFAULT_SPEND_ZEROCONF_CHANGE = true;\n+//! Default for -sendfreetransactions\n+static const bool DEFAULT_SEND_FREE_TRANSACTIONS = false;\n //! -txconfirmtarget default\n static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 2;\n //! -maxtxfee will warn if called with a higher fee than this amount (in satoshis)"
      }
    ]
  },
  {
    "sha": "fa41d4c8c6e3f84a9117c0addf51a87f14321e2a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTQxZDRjOGM2ZTNmODRhOTExN2MwYWRkZjUxYTg3ZjE0MzIxZTJh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-09T18:23:46Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-28T18:01:26Z"
      },
      "message": "[qt] Move GUI related HelpMessage() part downstream",
      "tree": {
        "sha": "be57e0918417600e4a758f02338f479946bb2721",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be57e0918417600e4a758f02338f479946bb2721"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faf93f37fe47fe326fcc4955302a66f24eb13b65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf93f37fe47fe326fcc4955302a66f24eb13b65",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faf93f37fe47fe326fcc4955302a66f24eb13b65"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 25,
      "deletions": 22
    },
    "files": [
      {
        "sha": "1c2f3f49d45e7d87979730f88f123677b86316c2",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 17,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa41d4c8c6e3f84a9117c0addf51a87f14321e2a",
        "patch": "@@ -499,23 +499,6 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT));\n     }\n \n-    if (mode == HMM_BITCOIN_QT)\n-    {\n-        strUsage += HelpMessageGroup(_(\"UI Options:\"));\n-        if (showDebug) {\n-            strUsage += HelpMessageOpt(\"-allowselfsignedrootcertificates\", strprintf(\"Allow self signed root certificates (default: %u)\", DEFAULT_SELFSIGNED_ROOTCERTS));\n-        }\n-        strUsage += HelpMessageOpt(\"-choosedatadir\", strprintf(_(\"Choose data directory on startup (default: %u)\"), DEFAULT_CHOOSE_DATADIR));\n-        strUsage += HelpMessageOpt(\"-lang=<lang>\", _(\"Set language, for example \\\"de_DE\\\" (default: system locale)\"));\n-        strUsage += HelpMessageOpt(\"-min\", _(\"Start minimized\"));\n-        strUsage += HelpMessageOpt(\"-rootcertificates=<file>\", _(\"Set SSL root certificates for payment request (default: -system-)\"));\n-        strUsage += HelpMessageOpt(\"-splash\", strprintf(_(\"Show splash screen on startup (default: %u)\"), DEFAULT_SPLASHSCREEN));\n-        strUsage += HelpMessageOpt(\"-resetguisettings\", _(\"Reset all settings changes made over the GUI\"));\n-        if (showDebug) {\n-            strUsage += HelpMessageOpt(\"-uiplatform\", \"Select platform to customize UI for (one of windows, macosx, other; default: platform compiled on)\");\n-        }\n-    }\n-\n     return strUsage;\n }\n "
      },
      {
        "sha": "216f23f1396bb3d6113180d4adb5aa2fac05fadf",
        "filename": "src/qt/guiconstants.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a/src/qt/guiconstants.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a/src/qt/guiconstants.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiconstants.h?ref=fa41d4c8c6e3f84a9117c0addf51a87f14321e2a",
        "patch": "@@ -14,6 +14,8 @@ static const int MAX_PASSPHRASE_SIZE = 1024;\n /* BitcoinGUI -- Size of icons in status bar */\n static const int STATUSBAR_ICONSIZE = 16;\n \n+static const bool DEFAULT_SPLASHSCREEN = true;\n+\n /* Invalid field background style */\n #define STYLE_INVALID \"background:#FF8080\"\n "
      },
      {
        "sha": "1d49922e93ca4592dd93a66150739373f3efa55a",
        "filename": "src/qt/intro.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a/src/qt/intro.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a/src/qt/intro.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.h?ref=fa41d4c8c6e3f84a9117c0addf51a87f14321e2a",
        "patch": "@@ -9,6 +9,8 @@\n #include <QMutex>\n #include <QThread>\n \n+static const bool DEFAULT_CHOOSE_DATADIR = false;\n+\n class FreespaceChecker;\n \n namespace Ui {"
      },
      {
        "sha": "8a7c4c06236dd1b1ac3868c8c1c11dc5cc65f775",
        "filename": "src/qt/paymentrequestplus.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a/src/qt/paymentrequestplus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a/src/qt/paymentrequestplus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.h?ref=fa41d4c8c6e3f84a9117c0addf51a87f14321e2a",
        "patch": "@@ -15,6 +15,8 @@\n #include <QList>\n #include <QString>\n \n+static const bool DEFAULT_SELFSIGNED_ROOTCERTS = false;\n+\n //\n // Wraps dumb protocol buffer paymentRequest\n // with extra methods"
      },
      {
        "sha": "da85ab2b30a569a204fcdc65b0c582ee5118c567",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 1,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=fa41d4c8c6e3f84a9117c0addf51a87f14321e2a",
        "patch": "@@ -8,6 +8,9 @@\n \n #include \"bitcoingui.h\"\n #include \"clientmodel.h\"\n+#include \"guiconstants.h\"\n+#include \"intro.h\"\n+#include \"paymentrequestplus.h\"\n #include \"guiutil.h\"\n \n #include \"clientversion.h\"\n@@ -70,7 +73,22 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n         cursor.insertText(header);\n         cursor.insertBlock();\n \n-        QString coreOptions = QString::fromStdString(HelpMessage(HMM_BITCOIN_QT));\n+        std::string strUsage = HelpMessage(HMM_BITCOIN_QT);\n+        const bool showDebug = GetBoolArg(\"-help-debug\", false);\n+        strUsage += HelpMessageGroup(_(\"UI Options:\"));\n+        if (showDebug) {\n+            strUsage += HelpMessageOpt(\"-allowselfsignedrootcertificates\", strprintf(\"Allow self signed root certificates (default: %u)\", DEFAULT_SELFSIGNED_ROOTCERTS));\n+        }\n+        strUsage += HelpMessageOpt(\"-choosedatadir\", strprintf(_(\"Choose data directory on startup (default: %u)\"), DEFAULT_CHOOSE_DATADIR));\n+        strUsage += HelpMessageOpt(\"-lang=<lang>\", _(\"Set language, for example \\\"de_DE\\\" (default: system locale)\"));\n+        strUsage += HelpMessageOpt(\"-min\", _(\"Start minimized\"));\n+        strUsage += HelpMessageOpt(\"-rootcertificates=<file>\", _(\"Set SSL root certificates for payment request (default: -system-)\"));\n+        strUsage += HelpMessageOpt(\"-splash\", strprintf(_(\"Show splash screen on startup (default: %u)\"), DEFAULT_SPLASHSCREEN));\n+        strUsage += HelpMessageOpt(\"-resetguisettings\", _(\"Reset all settings changes made over the GUI\"));\n+        if (showDebug) {\n+            strUsage += HelpMessageOpt(\"-uiplatform\", \"Select platform to customize UI for (one of windows, macosx, other; default: platform compiled on)\");\n+        }\n+        QString coreOptions = QString::fromStdString(strUsage);\n         text = version + \"\\n\" + header + \"\\n\" + coreOptions;\n \n         QTextTableFormat tf;"
      },
      {
        "sha": "fb154f6660d65f20b6c4c59a41aaa935380e8319",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=fa41d4c8c6e3f84a9117c0addf51a87f14321e2a",
        "patch": "@@ -56,10 +56,6 @@ extern CTranslationInterface translationInterface;\n extern const char * const BITCOIN_CONF_FILENAME;\n extern const char * const BITCOIN_PID_FILENAME;\n \n-static const bool DEFAULT_SELFSIGNED_ROOTCERTS = false;\n-static const bool DEFAULT_CHOOSE_DATADIR = false;\n-static const bool DEFAULT_SPLASHSCREEN = true;\n-\n /**\n  * Translation function: Call Translate signal on UI interface, which returns a boost::optional result.\n  * If no translation slot is registered, nothing is returned, and simply return the input."
      }
    ]
  },
  {
    "sha": "8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDI2Mjg5YzlhN2M3N2M3ZTVjZWNhYWZlYmUwMjMxY2I0ZDY5ZmJl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-28T21:12:33Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-28T21:15:23Z"
      },
      "message": "Merge pull request #6961\n\nfa41d4c [qt] Move GUI related HelpMessage() part downstream (MarcoFalke)\nfaf93f3 [trivial] Reuse translation and cleanup DEFAULT_* values (MarcoFalke)\n3307bdb Bugfix: Omit wallet-related options from -help when wallet is not supported (Luke Dashjr)\nb966aa8 Constrain constant values to a single location in code (Luke Dashjr)",
      "tree": {
        "sha": "be57e0918417600e4a758f02338f479946bb2721",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be57e0918417600e4a758f02338f479946bb2721"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWWhlrAAoJENuhpnN5oakxFEsQANLKZB5I3/1iLI1XOtNBZRUS\nF7OdDascDyRc3tGXrH5AAJy3DSJG5GL0H9y4ACGx2tJk9W1eD3hC0E44/jC/FPJ9\nrFrKtc7cvGFRMcQll3FzlVx3KdCBO7oj3ffirs8CIvcPNk3E2cUp478OXMUNvuAI\nUeFmdt4iMR46preLvSYgSAKI87ooXuUFZC58PlB7YkrYhcyKCUsvhEPU5aRbjs8q\nMOyBX9U2XuQZy9f6nzJ+Noc5cTV1zAF8s8lJ6pmLXePVbb3lzq7r7md/avpjeJew\nPirJDRBwmPTj/WLMsFBJYS7vFpN/HhsRK9SIs7tf0pXWXXVCZ1QW8VR2vp93Ut0E\nNqN+OC9uWiQtvK+9bZna8ViuYJHnOOcgppAMFfMrOcJ4ZB7YlcbHXr2AVitRaAKr\nwhzByNxnZ8Y0HsWpleI740R6gV8RHMSzlmDSFnG74Gf6nH1uodZiMNipFMM9F7qo\njYqY/bfMkiRB1l1KHBnNoueaKWPtwqejRoh1/mv+GDHmIcTdhT+GC8TPFWikPoml\n6Ugx6FpMUAEJyhoJXByeUXnhrzXjYtrRJ93PyyOI2/9OB4scaLXl1/wZRgEq+kAr\nvg9L0EgFsx2aVW1Xc+r7xpvnrg3AyYXf8R9b5BzIQ3khCbEFpwSXwCZ/ze8Ob5cn\ntZLCQRLrcH3F2q+uwo+8\n=Bv40\n-----END PGP SIGNATURE-----",
        "payload": "tree be57e0918417600e4a758f02338f479946bb2721\nparent 92aa7311d64cb1a0109d63d6bf7406c119bf94cd\nparent fa41d4c8c6e3f84a9117c0addf51a87f14321e2a\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1448745153 +0100\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1448745323 +0100\n\nMerge pull request #6961\n\nfa41d4c [qt] Move GUI related HelpMessage() part downstream (MarcoFalke)\nfaf93f3 [trivial] Reuse translation and cleanup DEFAULT_* values (MarcoFalke)\n3307bdb Bugfix: Omit wallet-related options from -help when wallet is not supported (Luke Dashjr)\nb966aa8 Constrain constant values to a single location in code (Luke Dashjr)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "92aa7311d64cb1a0109d63d6bf7406c119bf94cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92aa7311d64cb1a0109d63d6bf7406c119bf94cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92aa7311d64cb1a0109d63d6bf7406c119bf94cd"
      },
      {
        "sha": "fa41d4c8c6e3f84a9117c0addf51a87f14321e2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a"
      }
    ],
    "stats": {
      "total": 256,
      "additions": 157,
      "deletions": 99
    },
    "files": [
      {
        "sha": "58ced1ade94d9acd57ea8203fd88ab92c1e25ce8",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "patch": "@@ -22,17 +22,18 @@\n \n using namespace std;\n \n+static const char DEFAULT_RPCCONNECT[] = \"127.0.0.1\";\n static const int DEFAULT_HTTP_CLIENT_TIMEOUT=900;\n \n std::string HelpMessageCli()\n {\n     string strUsage;\n     strUsage += HelpMessageGroup(_(\"Options:\"));\n     strUsage += HelpMessageOpt(\"-?\", _(\"This help message\"));\n-    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\"));\n+    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), BITCOIN_CONF_FILENAME));\n     strUsage += HelpMessageOpt(\"-datadir=<dir>\", _(\"Specify data directory\"));\n     AppendParamsHelpMessages(strUsage);\n-    strUsage += HelpMessageOpt(\"-rpcconnect=<ip>\", strprintf(_(\"Send commands to node running on <ip> (default: %s)\"), \"127.0.0.1\"));\n+    strUsage += HelpMessageOpt(\"-rpcconnect=<ip>\", strprintf(_(\"Send commands to node running on <ip> (default: %s)\"), DEFAULT_RPCCONNECT));\n     strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\"), 8332, 18332));\n     strUsage += HelpMessageOpt(\"-rpcwait\", _(\"Wait for RPC server to start\"));\n     strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n@@ -141,7 +142,7 @@ static void http_request_done(struct evhttp_request *req, void *ctx)\n \n UniValue CallRPC(const string& strMethod, const UniValue& params)\n {\n-    std::string host = GetArg(\"-rpcconnect\", \"127.0.0.1\");\n+    std::string host = GetArg(\"-rpcconnect\", DEFAULT_RPCCONNECT);\n     int port = GetArg(\"-rpcport\", BaseParams().RPCPort());\n \n     // Create event base"
      },
      {
        "sha": "1c2f3f49d45e7d87979730f88f123677b86316c2",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 64,
        "changes": 118,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "patch": "@@ -66,6 +66,10 @@ using namespace std;\n CWallet* pwalletMain = NULL;\n #endif\n bool fFeeEstimatesInitialized = false;\n+static const bool DEFAULT_PROXYRANDOMIZE = true;\n+static const bool DEFAULT_REST_ENABLE = false;\n+static const bool DEFAULT_DISABLE_SAFEMODE = false;\n+static const bool DEFAULT_STOPAFTERBLOCKIMPORT = false;\n \n #if ENABLE_ZMQ\n static CZMQNotificationInterface* pzmqNotificationInterface = NULL;\n@@ -296,7 +300,7 @@ void OnRPCPreCommand(const CRPCCommand& cmd)\n {\n     // Observe safe mode\n     string strWarning = GetWarnings(\"rpc\");\n-    if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\", false) &&\n+    if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\", DEFAULT_DISABLE_SAFEMODE) &&\n         !cmd.okSafeMode)\n         throw JSONRPCError(RPC_FORBIDDEN_BY_SAFE_MODE, string(\"Safe mode: \") + strWarning);\n }\n@@ -316,7 +320,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-blocksonly\", strprintf(_(\"Whether to operate in a blocks only mode (default: %u)\"), DEFAULT_BLOCKSONLY));\n     strUsage += HelpMessageOpt(\"-checkblocks=<n>\", strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), DEFAULT_CHECKBLOCKS));\n     strUsage += HelpMessageOpt(\"-checklevel=<n>\", strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), DEFAULT_CHECKLEVEL));\n-    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\"));\n+    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), BITCOIN_CONF_FILENAME));\n     if (mode == HMM_BITCOIND)\n     {\n #ifndef WIN32\n@@ -332,7 +336,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-par=<n>\", strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"),\n         -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS));\n #ifndef WIN32\n-    strUsage += HelpMessageOpt(\"-pid=<file>\", strprintf(_(\"Specify pid file (default: %s)\"), \"bitcoind.pid\"));\n+    strUsage += HelpMessageOpt(\"-pid=<file>\", strprintf(_(\"Specify pid file (default: %s)\"), BITCOIN_PID_FILENAME));\n #endif\n     strUsage += HelpMessageOpt(\"-prune=<n>\", strprintf(_(\"Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. \"\n             \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n@@ -341,33 +345,33 @@ std::string HelpMessage(HelpMessageMode mode)\n #ifndef WIN32\n     strUsage += HelpMessageOpt(\"-sysperms\", _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\"));\n #endif\n-    strUsage += HelpMessageOpt(\"-txindex\", strprintf(_(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-txindex\", strprintf(_(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\"), DEFAULT_TXINDEX));\n \n     strUsage += HelpMessageGroup(_(\"Connection options:\"));\n     strUsage += HelpMessageOpt(\"-addnode=<ip>\", _(\"Add a node to connect to and attempt to keep the connection open\"));\n-    strUsage += HelpMessageOpt(\"-banscore=<n>\", strprintf(_(\"Threshold for disconnecting misbehaving peers (default: %u)\"), 100));\n-    strUsage += HelpMessageOpt(\"-bantime=<n>\", strprintf(_(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\"), 86400));\n+    strUsage += HelpMessageOpt(\"-banscore=<n>\", strprintf(_(\"Threshold for disconnecting misbehaving peers (default: %u)\"), DEFAULT_BANSCORE_THRESHOLD));\n+    strUsage += HelpMessageOpt(\"-bantime=<n>\", strprintf(_(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\"), DEFAULT_MISBEHAVING_BANTIME));\n     strUsage += HelpMessageOpt(\"-bind=<addr>\", _(\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\"));\n     strUsage += HelpMessageOpt(\"-connect=<ip>\", _(\"Connect only to the specified node(s)\"));\n     strUsage += HelpMessageOpt(\"-discover\", _(\"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\"));\n-    strUsage += HelpMessageOpt(\"-dns\", _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \" \" + _(\"(default: 1)\"));\n+    strUsage += HelpMessageOpt(\"-dns\", _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_NAME_LOOKUP));\n     strUsage += HelpMessageOpt(\"-dnsseed\", _(\"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect)\"));\n     strUsage += HelpMessageOpt(\"-externalip=<ip>\", _(\"Specify your own public address\"));\n-    strUsage += HelpMessageOpt(\"-forcednsseed\", strprintf(_(\"Always query for peer addresses via DNS lookup (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-forcednsseed\", strprintf(_(\"Always query for peer addresses via DNS lookup (default: %u)\"), DEFAULT_FORCEDNSSEED));\n     strUsage += HelpMessageOpt(\"-listen\", _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\"));\n     strUsage += HelpMessageOpt(\"-listenonion\", strprintf(_(\"Automatically create Tor hidden service (default: %d)\"), DEFAULT_LISTEN_ONION));\n     strUsage += HelpMessageOpt(\"-maxconnections=<n>\", strprintf(_(\"Maintain at most <n> connections to peers (default: %u)\"), DEFAULT_MAX_PEER_CONNECTIONS));\n-    strUsage += HelpMessageOpt(\"-maxreceivebuffer=<n>\", strprintf(_(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"), 5000));\n-    strUsage += HelpMessageOpt(\"-maxsendbuffer=<n>\", strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), 1000));\n+    strUsage += HelpMessageOpt(\"-maxreceivebuffer=<n>\", strprintf(_(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXRECEIVEBUFFER));\n+    strUsage += HelpMessageOpt(\"-maxsendbuffer=<n>\", strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXSENDBUFFER));\n     strUsage += HelpMessageOpt(\"-onion=<ip:port>\", strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\"));\n     strUsage += HelpMessageOpt(\"-onlynet=<net>\", _(\"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\"));\n-    strUsage += HelpMessageOpt(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), DEFAULT_PERMIT_BAREMULTISIG));\n     strUsage += HelpMessageOpt(\"-peerbloomfilters\", strprintf(_(\"Support filtering of blocks and transaction with bloom filters (default: %u)\"), 1));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-enforcenodebloom\", strprintf(\"Enforce minimum protocol version to limit use of bloom filters (default: %u)\", 0));\n-    strUsage += HelpMessageOpt(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), 8333, 18333));\n+    strUsage += HelpMessageOpt(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), Params(CBaseChainParams::MAIN).GetDefaultPort(), Params(CBaseChainParams::TESTNET).GetDefaultPort()));\n     strUsage += HelpMessageOpt(\"-proxy=<ip:port>\", _(\"Connect through SOCKS5 proxy\"));\n-    strUsage += HelpMessageOpt(\"-proxyrandomize\", strprintf(_(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-proxyrandomize\", strprintf(_(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\"), DEFAULT_PROXYRANDOMIZE));\n     strUsage += HelpMessageOpt(\"-seednode=<ip>\", _(\"Connect to a node to retrieve peer addresses, and disconnect\"));\n     strUsage += HelpMessageOpt(\"-timeout=<n>\", strprintf(_(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\"), DEFAULT_CONNECT_TIMEOUT));\n     strUsage += HelpMessageOpt(\"-torcontrol=<ip>:<port>\", strprintf(_(\"Tor control port to use if onion listening enabled (default: %s)\"), DEFAULT_TOR_CONTROL));\n@@ -388,22 +392,22 @@ std::string HelpMessage(HelpMessageMode mode)\n #ifdef ENABLE_WALLET\n     strUsage += HelpMessageGroup(_(\"Wallet options:\"));\n     strUsage += HelpMessageOpt(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"));\n-    strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), 100));\n+    strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), DEFAULT_KEYPOOL_SIZE));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\",\n             CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)));\n     strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in %s/kB) to add to transactions you send (default: %s)\"),\n         CURRENCY_UNIT, FormatMoney(payTxFee.GetFeePerK())));\n     strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions on startup\"));\n     strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet.dat on startup\"));\n-    strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), 0));\n-    strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), DEFAULT_SEND_FREE_TRANSACTIONS));\n+    strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), DEFAULT_SPEND_ZEROCONF_CHANGE));\n     strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n     strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees (in %s) to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\"),\n         CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)));\n     strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format on startup\"));\n     strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), \"wallet.dat\"));\n-    strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), true));\n+    strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_WALLETBROADCAST));\n     strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));\n     strUsage += HelpMessageOpt(\"-zapwallettxes=<mode>\", _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") +\n         \" \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\"));\n@@ -420,18 +424,18 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageGroup(_(\"Debugging/Testing options:\"));\n     if (showDebug)\n     {\n-        strUsage += HelpMessageOpt(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", 1));\n+        strUsage += HelpMessageOpt(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", DEFAULT_CHECKPOINTS_ENABLED));\n #ifdef ENABLE_WALLET\n         strUsage += HelpMessageOpt(\"-dblogsize=<n>\", strprintf(\"Flush wallet database activity from memory to disk log every <n> megabytes (default: %u)\", DEFAULT_WALLET_DBLOGSIZE));\n #endif\n-        strUsage += HelpMessageOpt(\"-disablesafemode\", strprintf(\"Disable safemode, override a real safe mode event (default: %u)\", 0));\n-        strUsage += HelpMessageOpt(\"-testsafemode\", strprintf(\"Force safe mode (default: %u)\", 0));\n+        strUsage += HelpMessageOpt(\"-disablesafemode\", strprintf(\"Disable safemode, override a real safe mode event (default: %u)\", DEFAULT_DISABLE_SAFEMODE));\n+        strUsage += HelpMessageOpt(\"-testsafemode\", strprintf(\"Force safe mode (default: %u)\", DEFAULT_TESTSAFEMODE));\n         strUsage += HelpMessageOpt(\"-dropmessagestest=<n>\", \"Randomly drop 1 of every <n> network messages\");\n         strUsage += HelpMessageOpt(\"-fuzzmessagestest=<n>\", \"Randomly fuzz 1 of every <n> network messages\");\n #ifdef ENABLE_WALLET\n-        strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", 1));\n+        strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", DEFAULT_FLUSHWALLET));\n #endif\n-        strUsage += HelpMessageOpt(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", 0));\n+        strUsage += HelpMessageOpt(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", DEFAULT_STOPAFTERBLOCKIMPORT));\n         strUsage += HelpMessageOpt(\"-limitancestorcount=<n>\", strprintf(\"Do not accept transactions if number of in-mempool ancestors is <n> or more (default: %u)\", DEFAULT_ANCESTOR_LIMIT));\n         strUsage += HelpMessageOpt(\"-limitancestorsize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool ancestors exceeds <n> kilobytes (default: %u)\", DEFAULT_ANCESTOR_SIZE_LIMIT));\n         strUsage += HelpMessageOpt(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT));\n@@ -442,25 +446,27 @@ std::string HelpMessage(HelpMessageMode mode)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n         _(\"If <category> is not supplied or if <category> = 1, output all debugging information.\") + _(\"<category> can be:\") + \" \" + debugCategories + \".\");\n-    strUsage += HelpMessageOpt(\"-gen\", strprintf(_(\"Generate coins (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-gen\", strprintf(_(\"Generate coins (default: %u)\"), DEFAULT_GENERATE));\n     strUsage += HelpMessageOpt(\"-genproclimit=<n>\", strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), DEFAULT_GENERATE_THREADS));\n     strUsage += HelpMessageOpt(\"-help-debug\", _(\"Show all debugging options (usage: --help -help-debug)\"));\n-    strUsage += HelpMessageOpt(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), 0));\n-    strUsage += HelpMessageOpt(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), DEFAULT_LOGIPS));\n+    strUsage += HelpMessageOpt(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), DEFAULT_LOGTIMESTAMPS));\n     if (showDebug)\n     {\n         strUsage += HelpMessageOpt(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS));\n-        strUsage += HelpMessageOpt(\"-limitfreerelay=<n>\", strprintf(\"Continuously rate-limit free transactions to <n>*1000 bytes per minute (default: %u)\", 15));\n-        strUsage += HelpMessageOpt(\"-relaypriority\", strprintf(\"Require high priority for relaying free or low-fee transactions (default: %u)\", 1));\n+        strUsage += HelpMessageOpt(\"-limitfreerelay=<n>\", strprintf(\"Continuously rate-limit free transactions to <n>*1000 bytes per minute (default: %u)\", DEFAULT_LIMITFREERELAY));\n+        strUsage += HelpMessageOpt(\"-relaypriority\", strprintf(\"Require high priority for relaying free or low-fee transactions (default: %u)\", DEFAULT_RELAYPRIORITY));\n         strUsage += HelpMessageOpt(\"-maxsigcachesize=<n>\", strprintf(\"Limit size of signature cache to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE));\n     }\n     strUsage += HelpMessageOpt(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\"),\n         CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)));\n     strUsage += HelpMessageOpt(\"-printtoconsole\", _(\"Send trace/debug info to console instead of debug.log file\"));\n     if (showDebug)\n     {\n-        strUsage += HelpMessageOpt(\"-printpriority\", strprintf(\"Log transaction priority and fee per kB when mining blocks (default: %u)\", 0));\n-        strUsage += HelpMessageOpt(\"-privdb\", strprintf(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\", 1));\n+        strUsage += HelpMessageOpt(\"-printpriority\", strprintf(\"Log transaction priority and fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY));\n+#ifdef ENABLE_WALLET\n+        strUsage += HelpMessageOpt(\"-privdb\", strprintf(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\", DEFAULT_WALLET_PRIVDB));\n+#endif\n     }\n     strUsage += HelpMessageOpt(\"-shrinkdebugfile\", _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\"));\n \n@@ -469,19 +475,19 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !Params(CBaseChainParams::TESTNET).RequireStandard()));\n-    strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), DEFAULT_ACCEPT_DATACARRIER));\n     strUsage += HelpMessageOpt(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY));\n \n     strUsage += HelpMessageGroup(_(\"Block creation options:\"));\n-    strUsage += HelpMessageOpt(\"-blockminsize=<n>\", strprintf(_(\"Set minimum block size in bytes (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-blockminsize=<n>\", strprintf(_(\"Set minimum block size in bytes (default: %u)\"), DEFAULT_BLOCK_MIN_SIZE));\n     strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", strprintf(_(\"Set maximum block size in bytes (default: %d)\"), DEFAULT_BLOCK_MAX_SIZE));\n     strUsage += HelpMessageOpt(\"-blockprioritysize=<n>\", strprintf(_(\"Set maximum size of high-priority/low-fee transactions in bytes (default: %d)\"), DEFAULT_BLOCK_PRIORITY_SIZE));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-blockversion=<n>\", strprintf(\"Override block version to test forking scenarios (default: %d)\", (int)CBlock::CURRENT_VERSION));\n \n     strUsage += HelpMessageGroup(_(\"RPC server options:\"));\n     strUsage += HelpMessageOpt(\"-server\", _(\"Accept command line and JSON-RPC commands\"));\n-    strUsage += HelpMessageOpt(\"-rest\", strprintf(_(\"Accept public REST requests (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-rest\", strprintf(_(\"Accept public REST requests (default: %u)\"), DEFAULT_REST_ENABLE));\n     strUsage += HelpMessageOpt(\"-rpcbind=<addr>\", _(\"Bind to given address to listen for JSON-RPC connections. Use [host]:port notation for IPv6. This option can be specified multiple times (default: bind to all interfaces)\"));\n     strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n@@ -493,23 +499,6 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT));\n     }\n \n-    if (mode == HMM_BITCOIN_QT)\n-    {\n-        strUsage += HelpMessageGroup(_(\"UI Options:\"));\n-        if (showDebug) {\n-            strUsage += HelpMessageOpt(\"-allowselfsignedrootcertificates\", \"Allow self signed root certificates (default: 0)\");\n-        }\n-        strUsage += HelpMessageOpt(\"-choosedatadir\", _(\"Choose data directory on startup (default: 0)\"));\n-        strUsage += HelpMessageOpt(\"-lang=<lang>\", _(\"Set language, for example \\\"de_DE\\\" (default: system locale)\"));\n-        strUsage += HelpMessageOpt(\"-min\", _(\"Start minimized\"));\n-        strUsage += HelpMessageOpt(\"-rootcertificates=<file>\", _(\"Set SSL root certificates for payment request (default: -system-)\"));\n-        strUsage += HelpMessageOpt(\"-splash\", _(\"Show splash screen on startup (default: 1)\"));\n-        strUsage += HelpMessageOpt(\"-resetguisettings\", _(\"Reset all settings changes made over the GUI\"));\n-        if (showDebug) {\n-            strUsage += HelpMessageOpt(\"-uiplatform\", \"Select platform to customize UI for (one of windows, macosx, other; default: platform compiled on)\");\n-        }\n-    }\n-\n     return strUsage;\n }\n \n@@ -643,7 +632,7 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n         }\n     }\n \n-    if (GetBoolArg(\"-stopafterblockimport\", false)) {\n+    if (GetBoolArg(\"-stopafterblockimport\", DEFAULT_STOPAFTERBLOCKIMPORT)) {\n         LogPrintf(\"Stopping after block import\\n\");\n         StartShutdown();\n     }\n@@ -675,7 +664,7 @@ bool AppInitServers(boost::thread_group& threadGroup)\n         return false;\n     if (!StartHTTPRPC())\n         return false;\n-    if (GetBoolArg(\"-rest\", false) && !StartREST())\n+    if (GetBoolArg(\"-rest\", DEFAULT_REST_ENABLE) && !StartREST())\n         return false;\n     if (!StartHTTPServer())\n         return false;\n@@ -759,9 +748,9 @@ void InitParameterInteraction()\n void InitLogging()\n {\n     fPrintToConsole = GetBoolArg(\"-printtoconsole\", false);\n-    fLogTimestamps = GetBoolArg(\"-logtimestamps\", true);\n+    fLogTimestamps = GetBoolArg(\"-logtimestamps\", DEFAULT_LOGTIMESTAMPS);\n     fLogTimeMicros = GetBoolArg(\"-logtimemicros\", DEFAULT_LOGTIMEMICROS);\n-    fLogIPs = GetBoolArg(\"-logips\", false);\n+    fLogIPs = GetBoolArg(\"-logips\", DEFAULT_LOGIPS);\n \n     LogPrintf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");\n     LogPrintf(\"Bitcoin version %s (%s)\\n\", FormatFullVersion(), CLIENT_DATE);\n@@ -835,7 +824,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     // if using block pruning, then disable txindex\n     if (GetArg(\"-prune\", 0)) {\n-        if (GetBoolArg(\"-txindex\", false))\n+        if (GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n #ifdef ENABLE_WALLET\n         if (GetBoolArg(\"-rescan\", false)) {\n@@ -896,7 +885,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         mempool.setSanityCheck(1.0 / ratio);\n     }\n     fCheckBlockIndex = GetBoolArg(\"-checkblockindex\", chainparams.DefaultConsistencyChecks());\n-    fCheckpointsEnabled = GetBoolArg(\"-checkpoints\", true);\n+    fCheckpointsEnabled = GetBoolArg(\"-checkpoints\", DEFAULT_CHECKPOINTS_ENABLED);\n \n     // mempool limits\n     int64_t nMempoolSizeMax = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n@@ -994,13 +983,14 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n     nTxConfirmTarget = GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n-    bSpendZeroConfChange = GetBoolArg(\"-spendzeroconfchange\", true);\n-    fSendFreeTransactions = GetBoolArg(\"-sendfreetransactions\", false);\n+    bSpendZeroConfChange = GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);\n+    fSendFreeTransactions = GetBoolArg(\"-sendfreetransactions\", DEFAULT_SEND_FREE_TRANSACTIONS);\n \n     std::string strWalletFile = GetArg(\"-wallet\", \"wallet.dat\");\n #endif // ENABLE_WALLET\n \n-    fIsBareMultisigStd = GetBoolArg(\"-permitbaremultisig\", true);\n+    fIsBareMultisigStd = GetBoolArg(\"-permitbaremultisig\", DEFAULT_PERMIT_BAREMULTISIG);\n+    fAcceptDatacarrier = GetBoolArg(\"-datacarrier\", DEFAULT_ACCEPT_DATACARRIER);\n     nMaxDatacarrierBytes = GetArg(\"-datacarriersize\", nMaxDatacarrierBytes);\n \n     fAlerts = GetBoolArg(\"-alerts\", DEFAULT_ALERTS);\n@@ -1151,7 +1141,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n \n-    bool proxyRandomize = GetBoolArg(\"-proxyrandomize\", true);\n+    bool proxyRandomize = GetBoolArg(\"-proxyrandomize\", DEFAULT_PROXYRANDOMIZE);\n     // -proxy sets a proxy for all outgoing network traffic\n     // -noproxy (or -proxy=0) as well as the empty string can be used to not set a proxy, this is the default\n     std::string proxyArg = GetArg(\"-proxy\", \"\");\n@@ -1186,7 +1176,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // see Step 2: parameter interactions for more information about these\n     fListen = GetBoolArg(\"-listen\", DEFAULT_LISTEN);\n     fDiscover = GetBoolArg(\"-discover\", true);\n-    fNameLookup = GetBoolArg(\"-dns\", true);\n+    fNameLookup = GetBoolArg(\"-dns\", DEFAULT_NAME_LOOKUP);\n \n     bool fBound = false;\n     if (fListen) {\n@@ -1275,7 +1265,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n     nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greated than nMaxDbcache\n     int64_t nBlockTreeDBCache = nTotalCache / 8;\n-    if (nBlockTreeDBCache > (1 << 21) && !GetBoolArg(\"-txindex\", false))\n+    if (nBlockTreeDBCache > (1 << 21) && !GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n         nBlockTreeDBCache = (1 << 21); // block tree db cache shouldn't be larger than 2 MiB\n     nTotalCache -= nBlockTreeDBCache;\n     int64_t nCoinDBCache = std::min(nTotalCache / 2, (nTotalCache / 4) + (1 << 23)); // use 25%-50% of the remainder for disk cache\n@@ -1331,7 +1321,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 }\n \n                 // Check for changed -txindex state\n-                if (fTxIndex != GetBoolArg(\"-txindex\", false)) {\n+                if (fTxIndex != GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n                     strLoadError = _(\"You need to rebuild the database using -reindex to change -txindex\");\n                     break;\n                 }\n@@ -1557,7 +1547,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 }\n             }\n         }\n-        pwalletMain->SetBroadcastTransactions(GetBoolArg(\"-walletbroadcast\", true));\n+        pwalletMain->SetBroadcastTransactions(GetBoolArg(\"-walletbroadcast\", DEFAULT_WALLETBROADCAST));\n     } // (!fDisableWallet)\n #else // ENABLE_WALLET\n     LogPrintf(\"No wallet support compiled in!\\n\");\n@@ -1631,7 +1621,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     scheduler.scheduleEvery(f, nPowTargetSpacing);\n \n     // Generate coins in the background\n-    GenerateBitcoins(GetBoolArg(\"-gen\", false), GetArg(\"-genproclimit\", DEFAULT_GENERATE_THREADS), chainparams);\n+    GenerateBitcoins(GetBoolArg(\"-gen\", DEFAULT_GENERATE), GetArg(\"-genproclimit\", DEFAULT_GENERATE_THREADS), chainparams);\n \n     // ********************************************************* Step 12: finished\n "
      },
      {
        "sha": "6b6840ce8ca2106d2b7609cce0bb013f896161ff",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "patch": "@@ -66,10 +66,10 @@ bool fReindex = false;\n bool fTxIndex = false;\n bool fHavePruned = false;\n bool fPruneMode = false;\n-bool fIsBareMultisigStd = true;\n+bool fIsBareMultisigStd = DEFAULT_PERMIT_BAREMULTISIG;\n bool fRequireStandard = true;\n bool fCheckBlockIndex = false;\n-bool fCheckpointsEnabled = true;\n+bool fCheckpointsEnabled = DEFAULT_CHECKPOINTS_ENABLED;\n size_t nCoinCacheUsage = 5000 * 300;\n uint64_t nPruneTarget = 0;\n bool fAlerts = DEFAULT_ALERTS;\n@@ -941,7 +941,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CAmount mempoolRejectFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n         if (mempoolRejectFee > 0 && nFees < mempoolRejectFee) {\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nFees, mempoolRejectFee));\n-        } else if (GetBoolArg(\"-relaypriority\", true) && nFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1))) {\n+        } else if (GetBoolArg(\"-relaypriority\", DEFAULT_RELAYPRIORITY) && nFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1))) {\n             // Require that free transactions have sufficient priority to be mined in the next block.\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n         }\n@@ -963,7 +963,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             nLastTime = nNow;\n             // -limitfreerelay unit is thousand-bytes-per-minute\n             // At default rate it would take over a month to fill 1GB\n-            if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n+            if (dFreeCount >= GetArg(\"-limitfreerelay\", DEFAULT_LIMITFREERELAY) * 10 * 1000)\n                 return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"rate limited free transaction\");\n             LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n             dFreeCount += nSize;\n@@ -1436,7 +1436,7 @@ void Misbehaving(NodeId pnode, int howmuch)\n         return;\n \n     state->nMisbehavior += howmuch;\n-    int banscore = GetArg(\"-banscore\", 100);\n+    int banscore = GetArg(\"-banscore\", DEFAULT_BANSCORE_THRESHOLD);\n     if (state->nMisbehavior >= banscore && state->nMisbehavior - howmuch < banscore)\n     {\n         LogPrintf(\"%s: %s (%d -> %d) BAN THRESHOLD EXCEEDED\\n\", __func__, state->name, state->nMisbehavior-howmuch, state->nMisbehavior);\n@@ -3605,7 +3605,7 @@ bool InitBlockIndex(const CChainParams& chainparams)\n         return true;\n \n     // Use the provided setting for -txindex in the new database\n-    fTxIndex = GetBoolArg(\"-txindex\", false);\n+    fTxIndex = GetBoolArg(\"-txindex\", DEFAULT_TXINDEX);\n     pblocktree->WriteFlag(\"txindex\", fTxIndex);\n     LogPrintf(\"Initializing databases...\\n\");\n \n@@ -3936,7 +3936,7 @@ std::string GetWarnings(const std::string& strFor)\n     if (!CLIENT_VERSION_IS_RELEASE)\n         strStatusBar = _(\"This is a pre-release test build - use at your own risk - do not use for mining or merchant applications\");\n \n-    if (GetBoolArg(\"-testsafemode\", false))\n+    if (GetBoolArg(\"-testsafemode\", DEFAULT_TESTSAFEMODE))\n         strStatusBar = strRPC = \"testsafemode enabled\";\n \n     // Misc warnings like out of disk space and clock is wrong"
      },
      {
        "sha": "dfa2fcb537ee65f2dd6b418e4be0120ea2d35f11",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "patch": "@@ -64,6 +64,7 @@ static const unsigned int MAX_BLOCKFILE_SIZE = 0x8000000; // 128 MiB\n static const unsigned int BLOCKFILE_CHUNK_SIZE = 0x1000000; // 16 MiB\n /** The pre-allocation chunk size for rev?????.dat files (since 0.8) */\n static const unsigned int UNDOFILE_CHUNK_SIZE = 0x100000; // 1 MiB\n+\n /** Maximum number of script-checking threads allowed */\n static const int MAX_SCRIPTCHECK_THREADS = 16;\n /** -par default (number of script-checking threads, 0 = auto) */\n@@ -86,6 +87,16 @@ static const unsigned int DATABASE_WRITE_INTERVAL = 60 * 60;\n static const unsigned int DATABASE_FLUSH_INTERVAL = 24 * 60 * 60;\n /** Maximum length of reject messages. */\n static const unsigned int MAX_REJECT_MESSAGE_LENGTH = 111;\n+static const unsigned int DEFAULT_LIMITFREERELAY = 15;\n+static const bool DEFAULT_RELAYPRIORITY = true;\n+\n+/** Default for -permitbaremultisig */\n+static const bool DEFAULT_PERMIT_BAREMULTISIG = true;\n+static const bool DEFAULT_CHECKPOINTS_ENABLED = true;\n+static const bool DEFAULT_TXINDEX = false;\n+static const unsigned int DEFAULT_BANSCORE_THRESHOLD = 100;\n+\n+static const bool DEFAULT_TESTSAFEMODE = false;\n \n struct BlockHasher\n {"
      },
      {
        "sha": "5b711210dbe7929f4d10f7c921f369142897a1cb",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "patch": "@@ -153,7 +153,7 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n         // Priority order to process transactions\n         list<COrphan> vOrphan; // list memory doesn't move\n         map<uint256, vector<COrphan*> > mapDependers;\n-        bool fPrintPriority = GetBoolArg(\"-printpriority\", false);\n+        bool fPrintPriority = GetBoolArg(\"-printpriority\", DEFAULT_PRINTPRIORITY);\n \n         // This vector will be sorted into a priority queue:\n         vector<TxPriority> vecPriority;"
      },
      {
        "sha": "16c8e2a976f13fc9cf690724e8e18924b72693d2",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "patch": "@@ -17,8 +17,11 @@ class CScript;\n class CWallet;\n namespace Consensus { struct Params; };\n \n+static const bool DEFAULT_GENERATE = false;\n static const int DEFAULT_GENERATE_THREADS = 1;\n \n+static const bool DEFAULT_PRINTPRIORITY = false;\n+\n struct CBlockTemplate\n {\n     CBlock block;"
      },
      {
        "sha": "abc7cbb8f41fe397a9c1d34d7d33b2a015f298b9",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "patch": "@@ -521,12 +521,11 @@ void CNode::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t banti\n     banEntry.banReason = banReason;\n     if (bantimeoffset <= 0)\n     {\n-        bantimeoffset = GetArg(\"-bantime\", 60*60*24); // Default 24-hour ban\n+        bantimeoffset = GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME);\n         sinceUnixEpoch = false;\n     }\n     banEntry.nBanUntil = (sinceUnixEpoch ? 0 : GetTime() )+bantimeoffset;\n \n-\n     LOCK(cs_setBanned);\n     if (setBanned[subNet].nBanUntil < banEntry.nBanUntil)\n         setBanned[subNet] = banEntry;\n@@ -1414,7 +1413,7 @@ void ThreadDNSAddressSeed()\n {\n     // goal: only query DNS seeds if address need is acute\n     if ((addrman.size() > 0) &&\n-        (!GetBoolArg(\"-forcednsseed\", false))) {\n+        (!GetBoolArg(\"-forcednsseed\", DEFAULT_FORCEDNSSEED))) {\n         MilliSleep(11 * 1000);\n \n         LOCK(cs_vNodes);\n@@ -2337,8 +2336,8 @@ bool CAddrDB::Read(CAddrMan& addr)\n     return true;\n }\n \n-unsigned int ReceiveFloodSize() { return 1000*GetArg(\"-maxreceivebuffer\", 5*1000); }\n-unsigned int SendBufferSize() { return 1000*GetArg(\"-maxsendbuffer\", 1*1000); }\n+unsigned int ReceiveFloodSize() { return 1000*GetArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER); }\n+unsigned int SendBufferSize() { return 1000*GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER); }\n \n CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNameIn, bool fInboundIn) :\n     ssSend(SER_NETWORK, INIT_PROTO_VERSION),"
      },
      {
        "sha": "3664ce9a7084242fe1e2db865baa1beb7da8680c",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "patch": "@@ -65,6 +65,13 @@ static const uint64_t DEFAULT_MAX_UPLOAD_TARGET = 0;\n /** Default for blocks only*/\n static const bool DEFAULT_BLOCKSONLY = false;\n \n+static const bool DEFAULT_FORCEDNSSEED = false;\n+static const size_t DEFAULT_MAXRECEIVEBUFFER = 5 * 1000;\n+static const size_t DEFAULT_MAXSENDBUFFER    = 1 * 1000;\n+\n+// NOTE: When adjusting this, update rpcnet:setban's help (\"24h\")\n+static const unsigned int DEFAULT_MISBEHAVING_BANTIME = 60 * 60 * 24;  // Default 24-hour ban\n+\n unsigned int ReceiveFloodSize();\n unsigned int SendBufferSize();\n "
      },
      {
        "sha": "05214cb026fe583ddce63be0ee0f44b9da89b2f3",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "patch": "@@ -40,7 +40,7 @@ static proxyType proxyInfo[NET_MAX];\n static proxyType nameProxy;\n static CCriticalSection cs_proxyInfos;\n int nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;\n-bool fNameLookup = false;\n+bool fNameLookup = DEFAULT_NAME_LOOKUP;\n \n static const unsigned char pchIPv4[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff };\n "
      },
      {
        "sha": "9c2df0338e20a974696c3afdb4bedd60355b6f87",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "patch": "@@ -19,8 +19,10 @@\n extern int nConnectTimeout;\n extern bool fNameLookup;\n \n-/** -timeout default */\n+//! -timeout default\n static const int DEFAULT_CONNECT_TIMEOUT = 5000;\n+//! -dns default\n+static const int DEFAULT_NAME_LOOKUP = true;\n \n #ifdef WIN32\n // In MSVC, this is defined as a macro, undefine it to prevent a compile and link error"
      },
      {
        "sha": "46c7f18942540781e2d3e8d00770385dddff1862",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "patch": "@@ -50,7 +50,7 @@ bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n         if (m < 1 || m > n)\n             return false;\n     } else if (whichType == TX_NULL_DATA &&\n-               (!GetBoolArg(\"-datacarrier\", true) || scriptPubKey.size() > nMaxDatacarrierBytes))\n+               (!fAcceptDatacarrier || scriptPubKey.size() > nMaxDatacarrierBytes))\n           return false;\n \n     return whichType != TX_NONSTANDARD;"
      },
      {
        "sha": "1fa5ef5f5d07c99ab7ca681f444d4e23a75293be",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "patch": "@@ -660,7 +660,7 @@ int main(int argc, char *argv[])\n     // Subscribe to global signals from core\n     uiInterface.InitMessage.connect(InitMessage);\n \n-    if (GetBoolArg(\"-splash\", true) && !GetBoolArg(\"-min\", false))\n+    if (GetBoolArg(\"-splash\", DEFAULT_SPLASHSCREEN) && !GetBoolArg(\"-min\", false))\n         app.createSplashScreen(networkStyle.data());\n \n     try"
      },
      {
        "sha": "216f23f1396bb3d6113180d4adb5aa2fac05fadf",
        "filename": "src/qt/guiconstants.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/qt/guiconstants.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/qt/guiconstants.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiconstants.h?ref=8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "patch": "@@ -14,6 +14,8 @@ static const int MAX_PASSPHRASE_SIZE = 1024;\n /* BitcoinGUI -- Size of icons in status bar */\n static const int STATUSBAR_ICONSIZE = 16;\n \n+static const bool DEFAULT_SPLASHSCREEN = true;\n+\n /* Invalid field background style */\n #define STYLE_INVALID \"background:#FF8080\"\n "
      },
      {
        "sha": "ab63e98d40970ad8e00323ece9b146d390e8b160",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "patch": "@@ -162,7 +162,7 @@ void Intro::pickDataDirectory()\n     /* 2) Allow QSettings to override default dir */\n     dataDir = settings.value(\"strDataDir\", dataDir).toString();\n \n-    if(!fs::exists(GUIUtil::qstringToBoostPath(dataDir)) || GetBoolArg(\"-choosedatadir\", false))\n+    if(!fs::exists(GUIUtil::qstringToBoostPath(dataDir)) || GetBoolArg(\"-choosedatadir\", DEFAULT_CHOOSE_DATADIR))\n     {\n         /* If current default data directory does not exist, let the user choose one */\n         Intro intro;"
      },
      {
        "sha": "1d49922e93ca4592dd93a66150739373f3efa55a",
        "filename": "src/qt/intro.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/qt/intro.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/qt/intro.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.h?ref=8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "patch": "@@ -9,6 +9,8 @@\n #include <QMutex>\n #include <QThread>\n \n+static const bool DEFAULT_CHOOSE_DATADIR = false;\n+\n class FreespaceChecker;\n \n namespace Ui {"
      },
      {
        "sha": "1f54c62b6ee454834e858ce18d9c91a22949c05f",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "patch": "@@ -145,7 +145,7 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n             int error = X509_STORE_CTX_get_error(store_ctx);\n             // For testing payment requests, we allow self signed root certs!\n             // This option is just shown in the UI options, if -help-debug is enabled.\n-            if (!(error == X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT && GetBoolArg(\"-allowselfsignedrootcertificates\", false))) {\n+            if (!(error == X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT && GetBoolArg(\"-allowselfsignedrootcertificates\", DEFAULT_SELFSIGNED_ROOTCERTS))) {\n                 throw SSLVerifyError(X509_verify_cert_error_string(error));\n             } else {\n                qDebug() << \"PaymentRequestPlus::getMerchant: Allowing self signed root certificate, because -allowselfsignedrootcertificates is true.\";"
      },
      {
        "sha": "8a7c4c06236dd1b1ac3868c8c1c11dc5cc65f775",
        "filename": "src/qt/paymentrequestplus.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/qt/paymentrequestplus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/qt/paymentrequestplus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.h?ref=8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "patch": "@@ -15,6 +15,8 @@\n #include <QList>\n #include <QString>\n \n+static const bool DEFAULT_SELFSIGNED_ROOTCERTS = false;\n+\n //\n // Wraps dumb protocol buffer paymentRequest\n // with extra methods"
      },
      {
        "sha": "da85ab2b30a569a204fcdc65b0c582ee5118c567",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 1,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "patch": "@@ -8,6 +8,9 @@\n \n #include \"bitcoingui.h\"\n #include \"clientmodel.h\"\n+#include \"guiconstants.h\"\n+#include \"intro.h\"\n+#include \"paymentrequestplus.h\"\n #include \"guiutil.h\"\n \n #include \"clientversion.h\"\n@@ -70,7 +73,22 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n         cursor.insertText(header);\n         cursor.insertBlock();\n \n-        QString coreOptions = QString::fromStdString(HelpMessage(HMM_BITCOIN_QT));\n+        std::string strUsage = HelpMessage(HMM_BITCOIN_QT);\n+        const bool showDebug = GetBoolArg(\"-help-debug\", false);\n+        strUsage += HelpMessageGroup(_(\"UI Options:\"));\n+        if (showDebug) {\n+            strUsage += HelpMessageOpt(\"-allowselfsignedrootcertificates\", strprintf(\"Allow self signed root certificates (default: %u)\", DEFAULT_SELFSIGNED_ROOTCERTS));\n+        }\n+        strUsage += HelpMessageOpt(\"-choosedatadir\", strprintf(_(\"Choose data directory on startup (default: %u)\"), DEFAULT_CHOOSE_DATADIR));\n+        strUsage += HelpMessageOpt(\"-lang=<lang>\", _(\"Set language, for example \\\"de_DE\\\" (default: system locale)\"));\n+        strUsage += HelpMessageOpt(\"-min\", _(\"Start minimized\"));\n+        strUsage += HelpMessageOpt(\"-rootcertificates=<file>\", _(\"Set SSL root certificates for payment request (default: -system-)\"));\n+        strUsage += HelpMessageOpt(\"-splash\", strprintf(_(\"Show splash screen on startup (default: %u)\"), DEFAULT_SPLASHSCREEN));\n+        strUsage += HelpMessageOpt(\"-resetguisettings\", _(\"Reset all settings changes made over the GUI\"));\n+        if (showDebug) {\n+            strUsage += HelpMessageOpt(\"-uiplatform\", \"Select platform to customize UI for (one of windows, macosx, other; default: platform compiled on)\");\n+        }\n+        QString coreOptions = QString::fromStdString(strUsage);\n         text = version + \"\\n\" + header + \"\\n\" + coreOptions;\n \n         QTextTableFormat tf;"
      },
      {
        "sha": "c8649ec27d759598065d66de0cc8bb3b11563c2a",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "patch": "@@ -99,7 +99,7 @@ UniValue getgenerate(const UniValue& params, bool fHelp)\n         throw runtime_error(\n             \"getgenerate\\n\"\n             \"\\nReturn if the server is set to generate coins or not. The default is false.\\n\"\n-            \"It is set with the command line argument -gen (or bitcoin.conf setting gen)\\n\"\n+            \"It is set with the command line argument -gen (or \" + std::string(BITCOIN_CONF_FILENAME) + \" setting gen)\\n\"\n             \"It can also be set with the setgenerate call.\\n\"\n             \"\\nResult\\n\"\n             \"true|false      (boolean) If the server is set to generate coins or not\\n\"\n@@ -109,7 +109,7 @@ UniValue getgenerate(const UniValue& params, bool fHelp)\n         );\n \n     LOCK(cs_main);\n-    return GetBoolArg(\"-gen\", false);\n+    return GetBoolArg(\"-gen\", DEFAULT_GENERATE);\n }\n \n UniValue generate(const UniValue& params, bool fHelp)"
      },
      {
        "sha": "4863b96391963d115b7870fd903cc0253044da1f",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "patch": "@@ -16,6 +16,7 @@ using namespace std;\n \n typedef vector<unsigned char> valtype;\n \n+bool fAcceptDatacarrier = DEFAULT_ACCEPT_DATACARRIER;\n unsigned nMaxDatacarrierBytes = MAX_OP_RETURN_RELAY;\n \n CScriptID::CScriptID(const CScript& in) : uint160(Hash160(in.begin(), in.end())) {}"
      },
      {
        "sha": "2b9fbe78dd1d41c9ccee122b50f0c2183d3422ae",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "patch": "@@ -13,6 +13,8 @@\n \n #include <stdint.h>\n \n+static const bool DEFAULT_ACCEPT_DATACARRIER = true;\n+\n class CKeyID;\n class CScript;\n \n@@ -26,6 +28,7 @@ class CScriptID : public uint160\n };\n \n static const unsigned int MAX_OP_RETURN_RELAY = 83; //! bytes (+1 for OP_RETURN, +2 for the pushdata opcodes)\n+extern bool fAcceptDatacarrier;\n extern unsigned nMaxDatacarrierBytes;\n \n /**"
      },
      {
        "sha": "19131817125f00c007c91305aae430e0d643a080",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "patch": "@@ -99,6 +99,9 @@ namespace boost {\n \n using namespace std;\n \n+const char * const BITCOIN_CONF_FILENAME = \"bitcoin.conf\";\n+const char * const BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n+\n map<string, string> mapArgs;\n map<string, vector<string> > mapMultiArgs;\n bool fDebug = false;\n@@ -107,9 +110,9 @@ bool fPrintToDebugLog = true;\n bool fDaemon = false;\n bool fServer = false;\n string strMiscWarning;\n-bool fLogTimestamps = false;\n+bool fLogTimestamps = DEFAULT_LOGTIMESTAMPS;\n bool fLogTimeMicros = DEFAULT_LOGTIMEMICROS;\n-bool fLogIPs = false;\n+bool fLogIPs = DEFAULT_LOGIPS;\n volatile bool fReopenDebugLog = false;\n CTranslationInterface translationInterface;\n \n@@ -520,7 +523,7 @@ void ClearDatadirCache()\n \n boost::filesystem::path GetConfigFile()\n {\n-    boost::filesystem::path pathConfigFile(GetArg(\"-conf\", \"bitcoin.conf\"));\n+    boost::filesystem::path pathConfigFile(GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n     if (!pathConfigFile.is_complete())\n         pathConfigFile = GetDataDir(false) / pathConfigFile;\n \n@@ -554,7 +557,7 @@ void ReadConfigFile(map<string, string>& mapSettingsRet,\n #ifndef WIN32\n boost::filesystem::path GetPidFile()\n {\n-    boost::filesystem::path pathPidFile(GetArg(\"-pid\", \"bitcoind.pid\"));\n+    boost::filesystem::path pathPidFile(GetArg(\"-pid\", BITCOIN_PID_FILENAME));\n     if (!pathPidFile.is_complete()) pathPidFile = GetDataDir() / pathPidFile;\n     return pathPidFile;\n }"
      },
      {
        "sha": "fb154f6660d65f20b6c4c59a41aaa935380e8319",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "patch": "@@ -29,6 +29,8 @@\n #include <boost/thread/exceptions.hpp>\n \n static const bool DEFAULT_LOGTIMEMICROS = false;\n+static const bool DEFAULT_LOGIPS        = false;\n+static const bool DEFAULT_LOGTIMESTAMPS = true;\n \n /** Signals for translation. */\n class CTranslationInterface\n@@ -51,6 +53,9 @@ extern bool fLogIPs;\n extern volatile bool fReopenDebugLog;\n extern CTranslationInterface translationInterface;\n \n+extern const char * const BITCOIN_CONF_FILENAME;\n+extern const char * const BITCOIN_PID_FILENAME;\n+\n /**\n  * Translation function: Call Translate signal on UI interface, which returns a boost::optional result.\n  * If no translation slot is registered, nothing is returned, and simply return the input."
      },
      {
        "sha": "4b9dbebddd5eac4434bc0dc446699dceab770989",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "patch": "@@ -85,7 +85,7 @@ bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n     LogPrintf(\"CDBEnv::Open: LogDir=%s ErrorFile=%s\\n\", pathLogDir.string(), pathErrorFile.string());\n \n     unsigned int nEnvFlags = 0;\n-    if (GetBoolArg(\"-privdb\", true))\n+    if (GetBoolArg(\"-privdb\", DEFAULT_WALLET_PRIVDB))\n         nEnvFlags |= DB_PRIVATE;\n \n     dbenv->set_lg_dir(pathLogDir.string().c_str());"
      },
      {
        "sha": "7f58d03f08c3a7368aa54ae7c6cb165f1e805a98",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "patch": "@@ -21,6 +21,7 @@\n #include <db_cxx.h>\n \n static const unsigned int DEFAULT_WALLET_DBLOGSIZE = 100;\n+static const bool DEFAULT_WALLET_PRIVDB = true;\n \n extern unsigned int nWalletDBUpdated;\n "
      },
      {
        "sha": "69b163ebc90b04f77e5101f6783457358fffe724",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "patch": "@@ -39,8 +39,8 @@ using namespace std;\n CFeeRate payTxFee(DEFAULT_TRANSACTION_FEE);\n CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n unsigned int nTxConfirmTarget = DEFAULT_TX_CONFIRM_TARGET;\n-bool bSpendZeroConfChange = true;\n-bool fSendFreeTransactions = false;\n+bool bSpendZeroConfChange = DEFAULT_SPEND_ZEROCONF_CHANGE;\n+bool fSendFreeTransactions = DEFAULT_SEND_FREE_TRANSACTIONS;\n bool fPayAtLeastCustomFee = true;\n \n /**\n@@ -2260,7 +2260,7 @@ bool CWallet::NewKeyPool()\n         if (IsLocked())\n             return false;\n \n-        int64_t nKeys = max(GetArg(\"-keypool\", 100), (int64_t)0);\n+        int64_t nKeys = max(GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t)0);\n         for (int i = 0; i < nKeys; i++)\n         {\n             int64_t nIndex = i+1;\n@@ -2287,7 +2287,7 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n         if (kpSize > 0)\n             nTargetSize = kpSize;\n         else\n-            nTargetSize = max(GetArg(\"-keypool\", 100), (int64_t) 0);\n+            nTargetSize = max(GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n \n         while (setKeyPool.size() < (nTargetSize + 1))\n         {"
      },
      {
        "sha": "a4199488fc8cdbe4b2db38401052cd1c3e9087c3",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "patch": "@@ -37,6 +37,7 @@ extern bool bSpendZeroConfChange;\n extern bool fSendFreeTransactions;\n extern bool fPayAtLeastCustomFee;\n \n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 100;\n //! -paytxfee default\n static const CAmount DEFAULT_TRANSACTION_FEE = 0;\n //! -paytxfee will warn if called with a higher fee than this amount (in satoshis) per KB\n@@ -47,12 +48,17 @@ static const CAmount DEFAULT_TRANSACTION_MINFEE = 1000;\n static const CAmount DEFAULT_TRANSACTION_MAXFEE = 0.1 * COIN;\n //! minimum change amount\n static const CAmount MIN_CHANGE = CENT;\n+//! Default for -spendzeroconfchange\n+static const bool DEFAULT_SPEND_ZEROCONF_CHANGE = true;\n+//! Default for -sendfreetransactions\n+static const bool DEFAULT_SEND_FREE_TRANSACTIONS = false;\n //! -txconfirmtarget default\n static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 2;\n //! -maxtxfee will warn if called with a higher fee than this amount (in satoshis)\n static const CAmount nHighTransactionMaxFeeWarning = 100 * nHighTransactionFeeWarning;\n //! Largest (in bytes) free transaction we're willing to create\n static const unsigned int MAX_FREE_TRANSACTION_CREATE_SIZE = 1000;\n+static const bool DEFAULT_WALLETBROADCAST = true;\n \n class CAccountingEntry;\n class CBlockIndex;"
      },
      {
        "sha": "5c08ee6d6cdd03cf3ce5e3aa9dbff970cf0a014c",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "patch": "@@ -810,7 +810,7 @@ void ThreadFlushWalletDB(const string& strFile)\n     if (fOneThread)\n         return;\n     fOneThread = true;\n-    if (!GetBoolArg(\"-flushwallet\", true))\n+    if (!GetBoolArg(\"-flushwallet\", DEFAULT_FLUSHWALLET))\n         return;\n \n     unsigned int nLastSeen = nWalletDBUpdated;"
      },
      {
        "sha": "77f7958814ef3675e16d832b81c93c01a3fa3a11",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "patch": "@@ -16,6 +16,8 @@\n #include <utility>\n #include <vector>\n \n+static const bool DEFAULT_FLUSHWALLET = true;\n+\n class CAccount;\n class CAccountingEntry;\n struct CBlockLocator;"
      }
    ]
  },
  {
    "sha": "fa4b6272695d282638f07191e634aaeeb91a6be7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTRiNjI3MjY5NWQyODI2MzhmMDcxOTFlNjM0YWFlZWI5MWE2YmU3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-28T21:28:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-28T21:26:50Z"
      },
      "message": "Move blocksonly parameter interaction to InitParameterInteraction()",
      "tree": {
        "sha": "3912995820ee6521c265f850d87461e2c49936eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3912995820ee6521c265f850d87461e2c49936eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa4b6272695d282638f07191e634aaeeb91a6be7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4b6272695d282638f07191e634aaeeb91a6be7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4b6272695d282638f07191e634aaeeb91a6be7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4b6272695d282638f07191e634aaeeb91a6be7/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 1,
      "deletions": 11
    },
    "files": [
      {
        "sha": "191c2ed8ae4577279a42d5cd0432c39b1283ba5e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 11,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4b6272695d282638f07191e634aaeeb91a6be7/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4b6272695d282638f07191e634aaeeb91a6be7/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa4b6272695d282638f07191e634aaeeb91a6be7",
        "patch": "@@ -820,7 +820,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // ********************************************************* Step 2: parameter interactions\n     const CChainParams& chainparams = Params();\n \n-\n+    // also see: InitParameterInteraction()\n \n     // if using block pruning, then disable txindex\n     if (GetArg(\"-prune\", 0)) {\n@@ -833,16 +833,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n #endif\n     }\n \n-    // disable walletbroadcast and whitelistalwaysrelay in blocksonly mode\n-    if (GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY)) {\n-        if (SoftSetBoolArg(\"-whitelistalwaysrelay\", false))\n-            LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -whitelistalwaysrelay=0\\n\", __func__);\n-#ifdef ENABLE_WALLET\n-        if (SoftSetBoolArg(\"-walletbroadcast\", false))\n-            LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -walletbroadcast=0\\n\", __func__);\n-#endif\n-    }\n-\n     // Make sure enough file descriptors are available\n     int nBind = std::max((int)mapArgs.count(\"-bind\") + (int)mapArgs.count(\"-whitebind\"), 1);\n     int nUserMaxConnections = GetArg(\"-maxconnections\", DEFAULT_MAX_PEER_CONNECTIONS);"
      }
    ]
  },
  {
    "sha": "61457c29d735b77182b5fbd45e86d7e3db343857",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTQ1N2MyOWQ3MzViNzcxODJiNWZiZDQ1ZTg2ZDdlM2RiMzQzODU3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-28T21:24:10Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-28T21:27:38Z"
      },
      "message": "Merge pull request #6508\n\neece63f Switch blocks to a constant-space Merkle root/branch algorithm. (Pieter Wuille)\nee60e56 Add merkle.{h,cpp}, generic merkle root/branch algorithm (Pieter Wuille)",
      "tree": {
        "sha": "12ef26e009f3bab19c7b4d9f8e643db2ccd8a5f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/12ef26e009f3bab19c7b4d9f8e643db2ccd8a5f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/61457c29d735b77182b5fbd45e86d7e3db343857",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWWhxKAAoJENuhpnN5oakxciQQAIbqBaDGE8Igfj1S5aBFLZJ/\nGWvdnKgWlESL4GjK/hOMk/X4MLuXxVDlMCiaIfJRBohnXitmgd4TlrRpJIrOdzZp\n4wolB9Ed93fPnXTIY1YCUKuVYhG8vVAtjLy79JuIQMQl2McZ/zy2HWBwUf+ti3QY\nUmhUDvWgmdpS5aGSEHCwXuF3JfK1u+zGwtcikaVuYIaY8jl8evVxVe9yWc4UhopO\nAc/f7s1HytSHkxepIqbVXiRWiVJhx3o+m6q3+vOk9nnJPdThmv7lh5FdNAilGkyc\nsARPYpb/9ABs5RbjHx1gLzYSkEFSYfMDL2ippTFmidf3erPyaf/hqABiVb2kWZOm\nNXRLGL7/eDf0caeOuZOcOvtRTYsNkXVcsRNosSaUIev2wUmFTlS6f3AOPYDLl24M\neLpp3tFD+izMxYbHIOR6SXSXrL6yRExkQRPld2NK11eVbRAuBOrU2zCYvgiMGZB9\nS7uIf6CFv4NOQh7OjQN5maXUD60ynl/AHjXvCyIb5kGkjqgDfSNJ2CDWsKC6Qx6p\nPWSRMLYs8+xR8r/5hjGH8xtiJvcUy/UoU/exRaCNxC3G7hTZYh4OzzukiNe8rvhO\nNxHQUs65RQfupWCYRAIv5x5CVyPsidtuoKCAZB11nhfaO1Ak0NAWq7mAS9pFty0f\nOuOrxTYgIs9/Z8IoJLCF\n=oO/G\n-----END PGP SIGNATURE-----",
        "payload": "tree 12ef26e009f3bab19c7b4d9f8e643db2ccd8a5f0\nparent 8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe\nparent eece63fa72566068cb2a1bf85c95a72a5ba59bc9\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1448745850 +0100\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1448746058 +0100\n\nMerge pull request #6508\n\neece63f Switch blocks to a constant-space Merkle root/branch algorithm. (Pieter Wuille)\nee60e56 Add merkle.{h,cpp}, generic merkle root/branch algorithm (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61457c29d735b77182b5fbd45e86d7e3db343857",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/61457c29d735b77182b5fbd45e86d7e3db343857",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61457c29d735b77182b5fbd45e86d7e3db343857/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe"
      },
      {
        "sha": "eece63fa72566068cb2a1bf85c95a72a5ba59bc9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eece63fa72566068cb2a1bf85c95a72a5ba59bc9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eece63fa72566068cb2a1bf85c95a72a5ba59bc9"
      }
    ],
    "stats": {
      "total": 428,
      "additions": 353,
      "deletions": 75
    },
    "files": [
      {
        "sha": "40f2e19af03f67f8e23c255d2a800626e304a483",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61457c29d735b77182b5fbd45e86d7e3db343857/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61457c29d735b77182b5fbd45e86d7e3db343857/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=61457c29d735b77182b5fbd45e86d7e3db343857",
        "patch": "@@ -100,6 +100,7 @@ BITCOIN_CORE_H = \\\n   compat/sanity.h \\\n   compressor.h \\\n   consensus/consensus.h \\\n+  consensus/merkle.h \\\n   consensus/params.h \\\n   consensus/validation.h \\\n   core_io.h \\\n@@ -268,6 +269,7 @@ libbitcoin_common_a_SOURCES = \\\n   chainparams.cpp \\\n   coins.cpp \\\n   compressor.cpp \\\n+  consensus/merkle.cpp \\\n   core_read.cpp \\\n   core_write.cpp \\\n   hash.cpp \\"
      },
      {
        "sha": "c377183ad53ab143a7f5fbe5aee42dd061914f33",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61457c29d735b77182b5fbd45e86d7e3db343857/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61457c29d735b77182b5fbd45e86d7e3db343857/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=61457c29d735b77182b5fbd45e86d7e3db343857",
        "patch": "@@ -57,6 +57,7 @@ BITCOIN_TESTS =\\\n   test/dbwrapper_tests.cpp \\\n   test/main_tests.cpp \\\n   test/mempool_tests.cpp \\\n+  test/merkle_tests.cpp \\\n   test/miner_tests.cpp \\\n   test/mruset_tests.cpp \\\n   test/multisig_tests.cpp \\"
      },
      {
        "sha": "a46866a2be8fd8bb1c0573aba241293fd96fb12d",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61457c29d735b77182b5fbd45e86d7e3db343857/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61457c29d735b77182b5fbd45e86d7e3db343857/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=61457c29d735b77182b5fbd45e86d7e3db343857",
        "patch": "@@ -4,6 +4,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"chainparams.h\"\n+#include \"consensus/merkle.h\"\n \n #include \"tinyformat.h\"\n #include \"util.h\"\n@@ -32,7 +33,7 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesi\n     genesis.nVersion = nVersion;\n     genesis.vtx.push_back(txNew);\n     genesis.hashPrevBlock.SetNull();\n-    genesis.hashMerkleRoot = genesis.ComputeMerkleRoot();\n+    genesis.hashMerkleRoot = BlockMerkleRoot(genesis);\n     return genesis;\n }\n "
      },
      {
        "sha": "9a8afa8a33f3b2043dac36a009ae46c5254883a0",
        "filename": "src/consensus/merkle.cpp",
        "status": "added",
        "additions": 172,
        "deletions": 0,
        "changes": 172,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61457c29d735b77182b5fbd45e86d7e3db343857/src/consensus/merkle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61457c29d735b77182b5fbd45e86d7e3db343857/src/consensus/merkle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/merkle.cpp?ref=61457c29d735b77182b5fbd45e86d7e3db343857",
        "patch": "@@ -0,0 +1,172 @@\n+#include \"merkle.h\"\n+#include \"hash.h\"\n+#include \"utilstrencodings.h\"\n+\n+/*     WARNING! If you're reading this because you're learning about crypto\n+       and/or designing a new system that will use merkle trees, keep in mind\n+       that the following merkle tree algorithm has a serious flaw related to\n+       duplicate txids, resulting in a vulnerability (CVE-2012-2459).\n+\n+       The reason is that if the number of hashes in the list at a given time\n+       is odd, the last one is duplicated before computing the next level (which\n+       is unusual in Merkle trees). This results in certain sequences of\n+       transactions leading to the same merkle root. For example, these two\n+       trees:\n+\n+                    A               A\n+                  /  \\            /   \\\n+                B     C         B       C\n+               / \\    |        / \\     / \\\n+              D   E   F       D   E   F   F\n+             / \\ / \\ / \\     / \\ / \\ / \\ / \\\n+             1 2 3 4 5 6     1 2 3 4 5 6 5 6\n+\n+       for transaction lists [1,2,3,4,5,6] and [1,2,3,4,5,6,5,6] (where 5 and\n+       6 are repeated) result in the same root hash A (because the hash of both\n+       of (F) and (F,F) is C).\n+\n+       The vulnerability results from being able to send a block with such a\n+       transaction list, with the same merkle root, and the same block hash as\n+       the original without duplication, resulting in failed validation. If the\n+       receiving node proceeds to mark that block as permanently invalid\n+       however, it will fail to accept further unmodified (and thus potentially\n+       valid) versions of the same block. We defend against this by detecting\n+       the case where we would hash two identical hashes at the end of the list\n+       together, and treating that identically to the block having an invalid\n+       merkle root. Assuming no double-SHA256 collisions, this will detect all\n+       known ways of changing the transactions without affecting the merkle\n+       root.\n+*/\n+\n+/* This implements a constant-space merkle root/path calculator, limited to 2^32 leaves. */\n+static void MerkleComputation(const std::vector<uint256>& leaves, uint256* proot, bool* pmutated, uint32_t branchpos, std::vector<uint256>* pbranch) {\n+    if (pbranch) pbranch->clear();\n+    if (leaves.size() == 0) {\n+        if (pmutated) *pmutated = false;\n+        if (proot) *proot = uint256();\n+        return;\n+    }\n+    bool mutated = false;\n+    // count is the number of leaves processed so far.\n+    uint32_t count = 0;\n+    // inner is an array of eagerly computed subtree hashes, indexed by tree\n+    // level (0 being the leaves).\n+    // For example, when count is 25 (11001 in binary), inner[4] is the hash of\n+    // the first 16 leaves, inner[3] of the next 8 leaves, and inner[0] equal to\n+    // the last leaf. The other inner entries are undefined.\n+    uint256 inner[32];\n+    // Which position in inner is a hash that depends on the matching leaf.\n+    int matchlevel = -1;\n+    // First process all leaves into 'inner' values.\n+    while (count < leaves.size()) {\n+        uint256 h = leaves[count];\n+        bool matchh = count == branchpos;\n+        count++;\n+        int level;\n+        // For each of the lower bits in count that are 0, do 1 step. Each\n+        // corresponds to an inner value that existed before processing the\n+        // current leaf, and each needs a hash to combine it.\n+        for (level = 0; !(count & (((uint32_t)1) << level)); level++) {\n+            if (pbranch) {\n+                if (matchh) {\n+                    pbranch->push_back(inner[level]);\n+                } else if (matchlevel == level) {\n+                    pbranch->push_back(h);\n+                    matchh = true;\n+                }\n+            }\n+            mutated |= (inner[level] == h);\n+            CHash256().Write(inner[level].begin(), 32).Write(h.begin(), 32).Finalize(h.begin());\n+        }\n+        // Store the resulting hash at inner position level.\n+        inner[level] = h;\n+        if (matchh) {\n+            matchlevel = level;\n+        }\n+    }\n+    // Do a final 'sweep' over the rightmost branch of the tree to process\n+    // odd levels, and reduce everything to a single top value.\n+    // Level is the level (counted from the bottom) up to which we've sweeped.\n+    int level = 0;\n+    // As long as bit number level in count is zero, skip it. It means there\n+    // is nothing left at this level.\n+    while (!(count & (((uint32_t)1) << level))) {\n+        level++;\n+    }\n+    uint256 h = inner[level];\n+    bool matchh = matchlevel == level;\n+    while (count != (((uint32_t)1) << level)) {\n+        // If we reach this point, h is an inner value that is not the top.\n+        // We combine it with itself (Bitcoin's special rule for odd levels in\n+        // the tree) to produce a higher level one.\n+        if (pbranch && matchh) {\n+            pbranch->push_back(h);\n+        }\n+        CHash256().Write(h.begin(), 32).Write(h.begin(), 32).Finalize(h.begin());\n+        // Increment count to the value it would have if two entries at this\n+        // level had existed.\n+        count += (((uint32_t)1) << level);\n+        level++;\n+        // And propagate the result upwards accordingly.\n+        while (!(count & (((uint32_t)1) << level))) {\n+            if (pbranch) {\n+                if (matchh) {\n+                    pbranch->push_back(inner[level]);\n+                } else if (matchlevel == level) {\n+                    pbranch->push_back(h);\n+                    matchh = true;\n+                }\n+            }\n+            CHash256().Write(inner[level].begin(), 32).Write(h.begin(), 32).Finalize(h.begin());\n+            level++;\n+        }\n+    }\n+    // Return result.\n+    if (pmutated) *pmutated = mutated;\n+    if (proot) *proot = h;\n+}\n+\n+uint256 ComputeMerkleRoot(const std::vector<uint256>& leaves, bool* mutated) {\n+    uint256 hash;\n+    MerkleComputation(leaves, &hash, mutated, -1, NULL);\n+    return hash;\n+}\n+\n+std::vector<uint256> ComputeMerkleBranch(const std::vector<uint256>& leaves, uint32_t position) {\n+    std::vector<uint256> ret;\n+    MerkleComputation(leaves, NULL, NULL, position, &ret);\n+    return ret;\n+}\n+\n+uint256 ComputeMerkleRootFromBranch(const uint256& leaf, const std::vector<uint256>& vMerkleBranch, uint32_t nIndex) {\n+    uint256 hash = leaf;\n+    for (std::vector<uint256>::const_iterator it = vMerkleBranch.begin(); it != vMerkleBranch.end(); ++it) {\n+        if (nIndex & 1) {\n+            hash = Hash(BEGIN(*it), END(*it), BEGIN(hash), END(hash));\n+        } else {\n+            hash = Hash(BEGIN(hash), END(hash), BEGIN(*it), END(*it));\n+        }\n+        nIndex >>= 1;\n+    }\n+    return hash;\n+}\n+\n+uint256 BlockMerkleRoot(const CBlock& block, bool* mutated)\n+{\n+    std::vector<uint256> leaves;\n+    leaves.resize(block.vtx.size());\n+    for (size_t s = 0; s < block.vtx.size(); s++) {\n+        leaves[s] = block.vtx[s].GetHash();\n+    }\n+    return ComputeMerkleRoot(leaves, mutated);\n+}\n+\n+std::vector<uint256> BlockMerkleBranch(const CBlock& block, uint32_t position)\n+{\n+    std::vector<uint256> leaves;\n+    leaves.resize(block.vtx.size());\n+    for (size_t s = 0; s < block.vtx.size(); s++) {\n+        leaves[s] = block.vtx[s].GetHash();\n+    }\n+    return ComputeMerkleBranch(leaves, position);\n+}"
      },
      {
        "sha": "6ef59745ac6538ebbcee0d94228650c2fb133a77",
        "filename": "src/consensus/merkle.h",
        "status": "added",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61457c29d735b77182b5fbd45e86d7e3db343857/src/consensus/merkle.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61457c29d735b77182b5fbd45e86d7e3db343857/src/consensus/merkle.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/merkle.h?ref=61457c29d735b77182b5fbd45e86d7e3db343857",
        "patch": "@@ -0,0 +1,32 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_MERKLE\n+#define BITCOIN_MERKLE\n+\n+#include <stdint.h>\n+#include <vector>\n+\n+#include \"primitives/transaction.h\"\n+#include \"primitives/block.h\"\n+#include \"uint256.h\"\n+\n+uint256 ComputeMerkleRoot(const std::vector<uint256>& leaves, bool* mutated = NULL);\n+std::vector<uint256> ComputeMerkleBranch(const std::vector<uint256>& leaves, uint32_t position);\n+uint256 ComputeMerkleRootFromBranch(const uint256& leaf, const std::vector<uint256>& branch, uint32_t position);\n+\n+/*\n+ * Compute the Merkle root of the transactions in a block.\n+ * *mutated is set to true if a duplicated subtree was found.\n+ */\n+uint256 BlockMerkleRoot(const CBlock& block, bool* mutated = NULL);\n+\n+/*\n+ * Compute the Merkle branch for the tree of transactions in a block, for a\n+ * given position.\n+ * This can be verified using ComputeMerkleRootFromBranch.\n+ */\n+std::vector<uint256> BlockMerkleBranch(const CBlock& block, uint32_t position);\n+\n+#endif"
      },
      {
        "sha": "1003dd8c36be1f7a0f8a2867a870e61d6e90e8aa",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61457c29d735b77182b5fbd45e86d7e3db343857/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61457c29d735b77182b5fbd45e86d7e3db343857/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=61457c29d735b77182b5fbd45e86d7e3db343857",
        "patch": "@@ -12,6 +12,7 @@\n #include \"checkpoints.h\"\n #include \"checkqueue.h\"\n #include \"consensus/consensus.h\"\n+#include \"consensus/merkle.h\"\n #include \"consensus/validation.h\"\n #include \"hash.h\"\n #include \"init.h\"\n@@ -2876,7 +2877,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     // Check the merkle root.\n     if (fCheckMerkleRoot) {\n         bool mutated;\n-        uint256 hashMerkleRoot2 = block.ComputeMerkleRoot(&mutated);\n+        uint256 hashMerkleRoot2 = BlockMerkleRoot(block, &mutated);\n         if (block.hashMerkleRoot != hashMerkleRoot2)\n             return state.DoS(100, error(\"CheckBlock(): hashMerkleRoot mismatch\"),\n                              REJECT_INVALID, \"bad-txnmrklroot\", true);"
      },
      {
        "sha": "27a1fbcf803bfaaaea2c795615ecca6cf4b4b87e",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61457c29d735b77182b5fbd45e86d7e3db343857/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61457c29d735b77182b5fbd45e86d7e3db343857/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=61457c29d735b77182b5fbd45e86d7e3db343857",
        "patch": "@@ -10,6 +10,7 @@\n #include \"chainparams.h\"\n #include \"coins.h\"\n #include \"consensus/consensus.h\"\n+#include \"consensus/merkle.h\"\n #include \"consensus/validation.h\"\n #include \"hash.h\"\n #include \"main.h\"\n@@ -373,7 +374,7 @@ void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned\n     assert(txCoinbase.vin[0].scriptSig.size() <= 100);\n \n     pblock->vtx[0] = txCoinbase;\n-    pblock->hashMerkleRoot = pblock->ComputeMerkleRoot();\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n }\n \n //////////////////////////////////////////////////////////////////////////////"
      },
      {
        "sha": "7280c18f7766a74f4ef45432f7499ea9952b00c7",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 63,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61457c29d735b77182b5fbd45e86d7e3db343857/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61457c29d735b77182b5fbd45e86d7e3db343857/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=61457c29d735b77182b5fbd45e86d7e3db343857",
        "patch": "@@ -15,69 +15,6 @@ uint256 CBlockHeader::GetHash() const\n     return SerializeHash(*this);\n }\n \n-uint256 CBlock::ComputeMerkleRoot(bool* fMutated) const\n-{\n-    /* WARNING! If you're reading this because you're learning about crypto\n-       and/or designing a new system that will use merkle trees, keep in mind\n-       that the following merkle tree algorithm has a serious flaw related to\n-       duplicate txids, resulting in a vulnerability (CVE-2012-2459).\n-\n-       The reason is that if the number of hashes in the list at a given time\n-       is odd, the last one is duplicated before computing the next level (which\n-       is unusual in Merkle trees). This results in certain sequences of\n-       transactions leading to the same merkle root. For example, these two\n-       trees:\n-\n-                    A               A\n-                  /  \\            /   \\\n-                B     C         B       C\n-               / \\    |        / \\     / \\\n-              D   E   F       D   E   F   F\n-             / \\ / \\ / \\     / \\ / \\ / \\ / \\\n-             1 2 3 4 5 6     1 2 3 4 5 6 5 6\n-\n-       for transaction lists [1,2,3,4,5,6] and [1,2,3,4,5,6,5,6] (where 5 and\n-       6 are repeated) result in the same root hash A (because the hash of both\n-       of (F) and (F,F) is C).\n-\n-       The vulnerability results from being able to send a block with such a\n-       transaction list, with the same merkle root, and the same block hash as\n-       the original without duplication, resulting in failed validation. If the\n-       receiving node proceeds to mark that block as permanently invalid\n-       however, it will fail to accept further unmodified (and thus potentially\n-       valid) versions of the same block. We defend against this by detecting\n-       the case where we would hash two identical hashes at the end of the list\n-       together, and treating that identically to the block having an invalid\n-       merkle root. Assuming no double-SHA256 collisions, this will detect all\n-       known ways of changing the transactions without affecting the merkle\n-       root.\n-    */\n-    std::vector<uint256> vMerkleTree;\n-    vMerkleTree.reserve(vtx.size() * 2 + 16); // Safe upper bound for the number of total nodes.\n-    for (std::vector<CTransaction>::const_iterator it(vtx.begin()); it != vtx.end(); ++it)\n-        vMerkleTree.push_back(it->GetHash());\n-    int j = 0;\n-    bool mutated = false;\n-    for (int nSize = vtx.size(); nSize > 1; nSize = (nSize + 1) / 2)\n-    {\n-        for (int i = 0; i < nSize; i += 2)\n-        {\n-            int i2 = std::min(i+1, nSize-1);\n-            if (i2 == i + 1 && i2 + 1 == nSize && vMerkleTree[j+i] == vMerkleTree[j+i2]) {\n-                // Two identical hashes at the end of the list at a particular level.\n-                mutated = true;\n-            }\n-            vMerkleTree.push_back(Hash(BEGIN(vMerkleTree[j+i]),  END(vMerkleTree[j+i]),\n-                                       BEGIN(vMerkleTree[j+i2]), END(vMerkleTree[j+i2])));\n-        }\n-        j += nSize;\n-    }\n-    if (fMutated) {\n-        *fMutated = mutated;\n-    }\n-    return (vMerkleTree.empty() ? uint256() : vMerkleTree.back());\n-}\n-\n std::string CBlock::ToString() const\n {\n     std::stringstream s;"
      },
      {
        "sha": "5c017d436f50ec5e7ac95d965fc2a3964b152d8b",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61457c29d735b77182b5fbd45e86d7e3db343857/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61457c29d735b77182b5fbd45e86d7e3db343857/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=61457c29d735b77182b5fbd45e86d7e3db343857",
        "patch": "@@ -118,12 +118,6 @@ class CBlock : public CBlockHeader\n         return block;\n     }\n \n-    // Build the merkle tree for this block and return the merkle root.\n-    // If non-NULL, *mutated is set to whether mutation was detected in the merkle\n-    // tree (a duplication of transactions in the block leading to an identical\n-    // merkle root).\n-    uint256 ComputeMerkleRoot(bool* mutated = NULL) const;\n-\n     std::string ToString() const;\n };\n "
      },
      {
        "sha": "2b92d239e90ec204df7115b5dd0eca3a5d45d82c",
        "filename": "src/test/main_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61457c29d735b77182b5fbd45e86d7e3db343857/src/test/main_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61457c29d735b77182b5fbd45e86d7e3db343857/src/test/main_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/main_tests.cpp?ref=61457c29d735b77182b5fbd45e86d7e3db343857",
        "patch": "@@ -72,5 +72,4 @@ BOOST_AUTO_TEST_CASE(test_combiner_all)\n     Test.disconnect(&ReturnTrue);\n     BOOST_CHECK(Test());\n }\n-\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "1e31f2e6791fa853dfcb249bee5d139f2ee24306",
        "filename": "src/test/merkle_tests.cpp",
        "status": "added",
        "additions": 136,
        "deletions": 0,
        "changes": 136,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61457c29d735b77182b5fbd45e86d7e3db343857/src/test/merkle_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61457c29d735b77182b5fbd45e86d7e3db343857/src/test/merkle_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/merkle_tests.cpp?ref=61457c29d735b77182b5fbd45e86d7e3db343857",
        "patch": "@@ -0,0 +1,136 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"consensus/merkle.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"random.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(merkle_tests, TestingSetup)\n+\n+// Older version of the merkle root computation code, for comparison.\n+static uint256 BlockBuildMerkleTree(const CBlock& block, bool* fMutated, std::vector<uint256>& vMerkleTree)\n+{\n+    vMerkleTree.clear();\n+    vMerkleTree.reserve(block.vtx.size() * 2 + 16); // Safe upper bound for the number of total nodes.\n+    for (std::vector<CTransaction>::const_iterator it(block.vtx.begin()); it != block.vtx.end(); ++it)\n+        vMerkleTree.push_back(it->GetHash());\n+    int j = 0;\n+    bool mutated = false;\n+    for (int nSize = block.vtx.size(); nSize > 1; nSize = (nSize + 1) / 2)\n+    {\n+        for (int i = 0; i < nSize; i += 2)\n+        {\n+            int i2 = std::min(i+1, nSize-1);\n+            if (i2 == i + 1 && i2 + 1 == nSize && vMerkleTree[j+i] == vMerkleTree[j+i2]) {\n+                // Two identical hashes at the end of the list at a particular level.\n+                mutated = true;\n+            }\n+            vMerkleTree.push_back(Hash(vMerkleTree[j+i].begin(), vMerkleTree[j+i].end(),\n+                                       vMerkleTree[j+i2].begin(), vMerkleTree[j+i2].end()));\n+        }\n+        j += nSize;\n+    }\n+    if (fMutated) {\n+        *fMutated = mutated;\n+    }\n+    return (vMerkleTree.empty() ? uint256() : vMerkleTree.back());\n+}\n+\n+// Older version of the merkle branch computation code, for comparison.\n+static std::vector<uint256> BlockGetMerkleBranch(const CBlock& block, const std::vector<uint256>& vMerkleTree, int nIndex)\n+{\n+    std::vector<uint256> vMerkleBranch;\n+    int j = 0;\n+    for (int nSize = block.vtx.size(); nSize > 1; nSize = (nSize + 1) / 2)\n+    {\n+        int i = std::min(nIndex^1, nSize-1);\n+        vMerkleBranch.push_back(vMerkleTree[j+i]);\n+        nIndex >>= 1;\n+        j += nSize;\n+    }\n+    return vMerkleBranch;\n+}\n+\n+static inline int ctz(uint32_t i) {\n+    if (i == 0) return 0;\n+    int j = 0;\n+    while (!(i & 1)) {\n+        j++;\n+        i >>= 1;\n+    }\n+    return j;\n+}\n+\n+BOOST_AUTO_TEST_CASE(merkle_test)\n+{\n+    for (int i = 0; i < 32; i++) {\n+        // Try 32 block sizes: all sizes from 0 to 16 inclusive, and then 15 random sizes.\n+        int ntx = (i <= 16) ? i : 17 + (insecure_rand() % 4000);\n+        // Try up to 3 mutations.\n+        for (int mutate = 0; mutate <= 3; mutate++) {\n+            int duplicate1 = mutate >= 1 ? 1 << ctz(ntx) : 0; // The last how many transactions to duplicate first.\n+            if (duplicate1 >= ntx) break; // Duplication of the entire tree results in a different root (it adds a level).\n+            int ntx1 = ntx + duplicate1; // The resulting number of transactions after the first duplication.\n+            int duplicate2 = mutate >= 2 ? 1 << ctz(ntx1) : 0; // Likewise for the second mutation.\n+            if (duplicate2 >= ntx1) break;\n+            int ntx2 = ntx1 + duplicate2;\n+            int duplicate3 = mutate >= 3 ? 1 << ctz(ntx2) : 0; // And for the the third mutation.\n+            if (duplicate3 >= ntx2) break;\n+            int ntx3 = ntx2 + duplicate3;\n+            // Build a block with ntx different transactions.\n+            CBlock block;\n+            block.vtx.resize(ntx);\n+            for (int j = 0; j < ntx; j++) {\n+                CMutableTransaction mtx;\n+                mtx.nLockTime = j;\n+                block.vtx[j] = mtx;\n+            }\n+            // Compute the root of the block before mutating it.\n+            bool unmutatedMutated = false;\n+            uint256 unmutatedRoot = BlockMerkleRoot(block, &unmutatedMutated);\n+            BOOST_CHECK(unmutatedMutated == false);\n+            // Optionally mutate by duplicating the last transactions, resulting in the same merkle root.\n+            block.vtx.resize(ntx3);\n+            for (int j = 0; j < duplicate1; j++) {\n+                block.vtx[ntx + j] = block.vtx[ntx + j - duplicate1];\n+            }\n+            for (int j = 0; j < duplicate2; j++) {\n+                block.vtx[ntx1 + j] = block.vtx[ntx1 + j - duplicate2];\n+            }\n+            for (int j = 0; j < duplicate3; j++) {\n+                block.vtx[ntx2 + j] = block.vtx[ntx2 + j - duplicate3];\n+            }\n+            // Compute the merkle root and merkle tree using the old mechanism.\n+            bool oldMutated = false;\n+            std::vector<uint256> merkleTree;\n+            uint256 oldRoot = BlockBuildMerkleTree(block, &oldMutated, merkleTree);\n+            // Compute the merkle root using the new mechanism.\n+            bool newMutated = false;\n+            uint256 newRoot = BlockMerkleRoot(block, &newMutated);\n+            BOOST_CHECK(oldRoot == newRoot);\n+            BOOST_CHECK(newRoot == unmutatedRoot);\n+            BOOST_CHECK((newRoot == uint256()) == (ntx == 0));\n+            BOOST_CHECK(oldMutated == newMutated);\n+            BOOST_CHECK(newMutated == !!mutate);\n+            // If no mutation was done (once for every ntx value), try up to 16 branches.\n+            if (mutate == 0) {\n+                for (int loop = 0; loop < std::min(ntx, 16); loop++) {\n+                    // If ntx <= 16, try all branches. Otherise, try 16 random ones.\n+                    int mtx = loop;\n+                    if (ntx > 16) {\n+                        mtx = insecure_rand() % ntx;\n+                    }\n+                    std::vector<uint256> newBranch = BlockMerkleBranch(block, mtx);\n+                    std::vector<uint256> oldBranch = BlockGetMerkleBranch(block, merkleTree, mtx);\n+                    BOOST_CHECK(oldBranch == newBranch);\n+                    BOOST_CHECK(ComputeMerkleRootFromBranch(block.vtx[mtx].GetHash(), newBranch, mtx) == oldRoot);\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "1d7c9f65c096c486f96893b679099875d6a7582f",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61457c29d735b77182b5fbd45e86d7e3db343857/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61457c29d735b77182b5fbd45e86d7e3db343857/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=61457c29d735b77182b5fbd45e86d7e3db343857",
        "patch": "@@ -5,6 +5,7 @@\n #include \"chainparams.h\"\n #include \"coins.h\"\n #include \"consensus/consensus.h\"\n+#include \"consensus/merkle.h\"\n #include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"miner.h\"\n@@ -93,7 +94,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         pblock->vtx[0] = CTransaction(txCoinbase);\n         if (txFirst.size() < 2)\n             txFirst.push_back(new CTransaction(pblock->vtx[0]));\n-        pblock->hashMerkleRoot = pblock->ComputeMerkleRoot();\n+        pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n         pblock->nNonce = blockinfo[i].nonce;\n         CValidationState state;\n         BOOST_CHECK(ProcessNewBlock(state, chainparams, NULL, pblock, true, NULL));"
      },
      {
        "sha": "0d7fb2bc35cdfd2db5ed3345f1bbb87007091769",
        "filename": "src/test/pmt_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61457c29d735b77182b5fbd45e86d7e3db343857/src/test/pmt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61457c29d735b77182b5fbd45e86d7e3db343857/src/test/pmt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pmt_tests.cpp?ref=61457c29d735b77182b5fbd45e86d7e3db343857",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"consensus/merkle.h\"\n #include \"merkleblock.h\"\n #include \"serialize.h\"\n #include \"streams.h\"\n@@ -48,7 +49,7 @@ BOOST_AUTO_TEST_CASE(pmt_test1)\n         }\n \n         // calculate actual merkle root and height\n-        uint256 merkleRoot1 = block.ComputeMerkleRoot();\n+        uint256 merkleRoot1 = BlockMerkleRoot(block);\n         std::vector<uint256> vTxid(nTx, uint256());\n         for (unsigned int j=0; j<nTx; j++)\n             vTxid[j] = block.vtx[j].GetHash();"
      }
    ]
  },
  {
    "sha": "a6cbc02b6b279dc0ed11e007ba84a6b09bdcd740",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNmNiYzAyYjZiMjc5ZGMwZWQxMWUwMDdiYTg0YTZiMDliZGNkNzQw",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-11-28T21:44:55Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-11-28T21:48:17Z"
      },
      "message": "Bugfix: Default -uiplatform is not actually the platform this build was compiled on",
      "tree": {
        "sha": "459ca7d6484b6673909e624b13206f6f5f71728b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/459ca7d6484b6673909e624b13206f6f5f71728b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6cbc02b6b279dc0ed11e007ba84a6b09bdcd740",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6cbc02b6b279dc0ed11e007ba84a6b09bdcd740",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6cbc02b6b279dc0ed11e007ba84a6b09bdcd740",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6cbc02b6b279dc0ed11e007ba84a6b09bdcd740/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa41d4c8c6e3f84a9117c0addf51a87f14321e2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 14,
      "deletions": 9
    },
    "files": [
      {
        "sha": "6e6330d2a4e38720aa450fc55d2f42db28f8b57d",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6cbc02b6b279dc0ed11e007ba84a6b09bdcd740/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6cbc02b6b279dc0ed11e007ba84a6b09bdcd740/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=a6cbc02b6b279dc0ed11e007ba84a6b09bdcd740",
        "patch": "@@ -311,14 +311,8 @@ BitcoinApplication::BitcoinApplication(int &argc, char **argv):\n     // UI per-platform customization\n     // This must be done inside the BitcoinApplication constructor, or after it, because\n     // PlatformStyle::instantiate requires a QApplication\n-#if defined(Q_OS_MAC)\n-    std::string platformName = \"macosx\";\n-#elif defined(Q_OS_WIN)\n-    std::string platformName = \"windows\";\n-#else\n-    std::string platformName = \"other\";\n-#endif\n-    platformName = GetArg(\"-uiplatform\", platformName);\n+    std::string platformName;\n+    platformName = GetArg(\"-uiplatform\", BitcoinGUI::DEFAULT_UIPLATFORM);\n     platformStyle = PlatformStyle::instantiate(QString::fromStdString(platformName));\n     if (!platformStyle) // Fall back to \"other\" if specified name not found\n         platformStyle = PlatformStyle::instantiate(\"other\");"
      },
      {
        "sha": "853a29e6619aaf1d893ebb17a8d748b1d653fc1b",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6cbc02b6b279dc0ed11e007ba84a6b09bdcd740/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6cbc02b6b279dc0ed11e007ba84a6b09bdcd740/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=a6cbc02b6b279dc0ed11e007ba84a6b09bdcd740",
        "patch": "@@ -59,6 +59,16 @@\n #include <QUrlQuery>\n #endif\n \n+const std::string BitcoinGUI::DEFAULT_UIPLATFORM =\n+#if defined(Q_OS_MAC)\n+        \"macosx\"\n+#elif defined(Q_OS_WIN)\n+        \"windows\"\n+#else\n+        \"other\"\n+#endif\n+        ;\n+\n const QString BitcoinGUI::DEFAULT_WALLET = \"~Default\";\n \n BitcoinGUI::BitcoinGUI(const PlatformStyle *platformStyle, const NetworkStyle *networkStyle, QWidget *parent) :"
      },
      {
        "sha": "945adcd459de447e999b957d88e937f5c021e3bc",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6cbc02b6b279dc0ed11e007ba84a6b09bdcd740/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6cbc02b6b279dc0ed11e007ba84a6b09bdcd740/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=a6cbc02b6b279dc0ed11e007ba84a6b09bdcd740",
        "patch": "@@ -48,6 +48,7 @@ class BitcoinGUI : public QMainWindow\n \n public:\n     static const QString DEFAULT_WALLET;\n+    static const std::string DEFAULT_UIPLATFORM;\n \n     explicit BitcoinGUI(const PlatformStyle *platformStyle, const NetworkStyle *networkStyle, QWidget *parent = 0);\n     ~BitcoinGUI();"
      },
      {
        "sha": "f60928974942386225b40937f8b5c9275cde5b40",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6cbc02b6b279dc0ed11e007ba84a6b09bdcd740/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6cbc02b6b279dc0ed11e007ba84a6b09bdcd740/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=a6cbc02b6b279dc0ed11e007ba84a6b09bdcd740",
        "patch": "@@ -86,7 +86,7 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n         strUsage += HelpMessageOpt(\"-splash\", strprintf(_(\"Show splash screen on startup (default: %u)\"), DEFAULT_SPLASHSCREEN));\n         strUsage += HelpMessageOpt(\"-resetguisettings\", _(\"Reset all settings changes made over the GUI\"));\n         if (showDebug) {\n-            strUsage += HelpMessageOpt(\"-uiplatform\", \"Select platform to customize UI for (one of windows, macosx, other; default: platform compiled on)\");\n+            strUsage += HelpMessageOpt(\"-uiplatform\", strprintf(\"Select platform to customize UI for (one of windows, macosx, other; default: %s)\", BitcoinGUI::DEFAULT_UIPLATFORM));\n         }\n         QString coreOptions = QString::fromStdString(strUsage);\n         text = version + \"\\n\" + header + \"\\n\" + coreOptions;"
      }
    ]
  },
  {
    "sha": "4b89f01d727433f02cc8ff72799e0d0a7e6ceafe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Yjg5ZjAxZDcyNzQzM2YwMmNjOGZmNzI3OTllMGQwYTdlNmNlYWZl",
    "commit": {
      "author": {
        "name": "Ryan Havar",
        "email": "ryan@moneypot.com",
        "date": "2015-09-07T23:12:25Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-28T21:51:41Z"
      },
      "message": "Default fPayAtLeastCustomFee to false\n\nThis allows for much finer control of the transaction fees per kilobyte\nas it prevent small transactions using a fee that is more appropriate\nfor one that is of a kilobyte.\n\nThis also allows controlling the fee per kilobyte over rpc such that:\n\nbitcoin-cli settxfee `bitcoin-cli estimatefee 2`\n\nwould make sense, while currently it grossly fails often by a factor of x3",
      "tree": {
        "sha": "156b72a87ece4c80a792f4ac589f7b1a20c73331",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/156b72a87ece4c80a792f4ac589f7b1a20c73331"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b89f01d727433f02cc8ff72799e0d0a7e6ceafe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b89f01d727433f02cc8ff72799e0d0a7e6ceafe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4b89f01d727433f02cc8ff72799e0d0a7e6ceafe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b89f01d727433f02cc8ff72799e0d0a7e6ceafe/comments",
    "author": null,
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b062226dd9cf0c1b895a8308e06cc37bba684b46",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b89f01d727433f02cc8ff72799e0d0a7e6ceafe/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b89f01d727433f02cc8ff72799e0d0a7e6ceafe/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=4b89f01d727433f02cc8ff72799e0d0a7e6ceafe",
        "patch": "@@ -41,7 +41,7 @@ CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n unsigned int nTxConfirmTarget = DEFAULT_TX_CONFIRM_TARGET;\n bool bSpendZeroConfChange = DEFAULT_SPEND_ZEROCONF_CHANGE;\n bool fSendFreeTransactions = DEFAULT_SEND_FREE_TRANSACTIONS;\n-bool fPayAtLeastCustomFee = true;\n+bool fPayAtLeastCustomFee = false;\n \n /**\n  * Fees smaller than this (in satoshi) are considered zero fee (for transaction creation)"
      }
    ]
  },
  {
    "sha": "fa506c0c9b3928843704c666909c0b0c5af2f9a0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTUwNmMwYzliMzkyODg0MzcwNGM2NjY5MDljMGIwYzVhZjJmOWEw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-09-21T10:49:13Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-28T21:52:13Z"
      },
      "message": "[wallet] Add rpc tests to verify fee calculations",
      "tree": {
        "sha": "21b92065661555e3eb35e5934954ef06b6d33252",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21b92065661555e3eb35e5934954ef06b6d33252"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa506c0c9b3928843704c666909c0b0c5af2f9a0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa506c0c9b3928843704c666909c0b0c5af2f9a0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa506c0c9b3928843704c666909c0b0c5af2f9a0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa506c0c9b3928843704c666909c0b0c5af2f9a0/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b89f01d727433f02cc8ff72799e0d0a7e6ceafe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b89f01d727433f02cc8ff72799e0d0a7e6ceafe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b89f01d727433f02cc8ff72799e0d0a7e6ceafe"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 30,
      "deletions": 12
    },
    "files": [
      {
        "sha": "d9d5129f210399d88735d805d8451de08a262942",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa506c0c9b3928843704c666909c0b0c5af2f9a0/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa506c0c9b3928843704c666909c0b0c5af2f9a0/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=fa506c0c9b3928843704c666909c0b0c5af2f9a0",
        "patch": "@@ -67,6 +67,9 @@ def check_json_precision():\n     if satoshis != 2000000000000003:\n         raise RuntimeError(\"JSON encode/decode loses precision\")\n \n+def count_bytes(hex_string):\n+    return len(bytearray.fromhex(hex_string))\n+\n def sync_blocks(rpc_connections, wait=1):\n     \"\"\"\n     Wait until everybody has the same block count"
      },
      {
        "sha": "6f6bc3189527e667b56c4e66cc776e6e5311fd77",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 27,
        "deletions": 12,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa506c0c9b3928843704c666909c0b0c5af2f9a0/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa506c0c9b3928843704c666909c0b0c5af2f9a0/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=fa506c0c9b3928843704c666909c0b0c5af2f9a0",
        "patch": "@@ -24,6 +24,17 @@\n \n class WalletTest (BitcoinTestFramework):\n \n+    def check_fee_amount(self, curr_balance, balance_with_fee, fee_per_byte, tx_size):\n+        \"\"\"Return curr_balance after asserting the fee was in range\"\"\"\n+        fee = balance_with_fee - curr_balance\n+        target_fee = fee_per_byte * tx_size\n+        if fee < target_fee:\n+            raise AssertionError(\"Fee of %s BTC too low! (Should be %s BTC)\"%(str(fee), str(target_fee)))\n+        # allow the node's estimation to be at most 2 bytes off\n+        if fee > fee_per_byte * (tx_size + 2):\n+            raise AssertionError(\"Fee of %s BTC too high! (Should be %s BTC)\"%(str(fee), str(target_fee)))\n+        return curr_balance\n+\n     def setup_chain(self):\n         print(\"Initializing test directory \"+self.options.tmpdir)\n         initialize_chain_clean(self.options.tmpdir, 4)\n@@ -104,33 +115,37 @@ def run_test (self):\n \n         # Send 10 BTC normal\n         address = self.nodes[0].getnewaddress(\"test\")\n-        self.nodes[2].settxfee(Decimal('0.001'))\n+        fee_per_byte = Decimal('0.001') / 1000\n+        self.nodes[2].settxfee(fee_per_byte * 1000)\n         txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", False)\n         self.nodes[2].generate(1)\n         self.sync_all()\n-        assert_equal(self.nodes[2].getbalance(), Decimal('89.99900000'))\n-        assert_equal(self.nodes[0].getbalance(), Decimal('10.00000000'))\n+        node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), Decimal('90'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n+        assert_equal(self.nodes[0].getbalance(), Decimal('10'))\n \n         # Send 10 BTC with subtract fee from amount\n         txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", True)\n         self.nodes[2].generate(1)\n         self.sync_all()\n-        assert_equal(self.nodes[2].getbalance(), Decimal('79.99900000'))\n-        assert_equal(self.nodes[0].getbalance(), Decimal('19.99900000'))\n+        node_2_bal -= Decimal('10')\n+        assert_equal(self.nodes[2].getbalance(), node_2_bal)\n+        node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), Decimal('20'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n \n         # Sendmany 10 BTC\n         txid = self.nodes[2].sendmany('from1', {address: 10}, 0, \"\", [])\n         self.nodes[2].generate(1)\n         self.sync_all()\n-        assert_equal(self.nodes[2].getbalance(), Decimal('69.99800000'))\n-        assert_equal(self.nodes[0].getbalance(), Decimal('29.99900000'))\n+        node_0_bal += Decimal('10')\n+        node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), node_2_bal - Decimal('10'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n+        assert_equal(self.nodes[0].getbalance(), node_0_bal)\n \n         # Sendmany 10 BTC with subtract fee from amount\n         txid = self.nodes[2].sendmany('from1', {address: 10}, 0, \"\", [address])\n         self.nodes[2].generate(1)\n         self.sync_all()\n-        assert_equal(self.nodes[2].getbalance(), Decimal('59.99800000'))\n-        assert_equal(self.nodes[0].getbalance(), Decimal('39.99800000'))\n+        node_2_bal -= Decimal('10')\n+        assert_equal(self.nodes[2].getbalance(), node_2_bal)\n+        node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), node_0_bal + Decimal('10'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n \n         # Test ResendWalletTransactions:\n         # Create a couple of transactions, then start up a fourth\n@@ -191,14 +206,14 @@ def run_test (self):\n         txObjNotBroadcasted = self.nodes[0].gettransaction(txIdNotBroadcasted)\n         self.nodes[1].generate(1) #mine a block, tx should not be in there\n         self.sync_all()\n-        assert_equal(self.nodes[2].getbalance(), Decimal('59.99800000')); #should not be changed because tx was not broadcasted\n+        assert_equal(self.nodes[2].getbalance(), node_2_bal); #should not be changed because tx was not broadcasted\n \n         #now broadcast from another node, mine a block, sync, and check the balance\n         self.nodes[1].sendrawtransaction(txObjNotBroadcasted['hex'])\n         self.nodes[1].generate(1)\n         self.sync_all()\n         txObjNotBroadcasted = self.nodes[0].gettransaction(txIdNotBroadcasted)\n-        assert_equal(self.nodes[2].getbalance(), Decimal('61.99800000')); #should not be\n+        assert_equal(self.nodes[2].getbalance(), node_2_bal + Decimal('2')); #should not be\n \n         #create another tx\n         txIdNotBroadcasted  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 2);\n@@ -216,7 +231,7 @@ def run_test (self):\n         sync_blocks(self.nodes)\n \n         #tx should be added to balance because after restarting the nodes tx should be broadcastet\n-        assert_equal(self.nodes[2].getbalance(), Decimal('63.99800000')); #should not be\n+        assert_equal(self.nodes[2].getbalance(), node_2_bal + Decimal('4')); #should not be\n \n         #send a tx with value in a string (PR#6380 +)\n         txId  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), \"2\")"
      }
    ]
  },
  {
    "sha": "c894fbbb1dc0778628fa3f246b92d673b3f70cfa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODk0ZmJiYjFkYzA3Nzg2MjhmYTNmMjQ2YjkyZDY3M2IzZjcwY2Zh",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-29T00:09:30Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-29T00:09:40Z"
      },
      "message": "Merge pull request #7106\n\na9f3d3d Fix and improve relay from whitelisted peers (Pieter Wuille)",
      "tree": {
        "sha": "90230fff8573f609b27f4f5ecbe1ba4178615690",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/90230fff8573f609b27f4f5ecbe1ba4178615690"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c894fbbb1dc0778628fa3f246b92d673b3f70cfa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCAAGBQJWWkJEAAoJEOq1r5TZ6avn33cP/iZrwjR+OtOzDgU8Fu180/qH\n59SxY03ysdR8e56SRdy6/TGtCxCUR+/gvl1rl/cvjigQo0gjp08GWiIFZHMTMWW1\nkeE8PR6qqmYyHcmx5utjqw/3mTiXvf4pKFSPrlw0sySECLRAAd09PL5nvbRPq2r+\nMIavg7mT13qodNEQaatotnrp4OySTvspJvPHbTKmUjS1KEY5gwEA1SFD7UV2KdfY\n73hbhVtkhIpj/pFWZTFCCh+EKV2QKKGzFHbhThFYR8y6GskYBNFS3QeSUPb94GTI\ns9Tm25T7bUm2ux/739jxk+JGJitlIr1ViU1TRV0fF6kFsxR8mRktw7KR97gJDlPO\niOZeUTeNe+iOnBCcgec5v50UGBuwty+g2uq3ll+bMw6FgfNvS9elMmnlvoz8rVqc\nhaptnsAXqSu+VAYmLVkbpnLd/fecsOEd1f4hn1piZh28Z23HCFS2p+GBV6t0zrFt\nqgyjOA4O6gDBsCuLZJzG0nVmDR8hLKDkSUjm+AKoueqki0okaedBn9CFO4upAi5y\nRyCtkrUZ8b4eWpCge37SllTmZhT46g8P3U0RFXAhg8/kE6JrDSMt0Vc5Ym3QJ/20\nyds3eDFlTgZB5Z8nhbiH2t+KOxtJ4xl0oRogkk4FoCL0BAwF8qdsKtnPQs66gQux\nl26dO2F0YfpyG9i5AZaN\n=egNC\n-----END PGP SIGNATURE-----",
        "payload": "tree 90230fff8573f609b27f4f5ecbe1ba4178615690\nparent 61457c29d735b77182b5fbd45e86d7e3db343857\nparent a9f3d3db5c0c8d1697998ed9b3e192ddbf9a31f4\nauthor Gregory Maxwell <greg@xiph.org> 1448755770 -0800\ncommitter Gregory Maxwell <greg@xiph.org> 1448755780 -0800\n\nMerge pull request #7106\n\na9f3d3d Fix and improve relay from whitelisted peers (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c894fbbb1dc0778628fa3f246b92d673b3f70cfa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c894fbbb1dc0778628fa3f246b92d673b3f70cfa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c894fbbb1dc0778628fa3f246b92d673b3f70cfa/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "61457c29d735b77182b5fbd45e86d7e3db343857",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61457c29d735b77182b5fbd45e86d7e3db343857",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/61457c29d735b77182b5fbd45e86d7e3db343857"
      },
      {
        "sha": "a9f3d3db5c0c8d1697998ed9b3e192ddbf9a31f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9f3d3db5c0c8d1697998ed9b3e192ddbf9a31f4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9f3d3db5c0c8d1697998ed9b3e192ddbf9a31f4"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 14,
      "deletions": 11
    },
    "files": [
      {
        "sha": "94fcd6223b5d7b2c90bbb10d2b48faef00050233",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 11,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c894fbbb1dc0778628fa3f246b92d673b3f70cfa/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c894fbbb1dc0778628fa3f246b92d673b3f70cfa/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c894fbbb1dc0778628fa3f246b92d673b3f70cfa",
        "patch": "@@ -4610,11 +4610,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         mapAlreadyAskedFor.erase(inv);\n \n-        // Check for recently rejected (and do other quick existence checks)\n-        if (AlreadyHave(inv))\n-            return true;\n-\n-        if (AcceptToMemoryPool(mempool, state, tx, true, &fMissingInputs))\n+        if (!AlreadyHave(inv) && AcceptToMemoryPool(mempool, state, tx, true, &fMissingInputs))\n         {\n             mempool.check(pcoinsTip);\n             RelayTransaction(tx);\n@@ -4694,13 +4690,20 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n             if (pfrom->fWhitelisted && GetBoolArg(\"-whitelistalwaysrelay\", DEFAULT_WHITELISTALWAYSRELAY)) {\n                 // Always relay transactions received from whitelisted peers, even\n-                // if they were rejected from the mempool, allowing the node to\n-                // function as a gateway for nodes hidden behind it.\n+                // if they were already in the mempool or rejected from it due\n+                // to policy, allowing the node to function as a gateway for\n+                // nodes hidden behind it.\n                 //\n-                // FIXME: This includes invalid transactions, which means a\n-                // whitelisted peer could get us banned! We may want to change\n-                // that.\n-                RelayTransaction(tx);\n+                // Never relay transactions that we would assign a non-zero DoS\n+                // score for, as we expect peers to do the same with us in that\n+                // case.\n+                int nDoS = 0;\n+                if (!state.IsInvalid(nDoS) || nDoS == 0) {\n+                    LogPrintf(\"Force relaying tx %s from whitelisted peer=%d\\n\", tx.GetHash().ToString(), pfrom->id);\n+                    RelayTransaction(tx);\n+                } else {\n+                    LogPrintf(\"Not relaying invalid transaction %s from whitelisted peer=%d (%s)\\n\", tx.GetHash().ToString(), pfrom->id, FormatStateMessage(state));\n+                }\n             }\n         }\n         int nDoS = 0;"
      }
    ]
  },
  {
    "sha": "50262d89531692473ff557c1061aee22aa4cca1c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDI2MmQ4OTUzMTY5MjQ3M2ZmNTU3YzEwNjFhZWUyMmFhNGNjYTFj",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2014-11-18T21:16:32Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-29T10:59:23Z"
      },
      "message": "Allow block announcements with headers\n\nThis replaces using inv messages to announce new blocks, when a peer requests\n(via the new \"sendheaders\" message) that blocks be announced with headers\ninstead of inv's.\n\nSince headers-first was introduced, peers send getheaders messages in response\nto an inv, which requires generating a block locator that is large compared to\nthe size of the header being requested, and requires an extra round-trip before\na reorg can be relayed.  Save time by tracking headers that a peer is likely to\nknow about, and send a headers chain that would connect to a peer's known\nheaders, unless the chain would be too big, in which case we revert to sending\nan inv instead.\n\nBased off of @sipa's commit to announce all blocks in a reorg via inv,\nwhich has been squashed into this commit.\n\nRebased-by: Pieter Wuille",
      "tree": {
        "sha": "a9bcb626d8478da1293e1c11734cd0ac8776f62c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9bcb626d8478da1293e1c11734cd0ac8776f62c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/50262d89531692473ff557c1061aee22aa4cca1c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50262d89531692473ff557c1061aee22aa4cca1c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/50262d89531692473ff557c1061aee22aa4cca1c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50262d89531692473ff557c1061aee22aa4cca1c/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c894fbbb1dc0778628fa3f246b92d673b3f70cfa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c894fbbb1dc0778628fa3f246b92d673b3f70cfa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c894fbbb1dc0778628fa3f246b92d673b3f70cfa"
      }
    ],
    "stats": {
      "total": 795,
      "additions": 781,
      "deletions": 14
    },
    "files": [
      {
        "sha": "5004b09c18e52ee6bf9f97762447a362bb091118",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50262d89531692473ff557c1061aee22aa4cca1c/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50262d89531692473ff557c1061aee22aa4cca1c/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=50262d89531692473ff557c1061aee22aa4cca1c",
        "patch": "@@ -91,6 +91,7 @@\n     'p2p-fullblocktest.py',\n     'blockchain.py',\n     'disablewallet.py',\n+    'sendheaders.py',\n ]\n testScriptsExt = [\n     'bip65-cltv.py',"
      },
      {
        "sha": "d7f4292090d01454a87cba91945b2f15f5d34c7d",
        "filename": "qa/rpc-tests/sendheaders.py",
        "status": "added",
        "additions": 519,
        "deletions": 0,
        "changes": 519,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50262d89531692473ff557c1061aee22aa4cca1c/qa/rpc-tests/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50262d89531692473ff557c1061aee22aa4cca1c/qa/rpc-tests/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/sendheaders.py?ref=50262d89531692473ff557c1061aee22aa4cca1c",
        "patch": "@@ -0,0 +1,519 @@\n+#!/usr/bin/env python2\n+#\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import time\n+from test_framework.blocktools import create_block, create_coinbase\n+\n+'''\n+SendHeadersTest -- test behavior of headers messages to announce blocks.\n+\n+Setup: \n+\n+- Two nodes, two p2p connections to node0. One p2p connection should only ever\n+  receive inv's (omitted from testing description below, this is our control).\n+  Second node is used for creating reorgs.\n+\n+Part 1: No headers announcements before \"sendheaders\"\n+a. node mines a block [expect: inv]\n+   send getdata for the block [expect: block]\n+b. node mines another block [expect: inv]\n+   send getheaders and getdata [expect: headers, then block]\n+c. node mines another block [expect: inv]\n+   peer mines a block, announces with header [expect: getdata]\n+d. node mines another block [expect: inv]\n+\n+Part 2: After \"sendheaders\", headers announcements should generally work.\n+a. peer sends sendheaders [expect: no response]\n+   peer sends getheaders with current tip [expect: no response]\n+b. node mines a block [expect: tip header]\n+c. for N in 1, ..., 10:\n+   * for announce-type in {inv, header}\n+     - peer mines N blocks, announces with announce-type\n+       [ expect: getheaders/getdata or getdata, deliver block(s) ]\n+     - node mines a block [ expect: 1 header ]\n+\n+Part 3: Headers announcements stop after large reorg and resume after getheaders or inv from peer.\n+- For response-type in {inv, getheaders}\n+  * node mines a 7 block reorg [ expect: headers announcement of 8 blocks ]\n+  * node mines an 8-block reorg [ expect: inv at tip ]\n+  * peer responds with getblocks/getdata [expect: inv, blocks ]\n+  * node mines another block [ expect: inv at tip, peer sends getdata, expect: block ]\n+  * node mines another block at tip [ expect: inv ]\n+  * peer responds with getheaders with an old hashstop more than 8 blocks back [expect: headers]\n+  * peer requests block [ expect: block ]\n+  * node mines another block at tip [ expect: inv, peer sends getdata, expect: block ]\n+  * peer sends response-type [expect headers if getheaders, getheaders/getdata if mining new block]\n+  * node mines 1 block [expect: 1 header, peer responds with getdata]\n+\n+Part 4: Test direct fetch behavior\n+a. Announce 2 old block headers.\n+   Expect: no getdata requests.\n+b. Announce 3 new blocks via 1 headers message.\n+   Expect: one getdata request for all 3 blocks.\n+   (Send blocks.)\n+c. Announce 1 header that forks off the last two blocks.\n+   Expect: no response.\n+d. Announce 1 more header that builds on that fork.\n+   Expect: one getdata request for two blocks.\n+e. Announce 16 more headers that build on that fork.\n+   Expect: getdata request for 14 more blocks.\n+f. Announce 1 more header that builds on that fork.\n+   Expect: no response.\n+'''\n+\n+class BaseNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.create_callback_map()\n+        self.connection = None\n+        self.last_inv = None\n+        self.last_headers = None\n+        self.last_block = None\n+        self.ping_counter = 1\n+        self.last_pong = msg_pong(0)\n+        self.last_getdata = None\n+        self.sleep_time = 0.05\n+        self.block_announced = False\n+\n+    def clear_last_announcement(self):\n+        with mininode_lock:\n+            self.block_announced = False\n+            self.last_inv = None\n+            self.last_headers = None\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    # Request data for a list of block hashes\n+    def get_data(self, block_hashes):\n+        msg = msg_getdata()\n+        for x in block_hashes:\n+            msg.inv.append(CInv(2, x))\n+        self.connection.send_message(msg)\n+\n+    def get_headers(self, locator, hashstop):\n+        msg = msg_getheaders()\n+        msg.locator.vHave = locator\n+        msg.hashstop = hashstop\n+        self.connection.send_message(msg)\n+\n+    def send_block_inv(self, blockhash):\n+        msg = msg_inv()\n+        msg.inv = [CInv(2, blockhash)]\n+        self.connection.send_message(msg)\n+\n+    # Wrapper for the NodeConn's send_message function\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def on_inv(self, conn, message):\n+        self.last_inv = message\n+        self.block_announced = True\n+\n+    def on_headers(self, conn, message):\n+        self.last_headers = message\n+        self.block_announced = True\n+\n+    def on_block(self, conn, message):\n+        self.last_block = message.block\n+        self.last_block.calc_sha256()\n+\n+    def on_getdata(self, conn, message):\n+        self.last_getdata = message\n+\n+    def on_pong(self, conn, message):\n+        self.last_pong = message\n+\n+    # Test whether the last announcement we received had the\n+    # right header or the right inv\n+    # inv and headers should be lists of block hashes\n+    def check_last_announcement(self, headers=None, inv=None):\n+        expect_headers = headers if headers != None else []\n+        expect_inv = inv if inv != None else []\n+        test_function = lambda: self.block_announced\n+        self.sync(test_function)\n+        with mininode_lock:\n+            self.block_announced = False\n+\n+            success = True\n+            compare_inv = []\n+            if self.last_inv != None:\n+                compare_inv = [x.hash for x in self.last_inv.inv]\n+            if compare_inv != expect_inv:\n+                success = False\n+\n+            hash_headers = []\n+            if self.last_headers != None:\n+                # treat headers as a list of block hashes\n+                hash_headers = [ x.sha256 for x in self.last_headers.headers ]\n+            if hash_headers != expect_headers:\n+                success = False\n+\n+            self.last_inv = None\n+            self.last_headers = None\n+        return success\n+\n+    # Syncing helpers\n+    def sync(self, test_function, timeout=60):\n+        while timeout > 0:\n+            with mininode_lock:\n+                if test_function():\n+                    return\n+            time.sleep(self.sleep_time)\n+            timeout -= self.sleep_time\n+        raise AssertionError(\"Sync failed to complete\")\n+        \n+    def sync_with_ping(self, timeout=60):\n+        self.send_message(msg_ping(nonce=self.ping_counter))\n+        test_function = lambda: self.last_pong.nonce == self.ping_counter\n+        self.sync(test_function, timeout)\n+        self.ping_counter += 1\n+        return\n+\n+    def wait_for_block(self, blockhash, timeout=60):\n+        test_function = lambda: self.last_block != None and self.last_block.sha256 == blockhash\n+        self.sync(test_function, timeout)\n+        return\n+\n+    def wait_for_getdata(self, hash_list, timeout=60):\n+        if hash_list == []:\n+            return\n+\n+        test_function = lambda: self.last_getdata != None and [x.hash for x in self.last_getdata.inv] == hash_list\n+        self.sync(test_function, timeout)\n+        return\n+\n+    def send_header_for_blocks(self, new_blocks):\n+        headers_message = msg_headers()\n+        headers_message.headers = [ CBlockHeader(b) for b in new_blocks ]\n+        self.send_message(headers_message)\n+\n+    def send_getblocks(self, locator):\n+        getblocks_message = msg_getblocks()\n+        getblocks_message.locator.vHave = locator\n+        self.send_message(getblocks_message)\n+\n+# InvNode: This peer should only ever receive inv's, because it doesn't ever send a\n+# \"sendheaders\" message.\n+class InvNode(BaseNode):\n+    def __init__(self):\n+        BaseNode.__init__(self)\n+\n+# TestNode: This peer is the one we use for most of the testing.\n+class TestNode(BaseNode):\n+    def __init__(self):\n+        BaseNode.__init__(self)\n+\n+class SendHeadersTest(BitcoinTestFramework):\n+    def setup_chain(self):\n+        initialize_chain_clean(self.options.tmpdir, 2)\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.nodes = start_nodes(2, self.options.tmpdir, [[\"-debug\", \"-logtimemicros=1\"]]*2)\n+        connect_nodes(self.nodes[0], 1)\n+\n+    # mine count blocks and return the new tip\n+    def mine_blocks(self, count):\n+        self.nodes[0].generate(count)\n+        return int(self.nodes[0].getbestblockhash(), 16)\n+\n+    # mine a reorg that invalidates length blocks (replacing them with\n+    # length+1 blocks).\n+    # peers is the p2p nodes we're using; we clear their state after the\n+    # to-be-reorged-out blocks are mined, so that we don't break later tests.\n+    # return the list of block hashes newly mined\n+    def mine_reorg(self, length, peers):\n+        self.nodes[0].generate(length) # make sure all invalidated blocks are node0's\n+        sync_blocks(self.nodes, wait=0.1)\n+        [x.clear_last_announcement() for x in peers]\n+\n+        tip_height = self.nodes[1].getblockcount()\n+        hash_to_invalidate = self.nodes[1].getblockhash(tip_height-(length-1))\n+        self.nodes[1].invalidateblock(hash_to_invalidate)\n+        all_hashes = self.nodes[1].generate(length+1) # Must be longer than the orig chain\n+        sync_blocks(self.nodes, wait=0.1)\n+        return [int(x, 16) for x in all_hashes]\n+\n+    def run_test(self):\n+        # Setup the p2p connections and start up the network thread.\n+        inv_node = InvNode()\n+        test_node = TestNode()\n+\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], inv_node))\n+        # Set nServices to 0 for test_node, so no block download will occur outside of\n+        # direct fetching\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_node, services=0))\n+        inv_node.add_connection(connections[0])\n+        test_node.add_connection(connections[1])\n+\n+        NetworkThread().start() # Start up network handling in another thread\n+\n+        # Test logic begins here\n+        inv_node.wait_for_verack()\n+        test_node.wait_for_verack()\n+\n+        tip = int(self.nodes[0].getbestblockhash(), 16)\n+\n+        # PART 1\n+        # 1. Mine a block; expect inv announcements each time\n+        print \"Part 1: headers don't start before sendheaders message...\"\n+        for i in xrange(4):\n+            old_tip = tip\n+            tip = self.mine_blocks(1)\n+            assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n+            assert_equal(test_node.check_last_announcement(inv=[tip]), True)\n+            # Try a few different responses; none should affect next announcement\n+            if i == 0:\n+                # first request the block\n+                test_node.get_data([tip])\n+                test_node.wait_for_block(tip, timeout=5)\n+            elif i == 1:\n+                # next try requesting header and block\n+                test_node.get_headers(locator=[old_tip], hashstop=tip)\n+                test_node.get_data([tip])\n+                test_node.wait_for_block(tip)\n+                test_node.clear_last_announcement() # since we requested headers...\n+            elif i == 2:\n+                # this time announce own block via headers\n+                height = self.nodes[0].getblockcount()\n+                last_time = self.nodes[0].getblock(self.nodes[0].getbestblockhash())['time']\n+                block_time = last_time + 1\n+                new_block = create_block(tip, create_coinbase(height+1), block_time)\n+                new_block.solve()\n+                test_node.send_header_for_blocks([new_block])\n+                test_node.wait_for_getdata([new_block.sha256], timeout=5)\n+                test_node.send_message(msg_block(new_block))\n+                test_node.sync_with_ping() # make sure this block is processed\n+                inv_node.clear_last_announcement()\n+                test_node.clear_last_announcement()\n+\n+        print \"Part 1: success!\"\n+        print \"Part 2: announce blocks with headers after sendheaders message...\"\n+        # PART 2\n+        # 2. Send a sendheaders message and test that headers announcements\n+        # commence and keep working.\n+        test_node.send_message(msg_sendheaders())\n+        prev_tip = int(self.nodes[0].getbestblockhash(), 16)\n+        test_node.get_headers(locator=[prev_tip], hashstop=0L)\n+        test_node.sync_with_ping()\n+        test_node.clear_last_announcement() # Clear out empty headers response\n+\n+        # Now that we've synced headers, headers announcements should work\n+        tip = self.mine_blocks(1)\n+        assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n+        assert_equal(test_node.check_last_announcement(headers=[tip]), True)\n+\n+        height = self.nodes[0].getblockcount()+1\n+        block_time += 10  # Advance far enough ahead\n+        for i in xrange(10):\n+            # Mine i blocks, and alternate announcing either via\n+            # inv (of tip) or via headers. After each, new blocks\n+            # mined by the node should successfully be announced\n+            # with block header, even though the blocks are never requested\n+            for j in xrange(2):\n+                blocks = []\n+                for b in xrange(i+1):\n+                    blocks.append(create_block(tip, create_coinbase(height), block_time))\n+                    blocks[-1].solve()\n+                    tip = blocks[-1].sha256\n+                    block_time += 1\n+                    height += 1\n+                if j == 0:\n+                    # Announce via inv\n+                    test_node.send_block_inv(tip)\n+                    test_node.wait_for_getdata([tip], timeout=5)\n+                    # Test that duplicate inv's won't result in duplicate\n+                    # getdata requests, or duplicate headers announcements\n+                    inv_node.send_block_inv(tip)\n+                    # Should have received a getheaders as well!\n+                    test_node.send_header_for_blocks(blocks)\n+                    test_node.wait_for_getdata([x.sha256 for x in blocks[0:-1]], timeout=5)\n+                    [ inv_node.send_block_inv(x.sha256) for x in blocks[0:-1] ]\n+                    inv_node.sync_with_ping()\n+                else:\n+                    # Announce via headers\n+                    test_node.send_header_for_blocks(blocks)\n+                    test_node.wait_for_getdata([x.sha256 for x in blocks], timeout=5)\n+                    # Test that duplicate headers won't result in duplicate\n+                    # getdata requests (the check is further down)\n+                    inv_node.send_header_for_blocks(blocks)\n+                    inv_node.sync_with_ping()\n+                [ test_node.send_message(msg_block(x)) for x in blocks ]\n+                test_node.sync_with_ping()\n+                inv_node.sync_with_ping()\n+                # This block should not be announced to the inv node (since it also\n+                # broadcast it)\n+                assert_equal(inv_node.last_inv, None)\n+                assert_equal(inv_node.last_headers, None)\n+                inv_node.clear_last_announcement()\n+                test_node.clear_last_announcement()\n+                tip = self.mine_blocks(1)\n+                assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n+                assert_equal(test_node.check_last_announcement(headers=[tip]), True)\n+                height += 1\n+                block_time += 1\n+\n+        print \"Part 2: success!\"\n+\n+        print \"Part 3: headers announcements can stop after large reorg, and resume after headers/inv from peer...\"\n+\n+        # PART 3.  Headers announcements can stop after large reorg, and resume after\n+        # getheaders or inv from peer.\n+        for j in xrange(2):\n+            # First try mining a reorg that can propagate with header announcement\n+            new_block_hashes = self.mine_reorg(length=7, peers=[test_node, inv_node])\n+            tip = new_block_hashes[-1]\n+            assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n+            assert_equal(test_node.check_last_announcement(headers=new_block_hashes), True)\n+\n+            block_time += 8 \n+\n+            # Mine a too-large reorg, which should be announced with a single inv\n+            new_block_hashes = self.mine_reorg(length=8, peers=[test_node, inv_node])\n+            tip = new_block_hashes[-1]\n+            assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n+            assert_equal(test_node.check_last_announcement(inv=[tip]), True)\n+\n+            block_time += 9\n+\n+            fork_point = self.nodes[0].getblock(\"%02x\" % new_block_hashes[0])[\"previousblockhash\"]\n+            fork_point = int(fork_point, 16)\n+\n+            # Use getblocks/getdata\n+            test_node.send_getblocks(locator = [fork_point])\n+            assert_equal(test_node.check_last_announcement(inv=new_block_hashes[0:-1]), True)\n+            test_node.get_data(new_block_hashes)\n+            test_node.wait_for_block(new_block_hashes[-1])\n+\n+            for i in xrange(3):\n+                # Mine another block, still should get only an inv\n+                tip = self.mine_blocks(1)\n+                assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n+                assert_equal(test_node.check_last_announcement(inv=[tip]), True)\n+                if i == 0:\n+                    # Just get the data -- shouldn't cause headers announcements to resume\n+                    test_node.get_data([tip])\n+                    test_node.wait_for_block(tip)\n+                elif i == 1:\n+                    # Send a getheaders message that shouldn't trigger headers announcements\n+                    # to resume (best header sent will be too old)\n+                    test_node.get_headers(locator=[fork_point], hashstop=new_block_hashes[1])\n+                    test_node.get_data([tip])\n+                    test_node.wait_for_block(tip)\n+                    test_node.clear_last_announcement()\n+                elif i == 2:\n+                    test_node.get_data([tip])\n+                    test_node.wait_for_block(tip)\n+                    # This time, try sending either a getheaders to trigger resumption\n+                    # of headers announcements, or mine a new block and inv it, also \n+                    # triggering resumption of headers announcements.\n+                    if j == 0:\n+                        test_node.get_headers(locator=[tip], hashstop=0L)\n+                        test_node.sync_with_ping()\n+                    else:\n+                        test_node.send_block_inv(tip)\n+                        test_node.sync_with_ping()\n+            # New blocks should now be announced with header\n+            tip = self.mine_blocks(1)\n+            assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n+            assert_equal(test_node.check_last_announcement(headers=[tip]), True)\n+\n+        print \"Part 3: success!\"\n+\n+        print \"Part 4: Testing direct fetch behavior...\"\n+        tip = self.mine_blocks(1)\n+        height = self.nodes[0].getblockcount() + 1\n+        last_time = self.nodes[0].getblock(self.nodes[0].getbestblockhash())['time']\n+        block_time = last_time + 1\n+\n+        # Create 2 blocks.  Send the blocks, then send the headers.\n+        blocks = []\n+        for b in xrange(2):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            inv_node.send_message(msg_block(blocks[-1]))\n+\n+        inv_node.sync_with_ping() # Make sure blocks are processed\n+        test_node.last_getdata = None\n+        test_node.send_header_for_blocks(blocks);\n+        test_node.sync_with_ping()\n+        # should not have received any getdata messages\n+        with mininode_lock:\n+            assert_equal(test_node.last_getdata, None)\n+\n+        # This time, direct fetch should work\n+        blocks = []\n+        for b in xrange(3):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+\n+        test_node.send_header_for_blocks(blocks)\n+        test_node.sync_with_ping()\n+        test_node.wait_for_getdata([x.sha256 for x in blocks], timeout=test_node.sleep_time)\n+\n+        [ test_node.send_message(msg_block(x)) for x in blocks ]\n+\n+        test_node.sync_with_ping()\n+\n+        # Now announce a header that forks the last two blocks\n+        tip = blocks[0].sha256\n+        height -= 1\n+        blocks = []\n+\n+        # Create extra blocks for later\n+        for b in xrange(20):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+\n+        # Announcing one block on fork should not trigger direct fetch\n+        # (less work than tip)\n+        test_node.last_getdata = None\n+        test_node.send_header_for_blocks(blocks[0:1])\n+        test_node.sync_with_ping()\n+        with mininode_lock:\n+            assert_equal(test_node.last_getdata, None)\n+\n+        # Announcing one more block on fork should trigger direct fetch for\n+        # both blocks (same work as tip)\n+        test_node.send_header_for_blocks(blocks[1:2])\n+        test_node.sync_with_ping()\n+        test_node.wait_for_getdata([x.sha256 for x in blocks[0:2]], timeout=test_node.sleep_time)\n+\n+        # Announcing 16 more headers should trigger direct fetch for 14 more\n+        # blocks\n+        test_node.send_header_for_blocks(blocks[2:18])\n+        test_node.sync_with_ping()\n+        test_node.wait_for_getdata([x.sha256 for x in blocks[2:16]], timeout=test_node.sleep_time)\n+\n+        # Announcing 1 more header should not trigger any response\n+        test_node.last_getdata = None\n+        test_node.send_header_for_blocks(blocks[18:19])\n+        test_node.sync_with_ping()\n+        with mininode_lock:\n+            assert_equal(test_node.last_getdata, None)\n+\n+        print \"Part 4: success!\"\n+\n+        # Finally, check that the inv node never received a getdata request,\n+        # throughout the test\n+        assert_equal(inv_node.last_getdata, None)\n+\n+if __name__ == '__main__':\n+    SendHeadersTest().main()"
      },
      {
        "sha": "64985d58e2f56b95258aae524d8f79d7063ac421",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 29,
        "deletions": 3,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50262d89531692473ff557c1061aee22aa4cca1c/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50262d89531692473ff557c1061aee22aa4cca1c/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=50262d89531692473ff557c1061aee22aa4cca1c",
        "patch": "@@ -751,8 +751,8 @@ def __repr__(self):\n class msg_getdata(object):\n     command = \"getdata\"\n \n-    def __init__(self):\n-        self.inv = []\n+    def __init__(self, inv=None):\n+        self.inv = inv if inv != None else []\n \n     def deserialize(self, f):\n         self.inv = deser_vector(f, CInv)\n@@ -905,6 +905,20 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_mempool()\"\n \n+class msg_sendheaders(object):\n+    command = \"sendheaders\"\n+\n+    def __init__(self):\n+        pass\n+\n+    def deserialize(self, f):\n+        pass\n+\n+    def serialize(self):\n+        return \"\"\n+\n+    def __repr__(self):\n+        return \"msg_sendheaders()\"\n \n # getheaders message has\n # number of entries\n@@ -990,6 +1004,17 @@ class NodeConnCB(object):\n     def __init__(self):\n         self.verack_received = False\n \n+    # Spin until verack message is received from the node.\n+    # Tests may want to use this as a signal that the test can begin.\n+    # This can be called from the testing thread, so it needs to acquire the\n+    # global lock.\n+    def wait_for_verack(self):\n+        while True:\n+            with mininode_lock:\n+                if self.verack_received:\n+                    return\n+            time.sleep(0.05)\n+\n     # Derived classes should call this function once to set the message map\n     # which associates the derived classes' functions to incoming messages\n     def create_callback_map(self):\n@@ -1084,7 +1109,7 @@ class NodeConn(asyncore.dispatcher):\n         \"regtest\": \"\\xfa\\xbf\\xb5\\xda\"    # regtest\n     }\n \n-    def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\"):\n+    def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=1):\n         asyncore.dispatcher.__init__(self, map=mininode_socket_map)\n         self.log = logging.getLogger(\"NodeConn(%s:%d)\" % (dstaddr, dstport))\n         self.dstaddr = dstaddr\n@@ -1102,6 +1127,7 @@ def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\"):\n \n         # stuff version msg into sendbuf\n         vt = msg_version()\n+        vt.nServices = services\n         vt.addrTo.ip = self.dstaddr\n         vt.addrTo.port = self.dstport\n         vt.addrFrom.ip = \"0.0.0.0\""
      },
      {
        "sha": "3450ed6c3f3655cb20fbd0bdea841b73a711a729",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50262d89531692473ff557c1061aee22aa4cca1c/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50262d89531692473ff557c1061aee22aa4cca1c/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=50262d89531692473ff557c1061aee22aa4cca1c",
        "patch": "@@ -51,6 +51,9 @@ CBlockLocator CChain::GetLocator(const CBlockIndex *pindex) const {\n }\n \n const CBlockIndex *CChain::FindFork(const CBlockIndex *pindex) const {\n+    if (pindex == NULL) {\n+        return NULL;\n+    }\n     if (pindex->nHeight > Height())\n         pindex = pindex->GetAncestor(Height());\n     while (pindex && !Contains(pindex))"
      },
      {
        "sha": "31913956b73e23a46f460f699b7b6394c6d98c9e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 213,
        "deletions": 10,
        "changes": 223,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50262d89531692473ff557c1061aee22aa4cca1c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50262d89531692473ff557c1061aee22aa4cca1c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=50262d89531692473ff557c1061aee22aa4cca1c",
        "patch": "@@ -247,6 +247,8 @@ struct CNodeState {\n     uint256 hashLastUnknownBlock;\n     //! The last full block we both have.\n     CBlockIndex *pindexLastCommonBlock;\n+    //! The best header we have sent our peer.\n+    CBlockIndex *pindexBestHeaderSent;\n     //! Whether we've started headers synchronization with this peer.\n     bool fSyncStarted;\n     //! Since when we're stalling block download progress (in microseconds), or 0.\n@@ -256,6 +258,8 @@ struct CNodeState {\n     int nBlocksInFlightValidHeaders;\n     //! Whether we consider this a preferred download peer.\n     bool fPreferredDownload;\n+    //! Whether this peer wants invs or headers (when possible) for block announcements.\n+    bool fPreferHeaders;\n \n     CNodeState() {\n         fCurrentlyConnected = false;\n@@ -264,11 +268,13 @@ struct CNodeState {\n         pindexBestKnownBlock = NULL;\n         hashLastUnknownBlock.SetNull();\n         pindexLastCommonBlock = NULL;\n+        pindexBestHeaderSent = NULL;\n         fSyncStarted = false;\n         nStallingSince = 0;\n         nBlocksInFlight = 0;\n         nBlocksInFlightValidHeaders = 0;\n         fPreferredDownload = false;\n+        fPreferHeaders = false;\n     }\n };\n \n@@ -398,6 +404,22 @@ void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) {\n     }\n }\n \n+// Requires cs_main\n+bool CanDirectFetch(const Consensus::Params &consensusParams)\n+{\n+    return chainActive.Tip()->GetBlockTime() > GetAdjustedTime() - consensusParams.nPowTargetSpacing * 20;\n+}\n+\n+// Requires cs_main\n+bool PeerHasHeader(CNodeState *state, CBlockIndex *pindex)\n+{\n+    if (state->pindexBestKnownBlock && pindex == state->pindexBestKnownBlock->GetAncestor(pindex->nHeight))\n+        return true;\n+    if (state->pindexBestHeaderSent && pindex == state->pindexBestHeaderSent->GetAncestor(pindex->nHeight))\n+        return true;\n+    return false;\n+}\n+\n /** Find the last common ancestor two blocks have.\n  *  Both pa and pb must be non-NULL. */\n CBlockIndex* LastCommonAncestor(CBlockIndex* pa, CBlockIndex* pb) {\n@@ -2557,16 +2579,17 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n  * or an activated best chain. pblock is either NULL or a pointer to a block\n  * that is already loaded (to avoid loading it again from disk).\n  */\n-bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams, const CBlock* pblock)\n-{\n-    CBlockIndex *pindexNewTip = NULL;\n+bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, const CBlock *pblock) {\n     CBlockIndex *pindexMostWork = NULL;\n     do {\n         boost::this_thread::interruption_point();\n \n+        CBlockIndex *pindexNewTip = NULL;\n+        const CBlockIndex *pindexFork;\n         bool fInitialDownload;\n         {\n             LOCK(cs_main);\n+            CBlockIndex *pindexOldTip = chainActive.Tip();\n             pindexMostWork = FindMostWorkChain();\n \n             // Whether we have anything to do at all.\n@@ -2577,26 +2600,44 @@ bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams,\n                 return false;\n \n             pindexNewTip = chainActive.Tip();\n+            pindexFork = chainActive.FindFork(pindexOldTip);\n             fInitialDownload = IsInitialBlockDownload();\n         }\n         // When we reach this point, we switched to a new tip (stored in pindexNewTip).\n \n         // Notifications/callbacks that can run without cs_main\n         if (!fInitialDownload) {\n-            uint256 hashNewTip = pindexNewTip->GetBlockHash();\n+            // Find the hashes of all blocks that weren't previously in the best chain.\n+            std::vector<uint256> vHashes;\n+            CBlockIndex *pindexToAnnounce = pindexNewTip;\n+            while (pindexToAnnounce != pindexFork) {\n+                vHashes.push_back(pindexToAnnounce->GetBlockHash());\n+                pindexToAnnounce = pindexToAnnounce->pprev;\n+                if (vHashes.size() == MAX_BLOCKS_TO_ANNOUNCE) {\n+                    // Limit announcements in case of a huge reorganization.\n+                    // Rely on the peer's synchronization mechanism in that case.\n+                    break;\n+                }\n+            }\n             // Relay inventory, but don't relay old inventory during initial block download.\n             int nBlockEstimate = 0;\n             if (fCheckpointsEnabled)\n                 nBlockEstimate = Checkpoints::GetTotalBlocksEstimate(chainparams.Checkpoints());\n             {\n                 LOCK(cs_vNodes);\n-                BOOST_FOREACH(CNode* pnode, vNodes)\n-                    if (chainActive.Height() > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate))\n-                        pnode->PushInventory(CInv(MSG_BLOCK, hashNewTip));\n+                BOOST_FOREACH(CNode* pnode, vNodes) {\n+                    if (chainActive.Height() > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate)) {\n+                        BOOST_REVERSE_FOREACH(const uint256& hash, vHashes) {\n+                            pnode->PushBlockHash(hash);\n+                        }\n+                    }\n+                }\n             }\n             // Notify external listeners about the new tip.\n-            GetMainSignals().UpdatedBlockTip(pindexNewTip);\n-            uiInterface.NotifyBlockTip(hashNewTip);\n+            if (!vHashes.empty()) {\n+                GetMainSignals().UpdatedBlockTip(pindexNewTip);\n+                uiInterface.NotifyBlockTip(vHashes.front());\n+            }\n         }\n     } while(pindexMostWork != chainActive.Tip());\n     CheckBlockIndex(chainparams.GetConsensus());\n@@ -4333,6 +4374,14 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             LOCK(cs_main);\n             State(pfrom->GetId())->fCurrentlyConnected = true;\n         }\n+\n+        if (pfrom->nVersion >= SENDHEADERS_VERSION) {\n+            // Tell our peer we prefer to receive headers rather than inv's\n+            // We send this to non-NODE NETWORK peers as well, because even\n+            // non-NODE NETWORK peers can announce blocks (such as pruning\n+            // nodes)\n+            pfrom->PushMessage(\"sendheaders\");\n+        }\n     }\n \n \n@@ -4402,6 +4451,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             pfrom->fDisconnect = true;\n     }\n \n+    else if (strCommand == \"sendheaders\")\n+    {\n+        LOCK(cs_main);\n+        State(pfrom->GetId())->fPreferHeaders = true;\n+    }\n+\n \n     else if (strCommand == \"inv\")\n     {\n@@ -4446,7 +4501,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     // not a direct successor.\n                     pfrom->PushMessage(\"getheaders\", chainActive.GetLocator(pindexBestHeader), inv.hash);\n                     CNodeState *nodestate = State(pfrom->GetId());\n-                    if (chainActive.Tip()->GetBlockTime() > GetAdjustedTime() - chainparams.GetConsensus().nPowTargetSpacing * 20 &&\n+                    if (CanDirectFetch(chainparams.GetConsensus()) &&\n                         nodestate->nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n                         vToFetch.push_back(inv);\n                         // Mark block as in flight already, even though the actual \"getdata\" message only goes out\n@@ -4554,6 +4609,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             LogPrint(\"net\", \"Ignoring getheaders from peer=%d because node is in initial block download\\n\", pfrom->id);\n             return true;\n         }\n+\n+        CNodeState *nodestate = State(pfrom->GetId());\n         CBlockIndex* pindex = NULL;\n         if (locator.IsNull())\n         {\n@@ -4581,6 +4638,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             if (--nLimit <= 0 || pindex->GetBlockHash() == hashStop)\n                 break;\n         }\n+        // pindex can be NULL either if we sent chainActive.Tip() OR\n+        // if our peer has chainActive.Tip() (and thus we are sending an empty\n+        // headers message). In both cases it's safe to update\n+        // pindexBestHeaderSent to be our tip.\n+        nodestate->pindexBestHeaderSent = pindex ? pindex : chainActive.Tip();\n         pfrom->PushMessage(\"headers\", vHeaders);\n     }\n \n@@ -4772,6 +4834,53 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             pfrom->PushMessage(\"getheaders\", chainActive.GetLocator(pindexLast), uint256());\n         }\n \n+        bool fCanDirectFetch = CanDirectFetch(chainparams.GetConsensus());\n+        CNodeState *nodestate = State(pfrom->GetId());\n+        // If this set of headers is valid and ends in a block with at least as\n+        // much work as our tip, download as much as possible.\n+        if (fCanDirectFetch && pindexLast->IsValid(BLOCK_VALID_TREE) && chainActive.Tip()->nChainWork <= pindexLast->nChainWork) {\n+            vector<CBlockIndex *> vToFetch;\n+            CBlockIndex *pindexWalk = pindexLast;\n+            // Calculate all the blocks we'd need to switch to pindexLast, up to a limit.\n+            while (pindexWalk && !chainActive.Contains(pindexWalk) && vToFetch.size() <= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n+                if (!(pindexWalk->nStatus & BLOCK_HAVE_DATA) &&\n+                        !mapBlocksInFlight.count(pindexWalk->GetBlockHash())) {\n+                    // We don't have this block, and it's not yet in flight.\n+                    vToFetch.push_back(pindexWalk);\n+                }\n+                pindexWalk = pindexWalk->pprev;\n+            }\n+            // If pindexWalk still isn't on our main chain, we're looking at a\n+            // very large reorg at a time we think we're close to caught up to\n+            // the main chain -- this shouldn't really happen.  Bail out on the\n+            // direct fetch and rely on parallel download instead.\n+            if (!chainActive.Contains(pindexWalk)) {\n+                LogPrint(\"net\", \"Large reorg, won't direct fetch to %s (%d)\\n\",\n+                        pindexLast->GetBlockHash().ToString(),\n+                        pindexLast->nHeight);\n+            } else {\n+                vector<CInv> vGetData;\n+                // Download as much as possible, from earliest to latest.\n+                BOOST_REVERSE_FOREACH(CBlockIndex *pindex, vToFetch) {\n+                    if (nodestate->nBlocksInFlight >= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n+                        // Can't download any more from this peer\n+                        break;\n+                    }\n+                    vGetData.push_back(CInv(MSG_BLOCK, pindex->GetBlockHash()));\n+                    MarkBlockAsInFlight(pfrom->GetId(), pindex->GetBlockHash(), chainparams.GetConsensus(), pindex);\n+                    LogPrint(\"net\", \"Requesting block %s from  peer=%d\\n\",\n+                            pindex->GetBlockHash().ToString(), pfrom->id);\n+                }\n+                if (vGetData.size() > 1) {\n+                    LogPrint(\"net\", \"Downloading blocks toward %s (%d) via headers direct fetch\\n\",\n+                            pindexLast->GetBlockHash().ToString(), pindexLast->nHeight);\n+                }\n+                if (vGetData.size() > 0) {\n+                    pfrom->PushMessage(\"getdata\", vGetData);\n+                }\n+            }\n+        }\n+\n         CheckBlockIndex(chainparams.GetConsensus());\n     }\n \n@@ -5297,6 +5406,100 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             GetMainSignals().Broadcast(nTimeBestReceived);\n         }\n \n+        //\n+        // Try sending block announcements via headers\n+        //\n+        {\n+            // If we have less than MAX_BLOCKS_TO_ANNOUNCE in our\n+            // list of block hashes we're relaying, and our peer wants\n+            // headers announcements, then find the first header\n+            // not yet known to our peer but would connect, and send.\n+            // If no header would connect, or if we have too many\n+            // blocks, or if the peer doesn't want headers, just\n+            // add all to the inv queue.\n+            LOCK(pto->cs_inventory);\n+            vector<CBlock> vHeaders;\n+            bool fRevertToInv = (!state.fPreferHeaders || pto->vBlockHashesToAnnounce.size() > MAX_BLOCKS_TO_ANNOUNCE);\n+            CBlockIndex *pBestIndex = NULL; // last header queued for delivery\n+            ProcessBlockAvailability(pto->id); // ensure pindexBestKnownBlock is up-to-date\n+\n+            if (!fRevertToInv) {\n+                bool fFoundStartingHeader = false;\n+                // Try to find first header that our peer doesn't have, and\n+                // then send all headers past that one.  If we come across any\n+                // headers that aren't on chainActive, give up.\n+                BOOST_FOREACH(const uint256 &hash, pto->vBlockHashesToAnnounce) {\n+                    BlockMap::iterator mi = mapBlockIndex.find(hash);\n+                    assert(mi != mapBlockIndex.end());\n+                    CBlockIndex *pindex = mi->second;\n+                    if (chainActive[pindex->nHeight] != pindex) {\n+                        // Bail out if we reorged away from this block\n+                        fRevertToInv = true;\n+                        break;\n+                    }\n+                    assert(pBestIndex == NULL || pindex->pprev == pBestIndex);\n+                    pBestIndex = pindex;\n+                    if (fFoundStartingHeader) {\n+                        // add this to the headers message\n+                        vHeaders.push_back(pindex->GetBlockHeader());\n+                    } else if (PeerHasHeader(&state, pindex)) {\n+                        continue; // keep looking for the first new block\n+                    } else if (pindex->pprev == NULL || PeerHasHeader(&state, pindex->pprev)) {\n+                        // Peer doesn't have this header but they do have the prior one.\n+                        // Start sending headers.\n+                        fFoundStartingHeader = true;\n+                        vHeaders.push_back(pindex->GetBlockHeader());\n+                    } else {\n+                        // Peer doesn't have this header or the prior one -- nothing will\n+                        // connect, so bail out.\n+                        fRevertToInv = true;\n+                        break;\n+                    }\n+                }\n+            }\n+            if (fRevertToInv) {\n+                // If falling back to using an inv, just try to inv the tip.\n+                // The last entry in vBlockHashesToAnnounce was our tip at some point\n+                // in the past.\n+                if (!pto->vBlockHashesToAnnounce.empty()) {\n+                    const uint256 &hashToAnnounce = pto->vBlockHashesToAnnounce.back();\n+                    BlockMap::iterator mi = mapBlockIndex.find(hashToAnnounce);\n+                    assert(mi != mapBlockIndex.end());\n+                    CBlockIndex *pindex = mi->second;\n+\n+                    // Warn if we're announcing a block that is not on the main chain.\n+                    // This should be very rare and could be optimized out.\n+                    // Just log for now.\n+                    if (chainActive[pindex->nHeight] != pindex) {\n+                        LogPrint(\"net\", \"Announcing block %s not on main chain (tip=%s)\\n\",\n+                            hashToAnnounce.ToString(), chainActive.Tip()->GetBlockHash().ToString());\n+                    }\n+\n+                    // If the peer announced this block to us, don't inv it back.\n+                    // (Since block announcements may not be via inv's, we can't solely rely on\n+                    // setInventoryKnown to track this.)\n+                    if (!PeerHasHeader(&state, pindex)) {\n+                        pto->PushInventory(CInv(MSG_BLOCK, hashToAnnounce));\n+                        LogPrint(\"net\", \"%s: sending inv peer=%d hash=%s\\n\", __func__,\n+                            pto->id, hashToAnnounce.ToString());\n+                    }\n+                }\n+            } else if (!vHeaders.empty()) {\n+                if (vHeaders.size() > 1) {\n+                    LogPrint(\"net\", \"%s: %u headers, range (%s, %s), to peer=%d\\n\", __func__,\n+                            vHeaders.size(),\n+                            vHeaders.front().GetHash().ToString(),\n+                            vHeaders.back().GetHash().ToString(), pto->id);\n+                } else {\n+                    LogPrint(\"net\", \"%s: sending header %s to peer=%d\\n\", __func__,\n+                            vHeaders.front().GetHash().ToString(), pto->id);\n+                }\n+                pto->PushMessage(\"headers\", vHeaders);\n+                state.pindexBestHeaderSent = pBestIndex;\n+            }\n+            pto->vBlockHashesToAnnounce.clear();\n+        }\n+\n         //\n         // Message: inventory\n         //"
      },
      {
        "sha": "3dec613fc7439672f81ec349949b7ba322e93262",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50262d89531692473ff557c1061aee22aa4cca1c/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50262d89531692473ff557c1061aee22aa4cca1c/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=50262d89531692473ff557c1061aee22aa4cca1c",
        "patch": "@@ -98,6 +98,9 @@ static const unsigned int DEFAULT_BANSCORE_THRESHOLD = 100;\n \n static const bool DEFAULT_TESTSAFEMODE = false;\n \n+/** Maximum number of headers to announce when relaying blocks with headers message.*/\n+static const unsigned int MAX_BLOCKS_TO_ANNOUNCE = 8;\n+\n struct BlockHasher\n {\n     size_t operator()(const uint256& hash) const { return hash.GetCheapHash(); }"
      },
      {
        "sha": "fb299fb0b4cdc34dbdd0e620fc05aa585f53e92e",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50262d89531692473ff557c1061aee22aa4cca1c/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50262d89531692473ff557c1061aee22aa4cca1c/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=50262d89531692473ff557c1061aee22aa4cca1c",
        "patch": "@@ -390,6 +390,9 @@ class CNode\n     std::vector<CInv> vInventoryToSend;\n     CCriticalSection cs_inventory;\n     std::multimap<int64_t, CInv> mapAskFor;\n+    // Used for headers announcements - unfiltered blocks to relay\n+    // Also protected by cs_inventory\n+    std::vector<uint256> vBlockHashesToAnnounce;\n \n     // Ping time measurement:\n     // The pong reply we're expecting, or 0 if no pong expected.\n@@ -504,6 +507,12 @@ class CNode\n         }\n     }\n \n+    void PushBlockHash(const uint256 &hash)\n+    {\n+        LOCK(cs_inventory);\n+        vBlockHashesToAnnounce.push_back(hash);\n+    }\n+\n     void AskFor(const CInv& inv);\n \n     // TODO: Document the postcondition of this function.  Is cs_vSend locked?"
      },
      {
        "sha": "f7cf18d0b68ca6240928d4364e093baf039ee7a6",
        "filename": "src/version.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50262d89531692473ff557c1061aee22aa4cca1c/src/version.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50262d89531692473ff557c1061aee22aa4cca1c/src/version.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.h?ref=50262d89531692473ff557c1061aee22aa4cca1c",
        "patch": "@@ -9,7 +9,7 @@\n  * network protocol versioning\n  */\n \n-static const int PROTOCOL_VERSION = 70011;\n+static const int PROTOCOL_VERSION = 70012;\n \n //! initial proto version, to be increased after version/verack negotiation\n static const int INIT_PROTO_VERSION = 209;\n@@ -37,4 +37,7 @@ static const int MEMPOOL_GD_VERSION = 60002;\n //! \"filter*\" commands are disabled without NODE_BLOOM after and including this version\n static const int NO_BLOOM_VERSION = 70011;\n \n+//! \"sendheaders\" command and announcing blocks with headers starts with this version\n+static const int SENDHEADERS_VERSION = 70012;\n+\n #endif // BITCOIN_VERSION_H"
      }
    ]
  },
  {
    "sha": "49fb8e89b7036ea19a1275fc16bc0d2936619142",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OWZiOGU4OWI3MDM2ZWExOWExMjc1ZmMxNmJjMGQyOTM2NjE5MTQy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-29T11:08:12Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-29T11:08:12Z"
      },
      "message": "Documentation updates for BIP 130",
      "tree": {
        "sha": "dbb3a38aacfe94fcf662fd4fd61132c5ef0623ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dbb3a38aacfe94fcf662fd4fd61132c5ef0623ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49fb8e89b7036ea19a1275fc16bc0d2936619142",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49fb8e89b7036ea19a1275fc16bc0d2936619142",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/49fb8e89b7036ea19a1275fc16bc0d2936619142",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49fb8e89b7036ea19a1275fc16bc0d2936619142/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "50262d89531692473ff557c1061aee22aa4cca1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50262d89531692473ff557c1061aee22aa4cca1c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/50262d89531692473ff557c1061aee22aa4cca1c"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "962b216123c55daf0e2c4e89c66bd268bea4a26c",
        "filename": "doc/bips.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fb8e89b7036ea19a1275fc16bc0d2936619142/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fb8e89b7036ea19a1275fc16bc0d2936619142/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=49fb8e89b7036ea19a1275fc16bc0d2936619142",
        "patch": "@@ -18,3 +18,4 @@ BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.12.0**):\n * [`BIP 66`](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki): The strict DER rules and associated version 3 blocks have been implemented since **v0.10.0** ([PR #5713](https://github.com/bitcoin/bitcoin/pull/5713)).\n * [`BIP 70`](https://github.com/bitcoin/bips/blob/master/bip-0070.mediawiki) [`71`](https://github.com/bitcoin/bips/blob/master/bip-0071.mediawiki) [`72`](https://github.com/bitcoin/bips/blob/master/bip-0072.mediawiki): Payment Protocol support has been available in Bitcoin Core GUI since **v0.9.0** ([PR #5216](https://github.com/bitcoin/bitcoin/pull/5216)).\n * [`BIP 111`](https://github.com/bitcoin/bips/blob/master/bip-0111.mediawiki): `NODE_BLOOM` service bit added, but only enforced for peer versions `>=70011` as of **v0.12.0** ([PR #6579](https://github.com/bitcoin/bitcoin/pull/6579)).\n+* [`BIP 130`](https://github.com/bitcoin/bips/blob/master/bip-0130.mediawiki): direct headers announcement is negotiated with peer versions `>=70012` as of **v0.12.0** ([PR 6494](https://github.com/bitcoin/bitcoin/pull/6494))."
      },
      {
        "sha": "f7958381b63d600b3c0abba861d18e115cff9d21",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fb8e89b7036ea19a1275fc16bc0d2936619142/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fb8e89b7036ea19a1275fc16bc0d2936619142/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=49fb8e89b7036ea19a1275fc16bc0d2936619142",
        "patch": "@@ -206,6 +206,15 @@ Libsecp256k1 has undergone very extensive testing and validation.\n \n A side effect of this change is that libconsensus no longer depends on OpenSSL.\n \n+Direct headers announcement (BIP 130)\n+-------------------------------------\n+\n+Between compatible peers, BIP 130 direct headers announcement is used. This\n+means that blocks are advertized by announcing their headers directly, instead\n+of just announcing the hash. In a reorganization, all new headers are sent,\n+instead of just the new tip. This can often prevent an extra roundtrip before\n+the actual block is downloaded.\n+\n 0.12.0 Change log\n =================\n "
      }
    ]
  },
  {
    "sha": "5d5ef3a4cf8e32cdf584811eb5415278f4ba9628",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDVlZjNhNGNmOGUzMmNkZjU4NDgxMWViNTQxNTI3OGY0YmE5NjI4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-29T12:03:54Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-29T12:06:13Z"
      },
      "message": "Merge pull request #7129\n\n49fb8e8 Documentation updates for BIP 130 (Pieter Wuille)\n50262d8 Allow block announcements with headers (Suhas Daftuar)",
      "tree": {
        "sha": "dbb3a38aacfe94fcf662fd4fd61132c5ef0623ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dbb3a38aacfe94fcf662fd4fd61132c5ef0623ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d5ef3a4cf8e32cdf584811eb5415278f4ba9628",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWWuo1AAoJENuhpnN5oakxPjMQALgItOdvBXtLanxwlOR/Y1D/\nOolACW70WcxwJAgjouwvJpe1+ECzslNBOHrBrobbxpP10KU5vx7QJDbWO7CTm2VV\nOh0tdjMzwlIwxpAQMd+MJ35Q2IUprvB8FdiWqPjvEHtKBjyXJO3Tlae7yQhKj65Z\nUODtkUOb7UEH5qagGIeT6I5oLkBYpEXfRtRP/MdXmIur0fjqEf5U7Il1UBLfZRxd\n/DrWgvq6E23YuOIj24V+IeGuebZmo7uM5TxlPqKZd5nBbuezNYg0wEd4eoJgqeUI\ndzl1yKohkjywKwOP4f6gFomUQiU21Y/dNm0v6fC3gQdsQ0JV12GA3jcgQqYetjqy\nU3TcUOuTF4tVXDy9FymwrZP/So90F5RosrXI5HcOLwM4s7m3pRnpFUu1sc1O6jdO\nU8kSBP4heLRgovy3oyl3zKeWG6k0z4UuG223YC4dwsoq2h9F86h2J3wUw68g2XIP\nma79nIQCLwOsxPZUqWKpQc7Zg7WNU1xiQbtPk/H6p2cFVTtSoKOcS/zAGBTFsKyZ\nLDiBQvEWJpUt1HpFDGh9Aw5QFnxMIGtPKKP+qrLgMEne1C/R+/q9A0LGn3JnkfGZ\nGDsy8roj2Y+T7sq0zfS5YTwAABig6eeNGiOgqz0d3nNEH/b1+5OcvLl4PZV8PJFc\n3s2H0NAylZM/XMh08ERO\n=WjCE\n-----END PGP SIGNATURE-----",
        "payload": "tree dbb3a38aacfe94fcf662fd4fd61132c5ef0623ca\nparent c894fbbb1dc0778628fa3f246b92d673b3f70cfa\nparent 49fb8e89b7036ea19a1275fc16bc0d2936619142\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1448798634 +0100\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1448798773 +0100\n\nMerge pull request #7129\n\n49fb8e8 Documentation updates for BIP 130 (Pieter Wuille)\n50262d8 Allow block announcements with headers (Suhas Daftuar)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d5ef3a4cf8e32cdf584811eb5415278f4ba9628",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d5ef3a4cf8e32cdf584811eb5415278f4ba9628",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d5ef3a4cf8e32cdf584811eb5415278f4ba9628/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c894fbbb1dc0778628fa3f246b92d673b3f70cfa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c894fbbb1dc0778628fa3f246b92d673b3f70cfa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c894fbbb1dc0778628fa3f246b92d673b3f70cfa"
      },
      {
        "sha": "49fb8e89b7036ea19a1275fc16bc0d2936619142",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49fb8e89b7036ea19a1275fc16bc0d2936619142",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49fb8e89b7036ea19a1275fc16bc0d2936619142"
      }
    ],
    "stats": {
      "total": 805,
      "additions": 791,
      "deletions": 14
    },
    "files": [
      {
        "sha": "962b216123c55daf0e2c4e89c66bd268bea4a26c",
        "filename": "doc/bips.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d5ef3a4cf8e32cdf584811eb5415278f4ba9628/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d5ef3a4cf8e32cdf584811eb5415278f4ba9628/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=5d5ef3a4cf8e32cdf584811eb5415278f4ba9628",
        "patch": "@@ -18,3 +18,4 @@ BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.12.0**):\n * [`BIP 66`](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki): The strict DER rules and associated version 3 blocks have been implemented since **v0.10.0** ([PR #5713](https://github.com/bitcoin/bitcoin/pull/5713)).\n * [`BIP 70`](https://github.com/bitcoin/bips/blob/master/bip-0070.mediawiki) [`71`](https://github.com/bitcoin/bips/blob/master/bip-0071.mediawiki) [`72`](https://github.com/bitcoin/bips/blob/master/bip-0072.mediawiki): Payment Protocol support has been available in Bitcoin Core GUI since **v0.9.0** ([PR #5216](https://github.com/bitcoin/bitcoin/pull/5216)).\n * [`BIP 111`](https://github.com/bitcoin/bips/blob/master/bip-0111.mediawiki): `NODE_BLOOM` service bit added, but only enforced for peer versions `>=70011` as of **v0.12.0** ([PR #6579](https://github.com/bitcoin/bitcoin/pull/6579)).\n+* [`BIP 130`](https://github.com/bitcoin/bips/blob/master/bip-0130.mediawiki): direct headers announcement is negotiated with peer versions `>=70012` as of **v0.12.0** ([PR 6494](https://github.com/bitcoin/bitcoin/pull/6494))."
      },
      {
        "sha": "f7958381b63d600b3c0abba861d18e115cff9d21",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d5ef3a4cf8e32cdf584811eb5415278f4ba9628/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d5ef3a4cf8e32cdf584811eb5415278f4ba9628/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=5d5ef3a4cf8e32cdf584811eb5415278f4ba9628",
        "patch": "@@ -206,6 +206,15 @@ Libsecp256k1 has undergone very extensive testing and validation.\n \n A side effect of this change is that libconsensus no longer depends on OpenSSL.\n \n+Direct headers announcement (BIP 130)\n+-------------------------------------\n+\n+Between compatible peers, BIP 130 direct headers announcement is used. This\n+means that blocks are advertized by announcing their headers directly, instead\n+of just announcing the hash. In a reorganization, all new headers are sent,\n+instead of just the new tip. This can often prevent an extra roundtrip before\n+the actual block is downloaded.\n+\n 0.12.0 Change log\n =================\n "
      },
      {
        "sha": "5004b09c18e52ee6bf9f97762447a362bb091118",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d5ef3a4cf8e32cdf584811eb5415278f4ba9628/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d5ef3a4cf8e32cdf584811eb5415278f4ba9628/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=5d5ef3a4cf8e32cdf584811eb5415278f4ba9628",
        "patch": "@@ -91,6 +91,7 @@\n     'p2p-fullblocktest.py',\n     'blockchain.py',\n     'disablewallet.py',\n+    'sendheaders.py',\n ]\n testScriptsExt = [\n     'bip65-cltv.py',"
      },
      {
        "sha": "d7f4292090d01454a87cba91945b2f15f5d34c7d",
        "filename": "qa/rpc-tests/sendheaders.py",
        "status": "added",
        "additions": 519,
        "deletions": 0,
        "changes": 519,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d5ef3a4cf8e32cdf584811eb5415278f4ba9628/qa/rpc-tests/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d5ef3a4cf8e32cdf584811eb5415278f4ba9628/qa/rpc-tests/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/sendheaders.py?ref=5d5ef3a4cf8e32cdf584811eb5415278f4ba9628",
        "patch": "@@ -0,0 +1,519 @@\n+#!/usr/bin/env python2\n+#\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import time\n+from test_framework.blocktools import create_block, create_coinbase\n+\n+'''\n+SendHeadersTest -- test behavior of headers messages to announce blocks.\n+\n+Setup: \n+\n+- Two nodes, two p2p connections to node0. One p2p connection should only ever\n+  receive inv's (omitted from testing description below, this is our control).\n+  Second node is used for creating reorgs.\n+\n+Part 1: No headers announcements before \"sendheaders\"\n+a. node mines a block [expect: inv]\n+   send getdata for the block [expect: block]\n+b. node mines another block [expect: inv]\n+   send getheaders and getdata [expect: headers, then block]\n+c. node mines another block [expect: inv]\n+   peer mines a block, announces with header [expect: getdata]\n+d. node mines another block [expect: inv]\n+\n+Part 2: After \"sendheaders\", headers announcements should generally work.\n+a. peer sends sendheaders [expect: no response]\n+   peer sends getheaders with current tip [expect: no response]\n+b. node mines a block [expect: tip header]\n+c. for N in 1, ..., 10:\n+   * for announce-type in {inv, header}\n+     - peer mines N blocks, announces with announce-type\n+       [ expect: getheaders/getdata or getdata, deliver block(s) ]\n+     - node mines a block [ expect: 1 header ]\n+\n+Part 3: Headers announcements stop after large reorg and resume after getheaders or inv from peer.\n+- For response-type in {inv, getheaders}\n+  * node mines a 7 block reorg [ expect: headers announcement of 8 blocks ]\n+  * node mines an 8-block reorg [ expect: inv at tip ]\n+  * peer responds with getblocks/getdata [expect: inv, blocks ]\n+  * node mines another block [ expect: inv at tip, peer sends getdata, expect: block ]\n+  * node mines another block at tip [ expect: inv ]\n+  * peer responds with getheaders with an old hashstop more than 8 blocks back [expect: headers]\n+  * peer requests block [ expect: block ]\n+  * node mines another block at tip [ expect: inv, peer sends getdata, expect: block ]\n+  * peer sends response-type [expect headers if getheaders, getheaders/getdata if mining new block]\n+  * node mines 1 block [expect: 1 header, peer responds with getdata]\n+\n+Part 4: Test direct fetch behavior\n+a. Announce 2 old block headers.\n+   Expect: no getdata requests.\n+b. Announce 3 new blocks via 1 headers message.\n+   Expect: one getdata request for all 3 blocks.\n+   (Send blocks.)\n+c. Announce 1 header that forks off the last two blocks.\n+   Expect: no response.\n+d. Announce 1 more header that builds on that fork.\n+   Expect: one getdata request for two blocks.\n+e. Announce 16 more headers that build on that fork.\n+   Expect: getdata request for 14 more blocks.\n+f. Announce 1 more header that builds on that fork.\n+   Expect: no response.\n+'''\n+\n+class BaseNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.create_callback_map()\n+        self.connection = None\n+        self.last_inv = None\n+        self.last_headers = None\n+        self.last_block = None\n+        self.ping_counter = 1\n+        self.last_pong = msg_pong(0)\n+        self.last_getdata = None\n+        self.sleep_time = 0.05\n+        self.block_announced = False\n+\n+    def clear_last_announcement(self):\n+        with mininode_lock:\n+            self.block_announced = False\n+            self.last_inv = None\n+            self.last_headers = None\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    # Request data for a list of block hashes\n+    def get_data(self, block_hashes):\n+        msg = msg_getdata()\n+        for x in block_hashes:\n+            msg.inv.append(CInv(2, x))\n+        self.connection.send_message(msg)\n+\n+    def get_headers(self, locator, hashstop):\n+        msg = msg_getheaders()\n+        msg.locator.vHave = locator\n+        msg.hashstop = hashstop\n+        self.connection.send_message(msg)\n+\n+    def send_block_inv(self, blockhash):\n+        msg = msg_inv()\n+        msg.inv = [CInv(2, blockhash)]\n+        self.connection.send_message(msg)\n+\n+    # Wrapper for the NodeConn's send_message function\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def on_inv(self, conn, message):\n+        self.last_inv = message\n+        self.block_announced = True\n+\n+    def on_headers(self, conn, message):\n+        self.last_headers = message\n+        self.block_announced = True\n+\n+    def on_block(self, conn, message):\n+        self.last_block = message.block\n+        self.last_block.calc_sha256()\n+\n+    def on_getdata(self, conn, message):\n+        self.last_getdata = message\n+\n+    def on_pong(self, conn, message):\n+        self.last_pong = message\n+\n+    # Test whether the last announcement we received had the\n+    # right header or the right inv\n+    # inv and headers should be lists of block hashes\n+    def check_last_announcement(self, headers=None, inv=None):\n+        expect_headers = headers if headers != None else []\n+        expect_inv = inv if inv != None else []\n+        test_function = lambda: self.block_announced\n+        self.sync(test_function)\n+        with mininode_lock:\n+            self.block_announced = False\n+\n+            success = True\n+            compare_inv = []\n+            if self.last_inv != None:\n+                compare_inv = [x.hash for x in self.last_inv.inv]\n+            if compare_inv != expect_inv:\n+                success = False\n+\n+            hash_headers = []\n+            if self.last_headers != None:\n+                # treat headers as a list of block hashes\n+                hash_headers = [ x.sha256 for x in self.last_headers.headers ]\n+            if hash_headers != expect_headers:\n+                success = False\n+\n+            self.last_inv = None\n+            self.last_headers = None\n+        return success\n+\n+    # Syncing helpers\n+    def sync(self, test_function, timeout=60):\n+        while timeout > 0:\n+            with mininode_lock:\n+                if test_function():\n+                    return\n+            time.sleep(self.sleep_time)\n+            timeout -= self.sleep_time\n+        raise AssertionError(\"Sync failed to complete\")\n+        \n+    def sync_with_ping(self, timeout=60):\n+        self.send_message(msg_ping(nonce=self.ping_counter))\n+        test_function = lambda: self.last_pong.nonce == self.ping_counter\n+        self.sync(test_function, timeout)\n+        self.ping_counter += 1\n+        return\n+\n+    def wait_for_block(self, blockhash, timeout=60):\n+        test_function = lambda: self.last_block != None and self.last_block.sha256 == blockhash\n+        self.sync(test_function, timeout)\n+        return\n+\n+    def wait_for_getdata(self, hash_list, timeout=60):\n+        if hash_list == []:\n+            return\n+\n+        test_function = lambda: self.last_getdata != None and [x.hash for x in self.last_getdata.inv] == hash_list\n+        self.sync(test_function, timeout)\n+        return\n+\n+    def send_header_for_blocks(self, new_blocks):\n+        headers_message = msg_headers()\n+        headers_message.headers = [ CBlockHeader(b) for b in new_blocks ]\n+        self.send_message(headers_message)\n+\n+    def send_getblocks(self, locator):\n+        getblocks_message = msg_getblocks()\n+        getblocks_message.locator.vHave = locator\n+        self.send_message(getblocks_message)\n+\n+# InvNode: This peer should only ever receive inv's, because it doesn't ever send a\n+# \"sendheaders\" message.\n+class InvNode(BaseNode):\n+    def __init__(self):\n+        BaseNode.__init__(self)\n+\n+# TestNode: This peer is the one we use for most of the testing.\n+class TestNode(BaseNode):\n+    def __init__(self):\n+        BaseNode.__init__(self)\n+\n+class SendHeadersTest(BitcoinTestFramework):\n+    def setup_chain(self):\n+        initialize_chain_clean(self.options.tmpdir, 2)\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.nodes = start_nodes(2, self.options.tmpdir, [[\"-debug\", \"-logtimemicros=1\"]]*2)\n+        connect_nodes(self.nodes[0], 1)\n+\n+    # mine count blocks and return the new tip\n+    def mine_blocks(self, count):\n+        self.nodes[0].generate(count)\n+        return int(self.nodes[0].getbestblockhash(), 16)\n+\n+    # mine a reorg that invalidates length blocks (replacing them with\n+    # length+1 blocks).\n+    # peers is the p2p nodes we're using; we clear their state after the\n+    # to-be-reorged-out blocks are mined, so that we don't break later tests.\n+    # return the list of block hashes newly mined\n+    def mine_reorg(self, length, peers):\n+        self.nodes[0].generate(length) # make sure all invalidated blocks are node0's\n+        sync_blocks(self.nodes, wait=0.1)\n+        [x.clear_last_announcement() for x in peers]\n+\n+        tip_height = self.nodes[1].getblockcount()\n+        hash_to_invalidate = self.nodes[1].getblockhash(tip_height-(length-1))\n+        self.nodes[1].invalidateblock(hash_to_invalidate)\n+        all_hashes = self.nodes[1].generate(length+1) # Must be longer than the orig chain\n+        sync_blocks(self.nodes, wait=0.1)\n+        return [int(x, 16) for x in all_hashes]\n+\n+    def run_test(self):\n+        # Setup the p2p connections and start up the network thread.\n+        inv_node = InvNode()\n+        test_node = TestNode()\n+\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], inv_node))\n+        # Set nServices to 0 for test_node, so no block download will occur outside of\n+        # direct fetching\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_node, services=0))\n+        inv_node.add_connection(connections[0])\n+        test_node.add_connection(connections[1])\n+\n+        NetworkThread().start() # Start up network handling in another thread\n+\n+        # Test logic begins here\n+        inv_node.wait_for_verack()\n+        test_node.wait_for_verack()\n+\n+        tip = int(self.nodes[0].getbestblockhash(), 16)\n+\n+        # PART 1\n+        # 1. Mine a block; expect inv announcements each time\n+        print \"Part 1: headers don't start before sendheaders message...\"\n+        for i in xrange(4):\n+            old_tip = tip\n+            tip = self.mine_blocks(1)\n+            assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n+            assert_equal(test_node.check_last_announcement(inv=[tip]), True)\n+            # Try a few different responses; none should affect next announcement\n+            if i == 0:\n+                # first request the block\n+                test_node.get_data([tip])\n+                test_node.wait_for_block(tip, timeout=5)\n+            elif i == 1:\n+                # next try requesting header and block\n+                test_node.get_headers(locator=[old_tip], hashstop=tip)\n+                test_node.get_data([tip])\n+                test_node.wait_for_block(tip)\n+                test_node.clear_last_announcement() # since we requested headers...\n+            elif i == 2:\n+                # this time announce own block via headers\n+                height = self.nodes[0].getblockcount()\n+                last_time = self.nodes[0].getblock(self.nodes[0].getbestblockhash())['time']\n+                block_time = last_time + 1\n+                new_block = create_block(tip, create_coinbase(height+1), block_time)\n+                new_block.solve()\n+                test_node.send_header_for_blocks([new_block])\n+                test_node.wait_for_getdata([new_block.sha256], timeout=5)\n+                test_node.send_message(msg_block(new_block))\n+                test_node.sync_with_ping() # make sure this block is processed\n+                inv_node.clear_last_announcement()\n+                test_node.clear_last_announcement()\n+\n+        print \"Part 1: success!\"\n+        print \"Part 2: announce blocks with headers after sendheaders message...\"\n+        # PART 2\n+        # 2. Send a sendheaders message and test that headers announcements\n+        # commence and keep working.\n+        test_node.send_message(msg_sendheaders())\n+        prev_tip = int(self.nodes[0].getbestblockhash(), 16)\n+        test_node.get_headers(locator=[prev_tip], hashstop=0L)\n+        test_node.sync_with_ping()\n+        test_node.clear_last_announcement() # Clear out empty headers response\n+\n+        # Now that we've synced headers, headers announcements should work\n+        tip = self.mine_blocks(1)\n+        assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n+        assert_equal(test_node.check_last_announcement(headers=[tip]), True)\n+\n+        height = self.nodes[0].getblockcount()+1\n+        block_time += 10  # Advance far enough ahead\n+        for i in xrange(10):\n+            # Mine i blocks, and alternate announcing either via\n+            # inv (of tip) or via headers. After each, new blocks\n+            # mined by the node should successfully be announced\n+            # with block header, even though the blocks are never requested\n+            for j in xrange(2):\n+                blocks = []\n+                for b in xrange(i+1):\n+                    blocks.append(create_block(tip, create_coinbase(height), block_time))\n+                    blocks[-1].solve()\n+                    tip = blocks[-1].sha256\n+                    block_time += 1\n+                    height += 1\n+                if j == 0:\n+                    # Announce via inv\n+                    test_node.send_block_inv(tip)\n+                    test_node.wait_for_getdata([tip], timeout=5)\n+                    # Test that duplicate inv's won't result in duplicate\n+                    # getdata requests, or duplicate headers announcements\n+                    inv_node.send_block_inv(tip)\n+                    # Should have received a getheaders as well!\n+                    test_node.send_header_for_blocks(blocks)\n+                    test_node.wait_for_getdata([x.sha256 for x in blocks[0:-1]], timeout=5)\n+                    [ inv_node.send_block_inv(x.sha256) for x in blocks[0:-1] ]\n+                    inv_node.sync_with_ping()\n+                else:\n+                    # Announce via headers\n+                    test_node.send_header_for_blocks(blocks)\n+                    test_node.wait_for_getdata([x.sha256 for x in blocks], timeout=5)\n+                    # Test that duplicate headers won't result in duplicate\n+                    # getdata requests (the check is further down)\n+                    inv_node.send_header_for_blocks(blocks)\n+                    inv_node.sync_with_ping()\n+                [ test_node.send_message(msg_block(x)) for x in blocks ]\n+                test_node.sync_with_ping()\n+                inv_node.sync_with_ping()\n+                # This block should not be announced to the inv node (since it also\n+                # broadcast it)\n+                assert_equal(inv_node.last_inv, None)\n+                assert_equal(inv_node.last_headers, None)\n+                inv_node.clear_last_announcement()\n+                test_node.clear_last_announcement()\n+                tip = self.mine_blocks(1)\n+                assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n+                assert_equal(test_node.check_last_announcement(headers=[tip]), True)\n+                height += 1\n+                block_time += 1\n+\n+        print \"Part 2: success!\"\n+\n+        print \"Part 3: headers announcements can stop after large reorg, and resume after headers/inv from peer...\"\n+\n+        # PART 3.  Headers announcements can stop after large reorg, and resume after\n+        # getheaders or inv from peer.\n+        for j in xrange(2):\n+            # First try mining a reorg that can propagate with header announcement\n+            new_block_hashes = self.mine_reorg(length=7, peers=[test_node, inv_node])\n+            tip = new_block_hashes[-1]\n+            assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n+            assert_equal(test_node.check_last_announcement(headers=new_block_hashes), True)\n+\n+            block_time += 8 \n+\n+            # Mine a too-large reorg, which should be announced with a single inv\n+            new_block_hashes = self.mine_reorg(length=8, peers=[test_node, inv_node])\n+            tip = new_block_hashes[-1]\n+            assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n+            assert_equal(test_node.check_last_announcement(inv=[tip]), True)\n+\n+            block_time += 9\n+\n+            fork_point = self.nodes[0].getblock(\"%02x\" % new_block_hashes[0])[\"previousblockhash\"]\n+            fork_point = int(fork_point, 16)\n+\n+            # Use getblocks/getdata\n+            test_node.send_getblocks(locator = [fork_point])\n+            assert_equal(test_node.check_last_announcement(inv=new_block_hashes[0:-1]), True)\n+            test_node.get_data(new_block_hashes)\n+            test_node.wait_for_block(new_block_hashes[-1])\n+\n+            for i in xrange(3):\n+                # Mine another block, still should get only an inv\n+                tip = self.mine_blocks(1)\n+                assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n+                assert_equal(test_node.check_last_announcement(inv=[tip]), True)\n+                if i == 0:\n+                    # Just get the data -- shouldn't cause headers announcements to resume\n+                    test_node.get_data([tip])\n+                    test_node.wait_for_block(tip)\n+                elif i == 1:\n+                    # Send a getheaders message that shouldn't trigger headers announcements\n+                    # to resume (best header sent will be too old)\n+                    test_node.get_headers(locator=[fork_point], hashstop=new_block_hashes[1])\n+                    test_node.get_data([tip])\n+                    test_node.wait_for_block(tip)\n+                    test_node.clear_last_announcement()\n+                elif i == 2:\n+                    test_node.get_data([tip])\n+                    test_node.wait_for_block(tip)\n+                    # This time, try sending either a getheaders to trigger resumption\n+                    # of headers announcements, or mine a new block and inv it, also \n+                    # triggering resumption of headers announcements.\n+                    if j == 0:\n+                        test_node.get_headers(locator=[tip], hashstop=0L)\n+                        test_node.sync_with_ping()\n+                    else:\n+                        test_node.send_block_inv(tip)\n+                        test_node.sync_with_ping()\n+            # New blocks should now be announced with header\n+            tip = self.mine_blocks(1)\n+            assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n+            assert_equal(test_node.check_last_announcement(headers=[tip]), True)\n+\n+        print \"Part 3: success!\"\n+\n+        print \"Part 4: Testing direct fetch behavior...\"\n+        tip = self.mine_blocks(1)\n+        height = self.nodes[0].getblockcount() + 1\n+        last_time = self.nodes[0].getblock(self.nodes[0].getbestblockhash())['time']\n+        block_time = last_time + 1\n+\n+        # Create 2 blocks.  Send the blocks, then send the headers.\n+        blocks = []\n+        for b in xrange(2):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            inv_node.send_message(msg_block(blocks[-1]))\n+\n+        inv_node.sync_with_ping() # Make sure blocks are processed\n+        test_node.last_getdata = None\n+        test_node.send_header_for_blocks(blocks);\n+        test_node.sync_with_ping()\n+        # should not have received any getdata messages\n+        with mininode_lock:\n+            assert_equal(test_node.last_getdata, None)\n+\n+        # This time, direct fetch should work\n+        blocks = []\n+        for b in xrange(3):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+\n+        test_node.send_header_for_blocks(blocks)\n+        test_node.sync_with_ping()\n+        test_node.wait_for_getdata([x.sha256 for x in blocks], timeout=test_node.sleep_time)\n+\n+        [ test_node.send_message(msg_block(x)) for x in blocks ]\n+\n+        test_node.sync_with_ping()\n+\n+        # Now announce a header that forks the last two blocks\n+        tip = blocks[0].sha256\n+        height -= 1\n+        blocks = []\n+\n+        # Create extra blocks for later\n+        for b in xrange(20):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+\n+        # Announcing one block on fork should not trigger direct fetch\n+        # (less work than tip)\n+        test_node.last_getdata = None\n+        test_node.send_header_for_blocks(blocks[0:1])\n+        test_node.sync_with_ping()\n+        with mininode_lock:\n+            assert_equal(test_node.last_getdata, None)\n+\n+        # Announcing one more block on fork should trigger direct fetch for\n+        # both blocks (same work as tip)\n+        test_node.send_header_for_blocks(blocks[1:2])\n+        test_node.sync_with_ping()\n+        test_node.wait_for_getdata([x.sha256 for x in blocks[0:2]], timeout=test_node.sleep_time)\n+\n+        # Announcing 16 more headers should trigger direct fetch for 14 more\n+        # blocks\n+        test_node.send_header_for_blocks(blocks[2:18])\n+        test_node.sync_with_ping()\n+        test_node.wait_for_getdata([x.sha256 for x in blocks[2:16]], timeout=test_node.sleep_time)\n+\n+        # Announcing 1 more header should not trigger any response\n+        test_node.last_getdata = None\n+        test_node.send_header_for_blocks(blocks[18:19])\n+        test_node.sync_with_ping()\n+        with mininode_lock:\n+            assert_equal(test_node.last_getdata, None)\n+\n+        print \"Part 4: success!\"\n+\n+        # Finally, check that the inv node never received a getdata request,\n+        # throughout the test\n+        assert_equal(inv_node.last_getdata, None)\n+\n+if __name__ == '__main__':\n+    SendHeadersTest().main()"
      },
      {
        "sha": "64985d58e2f56b95258aae524d8f79d7063ac421",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 29,
        "deletions": 3,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d5ef3a4cf8e32cdf584811eb5415278f4ba9628/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d5ef3a4cf8e32cdf584811eb5415278f4ba9628/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=5d5ef3a4cf8e32cdf584811eb5415278f4ba9628",
        "patch": "@@ -751,8 +751,8 @@ def __repr__(self):\n class msg_getdata(object):\n     command = \"getdata\"\n \n-    def __init__(self):\n-        self.inv = []\n+    def __init__(self, inv=None):\n+        self.inv = inv if inv != None else []\n \n     def deserialize(self, f):\n         self.inv = deser_vector(f, CInv)\n@@ -905,6 +905,20 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_mempool()\"\n \n+class msg_sendheaders(object):\n+    command = \"sendheaders\"\n+\n+    def __init__(self):\n+        pass\n+\n+    def deserialize(self, f):\n+        pass\n+\n+    def serialize(self):\n+        return \"\"\n+\n+    def __repr__(self):\n+        return \"msg_sendheaders()\"\n \n # getheaders message has\n # number of entries\n@@ -990,6 +1004,17 @@ class NodeConnCB(object):\n     def __init__(self):\n         self.verack_received = False\n \n+    # Spin until verack message is received from the node.\n+    # Tests may want to use this as a signal that the test can begin.\n+    # This can be called from the testing thread, so it needs to acquire the\n+    # global lock.\n+    def wait_for_verack(self):\n+        while True:\n+            with mininode_lock:\n+                if self.verack_received:\n+                    return\n+            time.sleep(0.05)\n+\n     # Derived classes should call this function once to set the message map\n     # which associates the derived classes' functions to incoming messages\n     def create_callback_map(self):\n@@ -1084,7 +1109,7 @@ class NodeConn(asyncore.dispatcher):\n         \"regtest\": \"\\xfa\\xbf\\xb5\\xda\"    # regtest\n     }\n \n-    def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\"):\n+    def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=1):\n         asyncore.dispatcher.__init__(self, map=mininode_socket_map)\n         self.log = logging.getLogger(\"NodeConn(%s:%d)\" % (dstaddr, dstport))\n         self.dstaddr = dstaddr\n@@ -1102,6 +1127,7 @@ def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\"):\n \n         # stuff version msg into sendbuf\n         vt = msg_version()\n+        vt.nServices = services\n         vt.addrTo.ip = self.dstaddr\n         vt.addrTo.port = self.dstport\n         vt.addrFrom.ip = \"0.0.0.0\""
      },
      {
        "sha": "3450ed6c3f3655cb20fbd0bdea841b73a711a729",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d5ef3a4cf8e32cdf584811eb5415278f4ba9628/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d5ef3a4cf8e32cdf584811eb5415278f4ba9628/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=5d5ef3a4cf8e32cdf584811eb5415278f4ba9628",
        "patch": "@@ -51,6 +51,9 @@ CBlockLocator CChain::GetLocator(const CBlockIndex *pindex) const {\n }\n \n const CBlockIndex *CChain::FindFork(const CBlockIndex *pindex) const {\n+    if (pindex == NULL) {\n+        return NULL;\n+    }\n     if (pindex->nHeight > Height())\n         pindex = pindex->GetAncestor(Height());\n     while (pindex && !Contains(pindex))"
      },
      {
        "sha": "31913956b73e23a46f460f699b7b6394c6d98c9e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 213,
        "deletions": 10,
        "changes": 223,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d5ef3a4cf8e32cdf584811eb5415278f4ba9628/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d5ef3a4cf8e32cdf584811eb5415278f4ba9628/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5d5ef3a4cf8e32cdf584811eb5415278f4ba9628",
        "patch": "@@ -247,6 +247,8 @@ struct CNodeState {\n     uint256 hashLastUnknownBlock;\n     //! The last full block we both have.\n     CBlockIndex *pindexLastCommonBlock;\n+    //! The best header we have sent our peer.\n+    CBlockIndex *pindexBestHeaderSent;\n     //! Whether we've started headers synchronization with this peer.\n     bool fSyncStarted;\n     //! Since when we're stalling block download progress (in microseconds), or 0.\n@@ -256,6 +258,8 @@ struct CNodeState {\n     int nBlocksInFlightValidHeaders;\n     //! Whether we consider this a preferred download peer.\n     bool fPreferredDownload;\n+    //! Whether this peer wants invs or headers (when possible) for block announcements.\n+    bool fPreferHeaders;\n \n     CNodeState() {\n         fCurrentlyConnected = false;\n@@ -264,11 +268,13 @@ struct CNodeState {\n         pindexBestKnownBlock = NULL;\n         hashLastUnknownBlock.SetNull();\n         pindexLastCommonBlock = NULL;\n+        pindexBestHeaderSent = NULL;\n         fSyncStarted = false;\n         nStallingSince = 0;\n         nBlocksInFlight = 0;\n         nBlocksInFlightValidHeaders = 0;\n         fPreferredDownload = false;\n+        fPreferHeaders = false;\n     }\n };\n \n@@ -398,6 +404,22 @@ void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) {\n     }\n }\n \n+// Requires cs_main\n+bool CanDirectFetch(const Consensus::Params &consensusParams)\n+{\n+    return chainActive.Tip()->GetBlockTime() > GetAdjustedTime() - consensusParams.nPowTargetSpacing * 20;\n+}\n+\n+// Requires cs_main\n+bool PeerHasHeader(CNodeState *state, CBlockIndex *pindex)\n+{\n+    if (state->pindexBestKnownBlock && pindex == state->pindexBestKnownBlock->GetAncestor(pindex->nHeight))\n+        return true;\n+    if (state->pindexBestHeaderSent && pindex == state->pindexBestHeaderSent->GetAncestor(pindex->nHeight))\n+        return true;\n+    return false;\n+}\n+\n /** Find the last common ancestor two blocks have.\n  *  Both pa and pb must be non-NULL. */\n CBlockIndex* LastCommonAncestor(CBlockIndex* pa, CBlockIndex* pb) {\n@@ -2557,16 +2579,17 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n  * or an activated best chain. pblock is either NULL or a pointer to a block\n  * that is already loaded (to avoid loading it again from disk).\n  */\n-bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams, const CBlock* pblock)\n-{\n-    CBlockIndex *pindexNewTip = NULL;\n+bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, const CBlock *pblock) {\n     CBlockIndex *pindexMostWork = NULL;\n     do {\n         boost::this_thread::interruption_point();\n \n+        CBlockIndex *pindexNewTip = NULL;\n+        const CBlockIndex *pindexFork;\n         bool fInitialDownload;\n         {\n             LOCK(cs_main);\n+            CBlockIndex *pindexOldTip = chainActive.Tip();\n             pindexMostWork = FindMostWorkChain();\n \n             // Whether we have anything to do at all.\n@@ -2577,26 +2600,44 @@ bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams,\n                 return false;\n \n             pindexNewTip = chainActive.Tip();\n+            pindexFork = chainActive.FindFork(pindexOldTip);\n             fInitialDownload = IsInitialBlockDownload();\n         }\n         // When we reach this point, we switched to a new tip (stored in pindexNewTip).\n \n         // Notifications/callbacks that can run without cs_main\n         if (!fInitialDownload) {\n-            uint256 hashNewTip = pindexNewTip->GetBlockHash();\n+            // Find the hashes of all blocks that weren't previously in the best chain.\n+            std::vector<uint256> vHashes;\n+            CBlockIndex *pindexToAnnounce = pindexNewTip;\n+            while (pindexToAnnounce != pindexFork) {\n+                vHashes.push_back(pindexToAnnounce->GetBlockHash());\n+                pindexToAnnounce = pindexToAnnounce->pprev;\n+                if (vHashes.size() == MAX_BLOCKS_TO_ANNOUNCE) {\n+                    // Limit announcements in case of a huge reorganization.\n+                    // Rely on the peer's synchronization mechanism in that case.\n+                    break;\n+                }\n+            }\n             // Relay inventory, but don't relay old inventory during initial block download.\n             int nBlockEstimate = 0;\n             if (fCheckpointsEnabled)\n                 nBlockEstimate = Checkpoints::GetTotalBlocksEstimate(chainparams.Checkpoints());\n             {\n                 LOCK(cs_vNodes);\n-                BOOST_FOREACH(CNode* pnode, vNodes)\n-                    if (chainActive.Height() > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate))\n-                        pnode->PushInventory(CInv(MSG_BLOCK, hashNewTip));\n+                BOOST_FOREACH(CNode* pnode, vNodes) {\n+                    if (chainActive.Height() > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate)) {\n+                        BOOST_REVERSE_FOREACH(const uint256& hash, vHashes) {\n+                            pnode->PushBlockHash(hash);\n+                        }\n+                    }\n+                }\n             }\n             // Notify external listeners about the new tip.\n-            GetMainSignals().UpdatedBlockTip(pindexNewTip);\n-            uiInterface.NotifyBlockTip(hashNewTip);\n+            if (!vHashes.empty()) {\n+                GetMainSignals().UpdatedBlockTip(pindexNewTip);\n+                uiInterface.NotifyBlockTip(vHashes.front());\n+            }\n         }\n     } while(pindexMostWork != chainActive.Tip());\n     CheckBlockIndex(chainparams.GetConsensus());\n@@ -4333,6 +4374,14 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             LOCK(cs_main);\n             State(pfrom->GetId())->fCurrentlyConnected = true;\n         }\n+\n+        if (pfrom->nVersion >= SENDHEADERS_VERSION) {\n+            // Tell our peer we prefer to receive headers rather than inv's\n+            // We send this to non-NODE NETWORK peers as well, because even\n+            // non-NODE NETWORK peers can announce blocks (such as pruning\n+            // nodes)\n+            pfrom->PushMessage(\"sendheaders\");\n+        }\n     }\n \n \n@@ -4402,6 +4451,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             pfrom->fDisconnect = true;\n     }\n \n+    else if (strCommand == \"sendheaders\")\n+    {\n+        LOCK(cs_main);\n+        State(pfrom->GetId())->fPreferHeaders = true;\n+    }\n+\n \n     else if (strCommand == \"inv\")\n     {\n@@ -4446,7 +4501,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     // not a direct successor.\n                     pfrom->PushMessage(\"getheaders\", chainActive.GetLocator(pindexBestHeader), inv.hash);\n                     CNodeState *nodestate = State(pfrom->GetId());\n-                    if (chainActive.Tip()->GetBlockTime() > GetAdjustedTime() - chainparams.GetConsensus().nPowTargetSpacing * 20 &&\n+                    if (CanDirectFetch(chainparams.GetConsensus()) &&\n                         nodestate->nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n                         vToFetch.push_back(inv);\n                         // Mark block as in flight already, even though the actual \"getdata\" message only goes out\n@@ -4554,6 +4609,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             LogPrint(\"net\", \"Ignoring getheaders from peer=%d because node is in initial block download\\n\", pfrom->id);\n             return true;\n         }\n+\n+        CNodeState *nodestate = State(pfrom->GetId());\n         CBlockIndex* pindex = NULL;\n         if (locator.IsNull())\n         {\n@@ -4581,6 +4638,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             if (--nLimit <= 0 || pindex->GetBlockHash() == hashStop)\n                 break;\n         }\n+        // pindex can be NULL either if we sent chainActive.Tip() OR\n+        // if our peer has chainActive.Tip() (and thus we are sending an empty\n+        // headers message). In both cases it's safe to update\n+        // pindexBestHeaderSent to be our tip.\n+        nodestate->pindexBestHeaderSent = pindex ? pindex : chainActive.Tip();\n         pfrom->PushMessage(\"headers\", vHeaders);\n     }\n \n@@ -4772,6 +4834,53 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             pfrom->PushMessage(\"getheaders\", chainActive.GetLocator(pindexLast), uint256());\n         }\n \n+        bool fCanDirectFetch = CanDirectFetch(chainparams.GetConsensus());\n+        CNodeState *nodestate = State(pfrom->GetId());\n+        // If this set of headers is valid and ends in a block with at least as\n+        // much work as our tip, download as much as possible.\n+        if (fCanDirectFetch && pindexLast->IsValid(BLOCK_VALID_TREE) && chainActive.Tip()->nChainWork <= pindexLast->nChainWork) {\n+            vector<CBlockIndex *> vToFetch;\n+            CBlockIndex *pindexWalk = pindexLast;\n+            // Calculate all the blocks we'd need to switch to pindexLast, up to a limit.\n+            while (pindexWalk && !chainActive.Contains(pindexWalk) && vToFetch.size() <= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n+                if (!(pindexWalk->nStatus & BLOCK_HAVE_DATA) &&\n+                        !mapBlocksInFlight.count(pindexWalk->GetBlockHash())) {\n+                    // We don't have this block, and it's not yet in flight.\n+                    vToFetch.push_back(pindexWalk);\n+                }\n+                pindexWalk = pindexWalk->pprev;\n+            }\n+            // If pindexWalk still isn't on our main chain, we're looking at a\n+            // very large reorg at a time we think we're close to caught up to\n+            // the main chain -- this shouldn't really happen.  Bail out on the\n+            // direct fetch and rely on parallel download instead.\n+            if (!chainActive.Contains(pindexWalk)) {\n+                LogPrint(\"net\", \"Large reorg, won't direct fetch to %s (%d)\\n\",\n+                        pindexLast->GetBlockHash().ToString(),\n+                        pindexLast->nHeight);\n+            } else {\n+                vector<CInv> vGetData;\n+                // Download as much as possible, from earliest to latest.\n+                BOOST_REVERSE_FOREACH(CBlockIndex *pindex, vToFetch) {\n+                    if (nodestate->nBlocksInFlight >= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n+                        // Can't download any more from this peer\n+                        break;\n+                    }\n+                    vGetData.push_back(CInv(MSG_BLOCK, pindex->GetBlockHash()));\n+                    MarkBlockAsInFlight(pfrom->GetId(), pindex->GetBlockHash(), chainparams.GetConsensus(), pindex);\n+                    LogPrint(\"net\", \"Requesting block %s from  peer=%d\\n\",\n+                            pindex->GetBlockHash().ToString(), pfrom->id);\n+                }\n+                if (vGetData.size() > 1) {\n+                    LogPrint(\"net\", \"Downloading blocks toward %s (%d) via headers direct fetch\\n\",\n+                            pindexLast->GetBlockHash().ToString(), pindexLast->nHeight);\n+                }\n+                if (vGetData.size() > 0) {\n+                    pfrom->PushMessage(\"getdata\", vGetData);\n+                }\n+            }\n+        }\n+\n         CheckBlockIndex(chainparams.GetConsensus());\n     }\n \n@@ -5297,6 +5406,100 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             GetMainSignals().Broadcast(nTimeBestReceived);\n         }\n \n+        //\n+        // Try sending block announcements via headers\n+        //\n+        {\n+            // If we have less than MAX_BLOCKS_TO_ANNOUNCE in our\n+            // list of block hashes we're relaying, and our peer wants\n+            // headers announcements, then find the first header\n+            // not yet known to our peer but would connect, and send.\n+            // If no header would connect, or if we have too many\n+            // blocks, or if the peer doesn't want headers, just\n+            // add all to the inv queue.\n+            LOCK(pto->cs_inventory);\n+            vector<CBlock> vHeaders;\n+            bool fRevertToInv = (!state.fPreferHeaders || pto->vBlockHashesToAnnounce.size() > MAX_BLOCKS_TO_ANNOUNCE);\n+            CBlockIndex *pBestIndex = NULL; // last header queued for delivery\n+            ProcessBlockAvailability(pto->id); // ensure pindexBestKnownBlock is up-to-date\n+\n+            if (!fRevertToInv) {\n+                bool fFoundStartingHeader = false;\n+                // Try to find first header that our peer doesn't have, and\n+                // then send all headers past that one.  If we come across any\n+                // headers that aren't on chainActive, give up.\n+                BOOST_FOREACH(const uint256 &hash, pto->vBlockHashesToAnnounce) {\n+                    BlockMap::iterator mi = mapBlockIndex.find(hash);\n+                    assert(mi != mapBlockIndex.end());\n+                    CBlockIndex *pindex = mi->second;\n+                    if (chainActive[pindex->nHeight] != pindex) {\n+                        // Bail out if we reorged away from this block\n+                        fRevertToInv = true;\n+                        break;\n+                    }\n+                    assert(pBestIndex == NULL || pindex->pprev == pBestIndex);\n+                    pBestIndex = pindex;\n+                    if (fFoundStartingHeader) {\n+                        // add this to the headers message\n+                        vHeaders.push_back(pindex->GetBlockHeader());\n+                    } else if (PeerHasHeader(&state, pindex)) {\n+                        continue; // keep looking for the first new block\n+                    } else if (pindex->pprev == NULL || PeerHasHeader(&state, pindex->pprev)) {\n+                        // Peer doesn't have this header but they do have the prior one.\n+                        // Start sending headers.\n+                        fFoundStartingHeader = true;\n+                        vHeaders.push_back(pindex->GetBlockHeader());\n+                    } else {\n+                        // Peer doesn't have this header or the prior one -- nothing will\n+                        // connect, so bail out.\n+                        fRevertToInv = true;\n+                        break;\n+                    }\n+                }\n+            }\n+            if (fRevertToInv) {\n+                // If falling back to using an inv, just try to inv the tip.\n+                // The last entry in vBlockHashesToAnnounce was our tip at some point\n+                // in the past.\n+                if (!pto->vBlockHashesToAnnounce.empty()) {\n+                    const uint256 &hashToAnnounce = pto->vBlockHashesToAnnounce.back();\n+                    BlockMap::iterator mi = mapBlockIndex.find(hashToAnnounce);\n+                    assert(mi != mapBlockIndex.end());\n+                    CBlockIndex *pindex = mi->second;\n+\n+                    // Warn if we're announcing a block that is not on the main chain.\n+                    // This should be very rare and could be optimized out.\n+                    // Just log for now.\n+                    if (chainActive[pindex->nHeight] != pindex) {\n+                        LogPrint(\"net\", \"Announcing block %s not on main chain (tip=%s)\\n\",\n+                            hashToAnnounce.ToString(), chainActive.Tip()->GetBlockHash().ToString());\n+                    }\n+\n+                    // If the peer announced this block to us, don't inv it back.\n+                    // (Since block announcements may not be via inv's, we can't solely rely on\n+                    // setInventoryKnown to track this.)\n+                    if (!PeerHasHeader(&state, pindex)) {\n+                        pto->PushInventory(CInv(MSG_BLOCK, hashToAnnounce));\n+                        LogPrint(\"net\", \"%s: sending inv peer=%d hash=%s\\n\", __func__,\n+                            pto->id, hashToAnnounce.ToString());\n+                    }\n+                }\n+            } else if (!vHeaders.empty()) {\n+                if (vHeaders.size() > 1) {\n+                    LogPrint(\"net\", \"%s: %u headers, range (%s, %s), to peer=%d\\n\", __func__,\n+                            vHeaders.size(),\n+                            vHeaders.front().GetHash().ToString(),\n+                            vHeaders.back().GetHash().ToString(), pto->id);\n+                } else {\n+                    LogPrint(\"net\", \"%s: sending header %s to peer=%d\\n\", __func__,\n+                            vHeaders.front().GetHash().ToString(), pto->id);\n+                }\n+                pto->PushMessage(\"headers\", vHeaders);\n+                state.pindexBestHeaderSent = pBestIndex;\n+            }\n+            pto->vBlockHashesToAnnounce.clear();\n+        }\n+\n         //\n         // Message: inventory\n         //"
      },
      {
        "sha": "3dec613fc7439672f81ec349949b7ba322e93262",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d5ef3a4cf8e32cdf584811eb5415278f4ba9628/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d5ef3a4cf8e32cdf584811eb5415278f4ba9628/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=5d5ef3a4cf8e32cdf584811eb5415278f4ba9628",
        "patch": "@@ -98,6 +98,9 @@ static const unsigned int DEFAULT_BANSCORE_THRESHOLD = 100;\n \n static const bool DEFAULT_TESTSAFEMODE = false;\n \n+/** Maximum number of headers to announce when relaying blocks with headers message.*/\n+static const unsigned int MAX_BLOCKS_TO_ANNOUNCE = 8;\n+\n struct BlockHasher\n {\n     size_t operator()(const uint256& hash) const { return hash.GetCheapHash(); }"
      },
      {
        "sha": "fb299fb0b4cdc34dbdd0e620fc05aa585f53e92e",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d5ef3a4cf8e32cdf584811eb5415278f4ba9628/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d5ef3a4cf8e32cdf584811eb5415278f4ba9628/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=5d5ef3a4cf8e32cdf584811eb5415278f4ba9628",
        "patch": "@@ -390,6 +390,9 @@ class CNode\n     std::vector<CInv> vInventoryToSend;\n     CCriticalSection cs_inventory;\n     std::multimap<int64_t, CInv> mapAskFor;\n+    // Used for headers announcements - unfiltered blocks to relay\n+    // Also protected by cs_inventory\n+    std::vector<uint256> vBlockHashesToAnnounce;\n \n     // Ping time measurement:\n     // The pong reply we're expecting, or 0 if no pong expected.\n@@ -504,6 +507,12 @@ class CNode\n         }\n     }\n \n+    void PushBlockHash(const uint256 &hash)\n+    {\n+        LOCK(cs_inventory);\n+        vBlockHashesToAnnounce.push_back(hash);\n+    }\n+\n     void AskFor(const CInv& inv);\n \n     // TODO: Document the postcondition of this function.  Is cs_vSend locked?"
      },
      {
        "sha": "f7cf18d0b68ca6240928d4364e093baf039ee7a6",
        "filename": "src/version.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d5ef3a4cf8e32cdf584811eb5415278f4ba9628/src/version.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d5ef3a4cf8e32cdf584811eb5415278f4ba9628/src/version.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.h?ref=5d5ef3a4cf8e32cdf584811eb5415278f4ba9628",
        "patch": "@@ -9,7 +9,7 @@\n  * network protocol versioning\n  */\n \n-static const int PROTOCOL_VERSION = 70011;\n+static const int PROTOCOL_VERSION = 70012;\n \n //! initial proto version, to be increased after version/verack negotiation\n static const int INIT_PROTO_VERSION = 209;\n@@ -37,4 +37,7 @@ static const int MEMPOOL_GD_VERSION = 60002;\n //! \"filter*\" commands are disabled without NODE_BLOOM after and including this version\n static const int NO_BLOOM_VERSION = 70011;\n \n+//! \"sendheaders\" command and announcing blocks with headers starts with this version\n+static const int SENDHEADERS_VERSION = 70012;\n+\n #endif // BITCOIN_VERSION_H"
      }
    ]
  },
  {
    "sha": "9ac63d6d3056600c1b784da0e6b98f679fa98b6e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YWM2M2Q2ZDMwNTY2MDBjMWI3ODRkYTBlNmI5OGY2NzlmYTk4YjZl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-26T17:42:07Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-29T12:24:02Z"
      },
      "message": "Keep track of explicit wallet conflicts instead of using mempool",
      "tree": {
        "sha": "8f0dc33e56a2e7214cf3f3ccd84ebcba45c89103",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f0dc33e56a2e7214cf3f3ccd84ebcba45c89103"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ac63d6d3056600c1b784da0e6b98f679fa98b6e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ac63d6d3056600c1b784da0e6b98f679fa98b6e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ac63d6d3056600c1b784da0e6b98f679fa98b6e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ac63d6d3056600c1b784da0e6b98f679fa98b6e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d5ef3a4cf8e32cdf584811eb5415278f4ba9628",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d5ef3a4cf8e32cdf584811eb5415278f4ba9628",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d5ef3a4cf8e32cdf584811eb5415278f4ba9628"
      }
    ],
    "stats": {
      "total": 150,
      "additions": 124,
      "deletions": 26
    },
    "files": [
      {
        "sha": "96c830d177eef79358e093935ebed61e48223d98",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ac63d6d3056600c1b784da0e6b98f679fa98b6e/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ac63d6d3056600c1b784da0e6b98f679fa98b6e/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=9ac63d6d3056600c1b784da0e6b98f679fa98b6e",
        "patch": "@@ -215,6 +215,24 @@ of just announcing the hash. In a reorganization, all new headers are sent,\n instead of just the new tip. This can often prevent an extra roundtrip before\n the actual block is downloaded.\n \n+Negative confirmations and conflict detection\n+---------------------------------------------\n+\n+The wallet will now report a negative number for confirmations that indicates\n+how deep in the block chain the conflict is found. For example, if a transaction\n+A has 5 confirmations and spends the same input as a wallet transaction B, B\n+will be reported as having -5 confirmations. If another wallet transaction C\n+spends an output from B, it will also be reported as having -5 confirmations.\n+To detect conflicts with historical transactions in the chain a one-time\n+`-rescan` may be needed.\n+\n+Unlike earlier versions, unconfirmed but non-conflicting transactions will never\n+get a negative confirmation count. They are not treated as spendable unless\n+they're coming from ourself (change) and accepted into our local mempool,\n+however. The new \"trusted\" field in the `listtransactions` RPC output\n+indicates whether outputs of an unconfirmed transaction are considered\n+spendable.\n+\n 0.12.0 Change log\n =================\n "
      },
      {
        "sha": "b1f603a1924452836fd4ff30ba25c438d894a729",
        "filename": "qa/rpc-tests/txn_clone.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ac63d6d3056600c1b784da0e6b98f679fa98b6e/qa/rpc-tests/txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ac63d6d3056600c1b784da0e6b98f679fa98b6e/qa/rpc-tests/txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_clone.py?ref=9ac63d6d3056600c1b784da0e6b98f679fa98b6e",
        "patch": "@@ -136,7 +136,7 @@ def run_test(self):\n         tx2 = self.nodes[0].gettransaction(txid2)\n         \n         # Verify expected confirmations\n-        assert_equal(tx1[\"confirmations\"], -1)\n+        assert_equal(tx1[\"confirmations\"], -2)\n         assert_equal(tx1_clone[\"confirmations\"], 2)\n         assert_equal(tx2[\"confirmations\"], 1)\n "
      },
      {
        "sha": "d4665b3d4217cff5ec138c72a46f4920e0324ba8",
        "filename": "qa/rpc-tests/txn_doublespend.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ac63d6d3056600c1b784da0e6b98f679fa98b6e/qa/rpc-tests/txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ac63d6d3056600c1b784da0e6b98f679fa98b6e/qa/rpc-tests/txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_doublespend.py?ref=9ac63d6d3056600c1b784da0e6b98f679fa98b6e",
        "patch": "@@ -99,22 +99,23 @@ def run_test(self):\n         # Now give doublespend and its parents to miner:\n         self.nodes[2].sendrawtransaction(fund_foo_tx[\"hex\"])\n         self.nodes[2].sendrawtransaction(fund_bar_tx[\"hex\"])\n-        self.nodes[2].sendrawtransaction(doublespend[\"hex\"])\n+        doublespend_txid = self.nodes[2].sendrawtransaction(doublespend[\"hex\"])\n         # ... mine a block...\n         self.nodes[2].generate(1)\n \n         # Reconnect the split network, and sync chain:\n         connect_nodes(self.nodes[1], 2)\n         self.nodes[2].generate(1)  # Mine another block to make sure we sync\n         sync_blocks(self.nodes)\n+        assert_equal(self.nodes[0].gettransaction(doublespend_txid)[\"confirmations\"], 2)\n \n         # Re-fetch transaction info:\n         tx1 = self.nodes[0].gettransaction(txid1)\n         tx2 = self.nodes[0].gettransaction(txid2)\n-        \n+\n         # Both transactions should be conflicted\n-        assert_equal(tx1[\"confirmations\"], -1)\n-        assert_equal(tx2[\"confirmations\"], -1)\n+        assert_equal(tx1[\"confirmations\"], -2)\n+        assert_equal(tx2[\"confirmations\"], -2)\n \n         # Node0's total balance should be starting balance, plus 100BTC for \n         # two more matured blocks, minus 1240 for the double-spend, plus fees (which are"
      },
      {
        "sha": "a4ab2248a518c22cb0b113dfaa1950c191487e40",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ac63d6d3056600c1b784da0e6b98f679fa98b6e/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ac63d6d3056600c1b784da0e6b98f679fa98b6e/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9ac63d6d3056600c1b784da0e6b98f679fa98b6e",
        "patch": "@@ -65,6 +65,8 @@ void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n         entry.push_back(Pair(\"blockhash\", wtx.hashBlock.GetHex()));\n         entry.push_back(Pair(\"blockindex\", wtx.nIndex));\n         entry.push_back(Pair(\"blocktime\", mapBlockIndex[wtx.hashBlock]->GetBlockTime()));\n+    } else {\n+        entry.push_back(Pair(\"trusted\", wtx.IsTrusted()));\n     }\n     uint256 hash = wtx.GetHash();\n     entry.push_back(Pair(\"txid\", hash.GetHex()));\n@@ -1421,7 +1423,9 @@ UniValue listtransactions(const UniValue& params, bool fHelp)\n             \"    \\\"fee\\\": x.xxx,             (numeric) The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the \\n\"\n             \"                                         'send' category of transactions.\\n\"\n             \"    \\\"confirmations\\\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and \\n\"\n-            \"                                         'receive' category of transactions.\\n\"\n+            \"                                         'receive' category of transactions. Negative confirmations indicate the\\n\"\n+            \"                                         transation conflicts with the block chain\\n\"\n+            \"    \\\"trusted\\\": xxx            (bool) Whether we consider the outputs of this unconfirmed transaction safe to spend.\\n\"\n             \"    \\\"blockhash\\\": \\\"hashvalue\\\", (string) The block hash containing the transaction. Available for 'send' and 'receive'\\n\"\n             \"                                          category of transactions.\\n\"\n             \"    \\\"blockindex\\\": n,          (numeric) The block index containing the transaction. Available for 'send' and 'receive'\\n\""
      },
      {
        "sha": "57a41ec6656cd8468a44a195526520e9343c7173",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 83,
        "deletions": 14,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ac63d6d3056600c1b784da0e6b98f679fa98b6e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ac63d6d3056600c1b784da0e6b98f679fa98b6e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9ac63d6d3056600c1b784da0e6b98f679fa98b6e",
        "patch": "@@ -608,6 +608,14 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletD\n         wtx.BindWallet(this);\n         wtxOrdered.insert(make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n         AddToSpends(hash);\n+        BOOST_FOREACH(const CTxIn& txin, wtx.vin) {\n+            if (mapWallet.count(txin.prevout.hash)) {\n+                CWalletTx& prevtx = mapWallet[txin.prevout.hash];\n+                if (prevtx.nIndex == -1 && !prevtx.hashBlock.IsNull()) {\n+                    MarkConflicted(prevtx.hashBlock, wtx.GetHash());\n+                }\n+            }\n+        }\n     }\n     else\n     {\n@@ -727,6 +735,20 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pbl\n {\n     {\n         AssertLockHeld(cs_wallet);\n+\n+        if (pblock) {\n+            BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+                std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range = mapTxSpends.equal_range(txin.prevout);\n+                while (range.first != range.second) {\n+                    if (range.first->second != tx.GetHash()) {\n+                        LogPrintf(\"Transaction %s (in block %s) conflicts with wallet transaction %s (both spend %s:%i)\\n\", tx.GetHash().ToString(), pblock->GetHash().ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);\n+                        MarkConflicted(pblock->GetHash(), range.first->second);\n+                    }\n+                    range.first++;\n+                }\n+            }\n+        }\n+\n         bool fExisted = mapWallet.count(tx.GetHash()) != 0;\n         if (fExisted && !fUpdate) return false;\n         if (fExisted || IsMine(tx) || IsFromMe(tx))\n@@ -747,9 +769,57 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pbl\n     return false;\n }\n \n+void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n+{\n+    LOCK2(cs_main, cs_wallet);\n+\n+    CBlockIndex* pindex;\n+    assert(mapBlockIndex.count(hashBlock));\n+    pindex = mapBlockIndex[hashBlock];\n+    int conflictconfirms = 0;\n+    if (chainActive.Contains(pindex)) {\n+        conflictconfirms = -(chainActive.Height() - pindex->nHeight + 1);\n+    }\n+    assert(conflictconfirms < 0);\n+\n+    // Do not flush the wallet here for performance reasons\n+    CWalletDB walletdb(strWalletFile, \"r+\", false);\n+\n+    std::deque<uint256> todo;\n+    std::set<uint256> done;\n+\n+    todo.push_back(hashTx);\n+\n+    while (!todo.empty()) {\n+        uint256 now = todo.front();\n+        todo.pop_front();\n+        done.insert(now);\n+        assert(mapWallet.count(now));\n+        CWalletTx& wtx = mapWallet[now];\n+        int currentconfirm = wtx.GetDepthInMainChain();\n+        if (conflictconfirms < currentconfirm) {\n+            // Block is 'more conflicted' than current confirm; update.\n+            // Mark transaction as conflicted with this block.\n+            wtx.nIndex = -1;\n+            wtx.hashBlock = hashBlock;\n+            wtx.MarkDirty();\n+            wtx.WriteToDisk(&walletdb);\n+            // Iterate over all its outputs, and mark transactions in the wallet that spend them conflicted too\n+            TxSpends::const_iterator iter = mapTxSpends.lower_bound(COutPoint(now, 0));\n+            while (iter != mapTxSpends.end() && iter->first.hash == now) {\n+                 if (!done.count(iter->second)) {\n+                     todo.push_back(iter->second);\n+                 }\n+                 iter++;\n+            }\n+        }\n+    }\n+}\n+\n void CWallet::SyncTransaction(const CTransaction& tx, const CBlock* pblock)\n {\n     LOCK2(cs_main, cs_wallet);\n+\n     if (!AddToWalletIfInvolvingMe(tx, pblock, true))\n         return; // Not one of ours\n \n@@ -1089,7 +1159,7 @@ void CWallet::ReacceptWalletTransactions()\n \n         int nDepth = wtx.GetDepthInMainChain();\n \n-        if (!wtx.IsCoinBase() && nDepth < 0) {\n+        if (!wtx.IsCoinBase() && nDepth == 0) {\n             mapSorted.insert(std::make_pair(wtx.nOrderPos, &wtx));\n         }\n     }\n@@ -1303,6 +1373,14 @@ bool CWalletTx::IsTrusted() const\n     if (!bSpendZeroConfChange || !IsFromMe(ISMINE_ALL)) // using wtx's cached debit\n         return false;\n \n+    // Don't trust unconfirmed transactions from us unless they are in the mempool.\n+    {\n+        LOCK(mempool.cs);\n+        if (!mempool.exists(GetHash())) {\n+            return false;\n+        }\n+    }\n+\n     // Trusted if all inputs are from us and are in the mempool:\n     BOOST_FOREACH(const CTxIn& txin, vin)\n     {\n@@ -1879,6 +1957,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                     //a chance at a free transaction.\n                     //But mempool inputs might still be in the mempool, so their age stays 0\n                     int age = pcoin.first->GetDepthInMainChain();\n+                    assert(age >= 0);\n                     if (age != 0)\n                         age += 1;\n                     dPriority += (double)nCredit * age;\n@@ -2814,9 +2893,9 @@ int CMerkleTx::SetMerkleBranch(const CBlock& block)\n     return chainActive.Height() - pindex->nHeight + 1;\n }\n \n-int CMerkleTx::GetDepthInMainChainINTERNAL(const CBlockIndex* &pindexRet) const\n+int CMerkleTx::GetDepthInMainChain(const CBlockIndex* &pindexRet) const\n {\n-    if (hashBlock.IsNull() || nIndex == -1)\n+    if (hashBlock.IsNull())\n         return 0;\n     AssertLockHeld(cs_main);\n \n@@ -2829,17 +2908,7 @@ int CMerkleTx::GetDepthInMainChainINTERNAL(const CBlockIndex* &pindexRet) const\n         return 0;\n \n     pindexRet = pindex;\n-    return chainActive.Height() - pindex->nHeight + 1;\n-}\n-\n-int CMerkleTx::GetDepthInMainChain(const CBlockIndex* &pindexRet) const\n-{\n-    AssertLockHeld(cs_main);\n-    int nResult = GetDepthInMainChainINTERNAL(pindexRet);\n-    if (nResult == 0 && !mempool.exists(GetHash()))\n-        return -1; // Not in chain, not in mempool\n-\n-    return nResult;\n+    return ((nIndex == -1) ? (-1) : 1) * (chainActive.Height() - pindex->nHeight + 1);\n }\n \n int CMerkleTx::GetBlocksToMaturity() const"
      },
      {
        "sha": "bc6e40ab98760e8b66b8dd63670dd644a2da3cb3",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 12,
        "deletions": 6,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ac63d6d3056600c1b784da0e6b98f679fa98b6e/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ac63d6d3056600c1b784da0e6b98f679fa98b6e/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=9ac63d6d3056600c1b784da0e6b98f679fa98b6e",
        "patch": "@@ -156,11 +156,14 @@ struct COutputEntry\n /** A transaction with a merkle branch linking it to the block chain. */\n class CMerkleTx : public CTransaction\n {\n-private:\n-    int GetDepthInMainChainINTERNAL(const CBlockIndex* &pindexRet) const;\n-\n public:\n     uint256 hashBlock;\n+\n+    /* An nIndex == -1 means that hashBlock (in nonzero) refers to the earliest\n+     * block in the chain we know this or any in-wallet dependency conflicts\n+     * with. Older clients interpret nIndex == -1 as unconfirmed for backward\n+     * compatibility.\n+     */\n     int nIndex;\n \n     CMerkleTx()\n@@ -193,16 +196,15 @@ class CMerkleTx : public CTransaction\n \n     int SetMerkleBranch(const CBlock& block);\n \n-\n     /**\n      * Return depth of transaction in blockchain:\n-     * -1  : not in blockchain, and not in memory pool (conflicted transaction)\n+     * <0  : conflicts with a transaction this deep in the blockchain\n      *  0  : in memory pool, waiting to be included in a block\n      * >=1 : this many blocks deep in the main chain\n      */\n     int GetDepthInMainChain(const CBlockIndex* &pindexRet) const;\n     int GetDepthInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n-    bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChainINTERNAL(pindexRet) > 0; }\n+    bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet) > 0; }\n     int GetBlocksToMaturity() const;\n     bool AcceptToMemoryPool(bool fLimitFree=true, bool fRejectAbsurdFee=true);\n };\n@@ -481,6 +483,10 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void AddToSpends(const COutPoint& outpoint, const uint256& wtxid);\n     void AddToSpends(const uint256& wtxid);\n \n+    /* Mark a transaction (and its in-wallet descendants) as conflicting with a particular block. */\n+    void MarkConflicted(const uint256& hashBlock, const uint256& hashTx);\n+\n+\n     void SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator>);\n \n public:"
      }
    ]
  },
  {
    "sha": "d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNTJmYmYwMGUzMmZiMDU2NTY1MmM5YTYyY2RhZjJiYzFlMmRkZGYw",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2015-11-11T15:49:32Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2015-11-29T13:34:20Z"
      },
      "message": "Added additional config option for multiple RPC users.",
      "tree": {
        "sha": "c1f980618b73660416c80dcf6967aaa9b82806f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c1f980618b73660416c80dcf6967aaa9b82806f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e54ebbf6009716a7abcd4d8d3f7bd910e88decdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc"
      }
    ],
    "stats": {
      "total": 232,
      "additions": 231,
      "deletions": 1
    },
    "files": [
      {
        "sha": "fc204b75cecb95a302fa467b3343c732eeca3670",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0",
        "patch": "@@ -78,6 +78,7 @@\n     'mempool_spendcoinbase.py',\n     'mempool_coinbase_spends.py',\n     'httpbasics.py',\n+    'multi_rpc.py',\n     'zapwallettxes.py',\n     'proxy_test.py',\n     'merkle_blocks.py',"
      },
      {
        "sha": "62071d426e3781ba787016f722ee7b6fd99250fd",
        "filename": "qa/rpc-tests/multi_rpc.py",
        "status": "added",
        "additions": 122,
        "deletions": 0,
        "changes": 122,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0/qa/rpc-tests/multi_rpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0/qa/rpc-tests/multi_rpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/multi_rpc.py?ref=d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0",
        "patch": "@@ -0,0 +1,122 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test mulitple rpc user config option rpcauth\n+#\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import base64\n+\n+try:\n+    import http.client as httplib\n+except ImportError:\n+    import httplib\n+try:\n+    import urllib.parse as urlparse\n+except ImportError:\n+    import urlparse\n+\n+class HTTPBasicsTest (BitcoinTestFramework):\n+    def setup_nodes(self):\n+        return start_nodes(4, self.options.tmpdir)\n+\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain(self.options.tmpdir)\n+        #Append rpcauth to bitcoin.conf before initialization\n+        rpcauth = \"rpcauth=rt:93648e835a54c573682c2eb19f882535$7681e9c5b74bdd85e78166031d2058e1069b3ed7ed967c93fc63abba06f31144\"\n+        rpcauth2 = \"rpcauth=rt2:f8607b1a88861fac29dfccf9b52ff9f$ff36a0c23c8c62b4846112e50fa888416e94c17bfd4c42f88fd8f55ec6a3137e\"\n+        with open(os.path.join(self.options.tmpdir+\"/node0\", \"bitcoin.conf\"), 'a') as f:\n+            f.write(rpcauth+\"\\n\")\n+            f.write(rpcauth2+\"\\n\")\n+\n+    def run_test(self):\n+\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urlparse.urlparse(self.nodes[0].url)\n+\n+        #Old authpair\n+        authpair = url.username + ':' + url.password\n+\n+        #New authpair generated via contrib/rpcuser tool\n+        rpcauth = \"rpcauth=rt:93648e835a54c573682c2eb19f882535$7681e9c5b74bdd85e78166031d2058e1069b3ed7ed967c93fc63abba06f31144\"\n+        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n+\n+        #Second authpair with different username\n+        rpcauth2 = \"rpcauth=rt2:f8607b1a88861fac29dfccf9b52ff9f$ff36a0c23c8c62b4846112e50fa888416e94c17bfd4c42f88fd8f55ec6a3137e\"\n+        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n+        authpairnew = \"rt:\"+password\n+\n+        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair)}\n+\n+        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn.connect()\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        resp = conn.getresponse()\n+        assert_equal(resp.status==401, False)\n+        conn.close()\n+        \n+        #Use new authpair to confirm both work\n+        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpairnew)}\n+\n+        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn.connect()\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        resp = conn.getresponse()\n+        assert_equal(resp.status==401, False)\n+        conn.close()\n+\n+        #Wrong login name with rt's password\n+        authpairnew = \"rtwrong:\"+password\n+        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpairnew)}\n+\n+        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn.connect()\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        resp = conn.getresponse()\n+        assert_equal(resp.status==401, True)\n+        conn.close()\n+\n+        #Wrong password for rt\n+        authpairnew = \"rt:\"+password+\"wrong\"\n+        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpairnew)}\n+\n+        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn.connect()\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        resp = conn.getresponse()\n+        assert_equal(resp.status==401, True)\n+        conn.close()\n+\n+        #Correct for rt2\n+        authpairnew = \"rt2:\"+password2\n+        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpairnew)}\n+\n+        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn.connect()\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        resp = conn.getresponse()\n+        assert_equal(resp.status==401, False)\n+        conn.close()\n+\n+        #Wrong password for rt2\n+        authpairnew = \"rt2:\"+password2+\"wrong\"\n+        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpairnew)}\n+\n+        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn.connect()\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        resp = conn.getresponse()\n+        assert_equal(resp.status==401, True)\n+        conn.close()\n+\n+\n+\n+if __name__ == '__main__':\n+    HTTPBasicsTest ().main ()"
      },
      {
        "sha": "7c2c909a421c49cac93cfe80ad17cc72a1f6adc1",
        "filename": "share/rpcuser/README.md",
        "status": "added",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0/share/rpcuser/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0/share/rpcuser/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/rpcuser/README.md?ref=d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0",
        "patch": "@@ -0,0 +1,11 @@\n+RPC Tools\n+---------------------\n+\n+### [RPCUser](/share/rpcuser) ###\n+\n+Create an RPC user login credential.\n+\n+Usage:\n+\n+./rpcuser.py <username>\n+"
      },
      {
        "sha": "9fd176908b788db7af316051664cf7d1d42f4f3e",
        "filename": "share/rpcuser/rpcuser.py",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0/share/rpcuser/rpcuser.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0/share/rpcuser/rpcuser.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/rpcuser/rpcuser.py?ref=d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0",
        "patch": "@@ -0,0 +1,41 @@\n+#!/usr/bin/env python2 \n+# Copyright (c) 2015 The Bitcoin Core developers \n+# Distributed under the MIT software license, see the accompanying \n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import hashlib\n+import sys\n+import os\n+from random import SystemRandom\n+import base64\n+import hmac\n+\n+if len(sys.argv) < 2:\n+    sys.stderr.write('Please include username as an argument.\\n')\n+    sys.exit(0)\n+\n+username = sys.argv[1]\n+\n+#This uses os.urandom() underneath\n+cryptogen = SystemRandom()\n+\n+#Create 16 byte hex salt\n+salt_sequence = [cryptogen.randrange(256) for i in range(16)]\n+hexseq = list(map(hex, salt_sequence))\n+salt = \"\".join([x[2:] for x in hexseq])\n+\n+#Create 32 byte b64 password\n+password = base64.urlsafe_b64encode(os.urandom(32))\n+\n+digestmod = hashlib.sha256\n+\n+if sys.version_info.major >= 3:\n+    password = password.decode('utf-8')\n+    digestmod = 'SHA256'\n+ \n+m = hmac.new(bytearray(salt, 'utf-8'), bytearray(password, 'utf-8'), digestmod)\n+result = m.hexdigest()\n+\n+print(\"String to be appended to bitcoin.conf:\")\n+print(\"rpcauth=\"+username+\":\"+salt+\"$\"+result)\n+print(\"Your password:\\n\"+password)"
      },
      {
        "sha": "2920aa26f75ffe8dc7bec546956cc4371d2ca7de",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 1,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0",
        "patch": "@@ -10,8 +10,12 @@\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n #include \"ui_interface.h\"\n+#include \"crypto/hmac_sha256.h\"\n+#include <stdio.h>\n+#include \"utilstrencodings.h\"\n \n #include <boost/algorithm/string.hpp> // boost::trim\n+#include <boost/foreach.hpp> //BOOST_FOREACH\n \n /** Simple one-shot callback timer to be used by the RPC mechanism to e.g.\n  * re-lock the wellet.\n@@ -72,6 +76,50 @@ static void JSONErrorReply(HTTPRequest* req, const UniValue& objError, const Uni\n     req->WriteReply(nStatus, strReply);\n }\n \n+//This function checks username and password against -rpcauth\n+//entries from config file.\n+static bool multiUserAuthorized(std::string strUserPass)\n+{    \n+    if (strUserPass.find(\":\") == std::string::npos) {\n+        return false;\n+    }\n+    std::string strUser = strUserPass.substr(0, strUserPass.find(\":\"));\n+    std::string strPass = strUserPass.substr(strUserPass.find(\":\") + 1);\n+\n+    if (mapMultiArgs.count(\"-rpcauth\") > 0) {\n+        //Search for multi-user login/pass \"rpcauth\" from config\n+        BOOST_FOREACH(std::string strRPCAuth, mapMultiArgs[\"-rpcauth\"])\n+        {\n+            std::vector<std::string> vFields;\n+            boost::split(vFields, strRPCAuth, boost::is_any_of(\":$\"));\n+            if (vFields.size() != 3) {\n+                //Incorrect formatting in config file\n+                continue;\n+            }\n+\n+            std::string strName = vFields[0];\n+            if (!TimingResistantEqual(strName, strUser)) {\n+                continue;\n+            }\n+\n+            std::string strSalt = vFields[1];\n+            std::string strHash = vFields[2];\n+\n+            unsigned int KEY_SIZE = 32;\n+            unsigned char *out = new unsigned char[KEY_SIZE]; \n+            \n+            CHMAC_SHA256(reinterpret_cast<const unsigned char*>(strSalt.c_str()), strSalt.size()).Write(reinterpret_cast<const unsigned char*>(strPass.c_str()), strPass.size()).Finalize(out);\n+            std::vector<unsigned char> hexvec(out, out+KEY_SIZE);\n+            std::string strHashFromPass = HexStr(hexvec);\n+\n+            if (TimingResistantEqual(strHashFromPass, strHash)) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n+\n static bool RPCAuthorized(const std::string& strAuth)\n {\n     if (strRPCUserColonPass.empty()) // Belt-and-suspenders measure if InitRPCAuthentication was not called\n@@ -81,7 +129,12 @@ static bool RPCAuthorized(const std::string& strAuth)\n     std::string strUserPass64 = strAuth.substr(6);\n     boost::trim(strUserPass64);\n     std::string strUserPass = DecodeBase64(strUserPass64);\n-    return TimingResistantEqual(strUserPass, strRPCUserColonPass);\n+    \n+    //Check if authorized under single-user field\n+    if (TimingResistantEqual(strUserPass, strRPCUserColonPass)) {\n+        return true;\n+    }\n+    return multiUserAuthorized(strUserPass);\n }\n \n static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n@@ -157,6 +210,7 @@ static bool InitRPCAuthentication()\n             return false;\n         }\n     } else {\n+        LogPrintf(\"Config options rpcuser and rpcpassword will soon be deprecated. Locally-run instances may remove rpcuser to use cookie-based auth, or may be replaced with rpcauth. Please see share/rpcuser for rpcauth auth generation.\");\n         strRPCUserColonPass = mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"];\n     }\n     return true;"
      },
      {
        "sha": "a3be15225ffc4ddbc7f2779c39ba7138713b54c0",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0",
        "patch": "@@ -482,6 +482,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-rpcbind=<addr>\", _(\"Bind to given address to listen for JSON-RPC connections. Use [host]:port notation for IPv6. This option can be specified multiple times (default: bind to all interfaces)\"));\n     strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n+    strUsage += HelpMessageOpt(\"-rpcauth=<userpw>\", _(\"Username and hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcuser. This option can be specified multiple times\"));\n     strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), 8332, 18332));\n     strUsage += HelpMessageOpt(\"-rpcallowip=<ip>\", _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\"));\n     strUsage += HelpMessageOpt(\"-rpcthreads=<n>\", strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), DEFAULT_HTTP_THREADS));"
      }
    ]
  },
  {
    "sha": "cb491e778828d322800793cb229884c904f172b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYjQ5MWU3Nzg4MjhkMzIyODAwNzkzY2IyMjk4ODRjOTA0ZjE3MmI1",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-11-27T14:12:08Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-11-29T20:19:37Z"
      },
      "message": "Trivial: Fix warning introduced by #7053 by casting to uint64_t",
      "tree": {
        "sha": "9239b8a15ad845955f955a09e7370cfd1f17f8e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9239b8a15ad845955f955a09e7370cfd1f17f8e9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb491e778828d322800793cb229884c904f172b5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb491e778828d322800793cb229884c904f172b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cb491e778828d322800793cb229884c904f172b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb491e778828d322800793cb229884c904f172b5/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a94cd67e80555aec3ba13d5129b1f5402b0c5b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a94cd67e80555aec3ba13d5129b1f5402b0c5b4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a94cd67e80555aec3ba13d5129b1f5402b0c5b4"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "8aa0c71d610d82e9d7f5f21cb97959a009739ff6",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb491e778828d322800793cb229884c904f172b5/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb491e778828d322800793cb229884c904f172b5/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=cb491e778828d322800793cb229884c904f172b5",
        "patch": "@@ -65,7 +65,7 @@ class CChainParams\n     /** Policy: Filter transactions that do not match well-defined patterns */\n     bool RequireStandard() const { return fRequireStandard; }\n     int64_t MaxTipAge() const { return nMaxTipAge; }\n-    int64_t PruneAfterHeight() const { return nPruneAfterHeight; }\n+    uint64_t PruneAfterHeight() const { return nPruneAfterHeight; }\n     /** Make miner stop after a block is found. In RPC, don't return until nGenProcLimit blocks are generated */\n     bool MineBlocksOnDemand() const { return fMineBlocksOnDemand; }\n     /** In the future use NetworkIDString() for RPC fields */"
      },
      {
        "sha": "eccc4999c132f426d54db2613dfcccaeacc85a28",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb491e778828d322800793cb229884c904f172b5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb491e778828d322800793cb229884c904f172b5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=cb491e778828d322800793cb229884c904f172b5",
        "patch": "@@ -3248,7 +3248,7 @@ void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight\n     if (chainActive.Tip() == NULL || nPruneTarget == 0) {\n         return;\n     }\n-    if (chainActive.Tip()->nHeight <= nPruneAfterHeight) {\n+    if ((uint64_t)chainActive.Tip()->nHeight <= nPruneAfterHeight) {\n         return;\n     }\n "
      },
      {
        "sha": "7eba1f45b8e09190cbc5c4b0cf848cb5d6b60e12",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb491e778828d322800793cb229884c904f172b5/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb491e778828d322800793cb229884c904f172b5/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=cb491e778828d322800793cb229884c904f172b5",
        "patch": "@@ -208,7 +208,7 @@ CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n  *\n  * Pruning functions are called from FlushStateToDisk when the global fCheckForPruning flag has been set.\n  * Block and undo files are deleted in lock-step (when blk00003.dat is deleted, so is rev00003.dat.)\n- * Pruning cannot take place until the longest chain is at least a certain length (100000 on mainnet, 1000 on testnet, 10 on regtest).\n+ * Pruning cannot take place until the longest chain is at least a certain length (100000 on mainnet, 1000 on testnet, 1000 on regtest).\n  * Pruning will never delete a block within a defined distance (currently 288) from the active chain's tip.\n  * The block index is updated by unsetting HAVE_DATA and HAVE_UNDO for any blocks that were stored in the deleted files.\n  * A db flag records the fact that at least some block files have been pruned."
      }
    ]
  },
  {
    "sha": "012fc91511b153ce3fd3e9fb7bbed8f85fb1690e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTJmYzkxNTExYjE1M2NlM2ZkM2U5ZmI3YmJlZDhmODVmYjE2OTBl",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-26T14:48:26Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-30T07:50:59Z"
      },
      "message": "NotifyBlockTip signal: switch from hash (uint256) to CBlockIndex*\n- also adds a boolean for indication if the tip update was happening during initial sync\n- emit notification also during initial sync",
      "tree": {
        "sha": "1360a783f7f2cf341b035822558aa86d705b8335",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1360a783f7f2cf341b035822558aa86d705b8335"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/012fc91511b153ce3fd3e9fb7bbed8f85fb1690e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWW//jAAoJECnUvLZBb1PsiesP/3ywawspZfB1hG8gfh2Eyf/Y\njDbMYNNlxZYEcF0vCgFfA/C9+eGnao63ql1HA0QGsZrE+XBK+QUmX36uvH40P0El\nN8/RbaPfS1LKdU0KjyfeSis8wWOGg8YcTcbWVhldKfIJaBaV3ek4cy/nW14oUEho\neVwAblQbrnPwPFKXhGwKYR2F8/qcP5N3FA66PL6CBaTBCjkgRMVWQT6qKxXYRyGG\nFhH7E5f75ocJJw3seGVDw3P4jCMJNJoQpVoTQodmntdUvmtUOHKHnEOba17vJTyh\nA5UnlLKZa+AztbEv06uHIXuuPbuOWTXU7C3N0DIoi37hRggiPnxzfDNVnGI9hUHV\nxeHfD2J7JxbIDgOp54Ed9aOobt+rodh7x/jAtSTtjHIYhvkm14/L+FzB0PhVotQm\nNUa+u5LJQeA0zFEMeREwWyTteqolnhVtD8IGxctrIyszODPAHDfu5SWur6BO4gfV\n1HFMcXUzFoNY7dnN4197HA2J6UBqBZgY3BonGmE+44ina4NCR8wc4woS+86Ac0IR\nq5s0cU2a+2S6VSkcDgsPixAA1DLFWRbSOKzPmIwvBtANaM1bmYgX4vU9yzvc+sO3\nxysWx7qmtOZ95y/F6H165RMDXpnF2oHZycHo9MeAB2VZQhYYz5A/kxpwTrU8G4dz\n8OfIVHxASudV7pwSD81G\n=ngmh\n-----END PGP SIGNATURE-----",
        "payload": "tree 1360a783f7f2cf341b035822558aa86d705b8335\nparent 5d5ef3a4cf8e32cdf584811eb5415278f4ba9628\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1448549306 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1448869859 +0100\n\nNotifyBlockTip signal: switch from hash (uint256) to CBlockIndex*\n- also adds a boolean for indication if the tip update was happening during initial sync\n- emit notification also during initial sync\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/012fc91511b153ce3fd3e9fb7bbed8f85fb1690e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/012fc91511b153ce3fd3e9fb7bbed8f85fb1690e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/012fc91511b153ce3fd3e9fb7bbed8f85fb1690e/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d5ef3a4cf8e32cdf584811eb5415278f4ba9628",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d5ef3a4cf8e32cdf584811eb5415278f4ba9628",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d5ef3a4cf8e32cdf584811eb5415278f4ba9628"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 10,
      "deletions": 4
    },
    "files": [
      {
        "sha": "8710e37fed75730ae75a8e485cd5f050240631de",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/012fc91511b153ce3fd3e9fb7bbed8f85fb1690e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/012fc91511b153ce3fd3e9fb7bbed8f85fb1690e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=012fc91511b153ce3fd3e9fb7bbed8f85fb1690e",
        "patch": "@@ -515,11 +515,14 @@ std::string LicenseInfo()\n            \"\\n\";\n }\n \n-static void BlockNotifyCallback(const uint256& hashNewTip)\n+static void BlockNotifyCallback(bool initialSync, const CBlockIndex *pBlockIndex)\n {\n+    if (initialSync || !pBlockIndex)\n+        return;\n+\n     std::string strCmd = GetArg(\"-blocknotify\", \"\");\n \n-    boost::replace_all(strCmd, \"%s\", hashNewTip.GetHex());\n+    boost::replace_all(strCmd, \"%s\", pBlockIndex->GetBlockHash().GetHex());\n     boost::thread t(runCommand, strCmd); // thread runs free\n }\n "
      },
      {
        "sha": "b41c1ad2e1afd3ce7ec060b360b41ab9d13c5bfb",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/012fc91511b153ce3fd3e9fb7bbed8f85fb1690e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/012fc91511b153ce3fd3e9fb7bbed8f85fb1690e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=012fc91511b153ce3fd3e9fb7bbed8f85fb1690e",
        "patch": "@@ -2636,9 +2636,11 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n             // Notify external listeners about the new tip.\n             if (!vHashes.empty()) {\n                 GetMainSignals().UpdatedBlockTip(pindexNewTip);\n-                uiInterface.NotifyBlockTip(vHashes.front());\n             }\n         }\n+        if (!vHashes.empty()) {\n+            uiInterface.NotifyBlockTip(fInitialDownload, pindexNewTip);\n+        }\n     } while(pindexMostWork != chainActive.Tip());\n     CheckBlockIndex(chainparams.GetConsensus());\n "
      },
      {
        "sha": "00d9303124ed47a158dee9b7fef6998ecefdafa6",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/012fc91511b153ce3fd3e9fb7bbed8f85fb1690e/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/012fc91511b153ce3fd3e9fb7bbed8f85fb1690e/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=012fc91511b153ce3fd3e9fb7bbed8f85fb1690e",
        "patch": "@@ -15,6 +15,7 @@\n class CBasicKeyStore;\n class CWallet;\n class uint256;\n+class CBlockIndex;\n \n /** General change type (added, updated, removed). */\n enum ChangeType\n@@ -94,7 +95,7 @@ class CClientUIInterface\n     boost::signals2::signal<void (const std::string &title, int nProgress)> ShowProgress;\n \n     /** New block has been accepted */\n-    boost::signals2::signal<void (const uint256& hash)> NotifyBlockTip;\n+    boost::signals2::signal<void (bool, const CBlockIndex *)> NotifyBlockTip;\n \n     /** Banlist did change. */\n     boost::signals2::signal<void (void)> BannedListChanged;"
      }
    ]
  },
  {
    "sha": "e6d50fcdecfdd7281b7aa5e9b573ef1b4e82873f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNmQ1MGZjZGVjZmRkNzI4MWI3YWE1ZTliNTczZWYxYjRlODI4NzNm",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-26T15:39:40Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-30T07:50:59Z"
      },
      "message": "[Qt] update block tip (height and date) without locking cs_main, update always (each block)",
      "tree": {
        "sha": "ac98746bd8b417a8d88d1b7fe661546e33985aca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac98746bd8b417a8d88d1b7fe661546e33985aca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6d50fcdecfdd7281b7aa5e9b573ef1b4e82873f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWW//jAAoJECnUvLZBb1Ps4ycP/3GuvPbPrXBcxUVZwKGbYR6W\nKFI04fQzaLqGjEV8Xidwx/5qDS3s+kQ4rplSpYpi84YzPZ4mem7AMM1QrrDjtiLf\nkCF8UIpiOb2GZedzrmmmb3seg85zh1pHe6KeWxP+QQSIhDb1OfYlNB8NMD8Fm0Jk\n/J085+YCTTPYvIkdfBNK0HW2Qph6ovnMeqzyR1SmJmFpMm2QuRqMTuWNL0J8NBlQ\nXG/6WvC8NdQrMZ9jhOcYi5AVqt1GZxpn8N92fpPZ7SdvWk7yDbEa+17ocJc9djw8\nizrl+t5qA/avnaly6LbW54ujh6gvKBAuSQtwkxbr83W1y+atkuGEM+vzkfRf0gys\nsN4y0guM8kD/wshqY47p+2wphIeV7OqSgC1+0akA4HpF6XrKpgwmTATp2dDTsWVl\n5ajo85LB93Exgvb4xYujpSPPrkf7aB7lkTy4Zs5n7Bo0Vr0JknQGdHNyjfEoDUlu\n7e60pQydbuiJjmTe4X14/jQSrSkvTR8fS5kl8M3w6QMpqBzmpO+SzMRQWVQj02kG\nbjBF48O7U+BAhXIJ9FNiGXSDrhlTLJoA4GeU++RnpFaZyy5MaNy1ygF9FWOAhPeL\nxFnmw9U88HO1iePGTNDEAsidYSqmCo85ItKsyLRNffXx1bW0n75EMuZz3FXYGwVO\nQt+yDfVTqvfAMFAmzEkt\n=/sOo\n-----END PGP SIGNATURE-----",
        "payload": "tree ac98746bd8b417a8d88d1b7fe661546e33985aca\nparent 012fc91511b153ce3fd3e9fb7bbed8f85fb1690e\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1448552380 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1448869859 +0100\n\n[Qt] update block tip (height and date) without locking cs_main, update always (each block)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6d50fcdecfdd7281b7aa5e9b573ef1b4e82873f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e6d50fcdecfdd7281b7aa5e9b573ef1b4e82873f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6d50fcdecfdd7281b7aa5e9b573ef1b4e82873f/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "012fc91511b153ce3fd3e9fb7bbed8f85fb1690e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/012fc91511b153ce3fd3e9fb7bbed8f85fb1690e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/012fc91511b153ce3fd3e9fb7bbed8f85fb1690e"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 23,
      "deletions": 35
    },
    "files": [
      {
        "sha": "92df336c979ed15b8a5376707f62ba0c59623a4a",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 30,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6d50fcdecfdd7281b7aa5e9b573ef1b4e82873f/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6d50fcdecfdd7281b7aa5e9b573ef1b4e82873f/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=e6d50fcdecfdd7281b7aa5e9b573ef1b4e82873f",
        "patch": "@@ -23,16 +23,13 @@\n #include <QTimer>\n \n static const int64_t nClientStartupTime = GetTime();\n+static int64_t nLastBlockTipUpdateNotification = 0;\n \n ClientModel::ClientModel(OptionsModel *optionsModel, QObject *parent) :\n     QObject(parent),\n     optionsModel(optionsModel),\n     peerTableModel(0),\n     banTableModel(0),\n-    cachedNumBlocks(0),\n-    cachedBlockDate(QDateTime()),\n-    cachedReindexing(0),\n-    cachedImporting(0),\n     pollTimer(0)\n {\n     peerTableModel = new PeerTableModel(this);\n@@ -107,32 +104,8 @@ double ClientModel::getVerificationProgress() const\n \n void ClientModel::updateTimer()\n {\n-    // Get required lock upfront. This avoids the GUI from getting stuck on\n-    // periodical polls if the core is holding the locks for a longer time -\n-    // for example, during a wallet rescan.\n-    TRY_LOCK(cs_main, lockMain);\n-    if (!lockMain)\n-        return;\n-\n-    // Some quantities (such as number of blocks) change so fast that we don't want to be notified for each change.\n-    // Periodically check and update with a timer.\n-    int newNumBlocks = getNumBlocks();\n-    QDateTime newBlockDate = getLastBlockDate();\n-\n-    // check for changed number of blocks we have, number of blocks peers claim to have, reindexing state and importing state\n-    if (cachedNumBlocks != newNumBlocks ||\n-        cachedBlockDate != newBlockDate ||\n-        cachedReindexing != fReindex ||\n-        cachedImporting != fImporting)\n-    {\n-        cachedNumBlocks = newNumBlocks;\n-        cachedBlockDate = newBlockDate;\n-        cachedReindexing = fReindex;\n-        cachedImporting = fImporting;\n-\n-        Q_EMIT numBlocksChanged(newNumBlocks, newBlockDate);\n-    }\n-\n+    // no locking required at this point\n+    // the following calls will aquire the required lock\n     Q_EMIT mempoolSizeChanged(getMempoolSize(), getMempoolDynamicUsage());\n     Q_EMIT bytesChanged(getTotalBytesRecv(), getTotalBytesSent());\n }\n@@ -261,13 +234,32 @@ static void BannedListChanged(ClientModel *clientmodel)\n     QMetaObject::invokeMethod(clientmodel, \"updateBanlist\", Qt::QueuedConnection);\n }\n \n+static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, const CBlockIndex *pIndex)\n+{\n+    // lock free async UI updates in case we have a new block tip\n+    // during initial sync, only update the UI if the last update\n+    // was > 250ms (MODEL_UPDATE_DELAY) ago\n+    int64_t now = 0;\n+    if (initialSync)\n+        now = GetTimeMillis();\n+\n+    // if we are in-sync, update the UI regardless of last update time\n+    if (!initialSync || now - nLastBlockTipUpdateNotification > MODEL_UPDATE_DELAY) {\n+        //pass a async signal to the UI thread\n+        Q_EMIT clientmodel->numBlocksChanged(pIndex->nHeight, QDateTime::fromTime_t(pIndex->GetBlockTime()));\n+        nLastBlockTipUpdateNotification = now;\n+    }\n+\n+}\n+\n void ClientModel::subscribeToCoreSignals()\n {\n     // Connect signals to client\n     uiInterface.ShowProgress.connect(boost::bind(ShowProgress, this, _1, _2));\n     uiInterface.NotifyNumConnectionsChanged.connect(boost::bind(NotifyNumConnectionsChanged, this, _1));\n     uiInterface.NotifyAlertChanged.connect(boost::bind(NotifyAlertChanged, this, _1, _2));\n     uiInterface.BannedListChanged.connect(boost::bind(BannedListChanged, this));\n+    uiInterface.NotifyBlockTip.connect(boost::bind(BlockTipChanged, this, _1, _2));\n }\n \n void ClientModel::unsubscribeFromCoreSignals()\n@@ -277,4 +269,5 @@ void ClientModel::unsubscribeFromCoreSignals()\n     uiInterface.NotifyNumConnectionsChanged.disconnect(boost::bind(NotifyNumConnectionsChanged, this, _1));\n     uiInterface.NotifyAlertChanged.disconnect(boost::bind(NotifyAlertChanged, this, _1, _2));\n     uiInterface.BannedListChanged.disconnect(boost::bind(BannedListChanged, this));\n+    uiInterface.NotifyBlockTip.disconnect(boost::bind(BlockTipChanged, this, _1, _2));\n }"
      },
      {
        "sha": "3c6700f37a860ef33321d4b17d34b56a1545c29a",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6d50fcdecfdd7281b7aa5e9b573ef1b4e82873f/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6d50fcdecfdd7281b7aa5e9b573ef1b4e82873f/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=e6d50fcdecfdd7281b7aa5e9b573ef1b4e82873f",
        "patch": "@@ -81,11 +81,6 @@ class ClientModel : public QObject\n     PeerTableModel *peerTableModel;\n     BanTableModel *banTableModel;\n \n-    int cachedNumBlocks;\n-    QDateTime cachedBlockDate;\n-    bool cachedReindexing;\n-    bool cachedImporting;\n-\n     QTimer *pollTimer;\n \n     void subscribeToCoreSignals();"
      }
    ]
  },
  {
    "sha": "947d20b84ab271bec5ff08312921961627d1ad80",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NDdkMjBiODRhYjI3MWJlYzVmZjA4MzEyOTIxOTYxNjI3ZDFhZDgw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-27T12:20:46Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-30T07:50:59Z"
      },
      "message": "[Qt] reduce cs_main in getVerificationProgress()",
      "tree": {
        "sha": "e391f64f42f4f5d21c7a87e747dfb961f7531c8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e391f64f42f4f5d21c7a87e747dfb961f7531c8a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/947d20b84ab271bec5ff08312921961627d1ad80",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWW//jAAoJECnUvLZBb1PsomIP/i0grj1iQLltqYcsG2OTszX7\nIEaaGDYTslFDEyehDC181PBJ1GuYHcxeEc4mwzAX6yS666GT5XzS31G2suunimzA\n0z13EblDnsDbqlvR5KPt3WaqTeHPupkL6NGxvgTLdE9qDPPrWne1OQrEexilfY7v\nzGFApyyP5g7chayVqv/wETu5CCnrwODEtXQlX4ehye93cXsyjNDr9i1iPCVRQG6I\nii7v6xIm+mAipJuw+3fPN9JqKGtZeYB0eqj+bk+wjcGh4f2UUMS1Gjr1kjjLq/5d\nkaJUl52eLSylwNw0osDIU6PsNU6T+4Ao5YR5wHfEMP9zdSKHfuLY49S03f1iDkkO\nWhGaTVbMWbZ02eKfLMsy1rXAr3uTctn6AB1Th74ItqrKA6nMPP5pDt9ERbUixBeN\nnuAPuGidLhYO06vF4nQ6yi1t+S1AFUJitul/EywbUvm7WtJm2zJJUcIF0jf0Tq9C\niEvRKoiOLgF/1LcsdZOJUm/uGaRqwQNMNaKoNsFsvzLpvG7Yac+wSp0bNsKvfqyH\n6NL4462saYjo6w4uw3Nz8u7z0gbYHEvLjIKO5FViGZh/f8+ByStIJzTNt6ERpbWD\nhLWm4MM4r0x+A3NkoClRT8PRwH11XPDWE54W0DsdtyJrd2t6zPXH1HIbl/jUioRC\nscIEVV9Oq/2NBTbs1A/w\n=fg75\n-----END PGP SIGNATURE-----",
        "payload": "tree e391f64f42f4f5d21c7a87e747dfb961f7531c8a\nparent e6d50fcdecfdd7281b7aa5e9b573ef1b4e82873f\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1448626846 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1448869859 +0100\n\n[Qt] reduce cs_main in getVerificationProgress()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/947d20b84ab271bec5ff08312921961627d1ad80",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/947d20b84ab271bec5ff08312921961627d1ad80",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/947d20b84ab271bec5ff08312921961627d1ad80/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e6d50fcdecfdd7281b7aa5e9b573ef1b4e82873f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6d50fcdecfdd7281b7aa5e9b573ef1b4e82873f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e6d50fcdecfdd7281b7aa5e9b573ef1b4e82873f"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 19,
      "deletions": 16
    },
    "files": [
      {
        "sha": "4933f76d6e7734ae086c1a00cb3d8439e6486eb8",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/947d20b84ab271bec5ff08312921961627d1ad80/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/947d20b84ab271bec5ff08312921961627d1ad80/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=947d20b84ab271bec5ff08312921961627d1ad80",
        "patch": "@@ -443,8 +443,8 @@ void BitcoinGUI::setClientModel(ClientModel *clientModel)\n         setNumConnections(clientModel->getNumConnections());\n         connect(clientModel, SIGNAL(numConnectionsChanged(int)), this, SLOT(setNumConnections(int)));\n \n-        setNumBlocks(clientModel->getNumBlocks(), clientModel->getLastBlockDate());\n-        connect(clientModel, SIGNAL(numBlocksChanged(int,QDateTime)), this, SLOT(setNumBlocks(int,QDateTime)));\n+        setNumBlocks(clientModel->getNumBlocks(), clientModel->getLastBlockDate(), NULL);\n+        connect(clientModel, SIGNAL(numBlocksChanged(int,QDateTime,const CBlockIndex*)), this, SLOT(setNumBlocks(int,QDateTime,const CBlockIndex*)));\n \n         // Receive and report messages from client model\n         connect(clientModel, SIGNAL(message(QString,QString,unsigned int)), this, SLOT(message(QString,QString,unsigned int)));\n@@ -672,7 +672,7 @@ void BitcoinGUI::setNumConnections(int count)\n     labelConnectionsIcon->setToolTip(tr(\"%n active connection(s) to Bitcoin network\", \"\", count));\n }\n \n-void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate)\n+void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, const CBlockIndex *tip)\n {\n     if(!clientModel)\n         return;\n@@ -749,7 +749,7 @@ void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate)\n         progressBarLabel->setVisible(true);\n         progressBar->setFormat(tr(\"%1 behind\").arg(timeBehindText));\n         progressBar->setMaximum(1000000000);\n-        progressBar->setValue(clientModel->getVerificationProgress() * 1000000000.0 + 0.5);\n+        progressBar->setValue(clientModel->getVerificationProgress(tip) * 1000000000.0 + 0.5);\n         progressBar->setVisible(true);\n \n         tooltip = tr(\"Catching up...\") + QString(\"<br>\") + tooltip;"
      },
      {
        "sha": "42da1498810d188c96b29189ef43e9e468a08e6d",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/947d20b84ab271bec5ff08312921961627d1ad80/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/947d20b84ab271bec5ff08312921961627d1ad80/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=947d20b84ab271bec5ff08312921961627d1ad80",
        "patch": "@@ -29,6 +29,7 @@ class UnitDisplayStatusBarControl;\n class WalletFrame;\n class WalletModel;\n class HelpMessageDialog;\n+class CBlockIndex;\n \n class CWallet;\n \n@@ -149,7 +150,7 @@ public Q_SLOTS:\n     /** Set number of connections shown in the UI */\n     void setNumConnections(int count);\n     /** Set number of blocks and last block date shown in the UI */\n-    void setNumBlocks(int count, const QDateTime& blockDate);\n+    void setNumBlocks(int count, const QDateTime& blockDate, const CBlockIndex* tip);\n \n     /** Notify the user of an event from the core network or transaction handling code.\n        @param[in] title     the message box / notification title"
      },
      {
        "sha": "f7d8b71748b01fcaae741dd83db33c892914e016",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/947d20b84ab271bec5ff08312921961627d1ad80/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/947d20b84ab271bec5ff08312921961627d1ad80/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=947d20b84ab271bec5ff08312921961627d1ad80",
        "patch": "@@ -22,6 +22,8 @@\n #include <QDebug>\n #include <QTimer>\n \n+class CBlockIndex;\n+\n static const int64_t nClientStartupTime = GetTime();\n static int64_t nLastBlockTipUpdateNotification = 0;\n \n@@ -96,10 +98,9 @@ size_t ClientModel::getMempoolDynamicUsage() const\n     return mempool.DynamicMemoryUsage();\n }\n \n-double ClientModel::getVerificationProgress() const\n+double ClientModel::getVerificationProgress(const CBlockIndex *tip) const\n {\n-    LOCK(cs_main);\n-    return Checkpoints::GuessVerificationProgress(Params().Checkpoints(), chainActive.Tip());\n+    return Checkpoints::GuessVerificationProgress(Params().Checkpoints(), (CBlockIndex *)tip);\n }\n \n void ClientModel::updateTimer()\n@@ -246,7 +247,7 @@ static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, const CB\n     // if we are in-sync, update the UI regardless of last update time\n     if (!initialSync || now - nLastBlockTipUpdateNotification > MODEL_UPDATE_DELAY) {\n         //pass a async signal to the UI thread\n-        Q_EMIT clientmodel->numBlocksChanged(pIndex->nHeight, QDateTime::fromTime_t(pIndex->GetBlockTime()));\n+        Q_EMIT clientmodel->numBlocksChanged(pIndex->nHeight, QDateTime::fromTime_t(pIndex->GetBlockTime()), pIndex);\n         nLastBlockTipUpdateNotification = now;\n     }\n "
      },
      {
        "sha": "c3beb8239678a803bc605782c361b19754f6ecf0",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/947d20b84ab271bec5ff08312921961627d1ad80/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/947d20b84ab271bec5ff08312921961627d1ad80/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=947d20b84ab271bec5ff08312921961627d1ad80",
        "patch": "@@ -15,6 +15,7 @@ class PeerTableModel;\n class TransactionTableModel;\n \n class CWallet;\n+class CBlockIndex;\n \n QT_BEGIN_NAMESPACE\n class QTimer;\n@@ -59,7 +60,7 @@ class ClientModel : public QObject\n     quint64 getTotalBytesRecv() const;\n     quint64 getTotalBytesSent() const;\n \n-    double getVerificationProgress() const;\n+    double getVerificationProgress(const CBlockIndex *tip) const;\n     QDateTime getLastBlockDate() const;\n \n     //! Return true if core is doing initial block download\n@@ -88,7 +89,7 @@ class ClientModel : public QObject\n \n Q_SIGNALS:\n     void numConnectionsChanged(int count);\n-    void numBlocksChanged(int count, const QDateTime& blockDate);\n+    void numBlocksChanged(int count, const QDateTime& blockDate, const CBlockIndex *tip);\n     void mempoolSizeChanged(long count, size_t mempoolSizeInBytes);\n     void alertsChanged(const QString &warnings);\n     void bytesChanged(quint64 totalBytesIn, quint64 totalBytesOut);"
      },
      {
        "sha": "8dbbac957deddb2f87dcd5b4c08a4466167acff1",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/947d20b84ab271bec5ff08312921961627d1ad80/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/947d20b84ab271bec5ff08312921961627d1ad80/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=947d20b84ab271bec5ff08312921961627d1ad80",
        "patch": "@@ -343,8 +343,8 @@ void RPCConsole::setClientModel(ClientModel *model)\n         setNumConnections(model->getNumConnections());\n         connect(model, SIGNAL(numConnectionsChanged(int)), this, SLOT(setNumConnections(int)));\n \n-        setNumBlocks(model->getNumBlocks(), model->getLastBlockDate());\n-        connect(model, SIGNAL(numBlocksChanged(int,QDateTime)), this, SLOT(setNumBlocks(int,QDateTime)));\n+        setNumBlocks(model->getNumBlocks(), model->getLastBlockDate(), NULL);\n+        connect(model, SIGNAL(numBlocksChanged(int,QDateTime,const CBlockIndex*)), this, SLOT(setNumBlocks(int,QDateTime,const CBlockIndex*)));\n \n         updateTrafficStats(model->getTotalBytesRecv(), model->getTotalBytesSent());\n         connect(model, SIGNAL(bytesChanged(quint64,quint64)), this, SLOT(updateTrafficStats(quint64, quint64)));\n@@ -525,7 +525,7 @@ void RPCConsole::setNumConnections(int count)\n     ui->numberOfConnections->setText(connections);\n }\n \n-void RPCConsole::setNumBlocks(int count, const QDateTime& blockDate)\n+void RPCConsole::setNumBlocks(int count, const QDateTime& blockDate, const CBlockIndex* tip)\n {\n     ui->numberOfBlocks->setText(QString::number(count));\n     ui->lastBlockTime->setText(blockDate.toString());"
      },
      {
        "sha": "5debc1754eb7265aa63b1113edf313859b14309c",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/947d20b84ab271bec5ff08312921961627d1ad80/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/947d20b84ab271bec5ff08312921961627d1ad80/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=947d20b84ab271bec5ff08312921961627d1ad80",
        "patch": "@@ -83,7 +83,7 @@ public Q_SLOTS:\n     /** Set number of connections shown in the UI */\n     void setNumConnections(int count);\n     /** Set number of blocks and last block date shown in the UI */\n-    void setNumBlocks(int count, const QDateTime& blockDate);\n+    void setNumBlocks(int count, const QDateTime& blockDate, const CBlockIndex* tip);\n     /** Set size (number of transactions and memory usage) of the mempool in the UI */\n     void setMempoolSize(long numberOfTxs, size_t dynUsage);\n     /** Go forward or back in history */"
      },
      {
        "sha": "1c72a292ed5a22cdd392e1e258494012411c6a5c",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/947d20b84ab271bec5ff08312921961627d1ad80/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/947d20b84ab271bec5ff08312921961627d1ad80/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=947d20b84ab271bec5ff08312921961627d1ad80",
        "patch": "@@ -124,7 +124,7 @@ void SendCoinsDialog::setClientModel(ClientModel *clientModel)\n     this->clientModel = clientModel;\n \n     if (clientModel) {\n-        connect(clientModel, SIGNAL(numBlocksChanged(int,QDateTime)), this, SLOT(updateSmartFeeLabel()));\n+        connect(clientModel, SIGNAL(numBlocksChanged(int,QDateTime,const CBlockIndex*)), this, SLOT(updateSmartFeeLabel()));\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "4082e4660305f7696949c3a13e2e9611210894e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MDgyZTQ2NjAzMDVmNzY5Njk0OWMzYTEzZTJlOTYxMTIxMDg5NGU4",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-27T17:22:18Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-30T07:53:57Z"
      },
      "message": "[Qt] call GuessVerificationProgress synchronous during core signal, pass double over UI signal",
      "tree": {
        "sha": "0c9cf30842663b53cbe95300688b0a9f29d9a985",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0c9cf30842663b53cbe95300688b0a9f29d9a985"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4082e4660305f7696949c3a13e2e9611210894e8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWXACXAAoJECnUvLZBb1Pss7AP/0h8tG1oqCt4u9HfhUvU5FsT\nJr/YknQRgKUwOMX9ZrirryNV8aHMfJYrWaiC19/FrJcryjoVkU+qRXnLGNTGj1up\neOkEBUgpWg7vUyhIpc84aTDV5Qz8SgH+KSMIBx/YQIUZzTeGGkaZIYAKT1eiAxkY\nt3AO0lwfzbSxSSnJQOdxkh5qcS1b75aULO+7o8FkIxkQArH+h4zj8+4P6UvSBOfO\nOPD5Edxw2Z/jSSLMV6jMiuCscWws7o/WdKUvLvfdt+XD0sYKW25IMJM96qbLzyGV\nN6pPO9lvO1FJMP3NKJDkpKKPtrqCUdsnWgh0/FqzUmYx6cRnMgTi1s3bbptIWGi+\nErU6nKl67EeLqTlTdEGvc/rwZXHVNEZCLPscWSB+yZK3yrGJlr4hzpxTt3nPL2Il\nnOfHm+GmDR06ryUWGGdWgbVjF4QB3rqGAJuZ/qNDlEqhhd0BA5V+obdYp47iVK47\n5qvFduVxqu0dHF/8fdoOWwQHbaR2TDMRymPVVqZuQsj5iTQUcB3qP8PC3QRWpUGW\nJKXppdsAFNnqRu94UEj5rJFua2XTRpoIln9tc95y4N3Vcmq7MVlhq4How4w8w/RL\neBf2WN/OAFDwpN/IL4V9itYADnbKIeaoDvyPoYZtC+oDo7A4y6vtV7K6kyZoNMae\nk094ZK1zoSY1vaSYWK7E\n=beYK\n-----END PGP SIGNATURE-----",
        "payload": "tree 0c9cf30842663b53cbe95300688b0a9f29d9a985\nparent 947d20b84ab271bec5ff08312921961627d1ad80\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1448644938 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1448870037 +0100\n\n[Qt] call GuessVerificationProgress synchronous during core signal, pass double over UI signal\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4082e4660305f7696949c3a13e2e9611210894e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4082e4660305f7696949c3a13e2e9611210894e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4082e4660305f7696949c3a13e2e9611210894e8/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "947d20b84ab271bec5ff08312921961627d1ad80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/947d20b84ab271bec5ff08312921961627d1ad80",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/947d20b84ab271bec5ff08312921961627d1ad80"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 22,
      "deletions": 19
    },
    "files": [
      {
        "sha": "385ab7153893caee2b26e86decfdb0727630cb51",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4082e4660305f7696949c3a13e2e9611210894e8/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4082e4660305f7696949c3a13e2e9611210894e8/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4082e4660305f7696949c3a13e2e9611210894e8",
        "patch": "@@ -2638,9 +2638,8 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n                 GetMainSignals().UpdatedBlockTip(pindexNewTip);\n             }\n         }\n-        if (!vHashes.empty()) {\n-            uiInterface.NotifyBlockTip(fInitialDownload, pindexNewTip);\n-        }\n+        // Always notify the UI if a new block tip was connected\n+        uiInterface.NotifyBlockTip(fInitialDownload, pindexNewTip);\n     } while(pindexMostWork != chainActive.Tip());\n     CheckBlockIndex(chainparams.GetConsensus());\n "
      },
      {
        "sha": "4651e842bdb5e5739344f963fb5eb13b5c3855c3",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4082e4660305f7696949c3a13e2e9611210894e8/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4082e4660305f7696949c3a13e2e9611210894e8/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=4082e4660305f7696949c3a13e2e9611210894e8",
        "patch": "@@ -443,8 +443,8 @@ void BitcoinGUI::setClientModel(ClientModel *clientModel)\n         setNumConnections(clientModel->getNumConnections());\n         connect(clientModel, SIGNAL(numConnectionsChanged(int)), this, SLOT(setNumConnections(int)));\n \n-        setNumBlocks(clientModel->getNumBlocks(), clientModel->getLastBlockDate(), NULL);\n-        connect(clientModel, SIGNAL(numBlocksChanged(int,QDateTime,const CBlockIndex*)), this, SLOT(setNumBlocks(int,QDateTime,const CBlockIndex*)));\n+        setNumBlocks(clientModel->getNumBlocks(), clientModel->getLastBlockDate(), clientModel->getVerificationProgress(NULL));\n+        connect(clientModel, SIGNAL(numBlocksChanged(int,QDateTime,double)), this, SLOT(setNumBlocks(int,QDateTime,double)));\n \n         // Receive and report messages from client model\n         connect(clientModel, SIGNAL(message(QString,QString,unsigned int)), this, SLOT(message(QString,QString,unsigned int)));\n@@ -672,7 +672,7 @@ void BitcoinGUI::setNumConnections(int count)\n     labelConnectionsIcon->setToolTip(tr(\"%n active connection(s) to Bitcoin network\", \"\", count));\n }\n \n-void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, const CBlockIndex *tip)\n+void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress)\n {\n     if(!clientModel)\n         return;\n@@ -749,7 +749,7 @@ void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, const CBloc\n         progressBarLabel->setVisible(true);\n         progressBar->setFormat(tr(\"%1 behind\").arg(timeBehindText));\n         progressBar->setMaximum(1000000000);\n-        progressBar->setValue(clientModel->getVerificationProgress(tip) * 1000000000.0 + 0.5);\n+        progressBar->setValue(nVerificationProgress * 1000000000.0 + 0.5);\n         progressBar->setVisible(true);\n \n         tooltip = tr(\"Catching up...\") + QString(\"<br>\") + tooltip;"
      },
      {
        "sha": "3ad6519dbb6f43fcfc3a815464530abf1bde1ba3",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4082e4660305f7696949c3a13e2e9611210894e8/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4082e4660305f7696949c3a13e2e9611210894e8/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=4082e4660305f7696949c3a13e2e9611210894e8",
        "patch": "@@ -29,7 +29,6 @@ class UnitDisplayStatusBarControl;\n class WalletFrame;\n class WalletModel;\n class HelpMessageDialog;\n-class CBlockIndex;\n \n class CWallet;\n \n@@ -150,7 +149,7 @@ public Q_SLOTS:\n     /** Set number of connections shown in the UI */\n     void setNumConnections(int count);\n     /** Set number of blocks and last block date shown in the UI */\n-    void setNumBlocks(int count, const QDateTime& blockDate, const CBlockIndex* tip);\n+    void setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress);\n \n     /** Notify the user of an event from the core network or transaction handling code.\n        @param[in] title     the message box / notification title"
      },
      {
        "sha": "d36d129c1ac00f485b9b773891854707ab7fd2a6",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4082e4660305f7696949c3a13e2e9611210894e8/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4082e4660305f7696949c3a13e2e9611210894e8/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=4082e4660305f7696949c3a13e2e9611210894e8",
        "patch": "@@ -98,9 +98,15 @@ size_t ClientModel::getMempoolDynamicUsage() const\n     return mempool.DynamicMemoryUsage();\n }\n \n-double ClientModel::getVerificationProgress(const CBlockIndex *tip) const\n+double ClientModel::getVerificationProgress(const CBlockIndex *tipIn) const\n {\n-    return Checkpoints::GuessVerificationProgress(Params().Checkpoints(), (CBlockIndex *)tip);\n+    CBlockIndex *tip = const_cast<CBlockIndex *>(tipIn);\n+    if (!tip)\n+    {\n+        LOCK(cs_main);\n+        tip = chainActive.Tip();\n+    }\n+    return Checkpoints::GuessVerificationProgress(Params().Checkpoints(), tip);\n }\n \n void ClientModel::updateTimer()\n@@ -247,10 +253,9 @@ static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, const CB\n     // if we are in-sync, update the UI regardless of last update time\n     if (!initialSync || now - nLastBlockTipUpdateNotification > MODEL_UPDATE_DELAY) {\n         //pass a async signal to the UI thread\n-        Q_EMIT clientmodel->numBlocksChanged(pIndex->nHeight, QDateTime::fromTime_t(pIndex->GetBlockTime()), pIndex);\n+        Q_EMIT clientmodel->numBlocksChanged(pIndex->nHeight, QDateTime::fromTime_t(pIndex->GetBlockTime()), clientmodel->getVerificationProgress(pIndex));\n         nLastBlockTipUpdateNotification = now;\n     }\n-\n }\n \n void ClientModel::subscribeToCoreSignals()"
      },
      {
        "sha": "2d204fdb67d9628ebda1783c94b7ae1a893f51b3",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4082e4660305f7696949c3a13e2e9611210894e8/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4082e4660305f7696949c3a13e2e9611210894e8/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=4082e4660305f7696949c3a13e2e9611210894e8",
        "patch": "@@ -89,7 +89,7 @@ class ClientModel : public QObject\n \n Q_SIGNALS:\n     void numConnectionsChanged(int count);\n-    void numBlocksChanged(int count, const QDateTime& blockDate, const CBlockIndex *tip);\n+    void numBlocksChanged(int count, const QDateTime& blockDate, double nVerificationProgress);\n     void mempoolSizeChanged(long count, size_t mempoolSizeInBytes);\n     void alertsChanged(const QString &warnings);\n     void bytesChanged(quint64 totalBytesIn, quint64 totalBytesOut);"
      },
      {
        "sha": "30e551de19790fdc744d59f436b25443b9561ace",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4082e4660305f7696949c3a13e2e9611210894e8/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4082e4660305f7696949c3a13e2e9611210894e8/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=4082e4660305f7696949c3a13e2e9611210894e8",
        "patch": "@@ -343,8 +343,8 @@ void RPCConsole::setClientModel(ClientModel *model)\n         setNumConnections(model->getNumConnections());\n         connect(model, SIGNAL(numConnectionsChanged(int)), this, SLOT(setNumConnections(int)));\n \n-        setNumBlocks(model->getNumBlocks(), model->getLastBlockDate(), NULL);\n-        connect(model, SIGNAL(numBlocksChanged(int,QDateTime,const CBlockIndex*)), this, SLOT(setNumBlocks(int,QDateTime,const CBlockIndex*)));\n+        setNumBlocks(model->getNumBlocks(), model->getLastBlockDate(), model->getVerificationProgress(NULL));\n+        connect(model, SIGNAL(numBlocksChanged(int,QDateTime,double)), this, SLOT(setNumBlocks(int,QDateTime,double)));\n \n         updateTrafficStats(model->getTotalBytesRecv(), model->getTotalBytesSent());\n         connect(model, SIGNAL(bytesChanged(quint64,quint64)), this, SLOT(updateTrafficStats(quint64, quint64)));\n@@ -525,7 +525,7 @@ void RPCConsole::setNumConnections(int count)\n     ui->numberOfConnections->setText(connections);\n }\n \n-void RPCConsole::setNumBlocks(int count, const QDateTime& blockDate, const CBlockIndex* tip)\n+void RPCConsole::setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress)\n {\n     ui->numberOfBlocks->setText(QString::number(count));\n     ui->lastBlockTime->setText(blockDate.toString());"
      },
      {
        "sha": "4aebad480cbd8dd4ff7b53f216d69a038c5ce020",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4082e4660305f7696949c3a13e2e9611210894e8/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4082e4660305f7696949c3a13e2e9611210894e8/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=4082e4660305f7696949c3a13e2e9611210894e8",
        "patch": "@@ -83,7 +83,7 @@ public Q_SLOTS:\n     /** Set number of connections shown in the UI */\n     void setNumConnections(int count);\n     /** Set number of blocks and last block date shown in the UI */\n-    void setNumBlocks(int count, const QDateTime& blockDate, const CBlockIndex* tip);\n+    void setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress);\n     /** Set size (number of transactions and memory usage) of the mempool in the UI */\n     void setMempoolSize(long numberOfTxs, size_t dynUsage);\n     /** Go forward or back in history */"
      },
      {
        "sha": "0fd86da0342414babe56f2f94bbf8b7c0a67ffae",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4082e4660305f7696949c3a13e2e9611210894e8/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4082e4660305f7696949c3a13e2e9611210894e8/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=4082e4660305f7696949c3a13e2e9611210894e8",
        "patch": "@@ -124,7 +124,7 @@ void SendCoinsDialog::setClientModel(ClientModel *clientModel)\n     this->clientModel = clientModel;\n \n     if (clientModel) {\n-        connect(clientModel, SIGNAL(numBlocksChanged(int,QDateTime,const CBlockIndex*)), this, SLOT(updateSmartFeeLabel()));\n+        connect(clientModel, SIGNAL(numBlocksChanged(int,QDateTime,double)), this, SLOT(updateSmartFeeLabel()));\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "c28d3937b095f109bda1aaab7ce3db17c033b9a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjhkMzkzN2IwOTVmMTA5YmRhMWFhYWI3Y2UzZGIxN2MwMzNiOWE3",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-30T08:08:25Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-30T08:08:29Z"
      },
      "message": "Merge pull request #7025\n\n2a8e8c2 [Qt] don't allow to store invalid proxy ports (Jonas Schnelli)\nd16d1b7 [Qt] refactor and optimize proxy settings behavior (Jonas Schnelli)",
      "tree": {
        "sha": "58c8a5ca923d6a08eac70aeac4f1df5756cc2610",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/58c8a5ca923d6a08eac70aeac4f1df5756cc2610"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c28d3937b095f109bda1aaab7ce3db17c033b9a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWXAP9AAoJECnUvLZBb1PseWwP/0UJ+OeE+eVOyDwDtn0+x2Sc\nmdEbN43R/z1ihKZb/wdF1gzHfj6qqM5X6uHyxdYFDgVI7016/2KL9ftQN54YIKQA\nk9FRE87bG/ya55px/dUzZJgBv0ZYt0/QZM0OCEC+bYHPg4q9HnJTAOUXQ8fThZq9\nR48wOI7wgz6q4IwKlM3DdYZi/Tjoq7e0vLQHT4Rf7xNa2zBTu53zZ/nq6m4w77CN\nT5u2+onKU0du+gk6a/lgA6QmmMXHfSy0zzzxCxJm7qdCirYyO48KP0EcFCVW4Ioq\nbuofigjYqdKWowVOv4UjDVPbyI+rP6nBNz8sAUaR1bptfBxx7vljYszZhFffN+y6\ngj4ZcwwmIK7KlpM+zRpyy5DE/3iPBmB2r+wHq5zIYjbKTWv1FgV/Vm67tihMAC3B\ne65BDJgbqh1srgmadXVhKHONDjAHhH3qD1cGTmmEn79A1oqMyo7FdENgms4RfPGo\n2f8VUyBww0kaBdEh75USJulCO/GKHbLqkR81uS9MXiM3H7RP+K3BaqC6MXDw/bav\nbdTUVIjRmxLw5jx6n1SoFODlEiwsYwRbg/tbTocblzdx0b03I5F0YHpB+XxqM9UP\nKNKEl13nx645O9kC6pVA1BFah9/kLDQ2ol11xbhoseAlwUZ2Ksxc00cRa3DakqjE\nj/y/mpIA28fLyZw7++gq\n=w7u+\n-----END PGP SIGNATURE-----",
        "payload": "tree 58c8a5ca923d6a08eac70aeac4f1df5756cc2610\nparent 5d5ef3a4cf8e32cdf584811eb5415278f4ba9628\nparent 2a8e8c2e3721c8cf560f08873b90265f8ab1a83b\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1448870905 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1448870909 +0100\n\nMerge pull request #7025\n\n2a8e8c2 [Qt] don't allow to store invalid proxy ports (Jonas Schnelli)\nd16d1b7 [Qt] refactor and optimize proxy settings behavior (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c28d3937b095f109bda1aaab7ce3db17c033b9a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c28d3937b095f109bda1aaab7ce3db17c033b9a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c28d3937b095f109bda1aaab7ce3db17c033b9a7/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d5ef3a4cf8e32cdf584811eb5415278f4ba9628",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d5ef3a4cf8e32cdf584811eb5415278f4ba9628",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d5ef3a4cf8e32cdf584811eb5415278f4ba9628"
      },
      {
        "sha": "2a8e8c2e3721c8cf560f08873b90265f8ab1a83b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a8e8c2e3721c8cf560f08873b90265f8ab1a83b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a8e8c2e3721c8cf560f08873b90265f8ab1a83b"
      }
    ],
    "stats": {
      "total": 118,
      "additions": 65,
      "deletions": 53
    },
    "files": [
      {
        "sha": "647c860bdc7ec3b0e18d7772444d0328bbaa1e59",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 44,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c28d3937b095f109bda1aaab7ce3db17c033b9a7/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c28d3937b095f109bda1aaab7ce3db17c033b9a7/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=c28d3937b095f109bda1aaab7ce3db17c033b9a7",
        "patch": "@@ -34,8 +34,7 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     QDialog(parent),\n     ui(new Ui::OptionsDialog),\n     model(0),\n-    mapper(0),\n-    fProxyIpsValid(true)\n+    mapper(0)\n {\n     ui->setupUi(this);\n \n@@ -60,12 +59,11 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n \n     connect(ui->connectSocks, SIGNAL(toggled(bool)), ui->proxyIp, SLOT(setEnabled(bool)));\n     connect(ui->connectSocks, SIGNAL(toggled(bool)), ui->proxyPort, SLOT(setEnabled(bool)));\n+    connect(ui->connectSocks, SIGNAL(toggled(bool)), this, SLOT(updateProxyValidationState()));\n \n     connect(ui->connectSocksTor, SIGNAL(toggled(bool)), ui->proxyIpTor, SLOT(setEnabled(bool)));\n     connect(ui->connectSocksTor, SIGNAL(toggled(bool)), ui->proxyPortTor, SLOT(setEnabled(bool)));\n-\n-    ui->proxyIp->installEventFilter(this);\n-    ui->proxyIpTor->installEventFilter(this);\n+    connect(ui->connectSocksTor, SIGNAL(toggled(bool)), this, SLOT(updateProxyValidationState()));\n \n     /* Window elements init */\n #ifdef Q_OS_MAC\n@@ -119,7 +117,12 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     mapper->setOrientation(Qt::Vertical);\n \n     /* setup/change UI elements when proxy IPs are invalid/valid */\n-    connect(this, SIGNAL(proxyIpChecks(QValidatedLineEdit *, int)), this, SLOT(doProxyIpChecks(QValidatedLineEdit *, int)));\n+    ui->proxyIp->setCheckValidator(new ProxyAddressValidator(parent));\n+    ui->proxyIpTor->setCheckValidator(new ProxyAddressValidator(parent));\n+    connect(ui->proxyIp, SIGNAL(validationDidChange(QValidatedLineEdit *)), this, SLOT(updateProxyValidationState()));\n+    connect(ui->proxyIpTor, SIGNAL(validationDidChange(QValidatedLineEdit *)), this, SLOT(updateProxyValidationState()));\n+    connect(ui->proxyPort, SIGNAL(textChanged(const QString&)), this, SLOT(updateProxyValidationState()));\n+    connect(ui->proxyPortTor, SIGNAL(textChanged(const QString&)), this, SLOT(updateProxyValidationState()));\n }\n \n OptionsDialog::~OptionsDialog()\n@@ -200,18 +203,6 @@ void OptionsDialog::setMapper()\n     mapper->addMapping(ui->thirdPartyTxUrls, OptionsModel::ThirdPartyTxUrls);\n }\n \n-void OptionsDialog::enableOkButton()\n-{\n-    /* prevent enabling of the OK button when data modified, if there is an invalid proxy address present */\n-    if(fProxyIpsValid)\n-        setOkButtonState(true);\n-}\n-\n-void OptionsDialog::disableOkButton()\n-{\n-    setOkButtonState(false);\n-}\n-\n void OptionsDialog::setOkButtonState(bool fState)\n {\n     ui->okButton->setEnabled(fState);\n@@ -269,24 +260,20 @@ void OptionsDialog::clearStatusLabel()\n     ui->statusLabel->clear();\n }\n \n-void OptionsDialog::doProxyIpChecks(QValidatedLineEdit *pUiProxyIp, int nProxyPort)\n+void OptionsDialog::updateProxyValidationState()\n {\n-    Q_UNUSED(nProxyPort);\n-\n-    CService addrProxy;\n-\n-    /* Check for a valid IPv4 / IPv6 address */\n-    if (!(fProxyIpsValid = LookupNumeric(pUiProxyIp->text().toStdString().c_str(), addrProxy)))\n+    QValidatedLineEdit *pUiProxyIp = ui->proxyIp;\n+    QValidatedLineEdit *otherProxyWidget = (pUiProxyIp == ui->proxyIpTor) ? ui->proxyIp : ui->proxyIpTor;\n+    if (pUiProxyIp->isValid() && (!ui->proxyPort->isEnabled() || ui->proxyPort->text().toInt() > 0) && (!ui->proxyPortTor->isEnabled() || ui->proxyPortTor->text().toInt() > 0))\n     {\n-        disableOkButton();\n-        pUiProxyIp->setValid(false);\n-        ui->statusLabel->setStyleSheet(\"QLabel { color: red; }\");\n-        ui->statusLabel->setText(tr(\"The supplied proxy address is invalid.\"));\n+        setOkButtonState(otherProxyWidget->isValid()); //only enable ok button if both proxys are valid\n+        ui->statusLabel->clear();\n     }\n     else\n     {\n-        enableOkButton();\n-        ui->statusLabel->clear();\n+        setOkButtonState(false);\n+        ui->statusLabel->setStyleSheet(\"QLabel { color: red; }\");\n+        ui->statusLabel->setText(tr(\"The supplied proxy address is invalid.\"));\n     }\n }\n \n@@ -312,18 +299,18 @@ void OptionsDialog::updateDefaultProxyNets()\n     (strProxy == strDefaultProxyGUI.toStdString()) ? ui->proxyReachTor->setChecked(true) : ui->proxyReachTor->setChecked(false);\n }\n \n-bool OptionsDialog::eventFilter(QObject *object, QEvent *event)\n+ProxyAddressValidator::ProxyAddressValidator(QObject *parent) :\n+QValidator(parent)\n {\n-    if(event->type() == QEvent::FocusOut)\n-    {\n-        if(object == ui->proxyIp)\n-        {\n-            Q_EMIT proxyIpChecks(ui->proxyIp, ui->proxyPort->text().toInt());\n-        }\n-        else if(object == ui->proxyIpTor)\n-        {\n-            Q_EMIT proxyIpChecks(ui->proxyIpTor, ui->proxyPortTor->text().toInt());\n-        }\n-    }\n-    return QDialog::eventFilter(object, event);\n+}\n+\n+QValidator::State ProxyAddressValidator::validate(QString &input, int &pos) const\n+{\n+    Q_UNUSED(pos);\n+    // Validate the proxy\n+    proxyType addrProxy = proxyType(CService(input.toStdString(), 9050), true);\n+    if (addrProxy.IsValid())\n+        return QValidator::Acceptable;\n+\n+    return QValidator::Invalid;\n }"
      },
      {
        "sha": "489e35da49248bd546bdc03022488e1afe4f4bba",
        "filename": "src/qt/optionsdialog.h",
        "status": "modified",
        "additions": 14,
        "deletions": 9,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c28d3937b095f109bda1aaab7ce3db17c033b9a7/src/qt/optionsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c28d3937b095f109bda1aaab7ce3db17c033b9a7/src/qt/optionsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.h?ref=c28d3937b095f109bda1aaab7ce3db17c033b9a7",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_QT_OPTIONSDIALOG_H\n \n #include <QDialog>\n+#include <QValidator>\n \n class OptionsModel;\n class QValidatedLineEdit;\n@@ -18,6 +19,18 @@ namespace Ui {\n class OptionsDialog;\n }\n \n+/** Proxy address widget validator, checks for a valid proxy address.\n+ */\n+class ProxyAddressValidator : public QValidator\n+{\n+    Q_OBJECT\n+\n+public:\n+    explicit ProxyAddressValidator(QObject *parent);\n+\n+    State validate(QString &input, int &pos) const;\n+};\n+\n /** Preferences dialog. */\n class OptionsDialog : public QDialog\n {\n@@ -30,14 +43,7 @@ class OptionsDialog : public QDialog\n     void setModel(OptionsModel *model);\n     void setMapper();\n \n-protected:\n-    bool eventFilter(QObject *object, QEvent *event);\n-\n private Q_SLOTS:\n-    /* enable OK button */\n-    void enableOkButton();\n-    /* disable OK button */\n-    void disableOkButton();\n     /* set OK button state (enabled / disabled) */\n     void setOkButtonState(bool fState);\n     void on_resetButton_clicked();\n@@ -46,7 +52,7 @@ private Q_SLOTS:\n \n     void showRestartWarning(bool fPersistent = false);\n     void clearStatusLabel();\n-    void doProxyIpChecks(QValidatedLineEdit *pUiProxyIp, int nProxyPort);\n+    void updateProxyValidationState();\n     /* query the networks, for which the default proxy is used */\n     void updateDefaultProxyNets();\n \n@@ -57,7 +63,6 @@ private Q_SLOTS:\n     Ui::OptionsDialog *ui;\n     OptionsModel *model;\n     QDataWidgetMapper *mapper;\n-    bool fProxyIpsValid;\n };\n \n #endif // BITCOIN_QT_OPTIONSDIALOG_H"
      },
      {
        "sha": "5658a0bdcf6a12c53131462aa50ec3440fc0fea4",
        "filename": "src/qt/qvalidatedlineedit.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c28d3937b095f109bda1aaab7ce3db17c033b9a7/src/qt/qvalidatedlineedit.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c28d3937b095f109bda1aaab7ce3db17c033b9a7/src/qt/qvalidatedlineedit.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qvalidatedlineedit.cpp?ref=c28d3937b095f109bda1aaab7ce3db17c033b9a7",
        "patch": "@@ -99,9 +99,25 @@ void QValidatedLineEdit::checkValidity()\n     }\n     else\n         setValid(false);\n+\n+    Q_EMIT validationDidChange(this);\n }\n \n void QValidatedLineEdit::setCheckValidator(const QValidator *v)\n {\n     checkValidator = v;\n }\n+\n+bool QValidatedLineEdit::isValid()\n+{\n+    // use checkValidator in case the QValidatedLineEdit is disabled\n+    if (checkValidator)\n+    {\n+        QString address = text();\n+        int pos = 0;\n+        if (checkValidator->validate(address, pos) == QValidator::Acceptable)\n+            return true;\n+    }\n+\n+    return valid;\n+}"
      },
      {
        "sha": "8cb6a425fad51d24b12723f585280ea6b8301725",
        "filename": "src/qt/qvalidatedlineedit.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c28d3937b095f109bda1aaab7ce3db17c033b9a7/src/qt/qvalidatedlineedit.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c28d3937b095f109bda1aaab7ce3db17c033b9a7/src/qt/qvalidatedlineedit.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qvalidatedlineedit.h?ref=c28d3937b095f109bda1aaab7ce3db17c033b9a7",
        "patch": "@@ -18,6 +18,7 @@ class QValidatedLineEdit : public QLineEdit\n     explicit QValidatedLineEdit(QWidget *parent);\n     void clear();\n     void setCheckValidator(const QValidator *v);\n+    bool isValid();\n \n protected:\n     void focusInEvent(QFocusEvent *evt);\n@@ -31,6 +32,9 @@ public Q_SLOTS:\n     void setValid(bool valid);\n     void setEnabled(bool enabled);\n \n+Q_SIGNALS:\n+    void validationDidChange(QValidatedLineEdit *validatedLineEdit);\n+    \n private Q_SLOTS:\n     void markValid();\n     void checkValidity();"
      }
    ]
  },
  {
    "sha": "fa93174a7c06f6bf74e597764398090f3d14c30c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTkzMTc0YTdjMDZmNmJmNzRlNTk3NzY0Mzk4MDkwZjNkMTRjMzBj",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-30T08:13:57Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-30T08:14:42Z"
      },
      "message": "Merge pull request #7127\n\na6cbc02 Bugfix: Default -uiplatform is not actually the platform this build was compiled on (Luke Dashjr)",
      "tree": {
        "sha": "7aea0ff694475b6f284d106cce755520e7acaad4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7aea0ff694475b6f284d106cce755520e7acaad4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa93174a7c06f6bf74e597764398090f3d14c30c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWXAVyAAoJECnUvLZBb1PsAX0QAKTyzcNi3o4Sr8XO1mCzDXwg\n5dG5o+8XKlfgmvYQvBEltNmCosuYzqRU28/+SyzOhNXyc3B8T+GJQbXCacEqg7x5\nkhZwYicxBm+wuol82YqdWvH2i5558B1irbg+6bVVAzeDHfazwzCU9v/c/XrDdvHL\noN6Eqbzc1E2vMSbBIogDxS2/pvpBgdocuigYERvYt3Ildy2msxH97e405DdPM3J6\n6UOiu/JdM/L4I0HeEDbHwCRjFbYc9MIzSHl42Gmdnh1kZAkZ0jZEyE7w05u7AQRl\nfzVFE9Lw6RdBjh4sK+0xArxUPZ8aj++rXzfQ1c1xrKmO4gX1BgtJdahi/VN4ybqE\n9n+jmLMLruF3g+IR91GTBuho+UD3kNiXeOs6AmfmuMs9+kipNsKJkdc/nroZJgmj\n0K16+Fd0or7iRe6kQph2Flk9SR9OAbIlnwPY5vtuTpgRDhKjV4aOktktKCOP+pLE\nYY0mV9mDpdJcFnY0sMwBrlf1t2yH7Js7k58xBQeIYf4/TvUWFhwHa3/qHmd57BzZ\nq67zYOellJdHRD6reWwQ7pwOCsYuRUlbLm1+17gZ5/dZfrO0sgwaOD7rlwthGjXP\nEa8g0ZksmR0XYYI5b1mZTu5SfIaTohqMStNi8wq1h8HKWY0oZZG/I3rVnW8pvEjN\nvaTHUDpFY0zCJI3AXidx\n=7TGk\n-----END PGP SIGNATURE-----",
        "payload": "tree 7aea0ff694475b6f284d106cce755520e7acaad4\nparent c28d3937b095f109bda1aaab7ce3db17c033b9a7\nparent a6cbc02b6b279dc0ed11e007ba84a6b09bdcd740\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1448871237 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1448871282 +0100\n\nMerge pull request #7127\n\na6cbc02 Bugfix: Default -uiplatform is not actually the platform this build was compiled on (Luke Dashjr)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa93174a7c06f6bf74e597764398090f3d14c30c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa93174a7c06f6bf74e597764398090f3d14c30c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa93174a7c06f6bf74e597764398090f3d14c30c/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c28d3937b095f109bda1aaab7ce3db17c033b9a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c28d3937b095f109bda1aaab7ce3db17c033b9a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c28d3937b095f109bda1aaab7ce3db17c033b9a7"
      },
      {
        "sha": "a6cbc02b6b279dc0ed11e007ba84a6b09bdcd740",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6cbc02b6b279dc0ed11e007ba84a6b09bdcd740",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6cbc02b6b279dc0ed11e007ba84a6b09bdcd740"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 14,
      "deletions": 9
    },
    "files": [
      {
        "sha": "6e6330d2a4e38720aa450fc55d2f42db28f8b57d",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa93174a7c06f6bf74e597764398090f3d14c30c/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa93174a7c06f6bf74e597764398090f3d14c30c/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=fa93174a7c06f6bf74e597764398090f3d14c30c",
        "patch": "@@ -311,14 +311,8 @@ BitcoinApplication::BitcoinApplication(int &argc, char **argv):\n     // UI per-platform customization\n     // This must be done inside the BitcoinApplication constructor, or after it, because\n     // PlatformStyle::instantiate requires a QApplication\n-#if defined(Q_OS_MAC)\n-    std::string platformName = \"macosx\";\n-#elif defined(Q_OS_WIN)\n-    std::string platformName = \"windows\";\n-#else\n-    std::string platformName = \"other\";\n-#endif\n-    platformName = GetArg(\"-uiplatform\", platformName);\n+    std::string platformName;\n+    platformName = GetArg(\"-uiplatform\", BitcoinGUI::DEFAULT_UIPLATFORM);\n     platformStyle = PlatformStyle::instantiate(QString::fromStdString(platformName));\n     if (!platformStyle) // Fall back to \"other\" if specified name not found\n         platformStyle = PlatformStyle::instantiate(\"other\");"
      },
      {
        "sha": "853a29e6619aaf1d893ebb17a8d748b1d653fc1b",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa93174a7c06f6bf74e597764398090f3d14c30c/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa93174a7c06f6bf74e597764398090f3d14c30c/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=fa93174a7c06f6bf74e597764398090f3d14c30c",
        "patch": "@@ -59,6 +59,16 @@\n #include <QUrlQuery>\n #endif\n \n+const std::string BitcoinGUI::DEFAULT_UIPLATFORM =\n+#if defined(Q_OS_MAC)\n+        \"macosx\"\n+#elif defined(Q_OS_WIN)\n+        \"windows\"\n+#else\n+        \"other\"\n+#endif\n+        ;\n+\n const QString BitcoinGUI::DEFAULT_WALLET = \"~Default\";\n \n BitcoinGUI::BitcoinGUI(const PlatformStyle *platformStyle, const NetworkStyle *networkStyle, QWidget *parent) :"
      },
      {
        "sha": "945adcd459de447e999b957d88e937f5c021e3bc",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa93174a7c06f6bf74e597764398090f3d14c30c/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa93174a7c06f6bf74e597764398090f3d14c30c/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=fa93174a7c06f6bf74e597764398090f3d14c30c",
        "patch": "@@ -48,6 +48,7 @@ class BitcoinGUI : public QMainWindow\n \n public:\n     static const QString DEFAULT_WALLET;\n+    static const std::string DEFAULT_UIPLATFORM;\n \n     explicit BitcoinGUI(const PlatformStyle *platformStyle, const NetworkStyle *networkStyle, QWidget *parent = 0);\n     ~BitcoinGUI();"
      },
      {
        "sha": "f60928974942386225b40937f8b5c9275cde5b40",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa93174a7c06f6bf74e597764398090f3d14c30c/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa93174a7c06f6bf74e597764398090f3d14c30c/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=fa93174a7c06f6bf74e597764398090f3d14c30c",
        "patch": "@@ -86,7 +86,7 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n         strUsage += HelpMessageOpt(\"-splash\", strprintf(_(\"Show splash screen on startup (default: %u)\"), DEFAULT_SPLASHSCREEN));\n         strUsage += HelpMessageOpt(\"-resetguisettings\", _(\"Reset all settings changes made over the GUI\"));\n         if (showDebug) {\n-            strUsage += HelpMessageOpt(\"-uiplatform\", \"Select platform to customize UI for (one of windows, macosx, other; default: platform compiled on)\");\n+            strUsage += HelpMessageOpt(\"-uiplatform\", strprintf(\"Select platform to customize UI for (one of windows, macosx, other; default: %s)\", BitcoinGUI::DEFAULT_UIPLATFORM));\n         }\n         QString coreOptions = QString::fromStdString(strUsage);\n         text = version + \"\\n\" + header + \"\\n\" + coreOptions;"
      }
    ]
  },
  {
    "sha": "74b5ce24c6a450c0a57048b012dd15b182e981a9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NGI1Y2UyNGM2YTQ1MGMwYTU3MDQ4YjAxMmRkMTViMTgyZTk4MWE5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-30T09:18:38Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-30T09:18:46Z"
      },
      "message": "Merge pull request #7116\n\ncb491e7 Trivial: Fix warning introduced by #7053 by casting to uint64_t (Jorge Tim\u00f3n)",
      "tree": {
        "sha": "bf8db5c5f2e24b3e468b53264a3de4302a3fad7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf8db5c5f2e24b3e468b53264a3de4302a3fad7d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/74b5ce24c6a450c0a57048b012dd15b182e981a9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWXBR2AAoJEHSBCwEjRsmmaaAIAL1Uk6dN9HHNz06Roaf6VNvj\nyHZJYlO+j4zcRni384v006UFCbQ2gvhgufe8Zetkr/4dBpQMFiLsdLwDVFbp3f6h\ncJDBTvQ4YxbI/1ZjhZtuuHCSPLwgI51NbdDszRSSM1Kjbr4PgKI4xgf8TtxOc7sF\nGjVUlhTQBR1H3E2vuQJhy/okkq1Pto/3kGw+xIln9UaFHi0dV0ODEsRXhUbCw8Vz\nAPHG1xu2MkcTaIQ3fIcjOAJiKFZtSFkqSsVF4vrmER6K3Ue2lIlORozy9dRnwfdu\nKERA5Ll+Ma48B0n0YuqbnIrQJg1RW7DuXc1ekqpuMU+lSH3KYiqJKzJznVkkMW8=\n=jLXy\n-----END PGP SIGNATURE-----",
        "payload": "tree bf8db5c5f2e24b3e468b53264a3de4302a3fad7d\nparent fa93174a7c06f6bf74e597764398090f3d14c30c\nparent cb491e778828d322800793cb229884c904f172b5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448875118 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448875126 +0100\n\nMerge pull request #7116\n\ncb491e7 Trivial: Fix warning introduced by #7053 by casting to uint64_t (Jorge Tim\u00f3n)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74b5ce24c6a450c0a57048b012dd15b182e981a9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/74b5ce24c6a450c0a57048b012dd15b182e981a9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74b5ce24c6a450c0a57048b012dd15b182e981a9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa93174a7c06f6bf74e597764398090f3d14c30c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa93174a7c06f6bf74e597764398090f3d14c30c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa93174a7c06f6bf74e597764398090f3d14c30c"
      },
      {
        "sha": "cb491e778828d322800793cb229884c904f172b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb491e778828d322800793cb229884c904f172b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb491e778828d322800793cb229884c904f172b5"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "8aa0c71d610d82e9d7f5f21cb97959a009739ff6",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74b5ce24c6a450c0a57048b012dd15b182e981a9/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74b5ce24c6a450c0a57048b012dd15b182e981a9/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=74b5ce24c6a450c0a57048b012dd15b182e981a9",
        "patch": "@@ -65,7 +65,7 @@ class CChainParams\n     /** Policy: Filter transactions that do not match well-defined patterns */\n     bool RequireStandard() const { return fRequireStandard; }\n     int64_t MaxTipAge() const { return nMaxTipAge; }\n-    int64_t PruneAfterHeight() const { return nPruneAfterHeight; }\n+    uint64_t PruneAfterHeight() const { return nPruneAfterHeight; }\n     /** Make miner stop after a block is found. In RPC, don't return until nGenProcLimit blocks are generated */\n     bool MineBlocksOnDemand() const { return fMineBlocksOnDemand; }\n     /** In the future use NetworkIDString() for RPC fields */"
      },
      {
        "sha": "901a34bdec2331d30c5b3a6468a0e8ec8d6398ce",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74b5ce24c6a450c0a57048b012dd15b182e981a9/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74b5ce24c6a450c0a57048b012dd15b182e981a9/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=74b5ce24c6a450c0a57048b012dd15b182e981a9",
        "patch": "@@ -3290,7 +3290,7 @@ void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight\n     if (chainActive.Tip() == NULL || nPruneTarget == 0) {\n         return;\n     }\n-    if (chainActive.Tip()->nHeight <= nPruneAfterHeight) {\n+    if ((uint64_t)chainActive.Tip()->nHeight <= nPruneAfterHeight) {\n         return;\n     }\n "
      },
      {
        "sha": "bdbfa3826eae287e524442ea3ddb1b77c2462154",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74b5ce24c6a450c0a57048b012dd15b182e981a9/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74b5ce24c6a450c0a57048b012dd15b182e981a9/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=74b5ce24c6a450c0a57048b012dd15b182e981a9",
        "patch": "@@ -222,7 +222,7 @@ CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n  *\n  * Pruning functions are called from FlushStateToDisk when the global fCheckForPruning flag has been set.\n  * Block and undo files are deleted in lock-step (when blk00003.dat is deleted, so is rev00003.dat.)\n- * Pruning cannot take place until the longest chain is at least a certain length (100000 on mainnet, 1000 on testnet, 10 on regtest).\n+ * Pruning cannot take place until the longest chain is at least a certain length (100000 on mainnet, 1000 on testnet, 1000 on regtest).\n  * Pruning will never delete a block within a defined distance (currently 288) from the active chain's tip.\n  * The block index is updated by unsetting HAVE_DATA and HAVE_UNDO for any blocks that were stored in the deleted files.\n  * A db flag records the fact that at least some block files have been pruned."
      }
    ]
  },
  {
    "sha": "9ebedc1756e301e99bd11cc7a43ed705239f86e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZWJlZGMxNzU2ZTMwMWU5OWJkMTFjYzdhNDNlZDcwNTIzOWY4NmUz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-30T10:34:05Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-30T10:34:09Z"
      },
      "message": "Merge pull request #7126\n\nfa4b627 Move blocksonly parameter interaction to InitParameterInteraction() (MarcoFalke)",
      "tree": {
        "sha": "a4e9c6c9df47cad976e07ab9a37d126ab3d2329a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a4e9c6c9df47cad976e07ab9a37d126ab3d2329a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ebedc1756e301e99bd11cc7a43ed705239f86e3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWXCYhAAoJEHSBCwEjRsmmJ/kIAIlB+FD+hzTbg4cx7LNbUWF4\n6GO8tiZIXtCH4dKI8VWGLwDjJzQ8RXb0b8Gmpx1vacAv60NRz/bpyVY0cyCR8J0j\nt/5SqKSqJUAvB0miy/AFl94xuWHwsZQPuzr56Dt0WUu5lOu/zF+nYWZZV3vQeHs9\nkCslqqtD2IQuXuL9YsaNGnfTSsARP+V6pObR3KkubXNOWhDDeGl8oZjs/TRglban\nNRH1BL8VR5d1jWoq/h/SeOStDc6+bxckK3AASa5emM/1ao2hNmHHYbQ/LSOaRYCo\n3sIPha+bxVx4cL6MpLx6hB8yBvdOJ2/igiZ5xn8LQr9YKUxotHg89QrWqSSBO9w=\n=ZDzL\n-----END PGP SIGNATURE-----",
        "payload": "tree a4e9c6c9df47cad976e07ab9a37d126ab3d2329a\nparent 74b5ce24c6a450c0a57048b012dd15b182e981a9\nparent fa4b6272695d282638f07191e634aaeeb91a6be7\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448879645 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448879649 +0100\n\nMerge pull request #7126\n\nfa4b627 Move blocksonly parameter interaction to InitParameterInteraction() (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ebedc1756e301e99bd11cc7a43ed705239f86e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ebedc1756e301e99bd11cc7a43ed705239f86e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ebedc1756e301e99bd11cc7a43ed705239f86e3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "74b5ce24c6a450c0a57048b012dd15b182e981a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74b5ce24c6a450c0a57048b012dd15b182e981a9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/74b5ce24c6a450c0a57048b012dd15b182e981a9"
      },
      {
        "sha": "fa4b6272695d282638f07191e634aaeeb91a6be7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4b6272695d282638f07191e634aaeeb91a6be7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4b6272695d282638f07191e634aaeeb91a6be7"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 1,
      "deletions": 11
    },
    "files": [
      {
        "sha": "191c2ed8ae4577279a42d5cd0432c39b1283ba5e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 11,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ebedc1756e301e99bd11cc7a43ed705239f86e3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ebedc1756e301e99bd11cc7a43ed705239f86e3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9ebedc1756e301e99bd11cc7a43ed705239f86e3",
        "patch": "@@ -820,7 +820,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // ********************************************************* Step 2: parameter interactions\n     const CChainParams& chainparams = Params();\n \n-\n+    // also see: InitParameterInteraction()\n \n     // if using block pruning, then disable txindex\n     if (GetArg(\"-prune\", 0)) {\n@@ -833,16 +833,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n #endif\n     }\n \n-    // disable walletbroadcast and whitelistalwaysrelay in blocksonly mode\n-    if (GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY)) {\n-        if (SoftSetBoolArg(\"-whitelistalwaysrelay\", false))\n-            LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -whitelistalwaysrelay=0\\n\", __func__);\n-#ifdef ENABLE_WALLET\n-        if (SoftSetBoolArg(\"-walletbroadcast\", false))\n-            LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -walletbroadcast=0\\n\", __func__);\n-#endif\n-    }\n-\n     // Make sure enough file descriptors are available\n     int nBind = std::max((int)mapArgs.count(\"-bind\") + (int)mapArgs.count(\"-whitebind\"), 1);\n     int nUserMaxConnections = GetArg(\"-maxconnections\", DEFAULT_MAX_PEER_CONNECTIONS);"
      }
    ]
  },
  {
    "sha": "9af5f9cb8773da2904aa3819234aaebd2efb5d15",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YWY1ZjljYjg3NzNkYTI5MDRhYTM4MTkyMzRhYWViZDJlZmI1ZDE1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-30T10:32:13Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-30T10:34:09Z"
      },
      "message": "Move uiInterface.NotifyBlockTip signal above the core/wallet signal\n- This will keep getbestblockhash more in sync with blocknotify callbacks",
      "tree": {
        "sha": "ad6bf795e67beb98a98ac158a3dd85291a95a02a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad6bf795e67beb98a98ac158a3dd85291a95a02a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9af5f9cb8773da2904aa3819234aaebd2efb5d15",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWXCYjAAoJECnUvLZBb1PskaoQALfjwBLPwLzbnhehKzHa00+m\nqz9DvFcq/tro+aRkH7tEGDKjMiF3GZndH6nIXVdpA4ZYFVklF1QVGALOwhBjEDqG\nu0MKTlubih34yFr0gk7a7w5NbYVagIk8PNaE2RQr6gSH1gzsK2iPCUUKouqbdMzv\n8nG9uixQSV1bc3Qc1orqdqtVMVmruiGs4HuhmfTp4YTAn0JaZLfhlOB1iJOwCawC\nMrUnoDZTjF7dyPdD4dEEcsumqtD1rOTC06TfVqIpR9MO3Pdf/Ha49Yp0QIoYG5NT\nwbm/y952qU2EyMOdRP6PYXxB+KDuh2Tfq3y6V1kTyihyjvhtSbOvUJyV6rCplqfE\ndIH8l1UcISouoHPmpDu3EXJg0VtY6e2c4PeB1Fa1wL55zIteWJcE7kN36gGXFs9/\nYC7v99B5Uhh1DqZfZKXRXK5vjiWEYtZ9NY9YBo++JLmFk7nx7eGe9Dj8aQxMrUoc\n+RYh9B54+CaZBL0tN1FzC7IpWn7wSEhkCCwnwuiBiDpy6y7ddVc3T1u9mqtHia4D\nYK1nQ8+1/6/YtuevL/ulSDR7tAB0OrAx2/xT5Y/uhBb0ZXG3W28bfVUcR+LVECgf\n3RZJsmEi5Myb7tlPLZ9JmrmYrXLzuZczWWnzwQ57CO2EtDz4HkoYK3aGfs/4xa1K\nK6eOghNnNMxN/DWNxsit\n=03Es\n-----END PGP SIGNATURE-----",
        "payload": "tree ad6bf795e67beb98a98ac158a3dd85291a95a02a\nparent 4082e4660305f7696949c3a13e2e9611210894e8\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1448879533 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1448879649 +0100\n\nMove uiInterface.NotifyBlockTip signal above the core/wallet signal\n- This will keep getbestblockhash more in sync with blocknotify callbacks\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9af5f9cb8773da2904aa3819234aaebd2efb5d15",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9af5f9cb8773da2904aa3819234aaebd2efb5d15",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9af5f9cb8773da2904aa3819234aaebd2efb5d15/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4082e4660305f7696949c3a13e2e9611210894e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4082e4660305f7696949c3a13e2e9611210894e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4082e4660305f7696949c3a13e2e9611210894e8"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 31,
      "deletions": 28
    },
    "files": [
      {
        "sha": "0ae721af44597566ffbbd593e01d4bba1406fb31",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 28,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9af5f9cb8773da2904aa3819234aaebd2efb5d15/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9af5f9cb8773da2904aa3819234aaebd2efb5d15/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9af5f9cb8773da2904aa3819234aaebd2efb5d15",
        "patch": "@@ -2606,40 +2606,43 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n         // When we reach this point, we switched to a new tip (stored in pindexNewTip).\n \n         // Notifications/callbacks that can run without cs_main\n-        if (!fInitialDownload) {\n-            // Find the hashes of all blocks that weren't previously in the best chain.\n-            std::vector<uint256> vHashes;\n-            CBlockIndex *pindexToAnnounce = pindexNewTip;\n-            while (pindexToAnnounce != pindexFork) {\n-                vHashes.push_back(pindexToAnnounce->GetBlockHash());\n-                pindexToAnnounce = pindexToAnnounce->pprev;\n-                if (vHashes.size() == MAX_BLOCKS_TO_ANNOUNCE) {\n-                    // Limit announcements in case of a huge reorganization.\n-                    // Rely on the peer's synchronization mechanism in that case.\n-                    break;\n+        // Always notify the UI if a new block tip was connected\n+        if (pindexFork != pindexNewTip) {\n+            uiInterface.NotifyBlockTip(fInitialDownload, pindexNewTip);\n+\n+            if (!fInitialDownload) {\n+                // Find the hashes of all blocks that weren't previously in the best chain.\n+                std::vector<uint256> vHashes;\n+                CBlockIndex *pindexToAnnounce = pindexNewTip;\n+                while (pindexToAnnounce != pindexFork) {\n+                    vHashes.push_back(pindexToAnnounce->GetBlockHash());\n+                    pindexToAnnounce = pindexToAnnounce->pprev;\n+                    if (vHashes.size() == MAX_BLOCKS_TO_ANNOUNCE) {\n+                        // Limit announcements in case of a huge reorganization.\n+                        // Rely on the peer's synchronization mechanism in that case.\n+                        break;\n+                    }\n                 }\n-            }\n-            // Relay inventory, but don't relay old inventory during initial block download.\n-            int nBlockEstimate = 0;\n-            if (fCheckpointsEnabled)\n-                nBlockEstimate = Checkpoints::GetTotalBlocksEstimate(chainparams.Checkpoints());\n-            {\n-                LOCK(cs_vNodes);\n-                BOOST_FOREACH(CNode* pnode, vNodes) {\n-                    if (chainActive.Height() > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate)) {\n-                        BOOST_REVERSE_FOREACH(const uint256& hash, vHashes) {\n-                            pnode->PushBlockHash(hash);\n+                // Relay inventory, but don't relay old inventory during initial block download.\n+                int nBlockEstimate = 0;\n+                if (fCheckpointsEnabled)\n+                    nBlockEstimate = Checkpoints::GetTotalBlocksEstimate(chainparams.Checkpoints());\n+                {\n+                    LOCK(cs_vNodes);\n+                    BOOST_FOREACH(CNode* pnode, vNodes) {\n+                        if (chainActive.Height() > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate)) {\n+                            BOOST_REVERSE_FOREACH(const uint256& hash, vHashes) {\n+                                pnode->PushBlockHash(hash);\n+                            }\n                         }\n                     }\n                 }\n-            }\n-            // Notify external listeners about the new tip.\n-            if (!vHashes.empty()) {\n-                GetMainSignals().UpdatedBlockTip(pindexNewTip);\n+                // Notify external listeners about the new tip.\n+                if (!vHashes.empty()) {\n+                    GetMainSignals().UpdatedBlockTip(pindexNewTip);\n+                }\n             }\n         }\n-        // Always notify the UI if a new block tip was connected\n-        uiInterface.NotifyBlockTip(fInitialDownload, pindexNewTip);\n     } while(pindexMostWork != chainActive.Tip());\n     CheckBlockIndex(chainparams.GetConsensus());\n "
      }
    ]
  },
  {
    "sha": "6fc287f2df548497c1ced1abe64b303f500cad15",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZmMyODdmMmRmNTQ4NDk3YzFjZWQxYWJlNjRiMzAzZjUwMGNhZDE1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-30T11:14:27Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-30T11:15:21Z"
      },
      "message": "Merge pull request #7027\n\n4ea1790 [qa] keypool: DRY: Use test framework (MarcoFalke)\nc6973ca [qa] keypool: Fix white space to prepare transition to test framework (MarcoFalke)",
      "tree": {
        "sha": "4ed2999c7cbf2e7522f785b8cadabfa2247a82de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ed2999c7cbf2e7522f785b8cadabfa2247a82de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6fc287f2df548497c1ced1abe64b303f500cad15",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWXC/JAAoJEHSBCwEjRsmmu3IIALscCAmZoOM7H8mfu5UwS1+2\nxJ/2WH9E6n6Q+rwLJCiIUM6mOa+lTJJKSrD1iclO1yELDwAxDQgbdLeJwBlmg9Q5\n/kQrWTdg0rKYWwXTtvU0kilC/OzaJ3lOyszapT+cLpyxIxkflp9Wr68MOk1sBBww\nV0/+rFdIjj3q2K1nXHwd7+oNU3s2u4sg2fMTO2UR6/5qFa7lCzYqFfvWvSikN0oQ\nOqoXlf2vRzRZKDyc99m6mCnS2gpA3ACfqPQnE+itqSSpAAknWyDZdggJE417/+hr\nm8nJol2cgBevke5/ik8dKO7Nd/NujmMXXba9yD7GBpPAh88D6CQGpptvcVKu4So=\n=NSOL\n-----END PGP SIGNATURE-----",
        "payload": "tree 4ed2999c7cbf2e7522f785b8cadabfa2247a82de\nparent 9ebedc1756e301e99bd11cc7a43ed705239f86e3\nparent 4ea17905538bfef22f0c9bfb990e6d74d311f4e5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448882067 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448882121 +0100\n\nMerge pull request #7027\n\n4ea1790 [qa] keypool: DRY: Use test framework (MarcoFalke)\nc6973ca [qa] keypool: Fix white space to prepare transition to test framework (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fc287f2df548497c1ced1abe64b303f500cad15",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6fc287f2df548497c1ced1abe64b303f500cad15",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fc287f2df548497c1ced1abe64b303f500cad15/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ebedc1756e301e99bd11cc7a43ed705239f86e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ebedc1756e301e99bd11cc7a43ed705239f86e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ebedc1756e301e99bd11cc7a43ed705239f86e3"
      },
      {
        "sha": "4ea17905538bfef22f0c9bfb990e6d74d311f4e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ea17905538bfef22f0c9bfb990e6d74d311f4e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ea17905538bfef22f0c9bfb990e6d74d311f4e5"
      }
    ],
    "stats": {
      "total": 163,
      "additions": 57,
      "deletions": 106
    },
    "files": [
      {
        "sha": "92d91e029ac67050b846d755d0d22cb9195d8082",
        "filename": "qa/rpc-tests/keypool.py",
        "status": "modified",
        "additions": 57,
        "deletions": 106,
        "changes": 163,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fc287f2df548497c1ced1abe64b303f500cad15/qa/rpc-tests/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fc287f2df548497c1ced1abe64b303f500cad15/qa/rpc-tests/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/keypool.py?ref=6fc287f2df548497c1ced1abe64b303f500cad15",
        "patch": "@@ -6,15 +6,8 @@\n # Exercise the wallet keypool, and interaction with wallet encryption/locking\n \n # Add python-bitcoinrpc to module search path:\n-import os\n-import sys\n-\n-import json\n-import shutil\n-import subprocess\n-import tempfile\n-import traceback\n \n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n \n@@ -39,107 +32,65 @@ def check_array_result(object_array, to_match, expected):\n     if num_matched == 0:\n         raise AssertionError(\"No objects matched %s\"%(str(to_match)))\n \n-def run_test(nodes, tmpdir):\n-    # Encrypt wallet and wait to terminate\n-    nodes[0].encryptwallet('test')\n-    bitcoind_processes[0].wait()\n-    # Restart node 0\n-    nodes[0] = start_node(0, tmpdir)\n-    # Keep creating keys\n-    addr = nodes[0].getnewaddress()\n-    try:\n-        addr = nodes[0].getnewaddress()\n-        raise AssertionError('Keypool should be exhausted after one address')\n-    except JSONRPCException,e:\n-        assert(e.error['code']==-12)\n-\n-    # put three new keys in the keypool\n-    nodes[0].walletpassphrase('test', 12000)\n-    nodes[0].keypoolrefill(3)\n-    nodes[0].walletlock()\n-\n-    # drain the keys\n-    addr = set()\n-    addr.add(nodes[0].getrawchangeaddress())\n-    addr.add(nodes[0].getrawchangeaddress())\n-    addr.add(nodes[0].getrawchangeaddress())\n-    addr.add(nodes[0].getrawchangeaddress())\n-    # assert that four unique addresses were returned\n-    assert(len(addr) == 4)\n-    # the next one should fail\n-    try:\n-        addr = nodes[0].getrawchangeaddress()\n-        raise AssertionError('Keypool should be exhausted after three addresses')\n-    except JSONRPCException,e:\n-        assert(e.error['code']==-12)\n-\n-    # refill keypool with three new addresses\n-    nodes[0].walletpassphrase('test', 12000)\n-    nodes[0].keypoolrefill(3)\n-    nodes[0].walletlock()\n+class KeyPoolTest(BitcoinTestFramework):\n \n-    # drain them by mining\n-    nodes[0].generate(1)\n-    nodes[0].generate(1)\n-    nodes[0].generate(1)\n-    nodes[0].generate(1)\n-    try:\n+    def run_test(self):\n+        nodes = self.nodes\n+        # Encrypt wallet and wait to terminate\n+        nodes[0].encryptwallet('test')\n+        bitcoind_processes[0].wait()\n+        # Restart node 0\n+        nodes[0] = start_node(0, self.options.tmpdir)\n+        # Keep creating keys\n+        addr = nodes[0].getnewaddress()\n+        try:\n+            addr = nodes[0].getnewaddress()\n+            raise AssertionError('Keypool should be exhausted after one address')\n+        except JSONRPCException,e:\n+            assert(e.error['code']==-12)\n+\n+        # put three new keys in the keypool\n+        nodes[0].walletpassphrase('test', 12000)\n+        nodes[0].keypoolrefill(3)\n+        nodes[0].walletlock()\n+\n+        # drain the keys\n+        addr = set()\n+        addr.add(nodes[0].getrawchangeaddress())\n+        addr.add(nodes[0].getrawchangeaddress())\n+        addr.add(nodes[0].getrawchangeaddress())\n+        addr.add(nodes[0].getrawchangeaddress())\n+        # assert that four unique addresses were returned\n+        assert(len(addr) == 4)\n+        # the next one should fail\n+        try:\n+            addr = nodes[0].getrawchangeaddress()\n+            raise AssertionError('Keypool should be exhausted after three addresses')\n+        except JSONRPCException,e:\n+            assert(e.error['code']==-12)\n+\n+        # refill keypool with three new addresses\n+        nodes[0].walletpassphrase('test', 12000)\n+        nodes[0].keypoolrefill(3)\n+        nodes[0].walletlock()\n+\n+        # drain them by mining\n         nodes[0].generate(1)\n-        raise AssertionError('Keypool should be exhausted after three addesses')\n-    except JSONRPCException,e:\n-        assert(e.error['code']==-12)\n-\n-def main():\n-    import optparse\n-\n-    parser = optparse.OptionParser(usage=\"%prog [options]\")\n-    parser.add_option(\"--nocleanup\", dest=\"nocleanup\", default=False, action=\"store_true\",\n-                      help=\"Leave bitcoinds and test.* datadir on exit or error\")\n-    parser.add_option(\"--srcdir\", dest=\"srcdir\", default=\"../../src\",\n-                      help=\"Source directory containing bitcoind/bitcoin-cli (default: %default%)\")\n-    parser.add_option(\"--tmpdir\", dest=\"tmpdir\", default=tempfile.mkdtemp(prefix=\"test\"),\n-                      help=\"Root directory for datadirs\")\n-    (options, args) = parser.parse_args()\n-\n-    os.environ['PATH'] = options.srcdir+\":\"+os.environ['PATH']\n-\n-    check_json_precision()\n-\n-    success = False\n-    nodes = []\n-    try:\n-        print(\"Initializing test directory \"+options.tmpdir)\n-        if not os.path.isdir(options.tmpdir):\n-            os.makedirs(options.tmpdir)\n-        initialize_chain(options.tmpdir)\n-\n-        nodes = start_nodes(1, options.tmpdir)\n-\n-        run_test(nodes, options.tmpdir)\n-\n-        success = True\n-\n-    except AssertionError as e:\n-        print(\"Assertion failed: \"+e.message)\n-    except JSONRPCException as e:\n-        print(\"JSONRPC error: \"+e.error['message'])\n-        traceback.print_tb(sys.exc_info()[2])\n-    except Exception as e:\n-        print(\"Unexpected exception caught during testing: \"+str(sys.exc_info()[0]))\n-        traceback.print_tb(sys.exc_info()[2])\n+        nodes[0].generate(1)\n+        nodes[0].generate(1)\n+        nodes[0].generate(1)\n+        try:\n+            nodes[0].generate(1)\n+            raise AssertionError('Keypool should be exhausted after three addesses')\n+        except JSONRPCException,e:\n+            assert(e.error['code']==-12)\n \n-    if not options.nocleanup:\n-        print(\"Cleaning up\")\n-        stop_nodes(nodes)\n-        wait_bitcoinds()\n-        shutil.rmtree(options.tmpdir)\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain(self.options.tmpdir)\n \n-    if success:\n-        print(\"Tests successful\")\n-        sys.exit(0)\n-    else:\n-        print(\"Failed\")\n-        sys.exit(1)\n+    def setup_network(self):\n+        self.nodes = start_nodes(1, self.options.tmpdir)\n \n if __name__ == '__main__':\n-    main()\n+    KeyPoolTest().main()"
      }
    ]
  },
  {
    "sha": "a7751824ce8a7e1cc5511794516fe674bc3eaa3c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNzc1MTgyNGNlOGE3ZTFjYzU1MTE3OTQ1MTZmZTY3NGJjM2VhYTNj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-30T11:18:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-30T11:18:20Z"
      },
      "message": "Merge pull request #7103\n\nfa506c0 [wallet] Add rpc tests to verify fee calculations (MarcoFalke)\n4b89f01 Default fPayAtLeastCustomFee to false (Ryan Havar)",
      "tree": {
        "sha": "00ba888f51a1b92674751bcb78bca7df68c72195",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/00ba888f51a1b92674751bcb78bca7df68c72195"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7751824ce8a7e1cc5511794516fe674bc3eaa3c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWXDB8AAoJEHSBCwEjRsmmCzYH/1HscG+OEp6hrycK9CBCCsvC\nRqFWMiZKXZ9M4IwWIBmrFNf8Golt9Hh2TJ2XBN+qG3PCg+0gFjsCbQxvOlwGRlul\nigF8WZ6tJlqmVsSh45DlR+qFGCVT8naAcVYypWNu0WljOwuqjKmBMd5pBvJTM0yN\nt0MHbjRR8gHyWFwv3jCbvgUcwSQ6JJRNEJEib7NhI3Ps41MFwodB1M0hN/c9c/6L\nYAdUVK/aBfc4LOiHwxSl1Dr2WP80Nm4y8oAdeLxe7QHxpy2BCvMa8gwMrXAkbnz3\nX9e2MQhk9XU6dBQooh/uP98VRgAsbAGWuZgEEHCbknD2eUNYxiNv1LfgQFrWO68=\n=j45S\n-----END PGP SIGNATURE-----",
        "payload": "tree 00ba888f51a1b92674751bcb78bca7df68c72195\nparent 6fc287f2df548497c1ced1abe64b303f500cad15\nparent fa506c0c9b3928843704c666909c0b0c5af2f9a0\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448882293 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448882300 +0100\n\nMerge pull request #7103\n\nfa506c0 [wallet] Add rpc tests to verify fee calculations (MarcoFalke)\n4b89f01 Default fPayAtLeastCustomFee to false (Ryan Havar)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7751824ce8a7e1cc5511794516fe674bc3eaa3c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a7751824ce8a7e1cc5511794516fe674bc3eaa3c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7751824ce8a7e1cc5511794516fe674bc3eaa3c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6fc287f2df548497c1ced1abe64b303f500cad15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fc287f2df548497c1ced1abe64b303f500cad15",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6fc287f2df548497c1ced1abe64b303f500cad15"
      },
      {
        "sha": "fa506c0c9b3928843704c666909c0b0c5af2f9a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa506c0c9b3928843704c666909c0b0c5af2f9a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa506c0c9b3928843704c666909c0b0c5af2f9a0"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 31,
      "deletions": 13
    },
    "files": [
      {
        "sha": "d9d5129f210399d88735d805d8451de08a262942",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7751824ce8a7e1cc5511794516fe674bc3eaa3c/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7751824ce8a7e1cc5511794516fe674bc3eaa3c/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=a7751824ce8a7e1cc5511794516fe674bc3eaa3c",
        "patch": "@@ -67,6 +67,9 @@ def check_json_precision():\n     if satoshis != 2000000000000003:\n         raise RuntimeError(\"JSON encode/decode loses precision\")\n \n+def count_bytes(hex_string):\n+    return len(bytearray.fromhex(hex_string))\n+\n def sync_blocks(rpc_connections, wait=1):\n     \"\"\"\n     Wait until everybody has the same block count"
      },
      {
        "sha": "6f6bc3189527e667b56c4e66cc776e6e5311fd77",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 27,
        "deletions": 12,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7751824ce8a7e1cc5511794516fe674bc3eaa3c/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7751824ce8a7e1cc5511794516fe674bc3eaa3c/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=a7751824ce8a7e1cc5511794516fe674bc3eaa3c",
        "patch": "@@ -24,6 +24,17 @@\n \n class WalletTest (BitcoinTestFramework):\n \n+    def check_fee_amount(self, curr_balance, balance_with_fee, fee_per_byte, tx_size):\n+        \"\"\"Return curr_balance after asserting the fee was in range\"\"\"\n+        fee = balance_with_fee - curr_balance\n+        target_fee = fee_per_byte * tx_size\n+        if fee < target_fee:\n+            raise AssertionError(\"Fee of %s BTC too low! (Should be %s BTC)\"%(str(fee), str(target_fee)))\n+        # allow the node's estimation to be at most 2 bytes off\n+        if fee > fee_per_byte * (tx_size + 2):\n+            raise AssertionError(\"Fee of %s BTC too high! (Should be %s BTC)\"%(str(fee), str(target_fee)))\n+        return curr_balance\n+\n     def setup_chain(self):\n         print(\"Initializing test directory \"+self.options.tmpdir)\n         initialize_chain_clean(self.options.tmpdir, 4)\n@@ -104,33 +115,37 @@ def run_test (self):\n \n         # Send 10 BTC normal\n         address = self.nodes[0].getnewaddress(\"test\")\n-        self.nodes[2].settxfee(Decimal('0.001'))\n+        fee_per_byte = Decimal('0.001') / 1000\n+        self.nodes[2].settxfee(fee_per_byte * 1000)\n         txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", False)\n         self.nodes[2].generate(1)\n         self.sync_all()\n-        assert_equal(self.nodes[2].getbalance(), Decimal('89.99900000'))\n-        assert_equal(self.nodes[0].getbalance(), Decimal('10.00000000'))\n+        node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), Decimal('90'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n+        assert_equal(self.nodes[0].getbalance(), Decimal('10'))\n \n         # Send 10 BTC with subtract fee from amount\n         txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", True)\n         self.nodes[2].generate(1)\n         self.sync_all()\n-        assert_equal(self.nodes[2].getbalance(), Decimal('79.99900000'))\n-        assert_equal(self.nodes[0].getbalance(), Decimal('19.99900000'))\n+        node_2_bal -= Decimal('10')\n+        assert_equal(self.nodes[2].getbalance(), node_2_bal)\n+        node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), Decimal('20'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n \n         # Sendmany 10 BTC\n         txid = self.nodes[2].sendmany('from1', {address: 10}, 0, \"\", [])\n         self.nodes[2].generate(1)\n         self.sync_all()\n-        assert_equal(self.nodes[2].getbalance(), Decimal('69.99800000'))\n-        assert_equal(self.nodes[0].getbalance(), Decimal('29.99900000'))\n+        node_0_bal += Decimal('10')\n+        node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), node_2_bal - Decimal('10'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n+        assert_equal(self.nodes[0].getbalance(), node_0_bal)\n \n         # Sendmany 10 BTC with subtract fee from amount\n         txid = self.nodes[2].sendmany('from1', {address: 10}, 0, \"\", [address])\n         self.nodes[2].generate(1)\n         self.sync_all()\n-        assert_equal(self.nodes[2].getbalance(), Decimal('59.99800000'))\n-        assert_equal(self.nodes[0].getbalance(), Decimal('39.99800000'))\n+        node_2_bal -= Decimal('10')\n+        assert_equal(self.nodes[2].getbalance(), node_2_bal)\n+        node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), node_0_bal + Decimal('10'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n \n         # Test ResendWalletTransactions:\n         # Create a couple of transactions, then start up a fourth\n@@ -191,14 +206,14 @@ def run_test (self):\n         txObjNotBroadcasted = self.nodes[0].gettransaction(txIdNotBroadcasted)\n         self.nodes[1].generate(1) #mine a block, tx should not be in there\n         self.sync_all()\n-        assert_equal(self.nodes[2].getbalance(), Decimal('59.99800000')); #should not be changed because tx was not broadcasted\n+        assert_equal(self.nodes[2].getbalance(), node_2_bal); #should not be changed because tx was not broadcasted\n \n         #now broadcast from another node, mine a block, sync, and check the balance\n         self.nodes[1].sendrawtransaction(txObjNotBroadcasted['hex'])\n         self.nodes[1].generate(1)\n         self.sync_all()\n         txObjNotBroadcasted = self.nodes[0].gettransaction(txIdNotBroadcasted)\n-        assert_equal(self.nodes[2].getbalance(), Decimal('61.99800000')); #should not be\n+        assert_equal(self.nodes[2].getbalance(), node_2_bal + Decimal('2')); #should not be\n \n         #create another tx\n         txIdNotBroadcasted  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 2);\n@@ -216,7 +231,7 @@ def run_test (self):\n         sync_blocks(self.nodes)\n \n         #tx should be added to balance because after restarting the nodes tx should be broadcastet\n-        assert_equal(self.nodes[2].getbalance(), Decimal('63.99800000')); #should not be\n+        assert_equal(self.nodes[2].getbalance(), node_2_bal + Decimal('4')); #should not be\n \n         #send a tx with value in a string (PR#6380 +)\n         txId  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), \"2\")"
      },
      {
        "sha": "b062226dd9cf0c1b895a8308e06cc37bba684b46",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7751824ce8a7e1cc5511794516fe674bc3eaa3c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7751824ce8a7e1cc5511794516fe674bc3eaa3c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a7751824ce8a7e1cc5511794516fe674bc3eaa3c",
        "patch": "@@ -41,7 +41,7 @@ CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n unsigned int nTxConfirmTarget = DEFAULT_TX_CONFIRM_TARGET;\n bool bSpendZeroConfChange = DEFAULT_SPEND_ZEROCONF_CHANGE;\n bool fSendFreeTransactions = DEFAULT_SEND_FREE_TRANSACTIONS;\n-bool fPayAtLeastCustomFee = true;\n+bool fPayAtLeastCustomFee = false;\n \n /**\n  * Fees smaller than this (in satoshi) are considered zero fee (for transaction creation)"
      }
    ]
  },
  {
    "sha": "4531fc4272dec4b10c4ed3b21bd90e961b1bf1c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NTMxZmM0MjcyZGVjNGIxMGM0ZWQzYjIxYmQ5MGU5NjFiMWJmMWMz",
    "commit": {
      "author": {
        "name": "Daniel Cousens",
        "email": "github@dcousens.com",
        "date": "2015-11-17T01:10:28Z"
      },
      "committer": {
        "name": "Daniel Cousens",
        "email": "github@dcousens.com",
        "date": "2015-11-30T11:20:43Z"
      },
      "message": "torcontrol: only output disconnect if -debug=tor",
      "tree": {
        "sha": "2835146937a5ea8bbff5693e2d27f56d698c9358",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2835146937a5ea8bbff5693e2d27f56d698c9358"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4531fc4272dec4b10c4ed3b21bd90e961b1bf1c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4531fc4272dec4b10c4ed3b21bd90e961b1bf1c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4531fc4272dec4b10c4ed3b21bd90e961b1bf1c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4531fc4272dec4b10c4ed3b21bd90e961b1bf1c3/comments",
    "author": {
      "login": "dcousens",
      "id": 413395,
      "node_id": "MDQ6VXNlcjQxMzM5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcousens",
      "html_url": "https://github.com/dcousens",
      "followers_url": "https://api.github.com/users/dcousens/followers",
      "following_url": "https://api.github.com/users/dcousens/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcousens/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
      "organizations_url": "https://api.github.com/users/dcousens/orgs",
      "repos_url": "https://api.github.com/users/dcousens/repos",
      "events_url": "https://api.github.com/users/dcousens/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcousens/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dcousens",
      "id": 413395,
      "node_id": "MDQ6VXNlcjQxMzM5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcousens",
      "html_url": "https://github.com/dcousens",
      "followers_url": "https://api.github.com/users/dcousens/followers",
      "following_url": "https://api.github.com/users/dcousens/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcousens/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
      "organizations_url": "https://api.github.com/users/dcousens/orgs",
      "repos_url": "https://api.github.com/users/dcousens/repos",
      "events_url": "https://api.github.com/users/dcousens/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcousens/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7751824ce8a7e1cc5511794516fe674bc3eaa3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7751824ce8a7e1cc5511794516fe674bc3eaa3c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7751824ce8a7e1cc5511794516fe674bc3eaa3c"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d5b8d3dedecaa3502d72c4f211129a4cee2509a5",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4531fc4272dec4b10c4ed3b21bd90e961b1bf1c3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4531fc4272dec4b10c4ed3b21bd90e961b1bf1c3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4531fc4272dec4b10c4ed3b21bd90e961b1bf1c3",
        "patch": "@@ -441,7 +441,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT));\n         strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n     }\n-    string debugCategories = \"addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, mempoolrej, net, proxy, prune, http, libevent, zmq\"; // Don't translate these and qt below\n+    string debugCategories = \"addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, mempoolrej, net, proxy, prune, http, libevent, tor, zmq\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +"
      },
      {
        "sha": "8eccc81e30567b5488504a5e3b324f3a908e0c2c",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4531fc4272dec4b10c4ed3b21bd90e961b1bf1c3/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4531fc4272dec4b10c4ed3b21bd90e961b1bf1c3/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=4531fc4272dec4b10c4ed3b21bd90e961b1bf1c3",
        "patch": "@@ -617,7 +617,9 @@ void TorController::disconnected_cb(TorControlConnection& conn)\n     service = CService();\n     if (!reconnect)\n         return;\n-    LogPrintf(\"tor: Disconnected from Tor control port %s, trying to reconnect\\n\", target);\n+\n+    LogPrint(\"tor\", \"tor: Disconnected from Tor control port %s, trying to reconnect\\n\", target);\n+\n     // Single-shot timer for reconnect. Use exponential backoff.\n     struct timeval time = MillisToTimeval(int64_t(reconnect_timeout * 1000.0));\n     reconnect_ev = event_new(base, -1, 0, reconnect_cb, this);"
      }
    ]
  },
  {
    "sha": "96b802510da0750aabc4f3ba6750cb5ce76f2b8c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NmI4MDI1MTBkYTA3NTBhYWJjNGYzYmE2NzUwY2I1Y2U3NmYyYjhj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-30T11:58:01Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-30T12:04:29Z"
      },
      "message": "Merge pull request #7112\n\n9af5f9c Move uiInterface.NotifyBlockTip signal above the core/wallet signal - This will keep getbestblockhash more in sync with blocknotify callbacks (Jonas Schnelli)\n4082e46 [Qt] call GuessVerificationProgress synchronous during core signal, pass double over UI signal (Jonas Schnelli)\n947d20b [Qt] reduce cs_main in getVerificationProgress() (Jonas Schnelli)\ne6d50fc [Qt] update block tip (height and date) without locking cs_main, update always (each block) (Jonas Schnelli)\n012fc91 NotifyBlockTip signal: switch from hash (uint256) to CBlockIndex* - also adds a boolean for indication if the tip update was happening during initial sync - emit notification also during initial sync (Jonas Schnelli)",
      "tree": {
        "sha": "3374e1ba583bf511745c2cd4c02ff6ecb6d3cc8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3374e1ba583bf511745c2cd4c02ff6ecb6d3cc8b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/96b802510da0750aabc4f3ba6750cb5ce76f2b8c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWXDtNAAoJEHSBCwEjRsmmvywIAIku3ieABdQ0X/JHE1nufcgw\nS+LRAkMg5P7Y2F3tUVadcGvtg3CfW39NqbbYG3RC3ZO7ngoehxoKhK5LK/s1B+Xm\nbLKI5m/UFVwwJYALMvdJKqEYnuP4Sizlf6yp2YiiRcjUQ+BmoJpYiTfH5UShonW5\n0K1K7SAGbRqCZsUOlrdFzUZPsp5v5uxiJ2O47q9DYds7cFy6URXo0pMuvfS0thOd\nJH8k3bZAb80H44Br5f21dpRT8mQBmMoZuudKfioCyRMXA2z+fSnpklkKWqxQJD1W\n45LawdLAtMTo2+mHlcTAiFQargotvk/iwMZd46DbM3A2Q25WcHERrut/LzU3sps=\n=YU30\n-----END PGP SIGNATURE-----",
        "payload": "tree 3374e1ba583bf511745c2cd4c02ff6ecb6d3cc8b\nparent a7751824ce8a7e1cc5511794516fe674bc3eaa3c\nparent 9af5f9cb8773da2904aa3819234aaebd2efb5d15\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448884681 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448885069 +0100\n\nMerge pull request #7112\n\n9af5f9c Move uiInterface.NotifyBlockTip signal above the core/wallet signal - This will keep getbestblockhash more in sync with blocknotify callbacks (Jonas Schnelli)\n4082e46 [Qt] call GuessVerificationProgress synchronous during core signal, pass double over UI signal (Jonas Schnelli)\n947d20b [Qt] reduce cs_main in getVerificationProgress() (Jonas Schnelli)\ne6d50fc [Qt] update block tip (height and date) without locking cs_main, update always (each block) (Jonas Schnelli)\n012fc91 NotifyBlockTip signal: switch from hash (uint256) to CBlockIndex* - also adds a boolean for indication if the tip update was happening during initial sync - emit notification also during initial sync (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96b802510da0750aabc4f3ba6750cb5ce76f2b8c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/96b802510da0750aabc4f3ba6750cb5ce76f2b8c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96b802510da0750aabc4f3ba6750cb5ce76f2b8c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7751824ce8a7e1cc5511794516fe674bc3eaa3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7751824ce8a7e1cc5511794516fe674bc3eaa3c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7751824ce8a7e1cc5511794516fe674bc3eaa3c"
      },
      {
        "sha": "9af5f9cb8773da2904aa3819234aaebd2efb5d15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9af5f9cb8773da2904aa3819234aaebd2efb5d15",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9af5f9cb8773da2904aa3819234aaebd2efb5d15"
      }
    ],
    "stats": {
      "total": 163,
      "additions": 83,
      "deletions": 80
    },
    "files": [
      {
        "sha": "e6ce3d7b59993e6004414a81e5fed7fafba39194",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96b802510da0750aabc4f3ba6750cb5ce76f2b8c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96b802510da0750aabc4f3ba6750cb5ce76f2b8c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=96b802510da0750aabc4f3ba6750cb5ce76f2b8c",
        "patch": "@@ -515,11 +515,14 @@ std::string LicenseInfo()\n            \"\\n\";\n }\n \n-static void BlockNotifyCallback(const uint256& hashNewTip)\n+static void BlockNotifyCallback(bool initialSync, const CBlockIndex *pBlockIndex)\n {\n+    if (initialSync || !pBlockIndex)\n+        return;\n+\n     std::string strCmd = GetArg(\"-blocknotify\", \"\");\n \n-    boost::replace_all(strCmd, \"%s\", hashNewTip.GetHex());\n+    boost::replace_all(strCmd, \"%s\", pBlockIndex->GetBlockHash().GetHex());\n     boost::thread t(runCommand, strCmd); // thread runs free\n }\n "
      },
      {
        "sha": "33bd2e0ce1c17619bcf1a6b7aae8053665149457",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 27,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96b802510da0750aabc4f3ba6750cb5ce76f2b8c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96b802510da0750aabc4f3ba6750cb5ce76f2b8c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=96b802510da0750aabc4f3ba6750cb5ce76f2b8c",
        "patch": "@@ -2606,37 +2606,41 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n         // When we reach this point, we switched to a new tip (stored in pindexNewTip).\n \n         // Notifications/callbacks that can run without cs_main\n-        if (!fInitialDownload) {\n-            // Find the hashes of all blocks that weren't previously in the best chain.\n-            std::vector<uint256> vHashes;\n-            CBlockIndex *pindexToAnnounce = pindexNewTip;\n-            while (pindexToAnnounce != pindexFork) {\n-                vHashes.push_back(pindexToAnnounce->GetBlockHash());\n-                pindexToAnnounce = pindexToAnnounce->pprev;\n-                if (vHashes.size() == MAX_BLOCKS_TO_ANNOUNCE) {\n-                    // Limit announcements in case of a huge reorganization.\n-                    // Rely on the peer's synchronization mechanism in that case.\n-                    break;\n+        // Always notify the UI if a new block tip was connected\n+        if (pindexFork != pindexNewTip) {\n+            uiInterface.NotifyBlockTip(fInitialDownload, pindexNewTip);\n+\n+            if (!fInitialDownload) {\n+                // Find the hashes of all blocks that weren't previously in the best chain.\n+                std::vector<uint256> vHashes;\n+                CBlockIndex *pindexToAnnounce = pindexNewTip;\n+                while (pindexToAnnounce != pindexFork) {\n+                    vHashes.push_back(pindexToAnnounce->GetBlockHash());\n+                    pindexToAnnounce = pindexToAnnounce->pprev;\n+                    if (vHashes.size() == MAX_BLOCKS_TO_ANNOUNCE) {\n+                        // Limit announcements in case of a huge reorganization.\n+                        // Rely on the peer's synchronization mechanism in that case.\n+                        break;\n+                    }\n                 }\n-            }\n-            // Relay inventory, but don't relay old inventory during initial block download.\n-            int nBlockEstimate = 0;\n-            if (fCheckpointsEnabled)\n-                nBlockEstimate = Checkpoints::GetTotalBlocksEstimate(chainparams.Checkpoints());\n-            {\n-                LOCK(cs_vNodes);\n-                BOOST_FOREACH(CNode* pnode, vNodes) {\n-                    if (chainActive.Height() > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate)) {\n-                        BOOST_REVERSE_FOREACH(const uint256& hash, vHashes) {\n-                            pnode->PushBlockHash(hash);\n+                // Relay inventory, but don't relay old inventory during initial block download.\n+                int nBlockEstimate = 0;\n+                if (fCheckpointsEnabled)\n+                    nBlockEstimate = Checkpoints::GetTotalBlocksEstimate(chainparams.Checkpoints());\n+                {\n+                    LOCK(cs_vNodes);\n+                    BOOST_FOREACH(CNode* pnode, vNodes) {\n+                        if (chainActive.Height() > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate)) {\n+                            BOOST_REVERSE_FOREACH(const uint256& hash, vHashes) {\n+                                pnode->PushBlockHash(hash);\n+                            }\n                         }\n                     }\n                 }\n-            }\n-            // Notify external listeners about the new tip.\n-            if (!vHashes.empty()) {\n-                GetMainSignals().UpdatedBlockTip(pindexNewTip);\n-                uiInterface.NotifyBlockTip(vHashes.front());\n+                // Notify external listeners about the new tip.\n+                if (!vHashes.empty()) {\n+                    GetMainSignals().UpdatedBlockTip(pindexNewTip);\n+                }\n             }\n         }\n     } while(pindexMostWork != chainActive.Tip());"
      },
      {
        "sha": "b2bd167aeaf0dfde36b07ca25114fe700ce422fc",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96b802510da0750aabc4f3ba6750cb5ce76f2b8c/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96b802510da0750aabc4f3ba6750cb5ce76f2b8c/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=96b802510da0750aabc4f3ba6750cb5ce76f2b8c",
        "patch": "@@ -453,8 +453,8 @@ void BitcoinGUI::setClientModel(ClientModel *clientModel)\n         setNumConnections(clientModel->getNumConnections());\n         connect(clientModel, SIGNAL(numConnectionsChanged(int)), this, SLOT(setNumConnections(int)));\n \n-        setNumBlocks(clientModel->getNumBlocks(), clientModel->getLastBlockDate());\n-        connect(clientModel, SIGNAL(numBlocksChanged(int,QDateTime)), this, SLOT(setNumBlocks(int,QDateTime)));\n+        setNumBlocks(clientModel->getNumBlocks(), clientModel->getLastBlockDate(), clientModel->getVerificationProgress(NULL));\n+        connect(clientModel, SIGNAL(numBlocksChanged(int,QDateTime,double)), this, SLOT(setNumBlocks(int,QDateTime,double)));\n \n         // Receive and report messages from client model\n         connect(clientModel, SIGNAL(message(QString,QString,unsigned int)), this, SLOT(message(QString,QString,unsigned int)));\n@@ -682,7 +682,7 @@ void BitcoinGUI::setNumConnections(int count)\n     labelConnectionsIcon->setToolTip(tr(\"%n active connection(s) to Bitcoin network\", \"\", count));\n }\n \n-void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate)\n+void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress)\n {\n     if(!clientModel)\n         return;\n@@ -759,7 +759,7 @@ void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate)\n         progressBarLabel->setVisible(true);\n         progressBar->setFormat(tr(\"%1 behind\").arg(timeBehindText));\n         progressBar->setMaximum(1000000000);\n-        progressBar->setValue(clientModel->getVerificationProgress() * 1000000000.0 + 0.5);\n+        progressBar->setValue(nVerificationProgress * 1000000000.0 + 0.5);\n         progressBar->setVisible(true);\n \n         tooltip = tr(\"Catching up...\") + QString(\"<br>\") + tooltip;"
      },
      {
        "sha": "b121a443e76497b139d884cbe67c3277b022035b",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96b802510da0750aabc4f3ba6750cb5ce76f2b8c/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96b802510da0750aabc4f3ba6750cb5ce76f2b8c/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=96b802510da0750aabc4f3ba6750cb5ce76f2b8c",
        "patch": "@@ -150,7 +150,7 @@ public Q_SLOTS:\n     /** Set number of connections shown in the UI */\n     void setNumConnections(int count);\n     /** Set number of blocks and last block date shown in the UI */\n-    void setNumBlocks(int count, const QDateTime& blockDate);\n+    void setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress);\n \n     /** Notify the user of an event from the core network or transaction handling code.\n        @param[in] title     the message box / notification title"
      },
      {
        "sha": "d36d129c1ac00f485b9b773891854707ab7fd2a6",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 33,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96b802510da0750aabc4f3ba6750cb5ce76f2b8c/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96b802510da0750aabc4f3ba6750cb5ce76f2b8c/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=96b802510da0750aabc4f3ba6750cb5ce76f2b8c",
        "patch": "@@ -22,17 +22,16 @@\n #include <QDebug>\n #include <QTimer>\n \n+class CBlockIndex;\n+\n static const int64_t nClientStartupTime = GetTime();\n+static int64_t nLastBlockTipUpdateNotification = 0;\n \n ClientModel::ClientModel(OptionsModel *optionsModel, QObject *parent) :\n     QObject(parent),\n     optionsModel(optionsModel),\n     peerTableModel(0),\n     banTableModel(0),\n-    cachedNumBlocks(0),\n-    cachedBlockDate(QDateTime()),\n-    cachedReindexing(0),\n-    cachedImporting(0),\n     pollTimer(0)\n {\n     peerTableModel = new PeerTableModel(this);\n@@ -99,40 +98,21 @@ size_t ClientModel::getMempoolDynamicUsage() const\n     return mempool.DynamicMemoryUsage();\n }\n \n-double ClientModel::getVerificationProgress() const\n+double ClientModel::getVerificationProgress(const CBlockIndex *tipIn) const\n {\n-    LOCK(cs_main);\n-    return Checkpoints::GuessVerificationProgress(Params().Checkpoints(), chainActive.Tip());\n+    CBlockIndex *tip = const_cast<CBlockIndex *>(tipIn);\n+    if (!tip)\n+    {\n+        LOCK(cs_main);\n+        tip = chainActive.Tip();\n+    }\n+    return Checkpoints::GuessVerificationProgress(Params().Checkpoints(), tip);\n }\n \n void ClientModel::updateTimer()\n {\n-    // Get required lock upfront. This avoids the GUI from getting stuck on\n-    // periodical polls if the core is holding the locks for a longer time -\n-    // for example, during a wallet rescan.\n-    TRY_LOCK(cs_main, lockMain);\n-    if (!lockMain)\n-        return;\n-\n-    // Some quantities (such as number of blocks) change so fast that we don't want to be notified for each change.\n-    // Periodically check and update with a timer.\n-    int newNumBlocks = getNumBlocks();\n-    QDateTime newBlockDate = getLastBlockDate();\n-\n-    // check for changed number of blocks we have, number of blocks peers claim to have, reindexing state and importing state\n-    if (cachedNumBlocks != newNumBlocks ||\n-        cachedBlockDate != newBlockDate ||\n-        cachedReindexing != fReindex ||\n-        cachedImporting != fImporting)\n-    {\n-        cachedNumBlocks = newNumBlocks;\n-        cachedBlockDate = newBlockDate;\n-        cachedReindexing = fReindex;\n-        cachedImporting = fImporting;\n-\n-        Q_EMIT numBlocksChanged(newNumBlocks, newBlockDate);\n-    }\n-\n+    // no locking required at this point\n+    // the following calls will aquire the required lock\n     Q_EMIT mempoolSizeChanged(getMempoolSize(), getMempoolDynamicUsage());\n     Q_EMIT bytesChanged(getTotalBytesRecv(), getTotalBytesSent());\n }\n@@ -261,13 +241,31 @@ static void BannedListChanged(ClientModel *clientmodel)\n     QMetaObject::invokeMethod(clientmodel, \"updateBanlist\", Qt::QueuedConnection);\n }\n \n+static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, const CBlockIndex *pIndex)\n+{\n+    // lock free async UI updates in case we have a new block tip\n+    // during initial sync, only update the UI if the last update\n+    // was > 250ms (MODEL_UPDATE_DELAY) ago\n+    int64_t now = 0;\n+    if (initialSync)\n+        now = GetTimeMillis();\n+\n+    // if we are in-sync, update the UI regardless of last update time\n+    if (!initialSync || now - nLastBlockTipUpdateNotification > MODEL_UPDATE_DELAY) {\n+        //pass a async signal to the UI thread\n+        Q_EMIT clientmodel->numBlocksChanged(pIndex->nHeight, QDateTime::fromTime_t(pIndex->GetBlockTime()), clientmodel->getVerificationProgress(pIndex));\n+        nLastBlockTipUpdateNotification = now;\n+    }\n+}\n+\n void ClientModel::subscribeToCoreSignals()\n {\n     // Connect signals to client\n     uiInterface.ShowProgress.connect(boost::bind(ShowProgress, this, _1, _2));\n     uiInterface.NotifyNumConnectionsChanged.connect(boost::bind(NotifyNumConnectionsChanged, this, _1));\n     uiInterface.NotifyAlertChanged.connect(boost::bind(NotifyAlertChanged, this, _1, _2));\n     uiInterface.BannedListChanged.connect(boost::bind(BannedListChanged, this));\n+    uiInterface.NotifyBlockTip.connect(boost::bind(BlockTipChanged, this, _1, _2));\n }\n \n void ClientModel::unsubscribeFromCoreSignals()\n@@ -277,4 +275,5 @@ void ClientModel::unsubscribeFromCoreSignals()\n     uiInterface.NotifyNumConnectionsChanged.disconnect(boost::bind(NotifyNumConnectionsChanged, this, _1));\n     uiInterface.NotifyAlertChanged.disconnect(boost::bind(NotifyAlertChanged, this, _1, _2));\n     uiInterface.BannedListChanged.disconnect(boost::bind(BannedListChanged, this));\n+    uiInterface.NotifyBlockTip.disconnect(boost::bind(BlockTipChanged, this, _1, _2));\n }"
      },
      {
        "sha": "2d204fdb67d9628ebda1783c94b7ae1a893f51b3",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 7,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96b802510da0750aabc4f3ba6750cb5ce76f2b8c/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96b802510da0750aabc4f3ba6750cb5ce76f2b8c/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=96b802510da0750aabc4f3ba6750cb5ce76f2b8c",
        "patch": "@@ -15,6 +15,7 @@ class PeerTableModel;\n class TransactionTableModel;\n \n class CWallet;\n+class CBlockIndex;\n \n QT_BEGIN_NAMESPACE\n class QTimer;\n@@ -59,7 +60,7 @@ class ClientModel : public QObject\n     quint64 getTotalBytesRecv() const;\n     quint64 getTotalBytesSent() const;\n \n-    double getVerificationProgress() const;\n+    double getVerificationProgress(const CBlockIndex *tip) const;\n     QDateTime getLastBlockDate() const;\n \n     //! Return true if core is doing initial block download\n@@ -81,19 +82,14 @@ class ClientModel : public QObject\n     PeerTableModel *peerTableModel;\n     BanTableModel *banTableModel;\n \n-    int cachedNumBlocks;\n-    QDateTime cachedBlockDate;\n-    bool cachedReindexing;\n-    bool cachedImporting;\n-\n     QTimer *pollTimer;\n \n     void subscribeToCoreSignals();\n     void unsubscribeFromCoreSignals();\n \n Q_SIGNALS:\n     void numConnectionsChanged(int count);\n-    void numBlocksChanged(int count, const QDateTime& blockDate);\n+    void numBlocksChanged(int count, const QDateTime& blockDate, double nVerificationProgress);\n     void mempoolSizeChanged(long count, size_t mempoolSizeInBytes);\n     void alertsChanged(const QString &warnings);\n     void bytesChanged(quint64 totalBytesIn, quint64 totalBytesOut);"
      },
      {
        "sha": "30e551de19790fdc744d59f436b25443b9561ace",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96b802510da0750aabc4f3ba6750cb5ce76f2b8c/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96b802510da0750aabc4f3ba6750cb5ce76f2b8c/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=96b802510da0750aabc4f3ba6750cb5ce76f2b8c",
        "patch": "@@ -343,8 +343,8 @@ void RPCConsole::setClientModel(ClientModel *model)\n         setNumConnections(model->getNumConnections());\n         connect(model, SIGNAL(numConnectionsChanged(int)), this, SLOT(setNumConnections(int)));\n \n-        setNumBlocks(model->getNumBlocks(), model->getLastBlockDate());\n-        connect(model, SIGNAL(numBlocksChanged(int,QDateTime)), this, SLOT(setNumBlocks(int,QDateTime)));\n+        setNumBlocks(model->getNumBlocks(), model->getLastBlockDate(), model->getVerificationProgress(NULL));\n+        connect(model, SIGNAL(numBlocksChanged(int,QDateTime,double)), this, SLOT(setNumBlocks(int,QDateTime,double)));\n \n         updateTrafficStats(model->getTotalBytesRecv(), model->getTotalBytesSent());\n         connect(model, SIGNAL(bytesChanged(quint64,quint64)), this, SLOT(updateTrafficStats(quint64, quint64)));\n@@ -525,7 +525,7 @@ void RPCConsole::setNumConnections(int count)\n     ui->numberOfConnections->setText(connections);\n }\n \n-void RPCConsole::setNumBlocks(int count, const QDateTime& blockDate)\n+void RPCConsole::setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress)\n {\n     ui->numberOfBlocks->setText(QString::number(count));\n     ui->lastBlockTime->setText(blockDate.toString());"
      },
      {
        "sha": "4aebad480cbd8dd4ff7b53f216d69a038c5ce020",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96b802510da0750aabc4f3ba6750cb5ce76f2b8c/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96b802510da0750aabc4f3ba6750cb5ce76f2b8c/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=96b802510da0750aabc4f3ba6750cb5ce76f2b8c",
        "patch": "@@ -83,7 +83,7 @@ public Q_SLOTS:\n     /** Set number of connections shown in the UI */\n     void setNumConnections(int count);\n     /** Set number of blocks and last block date shown in the UI */\n-    void setNumBlocks(int count, const QDateTime& blockDate);\n+    void setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress);\n     /** Set size (number of transactions and memory usage) of the mempool in the UI */\n     void setMempoolSize(long numberOfTxs, size_t dynUsage);\n     /** Go forward or back in history */"
      },
      {
        "sha": "0fd86da0342414babe56f2f94bbf8b7c0a67ffae",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96b802510da0750aabc4f3ba6750cb5ce76f2b8c/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96b802510da0750aabc4f3ba6750cb5ce76f2b8c/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=96b802510da0750aabc4f3ba6750cb5ce76f2b8c",
        "patch": "@@ -124,7 +124,7 @@ void SendCoinsDialog::setClientModel(ClientModel *clientModel)\n     this->clientModel = clientModel;\n \n     if (clientModel) {\n-        connect(clientModel, SIGNAL(numBlocksChanged(int,QDateTime)), this, SLOT(updateSmartFeeLabel()));\n+        connect(clientModel, SIGNAL(numBlocksChanged(int,QDateTime,double)), this, SLOT(updateSmartFeeLabel()));\n     }\n }\n "
      },
      {
        "sha": "00d9303124ed47a158dee9b7fef6998ecefdafa6",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96b802510da0750aabc4f3ba6750cb5ce76f2b8c/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96b802510da0750aabc4f3ba6750cb5ce76f2b8c/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=96b802510da0750aabc4f3ba6750cb5ce76f2b8c",
        "patch": "@@ -15,6 +15,7 @@\n class CBasicKeyStore;\n class CWallet;\n class uint256;\n+class CBlockIndex;\n \n /** General change type (added, updated, removed). */\n enum ChangeType\n@@ -94,7 +95,7 @@ class CClientUIInterface\n     boost::signals2::signal<void (const std::string &title, int nProgress)> ShowProgress;\n \n     /** New block has been accepted */\n-    boost::signals2::signal<void (const uint256& hash)> NotifyBlockTip;\n+    boost::signals2::signal<void (bool, const CBlockIndex *)> NotifyBlockTip;\n \n     /** Banlist did change. */\n     boost::signals2::signal<void (void)> BannedListChanged;"
      }
    ]
  },
  {
    "sha": "ecc7c82361d98268d86b399dac76ca6d99bde889",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplY2M3YzgyMzYxZDk4MjY4ZDg2YjM5OWRhYzc2Y2E2ZDk5YmRlODg5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-25T12:04:52Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-30T13:09:04Z"
      },
      "message": "Move fPayAtLeastCustomFee function to CC",
      "tree": {
        "sha": "fdb697ed742d1d48301da334837fecdb736856a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fdb697ed742d1d48301da334837fecdb736856a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ecc7c82361d98268d86b399dac76ca6d99bde889",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWXEpwAAoJECnUvLZBb1PsGI8QAKwge6WHHWgtOQhRILaIi+rk\nIo8r7iv0995Ba09uzHYEodvZjV4Ej8Jtj0Q0ORkoO79hkoDb+iskPS75MKxUbAMh\nClw9xLYf+KnL5WgWBaAVr5iBOxqxwpgkSGRaRyiud0hkqQfTpuetM9bbYTo2H8uB\n4LNlgtrxy4KSJMchSYTp8Gg5V6hC6GLXEv2RK0P88X2Tk4UcJCxU7DbGYnXqKNoQ\nRtIf8DxW86wUkDezRhAkyuArd1PBG9vonvvewjakkZeGPiSonJPOm/R3Y7kwVcdS\nB0HRkJ4hVLKU6CtMILhdbbaa5cqbbPXAv2WztwDFINr8awQFRI9mR8r7L6TqLKvq\nAUjzIszQtIk3JR6D6ADRClssKh+/hfj3hALQfT8oykqHN7PaM/LcOO5oCvzdoKeF\n2NHcXCjdIx1WY2gLrOXK5AwGFKv5CcvuByHoK854Iw2JgZBVwbk2pPkUT215/lOn\nnxEBsh9ddfs5Ni+5RIRj3FvlcnZrId9jbRdHOaanffuDdSqBloqgzHsvySmyevCX\n5XefcKJvFLXtB5U4Li/th2DW1GnJTpGFS8JTPeaEk4SvkufjpszuWKAuC//Nx72+\nShdcgSWIV++eFTmHt5THYWhWxqiEB8t3rYb0XWyigC2yFhBzA7OlK18YWr4dSfFd\nLtWC5bd/xcwGI4rdlrn8\n=VHqJ\n-----END PGP SIGNATURE-----",
        "payload": "tree fdb697ed742d1d48301da334837fecdb736856a1\nparent 96b802510da0750aabc4f3ba6750cb5ce76f2b8c\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1448453092 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1448888944 +0100\n\nMove fPayAtLeastCustomFee function to CC\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecc7c82361d98268d86b399dac76ca6d99bde889",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ecc7c82361d98268d86b399dac76ca6d99bde889",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecc7c82361d98268d86b399dac76ca6d99bde889/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "96b802510da0750aabc4f3ba6750cb5ce76f2b8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96b802510da0750aabc4f3ba6750cb5ce76f2b8c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/96b802510da0750aabc4f3ba6750cb5ce76f2b8c"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 6,
      "deletions": 5
    },
    "files": [
      {
        "sha": "3945644ce8d623895609baee13191b3fb0a77a46",
        "filename": "src/coincontrol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecc7c82361d98268d86b399dac76ca6d99bde889/src/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecc7c82361d98268d86b399dac76ca6d99bde889/src/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coincontrol.h?ref=ecc7c82361d98268d86b399dac76ca6d99bde889",
        "patch": "@@ -16,6 +16,8 @@ class CCoinControl\n     bool fAllowOtherInputs;\n     //! Includes watch only addresses which match the ISMINE_WATCH_SOLVABLE criteria\n     bool fAllowWatchOnly;\n+    //! Minimum absolute fee (not per kilobyte)\n+    CAmount nMinimumTotalFee;\n \n     CCoinControl()\n     {\n@@ -28,6 +30,7 @@ class CCoinControl\n         fAllowOtherInputs = false;\n         fAllowWatchOnly = false;\n         setSelected.clear();\n+        nMinimumTotalFee = 0;\n     }\n \n     bool HasSelected() const"
      },
      {
        "sha": "2412074be37d5818f0e7c01e09dbf887c78173d7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecc7c82361d98268d86b399dac76ca6d99bde889/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecc7c82361d98268d86b399dac76ca6d99bde889/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ecc7c82361d98268d86b399dac76ca6d99bde889",
        "patch": "@@ -41,7 +41,6 @@ CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n unsigned int nTxConfirmTarget = DEFAULT_TX_CONFIRM_TARGET;\n bool bSpendZeroConfChange = DEFAULT_SPEND_ZEROCONF_CHANGE;\n bool fSendFreeTransactions = DEFAULT_SEND_FREE_TRANSACTIONS;\n-bool fPayAtLeastCustomFee = false;\n \n /**\n  * Fees smaller than this (in satoshi) are considered zero fee (for transaction creation)\n@@ -2017,6 +2016,9 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 }\n \n                 CAmount nFeeNeeded = GetMinimumFee(nBytes, nTxConfirmTarget, mempool);\n+                if (coinControl && nFeeNeeded > 0 && coinControl->nMinimumTotalFee > nFeeNeeded) {\n+                    nFeeNeeded = coinControl->nMinimumTotalFee;\n+                }\n \n                 // If we made it here and we aren't even able to meet the relay fee on the next pass, give up\n                 // because we must be at the maximum allowed fee.\n@@ -2112,9 +2114,6 @@ CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarge\n {\n     // payTxFee is user-set \"I want to pay this much\"\n     CAmount nFeeNeeded = payTxFee.GetFee(nTxBytes);\n-    // user selected total at least (default=true)\n-    if (fPayAtLeastCustomFee && nFeeNeeded > 0 && nFeeNeeded < payTxFee.GetFeePerK())\n-        nFeeNeeded = payTxFee.GetFeePerK();\n     // User didn't set: use -txconfirmtarget to estimate...\n     if (nFeeNeeded == 0) {\n         int estimateFoundTarget = nConfirmTarget;"
      },
      {
        "sha": "88bf27498fdfa5d2278d376319d061074cd07f58",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecc7c82361d98268d86b399dac76ca6d99bde889/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecc7c82361d98268d86b399dac76ca6d99bde889/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=ecc7c82361d98268d86b399dac76ca6d99bde889",
        "patch": "@@ -35,7 +35,6 @@ extern CAmount maxTxFee;\n extern unsigned int nTxConfirmTarget;\n extern bool bSpendZeroConfChange;\n extern bool fSendFreeTransactions;\n-extern bool fPayAtLeastCustomFee;\n \n static const unsigned int DEFAULT_KEYPOOL_SIZE = 100;\n //! -paytxfee default"
      }
    ]
  },
  {
    "sha": "80462dda0a5ed1db22560380fef0f87df20253c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MDQ2MmRkYTBhNWVkMWRiMjI1NjAzODBmZWYwZjg3ZGYyMDI1M2Mx",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-25T12:21:53Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-30T13:09:04Z"
      },
      "message": "[Qt] use ASYMP_UTF8 (\u2248) whenever we show a fee that is not absolute",
      "tree": {
        "sha": "ab719f6ba7c9761914a0da34fd80f5be74126309",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab719f6ba7c9761914a0da34fd80f5be74126309"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80462dda0a5ed1db22560380fef0f87df20253c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWXEpwAAoJECnUvLZBb1PsRU8QALy2p0x7/xv4nrrlOfweVQUa\nn0Di3K/EL6qqqIcGy/CEdU0D8W6k6IfE2yOQQ52s7ilhHQQdAqZ8Iwd5f4puuQ13\nejJYXGsTg50VXu0NedO4JirCx+8M+WJBLpNTjDDZENRT7msvxStJ6rwJN6mtrMnx\nBHST0maXJW6YmyK1m9H64UuzC06jB3w/xTNJKhCJs4AzDBcdY7RCP54pw3mlG4kg\nGerblqljRis/00JkZyOr68/U6+Z7z11b5uC6rUN9Bi+i9aEZjuVH5EaCn4CVTHlR\n1DNW930YWsOmE1Cux6eO3dKO+6MioBBDkn7F5JUThVADjNfRwsibKFNyPjDe+SYJ\nLZud2dJs5asSI3dQcxV6K0gXG69AEAwA9whtXHyZo7jVo3SyGlXZ7P5mHaHYOp74\n62CgfmVaO7OZ7mae1tU/MNLCh9en6Xr6XxOnN6B2tFZOnN9+bH8CdqDPDmA9VJMH\nM9hXdEX2OIA5EtAf//0kyEcBZKKl+udkMJwq0unjYjQOR6BHkpIgsHYlj1IFOKim\njjXSmbLT5B/7lK98Q8XcFehCDtrae2UNqdsBm7VZobBGKE44u6GMLAuumI/I1eFU\n5k0UPPtd3BYWsCtnxUN7jL3HnOFSigoWkmWTdjUJEbgFs0cVvoUdoCkhxglkp6lZ\nLBhqwYb+hW+hmpma0Pj2\n=goKJ\n-----END PGP SIGNATURE-----",
        "payload": "tree ab719f6ba7c9761914a0da34fd80f5be74126309\nparent ecc7c82361d98268d86b399dac76ca6d99bde889\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1448454113 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1448888944 +0100\n\n[Qt] use ASYMP_UTF8 (\u2248) whenever we show a fee that is not absolute\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80462dda0a5ed1db22560380fef0f87df20253c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/80462dda0a5ed1db22560380fef0f87df20253c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80462dda0a5ed1db22560380fef0f87df20253c1/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ecc7c82361d98268d86b399dac76ca6d99bde889",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecc7c82361d98268d86b399dac76ca6d99bde889",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ecc7c82361d98268d86b399dac76ca6d99bde889"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "33344938df21304dd72ebb561933e793378db0d5",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80462dda0a5ed1db22560380fef0f87df20253c1/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80462dda0a5ed1db22560380fef0f87df20253c1/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=80462dda0a5ed1db22560380fef0f87df20253c1",
        "patch": "@@ -619,7 +619,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     l6->setText(sPriorityLabel);                                             // Priority\n     l7->setText(fDust ? tr(\"yes\") : tr(\"no\"));                               // Dust\n     l8->setText(BitcoinUnits::formatWithUnit(nDisplayUnit, nChange));        // Change\n-    if (nPayFee > 0 && !(payTxFee.GetFeePerK() > 0 && fPayAtLeastCustomFee && nBytes < 1000))\n+    if (nPayFee > 0 && (coinControl->nMinimumTotalFee < nPayFee))\n     {\n         l3->setText(ASYMP_UTF8 + l3->text());\n         l4->setText(ASYMP_UTF8 + l4->text());"
      }
    ]
  },
  {
    "sha": "31b508a18b6c7526d153659894f4418bfca99ee2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMWI1MDhhMThiNmM3NTI2ZDE1MzY1OTg5NGY0NDE4YmZjYTk5ZWUy",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-25T12:38:44Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-30T13:09:05Z"
      },
      "message": "[Qt] make use of the nMinimumTotalFee (absolute) in coincontrols fee calculation",
      "tree": {
        "sha": "7942c05cf4f6f0447fb435cb3f1adf49c17a04f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7942c05cf4f6f0447fb435cb3f1adf49c17a04f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31b508a18b6c7526d153659894f4418bfca99ee2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWXEpxAAoJECnUvLZBb1PsYvgQAJQbz+YbcYmBNUhsSyJ4Ygds\ni8xP49j0y6hnaGMzPGJ91ym8N63oJVF2u5cTxyDuWH5YZ22RloTbCZRx0LfrzD24\nZqCV1wnnDDB0Ca3fK6vcIZmC7TeVxBVG25tMVNFEImkNgzmFfSmZBy3FHY0Dx/7G\nvQB9B6U1YCG0tolDP2LGER1rdznd8amTuXZmg2d2kitBXmWCbd1jJec18VL9Notq\nLm9oMYZ2HbzDyEcV/sc02ZZFFkn3o3tp3nLzzeyiEIUJWADsMEkXgSs4TzKzMFq7\ntoGl6PA+P5z9wZlPyZ0ER1NllYGlfmn5RU2IvvBR09vIYIkbACF78MLywigy0jee\ngYlqz/qFsDQJT2xN3cM22n7OpRkJ26JJApKtvbU27slGdJFvXVj4A+BTadiSfZDs\n6gNY94uN778bzwbrAa7Lgv5v3hdBWJqD/eicj7eR0lKOgdoeAYnvplY0gTusLeAE\nhoR63lf2FMllM95/pvoza7XdVXxWLTnomKugAm/SNXIWbWIA4cYNHHby1S/s6x6V\nUcjnWpexY4xbUHNZHhmNCyb9/cLXHp3J4ajiCbqLBGdw4XRCYYlAW9Aw9MO5sy8C\nQCqWxjAOougb3T8e0UPaTaazDtVUbHVZCMmRr5iVKgRN9B4GFXQMmNnp90Y9teqo\nW6y71Lme5EDVWCHIkj9A\n=uHGr\n-----END PGP SIGNATURE-----",
        "payload": "tree 7942c05cf4f6f0447fb435cb3f1adf49c17a04f5\nparent 80462dda0a5ed1db22560380fef0f87df20253c1\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1448455124 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1448888945 +0100\n\n[Qt] make use of the nMinimumTotalFee (absolute) in coincontrols fee calculation\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31b508a18b6c7526d153659894f4418bfca99ee2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/31b508a18b6c7526d153659894f4418bfca99ee2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31b508a18b6c7526d153659894f4418bfca99ee2/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "80462dda0a5ed1db22560380fef0f87df20253c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80462dda0a5ed1db22560380fef0f87df20253c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80462dda0a5ed1db22560380fef0f87df20253c1"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0f42243047193c74dc3d534958e2bee2116fc1d9",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31b508a18b6c7526d153659894f4418bfca99ee2/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31b508a18b6c7526d153659894f4418bfca99ee2/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=31b508a18b6c7526d153659894f4418bfca99ee2",
        "patch": "@@ -549,6 +549,9 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n \n         // Fee\n         nPayFee = CWallet::GetMinimumFee(nBytes, nTxConfirmTarget, mempool);\n+        if (nPayFee > 0 && coinControl->nMinimumTotalFee > nPayFee)\n+            nPayFee = coinControl->nMinimumTotalFee;\n+\n \n         // Allow free? (require at least hard-coded threshold and default to that if no estimate)\n         double dPriorityNeeded = std::max(mempoolEstimatePriority, AllowFreeThreshold());"
      }
    ]
  },
  {
    "sha": "ff723da6f67d6d597c0118162fb709e962b1e2fe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjcyM2RhNmY2N2Q2ZDU5N2MwMTE4MTYyZmI3MDllOTYyYjFlMmZl",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-25T13:05:30Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-30T13:18:57Z"
      },
      "message": "[Qt] improve minimum absolute fee option\n- Only display the minimum absolute fee control if CoinControl is enabled",
      "tree": {
        "sha": "db32cda2c3aaed5012575d79732a09d89ee9dee0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db32cda2c3aaed5012575d79732a09d89ee9dee0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff723da6f67d6d597c0118162fb709e962b1e2fe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWXEzGAAoJECnUvLZBb1PsU74P+wRiFsB8QAKJq3oML/5I1Ts4\nZ0szX4jzN5/2oSCyTuD4tXVC+l+VEUR8DKjrRqLAk0B8YS1/uFnPuB/n96qQ203F\n9K/AeFl89JUrgEvkb2bnpVFqi8Q9I3JZ/RdFFc3Q7GrjdUhJhcXXICX4KNLgLqZm\nbv4O+pH0fqWvkzYhOU2RvNJTAqzXeG+22+d4KXC7m2qHd2X0tRmcbaNQHzKWlqdO\nAcKmIA7pOrhxvaHg8K4vYkaC268FiYKvygtEhC7UboAFi7JvGs/X8odU7TaxfZMN\nQ8+Vsb5EV1jY0HXOM+hX2e8aBAiAcsaaqyZjlWrSOOxFyqIPlASG9UaOutq+FK2A\nIDemQEB/tUgD9e3yceK8JGsigLCyczlEvGhFNuwB7NIHKOLlF8mRunt/SsqYvkNA\nFbA+8EPszwej+7yr1g2m0tMslkCeygVUuCckHiyBM+u9gMl2UI3opC162ocwWPo8\nEzqNueTnGQc1zM7pxtvN/7JhDbxnJIjJGBDuzubT+q2+xl0erpkJnVlJQ7J7FoMS\n52nPMbNEFHfkzpzk/w7ItTG2eLSuOsOs6EsLDknA+8Zf9ZzyUOv0QnzM/WbEKYcP\nise0c/zhlSwGt2maGB5jhyXfYrKtLbEZDs3apezY3VQfwjppLHKMzqoY+XdvBmci\ngEjhL4mZfMEWgeyO7cJD\n=dAir\n-----END PGP SIGNATURE-----",
        "payload": "tree db32cda2c3aaed5012575d79732a09d89ee9dee0\nparent 31b508a18b6c7526d153659894f4418bfca99ee2\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1448456730 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1448889537 +0100\n\n[Qt] improve minimum absolute fee option\n- Only display the minimum absolute fee control if CoinControl is enabled\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff723da6f67d6d597c0118162fb709e962b1e2fe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff723da6f67d6d597c0118162fb709e962b1e2fe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff723da6f67d6d597c0118162fb709e962b1e2fe/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "31b508a18b6c7526d153659894f4418bfca99ee2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31b508a18b6c7526d153659894f4418bfca99ee2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31b508a18b6c7526d153659894f4418bfca99ee2"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 22,
      "deletions": 5
    },
    "files": [
      {
        "sha": "ec4e598bf9157580af7b9705f9b43ba246b48f5c",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 5,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff723da6f67d6d597c0118162fb709e962b1e2fe/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff723da6f67d6d597c0118162fb709e962b1e2fe/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=ff723da6f67d6d597c0118162fb709e962b1e2fe",
        "patch": "@@ -585,7 +585,7 @@ void SendCoinsDialog::updateFeeSectionControls()\n     ui->checkBoxMinimumFee      ->setEnabled(ui->radioCustomFee->isChecked());\n     ui->labelMinFeeWarning      ->setEnabled(ui->radioCustomFee->isChecked());\n     ui->radioCustomPerKilobyte  ->setEnabled(ui->radioCustomFee->isChecked() && !ui->checkBoxMinimumFee->isChecked());\n-    ui->radioCustomAtLeast      ->setEnabled(ui->radioCustomFee->isChecked() && !ui->checkBoxMinimumFee->isChecked());\n+    ui->radioCustomAtLeast      ->setEnabled(ui->radioCustomFee->isChecked() && !ui->checkBoxMinimumFee->isChecked() && CoinControlDialog::coinControl->HasSelected());\n     ui->customFee               ->setEnabled(ui->radioCustomFee->isChecked() && !ui->checkBoxMinimumFee->isChecked());\n }\n \n@@ -600,7 +600,10 @@ void SendCoinsDialog::updateGlobalFeeVariables()\n     {\n         nTxConfirmTarget = defaultConfirmTarget;\n         payTxFee = CFeeRate(ui->customFee->value());\n-        fPayAtLeastCustomFee = ui->radioCustomAtLeast->isChecked();\n+\n+        // if user has selected to set a minimum absolute fee, pass the value to coincontrol\n+        // set nMinimumTotalFee to 0 in case of user has selected that the fee is per KB\n+        CoinControlDialog::coinControl->nMinimumTotalFee = ui->radioCustomAtLeast->isChecked() ? ui->customFee->value() : 0;\n     }\n \n     fSendFreeTransactions = ui->checkBoxFreeTx->isChecked();\n@@ -707,8 +710,7 @@ void SendCoinsDialog::coinControlFeatureChanged(bool checked)\n     if (!checked && model) // coin control features disabled\n         CoinControlDialog::coinControl->SetNull();\n \n-    if (checked)\n-        coinControlUpdateLabels();\n+    coinControlUpdateLabels();\n }\n \n // Coin Control: button inputs -> show actual coin control dialog\n@@ -782,9 +784,24 @@ void SendCoinsDialog::coinControlChangeEdited(const QString& text)\n // Coin Control: update labels\n void SendCoinsDialog::coinControlUpdateLabels()\n {\n-    if (!model || !model->getOptionsModel() || !model->getOptionsModel()->getCoinControlFeatures())\n+    if (!model || !model->getOptionsModel())\n         return;\n \n+    if (model->getOptionsModel()->getCoinControlFeatures())\n+    {\n+        // enable minium absolute fee UI controls\n+        ui->radioCustomAtLeast->setVisible(true);\n+\n+        // only enable the feature if inputs are selected\n+        ui->radioCustomAtLeast->setEnabled(CoinControlDialog::coinControl->HasSelected());\n+    }\n+    else\n+    {\n+        // in case coin control is disabled (=default), hide minimum absolute fee UI controls\n+        ui->radioCustomAtLeast->setVisible(false);\n+        return;\n+    }\n+\n     // set pay amounts\n     CoinControlDialog::payAmounts.clear();\n     CoinControlDialog::fSubtractFeeFromAmount = false;"
      }
    ]
  },
  {
    "sha": "9b8fc6c89a08db2c0aa58096e4c5c01093177c74",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YjhmYzZjODlhMDhkYjJjMGFhNTgwOTZlNGM1YzAxMDkzMTc3Yzc0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-30T13:20:05Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-30T13:20:22Z"
      },
      "message": "Merge pull request #7035\n\n4531fc4 torcontrol: only output disconnect if -debug=tor (Daniel Cousens)",
      "tree": {
        "sha": "4a8cb381d89fe092043d85246b7871f501b0f7b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a8cb381d89fe092043d85246b7871f501b0f7b3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b8fc6c89a08db2c0aa58096e4c5c01093177c74",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWXE0WAAoJEHSBCwEjRsmmsrkH/iezhqc3x9gB0s8zUtEA3g+b\nEK3Rsf/0lMRlQtOFw5UV6PJfgBJt9QpTSkj/aNpAr9zKPoZ9Jf+0VWEex2XiNCWK\njGks9y4luZdRhXtq3tlJYaYk9RHnZNH+xQZ9NnT5nStrdxcl1GGnYxWljMyymNwQ\nZJzMpoNkJJxO+COuboUsNx3BfRxzVzbnejSmzvqOuoKyLU+FFcC7JUO8A+nZkWMH\nPMLk+ec3CpZ7vJEIwdHbyQpW/BAbbBatmajZSQyFpvxLMRnImPxMlX4K6JDFB43d\n696lcy589b5lApdgMqtKILMaB4K3HswkOEvAt9bx/gz1KZF4eTtf5KjRlWNJeoI=\n=212N\n-----END PGP SIGNATURE-----",
        "payload": "tree 4a8cb381d89fe092043d85246b7871f501b0f7b3\nparent 96b802510da0750aabc4f3ba6750cb5ce76f2b8c\nparent 4531fc4272dec4b10c4ed3b21bd90e961b1bf1c3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448889605 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448889622 +0100\n\nMerge pull request #7035\n\n4531fc4 torcontrol: only output disconnect if -debug=tor (Daniel Cousens)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b8fc6c89a08db2c0aa58096e4c5c01093177c74",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b8fc6c89a08db2c0aa58096e4c5c01093177c74",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b8fc6c89a08db2c0aa58096e4c5c01093177c74/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "96b802510da0750aabc4f3ba6750cb5ce76f2b8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96b802510da0750aabc4f3ba6750cb5ce76f2b8c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/96b802510da0750aabc4f3ba6750cb5ce76f2b8c"
      },
      {
        "sha": "4531fc4272dec4b10c4ed3b21bd90e961b1bf1c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4531fc4272dec4b10c4ed3b21bd90e961b1bf1c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4531fc4272dec4b10c4ed3b21bd90e961b1bf1c3"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "01c7189675a9f1cee30c430306c202600009980a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b8fc6c89a08db2c0aa58096e4c5c01093177c74/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b8fc6c89a08db2c0aa58096e4c5c01093177c74/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9b8fc6c89a08db2c0aa58096e4c5c01093177c74",
        "patch": "@@ -441,7 +441,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT));\n         strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n     }\n-    string debugCategories = \"addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, mempoolrej, net, proxy, prune, http, libevent, zmq\"; // Don't translate these and qt below\n+    string debugCategories = \"addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, mempoolrej, net, proxy, prune, http, libevent, tor, zmq\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +"
      },
      {
        "sha": "8eccc81e30567b5488504a5e3b324f3a908e0c2c",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b8fc6c89a08db2c0aa58096e4c5c01093177c74/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b8fc6c89a08db2c0aa58096e4c5c01093177c74/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=9b8fc6c89a08db2c0aa58096e4c5c01093177c74",
        "patch": "@@ -617,7 +617,9 @@ void TorController::disconnected_cb(TorControlConnection& conn)\n     service = CService();\n     if (!reconnect)\n         return;\n-    LogPrintf(\"tor: Disconnected from Tor control port %s, trying to reconnect\\n\", target);\n+\n+    LogPrint(\"tor\", \"tor: Disconnected from Tor control port %s, trying to reconnect\\n\", target);\n+\n     // Single-shot timer for reconnect. Use exponential backoff.\n     struct timeval time = MillisToTimeval(int64_t(reconnect_timeout * 1000.0));\n     reconnect_ev = event_new(base, -1, 0, reconnect_cb, this);"
      }
    ]
  },
  {
    "sha": "eb7741605b32c25893f687e19820dab114d04fe1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjc3NDE2MDViMzJjMjU4OTNmNjg3ZTE5ODIwZGFiMTE0ZDA0ZmUx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-30T13:25:07Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-30T13:37:05Z"
      },
      "message": "Merge pull request #7008\n\nc035306 Change GetPriority calculation. (Alex Morcos)\n71f1d9f Modify variable names for entry height and priority (Alex Morcos)\n5945819 Remove default arguments for CTxMemPoolEntry() (Alex Morcos)",
      "tree": {
        "sha": "09e5089b65342b38f0f3ed392021b091ec71f618",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/09e5089b65342b38f0f3ed392021b091ec71f618"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb7741605b32c25893f687e19820dab114d04fe1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWXFEBAAoJEHSBCwEjRsmmp7YH/A+VFm6nbL2a/1Wi2rTmCRtD\nzmt/wEF0tEft9Wmn43t/VhxfNt+h0/MGBHoV95HY5NoG0TANIEPU6sgPaDrSJxmg\nuTJmIKi1TC+8qq6WCKsAHd4DoeFcq17mIIcvvhapqMpyI3v0FUhvXLduChJwnJMw\niimLFLVqypE75G4gkAEHXJdZp6i/NxwMmn0VI8UHP1Cc8iKa2LrpMlyoTvO4hxGY\nb5NbOMa83oF9Fl36lhWCwxFunLOoLlZtGys4wFlNefcNYfo3xPYWwaEIArSSVTxx\nO4MxQ9KPK3UdJ79wrM+fK/DIgn49qTiZ/pFmw2iwmOw9JQiCL2+hmnS15GtGHU8=\n=DIE+\n-----END PGP SIGNATURE-----",
        "payload": "tree 09e5089b65342b38f0f3ed392021b091ec71f618\nparent 9b8fc6c89a08db2c0aa58096e4c5c01093177c74\nparent c0353064ddf71ad103bd19f6e7c10ff8e240ac46\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448889907 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448890625 +0100\n\nMerge pull request #7008\n\nc035306 Change GetPriority calculation. (Alex Morcos)\n71f1d9f Modify variable names for entry height and priority (Alex Morcos)\n5945819 Remove default arguments for CTxMemPoolEntry() (Alex Morcos)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb7741605b32c25893f687e19820dab114d04fe1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb7741605b32c25893f687e19820dab114d04fe1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb7741605b32c25893f687e19820dab114d04fe1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b8fc6c89a08db2c0aa58096e4c5c01093177c74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b8fc6c89a08db2c0aa58096e4c5c01093177c74",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b8fc6c89a08db2c0aa58096e4c5c01093177c74"
      },
      {
        "sha": "c0353064ddf71ad103bd19f6e7c10ff8e240ac46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0353064ddf71ad103bd19f6e7c10ff8e240ac46",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0353064ddf71ad103bd19f6e7c10ff8e240ac46"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 42,
      "deletions": 21
    },
    "files": [
      {
        "sha": "723e11470836006ff03b384792b75b007894c37f",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb7741605b32c25893f687e19820dab114d04fe1/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb7741605b32c25893f687e19820dab114d04fe1/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=eb7741605b32c25893f687e19820dab114d04fe1",
        "patch": "@@ -243,8 +243,9 @@ bool CCoinsViewCache::HaveInputs(const CTransaction& tx) const\n     return true;\n }\n \n-double CCoinsViewCache::GetPriority(const CTransaction &tx, int nHeight) const\n+double CCoinsViewCache::GetPriority(const CTransaction &tx, int nHeight, CAmount &inChainInputValue) const\n {\n+    inChainInputValue = 0;\n     if (tx.IsCoinBase())\n         return 0.0;\n     double dResult = 0.0;\n@@ -253,8 +254,9 @@ double CCoinsViewCache::GetPriority(const CTransaction &tx, int nHeight) const\n         const CCoins* coins = AccessCoins(txin.prevout.hash);\n         assert(coins);\n         if (!coins->IsAvailable(txin.prevout.n)) continue;\n-        if (coins->nHeight < nHeight) {\n+        if (coins->nHeight <= nHeight) {\n             dResult += coins->vout[txin.prevout.n].nValue * (nHeight-coins->nHeight);\n+            inChainInputValue += coins->vout[txin.prevout.n].nValue;\n         }\n     }\n     return tx.ComputePriority(dResult);"
      },
      {
        "sha": "d174422100d3f424bce348fc77271197d17affc8",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb7741605b32c25893f687e19820dab114d04fe1/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb7741605b32c25893f687e19820dab114d04fe1/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=eb7741605b32c25893f687e19820dab114d04fe1",
        "patch": "@@ -456,8 +456,12 @@ class CCoinsViewCache : public CCoinsViewBacked\n     //! Check whether all prevouts of the transaction are present in the UTXO set represented by this view\n     bool HaveInputs(const CTransaction& tx) const;\n \n-    //! Return priority of tx at height nHeight\n-    double GetPriority(const CTransaction &tx, int nHeight) const;\n+    /**\n+     * Return priority of tx at height nHeight. Also calculate the sum of the values of the inputs\n+     * that are already in the chain.  These are the inputs that will age and increase priority as\n+     * new blocks are added to the chain.\n+     */\n+    double GetPriority(const CTransaction &tx, int nHeight, CAmount &inChainInputValue) const;\n \n     const CTxOut &GetOutputFor(const CTxIn& input) const;\n "
      },
      {
        "sha": "55b0517349e44f7ef86cf8eb9b5e404e395a25b7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb7741605b32c25893f687e19820dab114d04fe1/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb7741605b32c25893f687e19820dab114d04fe1/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=eb7741605b32c25893f687e19820dab114d04fe1",
        "patch": "@@ -950,9 +950,10 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         CAmount nValueOut = tx.GetValueOut();\n         CAmount nFees = nValueIn-nValueOut;\n-        double dPriority = view.GetPriority(tx, chainActive.Height());\n+        CAmount inChainInputValue;\n+        double dPriority = view.GetPriority(tx, chainActive.Height(), inChainInputValue);\n \n-        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx));\n+        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx), inChainInputValue);\n         unsigned int nSize = entry.GetTxSize();\n \n         // Don't accept it if it can't get into a block\n@@ -964,7 +965,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CAmount mempoolRejectFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n         if (mempoolRejectFee > 0 && nFees < mempoolRejectFee) {\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nFees, mempoolRejectFee));\n-        } else if (GetBoolArg(\"-relaypriority\", DEFAULT_RELAYPRIORITY) && nFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1))) {\n+        } else if (GetBoolArg(\"-relaypriority\", DEFAULT_RELAYPRIORITY) && nFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(entry.GetPriority(chainActive.Height() + 1))) {\n             // Require that free transactions have sufficient priority to be mined in the next block.\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n         }"
      },
      {
        "sha": "644c3da213a99d54835c26dccf82e298cfeb6c32",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb7741605b32c25893f687e19820dab114d04fe1/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb7741605b32c25893f687e19820dab114d04fe1/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=eb7741605b32c25893f687e19820dab114d04fe1",
        "patch": "@@ -196,7 +196,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n \n     // Test that if the mempool is limited, estimateSmartFee won't return a value below the mempool min fee\n     // and that estimateSmartPriority returns essentially an infinite value\n-    mpool.addUnchecked(tx.GetHash(),  CTxMemPoolEntry(tx, feeV[0][5], GetTime(), priV[1][5], blocknum, mpool.HasNoInputsOf(tx)));\n+    mpool.addUnchecked(tx.GetHash(),  entry.Fee(feeV[0][5]).Time(GetTime()).Priority(priV[1][5]).Height(blocknum).FromTx(tx, &mpool));\n     // evict that transaction which should set a mempool min fee of minRelayTxFee + feeV[0][5]\n     mpool.TrimToSize(1);\n     BOOST_CHECK(mpool.GetMinFee(1).GetFeePerK() > feeV[0][5]);"
      },
      {
        "sha": "351870014de1f901d85fc7290359455c3e4453ba",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb7741605b32c25893f687e19820dab114d04fe1/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb7741605b32c25893f687e19820dab114d04fe1/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=eb7741605b32c25893f687e19820dab114d04fe1",
        "patch": "@@ -144,8 +144,13 @@ TestChain100Setup::~TestChain100Setup()\n \n \n CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(CMutableTransaction &tx, CTxMemPool *pool) {\n-    return CTxMemPoolEntry(tx, nFee, nTime, dPriority, nHeight,\n-                           pool ? pool->HasNoInputsOf(tx) : hadNoDependencies);\n+    CTransaction txn(tx);\n+    bool hasNoDependencies = pool ? pool->HasNoInputsOf(tx) : hadNoDependencies;\n+    // Hack to assume either its completely dependent on other mempool txs or not at all\n+    CAmount inChainValue = hasNoDependencies ? txn.GetValueOut() : 0;\n+\n+    return CTxMemPoolEntry(txn, nFee, nTime, dPriority, nHeight,\n+                           hasNoDependencies, inChainValue);\n }\n \n void Shutdown(void* parg)"
      },
      {
        "sha": "6d1df0b3d1452c43296bc3018782da2a54f9bec8",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb7741605b32c25893f687e19820dab114d04fe1/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb7741605b32c25893f687e19820dab114d04fe1/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=eb7741605b32c25893f687e19820dab114d04fe1",
        "patch": "@@ -19,10 +19,10 @@\n using namespace std;\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n-                                 int64_t _nTime, double _dPriority,\n-                                 unsigned int _nHeight, bool poolHasNoInputsOf):\n-    tx(_tx), nFee(_nFee), nTime(_nTime), dPriority(_dPriority), nHeight(_nHeight),\n-    hadNoDependencies(poolHasNoInputsOf)\n+                                 int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n+                                 bool poolHasNoInputsOf, CAmount _inChainInputValue):\n+    tx(_tx), nFee(_nFee), nTime(_nTime), entryPriority(_entryPriority), entryHeight(_entryHeight),\n+    hadNoDependencies(poolHasNoInputsOf), inChainInputValue(_inChainInputValue)\n {\n     nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n     nModSize = tx.CalculateModifiedSize(nTxSize);\n@@ -31,6 +31,8 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n     nCountWithDescendants = 1;\n     nSizeWithDescendants = nTxSize;\n     nFeesWithDescendants = nFee;\n+    CAmount nValueIn = tx.GetValueOut()+nFee;\n+    assert(inChainInputValue <= nValueIn);\n }\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)\n@@ -41,9 +43,10 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)\n double\n CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n {\n-    CAmount nValueIn = tx.GetValueOut()+nFee;\n-    double deltaPriority = ((double)(currentHeight-nHeight)*nValueIn)/nModSize;\n-    double dResult = dPriority + deltaPriority;\n+    double deltaPriority = ((double)(currentHeight-entryHeight)*inChainInputValue)/nModSize;\n+    double dResult = entryPriority + deltaPriority;\n+    if (dResult < 0) // This should only happen if it was called with a height below entry height\n+        dResult = 0;\n     return dResult;\n }\n "
      },
      {
        "sha": "c470bbe28f7d608bde1789dbdb904ff8cdf60c6a",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb7741605b32c25893f687e19820dab114d04fe1/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb7741605b32c25893f687e19820dab114d04fe1/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=eb7741605b32c25893f687e19820dab114d04fe1",
        "patch": "@@ -63,9 +63,10 @@ class CTxMemPoolEntry\n     size_t nModSize; //! ... and modified size for priority\n     size_t nUsageSize; //! ... and total memory usage\n     int64_t nTime; //! Local time when entering the mempool\n-    double dPriority; //! Priority when entering the mempool\n-    unsigned int nHeight; //! Chain height when entering the mempool\n+    double entryPriority; //! Priority when entering the mempool\n+    unsigned int entryHeight; //! Chain height when entering the mempool\n     bool hadNoDependencies; //! Not dependent on any other txs when it entered the mempool\n+    CAmount inChainInputValue; //! Sum of all txin values that are already in blockchain\n \n     // Information about descendants of this transaction that are in the\n     // mempool; if we remove this transaction we must remove all of these\n@@ -78,15 +79,20 @@ class CTxMemPoolEntry\n \n public:\n     CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n-                    int64_t _nTime, double _dPriority, unsigned int _nHeight, bool poolHasNoInputsOf = false);\n+                    int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n+                    bool poolHasNoInputsOf, CAmount _inChainInputValue);\n     CTxMemPoolEntry(const CTxMemPoolEntry& other);\n \n     const CTransaction& GetTx() const { return this->tx; }\n+    /**\n+     * Fast calculation of lower bound of current priority as update\n+     * from entry priority. Only inputs that were originally in-chain will age.\n+     */\n     double GetPriority(unsigned int currentHeight) const;\n     const CAmount& GetFee() const { return nFee; }\n     size_t GetTxSize() const { return nTxSize; }\n     int64_t GetTime() const { return nTime; }\n-    unsigned int GetHeight() const { return nHeight; }\n+    unsigned int GetHeight() const { return entryHeight; }\n     bool WasClearAtEntry() const { return hadNoDependencies; }\n     size_t DynamicMemoryUsage() const { return nUsageSize; }\n "
      }
    ]
  },
  {
    "sha": "34e02e0147188a7e364489db23128a05505e7a4c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNGUwMmUwMTQ3MTg4YTdlMzY0NDg5ZGIyMzEyOGEwNTUwNWU3YTRj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-30T13:49:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-30T13:49:57Z"
      },
      "message": "Merge pull request #7094\n\n1bb289f Assert now > 0 in GetTime GetTimeMillis GetTimeMicros (Patick Strateman)",
      "tree": {
        "sha": "92d2bfeab7ae0bb85e34949760d0d29013c19a75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/92d2bfeab7ae0bb85e34949760d0d29013c19a75"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34e02e0147188a7e364489db23128a05505e7a4c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWXFQFAAoJEHSBCwEjRsmm6zUIAIm2rn2j5689yUtJe6ZsJbgE\n5XCu/0eEHSmKbAWI917uWtOn+QZz75XlfrO7mWZz0ypjbuVKCtp1V7efMGbs+4X4\nXRGla/iKpHS7nhX/zoFZeQ9Qkus2Yhzt1iGn5wN9S5DwMcOU2capKPpATxLshDKX\n4GdPSSb3FnJTuNcIuyxSsW3x+CNt3bofUlt7OfgBvwh0oKr4mocuQd4kUNdoUuHL\nHEzRWf6P2+wadUz8VWj/ymy5vMbFOz79KzNqyJD9YoRQbJii5ZtVFtT9PPT2uClr\neMI21e5nVgFayBUKys05P3QPvuz6qhUsWwzsRkr3wHWFoErEdFdoBxi5GB/0H/c=\n=GXiM\n-----END PGP SIGNATURE-----",
        "payload": "tree 92d2bfeab7ae0bb85e34949760d0d29013c19a75\nparent eb7741605b32c25893f687e19820dab114d04fe1\nparent 1bb289fe1b7d240e0d58ef13da30e45590231078\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448891348 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448891397 +0100\n\nMerge pull request #7094\n\n1bb289f Assert now > 0 in GetTime GetTimeMillis GetTimeMicros (Patick Strateman)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34e02e0147188a7e364489db23128a05505e7a4c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/34e02e0147188a7e364489db23128a05505e7a4c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34e02e0147188a7e364489db23128a05505e7a4c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb7741605b32c25893f687e19820dab114d04fe1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb7741605b32c25893f687e19820dab114d04fe1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb7741605b32c25893f687e19820dab114d04fe1"
      },
      {
        "sha": "1bb289fe1b7d240e0d58ef13da30e45590231078",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bb289fe1b7d240e0d58ef13da30e45590231078",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1bb289fe1b7d240e0d58ef13da30e45590231078"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 11,
      "deletions": 5
    },
    "files": [
      {
        "sha": "7d9f6210ebf7612784b27e646f13d191cdaf9a0a",
        "filename": "src/utiltime.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34e02e0147188a7e364489db23128a05505e7a4c/src/utiltime.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34e02e0147188a7e364489db23128a05505e7a4c/src/utiltime.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.cpp?ref=34e02e0147188a7e364489db23128a05505e7a4c",
        "patch": "@@ -20,7 +20,9 @@ int64_t GetTime()\n {\n     if (nMockTime) return nMockTime;\n \n-    return time(NULL);\n+    time_t now = time(NULL);\n+    assert(now > 0);\n+    return now;\n }\n \n void SetMockTime(int64_t nMockTimeIn)\n@@ -30,14 +32,18 @@ void SetMockTime(int64_t nMockTimeIn)\n \n int64_t GetTimeMillis()\n {\n-    return (boost::posix_time::microsec_clock::universal_time() -\n-            boost::posix_time::ptime(boost::gregorian::date(1970,1,1))).total_milliseconds();\n+    int64_t now = (boost::posix_time::microsec_clock::universal_time() -\n+                   boost::posix_time::ptime(boost::gregorian::date(1970,1,1))).total_milliseconds();\n+    assert(now > 0);\n+    return now;\n }\n \n int64_t GetTimeMicros()\n {\n-    return (boost::posix_time::microsec_clock::universal_time() -\n-            boost::posix_time::ptime(boost::gregorian::date(1970,1,1))).total_microseconds();\n+    int64_t now = (boost::posix_time::microsec_clock::universal_time() -\n+                   boost::posix_time::ptime(boost::gregorian::date(1970,1,1))).total_microseconds();\n+    assert(now > 0);\n+    return now;\n }\n \n /** Return a time useful for the debug log */"
      }
    ]
  },
  {
    "sha": "fa3a38a7f269f7a33c6176975f171b93025f05d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTNhMzhhN2YyNjlmN2EzM2M2MTc2OTc1ZjE3MWI5MzAyNWYwNWQ3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-30T13:53:07Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-30T15:01:57Z"
      },
      "message": "[qa] pull-tester: Cleanup (run keypool, tidy stdout)\n\n* Run keypool (takes 6 seconds)\n* Print duration of each rpc test\n* Structure output (bold, new lines)",
      "tree": {
        "sha": "cb97d69acff6556c0cd9c7e7c746fdd6411b2b4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb97d69acff6556c0cd9c7e7c746fdd6411b2b4a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa3a38a7f269f7a33c6176975f171b93025f05d7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3a38a7f269f7a33c6176975f171b93025f05d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa3a38a7f269f7a33c6176975f171b93025f05d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3a38a7f269f7a33c6176975f171b93025f05d7/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7751824ce8a7e1cc5511794516fe674bc3eaa3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7751824ce8a7e1cc5511794516fe674bc3eaa3c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7751824ce8a7e1cc5511794516fe674bc3eaa3c"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 14,
      "deletions": 5
    },
    "files": [
      {
        "sha": "7ac89e9bc130c4ed8367d1acad570fd34d6b5fe1",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 14,
        "deletions": 5,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3a38a7f269f7a33c6176975f171b93025f05d7/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3a38a7f269f7a33c6176975f171b93025f05d7/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=fa3a38a7f269f7a33c6176975f171b93025f05d7",
        "patch": "@@ -22,6 +22,7 @@\n \"\"\"\n \n import os\n+import time\n import shutil\n import sys\n import subprocess\n@@ -47,6 +48,10 @@\n passOn = \"\"\n p = re.compile(\"^--\")\n \n+bold = (\"\",\"\")\n+if (os.name == 'posix'):\n+    bold = ('\\033[0m', '\\033[1m')\n+\n for arg in sys.argv[1:]:\n     if arg == '--coverage':\n         ENABLE_COVERAGE = 1\n@@ -92,6 +97,7 @@\n     'blockchain.py',\n     'disablewallet.py',\n     'sendheaders.py',\n+    'keypool.py',\n ]\n testScriptsExt = [\n     'bip65-cltv.py',\n@@ -105,7 +111,6 @@\n     'pruning.py',\n     'forknotify.py',\n     'invalidateblock.py',\n-    'keypool.py',\n #    'rpcbind_test.py', #temporary, bug in libevent, see #6655\n     'smartfees.py',\n     'maxblocksinflight.py',\n@@ -126,7 +131,7 @@ def runtests():\n \n     if ENABLE_COVERAGE:\n         coverage = RPCCoverage()\n-        print(\"Initializing coverage directory at %s\" % coverage.dir)\n+        print(\"Initializing coverage directory at %s\\n\" % coverage.dir)\n \n     if(ENABLE_WALLET == 1 and ENABLE_UTILS == 1 and ENABLE_BITCOIND == 1):\n         rpcTestDir = buildDir + '/qa/rpc-tests/'\n@@ -141,10 +146,12 @@ def runtests():\n                     or run_extended\n                     or testScripts[i] in opts\n                     or re.sub(\".py$\", \"\", testScripts[i]) in opts ):\n-                print(\"Running testscript \" + testScripts[i] + \"...\")\n \n+                print(\"Running testscript %s%s%s ...\" % (bold[1], testScripts[i], bold[0]))\n+                time0 = time.time()\n                 subprocess.check_call(\n                     rpcTestDir + testScripts[i] + flags, shell=True)\n+                print(\"Duration: %s s\\n\" % (int(time.time() - time0)))\n \n                 # exit if help is called so we print just one set of\n                 # instructions\n@@ -156,12 +163,14 @@ def runtests():\n         for i in range(len(testScriptsExt)):\n             if (run_extended or testScriptsExt[i] in opts\n                     or re.sub(\".py$\", \"\", testScriptsExt[i]) in opts):\n+\n                 print(\n                     \"Running 2nd level testscript \"\n-                    + testScriptsExt[i] + \"...\")\n-\n+                    + \"%s%s%s ...\" % (bold[1], testScriptsExt[i], bold[0]))\n+                time0 = time.time()\n                 subprocess.check_call(\n                     rpcTestDir + testScriptsExt[i] + flags, shell=True)\n+                print(\"Duration: %s s\\n\" % (int(time.time() - time0)))\n \n         if coverage:\n             coverage.report_rpc_coverage()"
      }
    ]
  },
  {
    "sha": "fad3035e8d84dd3cbd166b9722127da373d34554",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWQzMDM1ZThkODRkZDNjYmQxNjZiOTcyMjEyN2RhMzczZDM0NTU0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-23T20:11:53Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-30T15:33:15Z"
      },
      "message": "[doc] Minor markdown fixes",
      "tree": {
        "sha": "573e99e733a3543381dfcaaa9fe4daa0ab6428c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/573e99e733a3543381dfcaaa9fe4daa0ab6428c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fad3035e8d84dd3cbd166b9722127da373d34554",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad3035e8d84dd3cbd166b9722127da373d34554",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fad3035e8d84dd3cbd166b9722127da373d34554",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad3035e8d84dd3cbd166b9722127da373d34554/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7751824ce8a7e1cc5511794516fe674bc3eaa3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7751824ce8a7e1cc5511794516fe674bc3eaa3c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7751824ce8a7e1cc5511794516fe674bc3eaa3c"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 18,
      "deletions": 18
    },
    "files": [
      {
        "sha": "55ab65a68163930ff6acfa7cecc30ff6bc3fdf46",
        "filename": "README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad3035e8d84dd3cbd166b9722127da373d34554/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad3035e8d84dd3cbd166b9722127da373d34554/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=fad3035e8d84dd3cbd166b9722127da373d34554",
        "patch": "@@ -48,7 +48,7 @@ lots of money.\n \n ### Automated Testing\n \n-Developers are strongly encouraged to write unit tests for new code, and to\n+Developers are strongly encouraged to write [unit tests](/doc/unit-tests.md) for new code, and to\n submit new unit tests for old code. Unit tests can be compiled and run\n (assuming they weren't disabled in configure) with: `make check`\n "
      },
      {
        "sha": "358792251b6751d434f9b57c459421290478a65c",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad3035e8d84dd3cbd166b9722127da373d34554/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad3035e8d84dd3cbd166b9722127da373d34554/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=fad3035e8d84dd3cbd166b9722127da373d34554",
        "patch": "@@ -218,7 +218,7 @@ General Bitcoin Core\n   - *Rationale*: RPC allows for better automatic testing. The test suite for\n     the GUI is very limited\n \n-- Make sure pulls pass Travis CI before merging\n+- Make sure pull requests pass Travis CI before merging\n \n   - *Rationale*: Makes sure that they pass thorough testing, and that the tester will keep passing\n      on the master branch. Otherwise all new pull requests will start failing the tests, resulting in\n@@ -230,9 +230,9 @@ General Bitcoin Core\n Wallet\n -------\n \n-- Make sure that that no crashes happen with run-time option `-disablewallet`.\n+- Make sure that no crashes happen with run-time option `-disablewallet`.\n \n-  - *Rationale*: In RPC code that conditionally use the wallet (such as\n+  - *Rationale*: In RPC code that conditionally uses the wallet (such as\n     `validateaddress`) it is easy to forget that global pointer `pwalletMain`\n     can be NULL. See `qa/rpc-tests/disablewallet.py` for functional tests\n     exercising the API with `-disablewallet`\n@@ -250,9 +250,9 @@ General C++\n     with assertions disabled, having side-effects in assertions is unexpected and\n     makes the code harder to understand\n \n-- If you use the .h, you must link the .cpp\n+- If you use the `.h`, you must link the `.cpp`\n \n-  - *Rationale*: Include files are the interface for the implementation file. Including one but\n+  - *Rationale*: Include files define the interface for the code in implementation files. Including one but\n       not linking the other is confusing. Please avoid that. Moving functions from\n       the `.h` to the `.cpp` should not result in build errors\n \n@@ -264,11 +264,11 @@ General C++\n C++ data structures\n --------------------\n \n-- Never use the std::map [] syntax when reading from a map, but instead use .find()\n+- Never use the `std::map []` syntax when reading from a map, but instead use `.find()`\n \n-  - *Rationale*: [] does an insert (of the default element) if the item doesn't\n+  - *Rationale*: `[]` does an insert (of the default element) if the item doesn't\n     exist in the map yet. This has resulted in memory leaks in the past, as well as\n-    race conditions (expecting read-read behavior). Using [] is fine for *writing* to a map\n+    race conditions (expecting read-read behavior). Using `[]` is fine for *writing* to a map\n \n - Do not compare an iterator from one data structure with an iterator of\n   another data structure (even if of the same type)\n@@ -304,18 +304,18 @@ C++ data structures\n Strings and formatting\n ------------------------\n \n-- Be careful of LogPrint versus LogPrintf. LogPrint takes a 'category' argument, LogPrintf does not.\n+- Be careful of `LogPrint` versus `LogPrintf`. `LogPrint` takes a `category` argument, `LogPrintf` does not.\n \n   - *Rationale*: Confusion of these can result in runtime exceptions due to\n     formatting mismatch, and it is easy to get wrong because of subtly similar naming\n \n-- Use std::string, avoid C string manipulation functions\n+- Use `std::string`, avoid C string manipulation functions\n \n   - *Rationale*: C++ string handling is marginally safer, less scope for\n-    buffer overflows and surprises with \\0 characters. Also some C string manipulations\n+    buffer overflows and surprises with `\\0` characters. Also some C string manipulations\n     tend to act differently depending on platform, or even the user locale\n \n-- Use ParseInt32, ParseInt64, ParseDouble from `utilstrencodings.h` for number parsing\n+- Use `ParseInt32`, `ParseInt64`, `ParseDouble` from `utilstrencodings.h` for number parsing\n \n   - *Rationale*: These functions do overflow checking, and avoid pesky locale issues\n "
      },
      {
        "sha": "afaece829c77d4832364231db459f25c23450e49",
        "filename": "doc/unit-tests.md",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad3035e8d84dd3cbd166b9722127da373d34554/doc/unit-tests.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad3035e8d84dd3cbd166b9722127da373d34554/doc/unit-tests.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/unit-tests.md?ref=fad3035e8d84dd3cbd166b9722127da373d34554",
        "patch": "@@ -1,18 +1,18 @@\n Compiling/running unit tests\n ------------------------------------\n \n-Unit tests will be automatically compiled if dependencies were met in configure\n+Unit tests will be automatically compiled if dependencies were met in `./configure`\n and tests weren't explicitly disabled.\n \n-After configuring, they can be run with 'make check'.\n+After configuring, they can be run with `make check`.\n \n-To run the bitcoind tests manually, launch src/test/test_bitcoin .\n+To run the bitcoind tests manually, launch `src/test/test_bitcoin`.\n \n To add more bitcoind tests, add `BOOST_AUTO_TEST_CASE` functions to the existing\n-.cpp files in the test/ directory or add new .cpp files that\n+.cpp files in the `test/` directory or add new .cpp files that\n implement new BOOST_AUTO_TEST_SUITE sections.\n \n-To run the bitcoin-qt tests manually, launch src/qt/test/test_bitcoin-qt\n+To run the bitcoin-qt tests manually, launch `src/qt/test/test_bitcoin-qt`\n \n To add more bitcoin-qt tests, add them to the `src/qt/test/` directory and\n the `src/qt/test/test_main.cpp` file."
      }
    ]
  },
  {
    "sha": "fa22a1002873fb222a7ddb8d00c2bd727293ac13",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTIyYTEwMDI4NzNmYjIyMmE3ZGRiOGQwMGMyYmQ3MjcyOTNhYzEz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-25T12:45:13Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-30T15:34:11Z"
      },
      "message": "contrib: Del. gitian downloader config and update gitian README",
      "tree": {
        "sha": "8c8d507d33800a3f715af41375c9ef7e12b137c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c8d507d33800a3f715af41375c9ef7e12b137c9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa22a1002873fb222a7ddb8d00c2bd727293ac13",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa22a1002873fb222a7ddb8d00c2bd727293ac13",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa22a1002873fb222a7ddb8d00c2bd727293ac13",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa22a1002873fb222a7ddb8d00c2bd727293ac13/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fad3035e8d84dd3cbd166b9722127da373d34554",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad3035e8d84dd3cbd166b9722127da373d34554",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fad3035e8d84dd3cbd166b9722127da373d34554"
      }
    ],
    "stats": {
      "total": 103,
      "additions": 6,
      "deletions": 97
    },
    "files": [
      {
        "sha": "614970659660f8fee76b8859467e192795829de4",
        "filename": "contrib/gitian-descriptors/README.md",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa22a1002873fb222a7ddb8d00c2bd727293ac13/contrib/gitian-descriptors/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa22a1002873fb222a7ddb8d00c2bd727293ac13/contrib/gitian-descriptors/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/README.md?ref=fa22a1002873fb222a7ddb8d00c2bd727293ac13",
        "patch": "@@ -1,8 +1,7 @@\n-### Gavin's notes on getting gitian builds up and running using KVM:###\n+### Gavin's notes on getting gitian builds up and running using KVM\n \n-These instructions distilled from:\n-[  https://help.ubuntu.com/community/KVM/Installation](  https://help.ubuntu.com/community/KVM/Installation)\n-... see there for complete details.\n+These instructions distilled from\n+[https://help.ubuntu.com/community/KVM/Installation](https://help.ubuntu.com/community/KVM/Installation).\n \n You need the right hardware: you need a 64-bit-capable CPU with hardware virtualization support (Intel VT-x or AMD-V). Not all modern CPUs support hardware virtualization.\n \n@@ -33,14 +32,14 @@ Once you've got the right hardware and software:\n     # Get inputs (see doc/release-process.md for exact inputs needed and where to get them)\n     ...\n \n-    # For further build instructions see doc/release-notes.md\n+    # For further build instructions see doc/release-process.md\n     ...\n \n ---------------------\n \n `gitian-builder` now also supports building using LXC. See\n-[  https://help.ubuntu.com/12.04/serverguide/lxc.html](  https://help.ubuntu.com/12.04/serverguide/lxc.html)\n-... for how to get LXC up and running under Ubuntu.\n+[help.ubuntu.com](https://help.ubuntu.com/14.04/serverguide/lxc.html)\n+for how to get LXC up and running under Ubuntu.\n \n If your main machine is a 64-bit Mac or PC with a few gigabytes of memory\n and at least 10 gigabytes of free disk space, you can `gitian-build` using"
      },
      {
        "sha": "c0048d336e5e365da5d91f9a47db453d9614922d",
        "filename": "contrib/gitian-downloader/linux-download-config",
        "status": "removed",
        "additions": 0,
        "deletions": 45,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad3035e8d84dd3cbd166b9722127da373d34554/contrib/gitian-downloader/linux-download-config",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad3035e8d84dd3cbd166b9722127da373d34554/contrib/gitian-downloader/linux-download-config",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/linux-download-config?ref=fad3035e8d84dd3cbd166b9722127da373d34554",
        "patch": "@@ -1,45 +0,0 @@\n---- \n-name: bitcoin\n-urls:\n-- http://bitcoin.org/bitcoin-latest-linux-gitian.zip\n-rss:\n-- url: \n-  xpath: //item/link/text()\n-  pattern: bitcoin-\\d+.\\d+.\\d+-linux-gitian.zip\n-signers:\n-  0A82509767C7D4A5D14DA2301AE1D35043E08E54:\n-    name: BlueMatt\n-    key: bluematt\n-  BF6273FAEF7CC0BA1F562E50989F6B3048A116B5:\n-    name: Devrandom\n-    key: devrandom\n-  E463A93F5F3117EEDE6C7316BD02942421F4889F:\n-    name: Luke-Jr\n-    key: luke-jr\n-  D762373D24904A3E42F33B08B9A408E71DAAC974:\n-    name: \"Pieter Wuille\"\n-    key: sipa\n-  77E72E69DA7EE0A148C06B21B34821D4944DE5F7:\n-    name: tcatm\n-    key: tcatm\n-  01CDF4627A3B88AAE4A571C87588242FBE38D3A8:\n-    name: \"Gavin Andresen\"\n-    key: gavinandresen\n-  71A3B16735405025D447E8F274810B012346C9A6:\n-    name: \"Wladimir J. van der Laan\"\n-    key: laanwj\n-  AEC1884398647C47413C1C3FB1179EB7347DC10D:\n-    name: \"Warren Togami\"\n-    key: wtogami\n-  9692B91BBF0E8D34DFD33B1882C5C009628ECF0C:\n-    name: michagogo\n-    key: michagogo\n-  E944AE667CF960B1004BC32FCA662BE18B877A60:\n-    name: \"Andreas Schildbach\"\n-    key: aschildbach\n-  C060A6635913D98A3587D7DB1C2491FFEB0EF770:\n-    name: \"Cory Fields\"\n-    key: \"cfields\"\n-  37EC7D7B0A217CDB4B4E007E7FAB114267E4FA04:\n-    name: \"Peter Todd\"\n-    key: \"petertodd\""
      },
      {
        "sha": "0ad3bdd4f3e3faf0e8c20fa5259bf3660a395782",
        "filename": "contrib/gitian-downloader/win32-download-config",
        "status": "removed",
        "additions": 0,
        "deletions": 45,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad3035e8d84dd3cbd166b9722127da373d34554/contrib/gitian-downloader/win32-download-config",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad3035e8d84dd3cbd166b9722127da373d34554/contrib/gitian-downloader/win32-download-config",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/win32-download-config?ref=fad3035e8d84dd3cbd166b9722127da373d34554",
        "patch": "@@ -1,45 +0,0 @@\n---- \n-name: bitcoin\n-urls:\n-- http://bitcoin.org/bitcoin-latest-win32-gitian.zip\n-rss:\n-- url: \n-  xpath: //item/link/text()\n-  pattern: bitcoin-\\d+.\\d+.\\d+-win32-gitian.zip\n-signers:\n-  0A82509767C7D4A5D14DA2301AE1D35043E08E54:\n-    name: BlueMatt\n-    key: bluematt\n-  BF6273FAEF7CC0BA1F562E50989F6B3048A116B5:\n-    name: Devrandom\n-    key: devrandom\n-  E463A93F5F3117EEDE6C7316BD02942421F4889F:\n-    name: Luke-Jr\n-    key: luke-jr\n-  D762373D24904A3E42F33B08B9A408E71DAAC974:\n-    name: \"Pieter Wuille\"\n-    key: sipa\n-  77E72E69DA7EE0A148C06B21B34821D4944DE5F7:\n-    name: tcatm\n-    key: tcatm\n-  01CDF4627A3B88AAE4A571C87588242FBE38D3A8:\n-    name: \"Gavin Andresen\"\n-    key: gavinandresen\n-  71A3B16735405025D447E8F274810B012346C9A6:\n-    name: \"Wladimir J. van der Laan\"\n-    key: laanwj\n-  AEC1884398647C47413C1C3FB1179EB7347DC10D:\n-    name: \"Warren Togami\"\n-    key: wtogami\n-  9692B91BBF0E8D34DFD33B1882C5C009628ECF0C:\n-    name: michagogo\n-    key: michagogo\n-  E944AE667CF960B1004BC32FCA662BE18B877A60:\n-    name: \"Andreas Schildbach\"\n-    key: aschildbach\n-  C060A6635913D98A3587D7DB1C2491FFEB0EF770:\n-    name: \"Cory Fields\"\n-    key: \"cfields\"\n-  37EC7D7B0A217CDB4B4E007E7FAB114267E4FA04:\n-    name: \"Peter Todd\"\n-    key: \"petertodd\""
      }
    ]
  },
  {
    "sha": "9999cb0626750c912097c73a1ef5c50435a922e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTk5Y2IwNjI2NzUwYzkxMjA5N2M3M2ExZWY1YzUwNDM1YTkyMmUz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-30T12:23:00Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-30T15:34:33Z"
      },
      "message": "Fix url in .travis.yml",
      "tree": {
        "sha": "d3fc6e294962c5bd8a4887f6a7490e8ed9410456",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d3fc6e294962c5bd8a4887f6a7490e8ed9410456"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9999cb0626750c912097c73a1ef5c50435a922e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9999cb0626750c912097c73a1ef5c50435a922e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9999cb0626750c912097c73a1ef5c50435a922e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9999cb0626750c912097c73a1ef5c50435a922e3/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa22a1002873fb222a7ddb8d00c2bd727293ac13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa22a1002873fb222a7ddb8d00c2bd727293ac13",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa22a1002873fb222a7ddb8d00c2bd727293ac13"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e2d43d6330589420915bd69effce40de33b22d79",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9999cb0626750c912097c73a1ef5c50435a922e3/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9999cb0626750c912097c73a1ef5c50435a922e3/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=9999cb0626750c912097c73a1ef5c50435a922e3",
        "patch": "@@ -2,7 +2,7 @@\n # - A travis bug causes caches to trample eachother when using the same\n #   compiler key (which we don't use anyway). This is worked around for now by\n #   replacing the \"compilers\" with a build name prefixed by the no-op \":\"\n-#   command. See: https://github.com/travis-ci/casher/issues/6\n+#   command. See: https://github.com/travis-ci/travis-ci/issues/4393\n \n os: linux\n language: cpp"
      }
    ]
  },
  {
    "sha": "faffc172ec08e08e266ef9517149853c59ad4b45",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWZmYzE3MmVjMDhlMDhlMjY2ZWY5NTE3MTQ5ODUzYzU5YWQ0YjQ1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-09-14T15:42:05Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-30T17:01:43Z"
      },
      "message": "rpcwallet: Clarify what settxfee does",
      "tree": {
        "sha": "4163033dcc3d66c9c0ce77d45629d460b86c538f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4163033dcc3d66c9c0ce77d45629d460b86c538f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faffc172ec08e08e266ef9517149853c59ad4b45",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faffc172ec08e08e266ef9517149853c59ad4b45",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faffc172ec08e08e266ef9517149853c59ad4b45",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faffc172ec08e08e266ef9517149853c59ad4b45/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9999cb0626750c912097c73a1ef5c50435a922e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9999cb0626750c912097c73a1ef5c50435a922e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9999cb0626750c912097c73a1ef5c50435a922e3"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "69af471a0f4cfc2d5121e8198a72bd7a4303c6bc",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faffc172ec08e08e266ef9517149853c59ad4b45/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faffc172ec08e08e266ef9517149853c59ad4b45/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=faffc172ec08e08e266ef9517149853c59ad4b45",
        "patch": "@@ -2174,7 +2174,7 @@ UniValue settxfee(const UniValue& params, bool fHelp)\n     if (fHelp || params.size() < 1 || params.size() > 1)\n         throw runtime_error(\n             \"settxfee amount\\n\"\n-            \"\\nSet the transaction fee per kB.\\n\"\n+            \"\\nSet the transaction fee per kB. Overwrites the paytxfee parameter.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. amount         (numeric, required) The transaction fee in \" + CURRENCY_UNIT + \"/kB rounded to the nearest 0.00000001\\n\"\n             \"\\nResult\\n\""
      }
    ]
  },
  {
    "sha": "fa19a588b9e734b05b81bc0cb49ba3a04ffde0bc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTE5YTU4OGI5ZTczNGIwNWI4MWJjMGNiNDliYTNhMDRmZmRlMGJj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-09T20:00:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-30T17:02:12Z"
      },
      "message": "HelpMessage: Don't hide -mintxfee behind showDebug",
      "tree": {
        "sha": "d57b10bc4b9318a5e892e28645877fd14b97ed0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d57b10bc4b9318a5e892e28645877fd14b97ed0b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa19a588b9e734b05b81bc0cb49ba3a04ffde0bc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa19a588b9e734b05b81bc0cb49ba3a04ffde0bc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa19a588b9e734b05b81bc0cb49ba3a04ffde0bc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa19a588b9e734b05b81bc0cb49ba3a04ffde0bc/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faffc172ec08e08e266ef9517149853c59ad4b45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faffc172ec08e08e266ef9517149853c59ad4b45",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faffc172ec08e08e266ef9517149853c59ad4b45"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e92931d687b0a3b4e1273c3d3454fff90ea0e787",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa19a588b9e734b05b81bc0cb49ba3a04ffde0bc/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa19a588b9e734b05b81bc0cb49ba3a04ffde0bc/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa19a588b9e734b05b81bc0cb49ba3a04ffde0bc",
        "patch": "@@ -393,8 +393,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageGroup(_(\"Wallet options:\"));\n     strUsage += HelpMessageOpt(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"));\n     strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), DEFAULT_KEYPOOL_SIZE));\n-    if (showDebug)\n-        strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\",\n+    strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\"),\n             CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)));\n     strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in %s/kB) to add to transactions you send (default: %s)\"),\n         CURRENCY_UNIT, FormatMoney(payTxFee.GetFeePerK())));"
      }
    ]
  },
  {
    "sha": "cfdc66280f4075885fc41b244217b7560a66874c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZmRjNjYyODBmNDA3NTg4NWZjNDFiMjQ0MjE3Yjc1NjBhNjY4NzRj",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-11-30T17:35:24Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-11-30T17:35:24Z"
      },
      "message": "Explicitly set chain limits in replace-by-fee test",
      "tree": {
        "sha": "70f0a56147641c348e6d16decf8456213d8a9fa0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70f0a56147641c348e6d16decf8456213d8a9fa0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cfdc66280f4075885fc41b244217b7560a66874c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfdc66280f4075885fc41b244217b7560a66874c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cfdc66280f4075885fc41b244217b7560a66874c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfdc66280f4075885fc41b244217b7560a66874c/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "34e02e0147188a7e364489db23128a05505e7a4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34e02e0147188a7e364489db23128a05505e7a4c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34e02e0147188a7e364489db23128a05505e7a4c"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6e9e0b304cec71594fd7ce0d4a24c4b1dd19977c",
        "filename": "qa/rpc-tests/replace-by-fee.py",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfdc66280f4075885fc41b244217b7560a66874c/qa/rpc-tests/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfdc66280f4075885fc41b244217b7560a66874c/qa/rpc-tests/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/replace-by-fee.py?ref=cfdc66280f4075885fc41b244217b7560a66874c",
        "patch": "@@ -73,7 +73,12 @@ class ReplaceByFeeTest(BitcoinTestFramework):\n     def setup_network(self):\n         self.nodes = []\n         self.nodes.append(start_node(0, self.options.tmpdir, [\"-maxorphantx=1000\",\n-                                                              \"-relaypriority=0\", \"-whitelist=127.0.0.1\"]))\n+                                                              \"-relaypriority=0\", \"-whitelist=127.0.0.1\",\n+                                                              \"-limitancestorcount=50\",\n+                                                              \"-limitancestorsize=101\",\n+                                                              \"-limitdescendantcount=200\",\n+                                                              \"-limitdescendantsize=101\"\n+                                                              ]))\n         self.is_network_split = False\n \n     def run_test(self):"
      }
    ]
  },
  {
    "sha": "0c9959a3081328f1a8f4d9a5d27d1559b6ede561",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzk5NTlhMzA4MTMyOGYxYThmNGQ5YTVkMjdkMTU1OWI2ZWRlNTYx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-08-27T01:15:04Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-11-30T18:02:04Z"
      },
      "message": "Add failing test checking timelocked-txn removal during reorg",
      "tree": {
        "sha": "fdcb09e994ecd67c97977e506a121639b17cc4d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fdcb09e994ecd67c97977e506a121639b17cc4d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c9959a3081328f1a8f4d9a5d27d1559b6ede561",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c9959a3081328f1a8f4d9a5d27d1559b6ede561",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c9959a3081328f1a8f4d9a5d27d1559b6ede561",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c9959a3081328f1a8f4d9a5d27d1559b6ede561/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "34e02e0147188a7e364489db23128a05505e7a4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34e02e0147188a7e364489db23128a05505e7a4c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34e02e0147188a7e364489db23128a05505e7a4c"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 21,
      "deletions": 7
    },
    "files": [
      {
        "sha": "09557241740cb10f4224bbaf4dd991f689feb541",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c9959a3081328f1a8f4d9a5d27d1559b6ede561/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c9959a3081328f1a8f4d9a5d27d1559b6ede561/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=0c9959a3081328f1a8f4d9a5d27d1559b6ede561",
        "patch": "@@ -77,7 +77,7 @@\n     'rawtransactions.py',\n     'rest.py',\n     'mempool_spendcoinbase.py',\n-    'mempool_coinbase_spends.py',\n+    'mempool_reorg.py',\n     'httpbasics.py',\n     'zapwallettxes.py',\n     'proxy_test.py',"
      },
      {
        "sha": "fdbaf689ad5b223a82b632ed9af34010de0f1fb3",
        "filename": "qa/rpc-tests/mempool_reorg.py",
        "status": "renamed",
        "additions": 20,
        "deletions": 6,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c9959a3081328f1a8f4d9a5d27d1559b6ede561/qa/rpc-tests/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c9959a3081328f1a8f4d9a5d27d1559b6ede561/qa/rpc-tests/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_reorg.py?ref=0c9959a3081328f1a8f4d9a5d27d1559b6ede561",
        "patch": "@@ -52,32 +52,46 @@ def run_test(self):\n         # 3. Indirect (coinbase and child both in chain) : spend_103 and spend_103_1\n         # Use invalidatblock to make all of the above coinbase spends invalid (immature coinbase),\n         # and make sure the mempool code behaves correctly.\n-        b = [ self.nodes[0].getblockhash(n) for n in range(102, 105) ]\n+        b = [ self.nodes[0].getblockhash(n) for n in range(101, 105) ]\n         coinbase_txids = [ self.nodes[0].getblock(h)['tx'][0] for h in b ]\n-        spend_101_raw = self.create_tx(coinbase_txids[0], node1_address, 50)\n-        spend_102_raw = self.create_tx(coinbase_txids[1], node0_address, 50)\n-        spend_103_raw = self.create_tx(coinbase_txids[2], node0_address, 50)\n+        spend_101_raw = self.create_tx(coinbase_txids[1], node1_address, 50)\n+        spend_102_raw = self.create_tx(coinbase_txids[2], node0_address, 50)\n+        spend_103_raw = self.create_tx(coinbase_txids[3], node0_address, 50)\n+\n+        # Create a block-height-locked transaction which will be invalid after reorg\n+        timelock_tx = self.nodes[0].createrawtransaction([{\"txid\": coinbase_txids[0], \"vout\": 0}], {node0_address: 50})\n+        # Set the time lock\n+        timelock_tx = timelock_tx.replace(\"ffffffff\", \"11111111\", 1)\n+        timelock_tx = timelock_tx[:-8] + hex(self.nodes[0].getblockcount() + 2)[2:] + \"000000\"\n+        timelock_tx = self.nodes[0].signrawtransaction(timelock_tx)[\"hex\"]\n+        assert_raises(JSONRPCException, self.nodes[0].sendrawtransaction, timelock_tx)\n \n         # Broadcast and mine spend_102 and 103:\n         spend_102_id = self.nodes[0].sendrawtransaction(spend_102_raw)\n         spend_103_id = self.nodes[0].sendrawtransaction(spend_103_raw)\n         self.nodes[0].generate(1)\n+        assert_raises(JSONRPCException, self.nodes[0].sendrawtransaction, timelock_tx)\n \n         # Create 102_1 and 103_1:\n         spend_102_1_raw = self.create_tx(spend_102_id, node1_address, 50)\n         spend_103_1_raw = self.create_tx(spend_103_id, node1_address, 50)\n \n         # Broadcast and mine 103_1:\n         spend_103_1_id = self.nodes[0].sendrawtransaction(spend_103_1_raw)\n-        self.nodes[0].generate(1)\n+        last_block = self.nodes[0].generate(1)\n+        timelock_tx_id = self.nodes[0].sendrawtransaction(timelock_tx)\n \n         # ... now put spend_101 and spend_102_1 in memory pools:\n         spend_101_id = self.nodes[0].sendrawtransaction(spend_101_raw)\n         spend_102_1_id = self.nodes[0].sendrawtransaction(spend_102_1_raw)\n \n         self.sync_all()\n \n-        assert_equal(set(self.nodes[0].getrawmempool()), set([ spend_101_id, spend_102_1_id ]))\n+        assert_equal(set(self.nodes[0].getrawmempool()), set([ spend_101_id, spend_102_1_id, timelock_tx_id ]))\n+\n+        for node in self.nodes:\n+            node.invalidateblock(last_block[0])\n+        assert_equal(set(self.nodes[0].getrawmempool()), set([ spend_101_id, spend_102_1_id, spend_103_1_id ]))\n \n         # Use invalidateblock to re-org back and make all those coinbase spends\n         # immature/invalid:",
        "previous_filename": "qa/rpc-tests/mempool_coinbase_spends.py"
      }
    ]
  },
  {
    "sha": "9b060e5cfb0d185b553b21ae19d390f81e83bd4d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YjA2MGU1Y2ZiMGQxODViNTUzYjIxYWUxOWQzOTBmODFlODNiZDRk",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-08-27T01:58:17Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-11-30T18:02:04Z"
      },
      "message": "Fix removal of time-locked transactions during reorg",
      "tree": {
        "sha": "102cf99621b43a118cc0239990bf5a25614f43d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/102cf99621b43a118cc0239990bf5a25614f43d6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b060e5cfb0d185b553b21ae19d390f81e83bd4d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b060e5cfb0d185b553b21ae19d390f81e83bd4d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b060e5cfb0d185b553b21ae19d390f81e83bd4d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b060e5cfb0d185b553b21ae19d390f81e83bd4d/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0c9959a3081328f1a8f4d9a5d27d1559b6ede561",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c9959a3081328f1a8f4d9a5d27d1559b6ede561",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c9959a3081328f1a8f4d9a5d27d1559b6ede561"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 17,
      "deletions": 12
    },
    "files": [
      {
        "sha": "3422c56cfc34c6bb7024a200a45451b29c998f30",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b060e5cfb0d185b553b21ae19d390f81e83bd4d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b060e5cfb0d185b553b21ae19d390f81e83bd4d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9b060e5cfb0d185b553b21ae19d390f81e83bd4d",
        "patch": "@@ -2350,7 +2350,7 @@ bool static DisconnectTip(CValidationState& state, const Consensus::Params& cons\n     // UpdateTransactionsFromBlock finds descendants of any transactions in this\n     // block that were added back and cleans up the mempool state.\n     mempool.UpdateTransactionsFromBlock(vHashUpdate);\n-    mempool.removeCoinbaseSpends(pcoinsTip, pindexDelete->nHeight);\n+    mempool.removeForReorg(pcoinsTip, pindexDelete->nHeight);\n     mempool.check(pcoinsTip);\n     // Update chainActive and related variables.\n     UpdateTip(pindexDelete->pprev);"
      },
      {
        "sha": "1c38e32601889ec42d9bbb56ebb23d0fa9325d14",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 10,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b060e5cfb0d185b553b21ae19d390f81e83bd4d/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b060e5cfb0d185b553b21ae19d390f81e83bd4d/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=9b060e5cfb0d185b553b21ae19d390f81e83bd4d",
        "patch": "@@ -11,6 +11,7 @@\n #include \"main.h\"\n #include \"policy/fees.h\"\n #include \"streams.h\"\n+#include \"timedata.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n #include \"utiltime.h\"\n@@ -478,22 +479,26 @@ void CTxMemPool::remove(const CTransaction &origTx, std::list<CTransaction>& rem\n     }\n }\n \n-void CTxMemPool::removeCoinbaseSpends(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight)\n+void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight)\n {\n     // Remove transactions spending a coinbase which are now immature\n     LOCK(cs);\n     list<CTransaction> transactionsToRemove;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         const CTransaction& tx = it->GetTx();\n-        BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n-            indexed_transaction_set::const_iterator it2 = mapTx.find(txin.prevout.hash);\n-            if (it2 != mapTx.end())\n-                continue;\n-            const CCoins *coins = pcoins->AccessCoins(txin.prevout.hash);\n-            if (nCheckFrequency != 0) assert(coins);\n-            if (!coins || (coins->IsCoinBase() && ((signed long)nMemPoolHeight) - coins->nHeight < COINBASE_MATURITY)) {\n-                transactionsToRemove.push_back(tx);\n-                break;\n+        if (!IsFinalTx(tx, nMemPoolHeight, GetAdjustedTime())) {\n+            transactionsToRemove.push_back(tx);\n+        } else {\n+            BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+                indexed_transaction_set::const_iterator it2 = mapTx.find(txin.prevout.hash);\n+                if (it2 != mapTx.end())\n+                    continue;\n+                const CCoins *coins = pcoins->AccessCoins(txin.prevout.hash);\n+\t\tif (nCheckFrequency != 0) assert(coins);\n+                if (!coins || (coins->IsCoinBase() && ((signed long)nMemPoolHeight) - coins->nHeight < COINBASE_MATURITY)) {\n+                    transactionsToRemove.push_back(tx);\n+                    break;\n+                }\n             }\n         }\n     }"
      },
      {
        "sha": "f45d5a20845ace43c297509ab2ea7b151a6e903f",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b060e5cfb0d185b553b21ae19d390f81e83bd4d/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b060e5cfb0d185b553b21ae19d390f81e83bd4d/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=9b060e5cfb0d185b553b21ae19d390f81e83bd4d",
        "patch": "@@ -376,7 +376,7 @@ class CTxMemPool\n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, setEntries &setAncestors, bool fCurrentEstimate = true);\n \n     void remove(const CTransaction &tx, std::list<CTransaction>& removed, bool fRecursive = false);\n-    void removeCoinbaseSpends(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight);\n+    void removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight);\n     void removeConflicts(const CTransaction &tx, std::list<CTransaction>& removed);\n     void removeForBlock(const std::vector<CTransaction>& vtx, unsigned int nBlockHeight,\n                         std::list<CTransaction>& conflicts, bool fCurrentEstimate = true);"
      }
    ]
  },
  {
    "sha": "b0a064c4b825c15dee87739348bab23f13541bdd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMGEwNjRjNGI4MjVjMTVkZWU4NzczOTM0OGJhYjIzZjEzNTQxYmRk",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-09-06T04:40:21Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-11-30T18:02:05Z"
      },
      "message": "Fix comment in removeForReorg",
      "tree": {
        "sha": "6189a5275df6f0ef457278a3dafc8bf9ea08d8bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6189a5275df6f0ef457278a3dafc8bf9ea08d8bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b0a064c4b825c15dee87739348bab23f13541bdd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0a064c4b825c15dee87739348bab23f13541bdd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b0a064c4b825c15dee87739348bab23f13541bdd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0a064c4b825c15dee87739348bab23f13541bdd/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b060e5cfb0d185b553b21ae19d390f81e83bd4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b060e5cfb0d185b553b21ae19d390f81e83bd4d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b060e5cfb0d185b553b21ae19d390f81e83bd4d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a2a53b0180c4697fdc7b7133f8304f664b20f35b",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0a064c4b825c15dee87739348bab23f13541bdd/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0a064c4b825c15dee87739348bab23f13541bdd/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=b0a064c4b825c15dee87739348bab23f13541bdd",
        "patch": "@@ -481,7 +481,7 @@ void CTxMemPool::remove(const CTransaction &origTx, std::list<CTransaction>& rem\n \n void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight)\n {\n-    // Remove transactions spending a coinbase which are now immature\n+    // Remove transactions spending a coinbase which are now immature and no-longer-final transactions\n     LOCK(cs);\n     list<CTransaction> transactionsToRemove;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {"
      }
    ]
  },
  {
    "sha": "474b84a7413f124524cccf097dd36c7a24d406b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzRiODRhNzQxM2YxMjQ1MjRjY2NmMDk3ZGQzNmM3YTI0ZDQwNmI4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-09-09T21:54:11Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-11-30T18:03:56Z"
      },
      "message": "Make indentation in ActivateBestChainStep readable",
      "tree": {
        "sha": "ae98850d16564eea325548f449f6158950f0f47a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae98850d16564eea325548f449f6158950f0f47a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/474b84a7413f124524cccf097dd36c7a24d406b8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/474b84a7413f124524cccf097dd36c7a24d406b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/474b84a7413f124524cccf097dd36c7a24d406b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/474b84a7413f124524cccf097dd36c7a24d406b8/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b0a064c4b825c15dee87739348bab23f13541bdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0a064c4b825c15dee87739348bab23f13541bdd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b0a064c4b825c15dee87739348bab23f13541bdd"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 33,
      "deletions": 33
    },
    "files": [
      {
        "sha": "e05237da201d58da5cb588cc5b25a4c4e789da07",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 33,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/474b84a7413f124524cccf097dd36c7a24d406b8/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/474b84a7413f124524cccf097dd36c7a24d406b8/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=474b84a7413f124524cccf097dd36c7a24d406b8",
        "patch": "@@ -2525,43 +2525,43 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n     bool fContinue = true;\n     int nHeight = pindexFork ? pindexFork->nHeight : -1;\n     while (fContinue && nHeight != pindexMostWork->nHeight) {\n-    // Don't iterate the entire list of potential improvements toward the best tip, as we likely only need\n-    // a few blocks along the way.\n-    int nTargetHeight = std::min(nHeight + 32, pindexMostWork->nHeight);\n-    vpindexToConnect.clear();\n-    vpindexToConnect.reserve(nTargetHeight - nHeight);\n-    CBlockIndex *pindexIter = pindexMostWork->GetAncestor(nTargetHeight);\n-    while (pindexIter && pindexIter->nHeight != nHeight) {\n-        vpindexToConnect.push_back(pindexIter);\n-        pindexIter = pindexIter->pprev;\n-    }\n-    nHeight = nTargetHeight;\n-\n-    // Connect new blocks.\n-    BOOST_REVERSE_FOREACH(CBlockIndex *pindexConnect, vpindexToConnect) {\n-        if (!ConnectTip(state, chainparams, pindexConnect, pindexConnect == pindexMostWork ? pblock : NULL)) {\n-            if (state.IsInvalid()) {\n-                // The block violates a consensus rule.\n-                if (!state.CorruptionPossible())\n-                    InvalidChainFound(vpindexToConnect.back());\n-                state = CValidationState();\n-                fInvalidFound = true;\n-                fContinue = false;\n-                break;\n+        // Don't iterate the entire list of potential improvements toward the best tip, as we likely only need\n+        // a few blocks along the way.\n+        int nTargetHeight = std::min(nHeight + 32, pindexMostWork->nHeight);\n+        vpindexToConnect.clear();\n+        vpindexToConnect.reserve(nTargetHeight - nHeight);\n+        CBlockIndex *pindexIter = pindexMostWork->GetAncestor(nTargetHeight);\n+        while (pindexIter && pindexIter->nHeight != nHeight) {\n+            vpindexToConnect.push_back(pindexIter);\n+            pindexIter = pindexIter->pprev;\n+        }\n+        nHeight = nTargetHeight;\n+\n+        // Connect new blocks.\n+        BOOST_REVERSE_FOREACH(CBlockIndex *pindexConnect, vpindexToConnect) {\n+            if (!ConnectTip(state, chainparams, pindexConnect, pindexConnect == pindexMostWork ? pblock : NULL)) {\n+                if (state.IsInvalid()) {\n+                    // The block violates a consensus rule.\n+                    if (!state.CorruptionPossible())\n+                        InvalidChainFound(vpindexToConnect.back());\n+                    state = CValidationState();\n+                    fInvalidFound = true;\n+                    fContinue = false;\n+                    break;\n+                } else {\n+                    // A system error occurred (disk space, database error, ...).\n+                    return false;\n+                }\n             } else {\n-                // A system error occurred (disk space, database error, ...).\n-                return false;\n-            }\n-        } else {\n-            PruneBlockIndexCandidates();\n-            if (!pindexOldTip || chainActive.Tip()->nChainWork > pindexOldTip->nChainWork) {\n-                // We're in a better position than we were. Return temporarily to release the lock.\n-                fContinue = false;\n-                break;\n+                PruneBlockIndexCandidates();\n+                if (!pindexOldTip || chainActive.Tip()->nChainWork > pindexOldTip->nChainWork) {\n+                    // We're in a better position than we were. Return temporarily to release the lock.\n+                    fContinue = false;\n+                    break;\n+                }\n             }\n         }\n     }\n-    }\n \n     if (fBlocksDisconnected)\n         mempool.TrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);"
      }
    ]
  },
  {
    "sha": "bb8ea1f6304d7ed3f5fe0a01c060ac9f94629349",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjhlYTFmNjMwNGQ3ZWQzZjVmZTBhMDFjMDYwYWM5Zjk0NjI5MzQ5",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-09-09T23:31:20Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-11-30T18:03:57Z"
      },
      "message": "removeForReorg calls once-per-disconnect-> once-per-reorg",
      "tree": {
        "sha": "41743375b4d3be9c81c497aec284ca10e79da2bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41743375b4d3be9c81c497aec284ca10e79da2bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb8ea1f6304d7ed3f5fe0a01c060ac9f94629349",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb8ea1f6304d7ed3f5fe0a01c060ac9f94629349",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb8ea1f6304d7ed3f5fe0a01c060ac9f94629349",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb8ea1f6304d7ed3f5fe0a01c060ac9f94629349/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "474b84a7413f124524cccf097dd36c7a24d406b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/474b84a7413f124524cccf097dd36c7a24d406b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/474b84a7413f124524cccf097dd36c7a24d406b8"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 15,
      "deletions": 9
    },
    "files": [
      {
        "sha": "8f67c035106172be7c0d38214f909f8573a80042",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 8,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb8ea1f6304d7ed3f5fe0a01c060ac9f94629349/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb8ea1f6304d7ed3f5fe0a01c060ac9f94629349/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=bb8ea1f6304d7ed3f5fe0a01c060ac9f94629349",
        "patch": "@@ -2310,12 +2310,11 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n     }\n }\n \n-/** Disconnect chainActive's tip. You want to manually re-limit mempool size after this */\n+/** Disconnect chainActive's tip. You probably want to call mempool.removeForReorg and manually re-limit mempool size after this, with cs_main held. */\n bool static DisconnectTip(CValidationState& state, const Consensus::Params& consensusParams)\n {\n     CBlockIndex *pindexDelete = chainActive.Tip();\n     assert(pindexDelete);\n-    mempool.check(pcoinsTip);\n     // Read block from disk.\n     CBlock block;\n     if (!ReadBlockFromDisk(block, pindexDelete, consensusParams))\n@@ -2350,8 +2349,6 @@ bool static DisconnectTip(CValidationState& state, const Consensus::Params& cons\n     // UpdateTransactionsFromBlock finds descendants of any transactions in this\n     // block that were added back and cleans up the mempool state.\n     mempool.UpdateTransactionsFromBlock(vHashUpdate);\n-    mempool.removeForReorg(pcoinsTip, pindexDelete->nHeight);\n-    mempool.check(pcoinsTip);\n     // Update chainActive and related variables.\n     UpdateTip(pindexDelete->pprev);\n     // Let wallets know transactions went from 1-confirmed to\n@@ -2375,7 +2372,6 @@ static int64_t nTimePostConnect = 0;\n bool static ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const CBlock* pblock)\n {\n     assert(pindexNew->pprev == chainActive.Tip());\n-    mempool.check(pcoinsTip);\n     // Read block from disk.\n     int64_t nTime1 = GetTimeMicros();\n     CBlock block;\n@@ -2412,7 +2408,6 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n     // Remove conflicting transactions from the mempool.\n     list<CTransaction> txConflicted;\n     mempool.removeForBlock(pblock->vtx, pindexNew->nHeight, txConflicted, !IsInitialBlockDownload());\n-    mempool.check(pcoinsTip);\n     // Update chainActive & related variables.\n     UpdateTip(pindexNew);\n     // Tell wallet about transactions that went from mempool\n@@ -2515,8 +2510,11 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n     // Disconnect active blocks which are no longer in the best chain.\n     bool fBlocksDisconnected = false;\n     while (chainActive.Tip() && chainActive.Tip() != pindexFork) {\n-        if (!DisconnectTip(state, chainparams.GetConsensus()))\n+        if (!DisconnectTip(state, chainparams.GetConsensus())) {\n+            // Probably an AbortNode() error, but try to keep mempool consistent anyway\n+            mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1);\n             return false;\n+        }\n         fBlocksDisconnected = true;\n     }\n \n@@ -2550,6 +2548,9 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n                     break;\n                 } else {\n                     // A system error occurred (disk space, database error, ...).\n+                    // Probably gonna shut down ASAP, but try to keep mempool consistent anyway\n+                    if (fBlocksDisconnected)\n+                        mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1);\n                     return false;\n                 }\n             } else {\n@@ -2563,8 +2564,11 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n         }\n     }\n \n-    if (fBlocksDisconnected)\n+    if (fBlocksDisconnected) {\n+        mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1);\n         mempool.TrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    }\n+    mempool.check(pcoinsTip);\n \n     // Callbacks/notifications for a new best chain.\n     if (fInvalidFound)\n@@ -2672,6 +2676,7 @@ bool InvalidateBlock(CValidationState& state, const Consensus::Params& consensus\n         // ActivateBestChain considers blocks already in chainActive\n         // unconditionally valid already, so force disconnect away from it.\n         if (!DisconnectTip(state, consensusParams)) {\n+            mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1);\n             return false;\n         }\n     }\n@@ -2689,6 +2694,7 @@ bool InvalidateBlock(CValidationState& state, const Consensus::Params& consensus\n     }\n \n     InvalidChainFound(pindex);\n+    mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1);\n     return true;\n }\n "
      },
      {
        "sha": "2996fdcb5a0e8cd7b37e1de135696d5f548e63e1",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb8ea1f6304d7ed3f5fe0a01c060ac9f94629349/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb8ea1f6304d7ed3f5fe0a01c060ac9f94629349/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=bb8ea1f6304d7ed3f5fe0a01c060ac9f94629349",
        "patch": "@@ -467,7 +467,7 @@ bool InvalidateBlock(CValidationState& state, const Consensus::Params& consensus\n /** Remove invalidity status from a block and its descendants. */\n bool ReconsiderBlock(CValidationState& state, CBlockIndex *pindex);\n \n-/** The currently-connected chain of blocks. */\n+/** The currently-connected chain of blocks (protected by cs_main). */\n extern CChain chainActive;\n \n /** Global variable that points to the active CCoinsView (protected by cs_main) */"
      }
    ]
  },
  {
    "sha": "7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZTQ5ZjVmOGI0ZTIzN2Q3MjEyZDAyN2E3YmVhNGJiZDUyYzllN2I2",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-10-29T18:06:13Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-11-30T18:12:53Z"
      },
      "message": "Track coinbase spends in CTxMemPoolEntry\n\nThis allows us to optimize CTxMemPool::removeForReorg.",
      "tree": {
        "sha": "43ad2997b024e53c22b81c7d585e0a752c134167",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/43ad2997b024e53c22b81c7d585e0a752c134167"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb8ea1f6304d7ed3f5fe0a01c060ac9f94629349",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb8ea1f6304d7ed3f5fe0a01c060ac9f94629349",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb8ea1f6304d7ed3f5fe0a01c060ac9f94629349"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 38,
      "deletions": 18
    },
    "files": [
      {
        "sha": "ad8819eb3d9d5418ff1b421d284f6fc802f09835",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6",
        "patch": "@@ -953,7 +953,18 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CAmount inChainInputValue;\n         double dPriority = view.GetPriority(tx, chainActive.Height(), inChainInputValue);\n \n-        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx), inChainInputValue);\n+        // Keep track of transactions that spend a coinbase, which we re-scan\n+        // during reorgs to ensure COINBASE_MATURITY is still met.\n+        bool fSpendsCoinbase = false;\n+        BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n+            const CCoins *coins = view.AccessCoins(txin.prevout.hash);\n+            if (coins->IsCoinBase()) {\n+                fSpendsCoinbase = true;\n+                break;\n+            }\n+        }\n+\n+        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx), inChainInputValue, fSpendsCoinbase);\n         unsigned int nSize = entry.GetTxSize();\n \n         // Don't accept it if it can't get into a block"
      },
      {
        "sha": "ab7357641daf05cccb8258695f5eb6f5834bd412",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 11,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6",
        "patch": "@@ -119,7 +119,8 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     {\n         tx.vout[0].nValue -= 1000000;\n         hash = tx.GetHash();\n-        mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+        bool spendsCoinbase = (i == 0) ? true : false; // only first tx spends coinbase\n+        mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n@@ -139,7 +140,8 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     {\n         tx.vout[0].nValue -= 10000000;\n         hash = tx.GetHash();\n-        mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+        bool spendsCoinbase = (i == 0) ? true : false; // only first tx spends coinbase\n+        mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n@@ -158,15 +160,15 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].prevout.hash = txFirst[1]->GetHash();\n     tx.vout[0].nValue = 4900000000LL;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     tx.vin[0].prevout.hash = hash;\n     tx.vin.resize(2);\n     tx.vin[1].scriptSig = CScript() << OP_1;\n     tx.vin[1].prevout.hash = txFirst[0]->GetHash();\n     tx.vin[1].prevout.n = 0;\n     tx.vout[0].nValue = 5900000000LL;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -177,7 +179,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].scriptSig = CScript() << OP_0 << OP_1;\n     tx.vout[0].nValue = 0;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -190,12 +192,12 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     script = CScript() << OP_0;\n     tx.vout[0].scriptPubKey = GetScriptForDestination(CScriptID(script));\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     tx.vin[0].prevout.hash = hash;\n     tx.vin[0].scriptSig = CScript() << (std::vector<unsigned char>)script;\n     tx.vout[0].nValue -= 1000000;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -206,10 +208,10 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = 4900000000LL;\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     tx.vout[0].scriptPubKey = CScript() << OP_2;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -235,7 +237,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n     tx.nLockTime = chainActive.Tip()->nHeight+1;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK(!CheckFinalTx(tx, LOCKTIME_MEDIAN_TIME_PAST));\n \n     // time locked\n@@ -249,7 +251,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx2.vout[0].scriptPubKey = CScript() << OP_1;\n     tx2.nLockTime = chainActive.Tip()->GetMedianTimePast()+1;\n     hash = tx2.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx2));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx2));\n     BOOST_CHECK(!CheckFinalTx(tx2, LOCKTIME_MEDIAN_TIME_PAST));\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));"
      },
      {
        "sha": "9645c7c94295888ba620a52ba6e7926b80488878",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6",
        "patch": "@@ -150,7 +150,7 @@ CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(CMutableTransaction &tx, CTxMemPo\n     CAmount inChainValue = hasNoDependencies ? txn.GetValueOut() : 0;\n \n     return CTxMemPoolEntry(txn, nFee, nTime, dPriority, nHeight,\n-                           hasNoDependencies, inChainValue);\n+                           hasNoDependencies, inChainValue, spendsCoinbase);\n }\n \n void Shutdown(void* parg)"
      },
      {
        "sha": "343c27673ce000756334fe7e9ed70fba1f065510",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6",
        "patch": "@@ -65,10 +65,11 @@ struct TestMemPoolEntryHelper\n     double dPriority;\n     unsigned int nHeight;\n     bool hadNoDependencies;\n+    bool spendsCoinbase;\n \n     TestMemPoolEntryHelper() :\n         nFee(0), nTime(0), dPriority(0.0), nHeight(1),\n-        hadNoDependencies(false) { }\n+        hadNoDependencies(false), spendsCoinbase(false) { }\n \n     CTxMemPoolEntry FromTx(CMutableTransaction &tx, CTxMemPool *pool = NULL);\n \n@@ -78,5 +79,6 @@ struct TestMemPoolEntryHelper\n     TestMemPoolEntryHelper &Priority(double _priority) { dPriority = _priority; return *this; }\n     TestMemPoolEntryHelper &Height(unsigned int _height) { nHeight = _height; return *this; }\n     TestMemPoolEntryHelper &HadNoDependencies(bool _hnd) { hadNoDependencies = _hnd; return *this; }\n+    TestMemPoolEntryHelper &SpendsCoinbase(bool _flag) { spendsCoinbase = _flag; return *this; }\n };\n #endif"
      },
      {
        "sha": "5a3062291fd353847d7ea2aa7e69f6d1c262517e",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6",
        "patch": "@@ -21,9 +21,11 @@ using namespace std;\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n                                  int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n-                                 bool poolHasNoInputsOf, CAmount _inChainInputValue):\n+                                 bool poolHasNoInputsOf, CAmount _inChainInputValue,\n+                                 bool _spendsCoinbase):\n     tx(_tx), nFee(_nFee), nTime(_nTime), entryPriority(_entryPriority), entryHeight(_entryHeight),\n-    hadNoDependencies(poolHasNoInputsOf), inChainInputValue(_inChainInputValue)\n+    hadNoDependencies(poolHasNoInputsOf), inChainInputValue(_inChainInputValue),\n+    spendsCoinbase(_spendsCoinbase)\n {\n     nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n     nModSize = tx.CalculateModifiedSize(nTxSize);\n@@ -488,7 +490,7 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n         const CTransaction& tx = it->GetTx();\n         if (!IsFinalTx(tx, nMemPoolHeight, GetAdjustedTime())) {\n             transactionsToRemove.push_back(tx);\n-        } else {\n+        } else if (it->GetSpendsCoinbase()) {\n             BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n                 indexed_transaction_set::const_iterator it2 = mapTx.find(txin.prevout.hash);\n                 if (it2 != mapTx.end())"
      },
      {
        "sha": "4c35f4ca0842846cdd0c5ed8f2c3e29847957809",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6",
        "patch": "@@ -67,6 +67,7 @@ class CTxMemPoolEntry\n     unsigned int entryHeight; //! Chain height when entering the mempool\n     bool hadNoDependencies; //! Not dependent on any other txs when it entered the mempool\n     CAmount inChainInputValue; //! Sum of all txin values that are already in blockchain\n+    bool spendsCoinbase; //! keep track of transactions that spend a coinbase\n \n     // Information about descendants of this transaction that are in the\n     // mempool; if we remove this transaction we must remove all of these\n@@ -80,7 +81,7 @@ class CTxMemPoolEntry\n public:\n     CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n                     int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n-                    bool poolHasNoInputsOf, CAmount _inChainInputValue);\n+                    bool poolHasNoInputsOf, CAmount _inChainInputValue, bool spendsCoinbase);\n     CTxMemPoolEntry(const CTxMemPoolEntry& other);\n \n     const CTransaction& GetTx() const { return this->tx; }\n@@ -109,6 +110,8 @@ class CTxMemPoolEntry\n     uint64_t GetCountWithDescendants() const { return nCountWithDescendants; }\n     uint64_t GetSizeWithDescendants() const { return nSizeWithDescendants; }\n     CAmount GetFeesWithDescendants() const { return nFeesWithDescendants; }\n+\n+    bool GetSpendsCoinbase() const { return spendsCoinbase; }\n };\n \n // Helpers for modifying CTxMemPool::mapTx, which is a boost multi_index."
      }
    ]
  },
  {
    "sha": "b7fa4aa3876b56694b27af0beef367be9e0733fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiN2ZhNGFhMzg3NmI1NjY5NGIyN2FmMGJlZWYzNjdiZTllMDczM2Zk",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-11-12T20:54:17Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-11-30T18:12:55Z"
      },
      "message": "Don't call removeForReorg if DisconnectTip fails",
      "tree": {
        "sha": "56e7b048f164a214890ab78282a35d23e3888360",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/56e7b048f164a214890ab78282a35d23e3888360"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7fa4aa3876b56694b27af0beef367be9e0733fd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7fa4aa3876b56694b27af0beef367be9e0733fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b7fa4aa3876b56694b27af0beef367be9e0733fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7fa4aa3876b56694b27af0beef367be9e0733fd/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 1,
      "deletions": 7
    },
    "files": [
      {
        "sha": "feb526e09c3939c895430d6a40aa635c10f693a9",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7fa4aa3876b56694b27af0beef367be9e0733fd/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7fa4aa3876b56694b27af0beef367be9e0733fd/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b7fa4aa3876b56694b27af0beef367be9e0733fd",
        "patch": "@@ -2521,11 +2521,8 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n     // Disconnect active blocks which are no longer in the best chain.\n     bool fBlocksDisconnected = false;\n     while (chainActive.Tip() && chainActive.Tip() != pindexFork) {\n-        if (!DisconnectTip(state, chainparams.GetConsensus())) {\n-            // Probably an AbortNode() error, but try to keep mempool consistent anyway\n-            mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1);\n+        if (!DisconnectTip(state, chainparams.GetConsensus()))\n             return false;\n-        }\n         fBlocksDisconnected = true;\n     }\n \n@@ -2559,9 +2556,6 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n                     break;\n                 } else {\n                     // A system error occurred (disk space, database error, ...).\n-                    // Probably gonna shut down ASAP, but try to keep mempool consistent anyway\n-                    if (fBlocksDisconnected)\n-                        mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1);\n                     return false;\n                 }\n             } else {"
      }
    ]
  },
  {
    "sha": "2d8860e820e2ca73000f558eb9686206bec2652a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZDg4NjBlODIwZTJjYTczMDAwZjU1OGViOTY4NjIwNmJlYzI2NTJh",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-11-23T21:06:12Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-11-30T19:35:17Z"
      },
      "message": "Fix removeForReorg to use MedianTimePast",
      "tree": {
        "sha": "b30da37c98806571d0edfce8fe5731b1fe7131dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b30da37c98806571d0edfce8fe5731b1fe7131dc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d8860e820e2ca73000f558eb9686206bec2652a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d8860e820e2ca73000f558eb9686206bec2652a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2d8860e820e2ca73000f558eb9686206bec2652a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d8860e820e2ca73000f558eb9686206bec2652a/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b7fa4aa3876b56694b27af0beef367be9e0733fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7fa4aa3876b56694b27af0beef367be9e0733fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b7fa4aa3876b56694b27af0beef367be9e0733fd"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "0b758f391ae81eb8398986ee387ae134f66b4d0f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d8860e820e2ca73000f558eb9686206bec2652a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d8860e820e2ca73000f558eb9686206bec2652a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=2d8860e820e2ca73000f558eb9686206bec2652a",
        "patch": "@@ -2570,7 +2570,7 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n     }\n \n     if (fBlocksDisconnected) {\n-        mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1);\n+        mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n         mempool.TrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n     }\n     mempool.check(pcoinsTip);\n@@ -2681,7 +2681,7 @@ bool InvalidateBlock(CValidationState& state, const Consensus::Params& consensus\n         // ActivateBestChain considers blocks already in chainActive\n         // unconditionally valid already, so force disconnect away from it.\n         if (!DisconnectTip(state, consensusParams)) {\n-            mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1);\n+            mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n             return false;\n         }\n     }\n@@ -2699,7 +2699,7 @@ bool InvalidateBlock(CValidationState& state, const Consensus::Params& consensus\n     }\n \n     InvalidChainFound(pindex);\n-    mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1);\n+    mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n     return true;\n }\n "
      },
      {
        "sha": "9d2513948112a04b57d2ee8ef83ebba5e309ceda",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d8860e820e2ca73000f558eb9686206bec2652a/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d8860e820e2ca73000f558eb9686206bec2652a/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=2d8860e820e2ca73000f558eb9686206bec2652a",
        "patch": "@@ -481,14 +481,14 @@ void CTxMemPool::remove(const CTransaction &origTx, std::list<CTransaction>& rem\n     }\n }\n \n-void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight)\n+void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags)\n {\n     // Remove transactions spending a coinbase which are now immature and no-longer-final transactions\n     LOCK(cs);\n     list<CTransaction> transactionsToRemove;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         const CTransaction& tx = it->GetTx();\n-        if (!IsFinalTx(tx, nMemPoolHeight, GetAdjustedTime())) {\n+        if (!CheckFinalTx(tx, flags)) {\n             transactionsToRemove.push_back(tx);\n         } else if (it->GetSpendsCoinbase()) {\n             BOOST_FOREACH(const CTxIn& txin, tx.vin) {"
      },
      {
        "sha": "c4ea51557c2aefc22ad3a19bc093cbc8808a0c37",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d8860e820e2ca73000f558eb9686206bec2652a/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d8860e820e2ca73000f558eb9686206bec2652a/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=2d8860e820e2ca73000f558eb9686206bec2652a",
        "patch": "@@ -379,7 +379,7 @@ class CTxMemPool\n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, setEntries &setAncestors, bool fCurrentEstimate = true);\n \n     void remove(const CTransaction &tx, std::list<CTransaction>& removed, bool fRecursive = false);\n-    void removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight);\n+    void removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags);\n     void removeConflicts(const CTransaction &tx, std::list<CTransaction>& removed);\n     void removeForBlock(const std::vector<CTransaction>& vtx, unsigned int nBlockHeight,\n                         std::list<CTransaction>& conflicts, bool fCurrentEstimate = true);"
      }
    ]
  },
  {
    "sha": "438ee59839ad49bf629452279478462c987b7137",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MzhlZTU5ODM5YWQ0OWJmNjI5NDUyMjc5NDc4NDYyYzk4N2I3MTM3",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-30T20:05:56Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-30T20:25:28Z"
      },
      "message": "Merge pull request #7044\n\nd52fbf0 Added additional config option for multiple RPC users. (Gregory Sanders)",
      "tree": {
        "sha": "d5b311693784348db81dcef98b145c60d6bd2be4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d5b311693784348db81dcef98b145c60d6bd2be4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/438ee59839ad49bf629452279478462c987b7137",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCAAGBQJWXLC4AAoJEOq1r5TZ6avnD3AQAKBlBKTrR3S6X0xkAbTjp1x9\nofzvVMH+jC25xcQz6st/V4DofAaSE0MwZW2DQ7kT2/ax62wV3hOU0S96yUGIAOsL\nRO2FUFErjlkmdL0eN8taESV6kMLRHKO5pKUO7KHFATg9qK2LF+MCNKEQKNk4TC8K\nqWkzO8UkJHSUYlZGPLU7eZnRsWNZf02Sl/VOBh5ZGEBcqR5RE0wuzlcKlIgIyHlU\nv+gCkzhPqc7501nM1TXsuYoq4LAh05szutEhT7dvsQPKFjVmkQLW5yZjE58GErQI\n8OFORJDyEicI2KBYx6ufRRk1EkAzeHGugRP1k5RFXDgd6c2NewhFo1YKmf9v/Fmu\nmqK8/VolXS6gGyy9nYebtygEoGSaT0ybBjiiy4gdAv3pfDzJipRRy1wJbekRuHLG\nOJtmaIgR0TUtyaKV79KH3voZ2/mqLafp3R1IVcOpJdKtJxgWHrfCeEsWgCoF2ErC\nQGPQSHOz91PnEfZdq1jPFH8jbcQ/z7PL6WfS0gqLmYTG168668M8GwzAAXRlXwXG\nZ+hVThfr5/2Pu1MHhv7qnID4ZLXFOVYDtFJsxooyJZiuLaVXf8VNqPq70BnTBZlz\nv2eYqM/tr2985KrLfBQ4QXTgnAUgaW2FfnCsPUyta7NZW8n0ZtQGYvvh1iP6sLm7\nSpcGeYdmFOIx9V7RNiCe\n=gMaf\n-----END PGP SIGNATURE-----",
        "payload": "tree d5b311693784348db81dcef98b145c60d6bd2be4\nparent 34e02e0147188a7e364489db23128a05505e7a4c\nparent d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0\nauthor Gregory Maxwell <greg@xiph.org> 1448913956 -0800\ncommitter Gregory Maxwell <greg@xiph.org> 1448915128 -0800\n\nMerge pull request #7044\n\nd52fbf0 Added additional config option for multiple RPC users. (Gregory Sanders)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/438ee59839ad49bf629452279478462c987b7137",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/438ee59839ad49bf629452279478462c987b7137",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/438ee59839ad49bf629452279478462c987b7137/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "34e02e0147188a7e364489db23128a05505e7a4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34e02e0147188a7e364489db23128a05505e7a4c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34e02e0147188a7e364489db23128a05505e7a4c"
      },
      {
        "sha": "d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0"
      }
    ],
    "stats": {
      "total": 232,
      "additions": 231,
      "deletions": 1
    },
    "files": [
      {
        "sha": "73205dc217fc0293d66913e8afd749b578bd497e",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/438ee59839ad49bf629452279478462c987b7137/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/438ee59839ad49bf629452279478462c987b7137/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=438ee59839ad49bf629452279478462c987b7137",
        "patch": "@@ -79,6 +79,7 @@\n     'mempool_spendcoinbase.py',\n     'mempool_coinbase_spends.py',\n     'httpbasics.py',\n+    'multi_rpc.py',\n     'zapwallettxes.py',\n     'proxy_test.py',\n     'merkle_blocks.py',"
      },
      {
        "sha": "62071d426e3781ba787016f722ee7b6fd99250fd",
        "filename": "qa/rpc-tests/multi_rpc.py",
        "status": "added",
        "additions": 122,
        "deletions": 0,
        "changes": 122,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/438ee59839ad49bf629452279478462c987b7137/qa/rpc-tests/multi_rpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/438ee59839ad49bf629452279478462c987b7137/qa/rpc-tests/multi_rpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/multi_rpc.py?ref=438ee59839ad49bf629452279478462c987b7137",
        "patch": "@@ -0,0 +1,122 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test mulitple rpc user config option rpcauth\n+#\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import base64\n+\n+try:\n+    import http.client as httplib\n+except ImportError:\n+    import httplib\n+try:\n+    import urllib.parse as urlparse\n+except ImportError:\n+    import urlparse\n+\n+class HTTPBasicsTest (BitcoinTestFramework):\n+    def setup_nodes(self):\n+        return start_nodes(4, self.options.tmpdir)\n+\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain(self.options.tmpdir)\n+        #Append rpcauth to bitcoin.conf before initialization\n+        rpcauth = \"rpcauth=rt:93648e835a54c573682c2eb19f882535$7681e9c5b74bdd85e78166031d2058e1069b3ed7ed967c93fc63abba06f31144\"\n+        rpcauth2 = \"rpcauth=rt2:f8607b1a88861fac29dfccf9b52ff9f$ff36a0c23c8c62b4846112e50fa888416e94c17bfd4c42f88fd8f55ec6a3137e\"\n+        with open(os.path.join(self.options.tmpdir+\"/node0\", \"bitcoin.conf\"), 'a') as f:\n+            f.write(rpcauth+\"\\n\")\n+            f.write(rpcauth2+\"\\n\")\n+\n+    def run_test(self):\n+\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urlparse.urlparse(self.nodes[0].url)\n+\n+        #Old authpair\n+        authpair = url.username + ':' + url.password\n+\n+        #New authpair generated via contrib/rpcuser tool\n+        rpcauth = \"rpcauth=rt:93648e835a54c573682c2eb19f882535$7681e9c5b74bdd85e78166031d2058e1069b3ed7ed967c93fc63abba06f31144\"\n+        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n+\n+        #Second authpair with different username\n+        rpcauth2 = \"rpcauth=rt2:f8607b1a88861fac29dfccf9b52ff9f$ff36a0c23c8c62b4846112e50fa888416e94c17bfd4c42f88fd8f55ec6a3137e\"\n+        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n+        authpairnew = \"rt:\"+password\n+\n+        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair)}\n+\n+        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn.connect()\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        resp = conn.getresponse()\n+        assert_equal(resp.status==401, False)\n+        conn.close()\n+        \n+        #Use new authpair to confirm both work\n+        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpairnew)}\n+\n+        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn.connect()\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        resp = conn.getresponse()\n+        assert_equal(resp.status==401, False)\n+        conn.close()\n+\n+        #Wrong login name with rt's password\n+        authpairnew = \"rtwrong:\"+password\n+        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpairnew)}\n+\n+        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn.connect()\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        resp = conn.getresponse()\n+        assert_equal(resp.status==401, True)\n+        conn.close()\n+\n+        #Wrong password for rt\n+        authpairnew = \"rt:\"+password+\"wrong\"\n+        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpairnew)}\n+\n+        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn.connect()\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        resp = conn.getresponse()\n+        assert_equal(resp.status==401, True)\n+        conn.close()\n+\n+        #Correct for rt2\n+        authpairnew = \"rt2:\"+password2\n+        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpairnew)}\n+\n+        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn.connect()\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        resp = conn.getresponse()\n+        assert_equal(resp.status==401, False)\n+        conn.close()\n+\n+        #Wrong password for rt2\n+        authpairnew = \"rt2:\"+password2+\"wrong\"\n+        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpairnew)}\n+\n+        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn.connect()\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        resp = conn.getresponse()\n+        assert_equal(resp.status==401, True)\n+        conn.close()\n+\n+\n+\n+if __name__ == '__main__':\n+    HTTPBasicsTest ().main ()"
      },
      {
        "sha": "7c2c909a421c49cac93cfe80ad17cc72a1f6adc1",
        "filename": "share/rpcuser/README.md",
        "status": "added",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/438ee59839ad49bf629452279478462c987b7137/share/rpcuser/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/438ee59839ad49bf629452279478462c987b7137/share/rpcuser/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/rpcuser/README.md?ref=438ee59839ad49bf629452279478462c987b7137",
        "patch": "@@ -0,0 +1,11 @@\n+RPC Tools\n+---------------------\n+\n+### [RPCUser](/share/rpcuser) ###\n+\n+Create an RPC user login credential.\n+\n+Usage:\n+\n+./rpcuser.py <username>\n+"
      },
      {
        "sha": "9fd176908b788db7af316051664cf7d1d42f4f3e",
        "filename": "share/rpcuser/rpcuser.py",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/438ee59839ad49bf629452279478462c987b7137/share/rpcuser/rpcuser.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/438ee59839ad49bf629452279478462c987b7137/share/rpcuser/rpcuser.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/rpcuser/rpcuser.py?ref=438ee59839ad49bf629452279478462c987b7137",
        "patch": "@@ -0,0 +1,41 @@\n+#!/usr/bin/env python2 \n+# Copyright (c) 2015 The Bitcoin Core developers \n+# Distributed under the MIT software license, see the accompanying \n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import hashlib\n+import sys\n+import os\n+from random import SystemRandom\n+import base64\n+import hmac\n+\n+if len(sys.argv) < 2:\n+    sys.stderr.write('Please include username as an argument.\\n')\n+    sys.exit(0)\n+\n+username = sys.argv[1]\n+\n+#This uses os.urandom() underneath\n+cryptogen = SystemRandom()\n+\n+#Create 16 byte hex salt\n+salt_sequence = [cryptogen.randrange(256) for i in range(16)]\n+hexseq = list(map(hex, salt_sequence))\n+salt = \"\".join([x[2:] for x in hexseq])\n+\n+#Create 32 byte b64 password\n+password = base64.urlsafe_b64encode(os.urandom(32))\n+\n+digestmod = hashlib.sha256\n+\n+if sys.version_info.major >= 3:\n+    password = password.decode('utf-8')\n+    digestmod = 'SHA256'\n+ \n+m = hmac.new(bytearray(salt, 'utf-8'), bytearray(password, 'utf-8'), digestmod)\n+result = m.hexdigest()\n+\n+print(\"String to be appended to bitcoin.conf:\")\n+print(\"rpcauth=\"+username+\":\"+salt+\"$\"+result)\n+print(\"Your password:\\n\"+password)"
      },
      {
        "sha": "2920aa26f75ffe8dc7bec546956cc4371d2ca7de",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 1,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/438ee59839ad49bf629452279478462c987b7137/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/438ee59839ad49bf629452279478462c987b7137/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=438ee59839ad49bf629452279478462c987b7137",
        "patch": "@@ -10,8 +10,12 @@\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n #include \"ui_interface.h\"\n+#include \"crypto/hmac_sha256.h\"\n+#include <stdio.h>\n+#include \"utilstrencodings.h\"\n \n #include <boost/algorithm/string.hpp> // boost::trim\n+#include <boost/foreach.hpp> //BOOST_FOREACH\n \n /** Simple one-shot callback timer to be used by the RPC mechanism to e.g.\n  * re-lock the wellet.\n@@ -72,6 +76,50 @@ static void JSONErrorReply(HTTPRequest* req, const UniValue& objError, const Uni\n     req->WriteReply(nStatus, strReply);\n }\n \n+//This function checks username and password against -rpcauth\n+//entries from config file.\n+static bool multiUserAuthorized(std::string strUserPass)\n+{    \n+    if (strUserPass.find(\":\") == std::string::npos) {\n+        return false;\n+    }\n+    std::string strUser = strUserPass.substr(0, strUserPass.find(\":\"));\n+    std::string strPass = strUserPass.substr(strUserPass.find(\":\") + 1);\n+\n+    if (mapMultiArgs.count(\"-rpcauth\") > 0) {\n+        //Search for multi-user login/pass \"rpcauth\" from config\n+        BOOST_FOREACH(std::string strRPCAuth, mapMultiArgs[\"-rpcauth\"])\n+        {\n+            std::vector<std::string> vFields;\n+            boost::split(vFields, strRPCAuth, boost::is_any_of(\":$\"));\n+            if (vFields.size() != 3) {\n+                //Incorrect formatting in config file\n+                continue;\n+            }\n+\n+            std::string strName = vFields[0];\n+            if (!TimingResistantEqual(strName, strUser)) {\n+                continue;\n+            }\n+\n+            std::string strSalt = vFields[1];\n+            std::string strHash = vFields[2];\n+\n+            unsigned int KEY_SIZE = 32;\n+            unsigned char *out = new unsigned char[KEY_SIZE]; \n+            \n+            CHMAC_SHA256(reinterpret_cast<const unsigned char*>(strSalt.c_str()), strSalt.size()).Write(reinterpret_cast<const unsigned char*>(strPass.c_str()), strPass.size()).Finalize(out);\n+            std::vector<unsigned char> hexvec(out, out+KEY_SIZE);\n+            std::string strHashFromPass = HexStr(hexvec);\n+\n+            if (TimingResistantEqual(strHashFromPass, strHash)) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n+\n static bool RPCAuthorized(const std::string& strAuth)\n {\n     if (strRPCUserColonPass.empty()) // Belt-and-suspenders measure if InitRPCAuthentication was not called\n@@ -81,7 +129,12 @@ static bool RPCAuthorized(const std::string& strAuth)\n     std::string strUserPass64 = strAuth.substr(6);\n     boost::trim(strUserPass64);\n     std::string strUserPass = DecodeBase64(strUserPass64);\n-    return TimingResistantEqual(strUserPass, strRPCUserColonPass);\n+    \n+    //Check if authorized under single-user field\n+    if (TimingResistantEqual(strUserPass, strRPCUserColonPass)) {\n+        return true;\n+    }\n+    return multiUserAuthorized(strUserPass);\n }\n \n static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n@@ -157,6 +210,7 @@ static bool InitRPCAuthentication()\n             return false;\n         }\n     } else {\n+        LogPrintf(\"Config options rpcuser and rpcpassword will soon be deprecated. Locally-run instances may remove rpcuser to use cookie-based auth, or may be replaced with rpcauth. Please see share/rpcuser for rpcauth auth generation.\");\n         strRPCUserColonPass = mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"];\n     }\n     return true;"
      },
      {
        "sha": "3fd60abfc2087e4f2a91098672c7dab8a37c76ca",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/438ee59839ad49bf629452279478462c987b7137/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/438ee59839ad49bf629452279478462c987b7137/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=438ee59839ad49bf629452279478462c987b7137",
        "patch": "@@ -491,6 +491,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-rpcbind=<addr>\", _(\"Bind to given address to listen for JSON-RPC connections. Use [host]:port notation for IPv6. This option can be specified multiple times (default: bind to all interfaces)\"));\n     strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n+    strUsage += HelpMessageOpt(\"-rpcauth=<userpw>\", _(\"Username and hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcuser. This option can be specified multiple times\"));\n     strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), 8332, 18332));\n     strUsage += HelpMessageOpt(\"-rpcallowip=<ip>\", _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\"));\n     strUsage += HelpMessageOpt(\"-rpcthreads=<n>\", strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), DEFAULT_HTTP_THREADS));"
      }
    ]
  },
  {
    "sha": "50947ef23f46428ed8a260e3d4ff5ac0402ed727",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDk0N2VmMjNmNDY0MjhlZDhhMjYwZTNkNGZmNWFjMDQwMmVkNzI3",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-10-28T20:14:29Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-30T21:16:24Z"
      },
      "message": "Change default block priority size to 0\n\nMake RPC tests have a default block priority size of 50000 (the old default) so we can still use free transactions in RPC tests.  When priority is eliminated, we will have to make a different change if we want to continue allowing free txs.",
      "tree": {
        "sha": "bbad2d77753233a5987cbc986ed665f0858c13f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bbad2d77753233a5987cbc986ed665f0858c13f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/50947ef23f46428ed8a260e3d4ff5ac0402ed727",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50947ef23f46428ed8a260e3d4ff5ac0402ed727",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/50947ef23f46428ed8a260e3d4ff5ac0402ed727",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50947ef23f46428ed8a260e3d4ff5ac0402ed727/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "34e02e0147188a7e364489db23128a05505e7a4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34e02e0147188a7e364489db23128a05505e7a4c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34e02e0147188a7e364489db23128a05505e7a4c"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "23c55ad698e0b1f359508da8cd2b8bb64c32eb56",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50947ef23f46428ed8a260e3d4ff5ac0402ed727/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50947ef23f46428ed8a260e3d4ff5ac0402ed727/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=50947ef23f46428ed8a260e3d4ff5ac0402ed727",
        "patch": "@@ -217,7 +217,8 @@ def start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=\n     datadir = os.path.join(dirname, \"node\"+str(i))\n     if binary is None:\n         binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n-    args = [ binary, \"-datadir=\"+datadir, \"-keypool=1\", \"-discover=0\", \"-rest\" ]\n+    # RPC tests still depend on free transactions\n+    args = [ binary, \"-datadir=\"+datadir, \"-keypool=1\", \"-discover=0\", \"-rest\", \"-blockprioritysize=50000\" ]\n     if extra_args is not None: args.extend(extra_args)\n     bitcoind_processes[i] = subprocess.Popen(args)\n     devnull = open(os.devnull, \"w\")"
      },
      {
        "sha": "31655f2f3a2f6b0d5fee15f31c1a5f04c66349df",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50947ef23f46428ed8a260e3d4ff5ac0402ed727/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50947ef23f46428ed8a260e3d4ff5ac0402ed727/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=50947ef23f46428ed8a260e3d4ff5ac0402ed727",
        "patch": "@@ -18,7 +18,7 @@ class CCoinsViewCache;\n static const unsigned int DEFAULT_BLOCK_MAX_SIZE = 750000;\n static const unsigned int DEFAULT_BLOCK_MIN_SIZE = 0;\n /** Default for -blockprioritysize, maximum space for zero/low-fee transactions **/\n-static const unsigned int DEFAULT_BLOCK_PRIORITY_SIZE = 50000;\n+static const unsigned int DEFAULT_BLOCK_PRIORITY_SIZE = 0;\n /** The maximum size for transactions we're willing to relay/mine */\n static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n /** Maximum number of signature check operations in an IsStandard() P2SH script */"
      }
    ]
  },
  {
    "sha": "c143c499c85bbe99e3036de21eeffb73d61cd265",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMTQzYzQ5OWM4NWJiZTk5ZTMwMzZkZTIxZWVmZmI3M2Q2MWNkMjY1",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-12-01T06:56:47Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-12-01T06:58:43Z"
      },
      "message": "Merge pull request #7072\n\n996d311 [RPC] Add transaction size to JSON output (Nick)",
      "tree": {
        "sha": "705f433611001e6a03a19972086243af034d4ffa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/705f433611001e6a03a19972086243af034d4ffa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c143c499c85bbe99e3036de21eeffb73d61cd265",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCAAGBQJWXUUjAAoJEOq1r5TZ6avnk0cP/2y+Rtd7CtF/xWFBnkI9ptMS\n4KzFg2A01H5tIFIFHQNzt9f29yLTNez/fIRbOQr0dLurT6+V1nSAnLDMmTFfpAc9\nG7shhzcL3zoYPiwJMeHgXetdEg/gLCNihigprjo6pKDM2mEUsnNdcUweKTY3iHNR\nHx1T/UYLRfMqQ26liYLYd0k0mEAQblw8zsntlNhWTmkcLrvuREAyYm4JAOoug5Hl\nvQZeW6QThjhm5jkmxRmfI8MTvU7yjGvt5ywvFJL7umCFayz7DC9ZUw/Npu58ykzk\nVgT+PutVDryCYUbGkaqPjvoKYiKXi9xUAXJr3ewBDgnl5haHJPaLSiejBauzhW0s\nM+1Dp39nLSubCqr6RvkFnlc0IA2LpeZMw62fNV6u7kIPE+vt1FtSLbkU3UP2Xh9G\nx/7DxpRHUW0UNwZVVBWm8DokQYkElD74UiRf3Q1I/YDh08q2fKC52AXzauFQlh88\nQFsJ1ZGopnFzXG55f+OnEvXArVGlWEj2CERMvUfkrF+F22L1+oPFt10cuEp2/9pk\nJlJWPedrsEXHCOgGZCMMJUBUmzeN3Yh3RP+5QMak4mtKnPNsT5a0h2T3Pil4mg/i\njPj2lQC6Ab85pNRUDxqhbAwZhXmY+D77x/gPJRU+dVm6Z0yra3O8cwnkS5trzPlb\nH64pa+zcdLtSpcMV0T3M\n=4zIZ\n-----END PGP SIGNATURE-----",
        "payload": "tree 705f433611001e6a03a19972086243af034d4ffa\nparent 438ee59839ad49bf629452279478462c987b7137\nparent 996d3117c7b00093afbeaf1ec9174475fbd9df2e\nauthor Gregory Maxwell <greg@xiph.org> 1448953007 -0800\ncommitter Gregory Maxwell <greg@xiph.org> 1448953123 -0800\n\nMerge pull request #7072\n\n996d311 [RPC] Add transaction size to JSON output (Nick)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c143c499c85bbe99e3036de21eeffb73d61cd265",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c143c499c85bbe99e3036de21eeffb73d61cd265",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c143c499c85bbe99e3036de21eeffb73d61cd265/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "438ee59839ad49bf629452279478462c987b7137",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/438ee59839ad49bf629452279478462c987b7137",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/438ee59839ad49bf629452279478462c987b7137"
      },
      {
        "sha": "996d3117c7b00093afbeaf1ec9174475fbd9df2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/996d3117c7b00093afbeaf1ec9174475fbd9df2e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/996d3117c7b00093afbeaf1ec9174475fbd9df2e"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1f2d77aef0fa25d831e7f11856ac28ece95c69f3",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c143c499c85bbe99e3036de21eeffb73d61cd265/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c143c499c85bbe99e3036de21eeffb73d61cd265/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=c143c499c85bbe99e3036de21eeffb73d61cd265",
        "patch": "@@ -62,6 +62,7 @@ void ScriptPubKeyToJSON(const CScript& scriptPubKey, UniValue& out, bool fInclud\n void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n {\n     entry.push_back(Pair(\"txid\", tx.GetHash().GetHex()));\n+    entry.push_back(Pair(\"size\", (int)::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION)));\n     entry.push_back(Pair(\"version\", tx.nVersion));\n     entry.push_back(Pair(\"locktime\", (int64_t)tx.nLockTime));\n     UniValue vin(UniValue::VARR);\n@@ -133,6 +134,7 @@ UniValue getrawtransaction(const UniValue& params, bool fHelp)\n             \"{\\n\"\n             \"  \\\"hex\\\" : \\\"data\\\",       (string) The serialized, hex-encoded data for 'txid'\\n\"\n             \"  \\\"txid\\\" : \\\"id\\\",        (string) The transaction id (same as provided)\\n\"\n+            \"  \\\"size\\\" : n,             (numeric) The transaction size\\n\"\n             \"  \\\"version\\\" : n,          (numeric) The version\\n\"\n             \"  \\\"locktime\\\" : ttt,       (numeric) The lock time\\n\"\n             \"  \\\"vin\\\" : [               (array of json objects)\\n\"\n@@ -429,6 +431,7 @@ UniValue decoderawtransaction(const UniValue& params, bool fHelp)\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"txid\\\" : \\\"id\\\",        (string) The transaction id\\n\"\n+            \"  \\\"size\\\" : n,             (numeric) The transaction size\\n\"\n             \"  \\\"version\\\" : n,          (numeric) The version\\n\"\n             \"  \\\"locktime\\\" : ttt,       (numeric) The lock time\\n\"\n             \"  \\\"vin\\\" : [               (array of json objects)\\n\""
      },
      {
        "sha": "ce22975005b1bb14b9b7e0fd433398681fc64f35",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c143c499c85bbe99e3036de21eeffb73d61cd265/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c143c499c85bbe99e3036de21eeffb73d61cd265/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=c143c499c85bbe99e3036de21eeffb73d61cd265",
        "patch": "@@ -72,6 +72,7 @@ BOOST_AUTO_TEST_CASE(rpc_rawparams)\n     BOOST_CHECK_THROW(CallRPC(\"decoderawtransaction DEADBEEF\"), runtime_error);\n     string rawtx = \"0100000001a15d57094aa7a21a28cb20b59aab8fc7d1149a3bdbcddba9c622e4f5f6a99ece010000006c493046022100f93bb0e7d8db7bd46e40132d1f8242026e045f03a0efe71bbb8e3f475e970d790221009337cd7f1f929f00cc6ff01f03729b069a7c21b59b1736ddfee5db5946c5da8c0121033b9b137ee87d5a812d6f506efdd37f0affa7ffc310711c06c7f3e097c9447c52ffffffff0100e1f505000000001976a9140389035a9225b3839e2bbf32d826a1e222031fd888ac00000000\";\n     BOOST_CHECK_NO_THROW(r = CallRPC(string(\"decoderawtransaction \")+rawtx));\n+    BOOST_CHECK_EQUAL(find_value(r.get_obj(), \"size\").get_int(), 193);\n     BOOST_CHECK_EQUAL(find_value(r.get_obj(), \"version\").get_int(), 1);\n     BOOST_CHECK_EQUAL(find_value(r.get_obj(), \"locktime\").get_int(), 0);\n     BOOST_CHECK_THROW(r = CallRPC(string(\"decoderawtransaction \")+rawtx+\" extra\"), runtime_error);"
      }
    ]
  },
  {
    "sha": "1b5118bfa0d94dbc0f3d7803c3e68626b0a694ee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjUxMThiZmEwZDk0ZGJjMGYzZDc4MDNjM2U2ODYyNmIwYTY5NGVl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-01T07:56:43Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-01T08:02:33Z"
      },
      "message": "Merge pull request #7079\n\nebb25f4 Limit setAskFor and retire requested entries only when a getdata returns. (Gregory Maxwell)\n5029698 prevent peer flooding request queue for an inv (kazcw)",
      "tree": {
        "sha": "7115cda554e234eb5fea42a68f1c71a6a4e4bfe3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7115cda554e234eb5fea42a68f1c71a6a4e4bfe3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b5118bfa0d94dbc0f3d7803c3e68626b0a694ee",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWXVQZAAoJEHSBCwEjRsmm0/wH/jmx96VkUSVgYU94fUHPj+Pl\nf6rrkkxmcYw7KikzhRHNPKhmm97cz9p1x7ZcsPKOHrTpqQCxP711oGdCB0DiGz0D\ntRmc4e3w5ApWreQVt5nnAe3escrHj/ct4Ln/xxkmThkRbv8QmjnGPAPXBnW1EwoG\n8fYmAFBY2aCH/T8kozND8OQFkR7NegxtEmtbwCb5g09Y9OQwoS0Yq2o9cNNebhfP\nWh/pVZO3BKjVpJc1mbqFkEkjN5rqIh7Oq0E0geyStokIQcFdtpFCdKwbdvSBbIX4\nd7wzwKG9bPeZLpD1hXY/SgNPlgNygiPxcQ8/ukVpgWBvdSoTU4iTzUBVQUnOgxI=\n=EYPR\n-----END PGP SIGNATURE-----",
        "payload": "tree 7115cda554e234eb5fea42a68f1c71a6a4e4bfe3\nparent c143c499c85bbe99e3036de21eeffb73d61cd265\nparent ebb25f4c23adbcb55796c402bafd6064a136f16f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448956603 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448956953 +0100\n\nMerge pull request #7079\n\nebb25f4 Limit setAskFor and retire requested entries only when a getdata returns. (Gregory Maxwell)\n5029698 prevent peer flooding request queue for an inv (kazcw)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b5118bfa0d94dbc0f3d7803c3e68626b0a694ee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b5118bfa0d94dbc0f3d7803c3e68626b0a694ee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b5118bfa0d94dbc0f3d7803c3e68626b0a694ee/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c143c499c85bbe99e3036de21eeffb73d61cd265",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c143c499c85bbe99e3036de21eeffb73d61cd265",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c143c499c85bbe99e3036de21eeffb73d61cd265"
      },
      {
        "sha": "ebb25f4c23adbcb55796c402bafd6064a136f16f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebb25f4c23adbcb55796c402bafd6064a136f16f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ebb25f4c23adbcb55796c402bafd6064a136f16f"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 12,
      "deletions": 1
    },
    "files": [
      {
        "sha": "eea53a58de4c26fba1403df7d7664f69e405ef7f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b5118bfa0d94dbc0f3d7803c3e68626b0a694ee/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b5118bfa0d94dbc0f3d7803c3e68626b0a694ee/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1b5118bfa0d94dbc0f3d7803c3e68626b0a694ee",
        "patch": "@@ -4675,6 +4675,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         bool fMissingInputs = false;\n         CValidationState state;\n \n+        pfrom->setAskFor.erase(inv.hash);\n         mapAlreadyAskedFor.erase(inv);\n \n         if (!AlreadyHave(inv) && AcceptToMemoryPool(mempool, state, tx, true, &fMissingInputs))\n@@ -5623,6 +5624,9 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                     pto->PushMessage(\"getdata\", vGetData);\n                     vGetData.clear();\n                 }\n+            } else {\n+                //If we're not going to ask, don't expect a response.\n+                pto->setAskFor.erase(inv.hash);\n             }\n             pto->mapAskFor.erase(pto->mapAskFor.begin());\n         }"
      },
      {
        "sha": "e5659efc01d7f6790747fbfbf56703aaa469af2f",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b5118bfa0d94dbc0f3d7803c3e68626b0a694ee/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b5118bfa0d94dbc0f3d7803c3e68626b0a694ee/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=1b5118bfa0d94dbc0f3d7803c3e68626b0a694ee",
        "patch": "@@ -2407,8 +2407,12 @@ CNode::~CNode()\n \n void CNode::AskFor(const CInv& inv)\n {\n-    if (mapAskFor.size() > MAPASKFOR_MAX_SZ)\n+    if (mapAskFor.size() > MAPASKFOR_MAX_SZ || setAskFor.size() > SETASKFOR_MAX_SZ)\n         return;\n+    // a peer may not have multiple non-responded queue positions for a single inv item\n+    if (!setAskFor.insert(inv.hash).second)\n+        return;\n+\n     // We're using mapAskFor as a priority queue,\n     // the key is the earliest time the request can be sent\n     int64_t nRequestTime;"
      },
      {
        "sha": "a5a5c770d6445b92f0208e833cdbadc6eae2650e",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b5118bfa0d94dbc0f3d7803c3e68626b0a694ee/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b5118bfa0d94dbc0f3d7803c3e68626b0a694ee/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=1b5118bfa0d94dbc0f3d7803c3e68626b0a694ee",
        "patch": "@@ -58,6 +58,8 @@ static const bool DEFAULT_UPNP = false;\n #endif\n /** The maximum number of entries in mapAskFor */\n static const size_t MAPASKFOR_MAX_SZ = MAX_INV_SZ;\n+/** The maximum number of entries in setAskFor (larger due to getdata latency)*/\n+static const size_t SETASKFOR_MAX_SZ = 2 * MAX_INV_SZ;\n /** The maximum number of peer connections to maintain. */\n static const unsigned int DEFAULT_MAX_PEER_CONNECTIONS = 125;\n /** The default for -maxuploadtarget. 0 = Unlimited */\n@@ -389,6 +391,7 @@ class CNode\n     mruset<CInv> setInventoryKnown;\n     std::vector<CInv> vInventoryToSend;\n     CCriticalSection cs_inventory;\n+    std::set<uint256> setAskFor;\n     std::multimap<int64_t, CInv> mapAskFor;\n     // Used for headers announcements - unfiltered blocks to relay\n     // Also protected by cs_inventory"
      }
    ]
  },
  {
    "sha": "30c2d8c635c41149b7184ea8471121c53042444c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMGMyZDhjNjM1YzQxMTQ5YjcxODRlYTg0NzExMjFjNTMwNDI0NDRj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-01T08:05:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-01T08:22:08Z"
      },
      "message": "Merge pull request #7105\n\n9ac63d6 Keep track of explicit wallet conflicts instead of using mempool (Pieter Wuille)",
      "tree": {
        "sha": "90541c9459dc7e0be79684e190ca9e614f1a7c51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/90541c9459dc7e0be79684e190ca9e614f1a7c51"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30c2d8c635c41149b7184ea8471121c53042444c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWXViwAAoJEHSBCwEjRsmm6X8H/i9yI6lVJhQn+31e4nEXqhuD\nV2KHX7syAWJ7vwjXY3BwBg3T53rvni1UwQ7cI64cl2hC+12ehG/fxHoD4mdLE7Dn\npW0OpYP40gaI63Kwu//uiBV947Nz22NvGsvLX1ldS5UD0BlpMQHnINPEuuZzVEIt\nbcRXQqjc5CxOUdxtgABl7FgN1NZmEcLa7Msw5kEvo51mAg1slWLfhl7LeigZ/qFN\nnEm0V/4ok2zyHPXnzSQc5FB/R4DBqop7m327oszQXetjEPgzafWA2chRCAWjZAL2\nyhqTAqN8QGtCMp9ldBgtZQAT5yT+ug1Cgiv+F3p0MYSCdgnaDvcmou8t6n6uTmg=\n=feJo\n-----END PGP SIGNATURE-----",
        "payload": "tree 90541c9459dc7e0be79684e190ca9e614f1a7c51\nparent 1b5118bfa0d94dbc0f3d7803c3e68626b0a694ee\nparent 9ac63d6d3056600c1b784da0e6b98f679fa98b6e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448957159 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448958128 +0100\n\nMerge pull request #7105\n\n9ac63d6 Keep track of explicit wallet conflicts instead of using mempool (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30c2d8c635c41149b7184ea8471121c53042444c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/30c2d8c635c41149b7184ea8471121c53042444c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30c2d8c635c41149b7184ea8471121c53042444c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b5118bfa0d94dbc0f3d7803c3e68626b0a694ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b5118bfa0d94dbc0f3d7803c3e68626b0a694ee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b5118bfa0d94dbc0f3d7803c3e68626b0a694ee"
      },
      {
        "sha": "9ac63d6d3056600c1b784da0e6b98f679fa98b6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ac63d6d3056600c1b784da0e6b98f679fa98b6e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ac63d6d3056600c1b784da0e6b98f679fa98b6e"
      }
    ],
    "stats": {
      "total": 150,
      "additions": 124,
      "deletions": 26
    },
    "files": [
      {
        "sha": "96c830d177eef79358e093935ebed61e48223d98",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30c2d8c635c41149b7184ea8471121c53042444c/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30c2d8c635c41149b7184ea8471121c53042444c/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=30c2d8c635c41149b7184ea8471121c53042444c",
        "patch": "@@ -215,6 +215,24 @@ of just announcing the hash. In a reorganization, all new headers are sent,\n instead of just the new tip. This can often prevent an extra roundtrip before\n the actual block is downloaded.\n \n+Negative confirmations and conflict detection\n+---------------------------------------------\n+\n+The wallet will now report a negative number for confirmations that indicates\n+how deep in the block chain the conflict is found. For example, if a transaction\n+A has 5 confirmations and spends the same input as a wallet transaction B, B\n+will be reported as having -5 confirmations. If another wallet transaction C\n+spends an output from B, it will also be reported as having -5 confirmations.\n+To detect conflicts with historical transactions in the chain a one-time\n+`-rescan` may be needed.\n+\n+Unlike earlier versions, unconfirmed but non-conflicting transactions will never\n+get a negative confirmation count. They are not treated as spendable unless\n+they're coming from ourself (change) and accepted into our local mempool,\n+however. The new \"trusted\" field in the `listtransactions` RPC output\n+indicates whether outputs of an unconfirmed transaction are considered\n+spendable.\n+\n 0.12.0 Change log\n =================\n "
      },
      {
        "sha": "b1f603a1924452836fd4ff30ba25c438d894a729",
        "filename": "qa/rpc-tests/txn_clone.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30c2d8c635c41149b7184ea8471121c53042444c/qa/rpc-tests/txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30c2d8c635c41149b7184ea8471121c53042444c/qa/rpc-tests/txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_clone.py?ref=30c2d8c635c41149b7184ea8471121c53042444c",
        "patch": "@@ -136,7 +136,7 @@ def run_test(self):\n         tx2 = self.nodes[0].gettransaction(txid2)\n         \n         # Verify expected confirmations\n-        assert_equal(tx1[\"confirmations\"], -1)\n+        assert_equal(tx1[\"confirmations\"], -2)\n         assert_equal(tx1_clone[\"confirmations\"], 2)\n         assert_equal(tx2[\"confirmations\"], 1)\n "
      },
      {
        "sha": "d4665b3d4217cff5ec138c72a46f4920e0324ba8",
        "filename": "qa/rpc-tests/txn_doublespend.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30c2d8c635c41149b7184ea8471121c53042444c/qa/rpc-tests/txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30c2d8c635c41149b7184ea8471121c53042444c/qa/rpc-tests/txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_doublespend.py?ref=30c2d8c635c41149b7184ea8471121c53042444c",
        "patch": "@@ -99,22 +99,23 @@ def run_test(self):\n         # Now give doublespend and its parents to miner:\n         self.nodes[2].sendrawtransaction(fund_foo_tx[\"hex\"])\n         self.nodes[2].sendrawtransaction(fund_bar_tx[\"hex\"])\n-        self.nodes[2].sendrawtransaction(doublespend[\"hex\"])\n+        doublespend_txid = self.nodes[2].sendrawtransaction(doublespend[\"hex\"])\n         # ... mine a block...\n         self.nodes[2].generate(1)\n \n         # Reconnect the split network, and sync chain:\n         connect_nodes(self.nodes[1], 2)\n         self.nodes[2].generate(1)  # Mine another block to make sure we sync\n         sync_blocks(self.nodes)\n+        assert_equal(self.nodes[0].gettransaction(doublespend_txid)[\"confirmations\"], 2)\n \n         # Re-fetch transaction info:\n         tx1 = self.nodes[0].gettransaction(txid1)\n         tx2 = self.nodes[0].gettransaction(txid2)\n-        \n+\n         # Both transactions should be conflicted\n-        assert_equal(tx1[\"confirmations\"], -1)\n-        assert_equal(tx2[\"confirmations\"], -1)\n+        assert_equal(tx1[\"confirmations\"], -2)\n+        assert_equal(tx2[\"confirmations\"], -2)\n \n         # Node0's total balance should be starting balance, plus 100BTC for \n         # two more matured blocks, minus 1240 for the double-spend, plus fees (which are"
      },
      {
        "sha": "a4ab2248a518c22cb0b113dfaa1950c191487e40",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30c2d8c635c41149b7184ea8471121c53042444c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30c2d8c635c41149b7184ea8471121c53042444c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=30c2d8c635c41149b7184ea8471121c53042444c",
        "patch": "@@ -65,6 +65,8 @@ void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n         entry.push_back(Pair(\"blockhash\", wtx.hashBlock.GetHex()));\n         entry.push_back(Pair(\"blockindex\", wtx.nIndex));\n         entry.push_back(Pair(\"blocktime\", mapBlockIndex[wtx.hashBlock]->GetBlockTime()));\n+    } else {\n+        entry.push_back(Pair(\"trusted\", wtx.IsTrusted()));\n     }\n     uint256 hash = wtx.GetHash();\n     entry.push_back(Pair(\"txid\", hash.GetHex()));\n@@ -1421,7 +1423,9 @@ UniValue listtransactions(const UniValue& params, bool fHelp)\n             \"    \\\"fee\\\": x.xxx,             (numeric) The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the \\n\"\n             \"                                         'send' category of transactions.\\n\"\n             \"    \\\"confirmations\\\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and \\n\"\n-            \"                                         'receive' category of transactions.\\n\"\n+            \"                                         'receive' category of transactions. Negative confirmations indicate the\\n\"\n+            \"                                         transation conflicts with the block chain\\n\"\n+            \"    \\\"trusted\\\": xxx            (bool) Whether we consider the outputs of this unconfirmed transaction safe to spend.\\n\"\n             \"    \\\"blockhash\\\": \\\"hashvalue\\\", (string) The block hash containing the transaction. Available for 'send' and 'receive'\\n\"\n             \"                                          category of transactions.\\n\"\n             \"    \\\"blockindex\\\": n,          (numeric) The block index containing the transaction. Available for 'send' and 'receive'\\n\""
      },
      {
        "sha": "78c9357842eb163a7c1f70cb513d2ac6e128a3cc",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 83,
        "deletions": 14,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30c2d8c635c41149b7184ea8471121c53042444c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30c2d8c635c41149b7184ea8471121c53042444c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=30c2d8c635c41149b7184ea8471121c53042444c",
        "patch": "@@ -608,6 +608,14 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletD\n         wtx.BindWallet(this);\n         wtxOrdered.insert(make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n         AddToSpends(hash);\n+        BOOST_FOREACH(const CTxIn& txin, wtx.vin) {\n+            if (mapWallet.count(txin.prevout.hash)) {\n+                CWalletTx& prevtx = mapWallet[txin.prevout.hash];\n+                if (prevtx.nIndex == -1 && !prevtx.hashBlock.IsNull()) {\n+                    MarkConflicted(prevtx.hashBlock, wtx.GetHash());\n+                }\n+            }\n+        }\n     }\n     else\n     {\n@@ -727,6 +735,20 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pbl\n {\n     {\n         AssertLockHeld(cs_wallet);\n+\n+        if (pblock) {\n+            BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+                std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range = mapTxSpends.equal_range(txin.prevout);\n+                while (range.first != range.second) {\n+                    if (range.first->second != tx.GetHash()) {\n+                        LogPrintf(\"Transaction %s (in block %s) conflicts with wallet transaction %s (both spend %s:%i)\\n\", tx.GetHash().ToString(), pblock->GetHash().ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);\n+                        MarkConflicted(pblock->GetHash(), range.first->second);\n+                    }\n+                    range.first++;\n+                }\n+            }\n+        }\n+\n         bool fExisted = mapWallet.count(tx.GetHash()) != 0;\n         if (fExisted && !fUpdate) return false;\n         if (fExisted || IsMine(tx) || IsFromMe(tx))\n@@ -747,9 +769,57 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pbl\n     return false;\n }\n \n+void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n+{\n+    LOCK2(cs_main, cs_wallet);\n+\n+    CBlockIndex* pindex;\n+    assert(mapBlockIndex.count(hashBlock));\n+    pindex = mapBlockIndex[hashBlock];\n+    int conflictconfirms = 0;\n+    if (chainActive.Contains(pindex)) {\n+        conflictconfirms = -(chainActive.Height() - pindex->nHeight + 1);\n+    }\n+    assert(conflictconfirms < 0);\n+\n+    // Do not flush the wallet here for performance reasons\n+    CWalletDB walletdb(strWalletFile, \"r+\", false);\n+\n+    std::deque<uint256> todo;\n+    std::set<uint256> done;\n+\n+    todo.push_back(hashTx);\n+\n+    while (!todo.empty()) {\n+        uint256 now = todo.front();\n+        todo.pop_front();\n+        done.insert(now);\n+        assert(mapWallet.count(now));\n+        CWalletTx& wtx = mapWallet[now];\n+        int currentconfirm = wtx.GetDepthInMainChain();\n+        if (conflictconfirms < currentconfirm) {\n+            // Block is 'more conflicted' than current confirm; update.\n+            // Mark transaction as conflicted with this block.\n+            wtx.nIndex = -1;\n+            wtx.hashBlock = hashBlock;\n+            wtx.MarkDirty();\n+            wtx.WriteToDisk(&walletdb);\n+            // Iterate over all its outputs, and mark transactions in the wallet that spend them conflicted too\n+            TxSpends::const_iterator iter = mapTxSpends.lower_bound(COutPoint(now, 0));\n+            while (iter != mapTxSpends.end() && iter->first.hash == now) {\n+                 if (!done.count(iter->second)) {\n+                     todo.push_back(iter->second);\n+                 }\n+                 iter++;\n+            }\n+        }\n+    }\n+}\n+\n void CWallet::SyncTransaction(const CTransaction& tx, const CBlock* pblock)\n {\n     LOCK2(cs_main, cs_wallet);\n+\n     if (!AddToWalletIfInvolvingMe(tx, pblock, true))\n         return; // Not one of ours\n \n@@ -1089,7 +1159,7 @@ void CWallet::ReacceptWalletTransactions()\n \n         int nDepth = wtx.GetDepthInMainChain();\n \n-        if (!wtx.IsCoinBase() && nDepth < 0) {\n+        if (!wtx.IsCoinBase() && nDepth == 0) {\n             mapSorted.insert(std::make_pair(wtx.nOrderPos, &wtx));\n         }\n     }\n@@ -1303,6 +1373,14 @@ bool CWalletTx::IsTrusted() const\n     if (!bSpendZeroConfChange || !IsFromMe(ISMINE_ALL)) // using wtx's cached debit\n         return false;\n \n+    // Don't trust unconfirmed transactions from us unless they are in the mempool.\n+    {\n+        LOCK(mempool.cs);\n+        if (!mempool.exists(GetHash())) {\n+            return false;\n+        }\n+    }\n+\n     // Trusted if all inputs are from us and are in the mempool:\n     BOOST_FOREACH(const CTxIn& txin, vin)\n     {\n@@ -1879,6 +1957,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                     //a chance at a free transaction.\n                     //But mempool inputs might still be in the mempool, so their age stays 0\n                     int age = pcoin.first->GetDepthInMainChain();\n+                    assert(age >= 0);\n                     if (age != 0)\n                         age += 1;\n                     dPriority += (double)nCredit * age;\n@@ -2814,9 +2893,9 @@ int CMerkleTx::SetMerkleBranch(const CBlock& block)\n     return chainActive.Height() - pindex->nHeight + 1;\n }\n \n-int CMerkleTx::GetDepthInMainChainINTERNAL(const CBlockIndex* &pindexRet) const\n+int CMerkleTx::GetDepthInMainChain(const CBlockIndex* &pindexRet) const\n {\n-    if (hashBlock.IsNull() || nIndex == -1)\n+    if (hashBlock.IsNull())\n         return 0;\n     AssertLockHeld(cs_main);\n \n@@ -2829,17 +2908,7 @@ int CMerkleTx::GetDepthInMainChainINTERNAL(const CBlockIndex* &pindexRet) const\n         return 0;\n \n     pindexRet = pindex;\n-    return chainActive.Height() - pindex->nHeight + 1;\n-}\n-\n-int CMerkleTx::GetDepthInMainChain(const CBlockIndex* &pindexRet) const\n-{\n-    AssertLockHeld(cs_main);\n-    int nResult = GetDepthInMainChainINTERNAL(pindexRet);\n-    if (nResult == 0 && !mempool.exists(GetHash()))\n-        return -1; // Not in chain, not in mempool\n-\n-    return nResult;\n+    return ((nIndex == -1) ? (-1) : 1) * (chainActive.Height() - pindex->nHeight + 1);\n }\n \n int CMerkleTx::GetBlocksToMaturity() const"
      },
      {
        "sha": "bc6e40ab98760e8b66b8dd63670dd644a2da3cb3",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 12,
        "deletions": 6,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30c2d8c635c41149b7184ea8471121c53042444c/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30c2d8c635c41149b7184ea8471121c53042444c/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=30c2d8c635c41149b7184ea8471121c53042444c",
        "patch": "@@ -156,11 +156,14 @@ struct COutputEntry\n /** A transaction with a merkle branch linking it to the block chain. */\n class CMerkleTx : public CTransaction\n {\n-private:\n-    int GetDepthInMainChainINTERNAL(const CBlockIndex* &pindexRet) const;\n-\n public:\n     uint256 hashBlock;\n+\n+    /* An nIndex == -1 means that hashBlock (in nonzero) refers to the earliest\n+     * block in the chain we know this or any in-wallet dependency conflicts\n+     * with. Older clients interpret nIndex == -1 as unconfirmed for backward\n+     * compatibility.\n+     */\n     int nIndex;\n \n     CMerkleTx()\n@@ -193,16 +196,15 @@ class CMerkleTx : public CTransaction\n \n     int SetMerkleBranch(const CBlock& block);\n \n-\n     /**\n      * Return depth of transaction in blockchain:\n-     * -1  : not in blockchain, and not in memory pool (conflicted transaction)\n+     * <0  : conflicts with a transaction this deep in the blockchain\n      *  0  : in memory pool, waiting to be included in a block\n      * >=1 : this many blocks deep in the main chain\n      */\n     int GetDepthInMainChain(const CBlockIndex* &pindexRet) const;\n     int GetDepthInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n-    bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChainINTERNAL(pindexRet) > 0; }\n+    bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet) > 0; }\n     int GetBlocksToMaturity() const;\n     bool AcceptToMemoryPool(bool fLimitFree=true, bool fRejectAbsurdFee=true);\n };\n@@ -481,6 +483,10 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void AddToSpends(const COutPoint& outpoint, const uint256& wtxid);\n     void AddToSpends(const uint256& wtxid);\n \n+    /* Mark a transaction (and its in-wallet descendants) as conflicting with a particular block. */\n+    void MarkConflicted(const uint256& hashBlock, const uint256& hashTx);\n+\n+\n     void SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator>);\n \n public:"
      }
    ]
  },
  {
    "sha": "eb3d1b348773bb6df96020eeb9a7a144aa04ce71",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjNkMWIzNDg3NzNiYjZkZjk2MDIwZWViOWE3YTE0NGFhMDRjZTcx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-01T08:56:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-01T08:56:09Z"
      },
      "message": "Merge pull request #7135\n\nfa3a38a [qa] pull-tester: Cleanup (run keypool, tidy stdout) (MarcoFalke)",
      "tree": {
        "sha": "23afb5e9dc236f5c92fd8c1758a49925b9d83e92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/23afb5e9dc236f5c92fd8c1758a49925b9d83e92"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb3d1b348773bb6df96020eeb9a7a144aa04ce71",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWXWCpAAoJEHSBCwEjRsmmAuQIAJ93vY5rilkMUNmeK+qddG0B\nWdIDnA2twh3zeUFpF3M6DwLh0pRYqlTEb8W9tKxjGz1V3Y63JZQ9B1dtCPOKbLJB\nkVUNdFx3lHtM+bke+BQ8RoVUjmmWaoTqTRcurscU+6QIouvv6NjXEvCjMQSelmin\nbRwWBBCwwwRYB3Qj8e2gAtouwcUZlaEyeUBZKT2D5BesJxL+QNjH4rj0rVt2VNeG\ntv9oweR4Lg8/1oSl1NwaEW2lA0Oki1E2TEGuqLVhjhS6KlubhtSl/BFBFt61WdpF\nwerdCCUiPQAMnO6QGanEb9UXHucOeQHZhdf+oxejL1RnHCXtw5GxMr31LFW3ZA4=\n=d92p\n-----END PGP SIGNATURE-----",
        "payload": "tree 23afb5e9dc236f5c92fd8c1758a49925b9d83e92\nparent 30c2d8c635c41149b7184ea8471121c53042444c\nparent fa3a38a7f269f7a33c6176975f171b93025f05d7\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448960160 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448960169 +0100\n\nMerge pull request #7135\n\nfa3a38a [qa] pull-tester: Cleanup (run keypool, tidy stdout) (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb3d1b348773bb6df96020eeb9a7a144aa04ce71",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb3d1b348773bb6df96020eeb9a7a144aa04ce71",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb3d1b348773bb6df96020eeb9a7a144aa04ce71/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "30c2d8c635c41149b7184ea8471121c53042444c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30c2d8c635c41149b7184ea8471121c53042444c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/30c2d8c635c41149b7184ea8471121c53042444c"
      },
      {
        "sha": "fa3a38a7f269f7a33c6176975f171b93025f05d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3a38a7f269f7a33c6176975f171b93025f05d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa3a38a7f269f7a33c6176975f171b93025f05d7"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 14,
      "deletions": 5
    },
    "files": [
      {
        "sha": "598567e5a37f96b19a224a71c2fded43d955f987",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 14,
        "deletions": 5,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb3d1b348773bb6df96020eeb9a7a144aa04ce71/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb3d1b348773bb6df96020eeb9a7a144aa04ce71/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=eb3d1b348773bb6df96020eeb9a7a144aa04ce71",
        "patch": "@@ -22,6 +22,7 @@\n \"\"\"\n \n import os\n+import time\n import shutil\n import sys\n import subprocess\n@@ -47,6 +48,10 @@\n passOn = \"\"\n p = re.compile(\"^--\")\n \n+bold = (\"\",\"\")\n+if (os.name == 'posix'):\n+    bold = ('\\033[0m', '\\033[1m')\n+\n for arg in sys.argv[1:]:\n     if arg == '--coverage':\n         ENABLE_COVERAGE = 1\n@@ -93,6 +98,7 @@\n     'blockchain.py',\n     'disablewallet.py',\n     'sendheaders.py',\n+    'keypool.py',\n ]\n testScriptsExt = [\n     'bip65-cltv.py',\n@@ -106,7 +112,6 @@\n     'pruning.py',\n     'forknotify.py',\n     'invalidateblock.py',\n-    'keypool.py',\n #    'rpcbind_test.py', #temporary, bug in libevent, see #6655\n     'smartfees.py',\n     'maxblocksinflight.py',\n@@ -127,7 +132,7 @@ def runtests():\n \n     if ENABLE_COVERAGE:\n         coverage = RPCCoverage()\n-        print(\"Initializing coverage directory at %s\" % coverage.dir)\n+        print(\"Initializing coverage directory at %s\\n\" % coverage.dir)\n \n     if(ENABLE_WALLET == 1 and ENABLE_UTILS == 1 and ENABLE_BITCOIND == 1):\n         rpcTestDir = buildDir + '/qa/rpc-tests/'\n@@ -142,10 +147,12 @@ def runtests():\n                     or run_extended\n                     or testScripts[i] in opts\n                     or re.sub(\".py$\", \"\", testScripts[i]) in opts ):\n-                print(\"Running testscript \" + testScripts[i] + \"...\")\n \n+                print(\"Running testscript %s%s%s ...\" % (bold[1], testScripts[i], bold[0]))\n+                time0 = time.time()\n                 subprocess.check_call(\n                     rpcTestDir + testScripts[i] + flags, shell=True)\n+                print(\"Duration: %s s\\n\" % (int(time.time() - time0)))\n \n                 # exit if help is called so we print just one set of\n                 # instructions\n@@ -157,12 +164,14 @@ def runtests():\n         for i in range(len(testScriptsExt)):\n             if (run_extended or testScriptsExt[i] in opts\n                     or re.sub(\".py$\", \"\", testScriptsExt[i]) in opts):\n+\n                 print(\n                     \"Running 2nd level testscript \"\n-                    + testScriptsExt[i] + \"...\")\n-\n+                    + \"%s%s%s ...\" % (bold[1], testScriptsExt[i], bold[0]))\n+                time0 = time.time()\n                 subprocess.check_call(\n                     rpcTestDir + testScriptsExt[i] + flags, shell=True)\n+                print(\"Duration: %s s\\n\" % (int(time.time() - time0)))\n \n         if coverage:\n             coverage.report_rpc_coverage()"
      }
    ]
  },
  {
    "sha": "9490bd71bdb41669de7d3c2669241cabf307bb9b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NDkwYmQ3MWJkYjQxNjY5ZGU3ZDNjMjY2OTI0MWNhYmYzMDdiYjli",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-01T08:58:54Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-01T08:59:03Z"
      },
      "message": "Merge pull request #7096\n\nff723da [Qt] improve minimum absolute fee option - Only display the minimum absolute fee control if CoinControl is enabled (Jonas Schnelli)\n31b508a [Qt] make use of the nMinimumTotalFee (absolute) in coincontrols fee calculation (Jonas Schnelli)\n80462dd [Qt] use ASYMP_UTF8 (\u2248) whenever we show a fee that is not absolute (Jonas Schnelli)\necc7c82 Move fPayAtLeastCustomFee function to CC (Pieter Wuille)",
      "tree": {
        "sha": "65ecaf53ec8c47681f29274c4b28e89768b7b488",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/65ecaf53ec8c47681f29274c4b28e89768b7b488"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9490bd71bdb41669de7d3c2669241cabf307bb9b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWXWFXAAoJEHSBCwEjRsmm5mgH/jZ7rOmvRdw6IKtgwd2yw7YL\n2QGqfY2SKmn5hquwc/xap+RTDGEumzeXl80UWPdqNwQtHKqqw5hdENUTM6v+GCls\n2gaHQrWYiUmwv/9dknM8cjhAztYRRwzpHXuY1+xLSZdprCRjRcjh8c4FByiiSxvp\niCbtn4OUk6rdJhf8Q5E1YTg5b6+ae2uAawg2SO2/M29qjpcUlLs2Dop4ZvkwvIlm\nzFMfgmfoVr30Gc/OBpl4ibBUX8VMVEqHLpY73LPY+FIYpZ8LsT20ICgwh2loTB0d\nZ7IUmMtos2+SpfjRnjYpAqX0FCx7mR5L2L+4thVccCKBrjug8uQTDX65ob6HDSo=\n=pKjp\n-----END PGP SIGNATURE-----",
        "payload": "tree 65ecaf53ec8c47681f29274c4b28e89768b7b488\nparent eb3d1b348773bb6df96020eeb9a7a144aa04ce71\nparent ff723da6f67d6d597c0118162fb709e962b1e2fe\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448960334 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448960343 +0100\n\nMerge pull request #7096\n\nff723da [Qt] improve minimum absolute fee option - Only display the minimum absolute fee control if CoinControl is enabled (Jonas Schnelli)\n31b508a [Qt] make use of the nMinimumTotalFee (absolute) in coincontrols fee calculation (Jonas Schnelli)\n80462dd [Qt] use ASYMP_UTF8 (\u2248) whenever we show a fee that is not absolute (Jonas Schnelli)\necc7c82 Move fPayAtLeastCustomFee function to CC (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9490bd71bdb41669de7d3c2669241cabf307bb9b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9490bd71bdb41669de7d3c2669241cabf307bb9b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9490bd71bdb41669de7d3c2669241cabf307bb9b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb3d1b348773bb6df96020eeb9a7a144aa04ce71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb3d1b348773bb6df96020eeb9a7a144aa04ce71",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb3d1b348773bb6df96020eeb9a7a144aa04ce71"
      },
      {
        "sha": "ff723da6f67d6d597c0118162fb709e962b1e2fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff723da6f67d6d597c0118162fb709e962b1e2fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff723da6f67d6d597c0118162fb709e962b1e2fe"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 32,
      "deletions": 11
    },
    "files": [
      {
        "sha": "3945644ce8d623895609baee13191b3fb0a77a46",
        "filename": "src/coincontrol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9490bd71bdb41669de7d3c2669241cabf307bb9b/src/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9490bd71bdb41669de7d3c2669241cabf307bb9b/src/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coincontrol.h?ref=9490bd71bdb41669de7d3c2669241cabf307bb9b",
        "patch": "@@ -16,6 +16,8 @@ class CCoinControl\n     bool fAllowOtherInputs;\n     //! Includes watch only addresses which match the ISMINE_WATCH_SOLVABLE criteria\n     bool fAllowWatchOnly;\n+    //! Minimum absolute fee (not per kilobyte)\n+    CAmount nMinimumTotalFee;\n \n     CCoinControl()\n     {\n@@ -28,6 +30,7 @@ class CCoinControl\n         fAllowOtherInputs = false;\n         fAllowWatchOnly = false;\n         setSelected.clear();\n+        nMinimumTotalFee = 0;\n     }\n \n     bool HasSelected() const"
      },
      {
        "sha": "0f42243047193c74dc3d534958e2bee2116fc1d9",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9490bd71bdb41669de7d3c2669241cabf307bb9b/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9490bd71bdb41669de7d3c2669241cabf307bb9b/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=9490bd71bdb41669de7d3c2669241cabf307bb9b",
        "patch": "@@ -549,6 +549,9 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n \n         // Fee\n         nPayFee = CWallet::GetMinimumFee(nBytes, nTxConfirmTarget, mempool);\n+        if (nPayFee > 0 && coinControl->nMinimumTotalFee > nPayFee)\n+            nPayFee = coinControl->nMinimumTotalFee;\n+\n \n         // Allow free? (require at least hard-coded threshold and default to that if no estimate)\n         double dPriorityNeeded = std::max(mempoolEstimatePriority, AllowFreeThreshold());\n@@ -619,7 +622,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     l6->setText(sPriorityLabel);                                             // Priority\n     l7->setText(fDust ? tr(\"yes\") : tr(\"no\"));                               // Dust\n     l8->setText(BitcoinUnits::formatWithUnit(nDisplayUnit, nChange));        // Change\n-    if (nPayFee > 0 && !(payTxFee.GetFeePerK() > 0 && fPayAtLeastCustomFee && nBytes < 1000))\n+    if (nPayFee > 0 && (coinControl->nMinimumTotalFee < nPayFee))\n     {\n         l3->setText(ASYMP_UTF8 + l3->text());\n         l4->setText(ASYMP_UTF8 + l4->text());"
      },
      {
        "sha": "ec4e598bf9157580af7b9705f9b43ba246b48f5c",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 5,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9490bd71bdb41669de7d3c2669241cabf307bb9b/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9490bd71bdb41669de7d3c2669241cabf307bb9b/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=9490bd71bdb41669de7d3c2669241cabf307bb9b",
        "patch": "@@ -585,7 +585,7 @@ void SendCoinsDialog::updateFeeSectionControls()\n     ui->checkBoxMinimumFee      ->setEnabled(ui->radioCustomFee->isChecked());\n     ui->labelMinFeeWarning      ->setEnabled(ui->radioCustomFee->isChecked());\n     ui->radioCustomPerKilobyte  ->setEnabled(ui->radioCustomFee->isChecked() && !ui->checkBoxMinimumFee->isChecked());\n-    ui->radioCustomAtLeast      ->setEnabled(ui->radioCustomFee->isChecked() && !ui->checkBoxMinimumFee->isChecked());\n+    ui->radioCustomAtLeast      ->setEnabled(ui->radioCustomFee->isChecked() && !ui->checkBoxMinimumFee->isChecked() && CoinControlDialog::coinControl->HasSelected());\n     ui->customFee               ->setEnabled(ui->radioCustomFee->isChecked() && !ui->checkBoxMinimumFee->isChecked());\n }\n \n@@ -600,7 +600,10 @@ void SendCoinsDialog::updateGlobalFeeVariables()\n     {\n         nTxConfirmTarget = defaultConfirmTarget;\n         payTxFee = CFeeRate(ui->customFee->value());\n-        fPayAtLeastCustomFee = ui->radioCustomAtLeast->isChecked();\n+\n+        // if user has selected to set a minimum absolute fee, pass the value to coincontrol\n+        // set nMinimumTotalFee to 0 in case of user has selected that the fee is per KB\n+        CoinControlDialog::coinControl->nMinimumTotalFee = ui->radioCustomAtLeast->isChecked() ? ui->customFee->value() : 0;\n     }\n \n     fSendFreeTransactions = ui->checkBoxFreeTx->isChecked();\n@@ -707,8 +710,7 @@ void SendCoinsDialog::coinControlFeatureChanged(bool checked)\n     if (!checked && model) // coin control features disabled\n         CoinControlDialog::coinControl->SetNull();\n \n-    if (checked)\n-        coinControlUpdateLabels();\n+    coinControlUpdateLabels();\n }\n \n // Coin Control: button inputs -> show actual coin control dialog\n@@ -782,9 +784,24 @@ void SendCoinsDialog::coinControlChangeEdited(const QString& text)\n // Coin Control: update labels\n void SendCoinsDialog::coinControlUpdateLabels()\n {\n-    if (!model || !model->getOptionsModel() || !model->getOptionsModel()->getCoinControlFeatures())\n+    if (!model || !model->getOptionsModel())\n         return;\n \n+    if (model->getOptionsModel()->getCoinControlFeatures())\n+    {\n+        // enable minium absolute fee UI controls\n+        ui->radioCustomAtLeast->setVisible(true);\n+\n+        // only enable the feature if inputs are selected\n+        ui->radioCustomAtLeast->setEnabled(CoinControlDialog::coinControl->HasSelected());\n+    }\n+    else\n+    {\n+        // in case coin control is disabled (=default), hide minimum absolute fee UI controls\n+        ui->radioCustomAtLeast->setVisible(false);\n+        return;\n+    }\n+\n     // set pay amounts\n     CoinControlDialog::payAmounts.clear();\n     CoinControlDialog::fSubtractFeeFromAmount = false;"
      },
      {
        "sha": "30b9869be05d75796bb729058501e2588d553ca5",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9490bd71bdb41669de7d3c2669241cabf307bb9b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9490bd71bdb41669de7d3c2669241cabf307bb9b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9490bd71bdb41669de7d3c2669241cabf307bb9b",
        "patch": "@@ -41,7 +41,6 @@ CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n unsigned int nTxConfirmTarget = DEFAULT_TX_CONFIRM_TARGET;\n bool bSpendZeroConfChange = DEFAULT_SPEND_ZEROCONF_CHANGE;\n bool fSendFreeTransactions = DEFAULT_SEND_FREE_TRANSACTIONS;\n-bool fPayAtLeastCustomFee = false;\n \n /**\n  * Fees smaller than this (in satoshi) are considered zero fee (for transaction creation)\n@@ -2096,6 +2095,9 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 }\n \n                 CAmount nFeeNeeded = GetMinimumFee(nBytes, nTxConfirmTarget, mempool);\n+                if (coinControl && nFeeNeeded > 0 && coinControl->nMinimumTotalFee > nFeeNeeded) {\n+                    nFeeNeeded = coinControl->nMinimumTotalFee;\n+                }\n \n                 // If we made it here and we aren't even able to meet the relay fee on the next pass, give up\n                 // because we must be at the maximum allowed fee.\n@@ -2191,9 +2193,6 @@ CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarge\n {\n     // payTxFee is user-set \"I want to pay this much\"\n     CAmount nFeeNeeded = payTxFee.GetFee(nTxBytes);\n-    // user selected total at least (default=true)\n-    if (fPayAtLeastCustomFee && nFeeNeeded > 0 && nFeeNeeded < payTxFee.GetFeePerK())\n-        nFeeNeeded = payTxFee.GetFeePerK();\n     // User didn't set: use -txconfirmtarget to estimate...\n     if (nFeeNeeded == 0) {\n         int estimateFoundTarget = nConfirmTarget;"
      },
      {
        "sha": "859788893c9d9c541ed2811757115285351a92c7",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9490bd71bdb41669de7d3c2669241cabf307bb9b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9490bd71bdb41669de7d3c2669241cabf307bb9b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=9490bd71bdb41669de7d3c2669241cabf307bb9b",
        "patch": "@@ -35,7 +35,6 @@ extern CAmount maxTxFee;\n extern unsigned int nTxConfirmTarget;\n extern bool bSpendZeroConfChange;\n extern bool fSendFreeTransactions;\n-extern bool fPayAtLeastCustomFee;\n \n static const unsigned int DEFAULT_KEYPOOL_SIZE = 100;\n //! -paytxfee default"
      }
    ]
  },
  {
    "sha": "aabc897801f2513ab5bf5e8ae6e6bcffeb889e94",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYWJjODk3ODAxZjI1MTNhYjViZjVlOGFlNmU2YmNmZmViODg5ZTk0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-01T08:47:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-01T09:07:22Z"
      },
      "message": "rpc: Don't translate warning messages\n\nBut keep translating them in the GUI.\nThis - necessarily - requires duplication of a few messages.\nAlternative take on #7134, that keeps the translations from being wiped.\n\nAlso document GetWarnings() input argument.\n\nFixes #5895.",
      "tree": {
        "sha": "74e24497a9046af4ca875c9ff2cfc97cc4e75df4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/74e24497a9046af4ca875c9ff2cfc97cc4e75df4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aabc897801f2513ab5bf5e8ae6e6bcffeb889e94",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aabc897801f2513ab5bf5e8ae6e6bcffeb889e94",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aabc897801f2513ab5bf5e8ae6e6bcffeb889e94",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aabc897801f2513ab5bf5e8ae6e6bcffeb889e94/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "30c2d8c635c41149b7184ea8471121c53042444c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30c2d8c635c41149b7184ea8471121c53042444c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/30c2d8c635c41149b7184ea8471121c53042444c"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 23,
      "deletions": 10
    },
    "files": [
      {
        "sha": "ea6dd4b2d20614d80b53651bc138a13746b43c95",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 8,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aabc897801f2513ab5bf5e8ae6e6bcffeb889e94/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aabc897801f2513ab5bf5e8ae6e6bcffeb889e94/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=aabc897801f2513ab5bf5e8ae6e6bcffeb889e94",
        "patch": "@@ -3979,29 +3979,34 @@ std::string GetWarnings(const std::string& strFor)\n     int nPriority = 0;\n     string strStatusBar;\n     string strRPC;\n+    string strGUI;\n \n-    if (!CLIENT_VERSION_IS_RELEASE)\n-        strStatusBar = _(\"This is a pre-release test build - use at your own risk - do not use for mining or merchant applications\");\n+    if (!CLIENT_VERSION_IS_RELEASE) {\n+        strStatusBar = \"This is a pre-release test build - use at your own risk - do not use for mining or merchant applications\";\n+        strGUI = _(\"This is a pre-release test build - use at your own risk - do not use for mining or merchant applications\");\n+    }\n \n     if (GetBoolArg(\"-testsafemode\", DEFAULT_TESTSAFEMODE))\n-        strStatusBar = strRPC = \"testsafemode enabled\";\n+        strStatusBar = strRPC = strGUI = \"testsafemode enabled\";\n \n     // Misc warnings like out of disk space and clock is wrong\n     if (strMiscWarning != \"\")\n     {\n         nPriority = 1000;\n-        strStatusBar = strMiscWarning;\n+        strStatusBar = strGUI = strMiscWarning;\n     }\n \n     if (fLargeWorkForkFound)\n     {\n         nPriority = 2000;\n-        strStatusBar = strRPC = _(\"Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues.\");\n+        strStatusBar = strRPC = \"Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues.\";\n+        strGUI = _(\"Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues.\");\n     }\n     else if (fLargeWorkInvalidChainFound)\n     {\n         nPriority = 2000;\n-        strStatusBar = strRPC = _(\"Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade.\");\n+        strStatusBar = strRPC = \"Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade.\";\n+        strGUI = _(\"Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade.\");\n     }\n \n     // Alerts\n@@ -4013,12 +4018,14 @@ std::string GetWarnings(const std::string& strFor)\n             if (alert.AppliesToMe() && alert.nPriority > nPriority)\n             {\n                 nPriority = alert.nPriority;\n-                strStatusBar = alert.strStatusBar;\n+                strStatusBar = strGUI = alert.strStatusBar;\n             }\n         }\n     }\n \n-    if (strFor == \"statusbar\")\n+    if (strFor == \"gui\")\n+        return strGUI;\n+    else if (strFor == \"statusbar\")\n         return strStatusBar;\n     else if (strFor == \"rpc\")\n         return strRPC;"
      },
      {
        "sha": "2426e6abbf2f511802bc614e039276e7a2ced3d9",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aabc897801f2513ab5bf5e8ae6e6bcffeb889e94/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aabc897801f2513ab5bf5e8ae6e6bcffeb889e94/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=aabc897801f2513ab5bf5e8ae6e6bcffeb889e94",
        "patch": "@@ -206,7 +206,13 @@ void ThreadScriptCheck();\n void PartitionCheck(bool (*initialDownloadCheck)(), CCriticalSection& cs, const CBlockIndex *const &bestHeader, int64_t nPowTargetSpacing);\n /** Check whether we are doing an initial block download (synchronizing from disk or network) */\n bool IsInitialBlockDownload();\n-/** Format a string that describes several potential problems detected by the core */\n+/** Format a string that describes several potential problems detected by the core.\n+ * strFor can have three values:\n+ * - \"rpc\": get critical warnings, which should put the client in safe mode if non-empty\n+ * - \"statusbar\": get all warnings\n+ * - \"gui\": get all warnings, translated (where possible) for GUI\n+ * This function only returns the highest priority warning of the set selected by strFor.\n+ */\n std::string GetWarnings(const std::string& strFor);\n /** Retrieve a transaction (from memory pool, or from disk, if possible) */\n bool GetTransaction(const uint256 &hash, CTransaction &tx, const Consensus::Params& params, uint256 &hashBlock, bool fAllowSlow = false);"
      },
      {
        "sha": "a4b028f0d01848f551f7eeddabc5e372e6d5daf0",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aabc897801f2513ab5bf5e8ae6e6bcffeb889e94/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aabc897801f2513ab5bf5e8ae6e6bcffeb889e94/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=aabc897801f2513ab5bf5e8ae6e6bcffeb889e94",
        "patch": "@@ -158,7 +158,7 @@ enum BlockSource ClientModel::getBlockSource() const\n \n QString ClientModel::getStatusBarWarnings() const\n {\n-    return QString::fromStdString(GetWarnings(\"statusbar\"));\n+    return QString::fromStdString(GetWarnings(\"gui\"));\n }\n \n OptionsModel *ClientModel::getOptionsModel()"
      }
    ]
  },
  {
    "sha": "327291af02d05e09188713d882bf68ac708c1077",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMjcyOTFhZjAyZDA1ZTA5MTg4NzEzZDg4MmJmNjhhYzcwOGMxMDc3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-01T09:00:04Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-01T09:22:14Z"
      },
      "message": "Merge pull request #6914\n\n114b581 Prevector type (Pieter Wuille)",
      "tree": {
        "sha": "fd6e45cfb3d11beb185c3d1da556a075c924b165",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fd6e45cfb3d11beb185c3d1da556a075c924b165"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/327291af02d05e09188713d882bf68ac708c1077",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWXWbGAAoJEHSBCwEjRsmmHxMIAJ3B8O7xfSCGIy8O/CFkdTod\n3dfkoKxr2CUw0BmU4BddP7gpgS25ZYZeOekng0Yu+r7c77m0oF4ddgu+TBUev7NW\nfe9h33kv1LOgtmjZGyN1jhREQnaaVwm9swPoraxldoMsYsnAB5HzOIJ0pXbeG2Bh\nIVC6MQD/mcbNSzakqAC18D5ymbTU81W6/lc6ozUj9eRdSFHAHMVKrSZKTXtGb5Gp\nkxjrHFgWD+srg3WWunI0khq33KRl8MrAaACj2pkYQ1N3eaxHg+PEXmT0W3cmmaxo\n2fiKTHDfTBKbz1AfyBQTBfoC1CWTXOO5e1OpnmZy9EAC/V+iL50xC9Gu5fJxW+c=\n=1KJK\n-----END PGP SIGNATURE-----",
        "payload": "tree fd6e45cfb3d11beb185c3d1da556a075c924b165\nparent 9490bd71bdb41669de7d3c2669241cabf307bb9b\nparent 114b5812f6283f2325fc31e186b26c6d76f9551a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448960404 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448961734 +0100\n\nMerge pull request #6914\n\n114b581 Prevector type (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/327291af02d05e09188713d882bf68ac708c1077",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/327291af02d05e09188713d882bf68ac708c1077",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/327291af02d05e09188713d882bf68ac708c1077/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9490bd71bdb41669de7d3c2669241cabf307bb9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9490bd71bdb41669de7d3c2669241cabf307bb9b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9490bd71bdb41669de7d3c2669241cabf307bb9b"
      },
      {
        "sha": "114b5812f6283f2325fc31e186b26c6d76f9551a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/114b5812f6283f2325fc31e186b26c6d76f9551a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/114b5812f6283f2325fc31e186b26c6d76f9551a"
      }
    ],
    "stats": {
      "total": 942,
      "additions": 874,
      "deletions": 68
    },
    "files": [
      {
        "sha": "bb627a544897c53243ed6708eb37f95860570634",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/327291af02d05e09188713d882bf68ac708c1077/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/327291af02d05e09188713d882bf68ac708c1077/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=327291af02d05e09188713d882bf68ac708c1077",
        "patch": "@@ -124,6 +124,7 @@ BITCOIN_CORE_H = \\\n   policy/fees.h \\\n   policy/policy.h \\\n   pow.h \\\n+  prevector.h \\\n   primitives/block.h \\\n   primitives/transaction.h \\\n   protocol.h \\"
      },
      {
        "sha": "4d0894b71199dd94b92fb16088af8d31e377adb7",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/327291af02d05e09188713d882bf68ac708c1077/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/327291af02d05e09188713d882bf68ac708c1077/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=327291af02d05e09188713d882bf68ac708c1077",
        "patch": "@@ -65,6 +65,7 @@ BITCOIN_TESTS =\\\n   test/pmt_tests.cpp \\\n   test/policyestimator_tests.cpp \\\n   test/pow_tests.cpp \\\n+  test/prevector_tests.cpp \\\n   test/reverselock_tests.cpp \\\n   test/rpc_tests.cpp \\\n   test/sanity_tests.cpp \\"
      },
      {
        "sha": "450537d059c20580d6b7e512babdd9d1927cc4a5",
        "filename": "src/core_memusage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/327291af02d05e09188713d882bf68ac708c1077/src/core_memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/327291af02d05e09188713d882bf68ac708c1077/src/core_memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_memusage.h?ref=327291af02d05e09188713d882bf68ac708c1077",
        "patch": "@@ -10,7 +10,7 @@\n #include \"memusage.h\"\n \n static inline size_t RecursiveDynamicUsage(const CScript& script) {\n-    return memusage::DynamicUsage(*static_cast<const std::vector<unsigned char>*>(&script));\n+    return memusage::DynamicUsage(*static_cast<const CScriptBase*>(&script));\n }\n \n static inline size_t RecursiveDynamicUsage(const COutPoint& out) {"
      },
      {
        "sha": "daa92a00970003be2d3e214cccaedd15102125c0",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/327291af02d05e09188713d882bf68ac708c1077/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/327291af02d05e09188713d882bf68ac708c1077/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=327291af02d05e09188713d882bf68ac708c1077",
        "patch": "@@ -8,6 +8,7 @@\n \n #include \"crypto/ripemd160.h\"\n #include \"crypto/sha256.h\"\n+#include \"prevector.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n #include \"version.h\"\n@@ -118,6 +119,13 @@ inline uint160 Hash160(const std::vector<unsigned char>& vch)\n     return Hash160(vch.begin(), vch.end());\n }\n \n+/** Compute the 160-bit hash of a vector. */\n+template<unsigned int N>\n+inline uint160 Hash160(const prevector<N, unsigned char>& vch)\n+{\n+    return Hash160(vch.begin(), vch.end());\n+}\n+\n /** A writer stream (for serialization) that computes a 256-bit hash. */\n class CHashWriter\n {"
      },
      {
        "sha": "49760e64c78cd293a7720f036778a101aed042f9",
        "filename": "src/memusage.h",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/327291af02d05e09188713d882bf68ac708c1077/src/memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/327291af02d05e09188713d882bf68ac708c1077/src/memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/memusage.h?ref=327291af02d05e09188713d882bf68ac708c1077",
        "patch": "@@ -46,7 +46,9 @@ template<typename X> static inline size_t DynamicUsage(const X * const &v) { ret\n static inline size_t MallocUsage(size_t alloc)\n {\n     // Measured on libc6 2.19 on Linux.\n-    if (sizeof(void*) == 8) {\n+    if (alloc == 0) {\n+        return 0;\n+    } else if (sizeof(void*) == 8) {\n         return ((alloc + 31) >> 4) << 4;\n     } else if (sizeof(void*) == 4) {\n         return ((alloc + 15) >> 3) << 3;\n@@ -74,6 +76,12 @@ static inline size_t DynamicUsage(const std::vector<X>& v)\n     return MallocUsage(v.capacity() * sizeof(X));\n }\n \n+template<unsigned int N, typename X, typename S, typename D>\n+static inline size_t DynamicUsage(const prevector<N, X, S, D>& v)\n+{\n+    return MallocUsage(v.allocated_memory());\n+}\n+\n template<typename X, typename Y>\n static inline size_t DynamicUsage(const std::set<X, Y>& s)\n {"
      },
      {
        "sha": "3e80ef5d336458807903451403c9aec463fc90c5",
        "filename": "src/prevector.h",
        "status": "added",
        "additions": 486,
        "deletions": 0,
        "changes": 486,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/327291af02d05e09188713d882bf68ac708c1077/src/prevector.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/327291af02d05e09188713d882bf68ac708c1077/src/prevector.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/prevector.h?ref=327291af02d05e09188713d882bf68ac708c1077",
        "patch": "@@ -0,0 +1,486 @@\n+#ifndef _BITCOIN_PREVECTOR_H_\n+#define _BITCOIN_PREVECTOR_H_\n+\n+#include <stdlib.h>\n+#include <stdint.h>\n+#include <string.h>\n+\n+#include <iterator>\n+\n+#pragma pack(push, 1)\n+/** Implements a drop-in replacement for std::vector<T> which stores up to N\n+ *  elements directly (without heap allocation). The types Size and Diff are\n+ *  used to store element counts, and can be any unsigned + signed type.\n+ *\n+ *  Storage layout is either:\n+ *  - Direct allocation:\n+ *    - Size _size: the number of used elements (between 0 and N)\n+ *    - T direct[N]: an array of N elements of type T\n+ *      (only the first _size are initialized).\n+ *  - Indirect allocation:\n+ *    - Size _size: the number of used elements plus N + 1\n+ *    - Size capacity: the number of allocated elements\n+ *    - T* indirect: a pointer to an array of capacity elements of type T\n+ *      (only the first _size are initialized).\n+ *\n+ *  The data type T must be movable by memmove/realloc(). Once we switch to C++,\n+ *  move constructors can be used instead.\n+ */\n+template<unsigned int N, typename T, typename Size = uint32_t, typename Diff = int32_t>\n+class prevector {\n+public:\n+    typedef Size size_type;\n+    typedef Diff difference_type;\n+    typedef T value_type;\n+    typedef value_type& reference;\n+    typedef const value_type& const_reference;\n+    typedef value_type* pointer;\n+    typedef const value_type* const_pointer;\n+\n+    class iterator {\n+        T* ptr;\n+    public:\n+        typedef Diff difference_type;\n+        typedef T value_type;\n+        typedef T* pointer;\n+        typedef T& reference;\n+        typedef std::random_access_iterator_tag iterator_category;\n+        iterator(T* ptr_) : ptr(ptr_) {}\n+        T& operator*() const { return *ptr; }\n+        T* operator->() const { return ptr; }\n+        T& operator[](size_type pos) { return ptr[pos]; }\n+        const T& operator[](size_type pos) const { return ptr[pos]; }\n+        iterator& operator++() { ptr++; return *this; }\n+        iterator& operator--() { ptr--; return *this; }\n+        iterator operator++(int) { iterator copy(*this); ++(*this); return copy; }\n+        iterator operator--(int) { iterator copy(*this); --(*this); return copy; }\n+        difference_type friend operator-(iterator a, iterator b) { return (&(*a) - &(*b)); }\n+        iterator operator+(size_type n) { return iterator(ptr + n); }\n+        iterator& operator+=(size_type n) { ptr += n; return *this; }\n+        iterator operator-(size_type n) { return iterator(ptr - n); }\n+        iterator& operator-=(size_type n) { ptr -= n; return *this; }\n+        bool operator==(iterator x) const { return ptr == x.ptr; }\n+        bool operator!=(iterator x) const { return ptr != x.ptr; }\n+        bool operator>=(iterator x) const { return ptr >= x.ptr; }\n+        bool operator<=(iterator x) const { return ptr <= x.ptr; }\n+        bool operator>(iterator x) const { return ptr > x.ptr; }\n+        bool operator<(iterator x) const { return ptr < x.ptr; }\n+    };\n+\n+    class reverse_iterator {\n+        T* ptr;\n+    public:\n+        typedef Diff difference_type;\n+        typedef T value_type;\n+        typedef T* pointer;\n+        typedef T& reference;\n+        typedef std::bidirectional_iterator_tag iterator_category;\n+        reverse_iterator(T* ptr_) : ptr(ptr_) {}\n+        T& operator*() { return *ptr; }\n+        const T& operator*() const { return *ptr; }\n+        T* operator->() { return ptr; }\n+        const T* operator->() const { return ptr; }\n+        reverse_iterator& operator--() { ptr++; return *this; }\n+        reverse_iterator& operator++() { ptr--; return *this; }\n+        reverse_iterator operator++(int) { reverse_iterator copy(*this); ++(*this); return copy; }\n+        reverse_iterator operator--(int) { reverse_iterator copy(*this); --(*this); return copy; }\n+        bool operator==(reverse_iterator x) const { return ptr == x.ptr; }\n+        bool operator!=(reverse_iterator x) const { return ptr != x.ptr; }\n+    };\n+\n+    class const_iterator {\n+        const T* ptr;\n+    public:\n+        typedef Diff difference_type;\n+        typedef const T value_type;\n+        typedef const T* pointer;\n+        typedef const T& reference;\n+        typedef std::random_access_iterator_tag iterator_category;\n+        const_iterator(const T* ptr_) : ptr(ptr_) {}\n+        const_iterator(iterator x) : ptr(&(*x)) {}\n+        const T& operator*() const { return *ptr; }\n+        const T* operator->() const { return ptr; }\n+        const T& operator[](size_type pos) const { return ptr[pos]; }\n+        const_iterator& operator++() { ptr++; return *this; }\n+        const_iterator& operator--() { ptr--; return *this; }\n+        const_iterator operator++(int) { const_iterator copy(*this); ++(*this); return copy; }\n+        const_iterator operator--(int) { const_iterator copy(*this); --(*this); return copy; }\n+        difference_type friend operator-(const_iterator a, const_iterator b) { return (&(*a) - &(*b)); }\n+        const_iterator operator+(size_type n) { return const_iterator(ptr + n); }\n+        const_iterator& operator+=(size_type n) { ptr += n; return *this; }\n+        const_iterator operator-(size_type n) { return const_iterator(ptr - n); }\n+        const_iterator& operator-=(size_type n) { ptr -= n; return *this; }\n+        bool operator==(const_iterator x) const { return ptr == x.ptr; }\n+        bool operator!=(const_iterator x) const { return ptr != x.ptr; }\n+        bool operator>=(const_iterator x) const { return ptr >= x.ptr; }\n+        bool operator<=(const_iterator x) const { return ptr <= x.ptr; }\n+        bool operator>(const_iterator x) const { return ptr > x.ptr; }\n+        bool operator<(const_iterator x) const { return ptr < x.ptr; }\n+    };\n+\n+    class const_reverse_iterator {\n+        const T* ptr;\n+    public:\n+        typedef Diff difference_type;\n+        typedef const T value_type;\n+        typedef const T* pointer;\n+        typedef const T& reference;\n+        typedef std::bidirectional_iterator_tag iterator_category;\n+        const_reverse_iterator(T* ptr_) : ptr(ptr_) {}\n+        const_reverse_iterator(reverse_iterator x) : ptr(&(*x)) {}\n+        const T& operator*() const { return *ptr; }\n+        const T* operator->() const { return ptr; }\n+        const_reverse_iterator& operator--() { ptr++; return *this; }\n+        const_reverse_iterator& operator++() { ptr--; return *this; }\n+        const_reverse_iterator operator++(int) { const_reverse_iterator copy(*this); ++(*this); return copy; }\n+        const_reverse_iterator operator--(int) { const_reverse_iterator copy(*this); --(*this); return copy; }\n+        bool operator==(const_reverse_iterator x) const { return ptr == x.ptr; }\n+        bool operator!=(const_reverse_iterator x) const { return ptr != x.ptr; }\n+    };\n+\n+private:\n+    size_type _size;\n+    union {\n+        char direct[sizeof(T) * N];\n+        struct {\n+            size_type capacity;\n+            char* indirect;\n+        };\n+    } _union;\n+\n+    T* direct_ptr(difference_type pos) { return reinterpret_cast<T*>(_union.direct) + pos; }\n+    const T* direct_ptr(difference_type pos) const { return reinterpret_cast<const T*>(_union.direct) + pos; }\n+    T* indirect_ptr(difference_type pos) { return reinterpret_cast<T*>(_union.indirect) + pos; }\n+    const T* indirect_ptr(difference_type pos) const { return reinterpret_cast<const T*>(_union.indirect) + pos; }\n+    bool is_direct() const { return _size <= N; }\n+\n+    void change_capacity(size_type new_capacity) {\n+        if (new_capacity <= N) {\n+            if (!is_direct()) {\n+                T* indirect = indirect_ptr(0);\n+                T* src = indirect;\n+                T* dst = direct_ptr(0);\n+                memcpy(dst, src, size() * sizeof(T));\n+                free(indirect);\n+                _size -= N + 1;\n+            }\n+        } else {\n+            if (!is_direct()) {\n+                _union.indirect = static_cast<char*>(realloc(_union.indirect, ((size_t)sizeof(T)) * new_capacity));\n+                _union.capacity = new_capacity;\n+            } else {\n+                char* new_indirect = static_cast<char*>(malloc(((size_t)sizeof(T)) * new_capacity));\n+                T* src = direct_ptr(0);\n+                T* dst = reinterpret_cast<T*>(new_indirect);\n+                memcpy(dst, src, size() * sizeof(T));\n+                _union.indirect = new_indirect;\n+                _union.capacity = new_capacity;\n+                _size += N + 1;\n+            }\n+        }\n+    }\n+\n+    T* item_ptr(difference_type pos) { return is_direct() ? direct_ptr(pos) : indirect_ptr(pos); }\n+    const T* item_ptr(difference_type pos) const { return is_direct() ? direct_ptr(pos) : indirect_ptr(pos); }\n+\n+public:\n+    void assign(size_type n, const T& val) {\n+        clear();\n+        if (capacity() < n) {\n+            change_capacity(n);\n+        }\n+        while (size() < n) {\n+            _size++;\n+            new(static_cast<void*>(item_ptr(size() - 1))) T(val);\n+        }\n+    }\n+\n+    template<typename InputIterator>\n+    void assign(InputIterator first, InputIterator last) {\n+        size_type n = last - first;\n+        clear();\n+        if (capacity() < n) {\n+            change_capacity(n);\n+        }\n+        while (first != last) {\n+            _size++;\n+            new(static_cast<void*>(item_ptr(size() - 1))) T(*first);\n+            ++first;\n+        }\n+    }\n+\n+    prevector() : _size(0) {}\n+\n+    explicit prevector(size_type n) : _size(0) {\n+        resize(n);\n+    }\n+\n+    explicit prevector(size_type n, const T& val = T()) : _size(0) {\n+        change_capacity(n);\n+        while (size() < n) {\n+            _size++;\n+            new(static_cast<void*>(item_ptr(size() - 1))) T(val);\n+        }\n+    }\n+\n+    template<typename InputIterator>\n+    prevector(InputIterator first, InputIterator last) : _size(0) {\n+        size_type n = last - first;\n+        change_capacity(n);\n+        while (first != last) {\n+            _size++;\n+            new(static_cast<void*>(item_ptr(size() - 1))) T(*first);\n+            ++first;\n+        }\n+    }\n+\n+    prevector(const prevector<N, T, Size, Diff>& other) : _size(0) {\n+        change_capacity(other.size());\n+        const_iterator it = other.begin();\n+        while (it != other.end()) {\n+            _size++;\n+            new(static_cast<void*>(item_ptr(size() - 1))) T(*it);\n+            ++it;\n+        }\n+    }\n+\n+    prevector& operator=(const prevector<N, T, Size, Diff>& other) {\n+        if (&other == this) {\n+            return *this;\n+        }\n+        resize(0);\n+        change_capacity(other.size());\n+        const_iterator it = other.begin();\n+        while (it != other.end()) {\n+            _size++;\n+            new(static_cast<void*>(item_ptr(size() - 1))) T(*it);\n+            ++it;\n+        }\n+        return *this;\n+    }\n+\n+    size_type size() const {\n+        return is_direct() ? _size : _size - N - 1;\n+    }\n+\n+    bool empty() const {\n+        return size() == 0;\n+    }\n+\n+    iterator begin() { return iterator(item_ptr(0)); }\n+    const_iterator begin() const { return const_iterator(item_ptr(0)); }\n+    iterator end() { return iterator(item_ptr(size())); }\n+    const_iterator end() const { return const_iterator(item_ptr(size())); }\n+\n+    reverse_iterator rbegin() { return reverse_iterator(item_ptr(size() - 1)); }\n+    const_reverse_iterator rbegin() const { return const_reverse_iterator(item_ptr(size() - 1)); }\n+    reverse_iterator rend() { return reverse_iterator(item_ptr(-1)); }\n+    const_reverse_iterator rend() const { return const_reverse_iterator(item_ptr(-1)); }\n+\n+    size_t capacity() const {\n+        if (is_direct()) {\n+            return N;\n+        } else {\n+            return _union.capacity;\n+        }\n+    }\n+\n+    T& operator[](size_type pos) {\n+        return *item_ptr(pos);\n+    }\n+\n+    const T& operator[](size_type pos) const {\n+        return *item_ptr(pos);\n+    }\n+\n+    void resize(size_type new_size) {\n+        while (size() > new_size) {\n+            item_ptr(size() - 1)->~T();\n+            _size--;\n+        }\n+        if (new_size > capacity()) {\n+            change_capacity(new_size);\n+        }\n+        while (size() < new_size) {\n+            _size++;\n+            new(static_cast<void*>(item_ptr(size() - 1))) T();\n+        }\n+    }\n+\n+    void reserve(size_type new_capacity) {\n+        if (new_capacity > capacity()) {\n+            change_capacity(new_capacity);\n+        }\n+    }\n+\n+    void shrink_to_fit() {\n+        change_capacity(size());\n+    }\n+\n+    void clear() {\n+        resize(0);\n+    }\n+\n+    iterator insert(iterator pos, const T& value) {\n+        size_type p = pos - begin();\n+        size_type new_size = size() + 1;\n+        if (capacity() < new_size) {\n+            change_capacity(new_size + (new_size >> 1));\n+        }\n+        memmove(item_ptr(p + 1), item_ptr(p), (size() - p) * sizeof(T));\n+        _size++;\n+        new(static_cast<void*>(item_ptr(p))) T(value);\n+        return iterator(item_ptr(p));\n+    }\n+\n+    void insert(iterator pos, size_type count, const T& value) {\n+        size_type p = pos - begin();\n+        size_type new_size = size() + count;\n+        if (capacity() < new_size) {\n+            change_capacity(new_size + (new_size >> 1));\n+        }\n+        memmove(item_ptr(p + count), item_ptr(p), (size() - p) * sizeof(T));\n+        _size += count;\n+        for (size_type i = 0; i < count; i++) {\n+            new(static_cast<void*>(item_ptr(p + i))) T(value);\n+        }\n+    }\n+\n+    template<typename InputIterator>\n+    void insert(iterator pos, InputIterator first, InputIterator last) {\n+        size_type p = pos - begin();\n+        difference_type count = last - first;\n+        size_type new_size = size() + count;\n+        if (capacity() < new_size) {\n+            change_capacity(new_size + (new_size >> 1));\n+        }\n+        memmove(item_ptr(p + count), item_ptr(p), (size() - p) * sizeof(T));\n+        _size += count;\n+        while (first != last) {\n+            new(static_cast<void*>(item_ptr(p))) T(*first);\n+            ++p;\n+            ++first;\n+        }\n+    }\n+\n+    iterator erase(iterator pos) {\n+        (*pos).~T();\n+        memmove(&(*pos), &(*pos) + 1, ((char*)&(*end())) - ((char*)(1 + &(*pos))));\n+        _size--;\n+        return pos;\n+    }\n+\n+    iterator erase(iterator first, iterator last) {\n+        iterator p = first;\n+        char* endp = (char*)&(*end());\n+        while (p != last) {\n+            (*p).~T();\n+            _size--;\n+            ++p;\n+        }\n+        memmove(&(*first), &(*last), endp - ((char*)(&(*last))));\n+        return first;\n+    }\n+\n+    void push_back(const T& value) {\n+        size_type new_size = size() + 1;\n+        if (capacity() < new_size) {\n+            change_capacity(new_size + (new_size >> 1));\n+        }\n+        new(item_ptr(size())) T(value);\n+        _size++;\n+    }\n+\n+    void pop_back() {\n+        _size--;\n+    }\n+\n+    T& front() {\n+        return *item_ptr(0);\n+    }\n+\n+    const T& front() const {\n+        return *item_ptr(0);\n+    }\n+\n+    T& back() {\n+        return *item_ptr(size() - 1);\n+    }\n+\n+    const T& back() const {\n+        return *item_ptr(size() - 1);\n+    }\n+\n+    void swap(prevector<N, T, Size, Diff>& other) {\n+        if (_size & other._size & 1) {\n+            std::swap(_union.capacity, other._union.capacity);\n+            std::swap(_union.indirect, other._union.indirect);\n+        } else {\n+            std::swap(_union, other._union);\n+        }\n+        std::swap(_size, other._size);\n+    }\n+\n+    ~prevector() {\n+        clear();\n+        if (!is_direct()) {\n+            free(_union.indirect);\n+            _union.indirect = NULL;\n+        }\n+    }\n+\n+    bool operator==(const prevector<N, T, Size, Diff>& other) const {\n+        if (other.size() != size()) {\n+            return false;\n+        }\n+        const_iterator b1 = begin();\n+        const_iterator b2 = other.begin();\n+        const_iterator e1 = end();\n+        while (b1 != e1) {\n+            if ((*b1) != (*b2)) {\n+                return false;\n+            }\n+            ++b1;\n+            ++b2;\n+        }\n+        return true;\n+    }\n+\n+    bool operator!=(const prevector<N, T, Size, Diff>& other) const {\n+        return !(*this == other);\n+    }\n+\n+    bool operator<(const prevector<N, T, Size, Diff>& other) const {\n+        if (size() < other.size()) {\n+            return true;\n+        }\n+        if (size() > other.size()) {\n+            return false;\n+        }\n+        const_iterator b1 = begin();\n+        const_iterator b2 = other.begin();\n+        const_iterator e1 = end();\n+        while (b1 != e1) {\n+            if ((*b1) < (*b2)) {\n+                return true;\n+            }\n+            if ((*b2) < (*b1)) {\n+                return false;\n+            }\n+            ++b1;\n+            ++b2;\n+        }\n+        return false;\n+    }\n+\n+    size_t allocated_memory() const {\n+        if (is_direct()) {\n+            return 0;\n+        } else {\n+            return ((size_t)(sizeof(T))) * _union.capacity;\n+        }\n+    }\n+};\n+#pragma pack(pop)\n+\n+#endif"
      },
      {
        "sha": "c5d8a64a6d6ab91f9994b6497473392013f7bc53",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/327291af02d05e09188713d882bf68ac708c1077/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/327291af02d05e09188713d882bf68ac708c1077/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=327291af02d05e09188713d882bf68ac708c1077",
        "patch": "@@ -74,7 +74,7 @@ class CTxIn\n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         READWRITE(prevout);\n-        READWRITE(scriptSig);\n+        READWRITE(*(CScriptBase*)(&scriptSig));\n         READWRITE(nSequence);\n     }\n \n@@ -119,7 +119,7 @@ class CTxOut\n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         READWRITE(nValue);\n-        READWRITE(scriptPubKey);\n+        READWRITE(*(CScriptBase*)(&scriptPubKey));\n     }\n \n     void SetNull()"
      },
      {
        "sha": "1000c143f3d401c8c5238705d1326f1e6842ab88",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/327291af02d05e09188713d882bf68ac708c1077/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/327291af02d05e09188713d882bf68ac708c1077/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=327291af02d05e09188713d882bf68ac708c1077",
        "patch": "@@ -201,7 +201,7 @@ QList<std::pair<CScript,CAmount> > PaymentRequestPlus::getPayTo() const\n         const unsigned char* scriptStr = (const unsigned char*)details.outputs(i).script().data();\n         CScript s(scriptStr, scriptStr+details.outputs(i).script().size());\n \n-        result.append(make_pair(s, details.outputs(i).amount()));\n+        result.append(std::make_pair(s, details.outputs(i).amount()));\n     }\n     return result;\n }"
      },
      {
        "sha": "57e0edc4b4f249f6cf76c3e109d1620a258133ba",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/327291af02d05e09188713d882bf68ac708c1077/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/327291af02d05e09188713d882bf68ac708c1077/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=327291af02d05e09188713d882bf68ac708c1077",
        "patch": "@@ -1023,7 +1023,7 @@ class CTransactionSignatureSerializer {\n         // Serialize the script\n         if (nInput != nIn)\n             // Blank out other inputs' signatures\n-            ::Serialize(s, CScript(), nType, nVersion);\n+            ::Serialize(s, CScriptBase(), nType, nVersion);\n         else\n             SerializeScriptCode(s, nType, nVersion);\n         // Serialize the nSequence"
      },
      {
        "sha": "9c77ed9fc19dbf67766513a2fe89fcc1c7e5ceed",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/327291af02d05e09188713d882bf68ac708c1077/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/327291af02d05e09188713d882bf68ac708c1077/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=327291af02d05e09188713d882bf68ac708c1077",
        "patch": "@@ -205,9 +205,9 @@ bool CScript::IsPayToScriptHash() const\n {\n     // Extra-fast test for pay-to-script-hash CScripts:\n     return (this->size() == 23 &&\n-            this->at(0) == OP_HASH160 &&\n-            this->at(1) == 0x14 &&\n-            this->at(22) == OP_EQUAL);\n+            (*this)[0] == OP_HASH160 &&\n+            (*this)[1] == 0x14 &&\n+            (*this)[22] == OP_EQUAL);\n }\n \n bool CScript::IsPushOnly(const_iterator pc) const"
      },
      {
        "sha": "3650957fc9bfff678aea994dadcb37a0705a8576",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/327291af02d05e09188713d882bf68ac708c1077/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/327291af02d05e09188713d882bf68ac708c1077/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=327291af02d05e09188713d882bf68ac708c1077",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_SCRIPT_SCRIPT_H\n \n #include \"crypto/common.h\"\n+#include \"prevector.h\"\n \n #include <assert.h>\n #include <climits>\n@@ -354,8 +355,10 @@ class CScriptNum\n     int64_t m_value;\n };\n \n+typedef prevector<28, unsigned char> CScriptBase;\n+\n /** Serialized script, used inside transaction inputs and outputs */\n-class CScript : public std::vector<unsigned char>\n+class CScript : public CScriptBase\n {\n protected:\n     CScript& push_int64(int64_t n)\n@@ -376,9 +379,10 @@ class CScript : public std::vector<unsigned char>\n     }\n public:\n     CScript() { }\n-    CScript(const CScript& b) : std::vector<unsigned char>(b.begin(), b.end()) { }\n-    CScript(const_iterator pbegin, const_iterator pend) : std::vector<unsigned char>(pbegin, pend) { }\n-    CScript(const unsigned char* pbegin, const unsigned char* pend) : std::vector<unsigned char>(pbegin, pend) { }\n+    CScript(const CScript& b) : CScriptBase(b.begin(), b.end()) { }\n+    CScript(const_iterator pbegin, const_iterator pend) : CScriptBase(pbegin, pend) { }\n+    CScript(std::vector<unsigned char>::const_iterator pbegin, std::vector<unsigned char>::const_iterator pend) : CScriptBase(pbegin, pend) { }\n+    CScript(const unsigned char* pbegin, const unsigned char* pend) : CScriptBase(pbegin, pend) { }\n \n     CScript& operator+=(const CScript& b)\n     {\n@@ -611,7 +615,7 @@ class CScript : public std::vector<unsigned char>\n     void clear()\n     {\n         // The default std::vector::clear() does not release memory.\n-        std::vector<unsigned char>().swap(*this);\n+        CScriptBase().swap(*this);\n     }\n };\n "
      },
      {
        "sha": "90f557fc608726aeabb6ea82a985a9a643e8d0f3",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/327291af02d05e09188713d882bf68ac708c1077/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/327291af02d05e09188713d882bf68ac708c1077/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=327291af02d05e09188713d882bf68ac708c1077",
        "patch": "@@ -16,7 +16,7 @@\n \n using namespace std;\n \n-typedef vector<unsigned char> valtype;\n+typedef std::vector<unsigned char> valtype;\n \n TransactionSignatureCreator::TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, int nHashTypeIn) : BaseSignatureCreator(keystoreIn), txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), checker(txTo, nIn) {}\n \n@@ -118,7 +118,7 @@ bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPu\n         bool fSolved =\n             SignStep(creator, subscript, scriptSig, subType) && subType != TX_SCRIPTHASH;\n         // Append serialized subscript whether or not it is completely signed:\n-        scriptSig << static_cast<valtype>(subscript);\n+        scriptSig << valtype(subscript.begin(), subscript.end());\n         if (!fSolved) return false;\n     }\n "
      },
      {
        "sha": "5fe7fc1f3583cb83369b1cd5e36fa2baf2f8eb2a",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 119,
        "deletions": 38,
        "changes": 157,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/327291af02d05e09188713d882bf68ac708c1077/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/327291af02d05e09188713d882bf68ac708c1077/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=327291af02d05e09188713d882bf68ac708c1077",
        "patch": "@@ -20,7 +20,7 @@\n #include <utility>\n #include <vector>\n \n-class CScript;\n+#include \"prevector.h\"\n \n static const unsigned int MAX_SIZE = 0x02000000;\n \n@@ -49,26 +49,26 @@ inline T* NCONST_PTR(const T* val)\n  * @note These functions avoid the undefined case of indexing into an empty\n  * vector, as well as that of indexing after the end of the vector.\n  */\n-template <class T, class TAl>\n-inline T* begin_ptr(std::vector<T,TAl>& v)\n+template <typename V>\n+inline typename V::value_type* begin_ptr(V& v)\n {\n     return v.empty() ? NULL : &v[0];\n }\n /** Get begin pointer of vector (const version) */\n-template <class T, class TAl>\n-inline const T* begin_ptr(const std::vector<T,TAl>& v)\n+template <typename V>\n+inline const typename V::value_type* begin_ptr(const V& v)\n {\n     return v.empty() ? NULL : &v[0];\n }\n /** Get end pointer of vector (non-const version) */\n-template <class T, class TAl>\n-inline T* end_ptr(std::vector<T,TAl>& v)\n+template <typename V>\n+inline typename V::value_type* end_ptr(V& v)\n {\n     return v.empty() ? NULL : (&v[0] + v.size());\n }\n /** Get end pointer of vector (const version) */\n-template <class T, class TAl>\n-inline const T* end_ptr(const std::vector<T,TAl>& v)\n+template <typename V>\n+inline const typename V::value_type* end_ptr(const V& v)\n {\n     return v.empty() ? NULL : (&v[0] + v.size());\n }\n@@ -391,6 +391,12 @@ class CFlatData\n         pbegin = (char*)begin_ptr(v);\n         pend = (char*)end_ptr(v);\n     }\n+    template <unsigned int N, typename T, typename S, typename D>\n+    explicit CFlatData(prevector<N, T, S, D> &v)\n+    {\n+        pbegin = (char*)begin_ptr(v);\n+        pend = (char*)end_ptr(v);\n+    }\n     char* begin() { return pbegin; }\n     const char* begin() const { return pbegin; }\n     char* end() { return pend; }\n@@ -485,6 +491,20 @@ template<typename C> unsigned int GetSerializeSize(const std::basic_string<C>& s\n template<typename Stream, typename C> void Serialize(Stream& os, const std::basic_string<C>& str, int, int=0);\n template<typename Stream, typename C> void Unserialize(Stream& is, std::basic_string<C>& str, int, int=0);\n \n+/**\n+ * prevector\n+ * prevectors of unsigned char are a special case and are intended to be serialized as a single opaque blob.\n+ */\n+template<unsigned int N, typename T> unsigned int GetSerializeSize_impl(const prevector<N, T>& v, int nType, int nVersion, const unsigned char&);\n+template<unsigned int N, typename T, typename V> unsigned int GetSerializeSize_impl(const prevector<N, T>& v, int nType, int nVersion, const V&);\n+template<unsigned int N, typename T> inline unsigned int GetSerializeSize(const prevector<N, T>& v, int nType, int nVersion);\n+template<typename Stream, unsigned int N, typename T> void Serialize_impl(Stream& os, const prevector<N, T>& v, int nType, int nVersion, const unsigned char&);\n+template<typename Stream, unsigned int N, typename T, typename V> void Serialize_impl(Stream& os, const prevector<N, T>& v, int nType, int nVersion, const V&);\n+template<typename Stream, unsigned int N, typename T> inline void Serialize(Stream& os, const prevector<N, T>& v, int nType, int nVersion);\n+template<typename Stream, unsigned int N, typename T> void Unserialize_impl(Stream& is, prevector<N, T>& v, int nType, int nVersion, const unsigned char&);\n+template<typename Stream, unsigned int N, typename T, typename V> void Unserialize_impl(Stream& is, prevector<N, T>& v, int nType, int nVersion, const V&);\n+template<typename Stream, unsigned int N, typename T> inline void Unserialize(Stream& is, prevector<N, T>& v, int nType, int nVersion);\n+\n /**\n  * vector\n  * vectors of unsigned char are a special case and are intended to be serialized as a single opaque blob.\n@@ -499,13 +519,6 @@ template<typename Stream, typename T, typename A> void Unserialize_impl(Stream&\n template<typename Stream, typename T, typename A, typename V> void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const V&);\n template<typename Stream, typename T, typename A> inline void Unserialize(Stream& is, std::vector<T, A>& v, int nType, int nVersion);\n \n-/**\n- * others derived from vector\n- */\n-extern inline unsigned int GetSerializeSize(const CScript& v, int nType, int nVersion);\n-template<typename Stream> void Serialize(Stream& os, const CScript& v, int nType, int nVersion);\n-template<typename Stream> void Unserialize(Stream& is, CScript& v, int nType, int nVersion);\n-\n /**\n  * pair\n  */\n@@ -587,6 +600,96 @@ void Unserialize(Stream& is, std::basic_string<C>& str, int, int)\n \n \n \n+/**\n+ * prevector\n+ */\n+template<unsigned int N, typename T>\n+unsigned int GetSerializeSize_impl(const prevector<N, T>& v, int nType, int nVersion, const unsigned char&)\n+{\n+    return (GetSizeOfCompactSize(v.size()) + v.size() * sizeof(T));\n+}\n+\n+template<unsigned int N, typename T, typename V>\n+unsigned int GetSerializeSize_impl(const prevector<N, T>& v, int nType, int nVersion, const V&)\n+{\n+    unsigned int nSize = GetSizeOfCompactSize(v.size());\n+    for (typename prevector<N, T>::const_iterator vi = v.begin(); vi != v.end(); ++vi)\n+        nSize += GetSerializeSize((*vi), nType, nVersion);\n+    return nSize;\n+}\n+\n+template<unsigned int N, typename T>\n+inline unsigned int GetSerializeSize(const prevector<N, T>& v, int nType, int nVersion)\n+{\n+    return GetSerializeSize_impl(v, nType, nVersion, T());\n+}\n+\n+\n+template<typename Stream, unsigned int N, typename T>\n+void Serialize_impl(Stream& os, const prevector<N, T>& v, int nType, int nVersion, const unsigned char&)\n+{\n+    WriteCompactSize(os, v.size());\n+    if (!v.empty())\n+        os.write((char*)&v[0], v.size() * sizeof(T));\n+}\n+\n+template<typename Stream, unsigned int N, typename T, typename V>\n+void Serialize_impl(Stream& os, const prevector<N, T>& v, int nType, int nVersion, const V&)\n+{\n+    WriteCompactSize(os, v.size());\n+    for (typename prevector<N, T>::const_iterator vi = v.begin(); vi != v.end(); ++vi)\n+        ::Serialize(os, (*vi), nType, nVersion);\n+}\n+\n+template<typename Stream, unsigned int N, typename T>\n+inline void Serialize(Stream& os, const prevector<N, T>& v, int nType, int nVersion)\n+{\n+    Serialize_impl(os, v, nType, nVersion, T());\n+}\n+\n+\n+template<typename Stream, unsigned int N, typename T>\n+void Unserialize_impl(Stream& is, prevector<N, T>& v, int nType, int nVersion, const unsigned char&)\n+{\n+    // Limit size per read so bogus size value won't cause out of memory\n+    v.clear();\n+    unsigned int nSize = ReadCompactSize(is);\n+    unsigned int i = 0;\n+    while (i < nSize)\n+    {\n+        unsigned int blk = std::min(nSize - i, (unsigned int)(1 + 4999999 / sizeof(T)));\n+        v.resize(i + blk);\n+        is.read((char*)&v[i], blk * sizeof(T));\n+        i += blk;\n+    }\n+}\n+\n+template<typename Stream, unsigned int N, typename T, typename V>\n+void Unserialize_impl(Stream& is, prevector<N, T>& v, int nType, int nVersion, const V&)\n+{\n+    v.clear();\n+    unsigned int nSize = ReadCompactSize(is);\n+    unsigned int i = 0;\n+    unsigned int nMid = 0;\n+    while (nMid < nSize)\n+    {\n+        nMid += 5000000 / sizeof(T);\n+        if (nMid > nSize)\n+            nMid = nSize;\n+        v.resize(nMid);\n+        for (; i < nMid; i++)\n+            Unserialize(is, v[i], nType, nVersion);\n+    }\n+}\n+\n+template<typename Stream, unsigned int N, typename T>\n+inline void Unserialize(Stream& is, prevector<N, T>& v, int nType, int nVersion)\n+{\n+    Unserialize_impl(is, v, nType, nVersion, T());\n+}\n+\n+\n+\n /**\n  * vector\n  */\n@@ -677,28 +780,6 @@ inline void Unserialize(Stream& is, std::vector<T, A>& v, int nType, int nVersio\n \n \n \n-/**\n- * others derived from vector\n- */\n-inline unsigned int GetSerializeSize(const CScript& v, int nType, int nVersion)\n-{\n-    return GetSerializeSize((const std::vector<unsigned char>&)v, nType, nVersion);\n-}\n-\n-template<typename Stream>\n-void Serialize(Stream& os, const CScript& v, int nType, int nVersion)\n-{\n-    Serialize(os, (const std::vector<unsigned char>&)v, nType, nVersion);\n-}\n-\n-template<typename Stream>\n-void Unserialize(Stream& is, CScript& v, int nType, int nVersion)\n-{\n-    Unserialize(is, (std::vector<unsigned char>&)v, nType, nVersion);\n-}\n-\n-\n-\n /**\n  * pair\n  */"
      },
      {
        "sha": "9c48917850af93e5d6965b1b20d36c740165e8af",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/327291af02d05e09188713d882bf68ac708c1077/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/327291af02d05e09188713d882bf68ac708c1077/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=327291af02d05e09188713d882bf68ac708c1077",
        "patch": "@@ -192,7 +192,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n     tx.vin[0].prevout.hash = hash;\n-    tx.vin[0].scriptSig = CScript() << (std::vector<unsigned char>)script;\n+    tx.vin[0].scriptSig = CScript() << std::vector<unsigned char>(script.begin(), script.end());\n     tx.vout[0].nValue -= 1000000;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));"
      },
      {
        "sha": "01a45b540d512f4f27c45c8c209013951b1660bd",
        "filename": "src/test/prevector_tests.cpp",
        "status": "added",
        "additions": 217,
        "deletions": 0,
        "changes": 217,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/327291af02d05e09188713d882bf68ac708c1077/src/test/prevector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/327291af02d05e09188713d882bf68ac708c1077/src/test/prevector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/prevector_tests.cpp?ref=327291af02d05e09188713d882bf68ac708c1077",
        "patch": "@@ -0,0 +1,217 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <vector>\n+#include \"prevector.h\"\n+#include \"random.h\"\n+\n+#include \"serialize.h\"\n+#include \"streams.h\"\n+\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(PrevectorTests, TestingSetup)\n+\n+template<unsigned int N, typename T>\n+class prevector_tester {\n+    typedef std::vector<T> realtype;\n+    realtype real_vector;\n+\n+    typedef prevector<N, T> pretype;\n+    pretype pre_vector;\n+\n+    typedef typename pretype::size_type Size;\n+\n+    void test() {\n+        const pretype& const_pre_vector = pre_vector;\n+        BOOST_CHECK_EQUAL(real_vector.size(), pre_vector.size());\n+        BOOST_CHECK_EQUAL(real_vector.empty(), pre_vector.empty());\n+        for (Size s = 0; s < real_vector.size(); s++) {\n+             BOOST_CHECK(real_vector[s] == pre_vector[s]);\n+             BOOST_CHECK(&(pre_vector[s]) == &(pre_vector.begin()[s]));\n+             BOOST_CHECK(&(pre_vector[s]) == &*(pre_vector.begin() + s));\n+             BOOST_CHECK(&(pre_vector[s]) == &*((pre_vector.end() + s) - real_vector.size()));\n+        }\n+        // BOOST_CHECK(realtype(pre_vector) == real_vector);\n+        BOOST_CHECK(pretype(real_vector.begin(), real_vector.end()) == pre_vector);\n+        BOOST_CHECK(pretype(pre_vector.begin(), pre_vector.end()) == pre_vector);\n+        size_t pos = 0;\n+        BOOST_FOREACH(const T& v, pre_vector) {\n+             BOOST_CHECK(v == real_vector[pos++]);\n+        }\n+        BOOST_REVERSE_FOREACH(const T& v, pre_vector) {\n+             BOOST_CHECK(v == real_vector[--pos]);\n+        }\n+        BOOST_FOREACH(const T& v, const_pre_vector) {\n+             BOOST_CHECK(v == real_vector[pos++]);\n+        }\n+        BOOST_REVERSE_FOREACH(const T& v, const_pre_vector) {\n+             BOOST_CHECK(v == real_vector[--pos]);\n+        }\n+        CDataStream ss1(SER_DISK, 0);\n+        CDataStream ss2(SER_DISK, 0);\n+        ss1 << real_vector;\n+        ss2 << pre_vector;\n+        BOOST_CHECK_EQUAL(ss1.size(), ss2.size());\n+        for (Size s = 0; s < ss1.size(); s++) {\n+            BOOST_CHECK_EQUAL(ss1[s], ss2[s]);\n+        }\n+    }\n+\n+public:\n+    void resize(Size s) {\n+        real_vector.resize(s);\n+        BOOST_CHECK_EQUAL(real_vector.size(), s);\n+        pre_vector.resize(s);\n+        BOOST_CHECK_EQUAL(pre_vector.size(), s);\n+        test();\n+    }\n+\n+    void reserve(Size s) {\n+        real_vector.reserve(s);\n+        BOOST_CHECK(real_vector.capacity() >= s);\n+        pre_vector.reserve(s);\n+        BOOST_CHECK(pre_vector.capacity() >= s);\n+        test();\n+    }\n+\n+    void insert(Size position, const T& value) {\n+        real_vector.insert(real_vector.begin() + position, value);\n+        pre_vector.insert(pre_vector.begin() + position, value);\n+        test();\n+    }\n+\n+    void insert(Size position, Size count, const T& value) {\n+        real_vector.insert(real_vector.begin() + position, count, value);\n+        pre_vector.insert(pre_vector.begin() + position, count, value);\n+        test();\n+    }\n+\n+    template<typename I>\n+    void insert_range(Size position, I first, I last) {\n+        real_vector.insert(real_vector.begin() + position, first, last);\n+        pre_vector.insert(pre_vector.begin() + position, first, last);\n+        test();\n+    }\n+\n+    void erase(Size position) {\n+        real_vector.erase(real_vector.begin() + position);\n+        pre_vector.erase(pre_vector.begin() + position);\n+        test();\n+    }\n+\n+    void erase(Size first, Size last) {\n+        real_vector.erase(real_vector.begin() + first, real_vector.begin() + last);\n+        pre_vector.erase(pre_vector.begin() + first, pre_vector.begin() + last);\n+        test();\n+    }\n+\n+    void update(Size pos, const T& value) {\n+        real_vector[pos] = value;\n+        pre_vector[pos] = value;\n+        test();\n+    }\n+\n+    void push_back(const T& value) {\n+        real_vector.push_back(value);\n+        pre_vector.push_back(value);\n+        test();\n+    }\n+\n+    void pop_back() {\n+        real_vector.pop_back();\n+        pre_vector.pop_back();\n+        test();\n+    }\n+\n+    void clear() {\n+        real_vector.clear();\n+        pre_vector.clear();\n+    }\n+\n+    void assign(Size n, const T& value) {\n+        real_vector.assign(n, value);\n+        pre_vector.assign(n, value);\n+    }\n+\n+    Size size() {\n+        return real_vector.size();\n+    }\n+\n+    Size capacity() {\n+        return pre_vector.capacity();\n+    }\n+\n+    void shrink_to_fit() {\n+        pre_vector.shrink_to_fit();\n+        test();\n+    }\n+};\n+\n+BOOST_AUTO_TEST_CASE(PrevectorTestInt)\n+{\n+    for (int j = 0; j < 64; j++) {\n+        prevector_tester<8, int> test;\n+        for (int i = 0; i < 2048; i++) {\n+            int r = insecure_rand();\n+            if ((r % 4) == 0) {\n+                test.insert(insecure_rand() % (test.size() + 1), insecure_rand());\n+            }\n+            if (test.size() > 0 && ((r >> 2) % 4) == 1) {\n+                test.erase(insecure_rand() % test.size());\n+            }\n+            if (((r >> 4) % 8) == 2) {\n+                int new_size = std::max<int>(0, std::min<int>(30, test.size() + (insecure_rand() % 5) - 2));\n+                test.resize(new_size);\n+            }\n+            if (((r >> 7) % 8) == 3) {\n+                test.insert(insecure_rand() % (test.size() + 1), 1 + (insecure_rand() % 2), insecure_rand());\n+            }\n+            if (((r >> 10) % 8) == 4) {\n+                int del = std::min<int>(test.size(), 1 + (insecure_rand() % 2));\n+                int beg = insecure_rand() % (test.size() + 1 - del);\n+                test.erase(beg, beg + del);\n+            }\n+            if (((r >> 13) % 16) == 5) {\n+                test.push_back(insecure_rand());\n+            }\n+            if (test.size() > 0 && ((r >> 17) % 16) == 6) {\n+                test.pop_back();\n+            }\n+            if (((r >> 21) % 32) == 7) {\n+                int values[4];\n+                int num = 1 + (insecure_rand() % 4);\n+                for (int i = 0; i < num; i++) {\n+                    values[i] = insecure_rand();\n+                }\n+                test.insert_range(insecure_rand() % (test.size() + 1), values, values + num);\n+            }\n+            if (((r >> 26) % 32) == 8) {\n+                int del = std::min<int>(test.size(), 1 + (insecure_rand() % 4));\n+                int beg = insecure_rand() % (test.size() + 1 - del);\n+                test.erase(beg, beg + del);\n+            }\n+            r = insecure_rand();\n+            if (r % 32 == 9) {\n+                test.reserve(insecure_rand() % 32);\n+            }\n+            if ((r >> 5) % 64 == 10) {\n+                test.shrink_to_fit();\n+            }\n+            if (test.size() > 0) {\n+                test.update(insecure_rand() % test.size(), insecure_rand());\n+            }\n+            if (((r >> 11) & 1024) == 11) {\n+                test.clear();\n+            }\n+            if (((r >> 21) & 512) == 12) {\n+                test.assign(insecure_rand() % 32, insecure_rand());\n+            }\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "e36aca8dfaab2751108f41ad4ec692e51a6b94d9",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/327291af02d05e09188713d882bf68ac708c1077/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/327291af02d05e09188713d882bf68ac708c1077/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=327291af02d05e09188713d882bf68ac708c1077",
        "patch": "@@ -25,7 +25,7 @@ using namespace std;\n static std::vector<unsigned char>\n Serialize(const CScript& s)\n {\n-    std::vector<unsigned char> sSerialized(s);\n+    std::vector<unsigned char> sSerialized(s.begin(), s.end());\n     return sSerialized;\n }\n \n@@ -339,8 +339,8 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     // SignSignature doesn't know how to sign these. We're\n     // not testing validating signatures, so just create\n     // dummy signatures that DO include the correct P2SH scripts:\n-    txTo.vin[3].scriptSig << OP_11 << OP_11 << static_cast<vector<unsigned char> >(oneAndTwo);\n-    txTo.vin[4].scriptSig << static_cast<vector<unsigned char> >(fifteenSigops);\n+    txTo.vin[3].scriptSig << OP_11 << OP_11 << vector<unsigned char>(oneAndTwo.begin(), oneAndTwo.end());\n+    txTo.vin[4].scriptSig << vector<unsigned char>(fifteenSigops.begin(), fifteenSigops.end());\n \n     BOOST_CHECK(::AreInputsStandard(txTo, coins));\n     // 22 P2SH sigops for all inputs (1 for vin[0], 6 for vin[3], 15 for vin[4]\n@@ -362,7 +362,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txToNonStd1.vin.resize(1);\n     txToNonStd1.vin[0].prevout.n = 5;\n     txToNonStd1.vin[0].prevout.hash = txFrom.GetHash();\n-    txToNonStd1.vin[0].scriptSig << static_cast<vector<unsigned char> >(sixteenSigops);\n+    txToNonStd1.vin[0].scriptSig << vector<unsigned char>(sixteenSigops.begin(), sixteenSigops.end());\n \n     BOOST_CHECK(!::AreInputsStandard(txToNonStd1, coins));\n     BOOST_CHECK_EQUAL(GetP2SHSigOpCount(txToNonStd1, coins), 16U);\n@@ -374,7 +374,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txToNonStd2.vin.resize(1);\n     txToNonStd2.vin[0].prevout.n = 6;\n     txToNonStd2.vin[0].prevout.hash = txFrom.GetHash();\n-    txToNonStd2.vin[0].scriptSig << static_cast<vector<unsigned char> >(twentySigops);\n+    txToNonStd2.vin[0].scriptSig << vector<unsigned char>(twentySigops.begin(), twentySigops.end());\n \n     BOOST_CHECK(!::AreInputsStandard(txToNonStd2, coins));\n     BOOST_CHECK_EQUAL(GetP2SHSigOpCount(txToNonStd2, coins), 20U);"
      },
      {
        "sha": "0059e4a998ef2dc9148fc1490d59ef0765d7ce72",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/327291af02d05e09188713d882bf68ac708c1077/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/327291af02d05e09188713d882bf68ac708c1077/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=327291af02d05e09188713d882bf68ac708c1077",
        "patch": "@@ -260,7 +260,7 @@ class TestBuilder\n \n     TestBuilder& PushRedeem()\n     {\n-        DoPush(static_cast<std::vector<unsigned char> >(scriptPubKey));\n+        DoPush(std::vector<unsigned char>(scriptPubKey.begin(), scriptPubKey.end()));\n         return *this;\n     }\n \n@@ -892,7 +892,7 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSigCopy, scriptSig);\n     BOOST_CHECK(combined == scriptSigCopy || combined == scriptSig);\n     // dummy scriptSigCopy with placeholder, should always choose non-placeholder:\n-    scriptSigCopy = CScript() << OP_0 << static_cast<vector<unsigned char> >(pkSingle);\n+    scriptSigCopy = CScript() << OP_0 << vector<unsigned char>(pkSingle.begin(), pkSingle.end());\n     combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSigCopy, scriptSig);\n     BOOST_CHECK(combined == scriptSig);\n     combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSig, scriptSigCopy);"
      },
      {
        "sha": "ea2b9b795f0231a0ba2b19bd40c39ec7040a3f88",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/327291af02d05e09188713d882bf68ac708c1077/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/327291af02d05e09188713d882bf68ac708c1077/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=327291af02d05e09188713d882bf68ac708c1077",
        "patch": "@@ -20,7 +20,7 @@ using namespace std;\n static std::vector<unsigned char>\n Serialize(const CScript& s)\n {\n-    std::vector<unsigned char> sSerialized(s);\n+    std::vector<unsigned char> sSerialized(s.begin(), s.end());\n     return sSerialized;\n }\n "
      },
      {
        "sha": "e2e827d816f3ef9708bb930df0ddb3d0f16311a3",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/327291af02d05e09188713d882bf68ac708c1077/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/327291af02d05e09188713d882bf68ac708c1077/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=327291af02d05e09188713d882bf68ac708c1077",
        "patch": "@@ -113,19 +113,19 @@ bool CWalletDB::WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey)\n bool CWalletDB::WriteCScript(const uint160& hash, const CScript& redeemScript)\n {\n     nWalletDBUpdated++;\n-    return Write(std::make_pair(std::string(\"cscript\"), hash), redeemScript, false);\n+    return Write(std::make_pair(std::string(\"cscript\"), hash), *(const CScriptBase*)(&redeemScript), false);\n }\n \n bool CWalletDB::WriteWatchOnly(const CScript &dest)\n {\n     nWalletDBUpdated++;\n-    return Write(std::make_pair(std::string(\"watchs\"), dest), '1');\n+    return Write(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)), '1');\n }\n \n bool CWalletDB::EraseWatchOnly(const CScript &dest)\n {\n     nWalletDBUpdated++;\n-    return Erase(std::make_pair(std::string(\"watchs\"), dest));\n+    return Erase(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)));\n }\n \n bool CWalletDB::WriteBestBlock(const CBlockLocator& locator)\n@@ -421,7 +421,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         else if (strType == \"watchs\")\n         {\n             CScript script;\n-            ssKey >> script;\n+            ssKey >> *(CScriptBase*)(&script);\n             char fYes;\n             ssValue >> fYes;\n             if (fYes == '1')\n@@ -575,7 +575,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             uint160 hash;\n             ssKey >> hash;\n             CScript script;\n-            ssValue >> script;\n+            ssValue >> *(CScriptBase*)(&script);\n             if (!pwallet->LoadCScript(script))\n             {\n                 strErr = \"Error reading wallet database: LoadCScript failed\";"
      }
    ]
  },
  {
    "sha": "8f761e87c3fd0ad50d41925d8c2ac2c429403b44",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Zjc2MWU4N2MzZmQwYWQ1MGQ0MTkyNWQ4YzJhYzJjNDI5NDAzYjQ0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-01T09:22:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-01T09:23:05Z"
      },
      "message": "Merge pull request #7136\n\nfa19a58 HelpMessage: Don't hide -mintxfee behind showDebug (MarcoFalke)\nfaffc17 rpcwallet: Clarify what settxfee does (MarcoFalke)\n9999cb0 Fix url in .travis.yml (MarcoFalke)\nfa22a10 contrib: Del. gitian downloader config and update gitian README (MarcoFalke)\nfad3035 [doc] Minor markdown fixes (MarcoFalke)",
      "tree": {
        "sha": "bbca78b5bc1afe4deb970b35cfed01f54eabe3b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bbca78b5bc1afe4deb970b35cfed01f54eabe3b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f761e87c3fd0ad50d41925d8c2ac2c429403b44",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWXWb5AAoJEHSBCwEjRsmmIDQH/iuLr4V9rTkF5RL4ggsq484C\nzlMXMd9lLbzazzF2Fe0uLsCpkLlfL257QFmorRq3Gw4dx8KaJTv9B0mbzBdn89Fq\nIU8TipoibI4aaHCDJwDhX8LDKpuklRo7u8TpO5b9F6gasTNgxicwmZO2FX28L57C\nrNJk4flaCOAWKc4LCgOxxbMIEkXyOk06mquxTVfhKuwGm8q+1ndYPhaEPw/lPjr5\n7Ny/IMnJumzNnl1lgsP/E5b2CDTZLa3YRq+7b+uUQR7pKBGj8ic5FcJ0Vjrk6UIh\nG+qZBWDMchxFyePawWOHrtK6xFG/w6Bb+HR5G7YoZkWYVJ3aP9WwFR/Zn/dTkJA=\n=Ey5y\n-----END PGP SIGNATURE-----",
        "payload": "tree bbca78b5bc1afe4deb970b35cfed01f54eabe3b0\nparent 327291af02d05e09188713d882bf68ac708c1077\nparent fa19a588b9e734b05b81bc0cb49ba3a04ffde0bc\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448961759 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448961785 +0100\n\nMerge pull request #7136\n\nfa19a58 HelpMessage: Don't hide -mintxfee behind showDebug (MarcoFalke)\nfaffc17 rpcwallet: Clarify what settxfee does (MarcoFalke)\n9999cb0 Fix url in .travis.yml (MarcoFalke)\nfa22a10 contrib: Del. gitian downloader config and update gitian README (MarcoFalke)\nfad3035 [doc] Minor markdown fixes (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f761e87c3fd0ad50d41925d8c2ac2c429403b44",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f761e87c3fd0ad50d41925d8c2ac2c429403b44",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f761e87c3fd0ad50d41925d8c2ac2c429403b44/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "327291af02d05e09188713d882bf68ac708c1077",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/327291af02d05e09188713d882bf68ac708c1077",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/327291af02d05e09188713d882bf68ac708c1077"
      },
      {
        "sha": "fa19a588b9e734b05b81bc0cb49ba3a04ffde0bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa19a588b9e734b05b81bc0cb49ba3a04ffde0bc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa19a588b9e734b05b81bc0cb49ba3a04ffde0bc"
      }
    ],
    "stats": {
      "total": 146,
      "additions": 27,
      "deletions": 119
    },
    "files": [
      {
        "sha": "e2d43d6330589420915bd69effce40de33b22d79",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f761e87c3fd0ad50d41925d8c2ac2c429403b44/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f761e87c3fd0ad50d41925d8c2ac2c429403b44/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=8f761e87c3fd0ad50d41925d8c2ac2c429403b44",
        "patch": "@@ -2,7 +2,7 @@\n # - A travis bug causes caches to trample eachother when using the same\n #   compiler key (which we don't use anyway). This is worked around for now by\n #   replacing the \"compilers\" with a build name prefixed by the no-op \":\"\n-#   command. See: https://github.com/travis-ci/casher/issues/6\n+#   command. See: https://github.com/travis-ci/travis-ci/issues/4393\n \n os: linux\n language: cpp"
      },
      {
        "sha": "55ab65a68163930ff6acfa7cecc30ff6bc3fdf46",
        "filename": "README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f761e87c3fd0ad50d41925d8c2ac2c429403b44/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f761e87c3fd0ad50d41925d8c2ac2c429403b44/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=8f761e87c3fd0ad50d41925d8c2ac2c429403b44",
        "patch": "@@ -48,7 +48,7 @@ lots of money.\n \n ### Automated Testing\n \n-Developers are strongly encouraged to write unit tests for new code, and to\n+Developers are strongly encouraged to write [unit tests](/doc/unit-tests.md) for new code, and to\n submit new unit tests for old code. Unit tests can be compiled and run\n (assuming they weren't disabled in configure) with: `make check`\n "
      },
      {
        "sha": "614970659660f8fee76b8859467e192795829de4",
        "filename": "contrib/gitian-descriptors/README.md",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f761e87c3fd0ad50d41925d8c2ac2c429403b44/contrib/gitian-descriptors/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f761e87c3fd0ad50d41925d8c2ac2c429403b44/contrib/gitian-descriptors/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/README.md?ref=8f761e87c3fd0ad50d41925d8c2ac2c429403b44",
        "patch": "@@ -1,8 +1,7 @@\n-### Gavin's notes on getting gitian builds up and running using KVM:###\n+### Gavin's notes on getting gitian builds up and running using KVM\n \n-These instructions distilled from:\n-[  https://help.ubuntu.com/community/KVM/Installation](  https://help.ubuntu.com/community/KVM/Installation)\n-... see there for complete details.\n+These instructions distilled from\n+[https://help.ubuntu.com/community/KVM/Installation](https://help.ubuntu.com/community/KVM/Installation).\n \n You need the right hardware: you need a 64-bit-capable CPU with hardware virtualization support (Intel VT-x or AMD-V). Not all modern CPUs support hardware virtualization.\n \n@@ -33,14 +32,14 @@ Once you've got the right hardware and software:\n     # Get inputs (see doc/release-process.md for exact inputs needed and where to get them)\n     ...\n \n-    # For further build instructions see doc/release-notes.md\n+    # For further build instructions see doc/release-process.md\n     ...\n \n ---------------------\n \n `gitian-builder` now also supports building using LXC. See\n-[  https://help.ubuntu.com/12.04/serverguide/lxc.html](  https://help.ubuntu.com/12.04/serverguide/lxc.html)\n-... for how to get LXC up and running under Ubuntu.\n+[help.ubuntu.com](https://help.ubuntu.com/14.04/serverguide/lxc.html)\n+for how to get LXC up and running under Ubuntu.\n \n If your main machine is a 64-bit Mac or PC with a few gigabytes of memory\n and at least 10 gigabytes of free disk space, you can `gitian-build` using"
      },
      {
        "sha": "c0048d336e5e365da5d91f9a47db453d9614922d",
        "filename": "contrib/gitian-downloader/linux-download-config",
        "status": "removed",
        "additions": 0,
        "deletions": 45,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/327291af02d05e09188713d882bf68ac708c1077/contrib/gitian-downloader/linux-download-config",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/327291af02d05e09188713d882bf68ac708c1077/contrib/gitian-downloader/linux-download-config",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/linux-download-config?ref=327291af02d05e09188713d882bf68ac708c1077",
        "patch": "@@ -1,45 +0,0 @@\n---- \n-name: bitcoin\n-urls:\n-- http://bitcoin.org/bitcoin-latest-linux-gitian.zip\n-rss:\n-- url: \n-  xpath: //item/link/text()\n-  pattern: bitcoin-\\d+.\\d+.\\d+-linux-gitian.zip\n-signers:\n-  0A82509767C7D4A5D14DA2301AE1D35043E08E54:\n-    name: BlueMatt\n-    key: bluematt\n-  BF6273FAEF7CC0BA1F562E50989F6B3048A116B5:\n-    name: Devrandom\n-    key: devrandom\n-  E463A93F5F3117EEDE6C7316BD02942421F4889F:\n-    name: Luke-Jr\n-    key: luke-jr\n-  D762373D24904A3E42F33B08B9A408E71DAAC974:\n-    name: \"Pieter Wuille\"\n-    key: sipa\n-  77E72E69DA7EE0A148C06B21B34821D4944DE5F7:\n-    name: tcatm\n-    key: tcatm\n-  01CDF4627A3B88AAE4A571C87588242FBE38D3A8:\n-    name: \"Gavin Andresen\"\n-    key: gavinandresen\n-  71A3B16735405025D447E8F274810B012346C9A6:\n-    name: \"Wladimir J. van der Laan\"\n-    key: laanwj\n-  AEC1884398647C47413C1C3FB1179EB7347DC10D:\n-    name: \"Warren Togami\"\n-    key: wtogami\n-  9692B91BBF0E8D34DFD33B1882C5C009628ECF0C:\n-    name: michagogo\n-    key: michagogo\n-  E944AE667CF960B1004BC32FCA662BE18B877A60:\n-    name: \"Andreas Schildbach\"\n-    key: aschildbach\n-  C060A6635913D98A3587D7DB1C2491FFEB0EF770:\n-    name: \"Cory Fields\"\n-    key: \"cfields\"\n-  37EC7D7B0A217CDB4B4E007E7FAB114267E4FA04:\n-    name: \"Peter Todd\"\n-    key: \"petertodd\""
      },
      {
        "sha": "0ad3bdd4f3e3faf0e8c20fa5259bf3660a395782",
        "filename": "contrib/gitian-downloader/win32-download-config",
        "status": "removed",
        "additions": 0,
        "deletions": 45,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/327291af02d05e09188713d882bf68ac708c1077/contrib/gitian-downloader/win32-download-config",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/327291af02d05e09188713d882bf68ac708c1077/contrib/gitian-downloader/win32-download-config",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/win32-download-config?ref=327291af02d05e09188713d882bf68ac708c1077",
        "patch": "@@ -1,45 +0,0 @@\n---- \n-name: bitcoin\n-urls:\n-- http://bitcoin.org/bitcoin-latest-win32-gitian.zip\n-rss:\n-- url: \n-  xpath: //item/link/text()\n-  pattern: bitcoin-\\d+.\\d+.\\d+-win32-gitian.zip\n-signers:\n-  0A82509767C7D4A5D14DA2301AE1D35043E08E54:\n-    name: BlueMatt\n-    key: bluematt\n-  BF6273FAEF7CC0BA1F562E50989F6B3048A116B5:\n-    name: Devrandom\n-    key: devrandom\n-  E463A93F5F3117EEDE6C7316BD02942421F4889F:\n-    name: Luke-Jr\n-    key: luke-jr\n-  D762373D24904A3E42F33B08B9A408E71DAAC974:\n-    name: \"Pieter Wuille\"\n-    key: sipa\n-  77E72E69DA7EE0A148C06B21B34821D4944DE5F7:\n-    name: tcatm\n-    key: tcatm\n-  01CDF4627A3B88AAE4A571C87588242FBE38D3A8:\n-    name: \"Gavin Andresen\"\n-    key: gavinandresen\n-  71A3B16735405025D447E8F274810B012346C9A6:\n-    name: \"Wladimir J. van der Laan\"\n-    key: laanwj\n-  AEC1884398647C47413C1C3FB1179EB7347DC10D:\n-    name: \"Warren Togami\"\n-    key: wtogami\n-  9692B91BBF0E8D34DFD33B1882C5C009628ECF0C:\n-    name: michagogo\n-    key: michagogo\n-  E944AE667CF960B1004BC32FCA662BE18B877A60:\n-    name: \"Andreas Schildbach\"\n-    key: aschildbach\n-  C060A6635913D98A3587D7DB1C2491FFEB0EF770:\n-    name: \"Cory Fields\"\n-    key: \"cfields\"\n-  37EC7D7B0A217CDB4B4E007E7FAB114267E4FA04:\n-    name: \"Peter Todd\"\n-    key: \"petertodd\""
      },
      {
        "sha": "358792251b6751d434f9b57c459421290478a65c",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f761e87c3fd0ad50d41925d8c2ac2c429403b44/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f761e87c3fd0ad50d41925d8c2ac2c429403b44/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=8f761e87c3fd0ad50d41925d8c2ac2c429403b44",
        "patch": "@@ -218,7 +218,7 @@ General Bitcoin Core\n   - *Rationale*: RPC allows for better automatic testing. The test suite for\n     the GUI is very limited\n \n-- Make sure pulls pass Travis CI before merging\n+- Make sure pull requests pass Travis CI before merging\n \n   - *Rationale*: Makes sure that they pass thorough testing, and that the tester will keep passing\n      on the master branch. Otherwise all new pull requests will start failing the tests, resulting in\n@@ -230,9 +230,9 @@ General Bitcoin Core\n Wallet\n -------\n \n-- Make sure that that no crashes happen with run-time option `-disablewallet`.\n+- Make sure that no crashes happen with run-time option `-disablewallet`.\n \n-  - *Rationale*: In RPC code that conditionally use the wallet (such as\n+  - *Rationale*: In RPC code that conditionally uses the wallet (such as\n     `validateaddress`) it is easy to forget that global pointer `pwalletMain`\n     can be NULL. See `qa/rpc-tests/disablewallet.py` for functional tests\n     exercising the API with `-disablewallet`\n@@ -250,9 +250,9 @@ General C++\n     with assertions disabled, having side-effects in assertions is unexpected and\n     makes the code harder to understand\n \n-- If you use the .h, you must link the .cpp\n+- If you use the `.h`, you must link the `.cpp`\n \n-  - *Rationale*: Include files are the interface for the implementation file. Including one but\n+  - *Rationale*: Include files define the interface for the code in implementation files. Including one but\n       not linking the other is confusing. Please avoid that. Moving functions from\n       the `.h` to the `.cpp` should not result in build errors\n \n@@ -264,11 +264,11 @@ General C++\n C++ data structures\n --------------------\n \n-- Never use the std::map [] syntax when reading from a map, but instead use .find()\n+- Never use the `std::map []` syntax when reading from a map, but instead use `.find()`\n \n-  - *Rationale*: [] does an insert (of the default element) if the item doesn't\n+  - *Rationale*: `[]` does an insert (of the default element) if the item doesn't\n     exist in the map yet. This has resulted in memory leaks in the past, as well as\n-    race conditions (expecting read-read behavior). Using [] is fine for *writing* to a map\n+    race conditions (expecting read-read behavior). Using `[]` is fine for *writing* to a map\n \n - Do not compare an iterator from one data structure with an iterator of\n   another data structure (even if of the same type)\n@@ -304,18 +304,18 @@ C++ data structures\n Strings and formatting\n ------------------------\n \n-- Be careful of LogPrint versus LogPrintf. LogPrint takes a 'category' argument, LogPrintf does not.\n+- Be careful of `LogPrint` versus `LogPrintf`. `LogPrint` takes a `category` argument, `LogPrintf` does not.\n \n   - *Rationale*: Confusion of these can result in runtime exceptions due to\n     formatting mismatch, and it is easy to get wrong because of subtly similar naming\n \n-- Use std::string, avoid C string manipulation functions\n+- Use `std::string`, avoid C string manipulation functions\n \n   - *Rationale*: C++ string handling is marginally safer, less scope for\n-    buffer overflows and surprises with \\0 characters. Also some C string manipulations\n+    buffer overflows and surprises with `\\0` characters. Also some C string manipulations\n     tend to act differently depending on platform, or even the user locale\n \n-- Use ParseInt32, ParseInt64, ParseDouble from `utilstrencodings.h` for number parsing\n+- Use `ParseInt32`, `ParseInt64`, `ParseDouble` from `utilstrencodings.h` for number parsing\n \n   - *Rationale*: These functions do overflow checking, and avoid pesky locale issues\n "
      },
      {
        "sha": "afaece829c77d4832364231db459f25c23450e49",
        "filename": "doc/unit-tests.md",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f761e87c3fd0ad50d41925d8c2ac2c429403b44/doc/unit-tests.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f761e87c3fd0ad50d41925d8c2ac2c429403b44/doc/unit-tests.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/unit-tests.md?ref=8f761e87c3fd0ad50d41925d8c2ac2c429403b44",
        "patch": "@@ -1,18 +1,18 @@\n Compiling/running unit tests\n ------------------------------------\n \n-Unit tests will be automatically compiled if dependencies were met in configure\n+Unit tests will be automatically compiled if dependencies were met in `./configure`\n and tests weren't explicitly disabled.\n \n-After configuring, they can be run with 'make check'.\n+After configuring, they can be run with `make check`.\n \n-To run the bitcoind tests manually, launch src/test/test_bitcoin .\n+To run the bitcoind tests manually, launch `src/test/test_bitcoin`.\n \n To add more bitcoind tests, add `BOOST_AUTO_TEST_CASE` functions to the existing\n-.cpp files in the test/ directory or add new .cpp files that\n+.cpp files in the `test/` directory or add new .cpp files that\n implement new BOOST_AUTO_TEST_SUITE sections.\n \n-To run the bitcoin-qt tests manually, launch src/qt/test/test_bitcoin-qt\n+To run the bitcoin-qt tests manually, launch `src/qt/test/test_bitcoin-qt`\n \n To add more bitcoin-qt tests, add them to the `src/qt/test/` directory and\n the `src/qt/test/test_main.cpp` file."
      },
      {
        "sha": "c36cf9efbc47e04010b014e4f47fcfe5ec178f4d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f761e87c3fd0ad50d41925d8c2ac2c429403b44/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f761e87c3fd0ad50d41925d8c2ac2c429403b44/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8f761e87c3fd0ad50d41925d8c2ac2c429403b44",
        "patch": "@@ -393,8 +393,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageGroup(_(\"Wallet options:\"));\n     strUsage += HelpMessageOpt(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"));\n     strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), DEFAULT_KEYPOOL_SIZE));\n-    if (showDebug)\n-        strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\",\n+    strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\"),\n             CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)));\n     strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in %s/kB) to add to transactions you send (default: %s)\"),\n         CURRENCY_UNIT, FormatMoney(payTxFee.GetFeePerK())));"
      },
      {
        "sha": "db60e498dd281b70d12a498a69b84dabd4150b27",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f761e87c3fd0ad50d41925d8c2ac2c429403b44/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f761e87c3fd0ad50d41925d8c2ac2c429403b44/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=8f761e87c3fd0ad50d41925d8c2ac2c429403b44",
        "patch": "@@ -2178,7 +2178,7 @@ UniValue settxfee(const UniValue& params, bool fHelp)\n     if (fHelp || params.size() < 1 || params.size() > 1)\n         throw runtime_error(\n             \"settxfee amount\\n\"\n-            \"\\nSet the transaction fee per kB.\\n\"\n+            \"\\nSet the transaction fee per kB. Overwrites the paytxfee parameter.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. amount         (numeric, required) The transaction fee in \" + CURRENCY_UNIT + \"/kB rounded to the nearest 0.00000001\\n\"\n             \"\\nResult\\n\""
      }
    ]
  },
  {
    "sha": "6e8b07f5f3117d1346e2e720c61ba3e8b08f7cd8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZThiMDdmNWYzMTE3ZDEzNDZlMmU3MjBjNjFiYTNlOGIwOGY3Y2Q4",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2015-11-18T23:35:07Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-01T10:03:37Z"
      },
      "message": "Add rounding helper function to util.py",
      "tree": {
        "sha": "97b2e8da9f8c270c9508a993b08fc92a6528d0de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/97b2e8da9f8c270c9508a993b08fc92a6528d0de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e8b07f5f3117d1346e2e720c61ba3e8b08f7cd8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e8b07f5f3117d1346e2e720c61ba3e8b08f7cd8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6e8b07f5f3117d1346e2e720c61ba3e8b08f7cd8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e8b07f5f3117d1346e2e720c61ba3e8b08f7cd8/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f761e87c3fd0ad50d41925d8c2ac2c429403b44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f761e87c3fd0ad50d41925d8c2ac2c429403b44",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f761e87c3fd0ad50d41925d8c2ac2c429403b44"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 3,
      "deletions": 6
    },
    "files": [
      {
        "sha": "34b316a6a32e90bbc85b91fdb1ea7961128b29c5",
        "filename": "qa/rpc-tests/mempool_packages.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e8b07f5f3117d1346e2e720c61ba3e8b08f7cd8/qa/rpc-tests/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e8b07f5f3117d1346e2e720c61ba3e8b08f7cd8/qa/rpc-tests/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_packages.py?ref=6e8b07f5f3117d1346e2e720c61ba3e8b08f7cd8",
        "patch": "@@ -8,9 +8,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-def satoshi_round(amount):\n-    return  Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n-\n MAX_ANCESTORS = 25\n MAX_DESCENDANTS = 25\n "
      },
      {
        "sha": "b209ae0c163385f660bc550ee25beb65fc8a1364",
        "filename": "qa/rpc-tests/smartfees.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e8b07f5f3117d1346e2e720c61ba3e8b08f7cd8/qa/rpc-tests/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e8b07f5f3117d1346e2e720c61ba3e8b08f7cd8/qa/rpc-tests/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/smartfees.py?ref=6e8b07f5f3117d1346e2e720c61ba3e8b08f7cd8",
        "patch": "@@ -19,9 +19,6 @@\n # 4 bytes of OP_TRUE and push 2-byte redeem script of \"OP_1 OP_DROP\" or \"OP_2 OP_DROP\"\n SCRIPT_SIG = [\"0451025175\", \"0451025275\"]\n \n-def satoshi_round(amount):\n-    return  Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n-\n def small_txpuzzle_randfee(from_node, conflist, unconflist, amount, min_fee, fee_increment):\n     '''\n     Create and send a transaction with a random fee."
      },
      {
        "sha": "1a526ae06eabf342cef163ef5cf8e6e18e70f620",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e8b07f5f3117d1346e2e720c61ba3e8b08f7cd8/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e8b07f5f3117d1346e2e720c61ba3e8b08f7cd8/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=6e8b07f5f3117d1346e2e720c61ba3e8b08f7cd8",
        "patch": "@@ -404,3 +404,6 @@ def assert_raises(exc, fun, *args, **kwds):\n         raise AssertionError(\"Unexpected exception raised: \"+type(e).__name__)\n     else:\n         raise AssertionError(\"No exception raised\")\n+\n+def satoshi_round(amount):\n+    return  Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)"
      }
    ]
  },
  {
    "sha": "2b31ab90c4ca1e1a7037ad02424ac51b6b86160c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYjMxYWI5MGM0Y2ExZTFhNzAzN2FkMDI0MjRhYzUxYjZiODYxNjBj",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2015-11-19T01:55:52Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-01T10:03:57Z"
      },
      "message": "Add rpc test for prioritisetransaction",
      "tree": {
        "sha": "ba37c620f048832f3a2830b7149afe48e603c5c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba37c620f048832f3a2830b7149afe48e603c5c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b31ab90c4ca1e1a7037ad02424ac51b6b86160c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b31ab90c4ca1e1a7037ad02424ac51b6b86160c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2b31ab90c4ca1e1a7037ad02424ac51b6b86160c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b31ab90c4ca1e1a7037ad02424ac51b6b86160c/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6e8b07f5f3117d1346e2e720c61ba3e8b08f7cd8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e8b07f5f3117d1346e2e720c61ba3e8b08f7cd8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6e8b07f5f3117d1346e2e720c61ba3e8b08f7cd8"
      }
    ],
    "stats": {
      "total": 148,
      "additions": 148,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f7d8be69ae61115f6db863bb168fe118ae6584f6",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b31ab90c4ca1e1a7037ad02424ac51b6b86160c/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b31ab90c4ca1e1a7037ad02424ac51b6b86160c/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=2b31ab90c4ca1e1a7037ad02424ac51b6b86160c",
        "patch": "@@ -99,6 +99,7 @@\n     'disablewallet.py',\n     'sendheaders.py',\n     'keypool.py',\n+    'prioritise_transaction.py',\n ]\n testScriptsExt = [\n     'bip65-cltv.py',"
      },
      {
        "sha": "f376ceee5ecb637ccaf91f489b69160bfc1461ba",
        "filename": "qa/rpc-tests/prioritise_transaction.py",
        "status": "added",
        "additions": 147,
        "deletions": 0,
        "changes": 147,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b31ab90c4ca1e1a7037ad02424ac51b6b86160c/qa/rpc-tests/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b31ab90c4ca1e1a7037ad02424ac51b6b86160c/qa/rpc-tests/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/prioritise_transaction.py?ref=2b31ab90c4ca1e1a7037ad02424ac51b6b86160c",
        "patch": "@@ -0,0 +1,147 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test PrioritiseTransaction code\n+#\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+COIN = 100000000\n+\n+class PrioritiseTransactionTest(BitcoinTestFramework):\n+\n+    def __init__(self):\n+        # Some pre-processing to create a bunch of OP_RETURN txouts to insert into transactions we create\n+        # So we have big transactions (and therefore can't fit very many into each block)\n+        # create one script_pubkey\n+        script_pubkey = \"6a4d0200\" #OP_RETURN OP_PUSH2 512 bytes\n+        for i in xrange (512):\n+            script_pubkey = script_pubkey + \"01\"\n+        # concatenate 128 txouts of above script_pubkey which we'll insert before the txout for change\n+        self.txouts = \"81\"\n+        for k in xrange(128):\n+            # add txout value\n+            self.txouts = self.txouts + \"0000000000000000\"\n+            # add length of script_pubkey\n+            self.txouts = self.txouts + \"fd0402\"\n+            # add script_pubkey\n+            self.txouts = self.txouts + script_pubkey\n+\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 1)\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.is_network_split = False\n+\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-printpriority=1\"]))\n+        self.relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+\n+    def create_confirmed_utxos(self, count):\n+        self.nodes[0].generate(int(0.5*count)+101)\n+        utxos = self.nodes[0].listunspent()\n+        iterations = count - len(utxos)\n+        addr1 = self.nodes[0].getnewaddress()\n+        addr2 = self.nodes[0].getnewaddress()\n+        if iterations <= 0:\n+            return utxos\n+        for i in xrange(iterations):\n+            t = utxos.pop()\n+            fee = self.relayfee\n+            inputs = []\n+            inputs.append({ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"]})\n+            outputs = {}\n+            send_value = t['amount'] - fee\n+            outputs[addr1] = satoshi_round(send_value/2)\n+            outputs[addr2] = satoshi_round(send_value/2)\n+            raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n+            signed_tx = self.nodes[0].signrawtransaction(raw_tx)[\"hex\"]\n+            txid = self.nodes[0].sendrawtransaction(signed_tx)\n+\n+        while (self.nodes[0].getmempoolinfo()['size'] > 0):\n+            self.nodes[0].generate(1)\n+\n+        utxos = self.nodes[0].listunspent()\n+        assert(len(utxos) >= count)\n+        return utxos\n+\n+    def create_lots_of_big_transactions(self, utxos, fee):\n+        addr = self.nodes[0].getnewaddress()\n+        txids = []\n+        for i in xrange(len(utxos)):\n+            t = utxos.pop()\n+            inputs = []\n+            inputs.append({ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"]})\n+            outputs = {}\n+            send_value = t['amount'] - fee\n+            outputs[addr] = satoshi_round(send_value)\n+            rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n+            newtx = rawtx[0:92]\n+            newtx = newtx + self.txouts\n+            newtx = newtx + rawtx[94:]\n+            signresult = self.nodes[0].signrawtransaction(newtx, None, None, \"NONE\")\n+            txid = self.nodes[0].sendrawtransaction(signresult[\"hex\"], True)\n+            txids.append(txid)\n+        return txids\n+\n+    def run_test(self):\n+        utxos = self.create_confirmed_utxos(90)\n+        base_fee = self.relayfee*100 # our transactions are smaller than 100kb\n+        txids = []\n+\n+        # Create 3 batches of transactions at 3 different fee rate levels\n+        for i in xrange(3):\n+            txids.append([])\n+            txids[i] = self.create_lots_of_big_transactions(utxos[30*i:30*i+30], (i+1)*base_fee)\n+\n+        # add a fee delta to something in the cheapest bucket and make sure it gets mined\n+        # also check that a different entry in the cheapest bucket is NOT mined (lower\n+        # the priority to ensure its not mined due to priority)\n+        self.nodes[0].prioritisetransaction(txids[0][0], 0, int(3*base_fee*COIN))\n+        self.nodes[0].prioritisetransaction(txids[0][1], -1e15, 0)\n+\n+        self.nodes[0].generate(1)\n+\n+        mempool = self.nodes[0].getrawmempool()\n+        print \"Assert that prioritised transasction was mined\"\n+        assert(txids[0][0] not in mempool)\n+        assert(txids[0][1] in mempool)\n+\n+        high_fee_tx = None\n+        for x in txids[2]:\n+            if x not in mempool:\n+                high_fee_tx = x\n+\n+        # Something high-fee should have been mined!\n+        assert(high_fee_tx != None)\n+\n+        # Add a prioritisation before a tx is in the mempool (de-prioritising a\n+        # high-fee transaction).\n+        self.nodes[0].prioritisetransaction(high_fee_tx, -1e15, -int(2*base_fee*COIN))\n+\n+        # Add everything back to mempool\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        # Check to make sure our high fee rate tx is back in the mempool\n+        mempool = self.nodes[0].getrawmempool()\n+        assert(high_fee_tx in mempool)\n+\n+        # Now verify the high feerate transaction isn't mined.\n+        self.nodes[0].generate(5)\n+\n+        # High fee transaction should not have been mined, but other high fee rate\n+        # transactions should have been.\n+        mempool = self.nodes[0].getrawmempool()\n+        print \"Assert that de-prioritised transaction is still in mempool\"\n+        assert(high_fee_tx in mempool)\n+        for x in txids[2]:\n+            if (x != high_fee_tx):\n+                assert(x not in mempool)\n+\n+if __name__ == '__main__':\n+    PrioritiseTransactionTest().main()"
      }
    ]
  },
  {
    "sha": "6abf6eb7bb777a5c4f22e9db6d4544281277378f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YWJmNmViN2JiNzc3YTVjNGYyMmU5ZGI2ZDQ1NDQyODEyNzczNzhm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-01T10:04:31Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-01T10:04:32Z"
      },
      "message": "Merge pull request #7063\n\n2b31ab9 Add rpc test for prioritisetransaction (Suhas Daftuar)\n6e8b07f Add rounding helper function to util.py (Suhas Daftuar)",
      "tree": {
        "sha": "ba37c620f048832f3a2830b7149afe48e603c5c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba37c620f048832f3a2830b7149afe48e603c5c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6abf6eb7bb777a5c4f22e9db6d4544281277378f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWXXCwAAoJEHSBCwEjRsmmDjcH/iULBUADFhCo/K5sW8cXpI9e\nNXfN5kVLeDBhQkUp90CxPAALZugDncJHkNK/y5DtyHuJEtPoTfOhGF1SoTFRb891\nmtBxc3LvAHmGmZlUusPJxFbimpc0t3igrz2yaxSJvFygGHqW8PMpsREe3CB3913X\nBbQXHdaL1wqW0/3QS0VtFzpraGpfjADC5+Q9uVP3BRdckKqx4PhCb+4FDwGTlaTe\nzh+x13dGbDIILtxYF4ra3oHBf5euWnrPfmH4dseIf3Rl/k43O9oMM6K5/F12+0I6\nmnhSlFub/KZYPm+2ghMQ7dlqWKzsmRbN6SKlSltgKn1DntAoK5TS97ho4s9GjgQ=\n=FNjJ\n-----END PGP SIGNATURE-----",
        "payload": "tree ba37c620f048832f3a2830b7149afe48e603c5c5\nparent 8f761e87c3fd0ad50d41925d8c2ac2c429403b44\nparent 2b31ab90c4ca1e1a7037ad02424ac51b6b86160c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448964271 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448964272 +0100\n\nMerge pull request #7063\n\n2b31ab9 Add rpc test for prioritisetransaction (Suhas Daftuar)\n6e8b07f Add rounding helper function to util.py (Suhas Daftuar)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6abf6eb7bb777a5c4f22e9db6d4544281277378f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6abf6eb7bb777a5c4f22e9db6d4544281277378f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6abf6eb7bb777a5c4f22e9db6d4544281277378f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f761e87c3fd0ad50d41925d8c2ac2c429403b44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f761e87c3fd0ad50d41925d8c2ac2c429403b44",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f761e87c3fd0ad50d41925d8c2ac2c429403b44"
      },
      {
        "sha": "2b31ab90c4ca1e1a7037ad02424ac51b6b86160c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b31ab90c4ca1e1a7037ad02424ac51b6b86160c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2b31ab90c4ca1e1a7037ad02424ac51b6b86160c"
      }
    ],
    "stats": {
      "total": 157,
      "additions": 151,
      "deletions": 6
    },
    "files": [
      {
        "sha": "f7d8be69ae61115f6db863bb168fe118ae6584f6",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6abf6eb7bb777a5c4f22e9db6d4544281277378f/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6abf6eb7bb777a5c4f22e9db6d4544281277378f/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=6abf6eb7bb777a5c4f22e9db6d4544281277378f",
        "patch": "@@ -99,6 +99,7 @@\n     'disablewallet.py',\n     'sendheaders.py',\n     'keypool.py',\n+    'prioritise_transaction.py',\n ]\n testScriptsExt = [\n     'bip65-cltv.py',"
      },
      {
        "sha": "34b316a6a32e90bbc85b91fdb1ea7961128b29c5",
        "filename": "qa/rpc-tests/mempool_packages.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6abf6eb7bb777a5c4f22e9db6d4544281277378f/qa/rpc-tests/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6abf6eb7bb777a5c4f22e9db6d4544281277378f/qa/rpc-tests/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_packages.py?ref=6abf6eb7bb777a5c4f22e9db6d4544281277378f",
        "patch": "@@ -8,9 +8,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-def satoshi_round(amount):\n-    return  Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n-\n MAX_ANCESTORS = 25\n MAX_DESCENDANTS = 25\n "
      },
      {
        "sha": "f376ceee5ecb637ccaf91f489b69160bfc1461ba",
        "filename": "qa/rpc-tests/prioritise_transaction.py",
        "status": "added",
        "additions": 147,
        "deletions": 0,
        "changes": 147,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6abf6eb7bb777a5c4f22e9db6d4544281277378f/qa/rpc-tests/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6abf6eb7bb777a5c4f22e9db6d4544281277378f/qa/rpc-tests/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/prioritise_transaction.py?ref=6abf6eb7bb777a5c4f22e9db6d4544281277378f",
        "patch": "@@ -0,0 +1,147 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test PrioritiseTransaction code\n+#\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+COIN = 100000000\n+\n+class PrioritiseTransactionTest(BitcoinTestFramework):\n+\n+    def __init__(self):\n+        # Some pre-processing to create a bunch of OP_RETURN txouts to insert into transactions we create\n+        # So we have big transactions (and therefore can't fit very many into each block)\n+        # create one script_pubkey\n+        script_pubkey = \"6a4d0200\" #OP_RETURN OP_PUSH2 512 bytes\n+        for i in xrange (512):\n+            script_pubkey = script_pubkey + \"01\"\n+        # concatenate 128 txouts of above script_pubkey which we'll insert before the txout for change\n+        self.txouts = \"81\"\n+        for k in xrange(128):\n+            # add txout value\n+            self.txouts = self.txouts + \"0000000000000000\"\n+            # add length of script_pubkey\n+            self.txouts = self.txouts + \"fd0402\"\n+            # add script_pubkey\n+            self.txouts = self.txouts + script_pubkey\n+\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 1)\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.is_network_split = False\n+\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-printpriority=1\"]))\n+        self.relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+\n+    def create_confirmed_utxos(self, count):\n+        self.nodes[0].generate(int(0.5*count)+101)\n+        utxos = self.nodes[0].listunspent()\n+        iterations = count - len(utxos)\n+        addr1 = self.nodes[0].getnewaddress()\n+        addr2 = self.nodes[0].getnewaddress()\n+        if iterations <= 0:\n+            return utxos\n+        for i in xrange(iterations):\n+            t = utxos.pop()\n+            fee = self.relayfee\n+            inputs = []\n+            inputs.append({ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"]})\n+            outputs = {}\n+            send_value = t['amount'] - fee\n+            outputs[addr1] = satoshi_round(send_value/2)\n+            outputs[addr2] = satoshi_round(send_value/2)\n+            raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n+            signed_tx = self.nodes[0].signrawtransaction(raw_tx)[\"hex\"]\n+            txid = self.nodes[0].sendrawtransaction(signed_tx)\n+\n+        while (self.nodes[0].getmempoolinfo()['size'] > 0):\n+            self.nodes[0].generate(1)\n+\n+        utxos = self.nodes[0].listunspent()\n+        assert(len(utxos) >= count)\n+        return utxos\n+\n+    def create_lots_of_big_transactions(self, utxos, fee):\n+        addr = self.nodes[0].getnewaddress()\n+        txids = []\n+        for i in xrange(len(utxos)):\n+            t = utxos.pop()\n+            inputs = []\n+            inputs.append({ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"]})\n+            outputs = {}\n+            send_value = t['amount'] - fee\n+            outputs[addr] = satoshi_round(send_value)\n+            rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n+            newtx = rawtx[0:92]\n+            newtx = newtx + self.txouts\n+            newtx = newtx + rawtx[94:]\n+            signresult = self.nodes[0].signrawtransaction(newtx, None, None, \"NONE\")\n+            txid = self.nodes[0].sendrawtransaction(signresult[\"hex\"], True)\n+            txids.append(txid)\n+        return txids\n+\n+    def run_test(self):\n+        utxos = self.create_confirmed_utxos(90)\n+        base_fee = self.relayfee*100 # our transactions are smaller than 100kb\n+        txids = []\n+\n+        # Create 3 batches of transactions at 3 different fee rate levels\n+        for i in xrange(3):\n+            txids.append([])\n+            txids[i] = self.create_lots_of_big_transactions(utxos[30*i:30*i+30], (i+1)*base_fee)\n+\n+        # add a fee delta to something in the cheapest bucket and make sure it gets mined\n+        # also check that a different entry in the cheapest bucket is NOT mined (lower\n+        # the priority to ensure its not mined due to priority)\n+        self.nodes[0].prioritisetransaction(txids[0][0], 0, int(3*base_fee*COIN))\n+        self.nodes[0].prioritisetransaction(txids[0][1], -1e15, 0)\n+\n+        self.nodes[0].generate(1)\n+\n+        mempool = self.nodes[0].getrawmempool()\n+        print \"Assert that prioritised transasction was mined\"\n+        assert(txids[0][0] not in mempool)\n+        assert(txids[0][1] in mempool)\n+\n+        high_fee_tx = None\n+        for x in txids[2]:\n+            if x not in mempool:\n+                high_fee_tx = x\n+\n+        # Something high-fee should have been mined!\n+        assert(high_fee_tx != None)\n+\n+        # Add a prioritisation before a tx is in the mempool (de-prioritising a\n+        # high-fee transaction).\n+        self.nodes[0].prioritisetransaction(high_fee_tx, -1e15, -int(2*base_fee*COIN))\n+\n+        # Add everything back to mempool\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        # Check to make sure our high fee rate tx is back in the mempool\n+        mempool = self.nodes[0].getrawmempool()\n+        assert(high_fee_tx in mempool)\n+\n+        # Now verify the high feerate transaction isn't mined.\n+        self.nodes[0].generate(5)\n+\n+        # High fee transaction should not have been mined, but other high fee rate\n+        # transactions should have been.\n+        mempool = self.nodes[0].getrawmempool()\n+        print \"Assert that de-prioritised transaction is still in mempool\"\n+        assert(high_fee_tx in mempool)\n+        for x in txids[2]:\n+            if (x != high_fee_tx):\n+                assert(x not in mempool)\n+\n+if __name__ == '__main__':\n+    PrioritiseTransactionTest().main()"
      },
      {
        "sha": "b209ae0c163385f660bc550ee25beb65fc8a1364",
        "filename": "qa/rpc-tests/smartfees.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6abf6eb7bb777a5c4f22e9db6d4544281277378f/qa/rpc-tests/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6abf6eb7bb777a5c4f22e9db6d4544281277378f/qa/rpc-tests/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/smartfees.py?ref=6abf6eb7bb777a5c4f22e9db6d4544281277378f",
        "patch": "@@ -19,9 +19,6 @@\n # 4 bytes of OP_TRUE and push 2-byte redeem script of \"OP_1 OP_DROP\" or \"OP_2 OP_DROP\"\n SCRIPT_SIG = [\"0451025175\", \"0451025275\"]\n \n-def satoshi_round(amount):\n-    return  Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n-\n def small_txpuzzle_randfee(from_node, conflist, unconflist, amount, min_fee, fee_increment):\n     '''\n     Create and send a transaction with a random fee."
      },
      {
        "sha": "1a526ae06eabf342cef163ef5cf8e6e18e70f620",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6abf6eb7bb777a5c4f22e9db6d4544281277378f/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6abf6eb7bb777a5c4f22e9db6d4544281277378f/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=6abf6eb7bb777a5c4f22e9db6d4544281277378f",
        "patch": "@@ -404,3 +404,6 @@ def assert_raises(exc, fun, *args, **kwds):\n         raise AssertionError(\"Unexpected exception raised: \"+type(e).__name__)\n     else:\n         raise AssertionError(\"No exception raised\")\n+\n+def satoshi_round(amount):\n+    return  Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)"
      }
    ]
  },
  {
    "sha": "6da12dff287ac08c1d8aa847794abb8e582d606c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZGExMmRmZjI4N2FjMDhjMWQ4YWE4NDc3OTRhYmI4ZTU4MmQ2MDZj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-01T10:45:33Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-01T10:55:10Z"
      },
      "message": "qt: use QMetaObject::invokeMethod for cross-thread signaling in clientmodel\n\nIt's surprising to me that Q_EMIT even worked for this.\n\nBut it doesn't build in Qt4, so switch back to\n`QMetaObject::invokeMethod`. Fixes #7138.",
      "tree": {
        "sha": "a2a412aa2bdb8b6549036ba58c7c36ada4a3d5aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2a412aa2bdb8b6549036ba58c7c36ada4a3d5aa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6da12dff287ac08c1d8aa847794abb8e582d606c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6da12dff287ac08c1d8aa847794abb8e582d606c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6da12dff287ac08c1d8aa847794abb8e582d606c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6da12dff287ac08c1d8aa847794abb8e582d606c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6abf6eb7bb777a5c4f22e9db6d4544281277378f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6abf6eb7bb777a5c4f22e9db6d4544281277378f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6abf6eb7bb777a5c4f22e9db6d4544281277378f"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8149dfdf5a8791f5b20307e4b47d6f5fabaf9591",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6da12dff287ac08c1d8aa847794abb8e582d606c/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6da12dff287ac08c1d8aa847794abb8e582d606c/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=6da12dff287ac08c1d8aa847794abb8e582d606c",
        "patch": "@@ -253,7 +253,10 @@ static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, const CB\n     // if we are in-sync, update the UI regardless of last update time\n     if (!initialSync || now - nLastBlockTipUpdateNotification > MODEL_UPDATE_DELAY) {\n         //pass a async signal to the UI thread\n-        Q_EMIT clientmodel->numBlocksChanged(pIndex->nHeight, QDateTime::fromTime_t(pIndex->GetBlockTime()), clientmodel->getVerificationProgress(pIndex));\n+        QMetaObject::invokeMethod(clientmodel, \"numBlocksChanged\", Qt::QueuedConnection,\n+                                  Q_ARG(int, pIndex->nHeight),\n+                                  Q_ARG(QDateTime, QDateTime::fromTime_t(pIndex->GetBlockTime())),\n+                                  Q_ARG(double, clientmodel->getVerificationProgress(pIndex)));\n         nLastBlockTipUpdateNotification = now;\n     }\n }"
      }
    ]
  },
  {
    "sha": "9afbd96919afd1f773e4c2633b0cfd6068e2b228",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YWZiZDk2OTE5YWZkMWY3NzNlNGMyNjMzYjBjZmQ2MDY4ZTJiMjI4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-01T11:38:55Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-01T11:39:34Z"
      },
      "message": "Merge pull request #7022\n\n50947ef Change default block priority size to 0 (Alex Morcos)",
      "tree": {
        "sha": "13792e87a1e38723aba442346ba0d4de6ec6e6d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/13792e87a1e38723aba442346ba0d4de6ec6e6d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9afbd96919afd1f773e4c2633b0cfd6068e2b228",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWXYb2AAoJEHSBCwEjRsmmE6YIAMy6KYjCG2EOgAuIfRy2mVk+\nt/eZyQx4myV1a7PAfjEabO9Gvwqd9cB8mAuLZQQ84r7AbWimddTtGUsAdc0v5tIf\nNCEWIjqrl8hyaeWY7CiQgQIBKghwk8XGIZPXrKXNG/yfa80Nk0CuqTo9guVfxo49\nyLt9+2p4fqfvWakzNIk1mgG8bCv1PvKLZDs1HUzPMte0L/KKZzFfD4Z/BTEXrHoe\nSjc4/P1efOBGu72SlYRpZAQ8ac0ckkSh0E4fwpv1q0nr7CtijuFN8q8zfV9pJHSc\nMb3H4N4QorwviXu5gqBNdpz0Y2uTjV4GiqGf/jXj0SFF3nrB5UmE35f9XrN3tLQ=\n=2quI\n-----END PGP SIGNATURE-----",
        "payload": "tree 13792e87a1e38723aba442346ba0d4de6ec6e6d4\nparent 6abf6eb7bb777a5c4f22e9db6d4544281277378f\nparent 50947ef23f46428ed8a260e3d4ff5ac0402ed727\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448969935 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448969974 +0100\n\nMerge pull request #7022\n\n50947ef Change default block priority size to 0 (Alex Morcos)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9afbd96919afd1f773e4c2633b0cfd6068e2b228",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9afbd96919afd1f773e4c2633b0cfd6068e2b228",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9afbd96919afd1f773e4c2633b0cfd6068e2b228/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6abf6eb7bb777a5c4f22e9db6d4544281277378f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6abf6eb7bb777a5c4f22e9db6d4544281277378f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6abf6eb7bb777a5c4f22e9db6d4544281277378f"
      },
      {
        "sha": "50947ef23f46428ed8a260e3d4ff5ac0402ed727",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50947ef23f46428ed8a260e3d4ff5ac0402ed727",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/50947ef23f46428ed8a260e3d4ff5ac0402ed727"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b7e90a8a8bcdd10305c081fa4e5d062b6e1ccaf1",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9afbd96919afd1f773e4c2633b0cfd6068e2b228/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9afbd96919afd1f773e4c2633b0cfd6068e2b228/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=9afbd96919afd1f773e4c2633b0cfd6068e2b228",
        "patch": "@@ -217,7 +217,8 @@ def start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=\n     datadir = os.path.join(dirname, \"node\"+str(i))\n     if binary is None:\n         binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n-    args = [ binary, \"-datadir=\"+datadir, \"-keypool=1\", \"-discover=0\", \"-rest\" ]\n+    # RPC tests still depend on free transactions\n+    args = [ binary, \"-datadir=\"+datadir, \"-keypool=1\", \"-discover=0\", \"-rest\", \"-blockprioritysize=50000\" ]\n     if extra_args is not None: args.extend(extra_args)\n     bitcoind_processes[i] = subprocess.Popen(args)\n     devnull = open(os.devnull, \"w\")"
      },
      {
        "sha": "31655f2f3a2f6b0d5fee15f31c1a5f04c66349df",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9afbd96919afd1f773e4c2633b0cfd6068e2b228/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9afbd96919afd1f773e4c2633b0cfd6068e2b228/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=9afbd96919afd1f773e4c2633b0cfd6068e2b228",
        "patch": "@@ -18,7 +18,7 @@ class CCoinsViewCache;\n static const unsigned int DEFAULT_BLOCK_MAX_SIZE = 750000;\n static const unsigned int DEFAULT_BLOCK_MIN_SIZE = 0;\n /** Default for -blockprioritysize, maximum space for zero/low-fee transactions **/\n-static const unsigned int DEFAULT_BLOCK_PRIORITY_SIZE = 50000;\n+static const unsigned int DEFAULT_BLOCK_PRIORITY_SIZE = 0;\n /** The maximum size for transactions we're willing to relay/mine */\n static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n /** Maximum number of signature check operations in an IsStandard() P2SH script */"
      }
    ]
  },
  {
    "sha": "2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZWY1ZmZhNTlhZmFmOWIxZDMwY2MwYzk3ZTZiMWFiMmI3YWIzMGY0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-01T11:41:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-01T12:17:34Z"
      },
      "message": "Merge pull request #6915\n\n2d8860e Fix removeForReorg to use MedianTimePast (Suhas Daftuar)\nb7fa4aa Don't call removeForReorg if DisconnectTip fails (Suhas Daftuar)\n7e49f5f Track coinbase spends in CTxMemPoolEntry (Suhas Daftuar)\nbb8ea1f removeForReorg calls once-per-disconnect-> once-per-reorg (Matt Corallo)\n474b84a Make indentation in ActivateBestChainStep readable (Matt Corallo)\nb0a064c Fix comment in removeForReorg (Matt Corallo)\n9b060e5 Fix removal of time-locked transactions during reorg (Matt Corallo)\n0c9959a Add failing test checking timelocked-txn removal during reorg (Matt Corallo)",
      "tree": {
        "sha": "3c4ac4a7ca5ac44c5e8ef1cae9545f7c196aad87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c4ac4a7ca5ac44c5e8ef1cae9545f7c196aad87"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWXY/eAAoJEHSBCwEjRsmm64kH/jYnCttM2PorfcXafvIUN/gW\nFfNyeentzuN0apv+ZHgifmyqMfIf6URvhweIqmFw2QqI+KJjdiZGrW/DUUtWFtay\nsBXlf7Cmi0YllXcClFiEm3MgwCk4Ataoo1EgzceFq0XZs3J1g1DNB/sZdmtpHBmF\nRk7E8erPavnAW9mCD8lKhhAQBVouB6IGYU4s8f+orqBDsFHrrivnPNGceQF7aTDm\n8wliTCQk+tb+l3x8swS/KMWOUcLlqteM8e9pH8DHr48WpAEiLCZQb3PELk75El+C\n+Y+wdUGnvYxvVgcjohqd6iMyu5lQy7gG+w+PO9R1XP3uePHBzGhCw7Yt3aF013s=\n=8TPK\n-----END PGP SIGNATURE-----",
        "payload": "tree 3c4ac4a7ca5ac44c5e8ef1cae9545f7c196aad87\nparent 9afbd96919afd1f773e4c2633b0cfd6068e2b228\nparent 2d8860e820e2ca73000f558eb9686206bec2652a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448970117 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448972254 +0100\n\nMerge pull request #6915\n\n2d8860e Fix removeForReorg to use MedianTimePast (Suhas Daftuar)\nb7fa4aa Don't call removeForReorg if DisconnectTip fails (Suhas Daftuar)\n7e49f5f Track coinbase spends in CTxMemPoolEntry (Suhas Daftuar)\nbb8ea1f removeForReorg calls once-per-disconnect-> once-per-reorg (Matt Corallo)\n474b84a Make indentation in ActivateBestChainStep readable (Matt Corallo)\nb0a064c Fix comment in removeForReorg (Matt Corallo)\n9b060e5 Fix removal of time-locked transactions during reorg (Matt Corallo)\n0c9959a Add failing test checking timelocked-txn removal during reorg (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9afbd96919afd1f773e4c2633b0cfd6068e2b228",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9afbd96919afd1f773e4c2633b0cfd6068e2b228",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9afbd96919afd1f773e4c2633b0cfd6068e2b228"
      },
      {
        "sha": "2d8860e820e2ca73000f558eb9686206bec2652a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d8860e820e2ca73000f558eb9686206bec2652a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2d8860e820e2ca73000f558eb9686206bec2652a"
      }
    ],
    "stats": {
      "total": 193,
      "additions": 116,
      "deletions": 77
    },
    "files": [
      {
        "sha": "df71e44b6037d9d2df2d4b621c1ed82894a5cd21",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4",
        "patch": "@@ -82,7 +82,7 @@\n     'rawtransactions.py',\n     'rest.py',\n     'mempool_spendcoinbase.py',\n-    'mempool_coinbase_spends.py',\n+    'mempool_reorg.py',\n     'httpbasics.py',\n     'multi_rpc.py',\n     'zapwallettxes.py',"
      },
      {
        "sha": "fdbaf689ad5b223a82b632ed9af34010de0f1fb3",
        "filename": "qa/rpc-tests/mempool_reorg.py",
        "status": "renamed",
        "additions": 20,
        "deletions": 6,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4/qa/rpc-tests/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4/qa/rpc-tests/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_reorg.py?ref=2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4",
        "patch": "@@ -52,32 +52,46 @@ def run_test(self):\n         # 3. Indirect (coinbase and child both in chain) : spend_103 and spend_103_1\n         # Use invalidatblock to make all of the above coinbase spends invalid (immature coinbase),\n         # and make sure the mempool code behaves correctly.\n-        b = [ self.nodes[0].getblockhash(n) for n in range(102, 105) ]\n+        b = [ self.nodes[0].getblockhash(n) for n in range(101, 105) ]\n         coinbase_txids = [ self.nodes[0].getblock(h)['tx'][0] for h in b ]\n-        spend_101_raw = self.create_tx(coinbase_txids[0], node1_address, 50)\n-        spend_102_raw = self.create_tx(coinbase_txids[1], node0_address, 50)\n-        spend_103_raw = self.create_tx(coinbase_txids[2], node0_address, 50)\n+        spend_101_raw = self.create_tx(coinbase_txids[1], node1_address, 50)\n+        spend_102_raw = self.create_tx(coinbase_txids[2], node0_address, 50)\n+        spend_103_raw = self.create_tx(coinbase_txids[3], node0_address, 50)\n+\n+        # Create a block-height-locked transaction which will be invalid after reorg\n+        timelock_tx = self.nodes[0].createrawtransaction([{\"txid\": coinbase_txids[0], \"vout\": 0}], {node0_address: 50})\n+        # Set the time lock\n+        timelock_tx = timelock_tx.replace(\"ffffffff\", \"11111111\", 1)\n+        timelock_tx = timelock_tx[:-8] + hex(self.nodes[0].getblockcount() + 2)[2:] + \"000000\"\n+        timelock_tx = self.nodes[0].signrawtransaction(timelock_tx)[\"hex\"]\n+        assert_raises(JSONRPCException, self.nodes[0].sendrawtransaction, timelock_tx)\n \n         # Broadcast and mine spend_102 and 103:\n         spend_102_id = self.nodes[0].sendrawtransaction(spend_102_raw)\n         spend_103_id = self.nodes[0].sendrawtransaction(spend_103_raw)\n         self.nodes[0].generate(1)\n+        assert_raises(JSONRPCException, self.nodes[0].sendrawtransaction, timelock_tx)\n \n         # Create 102_1 and 103_1:\n         spend_102_1_raw = self.create_tx(spend_102_id, node1_address, 50)\n         spend_103_1_raw = self.create_tx(spend_103_id, node1_address, 50)\n \n         # Broadcast and mine 103_1:\n         spend_103_1_id = self.nodes[0].sendrawtransaction(spend_103_1_raw)\n-        self.nodes[0].generate(1)\n+        last_block = self.nodes[0].generate(1)\n+        timelock_tx_id = self.nodes[0].sendrawtransaction(timelock_tx)\n \n         # ... now put spend_101 and spend_102_1 in memory pools:\n         spend_101_id = self.nodes[0].sendrawtransaction(spend_101_raw)\n         spend_102_1_id = self.nodes[0].sendrawtransaction(spend_102_1_raw)\n \n         self.sync_all()\n \n-        assert_equal(set(self.nodes[0].getrawmempool()), set([ spend_101_id, spend_102_1_id ]))\n+        assert_equal(set(self.nodes[0].getrawmempool()), set([ spend_101_id, spend_102_1_id, timelock_tx_id ]))\n+\n+        for node in self.nodes:\n+            node.invalidateblock(last_block[0])\n+        assert_equal(set(self.nodes[0].getrawmempool()), set([ spend_101_id, spend_102_1_id, spend_103_1_id ]))\n \n         # Use invalidateblock to re-org back and make all those coinbase spends\n         # immature/invalid:",
        "previous_filename": "qa/rpc-tests/mempool_coinbase_spends.py"
      },
      {
        "sha": "162cd03b3029e99adfff9f21e7855d221127d243",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 52,
        "deletions": 41,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4",
        "patch": "@@ -953,7 +953,18 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CAmount inChainInputValue;\n         double dPriority = view.GetPriority(tx, chainActive.Height(), inChainInputValue);\n \n-        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx), inChainInputValue);\n+        // Keep track of transactions that spend a coinbase, which we re-scan\n+        // during reorgs to ensure COINBASE_MATURITY is still met.\n+        bool fSpendsCoinbase = false;\n+        BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n+            const CCoins *coins = view.AccessCoins(txin.prevout.hash);\n+            if (coins->IsCoinBase()) {\n+                fSpendsCoinbase = true;\n+                break;\n+            }\n+        }\n+\n+        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx), inChainInputValue, fSpendsCoinbase);\n         unsigned int nSize = entry.GetTxSize();\n \n         // Don't accept it if it can't get into a block\n@@ -2310,12 +2321,11 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n     }\n }\n \n-/** Disconnect chainActive's tip. You want to manually re-limit mempool size after this */\n+/** Disconnect chainActive's tip. You probably want to call mempool.removeForReorg and manually re-limit mempool size after this, with cs_main held. */\n bool static DisconnectTip(CValidationState& state, const Consensus::Params& consensusParams)\n {\n     CBlockIndex *pindexDelete = chainActive.Tip();\n     assert(pindexDelete);\n-    mempool.check(pcoinsTip);\n     // Read block from disk.\n     CBlock block;\n     if (!ReadBlockFromDisk(block, pindexDelete, consensusParams))\n@@ -2350,8 +2360,6 @@ bool static DisconnectTip(CValidationState& state, const Consensus::Params& cons\n     // UpdateTransactionsFromBlock finds descendants of any transactions in this\n     // block that were added back and cleans up the mempool state.\n     mempool.UpdateTransactionsFromBlock(vHashUpdate);\n-    mempool.removeCoinbaseSpends(pcoinsTip, pindexDelete->nHeight);\n-    mempool.check(pcoinsTip);\n     // Update chainActive and related variables.\n     UpdateTip(pindexDelete->pprev);\n     // Let wallets know transactions went from 1-confirmed to\n@@ -2375,7 +2383,6 @@ static int64_t nTimePostConnect = 0;\n bool static ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const CBlock* pblock)\n {\n     assert(pindexNew->pprev == chainActive.Tip());\n-    mempool.check(pcoinsTip);\n     // Read block from disk.\n     int64_t nTime1 = GetTimeMicros();\n     CBlock block;\n@@ -2412,7 +2419,6 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n     // Remove conflicting transactions from the mempool.\n     list<CTransaction> txConflicted;\n     mempool.removeForBlock(pblock->vtx, pindexNew->nHeight, txConflicted, !IsInitialBlockDownload());\n-    mempool.check(pcoinsTip);\n     // Update chainActive & related variables.\n     UpdateTip(pindexNew);\n     // Tell wallet about transactions that went from mempool\n@@ -2525,46 +2531,49 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n     bool fContinue = true;\n     int nHeight = pindexFork ? pindexFork->nHeight : -1;\n     while (fContinue && nHeight != pindexMostWork->nHeight) {\n-    // Don't iterate the entire list of potential improvements toward the best tip, as we likely only need\n-    // a few blocks along the way.\n-    int nTargetHeight = std::min(nHeight + 32, pindexMostWork->nHeight);\n-    vpindexToConnect.clear();\n-    vpindexToConnect.reserve(nTargetHeight - nHeight);\n-    CBlockIndex *pindexIter = pindexMostWork->GetAncestor(nTargetHeight);\n-    while (pindexIter && pindexIter->nHeight != nHeight) {\n-        vpindexToConnect.push_back(pindexIter);\n-        pindexIter = pindexIter->pprev;\n-    }\n-    nHeight = nTargetHeight;\n-\n-    // Connect new blocks.\n-    BOOST_REVERSE_FOREACH(CBlockIndex *pindexConnect, vpindexToConnect) {\n-        if (!ConnectTip(state, chainparams, pindexConnect, pindexConnect == pindexMostWork ? pblock : NULL)) {\n-            if (state.IsInvalid()) {\n-                // The block violates a consensus rule.\n-                if (!state.CorruptionPossible())\n-                    InvalidChainFound(vpindexToConnect.back());\n-                state = CValidationState();\n-                fInvalidFound = true;\n-                fContinue = false;\n-                break;\n+        // Don't iterate the entire list of potential improvements toward the best tip, as we likely only need\n+        // a few blocks along the way.\n+        int nTargetHeight = std::min(nHeight + 32, pindexMostWork->nHeight);\n+        vpindexToConnect.clear();\n+        vpindexToConnect.reserve(nTargetHeight - nHeight);\n+        CBlockIndex *pindexIter = pindexMostWork->GetAncestor(nTargetHeight);\n+        while (pindexIter && pindexIter->nHeight != nHeight) {\n+            vpindexToConnect.push_back(pindexIter);\n+            pindexIter = pindexIter->pprev;\n+        }\n+        nHeight = nTargetHeight;\n+\n+        // Connect new blocks.\n+        BOOST_REVERSE_FOREACH(CBlockIndex *pindexConnect, vpindexToConnect) {\n+            if (!ConnectTip(state, chainparams, pindexConnect, pindexConnect == pindexMostWork ? pblock : NULL)) {\n+                if (state.IsInvalid()) {\n+                    // The block violates a consensus rule.\n+                    if (!state.CorruptionPossible())\n+                        InvalidChainFound(vpindexToConnect.back());\n+                    state = CValidationState();\n+                    fInvalidFound = true;\n+                    fContinue = false;\n+                    break;\n+                } else {\n+                    // A system error occurred (disk space, database error, ...).\n+                    return false;\n+                }\n             } else {\n-                // A system error occurred (disk space, database error, ...).\n-                return false;\n-            }\n-        } else {\n-            PruneBlockIndexCandidates();\n-            if (!pindexOldTip || chainActive.Tip()->nChainWork > pindexOldTip->nChainWork) {\n-                // We're in a better position than we were. Return temporarily to release the lock.\n-                fContinue = false;\n-                break;\n+                PruneBlockIndexCandidates();\n+                if (!pindexOldTip || chainActive.Tip()->nChainWork > pindexOldTip->nChainWork) {\n+                    // We're in a better position than we were. Return temporarily to release the lock.\n+                    fContinue = false;\n+                    break;\n+                }\n             }\n         }\n     }\n-    }\n \n-    if (fBlocksDisconnected)\n+    if (fBlocksDisconnected) {\n+        mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n         mempool.TrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    }\n+    mempool.check(pcoinsTip);\n \n     // Callbacks/notifications for a new best chain.\n     if (fInvalidFound)\n@@ -2672,6 +2681,7 @@ bool InvalidateBlock(CValidationState& state, const Consensus::Params& consensus\n         // ActivateBestChain considers blocks already in chainActive\n         // unconditionally valid already, so force disconnect away from it.\n         if (!DisconnectTip(state, consensusParams)) {\n+            mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n             return false;\n         }\n     }\n@@ -2689,6 +2699,7 @@ bool InvalidateBlock(CValidationState& state, const Consensus::Params& consensus\n     }\n \n     InvalidChainFound(pindex);\n+    mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n     return true;\n }\n "
      },
      {
        "sha": "2996fdcb5a0e8cd7b37e1de135696d5f548e63e1",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4",
        "patch": "@@ -467,7 +467,7 @@ bool InvalidateBlock(CValidationState& state, const Consensus::Params& consensus\n /** Remove invalidity status from a block and its descendants. */\n bool ReconsiderBlock(CValidationState& state, CBlockIndex *pindex);\n \n-/** The currently-connected chain of blocks. */\n+/** The currently-connected chain of blocks (protected by cs_main). */\n extern CChain chainActive;\n \n /** Global variable that points to the active CCoinsView (protected by cs_main) */"
      },
      {
        "sha": "531cd59d5a2de910d1448da3cae18aba957efddc",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 11,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4",
        "patch": "@@ -119,7 +119,8 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     {\n         tx.vout[0].nValue -= 1000000;\n         hash = tx.GetHash();\n-        mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+        bool spendsCoinbase = (i == 0) ? true : false; // only first tx spends coinbase\n+        mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n@@ -139,7 +140,8 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     {\n         tx.vout[0].nValue -= 10000000;\n         hash = tx.GetHash();\n-        mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+        bool spendsCoinbase = (i == 0) ? true : false; // only first tx spends coinbase\n+        mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n@@ -158,15 +160,15 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].prevout.hash = txFirst[1]->GetHash();\n     tx.vout[0].nValue = 4900000000LL;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     tx.vin[0].prevout.hash = hash;\n     tx.vin.resize(2);\n     tx.vin[1].scriptSig = CScript() << OP_1;\n     tx.vin[1].prevout.hash = txFirst[0]->GetHash();\n     tx.vin[1].prevout.n = 0;\n     tx.vout[0].nValue = 5900000000LL;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -177,7 +179,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].scriptSig = CScript() << OP_0 << OP_1;\n     tx.vout[0].nValue = 0;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -190,12 +192,12 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     script = CScript() << OP_0;\n     tx.vout[0].scriptPubKey = GetScriptForDestination(CScriptID(script));\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     tx.vin[0].prevout.hash = hash;\n     tx.vin[0].scriptSig = CScript() << std::vector<unsigned char>(script.begin(), script.end());\n     tx.vout[0].nValue -= 1000000;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -206,10 +208,10 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = 4900000000LL;\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     tx.vout[0].scriptPubKey = CScript() << OP_2;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -235,7 +237,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n     tx.nLockTime = chainActive.Tip()->nHeight+1;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK(!CheckFinalTx(tx, LOCKTIME_MEDIAN_TIME_PAST));\n \n     // time locked\n@@ -249,7 +251,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx2.vout[0].scriptPubKey = CScript() << OP_1;\n     tx2.nLockTime = chainActive.Tip()->GetMedianTimePast()+1;\n     hash = tx2.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx2));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx2));\n     BOOST_CHECK(!CheckFinalTx(tx2, LOCKTIME_MEDIAN_TIME_PAST));\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));"
      },
      {
        "sha": "9645c7c94295888ba620a52ba6e7926b80488878",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4",
        "patch": "@@ -150,7 +150,7 @@ CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(CMutableTransaction &tx, CTxMemPo\n     CAmount inChainValue = hasNoDependencies ? txn.GetValueOut() : 0;\n \n     return CTxMemPoolEntry(txn, nFee, nTime, dPriority, nHeight,\n-                           hasNoDependencies, inChainValue);\n+                           hasNoDependencies, inChainValue, spendsCoinbase);\n }\n \n void Shutdown(void* parg)"
      },
      {
        "sha": "343c27673ce000756334fe7e9ed70fba1f065510",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4",
        "patch": "@@ -65,10 +65,11 @@ struct TestMemPoolEntryHelper\n     double dPriority;\n     unsigned int nHeight;\n     bool hadNoDependencies;\n+    bool spendsCoinbase;\n \n     TestMemPoolEntryHelper() :\n         nFee(0), nTime(0), dPriority(0.0), nHeight(1),\n-        hadNoDependencies(false) { }\n+        hadNoDependencies(false), spendsCoinbase(false) { }\n \n     CTxMemPoolEntry FromTx(CMutableTransaction &tx, CTxMemPool *pool = NULL);\n \n@@ -78,5 +79,6 @@ struct TestMemPoolEntryHelper\n     TestMemPoolEntryHelper &Priority(double _priority) { dPriority = _priority; return *this; }\n     TestMemPoolEntryHelper &Height(unsigned int _height) { nHeight = _height; return *this; }\n     TestMemPoolEntryHelper &HadNoDependencies(bool _hnd) { hadNoDependencies = _hnd; return *this; }\n+    TestMemPoolEntryHelper &SpendsCoinbase(bool _flag) { spendsCoinbase = _flag; return *this; }\n };\n #endif"
      },
      {
        "sha": "9d2513948112a04b57d2ee8ef83ebba5e309ceda",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 13,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4",
        "patch": "@@ -11,6 +11,7 @@\n #include \"main.h\"\n #include \"policy/fees.h\"\n #include \"streams.h\"\n+#include \"timedata.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n #include \"utiltime.h\"\n@@ -20,9 +21,11 @@ using namespace std;\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n                                  int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n-                                 bool poolHasNoInputsOf, CAmount _inChainInputValue):\n+                                 bool poolHasNoInputsOf, CAmount _inChainInputValue,\n+                                 bool _spendsCoinbase):\n     tx(_tx), nFee(_nFee), nTime(_nTime), entryPriority(_entryPriority), entryHeight(_entryHeight),\n-    hadNoDependencies(poolHasNoInputsOf), inChainInputValue(_inChainInputValue)\n+    hadNoDependencies(poolHasNoInputsOf), inChainInputValue(_inChainInputValue),\n+    spendsCoinbase(_spendsCoinbase)\n {\n     nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n     nModSize = tx.CalculateModifiedSize(nTxSize);\n@@ -478,22 +481,26 @@ void CTxMemPool::remove(const CTransaction &origTx, std::list<CTransaction>& rem\n     }\n }\n \n-void CTxMemPool::removeCoinbaseSpends(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight)\n+void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags)\n {\n-    // Remove transactions spending a coinbase which are now immature\n+    // Remove transactions spending a coinbase which are now immature and no-longer-final transactions\n     LOCK(cs);\n     list<CTransaction> transactionsToRemove;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         const CTransaction& tx = it->GetTx();\n-        BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n-            indexed_transaction_set::const_iterator it2 = mapTx.find(txin.prevout.hash);\n-            if (it2 != mapTx.end())\n-                continue;\n-            const CCoins *coins = pcoins->AccessCoins(txin.prevout.hash);\n-            if (nCheckFrequency != 0) assert(coins);\n-            if (!coins || (coins->IsCoinBase() && ((signed long)nMemPoolHeight) - coins->nHeight < COINBASE_MATURITY)) {\n-                transactionsToRemove.push_back(tx);\n-                break;\n+        if (!CheckFinalTx(tx, flags)) {\n+            transactionsToRemove.push_back(tx);\n+        } else if (it->GetSpendsCoinbase()) {\n+            BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+                indexed_transaction_set::const_iterator it2 = mapTx.find(txin.prevout.hash);\n+                if (it2 != mapTx.end())\n+                    continue;\n+                const CCoins *coins = pcoins->AccessCoins(txin.prevout.hash);\n+\t\tif (nCheckFrequency != 0) assert(coins);\n+                if (!coins || (coins->IsCoinBase() && ((signed long)nMemPoolHeight) - coins->nHeight < COINBASE_MATURITY)) {\n+                    transactionsToRemove.push_back(tx);\n+                    break;\n+                }\n             }\n         }\n     }"
      },
      {
        "sha": "c4ea51557c2aefc22ad3a19bc093cbc8808a0c37",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4",
        "patch": "@@ -67,6 +67,7 @@ class CTxMemPoolEntry\n     unsigned int entryHeight; //! Chain height when entering the mempool\n     bool hadNoDependencies; //! Not dependent on any other txs when it entered the mempool\n     CAmount inChainInputValue; //! Sum of all txin values that are already in blockchain\n+    bool spendsCoinbase; //! keep track of transactions that spend a coinbase\n \n     // Information about descendants of this transaction that are in the\n     // mempool; if we remove this transaction we must remove all of these\n@@ -80,7 +81,7 @@ class CTxMemPoolEntry\n public:\n     CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n                     int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n-                    bool poolHasNoInputsOf, CAmount _inChainInputValue);\n+                    bool poolHasNoInputsOf, CAmount _inChainInputValue, bool spendsCoinbase);\n     CTxMemPoolEntry(const CTxMemPoolEntry& other);\n \n     const CTransaction& GetTx() const { return this->tx; }\n@@ -109,6 +110,8 @@ class CTxMemPoolEntry\n     uint64_t GetCountWithDescendants() const { return nCountWithDescendants; }\n     uint64_t GetSizeWithDescendants() const { return nSizeWithDescendants; }\n     CAmount GetFeesWithDescendants() const { return nFeesWithDescendants; }\n+\n+    bool GetSpendsCoinbase() const { return spendsCoinbase; }\n };\n \n // Helpers for modifying CTxMemPool::mapTx, which is a boost multi_index.\n@@ -376,7 +379,7 @@ class CTxMemPool\n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, setEntries &setAncestors, bool fCurrentEstimate = true);\n \n     void remove(const CTransaction &tx, std::list<CTransaction>& removed, bool fRecursive = false);\n-    void removeCoinbaseSpends(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight);\n+    void removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags);\n     void removeConflicts(const CTransaction &tx, std::list<CTransaction>& removed);\n     void removeForBlock(const std::vector<CTransaction>& vtx, unsigned int nBlockHeight,\n                         std::list<CTransaction>& conflicts, bool fCurrentEstimate = true);"
      }
    ]
  },
  {
    "sha": "a60538bc456c107c806865f05fb09b8778b091a1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNjA1MzhiYzQ1NmMxMDdjODA2ODY1ZjA1ZmIwOWI4Nzc4YjA5MWEx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-01T12:20:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-01T12:20:34Z"
      },
      "message": "Merge pull request #7143\n\n6da12df qt: use QMetaObject::invokeMethod for cross-thread signaling in clientmodel (Wladimir J. van der Laan)",
      "tree": {
        "sha": "9b5575b0d52327d88f504a839cb7551a4f24afa0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b5575b0d52327d88f504a839cb7551a4f24afa0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a60538bc456c107c806865f05fb09b8778b091a1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWXZCSAAoJEHSBCwEjRsmmkS0IALzMQ24hVT3+aOVItQb8PFZ6\nsbCljQoiHufyBWABVAfk4QF8E9f2GX1Dmeb88mGa9U6c6mgCwVBjUrsBYMQRJBe/\nYJDadqCIBsYxZtvwD4chEkNpTAvTJk3WJSEjIhdlrquHoIwIpITpozfVSpzg8fTj\nbkV6ID0Ox5W2pvED7gX3knNQRJdVdGePVoZse4VyCEXucyknu81y+CN/Td72WPIn\nNXiLwOR81ji7Gb4YXi9/Y2k/YiZrkTf829T9r9oKN6JXe8rvOVBCn5+50Pa3uG3y\nlgvJXRgI60m3d1rmHmRHFW/guzrCLzq/D1bAZcdhCJtWJ7xZI5c6j+dVB6BPp+M=\n=80y0\n-----END PGP SIGNATURE-----",
        "payload": "tree 9b5575b0d52327d88f504a839cb7551a4f24afa0\nparent 2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4\nparent 6da12dff287ac08c1d8aa847794abb8e582d606c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448972430 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448972434 +0100\n\nMerge pull request #7143\n\n6da12df qt: use QMetaObject::invokeMethod for cross-thread signaling in clientmodel (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a60538bc456c107c806865f05fb09b8778b091a1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a60538bc456c107c806865f05fb09b8778b091a1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a60538bc456c107c806865f05fb09b8778b091a1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ef5ffa59afaf9b1d30cc0c97e6b1ab2b7ab30f4"
      },
      {
        "sha": "6da12dff287ac08c1d8aa847794abb8e582d606c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6da12dff287ac08c1d8aa847794abb8e582d606c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6da12dff287ac08c1d8aa847794abb8e582d606c"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8149dfdf5a8791f5b20307e4b47d6f5fabaf9591",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a60538bc456c107c806865f05fb09b8778b091a1/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a60538bc456c107c806865f05fb09b8778b091a1/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=a60538bc456c107c806865f05fb09b8778b091a1",
        "patch": "@@ -253,7 +253,10 @@ static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, const CB\n     // if we are in-sync, update the UI regardless of last update time\n     if (!initialSync || now - nLastBlockTipUpdateNotification > MODEL_UPDATE_DELAY) {\n         //pass a async signal to the UI thread\n-        Q_EMIT clientmodel->numBlocksChanged(pIndex->nHeight, QDateTime::fromTime_t(pIndex->GetBlockTime()), clientmodel->getVerificationProgress(pIndex));\n+        QMetaObject::invokeMethod(clientmodel, \"numBlocksChanged\", Qt::QueuedConnection,\n+                                  Q_ARG(int, pIndex->nHeight),\n+                                  Q_ARG(QDateTime, QDateTime::fromTime_t(pIndex->GetBlockTime())),\n+                                  Q_ARG(double, clientmodel->getVerificationProgress(pIndex)));\n         nLastBlockTipUpdateNotification = now;\n     }\n }"
      }
    ]
  },
  {
    "sha": "c0c08c7c68d004efcc783910831436a102aa16b1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMGMwOGM3YzY4ZDAwNGVmY2M3ODM5MTA4MzE0MzZhMTAyYWExNmIx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-01T12:21:10Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-01T12:21:16Z"
      },
      "message": "Merge pull request #7141\n\naabc897 rpc: Don't translate warning messages (Wladimir J. van der Laan)",
      "tree": {
        "sha": "d9636c30e82b78abf974dc5ee8d83c456c161005",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9636c30e82b78abf974dc5ee8d83c456c161005"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c0c08c7c68d004efcc783910831436a102aa16b1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWXZC8AAoJEHSBCwEjRsmm6YYH/iQoUxVxERZo425aJRhTHue9\n/dfR2Sjtid93x/6QC9Xok2MOR8ACUma4dEd17lsdXkU5ogs6Vr4Hj+KFtk1mAQlj\nK2wvcYcYVnRjesKKaGqgcneC0H2IbEjrxMp3au2mK9+pKk3bfprdF26X4cwvKSYv\n51e1yCTNDO7FNWgi6t2uvwdpHyvEPCNQjpqWCLzlvd9A6pzmH8qzKa1BgPCmoXYP\n8OlIOdfhii5VuweMMH1j5qGu/iIM1ByX8ksyjG2qwM4Ss3fu21gN3rGU/JkrGRWX\nEA9b72GRcYZw8D0zjrQCry0z5ndW43YatGGfbnV1Ym5cfIh8ThlVj1CFA4yqBoI=\n=7FBj\n-----END PGP SIGNATURE-----",
        "payload": "tree d9636c30e82b78abf974dc5ee8d83c456c161005\nparent a60538bc456c107c806865f05fb09b8778b091a1\nparent aabc897801f2513ab5bf5e8ae6e6bcffeb889e94\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448972470 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448972476 +0100\n\nMerge pull request #7141\n\naabc897 rpc: Don't translate warning messages (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0c08c7c68d004efcc783910831436a102aa16b1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c0c08c7c68d004efcc783910831436a102aa16b1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0c08c7c68d004efcc783910831436a102aa16b1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a60538bc456c107c806865f05fb09b8778b091a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a60538bc456c107c806865f05fb09b8778b091a1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a60538bc456c107c806865f05fb09b8778b091a1"
      },
      {
        "sha": "aabc897801f2513ab5bf5e8ae6e6bcffeb889e94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aabc897801f2513ab5bf5e8ae6e6bcffeb889e94",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aabc897801f2513ab5bf5e8ae6e6bcffeb889e94"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 23,
      "deletions": 10
    },
    "files": [
      {
        "sha": "e3c77e85055f4560205ae8e88263218dada889e1",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 8,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0c08c7c68d004efcc783910831436a102aa16b1/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0c08c7c68d004efcc783910831436a102aa16b1/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c0c08c7c68d004efcc783910831436a102aa16b1",
        "patch": "@@ -3990,29 +3990,34 @@ std::string GetWarnings(const std::string& strFor)\n     int nPriority = 0;\n     string strStatusBar;\n     string strRPC;\n+    string strGUI;\n \n-    if (!CLIENT_VERSION_IS_RELEASE)\n-        strStatusBar = _(\"This is a pre-release test build - use at your own risk - do not use for mining or merchant applications\");\n+    if (!CLIENT_VERSION_IS_RELEASE) {\n+        strStatusBar = \"This is a pre-release test build - use at your own risk - do not use for mining or merchant applications\";\n+        strGUI = _(\"This is a pre-release test build - use at your own risk - do not use for mining or merchant applications\");\n+    }\n \n     if (GetBoolArg(\"-testsafemode\", DEFAULT_TESTSAFEMODE))\n-        strStatusBar = strRPC = \"testsafemode enabled\";\n+        strStatusBar = strRPC = strGUI = \"testsafemode enabled\";\n \n     // Misc warnings like out of disk space and clock is wrong\n     if (strMiscWarning != \"\")\n     {\n         nPriority = 1000;\n-        strStatusBar = strMiscWarning;\n+        strStatusBar = strGUI = strMiscWarning;\n     }\n \n     if (fLargeWorkForkFound)\n     {\n         nPriority = 2000;\n-        strStatusBar = strRPC = _(\"Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues.\");\n+        strStatusBar = strRPC = \"Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues.\";\n+        strGUI = _(\"Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues.\");\n     }\n     else if (fLargeWorkInvalidChainFound)\n     {\n         nPriority = 2000;\n-        strStatusBar = strRPC = _(\"Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade.\");\n+        strStatusBar = strRPC = \"Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade.\";\n+        strGUI = _(\"Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade.\");\n     }\n \n     // Alerts\n@@ -4024,12 +4029,14 @@ std::string GetWarnings(const std::string& strFor)\n             if (alert.AppliesToMe() && alert.nPriority > nPriority)\n             {\n                 nPriority = alert.nPriority;\n-                strStatusBar = alert.strStatusBar;\n+                strStatusBar = strGUI = alert.strStatusBar;\n             }\n         }\n     }\n \n-    if (strFor == \"statusbar\")\n+    if (strFor == \"gui\")\n+        return strGUI;\n+    else if (strFor == \"statusbar\")\n         return strStatusBar;\n     else if (strFor == \"rpc\")\n         return strRPC;"
      },
      {
        "sha": "16dff283630d97f511ab101a91ffc0e819691cb7",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0c08c7c68d004efcc783910831436a102aa16b1/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0c08c7c68d004efcc783910831436a102aa16b1/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=c0c08c7c68d004efcc783910831436a102aa16b1",
        "patch": "@@ -206,7 +206,13 @@ void ThreadScriptCheck();\n void PartitionCheck(bool (*initialDownloadCheck)(), CCriticalSection& cs, const CBlockIndex *const &bestHeader, int64_t nPowTargetSpacing);\n /** Check whether we are doing an initial block download (synchronizing from disk or network) */\n bool IsInitialBlockDownload();\n-/** Format a string that describes several potential problems detected by the core */\n+/** Format a string that describes several potential problems detected by the core.\n+ * strFor can have three values:\n+ * - \"rpc\": get critical warnings, which should put the client in safe mode if non-empty\n+ * - \"statusbar\": get all warnings\n+ * - \"gui\": get all warnings, translated (where possible) for GUI\n+ * This function only returns the highest priority warning of the set selected by strFor.\n+ */\n std::string GetWarnings(const std::string& strFor);\n /** Retrieve a transaction (from memory pool, or from disk, if possible) */\n bool GetTransaction(const uint256 &hash, CTransaction &tx, const Consensus::Params& params, uint256 &hashBlock, bool fAllowSlow = false);"
      },
      {
        "sha": "1271187420fb17098dec0fd53a2615c09a5964a6",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0c08c7c68d004efcc783910831436a102aa16b1/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0c08c7c68d004efcc783910831436a102aa16b1/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=c0c08c7c68d004efcc783910831436a102aa16b1",
        "patch": "@@ -158,7 +158,7 @@ enum BlockSource ClientModel::getBlockSource() const\n \n QString ClientModel::getStatusBarWarnings() const\n {\n-    return QString::fromStdString(GetWarnings(\"statusbar\"));\n+    return QString::fromStdString(GetWarnings(\"gui\"));\n }\n \n OptionsModel *ClientModel::getOptionsModel()"
      }
    ]
  },
  {
    "sha": "bc1f4275705a6aae03ce439cd317ec4166075c08",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYzFmNDI3NTcwNWE2YWFlMDNjZTQzOWNkMzE3ZWM0MTY2MDc1YzA4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-01T12:26:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-01T12:26:50Z"
      },
      "message": "qt: periodic translations update",
      "tree": {
        "sha": "9f4c984918d2af8b5fb44774ed4e51c10bbdae0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f4c984918d2af8b5fb44774ed4e51c10bbdae0a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc1f4275705a6aae03ce439cd317ec4166075c08",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWXZISAAoJEHSBCwEjRsmmyUMIAID5jz87DMqWaFiBwsmTPUyP\n1B/r8f6PKgVfmSkc5qYFsxRN+AvRp0O0ONiuDVpnkh4O6/66nShGlLrefurwYLcO\np7JVDnfgLMmp6CT2UUTOP/+LsSyEbPALAqP7B3L3LWryPsSVmCG2qw6cqPktXvV4\n+eFW+Zt2Fx2AwyxJs4jbVqXC7YylzaM4owJL6p09Rg/1rIHR/Zy31P/shLqdIL/s\nawEULTeijgQ1qMw2mqvlNGKygbNgVO366uU5OqGAW9IXBOUFAd8N24evXVtf8WSG\n7yIqsBtoKmQEVUq/EfywDMg1wUrCtBAyMfCqD/0vn+O3ZTaWvYCNMncs9MO+vdk=\n=HQLO\n-----END PGP SIGNATURE-----",
        "payload": "tree 9f4c984918d2af8b5fb44774ed4e51c10bbdae0a\nparent c0c08c7c68d004efcc783910831436a102aa16b1\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448972810 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448972810 +0100\n\nqt: periodic translations update\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc1f4275705a6aae03ce439cd317ec4166075c08",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bc1f4275705a6aae03ce439cd317ec4166075c08",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc1f4275705a6aae03ce439cd317ec4166075c08/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c0c08c7c68d004efcc783910831436a102aa16b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0c08c7c68d004efcc783910831436a102aa16b1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0c08c7c68d004efcc783910831436a102aa16b1"
      }
    ],
    "stats": {
      "total": 941,
      "additions": 778,
      "deletions": 163
    },
    "files": [
      {
        "sha": "6b5f243668a7fae43364b5454ded77297688a6e5",
        "filename": "src/qt/bitcoinstrings.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc1f4275705a6aae03ce439cd317ec4166075c08/src/qt/bitcoinstrings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc1f4275705a6aae03ce439cd317ec4166075c08/src/qt/bitcoinstrings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinstrings.cpp?ref=bc1f4275705a6aae03ce439cd317ec4166075c08",
        "patch": "@@ -67,6 +67,9 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Fees (in %s/kB) smaller than this are considered zero fee for relaying, \"\n \"mining and transaction creation (default: %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n+\"Fees (in %s/kB) smaller than this are considered zero fee for transaction \"\n+\"creation (default: %s)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"How thorough the block verification of -checkblocks is (0-4, default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"If <category> is not supplied or if <category> = 1, output all debugging \"\n@@ -121,6 +124,8 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Set the number of threads for coin generation if enabled (-1 = all cores, \"\n \"default: %d)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n+\"Support filtering of blocks and transaction with bloom filters (default: %u)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"The block database contains a block which appears to be from the future. \"\n \"This may be due to your computer's date and time being set incorrectly. Only \"\n \"rebuild the block database if you are sure that your computer's date and \"\n@@ -152,6 +157,10 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: \"\n \"%s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n+\"Username and hashed password for JSON-RPC connections. The field <userpw> \"\n+\"comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is \"\n+\"included in share/rpcuser. This option can be specified multiple times\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"WARNING: abnormally high number of blocks generated, %d blocks received in \"\n \"the last %d hours (%d expected)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n@@ -178,7 +187,6 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"mode.  This will redownload the entire blockchain\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"(default: %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"(default: %u)\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"(default: 1)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"-maxmempool must be at least %d MB\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"<category> can be:\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Accept command line and JSON-RPC commands\"),\n@@ -197,7 +205,6 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Cannot resolve -bind address: '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Cannot resolve -externalip address: '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Cannot resolve -whitebind address: '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Cannot write default address\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Choose data directory on startup (default: 0)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Connect only to the specified node(s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Connect through SOCKS5 proxy\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Connect to a node to retrieve peer addresses, and disconnect\"),\n@@ -274,15 +281,12 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Rescanning...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Run in the background as a daemon and accept commands\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Send trace/debug info to console instead of debug.log file\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Send transactions as zero-fee transactions if possible (default: %u)\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Set SSL root certificates for payment request (default: -system-)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Set database cache size in megabytes (%d to %d, default: %d)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Set key pool size to <n> (default: %u)\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Set language, for example \\\"de_DE\\\" (default: system locale)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Set maximum block size in bytes (default: %d)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Set minimum block size in bytes (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Set the number of threads to service RPC calls (default: %d)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Show all debugging options (usage: --help -help-debug)\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Show splash screen on startup (default: 1)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Signing transaction failed\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Specify configuration file (default: %s)\"),\n@@ -292,7 +296,6 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Specify pid file (default: %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Specify wallet file (within data directory)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Specify your own public address\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Spend unconfirmed change when sending transactions (default: %u)\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Start minimized\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"The transaction amount is too small to pay the fee\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"This help message\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"This is experimental software.\"),\n@@ -303,7 +306,6 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction amount too small\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction amounts must be positive\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction too large for fee policy\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction too large\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"UI Options:\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unable to bind to %s on this computer (bind returned error %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unable to start HTTP server. See debug log for details.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unknown network specified in -onlynet: '%s'\"),"
      },
      {
        "sha": "ac194e0520f3075db7ede9b557fb756ad628241a",
        "filename": "src/qt/locale/bitcoin_da.ts",
        "status": "modified",
        "additions": 26,
        "deletions": 2,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc1f4275705a6aae03ce439cd317ec4166075c08/src/qt/locale/bitcoin_da.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc1f4275705a6aae03ce439cd317ec4166075c08/src/qt/locale/bitcoin_da.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_da.ts?ref=bc1f4275705a6aae03ce439cd317ec4166075c08",
        "patch": "@@ -1097,7 +1097,7 @@\n     </message>\n     <message>\n         <source>Connect to the Bitcoin network through a separate SOCKS5 proxy for Tor hidden services.</source>\n-        <translation>Forbind til Bitcoin-netv\u00e6rket gennem en separat SOCKS5-proxy for skjulte tjenester via Tor.</translation>\n+        <translation>Forbind til Bitcoin-netv\u00e6rket gennem en separat SOCKS5-proxy for skjulte Tor-tjenester.</translation>\n     </message>\n     <message>\n         <source>Use separate SOCKS5 proxy to reach peers via Tor hidden services:</source>\n@@ -2732,6 +2732,10 @@\n         <source>Copy transaction ID</source>\n         <translation>Kopi\u00e9r transaktions-ID</translation>\n     </message>\n+    <message>\n+        <source>Copy raw transaction</source>\n+        <translation>Kopi\u00e9r r\u00e5 transaktion</translation>\n+    </message>\n     <message>\n         <source>Edit label</source>\n         <translation>Redig\u00e9r m\u00e6rkat</translation>\n@@ -3251,10 +3255,18 @@\n         <source>Activating best chain...</source>\n         <translation>Aktiverer bedste k\u00e6de\u2026</translation>\n     </message>\n+    <message>\n+        <source>Always relay transactions received from whitelisted peers (default: %d)</source>\n+        <translation>Videresend altid transaktioner, der modtages fra hvidlistede knuder (standard: %d)</translation>\n+    </message>\n     <message>\n         <source>Attempt to recover private keys from a corrupt wallet.dat on startup</source>\n         <translation>Fors\u00f8g at genskabe private n\u00f8gler fra en \u00f8delagt wallet.dat under opstart</translation>\n     </message>\n+    <message>\n+        <source>Automatically create Tor hidden service (default: %d)</source>\n+        <translation>Opret automatisk skjult Tor-tjeneste (standard: %d)</translation>\n+    </message>\n     <message>\n         <source>Cannot resolve -whitebind address: '%s'</source>\n         <translation>Kan ikke l\u00f8se -whitebind adresse: \"%s\"</translation>\n@@ -3387,6 +3399,14 @@\n         <source>This is experimental software.</source>\n         <translation>Dette er eksperimentelt software.</translation>\n     </message>\n+    <message>\n+        <source>Tor control port password (default: empty)</source>\n+        <translation>Adgangskode for Tor kontrolport (standard: tom)</translation>\n+    </message>\n+    <message>\n+        <source>Tor control port to use if onion listening enabled (default: %s)</source>\n+        <translation>Tor kontrolport, der skal bruges, hvis onion-lytning er sl\u00e5et til (standard: %s)</translation>\n+    </message>\n     <message>\n         <source>Transaction amount too small</source>\n         <translation>Transaktionsbel\u00f8b er for lavt</translation>\n@@ -3427,6 +3447,10 @@\n         <source>Warning</source>\n         <translation>Advarsel</translation>\n     </message>\n+    <message>\n+        <source>Whether to operate in a blocks only mode (default: %u)</source>\n+        <translation>Hvorvidt der skal arbejdes i kun-blokke-tilstand (standard: %u)</translation>\n+    </message>\n     <message>\n         <source>Zapping all transactions from wallet...</source>\n         <translation>Zapper alle transaktioner fra tegnebog\u2026</translation>\n@@ -3513,7 +3537,7 @@\n     </message>\n     <message>\n         <source>Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)</source>\n-        <translation>Brug separat SOCS5-proxy for at n\u00e5 andre knuder via Tor skjulte tjenester (standard: %s)</translation>\n+        <translation>Brug separat SOCS5-proxy for at n\u00e5 knuder via skjulte Tor-tjenester (standard: %s)</translation>\n     </message>\n     <message>\n         <source>(default: %s)</source>"
      },
      {
        "sha": "6b68b3c74ac658e88157a9d5a30ce62635e079fd",
        "filename": "src/qt/locale/bitcoin_de.ts",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc1f4275705a6aae03ce439cd317ec4166075c08/src/qt/locale/bitcoin_de.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc1f4275705a6aae03ce439cd317ec4166075c08/src/qt/locale/bitcoin_de.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_de.ts?ref=bc1f4275705a6aae03ce439cd317ec4166075c08",
        "patch": "@@ -226,7 +226,11 @@\n         <source>IP/Netmask</source>\n         <translation>IP/Netzmaske</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Banned Until</source>\n+        <translation>Gesperrt bis</translation>\n+    </message>\n+</context>\n <context>\n     <name>BitcoinGUI</name>\n     <message>"
      },
      {
        "sha": "0c5529955f9b9301dea957d0e34f2ca07b420aef",
        "filename": "src/qt/locale/bitcoin_en.ts",
        "status": "modified",
        "additions": 115,
        "deletions": 118,
        "changes": 233,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc1f4275705a6aae03ce439cd317ec4166075c08/src/qt/locale/bitcoin_en.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc1f4275705a6aae03ce439cd317ec4166075c08/src/qt/locale/bitcoin_en.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en.ts?ref=bc1f4275705a6aae03ce439cd317ec4166075c08",
        "patch": "@@ -299,7 +299,7 @@\n <context>\n     <name>BitcoinGUI</name>\n     <message>\n-        <location filename=\"../bitcoingui.cpp\" line=\"+325\"/>\n+        <location filename=\"../bitcoingui.cpp\" line=\"+335\"/>\n         <source>Sign &amp;message...</source>\n         <translation>Sign &amp;message...</translation>\n     </message>\n@@ -701,7 +701,7 @@\n <context>\n     <name>ClientModel</name>\n     <message>\n-        <location filename=\"../clientmodel.cpp\" line=\"+143\"/>\n+        <location filename=\"../clientmodel.cpp\" line=\"+135\"/>\n         <source>Network Alert</source>\n         <translation>Network Alert</translation>\n     </message>\n@@ -925,7 +925,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+160\"/>\n+        <location line=\"+161\"/>\n         <source>This label turns red if the transaction size is greater than 1000 bytes.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -940,12 +940,12 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+8\"/>\n+        <location line=\"+9\"/>\n         <source>Can vary +/- %1 satoshi(s) per input.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-32\"/>\n+        <location line=\"-33\"/>\n         <source>yes</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -971,7 +971,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+58\"/>\n+        <location line=\"+59\"/>\n         <location line=\"+60\"/>\n         <source>(no label)</source>\n         <translation type=\"unfinished\">(no label)</translation>\n@@ -1086,7 +1086,7 @@\n <context>\n     <name>HelpMessageDialog</name>\n     <message>\n-        <location filename=\"../utilitydialog.cpp\" line=\"+33\"/>\n+        <location filename=\"../utilitydialog.cpp\" line=\"+36\"/>\n         <source>Bitcoin Core</source>\n         <translation type=\"unfinished\">Bitcoin Core</translation>\n     </message>\n@@ -1469,17 +1469,17 @@\n         <translation>&amp;Cancel</translation>\n     </message>\n     <message>\n-        <location filename=\"../optionsdialog.cpp\" line=\"+83\"/>\n+        <location filename=\"../optionsdialog.cpp\" line=\"+81\"/>\n         <source>default</source>\n         <translation>default</translation>\n     </message>\n     <message>\n-        <location line=\"+59\"/>\n+        <location line=\"+64\"/>\n         <source>none</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+83\"/>\n+        <location line=\"+71\"/>\n         <source>Confirm options reset</source>\n         <translation>Confirm options reset</translation>\n     </message>\n@@ -1500,7 +1500,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+24\"/>\n+        <location line=\"+25\"/>\n         <source>The supplied proxy address is invalid.</source>\n         <translation>The supplied proxy address is invalid.</translation>\n     </message>\n@@ -1756,7 +1756,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+760\"/>\n+        <location line=\"+763\"/>\n         <source>%1 d</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1830,11 +1830,13 @@\n         <location line=\"+26\"/>\n         <location line=\"+23\"/>\n         <location line=\"+23\"/>\n-        <location line=\"+36\"/>\n+        <location line=\"+23\"/>\n         <location line=\"+23\"/>\n         <location line=\"+36\"/>\n         <location line=\"+23\"/>\n-        <location line=\"+533\"/>\n+        <location line=\"+36\"/>\n+        <location line=\"+36\"/>\n+        <location line=\"+534\"/>\n         <location line=\"+23\"/>\n         <location line=\"+23\"/>\n         <location line=\"+23\"/>\n@@ -1855,7 +1857,7 @@\n         <translation>N/A</translation>\n     </message>\n     <message>\n-        <location line=\"-1156\"/>\n+        <location line=\"-1216\"/>\n         <source>Client version</source>\n         <translation>Client version</translation>\n     </message>\n@@ -1890,12 +1892,12 @@\n         <translation>Startup time</translation>\n     </message>\n     <message>\n-        <location line=\"+29\"/>\n+        <location line=\"+170\"/>\n         <source>Network</source>\n         <translation>Network</translation>\n     </message>\n     <message>\n-        <location line=\"+7\"/>\n+        <location line=\"-147\"/>\n         <source>Name</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1915,12 +1917,27 @@\n         <translation>Current number of blocks</translation>\n     </message>\n     <message>\n-        <location line=\"+72\"/>\n+        <location line=\"+52\"/>\n+        <source>Memory Pool</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+7\"/>\n+        <source>Current number of transactions</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+36\"/>\n+        <source>Memory usage</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+48\"/>\n         <source>Open the Bitcoin Core debug log file from the current data directory. This can take a few seconds for large log files.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+231\"/>\n+        <location line=\"+233\"/>\n         <location line=\"+552\"/>\n         <source>Received</source>\n         <translation type=\"unfinished\"></translation>\n@@ -1943,8 +1960,8 @@\n     </message>\n     <message>\n         <location line=\"+57\"/>\n-        <location filename=\"../rpcconsole.cpp\" line=\"+281\"/>\n-        <location line=\"+566\"/>\n+        <location filename=\"../rpcconsole.cpp\" line=\"+287\"/>\n+        <location line=\"+578\"/>\n         <source>Select a peer to view detailed information.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1979,8 +1996,8 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-913\"/>\n-        <location line=\"+821\"/>\n+        <location line=\"-973\"/>\n+        <location line=\"+881\"/>\n         <source>User Agent</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2030,17 +2047,17 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-904\"/>\n+        <location line=\"-977\"/>\n         <source>Last block time</source>\n         <translation>Last block time</translation>\n     </message>\n     <message>\n-        <location line=\"+52\"/>\n+        <location line=\"+123\"/>\n         <source>&amp;Open</source>\n         <translation>&amp;Open</translation>\n     </message>\n     <message>\n-        <location line=\"+24\"/>\n+        <location line=\"+26\"/>\n         <source>&amp;Console</source>\n         <translation>&amp;Console</translation>\n     </message>\n@@ -2060,7 +2077,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location filename=\"../rpcconsole.cpp\" line=\"-333\"/>\n+        <location filename=\"../rpcconsole.cpp\" line=\"-343\"/>\n         <source>In:</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2070,17 +2087,17 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location filename=\"../forms/debugwindow.ui\" line=\"-357\"/>\n+        <location filename=\"../forms/debugwindow.ui\" line=\"-417\"/>\n         <source>Build date</source>\n         <translation>Build date</translation>\n     </message>\n     <message>\n-        <location line=\"+183\"/>\n+        <location line=\"+241\"/>\n         <source>Debug log file</source>\n         <translation>Debug log file</translation>\n     </message>\n     <message>\n-        <location line=\"+83\"/>\n+        <location line=\"+85\"/>\n         <source>Clear console</source>\n         <translation>Clear console</translation>\n     </message>\n@@ -2138,7 +2155,7 @@\n         <translation>Type &lt;b&gt;help&lt;/b&gt; for an overview of available commands.</translation>\n     </message>\n     <message>\n-        <location line=\"+134\"/>\n+        <location line=\"+144\"/>\n         <source>%1 B</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2706,20 +2723,20 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+88\"/>\n+        <location line=\"+91\"/>\n         <source>Pay only the required fee of %1</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message numerus=\"yes\">\n-        <location line=\"+22\"/>\n+        <location line=\"+23\"/>\n         <source>Estimated to begin confirmation within %n block(s).</source>\n         <translation type=\"unfinished\">\n             <numerusform>Estimated to begin confirmation within %n block.</numerusform>\n             <numerusform>Estimated to begin confirmation within %n blocks.</numerusform>\n         </translation>\n     </message>\n     <message>\n-        <location line=\"-136\"/>\n+        <location line=\"-140\"/>\n         <source>The recipient address is not valid. Please recheck.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2729,7 +2746,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+231\"/>\n+        <location line=\"+234\"/>\n         <source>Warning: Invalid Bitcoin address</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2744,7 +2761,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-692\"/>\n+        <location line=\"-695\"/>\n         <source>Copy dust</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2871,7 +2888,7 @@\n <context>\n     <name>ShutdownWindow</name>\n     <message>\n-        <location filename=\"../utilitydialog.cpp\" line=\"+81\"/>\n+        <location filename=\"../utilitydialog.cpp\" line=\"+96\"/>\n         <source>Bitcoin Core is shutting down...</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3703,32 +3720,32 @@\n <context>\n     <name>bitcoin-core</name>\n     <message>\n-        <location filename=\"../bitcoinstrings.cpp\" line=\"+260\"/>\n+        <location filename=\"../bitcoinstrings.cpp\" line=\"+267\"/>\n         <source>Options:</source>\n         <translation>Options:</translation>\n     </message>\n     <message>\n-        <location line=\"+30\"/>\n+        <location line=\"+27\"/>\n         <source>Specify data directory</source>\n         <translation>Specify data directory</translation>\n     </message>\n     <message>\n-        <location line=\"-87\"/>\n+        <location line=\"-84\"/>\n         <source>Connect to a node to retrieve peer addresses, and disconnect</source>\n         <translation>Connect to a node to retrieve peer addresses, and disconnect</translation>\n     </message>\n     <message>\n-        <location line=\"+90\"/>\n+        <location line=\"+87\"/>\n         <source>Specify your own public address</source>\n         <translation>Specify your own public address</translation>\n     </message>\n     <message>\n-        <location line=\"-109\"/>\n+        <location line=\"-105\"/>\n         <source>Accept command line and JSON-RPC commands</source>\n         <translation>Accept command line and JSON-RPC commands</translation>\n     </message>\n     <message>\n-        <location line=\"-113\"/>\n+        <location line=\"-118\"/>\n         <source>If &lt;category&gt; is not supplied or if &lt;category&gt; = 1, output all debugging information.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3763,7 +3780,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+112\"/>\n+        <location line=\"+116\"/>\n         <source>Error: A fatal internal error occurred, see debug.log for details</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3783,17 +3800,17 @@\n         <translation>Run in the background as a daemon and accept commands</translation>\n     </message>\n     <message>\n-        <location line=\"+34\"/>\n+        <location line=\"+29\"/>\n         <source>Unable to start HTTP server. See debug log for details.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-123\"/>\n+        <location line=\"-117\"/>\n         <source>Accept connections from outside (default: 1 if no -proxy or -connect)</source>\n         <translation>Accept connections from outside (default: 1 if no -proxy or -connect)</translation>\n     </message>\n     <message>\n-        <location line=\"-160\"/>\n+        <location line=\"-168\"/>\n         <source>Bind to given address and always listen on it. Use [host]:port notation for IPv6</source>\n         <translation>Bind to given address and always listen on it. Use [host]:port notation for IPv6</translation>\n     </message>\n@@ -3813,12 +3830,12 @@\n         <translation>Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)</translation>\n     </message>\n     <message>\n-        <location line=\"+57\"/>\n+        <location line=\"+60\"/>\n         <source>Set the number of script verification threads (%u to %d, 0 = auto, &lt;0 = leave that many cores free, default: %d)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+6\"/>\n+        <location line=\"+8\"/>\n         <source>The block database contains a block which appears to be from the future. This may be due to your computer&apos;s date and time being set incorrectly. Only rebuild the block database if you are sure that your computer&apos;s date and time are correct</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3838,7 +3855,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+5\"/>\n+        <location line=\"+9\"/>\n         <source>WARNING: abnormally high number of blocks generated, %d blocks received in the last %d hours (%d expected)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3869,11 +3886,6 @@\n     </message>\n     <message>\n         <location line=\"+11\"/>\n-        <source>(default: 1)</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n         <source>-maxmempool must be at least %d MB</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3888,7 +3900,7 @@\n         <translation>Block creation options:</translation>\n     </message>\n     <message>\n-        <location line=\"+7\"/>\n+        <location line=\"+6\"/>\n         <source>Connect only to the specified node(s)</source>\n         <translation>Connect only to the specified node(s)</translation>\n     </message>\n@@ -4008,22 +4020,22 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+14\"/>\n+        <location line=\"+13\"/>\n         <source>Set database cache size in megabytes (%d to %d, default: %d)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+3\"/>\n+        <location line=\"+2\"/>\n         <source>Set maximum block size in bytes (default: %d)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+11\"/>\n+        <location line=\"+10\"/>\n         <source>Specify wallet file (within data directory)</source>\n         <translation>Specify wallet file (within data directory)</translation>\n     </message>\n     <message>\n-        <location line=\"+18\"/>\n+        <location line=\"+16\"/>\n         <source>Unsupported argument -benchmark ignored, use -debug=bench.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4078,7 +4090,7 @@\n         <translation>You need to rebuild the database using -reindex to change -txindex</translation>\n     </message>\n     <message>\n-        <location line=\"-304\"/>\n+        <location line=\"-306\"/>\n         <source>Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4123,7 +4135,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+8\"/>\n+        <location line=\"+11\"/>\n         <source>If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4158,7 +4170,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+8\"/>\n+        <location line=\"+10\"/>\n         <source>The transaction amount is too small to send after the fee has been deducted</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4168,7 +4180,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+40\"/>\n+        <location line=\"+44\"/>\n         <source>Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4183,7 +4195,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+6\"/>\n+        <location line=\"+5\"/>\n         <source>Accept public REST requests (default: %u)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4213,12 +4225,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+2\"/>\n-        <source>Choose data directory on startup (default: 0)</source>\n-        <translation type=\"unfinished\">Choose data directory on startup (default: 0)</translation>\n-    </message>\n-    <message>\n-        <location line=\"+2\"/>\n+        <location line=\"+3\"/>\n         <source>Connect through SOCKS5 proxy</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4328,25 +4335,10 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+1\"/>\n-        <source>Set SSL root certificates for payment request (default: -system-)</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+3\"/>\n-        <source>Set language, for example &quot;de_DE&quot; (default: system locale)</source>\n-        <translation type=\"unfinished\">Set language, for example &quot;de_DE&quot; (default: system locale)</translation>\n-    </message>\n-    <message>\n-        <location line=\"+4\"/>\n+        <location line=\"+6\"/>\n         <source>Show all debugging options (usage: --help -help-debug)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Show splash screen on startup (default: 1)</source>\n-        <translation type=\"unfinished\">Show splash screen on startup (default: 1)</translation>\n-    </message>\n     <message>\n         <location line=\"+1\"/>\n         <source>Shrink debug.log file on client startup (default: 1 when no -debug)</source>\n@@ -4359,11 +4351,6 @@\n     </message>\n     <message>\n         <location line=\"+8\"/>\n-        <source>Start minimized</source>\n-        <translation type=\"unfinished\">Start minimized</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n         <source>The transaction amount is too small to pay the fee</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4402,11 +4389,6 @@\n         <source>Transaction too large</source>\n         <translation>Transaction too large</translation>\n     </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>UI Options:</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n     <message>\n         <location line=\"+1\"/>\n         <source>Unable to bind to %s on this computer (bind returned error %s)</source>\n@@ -4453,27 +4435,27 @@\n         <translation>wallet.dat corrupt, salvage failed</translation>\n     </message>\n     <message>\n-        <location line=\"-67\"/>\n+        <location line=\"-62\"/>\n         <source>Password for JSON-RPC connections</source>\n         <translation>Password for JSON-RPC connections</translation>\n     </message>\n     <message>\n-        <location line=\"-198\"/>\n+        <location line=\"-205\"/>\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Execute command when the best block changes (%s in cmd is replaced by block hash)</translation>\n     </message>\n     <message>\n-        <location line=\"+234\"/>\n+        <location line=\"+237\"/>\n         <source>This help message</source>\n         <translation>This help message</translation>\n     </message>\n     <message>\n-        <location line=\"-108\"/>\n+        <location line=\"-103\"/>\n         <source>Allow DNS lookups for -addnode, -seednode and -connect</source>\n         <translation>Allow DNS lookups for -addnode, -seednode and -connect</translation>\n     </message>\n     <message>\n-        <location line=\"+60\"/>\n+        <location line=\"+59\"/>\n         <source>Loading addresses...</source>\n         <translation>Loading addresses...</translation>\n     </message>\n@@ -4483,7 +4465,7 @@\n         <translation>Error loading wallet.dat: Wallet corrupted</translation>\n     </message>\n     <message>\n-        <location line=\"-207\"/>\n+        <location line=\"-214\"/>\n         <source>(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4509,6 +4491,11 @@\n     </message>\n     <message>\n         <location line=\"+17\"/>\n+        <source>Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n         <source>How thorough the block verification of -checkblocks is (0-4, default: %u)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4528,7 +4515,12 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+46\"/>\n+        <location line=\"+32\"/>\n+        <source>Support filtering of blocks and transaction with bloom filters (default: %u)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+16\"/>\n         <source>Total length of network version string (%i) exceeds maximum length (%i). Reduce the number or size of uacomments.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4548,17 +4540,22 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+28\"/>\n+        <location line=\"+3\"/>\n+        <source>Username and hashed password for JSON-RPC connections. The field &lt;userpw&gt; comes in the format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. A canonical python script is included in share/rpcuser. This option can be specified multiple times</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+29\"/>\n         <source>(default: %s)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+11\"/>\n+        <location line=\"+10\"/>\n         <source>Always query for peer addresses via DNS lookup (default: %u)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+28\"/>\n+        <location line=\"+27\"/>\n         <source>Error loading wallet.dat</source>\n         <translation>Error loading wallet.dat</translation>\n     </message>\n@@ -4628,12 +4625,12 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+8\"/>\n+        <location line=\"+7\"/>\n         <source>Set key pool size to &lt;n&gt; (default: %u)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+3\"/>\n+        <location line=\"+2\"/>\n         <source>Set minimum block size in bytes (default: %u)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4643,7 +4640,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+5\"/>\n+        <location line=\"+4\"/>\n         <source>Specify configuration file (default: %s)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4663,17 +4660,17 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+5\"/>\n+        <location line=\"+4\"/>\n         <source>Threshold for disconnecting misbehaving peers (default: %u)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+10\"/>\n+        <location line=\"+9\"/>\n         <source>Unknown network specified in -onlynet: &apos;%s&apos;</source>\n         <translation>Unknown network specified in -onlynet: &apos;%s&apos;</translation>\n     </message>\n     <message>\n-        <location line=\"-113\"/>\n+        <location line=\"-107\"/>\n         <source>Cannot resolve -bind address: &apos;%s&apos;</source>\n         <translation>Cannot resolve -bind address: &apos;%s&apos;</translation>\n     </message>\n@@ -4683,7 +4680,7 @@\n         <translation>Cannot resolve -externalip address: &apos;%s&apos;</translation>\n     </message>\n     <message>\n-        <location line=\"+46\"/>\n+        <location line=\"+45\"/>\n         <source>Invalid amount for -paytxfee=&lt;amount&gt;: &apos;%s&apos;</source>\n         <translation>Invalid amount for -paytxfee=&lt;amount&gt;: &apos;%s&apos;</translation>\n     </message>\n@@ -4698,17 +4695,17 @@\n         <translation>Loading block index...</translation>\n     </message>\n     <message>\n-        <location line=\"-62\"/>\n+        <location line=\"-61\"/>\n         <source>Add a node to connect to and attempt to keep the connection open</source>\n         <translation>Add a node to connect to and attempt to keep the connection open</translation>\n     </message>\n     <message>\n-        <location line=\"+63\"/>\n+        <location line=\"+62\"/>\n         <source>Loading wallet...</source>\n         <translation>Loading wallet...</translation>\n     </message>\n     <message>\n-        <location line=\"-56\"/>\n+        <location line=\"-55\"/>\n         <source>Cannot downgrade wallet</source>\n         <translation>Cannot downgrade wallet</translation>\n     </message>\n@@ -4718,7 +4715,7 @@\n         <translation>Cannot write default address</translation>\n     </message>\n     <message>\n-        <location line=\"+74\"/>\n+        <location line=\"+73\"/>\n         <source>Rescanning...</source>\n         <translation>Rescanning...</translation>\n     </message>"
      },
      {
        "sha": "8883aef9891bea013f5f860cda257362396be68f",
        "filename": "src/qt/locale/bitcoin_es.ts",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc1f4275705a6aae03ce439cd317ec4166075c08/src/qt/locale/bitcoin_es.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc1f4275705a6aae03ce439cd317ec4166075c08/src/qt/locale/bitcoin_es.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_es.ts?ref=bc1f4275705a6aae03ce439cd317ec4166075c08",
        "patch": "@@ -2914,6 +2914,10 @@\n         <source>(default: 1)</source>\n         <translation>(predeterminado: 1)</translation>\n     </message>\n+    <message>\n+        <source>-maxmempool must be at least %d MB</source>\n+        <translation>-maxmempool debe ser por lo menos de %d MB</translation>\n+    </message>\n     <message>\n         <source>&lt;category&gt; can be:</source>\n         <translation>&lt;category&gt; puede ser:</translation>\n@@ -3126,6 +3130,10 @@\n         <source>Attempt to recover private keys from a corrupt wallet.dat on startup</source>\n         <translation>Intento de recuperar claves privadas de un wallet.dat corrupto</translation>\n     </message>\n+    <message>\n+        <source>Automatically create Tor hidden service (default: %d)</source>\n+        <translation>Autom\u00e1ticamente crea el servicio Tor oculto (por defecto: %d)</translation>\n+    </message>\n     <message>\n         <source>Cannot resolve -whitebind address: '%s'</source>\n         <translation>No se puede resolver -whitebind address: '%s'</translation>"
      },
      {
        "sha": "a80874652b5520099d1370d96df6a4450c7e8553",
        "filename": "src/qt/locale/bitcoin_ja.ts",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc1f4275705a6aae03ce439cd317ec4166075c08/src/qt/locale/bitcoin_ja.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc1f4275705a6aae03ce439cd317ec4166075c08/src/qt/locale/bitcoin_ja.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ja.ts?ref=bc1f4275705a6aae03ce439cd317ec4166075c08",
        "patch": "@@ -2736,6 +2736,10 @@\n         <source>Copy transaction ID</source>\n         <translation>\u53d6\u5f15 ID \u3092\u30b3\u30d4\u30fc</translation>\n     </message>\n+    <message>\n+        <source>Copy raw transaction</source>\n+        <translation>\u751f\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3092\u30b3\u30d4\u30fc</translation>\n+    </message>\n     <message>\n         <source>Edit label</source>\n         <translation>\u30e9\u30d9\u30eb\u306e\u7de8\u96c6</translation>\n@@ -3256,10 +3260,18 @@\n         <source>Activating best chain...</source>\n         <translation>\u6700\u512a\u826f\u306e\u30c1\u30a7\u30a4\u30f3\u3092\u6709\u52b9\u5316\u3057\u3066\u3044\u307e\u3059...</translation>\n     </message>\n+    <message>\n+        <source>Always relay transactions received from whitelisted peers (default: %d)</source>\n+        <translation>\u30db\u30ef\u30a4\u30c8\u30ea\u30b9\u30c8\u306b\u3042\u308b\u30d4\u30a2\u304b\u3089\u53d7\u3051\u53d6\u3063\u305f\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3092\u5e38\u306b\u30ea\u30ec\u30fc\u3059\u308b (\u521d\u671f\u5024: %d)</translation>\n+    </message>\n     <message>\n         <source>Attempt to recover private keys from a corrupt wallet.dat on startup</source>\n         <translation>\u8d77\u52d5\u6642\u306b\u58ca\u308c\u305f wallet.dat \u304b\u3089\u79d8\u5bc6\u9375\u3092\u5fa9\u65e7\u3059\u308b\u3053\u3068\u3092\u8a66\u3059</translation>\n     </message>\n+    <message>\n+        <source>Automatically create Tor hidden service (default: %d)</source>\n+        <translation>Tor\u79d8\u533f\u30b5\u30fc\u30d3\u30b9\u3092\u81ea\u52d5\u7684\u306b\u4f5c\u6210\u3059\u308b (\u521d\u671f\u5024: %d)</translation>\n+    </message>\n     <message>\n         <source>Cannot resolve -whitebind address: '%s'</source>\n         <translation>-whitebind \u30a2\u30c9\u30ec\u30b9 '%s' \u3092\u89e3\u6c7a\u3067\u304d\u307e\u305b\u3093</translation>\n@@ -3392,6 +3404,14 @@\n         <source>This is experimental software.</source>\n         <translation>\u3053\u308c\u306f\u5b9f\u9a13\u7684\u306a\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3067\u3059\u3002</translation>\n     </message>\n+    <message>\n+        <source>Tor control port password (default: empty)</source>\n+        <translation>Tor\u7ba1\u7406\u30dd\u30fc\u30c8\u306e\u30d1\u30b9\u30ef\u30fc\u30c9 (\u521d\u671f\u5024: \u7a7a\u6587\u5b57)</translation>\n+    </message>\n+    <message>\n+        <source>Tor control port to use if onion listening enabled (default: %s)</source>\n+        <translation>Onion \u306e\u30ea\u30c3\u30b9\u30f3\u304c\u6709\u52b9\u306b\u306a\u3063\u3066\u3044\u308b\u5834\u5408\u306b\u4f7f\u7528\u3059\u308bTor\u7ba1\u7406\u30dd\u30fc\u30c8 (\u521d\u671f\u5024: %s)</translation>\n+    </message>\n     <message>\n         <source>Transaction amount too small</source>\n         <translation>\u53d6\u5f15\u306e\u984d\u304c\u5c0f\u3055\u904e\u304e\u307e\u3059</translation>\n@@ -3432,6 +3452,10 @@\n         <source>Warning</source>\n         <translation>\u8b66\u544a</translation>\n     </message>\n+    <message>\n+        <source>Whether to operate in a blocks only mode (default: %u)</source>\n+        <translation>\u30d6\u30ed\u30c3\u30af\u9650\u5b9a\u30e2\u30fc\u30c9\u306b\u304a\u3044\u3066\u52d5\u4f5c\u3092\u884c\u3046\u304b\u3069\u3046\u304b (\u521d\u671f\u5024: %u)</translation>\n+    </message>\n     <message>\n         <source>Zapping all transactions from wallet...</source>\n         <translation>\u30a6\u30a9\u30ec\u30c3\u30c8\u304b\u3089\u3059\u3079\u3066\u306e\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3092\u6d88\u53bb\u3057\u3066\u3044\u307e\u3059...</translation>"
      },
      {
        "sha": "0213c09aa71c225d4f255a3d67a9bd95251b9921",
        "filename": "src/qt/locale/bitcoin_ko_KR.ts",
        "status": "modified",
        "additions": 79,
        "deletions": 19,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc1f4275705a6aae03ce439cd317ec4166075c08/src/qt/locale/bitcoin_ko_KR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc1f4275705a6aae03ce439cd317ec4166075c08/src/qt/locale/bitcoin_ko_KR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ko_KR.ts?ref=bc1f4275705a6aae03ce439cd317ec4166075c08",
        "patch": "@@ -3,7 +3,7 @@\n     <name>AddressBookPage</name>\n     <message>\n         <source>Right-click to edit address or label</source>\n-        <translation>\uc9c0\uac11 \uc8fc\uc18c\ub098 \uc774\ub984\uc744 \uc218\uc815\ud558\ub824\uba74 \uc6b0\ud074\ub9ad\ud558\uc138\uc694.</translation>\n+        <translation>\uc9c0\uac11 \uc8fc\uc18c\ub098 \ub77c\ubca8\uc744 \uc218\uc815\ud558\ub824\uba74 \uc6b0\ud074\ub9ad\ud558\uc138\uc694.</translation>\n     </message>\n     <message>\n         <source>Create a new address</source>\n@@ -27,7 +27,7 @@\n     </message>\n     <message>\n         <source>&amp;Copy Address</source>\n-        <translation>\uacc4\uc88c \ubcf5\uc0ac(&amp;C)</translation>\n+        <translation>\uc8fc\uc18c \ubcf5\uc0ac(&amp;C)</translation>\n     </message>\n     <message>\n         <source>Delete the currently selected address from the list</source>\n@@ -59,11 +59,11 @@\n     </message>\n     <message>\n         <source>Sending addresses</source>\n-        <translation>\ubcf4\ub0b4\ub294 \uc8fc\uc18c\ub4e4</translation>\n+        <translation>\ud0c0\uc778 \uacc4\uc88c \uc8fc\uc18c\ubaa9\ub85d</translation>\n     </message>\n     <message>\n         <source>Receiving addresses</source>\n-        <translation>\ubc1b\uc740 \uc8fc\uc18c\ub4e4</translation>\n+        <translation>\ub0b4 \uacc4\uc88c \uc8fc\uc18c\ubaa9\ub85d</translation>\n     </message>\n     <message>\n         <source>These are your Bitcoin addresses for sending payments. Always check the amount and the receiving address before sending coins.</source>\n@@ -75,7 +75,7 @@\n     </message>\n     <message>\n         <source>Copy &amp;Label</source>\n-        <translation>\ud45c \ubcf5\uc0ac</translation>\n+        <translation>\ub77c\ubca8 \ubcf5\uc0ac</translation>\n     </message>\n     <message>\n         <source>&amp;Edit</source>\n@@ -87,30 +87,30 @@\n     </message>\n     <message>\n         <source>Comma separated file (*.csv)</source>\n-        <translation>\uac01\uac01\uc758 \ud30c\uc77c\uc5d0 \uc27c\ud45c\ud558\uae30(*.csv)</translation>\n+        <translation>\uc27c\ud45c\ub85c \uad6c\ubd84\ub41c \ud30c\uc77c(*.csv)</translation>\n     </message>\n     <message>\n         <source>Exporting Failed</source>\n         <translation>\ub0b4\ubcf4\ub0b4\uae30 \uc2e4\ud328</translation>\n     </message>\n     <message>\n         <source>There was an error trying to save the address list to %1. Please try again.</source>\n-        <translation>%1\uc73c\ub85c \uc8fc\uc18c \ub9ac\uc2a4\ud2b8\ub97c \uc800\uc7a5\ud558\ub294 \ub3d9\uc548 \uc624\ub958\uac00 \ubc1c\uc0dd\ud588\uc2b5\ub2c8\ub2e4. \ub2e4\uc2dc \uc2dc\ub3c4\ud574\uc8fc\uc138\uc694.</translation>\n+        <translation>%1\uc73c\ub85c \uc8fc\uc18c \ubaa9\ub85d\uc744 \uc800\uc7a5\ud558\ub294 \ub3d9\uc548 \uc624\ub958\uac00 \ubc1c\uc0dd\ud588\uc2b5\ub2c8\ub2e4. \ub2e4\uc2dc \uc2dc\ub3c4\ud574\uc8fc\uc138\uc694.</translation>\n     </message>\n </context>\n <context>\n     <name>AddressTableModel</name>\n     <message>\n         <source>Label</source>\n-        <translation>\ud45c</translation>\n+        <translation>\ub77c\ubca8</translation>\n     </message>\n     <message>\n         <source>Address</source>\n         <translation>\uc8fc\uc18c</translation>\n     </message>\n     <message>\n         <source>(no label)</source>\n-        <translation>(\ud45c \uc5c6\uc74c)</translation>\n+        <translation>(\ub77c\ubca8 \uc5c6\uc74c)</translation>\n     </message>\n </context>\n <context>\n@@ -129,7 +129,7 @@\n     </message>\n     <message>\n         <source>Repeat new passphrase</source>\n-        <translation>\uc0c8 \uc554\ud638 \ubc18\ubcf5</translation>\n+        <translation>\uc0c8\ub85c\uc6b4 \uc554\ud638 \uc7ac\ud655\uc778</translation>\n     </message>\n     <message>\n         <source>Encrypt wallet</source>\n@@ -141,7 +141,7 @@\n     </message>\n     <message>\n         <source>Unlock wallet</source>\n-        <translation>\uc9c0\uac11 \uc5f4\uae30</translation>\n+        <translation>\uc9c0\uac11 \uc7a0\uae08\ud574\uc81c</translation>\n     </message>\n     <message>\n         <source>This operation needs your wallet passphrase to decrypt the wallet.</source>\n@@ -157,28 +157,32 @@\n     </message>\n     <message>\n         <source>Confirm wallet encryption</source>\n-        <translation>\uc9c0\uac11\uc758 \uc554\ud638\ud654\ub97c \ud655\uc815</translation>\n+        <translation>\uc9c0\uac11 \uc554\ud638\ud654 \uc2b9\uc778</translation>\n     </message>\n     <message>\n         <source>Warning: If you encrypt your wallet and lose your passphrase, you will &lt;b&gt;LOSE ALL OF YOUR BITCOINS&lt;/b&gt;!</source>\n-        <translation>\uacbd\uace0: \ub9cc\uc57d \uc554\ud638\ud654\ub41c \uc9c0\uac11\uc758 \ube44\ubc00\ubc88\ud638\ub97c \uc783\uc5b4\ubc84\ub9b4 \uacbd\uc6b0, \ubaa8\ub4e0 \ube44\ud2b8\ucf54\uc778\ub4e4\uc744 \uc783\uc5b4\ubc84\ub9b4 \uc218 \uc788\uc2b5\ub2c8\ub2e4!</translation>\n+        <translation>\uacbd\uace0: \ub9cc\uc57d \uc554\ud638\ud654 \ub41c \uc9c0\uac11\uc758 \ube44\ubc00\ubc88\ud638\ub97c \uc783\uc5b4\ubc84\ub9b4 \uacbd\uc6b0, &lt;b&gt;\ubaa8\ub4e0 \ube44\ud2b8\ucf54\uc778\ub4e4\uc744 \uc783\uc5b4\ubc84\ub9b4 \uc218 \uc788\uc2b5\ub2c8\ub2e4&lt;/b&gt;!</translation>\n     </message>\n     <message>\n         <source>Are you sure you wish to encrypt your wallet?</source>\n         <translation>\uc9c0\uac11 \uc554\ud638\ud654\ub97c \ud5c8\uc6a9\ud558\uc2dc\uaca0\uc2b5\ub2c8\uae4c?</translation>\n     </message>\n     <message>\n         <source>IMPORTANT: Any previous backups you have made of your wallet file should be replaced with the newly generated, encrypted wallet file. For security reasons, previous backups of the unencrypted wallet file will become useless as soon as you start using the new, encrypted wallet.</source>\n-        <translation>\uc911\uc694: \ubcf8\uc778 \uc9c0\uac11\ud30c\uc77c\uc5d0\uc11c \ub9cc\ub4e0 \uc608\uc804 \ubc31\uc5c5\ub4e4\uc740 \uc0c8\ub85c \uc0dd\uc131\ud55c \uc554\ud654\ud654\ub41c \uc9c0\uac11 \ud30c\uc77c\ub85c \uad50\uccb4\ub429\ub2c8\ub2e4. \ubcf4\uc548\uc0c1 \uc774\uc720\ub85c \uc774\uc804\uc5d0 \uc554\ud638\ud654 \ud558\uc9c0 \uc54a\uc740 \uc9c0\uac11 \ud30c\uc77c \ubc31\uc5c5\uc740 \uc0ac\uc6a9\ud560 \uc218 \uc5c6\uac8c \ub418\ub2c8 \ube60\ub978 \uc2dc\uc77c \ub0b4\ub85c \uc0c8\ub85c \uc554\ud654\ud654\ub41c \uc9c0\uac11\uc744 \uc0ac\uc6a9\ud558\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4.</translation>\n+        <translation>\uc911\uc694: \ubcf8\uc778 \uc9c0\uac11\ud30c\uc77c\uc5d0\uc11c \ub9cc\ub4e0 \uc608\uc804 \ubc31\uc5c5\ub4e4\uc740 \uc0c8\ub85c \uc0dd\uc131\ud55c \uc554\ud638\ud654 \ub41c \uc9c0\uac11 \ud30c\uc77c\ub85c \uad50\uccb4\ub429\ub2c8\ub2e4. \ubcf4\uc548\uc0c1 \uc774\uc720\ub85c \uc774\uc804\uc5d0 \uc554\ud638\ud654 \ud558\uc9c0 \uc54a\uc740 \uc9c0\uac11 \ud30c\uc77c \ubc31\uc5c5\uc740 \uc0ac\uc6a9\ud560 \uc218 \uc5c6\uac8c \ub418\ub2c8 \ube60\ub978 \uc2dc\uc77c \ub0b4\ub85c \uc0c8\ub85c \uc554\ud638\ud654 \ub41c \uc9c0\uac11\uc744 \uc0ac\uc6a9\ud558\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4.</translation>\n     </message>\n     <message>\n         <source>Warning: The Caps Lock key is on!</source>\n-        <translation>\uacbd\uace0: \ucea1\uc2a4\ub85d \ud0a4\uac00 \ucf1c\uc838\uc788\uc2b5\ub2c8\ub2e4!</translation>\n+        <translation>\uacbd\uace0: Caps Lock\ud0a4\uac00 \ucf1c\uc838\uc788\uc2b5\ub2c8\ub2e4!</translation>\n     </message>\n     <message>\n         <source>Wallet encrypted</source>\n         <translation>\uc9c0\uac11 \uc554\ud638\ud654 \uc644\ub8cc</translation>\n     </message>\n+    <message>\n+        <source>Enter the old passphrase and new passphrase to the wallet.</source>\n+        <translation>\uc9c0\uac11\uc758 \uae30\uc874 \uc554\ud638\uc640 \uc0c8\ub85c\uc6b4 \uc554\ud638\ub97c \uc785\ub825\ud574\uc8fc\uc138\uc694.</translation>\n+    </message>\n     <message>\n         <source>Wallet encryption failed</source>\n         <translation>\uc9c0\uac11 \uc554\ud638\ud654 \uc2e4\ud328</translation>\n@@ -963,6 +967,18 @@\n         <source>Port of the proxy (e.g. 9050)</source>\n         <translation>\ud504\ub85d\uc2dc\uc758 \ud3ec\ud2b8\ubc88\ud638\uc785\ub2c8\ub2e4(\uc608: 9050)</translation>\n     </message>\n+    <message>\n+        <source>IPv4</source>\n+        <translation>IPv4</translation>\n+    </message>\n+    <message>\n+        <source>IPv6</source>\n+        <translation>IPv6</translation>\n+    </message>\n+    <message>\n+        <source>Tor</source>\n+        <translation>Tor</translation>\n+    </message>\n     <message>\n         <source>&amp;Window</source>\n         <translation>\ucc3d(&amp;W)</translation>\n@@ -1070,6 +1086,10 @@\n         <source>Mined balance that has not yet matured</source>\n         <translation>\uc544\uc9c1 \uc0ac\uc6a9 \uac00\ub2a5\ud558\uc9c0 \uc54a\uc740 \ucc44\uad74\ub41c \uc794\uc561</translation>\n     </message>\n+    <message>\n+        <source>Balances</source>\n+        <translation>\uc794\uc561</translation>\n+    </message>\n     <message>\n         <source>Total:</source>\n         <translation>\ucd1d\uc561:</translation>\n@@ -1082,6 +1102,10 @@\n         <source>Your current balance in watch-only addresses</source>\n         <translation>\ubaa8\ub2c8\ud130\ub9c1 \uc9c0\uac11\uc758 \ud604\uc7ac \uc794\uc561</translation>\n     </message>\n+    <message>\n+        <source>Recent transactions</source>\n+        <translation>\ucd5c\uadfc \uac70\ub798</translation>\n+    </message>\n     </context>\n <context>\n     <name>PaymentServer</name>\n@@ -1151,11 +1175,19 @@\n         <source>Enter a Bitcoin address (e.g. %1)</source>\n         <translation>\ube44\ud2b8\ucf54\uc778 \uc8fc\uc18c\ub97c \uc785\ub825\ud558\uae30 (\uc608. %1)</translation>\n     </message>\n+    <message>\n+        <source>%1 s</source>\n+        <translation>%1 \ucd08</translation>\n+    </message>\n     <message>\n         <source>N/A</source>\n         <translation>\uc5c6\uc74c</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>%1 ms</source>\n+        <translation>%1 ms</translation>\n+    </message>\n+</context>\n <context>\n     <name>QRImageWidget</name>\n     <message>\n@@ -1203,7 +1235,11 @@\n     </message>\n     <message>\n         <source>Using OpenSSL version</source>\n-        <translation>\uc624\ud508SSL \ubc84\uc804\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4</translation>\n+        <translation>\uc0ac\uc6a9\uc911\uc778 OpenSSL \ubc84\uc804</translation>\n+    </message>\n+    <message>\n+        <source>Using BerkeleyDB version</source>\n+        <translation>\uc0ac\uc6a9\uc911\uc778 BerkeleyDB \ubc84\uc804</translation>\n     </message>\n     <message>\n         <source>Startup time</source>\n@@ -1229,6 +1265,22 @@\n         <source>Current number of blocks</source>\n         <translation>\ud604\uc7ac \ube14\ub7ed \uc218</translation>\n     </message>\n+    <message>\n+        <source>Received</source>\n+        <translation>\ubc1b\uc74c</translation>\n+    </message>\n+    <message>\n+        <source>Sent</source>\n+        <translation>\ubcf4\ub0c4</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Peers</source>\n+        <translation>&amp;\ud53c\uc5b4</translation>\n+    </message>\n+    <message>\n+        <source>Version</source>\n+        <translation>\ubc84\uc804</translation>\n+    </message>\n     <message>\n         <source>Last block time</source>\n         <translation>\ucd5c\uc885 \ube14\ub7ed \uc2dc\uac01</translation>\n@@ -1290,7 +1342,7 @@\n     </message>\n     <message>\n         <source>&amp;Label:</source>\n-        <translation>\ud45c:</translation>\n+        <translation>\ub77c\ubca8:</translation>\n     </message>\n     <message>\n         <source>&amp;Message:</source>\n@@ -1432,7 +1484,7 @@\n     </message>\n     <message>\n         <source>(no label)</source>\n-        <translation>(\ud45c \uc5c6\uc74c)</translation>\n+        <translation>(\ub77c\ubca8 \uc5c6\uc74c)</translation>\n     </message>\n     <message>\n         <source>(no message)</source>\n@@ -1497,6 +1549,14 @@\n         <source>Custom change address</source>\n         <translation>\uc8fc\uc18c\ubcc0\uacbd</translation>\n     </message>\n+    <message>\n+        <source>Transaction Fee:</source>\n+        <translation>\uac70\ub798 \uc218\uc218\ub8cc:</translation>\n+    </message>\n+    <message>\n+        <source>Recommended:</source>\n+        <translation>\uad8c\uc7a5:</translation>\n+    </message>\n     <message>\n         <source>Send to multiple recipients at once</source>\n         <translation>\ub2e4\uc218\uc758 \uc218\ub839\uc778\ub4e4\uc5d0\uac8c \ud55c\ubc88\uc5d0 \ubcf4\ub0b4\uae30</translation>"
      },
      {
        "sha": "c36e1af1d8a38b8b6fad2bc732fd1c7ac4967a1a",
        "filename": "src/qt/locale/bitcoin_nb.ts",
        "status": "modified",
        "additions": 26,
        "deletions": 2,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc1f4275705a6aae03ce439cd317ec4166075c08/src/qt/locale/bitcoin_nb.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc1f4275705a6aae03ce439cd317ec4166075c08/src/qt/locale/bitcoin_nb.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_nb.ts?ref=bc1f4275705a6aae03ce439cd317ec4166075c08",
        "patch": "@@ -2736,6 +2736,10 @@\n         <source>Copy transaction ID</source>\n         <translation>Kopier transaksjons-ID</translation>\n     </message>\n+    <message>\n+        <source>Copy raw transaction</source>\n+        <translation>Kopier r\u00e5transaksjon</translation>\n+    </message>\n     <message>\n         <source>Edit label</source>\n         <translation>Rediger merkelapp</translation>\n@@ -3041,11 +3045,11 @@\n     </message>\n     <message>\n         <source>Enable publish raw block in &lt;address&gt;</source>\n-        <translation>Sl\u00e5 p\u00e5 publish raw block i &lt;address&gt;</translation>\n+        <translation>Sl\u00e5 p\u00e5 publisering av r\u00e5blokk i &lt;address&gt;</translation>\n     </message>\n     <message>\n         <source>Enable publish raw transaction in &lt;address&gt;</source>\n-        <translation>Sl\u00e5 p\u00e5 publish raw transaction i &lt;address&gt;</translation>\n+        <translation>Sl\u00e5 p\u00e5 publisering av r\u00e5transaksjon i &lt;address&gt;</translation>\n     </message>\n     <message>\n         <source>Error initializing block database</source>\n@@ -3251,10 +3255,18 @@\n         <source>Activating best chain...</source>\n         <translation>Aktiverer beste kjede...</translation>\n     </message>\n+    <message>\n+        <source>Always relay transactions received from whitelisted peers (default: %d)</source>\n+        <translation>Alltid videresend transaksjoner mottatt fra hvitlistede noder (standardverdi: %d)</translation>\n+    </message>\n     <message>\n         <source>Attempt to recover private keys from a corrupt wallet.dat on startup</source>\n         <translation>Fors\u00f8k \u00e5 berge private n\u00f8kler fra en korrupt wallet.dat ved oppstart</translation>\n     </message>\n+    <message>\n+        <source>Automatically create Tor hidden service (default: %d)</source>\n+        <translation>Automatisk opprette Tor skjult tjeneste (standardverdi: %d)</translation>\n+    </message>\n     <message>\n         <source>Cannot resolve -whitebind address: '%s'</source>\n         <translation>Kan ikke l\u00f8se -whitebind-adresse: '%s'</translation>\n@@ -3387,6 +3399,14 @@\n         <source>This is experimental software.</source>\n         <translation>Dette er eksperimentell programvare.</translation>\n     </message>\n+    <message>\n+        <source>Tor control port password (default: empty)</source>\n+        <translation>Passord for Tor-kontrollport (standardverdi: tom)</translation>\n+    </message>\n+    <message>\n+        <source>Tor control port to use if onion listening enabled (default: %s)</source>\n+        <translation>Tor-kontrollport \u00e5 bruke hvis onion-lytting er aktivert (standardverdi: %s)</translation>\n+    </message>\n     <message>\n         <source>Transaction amount too small</source>\n         <translation>Transaksjonen er for liten</translation>\n@@ -3427,6 +3447,10 @@\n         <source>Warning</source>\n         <translation>Advarsel</translation>\n     </message>\n+    <message>\n+        <source>Whether to operate in a blocks only mode (default: %u)</source>\n+        <translation>Hvorvidt \u00e5 operere i modus med kun blokker (standardverdi: %u)</translation>\n+    </message>\n     <message>\n         <source>Zapping all transactions from wallet...</source>\n         <translation>Zapper alle transaksjoner fra lommeboken...</translation>"
      },
      {
        "sha": "52196f0372d1b0dff15a9db1d1ca89e7ab72cdb1",
        "filename": "src/qt/locale/bitcoin_pl.ts",
        "status": "modified",
        "additions": 45,
        "deletions": 1,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc1f4275705a6aae03ce439cd317ec4166075c08/src/qt/locale/bitcoin_pl.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc1f4275705a6aae03ce439cd317ec4166075c08/src/qt/locale/bitcoin_pl.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pl.ts?ref=bc1f4275705a6aae03ce439cd317ec4166075c08",
        "patch": "@@ -222,7 +222,15 @@\n </context>\n <context>\n     <name>BanTableModel</name>\n-    </context>\n+    <message>\n+        <source>IP/Netmask</source>\n+        <translation>IP/Maska Sieci</translation>\n+    </message>\n+    <message>\n+        <source>Banned Until</source>\n+        <translation>Blokada do</translation>\n+    </message>\n+</context>\n <context>\n     <name>BitcoinGUI</name>\n     <message>\n@@ -1067,6 +1075,18 @@\n         <source>Port of the proxy (e.g. 9050)</source>\n         <translation>Port proxy (np. 9050)</translation>\n     </message>\n+    <message>\n+        <source>IPv4</source>\n+        <translation>IPv4</translation>\n+    </message>\n+    <message>\n+        <source>IPv6</source>\n+        <translation>IPv6</translation>\n+    </message>\n+    <message>\n+        <source>Tor</source>\n+        <translation>Tor</translation>\n+    </message>\n     <message>\n         <source>&amp;Window</source>\n         <translation>&amp;Okno</translation>\n@@ -1453,6 +1473,10 @@\n         <source>&amp;Peers</source>\n         <translation>&amp;W\u0119z\u0142y</translation>\n     </message>\n+    <message>\n+        <source>Banned peers</source>\n+        <translation>Blokowane w\u0119z\u0142y</translation>\n+    </message>\n     <message>\n         <source>Select a peer to view detailed information.</source>\n         <translation>Wybierz w\u0119ze\u0142 \u017ceby zobaczy\u0107 szczeg\u00f3\u0142y.</translation>\n@@ -1541,6 +1565,14 @@\n         <source>Clear console</source>\n         <translation>Wyczy\u015b\u0107 konsol\u0119</translation>\n     </message>\n+    <message>\n+        <source>Ban Node for</source>\n+        <translation>Blokuj w\u0119ze\u0142 na okres</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Unban Node</source>\n+        <translation>Odblokuj w\u0119ze\u0142</translation>\n+    </message>\n     <message>\n         <source>Welcome to the Bitcoin Core RPC console.</source>\n         <translation>Witaj w konsoli Bitcoin Core RPC.</translation>\n@@ -1585,6 +1617,14 @@\n         <source>Outbound</source>\n         <translation>Wyj\u015bciowy</translation>\n     </message>\n+    <message>\n+        <source>Yes</source>\n+        <translation>Tak</translation>\n+    </message>\n+    <message>\n+        <source>No</source>\n+        <translation>Nie</translation>\n+    </message>\n     <message>\n         <source>Unknown</source>\n         <translation>Nieznany</translation>\n@@ -1981,6 +2021,10 @@\n         <source>Payment request expired.</source>\n         <translation>\u017b\u0105danie p\u0142atno\u015bci up\u0142yn\u0119\u0142o.</translation>\n     </message>\n+    <message>\n+        <source>Pay only the required fee of %1</source>\n+        <translation>Zap\u0142a\u0107 tylko wymagan\u0105 op\u0142at\u0119 %1</translation>\n+    </message>\n     <message numerus=\"yes\">\n         <source>Estimated to begin confirmation within %n block(s).</source>\n         <translation><numerusform>Przybli\u017cony czas zatwierdzenia: %n blok\u00f3w.</numerusform><numerusform>Przybli\u017cony czas zatwierdzenia: %n blok\u00f3w.</numerusform><numerusform>Przybli\u017cony czas zatwierdzenia: %n blok\u00f3w.</numerusform></translation>"
      },
      {
        "sha": "e57c051aa169d13fa2dcc5cbea4503b96babd4e8",
        "filename": "src/qt/locale/bitcoin_pt_BR.ts",
        "status": "modified",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc1f4275705a6aae03ce439cd317ec4166075c08/src/qt/locale/bitcoin_pt_BR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc1f4275705a6aae03ce439cd317ec4166075c08/src/qt/locale/bitcoin_pt_BR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pt_BR.ts?ref=bc1f4275705a6aae03ce439cd317ec4166075c08",
        "patch": "@@ -1549,6 +1549,14 @@\n         <source>The duration of a currently outstanding ping.</source>\n         <translation>A dura\u00e7\u00e3o de um ping excepcional no momento.</translation>\n     </message>\n+    <message>\n+        <source>Ping Wait</source>\n+        <translation>Espera de ping</translation>\n+    </message>\n+    <message>\n+        <source>Time Offset</source>\n+        <translation>Offset de tempo</translation>\n+    </message>\n     <message>\n         <source>Last block time</source>\n         <translation>Hor\u00e1rio do \u00faltimo bloco</translation>\n@@ -2637,6 +2645,10 @@\n         <source>Whether or not a watch-only address is involved in this transaction.</source>\n         <translation>Mostrar ou n\u00e3o endere\u00e7os Bitcoin na lista de transa\u00e7\u00f5es.</translation>\n     </message>\n+    <message>\n+        <source>User-defined intent/purpose of the transaction.</source>\n+        <translation>Inten\u00e7\u00e3o/Prop\u00f3sito definido pelo usu\u00e1rio para a transa\u00e7\u00e3o</translation>\n+    </message>\n     <message>\n         <source>Amount removed from or added to balance.</source>\n         <translation>Quantidade debitada ou creditada ao saldo.</translation>\n@@ -2716,6 +2728,10 @@\n         <source>Copy transaction ID</source>\n         <translation>Copiar ID da transa\u00e7\u00e3o</translation>\n     </message>\n+    <message>\n+        <source>Copy raw transaction</source>\n+        <translation>Copia os dados brutos da transa\u00e7\u00e3o</translation>\n+    </message>\n     <message>\n         <source>Edit label</source>\n         <translation>Editar r\u00f3tulo</translation>\n@@ -2867,6 +2883,18 @@\n         <source>If &lt;category&gt; is not supplied or if &lt;category&gt; = 1, output all debugging information.</source>\n         <translation>Se &lt;category&gt; n\u00e3o for suprida ou se &lt;category&gt; = 1, mostrar toda informa\u00e7\u00e3o de depura\u00e7\u00e3o.</translation>\n     </message>\n+    <message>\n+        <source>Please check that your computer's date and time are correct! If your clock is wrong Bitcoin Core will not work properly.</source>\n+        <translation>Por favor verifique se a data e hor\u00e1rio est\u00e3o corretos no seu computador! Se o seu rel\u00f3gio estiver incorreto, a Carteira Bitcoin n\u00e3o ir\u00e1 funcionar corretamente.</translation>\n+    </message>\n+    <message>\n+        <source>Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)</source>\n+        <translation>Corte: a ultima sincroniza\u00e7\u00e3o da carteira foi al\u00e9m do dado comprimido. Voc\u00ea precisa reindexar ( -reindex , fa\u00e7a o download de toda a blockchain novamente)</translation>\n+    </message>\n+    <message>\n+        <source>Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.</source>\n+        <translation>Rescans n\u00e3o s\u00e3o poss\u00edveis no modo de corte. Voc\u00ea precisa usar -reindex, que ir\u00e1 fazer o download de toda a blockchain novamente.</translation>\n+    </message>\n     <message>\n         <source>Error: A fatal internal error occurred, see debug.log for details</source>\n         <translation>Erro: Um erro interno fatal ocorreu, veja debug.log para detalhes</translation>\n@@ -2991,6 +3019,22 @@\n         <source>Do you want to rebuild the block database now?</source>\n         <translation>Voc\u00ea quer reconstruir o banco de dados de blocos agora?</translation>\n     </message>\n+    <message>\n+        <source>Enable publish hash block in &lt;address&gt;</source>\n+        <translation>Abilitar a publica\u00e7\u00e3o da hash do block em &lt;endere\u00e7o&gt;</translation>\n+    </message>\n+    <message>\n+        <source>Enable publish hash transaction in &lt;address&gt;</source>\n+        <translation>Abilitar a publica\u00e7\u00e3o da hash da transa\u00e7\u00e3o em &lt;endere\u00e7o&gt;</translation>\n+    </message>\n+    <message>\n+        <source>Enable publish raw block in &lt;address&gt;</source>\n+        <translation>Abilitar a publica\u00e7\u00e3o dos dados brutos do block em &lt;endere\u00e7o&gt;</translation>\n+    </message>\n+    <message>\n+        <source>Enable publish raw transaction in &lt;address&gt;</source>\n+        <translation>Abilitar a publica\u00e7\u00e3o dos dados brutos da transa\u00e7\u00e3o em &lt;endere\u00e7o&gt;</translation>\n+    </message>\n     <message>\n         <source>Error initializing block database</source>\n         <translation>Erro ao inicializar banco de dados de blocos</translation>\n@@ -3111,6 +3155,10 @@\n         <source>Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6</source>\n         <translation>Vincular ao endere\u00e7o fornecido e sempre escutar nele. Use a nota\u00e7\u00e3o [host]:port para IPv6</translation>\n     </message>\n+    <message>\n+        <source>Bind to given address to listen for JSON-RPC connections. Use [host]:port notation for IPv6. This option can be specified multiple times (default: bind to all interfaces)</source>\n+        <translation>Conecte ao endere\u00e7o dado para receber conec\u00e7\u00f5es JSON-RPC. Use a nota\u00e7\u00e3o [destino]:porta para IPv6. Essa op\u00e7\u00e3o pode ser especificada v\u00e1rias vezes (padr\u00e3o: conecte a todas as interfaces)</translation>\n+    </message>\n     <message>\n         <source>Cannot obtain a lock on data directory %s. Bitcoin Core is probably already running.</source>\n         <translation>N\u00e3o foi poss\u00edvel obter acesso exclusivo ao diret\u00f3rio de dados %s. Provavelmente Bitcoin j\u00e1 est\u00e1 sendo executado.</translation>\n@@ -3143,6 +3191,10 @@\n         <source>The transaction amount is too small to send after the fee has been deducted</source>\n         <translation>A quantia da transa\u00e7\u00e3o \u00e9 muito pequena para mandar </translation>\n     </message>\n+    <message>\n+        <source>This product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit &lt;https://www.openssl.org/&gt; and cryptographic software written by Eric Young and UPnP software written by Thomas Bernard.</source>\n+        <translation>Esse produto inclui software desenvolvido pelo Open SSL Project para uso na OpenSSL Toolkit&lt;https://www.openssl.org/&gt; e software criptogr\u00e1fico escrito por Eric Young e software UPnP escrito por Thomas Bernard. </translation>\n+    </message>\n     <message>\n         <source>You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain</source>\n         <translation>Voc\u00ea precisa reconstruir o banco de dados usando -reindex para sair do modo prune. Isso ir\u00e1 rebaixar todo o blockchain.</translation>"
      },
      {
        "sha": "ad0a7b3b50146f8a98e0fb2054f8fb192a6bceb5",
        "filename": "src/qt/locale/bitcoin_ru.ts",
        "status": "modified",
        "additions": 302,
        "deletions": 2,
        "changes": 304,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc1f4275705a6aae03ce439cd317ec4166075c08/src/qt/locale/bitcoin_ru.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc1f4275705a6aae03ce439cd317ec4166075c08/src/qt/locale/bitcoin_ru.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ru.ts?ref=bc1f4275705a6aae03ce439cd317ec4166075c08",
        "patch": "@@ -218,7 +218,15 @@\n </context>\n <context>\n     <name>BanTableModel</name>\n-    </context>\n+    <message>\n+        <source>IP/Netmask</source>\n+        <translation>IP/\u043f\u0440\u0435\u0444\u0438\u043a\u0441</translation>\n+    </message>\n+    <message>\n+        <source>Banned Until</source>\n+        <translation>\u0417\u0430\u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u043d\u043e \u0434\u043e</translation>\n+    </message>\n+</context>\n <context>\n     <name>BitcoinGUI</name>\n     <message>\n@@ -421,6 +429,10 @@\n         <source>Show the Bitcoin Core help message to get a list with possible Bitcoin command-line options</source>\n         <translation>\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u043e\u043c\u043e\u0449\u044c \u043f\u043e Bitcoin Core \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438.</translation>\n     </message>\n+    <message numerus=\"yes\">\n+        <source>%n active connection(s) to Bitcoin network</source>\n+        <translation><numerusform>%n \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 \u0441 \u0441\u0435\u0442\u044c\u044e Bitcoin</numerusform><numerusform>%n \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 \u0441 \u0441\u0435\u0442\u044c\u044e Bitcoin</numerusform><numerusform>%n \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 \u0441 \u0441\u0435\u0442\u044c\u044e Bitcoin</numerusform><numerusform>%n \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 \u0441 \u0441\u0435\u0442\u044c\u044e Bitcoin</numerusform></translation>\n+    </message>\n     <message>\n         <source>No block source available...</source>\n         <translation>\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0431\u043b\u043e\u043a\u043e\u0432 \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d...</translation>\n@@ -433,10 +445,22 @@\n         <source>%n hour(s)</source>\n         <translation><numerusform>%n \u0447\u0430\u0441</numerusform><numerusform>%n \u0447\u0430\u0441\u0430</numerusform><numerusform>%n \u0447\u0430\u0441\u043e\u0432</numerusform><numerusform>%n \u0447\u0430\u0441\u043e\u0432</numerusform></translation>\n     </message>\n+    <message numerus=\"yes\">\n+        <source>%n day(s)</source>\n+        <translation><numerusform>%n \u0434\u0435\u043d\u044c</numerusform><numerusform>%n \u0434\u043d\u044f</numerusform><numerusform>%n \u0434\u043d\u0435\u0439</numerusform><numerusform>%n \u0434\u043d\u0435\u0439</numerusform></translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>%n week(s)</source>\n+        <translation><numerusform>%n \u043d\u0435\u0434\u0435\u043b\u044e</numerusform><numerusform>%n \u043d\u0435\u0434\u0435\u043b\u0438</numerusform><numerusform>%n \u043d\u0435\u0434\u0435\u043b\u044c</numerusform><numerusform>%n \u043d\u0435\u0434\u0435\u043b\u044c</numerusform></translation>\n+    </message>\n     <message>\n         <source>%1 and %2</source>\n         <translation>%1 \u0438 %2</translation>\n     </message>\n+    <message numerus=\"yes\">\n+        <source>%n year(s)</source>\n+        <translation><numerusform>%n \u0433\u043e\u0434</numerusform><numerusform>%n \u043b\u0435\u0442</numerusform><numerusform>%n \u043b\u0435\u0442</numerusform><numerusform>%n \u0433\u043e\u0434\u0430</numerusform></translation>\n+    </message>\n     <message>\n         <source>%1 behind</source>\n         <translation>%1 \u043f\u043e\u0437\u0430\u0434\u0438</translation>\n@@ -893,7 +917,15 @@\n         <source>Error</source>\n         <translation>\u041e\u0448\u0438\u0431\u043a\u0430</translation>\n     </message>\n-    </context>\n+    <message numerus=\"yes\">\n+        <source>%n GB of free space available</source>\n+        <translation><numerusform>%n \u0413\u0411 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u043e\u0433\u043e \u043c\u0435\u0441\u0442\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e</numerusform><numerusform>%n \u0413\u0411 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u043e\u0433\u043e \u043c\u0435\u0441\u0442\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e</numerusform><numerusform>%n \u0413\u0411 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u043e\u0433\u043e \u043c\u0435\u0441\u0442\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e</numerusform><numerusform>%n \u0413\u0411 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u043e\u0433\u043e \u043c\u0435\u0441\u0442\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e</numerusform></translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>(of %n GB needed)</source>\n+        <translation><numerusform>(\u0438\u0437 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 %n \u0413\u0411)</numerusform><numerusform>(\u0438\u0437 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 %n \u0413\u0411)</numerusform><numerusform>(\u0438\u0437 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 %n \u0413\u0411)</numerusform><numerusform>(\u0438\u0437 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 %n \u0413\u0411)</numerusform></translation>\n+    </message>\n+</context>\n <context>\n     <name>OpenURIDialog</name>\n     <message>\n@@ -1043,10 +1075,34 @@\n         <source>Port of the proxy (e.g. 9050)</source>\n         <translation>\u041f\u043e\u0440\u0442 \u043f\u0440\u043e\u043a\u0441\u0438-\u0441\u0435\u0440\u0432\u0435\u0440\u0430 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, 9050)</translation>\n     </message>\n+    <message>\n+        <source>Used for reaching peers via:</source>\n+        <translation>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0438\u0436\u0435\u043d\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0447\u0435\u0440\u0435\u0437:</translation>\n+    </message>\n+    <message>\n+        <source>Shows, if the supplied default SOCKS5 proxy is used to reach peers via this network type.</source>\n+        <translation>\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f, \u0435\u0441\u043b\u0438 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u043e \u043f\u0440\u043e\u043a\u0441\u0438 SOCKS5 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0435 \u0434\u043b\u044f \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0441 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u043c\u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u0442\u0438\u043f\u0443 \u0441\u0435\u0442\u0438.</translation>\n+    </message>\n+    <message>\n+        <source>IPv4</source>\n+        <translation>IPv4</translation>\n+    </message>\n+    <message>\n+        <source>IPv6</source>\n+        <translation>IPv6</translation>\n+    </message>\n     <message>\n         <source>Tor</source>\n         <translation>Tor</translation>\n     </message>\n+    <message>\n+        <source>Connect to the Bitcoin network through a separate SOCKS5 proxy for Tor hidden services.</source>\n+        <translation>\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0442\u044c\u0441\u044f \u043a \u0441\u0435\u0442\u0438 Bitcoin \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u043a\u0441\u0438 SOCKS5 \u0434\u043b\u044f \u0441\u043a\u0440\u044b\u0442\u044b\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 Tor.</translation>\n+    </message>\n+    <message>\n+        <source>Use separate SOCKS5 proxy to reach peers via Tor hidden services:</source>\n+        <translation>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u043e\u043a\u0441\u0438 SOCKS5 \u0434\u043b\u044f \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0441 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u043c\u0438 \u0447\u0435\u0440\u0435\u0437 \u0441\u043a\u0440\u044b\u0442\u044b\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u044b Tor:</translation>\n+    </message>\n     <message>\n         <source>&amp;Window</source>\n         <translation>&amp;\u041e\u043a\u043d\u043e</translation>\n@@ -1433,10 +1489,18 @@\n         <source>&amp;Peers</source>\n         <translation>&amp;\u0423\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438</translation>\n     </message>\n+    <message>\n+        <source>Banned peers</source>\n+        <translation>\u0417\u0430\u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438</translation>\n+    </message>\n     <message>\n         <source>Select a peer to view detailed information.</source>\n         <translation>\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0435\u0439.</translation>\n     </message>\n+    <message>\n+        <source>Whitelisted</source>\n+        <translation>\u0414\u043e\u0432\u0435\u0440\u0435\u043d\u043d\u044b\u0439</translation>\n+    </message>\n     <message>\n         <source>Direction</source>\n         <translation>\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435</translation>\n@@ -1445,6 +1509,18 @@\n         <source>Version</source>\n         <translation>\u0412\u0435\u0440\u0441\u0438\u044f</translation>\n     </message>\n+    <message>\n+        <source>Starting Block</source>\n+        <translation>\u041d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u0431\u043b\u043e\u043a</translation>\n+    </message>\n+    <message>\n+        <source>Synced Headers</source>\n+        <translation>\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043e \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432</translation>\n+    </message>\n+    <message>\n+        <source>Synced Blocks</source>\n+        <translation>\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043e \u0431\u043b\u043e\u043a\u043e\u0432</translation>\n+    </message>\n     <message>\n         <source>User Agent</source>\n         <translation>\u042e\u0437\u0435\u0440-\u0430\u0433\u0435\u043d\u0442</translation>\n@@ -1473,6 +1549,14 @@\n         <source>Ping Time</source>\n         <translation>\u0412\u0440\u0435\u043c\u044f \u0437\u0430\u0434\u0435\u0440\u0436\u043a\u0438</translation>\n     </message>\n+    <message>\n+        <source>The duration of a currently outstanding ping.</source>\n+        <translation>\u0414\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u0438\u043d\u0433\u0430.</translation>\n+    </message>\n+    <message>\n+        <source>Ping Wait</source>\n+        <translation>\u0412\u0440\u0435\u043c\u044f \u0437\u0430\u0434\u0435\u0440\u0436\u043a\u0438</translation>\n+    </message>\n     <message>\n         <source>Time Offset</source>\n         <translation>\u0421\u043c\u0435\u0449\u0435\u043d\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438</translation>\n@@ -1521,6 +1605,34 @@\n         <source>Clear console</source>\n         <translation>\u041e\u0447\u0438\u0441\u0442\u0438\u0442\u044c \u043a\u043e\u043d\u0441\u043e\u043b\u044c</translation>\n     </message>\n+    <message>\n+        <source>&amp;Disconnect Node</source>\n+        <translation>&amp;\u041e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0443\u0437\u0435\u043b</translation>\n+    </message>\n+    <message>\n+        <source>Ban Node for</source>\n+        <translation>\u0417\u0430\u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0443\u0437\u0435\u043b \u043d\u0430</translation>\n+    </message>\n+    <message>\n+        <source>1 &amp;hour</source>\n+        <translation>1 &amp;\u0447\u0430\u0441</translation>\n+    </message>\n+    <message>\n+        <source>1 &amp;day</source>\n+        <translation>1 &amp;\u0434\u0435\u043d\u044c</translation>\n+    </message>\n+    <message>\n+        <source>1 &amp;week</source>\n+        <translation>1 &amp;\u043d\u0435\u0434\u0435\u043b\u044e</translation>\n+    </message>\n+    <message>\n+        <source>1 &amp;year</source>\n+        <translation>1 &amp;\u0433\u043e\u0434</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Unban Node</source>\n+        <translation>&amp;\u0420\u0430\u0437\u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0443\u0437\u0435\u043b</translation>\n+    </message>\n     <message>\n         <source>Welcome to the Bitcoin Core RPC console.</source>\n         <translation>\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c \u0432 RPC-\u043a\u043e\u043d\u0441\u043e\u043b\u044c Bitcoin Core.</translation>\n@@ -1549,6 +1661,10 @@\n         <source>%1 GB</source>\n         <translation>%1 \u0413\u0411</translation>\n     </message>\n+    <message>\n+        <source>(node id: %1)</source>\n+        <translation>(\u043d\u043e\u043c\u0435\u0440 \u0443\u0437\u043b\u0430: %1)</translation>\n+    </message>\n     <message>\n         <source>via %1</source>\n         <translation>\u0447\u0435\u0440\u0435\u0437 %1</translation>\n@@ -1941,6 +2057,10 @@\n         <source>Copy change</source>\n         <translation>\u041a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u043c\u0435\u043d</translation>\n     </message>\n+    <message>\n+        <source>Total Amount %1</source>\n+        <translation>\u041e\u0431\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 %1</translation>\n+    </message>\n     <message>\n         <source>or</source>\n         <translation>\u0438\u043b\u0438</translation>\n@@ -2287,6 +2407,10 @@\n         <source>Status</source>\n         <translation>\u0421\u0442\u0430\u0442\u0443\u0441</translation>\n     </message>\n+    <message numerus=\"yes\">\n+        <source>, broadcast through %n node(s)</source>\n+        <translation><numerusform>, \u0440\u0430\u0437\u043e\u0441\u043b\u0430\u043d\u043e \u0447\u0435\u0440\u0435\u0437 %n \u0443\u0437\u0435\u043b</numerusform><numerusform>, \u0440\u0430\u0437\u043e\u0441\u043b\u0430\u043d\u043e \u0447\u0435\u0440\u0435\u0437 %n \u0443\u0437\u043b\u0430</numerusform><numerusform>, \u0440\u0430\u0437\u043e\u0441\u043b\u0430\u043d\u043e \u0447\u0435\u0440\u0435\u0437 %n \u0443\u0437\u043b\u043e\u0432</numerusform><numerusform>, \u0440\u0430\u0437\u043e\u0441\u043b\u0430\u043d\u043e \u0447\u0435\u0440\u0435\u0437 %n \u0443\u0437\u043b\u043e\u0432</numerusform></translation>\n+    </message>\n     <message>\n         <source>Date</source>\n         <translation>\u0414\u0430\u0442\u0430</translation>\n@@ -2323,6 +2447,10 @@\n         <source>Credit</source>\n         <translation>\u041a\u0440\u0435\u0434\u0438\u0442</translation>\n     </message>\n+    <message numerus=\"yes\">\n+        <source>matures in %n more block(s)</source>\n+        <translation><numerusform>\u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u0447\u0435\u0440\u0435\u0437 %n \u0431\u043b\u043e\u043a</numerusform><numerusform>\u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u0447\u0435\u0440\u0435\u0437 %n \u0431\u043b\u043e\u043a\u0430</numerusform><numerusform>\u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u0447\u0435\u0440\u0435\u0437 %n \u0431\u043b\u043e\u043a\u043e\u0432</numerusform><numerusform>\u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u0447\u0435\u0440\u0435\u0437 %n \u0431\u043b\u043e\u043a\u043e\u0432</numerusform></translation>\n+    </message>\n     <message>\n         <source>not accepted</source>\n         <translation>\u043d\u0435 \u043f\u0440\u0438\u043d\u044f\u0442\u043e</translation>\n@@ -2395,6 +2523,10 @@\n         <source>, has not been successfully broadcast yet</source>\n         <translation>, \u0435\u0449\u0451 \u043d\u0435 \u0431\u044b\u043b\u043e \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0440\u0430\u0437\u043e\u0441\u043b\u0430\u043d\u043e</translation>\n     </message>\n+    <message numerus=\"yes\">\n+        <source>Open for %n more block(s)</source>\n+        <translation><numerusform>\u041e\u0442\u043a\u0440\u044b\u0442\u043e \u0434\u043b\u044f \u0435\u0449\u0451 %n \u0431\u043b\u043e\u043a\u0430</numerusform><numerusform>\u041e\u0442\u043a\u0440\u044b\u0442\u043e \u0434\u043b\u044f \u0435\u0449\u0451 %n \u0431\u043b\u043e\u043a\u043e\u0432</numerusform><numerusform>\u041e\u0442\u043a\u0440\u044b\u0442\u043e \u0434\u043b\u044f \u0435\u0449\u0451 %n \u0431\u043b\u043e\u043a\u043e\u0432</numerusform><numerusform>\u041e\u0442\u043a\u0440\u044b\u0442\u043e \u0434\u043b\u044f \u0435\u0449\u0451 %n \u0431\u043b\u043e\u043a\u043e\u0432</numerusform></translation>\n+    </message>\n     <message>\n         <source>unknown</source>\n         <translation>\u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e</translation>\n@@ -2425,6 +2557,10 @@\n         <source>Immature (%1 confirmations, will be available after %2)</source>\n         <translation>\u041d\u0435\u0437\u0440\u0435\u043b\u044b\u0439 (%1 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0439, \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u043f\u043e\u0441\u043b\u0435 %2)</translation>\n     </message>\n+    <message numerus=\"yes\">\n+        <source>Open for %n more block(s)</source>\n+        <translation><numerusform>\u041e\u0442\u043a\u0440\u044b\u0442\u043e \u0434\u043b\u044f \u0435\u0449\u0451 %n \u0431\u043b\u043e\u043a\u0430</numerusform><numerusform>\u041e\u0442\u043a\u0440\u044b\u0442\u043e \u0434\u043b\u044f \u0435\u0449\u0451 %n \u0431\u043b\u043e\u043a\u043e\u0432</numerusform><numerusform>\u041e\u0442\u043a\u0440\u044b\u0442\u043e \u0434\u043b\u044f \u0435\u0449\u0451 %n \u0431\u043b\u043e\u043a\u043e\u0432</numerusform><numerusform>\u041e\u0442\u043a\u0440\u044b\u0442\u043e \u0434\u043b\u044f \u0435\u0449\u0451 %n \u0431\u043b\u043e\u043a\u043e\u0432</numerusform></translation>\n+    </message>\n     <message>\n         <source>Open until %1</source>\n         <translation>\u041e\u0442\u043a\u0440\u044b\u0442\u043e \u0434\u043e %1</translation>\n@@ -2584,6 +2720,10 @@\n         <source>Copy transaction ID</source>\n         <translation>\u0421\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c ID \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438</translation>\n     </message>\n+    <message>\n+        <source>Copy raw transaction</source>\n+        <translation>\u0421\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0441\u0445\u043e\u0434\u043d\u0443\u044e \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438</translation>\n+    </message>\n     <message>\n         <source>Edit label</source>\n         <translation>\u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043c\u0435\u0442\u043a\u0443</translation>\n@@ -2731,10 +2871,42 @@\n         <source>Accept command line and JSON-RPC commands</source>\n         <translation>\u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b JSON-RPC</translation>\n     </message>\n+    <message>\n+        <source>If &lt;category&gt; is not supplied or if &lt;category&gt; = 1, output all debugging information.</source>\n+        <translation>\u0415\u0441\u043b\u0438 &lt;category&gt; \u043d\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0438\u043b\u0438 \u0440\u0430\u0432\u043d\u0430 1, \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0432\u0441\u044e \u043e\u0442\u043b\u0430\u0434\u043e\u0447\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e.</translation>\n+    </message>\n+    <message>\n+        <source>Maximum total fees (in %s) to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)</source>\n+        <translation>\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043a\u043e\u043c\u0438\u0441\u0441\u0438\u0439 (%s) \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0439 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u0432 \u0431\u0443\u043c\u0430\u0436\u043d\u0438\u043a\u0435; \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043d\u0438\u0437\u043a\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u0442\u044c \u043f\u0440\u0435\u0440\u044b\u0432\u0430\u043d\u0438\u0435 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: %s)</translation>\n+    </message>\n+    <message>\n+        <source>Please check that your computer's date and time are correct! If your clock is wrong Bitcoin Core will not work properly.</source>\n+        <translation>\u0412\u043d\u0438\u043c\u0430\u043d\u0438\u0435: \u0443\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u0434\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430 \u0412\u0430\u0448\u0435\u043c \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0435 \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0432\u0435\u0440\u043d\u043e! \u0415\u0441\u043b\u0438 \u0412\u0430\u0448\u0438 \u0447\u0430\u0441\u044b \u0438\u0434\u0443\u0442 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e, Bitcoin Core \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e.</translation>\n+    </message>\n+    <message>\n+        <source>Prune configured below the minimum of %d MiB.  Please use a higher number.</source>\n+        <translation>\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0431\u043b\u043e\u043a\u043e\u0432 \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043e \u043d\u0438\u0436\u0435, \u0447\u0435\u043c \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0432 %d \u041c\u0431. \u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.</translation>\n+    </message>\n+    <message>\n+        <source>Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)</source>\n+        <translation>\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435: \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430 \u0432\u044b\u0448\u043b\u0430 \u0437\u0430 \u0440\u0430\u043c\u043a\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u0412\u0430\u043c \u043d\u0443\u0436\u0435\u043d -reindex (\u0441\u043a\u0430\u0447\u0430\u0442\u044c \u0432\u0441\u044e  \u0446\u0435\u043f\u044c \u0431\u043b\u043e\u043a\u043e\u0432 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0443\u0437\u043b\u0430)</translation>\n+    </message>\n+    <message>\n+        <source>Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, &gt;%u = target size in MiB to use for block files)</source>\n+        <translation>\u0423\u043c\u0435\u043d\u044c\u0448\u0438\u0442\u044c \u0440\u0430\u0437\u043c\u0435\u0440 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0437\u0430 \u0441\u0447\u0451\u0442 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f (\u043e\u0431\u0440\u0435\u0437\u0430\u043d\u0438\u044f) \u0441\u0442\u0430\u0440\u044b\u0445 \u0431\u043b\u043e\u043a\u043e\u0432. \u042d\u0442\u043e\u0442 \u0440\u0435\u0436\u0438\u043c \u043d\u0435\u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c \u0441 -txindex \u0438  -rescan. \u0412\u043d\u0438\u043c\u0430\u043d\u0438\u0435: \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u044d\u0442\u043e\u0439 \u043e\u043f\u0446\u0438\u0438 \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043f\u043e\u043b\u043d\u043e\u0439 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0446\u0435\u043f\u0438 \u0431\u043b\u043e\u043a\u043e\u0432. (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 0 = \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0431\u043b\u043e\u043a\u043e\u0432, &gt;%u = \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0432 \u041c\u0431 \u0434\u043b\u044f \u0444\u0430\u0439\u043b\u043e\u0432 \u0431\u043b\u043e\u043a\u043e\u0432)</translation>\n+    </message>\n+    <message>\n+        <source>Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.</source>\n+        <translation>\u041f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0435 \u0441\u043a\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0432 \u0440\u0435\u0436\u0438\u043c\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f. \u0412\u0430\u043c \u043d\u0430\u0434\u043e \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c -reindex, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442 \u0437\u0430\u043d\u043e\u0432\u043e \u0432\u0441\u044e \u0446\u0435\u043f\u044c \u0431\u043b\u043e\u043a\u043e\u0432.</translation>\n+    </message>\n     <message>\n         <source>Error: A fatal internal error occurred, see debug.log for details</source>\n         <translation>\u041e\u0448\u0438\u0431\u043a\u0430: \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043d\u0435\u0443\u0441\u0442\u0440\u0430\u043d\u0438\u043c\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430, \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0432 debug.log</translation>\n     </message>\n+    <message>\n+        <source>Fee (in %s/kB) to add to transactions you send (default: %s)</source>\n+        <translation>\u041a\u043e\u043c\u0438\u0441\u0441\u0438\u044f (\u0432 %s/\u041a\u0431) \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a \u0432\u0430\u0448\u0438\u043c \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f\u043c (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: %s)</translation>\n+    </message>\n     <message>\n         <source>Pruning blockstore...</source>\n         <translation>\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0431\u043b\u043e\u043a\u043e\u0432...</translation>\n@@ -2743,6 +2915,10 @@\n         <source>Run in the background as a daemon and accept commands</source>\n         <translation>\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c\u0441\u044f \u0432 \u0444\u043e\u043d\u0435 \u043a\u0430\u043a \u0434\u0435\u043c\u043e\u043d \u0438 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b</translation>\n     </message>\n+    <message>\n+        <source>Unable to start HTTP server. See debug log for details.</source>\n+        <translation>\u041d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c HTTP \u0441\u0435\u0440\u0432\u0435\u0440. \u0421\u043c\u043e\u0442\u0440\u0438 debug \u043b\u043e\u0433 \u0434\u043b\u044f \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0435\u0439.</translation>\n+    </message>\n     <message>\n         <source>Accept connections from outside (default: 1 if no -proxy or -connect)</source>\n         <translation>\u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438\u0437\u0432\u043d\u0435 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 1, \u0435\u0441\u043b\u0438 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f -proxy \u0438\u043b\u0438 -connect)</translation>\n@@ -2767,6 +2943,10 @@\n         <source>Set the number of script verification threads (%u to %d, 0 = auto, &lt;0 = leave that many cores free, default: %d)</source>\n         <translation>\u0417\u0430\u0434\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u043e \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0441\u043a\u0440\u0438\u043f\u0442\u0430 (\u043e\u0442 %u \u0434\u043e %d, 0=\u0430\u0432\u0442\u043e, &lt;0 = \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0441\u0442\u043e\u043b\u044c\u043a\u043e \u044f\u0434\u0435\u0440 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u043c\u0438, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: %d)</translation>\n     </message>\n+    <message>\n+        <source>The block database contains a block which appears to be from the future. This may be due to your computer's date and time being set incorrectly. Only rebuild the block database if you are sure that your computer's date and time are correct</source>\n+        <translation>\u0411\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u043b\u043e\u043a\u043e\u0432 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0431\u043b\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u0437 \u0431\u0443\u0434\u0443\u0449\u0435\u0433\u043e. \u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0438\u0437-\u0437\u0430 \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u0442\u044b \u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043d\u0430 \u0432\u0430\u0448\u0435\u043c \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0435. \u041e\u0441\u0442\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0435\u0441\u0442\u0440\u043e\u0438\u0432\u0430\u0442\u044c \u0431\u0430\u0437\u0443 \u0431\u043b\u043e\u043a\u043e\u0432, \u0435\u0441\u043b\u0438 \u0432\u044b \u0443\u0432\u0435\u0440\u0435\u043d\u044b, \u0447\u0442\u043e \u0434\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b.</translation>\n+    </message>\n     <message>\n         <source>This is a pre-release test build - use at your own risk - do not use for mining or merchant applications</source>\n         <translation>\u042d\u0442\u043e \u043f\u0440\u0435-\u0440\u0435\u043b\u0438\u0437\u043d\u0430\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0441\u0431\u043e\u0440\u043a\u0430 - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043d\u0430 \u0441\u0432\u043e\u0439 \u0441\u0442\u0440\u0430\u0445 \u0438 \u0440\u0438\u0441\u043a - \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0434\u043b\u044f \u0434\u043e\u0431\u044b\u0447\u0438 \u0438\u043b\u0438 \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439</translation>\n@@ -2775,6 +2955,10 @@\n         <source>Unable to bind to %s on this computer. Bitcoin Core is probably already running.</source>\n         <translation>\u041d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0437\u0430\u0431\u0438\u043d\u0434\u0438\u0442\u044c\u0441\u044f \u043d\u0430 %s \u043d\u0430 \u044d\u0442\u043e\u043c \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0435. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, Bitcoin Core \u0443\u0436\u0435 \u0437\u0430\u043f\u0443\u0449\u0435\u043d.</translation>\n     </message>\n+    <message>\n+        <source>Use UPnP to map the listening port (default: 1 when listening and no -proxy)</source>\n+        <translation>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c UPnP \u0434\u043b\u044f \u043f\u0440\u043e\u0431\u0440\u043e\u0441\u0430 \u043f\u043e\u0440\u0442\u0430 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 1, \u0435\u0441\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u0435 \u0438 \u043d\u0435\u0442 -proxy)</translation>\n+    </message>\n     <message>\n         <source>WARNING: abnormally high number of blocks generated, %d blocks received in the last %d hours (%d expected)</source>\n         <translation>\u0412\u041d\u0418\u041c\u0410\u041d\u0418\u0415: \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043e \u043d\u0435\u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0431\u043b\u043e\u043a\u043e\u0432, %d \u0431\u043b\u043e\u043a\u043e\u0432 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 %d \u0447\u0430\u0441\u043e\u0432 (\u043e\u0436\u0438\u0434\u0430\u043b\u043e\u0441\u044c %d)</translation>\n@@ -2803,6 +2987,10 @@\n         <source>(default: 1)</source>\n         <translation>(\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 1)</translation>\n     </message>\n+    <message>\n+        <source>-maxmempool must be at least %d MB</source>\n+        <translation>-maxmempool \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c %d MB</translation>\n+    </message>\n     <message>\n         <source>&lt;category&gt; can be:</source>\n         <translation>&lt;category&gt; \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c:</translation>\n@@ -2835,6 +3023,22 @@\n         <source>Do you want to rebuild the block database now?</source>\n         <translation>\u041f\u0435\u0440\u0435\u0441\u043e\u0431\u0440\u0430\u0442\u044c \u0411\u0414 \u0431\u043b\u043e\u043a\u043e\u0432 \u043f\u0440\u044f\u043c\u043e \u0441\u0435\u0439\u0447\u0430\u0441?</translation>\n     </message>\n+    <message>\n+        <source>Enable publish hash block in &lt;address&gt;</source>\n+        <translation>\u0412\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0439 \u0445\u0435\u0448 \u0431\u043b\u043e\u043a\u0430 \u0432 &lt;address&gt;</translation>\n+    </message>\n+    <message>\n+        <source>Enable publish hash transaction in &lt;address&gt;</source>\n+        <translation>\u0412\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0439 \u0445\u0435\u0448 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u0432 &lt;address&gt;</translation>\n+    </message>\n+    <message>\n+        <source>Enable publish raw block in &lt;address&gt;</source>\n+        <translation>\u0412\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0439 \u0441\u044b\u0440\u043e\u0439 \u0431\u043b\u043e\u043a \u0432 &lt;address&gt;</translation>\n+    </message>\n+    <message>\n+        <source>Enable publish raw transaction in &lt;address&gt;</source>\n+        <translation>\u0412\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u0443\u044e \u0441\u044b\u0440\u0443\u044e \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044e \u0432 &lt;address&gt;</translation>\n+    </message>\n     <message>\n         <source>Error initializing block database</source>\n         <translation>\u041e\u0448\u0438\u0431\u043a\u0430 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0411\u0414 \u0431\u043b\u043e\u043a\u043e\u0432</translation>\n@@ -2871,6 +3075,10 @@\n         <source>Invalid -onion address: '%s'</source>\n         <translation>\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 -onion \u0430\u0434\u0440\u0435\u0441: '%s'</translation>\n     </message>\n+    <message>\n+        <source>Keep the transaction memory pool below &lt;n&gt; megabytes (default: %u)</source>\n+        <translation>\u0421\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0442\u044c \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u0438\u0437 \u043f\u0430\u043c\u044f\u0442\u0438 \u043d\u0430 \u0434\u0438\u0441\u043a \u043a\u0430\u0436\u0434\u044b\u0435 &lt;n&gt; \u043c\u0435\u0433\u0430\u0431\u0430\u0439\u0442 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: %u)</translation>\n+    </message>\n     <message>\n         <source>Not enough file descriptors available.</source>\n         <translation>\u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0445 \u0434\u0435\u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0440\u043e\u0432.</translation>\n@@ -2899,10 +3107,26 @@\n         <source>Specify wallet file (within data directory)</source>\n         <translation>\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0444\u0430\u0439\u043b \u0431\u0443\u043c\u0430\u0436\u043d\u0438\u043a\u0430 (\u0432\u043d\u0443\u0442\u0440\u0438 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0430 \u0434\u0430\u043d\u043d\u044b\u0445)</translation>\n     </message>\n+    <message>\n+        <source>Unsupported argument -benchmark ignored, use -debug=bench.</source>\n+        <translation>\u041d\u0435\u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 -benchmark \u043f\u0440\u043e\u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u043d, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 -debug=bench.</translation>\n+    </message>\n+    <message>\n+        <source>Unsupported argument -debugnet ignored, use -debug=net.</source>\n+        <translation>\u041d\u0435\u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 -debugnet \u043f\u0440\u043e\u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u043d, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 -debug=net.</translation>\n+    </message>\n+    <message>\n+        <source>Unsupported argument -tor found, use -onion.</source>\n+        <translation>\u041e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 -tor, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 -onion.</translation>\n+    </message>\n     <message>\n         <source>Use UPnP to map the listening port (default: %u)</source>\n         <translation>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c UPnP \u0434\u043b\u044f \u043f\u0440\u043e\u0431\u0440\u043e\u0441\u0430 \u043f\u043e\u0440\u0442\u0430 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: %u)</translation>\n     </message>\n+    <message>\n+        <source>User Agent comment (%s) contains unsafe characters.</source>\n+        <translation>\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f (%s) \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u0435\u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b.</translation>\n+    </message>\n     <message>\n         <source>Verifying blocks...</source>\n         <translation>\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0431\u043b\u043e\u043a\u043e\u0432...</translation>\n@@ -2959,6 +3183,10 @@\n         <source>Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)</source>\n         <translation>\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u0443, \u043a\u043e\u0433\u0434\u0430 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e \u0442\u0440\u0435\u0432\u043e\u0433\u0435 \u0438\u043b\u0438 \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0447\u0435\u043d\u044c \u0434\u043b\u0438\u043d\u043d\u043e\u0435 \u0440\u0430\u0441\u0449\u0435\u043f\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043f\u0438 (%s \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043d\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435)</translation>\n     </message>\n+    <message>\n+        <source>Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)</source>\n+        <translation>\u041a\u043e\u043c\u0438\u0441\u0441\u0438\u0438 (\u0432 %s/\u041a\u0431) \u043c\u0435\u043d\u044c\u0448\u0438\u0435 \u044d\u0442\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u0447\u0438\u0442\u0430\u044e\u0442\u0441\u044f \u043d\u0443\u043b\u0435\u0432\u044b\u043c\u0438 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f, \u0440\u0435\u0442\u0440\u0430\u043d\u0441\u043b\u044f\u0446\u0438\u0438, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: %s)</translation>\n+    </message>\n     <message>\n         <source>If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)</source>\n         <translation>\u0415\u0441\u043b\u0438 paytxfee \u043d\u0435 \u0437\u0430\u0434\u0430\u043d, \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u0443\u044e \u043a\u043e\u043c\u0438\u0441\u0441\u0438\u044e \u0434\u043b\u044f \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0437\u0430 n \u0431\u043b\u043e\u043a\u043e\u0432 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: %u)</translation>\n@@ -3015,6 +3243,18 @@\n         <source>Activating best chain...</source>\n         <translation>\u0410\u043a\u0442\u0438\u0432\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043b\u0443\u0447\u0448\u0430\u044f \u0446\u0435\u043f\u044c...</translation>\n     </message>\n+    <message>\n+        <source>Always relay transactions received from whitelisted peers (default: %d)</source>\n+        <translation>\u0412\u0441\u0435\u0433\u0434\u0430 \u0442\u0440\u0430\u043d\u0441\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 \u0431\u0435\u043b\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: %d)</translation>\n+    </message>\n+    <message>\n+        <source>Attempt to recover private keys from a corrupt wallet.dat on startup</source>\n+        <translation>\u041f\u043e\u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u0435 \u043a\u043b\u044e\u0447\u0438 \u0438\u0437 \u043f\u043e\u0432\u0440\u0435\u0436\u0434\u0451\u043d\u043d\u043e\u0433\u043e wallet.dat \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435</translation>\n+    </message>\n+    <message>\n+        <source>Automatically create Tor hidden service (default: %d)</source>\n+        <translation>\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u043a\u0440\u044b\u0442\u044b\u0439 Tor \u0441\u0435\u0440\u0432\u0438\u0441 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: %d)</translation>\n+    </message>\n     <message>\n         <source>Cannot resolve -whitebind address: '%s'</source>\n         <translation>\u041d\u0435 \u0443\u0434\u0430\u0451\u0442\u0441\u044f \u0440\u0430\u0437\u0440\u0435\u0448\u0438\u0442\u044c \u0430\u0434\u0440\u0435\u0441 \u0432 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0435 -whitebind: '%s'</translation>\n@@ -3039,6 +3279,10 @@\n         <source>Error reading from database, shutting down.</source>\n         <translation>\u041e\u0448\u0438\u0431\u043a\u0430 \u0447\u0442\u0435\u043d\u0438\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u0440\u0430\u0431\u043e\u0442\u0430 \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442\u0441\u044f.</translation>\n     </message>\n+    <message>\n+        <source>Imports blocks from external blk000??.dat file on startup</source>\n+        <translation>\u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0431\u043b\u043e\u043a\u0438 \u0438\u0437 \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u0444\u0430\u0439\u043b\u0430 blk000?.dat \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435</translation>\n+    </message>\n     <message>\n         <source>Information</source>\n         <translation>\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f</translation>\n@@ -3091,6 +3335,14 @@\n         <source>Receive and display P2P network alerts (default: %u)</source>\n         <translation>\u041f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c P2P \u0441\u0435\u0442\u0435\u0432\u044b\u0435 \u0442\u0440\u0435\u0432\u043e\u0433\u0438 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: %u)</translation>\n     </message>\n+    <message>\n+        <source>Reducing -maxconnections from %d to %d, because of system limitations.</source>\n+        <translation>\u0423\u043c\u0435\u043d\u044c\u0448\u0438\u0442\u0435 -maxconnections \u0441 %d \u0434\u043e %d, \u0438\u0437-\u0437\u0430 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.</translation>\n+    </message>\n+    <message>\n+        <source>Rescan the block chain for missing wallet transactions on startup</source>\n+        <translation>\u041f\u0435\u0440\u0435\u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0446\u0435\u043f\u044c \u0431\u043b\u043e\u043a\u043e\u0432 \u043d\u0430 \u043f\u0440\u0435\u0434\u043c\u0435\u0442 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0432 \u0431\u0443\u043c\u0430\u0436\u043d\u0438\u043a\u0435 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435</translation>\n+    </message>\n     <message>\n         <source>Send trace/debug info to console instead of debug.log file</source>\n         <translation>\u0412\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0442\u0440\u0430\u0441\u0441\u0438\u0440\u043e\u0432\u043a\u0438/\u043e\u0442\u043b\u0430\u0434\u043a\u0438 \u043d\u0430 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0432\u043c\u0435\u0441\u0442\u043e \u0444\u0430\u0439\u043b\u0430 debug.log</translation>\n@@ -3135,6 +3387,14 @@\n         <source>This is experimental software.</source>\n         <translation>\u042d\u0442\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u041f\u041e.</translation>\n     </message>\n+    <message>\n+        <source>Tor control port password (default: empty)</source>\n+        <translation>\u041f\u0430\u0440\u043e\u043b\u044c \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f \u043f\u043e\u0440\u0442\u0430 Tor (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u043f\u0443\u0441\u0442\u043e\u0439)</translation>\n+    </message>\n+    <message>\n+        <source>Tor control port to use if onion listening enabled (default: %s)</source>\n+        <translation>\u041f\u043e\u0440\u0442 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f Tor \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f, \u0435\u0441\u043b\u0438 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u043e \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u0435 onion (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: %s)</translation>\n+    </message>\n     <message>\n         <source>Transaction amount too small</source>\n         <translation>\u0421\u0443\u043c\u043c\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u0430\u043b\u0430</translation>\n@@ -3159,6 +3419,10 @@\n         <source>Unable to bind to %s on this computer (bind returned error %s)</source>\n         <translation>\u041d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u0442\u044c\u0441\u044f \u043a %s \u043d\u0430 \u044d\u0442\u043e\u043c \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0435 (bind \u0432\u0435\u0440\u043d\u0443\u043b \u043e\u0448\u0438\u0431\u043a\u0443 %s)</translation>\n     </message>\n+    <message>\n+        <source>Upgrade wallet to latest format on startup</source>\n+        <translation>\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0431\u0443\u043c\u0430\u0436\u043d\u0438\u043a \u0434\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0444\u043e\u0440\u043c\u0430\u0442\u0430 \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435</translation>\n+    </message>\n     <message>\n         <source>Username for JSON-RPC connections</source>\n         <translation>\u0418\u043c\u044f \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 JSON-RPC</translation>\n@@ -3171,10 +3435,18 @@\n         <source>Warning</source>\n         <translation>\u0412\u043d\u0438\u043c\u0430\u043d\u0438\u0435</translation>\n     </message>\n+    <message>\n+        <source>Whether to operate in a blocks only mode (default: %u)</source>\n+        <translation>\u0411\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u0440\u0435\u0436\u0438\u043c\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0431\u043b\u043e\u043a\u043e\u0432 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: %u)</translation>\n+    </message>\n     <message>\n         <source>Zapping all transactions from wallet...</source>\n         <translation>\u0421\u0442\u0438\u0440\u0430\u0435\u043c \u0432\u0441\u0435 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u0438\u0437 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430...</translation>\n     </message>\n+    <message>\n+        <source>ZeroMQ notification options:</source>\n+        <translation>ZeroMQ \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043e\u043f\u043e\u0432\u0435\u0449\u0435\u043d\u0438\u044f:</translation>\n+    </message>\n     <message>\n         <source>wallet.dat corrupt, salvage failed</source>\n         <translation>wallet.dat \u043f\u043e\u0432\u0440\u0435\u0436\u0434\u0451\u043d, \u0441\u043f\u0430\u0441\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c</translation>\n@@ -3207,6 +3479,22 @@\n         <source>(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)</source>\n         <translation>(1 = \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438: \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0430; 2 = \u043e\u0442\u0431\u0440\u043e\u0441\u0438\u0442\u044c \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435)</translation>\n     </message>\n+    <message>\n+        <source>-maxtxfee is set very high! Fees this large could be paid on a single transaction.</source>\n+        <translation>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e \u043e\u0447\u0435\u043d\u044c \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 -maxtxfee. \u0422\u0430\u043a\u0438\u0435 \u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u043a\u043e\u043c\u0438\u0441\u0441\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0443\u043f\u043b\u0430\u0447\u0435\u043d\u044b \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438.</translation>\n+    </message>\n+    <message>\n+        <source>-paytxfee is set very high! This is the transaction fee you will pay if you send a transaction.</source>\n+        <translation>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e \u043e\u0447\u0435\u043d\u044c \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 -paytxfee. \u0422\u0430\u043a\u0438\u0435 \u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u043a\u043e\u043c\u0438\u0441\u0441\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0443\u043f\u043b\u0430\u0447\u0435\u043d\u044b \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438.</translation>\n+    </message>\n+    <message>\n+        <source>Do not keep transactions in the mempool longer than &lt;n&gt; hours (default: %u)</source>\n+        <translation>\u041d\u0435 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u0432 \u043f\u0430\u043c\u044f\u0442\u0438 \u0434\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c &lt;n&gt; \u0447\u0430\u0441\u043e\u0432 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e %u)</translation>\n+    </message>\n+    <message>\n+        <source>Error reading wallet.dat! All keys read correctly, but transaction data or address book entries might be missing or incorrect.</source>\n+        <translation>\u041e\u0448\u0438\u0431\u043a\u0430 \u0447\u0442\u0435\u043d\u0438\u044f wallet.dat! \u0412\u0441\u0435 \u043a\u043b\u044e\u0447\u0438 \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u043d\u044b \u0432\u0435\u0440\u043d\u043e, \u043d\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 \u0438\u043b\u0438 \u0437\u0430\u043f\u0438\u0441\u0438 \u0430\u0434\u0440\u0435\u0441\u043d\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u043c\u043e\u0433\u0443\u0442 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0438\u043b\u0438 \u0431\u044b\u0442\u044c \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u043c\u0438.</translation>\n+    </message>\n     <message>\n         <source>How thorough the block verification of -checkblocks is (0-4, default: %u)</source>\n         <translation>\u041d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u0449\u0430\u0442\u0435\u043b\u044c\u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u044b\u0445 \u0431\u043b\u043e\u043a\u043e\u0432 -checkblocks (0-4, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: %u)</translation>\n@@ -3223,6 +3511,18 @@\n         <source>Output debugging information (default: %u, supplying &lt;category&gt; is optional)</source>\n         <translation>\u0412\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043e\u0442\u043b\u0430\u0434\u043e\u0447\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: %u, \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435 &lt;category&gt; \u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e)</translation>\n     </message>\n+    <message>\n+        <source>Total length of network version string (%i) exceeds maximum length (%i). Reduce the number or size of uacomments.</source>\n+        <translation>\u0422\u0435\u043a\u0443\u0449\u0430\u044f \u0434\u043b\u0438\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432\u0435\u0440\u0441\u0438\u0438 \u0441\u0435\u0442\u0438 (%i) \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0434\u043b\u0438\u043d\u0443 (%i). \u0423\u0432\u0435\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u043b\u0438 \u0440\u0430\u0437\u043c\u0435\u0440 uacomments.</translation>\n+    </message>\n+    <message>\n+        <source>Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: %d)</source>\n+        <translation>\u041f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0442\u044c \u0438\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u0442\u0440\u0430\u0444\u0438\u043a \u0434\u043e (\u0432 \u041c\u0411 \u0437\u0430 24\u0447), 0 = \u043d\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u0442\u044c (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: %d)</translation>\n+    </message>\n+    <message>\n+        <source>Unsupported argument -socks found. Setting SOCKS version isn't possible anymore, only SOCKS5 proxies are supported.</source>\n+        <translation>\u041e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 -socks. \u0412\u044b\u0431\u043e\u0440 \u0432\u0435\u0440\u0441\u0438\u0438 SOCKS \u0431\u043e\u043b\u0435\u0435 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u0435\u043d, \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u043a\u0441\u0438 SOCKS5.</translation>\n+    </message>\n     <message>\n         <source>Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)</source>\n         <translation>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u043e\u043a\u0441\u0438 SOCKS5 \u0434\u043b\u044f \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0441 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u043c\u0438 \u0447\u0435\u0440\u0435\u0437 \u0441\u043a\u0440\u044b\u0442\u044b\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u044b Tor (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: %s)</translation>"
      },
      {
        "sha": "bb7fcf70754c849bc3984d2831b3791f9e9eae33",
        "filename": "src/qt/locale/bitcoin_sv.ts",
        "status": "modified",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc1f4275705a6aae03ce439cd317ec4166075c08/src/qt/locale/bitcoin_sv.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc1f4275705a6aae03ce439cd317ec4166075c08/src/qt/locale/bitcoin_sv.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_sv.ts?ref=bc1f4275705a6aae03ce439cd317ec4166075c08",
        "patch": "@@ -2054,6 +2054,10 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Copy change</source>\n         <translation>Kopiera v\u00e4xel</translation>\n     </message>\n+    <message>\n+        <source>Total Amount %1</source>\n+        <translation>Total summa %1</translation>\n+    </message>\n     <message>\n         <source>or</source>\n         <translation>eller</translation>\n@@ -2086,6 +2090,10 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Payment request expired.</source>\n         <translation>Betalningsbeg\u00e4ran l\u00f6pte ut.</translation>\n     </message>\n+    <message>\n+        <source>Pay only the required fee of %1</source>\n+        <translation>Betala endast den n\u00f6dv\u00e4ndiga avgiften p\u00e5 %1</translation>\n+    </message>\n     <message numerus=\"yes\">\n         <source>Estimated to begin confirmation within %n block(s).</source>\n         <translation><numerusform>Uppskattas till att p\u00e5b\u00f6rja bekr\u00e4ftelse inom %n block.</numerusform><numerusform>Uppskattas till att p\u00e5b\u00f6rja bekr\u00e4ftelse inom %n block.</numerusform></translation>\n@@ -2717,6 +2725,10 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Copy transaction ID</source>\n         <translation>Kopiera transaktions ID</translation>\n     </message>\n+    <message>\n+        <source>Copy raw transaction</source>\n+        <translation>Kopiera r\u00e5 transaktion</translation>\n+    </message>\n     <message>\n         <source>Edit label</source>\n         <translation>\u00c4ndra etikett</translation>\n@@ -3176,6 +3188,10 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)</source>\n         <translation>Exekvera kommando n\u00e4r ett relevant meddelande \u00e4r mottagen eller n\u00e4r vi ser en v\u00e4ldigt l\u00e5ng f\u00f6rgrening (%s i cmd \u00e4r utbytt med ett meddelande)</translation>\n     </message>\n+    <message>\n+        <source>Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)</source>\n+        <translation>Avgifter (i %s/kB) mindre \u00e4n detta betraktas som nollavgift f\u00f6r vidarebefordran, mining och transaktionsskapande (f\u00f6rvalt: %s)</translation>\n+    </message>\n     <message>\n         <source>If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)</source>\n         <translation>Om paytxfee inte \u00e4r satt, inkludera tillr\u00e4cklig avgift s\u00e5 att transaktionen b\u00f6rjar att konfirmeras inom n blocks (f\u00f6rvalt: %u)</translation>\n@@ -3228,6 +3244,18 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Activating best chain...</source>\n         <translation>Aktiverar b\u00e4sta kedjan...</translation>\n     </message>\n+    <message>\n+        <source>Always relay transactions received from whitelisted peers (default: %d)</source>\n+        <translation>Vidarebefordra alltid transaktioner fr\u00e5n vitlistade noder (f\u00f6rval: %d)</translation>\n+    </message>\n+    <message>\n+        <source>Attempt to recover private keys from a corrupt wallet.dat on startup</source>\n+        <translation>F\u00f6rs\u00f6k att r\u00e4dda privata nycklar fr\u00e5n en korrupt wallet.dat vid uppstart</translation>\n+    </message>\n+    <message>\n+        <source>Automatically create Tor hidden service (default: %d)</source>\n+        <translation>Skapa automatiskt dold tj\u00e4nst i Tor (f\u00f6rval: %d)</translation>\n+    </message>\n     <message>\n         <source>Cannot resolve -whitebind address: '%s'</source>\n         <translation>Kan inte matcha -whitebind adress: '%s'</translation>\n@@ -3252,6 +3280,10 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Error reading from database, shutting down.</source>\n         <translation>Fel vid l\u00e4sning fr\u00e5n databas, avslutar.</translation>\n     </message>\n+    <message>\n+        <source>Imports blocks from external blk000??.dat file on startup</source>\n+        <translation>Importera block fr\u00e5n extern blk000??.dat-fil vid uppstart</translation>\n+    </message>\n     <message>\n         <source>Information</source>\n         <translation>Information</translation>\n@@ -3308,6 +3340,10 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Reducing -maxconnections from %d to %d, because of system limitations.</source>\n         <translation>Minskar -maxconnections fr\u00e5n %d till %d, p\u00e5 grund av systembegr\u00e4nsningar.</translation>\n     </message>\n+    <message>\n+        <source>Rescan the block chain for missing wallet transactions on startup</source>\n+        <translation>S\u00f6k i blockkedjan efter saknade pl\u00e5nbokstransaktioner vid uppstart</translation>\n+    </message>\n     <message>\n         <source>Send trace/debug info to console instead of debug.log file</source>\n         <translation>Skicka trace-/debuginformation till terminalen ist\u00e4llet f\u00f6r till debug.log</translation>\n@@ -3352,6 +3388,14 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>This is experimental software.</source>\n         <translation>Detta \u00e4r experimentmjukvara.</translation>\n     </message>\n+    <message>\n+        <source>Tor control port password (default: empty)</source>\n+        <translation>L\u00f6senord f\u00f6r Tor-kontrollport (f\u00f6rval: inget)</translation>\n+    </message>\n+    <message>\n+        <source>Tor control port to use if onion listening enabled (default: %s)</source>\n+        <translation>Tor-kontrollport att anv\u00e4nda om onion \u00e4r aktiverat (f\u00f6rval: %s)</translation>\n+    </message>\n     <message>\n         <source>Transaction amount too small</source>\n         <translation>Transaktions belopp f\u00f6r liten</translation>\n@@ -3376,6 +3420,10 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Unable to bind to %s on this computer (bind returned error %s)</source>\n         <translation>Det g\u00e5r inte att binda till %s p\u00e5 den h\u00e4r datorn (bind returnerade felmeddelande %s)</translation>\n     </message>\n+    <message>\n+        <source>Upgrade wallet to latest format on startup</source>\n+        <translation>Uppgradera pl\u00e5nbok till senaste formatet vid uppstart</translation>\n+    </message>\n     <message>\n         <source>Username for JSON-RPC connections</source>\n         <translation>Anv\u00e4ndarnamn f\u00f6r JSON-RPC-anslutningar</translation>\n@@ -3388,6 +3436,10 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Warning</source>\n         <translation>Varning</translation>\n     </message>\n+    <message>\n+        <source>Whether to operate in a blocks only mode (default: %u)</source>\n+        <translation>Ska allt g\u00f6ras i endast block-l\u00e4ge (f\u00f6rval: %u)</translation>\n+    </message>\n     <message>\n         <source>Zapping all transactions from wallet...</source>\n         <translation>T\u00f6m pl\u00e5nboken p\u00e5 alla transaktioner...</translation>"
      },
      {
        "sha": "adf9071ede3f8992bb0377c5628da26401ef686d",
        "filename": "src/qt/locale/bitcoin_zh_TW.ts",
        "status": "modified",
        "additions": 35,
        "deletions": 11,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc1f4275705a6aae03ce439cd317ec4166075c08/src/qt/locale/bitcoin_zh_TW.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc1f4275705a6aae03ce439cd317ec4166075c08/src/qt/locale/bitcoin_zh_TW.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_zh_TW.ts?ref=bc1f4275705a6aae03ce439cd317ec4166075c08",
        "patch": "@@ -403,7 +403,7 @@\n     </message>\n     <message>\n         <source>Request payments (generates QR codes and bitcoin: URIs)</source>\n-        <translation>\u8981\u6c42\u4ed8\u6b3e(\u7522\u751f QR Code \u548c\u4f4d\u5143\u5e63\u4ed8\u6b3e\u5354\u8b70\u7684 URI)</translation>\n+        <translation>\u8981\u6c42\u4ed8\u6b3e(\u7522\u751f QR Code \u548c\u4f4d\u5143\u5e63\u4ed8\u6b3e\u5354\u8b70\u7684\u8cc7\u6e90\u8b58\u5225\u78bc: URI)</translation>\n     </message>\n     <message>\n         <source>&amp;About Bitcoin Core</source>\n@@ -423,7 +423,7 @@\n     </message>\n     <message>\n         <source>Open a bitcoin: URI or payment request</source>\n-        <translation>\u958b\u5553 bitcoin \u5354\u8b70\u7684 URI \u6216\u4ed8\u6b3e\u8981\u6c42</translation>\n+        <translation>\u958b\u5553 bitcoin \u5354\u8b70\u7684\u8cc7\u6e90\u8b58\u5225\u78bc(URI)\u6216\u4ed8\u6b3e\u8981\u6c42</translation>\n     </message>\n     <message>\n         <source>&amp;Command-line options</source>\n@@ -907,7 +907,7 @@\n     </message>\n     <message>\n         <source>Use a custom data directory:</source>\n-        <translation>\u4f7f\u7528\u81ea\u5b9a\u7684\u8cc7\u6599\u76ee\u9304:</translation>\n+        <translation>\u4f7f\u7528\u81ea\u8a02\u7684\u8cc7\u6599\u76ee\u9304:</translation>\n     </message>\n     <message>\n         <source>Bitcoin Core</source>\n@@ -997,7 +997,7 @@\n     </message>\n     <message>\n         <source>Third party URLs (e.g. a block explorer) that appear in the transactions tab as context menu items. %s in the URL is replaced by transaction hash. Multiple URLs are separated by vertical bar |.</source>\n-        <translation>\u5728\u4ea4\u6613\u9801\u7c64\u7684\u60c5\u5883\u9078\u55ae\u51fa\u73fe\u7684\u7b2c\u4e09\u65b9(\u6bd4\u5982\u8aaa\u5340\u584a\u63a2\u7d22\u7db2\u7ad9)\u7db2\u5740\u9023\u7d50\u3002\u7db2\u5740\u4e2d\u7684 %s \u6703\u88ab\u53d6\u4ee3\u70ba\u4ea4\u6613\u7684\u96dc\u6e4a\u503c\u3002\u53ef\u4ee5\u7528\u76f4\u7dda\u7b26\u865f | \u4f86\u5206\u9694\u591a\u500b\u9023\u7d50\u3002</translation>\n+        <translation>\u5728\u4ea4\u6613\u9801\u7c64\u7684\u60c5\u5883\u9078\u55ae\u51fa\u73fe\u7684\u7b2c\u4e09\u65b9\u7db2\u5740\u9023\u7d50(URL)\uff0c\u6bd4\u5982\u8aaa\u5340\u584a\u63a2\u7d22\u7db2\u7ad9\u3002\u7db2\u5740\u4e2d\u7684 %s \u6703\u88ab\u53d6\u4ee3\u70ba\u4ea4\u6613\u7684\u96dc\u6e4a\u503c\u3002\u53ef\u4ee5\u7528\u76f4\u7dda\u7b26\u865f | \u4f86\u5206\u9694\u591a\u500b\u9023\u7d50\u3002</translation>\n     </message>\n     <message>\n         <source>Third party transaction URLs</source>\n@@ -1291,11 +1291,11 @@\n     </message>\n     <message>\n         <source>Payment request fetch URL is invalid: %1</source>\n-        <translation>\u53d6\u5f97\u4ed8\u6b3e\u8981\u6c42\u7684 URL \u7121\u6548: %1</translation>\n+        <translation>\u53d6\u5f97\u4ed8\u6b3e\u8981\u6c42\u7684\u7db2\u5740\u9023\u7d50(URL)\u7121\u6548: %1</translation>\n     </message>\n     <message>\n         <source>URI cannot be parsed! This can be caused by an invalid Bitcoin address or malformed URI parameters.</source>\n-        <translation>\u6c92\u8fa6\u6cd5\u89e3\u6790 URI \u4f4d\u5740\uff01\u53ef\u80fd\u662f\u56e0\u70ba\u4f4d\u5143\u5e63\u4f4d\u5740\u7121\u6548\uff0c\u6216\u662f URI \u53c3\u6578\u683c\u5f0f\u932f\u8aa4\u3002</translation>\n+        <translation>\u6c92\u8fa6\u6cd5\u89e3\u6790\u8cc7\u6e90\u8b58\u5225\u78bc(URI)\uff01\u53ef\u80fd\u662f\u56e0\u70ba\u4f4d\u5143\u5e63\u4f4d\u5740\u7121\u6548\uff0c\u6216\u662f URI \u53c3\u6578\u683c\u5f0f\u932f\u8aa4\u3002</translation>\n     </message>\n     <message>\n         <source>Payment request file handling</source>\n@@ -1923,7 +1923,7 @@\n     </message>\n     <message>\n         <source>Custom change address</source>\n-        <translation>\u81ea\u5b9a\u627e\u96f6\u4f4d\u5740</translation>\n+        <translation>\u81ea\u8a02\u627e\u96f6\u4f4d\u5740</translation>\n     </message>\n     <message>\n         <source>Transaction Fee:</source>\n@@ -2194,19 +2194,19 @@\n     </message>\n     <message>\n         <source>This is an unauthenticated payment request.</source>\n-        <translation>\u9019\u662f\u500b\u6c92\u9a57\u8b49\u904e\u7684\u4ed8\u6b3e\u8981\u6c42\u3002</translation>\n+        <translation>\u9019\u662f\u500b\u6c92\u6709\u9a57\u8b49\u904e\u8eab\u4efd\u7684\u4ed8\u6b3e\u8981\u6c42\u3002</translation>\n     </message>\n     <message>\n         <source>This is an authenticated payment request.</source>\n-        <translation>\u9019\u662f\u500b\u5df2\u9a57\u8b49\u7684\u4ed8\u6b3e\u8981\u6c42\u3002</translation>\n+        <translation>\u9019\u662f\u500b\u5df2\u7d93\u9a57\u8b49\u904e\u8eab\u4efd\u7684\u4ed8\u6b3e\u8981\u6c42\u3002</translation>\n     </message>\n     <message>\n         <source>Enter a label for this address to add it to the list of used addresses</source>\n         <translation>\u8acb\u8f38\u5165\u9019\u500b\u4f4d\u5740\u7684\u6a19\u8a18\uff0c\u4f86\u628a\u5b83\u52a0\u9032\u53bb\u5df2\u4f7f\u7528\u904e\u4f4d\u5740\u7684\u6e05\u55ae\u3002</translation>\n     </message>\n     <message>\n         <source>A message that was attached to the bitcoin: URI which will be stored with the transaction for your reference. Note: This message will not be sent over the Bitcoin network.</source>\n-        <translation>\u9644\u52a0\u5728\u4f4d\u5143\u5e63\u4ed8\u6b3e\u5354\u8b70 URI \u4e2d\u7684\u8a0a\u606f\uff0c\u6703\u548c\u4ea4\u6613\u5167\u5bb9\u4e00\u8d77\u5b58\u8d77\u4f86\uff0c\u7d66\u4f60\u81ea\u5df1\u505a\u53c3\u8003\u3002\u6ce8\u610f: \u9019\u500b\u8a0a\u606f\u4e0d\u6703\u9001\u5230\u4f4d\u5143\u5e63\u7db2\u8def\u4e0a\u3002</translation>\n+        <translation>\u9644\u52a0\u5728\u4f4d\u5143\u5e63\u4ed8\u6b3e\u5354\u8b70\u7684\u8cc7\u6e90\u8b58\u5225\u78bc(URI)\u4e2d\u7684\u8a0a\u606f\uff0c\u6703\u548c\u4ea4\u6613\u5167\u5bb9\u4e00\u8d77\u5b58\u8d77\u4f86\uff0c\u7d66\u4f60\u81ea\u5df1\u505a\u53c3\u8003\u3002\u6ce8\u610f: \u9019\u500b\u8a0a\u606f\u4e0d\u6703\u9001\u5230\u4f4d\u5143\u5e63\u7db2\u8def\u4e0a\u3002</translation>\n     </message>\n     <message>\n         <source>Pay To:</source>\n@@ -2732,6 +2732,10 @@\n         <source>Copy transaction ID</source>\n         <translation>\u8907\u88fd\u4ea4\u6613\u8b58\u5225\u78bc</translation>\n     </message>\n+    <message>\n+        <source>Copy raw transaction</source>\n+        <translation>\u8907\u88fd\u4ea4\u6613\u539f\u59cb\u8cc7\u6599</translation>\n+    </message>\n     <message>\n         <source>Edit label</source>\n         <translation>\u7de8\u8f2f\u6a19\u8a18</translation>\n@@ -3094,7 +3098,7 @@\n     </message>\n     <message>\n         <source>Only connect to nodes in network &lt;net&gt; (ipv4, ipv6 or onion)</source>\n-        <translation>\u53ea\u6709\u9023\u63a5\u5230\u7db2\u7d61\u7bc0\u9ede &lt;net&gt; \uff08IPv4\uff0cIPv6\u6216onion\uff09</translation>\n+        <translation>\u53ea\u548c &lt;net&gt; \u7db2\u8def\u4e0a\u7684\u7bc0\u9ede\u9023\u7dda(ipv4, ipv6, \u6216 onion)</translation>\n     </message>\n     <message>\n         <source>Prune cannot be configured with a negative value.</source>\n@@ -3248,10 +3252,18 @@\n         <source>Activating best chain...</source>\n         <translation>\u555f\u7528\u6700\u4f73\u93c8\u7d50...</translation>\n     </message>\n+    <message>\n+        <source>Always relay transactions received from whitelisted peers (default: %d)</source>\n+        <translation>\u7121\u689d\u4ef6\u8f49\u767c\u5f9e\u767d\u540d\u9ede\u7bc0\u9ede\u6536\u5230\u7684\u4ea4\u6613(\u9810\u8a2d\u503c: %d)</translation>\n+    </message>\n     <message>\n         <source>Attempt to recover private keys from a corrupt wallet.dat on startup</source>\n         <translation>\u555f\u52d5\u6642\u5617\u8a66\u5f9e\u58de\u6389\u7684\u9322\u5305\u6a94 wallet.dat \u5fa9\u539f\u5bc6\u9470</translation>\n     </message>\n+    <message>\n+        <source>Automatically create Tor hidden service (default: %d)</source>\n+        <translation>\u81ea\u52d5\u7522\u751f Tor \u96b1\u85cf\u670d\u52d9(\u9810\u8a2d\u503c: %d)</translation>\n+    </message>\n     <message>\n         <source>Cannot resolve -whitebind address: '%s'</source>\n         <translation>\u6c92\u8fa6\u6cd5\u89e3\u6790 -whitebind \u6307\u5b9a\u7684\u4f4d\u5740: '%s'</translation>\n@@ -3384,6 +3396,14 @@\n         <source>This is experimental software.</source>\n         <translation>\u9019\u5957\u8edf\u9ad4\u5c6c\u65bc\u5be6\u9a57\u6027\u8cea\u3002</translation>\n     </message>\n+    <message>\n+        <source>Tor control port password (default: empty)</source>\n+        <translation>Tor \u63a7\u5236\u57e0\u5bc6\u78bc(\u9810\u8a2d\u503c: \u7a7a\u767d)</translation>\n+    </message>\n+    <message>\n+        <source>Tor control port to use if onion listening enabled (default: %s)</source>\n+        <translation>\u958b\u555f\u807d\u5019 onion \u9023\u7dda\u6642\u7684 Tor \u63a7\u5236\u57e0\u865f\u78bc(\u9810\u8a2d\u503c: %s)</translation>\n+    </message>\n     <message>\n         <source>Transaction amount too small</source>\n         <translation>\u4ea4\u6613\u91d1\u984d\u592a\u5c0f</translation>\n@@ -3424,6 +3444,10 @@\n         <source>Warning</source>\n         <translation>\u8b66\u544a</translation>\n     </message>\n+    <message>\n+        <source>Whether to operate in a blocks only mode (default: %u)</source>\n+        <translation>\u662f\u5426\u8981\u7528\u53ea\u8981\u5340\u584a\u6a21\u5f0f\u904b\u4f5c(\u9810\u8a2d\u503c: %u)</translation>\n+    </message>\n     <message>\n         <source>Zapping all transactions from wallet...</source>\n         <translation>\u6b63\u5728\u780d\u6389\u9322\u5305\u4e2d\u7684\u6240\u6709\u4ea4\u6613...</translation>"
      }
    ]
  },
  {
    "sha": "16f4a6e0fe267e38d14f887e124ee9ca8894267a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNmY0YTZlMGZlMjY3ZTM4ZDE0Zjg4N2UxMjRlZTljYTg4OTQyNjdh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-01T12:32:07Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-01T12:32:21Z"
      },
      "message": "Merge pull request #7137\n\ncfdc662 Explicitly set chain limits in replace-by-fee test (Suhas Daftuar)",
      "tree": {
        "sha": "01e0f481cc5e3bde3ea93c282be9c249fc71df7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/01e0f481cc5e3bde3ea93c282be9c249fc71df7f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/16f4a6e0fe267e38d14f887e124ee9ca8894267a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWXZNVAAoJEHSBCwEjRsmmlqQH/RrjxTKVH1F3IAa0R7OyMWLE\nDtygMXPDEdJ1GW2KvpdsYk45Gv9xe0pdUxEsV24dyxbHm1dpDOGdZ1R95GCoPxQf\nsdUlD4A8vNRAQ+5hV+IXn/U9H/Q8Ed2lmUcFjm8CBMtXFWKVf+n4BhgFffMfvZ2y\nSOO3uryf32FINlPWPHh59Hl07FSsmEagFsSVlRg7rUU1ndKq7VTuUyCHwbiTBmNI\nAoCr9mQTTulLiROLllwRXcG9I8WBrC07cTJQyPXXB98nL+DgKP4+NjqRHJvMgTa/\ngUvmkWo53C6r0gXplyfFyBZtDlJ5Ik9OuQXZc7TvKUFlertjGNKUDjkAVrXNmik=\n=OWP5\n-----END PGP SIGNATURE-----",
        "payload": "tree 01e0f481cc5e3bde3ea93c282be9c249fc71df7f\nparent bc1f4275705a6aae03ce439cd317ec4166075c08\nparent cfdc66280f4075885fc41b244217b7560a66874c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1448973127 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1448973141 +0100\n\nMerge pull request #7137\n\ncfdc662 Explicitly set chain limits in replace-by-fee test (Suhas Daftuar)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16f4a6e0fe267e38d14f887e124ee9ca8894267a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/16f4a6e0fe267e38d14f887e124ee9ca8894267a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16f4a6e0fe267e38d14f887e124ee9ca8894267a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc1f4275705a6aae03ce439cd317ec4166075c08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc1f4275705a6aae03ce439cd317ec4166075c08",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc1f4275705a6aae03ce439cd317ec4166075c08"
      },
      {
        "sha": "cfdc66280f4075885fc41b244217b7560a66874c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfdc66280f4075885fc41b244217b7560a66874c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cfdc66280f4075885fc41b244217b7560a66874c"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6e9e0b304cec71594fd7ce0d4a24c4b1dd19977c",
        "filename": "qa/rpc-tests/replace-by-fee.py",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16f4a6e0fe267e38d14f887e124ee9ca8894267a/qa/rpc-tests/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16f4a6e0fe267e38d14f887e124ee9ca8894267a/qa/rpc-tests/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/replace-by-fee.py?ref=16f4a6e0fe267e38d14f887e124ee9ca8894267a",
        "patch": "@@ -73,7 +73,12 @@ class ReplaceByFeeTest(BitcoinTestFramework):\n     def setup_network(self):\n         self.nodes = []\n         self.nodes.append(start_node(0, self.options.tmpdir, [\"-maxorphantx=1000\",\n-                                                              \"-relaypriority=0\", \"-whitelist=127.0.0.1\"]))\n+                                                              \"-relaypriority=0\", \"-whitelist=127.0.0.1\",\n+                                                              \"-limitancestorcount=50\",\n+                                                              \"-limitancestorsize=101\",\n+                                                              \"-limitdescendantcount=200\",\n+                                                              \"-limitdescendantsize=101\"\n+                                                              ]))\n         self.is_network_split = False\n \n     def run_test(self):"
      }
    ]
  },
  {
    "sha": "8f0d79e3c873d5f4942009b9b5bfe867104ed3e6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjBkNzllM2M4NzNkNWY0OTQyMDA5YjliNWJmZTg2NzEwNGVkM2U2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-01T13:43:38Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-01T13:43:38Z"
      },
      "message": "test: Disable scheduler test manythreads\n\nIt causes occasional deadlocks, resulting in false negatives in Travis.\n\nDisable the test for now.\nWorks around #6540.",
      "tree": {
        "sha": "696346e333ec20d3beadbafbfb61ca1169af2a03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/696346e333ec20d3beadbafbfb61ca1169af2a03"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f0d79e3c873d5f4942009b9b5bfe867104ed3e6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f0d79e3c873d5f4942009b9b5bfe867104ed3e6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f0d79e3c873d5f4942009b9b5bfe867104ed3e6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f0d79e3c873d5f4942009b9b5bfe867104ed3e6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "16f4a6e0fe267e38d14f887e124ee9ca8894267a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16f4a6e0fe267e38d14f887e124ee9ca8894267a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16f4a6e0fe267e38d14f887e124ee9ca8894267a"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fc07aa72c19d96ed0c1ae2fc37acb90317bf5a22",
        "filename": "src/test/scheduler_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f0d79e3c873d5f4942009b9b5bfe867104ed3e6/src/test/scheduler_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f0d79e3c873d5f4942009b9b5bfe867104ed3e6/src/test/scheduler_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scheduler_tests.cpp?ref=8f0d79e3c873d5f4942009b9b5bfe867104ed3e6",
        "patch": "@@ -40,6 +40,7 @@ static void MicroSleep(uint64_t n)\n #endif\n }\n \n+#if 0 /* Disabled for now because there is a race condition issue in this test - see #6540 */\n BOOST_AUTO_TEST_CASE(manythreads)\n {\n     seed_insecure_rand(false);\n@@ -115,5 +116,6 @@ BOOST_AUTO_TEST_CASE(manythreads)\n     }\n     BOOST_CHECK_EQUAL(counterSum, 200);\n }\n+#endif\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "c49d5bc9e6c97c47c0bd78604b2c393a7e4af097",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDlkNWJjOWU2Yzk3YzQ3YzBiZDc4NjA0YjJjMzkzYTdlNGFmMDk3",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-10-26T15:08:46Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-12-01T15:10:25Z"
      },
      "message": "Store the total sig op count of a tx.\n\nStore sum of legacy and P2SH sig op counts.  This is calculated in AcceptToMemory pool and storing it saves redoing the expensive calculation in block template creation.",
      "tree": {
        "sha": "4018d21e32637d0acfda7fb88e24a21415baf6e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4018d21e32637d0acfda7fb88e24a21415baf6e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c49d5bc9e6c97c47c0bd78604b2c393a7e4af097",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c49d5bc9e6c97c47c0bd78604b2c393a7e4af097",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c49d5bc9e6c97c47c0bd78604b2c393a7e4af097",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c49d5bc9e6c97c47c0bd78604b2c393a7e4af097/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "16f4a6e0fe267e38d14f887e124ee9ca8894267a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16f4a6e0fe267e38d14f887e124ee9ca8894267a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16f4a6e0fe267e38d14f887e124ee9ca8894267a"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 13,
      "deletions": 8
    },
    "files": [
      {
        "sha": "fb6d32b2fc8d7de18cccfb40dd3499d24199e3da",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c49d5bc9e6c97c47c0bd78604b2c393a7e4af097/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c49d5bc9e6c97c47c0bd78604b2c393a7e4af097/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c49d5bc9e6c97c47c0bd78604b2c393a7e4af097",
        "patch": "@@ -964,7 +964,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             }\n         }\n \n-        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx), inChainInputValue, fSpendsCoinbase);\n+        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx), inChainInputValue, fSpendsCoinbase, nSigOps);\n         unsigned int nSize = entry.GetTxSize();\n \n         // Don't accept it if it can't get into a block"
      },
      {
        "sha": "2147dbb0653365034db37f771059e74a1808af65",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c49d5bc9e6c97c47c0bd78604b2c393a7e4af097/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c49d5bc9e6c97c47c0bd78604b2c393a7e4af097/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=c49d5bc9e6c97c47c0bd78604b2c393a7e4af097",
        "patch": "@@ -150,7 +150,7 @@ CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(CMutableTransaction &tx, CTxMemPo\n     CAmount inChainValue = hasNoDependencies ? txn.GetValueOut() : 0;\n \n     return CTxMemPoolEntry(txn, nFee, nTime, dPriority, nHeight,\n-                           hasNoDependencies, inChainValue, spendsCoinbase);\n+                           hasNoDependencies, inChainValue, spendsCoinbase, sigOpCount);\n }\n \n void Shutdown(void* parg)"
      },
      {
        "sha": "273bfdd7f4a5688b8b4e78b05ffd453d762b3d0d",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c49d5bc9e6c97c47c0bd78604b2c393a7e4af097/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c49d5bc9e6c97c47c0bd78604b2c393a7e4af097/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=c49d5bc9e6c97c47c0bd78604b2c393a7e4af097",
        "patch": "@@ -66,11 +66,12 @@ struct TestMemPoolEntryHelper\n     unsigned int nHeight;\n     bool hadNoDependencies;\n     bool spendsCoinbase;\n-\n+    unsigned int sigOpCount;\n+    \n     TestMemPoolEntryHelper() :\n         nFee(0), nTime(0), dPriority(0.0), nHeight(1),\n-        hadNoDependencies(false), spendsCoinbase(false) { }\n-\n+        hadNoDependencies(false), spendsCoinbase(false), sigOpCount(1) { }\n+    \n     CTxMemPoolEntry FromTx(CMutableTransaction &tx, CTxMemPool *pool = NULL);\n \n     // Change the default value\n@@ -80,5 +81,6 @@ struct TestMemPoolEntryHelper\n     TestMemPoolEntryHelper &Height(unsigned int _height) { nHeight = _height; return *this; }\n     TestMemPoolEntryHelper &HadNoDependencies(bool _hnd) { hadNoDependencies = _hnd; return *this; }\n     TestMemPoolEntryHelper &SpendsCoinbase(bool _flag) { spendsCoinbase = _flag; return *this; }\n+    TestMemPoolEntryHelper &SigOps(unsigned int _sigops) { sigOpCount = _sigops; return *this; }\n };\n #endif"
      },
      {
        "sha": "fa62cbf166345646eebcc57db4d62867f0c6b70d",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c49d5bc9e6c97c47c0bd78604b2c393a7e4af097/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c49d5bc9e6c97c47c0bd78604b2c393a7e4af097/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=c49d5bc9e6c97c47c0bd78604b2c393a7e4af097",
        "patch": "@@ -22,10 +22,10 @@ using namespace std;\n CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n                                  int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n                                  bool poolHasNoInputsOf, CAmount _inChainInputValue,\n-                                 bool _spendsCoinbase):\n+                                 bool _spendsCoinbase, unsigned int _sigOps):\n     tx(_tx), nFee(_nFee), nTime(_nTime), entryPriority(_entryPriority), entryHeight(_entryHeight),\n     hadNoDependencies(poolHasNoInputsOf), inChainInputValue(_inChainInputValue),\n-    spendsCoinbase(_spendsCoinbase)\n+    spendsCoinbase(_spendsCoinbase), sigOpCount(_sigOps)\n {\n     nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n     nModSize = tx.CalculateModifiedSize(nTxSize);"
      },
      {
        "sha": "334b54782369f391a22c1fbd98526a2588ad0b5a",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c49d5bc9e6c97c47c0bd78604b2c393a7e4af097/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c49d5bc9e6c97c47c0bd78604b2c393a7e4af097/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=c49d5bc9e6c97c47c0bd78604b2c393a7e4af097",
        "patch": "@@ -68,6 +68,7 @@ class CTxMemPoolEntry\n     bool hadNoDependencies; //! Not dependent on any other txs when it entered the mempool\n     CAmount inChainInputValue; //! Sum of all txin values that are already in blockchain\n     bool spendsCoinbase; //! keep track of transactions that spend a coinbase\n+    unsigned int sigOpCount; //! Legacy sig ops plus P2SH sig op count\n \n     // Information about descendants of this transaction that are in the\n     // mempool; if we remove this transaction we must remove all of these\n@@ -81,7 +82,8 @@ class CTxMemPoolEntry\n public:\n     CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n                     int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n-                    bool poolHasNoInputsOf, CAmount _inChainInputValue, bool spendsCoinbase);\n+                    bool poolHasNoInputsOf, CAmount _inChainInputValue, bool spendsCoinbase,\n+                    unsigned int nSigOps);\n     CTxMemPoolEntry(const CTxMemPoolEntry& other);\n \n     const CTransaction& GetTx() const { return this->tx; }\n@@ -95,6 +97,7 @@ class CTxMemPoolEntry\n     int64_t GetTime() const { return nTime; }\n     unsigned int GetHeight() const { return entryHeight; }\n     bool WasClearAtEntry() const { return hadNoDependencies; }\n+    unsigned int GetSigOpCount() const { return sigOpCount; }\n     size_t DynamicMemoryUsage() const { return nUsageSize; }\n \n     // Adjusts the descendant state, if this entry is not dirty."
      }
    ]
  },
  {
    "sha": "f3fe83673e84ef4d20b3026faa397cad17212ff8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmM2ZlODM2NzNlODRlZjRkMjBiMzAyNmZhYTM5N2NhZDE3MjEyZmY4",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-10-26T18:06:06Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-12-01T15:10:25Z"
      },
      "message": "Add a score index to the mempool.\n\nThe score index is meant to represent the order of priority for being included in a block for miners.  Initially this is set to the transactions modified (by any feeDelta) fee rate.  Index improvements and unit tests by sdaftuar.",
      "tree": {
        "sha": "2d0938c50ec5419750e215457e63690e34f66982",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d0938c50ec5419750e215457e63690e34f66982"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3fe83673e84ef4d20b3026faa397cad17212ff8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3fe83673e84ef4d20b3026faa397cad17212ff8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f3fe83673e84ef4d20b3026faa397cad17212ff8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3fe83673e84ef4d20b3026faa397cad17212ff8/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c49d5bc9e6c97c47c0bd78604b2c393a7e4af097",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c49d5bc9e6c97c47c0bd78604b2c393a7e4af097",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c49d5bc9e6c97c47c0bd78604b2c393a7e4af097"
      }
    ],
    "stats": {
      "total": 118,
      "additions": 106,
      "deletions": 12
    },
    "files": [
      {
        "sha": "aede79753182578a196f929e231403b28b0515ae",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3fe83673e84ef4d20b3026faa397cad17212ff8/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3fe83673e84ef4d20b3026faa397cad17212ff8/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=f3fe83673e84ef4d20b3026faa397cad17212ff8",
        "patch": "@@ -190,6 +190,7 @@ UniValue mempoolToJSON(bool fVerbose = false)\n             UniValue info(UniValue::VOBJ);\n             info.push_back(Pair(\"size\", (int)e.GetTxSize()));\n             info.push_back(Pair(\"fee\", ValueFromAmount(e.GetFee())));\n+            info.push_back(Pair(\"modifiedfee\", ValueFromAmount(e.GetModifiedFee())));\n             info.push_back(Pair(\"time\", e.GetTime()));\n             info.push_back(Pair(\"height\", (int)e.GetHeight()));\n             info.push_back(Pair(\"startingpriority\", e.GetPriority(e.GetHeight())));\n@@ -247,6 +248,7 @@ UniValue getrawmempool(const UniValue& params, bool fHelp)\n             \"  \\\"transactionid\\\" : {       (json object)\\n\"\n             \"    \\\"size\\\" : n,             (numeric) transaction size in bytes\\n\"\n             \"    \\\"fee\\\" : n,              (numeric) transaction fee in \" + CURRENCY_UNIT + \"\\n\"\n+            \"    \\\"modifiedfee\\\" : n,      (numeric) transaction fee with fee deltas used for mining priority\\n\"\n             \"    \\\"time\\\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\\n\"\n             \"    \\\"height\\\" : n,           (numeric) block height when transaction entered pool\\n\"\n             \"    \\\"startingpriority\\\" : n, (numeric) priority when transaction entered pool\\n\""
      },
      {
        "sha": "e9f7378f747d151b1d904aaa52ffa80bb8e2ca07",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 9,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3fe83673e84ef4d20b3026faa397cad17212ff8/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3fe83673e84ef4d20b3026faa397cad17212ff8/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=f3fe83673e84ef4d20b3026faa397cad17212ff8",
        "patch": "@@ -102,12 +102,13 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n     removed.clear();\n }\n \n+template<int index>\n void CheckSort(CTxMemPool &pool, std::vector<std::string> &sortedOrder)\n {\n     BOOST_CHECK_EQUAL(pool.size(), sortedOrder.size());\n-    CTxMemPool::indexed_transaction_set::nth_index<1>::type::iterator it = pool.mapTx.get<1>().begin();\n+    typename CTxMemPool::indexed_transaction_set::nth_index<index>::type::iterator it = pool.mapTx.get<index>().begin();\n     int count=0;\n-    for (; it != pool.mapTx.get<1>().end(); ++it, ++count) {\n+    for (; it != pool.mapTx.get<index>().end(); ++it, ++count) {\n         BOOST_CHECK_EQUAL(it->GetTx().GetHash().ToString(), sortedOrder[count]);\n     }\n }\n@@ -163,7 +164,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     sortedOrder[2] = tx1.GetHash().ToString(); // 10000\n     sortedOrder[3] = tx4.GetHash().ToString(); // 15000\n     sortedOrder[4] = tx2.GetHash().ToString(); // 20000\n-    CheckSort(pool, sortedOrder);\n+    CheckSort<1>(pool, sortedOrder);\n \n     /* low fee but with high fee child */\n     /* tx6 -> tx7 -> tx8, tx9 -> tx10 */\n@@ -175,7 +176,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     BOOST_CHECK_EQUAL(pool.size(), 6);\n     // Check that at this point, tx6 is sorted low\n     sortedOrder.insert(sortedOrder.begin(), tx6.GetHash().ToString());\n-    CheckSort(pool, sortedOrder);\n+    CheckSort<1>(pool, sortedOrder);\n \n     CTxMemPool::setEntries setAncestors;\n     setAncestors.insert(pool.mapTx.find(tx6.GetHash()));\n@@ -201,7 +202,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     sortedOrder.erase(sortedOrder.begin());\n     sortedOrder.push_back(tx6.GetHash().ToString());\n     sortedOrder.push_back(tx7.GetHash().ToString());\n-    CheckSort(pool, sortedOrder);\n+    CheckSort<1>(pool, sortedOrder);\n \n     /* low fee child of tx7 */\n     CMutableTransaction tx8 = CMutableTransaction();\n@@ -216,7 +217,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n \n     // Now tx8 should be sorted low, but tx6/tx both high\n     sortedOrder.insert(sortedOrder.begin(), tx8.GetHash().ToString());\n-    CheckSort(pool, sortedOrder);\n+    CheckSort<1>(pool, sortedOrder);\n \n     /* low fee child of tx7 */\n     CMutableTransaction tx9 = CMutableTransaction();\n@@ -231,7 +232,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     // tx9 should be sorted low\n     BOOST_CHECK_EQUAL(pool.size(), 9);\n     sortedOrder.insert(sortedOrder.begin(), tx9.GetHash().ToString());\n-    CheckSort(pool, sortedOrder);\n+    CheckSort<1>(pool, sortedOrder);\n \n     std::vector<std::string> snapshotOrder = sortedOrder;\n \n@@ -273,17 +274,50 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     sortedOrder.insert(sortedOrder.begin()+5, tx9.GetHash().ToString());\n     sortedOrder.insert(sortedOrder.begin()+6, tx8.GetHash().ToString());\n     sortedOrder.insert(sortedOrder.begin()+7, tx10.GetHash().ToString()); // tx10 is just before tx6\n-    CheckSort(pool, sortedOrder);\n+    CheckSort<1>(pool, sortedOrder);\n \n     // there should be 10 transactions in the mempool\n     BOOST_CHECK_EQUAL(pool.size(), 10);\n \n     // Now try removing tx10 and verify the sort order returns to normal\n     std::list<CTransaction> removed;\n     pool.remove(pool.mapTx.find(tx10.GetHash())->GetTx(), removed, true);\n-    CheckSort(pool, snapshotOrder);\n+    CheckSort<1>(pool, snapshotOrder);\n+\n+    pool.remove(pool.mapTx.find(tx9.GetHash())->GetTx(), removed, true);\n+    pool.remove(pool.mapTx.find(tx8.GetHash())->GetTx(), removed, true);\n+    /* Now check the sort on the mining score index.\n+     * Final order should be:\n+     *\n+     * tx7 (2M)\n+     * tx2 (20k)\n+     * tx4 (15000)\n+     * tx1/tx5 (10000)\n+     * tx3/6 (0)\n+     * (Ties resolved by hash)\n+     */\n+    sortedOrder.clear();\n+    sortedOrder.push_back(tx7.GetHash().ToString());\n+    sortedOrder.push_back(tx2.GetHash().ToString());\n+    sortedOrder.push_back(tx4.GetHash().ToString());\n+    if (tx1.GetHash() < tx5.GetHash()) {\n+        sortedOrder.push_back(tx5.GetHash().ToString());\n+        sortedOrder.push_back(tx1.GetHash().ToString());\n+    } else {\n+        sortedOrder.push_back(tx1.GetHash().ToString());\n+        sortedOrder.push_back(tx5.GetHash().ToString());\n+    }\n+    if (tx3.GetHash() < tx6.GetHash()) {\n+        sortedOrder.push_back(tx6.GetHash().ToString());\n+        sortedOrder.push_back(tx3.GetHash().ToString());\n+    } else {\n+        sortedOrder.push_back(tx3.GetHash().ToString());\n+        sortedOrder.push_back(tx6.GetHash().ToString());\n+    }\n+    CheckSort<3>(pool, sortedOrder);\n }\n \n+\n BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n {\n     CTxMemPool pool(CFeeRate(1000));"
      },
      {
        "sha": "35be2162877d940bc74383ba2ba8c2fc218505eb",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 2,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3fe83673e84ef4d20b3026faa397cad17212ff8/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3fe83673e84ef4d20b3026faa397cad17212ff8/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=f3fe83673e84ef4d20b3026faa397cad17212ff8",
        "patch": "@@ -36,6 +36,8 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n     nFeesWithDescendants = nFee;\n     CAmount nValueIn = tx.GetValueOut()+nFee;\n     assert(inChainInputValue <= nValueIn);\n+\n+    feeDelta = 0;\n }\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)\n@@ -53,6 +55,11 @@ CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n     return dResult;\n }\n \n+void CTxMemPoolEntry::UpdateFeeDelta(int64_t newFeeDelta)\n+{\n+    feeDelta = newFeeDelta;\n+}\n+\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n@@ -392,6 +399,15 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n     }\n     UpdateAncestorsOf(true, newit, setAncestors);\n \n+    // Update transaction's score for any feeDelta created by PrioritiseTransaction\n+    std::map<uint256, std::pair<double, CAmount> >::const_iterator pos = mapDeltas.find(hash);\n+    if (pos != mapDeltas.end()) {\n+        const std::pair<double, CAmount> &deltas = pos->second;\n+        if (deltas.second) {\n+            mapTx.modify(newit, update_fee_delta(deltas.second));\n+        }\n+    }\n+\n     nTransactionsUpdated++;\n     totalTxSize += entry.GetTxSize();\n     minerPolicyEstimator->processTransaction(entry, fCurrentEstimate);\n@@ -769,6 +785,10 @@ void CTxMemPool::PrioritiseTransaction(const uint256 hash, const string strHash,\n         std::pair<double, CAmount> &deltas = mapDeltas[hash];\n         deltas.first += dPriorityDelta;\n         deltas.second += nFeeDelta;\n+        txiter it = mapTx.find(hash);\n+        if (it != mapTx.end()) {\n+            mapTx.modify(it, update_fee_delta(deltas.second));\n+        }\n     }\n     LogPrintf(\"PrioritiseTransaction: %s priority += %f, fee += %d\\n\", strHash, dPriorityDelta, FormatMoney(nFeeDelta));\n }\n@@ -818,8 +838,8 @@ bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n \n size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n-    // Estimate the overhead of mapTx to be 9 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n-    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 9 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + memusage::DynamicUsage(mapLinks) + cachedInnerUsage;\n+    // Estimate the overhead of mapTx to be 12 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 12 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + memusage::DynamicUsage(mapLinks) + cachedInnerUsage;\n }\n \n void CTxMemPool::RemoveStaged(setEntries &stage) {"
      },
      {
        "sha": "b011c38827ea2d08875bca10d10e83c85727a744",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 39,
        "deletions": 1,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3fe83673e84ef4d20b3026faa397cad17212ff8/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3fe83673e84ef4d20b3026faa397cad17212ff8/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=f3fe83673e84ef4d20b3026faa397cad17212ff8",
        "patch": "@@ -69,6 +69,7 @@ class CTxMemPoolEntry\n     CAmount inChainInputValue; //! Sum of all txin values that are already in blockchain\n     bool spendsCoinbase; //! keep track of transactions that spend a coinbase\n     unsigned int sigOpCount; //! Legacy sig ops plus P2SH sig op count\n+    int64_t feeDelta; //! Used for determining the priority of the transaction for mining in a block\n \n     // Information about descendants of this transaction that are in the\n     // mempool; if we remove this transaction we must remove all of these\n@@ -98,10 +99,13 @@ class CTxMemPoolEntry\n     unsigned int GetHeight() const { return entryHeight; }\n     bool WasClearAtEntry() const { return hadNoDependencies; }\n     unsigned int GetSigOpCount() const { return sigOpCount; }\n+    int64_t GetModifiedFee() const { return nFee + feeDelta; }\n     size_t DynamicMemoryUsage() const { return nUsageSize; }\n \n     // Adjusts the descendant state, if this entry is not dirty.\n     void UpdateState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount);\n+    // Updates the fee delta used for mining priority score\n+    void UpdateFeeDelta(int64_t feeDelta);\n \n     /** We can set the entry to be dirty if doing the full calculation of in-\n      *  mempool descendants will be too expensive, which can potentially happen\n@@ -139,6 +143,16 @@ struct set_dirty\n         { e.SetDirty(); }\n };\n \n+struct update_fee_delta\n+{\n+    update_fee_delta(int64_t _feeDelta) : feeDelta(_feeDelta) { }\n+\n+    void operator() (CTxMemPoolEntry &e) { e.UpdateFeeDelta(feeDelta); }\n+\n+private:\n+    int64_t feeDelta;\n+};\n+\n // extracts a TxMemPoolEntry's transaction hash\n struct mempoolentry_txid\n {\n@@ -186,6 +200,24 @@ class CompareTxMemPoolEntryByFee\n     }\n };\n \n+/** \\class CompareTxMemPoolEntryByScore\n+ *\n+ *  Sort by score of entry ((fee+delta)/size) in descending order\n+ */\n+class CompareTxMemPoolEntryByScore\n+{\n+public:\n+    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b)\n+    {\n+        double f1 = (double)a.GetModifiedFee() * b.GetTxSize();\n+        double f2 = (double)b.GetModifiedFee() * a.GetTxSize();\n+        if (f1 == f2) {\n+            return b.GetTx().GetHash() < a.GetTx().GetHash();\n+        }\n+        return f1 > f2;\n+    }\n+};\n+\n class CompareTxMemPoolEntryByEntryTime\n {\n public:\n@@ -223,10 +255,11 @@ class CInPoint\n  *\n  * CTxMemPool::mapTx, and CTxMemPoolEntry bookkeeping:\n  *\n- * mapTx is a boost::multi_index that sorts the mempool on 3 criteria:\n+ * mapTx is a boost::multi_index that sorts the mempool on 4 criteria:\n  * - transaction hash\n  * - feerate [we use max(feerate of tx, feerate of tx with all descendants)]\n  * - time in mempool\n+ * - mining score (feerate modified by any fee deltas from PrioritiseTransaction)\n  *\n  * Note: the term \"descendant\" refers to in-mempool transactions that depend on\n  * this one, while \"ancestor\" refers to in-mempool transactions that a given\n@@ -323,6 +356,11 @@ class CTxMemPool\n             boost::multi_index::ordered_non_unique<\n                 boost::multi_index::identity<CTxMemPoolEntry>,\n                 CompareTxMemPoolEntryByEntryTime\n+                >,\n+            // sorted by score (for mining prioritization)\n+            boost::multi_index::ordered_unique<\n+                boost::multi_index::identity<CTxMemPoolEntry>,\n+                CompareTxMemPoolEntryByScore\n             >\n         >\n     > indexed_transaction_set;"
      }
    ]
  },
  {
    "sha": "7230187b1d8bf39da5f1502e4c9eeb8e72dccdff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjMwMTg3YjFkOGJmMzlkYTVmMTUwMmU0YzllZWI4ZTcyZGNjZGZm",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-03T15:02:20Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-12-01T15:10:25Z"
      },
      "message": "Add TxPriority class and comparator",
      "tree": {
        "sha": "cc87e1bd43bb3bd17c9df1d1523fb7b86b34f7c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc87e1bd43bb3bd17c9df1d1523fb7b86b34f7c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7230187b1d8bf39da5f1502e4c9eeb8e72dccdff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7230187b1d8bf39da5f1502e4c9eeb8e72dccdff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7230187b1d8bf39da5f1502e4c9eeb8e72dccdff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7230187b1d8bf39da5f1502e4c9eeb8e72dccdff/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f3fe83673e84ef4d20b3026faa397cad17212ff8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3fe83673e84ef4d20b3026faa397cad17212ff8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f3fe83673e84ef4d20b3026faa397cad17212ff8"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "deeb2f7b62ea4b5c41ac3f7cfa9885d2143f12c6",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7230187b1d8bf39da5f1502e4c9eeb8e72dccdff/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7230187b1d8bf39da5f1502e4c9eeb8e72dccdff/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=7230187b1d8bf39da5f1502e4c9eeb8e72dccdff",
        "patch": "@@ -587,4 +587,17 @@ class CCoinsViewMemPool : public CCoinsViewBacked\n     bool HaveCoins(const uint256 &txid) const;\n };\n \n+// We want to sort transactions by coin age priority\n+typedef std::pair<double, CTxMemPool::txiter> TxCoinAgePriority;\n+\n+struct TxCoinAgePriorityCompare\n+{\n+    bool operator()(const TxCoinAgePriority& a, const TxCoinAgePriority& b)\n+    {\n+        if (a.first == b.first)\n+            return CompareTxMemPoolEntryByScore()(*(b.second), *(a.second)); //Reverse order to make sort less than\n+        return a.first < b.first;\n+    }\n+};\n+\n #endif // BITCOIN_TXMEMPOOL_H"
      }
    ]
  },
  {
    "sha": "1f09287c667d3a7d10ab9c5c96037fe48899490d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjA5Mjg3YzY2N2QzYTdkMTBhYjljNWM5NjAzN2ZlNDg4OTk0OTBk",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-10-26T18:06:19Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-12-01T15:10:25Z"
      },
      "message": "Make accessing mempool parents and children public",
      "tree": {
        "sha": "d852d44a90e2b7c0ae0b42340259aa85d3727a58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d852d44a90e2b7c0ae0b42340259aa85d3727a58"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f09287c667d3a7d10ab9c5c96037fe48899490d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f09287c667d3a7d10ab9c5c96037fe48899490d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f09287c667d3a7d10ab9c5c96037fe48899490d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f09287c667d3a7d10ab9c5c96037fe48899490d/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7230187b1d8bf39da5f1502e4c9eeb8e72dccdff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7230187b1d8bf39da5f1502e4c9eeb8e72dccdff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7230187b1d8bf39da5f1502e4c9eeb8e72dccdff"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "5652969f4bb85206c69315eeb0abad94424078f4",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f09287c667d3a7d10ab9c5c96037fe48899490d/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f09287c667d3a7d10ab9c5c96037fe48899490d/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=1f09287c667d3a7d10ab9c5c96037fe48899490d",
        "patch": "@@ -375,6 +375,8 @@ class CTxMemPool\n     };\n     typedef std::set<txiter, CompareIteratorByHash> setEntries;\n \n+    const setEntries & GetMemPoolParents(txiter entry) const;\n+    const setEntries & GetMemPoolChildren(txiter entry) const;\n private:\n     typedef std::map<txiter, setEntries, CompareIteratorByHash> cacheMap;\n \n@@ -386,8 +388,6 @@ class CTxMemPool\n     typedef std::map<txiter, TxLinks, CompareIteratorByHash> txlinksMap;\n     txlinksMap mapLinks;\n \n-    const setEntries & GetMemPoolParents(txiter entry) const;\n-    const setEntries & GetMemPoolChildren(txiter entry) const;\n     void UpdateParent(txiter entry, txiter parent, bool add);\n     void UpdateChild(txiter entry, txiter child, bool add);\n "
      }
    ]
  },
  {
    "sha": "5f122633020ce5d9f78c73394cda576a8657a3ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjEyMjYzMzAyMGNlNWQ5Zjc4YzczMzk0Y2RhNTc2YTg2NTdhM2Fj",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-10-28T18:56:28Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-12-01T15:10:25Z"
      },
      "message": "Expose FormatStateMessage",
      "tree": {
        "sha": "b12d5bef8c24b435bdc7e158b74692f4ca672436",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b12d5bef8c24b435bdc7e158b74692f4ca672436"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f122633020ce5d9f78c73394cda576a8657a3ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f122633020ce5d9f78c73394cda576a8657a3ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f122633020ce5d9f78c73394cda576a8657a3ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f122633020ce5d9f78c73394cda576a8657a3ac/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1f09287c667d3a7d10ab9c5c96037fe48899490d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f09287c667d3a7d10ab9c5c96037fe48899490d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f09287c667d3a7d10ab9c5c96037fe48899490d"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e9e9820434101756053d8a4a57d3edb444691c57",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f122633020ce5d9f78c73394cda576a8657a3ac/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f122633020ce5d9f78c73394cda576a8657a3ac/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5f122633020ce5d9f78c73394cda576a8657a3ac",
        "patch": "@@ -816,7 +816,7 @@ CAmount GetMinRelayFee(const CTransaction& tx, const CTxMemPool& pool, unsigned\n }\n \n /** Convert CValidationState to a human-readable message for logging */\n-static std::string FormatStateMessage(const CValidationState &state)\n+std::string FormatStateMessage(const CValidationState &state)\n {\n     return strprintf(\"%s%s (code %i)\",\n         state.GetRejectReason(),"
      },
      {
        "sha": "19623f4d96f5a8f39d81b404fa066c93a5eba78d",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f122633020ce5d9f78c73394cda576a8657a3ac/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f122633020ce5d9f78c73394cda576a8657a3ac/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=5f122633020ce5d9f78c73394cda576a8657a3ac",
        "patch": "@@ -257,6 +257,8 @@ void PruneAndFlush();\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n                         bool* pfMissingInputs, bool fOverrideMempoolLimit=false, bool fRejectAbsurdFee=false);\n \n+/** Convert CValidationState to a human-readable message for logging */\n+std::string FormatStateMessage(const CValidationState &state);\n \n struct CNodeStateStats {\n     int nMisbehavior;"
      }
    ]
  },
  {
    "sha": "553cad94e29c33872b60d97b8574ed2773355f0b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NTNjYWQ5NGUyOWMzMzg3MmI2MGQ5N2I4NTc0ZWQyNzczMzU1ZjBi",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-03T15:35:39Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-12-01T17:09:37Z"
      },
      "message": "Rewrite CreateNewBlock\n\nUse the score index on the mempool to only add sorted txs in order.  Remove much of the validation while building the block, relying on mempool to be consistent and only contain txs that can be mined.\nThe mempool is assumed to be consistent as far as not containing txs which spend non-existent outputs or double spends, and scripts are valid.  Finality of txs is still checked (except not coinbase maturity, assumed in mempool).\nStill TestBlockValidity in case mempool consistency breaks and return error state if an invalid block was created.\nUnit tests are modified to realize that invalid blocks can now be constructed if the mempool breaks its consistency assumptions and also updated to have the right fees, since the cached value is now used for block construction.\n\nConflicts:\n\tsrc/miner.cpp",
      "tree": {
        "sha": "0cf289e53969878180a50a36cb264e084b0179f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0cf289e53969878180a50a36cb264e084b0179f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/553cad94e29c33872b60d97b8574ed2773355f0b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/553cad94e29c33872b60d97b8574ed2773355f0b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/553cad94e29c33872b60d97b8574ed2773355f0b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/553cad94e29c33872b60d97b8574ed2773355f0b/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f122633020ce5d9f78c73394cda576a8657a3ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f122633020ce5d9f78c73394cda576a8657a3ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f122633020ce5d9f78c73394cda576a8657a3ac"
      }
    ],
    "stats": {
      "total": 361,
      "additions": 156,
      "deletions": 205
    },
    "files": [
      {
        "sha": "c6db00d301cb04b3fcb321bde451ee660e9ba6b8",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 120,
        "deletions": 181,
        "changes": 301,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/553cad94e29c33872b60d97b8574ed2773355f0b/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/553cad94e29c33872b60d97b8574ed2773355f0b/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=553cad94e29c33872b60d97b8574ed2773355f0b",
        "patch": "@@ -27,6 +27,7 @@\n \n #include <boost/thread.hpp>\n #include <boost/tuple/tuple.hpp>\n+#include <queue>\n \n using namespace std;\n \n@@ -40,48 +41,18 @@ using namespace std;\n // transactions in the memory pool. When we select transactions from the\n // pool, we select by highest priority or fee rate, so we might consider\n // transactions that depend on transactions that aren't yet in the block.\n-// The COrphan class keeps track of these 'temporary orphans' while\n-// CreateBlock is figuring out which transactions to include.\n-//\n-class COrphan\n-{\n-public:\n-    const CTransaction* ptx;\n-    set<uint256> setDependsOn;\n-    CFeeRate feeRate;\n-    double dPriority;\n-\n-    COrphan(const CTransaction* ptxIn) : ptx(ptxIn), feeRate(0), dPriority(0)\n-    {\n-    }\n-};\n \n uint64_t nLastBlockTx = 0;\n uint64_t nLastBlockSize = 0;\n \n-// We want to sort transactions by priority and fee rate, so:\n-typedef boost::tuple<double, CFeeRate, const CTransaction*> TxPriority;\n-class TxPriorityCompare\n+class ScoreCompare\n {\n-    bool byFee;\n-\n public:\n-    TxPriorityCompare(bool _byFee) : byFee(_byFee) { }\n+    ScoreCompare() {}\n \n-    bool operator()(const TxPriority& a, const TxPriority& b)\n+    bool operator()(const CTxMemPool::txiter a, const CTxMemPool::txiter b)\n     {\n-        if (byFee)\n-        {\n-            if (a.get<1>() == b.get<1>())\n-                return a.get<0>() < b.get<0>();\n-            return a.get<1>() < b.get<1>();\n-        }\n-        else\n-        {\n-            if (a.get<0>() == b.get<0>())\n-                return a.get<1>() < b.get<1>();\n-            return a.get<0>() < b.get<0>();\n-        }\n+        return CompareTxMemPoolEntryByScore()(*b,*a); // Convert to less than\n     }\n };\n \n@@ -141,6 +112,22 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n     nBlockMinSize = std::min(nBlockMaxSize, nBlockMinSize);\n \n     // Collect memory pool transactions into the block\n+    CTxMemPool::setEntries inBlock;\n+    CTxMemPool::setEntries waitSet;\n+\n+    // This vector will be sorted into a priority queue:\n+    vector<TxCoinAgePriority> vecPriority;\n+    TxCoinAgePriorityCompare pricomparer;\n+    std::map<CTxMemPool::txiter, double, CTxMemPool::CompareIteratorByHash> waitPriMap;\n+    typedef std::map<CTxMemPool::txiter, double, CTxMemPool::CompareIteratorByHash>::iterator waitPriIter;\n+    double actualPriority = -1;\n+\n+    std::priority_queue<CTxMemPool::txiter, std::vector<CTxMemPool::txiter>, ScoreCompare> clearedTxs;\n+    bool fPrintPriority = GetBoolArg(\"-printpriority\", DEFAULT_PRINTPRIORITY);\n+    uint64_t nBlockSize = 1000;\n+    uint64_t nBlockTx = 0;\n+    unsigned int nBlockSigOps = 100;\n+    int lastFewTxs = 0;\n     CAmount nFees = 0;\n \n     {\n@@ -149,157 +136,102 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n         const int nHeight = pindexPrev->nHeight + 1;\n         pblock->nTime = GetAdjustedTime();\n         const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();\n-        CCoinsViewCache view(pcoinsTip);\n-\n-        // Priority order to process transactions\n-        list<COrphan> vOrphan; // list memory doesn't move\n-        map<uint256, vector<COrphan*> > mapDependers;\n-        bool fPrintPriority = GetBoolArg(\"-printpriority\", DEFAULT_PRINTPRIORITY);\n-\n-        // This vector will be sorted into a priority queue:\n-        vector<TxPriority> vecPriority;\n-        vecPriority.reserve(mempool.mapTx.size());\n-        for (CTxMemPool::indexed_transaction_set::iterator mi = mempool.mapTx.begin();\n-             mi != mempool.mapTx.end(); ++mi)\n-        {\n-            const CTransaction& tx = mi->GetTx();\n-\n-            int64_t nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)\n-                                    ? nMedianTimePast\n-                                    : pblock->GetBlockTime();\n-\n-            if (tx.IsCoinBase() || !IsFinalTx(tx, nHeight, nLockTimeCutoff))\n-                continue;\n-\n-            COrphan* porphan = NULL;\n-            double dPriority = 0;\n-            CAmount nTotalIn = 0;\n-            bool fMissingInputs = false;\n-            BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-            {\n-                // Read prev transaction\n-                if (!view.HaveCoins(txin.prevout.hash))\n-                {\n-                    // This should never happen; all transactions in the memory\n-                    // pool should connect to either transactions in the chain\n-                    // or other transactions in the memory pool.\n-                    if (!mempool.mapTx.count(txin.prevout.hash))\n-                    {\n-                        LogPrintf(\"ERROR: mempool transaction missing input\\n\");\n-                        if (fDebug) assert(\"mempool transaction missing input\" == 0);\n-                        fMissingInputs = true;\n-                        if (porphan)\n-                            vOrphan.pop_back();\n-                        break;\n-                    }\n-\n-                    // Has to wait for dependencies\n-                    if (!porphan)\n-                    {\n-                        // Use list for automatic deletion\n-                        vOrphan.push_back(COrphan(&tx));\n-                        porphan = &vOrphan.back();\n-                    }\n-                    mapDependers[txin.prevout.hash].push_back(porphan);\n-                    porphan->setDependsOn.insert(txin.prevout.hash);\n-                    nTotalIn += mempool.mapTx.find(txin.prevout.hash)->GetTx().vout[txin.prevout.n].nValue;\n-                    continue;\n-                }\n-                const CCoins* coins = view.AccessCoins(txin.prevout.hash);\n-                assert(coins);\n-\n-                CAmount nValueIn = coins->vout[txin.prevout.n].nValue;\n-                nTotalIn += nValueIn;\n-\n-                int nConf = nHeight - coins->nHeight;\n-\n-                dPriority += (double)nValueIn * nConf;\n-            }\n-            if (fMissingInputs) continue;\n-\n-            // Priority is sum(valuein * age) / modified_txsize\n-            unsigned int nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n-            dPriority = tx.ComputePriority(dPriority, nTxSize);\n-\n-            uint256 hash = tx.GetHash();\n-            mempool.ApplyDeltas(hash, dPriority, nTotalIn);\n \n-            CFeeRate feeRate(nTotalIn-tx.GetValueOut(), nTxSize);\n+        int64_t nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)\n+                                ? nMedianTimePast\n+                                : pblock->GetBlockTime();\n \n-            if (porphan)\n+        bool fPriorityBlock = nBlockPrioritySize > 0;\n+        if (fPriorityBlock) {\n+            vecPriority.reserve(mempool.mapTx.size());\n+            for (CTxMemPool::indexed_transaction_set::iterator mi = mempool.mapTx.begin();\n+                 mi != mempool.mapTx.end(); ++mi)\n             {\n-                porphan->dPriority = dPriority;\n-                porphan->feeRate = feeRate;\n+                double dPriority = mi->GetPriority(nHeight);\n+                CAmount dummy;\n+                mempool.ApplyDeltas(mi->GetTx().GetHash(), dPriority, dummy);\n+                vecPriority.push_back(TxCoinAgePriority(dPriority, mi));\n             }\n-            else\n-                vecPriority.push_back(TxPriority(dPriority, feeRate, &(mi->GetTx())));\n+            std::make_heap(vecPriority.begin(), vecPriority.end(), pricomparer);\n         }\n \n-        // Collect transactions into block\n-        uint64_t nBlockSize = 1000;\n-        uint64_t nBlockTx = 0;\n-        int nBlockSigOps = 100;\n-        bool fSortedByFee = (nBlockPrioritySize <= 0);\n+        CTxMemPool::indexed_transaction_set::nth_index<3>::type::iterator mi = mempool.mapTx.get<3>().begin();\n+        CTxMemPool::txiter iter;\n \n-        TxPriorityCompare comparer(fSortedByFee);\n-        std::make_heap(vecPriority.begin(), vecPriority.end(), comparer);\n-\n-        while (!vecPriority.empty())\n+        while (mi != mempool.mapTx.get<3>().end() || !clearedTxs.empty())\n         {\n-            // Take highest priority transaction off the priority queue:\n-            double dPriority = vecPriority.front().get<0>();\n-            CFeeRate feeRate = vecPriority.front().get<1>();\n-            const CTransaction& tx = *(vecPriority.front().get<2>());\n-\n-            std::pop_heap(vecPriority.begin(), vecPriority.end(), comparer);\n-            vecPriority.pop_back();\n-\n-            // Size limits\n-            unsigned int nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n-            if (nBlockSize + nTxSize >= nBlockMaxSize)\n-                continue;\n+            bool priorityTx = false;\n+            if (fPriorityBlock && !vecPriority.empty()) { // add a tx from priority queue to fill the blockprioritysize\n+                priorityTx = true;\n+                iter = vecPriority.front().second;\n+                actualPriority = vecPriority.front().first;\n+                std::pop_heap(vecPriority.begin(), vecPriority.end(), pricomparer);\n+                vecPriority.pop_back();\n+            }\n+            else if (clearedTxs.empty()) { // add tx with next highest score\n+                iter = mempool.mapTx.project<0>(mi);\n+                mi++;\n+            }\n+            else {  // try to add a previously postponed child tx\n+                iter = clearedTxs.top();\n+                clearedTxs.pop();\n+            }\n \n-            // Legacy limits on sigOps:\n-            unsigned int nTxSigOps = GetLegacySigOpCount(tx);\n-            if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n-                continue;\n+            if (inBlock.count(iter))\n+                continue; // could have been added to the priorityBlock\n \n-            // Skip free transactions if we're past the minimum block size:\n-            const uint256& hash = tx.GetHash();\n-            double dPriorityDelta = 0;\n-            CAmount nFeeDelta = 0;\n-            mempool.ApplyDeltas(hash, dPriorityDelta, nFeeDelta);\n-            if (fSortedByFee && (dPriorityDelta <= 0) && (nFeeDelta <= 0) && (feeRate < ::minRelayTxFee) && (nBlockSize + nTxSize >= nBlockMinSize))\n-                continue;\n+            const CTransaction& tx = iter->GetTx();\n \n-            // Prioritise by fee once past the priority size or we run out of high-priority\n-            // transactions:\n-            if (!fSortedByFee &&\n-                ((nBlockSize + nTxSize >= nBlockPrioritySize) || !AllowFree(dPriority)))\n+            bool fOrphan = false;\n+            BOOST_FOREACH(CTxMemPool::txiter parent, mempool.GetMemPoolParents(iter))\n             {\n-                fSortedByFee = true;\n-                comparer = TxPriorityCompare(fSortedByFee);\n-                std::make_heap(vecPriority.begin(), vecPriority.end(), comparer);\n+                if (!inBlock.count(parent)) {\n+                    fOrphan = true;\n+                    break;\n+                }\n             }\n-\n-            if (!view.HaveInputs(tx))\n+            if (fOrphan) {\n+                if (priorityTx)\n+                    waitPriMap.insert(std::make_pair(iter,actualPriority));\n+                else\n+                    waitSet.insert(iter);\n                 continue;\n+            }\n \n-            CAmount nTxFees = view.GetValueIn(tx)-tx.GetValueOut();\n-\n-            nTxSigOps += GetP2SHSigOpCount(tx, view);\n-            if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n+            unsigned int nTxSize = iter->GetTxSize();\n+            if (fPriorityBlock &&\n+                (nBlockSize + nTxSize >= nBlockPrioritySize || !AllowFree(actualPriority))) {\n+                fPriorityBlock = false;\n+                waitPriMap.clear();\n+            }\n+            if (!priorityTx &&\n+                (iter->GetModifiedFee() < ::minRelayTxFee.GetFee(nTxSize) && nBlockSize >= nBlockMinSize)) {\n+                break;\n+            }\n+            if (nBlockSize + nTxSize >= nBlockMaxSize) {\n+                if (nBlockSize >  nBlockMaxSize - 100 || lastFewTxs > 50) {\n+                    break;\n+                }\n+                // Once we're within 1000 bytes of a full block, only look at 50 more txs\n+                // to try to fill the remaining space.\n+                if (nBlockSize > nBlockMaxSize - 1000) {\n+                    lastFewTxs++;\n+                }\n                 continue;\n+            }\n \n-            // Note that flags: we don't want to set mempool/IsStandard()\n-            // policy here, but we still have to ensure that the block we\n-            // create only contains transactions that are valid in new blocks.\n-            CValidationState state;\n-            if (!CheckInputs(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS, true))\n+            if (!IsFinalTx(tx, nHeight, nLockTimeCutoff))\n                 continue;\n \n-            UpdateCoins(tx, state, view, nHeight);\n+            unsigned int nTxSigOps = iter->GetSigOpCount();\n+            if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS) {\n+                if (nBlockSigOps > MAX_BLOCK_SIGOPS - 2) {\n+                    break;\n+                }\n+                continue;\n+            }\n \n+            CAmount nTxFees = iter->GetFee();\n             // Added\n             pblock->vtx.push_back(tx);\n             pblocktemplate->vTxFees.push_back(nTxFees);\n@@ -311,31 +243,37 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n \n             if (fPrintPriority)\n             {\n+                double dPriority = iter->GetPriority(nHeight);\n+                CAmount dummy;\n+                mempool.ApplyDeltas(tx.GetHash(), dPriority, dummy);\n                 LogPrintf(\"priority %.1f fee %s txid %s\\n\",\n-                    dPriority, feeRate.ToString(), tx.GetHash().ToString());\n+                          dPriority , CFeeRate(iter->GetModifiedFee(), nTxSize).ToString(), tx.GetHash().ToString());\n             }\n \n+            inBlock.insert(iter);\n+\n             // Add transactions that depend on this one to the priority queue\n-            if (mapDependers.count(hash))\n+            BOOST_FOREACH(CTxMemPool::txiter child, mempool.GetMemPoolChildren(iter))\n             {\n-                BOOST_FOREACH(COrphan* porphan, mapDependers[hash])\n-                {\n-                    if (!porphan->setDependsOn.empty())\n-                    {\n-                        porphan->setDependsOn.erase(hash);\n-                        if (porphan->setDependsOn.empty())\n-                        {\n-                            vecPriority.push_back(TxPriority(porphan->dPriority, porphan->feeRate, porphan->ptx));\n-                            std::push_heap(vecPriority.begin(), vecPriority.end(), comparer);\n-                        }\n+                if (fPriorityBlock) {\n+                    waitPriIter wpiter = waitPriMap.find(child);\n+                    if (wpiter != waitPriMap.end()) {\n+                        vecPriority.push_back(TxCoinAgePriority(wpiter->second,child));\n+                        std::push_heap(vecPriority.begin(), vecPriority.end(), pricomparer);\n+                        waitPriMap.erase(wpiter);\n+                    }\n+                }\n+                else {\n+                    if (waitSet.count(child)) {\n+                        clearedTxs.push(child);\n+                        waitSet.erase(child);\n                     }\n                 }\n             }\n         }\n-\n         nLastBlockTx = nBlockTx;\n         nLastBlockSize = nBlockSize;\n-        LogPrintf(\"CreateNewBlock(): total size %u\\n\", nBlockSize);\n+        LogPrintf(\"CreateNewBlock(): total size %u txs: %u fees: %ld sigops %d\\n\", nBlockSize, nBlockTx, nFees, nBlockSigOps);\n \n         // Compute final coinbase transaction.\n         txNew.vout[0].nValue = nFees + GetBlockSubsidy(nHeight, chainparams.GetConsensus());\n@@ -351,8 +289,9 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n         pblocktemplate->vTxSigOps[0] = GetLegacySigOpCount(pblock->vtx[0]);\n \n         CValidationState state;\n-        if (!TestBlockValidity(state, chainparams, *pblock, pindexPrev, false, false))\n-            throw std::runtime_error(\"CreateNewBlock(): TestBlockValidity failed\");\n+        if (!TestBlockValidity(state, chainparams, *pblock, pindexPrev, false, false)) {\n+            throw std::runtime_error(strprintf(\"%s: TestBlockValidity failed: %s\", __func__, FormatStateMessage(state)));\n+        }\n     }\n \n     return pblocktemplate.release();"
      },
      {
        "sha": "19ddb5b79c5e2380d7856a669a18aad40df49250",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 24,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/553cad94e29c33872b60d97b8574ed2773355f0b/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/553cad94e29c33872b60d97b8574ed2773355f0b/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=553cad94e29c33872b60d97b8574ed2773355f0b",
        "patch": "@@ -120,7 +120,22 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         tx.vout[0].nValue -= 1000000;\n         hash = tx.GetHash();\n         bool spendsCoinbase = (i == 0) ? true : false; // only first tx spends coinbase\n-        mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n+        // If we don't set the # of sig ops in the CTxMemPoolEntry, template creation fails\n+        mempool.addUnchecked(hash, entry.Fee(1000000).Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n+        tx.vin[0].prevout.hash = hash;\n+    }\n+    BOOST_CHECK_THROW(CreateNewBlock(chainparams, scriptPubKey), std::runtime_error);\n+    mempool.clear();\n+\n+    tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n+    tx.vout[0].nValue = 5000000000LL;\n+    for (unsigned int i = 0; i < 1001; ++i)\n+    {\n+        tx.vout[0].nValue -= 1000000;\n+        hash = tx.GetHash();\n+        bool spendsCoinbase = (i == 0) ? true : false; // only first tx spends coinbase\n+        // If we do set the # of sig ops in the CTxMemPoolEntry, template creation passes\n+        mempool.addUnchecked(hash, entry.Fee(1000000).Time(GetTime()).SpendsCoinbase(spendsCoinbase).SigOps(20).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n@@ -141,79 +156,76 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         tx.vout[0].nValue -= 10000000;\n         hash = tx.GetHash();\n         bool spendsCoinbase = (i == 0) ? true : false; // only first tx spends coinbase\n-        mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n+        mempool.addUnchecked(hash, entry.Fee(1000000).Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n-    // orphan in mempool\n+    // orphan in mempool, template creation fails\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n-    delete pblocktemplate;\n+    mempool.addUnchecked(hash, entry.Fee(1000000).Time(GetTime()).FromTx(tx));\n+    BOOST_CHECK_THROW(CreateNewBlock(chainparams, scriptPubKey), std::runtime_error);\n     mempool.clear();\n \n     // child with higher priority than parent\n     tx.vin[0].scriptSig = CScript() << OP_1;\n     tx.vin[0].prevout.hash = txFirst[1]->GetHash();\n     tx.vout[0].nValue = 4900000000LL;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Fee(100000000LL).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     tx.vin[0].prevout.hash = hash;\n     tx.vin.resize(2);\n     tx.vin[1].scriptSig = CScript() << OP_1;\n     tx.vin[1].prevout.hash = txFirst[0]->GetHash();\n     tx.vin[1].prevout.n = 0;\n     tx.vout[0].nValue = 5900000000LL;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Fee(400000000LL).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n-    // coinbase in mempool\n+    // coinbase in mempool, template creation fails\n     tx.vin.resize(1);\n     tx.vin[0].prevout.SetNull();\n     tx.vin[0].scriptSig = CScript() << OP_0 << OP_1;\n     tx.vout[0].nValue = 0;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n-    delete pblocktemplate;\n+    // give it a fee so it'll get mined\n+    mempool.addUnchecked(hash, entry.Fee(100000).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n+    BOOST_CHECK_THROW(CreateNewBlock(chainparams, scriptPubKey), std::runtime_error);\n     mempool.clear();\n \n-    // invalid (pre-p2sh) txn in mempool\n+    // invalid (pre-p2sh) txn in mempool, template creation fails\n     tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n     tx.vin[0].prevout.n = 0;\n     tx.vin[0].scriptSig = CScript() << OP_1;\n     tx.vout[0].nValue = 4900000000LL;\n     script = CScript() << OP_0;\n     tx.vout[0].scriptPubKey = GetScriptForDestination(CScriptID(script));\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Fee(10000000L).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     tx.vin[0].prevout.hash = hash;\n     tx.vin[0].scriptSig = CScript() << std::vector<unsigned char>(script.begin(), script.end());\n     tx.vout[0].nValue -= 1000000;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n-    delete pblocktemplate;\n+    mempool.addUnchecked(hash, entry.Fee(1000000).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n+    BOOST_CHECK_THROW(CreateNewBlock(chainparams, scriptPubKey), std::runtime_error);\n     mempool.clear();\n \n-    // double spend txn pair in mempool\n+    // double spend txn pair in mempool, template creation fails\n     tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n     tx.vin[0].scriptSig = CScript() << OP_1;\n     tx.vout[0].nValue = 4900000000LL;\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Fee(100000000L).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     tx.vout[0].scriptPubKey = CScript() << OP_2;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n-    delete pblocktemplate;\n+    mempool.addUnchecked(hash, entry.Fee(100000000L).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    BOOST_CHECK_THROW(CreateNewBlock(chainparams, scriptPubKey), std::runtime_error);\n     mempool.clear();\n \n     // subsidy changing\n@@ -237,7 +249,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n     tx.nLockTime = chainActive.Tip()->nHeight+1;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Fee(100000000L).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK(!CheckFinalTx(tx, LOCKTIME_MEDIAN_TIME_PAST));\n \n     // time locked\n@@ -251,7 +263,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx2.vout[0].scriptPubKey = CScript() << OP_1;\n     tx2.nLockTime = chainActive.Tip()->GetMedianTimePast()+1;\n     hash = tx2.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx2));\n+    mempool.addUnchecked(hash, entry.Fee(100000000L).Time(GetTime()).SpendsCoinbase(true).FromTx(tx2));\n     BOOST_CHECK(!CheckFinalTx(tx2, LOCKTIME_MEDIAN_TIME_PAST));\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));"
      }
    ]
  },
  {
    "sha": "4077ad20d03f0ef61d48ef34b3107661b0ff8ffe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MDc3YWQyMGQwM2YwZWY2MWQ0OGVmMzRiMzEwNzY2MWIwZmY4ZmZl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-12-01T19:26:17Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-12-01T19:30:54Z"
      },
      "message": "Merge pull request #6898\n\n553cad9 Rewrite CreateNewBlock (Alex Morcos)\n5f12263 Expose FormatStateMessage (Alex Morcos)\n1f09287 Make accessing mempool parents and children public (Alex Morcos)\n7230187 Add TxPriority class and comparator (Alex Morcos)\nf3fe836 Add a score index to the mempool. (Alex Morcos)\nc49d5bc Store the total sig op count of a tx. (Alex Morcos)",
      "tree": {
        "sha": "0cf289e53969878180a50a36cb264e084b0179f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0cf289e53969878180a50a36cb264e084b0179f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4077ad20d03f0ef61d48ef34b3107661b0ff8ffe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWXfVuAAoJENuhpnN5oakxIqUP/1wmfEgTTLuXEkQG0k3MPQdx\nQOqJCXohuHUDRY7iDTuIwuRduJVWQot+pI7q5r3ufLWNn2Xc/TwatZnvHXL/hISQ\nVjZ6nyFxHw7yFJ/WziQqGR37qywBfiCY51caUG5gghl0x7xrki/3+eWis9/MEoxo\nfzfiKA0katV5DKxsUYMXWU2vUx2Iust14cAIOMT9hCw7ylGVmTCwHby75c8RijqO\nNHXqnCPQUp+onbznFBj9alwGX4PaPD/ZD3A2uxVMJHj+qtBHIcX5/h6JLbVbBpBc\ndNL7u6SnHJJ4AYFn9t27lvNXJnMdRslHwc6mnMJrAk9V3vGY+ndtogFNjCDJbmL5\niMeiMixc8m1YocBZRe9KhVgOWIiA+f+bvdB6MAhX/2TU7EBF91q1Gteawy7TNnFJ\nJewomul87FqnaDInrnppg5gG1f7EZKBnJve8sjiPK0kxS0UPcCgbl2I6iJ0Ra9xb\nSJfqup2x+PpUQDSk20yAl2ZkhM16Zqt/B2/dFrdyb2GvjqOSpsR0jpEsTEgZ3LXD\nvuqCRlPfuEDw6vxKjARis1FHj9dDI40iJ9UitbLgK5t6/M4XIdHPYIc0mUS3gZ2e\nQHXT6vtfJQyTNk3quMT+rXDGQlqzXCrGBB30wcgQjb+PQaF7hqdJ6lyPZBWq315m\n7dQt+DHp2r5GBYH0Ryja\n=kUz9\n-----END PGP SIGNATURE-----",
        "payload": "tree 0cf289e53969878180a50a36cb264e084b0179f6\nparent 16f4a6e0fe267e38d14f887e124ee9ca8894267a\nparent 553cad94e29c33872b60d97b8574ed2773355f0b\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1448997977 +0100\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1448998254 +0100\n\nMerge pull request #6898\n\n553cad9 Rewrite CreateNewBlock (Alex Morcos)\n5f12263 Expose FormatStateMessage (Alex Morcos)\n1f09287 Make accessing mempool parents and children public (Alex Morcos)\n7230187 Add TxPriority class and comparator (Alex Morcos)\nf3fe836 Add a score index to the mempool. (Alex Morcos)\nc49d5bc Store the total sig op count of a tx. (Alex Morcos)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4077ad20d03f0ef61d48ef34b3107661b0ff8ffe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4077ad20d03f0ef61d48ef34b3107661b0ff8ffe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4077ad20d03f0ef61d48ef34b3107661b0ff8ffe/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "16f4a6e0fe267e38d14f887e124ee9ca8894267a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16f4a6e0fe267e38d14f887e124ee9ca8894267a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16f4a6e0fe267e38d14f887e124ee9ca8894267a"
      },
      {
        "sha": "553cad94e29c33872b60d97b8574ed2773355f0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/553cad94e29c33872b60d97b8574ed2773355f0b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/553cad94e29c33872b60d97b8574ed2773355f0b"
      }
    ],
    "stats": {
      "total": 521,
      "additions": 293,
      "deletions": 228
    },
    "files": [
      {
        "sha": "e9e9820434101756053d8a4a57d3edb444691c57",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4077ad20d03f0ef61d48ef34b3107661b0ff8ffe/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4077ad20d03f0ef61d48ef34b3107661b0ff8ffe/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4077ad20d03f0ef61d48ef34b3107661b0ff8ffe",
        "patch": "@@ -816,7 +816,7 @@ CAmount GetMinRelayFee(const CTransaction& tx, const CTxMemPool& pool, unsigned\n }\n \n /** Convert CValidationState to a human-readable message for logging */\n-static std::string FormatStateMessage(const CValidationState &state)\n+std::string FormatStateMessage(const CValidationState &state)\n {\n     return strprintf(\"%s%s (code %i)\",\n         state.GetRejectReason(),\n@@ -964,7 +964,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             }\n         }\n \n-        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx), inChainInputValue, fSpendsCoinbase);\n+        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx), inChainInputValue, fSpendsCoinbase, nSigOps);\n         unsigned int nSize = entry.GetTxSize();\n \n         // Don't accept it if it can't get into a block"
      },
      {
        "sha": "19623f4d96f5a8f39d81b404fa066c93a5eba78d",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4077ad20d03f0ef61d48ef34b3107661b0ff8ffe/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4077ad20d03f0ef61d48ef34b3107661b0ff8ffe/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=4077ad20d03f0ef61d48ef34b3107661b0ff8ffe",
        "patch": "@@ -257,6 +257,8 @@ void PruneAndFlush();\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n                         bool* pfMissingInputs, bool fOverrideMempoolLimit=false, bool fRejectAbsurdFee=false);\n \n+/** Convert CValidationState to a human-readable message for logging */\n+std::string FormatStateMessage(const CValidationState &state);\n \n struct CNodeStateStats {\n     int nMisbehavior;"
      },
      {
        "sha": "c6db00d301cb04b3fcb321bde451ee660e9ba6b8",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 120,
        "deletions": 181,
        "changes": 301,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4077ad20d03f0ef61d48ef34b3107661b0ff8ffe/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4077ad20d03f0ef61d48ef34b3107661b0ff8ffe/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=4077ad20d03f0ef61d48ef34b3107661b0ff8ffe",
        "patch": "@@ -27,6 +27,7 @@\n \n #include <boost/thread.hpp>\n #include <boost/tuple/tuple.hpp>\n+#include <queue>\n \n using namespace std;\n \n@@ -40,48 +41,18 @@ using namespace std;\n // transactions in the memory pool. When we select transactions from the\n // pool, we select by highest priority or fee rate, so we might consider\n // transactions that depend on transactions that aren't yet in the block.\n-// The COrphan class keeps track of these 'temporary orphans' while\n-// CreateBlock is figuring out which transactions to include.\n-//\n-class COrphan\n-{\n-public:\n-    const CTransaction* ptx;\n-    set<uint256> setDependsOn;\n-    CFeeRate feeRate;\n-    double dPriority;\n-\n-    COrphan(const CTransaction* ptxIn) : ptx(ptxIn), feeRate(0), dPriority(0)\n-    {\n-    }\n-};\n \n uint64_t nLastBlockTx = 0;\n uint64_t nLastBlockSize = 0;\n \n-// We want to sort transactions by priority and fee rate, so:\n-typedef boost::tuple<double, CFeeRate, const CTransaction*> TxPriority;\n-class TxPriorityCompare\n+class ScoreCompare\n {\n-    bool byFee;\n-\n public:\n-    TxPriorityCompare(bool _byFee) : byFee(_byFee) { }\n+    ScoreCompare() {}\n \n-    bool operator()(const TxPriority& a, const TxPriority& b)\n+    bool operator()(const CTxMemPool::txiter a, const CTxMemPool::txiter b)\n     {\n-        if (byFee)\n-        {\n-            if (a.get<1>() == b.get<1>())\n-                return a.get<0>() < b.get<0>();\n-            return a.get<1>() < b.get<1>();\n-        }\n-        else\n-        {\n-            if (a.get<0>() == b.get<0>())\n-                return a.get<1>() < b.get<1>();\n-            return a.get<0>() < b.get<0>();\n-        }\n+        return CompareTxMemPoolEntryByScore()(*b,*a); // Convert to less than\n     }\n };\n \n@@ -141,6 +112,22 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n     nBlockMinSize = std::min(nBlockMaxSize, nBlockMinSize);\n \n     // Collect memory pool transactions into the block\n+    CTxMemPool::setEntries inBlock;\n+    CTxMemPool::setEntries waitSet;\n+\n+    // This vector will be sorted into a priority queue:\n+    vector<TxCoinAgePriority> vecPriority;\n+    TxCoinAgePriorityCompare pricomparer;\n+    std::map<CTxMemPool::txiter, double, CTxMemPool::CompareIteratorByHash> waitPriMap;\n+    typedef std::map<CTxMemPool::txiter, double, CTxMemPool::CompareIteratorByHash>::iterator waitPriIter;\n+    double actualPriority = -1;\n+\n+    std::priority_queue<CTxMemPool::txiter, std::vector<CTxMemPool::txiter>, ScoreCompare> clearedTxs;\n+    bool fPrintPriority = GetBoolArg(\"-printpriority\", DEFAULT_PRINTPRIORITY);\n+    uint64_t nBlockSize = 1000;\n+    uint64_t nBlockTx = 0;\n+    unsigned int nBlockSigOps = 100;\n+    int lastFewTxs = 0;\n     CAmount nFees = 0;\n \n     {\n@@ -149,157 +136,102 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n         const int nHeight = pindexPrev->nHeight + 1;\n         pblock->nTime = GetAdjustedTime();\n         const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();\n-        CCoinsViewCache view(pcoinsTip);\n-\n-        // Priority order to process transactions\n-        list<COrphan> vOrphan; // list memory doesn't move\n-        map<uint256, vector<COrphan*> > mapDependers;\n-        bool fPrintPriority = GetBoolArg(\"-printpriority\", DEFAULT_PRINTPRIORITY);\n-\n-        // This vector will be sorted into a priority queue:\n-        vector<TxPriority> vecPriority;\n-        vecPriority.reserve(mempool.mapTx.size());\n-        for (CTxMemPool::indexed_transaction_set::iterator mi = mempool.mapTx.begin();\n-             mi != mempool.mapTx.end(); ++mi)\n-        {\n-            const CTransaction& tx = mi->GetTx();\n-\n-            int64_t nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)\n-                                    ? nMedianTimePast\n-                                    : pblock->GetBlockTime();\n-\n-            if (tx.IsCoinBase() || !IsFinalTx(tx, nHeight, nLockTimeCutoff))\n-                continue;\n-\n-            COrphan* porphan = NULL;\n-            double dPriority = 0;\n-            CAmount nTotalIn = 0;\n-            bool fMissingInputs = false;\n-            BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-            {\n-                // Read prev transaction\n-                if (!view.HaveCoins(txin.prevout.hash))\n-                {\n-                    // This should never happen; all transactions in the memory\n-                    // pool should connect to either transactions in the chain\n-                    // or other transactions in the memory pool.\n-                    if (!mempool.mapTx.count(txin.prevout.hash))\n-                    {\n-                        LogPrintf(\"ERROR: mempool transaction missing input\\n\");\n-                        if (fDebug) assert(\"mempool transaction missing input\" == 0);\n-                        fMissingInputs = true;\n-                        if (porphan)\n-                            vOrphan.pop_back();\n-                        break;\n-                    }\n-\n-                    // Has to wait for dependencies\n-                    if (!porphan)\n-                    {\n-                        // Use list for automatic deletion\n-                        vOrphan.push_back(COrphan(&tx));\n-                        porphan = &vOrphan.back();\n-                    }\n-                    mapDependers[txin.prevout.hash].push_back(porphan);\n-                    porphan->setDependsOn.insert(txin.prevout.hash);\n-                    nTotalIn += mempool.mapTx.find(txin.prevout.hash)->GetTx().vout[txin.prevout.n].nValue;\n-                    continue;\n-                }\n-                const CCoins* coins = view.AccessCoins(txin.prevout.hash);\n-                assert(coins);\n-\n-                CAmount nValueIn = coins->vout[txin.prevout.n].nValue;\n-                nTotalIn += nValueIn;\n-\n-                int nConf = nHeight - coins->nHeight;\n-\n-                dPriority += (double)nValueIn * nConf;\n-            }\n-            if (fMissingInputs) continue;\n-\n-            // Priority is sum(valuein * age) / modified_txsize\n-            unsigned int nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n-            dPriority = tx.ComputePriority(dPriority, nTxSize);\n-\n-            uint256 hash = tx.GetHash();\n-            mempool.ApplyDeltas(hash, dPriority, nTotalIn);\n \n-            CFeeRate feeRate(nTotalIn-tx.GetValueOut(), nTxSize);\n+        int64_t nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)\n+                                ? nMedianTimePast\n+                                : pblock->GetBlockTime();\n \n-            if (porphan)\n+        bool fPriorityBlock = nBlockPrioritySize > 0;\n+        if (fPriorityBlock) {\n+            vecPriority.reserve(mempool.mapTx.size());\n+            for (CTxMemPool::indexed_transaction_set::iterator mi = mempool.mapTx.begin();\n+                 mi != mempool.mapTx.end(); ++mi)\n             {\n-                porphan->dPriority = dPriority;\n-                porphan->feeRate = feeRate;\n+                double dPriority = mi->GetPriority(nHeight);\n+                CAmount dummy;\n+                mempool.ApplyDeltas(mi->GetTx().GetHash(), dPriority, dummy);\n+                vecPriority.push_back(TxCoinAgePriority(dPriority, mi));\n             }\n-            else\n-                vecPriority.push_back(TxPriority(dPriority, feeRate, &(mi->GetTx())));\n+            std::make_heap(vecPriority.begin(), vecPriority.end(), pricomparer);\n         }\n \n-        // Collect transactions into block\n-        uint64_t nBlockSize = 1000;\n-        uint64_t nBlockTx = 0;\n-        int nBlockSigOps = 100;\n-        bool fSortedByFee = (nBlockPrioritySize <= 0);\n+        CTxMemPool::indexed_transaction_set::nth_index<3>::type::iterator mi = mempool.mapTx.get<3>().begin();\n+        CTxMemPool::txiter iter;\n \n-        TxPriorityCompare comparer(fSortedByFee);\n-        std::make_heap(vecPriority.begin(), vecPriority.end(), comparer);\n-\n-        while (!vecPriority.empty())\n+        while (mi != mempool.mapTx.get<3>().end() || !clearedTxs.empty())\n         {\n-            // Take highest priority transaction off the priority queue:\n-            double dPriority = vecPriority.front().get<0>();\n-            CFeeRate feeRate = vecPriority.front().get<1>();\n-            const CTransaction& tx = *(vecPriority.front().get<2>());\n-\n-            std::pop_heap(vecPriority.begin(), vecPriority.end(), comparer);\n-            vecPriority.pop_back();\n-\n-            // Size limits\n-            unsigned int nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n-            if (nBlockSize + nTxSize >= nBlockMaxSize)\n-                continue;\n+            bool priorityTx = false;\n+            if (fPriorityBlock && !vecPriority.empty()) { // add a tx from priority queue to fill the blockprioritysize\n+                priorityTx = true;\n+                iter = vecPriority.front().second;\n+                actualPriority = vecPriority.front().first;\n+                std::pop_heap(vecPriority.begin(), vecPriority.end(), pricomparer);\n+                vecPriority.pop_back();\n+            }\n+            else if (clearedTxs.empty()) { // add tx with next highest score\n+                iter = mempool.mapTx.project<0>(mi);\n+                mi++;\n+            }\n+            else {  // try to add a previously postponed child tx\n+                iter = clearedTxs.top();\n+                clearedTxs.pop();\n+            }\n \n-            // Legacy limits on sigOps:\n-            unsigned int nTxSigOps = GetLegacySigOpCount(tx);\n-            if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n-                continue;\n+            if (inBlock.count(iter))\n+                continue; // could have been added to the priorityBlock\n \n-            // Skip free transactions if we're past the minimum block size:\n-            const uint256& hash = tx.GetHash();\n-            double dPriorityDelta = 0;\n-            CAmount nFeeDelta = 0;\n-            mempool.ApplyDeltas(hash, dPriorityDelta, nFeeDelta);\n-            if (fSortedByFee && (dPriorityDelta <= 0) && (nFeeDelta <= 0) && (feeRate < ::minRelayTxFee) && (nBlockSize + nTxSize >= nBlockMinSize))\n-                continue;\n+            const CTransaction& tx = iter->GetTx();\n \n-            // Prioritise by fee once past the priority size or we run out of high-priority\n-            // transactions:\n-            if (!fSortedByFee &&\n-                ((nBlockSize + nTxSize >= nBlockPrioritySize) || !AllowFree(dPriority)))\n+            bool fOrphan = false;\n+            BOOST_FOREACH(CTxMemPool::txiter parent, mempool.GetMemPoolParents(iter))\n             {\n-                fSortedByFee = true;\n-                comparer = TxPriorityCompare(fSortedByFee);\n-                std::make_heap(vecPriority.begin(), vecPriority.end(), comparer);\n+                if (!inBlock.count(parent)) {\n+                    fOrphan = true;\n+                    break;\n+                }\n             }\n-\n-            if (!view.HaveInputs(tx))\n+            if (fOrphan) {\n+                if (priorityTx)\n+                    waitPriMap.insert(std::make_pair(iter,actualPriority));\n+                else\n+                    waitSet.insert(iter);\n                 continue;\n+            }\n \n-            CAmount nTxFees = view.GetValueIn(tx)-tx.GetValueOut();\n-\n-            nTxSigOps += GetP2SHSigOpCount(tx, view);\n-            if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n+            unsigned int nTxSize = iter->GetTxSize();\n+            if (fPriorityBlock &&\n+                (nBlockSize + nTxSize >= nBlockPrioritySize || !AllowFree(actualPriority))) {\n+                fPriorityBlock = false;\n+                waitPriMap.clear();\n+            }\n+            if (!priorityTx &&\n+                (iter->GetModifiedFee() < ::minRelayTxFee.GetFee(nTxSize) && nBlockSize >= nBlockMinSize)) {\n+                break;\n+            }\n+            if (nBlockSize + nTxSize >= nBlockMaxSize) {\n+                if (nBlockSize >  nBlockMaxSize - 100 || lastFewTxs > 50) {\n+                    break;\n+                }\n+                // Once we're within 1000 bytes of a full block, only look at 50 more txs\n+                // to try to fill the remaining space.\n+                if (nBlockSize > nBlockMaxSize - 1000) {\n+                    lastFewTxs++;\n+                }\n                 continue;\n+            }\n \n-            // Note that flags: we don't want to set mempool/IsStandard()\n-            // policy here, but we still have to ensure that the block we\n-            // create only contains transactions that are valid in new blocks.\n-            CValidationState state;\n-            if (!CheckInputs(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS, true))\n+            if (!IsFinalTx(tx, nHeight, nLockTimeCutoff))\n                 continue;\n \n-            UpdateCoins(tx, state, view, nHeight);\n+            unsigned int nTxSigOps = iter->GetSigOpCount();\n+            if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS) {\n+                if (nBlockSigOps > MAX_BLOCK_SIGOPS - 2) {\n+                    break;\n+                }\n+                continue;\n+            }\n \n+            CAmount nTxFees = iter->GetFee();\n             // Added\n             pblock->vtx.push_back(tx);\n             pblocktemplate->vTxFees.push_back(nTxFees);\n@@ -311,31 +243,37 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n \n             if (fPrintPriority)\n             {\n+                double dPriority = iter->GetPriority(nHeight);\n+                CAmount dummy;\n+                mempool.ApplyDeltas(tx.GetHash(), dPriority, dummy);\n                 LogPrintf(\"priority %.1f fee %s txid %s\\n\",\n-                    dPriority, feeRate.ToString(), tx.GetHash().ToString());\n+                          dPriority , CFeeRate(iter->GetModifiedFee(), nTxSize).ToString(), tx.GetHash().ToString());\n             }\n \n+            inBlock.insert(iter);\n+\n             // Add transactions that depend on this one to the priority queue\n-            if (mapDependers.count(hash))\n+            BOOST_FOREACH(CTxMemPool::txiter child, mempool.GetMemPoolChildren(iter))\n             {\n-                BOOST_FOREACH(COrphan* porphan, mapDependers[hash])\n-                {\n-                    if (!porphan->setDependsOn.empty())\n-                    {\n-                        porphan->setDependsOn.erase(hash);\n-                        if (porphan->setDependsOn.empty())\n-                        {\n-                            vecPriority.push_back(TxPriority(porphan->dPriority, porphan->feeRate, porphan->ptx));\n-                            std::push_heap(vecPriority.begin(), vecPriority.end(), comparer);\n-                        }\n+                if (fPriorityBlock) {\n+                    waitPriIter wpiter = waitPriMap.find(child);\n+                    if (wpiter != waitPriMap.end()) {\n+                        vecPriority.push_back(TxCoinAgePriority(wpiter->second,child));\n+                        std::push_heap(vecPriority.begin(), vecPriority.end(), pricomparer);\n+                        waitPriMap.erase(wpiter);\n+                    }\n+                }\n+                else {\n+                    if (waitSet.count(child)) {\n+                        clearedTxs.push(child);\n+                        waitSet.erase(child);\n                     }\n                 }\n             }\n         }\n-\n         nLastBlockTx = nBlockTx;\n         nLastBlockSize = nBlockSize;\n-        LogPrintf(\"CreateNewBlock(): total size %u\\n\", nBlockSize);\n+        LogPrintf(\"CreateNewBlock(): total size %u txs: %u fees: %ld sigops %d\\n\", nBlockSize, nBlockTx, nFees, nBlockSigOps);\n \n         // Compute final coinbase transaction.\n         txNew.vout[0].nValue = nFees + GetBlockSubsidy(nHeight, chainparams.GetConsensus());\n@@ -351,8 +289,9 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n         pblocktemplate->vTxSigOps[0] = GetLegacySigOpCount(pblock->vtx[0]);\n \n         CValidationState state;\n-        if (!TestBlockValidity(state, chainparams, *pblock, pindexPrev, false, false))\n-            throw std::runtime_error(\"CreateNewBlock(): TestBlockValidity failed\");\n+        if (!TestBlockValidity(state, chainparams, *pblock, pindexPrev, false, false)) {\n+            throw std::runtime_error(strprintf(\"%s: TestBlockValidity failed: %s\", __func__, FormatStateMessage(state)));\n+        }\n     }\n \n     return pblocktemplate.release();"
      },
      {
        "sha": "aede79753182578a196f929e231403b28b0515ae",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4077ad20d03f0ef61d48ef34b3107661b0ff8ffe/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4077ad20d03f0ef61d48ef34b3107661b0ff8ffe/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=4077ad20d03f0ef61d48ef34b3107661b0ff8ffe",
        "patch": "@@ -190,6 +190,7 @@ UniValue mempoolToJSON(bool fVerbose = false)\n             UniValue info(UniValue::VOBJ);\n             info.push_back(Pair(\"size\", (int)e.GetTxSize()));\n             info.push_back(Pair(\"fee\", ValueFromAmount(e.GetFee())));\n+            info.push_back(Pair(\"modifiedfee\", ValueFromAmount(e.GetModifiedFee())));\n             info.push_back(Pair(\"time\", e.GetTime()));\n             info.push_back(Pair(\"height\", (int)e.GetHeight()));\n             info.push_back(Pair(\"startingpriority\", e.GetPriority(e.GetHeight())));\n@@ -247,6 +248,7 @@ UniValue getrawmempool(const UniValue& params, bool fHelp)\n             \"  \\\"transactionid\\\" : {       (json object)\\n\"\n             \"    \\\"size\\\" : n,             (numeric) transaction size in bytes\\n\"\n             \"    \\\"fee\\\" : n,              (numeric) transaction fee in \" + CURRENCY_UNIT + \"\\n\"\n+            \"    \\\"modifiedfee\\\" : n,      (numeric) transaction fee with fee deltas used for mining priority\\n\"\n             \"    \\\"time\\\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\\n\"\n             \"    \\\"height\\\" : n,           (numeric) block height when transaction entered pool\\n\"\n             \"    \\\"startingpriority\\\" : n, (numeric) priority when transaction entered pool\\n\""
      },
      {
        "sha": "e9f7378f747d151b1d904aaa52ffa80bb8e2ca07",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 9,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4077ad20d03f0ef61d48ef34b3107661b0ff8ffe/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4077ad20d03f0ef61d48ef34b3107661b0ff8ffe/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=4077ad20d03f0ef61d48ef34b3107661b0ff8ffe",
        "patch": "@@ -102,12 +102,13 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n     removed.clear();\n }\n \n+template<int index>\n void CheckSort(CTxMemPool &pool, std::vector<std::string> &sortedOrder)\n {\n     BOOST_CHECK_EQUAL(pool.size(), sortedOrder.size());\n-    CTxMemPool::indexed_transaction_set::nth_index<1>::type::iterator it = pool.mapTx.get<1>().begin();\n+    typename CTxMemPool::indexed_transaction_set::nth_index<index>::type::iterator it = pool.mapTx.get<index>().begin();\n     int count=0;\n-    for (; it != pool.mapTx.get<1>().end(); ++it, ++count) {\n+    for (; it != pool.mapTx.get<index>().end(); ++it, ++count) {\n         BOOST_CHECK_EQUAL(it->GetTx().GetHash().ToString(), sortedOrder[count]);\n     }\n }\n@@ -163,7 +164,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     sortedOrder[2] = tx1.GetHash().ToString(); // 10000\n     sortedOrder[3] = tx4.GetHash().ToString(); // 15000\n     sortedOrder[4] = tx2.GetHash().ToString(); // 20000\n-    CheckSort(pool, sortedOrder);\n+    CheckSort<1>(pool, sortedOrder);\n \n     /* low fee but with high fee child */\n     /* tx6 -> tx7 -> tx8, tx9 -> tx10 */\n@@ -175,7 +176,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     BOOST_CHECK_EQUAL(pool.size(), 6);\n     // Check that at this point, tx6 is sorted low\n     sortedOrder.insert(sortedOrder.begin(), tx6.GetHash().ToString());\n-    CheckSort(pool, sortedOrder);\n+    CheckSort<1>(pool, sortedOrder);\n \n     CTxMemPool::setEntries setAncestors;\n     setAncestors.insert(pool.mapTx.find(tx6.GetHash()));\n@@ -201,7 +202,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     sortedOrder.erase(sortedOrder.begin());\n     sortedOrder.push_back(tx6.GetHash().ToString());\n     sortedOrder.push_back(tx7.GetHash().ToString());\n-    CheckSort(pool, sortedOrder);\n+    CheckSort<1>(pool, sortedOrder);\n \n     /* low fee child of tx7 */\n     CMutableTransaction tx8 = CMutableTransaction();\n@@ -216,7 +217,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n \n     // Now tx8 should be sorted low, but tx6/tx both high\n     sortedOrder.insert(sortedOrder.begin(), tx8.GetHash().ToString());\n-    CheckSort(pool, sortedOrder);\n+    CheckSort<1>(pool, sortedOrder);\n \n     /* low fee child of tx7 */\n     CMutableTransaction tx9 = CMutableTransaction();\n@@ -231,7 +232,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     // tx9 should be sorted low\n     BOOST_CHECK_EQUAL(pool.size(), 9);\n     sortedOrder.insert(sortedOrder.begin(), tx9.GetHash().ToString());\n-    CheckSort(pool, sortedOrder);\n+    CheckSort<1>(pool, sortedOrder);\n \n     std::vector<std::string> snapshotOrder = sortedOrder;\n \n@@ -273,17 +274,50 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     sortedOrder.insert(sortedOrder.begin()+5, tx9.GetHash().ToString());\n     sortedOrder.insert(sortedOrder.begin()+6, tx8.GetHash().ToString());\n     sortedOrder.insert(sortedOrder.begin()+7, tx10.GetHash().ToString()); // tx10 is just before tx6\n-    CheckSort(pool, sortedOrder);\n+    CheckSort<1>(pool, sortedOrder);\n \n     // there should be 10 transactions in the mempool\n     BOOST_CHECK_EQUAL(pool.size(), 10);\n \n     // Now try removing tx10 and verify the sort order returns to normal\n     std::list<CTransaction> removed;\n     pool.remove(pool.mapTx.find(tx10.GetHash())->GetTx(), removed, true);\n-    CheckSort(pool, snapshotOrder);\n+    CheckSort<1>(pool, snapshotOrder);\n+\n+    pool.remove(pool.mapTx.find(tx9.GetHash())->GetTx(), removed, true);\n+    pool.remove(pool.mapTx.find(tx8.GetHash())->GetTx(), removed, true);\n+    /* Now check the sort on the mining score index.\n+     * Final order should be:\n+     *\n+     * tx7 (2M)\n+     * tx2 (20k)\n+     * tx4 (15000)\n+     * tx1/tx5 (10000)\n+     * tx3/6 (0)\n+     * (Ties resolved by hash)\n+     */\n+    sortedOrder.clear();\n+    sortedOrder.push_back(tx7.GetHash().ToString());\n+    sortedOrder.push_back(tx2.GetHash().ToString());\n+    sortedOrder.push_back(tx4.GetHash().ToString());\n+    if (tx1.GetHash() < tx5.GetHash()) {\n+        sortedOrder.push_back(tx5.GetHash().ToString());\n+        sortedOrder.push_back(tx1.GetHash().ToString());\n+    } else {\n+        sortedOrder.push_back(tx1.GetHash().ToString());\n+        sortedOrder.push_back(tx5.GetHash().ToString());\n+    }\n+    if (tx3.GetHash() < tx6.GetHash()) {\n+        sortedOrder.push_back(tx6.GetHash().ToString());\n+        sortedOrder.push_back(tx3.GetHash().ToString());\n+    } else {\n+        sortedOrder.push_back(tx3.GetHash().ToString());\n+        sortedOrder.push_back(tx6.GetHash().ToString());\n+    }\n+    CheckSort<3>(pool, sortedOrder);\n }\n \n+\n BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n {\n     CTxMemPool pool(CFeeRate(1000));"
      },
      {
        "sha": "19ddb5b79c5e2380d7856a669a18aad40df49250",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 24,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4077ad20d03f0ef61d48ef34b3107661b0ff8ffe/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4077ad20d03f0ef61d48ef34b3107661b0ff8ffe/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=4077ad20d03f0ef61d48ef34b3107661b0ff8ffe",
        "patch": "@@ -120,7 +120,22 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         tx.vout[0].nValue -= 1000000;\n         hash = tx.GetHash();\n         bool spendsCoinbase = (i == 0) ? true : false; // only first tx spends coinbase\n-        mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n+        // If we don't set the # of sig ops in the CTxMemPoolEntry, template creation fails\n+        mempool.addUnchecked(hash, entry.Fee(1000000).Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n+        tx.vin[0].prevout.hash = hash;\n+    }\n+    BOOST_CHECK_THROW(CreateNewBlock(chainparams, scriptPubKey), std::runtime_error);\n+    mempool.clear();\n+\n+    tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n+    tx.vout[0].nValue = 5000000000LL;\n+    for (unsigned int i = 0; i < 1001; ++i)\n+    {\n+        tx.vout[0].nValue -= 1000000;\n+        hash = tx.GetHash();\n+        bool spendsCoinbase = (i == 0) ? true : false; // only first tx spends coinbase\n+        // If we do set the # of sig ops in the CTxMemPoolEntry, template creation passes\n+        mempool.addUnchecked(hash, entry.Fee(1000000).Time(GetTime()).SpendsCoinbase(spendsCoinbase).SigOps(20).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n@@ -141,79 +156,76 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         tx.vout[0].nValue -= 10000000;\n         hash = tx.GetHash();\n         bool spendsCoinbase = (i == 0) ? true : false; // only first tx spends coinbase\n-        mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n+        mempool.addUnchecked(hash, entry.Fee(1000000).Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n-    // orphan in mempool\n+    // orphan in mempool, template creation fails\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n-    delete pblocktemplate;\n+    mempool.addUnchecked(hash, entry.Fee(1000000).Time(GetTime()).FromTx(tx));\n+    BOOST_CHECK_THROW(CreateNewBlock(chainparams, scriptPubKey), std::runtime_error);\n     mempool.clear();\n \n     // child with higher priority than parent\n     tx.vin[0].scriptSig = CScript() << OP_1;\n     tx.vin[0].prevout.hash = txFirst[1]->GetHash();\n     tx.vout[0].nValue = 4900000000LL;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Fee(100000000LL).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     tx.vin[0].prevout.hash = hash;\n     tx.vin.resize(2);\n     tx.vin[1].scriptSig = CScript() << OP_1;\n     tx.vin[1].prevout.hash = txFirst[0]->GetHash();\n     tx.vin[1].prevout.n = 0;\n     tx.vout[0].nValue = 5900000000LL;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Fee(400000000LL).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n-    // coinbase in mempool\n+    // coinbase in mempool, template creation fails\n     tx.vin.resize(1);\n     tx.vin[0].prevout.SetNull();\n     tx.vin[0].scriptSig = CScript() << OP_0 << OP_1;\n     tx.vout[0].nValue = 0;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n-    delete pblocktemplate;\n+    // give it a fee so it'll get mined\n+    mempool.addUnchecked(hash, entry.Fee(100000).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n+    BOOST_CHECK_THROW(CreateNewBlock(chainparams, scriptPubKey), std::runtime_error);\n     mempool.clear();\n \n-    // invalid (pre-p2sh) txn in mempool\n+    // invalid (pre-p2sh) txn in mempool, template creation fails\n     tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n     tx.vin[0].prevout.n = 0;\n     tx.vin[0].scriptSig = CScript() << OP_1;\n     tx.vout[0].nValue = 4900000000LL;\n     script = CScript() << OP_0;\n     tx.vout[0].scriptPubKey = GetScriptForDestination(CScriptID(script));\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Fee(10000000L).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     tx.vin[0].prevout.hash = hash;\n     tx.vin[0].scriptSig = CScript() << std::vector<unsigned char>(script.begin(), script.end());\n     tx.vout[0].nValue -= 1000000;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n-    delete pblocktemplate;\n+    mempool.addUnchecked(hash, entry.Fee(1000000).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n+    BOOST_CHECK_THROW(CreateNewBlock(chainparams, scriptPubKey), std::runtime_error);\n     mempool.clear();\n \n-    // double spend txn pair in mempool\n+    // double spend txn pair in mempool, template creation fails\n     tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n     tx.vin[0].scriptSig = CScript() << OP_1;\n     tx.vout[0].nValue = 4900000000LL;\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Fee(100000000L).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     tx.vout[0].scriptPubKey = CScript() << OP_2;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n-    delete pblocktemplate;\n+    mempool.addUnchecked(hash, entry.Fee(100000000L).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    BOOST_CHECK_THROW(CreateNewBlock(chainparams, scriptPubKey), std::runtime_error);\n     mempool.clear();\n \n     // subsidy changing\n@@ -237,7 +249,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n     tx.nLockTime = chainActive.Tip()->nHeight+1;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Fee(100000000L).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK(!CheckFinalTx(tx, LOCKTIME_MEDIAN_TIME_PAST));\n \n     // time locked\n@@ -251,7 +263,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx2.vout[0].scriptPubKey = CScript() << OP_1;\n     tx2.nLockTime = chainActive.Tip()->GetMedianTimePast()+1;\n     hash = tx2.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx2));\n+    mempool.addUnchecked(hash, entry.Fee(100000000L).Time(GetTime()).SpendsCoinbase(true).FromTx(tx2));\n     BOOST_CHECK(!CheckFinalTx(tx2, LOCKTIME_MEDIAN_TIME_PAST));\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));"
      },
      {
        "sha": "2147dbb0653365034db37f771059e74a1808af65",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4077ad20d03f0ef61d48ef34b3107661b0ff8ffe/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4077ad20d03f0ef61d48ef34b3107661b0ff8ffe/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=4077ad20d03f0ef61d48ef34b3107661b0ff8ffe",
        "patch": "@@ -150,7 +150,7 @@ CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(CMutableTransaction &tx, CTxMemPo\n     CAmount inChainValue = hasNoDependencies ? txn.GetValueOut() : 0;\n \n     return CTxMemPoolEntry(txn, nFee, nTime, dPriority, nHeight,\n-                           hasNoDependencies, inChainValue, spendsCoinbase);\n+                           hasNoDependencies, inChainValue, spendsCoinbase, sigOpCount);\n }\n \n void Shutdown(void* parg)"
      },
      {
        "sha": "273bfdd7f4a5688b8b4e78b05ffd453d762b3d0d",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4077ad20d03f0ef61d48ef34b3107661b0ff8ffe/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4077ad20d03f0ef61d48ef34b3107661b0ff8ffe/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=4077ad20d03f0ef61d48ef34b3107661b0ff8ffe",
        "patch": "@@ -66,11 +66,12 @@ struct TestMemPoolEntryHelper\n     unsigned int nHeight;\n     bool hadNoDependencies;\n     bool spendsCoinbase;\n-\n+    unsigned int sigOpCount;\n+    \n     TestMemPoolEntryHelper() :\n         nFee(0), nTime(0), dPriority(0.0), nHeight(1),\n-        hadNoDependencies(false), spendsCoinbase(false) { }\n-\n+        hadNoDependencies(false), spendsCoinbase(false), sigOpCount(1) { }\n+    \n     CTxMemPoolEntry FromTx(CMutableTransaction &tx, CTxMemPool *pool = NULL);\n \n     // Change the default value\n@@ -80,5 +81,6 @@ struct TestMemPoolEntryHelper\n     TestMemPoolEntryHelper &Height(unsigned int _height) { nHeight = _height; return *this; }\n     TestMemPoolEntryHelper &HadNoDependencies(bool _hnd) { hadNoDependencies = _hnd; return *this; }\n     TestMemPoolEntryHelper &SpendsCoinbase(bool _flag) { spendsCoinbase = _flag; return *this; }\n+    TestMemPoolEntryHelper &SigOps(unsigned int _sigops) { sigOpCount = _sigops; return *this; }\n };\n #endif"
      },
      {
        "sha": "35be2162877d940bc74383ba2ba8c2fc218505eb",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 4,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4077ad20d03f0ef61d48ef34b3107661b0ff8ffe/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4077ad20d03f0ef61d48ef34b3107661b0ff8ffe/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=4077ad20d03f0ef61d48ef34b3107661b0ff8ffe",
        "patch": "@@ -22,10 +22,10 @@ using namespace std;\n CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n                                  int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n                                  bool poolHasNoInputsOf, CAmount _inChainInputValue,\n-                                 bool _spendsCoinbase):\n+                                 bool _spendsCoinbase, unsigned int _sigOps):\n     tx(_tx), nFee(_nFee), nTime(_nTime), entryPriority(_entryPriority), entryHeight(_entryHeight),\n     hadNoDependencies(poolHasNoInputsOf), inChainInputValue(_inChainInputValue),\n-    spendsCoinbase(_spendsCoinbase)\n+    spendsCoinbase(_spendsCoinbase), sigOpCount(_sigOps)\n {\n     nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n     nModSize = tx.CalculateModifiedSize(nTxSize);\n@@ -36,6 +36,8 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n     nFeesWithDescendants = nFee;\n     CAmount nValueIn = tx.GetValueOut()+nFee;\n     assert(inChainInputValue <= nValueIn);\n+\n+    feeDelta = 0;\n }\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)\n@@ -53,6 +55,11 @@ CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n     return dResult;\n }\n \n+void CTxMemPoolEntry::UpdateFeeDelta(int64_t newFeeDelta)\n+{\n+    feeDelta = newFeeDelta;\n+}\n+\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n@@ -392,6 +399,15 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n     }\n     UpdateAncestorsOf(true, newit, setAncestors);\n \n+    // Update transaction's score for any feeDelta created by PrioritiseTransaction\n+    std::map<uint256, std::pair<double, CAmount> >::const_iterator pos = mapDeltas.find(hash);\n+    if (pos != mapDeltas.end()) {\n+        const std::pair<double, CAmount> &deltas = pos->second;\n+        if (deltas.second) {\n+            mapTx.modify(newit, update_fee_delta(deltas.second));\n+        }\n+    }\n+\n     nTransactionsUpdated++;\n     totalTxSize += entry.GetTxSize();\n     minerPolicyEstimator->processTransaction(entry, fCurrentEstimate);\n@@ -769,6 +785,10 @@ void CTxMemPool::PrioritiseTransaction(const uint256 hash, const string strHash,\n         std::pair<double, CAmount> &deltas = mapDeltas[hash];\n         deltas.first += dPriorityDelta;\n         deltas.second += nFeeDelta;\n+        txiter it = mapTx.find(hash);\n+        if (it != mapTx.end()) {\n+            mapTx.modify(it, update_fee_delta(deltas.second));\n+        }\n     }\n     LogPrintf(\"PrioritiseTransaction: %s priority += %f, fee += %d\\n\", strHash, dPriorityDelta, FormatMoney(nFeeDelta));\n }\n@@ -818,8 +838,8 @@ bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n \n size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n-    // Estimate the overhead of mapTx to be 9 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n-    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 9 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + memusage::DynamicUsage(mapLinks) + cachedInnerUsage;\n+    // Estimate the overhead of mapTx to be 12 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 12 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + memusage::DynamicUsage(mapLinks) + cachedInnerUsage;\n }\n \n void CTxMemPool::RemoveStaged(setEntries &stage) {"
      },
      {
        "sha": "5652969f4bb85206c69315eeb0abad94424078f4",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 58,
        "deletions": 4,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4077ad20d03f0ef61d48ef34b3107661b0ff8ffe/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4077ad20d03f0ef61d48ef34b3107661b0ff8ffe/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=4077ad20d03f0ef61d48ef34b3107661b0ff8ffe",
        "patch": "@@ -68,6 +68,8 @@ class CTxMemPoolEntry\n     bool hadNoDependencies; //! Not dependent on any other txs when it entered the mempool\n     CAmount inChainInputValue; //! Sum of all txin values that are already in blockchain\n     bool spendsCoinbase; //! keep track of transactions that spend a coinbase\n+    unsigned int sigOpCount; //! Legacy sig ops plus P2SH sig op count\n+    int64_t feeDelta; //! Used for determining the priority of the transaction for mining in a block\n \n     // Information about descendants of this transaction that are in the\n     // mempool; if we remove this transaction we must remove all of these\n@@ -81,7 +83,8 @@ class CTxMemPoolEntry\n public:\n     CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n                     int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n-                    bool poolHasNoInputsOf, CAmount _inChainInputValue, bool spendsCoinbase);\n+                    bool poolHasNoInputsOf, CAmount _inChainInputValue, bool spendsCoinbase,\n+                    unsigned int nSigOps);\n     CTxMemPoolEntry(const CTxMemPoolEntry& other);\n \n     const CTransaction& GetTx() const { return this->tx; }\n@@ -95,10 +98,14 @@ class CTxMemPoolEntry\n     int64_t GetTime() const { return nTime; }\n     unsigned int GetHeight() const { return entryHeight; }\n     bool WasClearAtEntry() const { return hadNoDependencies; }\n+    unsigned int GetSigOpCount() const { return sigOpCount; }\n+    int64_t GetModifiedFee() const { return nFee + feeDelta; }\n     size_t DynamicMemoryUsage() const { return nUsageSize; }\n \n     // Adjusts the descendant state, if this entry is not dirty.\n     void UpdateState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount);\n+    // Updates the fee delta used for mining priority score\n+    void UpdateFeeDelta(int64_t feeDelta);\n \n     /** We can set the entry to be dirty if doing the full calculation of in-\n      *  mempool descendants will be too expensive, which can potentially happen\n@@ -136,6 +143,16 @@ struct set_dirty\n         { e.SetDirty(); }\n };\n \n+struct update_fee_delta\n+{\n+    update_fee_delta(int64_t _feeDelta) : feeDelta(_feeDelta) { }\n+\n+    void operator() (CTxMemPoolEntry &e) { e.UpdateFeeDelta(feeDelta); }\n+\n+private:\n+    int64_t feeDelta;\n+};\n+\n // extracts a TxMemPoolEntry's transaction hash\n struct mempoolentry_txid\n {\n@@ -183,6 +200,24 @@ class CompareTxMemPoolEntryByFee\n     }\n };\n \n+/** \\class CompareTxMemPoolEntryByScore\n+ *\n+ *  Sort by score of entry ((fee+delta)/size) in descending order\n+ */\n+class CompareTxMemPoolEntryByScore\n+{\n+public:\n+    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b)\n+    {\n+        double f1 = (double)a.GetModifiedFee() * b.GetTxSize();\n+        double f2 = (double)b.GetModifiedFee() * a.GetTxSize();\n+        if (f1 == f2) {\n+            return b.GetTx().GetHash() < a.GetTx().GetHash();\n+        }\n+        return f1 > f2;\n+    }\n+};\n+\n class CompareTxMemPoolEntryByEntryTime\n {\n public:\n@@ -220,10 +255,11 @@ class CInPoint\n  *\n  * CTxMemPool::mapTx, and CTxMemPoolEntry bookkeeping:\n  *\n- * mapTx is a boost::multi_index that sorts the mempool on 3 criteria:\n+ * mapTx is a boost::multi_index that sorts the mempool on 4 criteria:\n  * - transaction hash\n  * - feerate [we use max(feerate of tx, feerate of tx with all descendants)]\n  * - time in mempool\n+ * - mining score (feerate modified by any fee deltas from PrioritiseTransaction)\n  *\n  * Note: the term \"descendant\" refers to in-mempool transactions that depend on\n  * this one, while \"ancestor\" refers to in-mempool transactions that a given\n@@ -320,6 +356,11 @@ class CTxMemPool\n             boost::multi_index::ordered_non_unique<\n                 boost::multi_index::identity<CTxMemPoolEntry>,\n                 CompareTxMemPoolEntryByEntryTime\n+                >,\n+            // sorted by score (for mining prioritization)\n+            boost::multi_index::ordered_unique<\n+                boost::multi_index::identity<CTxMemPoolEntry>,\n+                CompareTxMemPoolEntryByScore\n             >\n         >\n     > indexed_transaction_set;\n@@ -334,6 +375,8 @@ class CTxMemPool\n     };\n     typedef std::set<txiter, CompareIteratorByHash> setEntries;\n \n+    const setEntries & GetMemPoolParents(txiter entry) const;\n+    const setEntries & GetMemPoolChildren(txiter entry) const;\n private:\n     typedef std::map<txiter, setEntries, CompareIteratorByHash> cacheMap;\n \n@@ -345,8 +388,6 @@ class CTxMemPool\n     typedef std::map<txiter, TxLinks, CompareIteratorByHash> txlinksMap;\n     txlinksMap mapLinks;\n \n-    const setEntries & GetMemPoolParents(txiter entry) const;\n-    const setEntries & GetMemPoolChildren(txiter entry) const;\n     void UpdateParent(txiter entry, txiter parent, bool add);\n     void UpdateChild(txiter entry, txiter child, bool add);\n \n@@ -546,4 +587,17 @@ class CCoinsViewMemPool : public CCoinsViewBacked\n     bool HaveCoins(const uint256 &txid) const;\n };\n \n+// We want to sort transactions by coin age priority\n+typedef std::pair<double, CTxMemPool::txiter> TxCoinAgePriority;\n+\n+struct TxCoinAgePriorityCompare\n+{\n+    bool operator()(const TxCoinAgePriority& a, const TxCoinAgePriority& b)\n+    {\n+        if (a.first == b.first)\n+            return CompareTxMemPoolEntryByScore()(*(b.second), *(a.second)); //Reverse order to make sort less than\n+        return a.first < b.first;\n+    }\n+};\n+\n #endif // BITCOIN_TXMEMPOOL_H"
      }
    ]
  },
  {
    "sha": "74d0f902628472cd0cee66121ef0311eec201c40",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NGQwZjkwMjYyODQ3MmNkMGNlZTY2MTIxZWYwMzExZWVjMjAxYzQw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-22T00:41:40Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-12-01T23:50:39Z"
      },
      "message": "Add method to remove a tx from CCoinsViewCache if it is unchanged",
      "tree": {
        "sha": "7aa06dc2b0bc863b3b60b340d3a8919283b13650",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7aa06dc2b0bc863b3b60b340d3a8919283b13650"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/74d0f902628472cd0cee66121ef0311eec201c40",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74d0f902628472cd0cee66121ef0311eec201c40",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/74d0f902628472cd0cee66121ef0311eec201c40",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74d0f902628472cd0cee66121ef0311eec201c40/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4077ad20d03f0ef61d48ef34b3107661b0ff8ffe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4077ad20d03f0ef61d48ef34b3107661b0ff8ffe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4077ad20d03f0ef61d48ef34b3107661b0ff8ffe"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 15,
      "deletions": 0
    },
    "files": [
      {
        "sha": "060d6b7c5d8474701ca9dc7b2d42be0132dbbfc7",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74d0f902628472cd0cee66121ef0311eec201c40/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74d0f902628472cd0cee66121ef0311eec201c40/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=74d0f902628472cd0cee66121ef0311eec201c40",
        "patch": "@@ -206,6 +206,15 @@ bool CCoinsViewCache::Flush() {\n     return fOk;\n }\n \n+void CCoinsViewCache::Uncache(const uint256& hash)\n+{\n+    CCoinsMap::iterator it = cacheCoins.find(hash);\n+    if (it != cacheCoins.end() && it->second.flags == 0) {\n+        cachedCoinsUsage -= it->second.coins.DynamicMemoryUsage();\n+        cacheCoins.erase(it);\n+    }\n+}\n+\n unsigned int CCoinsViewCache::GetCacheSize() const {\n     return cacheCoins.size();\n }"
      },
      {
        "sha": "5beea711b20ea5c429a33ac364d859d4890ada07",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74d0f902628472cd0cee66121ef0311eec201c40/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74d0f902628472cd0cee66121ef0311eec201c40/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=74d0f902628472cd0cee66121ef0311eec201c40",
        "patch": "@@ -437,6 +437,12 @@ class CCoinsViewCache : public CCoinsViewBacked\n      */\n     bool Flush();\n \n+    /**\n+     * Removes the transaction with the given hash from the cache, if it is\n+     * not modified.\n+     */\n+    void Uncache(const uint256 &txid);\n+\n     //! Calculate the size of the cache (in number of transactions)\n     unsigned int GetCacheSize() const;\n "
      }
    ]
  },
  {
    "sha": "b2e74bd292460ca00fefc6356594318307365397",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMmU3NGJkMjkyNDYwY2EwMGZlZmM2MzU2NTk0MzE4MzA3MzY1Mzk3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-22T00:44:00Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-12-01T23:50:39Z"
      },
      "message": "Get the set of now-uncacheable-txn from CTxMemPool::TrimToSize",
      "tree": {
        "sha": "e7a0f8fbf7f9e9b33a72f6f2bd5e74cfe8831d41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e7a0f8fbf7f9e9b33a72f6f2bd5e74cfe8831d41"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b2e74bd292460ca00fefc6356594318307365397",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2e74bd292460ca00fefc6356594318307365397",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b2e74bd292460ca00fefc6356594318307365397",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2e74bd292460ca00fefc6356594318307365397/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "74d0f902628472cd0cee66121ef0311eec201c40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74d0f902628472cd0cee66121ef0311eec201c40",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/74d0f902628472cd0cee66121ef0311eec201c40"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 25,
      "deletions": 4
    },
    "files": [
      {
        "sha": "fea5da80293ca73bdb927236ccea0b3856ce7e15",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 2,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2e74bd292460ca00fefc6356594318307365397/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2e74bd292460ca00fefc6356594318307365397/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=b2e74bd292460ca00fefc6356594318307365397",
        "patch": "@@ -944,7 +944,7 @@ void CTxMemPool::trackPackageRemoved(const CFeeRate& rate) {\n     }\n }\n \n-void CTxMemPool::TrimToSize(size_t sizelimit) {\n+void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<uint256>* pvNoSpendsRemaining) {\n     LOCK(cs);\n \n     unsigned nTxnRemoved = 0;\n@@ -963,8 +963,26 @@ void CTxMemPool::TrimToSize(size_t sizelimit) {\n \n         setEntries stage;\n         CalculateDescendants(mapTx.project<0>(it), stage);\n-        RemoveStaged(stage);\n         nTxnRemoved += stage.size();\n+\n+        std::vector<CTransaction> txn;\n+        if (pvNoSpendsRemaining) {\n+            txn.reserve(stage.size());\n+            BOOST_FOREACH(txiter it, stage)\n+                txn.push_back(it->GetTx());\n+        }\n+        RemoveStaged(stage);\n+        if (pvNoSpendsRemaining) {\n+            BOOST_FOREACH(const CTransaction& tx, txn) {\n+                BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+                    if (exists(txin.prevout.hash))\n+                        continue;\n+                    std::map<COutPoint, CInPoint>::iterator it = mapNextTx.lower_bound(COutPoint(txin.prevout.hash, 0));\n+                    if (it == mapNextTx.end() || it->first.hash != txin.prevout.hash)\n+                        pvNoSpendsRemaining->push_back(txin.prevout.hash);\n+                }\n+            }\n+        }\n     }\n \n     if (maxFeeRateRemoved > CFeeRate(0))"
      },
      {
        "sha": "92031718686e53a6dd0c7dce806e8b7895c575e5",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2e74bd292460ca00fefc6356594318307365397/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2e74bd292460ca00fefc6356594318307365397/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=b2e74bd292460ca00fefc6356594318307365397",
        "patch": "@@ -483,8 +483,11 @@ class CTxMemPool\n       */\n     CFeeRate GetMinFee(size_t sizelimit) const;\n \n-    /** Remove transactions from the mempool until its dynamic size is <= sizelimit. */\n-    void TrimToSize(size_t sizelimit);\n+    /** Remove transactions from the mempool until its dynamic size is <= sizelimit.\n+      *  pvNoSpendsRemaining, if set, will be populated with the list of transactions\n+      *  which are not in mempool which no longer have any spends in this mempool.\n+      */\n+    void TrimToSize(size_t sizelimit, std::vector<uint256>* pvNoSpendsRemaining=NULL);\n \n     /** Expire all transaction (and their dependencies) in the mempool older than time. Return the number of removed transactions. */\n     int Expire(int64_t time);"
      }
    ]
  },
  {
    "sha": "677aa3d88c018a235d5b6d929e82f7b16e4f3e41",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzdhYTNkODhjMDE4YTIzNWQ1YjZkOTI5ZTgyZjdiMTZlNGYzZTQx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-22T18:52:55Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-12-01T23:52:07Z"
      },
      "message": "Discard txn cache entries that were loaded for removed mempool txn",
      "tree": {
        "sha": "6de4c293a6bb29a35fc99ed519f47517a9246302",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6de4c293a6bb29a35fc99ed519f47517a9246302"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/677aa3d88c018a235d5b6d929e82f7b16e4f3e41",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/677aa3d88c018a235d5b6d929e82f7b16e4f3e41",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/677aa3d88c018a235d5b6d929e82f7b16e4f3e41",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/677aa3d88c018a235d5b6d929e82f7b16e4f3e41/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b2e74bd292460ca00fefc6356594318307365397",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2e74bd292460ca00fefc6356594318307365397",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b2e74bd292460ca00fefc6356594318307365397"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 15,
      "deletions": 8
    },
    "files": [
      {
        "sha": "73ca8bb05431d7284a3b985d4c259d8db694bc0d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 8,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/677aa3d88c018a235d5b6d929e82f7b16e4f3e41/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/677aa3d88c018a235d5b6d929e82f7b16e4f3e41/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=677aa3d88c018a235d5b6d929e82f7b16e4f3e41",
        "patch": "@@ -789,6 +789,17 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n     return true;\n }\n \n+void LimitMempoolSize(CTxMemPool& pool, size_t limit, unsigned long age) {\n+    int expired = pool.Expire(GetTime() - age);\n+    if (expired != 0)\n+        LogPrint(\"mempool\", \"Expired %i transactions from the memory pool\\n\", expired);\n+\n+    std::vector<uint256> vNoSpendsRemaining;\n+    pool.TrimToSize(limit, &vNoSpendsRemaining);\n+    BOOST_FOREACH(const uint256& removed, vNoSpendsRemaining)\n+        pcoinsTip->Uncache(removed);\n+}\n+\n CAmount GetMinRelayFee(const CTransaction& tx, const CTxMemPool& pool, unsigned int nBytes, bool fAllowFree)\n {\n     uint256 hash = tx.GetHash();\n@@ -1210,12 +1221,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         // trim mempool and check if tx was trimmed\n         if (!fOverrideMempoolLimit) {\n-            int expired = pool.Expire(GetTime() - GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n-            if (expired != 0)\n-                LogPrint(\"mempool\", \"Expired %i transactions from the memory pool\\n\", expired);\n-\n-            pool.TrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n-            if (!pool.exists(tx.GetHash()))\n+            LimitMempoolSize(pool, GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n+            if (!pool.exists(hash))\n                 return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool full\");\n         }\n     }\n@@ -2571,7 +2578,7 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n \n     if (fBlocksDisconnected) {\n         mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n-        mempool.TrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+        LimitMempoolSize(mempool, GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n     }\n     mempool.check(pcoinsTip);\n \n@@ -2686,7 +2693,7 @@ bool InvalidateBlock(CValidationState& state, const Consensus::Params& consensus\n         }\n     }\n \n-    mempool.TrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    LimitMempoolSize(mempool, GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n \n     // The resulting new best tip may not be in setBlockIndexCandidates anymore, so\n     // add it again."
      }
    ]
  },
  {
    "sha": "97bf377bd1f27ad841e1414e74361923a9f794f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5N2JmMzc3YmQxZjI3YWQ4NDFlMTQxNGU3NDM2MTkyM2E5Zjc5NGY1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-22T22:49:53Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-12-01T23:52:09Z"
      },
      "message": "Add CCoinsViewCache::HaveCoinsInCache to check if a tx is cached",
      "tree": {
        "sha": "636b92174fbced1d0bcc9238fdbbe00baf2b73c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/636b92174fbced1d0bcc9238fdbbe00baf2b73c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/97bf377bd1f27ad841e1414e74361923a9f794f5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97bf377bd1f27ad841e1414e74361923a9f794f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/97bf377bd1f27ad841e1414e74361923a9f794f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97bf377bd1f27ad841e1414e74361923a9f794f5/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "677aa3d88c018a235d5b6d929e82f7b16e4f3e41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/677aa3d88c018a235d5b6d929e82f7b16e4f3e41",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/677aa3d88c018a235d5b6d929e82f7b16e4f3e41"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "122bf4e48d547224f490aa9f81586fd8fb6b02aa",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97bf377bd1f27ad841e1414e74361923a9f794f5/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97bf377bd1f27ad841e1414e74361923a9f794f5/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=97bf377bd1f27ad841e1414e74361923a9f794f5",
        "patch": "@@ -144,6 +144,11 @@ bool CCoinsViewCache::HaveCoins(const uint256 &txid) const {\n     return (it != cacheCoins.end() && !it->second.coins.vout.empty());\n }\n \n+bool CCoinsViewCache::HaveCoinsInCache(const uint256 &txid) const {\n+    CCoinsMap::const_iterator it = cacheCoins.find(txid);\n+    return it != cacheCoins.end();\n+}\n+\n uint256 CCoinsViewCache::GetBestBlock() const {\n     if (hashBlock.IsNull())\n         hashBlock = base->GetBestBlock();"
      },
      {
        "sha": "60c1ba8a783e906308b6a92fcb031d96cdc74a0e",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97bf377bd1f27ad841e1414e74361923a9f794f5/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97bf377bd1f27ad841e1414e74361923a9f794f5/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=97bf377bd1f27ad841e1414e74361923a9f794f5",
        "patch": "@@ -405,6 +405,13 @@ class CCoinsViewCache : public CCoinsViewBacked\n     void SetBestBlock(const uint256 &hashBlock);\n     bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n \n+    /**\n+     * Check if we have the given tx already loaded in this cache.\n+     * The semantics are the same as HaveCoins(), but no calls to\n+     * the backing CCoinsView are made.\n+     */\n+    bool HaveCoinsInCache(const uint256 &txid) const;\n+\n     /**\n      * Return a pointer to CCoins in the cache, or NULL if not found. This is\n      * more efficient than GetCoins. Modifications to other cache entries are"
      }
    ]
  },
  {
    "sha": "bde953e2818ecf44727da128c2aa2ec7667cf7e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZGU5NTNlMjgxOGVjZjQ0NzI3ZGExMjhjMmFhMmVjNzY2N2NmN2U3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-22T22:50:33Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-12-01T23:52:09Z"
      },
      "message": "Uncache input txn in utxo cache if a tx is not accepted to mempool",
      "tree": {
        "sha": "60eb91855b35d3c57458f345c343963dd71d4a4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/60eb91855b35d3c57458f345c343963dd71d4a4e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bde953e2818ecf44727da128c2aa2ec7667cf7e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bde953e2818ecf44727da128c2aa2ec7667cf7e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bde953e2818ecf44727da128c2aa2ec7667cf7e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bde953e2818ecf44727da128c2aa2ec7667cf7e7/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "97bf377bd1f27ad841e1414e74361923a9f794f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97bf377bd1f27ad841e1414e74361923a9f794f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/97bf377bd1f27ad841e1414e74361923a9f794f5"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 22,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d1ed5c5edf405aec611c5668c93671ba3d228a4e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 3,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bde953e2818ecf44727da128c2aa2ec7667cf7e7/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bde953e2818ecf44727da128c2aa2ec7667cf7e7/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=bde953e2818ecf44727da128c2aa2ec7667cf7e7",
        "patch": "@@ -835,8 +835,9 @@ std::string FormatStateMessage(const CValidationState &state)\n         state.GetRejectCode());\n }\n \n-bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, bool fOverrideMempoolLimit, bool fRejectAbsurdFee)\n+bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n+                              bool* pfMissingInputs, bool fOverrideMempoolLimit, bool fRejectAbsurdFee,\n+                              std::vector<uint256>& vHashTxnToUncache)\n {\n     AssertLockHeld(cs_main);\n     if (pfMissingInputs)\n@@ -917,13 +918,19 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         view.SetBackend(viewMemPool);\n \n         // do we already have it?\n-        if (view.HaveCoins(hash))\n+        bool fHadTxInCache = pcoinsTip->HaveCoinsInCache(hash);\n+        if (view.HaveCoins(hash)) {\n+            if (!fHadTxInCache)\n+                vHashTxnToUncache.push_back(hash);\n             return state.Invalid(false, REJECT_ALREADY_KNOWN, \"txn-already-known\");\n+        }\n \n         // do all inputs exist?\n         // Note that this does not check for the presence of actual outputs (see the next check for that),\n         // and only helps with filling in pfMissingInputs (to determine missing vs spent).\n         BOOST_FOREACH(const CTxIn txin, tx.vin) {\n+            if (!pcoinsTip->HaveCoinsInCache(txin.prevout.hash))\n+                vHashTxnToUncache.push_back(txin.prevout.hash);\n             if (!view.HaveCoins(txin.prevout.hash)) {\n                 if (pfMissingInputs)\n                     *pfMissingInputs = true;\n@@ -1232,6 +1239,18 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     return true;\n }\n \n+bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n+                        bool* pfMissingInputs, bool fOverrideMempoolLimit, bool fRejectAbsurdFee)\n+{\n+    std::vector<uint256> vHashTxToUncache;\n+    bool res = AcceptToMemoryPoolWorker(pool, state, tx, fLimitFree, pfMissingInputs, fOverrideMempoolLimit, fRejectAbsurdFee, vHashTxToUncache);\n+    if (!res) {\n+        BOOST_FOREACH(const uint256& hashTx, vHashTxToUncache)\n+            pcoinsTip->Uncache(hashTx);\n+    }\n+    return res;\n+}\n+\n /** Return transaction in tx, and if it was found inside a block, its hash is placed in hashBlock */\n bool GetTransaction(const uint256 &hash, CTransaction &txOut, const Consensus::Params& consensusParams, uint256 &hashBlock, bool fAllowSlow)\n {"
      }
    ]
  },
  {
    "sha": "dd5862c4cdc02535948042fe519694166bcd2bb7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDU4NjJjNGNkYzAyNTM1OTQ4MDQyZmU1MTk2OTQxNjZiY2QyYmI3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-10-26T03:22:07Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-12-01T23:52:09Z"
      },
      "message": "Flush coins cache also after transaction processing",
      "tree": {
        "sha": "82bde8fe54a7a09488dd4653a6ba7efb096356cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/82bde8fe54a7a09488dd4653a6ba7efb096356cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd5862c4cdc02535948042fe519694166bcd2bb7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd5862c4cdc02535948042fe519694166bcd2bb7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd5862c4cdc02535948042fe519694166bcd2bb7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd5862c4cdc02535948042fe519694166bcd2bb7/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bde953e2818ecf44727da128c2aa2ec7667cf7e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bde953e2818ecf44727da128c2aa2ec7667cf7e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bde953e2818ecf44727da128c2aa2ec7667cf7e7"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c41dd58d118e41b8c55e3d74f586f85b39e236e6",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd5862c4cdc02535948042fe519694166bcd2bb7/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd5862c4cdc02535948042fe519694166bcd2bb7/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=dd5862c4cdc02535948042fe519694166bcd2bb7",
        "patch": "@@ -4830,6 +4830,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             if (nDoS > 0)\n                 Misbehaving(pfrom->GetId(), nDoS);\n         }\n+        FlushStateToDisk(state, FLUSH_STATE_PERIODIC);\n     }\n \n "
      }
    ]
  },
  {
    "sha": "4a63f946760666adcb1a4dde26fc7c6d31c301af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YTYzZjk0Njc2MDY2NmFkY2IxYTRkZGUyNmZjN2M2ZDMxYzMwMWFm",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-12-02T08:42:55Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-12-02T08:43:06Z"
      },
      "message": "Merge pull request #7040\n\nb171c69 [doc] Update OS X build notes for new qt5 configure (Michael Ford)",
      "tree": {
        "sha": "a621459ef7a5dcd8ad5d730c95ecf740488eea5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a621459ef7a5dcd8ad5d730c95ecf740488eea5d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a63f946760666adcb1a4dde26fc7c6d31c301af",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWXq8aAAoJECnUvLZBb1Ps2+4QAIk//uZBNqBbnWdhIUZE8QSY\n4OM343/5SJYE9ZMQBQVhbHXKfrs30i+8wQH/EYH2ex+XveVno0vUfiRA/7Zn4geC\nXIkMN8h2hWuPlZ28v6BZc1m7iQpEAqBuibqaclE49eEqUm1Yz/MhSJo+KKOPRIp3\nXBUMiRbjMCcaZtSL1cpMrpaV3jz5rVPedmjuCjMMz3IlAqtwd9ZPQ9SEXXxrv93O\nT8Hwvsyx3OjobK5U4/1TCFjMaz+4Rn+t3uaYONpFPapZmKKTSVUgrVJuh5aEu8Oq\npAyHyOsa1UOsJ31QMmFbMvvF/2pHeioizT3Ek9OoI2bK7jFC/Di1/6b+UEFPYWOt\nVJ8iJxIDevIJiBF8SR3wP6K8LDqyZHuQ3os0pcLj0o2nuciIYFLdTtGsRKzHq2un\nT+6I71zGkYYA49mL3w/hQVUcuMXpM0G4fm4/3WWSAWy+U8xgQ1gZIP+2eaGcd+G2\nIx6VYDj8YHW1ajWBwc0l8Hvep+vYPDSKg7gWSHfU81O17bs9wM4SUjoDNE8/HwJz\nEeAPI68Af7Yjl6mjjiHA+HV9nSD1BdgUOHH/2TfUFLHflwSbC1p0jhY7rjJCu9GF\nvaOgbYJpDaKwnk0Jdngy15mVEoahJX3EWWBrMO4Qe9cHmR9JUWb59UOP1zxRHRW/\nvWtB4PX3H11yTuR3agQb\n=Mz+h\n-----END PGP SIGNATURE-----",
        "payload": "tree a621459ef7a5dcd8ad5d730c95ecf740488eea5d\nparent 4077ad20d03f0ef61d48ef34b3107661b0ff8ffe\nparent b171c69c6010271fe793db1f84897b5fbc6d8dc6\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1449045775 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1449045786 +0100\n\nMerge pull request #7040\n\nb171c69 [doc] Update OS X build notes for new qt5 configure (Michael Ford)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a63f946760666adcb1a4dde26fc7c6d31c301af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a63f946760666adcb1a4dde26fc7c6d31c301af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a63f946760666adcb1a4dde26fc7c6d31c301af/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4077ad20d03f0ef61d48ef34b3107661b0ff8ffe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4077ad20d03f0ef61d48ef34b3107661b0ff8ffe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4077ad20d03f0ef61d48ef34b3107661b0ff8ffe"
      },
      {
        "sha": "b171c69c6010271fe793db1f84897b5fbc6d8dc6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b171c69c6010271fe793db1f84897b5fbc6d8dc6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b171c69c6010271fe793db1f84897b5fbc6d8dc6"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 11,
      "deletions": 9
    },
    "files": [
      {
        "sha": "c3cb1b78917d2e61901a7f6a9c3e17392bde2d72",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a63f946760666adcb1a4dde26fc7c6d31c301af/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a63f946760666adcb1a4dde26fc7c6d31c301af/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=4a63f946760666adcb1a4dde26fc7c6d31c301af",
        "patch": "@@ -5,7 +5,7 @@ This guide will show you how to build bitcoind (headless client) for OS X.\n Notes\n -----\n \n-* Tested on OS X 10.7 through 10.10 on 64-bit Intel processors only.\n+* Tested on OS X 10.7 through 10.11 on 64-bit Intel processors only.\n \n * All of the commands should be executed in a Terminal application. The\n built-in one is located in `/Applications/Utilities`.\n@@ -24,7 +24,7 @@ be re-done or updated every time Xcode is updated.\n You will also need to install [Homebrew](http://brew.sh) in order to install library\n dependencies.\n \n-The installation of the actual dependencies is covered in the Instructions\n+The installation of the actual dependencies is covered in the instructions\n sections below.\n \n Instructions: Homebrew\n@@ -36,17 +36,19 @@ Instructions: Homebrew\n \n NOTE: Building with Qt4 is still supported, however, could result in a broken UI. As such, building with Qt5 is recommended.\n \n-### Building `bitcoind`\n+### Building `bitcoin`\n \n 1. Clone the GitHub tree to get the source code and go into the directory.\n \n         git clone https://github.com/bitcoin/bitcoin.git\n         cd bitcoin\n \n-2.  Build bitcoind:\n+2.  Build bitcoin-core:\n+    This will configure and build the headless bitcoin binaries as well as the gui (if Qt is found).\n+    You can disable the gui build by passing `--without-gui` to configure.\n \n         ./autogen.sh\n-        ./configure --with-gui=qt5\n+        ./configure\n         make\n \n 3.  It is also a good idea to build and run the unit tests:\n@@ -60,10 +62,10 @@ NOTE: Building with Qt4 is still supported, however, could result in a broken UI\n Use Qt Creator as IDE\n ------------------------\n You can use Qt Creator as IDE, for debugging and for manipulating forms, etc.\n-Download Qt Creator from http://www.qt.io/download/. Download the \"community edition\" and only install Qt Creator (uncheck the rest during the installation process).\n+Download Qt Creator from https://www.qt.io/download/. Download the \"community edition\" and only install Qt Creator (uncheck the rest during the installation process).\n \n 1. Make sure you installed everything through Homebrew mentioned above\n-2. Do a proper ./configure --with-gui=qt5 --enable-debug\n+2. Do a proper ./configure --enable-debug\n 3. In Qt Creator do \"New Project\" -> Import Project -> Import Existing Project\n 4. Enter \"bitcoin-qt\" as project name, enter src/qt as location\n 5. Leave the file selection as it is\n@@ -79,7 +81,7 @@ You can ignore this section if you are building `bitcoind` for your own use.\n \n bitcoind/bitcoin-cli binaries are not included in the Bitcoin-Qt.app bundle.\n \n-If you are building `bitcoind` or `Bitcoin-Qt` for others, your build machine should be set up\n+If you are building `bitcoind` or `Bitcoin Core` for others, your build machine should be set up\n as follows for maximum compatibility:\n \n All dependencies should be compiled with these flags:\n@@ -88,7 +90,7 @@ All dependencies should be compiled with these flags:\n  -arch x86_64\n  -isysroot $(xcode-select --print-path)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk\n \n-Once dependencies are compiled, see [doc/release-process.md](release-process.md) for how the Bitcoin-Qt.app\n+Once dependencies are compiled, see [doc/release-process.md](release-process.md) for how the Bitcoin Core\n bundle is packaged and signed to create the .dmg disk image that is distributed.\n \n Running"
      }
    ]
  },
  {
    "sha": "bdda4d567eedd44d3088980fa47ab03827103f68",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZGRhNGQ1NjdlZWRkNDRkMzA4ODk4MGZhNDdhYjAzODI3MTAzZjY4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-02T09:12:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-02T09:17:43Z"
      },
      "message": "Merge pull request #6872\n\ndd5862c Flush coins cache also after transaction processing (Pieter Wuille)\nbde953e Uncache input txn in utxo cache if a tx is not accepted to mempool (Matt Corallo)\n97bf377 Add CCoinsViewCache::HaveCoinsInCache to check if a tx is cached (Matt Corallo)\n677aa3d Discard txn cache entries that were loaded for removed mempool txn (Matt Corallo)\nb2e74bd Get the set of now-uncacheable-txn from CTxMemPool::TrimToSize (Matt Corallo)\n74d0f90 Add method to remove a tx from CCoinsViewCache if it is unchanged (Matt Corallo)",
      "tree": {
        "sha": "085c3f0ff182276ba87cc9eb1c2b8713ba503231",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/085c3f0ff182276ba87cc9eb1c2b8713ba503231"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bdda4d567eedd44d3088980fa47ab03827103f68",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWXrc4AAoJEHSBCwEjRsmm7dsIAMNxh8YNRjUASlQNXiMJ6ayk\nH9i738hf9YX9K3nlY3L9IzmT8poujywhYaWDkwIBL//R/zZZJf+QdVywN56dXa7z\ndp0c+K2E5TZoPrJRDaAhJvkB5vFpt06LkqQvIRx04zzq6/B6341+4RJrO4XmNj37\ngwApaKpFAemMA7ANd/K35HxHv3m2xVdq2B2i66PuQ5qY0fFZca22sJbpnbb8rJta\n2RkHy7pd1eRuEDL/LsmilfGi56cp86tixTmW9ce0R5N/udgjkKzJCPNgX9UXEHVJ\nk+kY985GzynQFQeNPvPGXcLCFK44Cnm0ffIJBpgBwmvffE6OpwjAeypCbFSJU7c=\n=e3r8\n-----END PGP SIGNATURE-----",
        "payload": "tree 085c3f0ff182276ba87cc9eb1c2b8713ba503231\nparent 4a63f946760666adcb1a4dde26fc7c6d31c301af\nparent dd5862c4cdc02535948042fe519694166bcd2bb7\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1449047539 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1449047863 +0100\n\nMerge pull request #6872\n\ndd5862c Flush coins cache also after transaction processing (Pieter Wuille)\nbde953e Uncache input txn in utxo cache if a tx is not accepted to mempool (Matt Corallo)\n97bf377 Add CCoinsViewCache::HaveCoinsInCache to check if a tx is cached (Matt Corallo)\n677aa3d Discard txn cache entries that were loaded for removed mempool txn (Matt Corallo)\nb2e74bd Get the set of now-uncacheable-txn from CTxMemPool::TrimToSize (Matt Corallo)\n74d0f90 Add method to remove a tx from CCoinsViewCache if it is unchanged (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdda4d567eedd44d3088980fa47ab03827103f68",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bdda4d567eedd44d3088980fa47ab03827103f68",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdda4d567eedd44d3088980fa47ab03827103f68/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4a63f946760666adcb1a4dde26fc7c6d31c301af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a63f946760666adcb1a4dde26fc7c6d31c301af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a63f946760666adcb1a4dde26fc7c6d31c301af"
      },
      {
        "sha": "dd5862c4cdc02535948042fe519694166bcd2bb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd5862c4cdc02535948042fe519694166bcd2bb7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd5862c4cdc02535948042fe519694166bcd2bb7"
      }
    ],
    "stats": {
      "total": 105,
      "additions": 90,
      "deletions": 15
    },
    "files": [
      {
        "sha": "122bf4e48d547224f490aa9f81586fd8fb6b02aa",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdda4d567eedd44d3088980fa47ab03827103f68/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdda4d567eedd44d3088980fa47ab03827103f68/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=bdda4d567eedd44d3088980fa47ab03827103f68",
        "patch": "@@ -144,6 +144,11 @@ bool CCoinsViewCache::HaveCoins(const uint256 &txid) const {\n     return (it != cacheCoins.end() && !it->second.coins.vout.empty());\n }\n \n+bool CCoinsViewCache::HaveCoinsInCache(const uint256 &txid) const {\n+    CCoinsMap::const_iterator it = cacheCoins.find(txid);\n+    return it != cacheCoins.end();\n+}\n+\n uint256 CCoinsViewCache::GetBestBlock() const {\n     if (hashBlock.IsNull())\n         hashBlock = base->GetBestBlock();\n@@ -206,6 +211,15 @@ bool CCoinsViewCache::Flush() {\n     return fOk;\n }\n \n+void CCoinsViewCache::Uncache(const uint256& hash)\n+{\n+    CCoinsMap::iterator it = cacheCoins.find(hash);\n+    if (it != cacheCoins.end() && it->second.flags == 0) {\n+        cachedCoinsUsage -= it->second.coins.DynamicMemoryUsage();\n+        cacheCoins.erase(it);\n+    }\n+}\n+\n unsigned int CCoinsViewCache::GetCacheSize() const {\n     return cacheCoins.size();\n }"
      },
      {
        "sha": "60c1ba8a783e906308b6a92fcb031d96cdc74a0e",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdda4d567eedd44d3088980fa47ab03827103f68/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdda4d567eedd44d3088980fa47ab03827103f68/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=bdda4d567eedd44d3088980fa47ab03827103f68",
        "patch": "@@ -405,6 +405,13 @@ class CCoinsViewCache : public CCoinsViewBacked\n     void SetBestBlock(const uint256 &hashBlock);\n     bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n \n+    /**\n+     * Check if we have the given tx already loaded in this cache.\n+     * The semantics are the same as HaveCoins(), but no calls to\n+     * the backing CCoinsView are made.\n+     */\n+    bool HaveCoinsInCache(const uint256 &txid) const;\n+\n     /**\n      * Return a pointer to CCoins in the cache, or NULL if not found. This is\n      * more efficient than GetCoins. Modifications to other cache entries are\n@@ -437,6 +444,12 @@ class CCoinsViewCache : public CCoinsViewBacked\n      */\n     bool Flush();\n \n+    /**\n+     * Removes the transaction with the given hash from the cache, if it is\n+     * not modified.\n+     */\n+    void Uncache(const uint256 &txid);\n+\n     //! Calculate the size of the cache (in number of transactions)\n     unsigned int GetCacheSize() const;\n "
      },
      {
        "sha": "c41dd58d118e41b8c55e3d74f586f85b39e236e6",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 11,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdda4d567eedd44d3088980fa47ab03827103f68/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdda4d567eedd44d3088980fa47ab03827103f68/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=bdda4d567eedd44d3088980fa47ab03827103f68",
        "patch": "@@ -789,6 +789,17 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n     return true;\n }\n \n+void LimitMempoolSize(CTxMemPool& pool, size_t limit, unsigned long age) {\n+    int expired = pool.Expire(GetTime() - age);\n+    if (expired != 0)\n+        LogPrint(\"mempool\", \"Expired %i transactions from the memory pool\\n\", expired);\n+\n+    std::vector<uint256> vNoSpendsRemaining;\n+    pool.TrimToSize(limit, &vNoSpendsRemaining);\n+    BOOST_FOREACH(const uint256& removed, vNoSpendsRemaining)\n+        pcoinsTip->Uncache(removed);\n+}\n+\n CAmount GetMinRelayFee(const CTransaction& tx, const CTxMemPool& pool, unsigned int nBytes, bool fAllowFree)\n {\n     uint256 hash = tx.GetHash();\n@@ -824,8 +835,9 @@ std::string FormatStateMessage(const CValidationState &state)\n         state.GetRejectCode());\n }\n \n-bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, bool fOverrideMempoolLimit, bool fRejectAbsurdFee)\n+bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n+                              bool* pfMissingInputs, bool fOverrideMempoolLimit, bool fRejectAbsurdFee,\n+                              std::vector<uint256>& vHashTxnToUncache)\n {\n     AssertLockHeld(cs_main);\n     if (pfMissingInputs)\n@@ -906,13 +918,19 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         view.SetBackend(viewMemPool);\n \n         // do we already have it?\n-        if (view.HaveCoins(hash))\n+        bool fHadTxInCache = pcoinsTip->HaveCoinsInCache(hash);\n+        if (view.HaveCoins(hash)) {\n+            if (!fHadTxInCache)\n+                vHashTxnToUncache.push_back(hash);\n             return state.Invalid(false, REJECT_ALREADY_KNOWN, \"txn-already-known\");\n+        }\n \n         // do all inputs exist?\n         // Note that this does not check for the presence of actual outputs (see the next check for that),\n         // and only helps with filling in pfMissingInputs (to determine missing vs spent).\n         BOOST_FOREACH(const CTxIn txin, tx.vin) {\n+            if (!pcoinsTip->HaveCoinsInCache(txin.prevout.hash))\n+                vHashTxnToUncache.push_back(txin.prevout.hash);\n             if (!view.HaveCoins(txin.prevout.hash)) {\n                 if (pfMissingInputs)\n                     *pfMissingInputs = true;\n@@ -1210,12 +1228,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         // trim mempool and check if tx was trimmed\n         if (!fOverrideMempoolLimit) {\n-            int expired = pool.Expire(GetTime() - GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n-            if (expired != 0)\n-                LogPrint(\"mempool\", \"Expired %i transactions from the memory pool\\n\", expired);\n-\n-            pool.TrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n-            if (!pool.exists(tx.GetHash()))\n+            LimitMempoolSize(pool, GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n+            if (!pool.exists(hash))\n                 return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool full\");\n         }\n     }\n@@ -1225,6 +1239,18 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     return true;\n }\n \n+bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n+                        bool* pfMissingInputs, bool fOverrideMempoolLimit, bool fRejectAbsurdFee)\n+{\n+    std::vector<uint256> vHashTxToUncache;\n+    bool res = AcceptToMemoryPoolWorker(pool, state, tx, fLimitFree, pfMissingInputs, fOverrideMempoolLimit, fRejectAbsurdFee, vHashTxToUncache);\n+    if (!res) {\n+        BOOST_FOREACH(const uint256& hashTx, vHashTxToUncache)\n+            pcoinsTip->Uncache(hashTx);\n+    }\n+    return res;\n+}\n+\n /** Return transaction in tx, and if it was found inside a block, its hash is placed in hashBlock */\n bool GetTransaction(const uint256 &hash, CTransaction &txOut, const Consensus::Params& consensusParams, uint256 &hashBlock, bool fAllowSlow)\n {\n@@ -2571,7 +2597,7 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n \n     if (fBlocksDisconnected) {\n         mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n-        mempool.TrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+        LimitMempoolSize(mempool, GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n     }\n     mempool.check(pcoinsTip);\n \n@@ -2686,7 +2712,7 @@ bool InvalidateBlock(CValidationState& state, const Consensus::Params& consensus\n         }\n     }\n \n-    mempool.TrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    LimitMempoolSize(mempool, GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n \n     // The resulting new best tip may not be in setBlockIndexCandidates anymore, so\n     // add it again.\n@@ -4804,6 +4830,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             if (nDoS > 0)\n                 Misbehaving(pfrom->GetId(), nDoS);\n         }\n+        FlushStateToDisk(state, FLUSH_STATE_PERIODIC);\n     }\n \n "
      },
      {
        "sha": "fea5da80293ca73bdb927236ccea0b3856ce7e15",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 2,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdda4d567eedd44d3088980fa47ab03827103f68/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdda4d567eedd44d3088980fa47ab03827103f68/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=bdda4d567eedd44d3088980fa47ab03827103f68",
        "patch": "@@ -944,7 +944,7 @@ void CTxMemPool::trackPackageRemoved(const CFeeRate& rate) {\n     }\n }\n \n-void CTxMemPool::TrimToSize(size_t sizelimit) {\n+void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<uint256>* pvNoSpendsRemaining) {\n     LOCK(cs);\n \n     unsigned nTxnRemoved = 0;\n@@ -963,8 +963,26 @@ void CTxMemPool::TrimToSize(size_t sizelimit) {\n \n         setEntries stage;\n         CalculateDescendants(mapTx.project<0>(it), stage);\n-        RemoveStaged(stage);\n         nTxnRemoved += stage.size();\n+\n+        std::vector<CTransaction> txn;\n+        if (pvNoSpendsRemaining) {\n+            txn.reserve(stage.size());\n+            BOOST_FOREACH(txiter it, stage)\n+                txn.push_back(it->GetTx());\n+        }\n+        RemoveStaged(stage);\n+        if (pvNoSpendsRemaining) {\n+            BOOST_FOREACH(const CTransaction& tx, txn) {\n+                BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+                    if (exists(txin.prevout.hash))\n+                        continue;\n+                    std::map<COutPoint, CInPoint>::iterator it = mapNextTx.lower_bound(COutPoint(txin.prevout.hash, 0));\n+                    if (it == mapNextTx.end() || it->first.hash != txin.prevout.hash)\n+                        pvNoSpendsRemaining->push_back(txin.prevout.hash);\n+                }\n+            }\n+        }\n     }\n \n     if (maxFeeRateRemoved > CFeeRate(0))"
      },
      {
        "sha": "92031718686e53a6dd0c7dce806e8b7895c575e5",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdda4d567eedd44d3088980fa47ab03827103f68/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdda4d567eedd44d3088980fa47ab03827103f68/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=bdda4d567eedd44d3088980fa47ab03827103f68",
        "patch": "@@ -483,8 +483,11 @@ class CTxMemPool\n       */\n     CFeeRate GetMinFee(size_t sizelimit) const;\n \n-    /** Remove transactions from the mempool until its dynamic size is <= sizelimit. */\n-    void TrimToSize(size_t sizelimit);\n+    /** Remove transactions from the mempool until its dynamic size is <= sizelimit.\n+      *  pvNoSpendsRemaining, if set, will be populated with the list of transactions\n+      *  which are not in mempool which no longer have any spends in this mempool.\n+      */\n+    void TrimToSize(size_t sizelimit, std::vector<uint256>* pvNoSpendsRemaining=NULL);\n \n     /** Expire all transaction (and their dependencies) in the mempool older than time. Return the number of removed transactions. */\n     int Expire(int64_t time);"
      }
    ]
  },
  {
    "sha": "1b0241fcec3e00d13658090e26cfa1f05133116e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjAyNDFmY2VjM2UwMGQxMzY1ODA5MGUyNmNmYTFmMDUxMzMxMTZl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-02T09:18:14Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-02T09:18:20Z"
      },
      "message": "Merge pull request #7144\n\n8f0d79e test: Disable scheduler test manythreads (Wladimir J. van der Laan)",
      "tree": {
        "sha": "8a8fd0c3675a3735befb15d4f5b51d1e7ce5b7c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a8fd0c3675a3735befb15d4f5b51d1e7ce5b7c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b0241fcec3e00d13658090e26cfa1f05133116e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWXrdcAAoJEHSBCwEjRsmmGgUH/3PL3Y9OmOZEl8vFRkROcTU1\nABoADf7XVb8uDGOv6ejOpG8vA+dQ1LeuNYQn+M2zuYFweOVEqYROjIDKe6+3jPPl\nXkCa6phWxQRoNUSlyvSsTHO0kl7uxAr19/6xEzTNtve7lIUoeLCVD1hGLsIeh3Pt\n9Yhi5n4yXIztH7XAitzak73Dl2EePaQwIoAUT2nGzDqgpbsy9anxqZ2xplVKAgiu\nr9VxKI0MBsbotYKiA/U+talVZ/Tlw9mw9Sd+UkXV3r5IdS2uX1MdMwsxfazwslln\n/5MMLM82Df+gbJh/REqgSlfvs2WLmv7KgNdGb143zU8Hvnrhi+TjICGJ1f/um+w=\n=LS11\n-----END PGP SIGNATURE-----",
        "payload": "tree 8a8fd0c3675a3735befb15d4f5b51d1e7ce5b7c4\nparent bdda4d567eedd44d3088980fa47ab03827103f68\nparent 8f0d79e3c873d5f4942009b9b5bfe867104ed3e6\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1449047894 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1449047900 +0100\n\nMerge pull request #7144\n\n8f0d79e test: Disable scheduler test manythreads (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b0241fcec3e00d13658090e26cfa1f05133116e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b0241fcec3e00d13658090e26cfa1f05133116e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b0241fcec3e00d13658090e26cfa1f05133116e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bdda4d567eedd44d3088980fa47ab03827103f68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdda4d567eedd44d3088980fa47ab03827103f68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bdda4d567eedd44d3088980fa47ab03827103f68"
      },
      {
        "sha": "8f0d79e3c873d5f4942009b9b5bfe867104ed3e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f0d79e3c873d5f4942009b9b5bfe867104ed3e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f0d79e3c873d5f4942009b9b5bfe867104ed3e6"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fc07aa72c19d96ed0c1ae2fc37acb90317bf5a22",
        "filename": "src/test/scheduler_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b0241fcec3e00d13658090e26cfa1f05133116e/src/test/scheduler_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b0241fcec3e00d13658090e26cfa1f05133116e/src/test/scheduler_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scheduler_tests.cpp?ref=1b0241fcec3e00d13658090e26cfa1f05133116e",
        "patch": "@@ -40,6 +40,7 @@ static void MicroSleep(uint64_t n)\n #endif\n }\n \n+#if 0 /* Disabled for now because there is a race condition issue in this test - see #6540 */\n BOOST_AUTO_TEST_CASE(manythreads)\n {\n     seed_insecure_rand(false);\n@@ -115,5 +116,6 @@ BOOST_AUTO_TEST_CASE(manythreads)\n     }\n     BOOST_CHECK_EQUAL(counterSum, 200);\n }\n+#endif\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "fad4ea836dc7cd1bb13c7394a6fadff419e4b026",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWQ0ZWE4MzZkYzdjZDFiYjEzYzczOTRhNmZhZGZmNDE5ZTRiMDI2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-12-02T11:28:14Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-12-02T11:28:48Z"
      },
      "message": "Merge commit '982709199f1b4e9e35211c419a81938f9f1dd4ed' into bitcoin",
      "tree": {
        "sha": "ff7f84f4820a67a433c25e42b7914f3fced26193",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff7f84f4820a67a433c25e42b7914f3fced26193"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fad4ea836dc7cd1bb13c7394a6fadff419e4b026",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad4ea836dc7cd1bb13c7394a6fadff419e4b026",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fad4ea836dc7cd1bb13c7394a6fadff419e4b026",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad4ea836dc7cd1bb13c7394a6fadff419e4b026/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b0241fcec3e00d13658090e26cfa1f05133116e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b0241fcec3e00d13658090e26cfa1f05133116e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b0241fcec3e00d13658090e26cfa1f05133116e"
      },
      {
        "sha": "982709199f1b4e9e35211c419a81938f9f1dd4ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/982709199f1b4e9e35211c419a81938f9f1dd4ed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/982709199f1b4e9e35211c419a81938f9f1dd4ed"
      }
    ],
    "stats": {
      "total": 288,
      "additions": 205,
      "deletions": 83
    },
    "files": [
      {
        "sha": "19e42f814a5d9e83e8850f07250e8a4cd98ab7bf",
        "filename": "src/univalue/.gitignore",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad4ea836dc7cd1bb13c7394a6fadff419e4b026/src/univalue/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad4ea836dc7cd1bb13c7394a6fadff419e4b026/src/univalue/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/.gitignore?ref=fad4ea836dc7cd1bb13c7394a6fadff419e4b026",
        "patch": "@@ -18,6 +18,7 @@ univalue-config.h*\n test-driver\n libtool\n ltmain.sh\n+test-suite.log\n \n *.a\n *.la"
      },
      {
        "sha": "d318d9cc8f6bff3e8fdf74ee1407d061088d1645",
        "filename": "src/univalue/.travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad4ea836dc7cd1bb13c7394a6fadff419e4b026/src/univalue/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad4ea836dc7cd1bb13c7394a6fadff419e4b026/src/univalue/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/.travis.yml?ref=fad4ea836dc7cd1bb13c7394a6fadff419e4b026",
        "patch": "@@ -36,7 +36,7 @@ script:\n   - ./configure --cache-file=config.cache $UNIVALUE_CONFIG_ALL $UNIVALUE_CONFIG || ( cat config.log && false)\n   - make -s $MAKEJOBS $GOAL || ( echo \"Build failure. Verbose build follows.\" && make $GOAL ; false )\n   - export LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/depends/$HOST/lib\n-  - if [ \"$RUN_TESTS\" = \"true\" ]; then make check; fi\n+  - if [ \"$RUN_TESTS\" = \"true\" ]; then make $MAKEJOBS distcheck; fi\n \n matrix:\n   fast_finish: true"
      },
      {
        "sha": "34fe9e3f13dbcddb9bfa6122519f489362a54169",
        "filename": "src/univalue/Makefile.am",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad4ea836dc7cd1bb13c7394a6fadff419e4b026/src/univalue/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad4ea836dc7cd1bb13c7394a6fadff419e4b026/src/univalue/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/Makefile.am?ref=fad4ea836dc7cd1bb13c7394a6fadff419e4b026",
        "patch": "@@ -70,6 +70,9 @@ TEST_FILES = \\\n \t$(TEST_DATA_DIR)/fail32.json \\\n \t$(TEST_DATA_DIR)/fail33.json \\\n \t$(TEST_DATA_DIR)/fail34.json \\\n+\t$(TEST_DATA_DIR)/fail35.json \\\n+\t$(TEST_DATA_DIR)/fail36.json \\\n+\t$(TEST_DATA_DIR)/fail37.json \\\n \t$(TEST_DATA_DIR)/fail3.json \\\n \t$(TEST_DATA_DIR)/fail4.json \\\n \t$(TEST_DATA_DIR)/fail5.json \\\n@@ -79,6 +82,7 @@ TEST_FILES = \\\n \t$(TEST_DATA_DIR)/fail9.json \\\n \t$(TEST_DATA_DIR)/pass1.json \\\n \t$(TEST_DATA_DIR)/pass2.json \\\n-\t$(TEST_DATA_DIR)/pass3.json\n+\t$(TEST_DATA_DIR)/pass3.json \\\n+\t$(TEST_DATA_DIR)/round1.json\n \n EXTRA_DIST=$(TEST_FILES) $(GEN_SRCS)"
      },
      {
        "sha": "0515b632bdf9a02f5b978ab068744fa46de08f12",
        "filename": "src/univalue/configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad4ea836dc7cd1bb13c7394a6fadff419e4b026/src/univalue/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad4ea836dc7cd1bb13c7394a6fadff419e4b026/src/univalue/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/configure.ac?ref=fad4ea836dc7cd1bb13c7394a6fadff419e4b026",
        "patch": "@@ -14,7 +14,7 @@ m4_define([libunivalue_age], [m4_eval(libunivalue_binary_age - libunivalue_inter\n m4_define([libunivalue_version], [libunivalue_major_version().libunivalue_minor_version().libunivalue_micro_version()libunivalue_extraversion()])\n \n \n-AC_INIT([univalue], [1.0.0],\n+AC_INIT([univalue], [1.0.1],\n         [http://github.com/jgarzik/univalue/])\n \n dnl make the compilation flags quiet unless V=1 is used"
      },
      {
        "sha": "17f361941d9e9eb14b1ba57d01ecfbc1afe9a5e6",
        "filename": "src/univalue/gen/gen.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad4ea836dc7cd1bb13c7394a6fadff419e4b026/src/univalue/gen/gen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad4ea836dc7cd1bb13c7394a6fadff419e4b026/src/univalue/gen/gen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/gen/gen.cpp?ref=fad4ea836dc7cd1bb13c7394a6fadff419e4b026",
        "patch": "@@ -8,25 +8,32 @@\n // $ ./gen > univalue_escapes.h\n //\n \n-#include <ctype.h>\n #include <stdio.h>\n #include <string.h>\n #include \"univalue.h\"\n \n using namespace std;\n \n static bool initEscapes;\n-static const char *escapes[256];\n+static std::string escapes[256];\n \n static void initJsonEscape()\n {\n+    // Escape all lower control characters (some get overridden with smaller sequences below)\n+    for (int ch=0x00; ch<0x20; ++ch) {\n+        char tmpbuf[20];\n+        snprintf(tmpbuf, sizeof(tmpbuf), \"\\\\u%04x\", ch);\n+        escapes[ch] = std::string(tmpbuf);\n+    }\n+\n     escapes[(int)'\"'] = \"\\\\\\\"\";\n     escapes[(int)'\\\\'] = \"\\\\\\\\\";\n     escapes[(int)'\\b'] = \"\\\\b\";\n     escapes[(int)'\\f'] = \"\\\\f\";\n     escapes[(int)'\\n'] = \"\\\\n\";\n     escapes[(int)'\\r'] = \"\\\\r\";\n     escapes[(int)'\\t'] = \"\\\\t\";\n+    escapes[(int)'\\x7f'] = \"\\\\u007f\"; // U+007F DELETE\n \n     initEscapes = true;\n }\n@@ -39,13 +46,13 @@ static void outputEscape()\n \t\t\"static const char *escapes[256] = {\\n\");\n \n \tfor (unsigned int i = 0; i < 256; i++) {\n-\t\tif (!escapes[i]) {\n+\t\tif (escapes[i].empty()) {\n \t\t\tprintf(\"\\tNULL,\\n\");\n \t\t} else {\n \t\t\tprintf(\"\\t\\\"\");\n \n \t\t\tunsigned int si;\n-\t\t\tfor (si = 0; si < strlen(escapes[i]); si++) {\n+\t\t\tfor (si = 0; si < escapes[i].size(); si++) {\n \t\t\t\tchar ch = escapes[i][si];\n \t\t\t\tswitch (ch) {\n \t\t\t\tcase '\"':"
      },
      {
        "sha": "8428b1c683ac38fb592838ef968c2927ca11e32f",
        "filename": "src/univalue/include/univalue.h",
        "status": "modified",
        "additions": 34,
        "deletions": 1,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad4ea836dc7cd1bb13c7394a6fadff419e4b026/src/univalue/include/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad4ea836dc7cd1bb13c7394a6fadff419e4b026/src/univalue/include/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/include/univalue.h?ref=fad4ea836dc7cd1bb13c7394a6fadff419e4b026",
        "patch": "@@ -243,8 +243,41 @@ extern enum jtokentype getJsonToken(std::string& tokenVal,\n                                     unsigned int& consumed, const char *raw);\n extern const char *uvTypeName(UniValue::VType t);\n \n+static inline bool jsonTokenIsValue(enum jtokentype jtt)\n+{\n+    switch (jtt) {\n+    case JTOK_KW_NULL:\n+    case JTOK_KW_TRUE:\n+    case JTOK_KW_FALSE:\n+    case JTOK_NUMBER:\n+    case JTOK_STRING:\n+        return true;\n+\n+    default:\n+        return false;\n+    }\n+\n+    // not reached\n+}\n+\n+static inline bool json_isspace(int ch)\n+{\n+    switch (ch) {\n+    case 0x20:\n+    case 0x09:\n+    case 0x0a:\n+    case 0x0d:\n+        return true;\n+\n+    default:\n+        return false;\n+    }\n+\n+    // not reached\n+}\n+\n extern const UniValue NullUniValue;\n \n const UniValue& find_value( const UniValue& obj, const std::string& name);\n \n-#endif // __UNIVALUE_H__\n\\ No newline at end of file\n+#endif // __UNIVALUE_H__"
      },
      {
        "sha": "0076d6678ec7985cebf9e8457f7a171c307aadad",
        "filename": "src/univalue/lib/univalue.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 13,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad4ea836dc7cd1bb13c7394a6fadff419e4b026/src/univalue/lib/univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad4ea836dc7cd1bb13c7394a6fadff419e4b026/src/univalue/lib/univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue.cpp?ref=fad4ea836dc7cd1bb13c7394a6fadff419e4b026",
        "patch": "@@ -4,7 +4,6 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <stdint.h>\n-#include <ctype.h>\n #include <errno.h>\n #include <iomanip>\n #include <limits>\n@@ -21,7 +20,7 @@ static bool ParsePrechecks(const std::string& str)\n {\n     if (str.empty()) // No empty string allowed\n         return false;\n-    if (str.size() >= 1 && (isspace(str[0]) || isspace(str[str.size()-1]))) // No padding allowed\n+    if (str.size() >= 1 && (json_isspace(str[0]) || json_isspace(str[str.size()-1]))) // No padding allowed\n         return false;\n     if (str.size() != strlen(str.c_str())) // No embedded NUL characters allowed\n         return false;\n@@ -210,7 +209,7 @@ bool UniValue::pushKVs(const UniValue& obj)\n \n     for (unsigned int i = 0; i < obj.keys.size(); i++) {\n         keys.push_back(obj.keys[i]);\n-        values.push_back(obj.values[i]);\n+        values.push_back(obj.values.at(i));\n     }\n \n     return true;\n@@ -234,7 +233,7 @@ bool UniValue::checkObject(const std::map<std::string,UniValue::VType>& t)\n         if (idx < 0)\n             return false;\n \n-        if (values[idx].getType() != it->second)\n+        if (values.at(idx).getType() != it->second)\n             return false;\n     }\n \n@@ -250,7 +249,7 @@ const UniValue& UniValue::operator[](const std::string& key) const\n     if (index < 0)\n         return NullUniValue;\n \n-    return values[index];\n+    return values.at(index);\n }\n \n const UniValue& UniValue::operator[](unsigned int index) const\n@@ -260,7 +259,7 @@ const UniValue& UniValue::operator[](unsigned int index) const\n     if (index >= values.size())\n         return NullUniValue;\n \n-    return values[index];\n+    return values.at(index);\n }\n \n const char *uvTypeName(UniValue::VType t)\n@@ -278,15 +277,11 @@ const char *uvTypeName(UniValue::VType t)\n     return NULL;\n }\n \n-const UniValue& find_value( const UniValue& obj, const std::string& name)\n+const UniValue& find_value(const UniValue& obj, const std::string& name)\n {\n     for (unsigned int i = 0; i < obj.keys.size(); i++)\n-    {\n-        if( obj.keys[i] == name )\n-        {\n-            return obj.values[i];\n-        }\n-    }\n+        if (obj.keys[i] == name)\n+            return obj.values.at(i);\n \n     return NullUniValue;\n }"
      },
      {
        "sha": "74596aab6d2c9948d6bbd8bec91507dac58327d9",
        "filename": "src/univalue/lib/univalue_escapes.h",
        "status": "modified",
        "additions": 28,
        "deletions": 28,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad4ea836dc7cd1bb13c7394a6fadff419e4b026/src/univalue/lib/univalue_escapes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad4ea836dc7cd1bb13c7394a6fadff419e4b026/src/univalue/lib/univalue_escapes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_escapes.h?ref=fad4ea836dc7cd1bb13c7394a6fadff419e4b026",
        "patch": "@@ -2,38 +2,38 @@\n #ifndef BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H\n #define BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H\n static const char *escapes[256] = {\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n+\t\"\\\\u0000\",\n+\t\"\\\\u0001\",\n+\t\"\\\\u0002\",\n+\t\"\\\\u0003\",\n+\t\"\\\\u0004\",\n+\t\"\\\\u0005\",\n+\t\"\\\\u0006\",\n+\t\"\\\\u0007\",\n \t\"\\\\b\",\n \t\"\\\\t\",\n \t\"\\\\n\",\n-\tNULL,\n+\t\"\\\\u000b\",\n \t\"\\\\f\",\n \t\"\\\\r\",\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n+\t\"\\\\u000e\",\n+\t\"\\\\u000f\",\n+\t\"\\\\u0010\",\n+\t\"\\\\u0011\",\n+\t\"\\\\u0012\",\n+\t\"\\\\u0013\",\n+\t\"\\\\u0014\",\n+\t\"\\\\u0015\",\n+\t\"\\\\u0016\",\n+\t\"\\\\u0017\",\n+\t\"\\\\u0018\",\n+\t\"\\\\u0019\",\n+\t\"\\\\u001a\",\n+\t\"\\\\u001b\",\n+\t\"\\\\u001c\",\n+\t\"\\\\u001d\",\n+\t\"\\\\u001e\",\n+\t\"\\\\u001f\",\n \tNULL,\n \tNULL,\n \t\"\\\\\\\"\",\n@@ -129,7 +129,7 @@ static const char *escapes[256] = {\n \tNULL,\n \tNULL,\n \tNULL,\n-\tNULL,\n+\t\"\\\\u007f\",\n \tNULL,\n \tNULL,\n \tNULL,"
      },
      {
        "sha": "c7516b9628169df180e93fa5a942ccbc11b5b706",
        "filename": "src/univalue/lib/univalue_read.cpp",
        "status": "modified",
        "additions": 83,
        "deletions": 24,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad4ea836dc7cd1bb13c7394a6fadff419e4b026/src/univalue/lib/univalue_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad4ea836dc7cd1bb13c7394a6fadff419e4b026/src/univalue/lib/univalue_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_read.cpp?ref=fad4ea836dc7cd1bb13c7394a6fadff419e4b026",
        "patch": "@@ -9,6 +9,11 @@\n \n using namespace std;\n \n+static bool json_isdigit(int ch)\n+{\n+    return ((ch >= '0') && (ch <= '9'));\n+}\n+\n // convert hexadecimal string to unsigned integer\n static const char *hatoui(const char *first, const char *last,\n                           unsigned int& out)\n@@ -17,7 +22,7 @@ static const char *hatoui(const char *first, const char *last,\n     for (; first != last; ++first)\n     {\n         int digit;\n-        if (isdigit(*first))\n+        if (json_isdigit(*first))\n             digit = *first - '0';\n \n         else if (*first >= 'a' && *first <= 'f')\n@@ -44,7 +49,7 @@ enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n \n     const char *rawStart = raw;\n \n-    while ((*raw) && (isspace(*raw)))             // skip whitespace\n+    while ((*raw) && (json_isspace(*raw)))             // skip whitespace\n         raw++;\n \n     switch (*raw) {\n@@ -113,18 +118,18 @@ enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n         const char *first = raw;\n \n         const char *firstDigit = first;\n-        if (!isdigit(*firstDigit))\n+        if (!json_isdigit(*firstDigit))\n             firstDigit++;\n-        if ((*firstDigit == '0') && isdigit(firstDigit[1]))\n+        if ((*firstDigit == '0') && json_isdigit(firstDigit[1]))\n             return JTOK_ERR;\n \n         numStr += *raw;                       // copy first char\n         raw++;\n \n-        if ((*first == '-') && (!isdigit(*raw)))\n+        if ((*first == '-') && (!json_isdigit(*raw)))\n             return JTOK_ERR;\n \n-        while ((*raw) && isdigit(*raw)) {     // copy digits\n+        while ((*raw) && json_isdigit(*raw)) {     // copy digits\n             numStr += *raw;\n             raw++;\n         }\n@@ -134,9 +139,9 @@ enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n             numStr += *raw;                   // copy .\n             raw++;\n \n-            if (!isdigit(*raw))\n+            if (!json_isdigit(*raw))\n                 return JTOK_ERR;\n-            while ((*raw) && isdigit(*raw)) { // copy digits\n+            while ((*raw) && json_isdigit(*raw)) { // copy digits\n                 numStr += *raw;\n                 raw++;\n             }\n@@ -152,9 +157,9 @@ enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n                 raw++;\n             }\n \n-            if (!isdigit(*raw))\n+            if (!json_isdigit(*raw))\n                 return JTOK_ERR;\n-            while ((*raw) && isdigit(*raw)) { // copy digits\n+            while ((*raw) && json_isdigit(*raw)) { // copy digits\n                 numStr += *raw;\n                 raw++;\n             }\n@@ -236,12 +241,23 @@ enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n     }\n }\n \n+enum expect_bits {\n+    EXP_OBJ_NAME = (1U << 0),\n+    EXP_COLON = (1U << 1),\n+    EXP_ARR_VALUE = (1U << 2),\n+    EXP_VALUE = (1U << 3),\n+    EXP_NOT_VALUE = (1U << 4),\n+};\n+\n+#define expect(bit) (expectMask & (EXP_##bit))\n+#define setExpect(bit) (expectMask |= EXP_##bit)\n+#define clearExpect(bit) (expectMask &= ~EXP_##bit)\n+\n bool UniValue::read(const char *raw)\n {\n     clear();\n \n-    bool expectName = false;\n-    bool expectColon = false;\n+    uint32_t expectMask = 0;\n     vector<UniValue*> stack;\n \n     string tokenVal;\n@@ -256,6 +272,41 @@ bool UniValue::read(const char *raw)\n             return false;\n         raw += consumed;\n \n+        bool isValueOpen = jsonTokenIsValue(tok) ||\n+            tok == JTOK_OBJ_OPEN || tok == JTOK_ARR_OPEN;\n+\n+        if (expect(VALUE)) {\n+            if (!isValueOpen)\n+                return false;\n+            clearExpect(VALUE);\n+\n+        } else if (expect(ARR_VALUE)) {\n+            bool isArrValue = isValueOpen || (tok == JTOK_ARR_CLOSE);\n+            if (!isArrValue)\n+                return false;\n+\n+            clearExpect(ARR_VALUE);\n+\n+        } else if (expect(OBJ_NAME)) {\n+            bool isObjName = (tok == JTOK_OBJ_CLOSE || tok == JTOK_STRING);\n+            if (!isObjName)\n+                return false;\n+\n+        } else if (expect(COLON)) {\n+            if (tok != JTOK_COLON)\n+                return false;\n+            clearExpect(COLON);\n+\n+        } else if (!expect(COLON) && (tok == JTOK_COLON)) {\n+            return false;\n+        }\n+\n+        if (expect(NOT_VALUE)) {\n+            if (isValueOpen)\n+                return false;\n+            clearExpect(NOT_VALUE);\n+        }\n+\n         switch (tok) {\n \n         case JTOK_OBJ_OPEN:\n@@ -277,13 +328,15 @@ bool UniValue::read(const char *raw)\n             }\n \n             if (utyp == VOBJ)\n-                expectName = true;\n+                setExpect(OBJ_NAME);\n+            else\n+                setExpect(ARR_VALUE);\n             break;\n             }\n \n         case JTOK_OBJ_CLOSE:\n         case JTOK_ARR_CLOSE: {\n-            if (!stack.size() || expectColon || (last_tok == JTOK_COMMA))\n+            if (!stack.size() || (last_tok == JTOK_COMMA))\n                 return false;\n \n             VType utyp = (tok == JTOK_OBJ_CLOSE ? VOBJ : VARR);\n@@ -292,37 +345,40 @@ bool UniValue::read(const char *raw)\n                 return false;\n \n             stack.pop_back();\n-            expectName = false;\n+            clearExpect(OBJ_NAME);\n+            setExpect(NOT_VALUE);\n             break;\n             }\n \n         case JTOK_COLON: {\n-            if (!stack.size() || expectName || !expectColon)\n+            if (!stack.size())\n                 return false;\n \n             UniValue *top = stack.back();\n             if (top->getType() != VOBJ)\n                 return false;\n \n-            expectColon = false;\n+            setExpect(VALUE);\n             break;\n             }\n \n         case JTOK_COMMA: {\n-            if (!stack.size() || expectName || expectColon ||\n+            if (!stack.size() ||\n                 (last_tok == JTOK_COMMA) || (last_tok == JTOK_ARR_OPEN))\n                 return false;\n \n             UniValue *top = stack.back();\n             if (top->getType() == VOBJ)\n-                expectName = true;\n+                setExpect(OBJ_NAME);\n+            else\n+                setExpect(ARR_VALUE);\n             break;\n             }\n \n         case JTOK_KW_NULL:\n         case JTOK_KW_TRUE:\n         case JTOK_KW_FALSE: {\n-            if (!stack.size() || expectName || expectColon)\n+            if (!stack.size())\n                 return false;\n \n             UniValue tmpVal;\n@@ -342,17 +398,19 @@ bool UniValue::read(const char *raw)\n             UniValue *top = stack.back();\n             top->values.push_back(tmpVal);\n \n+            setExpect(NOT_VALUE);\n             break;\n             }\n \n         case JTOK_NUMBER: {\n-            if (!stack.size() || expectName || expectColon)\n+            if (!stack.size())\n                 return false;\n \n             UniValue tmpVal(VNUM, tokenVal);\n             UniValue *top = stack.back();\n             top->values.push_back(tmpVal);\n \n+            setExpect(NOT_VALUE);\n             break;\n             }\n \n@@ -362,15 +420,16 @@ bool UniValue::read(const char *raw)\n \n             UniValue *top = stack.back();\n \n-            if (expectName) {\n+            if (expect(OBJ_NAME)) {\n                 top->keys.push_back(tokenVal);\n-                expectName = false;\n-                expectColon = true;\n+                clearExpect(OBJ_NAME);\n+                setExpect(COLON);\n             } else {\n                 UniValue tmpVal(VSTR, tokenVal);\n                 top->values.push_back(tmpVal);\n             }\n \n+            setExpect(NOT_VALUE);\n             break;\n             }\n "
      },
      {
        "sha": "ceb4cc9166cd223c30465a30f17b1dc2f5a7874f",
        "filename": "src/univalue/lib/univalue_write.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad4ea836dc7cd1bb13c7394a6fadff419e4b026/src/univalue/lib/univalue_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad4ea836dc7cd1bb13c7394a6fadff419e4b026/src/univalue/lib/univalue_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_write.cpp?ref=fad4ea836dc7cd1bb13c7394a6fadff419e4b026",
        "patch": "@@ -2,7 +2,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <ctype.h>\n #include <iomanip>\n #include <sstream>\n #include <stdio.h>\n@@ -25,10 +24,10 @@ static string json_escape(const string& inS)\n         if (escStr)\n             outS += escStr;\n \n-        else if (isprint(ch))\n+        else if (ch < 0x80)\n             outS += ch;\n \n-        else {\n+        else { // TODO handle UTF-8 properly\n             char tmpesc[16];\n             sprintf(tmpesc, \"\\\\u%04x\", ch);\n             outS += tmpesc;\n@@ -113,7 +112,7 @@ void UniValue::writeObject(unsigned int prettyIndent, unsigned int indentLevel,\n         s += \"\\\"\" + json_escape(keys[i]) + \"\\\":\";\n         if (prettyIndent)\n             s += \" \";\n-        s += values[i].write(prettyIndent, indentLevel + 1);\n+        s += values.at(i).write(prettyIndent, indentLevel + 1);\n         if (i != (values.size() - 1))\n             s += \",\";\n         if (prettyIndent)"
      },
      {
        "sha": "3d9347fe7e52b40c85c8386fa159a213898ef361",
        "filename": "src/univalue/test/.gitignore",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad4ea836dc7cd1bb13c7394a6fadff419e4b026/src/univalue/test/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad4ea836dc7cd1bb13c7394a6fadff419e4b026/src/univalue/test/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/.gitignore?ref=fad4ea836dc7cd1bb13c7394a6fadff419e4b026",
        "patch": "@@ -1 +1,4 @@\n unitester\n+\n+*.trs\n+*.log"
      },
      {
        "sha": "de30ca5c47ab8894646dbcb852775c3fae987e2a",
        "filename": "src/univalue/test/fail35.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad4ea836dc7cd1bb13c7394a6fadff419e4b026/src/univalue/test/fail35.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad4ea836dc7cd1bb13c7394a6fadff419e4b026/src/univalue/test/fail35.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail35.json?ref=fad4ea836dc7cd1bb13c7394a6fadff419e4b026",
        "patch": "@@ -0,0 +1 @@\n+[ true true true [] [] [] ]"
      },
      {
        "sha": "f82eb8e1f041d42c9ac9b8dcf1fce5068d6a11fd",
        "filename": "src/univalue/test/fail36.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad4ea836dc7cd1bb13c7394a6fadff419e4b026/src/univalue/test/fail36.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad4ea836dc7cd1bb13c7394a6fadff419e4b026/src/univalue/test/fail36.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail36.json?ref=fad4ea836dc7cd1bb13c7394a6fadff419e4b026",
        "patch": "@@ -0,0 +1 @@\n+{\"a\":}"
      },
      {
        "sha": "3294dc3a4252934952e89cde69ab6ef17d8d167f",
        "filename": "src/univalue/test/fail37.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad4ea836dc7cd1bb13c7394a6fadff419e4b026/src/univalue/test/fail37.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad4ea836dc7cd1bb13c7394a6fadff419e4b026/src/univalue/test/fail37.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail37.json?ref=fad4ea836dc7cd1bb13c7394a6fadff419e4b026",
        "patch": "@@ -0,0 +1 @@\n+{\"a\":1 \"b\":2}"
      },
      {
        "sha": "a711e7308bf76e6c707f4f1769b9e8a989261929",
        "filename": "src/univalue/test/round1.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad4ea836dc7cd1bb13c7394a6fadff419e4b026/src/univalue/test/round1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad4ea836dc7cd1bb13c7394a6fadff419e4b026/src/univalue/test/round1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/round1.json?ref=fad4ea836dc7cd1bb13c7394a6fadff419e4b026",
        "patch": "@@ -0,0 +1 @@\n+[\"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\u007f\"]"
      },
      {
        "sha": "5a052fe92c85bed15383867f1f777bacddfdb29b",
        "filename": "src/univalue/test/unitester.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 6,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad4ea836dc7cd1bb13c7394a6fadff419e4b026/src/univalue/test/unitester.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad4ea836dc7cd1bb13c7394a6fadff419e4b026/src/univalue/test/unitester.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/unitester.cpp?ref=fad4ea836dc7cd1bb13c7394a6fadff419e4b026",
        "patch": "@@ -19,24 +19,37 @@\n \n using namespace std;\n string srcdir(JSON_TEST_SRC);\n+static bool test_failed = false;\n \n-static void runtest(string filename, const string& jdata)\n+#define d_assert(expr) { if (!(expr)) { test_failed = true; fprintf(stderr, \"%s failed\\n\", filename.c_str()); } }\n+\n+static std::string rtrim(std::string s)\n {\n-        fprintf(stderr, \"test %s\\n\", filename.c_str());\n+    s.erase(s.find_last_not_of(\" \\n\\r\\t\")+1);\n+    return s;\n+}\n \n+static void runtest(string filename, const string& jdata)\n+{\n         string prefix = filename.substr(0, 4);\n \n-        bool wantPass = (prefix == \"pass\");\n+        bool wantPass = (prefix == \"pass\") || (prefix == \"roun\");\n         bool wantFail = (prefix == \"fail\");\n+        bool wantRoundTrip = (prefix == \"roun\");\n         assert(wantPass || wantFail);\n \n         UniValue val;\n         bool testResult = val.read(jdata);\n \n         if (wantPass) {\n-            assert(testResult == true);\n+            d_assert(testResult == true);\n         } else {\n-            assert(testResult == false);\n+            d_assert(testResult == false);\n+        }\n+\n+        if (wantRoundTrip) {\n+            std::string odata = val.write(0, 0);\n+            assert(odata == rtrim(jdata));\n         }\n }\n \n@@ -92,6 +105,9 @@ static const char *filenames[] = {\n         \"fail32.json\",\n         \"fail33.json\",\n         \"fail34.json\",\n+        \"fail35.json\",\n+        \"fail36.json\",\n+        \"fail37.json\",\n         \"fail3.json\",\n         \"fail4.json\",                // extra comma\n         \"fail5.json\",\n@@ -102,6 +118,7 @@ static const char *filenames[] = {\n         \"pass1.json\",\n         \"pass2.json\",\n         \"pass3.json\",\n+        \"round1.json\",              // round-trip test\n };\n \n int main (int argc, char *argv[])\n@@ -110,6 +127,6 @@ int main (int argc, char *argv[])\n         runtest_file(filenames[fidx]);\n     }\n \n-    return 0;\n+    return test_failed ? 1 : 0;\n }\n "
      }
    ]
  }
]