DrahtBot,2021-11-21 10:27:18,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23432](https://github.com/bitcoin/bitcoin/pull/23432) (BIP324: CPubKey encode/decode to elligator-squared by dhruv)\n* [",https://github.com/bitcoin/bitcoin/pull/23561#issuecomment-974790491,974790491,
naumenkogs,2021-11-22 07:14:31,"Concept ACK.\nMoving forward with BIP324 is a good idea, and this code seems to not have any negative/unexpected side-effects.",https://github.com/bitcoin/bitcoin/pull/23561#issuecomment-975194275,975194275,
dhruv,2021-11-25 20:25:45,Addressed review comments from @sipa. Ready for further review.,https://github.com/bitcoin/bitcoin/pull/23561#issuecomment-979455585,979455585,
sipa,2021-11-23 20:58:40,The case of secp256k1_ecdh returning 0 corresponds to invalid input. That won't happen here; I think you can assert instead and avoid the `std::optional` in the return type.,https://github.com/bitcoin/bitcoin/pull/23561#discussion_r755498657,755498657,src/key.cpp
sipa,2021-11-23 21:01:18,"You could do a much stronger test: take two private keys as input fuzz data, compute the corresponding public keys, and compute the ecdh secrets from (sec1,pub2) and (sec2,pub1), and check that they match.\n\nIt's cryptographic data (hashes and EC operations), so this is very unlikely to actually uncover any bugs unless they're very apparent, but this way the fuzz test actually verifies the full",https://github.com/bitcoin/bitcoin/pull/23561#discussion_r755500261,755500261,src/test/fuzz/key.cpp
sipa,2021-11-23 21:02:47,Nit: pass Spans by value.,https://github.com/bitcoin/bitcoin/pull/23561#discussion_r755501124,755501124,src/util/bip324.h
sipa,2021-11-23 21:10:08,"I'm not sure this belongs in util, it seems pretty specific to Bitcoin.",https://github.com/bitcoin/bitcoin/pull/23561#discussion_r755505318,755505318,src/util/bip324.cpp
sipa,2021-11-23 21:19:41,"Not sure if a class for this is desirable in the first place. These keys shouldn't be long-lived in any case (they're only used to initialize the stream ciphers, and then destroyed). That can just as well be done with a simple function call?",https://github.com/bitcoin/bitcoin/pull/23561#discussion_r755510650,755510650,src/util/bip324.h
dhruv,2021-11-25 20:24:19,Done - still needed a boolean return value due to the other failure case above.,https://github.com/bitcoin/bitcoin/pull/23561#discussion_r757114972,757114972,src/key.cpp
dhruv,2021-11-25 20:24:23,Done!,https://github.com/bitcoin/bitcoin/pull/23561#discussion_r757114984,757114984,src/test/fuzz/key.cpp
dhruv,2021-11-25 20:24:26,Done.,https://github.com/bitcoin/bitcoin/pull/23561#discussion_r757115000,757115000,src/util/bip324.h
dhruv,2021-11-25 20:24:30,"I moved this into `net.{h|cpp}` as that's where it will be used. I didn't particularly want to increase the length of those files, so please let me know if the right thing to do is to have it in `src/bip324.{h|cpp}`",https://github.com/bitcoin/bitcoin/pull/23561#discussion_r757115010,757115010,src/util/bip324.cpp
dhruv,2021-11-25 20:24:44,Done.,https://github.com/bitcoin/bitcoin/pull/23561#discussion_r757115092,757115092,src/util/bip324.h
