[
  {
    "sha": "fa423938d5f856d42612b36bea3a250b9cb3990c",
    "node_id": "C_kwDOABII59oAKGZhNDIzOTM4ZDVmODU2ZDQyNjEyYjM2YmVhM2EyNTBiOWNiMzk5MGM",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-29T15:22:26Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-29T15:19:30Z"
      },
      "message": "refactor tests to fix ubsan suppressions",
      "tree": {
        "sha": "a8495981b02671e80a29320c856751c7e9894b75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a8495981b02671e80a29320c856751c7e9894b75"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa423938d5f856d42612b36bea3a250b9cb3990c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgAGwv/cFggFIArnP/y+4CwtPzFyDdpGDMRh3owbUNVv6qKdAuKdzHfU9dF/+xs\nhfGXfTglx5w2NkjhTXn5ZZSdymgsTRBd0luZgENgJGZHPvGfduNKOK3j1iAjqGcT\nyEyAI4fQEfq6HG0my/csBKEgQ0iKGFcWZEDjgtWir2nw4WFM2ez/iFy4LJvtGEPv\nT53Uu5iolHjiZNC+vgJEJzRdNpouMAXO6s7jlc0AGrDC/yRGssAjvUohkf4Gvvpi\n0FDygU24LLjrqDEHNJojncOdFtvtexkWh1C2en22mvRxZttKNNCr/dAvAykSRmvc\nacsKuh+9XAqnSfD/7sAyqap2cfUcGy0Kc93niy03J5vNV/WxXWXmcfo0GehHZ+rK\nascOWZ7pwu/matid9UjK6pQO2OaaTQZE0w52HZl6NyPWIBtw0tRLWyuAYZW/ollq\nZJh3R4IPwVbriuYRn3NI77zLAu/wIBE9oPxbdp0EynXMYUV68lJlT7f053FQURus\nPBDfkTYL\n=CH5V\n-----END PGP SIGNATURE-----",
        "payload": "tree a8495981b02671e80a29320c856751c7e9894b75\nparent b4f647fa36a3336774ab616048bc6709bdc59fa1\nauthor MarcoFalke <falke.marco@gmail.com> 1638199346 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1638199170 +0100\n\nrefactor tests to fix ubsan suppressions\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa423938d5f856d42612b36bea3a250b9cb3990c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa423938d5f856d42612b36bea3a250b9cb3990c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa423938d5f856d42612b36bea3a250b9cb3990c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b4f647fa36a3336774ab616048bc6709bdc59fa1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4f647fa36a3336774ab616048bc6709bdc59fa1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b4f647fa36a3336774ab616048bc6709bdc59fa1"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 25,
      "deletions": 34
    },
    "files": [
      {
        "sha": "c26978adb4206722a6bb553a0503e4978c93b1a0",
        "filename": "src/test/arith_uint256_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa423938d5f856d42612b36bea3a250b9cb3990c/src/test/arith_uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa423938d5f856d42612b36bea3a250b9cb3990c/src/test/arith_uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/arith_uint256_tests.cpp?ref=fa423938d5f856d42612b36bea3a250b9cb3990c",
        "patch": "@@ -129,11 +129,11 @@ static void shiftArrayRight(unsigned char* to, const unsigned char* from, unsign\n     {\n         unsigned int F = (T+bitsToShift/8);\n         if (F < arrayLength)\n-            to[T]  = from[F] >> (bitsToShift%8);\n+            to[T] = uint8_t(from[F] >> (bitsToShift % 8));\n         else\n             to[T] = 0;\n         if (F + 1 < arrayLength)\n-            to[T] |= from[(F+1)] << (8-bitsToShift%8);\n+            to[T] |= uint8_t(from[(F + 1)] << (8 - bitsToShift % 8));\n     }\n }\n \n@@ -144,9 +144,9 @@ static void shiftArrayLeft(unsigned char* to, const unsigned char* from, unsigne\n         if (T >= bitsToShift/8)\n         {\n             unsigned int F = T-bitsToShift/8;\n-            to[T]  = from[F] << (bitsToShift%8);\n+            to[T] = uint8_t(from[F] << (bitsToShift % 8));\n             if (T >= bitsToShift/8+1)\n-                to[T] |= from[F-1] >> (8-bitsToShift%8);\n+                to[T] |= uint8_t(from[F - 1] >> (8 - bitsToShift % 8));\n         }\n         else {\n             to[T] = 0;\n@@ -202,7 +202,7 @@ BOOST_AUTO_TEST_CASE( unaryOperators ) // !    ~    -\n     BOOST_CHECK(~ZeroL == MaxL);\n \n     unsigned char TmpArray[32];\n-    for (unsigned int i = 0; i < 32; ++i) { TmpArray[i] = ~R1Array[i]; }\n+    for (unsigned int i = 0; i < 32; ++i) { TmpArray[i] = uint8_t(~R1Array[i]); }\n     BOOST_CHECK(arith_uint256V(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (~R1L));\n \n     BOOST_CHECK(-ZeroL == ZeroL);\n@@ -215,7 +215,7 @@ BOOST_AUTO_TEST_CASE( unaryOperators ) // !    ~    -\n // Check if doing _A_ _OP_ _B_ results in the same as applying _OP_ onto each\n // element of Aarray and Barray, and then converting the result into an arith_uint256.\n #define CHECKBITWISEOPERATOR(_A_,_B_,_OP_)                              \\\n-    for (unsigned int i = 0; i < 32; ++i) { TmpArray[i] = _A_##Array[i] _OP_ _B_##Array[i]; } \\\n+    for (unsigned int i = 0; i < 32; ++i) { TmpArray[i] = uint8_t(_A_##Array[i] _OP_ _B_##Array[i]); } \\\n     BOOST_CHECK(arith_uint256V(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (_A_##L _OP_ _B_##L));\n \n #define CHECKASSIGNMENTOPERATOR(_A_,_B_,_OP_)                           \\"
      },
      {
        "sha": "596c6c2c32d74dd0cb76e9b54924ae2eb4da9b63",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa423938d5f856d42612b36bea3a250b9cb3990c/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa423938d5f856d42612b36bea3a250b9cb3990c/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=fa423938d5f856d42612b36bea3a250b9cb3990c",
        "patch": "@@ -393,11 +393,11 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n             // Update the expected result to know about the new output coins\n             assert(tx.vout.size() == 1);\n             const COutPoint outpoint(tx.GetHash(), 0);\n-            result[outpoint] = Coin(tx.vout[0], height, CTransaction(tx).IsCoinBase());\n+            result[outpoint] = Coin{tx.vout[0], int(height), CTransaction(tx).IsCoinBase()};\n \n             // Call UpdateCoins on the top cache\n             CTxUndo undo;\n-            UpdateCoins(CTransaction(tx), *(stack.back()), undo, height);\n+            UpdateCoins(CTransaction(tx), *(stack.back()), undo, int(height));\n \n             // Update the utxo set for future spends\n             utxoset.insert(outpoint);"
      },
      {
        "sha": "3c047452007b422c3de03a21e126bda0b827abd3",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa423938d5f856d42612b36bea3a250b9cb3990c/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa423938d5f856d42612b36bea3a250b9cb3990c/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=fa423938d5f856d42612b36bea3a250b9cb3990c",
        "patch": "@@ -73,7 +73,7 @@ BOOST_AUTO_TEST_CASE(CheckProofOfWork_test_overflow_target)\n {\n     const auto consensus = CreateChainParams(*m_node.args, CBaseChainParams::MAIN)->GetConsensus();\n     uint256 hash;\n-    unsigned int nBits = ~0x00800000;\n+    unsigned int nBits{unsigned(~0x00800000)};\n     hash.SetHex(\"0x1\");\n     BOOST_CHECK(!CheckProofOfWork(hash, nBits, consensus));\n }"
      },
      {
        "sha": "89814748fef51348c0e161fef656c532bbf7a249",
        "filename": "src/test/prevector_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa423938d5f856d42612b36bea3a250b9cb3990c/src/test/prevector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa423938d5f856d42612b36bea3a250b9cb3990c/src/test/prevector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/prevector_tests.cpp?ref=fa423938d5f856d42612b36bea3a250b9cb3990c",
        "patch": "@@ -220,7 +220,7 @@ BOOST_AUTO_TEST_CASE(PrevectorTestInt)\n         prevector_tester<8, int> test;\n         for (int i = 0; i < 2048; i++) {\n             if (InsecureRandBits(2) == 0) {\n-                test.insert(InsecureRandRange(test.size() + 1), InsecureRand32());\n+                test.insert(InsecureRandRange(test.size() + 1), int(InsecureRand32()));\n             }\n             if (test.size() > 0 && InsecureRandBits(2) == 1) {\n                 test.erase(InsecureRandRange(test.size()));\n@@ -230,15 +230,15 @@ BOOST_AUTO_TEST_CASE(PrevectorTestInt)\n                 test.resize(new_size);\n             }\n             if (InsecureRandBits(3) == 3) {\n-                test.insert(InsecureRandRange(test.size() + 1), 1 + InsecureRandBool(), InsecureRand32());\n+                test.insert(InsecureRandRange(test.size() + 1), 1 + InsecureRandBool(), int(InsecureRand32()));\n             }\n             if (InsecureRandBits(3) == 4) {\n                 int del = std::min<int>(test.size(), 1 + (InsecureRandBool()));\n                 int beg = InsecureRandRange(test.size() + 1 - del);\n                 test.erase(beg, beg + del);\n             }\n             if (InsecureRandBits(4) == 5) {\n-                test.push_back(InsecureRand32());\n+                test.push_back(int(InsecureRand32()));\n             }\n             if (test.size() > 0 && InsecureRandBits(4) == 6) {\n                 test.pop_back();\n@@ -247,7 +247,7 @@ BOOST_AUTO_TEST_CASE(PrevectorTestInt)\n                 int values[4];\n                 int num = 1 + (InsecureRandBits(2));\n                 for (int k = 0; k < num; k++) {\n-                    values[k] = InsecureRand32();\n+                    values[k] = int(InsecureRand32());\n                 }\n                 test.insert_range(InsecureRandRange(test.size() + 1), values, values + num);\n             }\n@@ -263,13 +263,13 @@ BOOST_AUTO_TEST_CASE(PrevectorTestInt)\n                 test.shrink_to_fit();\n             }\n             if (test.size() > 0) {\n-                test.update(InsecureRandRange(test.size()), InsecureRand32());\n+                test.update(InsecureRandRange(test.size()), int(InsecureRand32()));\n             }\n             if (InsecureRandBits(10) == 11) {\n                 test.clear();\n             }\n             if (InsecureRandBits(9) == 12) {\n-                test.assign(InsecureRandBits(5), InsecureRand32());\n+                test.assign(InsecureRandBits(5), int(InsecureRand32()));\n             }\n             if (InsecureRandBits(3) == 3) {\n                 test.swap();\n@@ -283,8 +283,8 @@ BOOST_AUTO_TEST_CASE(PrevectorTestInt)\n             if (InsecureRandBits(5) == 19) {\n                 unsigned int num = 1 + (InsecureRandBits(4));\n                 std::vector<int> values(num);\n-                for (auto &v : values) {\n-                    v = InsecureRand32();\n+                for (int& v : values) {\n+                    v = int(InsecureRand32());\n                 }\n                 test.resize_uninitialized(values);\n             }"
      },
      {
        "sha": "e1cf4af62f8af5f9e1dc69db06b1b23aba66f5cd",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa423938d5f856d42612b36bea3a250b9cb3990c/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa423938d5f856d42612b36bea3a250b9cb3990c/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=fa423938d5f856d42612b36bea3a250b9cb3990c",
        "patch": "@@ -91,8 +91,9 @@ void static RandomScript(CScript &script) {\n         script << oplist[InsecureRandRange(std::size(oplist))];\n }\n \n-void static RandomTransaction(CMutableTransaction &tx, bool fSingle) {\n-    tx.nVersion = InsecureRand32();\n+void static RandomTransaction(CMutableTransaction& tx, bool fSingle)\n+{\n+    tx.nVersion = int(InsecureRand32());\n     tx.vin.clear();\n     tx.vout.clear();\n     tx.nLockTime = (InsecureRandBool()) ? InsecureRand32() : 0;\n@@ -126,7 +127,7 @@ BOOST_AUTO_TEST_CASE(sighash_test)\n     int nRandomTests = 50000;\n     #endif\n     for (int i=0; i<nRandomTests; i++) {\n-        int nHashType = InsecureRand32();\n+        int nHashType{int(InsecureRand32())};\n         CMutableTransaction txTo;\n         RandomTransaction(txTo, (nHashType & 0x1f) == SIGHASH_SINGLE);\n         CScript scriptCode;"
      },
      {
        "sha": "6dadf0917677d5ce4be290f9a1a879ffc9d46061",
        "filename": "src/test/skiplist_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa423938d5f856d42612b36bea3a250b9cb3990c/src/test/skiplist_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa423938d5f856d42612b36bea3a250b9cb3990c/src/test/skiplist_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/skiplist_tests.cpp?ref=fa423938d5f856d42612b36bea3a250b9cb3990c",
        "patch": "@@ -114,8 +114,8 @@ BOOST_AUTO_TEST_CASE(findearliestatleast_test)\n         } else {\n             // randomly choose something in the range [MTP, MTP*2]\n             int64_t medianTimePast = vBlocksMain[i].GetMedianTimePast();\n-            int r = InsecureRandRange(medianTimePast);\n-            vBlocksMain[i].nTime = r + medianTimePast;\n+            int r{int(InsecureRandRange(medianTimePast))};\n+            vBlocksMain[i].nTime = uint32_t(r + medianTimePast);\n             vBlocksMain[i].nTimeMax = std::max(vBlocksMain[i].nTime, vBlocksMain[i-1].nTimeMax);\n         }\n     }"
      },
      {
        "sha": "00bbe61a799f9b5a77f97c6168222b97994d7256",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa423938d5f856d42612b36bea3a250b9cb3990c/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa423938d5f856d42612b36bea3a250b9cb3990c/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=fa423938d5f856d42612b36bea3a250b9cb3990c",
        "patch": "@@ -220,7 +220,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n                     fValid = false;\n                     break;\n                 }\n-                COutPoint outpoint(uint256S(vinput[0].get_str()), vinput[1].get_int());\n+                COutPoint outpoint{uint256S(vinput[0].get_str()), uint32_t(vinput[1].get_int())};\n                 mapprevOutScriptPubKeys[outpoint] = ParseScript(vinput[2].get_str());\n                 if (vinput.size() >= 4)\n                 {\n@@ -308,7 +308,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n                     fValid = false;\n                     break;\n                 }\n-                COutPoint outpoint(uint256S(vinput[0].get_str()), vinput[1].get_int());\n+                COutPoint outpoint{uint256S(vinput[0].get_str()), uint32_t(vinput[1].get_int())};\n                 mapprevOutScriptPubKeys[outpoint] = ParseScript(vinput[2].get_str());\n                 if (vinput.size() >= 4)\n                 {"
      },
      {
        "sha": "50ed1f6acfd82e0a3806a23e846df157014f8cba",
        "filename": "test/sanitizer_suppressions/ubsan",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa423938d5f856d42612b36bea3a250b9cb3990c/test/sanitizer_suppressions/ubsan",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa423938d5f856d42612b36bea3a250b9cb3990c/test/sanitizer_suppressions/ubsan",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/sanitizer_suppressions/ubsan?ref=fa423938d5f856d42612b36bea3a250b9cb3990c",
        "patch": "@@ -67,21 +67,13 @@ implicit-integer-sign-change:prevector.h\n implicit-integer-sign-change:script/bitcoinconsensus.cpp\n implicit-integer-sign-change:script/interpreter.cpp\n implicit-integer-sign-change:serialize.h\n-implicit-integer-sign-change:test/arith_uint256_tests.cpp\n-implicit-integer-sign-change:test/coins_tests.cpp\n-implicit-integer-sign-change:test/pow_tests.cpp\n-implicit-integer-sign-change:test/prevector_tests.cpp\n-implicit-integer-sign-change:test/sighash_tests.cpp\n-implicit-integer-sign-change:test/skiplist_tests.cpp\n implicit-integer-sign-change:test/streams_tests.cpp\n-implicit-integer-sign-change:test/transaction_tests.cpp\n implicit-integer-sign-change:txmempool.cpp\n implicit-integer-sign-change:util/strencodings.cpp\n implicit-integer-sign-change:util/strencodings.h\n implicit-integer-sign-change:validation.cpp\n implicit-integer-sign-change:zmq/zmqpublishnotifier.cpp\n implicit-signed-integer-truncation,implicit-integer-sign-change:chain.h\n-implicit-signed-integer-truncation,implicit-integer-sign-change:test/skiplist_tests.cpp\n implicit-signed-integer-truncation:addrman.cpp\n implicit-signed-integer-truncation:addrman.h\n implicit-signed-integer-truncation:chain.h\n@@ -92,8 +84,6 @@ implicit-signed-integer-truncation:node/miner.cpp\n implicit-signed-integer-truncation:net.cpp\n implicit-signed-integer-truncation:net_processing.cpp\n implicit-signed-integer-truncation:streams.h\n-implicit-signed-integer-truncation:test/arith_uint256_tests.cpp\n-implicit-signed-integer-truncation:test/skiplist_tests.cpp\n implicit-signed-integer-truncation:torcontrol.cpp\n implicit-unsigned-integer-truncation:*/include/c++/\n implicit-unsigned-integer-truncation:crypto/"
      }
    ]
  }
]