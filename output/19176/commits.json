[
  {
    "sha": "77b79fa6ef60d363ca720cef5473f1a2c45099a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3N2I3OWZhNmVmNjBkMzYzY2E3MjBjZWY1NDczZjFhMmM0NTA5OWEz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2020-06-05T12:26:16Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2020-06-09T13:39:44Z"
      },
      "message": "refactor: Error message bilingual_str consistency\n\n- Move the decision whether to translate an error message to where it is\n  defined. This simplifies call sites: no more `InitError(Untranslated(...))`.\n\n- Make all functions in `util/error.h` consistently return a\n  `bilingual_str`. We've decided to use this as error message type so\n  let's roll with it.\n\nThis has no functional changes: no messages are changed, no new\ntranslation messages are defined.",
      "tree": {
        "sha": "e3cc8ae26b3505c07c87a5060973deaed5e71aef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3cc8ae26b3505c07c87a5060973deaed5e71aef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77b79fa6ef60d363ca720cef5473f1a2c45099a3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77b79fa6ef60d363ca720cef5473f1a2c45099a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/77b79fa6ef60d363ca720cef5473f1a2c45099a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77b79fa6ef60d363ca720cef5473f1a2c45099a3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a79bca2f1fb25f433d6e100a31a3acfde2656ce1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a79bca2f1fb25f433d6e100a31a3acfde2656ce1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a79bca2f1fb25f433d6e100a31a3acfde2656ce1"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 47,
      "deletions": 41
    },
    "files": [
      {
        "sha": "fd7c8d0f8010389ca641d3bd0e233d3af88a095e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77b79fa6ef60d363ca720cef5473f1a2c45099a3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77b79fa6ef60d363ca720cef5473f1a2c45099a3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=77b79fa6ef60d363ca720cef5473f1a2c45099a3",
        "patch": "@@ -1465,7 +1465,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node)\n         if (Lookup(strAddr, addrLocal, GetListenPort(), fNameLookup) && addrLocal.IsValid())\n             AddLocal(addrLocal, LOCAL_MANUAL);\n         else\n-            return InitError(Untranslated(ResolveErrMsg(\"externalip\", strAddr)));\n+            return InitError(ResolveErrMsg(\"externalip\", strAddr));\n     }\n \n     // Read asmap file if configured\n@@ -1904,21 +1904,21 @@ bool AppInitMain(const util::Ref& context, NodeContext& node)\n     for (const std::string& strBind : gArgs.GetArgs(\"-bind\")) {\n         CService addrBind;\n         if (!Lookup(strBind, addrBind, GetListenPort(), false)) {\n-            return InitError(Untranslated(ResolveErrMsg(\"bind\", strBind)));\n+            return InitError(ResolveErrMsg(\"bind\", strBind));\n         }\n         connOptions.vBinds.push_back(addrBind);\n     }\n     for (const std::string& strBind : gArgs.GetArgs(\"-whitebind\")) {\n         NetWhitebindPermissions whitebind;\n-        std::string error;\n-        if (!NetWhitebindPermissions::TryParse(strBind, whitebind, error)) return InitError(Untranslated(error));\n+        bilingual_str error;\n+        if (!NetWhitebindPermissions::TryParse(strBind, whitebind, error)) return InitError(error);\n         connOptions.vWhiteBinds.push_back(whitebind);\n     }\n \n     for (const auto& net : gArgs.GetArgs(\"-whitelist\")) {\n         NetWhitelistPermissions subnet;\n-        std::string error;\n-        if (!NetWhitelistPermissions::TryParse(net, subnet, error)) return InitError(Untranslated(error));\n+        bilingual_str error;\n+        if (!NetWhitelistPermissions::TryParse(net, subnet, error)) return InitError(error);\n         connOptions.vWhitelistedRange.push_back(subnet);\n     }\n "
      },
      {
        "sha": "1871cd6d36aef6dfbbc11a93d72552bddd98e7fc",
        "filename": "src/net_permissions.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77b79fa6ef60d363ca720cef5473f1a2c45099a3/src/net_permissions.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77b79fa6ef60d363ca720cef5473f1a2c45099a3/src/net_permissions.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_permissions.cpp?ref=77b79fa6ef60d363ca720cef5473f1a2c45099a3",
        "patch": "@@ -17,7 +17,7 @@ const std::vector<std::string> NET_PERMISSIONS_DOC{\n };\n \n // The parse the following format \"perm1,perm2@xxxxxx\"\n-bool TryParsePermissionFlags(const std::string str, NetPermissionFlags& output, size_t& readen, std::string& error)\n+bool TryParsePermissionFlags(const std::string str, NetPermissionFlags& output, size_t& readen, bilingual_str& error)\n {\n     NetPermissionFlags flags = PF_NONE;\n     const auto atSeparator = str.find('@');\n@@ -48,15 +48,15 @@ bool TryParsePermissionFlags(const std::string str, NetPermissionFlags& output,\n             else if (permission == \"relay\") NetPermissions::AddFlag(flags, PF_RELAY);\n             else if (permission.length() == 0); // Allow empty entries\n             else {\n-                error = strprintf(_(\"Invalid P2P permission: '%s'\").translated, permission);\n+                error = strprintf(_(\"Invalid P2P permission: '%s'\"), permission);\n                 return false;\n             }\n         }\n         readen++;\n     }\n \n     output = flags;\n-    error = \"\";\n+    error = Untranslated(\"\");\n     return true;\n }\n \n@@ -71,7 +71,7 @@ std::vector<std::string> NetPermissions::ToStrings(NetPermissionFlags flags)\n     return strings;\n }\n \n-bool NetWhitebindPermissions::TryParse(const std::string str, NetWhitebindPermissions& output, std::string& error)\n+bool NetWhitebindPermissions::TryParse(const std::string str, NetWhitebindPermissions& output, bilingual_str& error)\n {\n     NetPermissionFlags flags;\n     size_t offset;\n@@ -84,17 +84,17 @@ bool NetWhitebindPermissions::TryParse(const std::string str, NetWhitebindPermis\n         return false;\n     }\n     if (addrBind.GetPort() == 0) {\n-        error = strprintf(_(\"Need to specify a port with -whitebind: '%s'\").translated, strBind);\n+        error = strprintf(_(\"Need to specify a port with -whitebind: '%s'\"), strBind);\n         return false;\n     }\n \n     output.m_flags = flags;\n     output.m_service = addrBind;\n-    error = \"\";\n+    error = Untranslated(\"\");\n     return true;\n }\n \n-bool NetWhitelistPermissions::TryParse(const std::string str, NetWhitelistPermissions& output, std::string& error)\n+bool NetWhitelistPermissions::TryParse(const std::string str, NetWhitelistPermissions& output, bilingual_str& error)\n {\n     NetPermissionFlags flags;\n     size_t offset;\n@@ -104,12 +104,12 @@ bool NetWhitelistPermissions::TryParse(const std::string str, NetWhitelistPermis\n     CSubNet subnet;\n     LookupSubNet(net, subnet);\n     if (!subnet.IsValid()) {\n-        error = strprintf(_(\"Invalid netmask specified in -whitelist: '%s'\").translated, net);\n+        error = strprintf(_(\"Invalid netmask specified in -whitelist: '%s'\"), net);\n         return false;\n     }\n \n     output.m_flags = flags;\n     output.m_subnet = subnet;\n-    error = \"\";\n+    error = Untranslated(\"\");\n     return true;\n }"
      },
      {
        "sha": "e004067e75eda8086fb73bbd928911211741c7cb",
        "filename": "src/net_permissions.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77b79fa6ef60d363ca720cef5473f1a2c45099a3/src/net_permissions.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77b79fa6ef60d363ca720cef5473f1a2c45099a3/src/net_permissions.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_permissions.h?ref=77b79fa6ef60d363ca720cef5473f1a2c45099a3",
        "patch": "@@ -10,6 +10,8 @@\n #ifndef BITCOIN_NET_PERMISSIONS_H\n #define BITCOIN_NET_PERMISSIONS_H\n \n+struct bilingual_str;\n+\n extern const std::vector<std::string> NET_PERMISSIONS_DOC;\n \n enum NetPermissionFlags\n@@ -54,14 +56,14 @@ class NetPermissions\n class NetWhitebindPermissions : public NetPermissions\n {\n public:\n-    static bool TryParse(const std::string str, NetWhitebindPermissions& output, std::string& error);\n+    static bool TryParse(const std::string str, NetWhitebindPermissions& output, bilingual_str& error);\n     CService m_service;\n };\n \n class NetWhitelistPermissions : public NetPermissions\n {\n public:\n-    static bool TryParse(const std::string str, NetWhitelistPermissions& output, std::string& error);\n+    static bool TryParse(const std::string str, NetWhitelistPermissions& output, bilingual_str& error);\n     CSubNet m_subnet;\n };\n "
      },
      {
        "sha": "e7afef4cac09b5d801046477d6fc0eff96aea2ef",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77b79fa6ef60d363ca720cef5473f1a2c45099a3/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77b79fa6ef60d363ca720cef5473f1a2c45099a3/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=77b79fa6ef60d363ca720cef5473f1a2c45099a3",
        "patch": "@@ -10,6 +10,7 @@\n #include <tinyformat.h>\n #include <util/strencodings.h>\n #include <util/string.h>\n+#include <util/translation.h>\n \n #include <tuple>\n \n@@ -285,7 +286,7 @@ UniValue JSONRPCTransactionError(TransactionError terr, const std::string& err_s\n     if (err_string.length() > 0) {\n         return JSONRPCError(RPCErrorFromTransactionError(terr), err_string);\n     } else {\n-        return JSONRPCError(RPCErrorFromTransactionError(terr), TransactionErrorString(terr));\n+        return JSONRPCError(RPCErrorFromTransactionError(terr), TransactionErrorString(terr).original);\n     }\n }\n "
      },
      {
        "sha": "82cbc00a3a05137cb4819e59b7f060caee5a9fef",
        "filename": "src/test/fuzz/kitchen_sink.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77b79fa6ef60d363ca720cef5473f1a2c45099a3/src/test/fuzz/kitchen_sink.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77b79fa6ef60d363ca720cef5473f1a2c45099a3/src/test/fuzz/kitchen_sink.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/kitchen_sink.cpp?ref=77b79fa6ef60d363ca720cef5473f1a2c45099a3",
        "patch": "@@ -7,6 +7,7 @@\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n #include <util/error.h>\n+#include <util/translation.h>\n \n #include <cstdint>\n #include <vector>"
      },
      {
        "sha": "ae531f4462de502bd0701bc93079d3060d9a2934",
        "filename": "src/test/fuzz/net_permissions.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77b79fa6ef60d363ca720cef5473f1a2c45099a3/src/test/fuzz/net_permissions.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77b79fa6ef60d363ca720cef5473f1a2c45099a3/src/test/fuzz/net_permissions.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/net_permissions.cpp?ref=77b79fa6ef60d363ca720cef5473f1a2c45099a3",
        "patch": "@@ -6,6 +6,7 @@\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n+#include <util/translation.h>\n \n #include <cassert>\n #include <cstdint>\n@@ -29,7 +30,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n                                                                                          static_cast<NetPermissionFlags>(fuzzed_data_provider.ConsumeIntegral<uint32_t>());\n \n     NetWhitebindPermissions net_whitebind_permissions;\n-    std::string error_net_whitebind_permissions;\n+    bilingual_str error_net_whitebind_permissions;\n     if (NetWhitebindPermissions::TryParse(s, net_whitebind_permissions, error_net_whitebind_permissions)) {\n         (void)NetPermissions::ToStrings(net_whitebind_permissions.m_flags);\n         (void)NetPermissions::AddFlag(net_whitebind_permissions.m_flags, net_permission_flags);\n@@ -39,7 +40,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     }\n \n     NetWhitelistPermissions net_whitelist_permissions;\n-    std::string error_net_whitelist_permissions;\n+    bilingual_str error_net_whitelist_permissions;\n     if (NetWhitelistPermissions::TryParse(s, net_whitelist_permissions, error_net_whitelist_permissions)) {\n         (void)NetPermissions::ToStrings(net_whitelist_permissions.m_flags);\n         (void)NetPermissions::AddFlag(net_whitelist_permissions.m_flags, net_permission_flags);"
      },
      {
        "sha": "d0ec401f9d16d9a25aba745bfb38a5cff5406f4a",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77b79fa6ef60d363ca720cef5473f1a2c45099a3/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77b79fa6ef60d363ca720cef5473f1a2c45099a3/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=77b79fa6ef60d363ca720cef5473f1a2c45099a3",
        "patch": "@@ -6,6 +6,7 @@\n #include <netbase.h>\n #include <test/util/setup_common.h>\n #include <util/strencodings.h>\n+#include <util/translation.h>\n \n #include <string>\n \n@@ -325,15 +326,15 @@ BOOST_AUTO_TEST_CASE(netbase_parsenetwork)\n \n BOOST_AUTO_TEST_CASE(netpermissions_test)\n {\n-    std::string error;\n+    bilingual_str error;\n     NetWhitebindPermissions whitebindPermissions;\n     NetWhitelistPermissions whitelistPermissions;\n \n     // Detect invalid white bind\n     BOOST_CHECK(!NetWhitebindPermissions::TryParse(\"\", whitebindPermissions, error));\n-    BOOST_CHECK(error.find(\"Cannot resolve -whitebind address\") != std::string::npos);\n+    BOOST_CHECK(error.original.find(\"Cannot resolve -whitebind address\") != std::string::npos);\n     BOOST_CHECK(!NetWhitebindPermissions::TryParse(\"127.0.0.1\", whitebindPermissions, error));\n-    BOOST_CHECK(error.find(\"Need to specify a port with -whitebind\") != std::string::npos);\n+    BOOST_CHECK(error.original.find(\"Need to specify a port with -whitebind\") != std::string::npos);\n     BOOST_CHECK(!NetWhitebindPermissions::TryParse(\"\", whitebindPermissions, error));\n \n     // If no permission flags, assume backward compatibility\n@@ -377,11 +378,11 @@ BOOST_AUTO_TEST_CASE(netpermissions_test)\n \n     // Detect invalid flag\n     BOOST_CHECK(!NetWhitebindPermissions::TryParse(\"bloom,forcerelay,oopsie@1.2.3.4:32\", whitebindPermissions, error));\n-    BOOST_CHECK(error.find(\"Invalid P2P permission\") != std::string::npos);\n+    BOOST_CHECK(error.original.find(\"Invalid P2P permission\") != std::string::npos);\n \n     // Check whitelist error\n     BOOST_CHECK(!NetWhitelistPermissions::TryParse(\"bloom,forcerelay,noban@1.2.3.4:32\", whitelistPermissions, error));\n-    BOOST_CHECK(error.find(\"Invalid netmask specified in -whitelist\") != std::string::npos);\n+    BOOST_CHECK(error.original.find(\"Invalid netmask specified in -whitelist\") != std::string::npos);\n \n     // Happy path for whitelist parsing\n     BOOST_CHECK(NetWhitelistPermissions::TryParse(\"noban@1.2.3.4\", whitelistPermissions, error));"
      },
      {
        "sha": "c4d9ffd0373c8f2bb9c62d14bd9ad067f137b197",
        "filename": "src/util/error.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77b79fa6ef60d363ca720cef5473f1a2c45099a3/src/util/error.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77b79fa6ef60d363ca720cef5473f1a2c45099a3/src/util/error.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/error.cpp?ref=77b79fa6ef60d363ca720cef5473f1a2c45099a3",
        "patch": "@@ -8,37 +8,37 @@\n #include <util/system.h>\n #include <util/translation.h>\n \n-std::string TransactionErrorString(const TransactionError err)\n+bilingual_str TransactionErrorString(const TransactionError err)\n {\n     switch (err) {\n         case TransactionError::OK:\n-            return \"No error\";\n+            return Untranslated(\"No error\");\n         case TransactionError::MISSING_INPUTS:\n-            return \"Missing inputs\";\n+            return Untranslated(\"Missing inputs\");\n         case TransactionError::ALREADY_IN_CHAIN:\n-            return \"Transaction already in block chain\";\n+            return Untranslated(\"Transaction already in block chain\");\n         case TransactionError::P2P_DISABLED:\n-            return \"Peer-to-peer functionality missing or disabled\";\n+            return Untranslated(\"Peer-to-peer functionality missing or disabled\");\n         case TransactionError::MEMPOOL_REJECTED:\n-            return \"Transaction rejected by AcceptToMemoryPool\";\n+            return Untranslated(\"Transaction rejected by AcceptToMemoryPool\");\n         case TransactionError::MEMPOOL_ERROR:\n-            return \"AcceptToMemoryPool failed\";\n+            return Untranslated(\"AcceptToMemoryPool failed\");\n         case TransactionError::INVALID_PSBT:\n-            return \"PSBT is not sane\";\n+            return Untranslated(\"PSBT is not sane\");\n         case TransactionError::PSBT_MISMATCH:\n-            return \"PSBTs not compatible (different transactions)\";\n+            return Untranslated(\"PSBTs not compatible (different transactions)\");\n         case TransactionError::SIGHASH_MISMATCH:\n-            return \"Specified sighash value does not match existing value\";\n+            return Untranslated(\"Specified sighash value does not match existing value\");\n         case TransactionError::MAX_FEE_EXCEEDED:\n-            return \"Fee exceeds maximum configured by -maxtxfee\";\n+            return Untranslated(\"Fee exceeds maximum configured by -maxtxfee\");\n         // no default case, so the compiler can warn about missing cases\n     }\n     assert(false);\n }\n \n-std::string ResolveErrMsg(const std::string& optname, const std::string& strBind)\n+bilingual_str ResolveErrMsg(const std::string& optname, const std::string& strBind)\n {\n-    return strprintf(_(\"Cannot resolve -%s address: '%s'\").translated, optname, strBind);\n+    return strprintf(_(\"Cannot resolve -%s address: '%s'\"), optname, strBind);\n }\n \n bilingual_str AmountHighWarn(const std::string& optname)"
      },
      {
        "sha": "b9830c9eeae2515061ac2ee5c228ea0eab315e5e",
        "filename": "src/util/error.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77b79fa6ef60d363ca720cef5473f1a2c45099a3/src/util/error.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77b79fa6ef60d363ca720cef5473f1a2c45099a3/src/util/error.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/error.h?ref=77b79fa6ef60d363ca720cef5473f1a2c45099a3",
        "patch": "@@ -32,9 +32,9 @@ enum class TransactionError {\n     MAX_FEE_EXCEEDED,\n };\n \n-std::string TransactionErrorString(const TransactionError error);\n+bilingual_str TransactionErrorString(const TransactionError error);\n \n-std::string ResolveErrMsg(const std::string& optname, const std::string& strBind);\n+bilingual_str ResolveErrMsg(const std::string& optname, const std::string& strBind);\n \n bilingual_str AmountHighWarn(const std::string& optname);\n "
      },
      {
        "sha": "a59aa8b9801126dd92143ceac828322cd228d351",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77b79fa6ef60d363ca720cef5473f1a2c45099a3/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77b79fa6ef60d363ca720cef5473f1a2c45099a3/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=77b79fa6ef60d363ca720cef5473f1a2c45099a3",
        "patch": "@@ -2997,7 +2997,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n     }\n \n     if (nFeeRet > m_default_max_tx_fee) {\n-        error = Untranslated(TransactionErrorString(TransactionError::MAX_FEE_EXCEEDED));\n+        error = TransactionErrorString(TransactionError::MAX_FEE_EXCEEDED);\n         return false;\n     }\n "
      }
    ]
  },
  {
    "sha": "425e7cb8cf6140e03802a96d2be9a8b4aa2e244a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MjVlN2NiOGNmNjE0MGUwMzgwMmE5NmQyYmU5YThiNGFhMmUyNDRh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2020-06-05T12:28:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2020-06-09T13:39:44Z"
      },
      "message": "refactor: Put`TryParsePermissionFlags` in anonymous namespace\n\nIt's only used inside `net_permissions.cpp`.",
      "tree": {
        "sha": "5cfb394b51cdf2c33c1a1e1397bb1ca881409c81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5cfb394b51cdf2c33c1a1e1397bb1ca881409c81"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/425e7cb8cf6140e03802a96d2be9a8b4aa2e244a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/425e7cb8cf6140e03802a96d2be9a8b4aa2e244a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/425e7cb8cf6140e03802a96d2be9a8b4aa2e244a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/425e7cb8cf6140e03802a96d2be9a8b4aa2e244a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "77b79fa6ef60d363ca720cef5473f1a2c45099a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77b79fa6ef60d363ca720cef5473f1a2c45099a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/77b79fa6ef60d363ca720cef5473f1a2c45099a3"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "da091498560c1faf82e3abcc9726a6e04089c1e6",
        "filename": "src/net_permissions.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/425e7cb8cf6140e03802a96d2be9a8b4aa2e244a/src/net_permissions.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/425e7cb8cf6140e03802a96d2be9a8b4aa2e244a/src/net_permissions.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_permissions.cpp?ref=425e7cb8cf6140e03802a96d2be9a8b4aa2e244a",
        "patch": "@@ -16,6 +16,8 @@ const std::vector<std::string> NET_PERMISSIONS_DOC{\n     \"mempool (allow requesting BIP35 mempool contents)\",\n };\n \n+namespace {\n+\n // The parse the following format \"perm1,perm2@xxxxxx\"\n bool TryParsePermissionFlags(const std::string str, NetPermissionFlags& output, size_t& readen, bilingual_str& error)\n {\n@@ -60,6 +62,8 @@ bool TryParsePermissionFlags(const std::string str, NetPermissionFlags& output,\n     return true;\n }\n \n+}\n+\n std::vector<std::string> NetPermissions::ToStrings(NetPermissionFlags flags)\n {\n     std::vector<std::string> strings;"
      }
    ]
  },
  {
    "sha": "6fe989054f0ad9308e8a25f7123d9e5dd67f1164",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZmU5ODkwNTRmMGFkOTMwOGU4YTI1ZjcxMjNkOWU1ZGQ2N2YxMTY0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2020-06-05T12:42:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2020-06-09T13:40:02Z"
      },
      "message": "refactor: Change Node::initError to take bilingual_str\n\nMake it consistent with `Chain::initError`.",
      "tree": {
        "sha": "4c6df59c0556bdd3ae642586572ae5a99cccaf02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c6df59c0556bdd3ae642586572ae5a99cccaf02"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6fe989054f0ad9308e8a25f7123d9e5dd67f1164",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fe989054f0ad9308e8a25f7123d9e5dd67f1164",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6fe989054f0ad9308e8a25f7123d9e5dd67f1164",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fe989054f0ad9308e8a25f7123d9e5dd67f1164/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "425e7cb8cf6140e03802a96d2be9a8b4aa2e244a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/425e7cb8cf6140e03802a96d2be9a8b4aa2e244a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/425e7cb8cf6140e03802a96d2be9a8b4aa2e244a"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "7995d8d7b0b1322f54fb545961bc61e776444649",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fe989054f0ad9308e8a25f7123d9e5dd67f1164/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fe989054f0ad9308e8a25f7123d9e5dd67f1164/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=6fe989054f0ad9308e8a25f7123d9e5dd67f1164",
        "patch": "@@ -56,7 +56,7 @@ namespace {\n class NodeImpl : public Node\n {\n public:\n-    void initError(const std::string& message) override { InitError(Untranslated(message)); }\n+    void initError(const bilingual_str& message) override { InitError(message); }\n     bool parseParameters(int argc, const char* const argv[], std::string& error) override\n     {\n         return gArgs.ParseParameters(argc, argv, error);"
      },
      {
        "sha": "fad84789cc8e1ecf48493416c8d3e71e91b0c401",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fe989054f0ad9308e8a25f7123d9e5dd67f1164/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fe989054f0ad9308e8a25f7123d9e5dd67f1164/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=6fe989054f0ad9308e8a25f7123d9e5dd67f1164",
        "patch": "@@ -45,7 +45,7 @@ class Node\n     virtual ~Node() {}\n \n     //! Send init error.\n-    virtual void initError(const std::string& message) = 0;\n+    virtual void initError(const bilingual_str& message) = 0;\n \n     //! Set command line arguments.\n     virtual bool parseParameters(int argc, const char* const argv[], std::string& error) = 0;"
      },
      {
        "sha": "2cfc0f78362a6f57129b2844f7980a0d19d4566f",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fe989054f0ad9308e8a25f7123d9e5dd67f1164/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fe989054f0ad9308e8a25f7123d9e5dd67f1164/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=6fe989054f0ad9308e8a25f7123d9e5dd67f1164",
        "patch": "@@ -457,7 +457,7 @@ int GuiMain(int argc, char* argv[])\n     SetupUIArgs();\n     std::string error;\n     if (!node->parseParameters(argc, argv, error)) {\n-        node->initError(strprintf(\"Error parsing command line arguments: %s\\n\", error));\n+        node->initError(strprintf(Untranslated(\"Error parsing command line arguments: %s\\n\"), error));\n         // Create a message box, because the gui has neither been created nor has subscribed to core signals\n         QMessageBox::critical(nullptr, PACKAGE_NAME,\n             // message can not be translated because translations have not been initialized\n@@ -498,13 +498,13 @@ int GuiMain(int argc, char* argv[])\n     /// 6. Determine availability of data directory and parse bitcoin.conf\n     /// - Do not call GetDataDir(true) before this step finishes\n     if (!CheckDataDirOption()) {\n-        node->initError(strprintf(\"Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\")));\n+        node->initError(strprintf(Untranslated(\"Specified data directory \\\"%s\\\" does not exist.\\n\"), gArgs.GetArg(\"-datadir\", \"\")));\n         QMessageBox::critical(nullptr, PACKAGE_NAME,\n             QObject::tr(\"Error: Specified data directory \\\"%1\\\" does not exist.\").arg(QString::fromStdString(gArgs.GetArg(\"-datadir\", \"\"))));\n         return EXIT_FAILURE;\n     }\n     if (!node->readConfigFiles(error)) {\n-        node->initError(strprintf(\"Error reading configuration file: %s\\n\", error));\n+        node->initError(strprintf(Untranslated(\"Error reading configuration file: %s\\n\"), error));\n         QMessageBox::critical(nullptr, PACKAGE_NAME,\n             QObject::tr(\"Error: Cannot parse configuration file: %1.\").arg(QString::fromStdString(error)));\n         return EXIT_FAILURE;\n@@ -520,7 +520,7 @@ int GuiMain(int argc, char* argv[])\n     try {\n         node->selectParams(gArgs.GetChainName());\n     } catch(std::exception &e) {\n-        node->initError(strprintf(\"%s\\n\", e.what()));\n+        node->initError(Untranslated(strprintf(\"%s\\n\", e.what())));\n         QMessageBox::critical(nullptr, PACKAGE_NAME, QObject::tr(\"Error: %1\").arg(e.what()));\n         return EXIT_FAILURE;\n     }"
      }
    ]
  }
]