[
  {
    "sha": "faa8f68943615785a2855676cf96e0e96f3cc6bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWE4ZjY4OTQzNjE1Nzg1YTI4NTU2NzZjZjk2ZTBlOTZmM2NjNmJk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-04T10:20:02Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-05T09:10:50Z"
      },
      "message": "Replace boost::variant with std::variant",
      "tree": {
        "sha": "104ab0c22fc8fcbd9fe7a128a6d69bca45ff3221",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/104ab0c22fc8fcbd9fe7a128a6d69bca45ff3221"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faa8f68943615785a2855676cf96e0e96f3cc6bd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjB3Qv/XPSY7j0ALtpb5VXUSg+2F4C7zUXh8bZy0jyEmBuLaTBgObjuldUUB40W\nz2qcUz8TZucGdNNadAA6cRITjVQ/JaIV4noxknFWqM19FgEJLLdyJMSNgewPX2y6\n8n4t+o2y1K40Fy4LxlTeh763miyE4Nt5GFZwRkj6w7mmOiu6X7RGTXtq/t0L44PG\nIe//P0EaEl/NlzwIXc07bKk7VM73J8Izgmq25iGGShisbLNTP1fC5s7WlLs+pI6i\nxPyN8ZcpF5SC/qKBfHfVpoCcxrAGnle+otU8wd6mDLVfg9+CxtuIbPdoESgpZkxH\nvqEwcoiMCp0Bxn6qXwT6JLYlMV66GtjYrJKnQ8g39fpeQkU+1ykpaG3SDPh5MkBb\nQ0NIEPf0pUlFbslbMcMYh/0odd6BbHsm0RMwuo09VvVPLNs3YxwhP5zxSmzF6wfd\nEz7VQp8s5tPIxOAot7KHRMzV3UolIvDbCCST6hdW7ltJd92Xsz8Q/pjoFQiOkMkK\n4qH0PVB5\n=dU6h\n-----END PGP SIGNATURE-----",
        "payload": "tree 104ab0c22fc8fcbd9fe7a128a6d69bca45ff3221\nparent bc8ada1c15345d14e324aee68488c8aa8a75cae0\nauthor MarcoFalke <falke.marco@gmail.com> 1609755602 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1609837850 +0100\n\nReplace boost::variant with std::variant\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa8f68943615785a2855676cf96e0e96f3cc6bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faa8f68943615785a2855676cf96e0e96f3cc6bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa8f68943615785a2855676cf96e0e96f3cc6bd/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc8ada1c15345d14e324aee68488c8aa8a75cae0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc8ada1c15345d14e324aee68488c8aa8a75cae0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc8ada1c15345d14e324aee68488c8aa8a75cae0"
      }
    ],
    "stats": {
      "total": 122,
      "additions": 56,
      "deletions": 66
    },
    "files": [
      {
        "sha": "a270ede86430f91de577d049a9b079da22fe8159",
        "filename": "src/key_io.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa8f68943615785a2855676cf96e0e96f3cc6bd/src/key_io.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa8f68943615785a2855676cf96e0e96f3cc6bd/src/key_io.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key_io.cpp?ref=faa8f68943615785a2855676cf96e0e96f3cc6bd",
        "patch": "@@ -8,16 +8,12 @@\n #include <bech32.h>\n #include <util/strencodings.h>\n \n-#include <boost/variant/apply_visitor.hpp>\n-#include <boost/variant/static_visitor.hpp>\n-\n+#include <algorithm>\n #include <assert.h>\n #include <string.h>\n-#include <algorithm>\n \n-namespace\n-{\n-class DestinationEncoder : public boost::static_visitor<std::string>\n+namespace {\n+class DestinationEncoder\n {\n private:\n     const CChainParams& m_params;\n@@ -209,7 +205,7 @@ std::string EncodeExtKey(const CExtKey& key)\n \n std::string EncodeDestination(const CTxDestination& dest)\n {\n-    return boost::apply_visitor(DestinationEncoder(Params()), dest);\n+    return std::visit(DestinationEncoder(Params()), dest);\n }\n \n CTxDestination DecodeDestination(const std::string& str)"
      },
      {
        "sha": "9485dc63deffb83459c4cbe61637456b916aee31",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa8f68943615785a2855676cf96e0e96f3cc6bd/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa8f68943615785a2855676cf96e0e96f3cc6bd/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=faa8f68943615785a2855676cf96e0e96f3cc6bd",
        "patch": "@@ -11,7 +11,6 @@\n #include <wallet/wallet.h>\n \n #include <algorithm>\n-#include <typeinfo>\n \n #include <QFont>\n #include <QDebug>\n@@ -82,8 +81,9 @@ class AddressTablePriv\n         {\n             for (const auto& address : wallet.getAddresses())\n             {\n-                if (pk_hash_only && address.dest.type() != typeid(PKHash))\n+                if (pk_hash_only && !std::holds_alternative<PKHash>(address.dest)) {\n                     continue;\n+                }\n                 AddressTableEntry::Type addressType = translateTransactionType(\n                         QString::fromStdString(address.purpose), address.is_mine);\n                 cachedAddressTable.append(AddressTableEntry(addressType,\n@@ -257,7 +257,7 @@ bool AddressTableModel::setData(const QModelIndex &index, const QVariant &value,\n         } else if(index.column() == Address) {\n             CTxDestination newAddress = DecodeDestination(value.toString().toStdString());\n             // Refuse to set invalid address, set error status and return false\n-            if(boost::get<CNoDestination>(&newAddress))\n+            if(std::get_if<CNoDestination>(&newAddress))\n             {\n                 editStatus = INVALID_ADDRESS;\n                 return false;"
      },
      {
        "sha": "08abef78664262f45c7a677707fe1a38a73f1eed",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa8f68943615785a2855676cf96e0e96f3cc6bd/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa8f68943615785a2855676cf96e0e96f3cc6bd/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=faa8f68943615785a2855676cf96e0e96f3cc6bd",
        "patch": "@@ -455,7 +455,7 @@ void CoinControlDialog::updateLabels(CCoinControl& m_coin_control, WalletModel *\n         else if(ExtractDestination(out.txout.scriptPubKey, address))\n         {\n             CPubKey pubkey;\n-            PKHash *pkhash = boost::get<PKHash>(&address);\n+            PKHash* pkhash = std::get_if<PKHash>(&address);\n             if (pkhash && model->wallet().getPubKey(out.txout.scriptPubKey, ToKeyID(*pkhash), pubkey))\n             {\n                 nBytesInputs += (pubkey.IsCompressed() ? 148 : 180);"
      },
      {
        "sha": "6c110f0688f6b74e3a0f76dbd73d62dfde171d7c",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa8f68943615785a2855676cf96e0e96f3cc6bd/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa8f68943615785a2855676cf96e0e96f3cc6bd/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=faa8f68943615785a2855676cf96e0e96f3cc6bd",
        "patch": "@@ -120,7 +120,7 @@ void SignVerifyMessageDialog::on_signMessageButton_SM_clicked()\n         ui->statusLabel_SM->setText(tr(\"The entered address is invalid.\") + QString(\" \") + tr(\"Please check the address and try again.\"));\n         return;\n     }\n-    const PKHash* pkhash = boost::get<PKHash>(&destination);\n+    const PKHash* pkhash = std::get_if<PKHash>(&destination);\n     if (!pkhash) {\n         ui->addressIn_SM->setValid(false);\n         ui->statusLabel_SM->setStyleSheet(\"QLabel { color: red; }\");"
      },
      {
        "sha": "77fec93f0ffcfbc0509ef5d0936468621366f380",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa8f68943615785a2855676cf96e0e96f3cc6bd/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa8f68943615785a2855676cf96e0e96f3cc6bd/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=faa8f68943615785a2855676cf96e0e96f3cc6bd",
        "patch": "@@ -123,7 +123,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const interface\n                     continue;\n                 }\n \n-                if (!boost::get<CNoDestination>(&wtx.txout_address[nOut]))\n+                if (!std::get_if<CNoDestination>(&wtx.txout_address[nOut]))\n                 {\n                     // Sent to Bitcoin Address\n                     sub.type = TransactionRecord::SendToAddress;"
      },
      {
        "sha": "31072114da250fe0178c4a062105c2a75e94e860",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa8f68943615785a2855676cf96e0e96f3cc6bd/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa8f68943615785a2855676cf96e0e96f3cc6bd/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=faa8f68943615785a2855676cf96e0e96f3cc6bd",
        "patch": "@@ -209,7 +209,7 @@ CTxDestination AddAndGetMultisigDestination(const int required, const std::vecto\n     return dest;\n }\n \n-class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+class DescribeAddressVisitor\n {\n public:\n     explicit DescribeAddressVisitor() {}\n@@ -267,7 +267,7 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n \n UniValue DescribeAddress(const CTxDestination& dest)\n {\n-    return boost::apply_visitor(DescribeAddressVisitor(), dest);\n+    return std::visit(DescribeAddressVisitor(), dest);\n }\n \n unsigned int ParseConfirmTarget(const UniValue& value, unsigned int max_target)"
      },
      {
        "sha": "9e4b8a9dd6309e6b2ebe54f50a49f740c4da2026",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa8f68943615785a2855676cf96e0e96f3cc6bd/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa8f68943615785a2855676cf96e0e96f3cc6bd/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=faa8f68943615785a2855676cf96e0e96f3cc6bd",
        "patch": "@@ -565,7 +565,7 @@ class AddressDescriptor final : public DescriptorImpl\n \n     Optional<OutputType> GetOutputType() const override\n     {\n-        switch (m_destination.which()) {\n+        switch (m_destination.index()) {\n             case 1 /* PKHash */:\n             case 2 /* ScriptHash */: return OutputType::LEGACY;\n             case 3 /* WitnessV0ScriptHash */:\n@@ -593,7 +593,7 @@ class RawDescriptor final : public DescriptorImpl\n     {\n         CTxDestination dest;\n         ExtractDestination(m_script, dest);\n-        switch (dest.which()) {\n+        switch (dest.index()) {\n             case 1 /* PKHash */:\n             case 2 /* ScriptHash */: return OutputType::LEGACY;\n             case 3 /* WitnessV0ScriptHash */:"
      },
      {
        "sha": "9781ec32af2e3b2e17522e1a147dacd26ec1af77",
        "filename": "src/script/signingprovider.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa8f68943615785a2855676cf96e0e96f3cc6bd/src/script/signingprovider.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa8f68943615785a2855676cf96e0e96f3cc6bd/src/script/signingprovider.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/signingprovider.cpp?ref=faa8f68943615785a2855676cf96e0e96f3cc6bd",
        "patch": "@@ -179,18 +179,18 @@ CKeyID GetKeyForDestination(const SigningProvider& store, const CTxDestination&\n {\n     // Only supports destinations which map to single public keys, i.e. P2PKH,\n     // P2WPKH, and P2SH-P2WPKH.\n-    if (auto id = boost::get<PKHash>(&dest)) {\n+    if (auto id = std::get_if<PKHash>(&dest)) {\n         return ToKeyID(*id);\n     }\n-    if (auto witness_id = boost::get<WitnessV0KeyHash>(&dest)) {\n+    if (auto witness_id = std::get_if<WitnessV0KeyHash>(&dest)) {\n         return ToKeyID(*witness_id);\n     }\n-    if (auto script_hash = boost::get<ScriptHash>(&dest)) {\n+    if (auto script_hash = std::get_if<ScriptHash>(&dest)) {\n         CScript script;\n         CScriptID script_id(*script_hash);\n         CTxDestination inner_dest;\n         if (store.GetCScript(script_id, script) && ExtractDestination(script, inner_dest)) {\n-            if (auto inner_witness_id = boost::get<WitnessV0KeyHash>(&inner_dest)) {\n+            if (auto inner_witness_id = std::get_if<WitnessV0KeyHash>(&inner_dest)) {\n                 return ToKeyID(*inner_witness_id);\n             }\n         }"
      },
      {
        "sha": "7967c01858597f348bb390a6a40adf55f3042caf",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa8f68943615785a2855676cf96e0e96f3cc6bd/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa8f68943615785a2855676cf96e0e96f3cc6bd/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=faa8f68943615785a2855676cf96e0e96f3cc6bd",
        "patch": "@@ -261,9 +261,8 @@ bool ExtractDestinations(const CScript& scriptPubKey, TxoutType& typeRet, std::v\n     return true;\n }\n \n-namespace\n-{\n-class CScriptVisitor : public boost::static_visitor<CScript>\n+namespace {\n+class CScriptVisitor\n {\n public:\n     CScript operator()(const CNoDestination& dest) const\n@@ -300,7 +299,7 @@ class CScriptVisitor : public boost::static_visitor<CScript>\n \n CScript GetScriptForDestination(const CTxDestination& dest)\n {\n-    return boost::apply_visitor(CScriptVisitor(), dest);\n+    return std::visit(CScriptVisitor(), dest);\n }\n \n CScript GetScriptForRawPubKey(const CPubKey& pubKey)\n@@ -320,5 +319,5 @@ CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys)\n }\n \n bool IsValidDestination(const CTxDestination& dest) {\n-    return dest.which() != 0;\n+    return dest.index() != 0;\n }"
      },
      {
        "sha": "d5d87392add322f88b7c6175c50e9db4658d1cd0",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa8f68943615785a2855676cf96e0e96f3cc6bd/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa8f68943615785a2855676cf96e0e96f3cc6bd/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=faa8f68943615785a2855676cf96e0e96f3cc6bd",
        "patch": "@@ -9,10 +9,8 @@\n #include <script/interpreter.h>\n #include <uint256.h>\n \n-#include <boost/variant.hpp>\n-\n #include <string>\n-\n+#include <variant>\n \n static const bool DEFAULT_ACCEPT_DATACARRIER = true;\n \n@@ -211,7 +209,7 @@ struct WitnessUnknown\n  *    (taproot outputs do not require their own type as long as no wallet support exists)\n  *  A CTxDestination is the internal data type encoded in a bitcoin address\n  */\n-typedef boost::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown> CTxDestination;\n+using CTxDestination = std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown>;\n \n /** Check whether a CTxDestination is a CNoDestination. */\n bool IsValidDestination(const CTxDestination& dest);"
      },
      {
        "sha": "366385b619ef8391eb6539bc62e6bef608e82f48",
        "filename": "src/test/script_standard_tests.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa8f68943615785a2855676cf96e0e96f3cc6bd/src/test/script_standard_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa8f68943615785a2855676cf96e0e96f3cc6bd/src/test/script_standard_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_standard_tests.cpp?ref=faa8f68943615785a2855676cf96e0e96f3cc6bd",
        "patch": "@@ -183,23 +183,23 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestination)\n     s.clear();\n     s << ToByteVector(pubkey) << OP_CHECKSIG;\n     BOOST_CHECK(ExtractDestination(s, address));\n-    BOOST_CHECK(boost::get<PKHash>(&address) &&\n-                *boost::get<PKHash>(&address) == PKHash(pubkey));\n+    BOOST_CHECK(std::get_if<PKHash>(&address) &&\n+                *std::get_if<PKHash>(&address) == PKHash(pubkey));\n \n     // TxoutType::PUBKEYHASH\n     s.clear();\n     s << OP_DUP << OP_HASH160 << ToByteVector(pubkey.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n     BOOST_CHECK(ExtractDestination(s, address));\n-    BOOST_CHECK(boost::get<PKHash>(&address) &&\n-                *boost::get<PKHash>(&address) == PKHash(pubkey));\n+    BOOST_CHECK(std::get_if<PKHash>(&address) &&\n+                *std::get_if<PKHash>(&address) == PKHash(pubkey));\n \n     // TxoutType::SCRIPTHASH\n     CScript redeemScript(s); // initialize with leftover P2PKH script\n     s.clear();\n     s << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n     BOOST_CHECK(ExtractDestination(s, address));\n-    BOOST_CHECK(boost::get<ScriptHash>(&address) &&\n-                *boost::get<ScriptHash>(&address) == ScriptHash(redeemScript));\n+    BOOST_CHECK(std::get_if<ScriptHash>(&address) &&\n+                *std::get_if<ScriptHash>(&address) == ScriptHash(redeemScript));\n \n     // TxoutType::MULTISIG\n     s.clear();\n@@ -217,15 +217,15 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestination)\n     BOOST_CHECK(ExtractDestination(s, address));\n     WitnessV0KeyHash keyhash;\n     CHash160().Write(pubkey).Finalize(keyhash);\n-    BOOST_CHECK(boost::get<WitnessV0KeyHash>(&address) && *boost::get<WitnessV0KeyHash>(&address) == keyhash);\n+    BOOST_CHECK(std::get_if<WitnessV0KeyHash>(&address) && *std::get_if<WitnessV0KeyHash>(&address) == keyhash);\n \n     // TxoutType::WITNESS_V0_SCRIPTHASH\n     s.clear();\n     WitnessV0ScriptHash scripthash;\n     CSHA256().Write(redeemScript.data(), redeemScript.size()).Finalize(scripthash.begin());\n     s << OP_0 << ToByteVector(scripthash);\n     BOOST_CHECK(ExtractDestination(s, address));\n-    BOOST_CHECK(boost::get<WitnessV0ScriptHash>(&address) && *boost::get<WitnessV0ScriptHash>(&address) == scripthash);\n+    BOOST_CHECK(std::get_if<WitnessV0ScriptHash>(&address) && *std::get_if<WitnessV0ScriptHash>(&address) == scripthash);\n \n     // TxoutType::WITNESS_UNKNOWN with unknown version\n     s.clear();\n@@ -235,7 +235,7 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestination)\n     unk.length = 33;\n     unk.version = 1;\n     std::copy(pubkey.begin(), pubkey.end(), unk.program);\n-    BOOST_CHECK(boost::get<WitnessUnknown>(&address) && *boost::get<WitnessUnknown>(&address) == unk);\n+    BOOST_CHECK(std::get_if<WitnessUnknown>(&address) && *std::get_if<WitnessUnknown>(&address) == unk);\n }\n \n BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)\n@@ -259,8 +259,8 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)\n     BOOST_CHECK_EQUAL(whichType, TxoutType::PUBKEY);\n     BOOST_CHECK_EQUAL(addresses.size(), 1U);\n     BOOST_CHECK_EQUAL(nRequired, 1);\n-    BOOST_CHECK(boost::get<PKHash>(&addresses[0]) &&\n-                *boost::get<PKHash>(&addresses[0]) == PKHash(pubkeys[0]));\n+    BOOST_CHECK(std::get_if<PKHash>(&addresses[0]) &&\n+                *std::get_if<PKHash>(&addresses[0]) == PKHash(pubkeys[0]));\n \n     // TxoutType::PUBKEYHASH\n     s.clear();\n@@ -269,8 +269,8 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)\n     BOOST_CHECK_EQUAL(whichType, TxoutType::PUBKEYHASH);\n     BOOST_CHECK_EQUAL(addresses.size(), 1U);\n     BOOST_CHECK_EQUAL(nRequired, 1);\n-    BOOST_CHECK(boost::get<PKHash>(&addresses[0]) &&\n-                *boost::get<PKHash>(&addresses[0]) == PKHash(pubkeys[0]));\n+    BOOST_CHECK(std::get_if<PKHash>(&addresses[0]) &&\n+                *std::get_if<PKHash>(&addresses[0]) == PKHash(pubkeys[0]));\n \n     // TxoutType::SCRIPTHASH\n     CScript redeemScript(s); // initialize with leftover P2PKH script\n@@ -280,8 +280,8 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)\n     BOOST_CHECK_EQUAL(whichType, TxoutType::SCRIPTHASH);\n     BOOST_CHECK_EQUAL(addresses.size(), 1U);\n     BOOST_CHECK_EQUAL(nRequired, 1);\n-    BOOST_CHECK(boost::get<ScriptHash>(&addresses[0]) &&\n-                *boost::get<ScriptHash>(&addresses[0]) == ScriptHash(redeemScript));\n+    BOOST_CHECK(std::get_if<ScriptHash>(&addresses[0]) &&\n+                *std::get_if<ScriptHash>(&addresses[0]) == ScriptHash(redeemScript));\n \n     // TxoutType::MULTISIG\n     s.clear();\n@@ -293,10 +293,10 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)\n     BOOST_CHECK_EQUAL(whichType, TxoutType::MULTISIG);\n     BOOST_CHECK_EQUAL(addresses.size(), 2U);\n     BOOST_CHECK_EQUAL(nRequired, 2);\n-    BOOST_CHECK(boost::get<PKHash>(&addresses[0]) &&\n-                *boost::get<PKHash>(&addresses[0]) == PKHash(pubkeys[0]));\n-    BOOST_CHECK(boost::get<PKHash>(&addresses[1]) &&\n-                *boost::get<PKHash>(&addresses[1]) == PKHash(pubkeys[1]));\n+    BOOST_CHECK(std::get_if<PKHash>(&addresses[0]) &&\n+                *std::get_if<PKHash>(&addresses[0]) == PKHash(pubkeys[0]));\n+    BOOST_CHECK(std::get_if<PKHash>(&addresses[1]) &&\n+                *std::get_if<PKHash>(&addresses[1]) == PKHash(pubkeys[1]));\n \n     // TxoutType::NULL_DATA\n     s.clear();"
      },
      {
        "sha": "73948e4ff1395c0e6d63772b5d88275523042918",
        "filename": "src/util/message.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa8f68943615785a2855676cf96e0e96f3cc6bd/src/util/message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa8f68943615785a2855676cf96e0e96f3cc6bd/src/util/message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/message.cpp?ref=faa8f68943615785a2855676cf96e0e96f3cc6bd",
        "patch": "@@ -31,7 +31,7 @@ MessageVerificationResult MessageVerify(\n         return MessageVerificationResult::ERR_INVALID_ADDRESS;\n     }\n \n-    if (boost::get<PKHash>(&destination) == nullptr) {\n+    if (std::get_if<PKHash>(&destination) == nullptr) {\n         return MessageVerificationResult::ERR_ADDRESS_NO_KEY;\n     }\n "
      },
      {
        "sha": "7705794c63c7041e90d035c95aad2c465f742a8f",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa8f68943615785a2855676cf96e0e96f3cc6bd/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa8f68943615785a2855676cf96e0e96f3cc6bd/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=faa8f68943615785a2855676cf96e0e96f3cc6bd",
        "patch": "@@ -627,7 +627,7 @@ static RPCHelpMan signmessage()\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid address\");\n     }\n \n-    const PKHash *pkhash = boost::get<PKHash>(&dest);\n+    const PKHash* pkhash = std::get_if<PKHash>(&dest);\n     if (!pkhash) {\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to key\");\n     }\n@@ -3002,7 +3002,7 @@ static RPCHelpMan listunspent()\n             std::unique_ptr<SigningProvider> provider = pwallet->GetSolvingProvider(scriptPubKey);\n             if (provider) {\n                 if (scriptPubKey.IsPayToScriptHash()) {\n-                    const CScriptID& hash = CScriptID(boost::get<ScriptHash>(address));\n+                    const CScriptID& hash = CScriptID(std::get<ScriptHash>(address));\n                     CScript redeemScript;\n                     if (provider->GetCScript(hash, redeemScript)) {\n                         entry.pushKV(\"redeemScript\", HexStr(redeemScript));\n@@ -3012,7 +3012,7 @@ static RPCHelpMan listunspent()\n                             bool extracted = ExtractDestination(redeemScript, witness_destination);\n                             CHECK_NONFATAL(extracted);\n                             // Also return the witness script\n-                            const WitnessV0ScriptHash& whash = boost::get<WitnessV0ScriptHash>(witness_destination);\n+                            const WitnessV0ScriptHash& whash = std::get<WitnessV0ScriptHash>(witness_destination);\n                             CScriptID id;\n                             CRIPEMD160().Write(whash.begin(), whash.size()).Finalize(id.begin());\n                             CScript witnessScript;\n@@ -3022,7 +3022,7 @@ static RPCHelpMan listunspent()\n                         }\n                     }\n                 } else if (scriptPubKey.IsPayToWitnessScriptHash()) {\n-                    const WitnessV0ScriptHash& whash = boost::get<WitnessV0ScriptHash>(address);\n+                    const WitnessV0ScriptHash& whash = std::get<WitnessV0ScriptHash>(address);\n                     CScriptID id;\n                     CRIPEMD160().Write(whash.begin(), whash.size()).Finalize(id.begin());\n                     CScript witnessScript;\n@@ -3645,7 +3645,7 @@ static RPCHelpMan rescanblockchain()\n     };\n }\n \n-class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n+class DescribeWalletAddressVisitor\n {\n public:\n     const SigningProvider * const provider;\n@@ -3664,7 +3664,7 @@ class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n             UniValue subobj(UniValue::VOBJ);\n             UniValue detail = DescribeAddress(embedded);\n             subobj.pushKVs(detail);\n-            UniValue wallet_detail = boost::apply_visitor(*this, embedded);\n+            UniValue wallet_detail = std::visit(*this, embedded);\n             subobj.pushKVs(wallet_detail);\n             subobj.pushKV(\"address\", EncodeDestination(embedded));\n             subobj.pushKV(\"scriptPubKey\", HexStr(subscript));\n@@ -3747,7 +3747,7 @@ static UniValue DescribeWalletAddress(const CWallet* const pwallet, const CTxDes\n         provider = pwallet->GetSolvingProvider(script);\n     }\n     ret.pushKVs(detail);\n-    ret.pushKVs(boost::apply_visitor(DescribeWalletAddressVisitor(provider.get()), dest));\n+    ret.pushKVs(std::visit(DescribeWalletAddressVisitor(provider.get()), dest));\n     return ret;\n }\n "
      },
      {
        "sha": "5480f3ab22437c787f67e6f41ae9dd6bb06c9159",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa8f68943615785a2855676cf96e0e96f3cc6bd/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa8f68943615785a2855676cf96e0e96f3cc6bd/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=faa8f68943615785a2855676cf96e0e96f3cc6bd",
        "patch": "@@ -550,7 +550,7 @@ BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n         list = wallet->ListCoins();\n     }\n     BOOST_CHECK_EQUAL(list.size(), 1U);\n-    BOOST_CHECK_EQUAL(boost::get<PKHash>(list.begin()->first).ToString(), coinbaseAddress);\n+    BOOST_CHECK_EQUAL(std::get<PKHash>(list.begin()->first).ToString(), coinbaseAddress);\n     BOOST_CHECK_EQUAL(list.begin()->second.size(), 1U);\n \n     // Check initial balance from one mature coinbase transaction.\n@@ -566,7 +566,7 @@ BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n         list = wallet->ListCoins();\n     }\n     BOOST_CHECK_EQUAL(list.size(), 1U);\n-    BOOST_CHECK_EQUAL(boost::get<PKHash>(list.begin()->first).ToString(), coinbaseAddress);\n+    BOOST_CHECK_EQUAL(std::get<PKHash>(list.begin()->first).ToString(), coinbaseAddress);\n     BOOST_CHECK_EQUAL(list.begin()->second.size(), 2U);\n \n     // Lock both coins. Confirm number of available coins drops to 0.\n@@ -595,7 +595,7 @@ BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n         list = wallet->ListCoins();\n     }\n     BOOST_CHECK_EQUAL(list.size(), 1U);\n-    BOOST_CHECK_EQUAL(boost::get<PKHash>(list.begin()->first).ToString(), coinbaseAddress);\n+    BOOST_CHECK_EQUAL(std::get<PKHash>(list.begin()->first).ToString(), coinbaseAddress);\n     BOOST_CHECK_EQUAL(list.begin()->second.size(), 2U);\n }\n "
      },
      {
        "sha": "16191806b918bb8f1bb116ea7a01c54aac585434",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa8f68943615785a2855676cf96e0e96f3cc6bd/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa8f68943615785a2855676cf96e0e96f3cc6bd/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=faa8f68943615785a2855676cf96e0e96f3cc6bd",
        "patch": "@@ -2789,7 +2789,7 @@ bool CWallet::CreateTransactionInternal(\n             CScript scriptChange;\n \n             // coin control: send change to custom address\n-            if (!boost::get<CNoDestination>(&coin_control.destChange)) {\n+            if (!std::get_if<CNoDestination>(&coin_control.destChange)) {\n                 scriptChange = GetScriptForDestination(coin_control.destChange);\n             } else { // no coin control: send change to newly generated address\n                 // Note: We use a new key here to keep it from being obvious which side is the change.\n@@ -3724,7 +3724,7 @@ unsigned int CWallet::ComputeTimeSmart(const CWalletTx& wtx) const\n \n bool CWallet::AddDestData(WalletBatch& batch, const CTxDestination &dest, const std::string &key, const std::string &value)\n {\n-    if (boost::get<CNoDestination>(&dest))\n+    if (std::get_if<CNoDestination>(&dest))\n         return false;\n \n     m_address_book[dest].destdata.insert(std::make_pair(key, value));"
      },
      {
        "sha": "dc032665e436ae6d4eae9aa7d144f990706ac651",
        "filename": "test/lint/lint-includes.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa8f68943615785a2855676cf96e0e96f3cc6bd/test/lint/lint-includes.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa8f68943615785a2855676cf96e0e96f3cc6bd/test/lint/lint-includes.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-includes.sh?ref=faa8f68943615785a2855676cf96e0e96f3cc6bd",
        "patch": "@@ -71,9 +71,6 @@ EXPECTED_BOOST_INCLUDES=(\n     boost/thread/mutex.hpp\n     boost/thread/shared_mutex.hpp\n     boost/thread/thread.hpp\n-    boost/variant.hpp\n-    boost/variant/apply_visitor.hpp\n-    boost/variant/static_visitor.hpp\n )\n \n for BOOST_INCLUDE in $(git grep '^#include <boost/' -- \"*.cpp\" \"*.h\" | cut -f2 -d: | cut -f2 -d'<' | cut -f1 -d'>' | sort -u); do"
      }
    ]
  }
]