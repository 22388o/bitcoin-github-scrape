jgarzik,2014-08-27T15:24:42Z,Good start.  Presumably needs a test that triggers a failure.\n,https://github.com/bitcoin/bitcoin/pull/4769#issuecomment-53589103,53589103,
jrick,2014-08-27T16:04:47Z,"Agree, and one that passes through the ""normal"" response code instead of just a buffer unit test.\n",https://github.com/bitcoin/bitcoin/pull/4769#issuecomment-53597199,53597199,
sipa,2014-08-27T19:41:09Z,"I think we want to be much more conservative than 32 MiB for outgoing messages. I _believe_ that an inv with 50000 entries is the maximum we should be constructing, so 1800000 bytes for the payload.\n",https://github.com/bitcoin/bitcoin/pull/4769#issuecomment-53628820,53628820,
jrick,2014-08-27T20:20:43Z,"A more conservative maximum would be welcome.  I also don't see any payload length checks being done in ProcessMessages, so adding a constant and using it from both places is probably best.\n\nedit: oh, it _should_ be being checked from CMessageHeader::IsValid.  That compares it against MAX_SIZE, which is currently 0x02000000 (32 MB).\n",https://github.com/bitcoin/bitcoin/pull/4769#issuecomment-53634449,53634449,
jgarzik,2014-08-27T20:27:28Z,"@jrick  ProcessMessages() is never handed a message larger than MAX_SIZE (0x02000000).  Payload length is checked much earlier and at a lower level of processing, in CNetMessage()\n\nThe possibilities are: short message, complete message, complete message with added garbage (never read, yet reflected in message header's length member).\n\n@sipa +1 more conservative.  ""be liberal in what you accept",https://github.com/bitcoin/bitcoin/pull/4769#issuecomment-53635326,53635326,
jrick,2014-09-01T01:28:56Z,@sipa I believe the maximum payload for a full inv is actually 1800003.  The extra 3 bytes come from the varint which must represent an integer no greater than 50000.\n,https://github.com/bitcoin/bitcoin/pull/4769#issuecomment-54007908,54007908,
BitcoinPullTester,2014-09-01T02:04:52Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/p4769_6007fa26099682517b092e047104c44d68ad090a/ for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-te",https://github.com/bitcoin/bitcoin/pull/4769#issuecomment-54009155,54009155,
jrick,2014-09-01T02:43:38Z,"Another change I'd like to see is having different maximum send buffer sizes depending on the message being serialized.  This can help catch and prevent bugs where a message is serialized to a size greater than its expected maximum, but less than the max inv.\n\nThis would also require clearly defined maximum payload sizes for each P2P message, and newly added messages would have to have a sane ma",https://github.com/bitcoin/bitcoin/pull/4769#issuecomment-54010616,54010616,
jgarzik,2014-09-15T02:14:12Z,"hum.  Re-reviewing, this is a bit odd in that it\n- Presented logic in comments implicitly assumes a single message in send buffer\n- Picks an arbitrary inv-related constant as maximum, yet the data we send might be entirely unrelated to inv.\n- Is ignorant of SendBufferSize(), in case that is larger than SEND_BUFFER_MAX_SIZE.\n\nNotably, the _response_ to a 50000-sized inv might push (50000*respo",https://github.com/bitcoin/bitcoin/pull/4769#issuecomment-55547684,55547684,
fanquake,2015-01-23T13:31:01Z,@jrick Needs rebase.\n,https://github.com/bitcoin/bitcoin/pull/4769#issuecomment-71193064,71193064,
sipa,2015-03-01T12:03:30Z,See also #5843 to deal with the receiver side of this.\n,https://github.com/bitcoin/bitcoin/pull/4769#issuecomment-76593917,76593917,
laanwj,2015-03-18T09:28:05Z,Needs rebase.\n,https://github.com/bitcoin/bitcoin/pull/4769#issuecomment-82846629,82846629,
ghost,2015-05-01T20:53:33Z,"Hello, I noticed this was scheduled for 0.11 but the original committer hasn't been too responsive. I rebased his code and added some simple tests here https://github.com/faizkhan00/bitcoin/commit/6049eee8c5a34caaa1cb597d74984f31b7cef317\n\nSipa also mentioned possible bad behavior by nodes via dropping if the sent data is exceeded on IRC, so I'm looking to write another test for the networking / ",https://github.com/bitcoin/bitcoin/pull/4769#issuecomment-98234775,98234775,
jrick,2015-05-01T20:59:18Z,"Oops, apologies for dropping the ball on this one.  Thanks for stepping up and rebasing it.  I don't have a system currently that can build bitcoin core so I never got around to updating this.\n",https://github.com/bitcoin/bitcoin/pull/4769#issuecomment-98237186,98237186,
ghost,2015-05-05T21:45:37Z,"@jrick just wondering, do you know what it would take to address @jgarzik 's concerns up above? I noticed at least the second point while rebasing (fixed constant for all message types) and @sipa has mentioned wanting more coverage of node-behavior from the sender (throwing behavior) side of things. \n\nIf more testing needs to be done on this I can spend some time and try to address those concern",https://github.com/bitcoin/bitcoin/pull/4769#issuecomment-99232858,99232858,
jrick,2015-05-05T22:32:41Z,If the buffer can hold multiple messages at once then my change is wrong.  I'm not really familiar enough with the testing infrastructure to give any comments there.\n,https://github.com/bitcoin/bitcoin/pull/4769#issuecomment-99251199,99251199,
jgarzik,2015-07-23T18:08:44Z,Closing based on above comments and failing to garner ACKs after a long time.\n\nCan re-open if something changes.\n,https://github.com/bitcoin/bitcoin/pull/4769#issuecomment-124190105,124190105,
