[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/307194772",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10555#issuecomment-307194772",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10555",
    "id": 307194772,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzE5NDc3Mg==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-08T18:53:24Z",
    "updated_at": "2017-06-08T20:32:58Z",
    "author_association": "MEMBER",
    "body": "~utACK~\r\nTested ACK c4f6b7f2bc540c368e2ba1a5ab332432b0e93889",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/307194772/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/307202645",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10555#issuecomment-307202645",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10555",
    "id": 307202645,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzIwMjY0NQ==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-08T19:24:43Z",
    "updated_at": "2017-06-08T19:24:43Z",
    "author_association": "MEMBER",
    "body": "Oops. Accidentally squashed two commits together in my last fixup. I've divided this PR back into the correct number of commits.\r\n\r\nhttps://github.com/jnewbery/bitcoin/tree/pr10555.1 == https://github.com/jnewbery/bitcoin/tree/pr10555.2",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/307202645/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309273361",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10555#issuecomment-309273361",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10555",
    "id": 309273361,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTI3MzM2MQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-18T12:00:15Z",
    "updated_at": "2017-06-18T12:00:15Z",
    "author_association": "MEMBER",
    "body": "Concept ACK 0a4912e46aecef6f04c6287508020ec60424ed24",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309273361/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121265105",
    "pull_request_review_id": 43304838,
    "id": 121265105,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTI2NTEwNQ==",
    "diff_hunk": "@@ -38,72 +52,71 @@ def setup_nodes(self):\n         self.zmqSubSocket = self.zmqContext.socket(zmq.SUB)\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashblock\")\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashtx\")\n-        self.zmqSubSocket.connect(\"tcp://127.0.0.1:%i\" % self.port)\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args=[\n-            ['-zmqpubhashtx=tcp://127.0.0.1:'+str(self.port), '-zmqpubhashblock=tcp://127.0.0.1:'+str(self.port)],\n-            [],\n-            [],\n-            []\n-            ])\n+        ip_address = \"tcp://127.0.0.1:28332\"\n+        self.zmqSubSocket.connect(ip_address)\n+        extra_args = [['-zmqpubhashtx=%s' % ip_address, '-zmqpubhashblock=%s' % ip_address], []]\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n \n     def run_test(self):\n-        self.sync_all()\n-\n         genhashes = self.nodes[0].generate(1)\n         self.sync_all()\n \n-        self.log.info(\"listen...\")\n-        msg = self.zmqSubSocket.recv_multipart()\n+        self.log.info(\"Wait for tx\")\n+        msg = wait_for_multipart(self.zmqSubSocket)\n         topic = msg[0]\n         assert_equal(topic, b\"hashtx\")\n         body = msg[1]\n         msgSequence = struct.unpack('<I', msg[-1])[-1]\n-        assert_equal(msgSequence, 0) #must be sequence 0 on hashtx\n+        assert_equal(msgSequence, 0)  # must be sequence 0 on hashtx\n \n-        msg = self.zmqSubSocket.recv_multipart()\n+        self.log.info(\"Wait for block\")\n+        msg = wait_for_multipart(self.zmqSubSocket)\n         topic = msg[0]\n         body = msg[1]\n         msgSequence = struct.unpack('<I', msg[-1])[-1]\n-        assert_equal(msgSequence, 0) #must be sequence 0 on hashblock\n+        assert_equal(msgSequence, 0)  # must be sequence 0 on hashblock\n         blkhash = bytes_to_hex_str(body)\n \n-        assert_equal(genhashes[0], blkhash) #blockhash from generate must be equal to the hash received over zmq\n+        assert_equal(genhashes[0], blkhash)  # blockhash from generate must be equal to the hash received over zmq\n \n+        self.log.info(\"Generate 10 blocks (and 10 coinbase txes)\")\n         n = 10\n         genhashes = self.nodes[1].generate(n)\n         self.sync_all()\n \n         zmqHashes = []\n         blockcount = 0\n-        for x in range(0,n*2):\n-            msg = self.zmqSubSocket.recv_multipart()\n+        for x in range(n * 2):\n+            msg = wait_for_multipart(self.zmqSubSocket)\n             topic = msg[0]\n             body = msg[1]\n             if topic == b\"hashblock\":\n                 zmqHashes.append(bytes_to_hex_str(body))\n                 msgSequence = struct.unpack('<I', msg[-1])[-1]\n-                assert_equal(msgSequence, blockcount+1)\n+                assert_equal(msgSequence, blockcount + 1)\n                 blockcount += 1\n \n-        for x in range(0,n):\n-            assert_equal(genhashes[x], zmqHashes[x]) #blockhash from generate must be equal to the hash received over zmq\n+        for x in range(n):\n+            assert_equal(genhashes[x], zmqHashes[x])  # blockhash from generate must be equal to the hash received over zmq\n \n-        #test tx from a second node\n+        self.log.info(\"Wait for tx from second node\")\n+        # test tx from a second node\n         hashRPC = self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1.0)\n         self.sync_all()\n \n         # now we should receive a zmq msg because the tx was broadcast\n-        msg = self.zmqSubSocket.recv_multipart()\n+        msg = wait_for_multipart(self.zmqSubSocket)\n         topic = msg[0]\n         body = msg[1]\n-        hashZMQ = \"\"\n-        if topic == b\"hashtx\":\n-            hashZMQ = bytes_to_hex_str(body)\n-            msgSequence = struct.unpack('<I', msg[-1])[-1]\n-            assert_equal(msgSequence, blockcount+1)\n+        assert_equal(topic, b\"hashtx\")\n+        hashZMQ = bytes_to_hex_str(body)\n+        msgSequence = struct.unpack('<I', msg[-1])[-1]\n+        assert_equal(msgSequence, blockcount + 1)\n \n-        assert_equal(hashRPC, hashZMQ) #blockhash from generate must be equal to the hash received over zmq\n+        assert_equal(hashRPC, hashZMQ)  # txid from sendtoaddress must be equal to the hash received over zmq\n \n+        # Destroy the zmq context\n+        self.zmqContext.destroy(linger=None)",
    "path": "test/functional/zmq_test.py",
    "position": null,
    "original_position": 145,
    "commit_id": "0a4912e46aecef6f04c6287508020ec60424ed24",
    "original_commit_id": "c4f6b7f2bc540c368e2ba1a5ab332432b0e93889",
    "user": {
      "login": "somdoron",
      "id": 2715638,
      "node_id": "MDQ6VXNlcjI3MTU2Mzg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2715638?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/somdoron",
      "html_url": "https://github.com/somdoron",
      "followers_url": "https://api.github.com/users/somdoron/followers",
      "following_url": "https://api.github.com/users/somdoron/following{/other_user}",
      "gists_url": "https://api.github.com/users/somdoron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/somdoron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/somdoron/subscriptions",
      "organizations_url": "https://api.github.com/users/somdoron/orgs",
      "repos_url": "https://api.github.com/users/somdoron/repos",
      "events_url": "https://api.github.com/users/somdoron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/somdoron/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "when test failed this won't be called and the process will hang, might be good to call this in finally block",
    "created_at": "2017-06-10T19:54:37Z",
    "updated_at": "2017-06-12T13:17:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10555#discussion_r121265105",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10555",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121265105"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10555#discussion_r121265105"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10555"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121265105/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 119,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121293568",
    "pull_request_review_id": 43330871,
    "id": 121293568,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTI5MzU2OA==",
    "diff_hunk": "@@ -38,72 +52,71 @@ def setup_nodes(self):\n         self.zmqSubSocket = self.zmqContext.socket(zmq.SUB)\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashblock\")\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashtx\")\n-        self.zmqSubSocket.connect(\"tcp://127.0.0.1:%i\" % self.port)\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args=[\n-            ['-zmqpubhashtx=tcp://127.0.0.1:'+str(self.port), '-zmqpubhashblock=tcp://127.0.0.1:'+str(self.port)],\n-            [],\n-            [],\n-            []\n-            ])\n+        ip_address = \"tcp://127.0.0.1:28332\"\n+        self.zmqSubSocket.connect(ip_address)\n+        extra_args = [['-zmqpubhashtx=%s' % ip_address, '-zmqpubhashblock=%s' % ip_address], []]\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n \n     def run_test(self):\n-        self.sync_all()\n-\n         genhashes = self.nodes[0].generate(1)\n         self.sync_all()\n \n-        self.log.info(\"listen...\")\n-        msg = self.zmqSubSocket.recv_multipart()\n+        self.log.info(\"Wait for tx\")\n+        msg = wait_for_multipart(self.zmqSubSocket)\n         topic = msg[0]\n         assert_equal(topic, b\"hashtx\")\n         body = msg[1]\n         msgSequence = struct.unpack('<I', msg[-1])[-1]\n-        assert_equal(msgSequence, 0) #must be sequence 0 on hashtx\n+        assert_equal(msgSequence, 0)  # must be sequence 0 on hashtx\n \n-        msg = self.zmqSubSocket.recv_multipart()\n+        self.log.info(\"Wait for block\")\n+        msg = wait_for_multipart(self.zmqSubSocket)\n         topic = msg[0]\n         body = msg[1]\n         msgSequence = struct.unpack('<I', msg[-1])[-1]\n-        assert_equal(msgSequence, 0) #must be sequence 0 on hashblock\n+        assert_equal(msgSequence, 0)  # must be sequence 0 on hashblock\n         blkhash = bytes_to_hex_str(body)\n \n-        assert_equal(genhashes[0], blkhash) #blockhash from generate must be equal to the hash received over zmq\n+        assert_equal(genhashes[0], blkhash)  # blockhash from generate must be equal to the hash received over zmq\n \n+        self.log.info(\"Generate 10 blocks (and 10 coinbase txes)\")\n         n = 10\n         genhashes = self.nodes[1].generate(n)\n         self.sync_all()\n \n         zmqHashes = []\n         blockcount = 0\n-        for x in range(0,n*2):\n-            msg = self.zmqSubSocket.recv_multipart()\n+        for x in range(n * 2):\n+            msg = wait_for_multipart(self.zmqSubSocket)\n             topic = msg[0]\n             body = msg[1]\n             if topic == b\"hashblock\":\n                 zmqHashes.append(bytes_to_hex_str(body))\n                 msgSequence = struct.unpack('<I', msg[-1])[-1]\n-                assert_equal(msgSequence, blockcount+1)\n+                assert_equal(msgSequence, blockcount + 1)\n                 blockcount += 1\n \n-        for x in range(0,n):\n-            assert_equal(genhashes[x], zmqHashes[x]) #blockhash from generate must be equal to the hash received over zmq\n+        for x in range(n):\n+            assert_equal(genhashes[x], zmqHashes[x])  # blockhash from generate must be equal to the hash received over zmq\n \n-        #test tx from a second node\n+        self.log.info(\"Wait for tx from second node\")\n+        # test tx from a second node\n         hashRPC = self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1.0)\n         self.sync_all()\n \n         # now we should receive a zmq msg because the tx was broadcast\n-        msg = self.zmqSubSocket.recv_multipart()\n+        msg = wait_for_multipart(self.zmqSubSocket)\n         topic = msg[0]\n         body = msg[1]\n-        hashZMQ = \"\"\n-        if topic == b\"hashtx\":\n-            hashZMQ = bytes_to_hex_str(body)\n-            msgSequence = struct.unpack('<I', msg[-1])[-1]\n-            assert_equal(msgSequence, blockcount+1)\n+        assert_equal(topic, b\"hashtx\")\n+        hashZMQ = bytes_to_hex_str(body)\n+        msgSequence = struct.unpack('<I', msg[-1])[-1]\n+        assert_equal(msgSequence, blockcount + 1)\n \n-        assert_equal(hashRPC, hashZMQ) #blockhash from generate must be equal to the hash received over zmq\n+        assert_equal(hashRPC, hashZMQ)  # txid from sendtoaddress must be equal to the hash received over zmq\n \n+        # Destroy the zmq context\n+        self.zmqContext.destroy(linger=None)",
    "path": "test/functional/zmq_test.py",
    "position": null,
    "original_position": 145,
    "commit_id": "0a4912e46aecef6f04c6287508020ec60424ed24",
    "original_commit_id": "c4f6b7f2bc540c368e2ba1a5ab332432b0e93889",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good point @somdoron. Added a fixup commit 72a54cce9ebc3ee1efd69c5d16b11ca54c25783a. Can you take a look and let me know what you think. If you're happy I'll squash with the previous commit.",
    "created_at": "2017-06-11T22:46:06Z",
    "updated_at": "2017-06-12T13:17:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10555#discussion_r121293568",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10555",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121293568"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10555#discussion_r121293568"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10555"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121293568/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 119,
    "side": "RIGHT",
    "in_reply_to_id": 121265105
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121317344",
    "pull_request_review_id": 43354708,
    "id": 121317344,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTMxNzM0NA==",
    "diff_hunk": "@@ -38,72 +52,71 @@ def setup_nodes(self):\n         self.zmqSubSocket = self.zmqContext.socket(zmq.SUB)\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashblock\")\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashtx\")\n-        self.zmqSubSocket.connect(\"tcp://127.0.0.1:%i\" % self.port)\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args=[\n-            ['-zmqpubhashtx=tcp://127.0.0.1:'+str(self.port), '-zmqpubhashblock=tcp://127.0.0.1:'+str(self.port)],\n-            [],\n-            [],\n-            []\n-            ])\n+        ip_address = \"tcp://127.0.0.1:28332\"\n+        self.zmqSubSocket.connect(ip_address)\n+        extra_args = [['-zmqpubhashtx=%s' % ip_address, '-zmqpubhashblock=%s' % ip_address], []]\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n \n     def run_test(self):\n-        self.sync_all()\n-\n         genhashes = self.nodes[0].generate(1)\n         self.sync_all()\n \n-        self.log.info(\"listen...\")\n-        msg = self.zmqSubSocket.recv_multipart()\n+        self.log.info(\"Wait for tx\")\n+        msg = wait_for_multipart(self.zmqSubSocket)\n         topic = msg[0]\n         assert_equal(topic, b\"hashtx\")\n         body = msg[1]\n         msgSequence = struct.unpack('<I', msg[-1])[-1]\n-        assert_equal(msgSequence, 0) #must be sequence 0 on hashtx\n+        assert_equal(msgSequence, 0)  # must be sequence 0 on hashtx\n \n-        msg = self.zmqSubSocket.recv_multipart()\n+        self.log.info(\"Wait for block\")\n+        msg = wait_for_multipart(self.zmqSubSocket)\n         topic = msg[0]\n         body = msg[1]\n         msgSequence = struct.unpack('<I', msg[-1])[-1]\n-        assert_equal(msgSequence, 0) #must be sequence 0 on hashblock\n+        assert_equal(msgSequence, 0)  # must be sequence 0 on hashblock\n         blkhash = bytes_to_hex_str(body)\n \n-        assert_equal(genhashes[0], blkhash) #blockhash from generate must be equal to the hash received over zmq\n+        assert_equal(genhashes[0], blkhash)  # blockhash from generate must be equal to the hash received over zmq\n \n+        self.log.info(\"Generate 10 blocks (and 10 coinbase txes)\")\n         n = 10\n         genhashes = self.nodes[1].generate(n)\n         self.sync_all()\n \n         zmqHashes = []\n         blockcount = 0\n-        for x in range(0,n*2):\n-            msg = self.zmqSubSocket.recv_multipart()\n+        for x in range(n * 2):\n+            msg = wait_for_multipart(self.zmqSubSocket)\n             topic = msg[0]\n             body = msg[1]\n             if topic == b\"hashblock\":\n                 zmqHashes.append(bytes_to_hex_str(body))\n                 msgSequence = struct.unpack('<I', msg[-1])[-1]\n-                assert_equal(msgSequence, blockcount+1)\n+                assert_equal(msgSequence, blockcount + 1)\n                 blockcount += 1\n \n-        for x in range(0,n):\n-            assert_equal(genhashes[x], zmqHashes[x]) #blockhash from generate must be equal to the hash received over zmq\n+        for x in range(n):\n+            assert_equal(genhashes[x], zmqHashes[x])  # blockhash from generate must be equal to the hash received over zmq\n \n-        #test tx from a second node\n+        self.log.info(\"Wait for tx from second node\")\n+        # test tx from a second node\n         hashRPC = self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1.0)\n         self.sync_all()\n \n         # now we should receive a zmq msg because the tx was broadcast\n-        msg = self.zmqSubSocket.recv_multipart()\n+        msg = wait_for_multipart(self.zmqSubSocket)\n         topic = msg[0]\n         body = msg[1]\n-        hashZMQ = \"\"\n-        if topic == b\"hashtx\":\n-            hashZMQ = bytes_to_hex_str(body)\n-            msgSequence = struct.unpack('<I', msg[-1])[-1]\n-            assert_equal(msgSequence, blockcount+1)\n+        assert_equal(topic, b\"hashtx\")\n+        hashZMQ = bytes_to_hex_str(body)\n+        msgSequence = struct.unpack('<I', msg[-1])[-1]\n+        assert_equal(msgSequence, blockcount + 1)\n \n-        assert_equal(hashRPC, hashZMQ) #blockhash from generate must be equal to the hash received over zmq\n+        assert_equal(hashRPC, hashZMQ)  # txid from sendtoaddress must be equal to the hash received over zmq\n \n+        # Destroy the zmq context\n+        self.zmqContext.destroy(linger=None)",
    "path": "test/functional/zmq_test.py",
    "position": null,
    "original_position": 145,
    "commit_id": "0a4912e46aecef6f04c6287508020ec60424ed24",
    "original_commit_id": "c4f6b7f2bc540c368e2ba1a5ab332432b0e93889",
    "user": {
      "login": "somdoron",
      "id": 2715638,
      "node_id": "MDQ6VXNlcjI3MTU2Mzg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2715638?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/somdoron",
      "html_url": "https://github.com/somdoron",
      "followers_url": "https://api.github.com/users/somdoron/followers",
      "following_url": "https://api.github.com/users/somdoron/following{/other_user}",
      "gists_url": "https://api.github.com/users/somdoron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/somdoron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/somdoron/subscriptions",
      "organizations_url": "https://api.github.com/users/somdoron/orgs",
      "repos_url": "https://api.github.com/users/somdoron/repos",
      "events_url": "https://api.github.com/users/somdoron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/somdoron/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "looks good",
    "created_at": "2017-06-12T06:27:33Z",
    "updated_at": "2017-06-12T13:17:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10555#discussion_r121317344",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10555",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121317344"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10555#discussion_r121317344"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10555"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121317344/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 119,
    "side": "RIGHT",
    "in_reply_to_id": 121265105
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121317876",
    "pull_request_review_id": 43355257,
    "id": 121317876,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTMxNzg3Ng==",
    "diff_hunk": "@@ -6,29 +6,43 @@\n import configparser\n import os\n import struct\n+import time\n \n from test_framework.test_framework import BitcoinTestFramework, SkipTest\n-from test_framework.util import *\n+from test_framework.util import (assert_equal,\n+                                 bytes_to_hex_str,\n+                                 )\n+\n+def wait_for_multipart(socket, timeout=60):\n+    interval = 0.1",
    "path": "test/functional/zmq_test.py",
    "position": null,
    "original_position": 13,
    "commit_id": "0a4912e46aecef6f04c6287508020ec60424ed24",
    "original_commit_id": "a2106d8ae3dc18d83328268c96cbfa1626eb7f20",
    "user": {
      "login": "somdoron",
      "id": 2715638,
      "node_id": "MDQ6VXNlcjI3MTU2Mzg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2715638?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/somdoron",
      "html_url": "https://github.com/somdoron",
      "followers_url": "https://api.github.com/users/somdoron/followers",
      "following_url": "https://api.github.com/users/somdoron/following{/other_user}",
      "gists_url": "https://api.github.com/users/somdoron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/somdoron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/somdoron/subscriptions",
      "organizations_url": "https://api.github.com/users/somdoron/orgs",
      "repos_url": "https://api.github.com/users/somdoron/repos",
      "events_url": "https://api.github.com/users/somdoron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/somdoron/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You can also call socket.SET(zmq.RCVTIMEO, 60000) when creating the socket instead of the NOBLOCK and the loop. It will raise zmq.error.Again when time is over",
    "created_at": "2017-06-12T06:32:37Z",
    "updated_at": "2017-06-12T13:17:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10555#discussion_r121317876",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10555",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121317876"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10555#discussion_r121317876"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10555"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121317876/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 17,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121388807",
    "pull_request_review_id": 43432129,
    "id": 121388807,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTM4ODgwNw==",
    "diff_hunk": "@@ -6,29 +6,43 @@\n import configparser\n import os\n import struct\n+import time\n \n from test_framework.test_framework import BitcoinTestFramework, SkipTest\n-from test_framework.util import *\n+from test_framework.util import (assert_equal,\n+                                 bytes_to_hex_str,\n+                                 )\n+\n+def wait_for_multipart(socket, timeout=60):\n+    interval = 0.1",
    "path": "test/functional/zmq_test.py",
    "position": null,
    "original_position": 13,
    "commit_id": "0a4912e46aecef6f04c6287508020ec60424ed24",
    "original_commit_id": "a2106d8ae3dc18d83328268c96cbfa1626eb7f20",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks! I didn't know about `zmq.RCVTIMEO`. Updated to use that instead of the timeout loop in https://github.com/bitcoin/bitcoin/pull/10555/commits/b1bac1cb7ea1560b46ff758864660a21a228ed67",
    "created_at": "2017-06-12T13:16:41Z",
    "updated_at": "2017-06-12T13:17:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10555#discussion_r121388807",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10555",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121388807"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10555#discussion_r121388807"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10555"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121388807/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 17,
    "side": "RIGHT",
    "in_reply_to_id": 121317876
  }
]