[
  {
    "sha": "bebe7282ffbfbc260bfc020f1b62710fdfd07cb5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZWJlNzI4MmZmYmZiYzI2MGJmYzAyMGYxYjYyNzEwZmRmZDA3Y2I1",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-10T16:42:50Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-15T12:31:44Z"
      },
      "message": "Chainparams: Refactor: Remove redundant AllowMinDifficultyBlocks() getter",
      "tree": {
        "sha": "28f770eaf4594184c8074ae24ee0fda98cf6c97b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/28f770eaf4594184c8074ae24ee0fda98cf6c97b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bebe7282ffbfbc260bfc020f1b62710fdfd07cb5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bebe7282ffbfbc260bfc020f1b62710fdfd07cb5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bebe7282ffbfbc260bfc020f1b62710fdfd07cb5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bebe7282ffbfbc260bfc020f1b62710fdfd07cb5/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea2b425b00b01b5b6670fa39488caf146dac4642",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea2b425b00b01b5b6670fa39488caf146dac4642",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea2b425b00b01b5b6670fa39488caf146dac4642"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 15,
      "deletions": 14
    },
    "files": [
      {
        "sha": "06920944783d873be10397a2c4f2f1184eebba5d",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bebe7282ffbfbc260bfc020f1b62710fdfd07cb5/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bebe7282ffbfbc260bfc020f1b62710fdfd07cb5/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=bebe7282ffbfbc260bfc020f1b62710fdfd07cb5",
        "patch": "@@ -56,8 +56,6 @@ class CChainParams\n     bool MiningRequiresPeers() const { return fMiningRequiresPeers; }\n     /** Default value for -checkmempool and -checkblockindex argument */\n     bool DefaultConsistencyChecks() const { return fDefaultConsistencyChecks; }\n-    /** Allow mining of a min-difficulty block */\n-    bool AllowMinDifficultyBlocks() const { return consensus.fPowAllowMinDifficultyBlocks; }\n     /** Make standard checks */\n     bool RequireStandard() const { return fRequireStandard; }\n     /** Make miner stop after a block is found. In RPC, don't return until nGenProcLimit blocks are generated */"
      },
      {
        "sha": "3abd2d68e40a11c34be9e670155ffff6dc9d8389",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 10,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bebe7282ffbfbc260bfc020f1b62710fdfd07cb5/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bebe7282ffbfbc260bfc020f1b62710fdfd07cb5/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=bebe7282ffbfbc260bfc020f1b62710fdfd07cb5",
        "patch": "@@ -6,11 +6,12 @@\n #include \"miner.h\"\n \n #include \"amount.h\"\n-#include \"primitives/transaction.h\"\n+#include \"chainparams.h\"\n #include \"hash.h\"\n #include \"main.h\"\n #include \"net.h\"\n #include \"pow.h\"\n+#include \"primitives/transaction.h\"\n #include \"timedata.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n@@ -78,13 +79,13 @@ class TxPriorityCompare\n     }\n };\n \n-void UpdateTime(CBlockHeader* pblock, const CBlockIndex* pindexPrev)\n+void UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n {\n     pblock->nTime = std::max(pindexPrev->GetMedianTimePast()+1, GetAdjustedTime());\n \n     // Updating time can change work required on testnet:\n-    if (Params().AllowMinDifficultyBlocks())\n-        pblock->nBits = GetNextWorkRequired(pindexPrev, pblock, Params().GetConsensus());\n+    if (consensusParams.fPowAllowMinDifficultyBlocks)\n+        pblock->nBits = GetNextWorkRequired(pindexPrev, pblock, consensusParams);\n }\n \n CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n@@ -325,7 +326,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n \n         // Fill in header\n         pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n-        UpdateTime(pblock, pindexPrev);\n+        UpdateTime(pblock, Params().GetConsensus(), pindexPrev);\n         pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock, Params().GetConsensus());\n         pblock->nNonce         = 0;\n         pblocktemplate->vTxSigOps[0] = GetLegacySigOpCount(pblock->vtx[0]);\n@@ -440,14 +441,15 @@ void static BitcoinMiner(CWallet *pwallet)\n     LogPrintf(\"BitcoinMiner started\\n\");\n     SetThreadPriority(THREAD_PRIORITY_LOWEST);\n     RenameThread(\"bitcoin-miner\");\n+    const CChainParams& chainparams = Params();\n \n     // Each thread has its own key and counter\n     CReserveKey reservekey(pwallet);\n     unsigned int nExtraNonce = 0;\n \n     try {\n         while (true) {\n-            if (Params().MiningRequiresPeers()) {\n+            if (chainparams.MiningRequiresPeers()) {\n                 // Busy-wait for the network to come online so we don't waste time mining\n                 // on an obsolete chain. In regtest mode we expect to fly solo.\n                 while (vNodes.empty())\n@@ -496,7 +498,7 @@ void static BitcoinMiner(CWallet *pwallet)\n                         SetThreadPriority(THREAD_PRIORITY_LOWEST);\n \n                         // In regression test mode, stop mining after a block is found.\n-                        if (Params().MineBlocksOnDemand())\n+                        if (chainparams.MineBlocksOnDemand())\n                             throw boost::thread_interrupted();\n \n                         break;\n@@ -506,7 +508,7 @@ void static BitcoinMiner(CWallet *pwallet)\n                 // Check for stop or if block needs to be rebuilt\n                 boost::this_thread::interruption_point();\n                 // Regtest mode doesn't require peers\n-                if (vNodes.empty() && Params().MiningRequiresPeers())\n+                if (vNodes.empty() && chainparams.MiningRequiresPeers())\n                     break;\n                 if (nNonce >= 0xffff0000)\n                     break;\n@@ -516,8 +518,8 @@ void static BitcoinMiner(CWallet *pwallet)\n                     break;\n \n                 // Update nTime every few seconds\n-                UpdateTime(pblock, pindexPrev);\n-                if (Params().AllowMinDifficultyBlocks())\n+                UpdateTime(pblock, chainparams.GetConsensus(), pindexPrev);\n+                if (chainparams.GetConsensus().fPowAllowMinDifficultyBlocks)\n                 {\n                     // Changing pblock->nTime can change work required on testnet:\n                     hashTarget.SetCompact(pblock->nBits);"
      },
      {
        "sha": "0be3152d97d694116404a0eaab6dc17c3898c7d3",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bebe7282ffbfbc260bfc020f1b62710fdfd07cb5/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bebe7282ffbfbc260bfc020f1b62710fdfd07cb5/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=bebe7282ffbfbc260bfc020f1b62710fdfd07cb5",
        "patch": "@@ -14,6 +14,7 @@ class CBlockIndex;\n class CReserveKey;\n class CScript;\n class CWallet;\n+namespace Consensus { class Params; };\n \n struct CBlockTemplate\n {\n@@ -29,6 +30,6 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn);\n CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey);\n /** Modify the extranonce in a block */\n void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n-void UpdateTime(CBlockHeader* block, const CBlockIndex* pindexPrev);\n+void UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev);\n \n #endif // BITCOIN_MINER_H"
      },
      {
        "sha": "851d113f3be52b9163c1b2921d9aef387661d9b1",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bebe7282ffbfbc260bfc020f1b62710fdfd07cb5/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bebe7282ffbfbc260bfc020f1b62710fdfd07cb5/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=bebe7282ffbfbc260bfc020f1b62710fdfd07cb5",
        "patch": "@@ -514,7 +514,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     CBlock* pblock = &pblocktemplate->block; // pointer for convenience\n \n     // Update nTime\n-    UpdateTime(pblock, pindexPrev);\n+    UpdateTime(pblock, Params().GetConsensus(), pindexPrev);\n     pblock->nNonce = 0;\n \n     static const Array aCaps = boost::assign::list_of(\"proposal\");"
      }
    ]
  }
]