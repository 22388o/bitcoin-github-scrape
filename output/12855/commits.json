[
  {
    "sha": "2c084a6609bed24979c2a144743007f8b10a5c70",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYzA4NGE2NjA5YmVkMjQ5NzljMmExNDQ3NDMwMDdmOGIxMGE1Yzcw",
    "commit": {
      "author": {
        "name": "Thomas Snider",
        "email": "tjps636@gmail.com",
        "date": "2018-01-26T10:48:56Z"
      },
      "committer": {
        "name": "Thomas Snider",
        "email": "tjps636@gmail.com",
        "date": "2018-04-16T20:24:14Z"
      },
      "message": "net: Minor accumulated cleanups",
      "tree": {
        "sha": "df9527a3ce02aa01c5d55fd6b660ead4698e954b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/df9527a3ce02aa01c5d55fd6b660ead4698e954b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c084a6609bed24979c2a144743007f8b10a5c70",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c084a6609bed24979c2a144743007f8b10a5c70",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2c084a6609bed24979c2a144743007f8b10a5c70",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c084a6609bed24979c2a144743007f8b10a5c70/comments",
    "author": {
      "login": "tjps",
      "id": 7519582,
      "node_id": "MDQ6VXNlcjc1MTk1ODI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7519582?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tjps",
      "html_url": "https://github.com/tjps",
      "followers_url": "https://api.github.com/users/tjps/followers",
      "following_url": "https://api.github.com/users/tjps/following{/other_user}",
      "gists_url": "https://api.github.com/users/tjps/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tjps/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tjps/subscriptions",
      "organizations_url": "https://api.github.com/users/tjps/orgs",
      "repos_url": "https://api.github.com/users/tjps/repos",
      "events_url": "https://api.github.com/users/tjps/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tjps/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tjps",
      "id": 7519582,
      "node_id": "MDQ6VXNlcjc1MTk1ODI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7519582?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tjps",
      "html_url": "https://github.com/tjps",
      "followers_url": "https://api.github.com/users/tjps/followers",
      "following_url": "https://api.github.com/users/tjps/following{/other_user}",
      "gists_url": "https://api.github.com/users/tjps/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tjps/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tjps/subscriptions",
      "organizations_url": "https://api.github.com/users/tjps/orgs",
      "repos_url": "https://api.github.com/users/tjps/repos",
      "events_url": "https://api.github.com/users/tjps/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tjps/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "07825088f9cfd8abece774b9d978c36ab90ce3d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07825088f9cfd8abece774b9d978c36ab90ce3d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07825088f9cfd8abece774b9d978c36ab90ce3d1"
      }
    ],
    "stats": {
      "total": 104,
      "additions": 36,
      "deletions": 68
    },
    "files": [
      {
        "sha": "0dc2dfbf7d6321a86fb50ebbc6fb3421d006c010",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c084a6609bed24979c2a144743007f8b10a5c70/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c084a6609bed24979c2a144743007f8b10a5c70/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=2c084a6609bed24979c2a144743007f8b10a5c70",
        "patch": "@@ -42,12 +42,9 @@\n \n void WaitForShutdown()\n {\n-    bool fShutdown = ShutdownRequested();\n-    // Tell the main threads to shutdown.\n-    while (!fShutdown)\n+    while (!ShutdownRequested())\n     {\n         MilliSleep(200);\n-        fShutdown = ShutdownRequested();\n     }\n     Interrupt();\n }"
      },
      {
        "sha": "920b3f776d166993990fe3b582b5291a916e8798",
        "filename": "src/compat.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c084a6609bed24979c2a144743007f8b10a5c70/src/compat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c084a6609bed24979c2a144743007f8b10a5c70/src/compat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat.h?ref=2c084a6609bed24979c2a144743007f8b10a5c70",
        "patch": "@@ -96,6 +96,12 @@ typedef int32_t ssize_t;\n size_t strnlen( const char *start, size_t max_len);\n #endif // HAVE_DECL_STRNLEN\n \n+#ifndef WIN32\n+typedef void* sockopt_arg_type;\n+#else\n+typedef char* sockopt_arg_type;\n+#endif\n+\n bool static inline IsSelectableSocket(const SOCKET& s) {\n #ifdef WIN32\n     return true;"
      },
      {
        "sha": "cd076c1ce2180acaf68b321ed9bbfc02ab175a57",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 16,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c084a6609bed24979c2a144743007f8b10a5c70/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c084a6609bed24979c2a144743007f8b10a5c70/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=2c084a6609bed24979c2a144743007f8b10a5c70",
        "patch": "@@ -1923,23 +1923,25 @@ std::vector<AddedNodeInfo> CConnman::GetAddedNodeInfo()\n \n     for (const std::string& strAddNode : lAddresses) {\n         CService service(LookupNumeric(strAddNode.c_str(), Params().GetDefaultPort()));\n+        AddedNodeInfo addedNode{strAddNode, CService(), false, false};\n         if (service.IsValid()) {\n             // strAddNode is an IP:port\n             auto it = mapConnected.find(service);\n             if (it != mapConnected.end()) {\n-                ret.push_back(AddedNodeInfo{strAddNode, service, true, it->second});\n-            } else {\n-                ret.push_back(AddedNodeInfo{strAddNode, CService(), false, false});\n+                addedNode.resolvedAddress = service;\n+                addedNode.fConnected = true;\n+                addedNode.fInbound = it->second;\n             }\n         } else {\n             // strAddNode is a name\n             auto it = mapConnectedByName.find(strAddNode);\n             if (it != mapConnectedByName.end()) {\n-                ret.push_back(AddedNodeInfo{strAddNode, it->second.second, true, it->second.first});\n-            } else {\n-                ret.push_back(AddedNodeInfo{strAddNode, CService(), false, false});\n+                addedNode.resolvedAddress = it->second.second;\n+                addedNode.fConnected = true;\n+                addedNode.fInbound = it->second.first;\n             }\n         }\n+        ret.emplace_back(std::move(addedNode));\n     }\n \n     return ret;\n@@ -2088,23 +2090,16 @@ bool CConnman::BindListenPort(const CService &addrBind, std::string& strError, b\n         LogPrintf(\"%s\\n\", strError);\n         return false;\n     }\n-#ifndef WIN32\n+\n     // Allow binding if the port is still in TIME_WAIT state after\n     // the program was closed and restarted.\n-    setsockopt(hListenSocket, SOL_SOCKET, SO_REUSEADDR, (void*)&nOne, sizeof(int));\n-#else\n-    setsockopt(hListenSocket, SOL_SOCKET, SO_REUSEADDR, (const char*)&nOne, sizeof(int));\n-#endif\n+    setsockopt(hListenSocket, SOL_SOCKET, SO_REUSEADDR, (sockopt_arg_type)&nOne, sizeof(int));\n \n     // some systems don't have IPV6_V6ONLY but are always v6only; others do have the option\n     // and enable it by default or not. Try to enable it, if possible.\n     if (addrBind.IsIPv6()) {\n #ifdef IPV6_V6ONLY\n-#ifdef WIN32\n-        setsockopt(hListenSocket, IPPROTO_IPV6, IPV6_V6ONLY, (const char*)&nOne, sizeof(int));\n-#else\n-        setsockopt(hListenSocket, IPPROTO_IPV6, IPV6_V6ONLY, (void*)&nOne, sizeof(int));\n-#endif\n+        setsockopt(hListenSocket, IPPROTO_IPV6, IPV6_V6ONLY, (sockopt_arg_type)&nOne, sizeof(int));\n #endif\n #ifdef WIN32\n         int nProtLevel = PROTECTION_LEVEL_UNRESTRICTED;"
      },
      {
        "sha": "18d5948f8575ed8e97856b414e74a19e0c57d483",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 38,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c084a6609bed24979c2a144743007f8b10a5c70/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c084a6609bed24979c2a144743007f8b10a5c70/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=2c084a6609bed24979c2a144743007f8b10a5c70",
        "patch": "@@ -14,7 +14,7 @@ static const unsigned char pchOnionCat[] = {0xFD,0x87,0xD8,0x7E,0xEB,0x43};\n // 0xFD + sha256(\"bitcoin\")[0:5]\n static const unsigned char g_internal_prefix[] = { 0xFD, 0x6B, 0x88, 0xC0, 0x87, 0x24 };\n \n-void CNetAddr::Init()\n+CNetAddr::CNetAddr()\n {\n     memset(ip, 0, sizeof(ip));\n     scopeId = 0;\n@@ -67,11 +67,6 @@ bool CNetAddr::SetSpecial(const std::string &strName)\n     return false;\n }\n \n-CNetAddr::CNetAddr()\n-{\n-    Init();\n-}\n-\n CNetAddr::CNetAddr(const struct in_addr& ipv4Addr)\n {\n     SetRaw(NET_IPV4, (const uint8_t*)&ipv4Addr);\n@@ -290,11 +285,6 @@ bool operator==(const CNetAddr& a, const CNetAddr& b)\n     return (memcmp(a.ip, b.ip, 16) == 0);\n }\n \n-bool operator!=(const CNetAddr& a, const CNetAddr& b)\n-{\n-    return (memcmp(a.ip, b.ip, 16) != 0);\n-}\n-\n bool operator<(const CNetAddr& a, const CNetAddr& b)\n {\n     return (memcmp(a.ip, b.ip, 16) < 0);\n@@ -469,14 +459,8 @@ int CNetAddr::GetReachabilityFrom(const CNetAddr *paddrPartner) const\n     }\n }\n \n-void CService::Init()\n+CService::CService() : port(0)\n {\n-    port = 0;\n-}\n-\n-CService::CService()\n-{\n-    Init();\n }\n \n CService::CService(const CNetAddr& cip, unsigned short portIn) : CNetAddr(cip), port(portIn)\n@@ -525,11 +509,6 @@ bool operator==(const CService& a, const CService& b)\n     return static_cast<CNetAddr>(a) == static_cast<CNetAddr>(b) && a.port == b.port;\n }\n \n-bool operator!=(const CService& a, const CService& b)\n-{\n-    return static_cast<CNetAddr>(a) != static_cast<CNetAddr>(b) || a.port != b.port;\n-}\n-\n bool operator<(const CService& a, const CService& b)\n {\n     return static_cast<CNetAddr>(a) < static_cast<CNetAddr>(b) || (static_cast<CNetAddr>(a) == static_cast<CNetAddr>(b) && a.port < b.port);\n@@ -663,16 +642,16 @@ bool CSubNet::Match(const CNetAddr &addr) const\n static inline int NetmaskBits(uint8_t x)\n {\n     switch(x) {\n-    case 0x00: return 0; break;\n-    case 0x80: return 1; break;\n-    case 0xc0: return 2; break;\n-    case 0xe0: return 3; break;\n-    case 0xf0: return 4; break;\n-    case 0xf8: return 5; break;\n-    case 0xfc: return 6; break;\n-    case 0xfe: return 7; break;\n-    case 0xff: return 8; break;\n-    default: return -1; break;\n+    case 0x00: return 0;\n+    case 0x80: return 1;\n+    case 0xc0: return 2;\n+    case 0xe0: return 3;\n+    case 0xf0: return 4;\n+    case 0xf8: return 5;\n+    case 0xfc: return 6;\n+    case 0xfe: return 7;\n+    case 0xff: return 8;\n+    default: return -1;\n     }\n }\n \n@@ -724,11 +703,6 @@ bool operator==(const CSubNet& a, const CSubNet& b)\n     return a.valid == b.valid && a.network == b.network && !memcmp(a.netmask, b.netmask, 16);\n }\n \n-bool operator!=(const CSubNet& a, const CSubNet& b)\n-{\n-    return !(a==b);\n-}\n-\n bool operator<(const CSubNet& a, const CSubNet& b)\n {\n     return (a.network < b.network || (a.network == b.network && memcmp(a.netmask, b.netmask, 16) < 0));"
      },
      {
        "sha": "f8f2ab99ff26eaf5d47127501ef3b71ebfbc63d7",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c084a6609bed24979c2a144743007f8b10a5c70/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c084a6609bed24979c2a144743007f8b10a5c70/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=2c084a6609bed24979c2a144743007f8b10a5c70",
        "patch": "@@ -38,15 +38,16 @@ class CNetAddr\n     public:\n         CNetAddr();\n         explicit CNetAddr(const struct in_addr& ipv4Addr);\n-        void Init();\n         void SetIP(const CNetAddr& ip);\n \n+    private:\n         /**\n          * Set raw IPv4 or IPv6 address (in network byte order)\n          * @note Only NET_IPV4 and NET_IPV6 are allowed for network.\n          */\n         void SetRaw(Network network, const uint8_t *data);\n \n+    public:\n         /**\n           * Transform an arbitrary string into a non-routable ipv6 address.\n           * Useful for mapping resolved addresses back to their source.\n@@ -87,7 +88,7 @@ class CNetAddr\n         bool GetIn6Addr(struct in6_addr* pipv6Addr) const;\n \n         friend bool operator==(const CNetAddr& a, const CNetAddr& b);\n-        friend bool operator!=(const CNetAddr& a, const CNetAddr& b);\n+        friend bool operator!=(const CNetAddr& a, const CNetAddr& b) { return !(a == b); }\n         friend bool operator<(const CNetAddr& a, const CNetAddr& b);\n \n         ADD_SERIALIZE_METHODS;\n@@ -124,7 +125,7 @@ class CSubNet\n         bool IsValid() const;\n \n         friend bool operator==(const CSubNet& a, const CSubNet& b);\n-        friend bool operator!=(const CSubNet& a, const CSubNet& b);\n+        friend bool operator!=(const CSubNet& a, const CSubNet& b) { return !(a == b); }\n         friend bool operator<(const CSubNet& a, const CSubNet& b);\n \n         ADD_SERIALIZE_METHODS;\n@@ -148,12 +149,11 @@ class CService : public CNetAddr\n         CService(const CNetAddr& ip, unsigned short port);\n         CService(const struct in_addr& ipv4Addr, unsigned short port);\n         explicit CService(const struct sockaddr_in& addr);\n-        void Init();\n         unsigned short GetPort() const;\n         bool GetSockAddr(struct sockaddr* paddr, socklen_t *addrlen) const;\n         bool SetSockAddr(const struct sockaddr* paddr);\n         friend bool operator==(const CService& a, const CService& b);\n-        friend bool operator!=(const CService& a, const CService& b);\n+        friend bool operator!=(const CService& a, const CService& b) { return !(a == b); }\n         friend bool operator<(const CService& a, const CService& b);\n         std::vector<unsigned char> GetKey() const;\n         std::string ToString() const;"
      },
      {
        "sha": "57835b5427785053ad5b3a188d9788810f4149e8",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c084a6609bed24979c2a144743007f8b10a5c70/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c084a6609bed24979c2a144743007f8b10a5c70/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=2c084a6609bed24979c2a144743007f8b10a5c70",
        "patch": "@@ -513,11 +513,7 @@ bool ConnectSocketDirectly(const CService &addrConnect, const SOCKET& hSocket, i\n                 return false;\n             }\n             socklen_t nRetSize = sizeof(nRet);\n-#ifdef WIN32\n-            if (getsockopt(hSocket, SOL_SOCKET, SO_ERROR, (char*)(&nRet), &nRetSize) == SOCKET_ERROR)\n-#else\n-            if (getsockopt(hSocket, SOL_SOCKET, SO_ERROR, &nRet, &nRetSize) == SOCKET_ERROR)\n-#endif\n+            if (getsockopt(hSocket, SOL_SOCKET, SO_ERROR, (sockopt_arg_type)&nRet, &nRetSize) == SOCKET_ERROR)\n             {\n                 LogPrintf(\"getsockopt() for %s failed: %s\\n\", addrConnect.ToString(), NetworkErrorString(WSAGetLastError()));\n                 return false;"
      }
    ]
  }
]