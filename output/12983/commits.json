[
  {
    "sha": "89eab914c4616971cf583c27698133e7c319e390",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OWVhYjkxNGM0NjE2OTcxY2Y1ODNjMjc2OTgxMzNlN2MzMTllMzkw",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-04-13T21:51:21Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-05-08T16:21:32Z"
      },
      "message": "Modify change identification to use hdsplit keypath",
      "tree": {
        "sha": "ff1958710ffa1c31ef4ae2f9a49d34950d7400f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff1958710ffa1c31ef4ae2f9a49d34950d7400f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89eab914c4616971cf583c27698133e7c319e390",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89eab914c4616971cf583c27698133e7c319e390",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/89eab914c4616971cf583c27698133e7c319e390",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89eab914c4616971cf583c27698133e7c319e390/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f2a39946fd42535038e0143cbd289d3070b9f07",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f2a39946fd42535038e0143cbd289d3070b9f07",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f2a39946fd42535038e0143cbd289d3070b9f07"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 20,
      "deletions": 10
    },
    "files": [
      {
        "sha": "271bf6eb338ae189cc679bbf32ffdf1de014ab7c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 10,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89eab914c4616971cf583c27698133e7c319e390/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89eab914c4616971cf583c27698133e7c319e390/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=89eab914c4616971cf583c27698133e7c319e390",
        "patch": "@@ -1327,22 +1327,32 @@ CAmount CWallet::GetCredit(const CTxOut& txout, const isminefilter& filter) cons\n \n bool CWallet::IsChange(const CTxOut& txout) const\n {\n-    // TODO: fix handling of 'change' outputs. The assumption is that any\n-    // payment to a script that is ours, but is not in the address book\n-    // is change. That assumption is likely to break when we implement multisignature\n-    // wallets that return change back into a multi-signature-protected address;\n-    // a better way of identifying which outputs are 'the send' and which are\n-    // 'the change' will need to be implemented (maybe extend CWalletTx to remember\n-    // which output, if any, was change).\n     if (::IsMine(*this, txout.scriptPubKey))\n     {\n-        CTxDestination address;\n-        if (!ExtractDestination(txout.scriptPubKey, address))\n+        CTxDestination dest;\n+        if (!ExtractDestination(txout.scriptPubKey, dest))\n             return true;\n \n         LOCK(cs_wallet);\n-        if (!mapAddressBook.count(address))\n+        // HD Split assumes keypath of m/.../1(')/k\n+        // We allow fall-through since some imported\n+        // keys may be considered change, and wallets\n+        // may have been upgraded to HD split after\n+        // creating change previously.\n+        CKeyID key_id = GetKeyForDestination(*this, dest);\n+        if (!key_id.IsNull()) {\n+            auto it = mapKeyMetadata.find(key_id);\n+            if (it != mapKeyMetadata.end()) {\n+                // Check for path\n+                if (it->second.hdKeypath.find(\"m/0'/1'/\") != std::string::npos) {\n+                    return true;\n+                }\n+            }\n+        }\n+        // Legacy IsChange check\n+        if (!mapAddressBook.count(dest)) {\n             return true;\n+        }\n     }\n     return false;\n }"
      }
    ]
  },
  {
    "sha": "10b18f48d40d1f7f597914151f630cc237cd1908",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMGIxOGY0OGQ0MGQxZjdmNTk3OTE0MTUxZjYzMGNjMjM3Y2QxOTA4",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-04-14T14:58:27Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-05-08T16:21:32Z"
      },
      "message": "test hdplit change detection",
      "tree": {
        "sha": "55291d3b19aea92ec32f0a8f52e0745bdd241ca1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/55291d3b19aea92ec32f0a8f52e0745bdd241ca1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10b18f48d40d1f7f597914151f630cc237cd1908",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10b18f48d40d1f7f597914151f630cc237cd1908",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10b18f48d40d1f7f597914151f630cc237cd1908",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10b18f48d40d1f7f597914151f630cc237cd1908/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "89eab914c4616971cf583c27698133e7c319e390",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89eab914c4616971cf583c27698133e7c319e390",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89eab914c4616971cf583c27698133e7c319e390"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 25,
      "deletions": 8
    },
    "files": [
      {
        "sha": "33f30d36558d626b7a203d06e6a6447710d874a1",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 25,
        "deletions": 8,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10b18f48d40d1f7f597914151f630cc237cd1908/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10b18f48d40d1f7f597914151f630cc237cd1908/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=10b18f48d40d1f7f597914151f630cc237cd1908",
        "patch": "@@ -18,7 +18,7 @@ class WalletHDTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n-        self.extra_args = [[], ['-keypool=0']]\n+        self.extra_args = [[], ['-keypool=1']]\n \n     def run_test(self):\n         # Make sure can't switch off usehd after wallet creation\n@@ -59,13 +59,23 @@ def run_test(self):\n         self.nodes[0].sendtoaddress(non_hd_add, 1)\n         self.nodes[0].generate(1)\n \n+        # Self-send to test hdsplit change detection after wallet restore\n+        self.nodes[1].sendtoaddress(self.nodes[1].getnewaddress(), 1, \"\", \"\", True)\n+        # Note that this coinbase key will be seen *before* the address key above\n+        self.nodes[1].generate(1)\n+        self.sync_all()\n+        self.nodes[0].generate(100)\n+        self.sync_all()\n+\n         # create an internal key (again)\n         change_addr = self.nodes[1].getrawchangeaddress()\n         change_addrV= self.nodes[1].getaddressinfo(change_addr)\n         assert_equal(change_addrV[\"hdkeypath\"], \"m/0'/1'/1'\") #second internal child key\n \n-        self.sync_all()\n-        assert_equal(self.nodes[1].getbalance(), NUM_HD_ADDS + 1)\n+        # Transaction list with address book filled\n+        previous_list = self.nodes[1].listtransactions(\"*\", 100)\n+\n+        assert_equal(self.nodes[1].getbalance(), NUM_HD_ADDS + 1 + 50)\n \n         self.log.info(\"Restore backup ...\")\n         self.stop_node(1)\n@@ -85,30 +95,37 @@ def run_test(self):\n             assert_equal(hd_info_2[\"hdmasterkeyid\"], masterkeyid)\n         assert_equal(hd_add, hd_add_2)\n         connect_nodes_bi(self.nodes, 0, 1)\n+        self.nodes[1].getnewaddress()\n         self.sync_all()\n \n         # Needs rescan\n         self.stop_node(1)\n         self.start_node(1, extra_args=self.extra_args[1] + ['-rescan'])\n-        assert_equal(self.nodes[1].getbalance(), NUM_HD_ADDS + 1)\n+        assert_equal(self.nodes[1].getbalance(), NUM_HD_ADDS + 1 + 50)\n \n         # Try a RPC based rescan\n         self.stop_node(1)\n         shutil.rmtree(os.path.join(self.nodes[1].datadir, \"regtest\", \"blocks\"))\n         shutil.rmtree(os.path.join(self.nodes[1].datadir, \"regtest\", \"chainstate\"))\n         shutil.copyfile(os.path.join(self.nodes[1].datadir, \"hd.bak\"), os.path.join(self.nodes[1].datadir, \"regtest\", \"wallets\", \"wallet.dat\"))\n-        self.start_node(1, extra_args=self.extra_args[1])\n+        # keypool=2 required to \"see\" the coinbase output, which is logically before the previous\n+        # key's output in the block, but was generated after by the wallet.\n+        self.start_node(1, extra_args=self.extra_args[1]+['-keypool=2'])\n         connect_nodes_bi(self.nodes, 0, 1)\n         self.sync_all()\n-        # Wallet automatically scans blocks older than key on startup\n-        assert_equal(self.nodes[1].getbalance(), NUM_HD_ADDS + 1)\n+        # Wallet automatically scans blocks newer than latest key on startup\n+        assert_equal(self.nodes[1].getbalance(), NUM_HD_ADDS + 1 + 50)\n         out = self.nodes[1].rescanblockchain(0, 1)\n         assert_equal(out['start_height'], 0)\n         assert_equal(out['stop_height'], 1)\n         out = self.nodes[1].rescanblockchain()\n         assert_equal(out['start_height'], 0)\n         assert_equal(out['stop_height'], self.nodes[1].getblockcount())\n-        assert_equal(self.nodes[1].getbalance(), NUM_HD_ADDS + 1)\n+        assert_equal(self.nodes[1].getbalance(), NUM_HD_ADDS + 1 + 50)\n+\n+        # Lists used to be able to diverge because of pre-hdsplit IsChange detection.\n+        # A self-send where nDebit > 0, and nothing in address book.\n+        assert_equal(len(previous_list), len(self.nodes[1].listtransactions(\"*\", 100)))\n \n         # send a tx and make sure its using the internal chain for the changeoutput\n         txid = self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1)"
      }
    ]
  }
]