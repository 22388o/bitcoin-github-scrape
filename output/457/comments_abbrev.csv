gavinandresen,2011-08-10T14:33:03Z,"I'm concerned this might make RPC code that implicitly assumes the RPC is single-threaded deadlock or crash.  How much testing did you do-- has this been tested on an in-production, high-RPC-traffic server?\n",https://github.com/bitcoin/bitcoin/pull/457#issuecomment-1773030,1773030,
muggenhor,2011-08-10T15:37:47Z,"It currently still is single-threaded, i.e. all code is still executed from ThreadRPCServer2 via the ""io_service.run_one()"" construct.\n\nThe way it basically works is that certain actions are started (using 'async_*' methods), and get passed along with them an event handler to be called upon that action's completion. The io_service object manages these actions, waits for any of them to complete t",https://github.com/bitcoin/bitcoin/pull/457#issuecomment-1773629,1773629,
muggenhor,2011-08-10T16:42:30Z,PS The main reason for using asynchronous I/O is to allow binding to multiple addresses for RPC without requiring one thread for every socket. This is what enables a dual IPv4/IPv6 stack.\n,https://github.com/bitcoin/bitcoin/pull/457#issuecomment-1774261,1774261,
gavinandresen,2011-08-11T17:39:39Z,"I don't know nuthin about IPv6/boost::asio stuff.  General comment is it seems like this maybe should be part of a larger ""support IPv6"" branch.\n",https://github.com/bitcoin/bitcoin/pull/457#issuecomment-1783949,1783949,
muggenhor,2011-08-11T22:44:51Z,"Well, all that can be supported about IPv6 for RPC is in this branch. So that's exactly what this branch is: a ""support IPv6 for RPC"" branch.\n\nGiven that the RPC code is completely separate from any other networking code it actually makes sense to migrate it separately. That's why I'm not even trying to support IPv6 across all of bitcoin at once, incremental changes tend to work better in my exp",https://github.com/bitcoin/bitcoin/pull/457#issuecomment-1786723,1786723,
muggenhor,2011-09-04T14:02:35Z,I've rebased the branch against master to make it easy to merge in.\n,https://github.com/bitcoin/bitcoin/pull/457#issuecomment-1991389,1991389,
luke-jr,2011-10-12T18:08:28Z,This conflicts with threaded JSON-RPC which is needed by many people. Can you make an IPv6-only version?\n,https://github.com/bitcoin/bitcoin/pull/457#issuecomment-2382453,2382453,
jgarzik,2011-12-19T17:03:35Z,agree w/ first half of luke-jr's comment.  second half... not sure we want an IPv6-only version?\n,https://github.com/bitcoin/bitcoin/pull/457#issuecomment-3205994,3205994,
luke-jr,2011-12-19T17:07:50Z,"I meant a patch that only adds IPv6, without the conflicting async stuff.\n",https://github.com/bitcoin/bitcoin/pull/457#issuecomment-3206070,3206070,
muggenhor,2011-12-19T18:07:17Z,"Adding IPv6 (or any other protocol that requires an additional listening socket) _requires_ event-driven (aka asynchronous I/O). That or a separate thread per listening socket, wich conflicts with the RPC's assumption that RPC code is single threaded...\n\nAdditionally event-driven approaches tend to scale better (less context switching, locking and per-thread resources overhead).\n",https://github.com/bitcoin/bitcoin/pull/457#issuecomment-3206945,3206945,
luke-jr,2011-12-19T18:16:55Z,"Can we do async for listening only, then? Threads are needed for actual RPC calls since some may block.\n",https://github.com/bitcoin/bitcoin/pull/457#issuecomment-3207083,3207083,
muggenhor,2011-12-20T17:21:42Z,Another (probably better) solution would be to have a select(2)-like event-based processing loop. It would have the single-thread advantage of asynchronous I/O but the simplicity of a callback-less design. As I assume that the addition of callbacks in my current implementation is what you like least? (Please confirm/deny that last question/statement.)\n\nThat should localise most of the changes to,https://github.com/bitcoin/bitcoin/pull/457#issuecomment-3221992,3221992,
luke-jr,2011-12-20T17:26:14Z,I dislike the fact that a 'getwork' call will block all other JSON-RPC until it completes.\n,https://github.com/bitcoin/bitcoin/pull/457#issuecomment-3222056,3222056,
muggenhor,2011-12-21T21:02:56Z,"Yes, but that is unrelated to my patch.\n\nThe alternate implementation of IPv6 support I'm thinking of would look somewhat like this pseudocode:\n- create listener sockets (IPv4 and IPv6)\n- asynchronously accept a connection on both listeners (acceptor's in Asio's terminology)\n- from the accept callbacks: place the newly connected socket in a queue, then start a new async accept op\n\nthe mainl",https://github.com/bitcoin/bitcoin/pull/457#issuecomment-3239572,3239572,
luke-jr,2011-12-21T22:40:55Z,"It's related, because your patch conflicts with it. Instead of conflicting, why not implement IPv6 RPC on top of the existing multithreaded JSON-RPC branch (#568)?\n",https://github.com/bitcoin/bitcoin/pull/457#issuecomment-3240785,3240785,
muggenhor,2011-12-22T20:19:58Z,"The reason it conflicts with it is simple of course: there was no multithreaded RPC patch when I wrote this patch.\n\nAs for resolving those conflicts by implementing on top of #568, no promises but I'll look at it in the weekend. Right now I'm going to get some much needed sleep.\n",https://github.com/bitcoin/bitcoin/pull/457#issuecomment-3254297,3254297,
muggenhor,2011-12-24T15:31:51Z,Current branch is on top of #568. I've used the approach outlined above (using a connection queue).\n,https://github.com/bitcoin/bitcoin/pull/457#issuecomment-3268074,3268074,
luke-jr,2011-12-24T18:35:50Z,ACK: Tested fine for me in 'next-test'\n,https://github.com/bitcoin/bitcoin/pull/457#issuecomment-3268629,3268629,
luke-jr,2012-02-05T22:57:30Z,"For some reason, if -rpcallowip is used, it sees local connections as ::ffff:127.0.0.1 and sends a 403 instead of allowing the connection.\n\n(side note: #568 has been rebased)\n",https://github.com/bitcoin/bitcoin/pull/457#issuecomment-3821590,3821590,
jgarzik,2012-05-08T21:04:15Z,Request rebase on top of #1101...  we certainly do want to support IPv6 RPC.\n,https://github.com/bitcoin/bitcoin/pull/457#issuecomment-5586369,5586369,
muggenhor,2012-05-13T17:13:20Z,"@jgarzik I'll work on updating this pull request next Thursday (Ascension Day, national holiday so I'll have some time off).\n",https://github.com/bitcoin/bitcoin/pull/457#issuecomment-5677751,5677751,
jgarzik,2012-05-13T18:49:34Z,"Thanks!\n\nNote that pull #1101 is now upstream, and will be in upcoming version 0.7\n",https://github.com/bitcoin/bitcoin/pull/457#issuecomment-5678448,5678448,
luke-jr,2012-05-13T19:42:40Z,Please don't forget to fix the -rpcallowip issue.\n,https://github.com/bitcoin/bitcoin/pull/457#issuecomment-5678847,5678847,
muggenhor,2012-05-20T13:19:14Z,@luke-jr This also contains a change (in 652eebf08e7f0e32d686d4e36475742fa27f71cc) to treat IPv4-mapped IPv6 addresses (::127.0.0.1 is one) as IPv4 addresses.\n,https://github.com/bitcoin/bitcoin/pull/457#issuecomment-5808816,5808816,
muggenhor,2012-05-21T16:11:22Z,I believe that this pull request is ready for merging.\n,https://github.com/bitcoin/bitcoin/pull/457#issuecomment-5826601,5826601,
sipa,2012-06-09T20:23:15Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/457#issuecomment-6223190,6223190,
Diapolo,2012-06-17T21:31:02Z,"NACK until the last commit is clarified.\n\n@muggenhor Wait, what are you doing there to the shutdown ... we had a long discussion and merged a patch a few days ago. Your last commit is likely to break sth. or at least change the current behaviour once more, see #1439.\n",https://github.com/bitcoin/bitcoin/pull/457#issuecomment-6385032,6385032,
luke-jr,2012-06-22T15:51:36Z,basic_socket_acceptor needs -lmswsock added to Windows builds:\n- bitcoin-qt.pro\n- src/makefile.linux-mingw\n- src/makefile.mingw\n,https://github.com/bitcoin/bitcoin/pull/457#issuecomment-6511023,6511023,
Diapolo,2012-06-22T16:18:46Z,Did anyone mind reading my comment above lukes...? I'm sure the last commit can cause trouble.\n,https://github.com/bitcoin/bitcoin/pull/457#issuecomment-6511831,6511831,
muggenhor,2012-06-24T09:37:46Z,"@luke-jr it's been long since I've done windows development, but don't you mean ws2_32 ? And isn't that linked to already?\n\n@Diapolo yes, I did read your comment. I however have a day job which doesn't leave me much time during the week to reply _immediately_. So being patient enough to wait till the next weekend following your comment might be nice.\n\nThen as for the actual content of your com",https://github.com/bitcoin/bitcoin/pull/457#issuecomment-6531684,6531684,
Diapolo,2012-06-24T10:34:35Z,"@muggenhor I didn't want to hurry you the feedback of another dev would have been sufficient, too. I didn't want to offend you. That said `StartShutdown()` is currently used in bitcoinrpc, main, net and test_bitcoin.\n\nGUI:\n\nStartShutdown() ->  uiInterface.QueueShutdown() -> quit() for QCoreApplication (Qt event loop) -> Shutdown(NULL); in bitcoin.cpp (no exit here) -> return 0; (Bitcoin-Qt exi",https://github.com/bitcoin/bitcoin/pull/457#issuecomment-6531916,6531916,
muggenhor,2012-06-24T11:36:09Z,"@Diapolo as you correctly seem to have noticed nothing is changed for the GUI case (outside of the RPC code).\n\nFor the NOUI case the flow is changed to:\nStartShutdown() -> raise QueueShutdown() signal -> CreateThread(Shutdown, NULL); -> Shutdown(NULL) -> exit(0);\n\nIn addition to that, for both GUI/NOUI the RPC code now uses the QueueShutdown() signal to stop listening for new connections:\nQu",https://github.com/bitcoin/bitcoin/pull/457#issuecomment-6532199,6532199,
sipa,2012-06-24T11:56:01Z,"It does seem to simplify the shutdown code. @Diapolo: any reason to assume things will break with this patch?\n\nBoth bitcoin-qt and bitcoind seem to shutdown fine with this, via RPC stop, UI quit, or SIGINT.\n",https://github.com/bitcoin/bitcoin/pull/457#issuecomment-6532303,6532303,
luke-jr,2012-06-24T12:11:40Z,"@muggenhor basic_socket_acceptor uses [AcceptEx](http://msdn.microsoft.com/en-us/library/windows/desktop/ms737524.aspx), which is defined in mswsock\n",https://github.com/bitcoin/bitcoin/pull/457#issuecomment-6532382,6532382,
muggenhor,2012-06-24T12:18:06Z,"@luke-jr basic_socket_acceptor is already used in mainline, so the problem should exist already. Regardless, I've fixed it as well in my branch.\n",https://github.com/bitcoin/bitcoin/pull/457#issuecomment-6532411,6532411,
Diapolo,2012-06-24T15:16:29Z,I have no further doubts after reading the explanations above. Thanks for clarification!\n,https://github.com/bitcoin/bitcoin/pull/457#issuecomment-6533629,6533629,
luke-jr,2012-05-20T13:38:06Z,"This strikes me as flawed by design, though perhaps that's inherited from boost... does it not have any kind of ""is loopback"" method?\nEven IPv4 has 16,777,216 unique loopback addresses.\n",https://github.com/bitcoin/bitcoin/pull/457#discussion_r850291,850291,src/bitcoinrpc.cpp
muggenhor,2012-05-20T13:44:32Z,"No, it doesn't. As for IPv6, that only has a single loopback address. (::1/128).\n\nAnd while I agree that that ^^ code doesn't address all loopback cases. It _does_ address all loopback cases covered by the previous version of that code.\n\nThat being said, I'll gladly add another commit to improve the IPv4 case (using a netmask check against 127.0.0.0/8).\n",https://github.com/bitcoin/bitcoin/pull/457#discussion_r850295,850295,src/bitcoinrpc.cpp
