[
  {
    "sha": "e222dc2aee263bf28cf19689b9c9ed97da054682",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMjIyZGMyYWVlMjYzYmYyOGNmMTk2ODliOWM5ZWQ5N2RhMDU0Njgy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-07-11T01:31:57Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-07-27T22:04:00Z"
      },
      "message": "Replace ismine with producesignature check in witnessifier\n\nInstead of using ismine to check whether an address can be spent by us,\nmake the witness version of the script or address first and then use\nProduceSignature with the DummySignatureCreator to check if we can\nsolve for the script.\n\nAlso fixes test cases to reflect this change.",
      "tree": {
        "sha": "de4ea9cb1cb903a0916c7b355cebd98e51545a76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de4ea9cb1cb903a0916c7b355cebd98e51545a76"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e222dc2aee263bf28cf19689b9c9ed97da054682",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e222dc2aee263bf28cf19689b9c9ed97da054682",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e222dc2aee263bf28cf19689b9c9ed97da054682",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e222dc2aee263bf28cf19689b9c9ed97da054682/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9edda0c5f5f20bc6b302ad51fa5ec40ed9da184d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9edda0c5f5f20bc6b302ad51fa5ec40ed9da184d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9edda0c5f5f20bc6b302ad51fa5ec40ed9da184d"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 22,
      "deletions": 13
    },
    "files": [
      {
        "sha": "246d81fd5b5d931865ba5c1b12c1b26f8a51cf31",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 8,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e222dc2aee263bf28cf19689b9c9ed97da054682/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e222dc2aee263bf28cf19689b9c9ed97da054682/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=e222dc2aee263bf28cf19689b9c9ed97da054682",
        "patch": "@@ -1067,11 +1067,15 @@ class Witnessifier : public boost::static_visitor<bool>\n     bool operator()(const CKeyID &keyID) {\n         if (pwallet) {\n             CScript basescript = GetScriptForDestination(keyID);\n-            isminetype typ;\n-            typ = IsMine(*pwallet, basescript, SIGVERSION_WITNESS_V0);\n-            if (typ != ISMINE_SPENDABLE && typ != ISMINE_WATCH_SOLVABLE)\n-                return false;\n             CScript witscript = GetScriptForWitness(basescript);\n+            SignatureData sigs;\n+            // This check is to make sure that the script we created can actually be solved for and signed by us\n+            // if we were to have the private keys. This is just to make sure that the script is valid and that,\n+            // if found in a transaction, we would still accept and relay that transcation.\n+            if (!ProduceSignature(DummySignatureCreator(pwallet), witscript, sigs) ||\n+                !VerifyScript(sigs.scriptSig, witscript, &sigs.scriptWitness, MANDATORY_SCRIPT_VERIFY_FLAGS | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, DummySignatureCreator(pwallet).Checker())) {\n+                return false;\n+            }\n             pwallet->AddCScript(witscript);\n             result = CScriptID(witscript);\n             return true;\n@@ -1088,11 +1092,15 @@ class Witnessifier : public boost::static_visitor<bool>\n                 result = scriptID;\n                 return true;\n             }\n-            isminetype typ;\n-            typ = IsMine(*pwallet, subscript, SIGVERSION_WITNESS_V0);\n-            if (typ != ISMINE_SPENDABLE && typ != ISMINE_WATCH_SOLVABLE)\n-                return false;\n             CScript witscript = GetScriptForWitness(subscript);\n+            SignatureData sigs;\n+            // This check is to make sure that the script we created can actually be solved for and signed by us\n+            // if we were to have the private keys. This is just to make sure that the script is valid and that,\n+            // if found in a transaction, we would still accept and relay that transcation.\n+            if (!ProduceSignature(DummySignatureCreator(pwallet), witscript, sigs) ||\n+                !VerifyScript(sigs.scriptSig, witscript, &sigs.scriptWitness, MANDATORY_SCRIPT_VERIFY_FLAGS | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, DummySignatureCreator(pwallet).Checker())) {\n+                return false;\n+            }\n             pwallet->AddCScript(witscript);\n             result = CScriptID(witscript);\n             return true;"
      },
      {
        "sha": "51eaa34a54d4340b4b7e21564794e572e11ecead",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e222dc2aee263bf28cf19689b9c9ed97da054682/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e222dc2aee263bf28cf19689b9c9ed97da054682/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=e222dc2aee263bf28cf19689b9c9ed97da054682",
        "patch": "@@ -459,13 +459,14 @@ def run_test(self):\n         self.mine_and_test_listunspent(unsolvable_after_importaddress, 1)\n         self.mine_and_test_listunspent(unseen_anytime, 0)\n \n-        # addwitnessaddress should refuse to return a witness address if an uncompressed key is used or the address is\n-        # not in the wallet\n+        # addwitnessaddress should refuse to return a witness address if an uncompressed key is used\n         # note that no witness address should be returned by unsolvable addresses\n-        # the multisig_without_privkey_address will fail because its keys were not added with importpubkey\n-        for i in uncompressed_spendable_address + uncompressed_solvable_address + unknown_address + unsolvable_address + [multisig_without_privkey_address]:\n+        for i in uncompressed_spendable_address + uncompressed_solvable_address + unknown_address + unsolvable_address:\n             assert_raises_jsonrpc(-4, \"Public key or redeemscript not known to wallet, or the key is uncompressed\", self.nodes[0].addwitnessaddress, i)\n \n+        # addwitnessaddress should return a witness addresses even if keys are not in the wallet\n+        self.nodes[0].addwitnessaddress(multisig_without_privkey_address)\n+\n         for i in compressed_spendable_address + compressed_solvable_address:\n             witaddress = self.nodes[0].addwitnessaddress(i)\n             # addwitnessaddress should return the same address if it is a known P2SH-witness address\n@@ -542,7 +543,7 @@ def run_test(self):\n         # addwitnessaddress should refuse to return a witness address if an uncompressed key is used\n         # note that a multisig address returned by addmultisigaddress is not solvable until it is added with importaddress\n         # premature_witaddress are not accepted until the script is added with addwitnessaddress first\n-        for i in uncompressed_spendable_address + uncompressed_solvable_address + premature_witaddress + [compressed_solvable_address[1]]:\n+        for i in uncompressed_spendable_address + uncompressed_solvable_address + premature_witaddress:\n             # This will raise an exception\n             assert_raises_jsonrpc(-4, \"Public key or redeemscript not known to wallet, or the key is uncompressed\", self.nodes[0].addwitnessaddress, i)\n "
      }
    ]
  }
]