[
  {
    "sha": "fa6363500d0b11cc8c73d8223cade2719570eb43",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTYzNjM1MDBkMGIxMWNjOGM3M2Q4MjIzY2FkZTI3MTk1NzBlYjQz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-07-22T19:06:49Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-07-22T20:22:46Z"
      },
      "message": "Always connect NotifyEntryRemoved with MempoolEntryRemoved",
      "tree": {
        "sha": "003bee6d72e8572b635eeea223109f0b52848eb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/003bee6d72e8572b635eeea223109f0b52848eb2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa6363500d0b11cc8c73d8223cade2719570eb43",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUg4Owv/TA5cm5tbYSve1DpMIG4jNymnGWE78qkO4qARKIeixuIAaQUJf2ontyIX\nmUeKnV4DrJd1VbHH8LY04iCwFR5kJFYlFHIpHhNpmkMZAFyQskB4aMyNZ64XQ6QP\nB2dl2DgdVAcAOOHZdrAq3xBR5d3rgQcUCGQklUFPjrTVhClCDmMnySYw165gq6++\n67ZGC/Gy/EA+vPH7u37CdqlMUmvx1uQ3qPxFe5mJYrhG1y2OFe+5omm1yKd3BdUx\nBZ/sWjMEB6PSs9kZMMdNlTZQSfwxgyeaZOR+bMdiyzRGmHaCzMAbZ/R4EgNoOYyj\n/kvVIOfNNh+KanuXtle/FKTI3KZ9NcG+QRPTUpkry8ixnHsMDb493j4KhGwY4QFG\nzUjkxckAlqBHItqIYcR/i6syqULOCxMPFgkpJJewTaDnywBmxGHTCqcdJ5RAN/I2\nrqTbPJl9OEJeZPA0RGAs3V7hSF93Ev9SWftra7G5ShGNuC16hDbosTou9fTSGxI2\ncpfnXuAj\n=Ph62\n-----END PGP SIGNATURE-----",
        "payload": "tree 003bee6d72e8572b635eeea223109f0b52848eb2\nparent 51a6e2c4192913c9c18507d8dfb3302500b26cc3\nauthor MarcoFalke <falke.marco@gmail.com> 1563822409 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1563826966 -0400\n\nAlways connect NotifyEntryRemoved with MempoolEntryRemoved\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6363500d0b11cc8c73d8223cade2719570eb43",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa6363500d0b11cc8c73d8223cade2719570eb43",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6363500d0b11cc8c73d8223cade2719570eb43/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "51a6e2c4192913c9c18507d8dfb3302500b26cc3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51a6e2c4192913c9c18507d8dfb3302500b26cc3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51a6e2c4192913c9c18507d8dfb3302500b26cc3"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 15,
      "deletions": 29
    },
    "files": [
      {
        "sha": "10102cbbe02814b54869416e84c9d3c905dcdee3",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6363500d0b11cc8c73d8223cade2719570eb43/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6363500d0b11cc8c73d8223cade2719570eb43/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa6363500d0b11cc8c73d8223cade2719570eb43",
        "patch": "@@ -302,7 +302,6 @@ void Shutdown(InitInterfaces& interfaces)\n     interfaces.chain_clients.clear();\n     UnregisterAllValidationInterfaces();\n     GetMainSignals().UnregisterBackgroundSignalScheduler();\n-    GetMainSignals().UnregisterWithMempoolSignals(mempool);\n     globalVerifyHandle.reset();\n     ECC_Stop();\n     LogPrintf(\"%s: done\\n\", __func__);\n@@ -1285,8 +1284,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n     CScheduler::Function serviceLoop = std::bind(&CScheduler::serviceQueue, &scheduler);\n     threadGroup.create_thread(std::bind(&TraceThread<CScheduler::Function>, \"scheduler\", serviceLoop));\n \n-    GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n-    GetMainSignals().RegisterWithMempoolSignals(mempool);\n+    GetMainSignals().RegisterBackgroundSignalScheduler(scheduler, ::mempool);\n \n     // Create client interfaces for wallets that are supposed to be loaded\n     // according to -wallet and -disablewallet options. This only constructs"
      },
      {
        "sha": "60e28a618ac4cdd4193e39aac134fc140485df9f",
        "filename": "src/test/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6363500d0b11cc8c73d8223cade2719570eb43/src/test/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6363500d0b11cc8c73d8223cade2719570eb43/src/test/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/setup_common.cpp?ref=fa6363500d0b11cc8c73d8223cade2719570eb43",
        "patch": "@@ -78,7 +78,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n     // We have to run a scheduler thread to prevent ActivateBestChain\n     // from blocking due to queue overrun.\n     threadGroup.create_thread(std::bind(&CScheduler::serviceQueue, &scheduler));\n-    GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n+    GetMainSignals().RegisterBackgroundSignalScheduler(scheduler, ::mempool);\n \n     mempool.setSanityCheck(1.0);\n     pblocktree.reset(new CBlockTreeDB(1 << 20, true));"
      },
      {
        "sha": "9443be2cd54ef6fd236ec2954dc4fa3ccee21826",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 19,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6363500d0b11cc8c73d8223cade2719570eb43/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6363500d0b11cc8c73d8223cade2719570eb43/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=fa6363500d0b11cc8c73d8223cade2719570eb43",
        "patch": "@@ -8,6 +8,7 @@\n #include <primitives/block.h>\n #include <scheduler.h>\n #include <txmempool.h>\n+#include <util/memory.h>\n \n #include <list>\n #include <atomic>\n@@ -37,25 +38,27 @@ struct MainSignalsInstance {\n     boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n+    /** Connect NotifyEntryRemoved with MempoolEntryRemoved, which sets off TransactionRemovedFromMempool callbacks */\n+    const std::unique_ptr<boost::signals2::scoped_connection> m_connNotifyEntryRemoved;\n+\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n     std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n \n-    explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+    MainSignalsInstance(CScheduler* pscheduler, std::unique_ptr<boost::signals2::scoped_connection> connNotifyEntryRemoved)\n+        : m_connNotifyEntryRemoved(std::move(connNotifyEntryRemoved)),\n+          m_schedulerClient(pscheduler) {}\n };\n \n static CMainSignals g_signals;\n \n-// This map has to a separate global instead of a member of MainSignalsInstance,\n-// because RegisterWithMempoolSignals is currently called before RegisterBackgroundSignalScheduler,\n-// so MainSignalsInstance hasn't been created yet.\n-static std::unordered_map<CTxMemPool*, boost::signals2::scoped_connection> g_connNotifyEntryRemoved;\n-\n-void CMainSignals::RegisterBackgroundSignalScheduler(CScheduler& scheduler) {\n+void CMainSignals::RegisterBackgroundSignalScheduler(CScheduler& scheduler, CTxMemPool& pool)\n+{\n     assert(!m_internals);\n-    m_internals.reset(new MainSignalsInstance(&scheduler));\n+    auto conn = MakeUnique<boost::signals2::scoped_connection>(pool.NotifyEntryRemoved.connect(std::bind(&CMainSignals::MempoolEntryRemoved, this, std::placeholders::_1, std::placeholders::_2)));\n+    m_internals.reset(new MainSignalsInstance(&scheduler, std::move(conn)));\n }\n \n void CMainSignals::UnregisterBackgroundSignalScheduler() {\n@@ -73,17 +76,6 @@ size_t CMainSignals::CallbacksPending() {\n     return m_internals->m_schedulerClient.CallbacksPending();\n }\n \n-void CMainSignals::RegisterWithMempoolSignals(CTxMemPool& pool) {\n-    g_connNotifyEntryRemoved.emplace(std::piecewise_construct,\n-        std::forward_as_tuple(&pool),\n-        std::forward_as_tuple(pool.NotifyEntryRemoved.connect(std::bind(&CMainSignals::MempoolEntryRemoved, this, std::placeholders::_1, std::placeholders::_2)))\n-    );\n-}\n-\n-void CMainSignals::UnregisterWithMempoolSignals(CTxMemPool& pool) {\n-    g_connNotifyEntryRemoved.erase(&pool);\n-}\n-\n CMainSignals& GetMainSignals()\n {\n     return g_signals;"
      },
      {
        "sha": "b3eeb9c455b0cac1d308f81c37d79544839a1826",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6363500d0b11cc8c73d8223cade2719570eb43/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6363500d0b11cc8c73d8223cade2719570eb43/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=fa6363500d0b11cc8c73d8223cade2719570eb43",
        "patch": "@@ -158,23 +158,19 @@ class CMainSignals {\n     friend void ::UnregisterAllValidationInterfaces();\n     friend void ::CallFunctionInValidationInterfaceQueue(std::function<void ()> func);\n \n+    /** This gets called from the connected mempool and may set off TransactionRemovedFromMempool callbacks */\n     void MempoolEntryRemoved(CTransactionRef tx, MemPoolRemovalReason reason);\n \n public:\n     /** Register a CScheduler to give callbacks which should run in the background (may only be called once) */\n-    void RegisterBackgroundSignalScheduler(CScheduler& scheduler);\n+    void RegisterBackgroundSignalScheduler(CScheduler& scheduler, CTxMemPool& pool);\n     /** Unregister a CScheduler to give callbacks which should run in the background - these callbacks will now be dropped! */\n     void UnregisterBackgroundSignalScheduler();\n     /** Call any remaining callbacks on the calling thread */\n     void FlushBackgroundCallbacks();\n \n     size_t CallbacksPending();\n \n-    /** Register with mempool to call TransactionRemovedFromMempool callbacks */\n-    void RegisterWithMempoolSignals(CTxMemPool& pool);\n-    /** Unregister with mempool */\n-    void UnregisterWithMempoolSignals(CTxMemPool& pool);\n-\n     void UpdatedBlockTip(const CBlockIndex *, const CBlockIndex *, bool fInitialDownload);\n     void TransactionAddedToMempool(const CTransactionRef &);\n     void BlockConnected(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>> &);"
      }
    ]
  }
]