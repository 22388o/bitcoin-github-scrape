[
  {
    "sha": "faad60ce97688047982f5e3614cf6e6a6cca3535",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWFkNjBjZTk3Njg4MDQ3OTgyZjVlMzYxNGNmNmU2YTZjY2EzNTM1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-12-16T18:00:08Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-12-16T19:27:16Z"
      },
      "message": "fees: Remove fallbackfee default",
      "tree": {
        "sha": "926beb5691eb3e589cf62a24e70c4259315e9f4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/926beb5691eb3e589cf62a24e70c4259315e9f4f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faad60ce97688047982f5e3614cf6e6a6cca3535",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faad60ce97688047982f5e3614cf6e6a6cca3535",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faad60ce97688047982f5e3614cf6e6a6cca3535",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faad60ce97688047982f5e3614cf6e6a6cca3535/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df7181952436a90a7f300f2b673321e2ac92ef56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df7181952436a90a7f300f2b673321e2ac92ef56",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df7181952436a90a7f300f2b673321e2ac92ef56"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 36,
      "deletions": 14
    },
    "files": [
      {
        "sha": "defe5a2bc5df598dce5b2efca47bfe9f0c87505f",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faad60ce97688047982f5e3614cf6e6a6cca3535/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faad60ce97688047982f5e3614cf6e6a6cca3535/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=faad60ce97688047982f5e3614cf6e6a6cca3535",
        "patch": "@@ -681,11 +681,14 @@ void SendCoinsDialog::updateSmartFeeLabel()\n     updateCoinControlState(coin_control);\n     coin_control.m_feerate.reset(); // Explicitly use only fee estimation rate for smart fee labels\n     FeeCalculation feeCalc;\n-    CFeeRate feeRate = CFeeRate(GetMinimumFee(1000, coin_control, ::mempool, ::feeEstimator, &feeCalc));\n+    CFeeRate fee_rate = CFeeRate(GetMinimumFee(1000, coin_control, ::mempool, ::feeEstimator, &feeCalc));\n \n-    ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), feeRate.GetFeePerK()) + \"/kB\");\n+    ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), fee_rate.GetFeePerK()) + \"/kB\");\n \n     if (feeCalc.reason == FeeReason::FALLBACK) {\n+        if (fee_rate == 0) {\n+            ui->fallbackFeeWarningLabel->setText(tr(\"No fee estimates available, fallbackfee not set\"));\n+        }\n         ui->labelSmartFee2->show(); // (Smart fee not initialized yet. This usually takes a few blocks...)\n         ui->labelFeeEstimation->setText(\"\");\n         ui->fallbackFeeWarningLabel->setVisible(true);"
      },
      {
        "sha": "216f53b4959957fcbebd49994c5ed79736e537c7",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faad60ce97688047982f5e3614cf6e6a6cca3535/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faad60ce97688047982f5e3614cf6e6a6cca3535/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=faad60ce97688047982f5e3614cf6e6a6cca3535",
        "patch": "@@ -154,6 +154,7 @@ void TestGUI()\n     for (int i = 0; i < 5; ++i) {\n         test.CreateAndProcessBlock({}, GetScriptForRawPubKey(test.coinbaseKey.GetPubKey()));\n     }\n+    CWallet::fallbackFee = CFeeRate(20000);\n     bitdb.MakeMock();\n     std::unique_ptr<CWalletDBWrapper> dbw(new CWalletDBWrapper(&bitdb, \"wallet_test.dat\"));\n     CWallet wallet(std::move(dbw));"
      },
      {
        "sha": "f982f57b23d3e11e2750a7c268cd70a33ce53536",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faad60ce97688047982f5e3614cf6e6a6cca3535/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faad60ce97688047982f5e3614cf6e6a6cca3535/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=faad60ce97688047982f5e3614cf6e6a6cca3535",
        "patch": "@@ -164,7 +164,12 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n         new_fee = total_fee;\n         nNewFeeRate = CFeeRate(total_fee, maxNewTxSize);\n     } else {\n-        new_fee = GetMinimumFee(maxNewTxSize, coin_control, mempool, ::feeEstimator, nullptr /* FeeCalculation */);\n+        FeeCalculation fee_calc;\n+        new_fee = GetMinimumFee(maxNewTxSize, coin_control, mempool, ::feeEstimator, &fee_calc);\n+        if (new_fee == 0 && fee_calc.reason == FeeReason::FALLBACK) {\n+            errors.push_back(\"No fee estimates available, fallbackfee not set\");\n+            return Result::WALLET_ERROR;\n+        }\n         nNewFeeRate = CFeeRate(new_fee, maxNewTxSize);\n \n         // New fee rate must be at least old rate + minimum incremental relay rate"
      },
      {
        "sha": "f4998b977963ba11f7bcab853288408d1e14b315",
        "filename": "src/wallet/fees.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faad60ce97688047982f5e3614cf6e6a6cca3535/src/wallet/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faad60ce97688047982f5e3614cf6e6a6cca3535/src/wallet/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/fees.cpp?ref=faad60ce97688047982f5e3614cf6e6a6cca3535",
        "patch": "@@ -53,6 +53,7 @@ CAmount GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_control, c\n             // if we don't have enough data for estimateSmartFee, then use fallbackFee\n             fee_needed = CWallet::fallbackFee.GetFee(nTxBytes);\n             if (feeCalc) feeCalc->reason = FeeReason::FALLBACK;\n+            if (fee_needed == 0) return fee_needed; // fallbackFee is unset, must return\n         }\n         // Obey mempool min fee when using smart fee estimation\n         CAmount min_mempool_fee = pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nTxBytes);"
      },
      {
        "sha": "262a3a20576a78e9b6f0777e3bd706ed1f8445c6",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faad60ce97688047982f5e3614cf6e6a6cca3535/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faad60ce97688047982f5e3614cf6e6a6cca3535/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=faad60ce97688047982f5e3614cf6e6a6cca3535",
        "patch": "@@ -18,8 +18,8 @@ std::string GetWalletHelpString(bool showDebug)\n     std::string strUsage = HelpMessageGroup(_(\"Wallet options:\"));\n     strUsage += HelpMessageOpt(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"));\n     strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), DEFAULT_KEYPOOL_SIZE));\n-    strUsage += HelpMessageOpt(\"-fallbackfee=<amt>\", strprintf(_(\"A fee rate (in %s/kB) that will be used when fee estimation has insufficient data (default: %s)\"),\n-                                                               CURRENCY_UNIT, FormatMoney(DEFAULT_FALLBACK_FEE)));\n+    strUsage += HelpMessageOpt(\"-fallbackfee=<amt>\", strprintf(_(\"A fee rate (in %s/kB) that will be used when fee estimation has insufficient data.\"), CURRENCY_UNIT) +\n+                                                     \" \" + _(\"If not specified, and smart fee estimates are not yet available, transactions can not be created.\"));\n     strUsage += HelpMessageOpt(\"-discardfee=<amt>\", strprintf(_(\"The fee rate (in %s/kB) that indicates your tolerance for discarding change by adding it to the fee (default: %s). \"\n                                                                 \"Note: An output is discarded if it is dust at this rate, but we will always discard up to the dust relay fee and a discard fee above that is limited by the fee estimate for the longest target\"),\n                                                               CURRENCY_UNIT, FormatMoney(DEFAULT_DISCARD_FEE)));"
      },
      {
        "sha": "7c58ed7274aa251e6d6c1645f2b47bdc75865591",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faad60ce97688047982f5e3614cf6e6a6cca3535/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faad60ce97688047982f5e3614cf6e6a6cca3535/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=faad60ce97688047982f5e3614cf6e6a6cca3535",
        "patch": "@@ -601,6 +601,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n     ListCoinsTestingSetup()\n     {\n         CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n+        CWallet::fallbackFee = CFeeRate(20000);\n         ::bitdb.MakeMock();\n         wallet.reset(new CWallet(std::unique_ptr<CWalletDBWrapper>(new CWalletDBWrapper(&bitdb, \"wallet_test.dat\"))));\n         bool firstRun;"
      },
      {
        "sha": "48d26c128356dadaf9b2b42ebe18ae9c7b956fcc",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faad60ce97688047982f5e3614cf6e6a6cca3535/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faad60ce97688047982f5e3614cf6e6a6cca3535/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=faad60ce97688047982f5e3614cf6e6a6cca3535",
        "patch": "@@ -54,9 +54,9 @@ CFeeRate CWallet::minTxFee = CFeeRate(DEFAULT_TRANSACTION_MINFEE);\n /**\n  * If fee estimation does not have enough data to provide estimates, use this fee instead.\n  * Has no effect if not using fee estimation\n- * Override with -fallbackfee\n+ * Must be set by -fallbackfee\n  */\n-CFeeRate CWallet::fallbackFee = CFeeRate(DEFAULT_FALLBACK_FEE);\n+CFeeRate CWallet::fallbackFee = CFeeRate(0);\n \n CFeeRate CWallet::m_discard_rate = CFeeRate(DEFAULT_DISCARD_FEE);\n \n@@ -2870,10 +2870,14 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n \n                 nFeeNeeded = GetMinimumFee(nBytes, coin_control, ::mempool, ::feeEstimator, &feeCalc);\n \n+                if (nFeeNeeded == 0 && feeCalc.reason == FeeReason::FALLBACK) {\n+                    strFailReason = _(\"No fee estimates available, fallbackfee not set\");\n+                    return false;\n+                }\n+\n                 // If we made it here and we aren't even able to meet the relay fee on the next pass, give up\n                 // because we must be at the maximum allowed fee.\n-                if (nFeeNeeded < ::minRelayTxFee.GetFee(nBytes))\n-                {\n+                if (nFeeNeeded < ::minRelayTxFee.GetFee(nBytes)) {\n                     strFailReason = _(\"Transaction too large for fee policy\");\n                     return false;\n                 }"
      },
      {
        "sha": "bb1a510a0f7cc44d1ddaf430955749cca0116240",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faad60ce97688047982f5e3614cf6e6a6cca3535/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faad60ce97688047982f5e3614cf6e6a6cca3535/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=faad60ce97688047982f5e3614cf6e6a6cca3535",
        "patch": "@@ -43,8 +43,6 @@ extern bool fWalletRbf;\n static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n //! -paytxfee default\n static const CAmount DEFAULT_TRANSACTION_FEE = 0;\n-//! -fallbackfee default\n-static const CAmount DEFAULT_FALLBACK_FEE = 20000;\n //! -m_discard_rate default\n static const CAmount DEFAULT_DISCARD_FEE = 10000;\n //! -mintxfee default"
      },
      {
        "sha": "5994ccece9dbc1cda0435b4ee19c8de4acce3168",
        "filename": "test/functional/smartfees.py",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faad60ce97688047982f5e3614cf6e6a6cca3535/test/functional/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faad60ce97688047982f5e3614cf6e6a6cca3535/test/functional/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/smartfees.py?ref=faad60ce97688047982f5e3614cf6e6a6cca3535",
        "patch": "@@ -143,16 +143,19 @@ def check_estimates(node, fees_seen, max_invalid, print_estimates = True):\n class EstimateFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 3\n+        self.extra_args = [\n+            [\"-maxorphantx=1000\", \"-whitelist=127.0.0.1\"],\n+            [\"-blockmaxsize=17000\", \"-maxorphantx=1000\", \"-deprecatedrpc=estimatefee\"],\n+            [\"-blockmaxsize=8000\", \"-maxorphantx=1000\"]\n+        ]\n \n     def setup_network(self):\n         \"\"\"\n         We'll setup the network to have 3 nodes that all mine with different parameters.\n         But first we need to use one node to create a lot of outputs\n         which we will use to generate our transactions.\n         \"\"\"\n-        self.add_nodes(3, extra_args=[[\"-maxorphantx=1000\", \"-whitelist=127.0.0.1\"],\n-                                      [\"-blockmaxsize=17000\", \"-maxorphantx=1000\", \"-deprecatedrpc=estimatefee\"],\n-                                      [\"-blockmaxsize=8000\", \"-maxorphantx=1000\"]])\n+        self.add_nodes(3, self.extra_args)\n         # Use node0 to mine blocks for input splitting\n         # Node1 mines small blocks but that are bigger than the expected transaction rate.\n         # NOTE: the CreateNewBlock code starts counting block size at 1,000 bytes,\n@@ -195,6 +198,11 @@ def run_test(self):\n         global log\n         log = self.log\n \n+        # Check that no transaction can be created when smart fees are uninitialized and fallbackfee not set\n+        self.start_node(0, extra_args=self.extra_args[0] + ['-fallbackfee='])  # Disable fallbackfee, which is set in the conf file\n+        assert_raises_rpc_error(-4, 'No fee estimates available, fallbackfee not set', lambda: self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1))\n+        self.stop_node(0)\n+\n         # Start node0\n         self.start_node(0)\n         self.txouts = []"
      },
      {
        "sha": "4d48bdaa72fcad74a3b5265b0f93b21026bee346",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faad60ce97688047982f5e3614cf6e6a6cca3535/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faad60ce97688047982f5e3614cf6e6a6cca3535/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=faad60ce97688047982f5e3614cf6e6a6cca3535",
        "patch": "@@ -292,6 +292,7 @@ def initialize_datadir(dirname, n):\n         f.write(\"port=\" + str(p2p_port(n)) + \"\\n\")\n         f.write(\"rpcport=\" + str(rpc_port(n)) + \"\\n\")\n         f.write(\"listenonion=0\\n\")\n+        f.write(\"fallbackfee=0.00020000\\n\")\n     return datadir\n \n def get_datadir_path(dirname, n):"
      }
    ]
  },
  {
    "sha": "faa7577ceba489f9f0bd2705d5ad941ec08339cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWE3NTc3Y2ViYTQ4OWY5ZjBiZDI3MDVkNWFkOTQxZWMwODMzOWNj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-12-16T20:22:10Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-12-16T20:48:55Z"
      },
      "message": "qa: Add fallbackfee no-default tests",
      "tree": {
        "sha": "7ec28308d1377d7888aab422bc69be0ce0152cab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ec28308d1377d7888aab422bc69be0ce0152cab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faa7577ceba489f9f0bd2705d5ad941ec08339cc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa7577ceba489f9f0bd2705d5ad941ec08339cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faa7577ceba489f9f0bd2705d5ad941ec08339cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa7577ceba489f9f0bd2705d5ad941ec08339cc/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faad60ce97688047982f5e3614cf6e6a6cca3535",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faad60ce97688047982f5e3614cf6e6a6cca3535",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faad60ce97688047982f5e3614cf6e6a6cca3535"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 16,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d11faa48bd2edd8f3b266d4d6701371fe5d64280",
        "filename": "test/functional/bumpfee.py",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7577ceba489f9f0bd2705d5ad941ec08339cc/test/functional/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7577ceba489f9f0bd2705d5ad941ec08339cc/test/functional/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bumpfee.py?ref=faa7577ceba489f9f0bd2705d5ad941ec08339cc",
        "patch": "@@ -70,6 +70,7 @@ def run_test(self):\n         test_dust_to_fee(rbf_node, dest_address)\n         test_settxfee(rbf_node, dest_address)\n         test_rebumping(rbf_node, dest_address)\n+        test_no_fallbackfee(self, dest_address)\n         test_rebumping_not_replaceable(rbf_node, dest_address)\n         test_unconfirmed_not_spendable(rbf_node, rbf_node_address)\n         test_bumpfee_metadata(rbf_node, dest_address)\n@@ -209,6 +210,18 @@ def test_rebumping(rbf_node, dest_address):\n     rbf_node.bumpfee(bumped[\"txid\"], {\"totalFee\": 3000})\n \n \n+def test_no_fallbackfee(self, dest_address):\n+    # check that bumping fails, when no fallback fee is set\n+    rbf_node = self.nodes[1]\n+    rbfid = spend_one_input(rbf_node, dest_address)\n+    self.restart_node(1, extra_args=self.extra_args[1] + ['-fallbackfee='])\n+    self.nodes[1].walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n+    assert_raises_rpc_error(-4, \"No fee estimates available, fallbackfee not set\", rbf_node.bumpfee, rbfid)\n+    self.restart_node(1)\n+    self.nodes[1].walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n+    rbf_node.bumpfee(rbfid, {\"totalFee\": 3000})\n+\n+\n def test_rebumping_not_replaceable(rbf_node, dest_address):\n     # check that re-bumping a non-replaceable bump tx fails\n     rbfid = spend_one_input(rbf_node, dest_address)"
      },
      {
        "sha": "c9bf14cdd1c34db8ebc40f61829a6c7a954c80ad",
        "filename": "test/functional/smartfees.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7577ceba489f9f0bd2705d5ad941ec08339cc/test/functional/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7577ceba489f9f0bd2705d5ad941ec08339cc/test/functional/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/smartfees.py?ref=faa7577ceba489f9f0bd2705d5ad941ec08339cc",
        "patch": "@@ -200,6 +200,9 @@ def run_test(self):\n \n         # Check that no transaction can be created when smart fees are uninitialized and fallbackfee not set\n         self.start_node(0, extra_args=self.extra_args[0] + ['-fallbackfee='])  # Disable fallbackfee, which is set in the conf file\n+        assert_raises_rpc_error(-4, 'No fee estimates available, fallbackfee not set', lambda: self.nodes[0].fundrawtransaction(self.nodes[0].createrawtransaction([], {self.nodes[0].getnewaddress(): 1})))\n+        assert_raises_rpc_error(-4, 'No fee estimates available, fallbackfee not set', lambda: self.nodes[0].sendfrom(\"\", self.nodes[0].getnewaddress(), 1))\n+        assert_raises_rpc_error(-6, 'No fee estimates available, fallbackfee not set', lambda: self.nodes[0].sendmany(\"\", {self.nodes[0].getnewaddress(): 1}))\n         assert_raises_rpc_error(-4, 'No fee estimates available, fallbackfee not set', lambda: self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1))\n         self.stop_node(0)\n "
      }
    ]
  }
]