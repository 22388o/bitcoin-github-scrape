[
  {
    "sha": "fc1c282845f6b8436d1ea4c68eb3511034c29bea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzFjMjgyODQ1ZjZiODQzNmQxZWE0YzY4ZWIzNTExMDM0YzI5YmVh",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-05-05T18:07:52Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-05-19T20:34:32Z"
      },
      "message": "rpc/blockchain: Use existing blockman in gettxoutsetinfo\n\nWas missed in last bundle",
      "tree": {
        "sha": "47da55ed78056e496d35860547ecc91f8bcef470",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/47da55ed78056e496d35860547ecc91f8bcef470"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc1c282845f6b8436d1ea4c68eb3511034c29bea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc1c282845f6b8436d1ea4c68eb3511034c29bea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc1c282845f6b8436d1ea4c68eb3511034c29bea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc1c282845f6b8436d1ea4c68eb3511034c29bea/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7d19c85f4a27008cada169b7066f265a07f1ea77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d19c85f4a27008cada169b7066f265a07f1ea77",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7d19c85f4a27008cada169b7066f265a07f1ea77"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "fb1c7c73a255af057374a1d80ca3d54570b92d11",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1c282845f6b8436d1ea4c68eb3511034c29bea/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1c282845f6b8436d1ea4c68eb3511034c29bea/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fc1c282845f6b8436d1ea4c68eb3511034c29bea",
        "patch": "@@ -1196,7 +1196,7 @@ static RPCHelpMan gettxoutsetinfo()\n             CCoinsStats prev_stats{hash_type};\n \n             if (pindex->nHeight > 0) {\n-                GetUTXOStats(coins_view, WITH_LOCK(::cs_main, return std::ref(g_chainman.m_blockman)), prev_stats, node.rpc_interruption_point, pindex->pprev);\n+                GetUTXOStats(coins_view, *blockman, prev_stats, node.rpc_interruption_point, pindex->pprev);\n             }\n \n             UniValue block_info(UniValue::VOBJ);"
      }
    ]
  },
  {
    "sha": "9ecade14252ad1972f668d2d2e4ef44fdfcb944a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZWNhZGUxNDI1MmFkMTk3MmY2NjhkMmQyZTRlZjQ0ZmRmY2I5NDRh",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-04-23T19:18:04Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-05-27T17:49:09Z"
      },
      "message": "rest: Add GetChainman function and use it\n\nThis is not the cleanest change but:\n\n1. It fixes the erroneous use of RPC's Ensure*() in rest.cpp, which\n   cause crashes in REST contexts.\n\n   RPC code wraps all calls in a try/except, REST code does not.\n   Ensure*(), being part of RPC, expects that its throw's will get\n   caught by a try/except. But if you use Ensure*() in REST code, since\n   it doesn't have a try/except wrap, a crash will happen.\n\n2. It is consistent with other functions like GetMemPool.\n\nSomeone can probably make this a bit prettier.",
      "tree": {
        "sha": "579a04b623ae8be344e22c848375b18c8fc1fce8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/579a04b623ae8be344e22c848375b18c8fc1fce8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ecade14252ad1972f668d2d2e4ef44fdfcb944a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ecade14252ad1972f668d2d2e4ef44fdfcb944a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ecade14252ad1972f668d2d2e4ef44fdfcb944a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ecade14252ad1972f668d2d2e4ef44fdfcb944a/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fc1c282845f6b8436d1ea4c68eb3511034c29bea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc1c282845f6b8436d1ea4c68eb3511034c29bea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc1c282845f6b8436d1ea4c68eb3511034c29bea"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 33,
      "deletions": 4
    },
    "files": [
      {
        "sha": "747c7aea19e6724151edf8996843757f2b1941e4",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 4,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ecade14252ad1972f668d2d2e4ef44fdfcb944a/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ecade14252ad1972f668d2d2e4ef44fdfcb944a/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=9ecade14252ad1972f668d2d2e4ef44fdfcb944a",
        "patch": "@@ -107,6 +107,27 @@ static CTxMemPool* GetMemPool(const std::any& context, HTTPRequest* req)\n     return node_context->mempool.get();\n }\n \n+/**\n+ * Get the node context chainstatemanager.\n+ *\n+ * @param[in]  req The HTTP request, whose status code will be set if node\n+ *                 context chainstatemanager is not found.\n+ * @returns        Pointer to the chainstatemanager or nullptr if none found.\n+ */\n+static ChainstateManager* GetChainman(const std::any& context, HTTPRequest* req)\n+{\n+    auto node_context = util::AnyPtr<NodeContext>(context);\n+    if (!node_context || !node_context->chainman) {\n+        RESTERR(req, HTTP_INTERNAL_SERVER_ERROR,\n+                strprintf(\"%s:%d (%s)\\n\"\n+                          \"Internal bug detected: Chainman disabled or instance not found!\\n\"\n+                          \"You may report this issue here: %s\\n\",\n+                          __FILE__, __LINE__, __func__, PACKAGE_BUGREPORT));\n+        return nullptr;\n+    }\n+    return node_context->chainman;\n+}\n+\n static RetFormat ParseDataFormat(std::string& param, const std::string& strReq)\n {\n     const std::string::size_type pos = strReq.rfind('.');\n@@ -181,7 +202,9 @@ static bool rest_headers(const std::any& context,\n     std::vector<const CBlockIndex *> headers;\n     headers.reserve(count);\n     {\n-        ChainstateManager& chainman = EnsureAnyChainman(context);\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n         LOCK(cs_main);\n         CChain& active_chain = chainman.ActiveChain();\n         tip = active_chain.Tip();\n@@ -252,7 +275,9 @@ static bool rest_block(const std::any& context,\n     CBlockIndex* pblockindex = nullptr;\n     CBlockIndex* tip = nullptr;\n     {\n-        ChainstateManager& chainman = EnsureAnyChainman(context);\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n         LOCK(cs_main);\n         tip = chainman.ActiveChain().Tip();\n         pblockindex = chainman.m_blockman.LookupBlockIndex(hash);\n@@ -541,7 +566,9 @@ static bool rest_getutxos(const std::any& context, HTTPRequest* req, const std::\n     std::string bitmapStringRepresentation;\n     std::vector<bool> hits;\n     bitmap.resize((vOutPoints.size() + 7) / 8);\n-    ChainstateManager& chainman = EnsureAnyChainman(context);\n+    ChainstateManager* maybe_chainman = GetChainman(context, req);\n+    if (!maybe_chainman) return false;\n+    ChainstateManager& chainman = *maybe_chainman;\n     {\n         auto process_utxos = [&vOutPoints, &outs, &hits](const CCoinsView& view, const CTxMemPool& mempool) {\n             for (const COutPoint& vOutPoint : vOutPoints) {\n@@ -644,7 +671,9 @@ static bool rest_blockhash_by_height(const std::any& context, HTTPRequest* req,\n \n     CBlockIndex* pblockindex = nullptr;\n     {\n-        ChainstateManager& chainman = EnsureAnyChainman(context);\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n         LOCK(cs_main);\n         const CChain& active_chain = chainman.ActiveChain();\n         if (blockheight > active_chain.Height()) {"
      }
    ]
  },
  {
    "sha": "e6b4aa6eb53dc555ecab2922af35e7a2572faf4f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNmI0YWE2ZWI1M2RjNTU1ZWNhYjI5MjJhZjM1ZTdhMjU3MmZhZjRm",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-04-23T19:24:47Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-05-27T17:50:11Z"
      },
      "message": "miner: Pass in chainman to RegenerateCommitments\n\nPass in chainman instead of prev_block so that we can enforce the\nblock.hashPrevBlock refers to prev_block invariant in the function\nitself.\n\nWe should probably rethink BlockAssembler's API and somehow include\ncommitment regeneration functionality in there. Something like a variant\nof CreateNewBlock that takes in a std::vector<TxRef> and return a CBlock\ninstead of CBlockTemplate. That could avoid reaching for\nLookupBlockIndex at all.",
      "tree": {
        "sha": "42927d85d5a098a2a333d32cbcc0333eaba78283",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/42927d85d5a098a2a333d32cbcc0333eaba78283"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6b4aa6eb53dc555ecab2922af35e7a2572faf4f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6b4aa6eb53dc555ecab2922af35e7a2572faf4f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e6b4aa6eb53dc555ecab2922af35e7a2572faf4f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6b4aa6eb53dc555ecab2922af35e7a2572faf4f/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ecade14252ad1972f668d2d2e4ef44fdfcb944a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ecade14252ad1972f668d2d2e4ef44fdfcb944a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ecade14252ad1972f668d2d2e4ef44fdfcb944a"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 13,
      "deletions": 7
    },
    "files": [
      {
        "sha": "eccddbb04f162bf7a15fe77b8454e32bbc97e1c3",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6b4aa6eb53dc555ecab2922af35e7a2572faf4f/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6b4aa6eb53dc555ecab2922af35e7a2572faf4f/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=e6b4aa6eb53dc555ecab2922af35e7a2572faf4f",
        "patch": "@@ -39,13 +39,21 @@ int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParam\n     return nNewTime - nOldTime;\n }\n \n-void RegenerateCommitments(CBlock& block, CBlockIndex* prev_block)\n+void RegenerateCommitments(CBlock& block, ChainstateManager& chainman)\n {\n     CMutableTransaction tx{*block.vtx.at(0)};\n     tx.vout.erase(tx.vout.begin() + GetWitnessCommitmentIndex(block));\n     block.vtx.at(0) = MakeTransactionRef(tx);\n \n-    WITH_LOCK(::cs_main, assert(g_chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock) == prev_block));\n+    CBlockIndex* prev_block;\n+    {\n+        // TODO: Temporary scope to check correctness of refactored code.\n+        // Should be removed manually after merge of\n+        // https://github.com/bitcoin/bitcoin/pull/20158\n+        LOCK(::cs_main);\n+        assert(std::addressof(g_chainman.m_blockman) == std::addressof(chainman.m_blockman));\n+        prev_block = chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock);\n+    }\n     GenerateCoinbaseCommitment(block, prev_block, Params().GetConsensus());\n \n     block.hashMerkleRoot = BlockMerkleRoot(block);"
      },
      {
        "sha": "10a80f4392e227be574483f71005be60694890e2",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6b4aa6eb53dc555ecab2922af35e7a2572faf4f/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6b4aa6eb53dc555ecab2922af35e7a2572faf4f/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=e6b4aa6eb53dc555ecab2922af35e7a2572faf4f",
        "patch": "@@ -203,6 +203,6 @@ void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned\n int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev);\n \n /** Update an old GenerateCoinbaseCommitment from CreateNewBlock after the block txs have changed */\n-void RegenerateCommitments(CBlock& block, CBlockIndex* prev_block);\n+void RegenerateCommitments(CBlock& block, ChainstateManager& chainman);\n \n #endif // BITCOIN_MINER_H"
      },
      {
        "sha": "6826e6fd07d9826f615f1951e6cbd018a71d4b07",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6b4aa6eb53dc555ecab2922af35e7a2572faf4f/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6b4aa6eb53dc555ecab2922af35e7a2572faf4f/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=e6b4aa6eb53dc555ecab2922af35e7a2572faf4f",
        "patch": "@@ -378,8 +378,7 @@ static RPCHelpMan generateblock()\n \n     // Add transactions\n     block.vtx.insert(block.vtx.end(), txs.begin(), txs.end());\n-    CBlockIndex* prev_block = WITH_LOCK(::cs_main, return chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock));\n-    RegenerateCommitments(block, prev_block);\n+    RegenerateCommitments(block, chainman);\n \n     {\n         LOCK(cs_main);"
      },
      {
        "sha": "f53c505e7c741126e89b7f462c526a2bd6c68b11",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6b4aa6eb53dc555ecab2922af35e7a2572faf4f/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6b4aa6eb53dc555ecab2922af35e7a2572faf4f/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=e6b4aa6eb53dc555ecab2922af35e7a2572faf4f",
        "patch": "@@ -246,8 +246,7 @@ CBlock TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransa\n     for (const CMutableTransaction& tx : txns) {\n         block.vtx.push_back(MakeTransactionRef(tx));\n     }\n-    CBlockIndex* prev_block = WITH_LOCK(::cs_main, return g_chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock));\n-    RegenerateCommitments(block, prev_block);\n+    RegenerateCommitments(block, *Assert(m_node.chainman));\n \n     while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n "
      }
    ]
  },
  {
    "sha": "91226eb91769aad5a63bc671595e1353a2b2247a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTIyNmViOTE3NjlhYWQ1YTYzYmM2NzE1OTVlMTM1M2EyYjIyNDdh",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-09T19:37:31Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-05-27T17:50:11Z"
      },
      "message": "bench: Use existing NodeContext in DuplicateInputs",
      "tree": {
        "sha": "291cdf4aee931e0fdd4841dc4213a9b03e943d58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/291cdf4aee931e0fdd4841dc4213a9b03e943d58"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91226eb91769aad5a63bc671595e1353a2b2247a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91226eb91769aad5a63bc671595e1353a2b2247a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/91226eb91769aad5a63bc671595e1353a2b2247a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91226eb91769aad5a63bc671595e1353a2b2247a/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e6b4aa6eb53dc555ecab2922af35e7a2572faf4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6b4aa6eb53dc555ecab2922af35e7a2572faf4f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e6b4aa6eb53dc555ecab2922af35e7a2572faf4f"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4f6e1122b8b7972901d39b92a541fa3e5d809b67",
        "filename": "src/bench/duplicate_inputs.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91226eb91769aad5a63bc671595e1353a2b2247a/src/bench/duplicate_inputs.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91226eb91769aad5a63bc671595e1353a2b2247a/src/bench/duplicate_inputs.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/duplicate_inputs.cpp?ref=91226eb91769aad5a63bc671595e1353a2b2247a",
        "patch": "@@ -25,7 +25,8 @@ static void DuplicateInputs(benchmark::Bench& bench)\n     CMutableTransaction naughtyTx{};\n \n     LOCK(cs_main);\n-    CBlockIndex* pindexPrev = ::ChainActive().Tip();\n+    assert(std::addressof(::ChainActive()) == std::addressof(testing_setup->m_node.chainman->ActiveChain()));\n+    CBlockIndex* pindexPrev = testing_setup->m_node.chainman->ActiveChain().Tip();\n     assert(pindexPrev != nullptr);\n     block.nBits = GetNextWorkRequired(pindexPrev, &block, chainparams.GetConsensus());\n     block.nNonce = 0;"
      }
    ]
  },
  {
    "sha": "f4a47a1febfa35ab077f2a841fe31a8cd9618250",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNGE0N2ExZmViZmEzNWFiMDc3ZjJhODQxZmUzMWE4Y2Q5NjE4MjUw",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-18T17:32:17Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-05-27T17:50:11Z"
      },
      "message": "bench: Use existing chainman in AssembleBlock",
      "tree": {
        "sha": "c1fba6e501cb618703f27edb185733666b6d6668",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c1fba6e501cb618703f27edb185733666b6d6668"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f4a47a1febfa35ab077f2a841fe31a8cd9618250",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4a47a1febfa35ab077f2a841fe31a8cd9618250",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f4a47a1febfa35ab077f2a841fe31a8cd9618250",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4a47a1febfa35ab077f2a841fe31a8cd9618250/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91226eb91769aad5a63bc671595e1353a2b2247a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91226eb91769aad5a63bc671595e1353a2b2247a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91226eb91769aad5a63bc671595e1353a2b2247a"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b4b33d115f314ef706f3864e8260cdf0f5345ec0",
        "filename": "src/bench/block_assemble.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4a47a1febfa35ab077f2a841fe31a8cd9618250/src/bench/block_assemble.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4a47a1febfa35ab077f2a841fe31a8cd9618250/src/bench/block_assemble.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/block_assemble.cpp?ref=f4a47a1febfa35ab077f2a841fe31a8cd9618250",
        "patch": "@@ -37,7 +37,7 @@ static void AssembleBlock(benchmark::Bench& bench)\n         LOCK(::cs_main); // Required for ::AcceptToMemoryPool.\n \n         for (const auto& txr : txs) {\n-            const MempoolAcceptResult res = ::AcceptToMemoryPool(::ChainstateActive(), *test_setup->m_node.mempool, txr, false /* bypass_limits */);\n+            const MempoolAcceptResult res = ::AcceptToMemoryPool(test_setup->m_node.chainman->ActiveChainstate(), *test_setup->m_node.mempool, txr, false /* bypass_limits */);\n             assert(res.m_result_type == MempoolAcceptResult::ResultType::VALID);\n         }\n     }"
      }
    ]
  },
  {
    "sha": "db33cde80fff749c6adff9e91fca5f27f4bb6278",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjMzY2RlODBmZmY3NDljNmFkZmY5ZTkxZmNhNWYyN2Y0YmI2Mjc4",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-14T20:48:17Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-05-27T17:50:11Z"
      },
      "message": "index: Add chainstate member to BaseIndex",
      "tree": {
        "sha": "4e994189869837823ae4fde2c65cdbc11cfe7bf6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e994189869837823ae4fde2c65cdbc11cfe7bf6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db33cde80fff749c6adff9e91fca5f27f4bb6278",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db33cde80fff749c6adff9e91fca5f27f4bb6278",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db33cde80fff749c6adff9e91fca5f27f4bb6278",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db33cde80fff749c6adff9e91fca5f27f4bb6278/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4a47a1febfa35ab077f2a841fe31a8cd9618250",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4a47a1febfa35ab077f2a841fe31a8cd9618250",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4a47a1febfa35ab077f2a841fe31a8cd9618250"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 32,
      "deletions": 26
    },
    "files": [
      {
        "sha": "88a66cc0d5a0adf8957295f3c45da2c265dec319",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 16,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db33cde80fff749c6adff9e91fca5f27f4bb6278/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db33cde80fff749c6adff9e91fca5f27f4bb6278/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=db33cde80fff749c6adff9e91fca5f27f4bb6278",
        "patch": "@@ -63,30 +63,31 @@ bool BaseIndex::Init()\n     if (locator.IsNull()) {\n         m_best_block_index = nullptr;\n     } else {\n-        m_best_block_index = g_chainman.m_blockman.FindForkInGlobalIndex(::ChainActive(), locator);\n+        m_best_block_index = m_chainstate->m_blockman.FindForkInGlobalIndex(m_chainstate->m_chain, locator);\n     }\n-    m_synced = m_best_block_index.load() == ::ChainActive().Tip();\n+    CChain& active_chain = m_chainstate->m_chain;\n+    m_synced = m_best_block_index.load() == active_chain.Tip();\n     if (!m_synced) {\n         bool prune_violation = false;\n         if (!m_best_block_index) {\n             // index is not built yet\n             // make sure we have all block data back to the genesis\n-            const CBlockIndex* block = ::ChainActive().Tip();\n+            const CBlockIndex* block = active_chain.Tip();\n             while (block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA)) {\n                 block = block->pprev;\n             }\n-            prune_violation = block != ::ChainActive().Genesis();\n+            prune_violation = block != active_chain.Genesis();\n         }\n         // in case the index has a best block set and is not fully synced\n         // check if we have the required blocks to continue building the index\n         else {\n             const CBlockIndex* block_to_test = m_best_block_index.load();\n-            if (!ChainActive().Contains(block_to_test)) {\n+            if (!active_chain.Contains(block_to_test)) {\n                 // if the bestblock is not part of the mainchain, find the fork\n                 // and make sure we have all data down to the fork\n-                block_to_test = ::ChainActive().FindFork(block_to_test);\n+                block_to_test = active_chain.FindFork(block_to_test);\n             }\n-            const CBlockIndex* block = ::ChainActive().Tip();\n+            const CBlockIndex* block = active_chain.Tip();\n             prune_violation = true;\n             // check backwards from the tip if we have all block data until we reach the indexes bestblock\n             while (block_to_test && block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA)) {\n@@ -104,20 +105,20 @@ bool BaseIndex::Init()\n     return true;\n }\n \n-static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev, CChain& chain) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n \n     if (!pindex_prev) {\n-        return ::ChainActive().Genesis();\n+        return chain.Genesis();\n     }\n \n-    const CBlockIndex* pindex = ::ChainActive().Next(pindex_prev);\n+    const CBlockIndex* pindex = chain.Next(pindex_prev);\n     if (pindex) {\n         return pindex;\n     }\n \n-    return ::ChainActive().Next(::ChainActive().FindFork(pindex_prev));\n+    return chain.Next(chain.FindFork(pindex_prev));\n }\n \n void BaseIndex::ThreadSync()\n@@ -140,7 +141,7 @@ void BaseIndex::ThreadSync()\n \n             {\n                 LOCK(cs_main);\n-                const CBlockIndex* pindex_next = NextSyncBlock(pindex);\n+                const CBlockIndex* pindex_next = NextSyncBlock(pindex, m_chainstate->m_chain);\n                 if (!pindex_next) {\n                     m_best_block_index = pindex;\n                     m_synced = true;\n@@ -203,7 +204,7 @@ bool BaseIndex::Commit()\n bool BaseIndex::CommitInternal(CDBBatch& batch)\n {\n     LOCK(cs_main);\n-    GetDB().WriteBestBlock(batch, ::ChainActive().GetLocator(m_best_block_index));\n+    GetDB().WriteBestBlock(batch, m_chainstate->m_chain.GetLocator(m_best_block_index));\n     return true;\n }\n \n@@ -279,7 +280,7 @@ void BaseIndex::ChainStateFlushed(const CBlockLocator& locator)\n     const CBlockIndex* locator_tip_index;\n     {\n         LOCK(cs_main);\n-        locator_tip_index = g_chainman.m_blockman.LookupBlockIndex(locator_tip_hash);\n+        locator_tip_index = m_chainstate->m_blockman.LookupBlockIndex(locator_tip_hash);\n     }\n \n     if (!locator_tip_index) {\n@@ -320,7 +321,7 @@ bool BaseIndex::BlockUntilSyncedToCurrentChain() const\n         // Skip the queue-draining stuff if we know we're caught up with\n         // ::ChainActive().Tip().\n         LOCK(cs_main);\n-        const CBlockIndex* chain_tip = ::ChainActive().Tip();\n+        const CBlockIndex* chain_tip = m_chainstate->m_chain.Tip();\n         const CBlockIndex* best_block_index = m_best_block_index.load();\n         if (best_block_index->GetAncestor(chain_tip->nHeight) == chain_tip) {\n             return true;\n@@ -337,8 +338,10 @@ void BaseIndex::Interrupt()\n     m_interrupt();\n }\n \n-bool BaseIndex::Start()\n+bool BaseIndex::Start(CChainState& active_chainstate)\n {\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n+    m_chainstate = &active_chainstate;\n     // Need to register this ValidationInterface before running Init(), so that\n     // callbacks are not missed if Init sets m_synced to true.\n     RegisterValidationInterface(this);"
      },
      {
        "sha": "df4bdff1eaa78d1378943d795051d07f019bb03d",
        "filename": "src/index/base.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db33cde80fff749c6adff9e91fca5f27f4bb6278/src/index/base.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db33cde80fff749c6adff9e91fca5f27f4bb6278/src/index/base.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.h?ref=db33cde80fff749c6adff9e91fca5f27f4bb6278",
        "patch": "@@ -12,6 +12,7 @@\n #include <validationinterface.h>\n \n class CBlockIndex;\n+class CChainState;\n \n struct IndexSummary {\n     std::string name;\n@@ -75,8 +76,9 @@ class BaseIndex : public CValidationInterface\n     /// to a chain reorganization), the index must halt until Commit succeeds or else it could end up\n     /// getting corrupted.\n     bool Commit();\n-\n protected:\n+    CChainState* m_chainstate{nullptr};\n+\n     void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex) override;\n \n     void ChainStateFlushed(const CBlockLocator& locator) override;\n@@ -117,7 +119,7 @@ class BaseIndex : public CValidationInterface\n \n     /// Start initializes the sync state and registers the instance as a\n     /// ValidationInterface so that it stays in sync with blockchain updates.\n-    [[nodiscard]] bool Start();\n+    [[nodiscard]] bool Start(CChainState& active_chainstate);\n \n     /// Stops the instance from staying in sync with blockchain updates.\n     void Stop();"
      },
      {
        "sha": "6f841f166206885db4150ef3b81336255d5d88a9",
        "filename": "src/index/coinstatsindex.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db33cde80fff749c6adff9e91fca5f27f4bb6278/src/index/coinstatsindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db33cde80fff749c6adff9e91fca5f27f4bb6278/src/index/coinstatsindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/coinstatsindex.cpp?ref=db33cde80fff749c6adff9e91fca5f27f4bb6278",
        "patch": "@@ -266,7 +266,7 @@ bool CoinStatsIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* n\n \n     {\n         LOCK(cs_main);\n-        CBlockIndex* iter_tip{g_chainman.m_blockman.LookupBlockIndex(current_tip->GetBlockHash())};\n+        CBlockIndex* iter_tip{m_chainstate->m_blockman.LookupBlockIndex(current_tip->GetBlockHash())};\n         const auto& consensus_params{Params().GetConsensus()};\n \n         do {"
      },
      {
        "sha": "09984b1abfdf36bcfaa40990c4428cb856c0fe55",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db33cde80fff749c6adff9e91fca5f27f4bb6278/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db33cde80fff749c6adff9e91fca5f27f4bb6278/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=db33cde80fff749c6adff9e91fca5f27f4bb6278",
        "patch": "@@ -204,7 +204,7 @@ bool TxIndex::Init()\n     // Attempt to migrate txindex from the old database to the new one. Even if\n     // chain_tip is null, the node could be reindexing and we still want to\n     // delete txindex records in the old database.\n-    if (!m_db->MigrateData(*pblocktree, ::ChainActive().GetLocator())) {\n+    if (!m_db->MigrateData(*pblocktree, m_chainstate->m_chain.GetLocator())) {\n         return false;\n     }\n "
      },
      {
        "sha": "cd77e8da3bc991cb4e469ec55bd82ac8f98aa011",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db33cde80fff749c6adff9e91fca5f27f4bb6278/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db33cde80fff749c6adff9e91fca5f27f4bb6278/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=db33cde80fff749c6adff9e91fca5f27f4bb6278",
        "patch": "@@ -1550,21 +1550,21 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     // ********************************************************* Step 8: start indexers\n     if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n         g_txindex = std::make_unique<TxIndex>(nTxIndexCache, false, fReindex);\n-        if (!g_txindex->Start()) {\n+        if (!g_txindex->Start(::ChainstateActive())) {\n             return false;\n         }\n     }\n \n     for (const auto& filter_type : g_enabled_filter_types) {\n         InitBlockFilterIndex(filter_type, filter_index_cache, false, fReindex);\n-        if (!GetBlockFilterIndex(filter_type)->Start()) {\n+        if (!GetBlockFilterIndex(filter_type)->Start(::ChainstateActive())) {\n             return false;\n         }\n     }\n \n     if (args.GetBoolArg(\"-coinstatsindex\", DEFAULT_COINSTATSINDEX)) {\n         g_coin_stats_index = std::make_unique<CoinStatsIndex>(/* cache size */ 0, false, fReindex);\n-        if (!g_coin_stats_index->Start()) {\n+        if (!g_coin_stats_index->Start(::ChainstateActive())) {\n             return false;\n         }\n     }"
      },
      {
        "sha": "2f532ef5983539fb02695bd604f7fabab7bf3acb",
        "filename": "src/test/blockfilter_index_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db33cde80fff749c6adff9e91fca5f27f4bb6278/src/test/blockfilter_index_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db33cde80fff749c6adff9e91fca5f27f4bb6278/src/test/blockfilter_index_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_index_tests.cpp?ref=db33cde80fff749c6adff9e91fca5f27f4bb6278",
        "patch": "@@ -131,7 +131,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n     // BlockUntilSyncedToCurrentChain should return false before index is started.\n     BOOST_CHECK(!filter_index.BlockUntilSyncedToCurrentChain());\n \n-    BOOST_REQUIRE(filter_index.Start());\n+    BOOST_REQUIRE(filter_index.Start(::ChainstateActive()));\n \n     // Allow filter index to catch up with the block index.\n     constexpr int64_t timeout_ms = 10 * 1000;"
      },
      {
        "sha": "106fcd2a33ec80a78031de9eb0249697b6a62f28",
        "filename": "src/test/coinstatsindex_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db33cde80fff749c6adff9e91fca5f27f4bb6278/src/test/coinstatsindex_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db33cde80fff749c6adff9e91fca5f27f4bb6278/src/test/coinstatsindex_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coinstatsindex_tests.cpp?ref=db33cde80fff749c6adff9e91fca5f27f4bb6278",
        "patch": "@@ -32,7 +32,7 @@ BOOST_FIXTURE_TEST_CASE(coinstatsindex_initial_sync, TestChain100Setup)\n     // is started.\n     BOOST_CHECK(!coin_stats_index.BlockUntilSyncedToCurrentChain());\n \n-    BOOST_REQUIRE(coin_stats_index.Start());\n+    BOOST_REQUIRE(coin_stats_index.Start(::ChainstateActive()));\n \n     // Allow the CoinStatsIndex to catch up with the block index that is syncing\n     // in a background thread."
      },
      {
        "sha": "d47c54fd6e7599aab0f2eba20d78bcae497178d9",
        "filename": "src/test/txindex_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db33cde80fff749c6adff9e91fca5f27f4bb6278/src/test/txindex_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db33cde80fff749c6adff9e91fca5f27f4bb6278/src/test/txindex_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txindex_tests.cpp?ref=db33cde80fff749c6adff9e91fca5f27f4bb6278",
        "patch": "@@ -7,6 +7,7 @@\n #include <script/standard.h>\n #include <test/util/setup_common.h>\n #include <util/time.h>\n+#include <validation.h>\n \n #include <boost/test/unit_test.hpp>\n \n@@ -27,7 +28,7 @@ BOOST_FIXTURE_TEST_CASE(txindex_initial_sync, TestChain100Setup)\n     // BlockUntilSyncedToCurrentChain should return false before txindex is started.\n     BOOST_CHECK(!txindex.BlockUntilSyncedToCurrentChain());\n \n-    BOOST_REQUIRE(txindex.Start());\n+    BOOST_REQUIRE(txindex.Start(::ChainstateActive()));\n \n     // Allow tx index to catch up with the block index.\n     constexpr int64_t timeout_ms = 10 * 1000;"
      }
    ]
  },
  {
    "sha": "7a799c9c2b8652e780d1fd5e1bf7d05b026c1c1a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTc5OWM5YzJiODY1MmU3ODBkMWZkNWUxYmY3ZDA1YjAyNmMxYzFh",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-05-07T18:50:10Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-05-27T17:50:11Z"
      },
      "message": "index: refactor-only: Reuse CChain ref",
      "tree": {
        "sha": "0ac4a71e632ab1ff1be8e37699ee7521b5917b9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ac4a71e632ab1ff1be8e37699ee7521b5917b9e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a799c9c2b8652e780d1fd5e1bf7d05b026c1c1a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a799c9c2b8652e780d1fd5e1bf7d05b026c1c1a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a799c9c2b8652e780d1fd5e1bf7d05b026c1c1a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a799c9c2b8652e780d1fd5e1bf7d05b026c1c1a/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "db33cde80fff749c6adff9e91fca5f27f4bb6278",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db33cde80fff749c6adff9e91fca5f27f4bb6278",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db33cde80fff749c6adff9e91fca5f27f4bb6278"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "3a61af28b7333a82486133516729e99d0d15db57",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a799c9c2b8652e780d1fd5e1bf7d05b026c1c1a/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a799c9c2b8652e780d1fd5e1bf7d05b026c1c1a/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=7a799c9c2b8652e780d1fd5e1bf7d05b026c1c1a",
        "patch": "@@ -60,12 +60,12 @@ bool BaseIndex::Init()\n     }\n \n     LOCK(cs_main);\n+    CChain& active_chain = m_chainstate->m_chain;\n     if (locator.IsNull()) {\n         m_best_block_index = nullptr;\n     } else {\n-        m_best_block_index = m_chainstate->m_blockman.FindForkInGlobalIndex(m_chainstate->m_chain, locator);\n+        m_best_block_index = m_chainstate->m_blockman.FindForkInGlobalIndex(active_chain, locator);\n     }\n-    CChain& active_chain = m_chainstate->m_chain;\n     m_synced = m_best_block_index.load() == active_chain.Tip();\n     if (!m_synced) {\n         bool prune_violation = false;"
      }
    ]
  }
]