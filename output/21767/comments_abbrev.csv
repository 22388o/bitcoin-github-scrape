DrahtBot,2021-04-24 01:14:19,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21726 (Improve Indices on pruned nodes via prune blockers by fjahr)\n* #21526 (validation: UpdateTip/CheckBlockIndex assu",https://github.com/bitcoin/bitcoin/pull/21767#issuecomment-826010997,826010997,
laanwj,2021-05-05 12:09:13,"Looks like this accumulated a silent merge conflict:\n```\nâ€¦/bitcoin/src/test/coinstatsindex_tests.cpp:35:28: error: too few arguments to function call, single argument 'active_chainstate' was not specified\n    coin_stats_index.Start();\n    ~~~~~~~~~~~~~~~~~~~~~~ ^\nâ€¦/bitcoin/src/index/base.h:122:10: note: 'Start' declared here\n    void Start(CChainState& active_chainstate);\n         ^",https://github.com/bitcoin/bitcoin/pull/21767#issuecomment-832636493,832636493,
dongcarl,2021-05-07 18:52:24,"Pushed 0945b4117e -> b04370dbb5\n- Addressed: https://github.com/bitcoin/bitcoin/pull/21767#discussion_r627846989, https://github.com/bitcoin/bitcoin/pull/21767#discussion_r627847595, https://github.com/bitcoin/bitcoin/pull/21767#discussion_r627853739",https://github.com/bitcoin/bitcoin/pull/21767#issuecomment-834691206,834691206,
jamesob,2021-05-12 17:06:07,"Concept ACK, full review soon",https://github.com/bitcoin/bitcoin/pull/21767#issuecomment-839946136,839946136,
dongcarl,2021-05-19 20:45:13,"Pushed b04370dbb55e61e168cbf0aba3d29fb882a46bec -> 6ef9163cc4604177fbdab5b644f7b2af7a33204b\n- Rebased over master",https://github.com/bitcoin/bitcoin/pull/21767#issuecomment-844459136,844459136,
dongcarl,2021-05-27 18:07:51,"Pushed 6ef9163cc4604177fbdab5b644f7b2af7a33204b -> 7a799c9c2b8652e780d1fd5e1bf7d05b026c1c1a\n- Added REST crash explanation to commit message per: https://github.com/bitcoin/bitcoin/pull/21767#discussion_r637169193",https://github.com/bitcoin/bitcoin/pull/21767#issuecomment-849834091,849834091,
jarolrod,2021-05-28 01:59:03,"ACK  7a799c9\n\nEasy to follow what's going on, the assert statements and tests also give assurance to there being no change in behavior. Nice to see how this gets wrapped up on the next bundle.",https://github.com/bitcoin/bitcoin/pull/21767#issuecomment-850056378,850056378,
ariard,2021-05-28 18:09:07,Code Review ACK 7a799c9,https://github.com/bitcoin/bitcoin/pull/21767#issuecomment-850584902,850584902,
fjahr,2021-05-30 21:27:40,re-ACK 7a799c9c2b8652e780d1fd5e1bf7d05b026c1c1a,https://github.com/bitcoin/bitcoin/pull/21767#issuecomment-851063809,851063809,
MarcoFalke,2021-06-01 11:18:42,"review ACK 7a799c9c2b8652e780d1fd5e1bf7d05b026c1c1a ðŸŒ \n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nreview ACK 7a799c9c2b8652e780d1fd5e1bf7d05b026c1c1a ðŸŒ \n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgnkAv/eYSF8/6fmyM3n1fjSVmbmXT74brAbRsg0tME",https://github.com/bitcoin/bitcoin/pull/21767#issuecomment-852043606,852043606,
ryanofsky,2021-05-07 00:28:38,"In commit ""rest: Add GetChainman function and use it"" (a839078c20f4ac3d92e14af7b287f2f0fddbc61e)\n\nIt seems like this should say `if (!node_context || !node_context->chainman)` otherwise the http error won't be set in the null chainman case.",https://github.com/bitcoin/bitcoin/pull/21767#discussion_r627846989,627846989,src/rest.cpp
ryanofsky,2021-05-07 00:30:39,"In commit ""rest: Add GetChainman function and use it"" (a839078c20f4ac3d92e14af7b287f2f0fddbc61e)\n\nIf this condition is never expected, then maybe this should use `HTTP_INTERNAL_SERVER_ERROR` to flag that this is a bug in request handling, not an invalid request.",https://github.com/bitcoin/bitcoin/pull/21767#discussion_r627847595,627847595,src/rest.cpp
ryanofsky,2021-05-07 00:33:15,"In commit ""rest: Add GetChainman function and use it"" (a839078c20f4ac3d92e14af7b287f2f0fddbc61e)\n\nre: ""Someone can probably make this a bit prettier,"" your current version of this seems fine to me, but if you wanted to make it more minimal you could use CHECK_NONFATAL and catch the NonFatalCheckError exception in here, I think: https://github.com/bitcoin/bitcoin/blob/06d573f053c63eb6521c62d210",https://github.com/bitcoin/bitcoin/pull/21767#discussion_r627848313,627848313,src/rest.cpp
ryanofsky,2021-05-07 00:46:16,"In commit ""miner: Pass in chainman to RegenerateCommitments"" (f5368a525b3d5b93d06c83101497de5aaa6fe1c8)\n\nIt seems like this could take blockman reference instead of a chainman reference to be a little more limited. Doesn't matter though, all version of this function seem about the same to me.",https://github.com/bitcoin/bitcoin/pull/21767#discussion_r627852105,627852105,src/miner.cpp
ryanofsky,2021-05-07 00:50:26,"In commit ""index: Add chainstate member to BaseIndex"" (0945b4117e0209d156a6b74c407f4d32e0cf2c1a)\n\nSeems like active_chain could be used above too. Fine either way in case this was intentional, though.",https://github.com/bitcoin/bitcoin/pull/21767#discussion_r627853739,627853739,src/index/base.cpp
dongcarl,2021-05-07 18:57:48,"Unfortunately if we take a blockman reference, then callers would need to take `cs_main` to reach into ChainMan for the blockman ref :-/\n\nSomething for another day I think! Added to: #21766",https://github.com/bitcoin/bitcoin/pull/21767#discussion_r628439658,628439658,src/miner.cpp
dongcarl,2021-05-07 19:07:51,"Hmmmm, how could we differentiate between NOT_FOUND like the ""no mempool""-case and INTERNAL_SERVER_ERROR like the ""no Context/Chainman""-case here?",https://github.com/bitcoin/bitcoin/pull/21767#discussion_r628449195,628449195,src/rest.cpp
ryanofsky,2021-05-07 20:26:55,"re: https://github.com/bitcoin/bitcoin/pull/21767#discussion_r628449195\n\n> Hmmmm, how could we differentiate between NOT_FOUND like the ""no mempool""-case and INTERNAL_SERVER_ERROR like the ""no Context/Chainman""-case here?\n\nI didn't realize that was intentional and I do think the your approach is fine, but you wanted to use the NonFatalCheckError approach, you would just add:\n\n```\ncla",https://github.com/bitcoin/bitcoin/pull/21767#discussion_r628494664,628494664,src/rest.cpp
ryanofsky,2021-05-07 20:36:59,"Oh I see see the mempool code you're referring to is preexisting. That would more incline towards following previous pattern like you're doing I think. I'm sure you could just set the 404 one way and the 500 the other way, too though. Again any approach seems fine and I was just responding originally to dissatisfaction in the commit message.",https://github.com/bitcoin/bitcoin/pull/21767#discussion_r628502581,628502581,src/rest.cpp
jnewbery,2021-05-09 15:24:37,"I don't think this is necessarily a bug. Once chainman is deglobalized, it should be theoretically possible to run without a chainman. I think just having a message ""Chainman disabled or instance not found"" (similar to if mempool isn't found) is sufficient.",https://github.com/bitcoin/bitcoin/pull/21767#discussion_r628905295,628905295,src/rest.cpp
jnewbery,2021-05-09 15:37:05,Perhaps just pass in a `BlockManager&` here?,https://github.com/bitcoin/bitcoin/pull/21767#discussion_r628906795,628906795,src/miner.h
jnewbery,2021-05-09 15:38:19,Does this need to be in the `cs_main` scope?,https://github.com/bitcoin/bitcoin/pull/21767#discussion_r628906943,628906943,src/bench/duplicate_inputs.cpp
jnewbery,2021-05-09 15:38:28,"```suggestion\n    CBlockIndex* pindexPrev = testing_setup->m_node.chainman->ActiveTip();\n```",https://github.com/bitcoin/bitcoin/pull/21767#discussion_r628906955,628906955,src/bench/duplicate_inputs.cpp
jnewbery,2021-05-09 15:42:56,I really don't like `CChain` becoming part of chainstate's public interface. It's too low level - code outside validation shouldn't be interacting directly with that object and should be using higher level interface functions.,https://github.com/bitcoin/bitcoin/pull/21767#discussion_r628907425,628907425,src/index/base.cpp
jnewbery,2021-05-09 15:47:37,"Any reason that you decided to put this in the `Start()` method rather than the constructor. You have access to the `::ChainstateActive()` object at the point you construct the index objects.\n\nAdding this parameter to the ctor would allow you to set `m_chainstate` in the initializer list and make it a const member.",https://github.com/bitcoin/bitcoin/pull/21767#discussion_r628907979,628907979,src/index/base.h
MarcoFalke,2021-05-12 06:30:02,"This is the 4th time the same function gets changed around. I think we should decide what to settle on, and ideally provide a rationale for it. \n\nhttps://github.com/bitcoin/bitcoin/pull/21391#discussion_r615237925",https://github.com/bitcoin/bitcoin/pull/21767#discussion_r630759329,630759329,src/miner.h
MarcoFalke,2021-05-12 06:30:41,What is the point of running a bitcoin full node without a blockchain?,https://github.com/bitcoin/bitcoin/pull/21767#discussion_r630759634,630759634,src/rest.cpp
jnewbery,2021-05-12 08:01:11,"Testing mostly, but you could also imagine using Bitcoin Core as an addr relayer without a blockchain (eg http://www.erisian.com.au/bitcoin-core-dev/log-2020-12-16.html#l-583), or serving compact block indexes.",https://github.com/bitcoin/bitcoin/pull/21767#discussion_r630813812,630813812,src/rest.cpp
jnewbery,2021-05-12 08:20:04,"I think fundamentally the issue here is with `generateblock()`, which calls into miner.cpp to construct the block, then changes the transactions in that block, and then calls back into miner.cpp to fix up the coinbase commitment. It'd be a much simpler interface if `generateblock()` just passed in a const ref to the vector of transactions it wants to include in its first call to miner.cpp.\n\nI'",https://github.com/bitcoin/bitcoin/pull/21767#discussion_r630827371,630827371,src/miner.h
dongcarl,2021-05-19 20:23:25,"I believe I did this mostly because ctors are not inherited, whereas methods are. If I were to make `m_chainstate` be a const member and initialized in the ctor, I'd have to change the ctor of every subclass.",https://github.com/bitcoin/bitcoin/pull/21767#discussion_r635558895,635558895,src/index/base.h
dongcarl,2021-05-19 20:26:56,Do you mean the `m_chain` member specifically or any kind of `CChain`? It seems that we were already using a `CChain` previously when we were caling `::ChainActive()`. Happy to document and add to #21766 so nothing gets lost!,https://github.com/bitcoin/bitcoin/pull/21767#discussion_r635561010,635561010,src/index/base.cpp
dongcarl,2021-05-19 20:30:20,"I've been making changes with the assumption that chainman is considered absolutely necessary. If we decide that running bitcoin without a chainman is a usecase we want to support, I think we can have a separate discussion about that. Added to: #21766",https://github.com/bitcoin/bitcoin/pull/21767#discussion_r635563120,635563120,src/rest.cpp
dongcarl,2021-05-19 20:33:07,"I don't think it necessarily has to be (at least not before more of AssumeUTXO is merged), in any case Bundle 7 will remove all of these assertions!",https://github.com/bitcoin/bitcoin/pull/21767#discussion_r635564717,635564717,src/bench/duplicate_inputs.cpp
ariard,2021-05-21 19:22:09,"In ""rest: Add GetChainman function and use it""\n\nDo you have pointers to inform reviewers about `EnsureAnyChainman` causing crashes in REST contexts ?",https://github.com/bitcoin/bitcoin/pull/21767#discussion_r637169193,637169193,src/rest.cpp
ariard,2021-05-21 20:06:24,"nit: Add comment ""Provide access to the active chainstate, containing the current most-work chain"". Maybe even as a member name `m_active_chainstate`",https://github.com/bitcoin/bitcoin/pull/21767#discussion_r637201920,637201920,src/index/base.h
fjahr,2021-05-23 20:46:09,nit: could have used std::optional for prettiness ðŸ’„ ,https://github.com/bitcoin/bitcoin/pull/21767#discussion_r637599151,637599151,src/rest.cpp
dongcarl,2021-05-27 18:06:30,Would be happy to add to PR if you supply a simple enough diff!,https://github.com/bitcoin/bitcoin/pull/21767#discussion_r640855990,640855990,src/rest.cpp
dongcarl,2021-05-27 18:08:06,Added in commit message,https://github.com/bitcoin/bitcoin/pull/21767#discussion_r640857749,640857749,src/rest.cpp
dongcarl,2021-05-27 18:08:45,"Not sure `m_active_chainstate` makes too much sense here, as in the index context, this member means ""the active chainstate at the time when `<Index>::Start` was called""",https://github.com/bitcoin/bitcoin/pull/21767#discussion_r640858184,640858184,src/index/base.h
ariard,2021-05-28 18:08:59,"Sure, it's just with assumeutxo, we start to have multiple chainstate references through the codebase (`m_ibd_chainstate`, `m_snapshot_chainstate`, `m_m_active_chainstate`) and it could be confusing in the future. I don't think it changes anything for the indexes rn.",https://github.com/bitcoin/bitcoin/pull/21767#discussion_r641727406,641727406,src/index/base.h
jamesob,2021-05-28 19:34:31,"Hm, shouldn't we be asserting here (instead of assigning) to preserve behavior?\nEdit: not sure what practical difference that would have if any.",https://github.com/bitcoin/bitcoin/pull/21767#discussion_r641777198,641777198,src/miner.cpp
jamesob,2021-05-28 20:06:38,"To @ariard's point, we will likely have to facilitate changing this pointer mid-execution when the user calls `ActivateSnapshot()`. I'll have to warm my caches on the indexing stuff a little more, but IIRC we want this class instance to have a reference to the current active chainstate (which obviously will be liable to change as assumeutxo progresses).",https://github.com/bitcoin/bitcoin/pull/21767#discussion_r641791366,641791366,src/index/base.h
jamesob,2021-05-28 20:08:13,"That said, the reduction of global use is an obvious win, and it should be pretty easy to facilitate changing `m_chainstate` via some method that can be called by `ActivateSnapshot()`.",https://github.com/bitcoin/bitcoin/pull/21767#discussion_r641792021,641792021,src/index/base.h
jamesob,2021-05-28 20:17:51,Might even just make sense to pass in a `ChainstateManager` instance to keep with this class... but that can be done in a follow-up.,https://github.com/bitcoin/bitcoin/pull/21767#discussion_r641795958,641795958,src/index/base.h
fjahr,2021-05-30 21:25:33,"Something like this maybe, if have to retouch: https://github.com/fjahr/bitcoin/commit/69187f82b1227cc33bc5733c742b8f8b9fcefea3",https://github.com/bitcoin/bitcoin/pull/21767#discussion_r642130503,642130503,src/rest.cpp
MarcoFalke,2021-06-01 10:24:35,"This creates a copy of chainman, no?",https://github.com/bitcoin/bitcoin/pull/21767#discussion_r642977388,642977388,src/rest.cpp
dongcarl,2021-06-02 22:29:25,"So `::RegenerateCommitments` has been changed a few times now:\n1. In 2c3ba00693, where we passed in a `BlockManager`, instead of reaching for `g_chainman.m_blockman`\n    - Because we don't want to reach for globals anymore (the overall point of this PR series)\n2. In cced0f46c9, where we passed in the specific `CBlockIndex` instead of a `BlockManager`\n    - Because it is a more specific val",https://github.com/bitcoin/bitcoin/pull/21767#discussion_r644361155,644361155,src/miner.cpp
jnewbery,2021-06-04 12:28:16,"@fjahr I think the branch is invalid because you're trying to move from the global `g_chainman`.\n\nIn general, the usage of algebraic sum types like std::optional or std::variant isn't for prettiness - it's to entirely remove the possibility of being in an invalid program state.",https://github.com/bitcoin/bitcoin/pull/21767#discussion_r645530719,645530719,src/rest.cpp
fjahr,2021-06-06 09:12:06,"Ok, never mind, I guess since there is no optional reference in std this wasn't a good idea after all.",https://github.com/bitcoin/bitcoin/pull/21767#discussion_r646101735,646101735,src/rest.cpp
