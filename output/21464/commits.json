[
  {
    "sha": "92647669428bdaca44813b958e33513958644227",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjY0NzY2OTQyOGJkYWNhNDQ4MTNiOTU4ZTMzNTEzOTU4NjQ0MjI3",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-03-17T22:29:15Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-09-12T18:49:34Z"
      },
      "message": "[TESTS] Increase limitancestorcount in tournament RPC test to showcase improved algorithm",
      "tree": {
        "sha": "2cb1456a0fe5544702d1184b809170030eee46ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2cb1456a0fe5544702d1184b809170030eee46ab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92647669428bdaca44813b958e33513958644227",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92647669428bdaca44813b958e33513958644227",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92647669428bdaca44813b958e33513958644227",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92647669428bdaca44813b958e33513958644227/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a88fa1a555195af6543cdc802e8e1c2e1668dd38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a88fa1a555195af6543cdc802e8e1c2e1668dd38",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a88fa1a555195af6543cdc802e8e1c2e1668dd38"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "542d177c5f0063250909b6e7435b2b6d97ee2053",
        "filename": "test/functional/mempool_updatefromblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92647669428bdaca44813b958e33513958644227/test/functional/mempool_updatefromblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92647669428bdaca44813b958e33513958644227/test/functional/mempool_updatefromblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_updatefromblock.py?ref=92647669428bdaca44813b958e33513958644227",
        "patch": "@@ -17,7 +17,7 @@\n class MempoolUpdateFromBlockTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n-        self.extra_args = [['-limitdescendantsize=1000', '-limitancestorsize=1000']]\n+        self.extra_args = [['-limitdescendantsize=1000', '-limitancestorsize=1000', '-limitancestorcount=100']]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      }
    ]
  },
  {
    "sha": "81efedb60e1e88f806adb010c926b4edd04393b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MWVmZWRiNjBlMWU4OGY4MDZhZGIwMTBjOTI2YjRlZGQwNDM5M2I4",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-03-17T21:11:44Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-09-12T18:49:40Z"
      },
      "message": "Mempool Update Cut-Through Optimization\n\nOften when we're updating mempool entries we update entries that we\nultimately end up removing the updated entries shortly thereafter. This\npatch makes it so that we filter for such entries a bit earlier in\nprocessing, which yields a mild improvement for these cases, and is\nnegligible overhead otherwise.",
      "tree": {
        "sha": "ab55cd72b7bceb27a77c4c2b1848bca0b5c6fa43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab55cd72b7bceb27a77c4c2b1848bca0b5c6fa43"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/81efedb60e1e88f806adb010c926b4edd04393b8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81efedb60e1e88f806adb010c926b4edd04393b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/81efedb60e1e88f806adb010c926b4edd04393b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81efedb60e1e88f806adb010c926b4edd04393b8/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "92647669428bdaca44813b958e33513958644227",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92647669428bdaca44813b958e33513958644227",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92647669428bdaca44813b958e33513958644227"
      }
    ],
    "stats": {
      "total": 104,
      "additions": 72,
      "deletions": 32
    },
    "files": [
      {
        "sha": "5f3975d1839858868f1c7a949e7b3b46bfe03155",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 11,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81efedb60e1e88f806adb010c926b4edd04393b8/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81efedb60e1e88f806adb010c926b4edd04393b8/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=81efedb60e1e88f806adb010c926b4edd04393b8",
        "patch": "@@ -56,10 +56,9 @@ size_t CTxMemPoolEntry::GetTxSize() const\n     return GetVirtualTransactionSize(nTxWeight, sigOpCost);\n }\n \n-// Update the given tx for any in-mempool descendants.\n-// Assumes that CTxMemPool::m_children is correct for the given tx and all\n-// descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap& cachedDescendants,\n+                                      const std::set<uint256>& setExclude, std::set<uint256>& descendants_to_remove,\n+                                      uint64_t ancestor_size_limit, uint64_t ancestor_count_limit)\n {\n     CTxMemPoolEntry::Children stageEntries, descendants;\n     stageEntries = updateIt->GetMemPoolChildrenConst();\n@@ -96,17 +95,18 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n             cachedDescendants[updateIt].insert(mapTx.iterator_to(descendant));\n             // Update ancestor state for each descendant\n             mapTx.modify(mapTx.iterator_to(descendant), update_ancestor_state(updateIt->GetTxSize(), updateIt->GetModifiedFee(), 1, updateIt->GetSigOpCost()));\n+            // Don't directly remove the transaction here -- doing so would\n+            // invalidate iterators in cachedDescendants. Mark it for removal\n+            // by inserting into descendants_to_remove.\n+            if (descendant.GetCountWithAncestors() > ancestor_count_limit || descendant.GetSizeWithAncestors() > ancestor_size_limit) {\n+                descendants_to_remove.insert(descendant.GetTx().GetHash());\n+            }\n         }\n     }\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n }\n \n-// vHashesToUpdate is the set of transaction hashes from a disconnected block\n-// which has been re-added to the mempool.\n-// for each entry, look for descendants that are outside vHashesToUpdate, and\n-// add fee/size information for such descendants to the parent.\n-// for each such descendant, also update the ancestor state to include the parent.\n-void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashesToUpdate)\n+void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashesToUpdate, uint64_t ancestor_size_limit, uint64_t ancestor_count_limit)\n {\n     AssertLockHeld(cs);\n     // For each entry in vHashesToUpdate, store the set of in-mempool, but not\n@@ -118,6 +118,8 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     // accounted for in the state of their ancestors)\n     std::set<uint256> setAlreadyIncluded(vHashesToUpdate.begin(), vHashesToUpdate.end());\n \n+    std::set<uint256> descendants_to_remove;\n+\n     // Iterate in reverse, so that whenever we are looking at a transaction\n     // we are sure that all in-mempool descendants have already been processed.\n     // This maximizes the benefit of the descendant cache and guarantees that\n@@ -147,7 +149,15 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n                 }\n             }\n         } // release epoch guard for UpdateForDescendants\n-        UpdateForDescendants(it, mapMemPoolDescendantsToUpdate, setAlreadyIncluded);\n+        UpdateForDescendants(it, mapMemPoolDescendantsToUpdate, setAlreadyIncluded, descendants_to_remove, ancestor_size_limit, ancestor_count_limit);\n+    }\n+\n+    for (const auto& txid : descendants_to_remove) {\n+        // This txid may have been removed already in a prior call to removeRecursive.\n+        // Therefore we ensure it is not yet removed already.\n+        if (const std::optional<txiter> txiter = GetIter(txid)) {\n+            removeRecursive((*txiter)->GetTx(), MemPoolRemovalReason::SIZELIMIT);\n+        }\n     }\n }\n "
      },
      {
        "sha": "34f7eb089fb868483c41048c9b721fd496b8f97c",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 48,
        "deletions": 20,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81efedb60e1e88f806adb010c926b4edd04393b8/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81efedb60e1e88f806adb010c926b4edd04393b8/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=81efedb60e1e88f806adb010c926b4edd04393b8",
        "patch": "@@ -658,16 +658,25 @@ class CTxMemPool\n      */\n     void RemoveStaged(setEntries& stage, bool updateDescendants, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n-    /** When adding transactions from a disconnected block back to the mempool,\n-     *  new mempool entries may have children in the mempool (which is generally\n-     *  not the case when otherwise adding transactions).\n-     *  UpdateTransactionsFromBlock() will find child transactions and update the\n-     *  descendant state for each transaction in vHashesToUpdate (excluding any\n-     *  child transactions present in vHashesToUpdate, which are already accounted\n-     *  for).  Note: vHashesToUpdate should be the set of transactions from the\n-     *  disconnected block that have been accepted back into the mempool.\n+    /** UpdateTransactionsFromBlock is called when adding transactions from a\n+     * disconnected block back to the mempool, new mempool entries may have\n+     * children in the mempool (which is generally not the case when otherwise\n+     * adding transactions).\n+     *  @post updated descendant state for descendants of each transaction in\n+     *        vHashesToUpdate (excluding any child transactions present in\n+     *        vHashesToUpdate, which are already accounted for). Updated state\n+     *        includes add fee/size information for such descendants to the\n+     *        parent and updated ancestor state to include the parent.\n+     *\n+     * @param[in] vHashesToUpdate          The set of txids from the\n+     *     disconnected block that have been accepted back into the mempool.\n+     * @param[in] ancestor_size_limit      The maximum allowed size in virtual\n+     *     bytes of an entry and its ancestors\n+     * @param[in] ancestor_count_limit     The maximum allowed number of\n+     *     transactions including the entry and its ancestors.\n      */\n-    void UpdateTransactionsFromBlock(const std::vector<uint256>& vHashesToUpdate) EXCLUSIVE_LOCKS_REQUIRED(cs, cs_main) LOCKS_EXCLUDED(m_epoch);\n+    void UpdateTransactionsFromBlock(const std::vector<uint256>& vHashesToUpdate,\n+            uint64_t ancestor_size_limit, uint64_t ancestor_count_limit) EXCLUSIVE_LOCKS_REQUIRED(cs, cs_main) LOCKS_EXCLUDED(m_epoch);\n \n     /** Try to calculate all in-mempool ancestors of entry.\n      *  (these are all calculated including the tx itself)\n@@ -794,19 +803,38 @@ class CTxMemPool\n     /** UpdateForDescendants is used by UpdateTransactionsFromBlock to update\n      *  the descendants for a single transaction that has been added to the\n      *  mempool but may have child transactions in the mempool, eg during a\n-     *  chain reorg.  setExclude is the set of descendant transactions in the\n-     *  mempool that must not be accounted for (because any descendants in\n-     *  setExclude were added to the mempool after the transaction being\n-     *  updated and hence their state is already reflected in the parent\n-     *  state).\n+     *  chain reorg.\n+     *\n+     * @pre CTxMemPool::m_children is correct for the given tx and all\n+     *      descendants.\n+     * @pre cachedDescendants is an accurate cache where each entry has all\n+     *      descendants of the corresponding key, including those that should\n+     *      be removed for violation of ancestor limits.\n+     * @post if updateIt has any non-excluded descendants, cachedDescendants has\n+     *       a new cache line for updateIt.\n+     * @post descendants_to_remove has a new entry for any descendant which exceeded\n+     *       ancestor limits relative to updateIt.\n      *\n-     *  cachedDescendants will be updated with the descendants of the transaction\n-     *  being updated, so that future invocations don't need to walk the\n-     *  same transaction again, if encountered in another transaction chain.\n+     * @param[in] updateIt the entry to update for its descendants\n+     * @param[in,out] cachedDescendants a cache where each line corresponds to all\n+     *     descendants. It will be updated with the descendants of the transaction\n+     *     being updated, so that future invocations don't need to walk the same\n+     *     transaction again, if encountered in another transaction chain.\n+     * @param[in] setExclude the set of descendant transactions in the mempool\n+     *     that must not be accounted for (because any descendants in setExclude\n+     *     were added to the mempool after the transaction being updated and hence\n+     *     their state is already reflected in the parent state).\n+     * @param[out] descendants_to_remove Populated with the txids of entries that\n+     *     exceed ancestor limits. It's the responsibility of the caller to\n+     *     removeRecursive them.\n+     * @param[in] ancestor_size_limit the max number of ancestral bytes allowed\n+     *     for any descendant\n+     * @param[in] ancestor_count_limit the max number of ancestor transactions\n+     *     allowed for any descendant\n      */\n-    void UpdateForDescendants(txiter updateIt,\n-            cacheMap &cachedDescendants,\n-            const std::set<uint256> &setExclude) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void UpdateForDescendants(txiter updateIt, cacheMap& cachedDescendants,\n+                              const std::set<uint256>& setExclude, std::set<uint256>& descendants_to_remove,\n+                              uint64_t ancestor_size_limit, uint64_t ancestor_count_limit) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     /** Update ancestors of hash to add/remove it as a descendant transaction. */\n     void UpdateAncestorsOf(bool add, txiter hash, setEntries &setAncestors) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     /** Set ancestor state for an entry */"
      },
      {
        "sha": "81e28cc4ba4c584959b0ce0983a3ee6507f4dc2b",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81efedb60e1e88f806adb010c926b4edd04393b8/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81efedb60e1e88f806adb010c926b4edd04393b8/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=81efedb60e1e88f806adb010c926b4edd04393b8",
        "patch": "@@ -365,7 +365,9 @@ void CChainState::MaybeUpdateMempoolForReorg(\n     // previously-confirmed transactions back to the mempool.\n     // UpdateTransactionsFromBlock finds descendants of any transactions in\n     // the disconnectpool that were added back and cleans up the mempool state.\n-    m_mempool->UpdateTransactionsFromBlock(vHashUpdate);\n+    const uint64_t ancestor_count_limit = gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n+    const uint64_t ancestor_size_limit = gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT) * 1000;\n+    m_mempool->UpdateTransactionsFromBlock(vHashUpdate, ancestor_size_limit, ancestor_count_limit);\n \n     // We also need to remove any now-immature transactions\n     m_mempool->removeForReorg(*this, STANDARD_LOCKTIME_VERIFY_FLAGS);"
      }
    ]
  }
]