jonatack,2021-03-18 19:26:08,"Interesting on first look, will review.",https://github.com/bitcoin/bitcoin/pull/21464#issuecomment-802225625,802225625,
JeremyRubin,2021-04-07 00:20:15,"pushed an update to simplify setRemove to hold txids instead of tx reference_wrappers, which eliminated the confusing ownership thing. should make review simpler.",https://github.com/bitcoin/bitcoin/pull/21464#issuecomment-814514448,814514448,
instagibbs,2021-04-12 06:58:47,"utACK https://github.com/bitcoin/bitcoin/pull/21464/commits/e8dafeb7004e4b0ed896ef08383bb22d9087a749\n\ngoing to dive into tests next to upgrade to tACK",https://github.com/bitcoin/bitcoin/pull/21464#issuecomment-817540843,817540843,
rebroad,2021-04-16 11:06:36,@JeremyRubin could you explain what this does in more layman's terms please? Is this pull anything to do with helping to fill the mempool in a way that reduces filling it with TXs that will get deleted later (due to mempool becoming full)?,https://github.com/bitcoin/bitcoin/pull/21464#issuecomment-821099740,821099740,
instagibbs,2021-04-16 11:09:19,"This is an optimization for the case where a reorg puts an ancestor transaction(package) back into the mempool, thus temporarily busting the transaction chain limits of the mempool.",https://github.com/bitcoin/bitcoin/pull/21464#issuecomment-821101091,821101091,
DrahtBot,2021-05-03 09:33:16,<!--4a62be1de6b64f3ed646cdc7932c8cf5-->\nüïµÔ∏è @hebasto @sipa have been requested to review this pull request as specified in the REVIEWERS file.,https://github.com/bitcoin/bitcoin/pull/21464#issuecomment-831142326,831142326,
DrahtBot,2021-07-10 14:49:21,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#21436](https://github.com/bitcoin/bitcoin/pull/21436) (doc: Fix several references in txmempool comments by kiminuo)\n\n",https://github.com/bitcoin/bitcoin/pull/21464#issuecomment-877649701,877649701,
JeremyRubin,2021-07-10 21:09:06,"Addressed style/doc stuff in a separate commit to preserve ACKs (squashable)\n\nI also introcuded a new removal reason in a separate commit, this should not be squashed as it is ortho to the main change.\n\n@laanwj anything else you'd like to see here?",https://github.com/bitcoin/bitcoin/pull/21464#issuecomment-877704718,877704718,
jnewbery,2021-07-12 11:47:15,"> Addressed style/doc stuff in a separate commit to preserve ACKs (squashable)\n\nI don't understand this. The head commit is what needs ACKs, and that's changed now that there are new commits. I'm very happy to re-review once you've squashed commits and rebased on master.",https://github.com/bitcoin/bitcoin/pull/21464#issuecomment-878212035,878212035,
JeremyRubin,2021-07-15 23:02:02,"Ok, made changes requested by @jnewbery and squashed. Will open a followup PR with the validation interface after as requested by @ariard. Thanks.",https://github.com/bitcoin/bitcoin/pull/21464#issuecomment-881063252,881063252,
JeremyRubin,2021-09-12 20:44:03,"Addressed all feedback; keeping tests separate from changes for easier A/B comparison. However, I have reordered them so Tests come first which is more practical.",https://github.com/bitcoin/bitcoin/pull/21464#issuecomment-917707120,917707120,
Talkless,2021-11-06 20:39:27,"Weak ACK 81efedb60e1e88f806adb010c926b4edd04393b8. Weak because of my limited mempool knowledge, though code looks OK, and I successfully ran unit and extended functional tests.",https://github.com/bitcoin/bitcoin/pull/21464#issuecomment-962507007,962507007,
mjdietzx,2021-11-15 17:15:18,"When I read the commit:\n> Often when we're updating mempool entries we update entries that we\nultimately end up removing the updated entries shortly thereafter. This\npatch makes it so that we filter for such entries a bit earlier in\nprocessing\n\nbased on the wording, I assumed that we were ""filtering"" these entries out _before_ adding them to the mempool. However, after reviewing the PR",https://github.com/bitcoin/bitcoin/pull/21464#issuecomment-969129360,969129360,
instagibbs,2021-04-09 00:03:32,brackets,https://github.com/bitcoin/bitcoin/pull/21464#discussion_r610216193,610216193,src/txmempool.cpp
instagibbs,2021-04-09 00:03:47,nit: snake_case for new vars,https://github.com/bitcoin/bitcoin/pull/21464#discussion_r610216318,610216318,src/txmempool.cpp
instagibbs,2021-04-09 00:28:12,This probably warrants a comment since it's an opportunistic check that is not about updating the descendant map,https://github.com/bitcoin/bitcoin/pull/21464#discussion_r610231049,610231049,src/txmempool.cpp
instagibbs,2021-04-09 00:28:59,what's `to_remove`?,https://github.com/bitcoin/bitcoin/pull/21464#discussion_r610231499,610231499,src/txmempool.cpp
instagibbs,2021-04-09 00:32:04,Also I don't really understand the comment block in general,https://github.com/bitcoin/bitcoin/pull/21464#discussion_r610233276,610233276,src/txmempool.cpp
instagibbs,2021-04-12 01:31:44,"overall I wish we could be much more compartmentalized about these limit checks. \n\nno good suggestion; just a complaint",https://github.com/bitcoin/bitcoin/pull/21464#discussion_r611279803,611279803,src/txmempool.cpp
JeremyRubin,2021-04-12 01:36:01,"right; stale comment on the prior version. Before i was using txiters + CTransactionRefs and had to use a second vec before removing (otherwise you'd have use after free on the txiters).\n\nFixed the comment.",https://github.com/bitcoin/bitcoin/pull/21464#discussion_r611280586,611280586,src/txmempool.cpp
JeremyRubin,2021-04-12 01:36:08,ibid,https://github.com/bitcoin/bitcoin/pull/21464#discussion_r611280629,611280629,src/txmempool.cpp
JeremyRubin,2021-04-12 01:58:00,renamed,https://github.com/bitcoin/bitcoin/pull/21464#discussion_r611285428,611285428,src/txmempool.cpp
JeremyRubin,2021-04-12 01:58:25,will clarify why doing it here makes sense; good point.,https://github.com/bitcoin/bitcoin/pull/21464#discussion_r611285528,611285528,src/txmempool.cpp
glozow,2021-04-14 20:25:54,"Should update the doxygen comments, something like\n\n```c++\n* @param[out]    set_should_remove          Populated with the txids of entries that exceed ancestor limits. It's the responsibility of the caller to removeRecursive them.\n```",https://github.com/bitcoin/bitcoin/pull/21464#discussion_r613563758,613563758,src/txmempool.h
glozow,2021-04-14 20:29:09,"Small naming suggestion; ""count"" removes any ambiguity about which limit this is.\n```suggestion\n            const std::set<uint256> &setExclude, std::set<uint256>& set_should_remove, uint64_t ancestor_size_limit, uint64_t ancestor_count_limit) EXCLUSIVE_LOCKS_REQUIRED(cs);\n```",https://github.com/bitcoin/bitcoin/pull/21464#discussion_r613565697,613565697,src/txmempool.h
glozow,2021-04-14 20:46:47,Question: Would it be correct/better to also add children to `mapMemPoolDescendantsToUpdate` in the code block above?,https://github.com/bitcoin/bitcoin/pull/21464#discussion_r613575751,613575751,src/txmempool.cpp
JeremyRubin,2021-04-15 01:42:47,will clean this up if I touch it.,https://github.com/bitcoin/bitcoin/pull/21464#discussion_r613700241,613700241,src/txmempool.h
JeremyRubin,2021-04-15 01:42:56,will clean it up if I touch.,https://github.com/bitcoin/bitcoin/pull/21464#discussion_r613700281,613700281,src/txmempool.h
JeremyRubin,2021-04-15 01:44:48,"Nah; mapMemPoolDescendantsToUpdate is a cache for UpdateForDescendants where each line in the cache is all the desc, not just children, so if you added it prematurely it would uncache incorrectly in UpdateForDescednants",https://github.com/bitcoin/bitcoin/pull/21464#discussion_r613700816,613700816,src/txmempool.cpp
jnewbery,2021-04-28 10:00:22,Definitely agree that changes to signature functions should be documented in the doxygen comments.,https://github.com/bitcoin/bitcoin/pull/21464#discussion_r622022051,622022051,src/txmempool.h
jnewbery,2021-04-28 12:53:35,"This function only ever gets called in one place, with ancestor_size_limit set to `-limitancestorsize` and ancestor_limit set to `-limitancestorcount`.\n\nWhat do you think about parameterizing the `CTxMemPool` constructor with those values? They don't change during runtime and it'd mean you'd be making no changes to validation.\n\nSee the last two commits in https://github.com/jnewbery/bitcoi",https://github.com/bitcoin/bitcoin/pull/21464#discussion_r622149124,622149124,src/txmempool.h
jnewbery,2021-04-28 12:56:17,"This style seems like the worst of all worlds. Including linebreaks, but making the last line too long for side-by-side diff tools. How about:\n\n```c++\n    void UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude,\n                              std::set<uint256>& set_should_remove, uint64_t ancestor_size_limit,\n                            ",https://github.com/bitcoin/bitcoin/pull/21464#discussion_r622151298,622151298,src/txmempool.h
jnewbery,2021-04-28 14:16:13,"current style is to not include the type in the variable name. Consider:\n\n```suggestion\n    std::set<uint256> txs_to_remove;\n```",https://github.com/bitcoin/bitcoin/pull/21464#discussion_r622223859,622223859,src/txmempool.cpp
jnewbery,2021-04-28 14:26:04,"Consider using c++17 if statement initializer:\n\n```suggestion\n        if (const auto txiter_opt = GetIter(txid)) {\n            removeRecursive((*txiter_opt)->GetTx(), MemPoolRemovalReason::SIZELIMIT);\n```\n\nof if you want to be a bit more explicit:\n\n```suggestion\n        if (const auto txiter_opt = GetIter(txid); txiter_opt) {\n            removeRecursive((*txiter_opt)->GetTx()",https://github.com/bitcoin/bitcoin/pull/21464#discussion_r622233487,622233487,src/txmempool.cpp
jnewbery,2021-04-28 14:29:51,"```suggestion\n            // Don't directly remove the transaction here -- doing so would invalidate iterators in\n```",https://github.com/bitcoin/bitcoin/pull/21464#discussion_r622237291,622237291,src/txmempool.cpp
jnewbery,2021-04-28 14:30:29,"```suggestion\n            // cachedDescendants. Mark it for removal by inserting into set_should_remove.\n```",https://github.com/bitcoin/bitcoin/pull/21464#discussion_r622237977,622237977,src/txmempool.cpp
jnewbery,2021-04-28 14:30:37,"```suggestion\n        std::set<uint256>& set_should_remove, uint64_t ancestor_size_limit, uint64_t ancestor_limit)\n```",https://github.com/bitcoin/bitcoin/pull/21464#discussion_r622238142,622238142,src/txmempool.cpp
JeremyRubin,2021-04-28 19:11:07,"mmmm maybe. In general in the mempool I think the functions accept parameters with limits as opposed to being static in the mempool, and I think it would be confusing to be inconsistent. I like that passing in limits makes it explicit what the code will do, and forces any caller to consider what limit they should use.\n\nWhere these limits get enforced later they are set by reading configuration",https://github.com/bitcoin/bitcoin/pull/21464#discussion_r622464539,622464539,src/txmempool.h
JeremyRubin,2021-04-28 19:12:34,"Saying as this function doesn't have doxygen comments is this a request to doxygen comment it?\n\nIf I set default values for these params would that be better so as not to disrupt the fsig?",https://github.com/bitcoin/bitcoin/pull/21464#discussion_r622465499,622465499,src/txmempool.h
jnewbery,2021-04-29 07:12:36,"> In general in the mempool I think the functions accept parameters with limits\n\nI think that's more a historical artifact that until #19556, the mempool was a global that was constructed before `main()`. If we were building this from scratch, I think we'd make any mempool parameters that can't be changed at runtime const and set in the ctor, rather than using globals.\n\n> lead to an incons",https://github.com/bitcoin/bitcoin/pull/21464#discussion_r622788810,622788810,src/txmempool.h
MarcoFalke,2021-04-29 07:16:49,"> Changing these limits during runtime seems like a terrible idea!\n\nAgree. Though, the tx_pool fuzz targets do this and they haven't (yet) crashed :grimacing: ",https://github.com/bitcoin/bitcoin/pull/21464#discussion_r622791296,622791296,src/txmempool.h
ariard,2021-05-29 05:53:48,Even more speaking `descendants_to_remove`,https://github.com/bitcoin/bitcoin/pull/21464#discussion_r641895223,641895223,src/txmempool.cpp
ariard,2021-05-29 05:55:55,"You could even introduce a new `MemPoolRemovalReason::ANCESTORLIMIT`. This check is different than the one applied by `TrimToSize` on absolute mempool size.\n\nIt would be a clearer message for listeners of validation interface.",https://github.com/bitcoin/bitcoin/pull/21464#discussion_r641895417,641895417,src/txmempool.cpp
ariard,2021-05-29 05:59:37,"What do you think about hardcoded ancestor_limit/ancestor_limit_size, instead of relying on node operators settings ?\n\nAs it's a performance optimization it might be easier to get predictable improvements with invariants.",https://github.com/bitcoin/bitcoin/pull/21464#discussion_r641895672,641895672,src/validation.cpp
JeremyRubin,2021-06-08 14:34:26,I think that would lead to miners to custom compiling to configure rather than running releases -- maybe we need a survey of what settings mining node operators are using?,https://github.com/bitcoin/bitcoin/pull/21464#discussion_r647504001,647504001,src/validation.cpp
JeremyRubin,2021-07-10 21:09:30,done,https://github.com/bitcoin/bitcoin/pull/21464#discussion_r667385626,667385626,src/txmempool.cpp
jnewbery,2021-07-12 11:44:55,"I don't think this change is necessary for this PR. Unless there's a validation interface client that uses the new `MemPoolRemovalReason::ANCESTORLIMIT`, then it's just broadening that interface for no benefit. If we find that a client needs to use this in future, it'll be easy to add it at that point.",https://github.com/bitcoin/bitcoin/pull/21464#discussion_r667858736,667858736,src/txmempool.cpp
JeremyRubin,2021-07-15 22:56:09,I will drop this commit and open a new PR with it for @ariard.,https://github.com/bitcoin/bitcoin/pull/21464#discussion_r670856144,670856144,src/txmempool.cpp
glozow,2021-07-16 14:37:29,"Limits are inclusive and apply to all entries\n\n```suggestion\n     * @param[in] ancestor_size_limit      The maximum allowed size in virtual bytes of an entry and its ancestors\n     * @param[in] ancestor_count_limit     The maximum allowed number of transactions including the entry and its ancestors.\n\n```",https://github.com/bitcoin/bitcoin/pull/21464#discussion_r671306152,671306152,src/txmempool.h
jnewbery,2021-07-26 10:17:51,(also much prefer this formatting style with a visual gap between the parameter name and the documentation).,https://github.com/bitcoin/bitcoin/pull/21464#discussion_r676474898,676474898,src/txmempool.h
jnewbery,2021-07-26 10:19:01,"""should be"" implies that this function could be called with a different set of transactions. In fact, `vHashesToUpdate` is always the set of transactions from the disconnected block that have been added back to the mempool:\n\n```suggestion\n     * @param[in] vHashesToUpdate   the set of txids from\n```",https://github.com/bitcoin/bitcoin/pull/21464#discussion_r676475637,676475637,src/txmempool.h
jnewbery,2021-07-26 10:20:01,"```suggestion\n     * @param[in] updateIt the entry to update for its descendants\n```",https://github.com/bitcoin/bitcoin/pull/21464#discussion_r676476269,676476269,src/txmempool.h
jnewbery,2021-07-26 10:22:49,Perhaps remove the comment above this function definition (it's redundant with the doxygen comment above the declaration),https://github.com/bitcoin/bitcoin/pull/21464#discussion_r676478069,676478069,src/txmempool.cpp
jnewbery,2021-07-26 10:25:19,"```suggestion\n     * @param[in/out] cachedDescendants a cache where each line corresponds to all\n```",https://github.com/bitcoin/bitcoin/pull/21464#discussion_r676479733,676479733,src/txmempool.h
reemuru,2021-07-27 21:50:26,Is this change necessary? I'm currently updating the functional test for MiniWallet compatibility,https://github.com/bitcoin/bitcoin/pull/21464#discussion_r677825052,677825052,test/functional/mempool_updatefromblock.py
JeremyRubin,2021-07-31 22:41:26,yes,https://github.com/bitcoin/bitcoin/pull/21464#discussion_r680418371,680418371,test/functional/mempool_updatefromblock.py
Talkless,2021-08-17 12:04:56,"Maybe worth renaming `ancestor_limit` into `ancestor_limit_count`, to be more symmetrical with `ancestor_limit_size`/`limitancestorsize` pair?\n\nAlso, `UpdateTransactionsFromBlock` and `UpdateForDescendants` has these parameters phrased a bit differently with `ancestor_size_limit` and `ancestor_count_limit` (""limit"" goes last). Maybe worth unifying all these new names?",https://github.com/bitcoin/bitcoin/pull/21464#discussion_r690304785,690304785,src/validation.cpp
Talkless,2021-08-17 12:05:24,"Also, `ancestor_limit` and `ancestor_limit_size` could be `const`.",https://github.com/bitcoin/bitcoin/pull/21464#discussion_r690305089,690305089,src/validation.cpp
Talkless,2021-08-17 12:06:35,could be `const auto& txid`.,https://github.com/bitcoin/bitcoin/pull/21464#discussion_r690305816,690305816,src/txmempool.cpp
JeremyRubin,2021-09-12 18:21:54,"fwiw if you use a text editor which understands doxygen you get something which looks fine without a visual gap.\n<img width=""588"" alt=""image"" src=""https://user-images.githubusercontent.com/886523/132998517-30b6dee2-137e-46c6-8a26-307a5cdea93c.png"">\n",https://github.com/bitcoin/bitcoin/pull/21464#discussion_r706874757,706874757,src/txmempool.h
JeremyRubin,2021-09-12 18:39:15,Is proper syntax is comma not slash?,https://github.com/bitcoin/bitcoin/pull/21464#discussion_r706876738,706876738,src/txmempool.h
jonatack,2021-09-12 18:52:40,"Yes, per https://www.doxygen.nl/manual/commands.html#cmdparam\n\n""Possible values are ""[in]"", ""[in,out]"", and ""[out]"", note the [square] brackets in this description. When a parameter is both input and output, [in,out] is used as attribute.""\n",https://github.com/bitcoin/bitcoin/pull/21464#discussion_r706878222,706878222,src/txmempool.h
mjdietzx,2021-11-15 17:11:42,"I see that you are increasing the node's allowed `limitancestorcount` here, but I don't think it's being utilized? Bc the test params are hard-coded at L119 `self.transaction_graph_test(size=100, n_tx_to_mine=[25, 50, 75])`, and don't make use of the increased limit here. So you'd need to update that as well, right?",https://github.com/bitcoin/bitcoin/pull/21464#discussion_r749526368,749526368,test/functional/mempool_updatefromblock.py
