[
  {
    "sha": "4a878203d8b1651ad318ed90726a7b6a00bee9e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YTg3ODIwM2Q4YjE2NTFhZDMxOGVkOTA3MjZhN2I2YTAwYmVlOWU5",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-09-30T12:16:10Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-09-30T13:10:06Z"
      },
      "message": "BIP90: Make buried deployments slightly more easily extensible",
      "tree": {
        "sha": "21d98deb2cf41f8ce724f4b0cf4876a1b721175f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21d98deb2cf41f8ce724f4b0cf4876a1b721175f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a878203d8b1651ad318ed90726a7b6a00bee9e9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZz5euAAoJEIhmwY6hyUSi5fwP/2ywkYzOBvJmM7di/FZ+kw82\n7W6nW3AAcx8uUqN47zlL1JUnhDJtdLnhzOgB4hi+n0NIG22jHVaBvo01hmeemBWy\nfi6VVNUTAG8tOGCUGINbSWPAQqY2ctCrNIV4mANgyjI5pJH1BvqpiuJqeL+MV8oO\nAGTFDu2uw4BsvsDp6+fOIz88LelAavBOG2cLvpD5WChNyS2I0aoqs4c8zMe69HGh\nOpETp5bO7sVQnCvzPN27ejXF3WirBy2o2TdDPDgZGcq8L70dJqRs3nOaYN1R0esy\nreNzxFnc3vU8Fhco4C3BhUUu4F+xHWuIpbamQG1HMwKmeGEur8VqyUOS5ewHUq5V\nEHm9PbKkMhMGZSzt/BgomTuBPtqMAN8RuNzWzxHkBUoaUswnQ/3PsX99wvIYvZoJ\nkVN37tjYdRYuUQ3wAHl5liUaTCHUyFAvl0L8xJXgubcMw83zqfPmWbL/HrIXETX2\n/ORg7qSQBwWnHDWQAf1dvCvQiw8EVVXKHyFxv/AHDbFAlwW9b8QZmm1KpKGatvm1\nWGIOY6Efa7sy49jt6PzkqCOq/z4MXZvaIGVz35pUQgUxS7onAK2iGPLDSNAK3TcA\nwJgtqPromStxzxjQmq4tPX8Vutdc9H21Hy5lIA/taTq/96pLZIimW8N1vNSMSSan\nleJiG4YmEtMvdUKQi/3x\n=TuZH\n-----END PGP SIGNATURE-----",
        "payload": "tree 21d98deb2cf41f8ce724f4b0cf4876a1b721175f\nparent 763231051596b8e3455b839911ad6a3a1f1c3c74\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1506773770 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1506777006 +0200\n\nBIP90: Make buried deployments slightly more easily extensible\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a878203d8b1651ad318ed90726a7b6a00bee9e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a878203d8b1651ad318ed90726a7b6a00bee9e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a878203d8b1651ad318ed90726a7b6a00bee9e9/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "763231051596b8e3455b839911ad6a3a1f1c3c74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/763231051596b8e3455b839911ad6a3a1f1c3c74",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/763231051596b8e3455b839911ad6a3a1f1c3c74"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 31,
      "deletions": 25
    },
    "files": [
      {
        "sha": "3d238594ee540164762f41f33aa4976b20924c4d",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a878203d8b1651ad318ed90726a7b6a00bee9e9/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a878203d8b1651ad318ed90726a7b6a00bee9e9/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=4a878203d8b1651ad318ed90726a7b6a00bee9e9",
        "patch": "@@ -75,10 +75,10 @@ class CMainParams : public CChainParams {\n     CMainParams() {\n         strNetworkID = \"main\";\n         consensus.nSubsidyHalvingInterval = 210000;\n-        consensus.BIP34Height = 227931;\n+        consensus.buried_deployments[Consensus::DEPLOYMENT_BIP34] = 227931;\n+        consensus.buried_deployments[Consensus::DEPLOYMENT_BIP65] = 388381; // 000000000000000004c2b624ed5d7756c508d90fd0da2c7c679febfa6c4735f0\n+        consensus.buried_deployments[Consensus::DEPLOYMENT_BIP66] = 363725; // 00000000000000000379eaa19dce8c9b722d46ae6a57c2f1a988119488b50931\n         consensus.BIP34Hash = uint256S(\"0x000000000000024b89b42a942fe0d9fea3bb44ab7bd1b19115dd6a759c0808b8\");\n-        consensus.BIP65Height = 388381; // 000000000000000004c2b624ed5d7756c508d90fd0da2c7c679febfa6c4735f0\n-        consensus.BIP66Height = 363725; // 00000000000000000379eaa19dce8c9b722d46ae6a57c2f1a988119488b50931\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -181,10 +181,10 @@ class CTestNetParams : public CChainParams {\n     CTestNetParams() {\n         strNetworkID = \"test\";\n         consensus.nSubsidyHalvingInterval = 210000;\n-        consensus.BIP34Height = 21111;\n+        consensus.buried_deployments[Consensus::DEPLOYMENT_BIP34] = 21111;\n+        consensus.buried_deployments[Consensus::DEPLOYMENT_BIP65] = 581885; // 00000000007f6655f22f98e72ed80d8b06dc761d5da09df0fa1dc4be4f861eb6\n+        consensus.buried_deployments[Consensus::DEPLOYMENT_BIP66] = 330776; // 000000002104c8c45e99a8853285a3b592602a3ccde2b832481da85e9e4ba182\n         consensus.BIP34Hash = uint256S(\"0x0000000023b3a96d3484e5abb3755c413e7d41500f8e2a5c3f0dd01299cd8ef8\");\n-        consensus.BIP65Height = 581885; // 00000000007f6655f22f98e72ed80d8b06dc761d5da09df0fa1dc4be4f861eb6\n-        consensus.BIP66Height = 330776; // 000000002104c8c45e99a8853285a3b592602a3ccde2b832481da85e9e4ba182\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -271,10 +271,11 @@ class CRegTestParams : public CChainParams {\n     CRegTestParams() {\n         strNetworkID = \"regtest\";\n         consensus.nSubsidyHalvingInterval = 150;\n-        consensus.BIP34Height = 100000000; // BIP34 has not activated on regtest (far in the future so block v1 are not rejected in tests)\n+        // BIP34 has not activated on regtest (far in the future so block v1 are not rejected in tests)\n+        consensus.buried_deployments[Consensus::DEPLOYMENT_BIP34] = 100000000;\n+        consensus.buried_deployments[Consensus::DEPLOYMENT_BIP65] = 1351; // BIP65 activated on regtest (Used in rpc activation tests)\n+        consensus.buried_deployments[Consensus::DEPLOYMENT_BIP66] = 1251; // BIP66 activated on regtest (Used in rpc activation tests)\n         consensus.BIP34Hash = uint256();\n-        consensus.BIP65Height = 1351; // BIP65 activated on regtest (Used in rpc activation tests)\n-        consensus.BIP66Height = 1251; // BIP66 activated on regtest (Used in rpc activation tests)\n         consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;"
      },
      {
        "sha": "9ab3cc54b66f1be1c6a930b6ef0bc4bb6be1d5f4",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a878203d8b1651ad318ed90726a7b6a00bee9e9/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a878203d8b1651ad318ed90726a7b6a00bee9e9/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=4a878203d8b1651ad318ed90726a7b6a00bee9e9",
        "patch": "@@ -12,6 +12,14 @@\n \n namespace Consensus {\n \n+enum BuriedDeploymentPos\n+{\n+    DEPLOYMENT_BIP34,\n+    DEPLOYMENT_BIP65,\n+    DEPLOYMENT_BIP66,\n+    MAX_BURIED_DEPLOYMENTS\n+};\n+\n enum DeploymentPos\n {\n     DEPLOYMENT_TESTDUMMY,\n@@ -39,20 +47,17 @@ struct BIP9Deployment {\n struct Params {\n     uint256 hashGenesisBlock;\n     int nSubsidyHalvingInterval;\n-    /** Block height and hash at which BIP34 becomes active */\n-    int BIP34Height;\n+    /** Block hash at which BIP34 becomes active. Necessary to avoid checking BIP30. */\n     uint256 BIP34Hash;\n-    /** Block height at which BIP65 becomes active */\n-    int BIP65Height;\n-    /** Block height at which BIP66 becomes active */\n-    int BIP66Height;\n     /**\n      * Minimum blocks including miner confirmation of the total of 2016 blocks in a retargeting period,\n      * (nPowTargetTimespan / nPowTargetSpacing) which is also used for BIP9 deployments.\n      * Examples: 1916 for 95%, 1512 for testchains.\n      */\n     uint32_t nRuleChangeActivationThreshold;\n     uint32_t nMinerConfirmationWindow;\n+    /** BIP90: Block height at which buried deployments becomes active */\n+    int buried_deployments[MAX_BURIED_DEPLOYMENTS];\n     BIP9Deployment vDeployments[MAX_VERSION_BITS_DEPLOYMENTS];\n     /** Proof of work parameters */\n     uint256 powLimit;"
      },
      {
        "sha": "191ccea3df1e01b5b71037f55ccb0fc16d36d052",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a878203d8b1651ad318ed90726a7b6a00bee9e9/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a878203d8b1651ad318ed90726a7b6a00bee9e9/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=4a878203d8b1651ad318ed90726a7b6a00bee9e9",
        "patch": "@@ -1057,13 +1057,13 @@ static UniValue SoftForkMajorityDesc(int version, CBlockIndex* pindex, const Con\n     switch(version)\n     {\n         case 2:\n-            activated = pindex->nHeight >= consensusParams.BIP34Height;\n+            activated = pindex->nHeight >= consensusParams.buried_deployments[Consensus::DEPLOYMENT_BIP34];\n             break;\n         case 3:\n-            activated = pindex->nHeight >= consensusParams.BIP66Height;\n+            activated = pindex->nHeight >= consensusParams.buried_deployments[Consensus::DEPLOYMENT_BIP66];\n             break;\n         case 4:\n-            activated = pindex->nHeight >= consensusParams.BIP65Height;\n+            activated = pindex->nHeight >= consensusParams.buried_deployments[Consensus::DEPLOYMENT_BIP65];\n             break;\n     }\n     rv.push_back(Pair(\"status\", activated));"
      },
      {
        "sha": "10289238fe7cd65d90a1a5bd921716e45944cbcb",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a878203d8b1651ad318ed90726a7b6a00bee9e9/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a878203d8b1651ad318ed90726a7b6a00bee9e9/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=4a878203d8b1651ad318ed90726a7b6a00bee9e9",
        "patch": "@@ -1596,12 +1596,12 @@ static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consens\n     unsigned int flags = fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE;\n \n     // Start enforcing the DERSIG (BIP66) rule\n-    if (pindex->nHeight >= consensusparams.BIP66Height) {\n+    if (pindex->nHeight >= consensusparams.buried_deployments[Consensus::DEPLOYMENT_BIP66]) {\n         flags |= SCRIPT_VERIFY_DERSIG;\n     }\n \n     // Start enforcing CHECKLOCKTIMEVERIFY (BIP65) rule\n-    if (pindex->nHeight >= consensusparams.BIP65Height) {\n+    if (pindex->nHeight >= consensusparams.buried_deployments[Consensus::DEPLOYMENT_BIP65]) {\n         flags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n     }\n \n@@ -1713,7 +1713,7 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n     // duplicate transactions descending from the known pairs either.\n     // If we're on the known chain at height greater than where BIP34 activated, we can save the db accesses needed for the BIP30 check.\n     assert(pindex->pprev);\n-    CBlockIndex *pindexBIP34height = pindex->pprev->GetAncestor(chainparams.GetConsensus().BIP34Height);\n+    CBlockIndex *pindexBIP34height = pindex->pprev->GetAncestor(chainparams.GetConsensus().buried_deployments[Consensus::DEPLOYMENT_BIP34]);\n     //Only continue to enforce if we're below BIP34 activation height or the block hash at that height doesn't correspond.\n     fEnforceBIP30 = fEnforceBIP30 && (!pindexBIP34height || !(pindexBIP34height->GetBlockHash() == chainparams.GetConsensus().BIP34Hash));\n \n@@ -2940,9 +2940,9 @@ static bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationSta\n \n     // Reject outdated version blocks when 95% (75% on testnet) of the network has upgraded:\n     // check for version 2, 3 and 4 upgrades\n-    if((block.nVersion < 2 && nHeight >= consensusParams.BIP34Height) ||\n-       (block.nVersion < 3 && nHeight >= consensusParams.BIP66Height) ||\n-       (block.nVersion < 4 && nHeight >= consensusParams.BIP65Height))\n+    if((block.nVersion < 2 && nHeight >= consensusParams.buried_deployments[Consensus::DEPLOYMENT_BIP34]) ||\n+       (block.nVersion < 3 && nHeight >= consensusParams.buried_deployments[Consensus::DEPLOYMENT_BIP66]) ||\n+       (block.nVersion < 4 && nHeight >= consensusParams.buried_deployments[Consensus::DEPLOYMENT_BIP65]))\n             return state.Invalid(false, REJECT_OBSOLETE, strprintf(\"bad-version(0x%08x)\", block.nVersion),\n                                  strprintf(\"rejected nVersion=0x%08x block\", block.nVersion));\n \n@@ -2971,7 +2971,7 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n     }\n \n     // Enforce rule that the coinbase starts with serialized block height\n-    if (nHeight >= consensusParams.BIP34Height)\n+    if (nHeight >= consensusParams.buried_deployments[Consensus::DEPLOYMENT_BIP34])\n     {\n         CScript expect = CScript() << nHeight;\n         if (block.vtx[0]->vin[0].scriptSig.size() < expect.size() ||"
      }
    ]
  },
  {
    "sha": "9ff60be3a45c9a02ac65e126976de9c54b188495",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZmY2MGJlM2E0NWM5YTAyYWM2NWUxMjY5NzZkZTljNTRiMTg4NDk1",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2017-09-30T15:38:05Z"
      },
      "committer": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2017-09-30T15:38:05Z"
      },
      "message": "Hardcode CSV deployment",
      "tree": {
        "sha": "d4ed0dfd4c96c55c86097427ba306836dc55f813",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4ed0dfd4c96c55c86097427ba306836dc55f813"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ff60be3a45c9a02ac65e126976de9c54b188495",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ff60be3a45c9a02ac65e126976de9c54b188495",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ff60be3a45c9a02ac65e126976de9c54b188495",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ff60be3a45c9a02ac65e126976de9c54b188495/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4a878203d8b1651ad318ed90726a7b6a00bee9e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a878203d8b1651ad318ed90726a7b6a00bee9e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a878203d8b1651ad318ed90726a7b6a00bee9e9"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 10,
      "deletions": 24
    },
    "files": [
      {
        "sha": "5de30bcb426d7d90a851048f000263d68de95736",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 13,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ff60be3a45c9a02ac65e126976de9c54b188495/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ff60be3a45c9a02ac65e126976de9c54b188495/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=9ff60be3a45c9a02ac65e126976de9c54b188495",
        "patch": "@@ -78,6 +78,7 @@ class CMainParams : public CChainParams {\n         consensus.buried_deployments[Consensus::DEPLOYMENT_BIP34] = 227931;\n         consensus.buried_deployments[Consensus::DEPLOYMENT_BIP65] = 388381; // 000000000000000004c2b624ed5d7756c508d90fd0da2c7c679febfa6c4735f0\n         consensus.buried_deployments[Consensus::DEPLOYMENT_BIP66] = 363725; // 00000000000000000379eaa19dce8c9b722d46ae6a57c2f1a988119488b50931\n+        consensus.buried_deployments[Consensus::DEPLOYMENT_CSV] = 419328; // 000000000000000004a1b34462cb8aeebd5799177f7a29cf28f2d1961716b5b5\n         consensus.BIP34Hash = uint256S(\"0x000000000000024b89b42a942fe0d9fea3bb44ab7bd1b19115dd6a759c0808b8\");\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n@@ -90,11 +91,6 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n \n-        // Deployment of BIP68, BIP112, and BIP113.\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 1462060800; // May 1st, 2016\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 1493596800; // May 1st, 2017\n-\n         // Deployment of SegWit (BIP141, BIP143, and BIP147)\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 1479168000; // November 15th, 2016.\n@@ -184,6 +180,7 @@ class CTestNetParams : public CChainParams {\n         consensus.buried_deployments[Consensus::DEPLOYMENT_BIP34] = 21111;\n         consensus.buried_deployments[Consensus::DEPLOYMENT_BIP65] = 581885; // 00000000007f6655f22f98e72ed80d8b06dc761d5da09df0fa1dc4be4f861eb6\n         consensus.buried_deployments[Consensus::DEPLOYMENT_BIP66] = 330776; // 000000002104c8c45e99a8853285a3b592602a3ccde2b832481da85e9e4ba182\n+        consensus.buried_deployments[Consensus::DEPLOYMENT_CSV] = 770112; // 00000000025e930139bac5c6c31a403776da130831ab85be56578f3fa75369bb\n         consensus.BIP34Hash = uint256S(\"0x0000000023b3a96d3484e5abb3755c413e7d41500f8e2a5c3f0dd01299cd8ef8\");\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n@@ -196,11 +193,6 @@ class CTestNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n \n-        // Deployment of BIP68, BIP112, and BIP113.\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 1456790400; // March 1st, 2016\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 1493596800; // May 1st, 2017\n-\n         // Deployment of SegWit (BIP141, BIP143, and BIP147)\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 1462060800; // May 1st 2016\n@@ -275,6 +267,7 @@ class CRegTestParams : public CChainParams {\n         consensus.buried_deployments[Consensus::DEPLOYMENT_BIP34] = 100000000;\n         consensus.buried_deployments[Consensus::DEPLOYMENT_BIP65] = 1351; // BIP65 activated on regtest (Used in rpc activation tests)\n         consensus.buried_deployments[Consensus::DEPLOYMENT_BIP66] = 1251; // BIP66 activated on regtest (Used in rpc activation tests)\n+        consensus.buried_deployments[Consensus::DEPLOYMENT_CSV] = 432; // CSV activated on regtest (Used in rpc activation tests)\n         consensus.BIP34Hash = uint256();\n         consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n@@ -286,9 +279,6 @@ class CRegTestParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 999999999999ULL;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 0;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 999999999999ULL;\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 999999999999ULL;"
      },
      {
        "sha": "3fa7c1acfdd0d87a0ec57b4b0163e574de55ba04",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ff60be3a45c9a02ac65e126976de9c54b188495/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ff60be3a45c9a02ac65e126976de9c54b188495/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=9ff60be3a45c9a02ac65e126976de9c54b188495",
        "patch": "@@ -17,13 +17,13 @@ enum BuriedDeploymentPos\n     DEPLOYMENT_BIP34,\n     DEPLOYMENT_BIP65,\n     DEPLOYMENT_BIP66,\n+    DEPLOYMENT_CSV,\n     MAX_BURIED_DEPLOYMENTS\n };\n \n enum DeploymentPos\n {\n     DEPLOYMENT_TESTDUMMY,\n-    DEPLOYMENT_CSV, // Deployment of BIP68, BIP112, and BIP113.\n     DEPLOYMENT_SEGWIT, // Deployment of BIP141, BIP143, and BIP147.\n     // NOTE: Also add new deployments to VersionBitsDeploymentInfo in versionbits.cpp\n     MAX_VERSION_BITS_DEPLOYMENTS"
      },
      {
        "sha": "fc9b3653ccb0b8100b64157e52b6107414fecc09",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ff60be3a45c9a02ac65e126976de9c54b188495/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ff60be3a45c9a02ac65e126976de9c54b188495/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9ff60be3a45c9a02ac65e126976de9c54b188495",
        "patch": "@@ -1605,8 +1605,8 @@ static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consens\n         flags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n     }\n \n-    // Start enforcing BIP68 (sequence locks) and BIP112 (CHECKSEQUENCEVERIFY) using versionbits logic.\n-    if (VersionBitsState(pindex->pprev, consensusparams, Consensus::DEPLOYMENT_CSV, versionbitscache) == THRESHOLD_ACTIVE) {\n+    // Start enforcing BIP68 (sequence locks) and BIP112 (CHECKSEQUENCEVERIFY)\n+    if (pindex->nHeight >= consensusparams.buried_deployments[Consensus::DEPLOYMENT_CSV]) {\n         flags |= SCRIPT_VERIFY_CHECKSEQUENCEVERIFY;\n     }\n \n@@ -1728,9 +1728,9 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n         }\n     }\n \n-    // Start enforcing BIP68 (sequence locks) and BIP112 (CHECKSEQUENCEVERIFY) using versionbits logic.\n+    // Start enforcing BIP68 (sequence locks) and BIP112 (CHECKSEQUENCEVERIFY)\n     int nLockTimeFlags = 0;\n-    if (VersionBitsState(pindex->pprev, chainparams.GetConsensus(), Consensus::DEPLOYMENT_CSV, versionbitscache) == THRESHOLD_ACTIVE) {\n+    if (pindex->nHeight >= chainparams.GetConsensus().buried_deployments[Consensus::DEPLOYMENT_CSV]) {\n         nLockTimeFlags |= LOCKTIME_VERIFY_SEQUENCE;\n     }\n \n@@ -2953,9 +2953,9 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n {\n     const int nHeight = pindexPrev == nullptr ? 0 : pindexPrev->nHeight + 1;\n \n-    // Start enforcing BIP113 (Median Time Past) using versionbits logic.\n+    // Start enforcing BIP113 (Median Time Past)\n     int nLockTimeFlags = 0;\n-    if (VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_CSV, versionbitscache) == THRESHOLD_ACTIVE) {\n+    if (nHeight >= consensusParams.buried_deployments[Consensus::DEPLOYMENT_CSV]) {\n         nLockTimeFlags |= LOCKTIME_MEDIAN_TIME_PAST;\n     }\n "
      },
      {
        "sha": "97150bb44f58a176beb9c667e012c5a285ca5832",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ff60be3a45c9a02ac65e126976de9c54b188495/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ff60be3a45c9a02ac65e126976de9c54b188495/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=9ff60be3a45c9a02ac65e126976de9c54b188495",
        "patch": "@@ -10,10 +10,6 @@ const struct VBDeploymentInfo VersionBitsDeploymentInfo[Consensus::MAX_VERSION_B\n         /*.name =*/ \"testdummy\",\n         /*.gbt_force =*/ true,\n     },\n-    {\n-        /*.name =*/ \"csv\",\n-        /*.gbt_force =*/ true,\n-    },\n     {\n         /*.name =*/ \"segwit\",\n         /*.gbt_force =*/ true,"
      }
    ]
  },
  {
    "sha": "ff357fda6c51b6093a752ecee8880cfef7c1a740",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjM1N2ZkYTZjNTFiNjA5M2E3NTJlY2VlODg4MGNmZWY3YzFhNzQw",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2017-09-30T17:08:22Z"
      },
      "committer": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2017-09-30T17:08:22Z"
      },
      "message": "Hardcode SEGWIT deployment",
      "tree": {
        "sha": "1bb20585b793657cd0cce8a162a69266177395bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1bb20585b793657cd0cce8a162a69266177395bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff357fda6c51b6093a752ecee8880cfef7c1a740",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff357fda6c51b6093a752ecee8880cfef7c1a740",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff357fda6c51b6093a752ecee8880cfef7c1a740",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff357fda6c51b6093a752ecee8880cfef7c1a740/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ff60be3a45c9a02ac65e126976de9c54b188495",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ff60be3a45c9a02ac65e126976de9c54b188495",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ff60be3a45c9a02ac65e126976de9c54b188495"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 45,
      "deletions": 31
    },
    "files": [
      {
        "sha": "2da699c52b7a24b472c6c42c8759e540e79f5df5",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff357fda6c51b6093a752ecee8880cfef7c1a740/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff357fda6c51b6093a752ecee8880cfef7c1a740/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=ff357fda6c51b6093a752ecee8880cfef7c1a740",
        "patch": "@@ -59,6 +59,11 @@ void CChainParams::UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64\n     consensus.vDeployments[d].nTimeout = nTimeout;\n }\n \n+void CChainParams::UpdateBuriedDeploymentHeight(const Consensus::BuriedDeploymentPos& id, const int& height)\n+{\n+    consensus.buried_deployments[id] = height;\n+}\n+\n /**\n  * Main network\n  */\n@@ -79,6 +84,7 @@ class CMainParams : public CChainParams {\n         consensus.buried_deployments[Consensus::DEPLOYMENT_BIP65] = 388381; // 000000000000000004c2b624ed5d7756c508d90fd0da2c7c679febfa6c4735f0\n         consensus.buried_deployments[Consensus::DEPLOYMENT_BIP66] = 363725; // 00000000000000000379eaa19dce8c9b722d46ae6a57c2f1a988119488b50931\n         consensus.buried_deployments[Consensus::DEPLOYMENT_CSV] = 419328; // 000000000000000004a1b34462cb8aeebd5799177f7a29cf28f2d1961716b5b5\n+        consensus.buried_deployments[Consensus::DEPLOYMENT_SEGWIT] = 481824; // 0000000000000000001c8018d9cb3b742ef25114f27563e3fc4a1902167f9893\n         consensus.BIP34Hash = uint256S(\"0x000000000000024b89b42a942fe0d9fea3bb44ab7bd1b19115dd6a759c0808b8\");\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n@@ -91,11 +97,6 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n \n-        // Deployment of SegWit (BIP141, BIP143, and BIP147)\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 1479168000; // November 15th, 2016.\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1510704000; // November 15th, 2017.\n-\n         // The best chain should have at least this much work.\n         consensus.nMinimumChainWork = uint256S(\"0x000000000000000000000000000000000000000000723d3581fe1bd55373540a\");\n \n@@ -181,6 +182,7 @@ class CTestNetParams : public CChainParams {\n         consensus.buried_deployments[Consensus::DEPLOYMENT_BIP65] = 581885; // 00000000007f6655f22f98e72ed80d8b06dc761d5da09df0fa1dc4be4f861eb6\n         consensus.buried_deployments[Consensus::DEPLOYMENT_BIP66] = 330776; // 000000002104c8c45e99a8853285a3b592602a3ccde2b832481da85e9e4ba182\n         consensus.buried_deployments[Consensus::DEPLOYMENT_CSV] = 770112; // 00000000025e930139bac5c6c31a403776da130831ab85be56578f3fa75369bb\n+        consensus.buried_deployments[Consensus::DEPLOYMENT_SEGWIT] = 834624; // 00000000002b980fcd729daaa248fd9316a5200e9b367f4ff2c42453e84201ca\n         consensus.BIP34Hash = uint256S(\"0x0000000023b3a96d3484e5abb3755c413e7d41500f8e2a5c3f0dd01299cd8ef8\");\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n@@ -193,11 +195,6 @@ class CTestNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n \n-        // Deployment of SegWit (BIP141, BIP143, and BIP147)\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 1462060800; // May 1st 2016\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1493596800; // May 1st 2017\n-\n         // The best chain should have at least this much work.\n         consensus.nMinimumChainWork = uint256S(\"0x00000000000000000000000000000000000000000000002830dab7f76dbb7d63\");\n \n@@ -268,6 +265,7 @@ class CRegTestParams : public CChainParams {\n         consensus.buried_deployments[Consensus::DEPLOYMENT_BIP65] = 1351; // BIP65 activated on regtest (Used in rpc activation tests)\n         consensus.buried_deployments[Consensus::DEPLOYMENT_BIP66] = 1251; // BIP66 activated on regtest (Used in rpc activation tests)\n         consensus.buried_deployments[Consensus::DEPLOYMENT_CSV] = 432; // CSV activated on regtest (Used in rpc activation tests)\n+        consensus.buried_deployments[Consensus::DEPLOYMENT_SEGWIT] = 0; // SEGWIT is always activated on regtest unless overridden\n         consensus.BIP34Hash = uint256();\n         consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n@@ -279,9 +277,6 @@ class CRegTestParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 999999999999ULL;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 0;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 999999999999ULL;\n \n         // The best chain should have at least this much work.\n         consensus.nMinimumChainWork = uint256S(\"0x00\");\n@@ -358,3 +353,8 @@ void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime,\n {\n     globalChainParams->UpdateVersionBitsParameters(d, nStartTime, nTimeout);\n }\n+\n+void UpdateBuriedDeploymentHeight(const Consensus::BuriedDeploymentPos& id, const int& height)\n+{\n+    globalChainParams->UpdateBuriedDeploymentHeight(id, height);\n+}"
      },
      {
        "sha": "1ee727a36bdfc18acd385bceaeed8fc9a962624d",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff357fda6c51b6093a752ecee8880cfef7c1a740/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff357fda6c51b6093a752ecee8880cfef7c1a740/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=ff357fda6c51b6093a752ecee8880cfef7c1a740",
        "patch": "@@ -78,6 +78,7 @@ class CChainParams\n     const CCheckpointData& Checkpoints() const { return checkpointData; }\n     const ChainTxData& TxData() const { return chainTxData; }\n     void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout);\n+    void UpdateBuriedDeploymentHeight(const Consensus::BuriedDeploymentPos& id, const int& height);\n protected:\n     CChainParams() {}\n \n@@ -122,4 +123,9 @@ void SelectParams(const std::string& chain);\n  */\n void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout);\n \n+/**\n+ * Allows modifying the activation height of segwit in regtest.\n+ */\n+void UpdateBuriedDeploymentHeight(const Consensus::BuriedDeploymentPos& id, const int& height);\n+\n #endif // BITCOIN_CHAINPARAMS_H"
      },
      {
        "sha": "0cb607669676b7ea6ad87131706c632ca38be69c",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff357fda6c51b6093a752ecee8880cfef7c1a740/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff357fda6c51b6093a752ecee8880cfef7c1a740/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=ff357fda6c51b6093a752ecee8880cfef7c1a740",
        "patch": "@@ -18,13 +18,13 @@ enum BuriedDeploymentPos\n     DEPLOYMENT_BIP65,\n     DEPLOYMENT_BIP66,\n     DEPLOYMENT_CSV,\n+    DEPLOYMENT_SEGWIT,\n     MAX_BURIED_DEPLOYMENTS\n };\n \n enum DeploymentPos\n {\n     DEPLOYMENT_TESTDUMMY,\n-    DEPLOYMENT_SEGWIT, // Deployment of BIP141, BIP143, and BIP147.\n     // NOTE: Also add new deployments to VersionBitsDeploymentInfo in versionbits.cpp\n     MAX_VERSION_BITS_DEPLOYMENTS\n };"
      },
      {
        "sha": "a22e50e34fd27ecec1b8a1c04f738a9b37453e63",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 6,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff357fda6c51b6093a752ecee8880cfef7c1a740/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff357fda6c51b6093a752ecee8880cfef7c1a740/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ff357fda6c51b6093a752ecee8880cfef7c1a740",
        "patch": "@@ -434,6 +434,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-testsafemode\", strprintf(\"Force safe mode (default: %u)\", DEFAULT_TESTSAFEMODE));\n         strUsage += HelpMessageOpt(\"-dropmessagestest=<n>\", \"Randomly drop 1 of every <n> network messages\");\n         strUsage += HelpMessageOpt(\"-fuzzmessagestest=<n>\", \"Randomly fuzz 1 of every <n> network messages\");\n+        strUsage += HelpMessageOpt(\"-segwitheight=<n>\", \"Set the activation height of segwit. -1 to disable. (regtest-only)\");\n         strUsage += HelpMessageOpt(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", DEFAULT_STOPAFTERBLOCKIMPORT));\n         strUsage += HelpMessageOpt(\"-stopatheight\", strprintf(\"Stop running after reaching the given height in the main chain (default: %u)\", DEFAULT_STOPATHEIGHT));\n \n@@ -1144,6 +1145,21 @@ bool AppInitParameterInteraction()\n             }\n         }\n     }\n+\n+    if (gArgs.IsArgSet(\"-segwitheight\")) {\n+        if (!chainparams.MineBlocksOnDemand()) {\n+            return InitError(\"Segwit activation parameters may only be overridden on regtest.\");\n+        }\n+        int64_t height = gArgs.GetArg(\"-segwitheight\", chainparams.GetConsensus().buried_deployments[Consensus::DEPLOYMENT_SEGWIT]);\n+        if (height < -1 || height >= std::numeric_limits<int>::max()) {\n+            return InitError(strprintf(\"Activation height %ld for segwit is out of valid range. Use -1 to disable segwit.\", height));\n+        }\n+        else if (height == -1) {\n+            LogPrintf(\"Segwit disabled for testing\\n\");\n+            height = std::numeric_limits<int>::max();\n+        }\n+        UpdateBuriedDeploymentHeight(Consensus::DEPLOYMENT_SEGWIT, static_cast<int>(height));\n+    }\n     return true;\n }\n \n@@ -1596,15 +1612,11 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n \n-    if (chainparams.GetConsensus().vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout != 0) {\n-        // Only advertise witness capabilities if they have a reasonable start time.\n-        // This allows us to have the code merged without a defined softfork, by setting its\n-        // end time to 0.\n+    if (chainparams.GetConsensus().buried_deployments[Consensus::DEPLOYMENT_SEGWIT] != std::numeric_limits<int>::max()) {\n+        // Advertise witness capabilities.\n         // Note that setting NODE_WITNESS is never required: the only downside from not\n         // doing so is that after activation, no upgraded nodes will fetch from you.\n         nLocalServices = ServiceFlags(nLocalServices | NODE_WITNESS);\n-        // Only care about others providing witness capabilities if there is a softfork\n-        // defined.\n         nRelevantServices = ServiceFlags(nRelevantServices | NODE_WITNESS);\n     }\n "
      },
      {
        "sha": "75093f2a036815a546a9d6cb541d702949de68ff",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff357fda6c51b6093a752ecee8880cfef7c1a740/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff357fda6c51b6093a752ecee8880cfef7c1a740/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=ff357fda6c51b6093a752ecee8880cfef7c1a740",
        "patch": "@@ -497,11 +497,10 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n         // TODO: Maybe recheck connections/IBD and (if something wrong) send an expires-immediately template to stop miners?\n     }\n \n-    const struct VBDeploymentInfo& segwit_info = VersionBitsDeploymentInfo[Consensus::DEPLOYMENT_SEGWIT];\n     // If the caller is indicating segwit support, then allow CreateNewBlock()\n     // to select witness transactions, after segwit activates (otherwise\n     // don't).\n-    bool fSupportsSegwit = setClientRules.find(segwit_info.name) != setClientRules.end();\n+    bool fSupportsSegwit = setClientRules.find(\"segwit\") != setClientRules.end();\n \n     // Update block\n     static CBlockIndex* pindexPrev;\n@@ -540,7 +539,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n     pblock->nNonce = 0;\n \n     // NOTE: If at some point we support pre-segwit miners post-segwit-activation, this needs to take segwit support into consideration\n-    const bool fPreSegWit = (THRESHOLD_ACTIVE != VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT, versionbitscache));\n+    const bool fPreSegWit = (pindexPrev->nHeight + 1 < consensusParams.buried_deployments[Consensus::DEPLOYMENT_SEGWIT]);\n \n     UniValue aCaps(UniValue::VARR); aCaps.push_back(\"proposal\");\n "
      },
      {
        "sha": "9db05045f1665bfed870de690cb0e82ef8f97c47",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff357fda6c51b6093a752ecee8880cfef7c1a740/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff357fda6c51b6093a752ecee8880cfef7c1a740/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=ff357fda6c51b6093a752ecee8880cfef7c1a740",
        "patch": "@@ -105,6 +105,7 @@ TestingSetup::~TestingSetup()\n \n TestChain100Setup::TestChain100Setup() : TestingSetup(CBaseChainParams::REGTEST)\n {\n+    UpdateBuriedDeploymentHeight(Consensus::DEPLOYMENT_SEGWIT, 432);\n     // Generate a 100-block chain:\n     coinbaseKey.MakeNewKey(true);\n     CScript scriptPubKey = CScript() <<  ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;"
      },
      {
        "sha": "1e6ab149275c1f4fc1e170a80a889bd88c6b8907",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff357fda6c51b6093a752ecee8880cfef7c1a740/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff357fda6c51b6093a752ecee8880cfef7c1a740/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ff357fda6c51b6093a752ecee8880cfef7c1a740",
        "patch": "@@ -2847,8 +2847,8 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n \n bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n {\n-    LOCK(cs_main);\n-    return (VersionBitsState(pindexPrev, params, Consensus::DEPLOYMENT_SEGWIT, versionbitscache) == THRESHOLD_ACTIVE);\n+    int height = pindexPrev == nullptr ? 0 : pindexPrev->nHeight + 1;\n+    return (height >= params.buried_deployments[Consensus::DEPLOYMENT_SEGWIT]);\n }\n \n // Compute at which vout of the block's coinbase transaction the witness\n@@ -2883,7 +2883,7 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n     std::vector<unsigned char> commitment;\n     int commitpos = GetWitnessCommitmentIndex(block);\n     std::vector<unsigned char> ret(32, 0x00);\n-    if (consensusParams.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout != 0) {\n+    if (consensusParams.buried_deployments[Consensus::DEPLOYMENT_SEGWIT] != std::numeric_limits<int>::max()) {\n         if (commitpos == -1) {\n             uint256 witnessroot = BlockWitnessMerkleRoot(block, nullptr);\n             CHash256().Write(witnessroot.begin(), 32).Write(ret.data(), 32).Finalize(witnessroot.begin());\n@@ -2989,7 +2989,7 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n     //   {0xaa, 0x21, 0xa9, 0xed}, and the following 32 bytes are SHA256^2(witness root, witness nonce). In case there are\n     //   multiple, the last one is used.\n     bool fHaveWitness = false;\n-    if (VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT, versionbitscache) == THRESHOLD_ACTIVE) {\n+    if (nHeight >= consensusParams.buried_deployments[Consensus::DEPLOYMENT_SEGWIT]) {\n         int commitpos = GetWitnessCommitmentIndex(block);\n         if (commitpos != -1) {\n             bool malleated = false;"
      },
      {
        "sha": "805d1ac7d5b73df14faff73c0404bd2cd91334d7",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff357fda6c51b6093a752ecee8880cfef7c1a740/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff357fda6c51b6093a752ecee8880cfef7c1a740/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=ff357fda6c51b6093a752ecee8880cfef7c1a740",
        "patch": "@@ -10,10 +10,6 @@ const struct VBDeploymentInfo VersionBitsDeploymentInfo[Consensus::MAX_VERSION_B\n         /*.name =*/ \"testdummy\",\n         /*.gbt_force =*/ true,\n     },\n-    {\n-        /*.name =*/ \"segwit\",\n-        /*.gbt_force =*/ true,\n-    }\n };\n \n ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const"
      }
    ]
  },
  {
    "sha": "ae3ed97df1d5bc2f7fc74914bc967a65ea0dcb82",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZTNlZDk3ZGYxZDViYzJmN2ZjNzQ5MTRiYzk2N2E2NWVhMGRjYjgy",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2017-10-01T19:47:18Z"
      },
      "committer": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2017-10-01T19:47:59Z"
      },
      "message": "[rpc] Combine reporting of buried and ongoing softforks",
      "tree": {
        "sha": "e85cb3981bd13db57fd6735c21a28453dcddecc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e85cb3981bd13db57fd6735c21a28453dcddecc7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae3ed97df1d5bc2f7fc74914bc967a65ea0dcb82",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae3ed97df1d5bc2f7fc74914bc967a65ea0dcb82",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae3ed97df1d5bc2f7fc74914bc967a65ea0dcb82",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae3ed97df1d5bc2f7fc74914bc967a65ea0dcb82/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff357fda6c51b6093a752ecee8880cfef7c1a740",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff357fda6c51b6093a752ecee8880cfef7c1a740",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff357fda6c51b6093a752ecee8880cfef7c1a740"
      }
    ],
    "stats": {
      "total": 145,
      "additions": 72,
      "deletions": 73
    },
    "files": [
      {
        "sha": "6db8d86ff77901c655a766faf035efd19bb31842",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 72,
        "deletions": 72,
        "changes": 144,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae3ed97df1d5bc2f7fc74914bc967a65ea0dcb82/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae3ed97df1d5bc2f7fc74914bc967a65ea0dcb82/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=ae3ed97df1d5bc2f7fc74914bc967a65ea0dcb82",
        "patch": "@@ -1049,54 +1049,45 @@ UniValue verifychain(const JSONRPCRequest& request)\n     return CVerifyDB().VerifyDB(Params(), pcoinsTip, nCheckLevel, nCheckDepth);\n }\n \n-/** Implementation of IsSuperMajority with better feedback */\n-static UniValue SoftForkMajorityDesc(int version, CBlockIndex* pindex, const Consensus::Params& consensusParams)\n+void SoftForkDescPushBack(UniValue& softforks, const std::string &name, const Consensus::Params& consensusParams, const Consensus::BuriedDeploymentPos id)\n {\n-    UniValue rv(UniValue::VOBJ);\n-    bool activated = false;\n-    switch(version)\n-    {\n-        case 2:\n-            activated = pindex->nHeight >= consensusParams.buried_deployments[Consensus::DEPLOYMENT_BIP34];\n-            break;\n-        case 3:\n-            activated = pindex->nHeight >= consensusParams.buried_deployments[Consensus::DEPLOYMENT_BIP66];\n-            break;\n-        case 4:\n-            activated = pindex->nHeight >= consensusParams.buried_deployments[Consensus::DEPLOYMENT_BIP65];\n-            break;\n+    // For buried deployments.\n+    // Buried deployments with activation height value of std::numeric_limits<int>::max() are hidden.\n+    int height = consensusParams.buried_deployments[id];\n+    if (height != std::numeric_limits<int>::max()) {\n+        UniValue rv(UniValue::VOBJ);\n+        rv.push_back(Pair(\"type\", \"buried\"));\n+        rv.push_back(Pair(\"height\", height));\n+        rv.push_back(Pair(\"active\", chainActive.Height() + 1 >= height));\n+        softforks.push_back(Pair(name, rv));\n     }\n-    rv.push_back(Pair(\"status\", activated));\n-    return rv;\n }\n \n-static UniValue SoftForkDesc(const std::string &name, int version, CBlockIndex* pindex, const Consensus::Params& consensusParams)\n+void SoftForkDescPushBack(UniValue& softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n {\n-    UniValue rv(UniValue::VOBJ);\n-    rv.push_back(Pair(\"id\", name));\n-    rv.push_back(Pair(\"version\", version));\n-    rv.push_back(Pair(\"reject\", SoftForkMajorityDesc(version, pindex, consensusParams)));\n-    return rv;\n-}\n-\n-static UniValue BIP9SoftForkDesc(const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n-{\n-    UniValue rv(UniValue::VOBJ);\n+    // For BIP9 deployments.\n+    // Deployments (e.g. testdummy) with timeout value before Jan 1, 2009 are hidden.\n+    // A timeout value of 0 guarantees a softfork will never be activated.\n+    // This is used when softfork codes are merged without specifying the deployment schedule.\n+    if (consensusParams.vDeployments[id].nTimeout <= 1230768000)\n+        return;\n+    UniValue bip9(UniValue::VOBJ);\n     const ThresholdState thresholdState = VersionBitsTipState(consensusParams, id);\n     switch (thresholdState) {\n-    case THRESHOLD_DEFINED: rv.push_back(Pair(\"status\", \"defined\")); break;\n-    case THRESHOLD_STARTED: rv.push_back(Pair(\"status\", \"started\")); break;\n-    case THRESHOLD_LOCKED_IN: rv.push_back(Pair(\"status\", \"locked_in\")); break;\n-    case THRESHOLD_ACTIVE: rv.push_back(Pair(\"status\", \"active\")); break;\n-    case THRESHOLD_FAILED: rv.push_back(Pair(\"status\", \"failed\")); break;\n+    case THRESHOLD_DEFINED: bip9.push_back(Pair(\"status\", \"defined\")); break;\n+    case THRESHOLD_STARTED: bip9.push_back(Pair(\"status\", \"started\")); break;\n+    case THRESHOLD_LOCKED_IN: bip9.push_back(Pair(\"status\", \"locked_in\")); break;\n+    case THRESHOLD_ACTIVE: bip9.push_back(Pair(\"status\", \"active\")); break;\n+    case THRESHOLD_FAILED: bip9.push_back(Pair(\"status\", \"failed\")); break;\n     }\n     if (THRESHOLD_STARTED == thresholdState)\n     {\n-        rv.push_back(Pair(\"bit\", consensusParams.vDeployments[id].bit));\n+        bip9.push_back(Pair(\"bit\", consensusParams.vDeployments[id].bit));\n     }\n-    rv.push_back(Pair(\"startTime\", consensusParams.vDeployments[id].nStartTime));\n-    rv.push_back(Pair(\"timeout\", consensusParams.vDeployments[id].nTimeout));\n-    rv.push_back(Pair(\"since\", VersionBitsTipStateSinceHeight(consensusParams, id)));\n+    bip9.push_back(Pair(\"startTime\", consensusParams.vDeployments[id].nStartTime));\n+    bip9.push_back(Pair(\"timeout\", consensusParams.vDeployments[id].nTimeout));\n+    int64_t since_height = VersionBitsTipStateSinceHeight(consensusParams, id);\n+    bip9.push_back(Pair(\"since\", since_height));\n     if (THRESHOLD_STARTED == thresholdState)\n     {\n         UniValue statsUV(UniValue::VOBJ);\n@@ -1106,18 +1097,21 @@ static UniValue BIP9SoftForkDesc(const Consensus::Params& consensusParams, Conse\n         statsUV.push_back(Pair(\"elapsed\", statsStruct.elapsed));\n         statsUV.push_back(Pair(\"count\", statsStruct.count));\n         statsUV.push_back(Pair(\"possible\", statsStruct.possible));\n-        rv.push_back(Pair(\"statistics\", statsUV));\n+        bip9.push_back(Pair(\"statistics\", statsUV));\n     }\n-    return rv;\n-}\n \n-void BIP9SoftForkDescPushBack(UniValue& bip9_softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n-{\n-    // Deployments with timeout value of 0 are hidden.\n-    // A timeout value of 0 guarantees a softfork will never be activated.\n-    // This is used when softfork codes are merged without specifying the deployment schedule.\n-    if (consensusParams.vDeployments[id].nTimeout > 0)\n-        bip9_softforks.push_back(Pair(name, BIP9SoftForkDesc(consensusParams, id)));\n+    UniValue rv(UniValue::VOBJ);\n+    rv.push_back(Pair(\"type\", \"bip9\"));\n+    rv.push_back(Pair(\"bip9\", bip9));\n+    if (THRESHOLD_LOCKED_IN == thresholdState) {\n+        rv.push_back(Pair(\"height\", since_height + consensusParams.nMinerConfirmationWindow));\n+    }\n+    else if (THRESHOLD_ACTIVE == thresholdState) {\n+        rv.push_back(Pair(\"height\", since_height));\n+    }\n+    rv.push_back(Pair(\"active\", THRESHOLD_ACTIVE == thresholdState));\n+\n+    softforks.push_back(Pair(name, rv));\n }\n \n UniValue getblockchaininfo(const JSONRPCRequest& request)\n@@ -1138,29 +1132,37 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n             \"  \\\"chainwork\\\": \\\"xxxx\\\"     (string) total amount of work in active chain, in hexadecimal\\n\"\n             \"  \\\"pruned\\\": xx,             (boolean) if the blocks are subject to pruning\\n\"\n             \"  \\\"pruneheight\\\": xxxxxx,    (numeric) lowest-height complete block stored\\n\"\n-            \"  \\\"softforks\\\": [            (array) status of softforks in progress\\n\"\n+            \"  \\\"softforks\\\": [            (array) status of softforks\\n\"\n             \"     {\\n\"\n             \"        \\\"id\\\": \\\"xxxx\\\",        (string) name of softfork\\n\"\n-            \"        \\\"version\\\": xx,         (numeric) block version\\n\"\n-            \"        \\\"reject\\\": {            (object) progress toward rejecting pre-softfork blocks\\n\"\n+            \"        \\\"height\\\": \\\"xxxxxx\\\",  (numeric) height of the first block which the rules are enforced\\n\"\n+            \"        \\\"type\\\": \\\"xxxx\\\",      (string) original activation mechanism (\\\"ism\\\" or \\\"bip9\\\")\\n\"\n+            \"        \\\"version\\\": xx,         (numeric) block version (only for \\\"ism\\\" type)\\n\"\n+            \"        \\\"reject\\\": {            (object) progress toward rejecting pre-softfork blocks (only for \\\"ism\\\" type)\\n\"\n             \"           \\\"status\\\": xx,       (boolean) true if threshold reached\\n\"\n+            \"        \\\"active\\\": xx,          (boolean) true if status is \\\"active\\\" (only for \\\"bip9\\\" type)\\n\"\n             \"        },\\n\"\n             \"     }, ...\\n\"\n             \"  ],\\n\"\n-            \"  \\\"bip9_softforks\\\": {          (object) status of BIP9 softforks in progress\\n\"\n+            \"  \\\"softforks\\\": {               (object) status of softforks\\n\"\n             \"     \\\"xxxx\\\" : {                (string) name of the softfork\\n\"\n-            \"        \\\"status\\\": \\\"xxxx\\\",    (string) one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\\n\"\n-            \"        \\\"bit\\\": xx,             (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" status)\\n\"\n-            \"        \\\"startTime\\\": xx,       (numeric) the minimum median time past of a block at which the bit gains its meaning\\n\"\n-            \"        \\\"timeout\\\": xx,         (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in\\n\"\n-            \"        \\\"since\\\": xx,           (numeric) height of the first block to which the status applies\\n\"\n-            \"        \\\"statistics\\\": {        (object) numeric statistics about BIP9 signalling for a softfork (only for \\\"started\\\" status)\\n\"\n-            \"           \\\"period\\\": xx,       (numeric) the length in blocks of the BIP9 signalling period \\n\"\n-            \"           \\\"threshold\\\": xx,    (numeric) the number of blocks with the version bit set required to activate the feature \\n\"\n-            \"           \\\"elapsed\\\": xx,      (numeric) the number of blocks elapsed since the beginning of the current period \\n\"\n-            \"           \\\"count\\\": xx,        (numeric) the number of blocks with the version bit set in the current period \\n\"\n-            \"           \\\"possible\\\": xx      (boolean) returns false if there are not enough blocks left in this period to pass activation threshold \\n\"\n-            \"        }\\n\"\n+            \"        \\\"type\\\": \\\"xxxx\\\",      (string) one of \\\"buried\\\", \\\"bip9\\\"\\n\"\n+            \"        \\\"bip9\\\": {              (object) status of bip9 softforks (only for \\\"bip9\\\" type)\\n\"\n+            \"           \\\"status\\\": \\\"xxxx\\\",    (string) one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\\n\"\n+            \"           \\\"bit\\\": xx,             (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" status)\\n\"\n+            \"           \\\"startTime\\\": xx,       (numeric) the minimum median time past of a block at which the bit gains its meaning\\n\"\n+            \"           \\\"timeout\\\": xx,         (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in\\n\"\n+            \"           \\\"since\\\": xx,           (numeric) height of the first block to which the status applies\\n\"\n+            \"           \\\"statistics\\\": {        (object) numeric statistics about BIP9 signalling for a softfork\\n\"\n+            \"              \\\"period\\\": xx,       (numeric) the length in blocks of the BIP9 signalling period \\n\"\n+            \"              \\\"threshold\\\": xx,    (numeric) the number of blocks with the version bit set required to activate the feature \\n\"\n+            \"              \\\"elapsed\\\": xx,      (numeric) the number of blocks elapsed since the beginning of the current period \\n\"\n+            \"              \\\"count\\\": xx,        (numeric) the number of blocks with the version bit set in the current period \\n\"\n+            \"              \\\"possible\\\": xx      (boolean) returns false if there are not enough blocks left in this period to pass activation threshold \\n\"\n+            \"           }\\n\"\n+            \"        },\\n\"\n+            \"        \\\"height\\\": \\\"xxxxxx\\\",  (numeric) height of the first block which the rules are enforced (only for \\\"buried\\\" type, or \\\"bip9\\\" type with \\\"locked_in\\\" or \\\"active\\\" status)\\n\"\n+            \"        \\\"active\\\": xx,          (boolean) true if the rules are enforced\\n\"\n             \"     }\\n\"\n             \"  }\\n\"\n             \"  \\\"warnings\\\" : \\\"...\\\",         (string) any network and blockchain warnings.\\n\"\n@@ -1184,16 +1186,14 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     obj.push_back(Pair(\"pruned\",                fPruneMode));\n \n     const Consensus::Params& consensusParams = Params().GetConsensus();\n-    CBlockIndex* tip = chainActive.Tip();\n-    UniValue softforks(UniValue::VARR);\n-    UniValue bip9_softforks(UniValue::VOBJ);\n-    softforks.push_back(SoftForkDesc(\"bip34\", 2, tip, consensusParams));\n-    softforks.push_back(SoftForkDesc(\"bip66\", 3, tip, consensusParams));\n-    softforks.push_back(SoftForkDesc(\"bip65\", 4, tip, consensusParams));\n-    BIP9SoftForkDescPushBack(bip9_softforks, \"csv\", consensusParams, Consensus::DEPLOYMENT_CSV);\n-    BIP9SoftForkDescPushBack(bip9_softforks, \"segwit\", consensusParams, Consensus::DEPLOYMENT_SEGWIT);\n+    UniValue softforks(UniValue::VOBJ);\n+    SoftForkDescPushBack(softforks, \"bip34\", consensusParams, Consensus::DEPLOYMENT_BIP34);\n+    SoftForkDescPushBack(softforks, \"bip66\", consensusParams, Consensus::DEPLOYMENT_BIP66);\n+    SoftForkDescPushBack(softforks, \"bip65\", consensusParams, Consensus::DEPLOYMENT_BIP65);\n+    SoftForkDescPushBack(softforks, \"csv\", consensusParams, Consensus::DEPLOYMENT_CSV);\n+    SoftForkDescPushBack(softforks, \"segwit\", consensusParams, Consensus::DEPLOYMENT_SEGWIT);\n+    SoftForkDescPushBack(softforks, \"testdummy\", consensusParams, Consensus::DEPLOYMENT_TESTDUMMY);\n     obj.push_back(Pair(\"softforks\",             softforks));\n-    obj.push_back(Pair(\"bip9_softforks\", bip9_softforks));\n \n     if (fPruneMode)\n     {"
      },
      {
        "sha": "69c49c5f9b471c4cb5e0645900ee60926d259d77",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae3ed97df1d5bc2f7fc74914bc967a65ea0dcb82/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae3ed97df1d5bc2f7fc74914bc967a65ea0dcb82/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=ae3ed97df1d5bc2f7fc74914bc967a65ea0dcb82",
        "patch": "@@ -50,7 +50,6 @@ def _test_getblockchaininfo(self):\n \n         keys = [\n             'bestblockhash',\n-            'bip9_softforks',\n             'blocks',\n             'chain',\n             'chainwork',"
      }
    ]
  },
  {
    "sha": "92c5eccf010967051e72da76f2309d1a4b256b73",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MmM1ZWNjZjAxMDk2NzA1MWU3MmRhNzZmMjMwOWQxYTRiMjU2Yjcz",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2017-10-01T19:47:31Z"
      },
      "committer": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2017-10-01T19:47:59Z"
      },
      "message": "[test] Test for buried CSV and SEGWIT deployments",
      "tree": {
        "sha": "e91827c470d6defd3f18e95ecf28ffae7f18ab52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e91827c470d6defd3f18e95ecf28ffae7f18ab52"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92c5eccf010967051e72da76f2309d1a4b256b73",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92c5eccf010967051e72da76f2309d1a4b256b73",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92c5eccf010967051e72da76f2309d1a4b256b73",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92c5eccf010967051e72da76f2309d1a4b256b73/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae3ed97df1d5bc2f7fc74914bc967a65ea0dcb82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae3ed97df1d5bc2f7fc74914bc967a65ea0dcb82",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae3ed97df1d5bc2f7fc74914bc967a65ea0dcb82"
      }
    ],
    "stats": {
      "total": 222,
      "additions": 70,
      "deletions": 152
    },
    "files": [
      {
        "sha": "dbc86ecfe74eaddb1536cf09e7163e61f364ff60",
        "filename": "test/functional/bip68-112-113-p2p.py",
        "status": "modified",
        "additions": 33,
        "deletions": 64,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c5eccf010967051e72da76f2309d1a4b256b73/test/functional/bip68-112-113-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c5eccf010967051e72da76f2309d1a4b256b73/test/functional/bip68-112-113-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-112-113-p2p.py?ref=92c5eccf010967051e72da76f2309d1a4b256b73",
        "patch": "@@ -9,15 +9,9 @@\n BIP 112 - CHECKSEQUENCEVERIFY\n BIP 113 - MedianTimePast semantics for nLockTime\n \n-regtest lock-in with 108/144 block signalling\n-activation after a further 144 blocks\n-\n mine 82 blocks whose coinbases will be used to generate inputs for our tests\n-mine 61 blocks to transition from DEFINED to STARTED\n-mine 144 blocks only 100 of which are signaling readiness in order to fail to change state this period\n-mine 144 blocks with 108 signaling and verify STARTED->LOCKED_IN\n-mine 140 blocks and seed block chain with the 82 inputs will use for our tests at height 572\n-mine 3 blocks and verify still at LOCKED_IN and test that enforcement has not triggered\n+mine 345 blocks and seed block chain with the 82 inputs will use for our tests at height 428\n+mine 3 blocks and verify still not ACTIVE and test that enforcement has not triggered\n mine 1 block and test that enforcement has triggered (which triggers ACTIVE)\n Test BIP 113 is enforced\n Mine 4 blocks so next height is 580 and test BIP 68 is enforced for time and height\n@@ -209,35 +203,10 @@ def get_tests(self):\n         self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n         self.nodeaddress = self.nodes[0].getnewaddress()\n \n-        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'defined')\n-        test_blocks = self.generate_blocks(61, 4)\n+        # Activation height is hardcoded and the softfork will activate with any block version\n+        test_blocks = self.generate_blocks(345, 4)\n         yield TestInstance(test_blocks, sync_every_block=False) # 1\n-        # Advanced from DEFINED to STARTED, height = 143\n-        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'started')\n-\n-        # Fail to achieve LOCKED_IN 100 out of 144 signal bit 0\n-        # using a variety of bits to simulate multiple parallel softforks\n-        test_blocks = self.generate_blocks(50, 536870913) # 0x20000001 (signalling ready)\n-        test_blocks = self.generate_blocks(20, 4, test_blocks) # 0x00000004 (signalling not)\n-        test_blocks = self.generate_blocks(50, 536871169, test_blocks) # 0x20000101 (signalling ready)\n-        test_blocks = self.generate_blocks(24, 536936448, test_blocks) # 0x20010000 (signalling not)\n-        yield TestInstance(test_blocks, sync_every_block=False) # 2\n-        # Failed to advance past STARTED, height = 287\n-        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'started')\n-\n-        # 108 out of 144 signal bit 0 to achieve lock-in\n-        # using a variety of bits to simulate multiple parallel softforks\n-        test_blocks = self.generate_blocks(58, 536870913) # 0x20000001 (signalling ready)\n-        test_blocks = self.generate_blocks(26, 4, test_blocks) # 0x00000004 (signalling not)\n-        test_blocks = self.generate_blocks(50, 536871169, test_blocks) # 0x20000101 (signalling ready)\n-        test_blocks = self.generate_blocks(10, 536936448, test_blocks) # 0x20010000 (signalling not)\n-        yield TestInstance(test_blocks, sync_every_block=False) # 3\n-        # Advanced from STARTED to LOCKED_IN, height = 431\n-        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'locked_in')\n-\n-        # 140 more version 4 blocks\n-        test_blocks = self.generate_blocks(140, 4)\n-        yield TestInstance(test_blocks, sync_every_block=False) # 4\n+        assert_equal(get_softfork_status(self.nodes[0], 'csv')['active'], False)\n \n         ### Inputs at height = 572\n         # Put inputs for all tests in the chain at height 572 (tip now = 571) (time increases by 600s per block)\n@@ -275,9 +244,9 @@ def get_tests(self):\n \n         # 2 more version 4 blocks\n         test_blocks = self.generate_blocks(2, 4)\n-        yield TestInstance(test_blocks, sync_every_block=False) # 5\n+        yield TestInstance(test_blocks, sync_every_block=False) # 2\n         # Not yet advanced to ACTIVE, height = 574 (will activate for block 576, not 575)\n-        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'locked_in')\n+        assert_equal(get_softfork_status(self.nodes[0], 'csv')['active'], False)\n \n         # Test both version 1 and version 2 transactions for all tests\n         # BIP113 test transaction will be modified before each use to put in appropriate block time\n@@ -330,7 +299,7 @@ def get_tests(self):\n         # try BIP 112 with seq=9 txs\n         success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v1))\n         success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_9_v1))\n-        yield TestInstance([[self.create_test_block(success_txs), True]]) # 6\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 3\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n         ### Version 2 txs ###\n@@ -348,14 +317,14 @@ def get_tests(self):\n         # try BIP 112 with seq=9 txs\n         success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v2))\n         success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_9_v2))\n-        yield TestInstance([[self.create_test_block(success_txs), True]]) # 7\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 4\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n \n         # 1 more version 4 block to get us to height 575 so the fork should now be active for the next block\n         test_blocks = self.generate_blocks(1, 4)\n-        yield TestInstance(test_blocks, sync_every_block=False) # 8\n-        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'active')\n+        yield TestInstance(test_blocks, sync_every_block=False) # 5\n+        assert_equal(get_softfork_status(self.nodes[0], 'csv')['active'], True)\n \n \n         #################################\n@@ -368,26 +337,26 @@ def get_tests(self):\n         bip113tx_v2.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n         bip113signed2 = self.sign_transaction(self.nodes[0], bip113tx_v2)\n         for bip113tx in [bip113signed1, bip113signed2]:\n-            yield TestInstance([[self.create_test_block([bip113tx]), False]]) # 9,10\n+            yield TestInstance([[self.create_test_block([bip113tx]), False]]) # 6,7\n         # BIP 113 tests should now pass if the locktime is < MTP\n         bip113tx_v1.nLockTime = self.last_block_time - 600 * 5 - 1 # < MTP of prior block\n         bip113signed1 = self.sign_transaction(self.nodes[0], bip113tx_v1)\n         bip113tx_v2.nLockTime = self.last_block_time - 600 * 5 - 1 # < MTP of prior block\n         bip113signed2 = self.sign_transaction(self.nodes[0], bip113tx_v2)\n         for bip113tx in [bip113signed1, bip113signed2]:\n-            yield TestInstance([[self.create_test_block([bip113tx]), True]]) # 11,12\n+            yield TestInstance([[self.create_test_block([bip113tx]), True]]) # 8,9\n             self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n         # Next block height = 580 after 4 blocks of random version\n         test_blocks = self.generate_blocks(4, 1234)\n-        yield TestInstance(test_blocks, sync_every_block=False) # 13\n+        yield TestInstance(test_blocks, sync_every_block=False) # 10\n \n         ### BIP 68 ###\n         ### Version 1 txs ###\n         # All still pass\n         success_txs = []\n         success_txs.extend(all_rlt_txs(bip68txs_v1))\n-        yield TestInstance([[self.create_test_block(success_txs), True]]) # 14\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 11\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n         ### Version 2 txs ###\n@@ -397,55 +366,55 @@ def get_tests(self):\n             for b22 in range(2):\n                 for b18 in range(2):\n                     bip68success_txs.append(bip68txs_v2[1][b25][b22][b18])\n-        yield TestInstance([[self.create_test_block(bip68success_txs), True]]) # 15\n+        yield TestInstance([[self.create_test_block(bip68success_txs), True]]) # 12\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n         # All txs without flag fail as we are at delta height = 8 < 10 and delta time = 8 * 600 < 10 * 512\n         bip68timetxs = []\n         for b25 in range(2):\n             for b18 in range(2):\n                 bip68timetxs.append(bip68txs_v2[0][b25][1][b18])\n         for tx in bip68timetxs:\n-            yield TestInstance([[self.create_test_block([tx]), False]]) # 16 - 19\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 13 - 16\n         bip68heighttxs = []\n         for b25 in range(2):\n             for b18 in range(2):\n                 bip68heighttxs.append(bip68txs_v2[0][b25][0][b18])\n         for tx in bip68heighttxs:\n-            yield TestInstance([[self.create_test_block([tx]), False]]) # 20 - 23\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 17 - 20\n \n         # Advance one block to 581\n         test_blocks = self.generate_blocks(1, 1234)\n-        yield TestInstance(test_blocks, sync_every_block=False) # 24\n+        yield TestInstance(test_blocks, sync_every_block=False) # 21\n \n         # Height txs should fail and time txs should now pass 9 * 600 > 10 * 512\n         bip68success_txs.extend(bip68timetxs)\n-        yield TestInstance([[self.create_test_block(bip68success_txs), True]]) # 25\n+        yield TestInstance([[self.create_test_block(bip68success_txs), True]]) # 22\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n         for tx in bip68heighttxs:\n-            yield TestInstance([[self.create_test_block([tx]), False]]) # 26 - 29\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 23 - 26\n \n         # Advance one block to 582\n         test_blocks = self.generate_blocks(1, 1234)\n-        yield TestInstance(test_blocks, sync_every_block=False) # 30\n+        yield TestInstance(test_blocks, sync_every_block=False) # 27\n \n         # All BIP 68 txs should pass\n         bip68success_txs.extend(bip68heighttxs)\n-        yield TestInstance([[self.create_test_block(bip68success_txs), True]]) # 31\n+        yield TestInstance([[self.create_test_block(bip68success_txs), True]]) # 28\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n \n         ### BIP 112 ###\n         ### Version 1 txs ###\n         # -1 OP_CSV tx should fail\n-        yield TestInstance([[self.create_test_block([bip112tx_special_v1]), False]]) #32\n+        yield TestInstance([[self.create_test_block([bip112tx_special_v1]), False]]) # 29\n         # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in argument to OP_CSV, version 1 txs should still pass\n         success_txs = []\n         for b25 in range(2):\n             for b22 in range(2):\n                 for b18 in range(2):\n                     success_txs.append(bip112txs_vary_OP_CSV_v1[1][b25][b22][b18])\n                     success_txs.append(bip112txs_vary_OP_CSV_9_v1[1][b25][b22][b18])\n-        yield TestInstance([[self.create_test_block(success_txs), True]]) # 33\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 30\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n         # If SEQUENCE_LOCKTIME_DISABLE_FLAG is unset in argument to OP_CSV, version 1 txs should now fail\n@@ -459,11 +428,11 @@ def get_tests(self):\n                     fail_txs.append(bip112txs_vary_OP_CSV_9_v1[0][b25][b22][b18])\n \n         for tx in fail_txs:\n-            yield TestInstance([[self.create_test_block([tx]), False]]) # 34 - 81\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 31 - 78\n \n         ### Version 2 txs ###\n         # -1 OP_CSV tx should fail\n-        yield TestInstance([[self.create_test_block([bip112tx_special_v2]), False]]) #82\n+        yield TestInstance([[self.create_test_block([bip112tx_special_v2]), False]]) # 79\n \n         # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in argument to OP_CSV, version 2 txs should pass (all sequence locks are met)\n         success_txs = []\n@@ -473,7 +442,7 @@ def get_tests(self):\n                     success_txs.append(bip112txs_vary_OP_CSV_v2[1][b25][b22][b18]) # 8/16 of vary_OP_CSV\n                     success_txs.append(bip112txs_vary_OP_CSV_9_v2[1][b25][b22][b18]) # 8/16 of vary_OP_CSV_9\n \n-        yield TestInstance([[self.create_test_block(success_txs), True]]) # 83\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 80\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n         ## SEQUENCE_LOCKTIME_DISABLE_FLAG is unset in argument to OP_CSV for all remaining txs ##\n@@ -486,7 +455,7 @@ def get_tests(self):\n                     fail_txs.append(bip112txs_vary_OP_CSV_9_v2[0][b25][b22][b18]) # 16/16 of vary_OP_CSV_9\n \n         for tx in fail_txs:\n-            yield TestInstance([[self.create_test_block([tx]), False]]) # 84 - 107\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 81 - 104\n \n         # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in nSequence, tx should fail\n         fail_txs = []\n@@ -495,7 +464,7 @@ def get_tests(self):\n                 for b18 in range(2):\n                     fail_txs.append(bip112txs_vary_nSequence_v2[1][b25][b22][b18]) # 8/16 of vary_nSequence\n         for tx in fail_txs:\n-            yield TestInstance([[self.create_test_block([tx]), False]]) # 108-115\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 105 - 112\n \n         # If sequencelock types mismatch, tx should fail\n         fail_txs = []\n@@ -504,15 +473,15 @@ def get_tests(self):\n                 fail_txs.append(bip112txs_vary_nSequence_v2[0][b25][1][b18]) # 12/16 of vary_nSequence\n                 fail_txs.append(bip112txs_vary_OP_CSV_v2[0][b25][1][b18]) # 12/16 of vary_OP_CSV\n         for tx in fail_txs:\n-            yield TestInstance([[self.create_test_block([tx]), False]]) # 116-123\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 113 - 120\n \n         # Remaining txs should pass, just test masking works properly\n         success_txs = []\n         for b25 in range(2):\n             for b18 in range(2):\n                 success_txs.append(bip112txs_vary_nSequence_v2[0][b25][0][b18]) # 16/16 of vary_nSequence\n                 success_txs.append(bip112txs_vary_OP_CSV_v2[0][b25][0][b18]) # 16/16 of vary_OP_CSV\n-        yield TestInstance([[self.create_test_block(success_txs), True]]) # 124\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 121\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n         # Additional test, of checking that comparison of two time types works properly\n@@ -523,7 +492,7 @@ def get_tests(self):\n                 tx.vin[0].nSequence = base_relative_locktime | seq_type_flag\n                 signtx = self.sign_transaction(self.nodes[0], tx)\n                 time_txs.append(signtx)\n-        yield TestInstance([[self.create_test_block(time_txs), True]]) # 125\n+        yield TestInstance([[self.create_test_block(time_txs), True]]) # 122\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n         ### Missing aspects of test"
      },
      {
        "sha": "bd145b9c44ab6037b3e8e2a649a1f3639d38519f",
        "filename": "test/functional/bip68-sequence.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c5eccf010967051e72da76f2309d1a4b256b73/test/functional/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c5eccf010967051e72da76f2309d1a4b256b73/test/functional/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-sequence.py?ref=92c5eccf010967051e72da76f2309d1a4b256b73",
        "patch": "@@ -325,7 +325,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n     # being run, then it's possible the test has activated the soft fork, and\n     # this test should be moved to run earlier, or deleted.\n     def test_bip68_not_consensus(self):\n-        assert(get_bip9_status(self.nodes[0], 'csv')['status'] != 'active')\n+        assert_equal(get_softfork_status(self.nodes[0], 'csv')['active'], False)\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 2)\n \n         tx1 = FromHex(CTransaction(), self.nodes[0].getrawtransaction(txid))\n@@ -373,7 +373,7 @@ def activateCSV(self):\n         height = self.nodes[0].getblockcount()\n         assert(height < min_activation_height)\n         self.nodes[0].generate(min_activation_height-height)\n-        assert(get_bip9_status(self.nodes[0], 'csv')['status'] == 'active')\n+        assert_equal(get_softfork_status(self.nodes[0], 'csv')['active'], True)\n         sync_blocks(self.nodes)\n \n     # Use self.nodes[1] to test that version 2 transactions are standard."
      },
      {
        "sha": "1ffd5a539ec2d6e9cc37a085d08101d6e6e4aae8",
        "filename": "test/functional/nulldummy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c5eccf010967051e72da76f2309d1a4b256b73/test/functional/nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c5eccf010967051e72da76f2309d1a4b256b73/test/functional/nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/nulldummy.py?ref=92c5eccf010967051e72da76f2309d1a4b256b73",
        "patch": "@@ -40,7 +40,7 @@ class NULLDUMMYTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n-        self.extra_args = [['-whitelist=127.0.0.1', '-walletprematurewitness']]\n+        self.extra_args = [['-whitelist=127.0.0.1', '-walletprematurewitness', '-segwitheight=432']]\n \n     def run_test(self):\n         self.address = self.nodes[0].getnewaddress()"
      },
      {
        "sha": "ea755119669994f0188f8093cd413618c0522f42",
        "filename": "test/functional/p2p-compactblocks.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c5eccf010967051e72da76f2309d1a4b256b73/test/functional/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c5eccf010967051e72da76f2309d1a4b256b73/test/functional/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-compactblocks.py?ref=92c5eccf010967051e72da76f2309d1a4b256b73",
        "patch": "@@ -93,7 +93,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         # Node0 = pre-segwit, node1 = segwit-aware\n         self.num_nodes = 2\n-        self.extra_args = [[\"-vbparams=segwit:0:0\"], [\"-txindex\"]]\n+        self.extra_args = [[\"-segwitheight=-1\"], [\"-txindex\",\"-segwitheight=432\"]]\n         self.utxos = []\n \n     def build_block_on_tip(self, node, segwit=False):\n@@ -676,7 +676,7 @@ def test_compactblocks_not_at_tip(self, node, test_node):\n \n     def activate_segwit(self, node):\n         node.generate(144*3)\n-        assert_equal(get_bip9_status(node, \"segwit\")[\"status\"], 'active')\n+        assert_equal(get_softfork_status(self.nodes[0], 'csv')['active'], True)\n \n     def test_end_to_end_block_relay(self, node, listeners):\n         utxo = self.utxos.pop(0)"
      },
      {
        "sha": "5ed4165790553aff7770faf8d4c5983ecc568882",
        "filename": "test/functional/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c5eccf010967051e72da76f2309d1a4b256b73/test/functional/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c5eccf010967051e72da76f2309d1a4b256b73/test/functional/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-fullblocktest.py?ref=92c5eccf010967051e72da76f2309d1a4b256b73",
        "patch": "@@ -53,6 +53,7 @@ class FullBlockTest(ComparisonTestFramework):\n     # Change the \"outcome\" variable from each TestInstance object to only do the comparison.\n     def set_test_params(self):\n         self.num_nodes = 1\n+        self.extra_args = [[\"-segwitheight=432\", \"-whitelist=127.0.0.1\"]]\n         self.setup_clean_chain = True\n         self.block_heights = {}\n         self.coinbase_key = CECKey()"
      },
      {
        "sha": "43fa4f773c7fb13e373a9bcc12c18e4e7a59118d",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 14,
        "deletions": 69,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c5eccf010967051e72da76f2309d1a4b256b73/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c5eccf010967051e72da76f2309d1a4b256b73/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=92c5eccf010967051e72da76f2309d1a4b256b73",
        "patch": "@@ -14,11 +14,6 @@\n import random\n from binascii import hexlify\n \n-# The versionbit bit used to signal activation of SegWit\n-VB_WITNESS_BIT = 1\n-VB_PERIOD = 144\n-VB_TOP_BITS = 0x20000000\n-\n MAX_SIGOP_COST = 80000\n \n \n@@ -111,7 +106,8 @@ class SegWitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n-        self.extra_args = [[\"-whitelist=127.0.0.1\"], [\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\"], [\"-whitelist=127.0.0.1\", \"-vbparams=segwit:0:0\"]]\n+        self.segwitheight = str(random.randint(120, 150)) # Pick a random number for the hardcoded activation height\n+        self.extra_args = [[\"-whitelist=127.0.0.1\", \"-segwitheight=\" + self.segwitheight], [\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\", \"-segwitheight=\" + self.segwitheight], [\"-whitelist=127.0.0.1\", \"-segwitheight=-1\"]]\n \n     def setup_network(self):\n         self.setup_nodes()\n@@ -181,7 +177,7 @@ def test_unnecessary_witness_before_segwit_activation(self):\n         # For now, rely on earlier tests to have created at least one utxo for\n         # us to use\n         assert(len(self.utxo) > 0)\n-        assert(get_bip9_status(self.nodes[0], 'segwit')['status'] != 'active')\n+        assert_equal(get_softfork_status(self.nodes[0], 'segwit')['active'], False)\n \n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n@@ -195,7 +191,7 @@ def test_unnecessary_witness_before_segwit_activation(self):\n         assert(tx.sha256 != tx.calc_sha256(with_witness=True))\n \n         # Construct a segwit-signaling block that includes the transaction.\n-        block = self.build_next_block(nVersion=(VB_TOP_BITS|(1 << VB_WITNESS_BIT)))\n+        block = self.build_next_block(nVersion=4)\n         self.update_witness_block_with_transactions(block, [tx])\n         # Sending witness data before activation is not allowed (anti-spam\n         # rule).\n@@ -263,43 +259,14 @@ def test_unnecessary_witness_before_segwit_activation(self):\n         self.utxo.pop(0)\n         self.utxo.append(UTXO(tx4.sha256, 0, tx4.vout[0].nValue))\n \n-\n-    # Mine enough blocks for segwit's vb state to be 'started'.\n-    def advance_to_segwit_started(self):\n-        height = self.nodes[0].getblockcount()\n-        # Will need to rewrite the tests here if we are past the first period\n-        assert(height < VB_PERIOD - 1)\n-        # Genesis block is 'defined'.\n-        assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'defined')\n-        # Advance to end of period, status should now be 'started'\n-        self.nodes[0].generate(VB_PERIOD-height-1)\n-        assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'started')\n-\n-    # Mine enough blocks to lock in segwit, but don't activate.\n-    # TODO: we could verify that lockin only happens at the right threshold of\n-    # signalling blocks, rather than just at the right period boundary.\n-    def advance_to_segwit_lockin(self):\n-        height = self.nodes[0].getblockcount()\n-        assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'started')\n-        # Advance to end of period, and verify lock-in happens at the end\n-        self.nodes[0].generate(VB_PERIOD-1)\n-        height = self.nodes[0].getblockcount()\n-        assert((height % VB_PERIOD) == VB_PERIOD - 2)\n-        assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'started')\n-        self.nodes[0].generate(1)\n-        assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'locked_in')\n-\n-\n     # Mine enough blocks to activate segwit.\n-    # TODO: we could verify that activation only happens at the right threshold\n-    # of signalling blocks, rather than just at the right period boundary.\n     def advance_to_segwit_active(self):\n-        assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'locked_in')\n+        assert_equal(get_softfork_status(self.nodes[0], 'segwit')['active'], False)\n         height = self.nodes[0].getblockcount()\n-        self.nodes[0].generate(VB_PERIOD - (height%VB_PERIOD) - 2)\n-        assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'locked_in')\n+        self.nodes[0].generate(int(self.segwitheight) - height - 2)\n+        assert_equal(get_softfork_status(self.nodes[0], 'segwit')['active'], False)\n         self.nodes[0].generate(1)\n-        assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'active')\n+        assert_equal(get_softfork_status(self.nodes[0], 'segwit')['active'], True)\n \n \n     # This test can only be run after segwit has activated\n@@ -962,7 +929,7 @@ def test_block_relay(self, segwit_activated):\n         assert(self.test_node.last_message[\"getdata\"].inv[0].type == blocktype)\n         self.test_node.test_witness_block(block2, True)\n \n-        block3 = self.build_next_block(nVersion=(VB_TOP_BITS | (1<<15)))\n+        block3 = self.build_next_block(nVersion=4)\n         block3.solve()\n         self.test_node.announce_block_and_wait_for_getdata(block3, use_header=True)\n         assert(self.test_node.last_message[\"getdata\"].inv[0].type == blocktype)\n@@ -1493,13 +1460,13 @@ def test_upgrade_after_activation(self, node_id):\n \n         # Restart with the new binary\n         self.stop_node(node_id)\n-        self.start_node(node_id, extra_args=[])\n+        self.start_node(node_id, extra_args=[\"-segwitheight=\" + self.segwitheight])\n         connect_nodes(self.nodes[0], node_id)\n \n         sync_blocks(self.nodes)\n \n         # Make sure that this peer thinks segwit has activated.\n-        assert(get_bip9_status(self.nodes[node_id], 'segwit')['status'] == \"active\")\n+        assert_equal(get_softfork_status(self.nodes[0], 'segwit')['active'], True)\n \n         # Make sure this peers blocks match those of node0.\n         height = self.nodes[node_id].getblockcount()\n@@ -1618,10 +1585,6 @@ def test_getblocktemplate_before_lockin(self):\n         # Node0 is segwit aware, node2 is not.\n         for node in [self.nodes[0], self.nodes[2]]:\n             gbt_results = node.getblocktemplate()\n-            block_version = gbt_results['version']\n-            # If we're not indicating segwit support, we will still be\n-            # signalling for segwit activation.\n-            assert_equal((block_version & (1 << VB_WITNESS_BIT) != 0), node == self.nodes[0])\n             # If we don't specify the segwit rule, then we won't get a default\n             # commitment.\n             assert('default_witness_commitment' not in gbt_results)\n@@ -1639,14 +1602,10 @@ def test_getblocktemplate_before_lockin(self):\n             gbt_results = node.getblocktemplate({\"rules\" : [\"segwit\"]})\n             block_version = gbt_results['version']\n             if node == self.nodes[2]:\n-                # If this is a non-segwit node, we should still not get a witness\n-                # commitment, nor a version bit signalling segwit.\n-                assert_equal(block_version & (1 << VB_WITNESS_BIT), 0)\n+                # If this is a non-segwit node, we should still not get a witness commitment.\n                 assert('default_witness_commitment' not in gbt_results)\n             else:\n-                # For segwit-aware nodes, check the version bit and the witness\n-                # commitment are correct.\n-                assert(block_version & (1 << VB_WITNESS_BIT) != 0)\n+                # For segwit-aware nodes, check the witness commitment is correct.\n                 assert('default_witness_commitment' in gbt_results)\n                 witness_commitment = gbt_results['default_witness_commitment']\n \n@@ -1889,28 +1848,14 @@ def run_test(self):\n         # Test logic begins here\n         self.test_node.wait_for_verack()\n \n-        self.log.info(\"Starting tests before segwit lock in:\")\n+        self.log.info(\"Starting tests before segwit activation\")\n \n         self.test_witness_services() # Verifies NODE_WITNESS\n         self.test_non_witness_transaction() # non-witness tx's are accepted\n-        self.test_unnecessary_witness_before_segwit_activation()\n         self.test_block_relay(segwit_activated=False)\n-\n-        # Advance to segwit being 'started'\n-        self.advance_to_segwit_started()\n-        sync_blocks(self.nodes)\n         self.test_getblocktemplate_before_lockin()\n-\n-        sync_blocks(self.nodes)\n-\n-        # At lockin, nothing should change.\n-        self.log.info(\"Testing behavior post lockin, pre-activation\")\n-        self.advance_to_segwit_lockin()\n-\n-        # Retest unnecessary witnesses\n         self.test_unnecessary_witness_before_segwit_activation()\n         self.test_witness_tx_relay_before_segwit_activation()\n-        self.test_block_relay(segwit_activated=False)\n         self.test_p2sh_witness(segwit_activated=False)\n         self.test_standardness_v0(segwit_activated=False)\n "
      },
      {
        "sha": "214fbf4620890b27ee4724b345ed081be8f0c46d",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c5eccf010967051e72da76f2309d1a4b256b73/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c5eccf010967051e72da76f2309d1a4b256b73/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=92c5eccf010967051e72da76f2309d1a4b256b73",
        "patch": "@@ -77,9 +77,9 @@ class SegWitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n-        self.extra_args = [[\"-walletprematurewitness\", \"-rpcserialversion=0\"],\n-                           [\"-blockversion=4\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\", \"-walletprematurewitness\", \"-rpcserialversion=1\"],\n-                           [\"-blockversion=536870915\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\", \"-walletprematurewitness\"]]\n+        self.extra_args = [[\"-walletprematurewitness\", \"-rpcserialversion=0\", \"-segwitheight=432\"],\n+                           [\"-blockversion=4\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\", \"-walletprematurewitness\", \"-rpcserialversion=1\", \"-segwitheight=432\"],\n+                           [\"-blockversion=536870915\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\", \"-walletprematurewitness\", \"-segwitheight=432\"]]\n \n     def setup_network(self):\n         super().setup_network()"
      },
      {
        "sha": "23a74a5f53ae3458e3604f892919f9a22823edb5",
        "filename": "test/functional/sendheaders.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c5eccf010967051e72da76f2309d1a4b256b73/test/functional/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c5eccf010967051e72da76f2309d1a4b256b73/test/functional/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/sendheaders.py?ref=92c5eccf010967051e72da76f2309d1a4b256b73",
        "patch": "@@ -215,7 +215,7 @@ def run_test(self):\n         connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], inv_node))\n         # Set nServices to 0 for test_node, so no block download will occur outside of\n         # direct fetching\n-        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_node, services=0))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_node, services=NODE_WITNESS))\n         inv_node.add_connection(connections[0])\n         test_node.add_connection(connections[1])\n "
      },
      {
        "sha": "a1d4d1ff79e32a890b99f5ffa0919582f7358d74",
        "filename": "test/functional/test_framework/blockstore.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c5eccf010967051e72da76f2309d1a4b256b73/test/functional/test_framework/blockstore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c5eccf010967051e72da76f2309d1a4b256b73/test/functional/test_framework/blockstore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blockstore.py?ref=92c5eccf010967051e72da76f2309d1a4b256b73",
        "patch": "@@ -100,7 +100,7 @@ def add_header(self, header):\n     def get_blocks(self, inv):\n         responses = []\n         for i in inv:\n-            if (i.type == 2): # MSG_BLOCK\n+            if (i.type == 2 or i.type == (2 | (1 << 30))): # MSG_BLOCK or MSG_WITNESS_BLOCK\n                 data = self.get(i.hash)\n                 if data is not None:\n                     # Use msg_generic to avoid re-serialization\n@@ -153,7 +153,7 @@ def add_transaction(self, tx):\n     def get_transactions(self, inv):\n         responses = []\n         for i in inv:\n-            if (i.type == 1): # MSG_TX\n+            if (i.type == 1 or i.type == (1 | (1 << 30))): # MSG_TX or MSG_WITNESS_TX\n                 tx = self.get(i.hash)\n                 if tx is not None:\n                     responses.append(msg_generic(b\"tx\", tx))"
      },
      {
        "sha": "10fb2f4e8e373aff23f4626dfddf94e7879fba65",
        "filename": "test/functional/test_framework/comptool.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c5eccf010967051e72da76f2309d1a4b256b73/test/functional/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c5eccf010967051e72da76f2309d1a4b256b73/test/functional/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/comptool.py?ref=92c5eccf010967051e72da76f2309d1a4b256b73",
        "patch": "@@ -80,9 +80,9 @@ def on_getdata(self, conn, message):\n         [conn.send_message(r) for r in self.tx_store.get_transactions(message.inv)]\n \n         for i in message.inv:\n-            if i.type == 1:\n+            if i.type == 1 or i.type == 1 | (1 << 30): # MSG_TX or MSG_WITNESS_TX:\n                 self.tx_request_map[i.hash] = True\n-            elif i.type == 2:\n+            elif i.type == 2 or i.type == 2 | (1 << 30): # MSG_BLOCK or MSG_WITNESS_BLOCK:\n                 self.block_request_map[i.hash] = True\n \n     def on_inv(self, conn, message):"
      },
      {
        "sha": "09f66dab8a80eb15b8a2de7c08cb9214f51a7ba2",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c5eccf010967051e72da76f2309d1a4b256b73/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c5eccf010967051e72da76f2309d1a4b256b73/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=92c5eccf010967051e72da76f2309d1a4b256b73",
        "patch": "@@ -949,7 +949,7 @@ class msg_version(object):\n \n     def __init__(self):\n         self.nVersion = MY_VERSION\n-        self.nServices = 1\n+        self.nServices = NODE_NETWORK | NODE_WITNESS\n         self.nTime = int(time.time())\n         self.addrTo = CAddress()\n         self.addrFrom = CAddress()\n@@ -1650,7 +1650,7 @@ class NodeConn(asyncore.dispatcher):\n         \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\",   # regtest\n     }\n \n-    def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE_NETWORK, send_version=True):\n+    def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE_NETWORK|NODE_WITNESS, send_version=True):\n         asyncore.dispatcher.__init__(self, map=mininode_socket_map)\n         self.dstaddr = dstaddr\n         self.dstport = dstport"
      },
      {
        "sha": "adcd4d7937f74180e9dbd04537d08a11a31b72e0",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c5eccf010967051e72da76f2309d1a4b256b73/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c5eccf010967051e72da76f2309d1a4b256b73/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=92c5eccf010967051e72da76f2309d1a4b256b73",
        "patch": "@@ -312,9 +312,9 @@ def get_auth_cookie(datadir):\n def log_filename(dirname, n_node, logname):\n     return os.path.join(dirname, \"node\" + str(n_node), \"regtest\", logname)\n \n-def get_bip9_status(node, key):\n+def get_softfork_status(node, key):\n     info = node.getblockchaininfo()\n-    return info['bip9_softforks'][key]\n+    return info['softforks'][key]\n \n def set_node_times(nodes, t):\n     for node in nodes:"
      },
      {
        "sha": "e018dff36adf36ec19a29fa7d5aa50c9b46c6e0c",
        "filename": "test/functional/zmq_test.py",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c5eccf010967051e72da76f2309d1a4b256b73/test/functional/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c5eccf010967051e72da76f2309d1a4b256b73/test/functional/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zmq_test.py?ref=92c5eccf010967051e72da76f2309d1a4b256b73",
        "patch": "@@ -8,6 +8,7 @@\n import struct\n \n from test_framework.test_framework import BitcoinTestFramework, SkipTest\n+from test_framework.mininode import CTransaction, BytesIO\n from test_framework.util import (assert_equal,\n                                  bytes_to_hex_str,\n                                  hash256,\n@@ -71,12 +72,14 @@ def _zmq_test(self):\n         msg = self.zmqSubSocket.recv_multipart()\n         topic = msg[0]\n         assert_equal(topic, b\"rawtx\")\n-        body = msg[1]\n+        body = CTransaction()\n+        body.deserialize(BytesIO(msg[1]))\n+        body.calc_sha256()\n         msgSequence = struct.unpack('<I', msg[-1])[-1]\n         assert_equal(msgSequence, 0) # must be sequence 0 on rawtx\n \n         # Check that the rawtx hashes to the hashtx\n-        assert_equal(hash256(body), txhash)\n+        assert_equal(body.hash, bytes_to_hex_str(txhash))\n \n         self.log.info(\"Wait for block\")\n         msg = self.zmqSubSocket.recv_multipart()"
      }
    ]
  }
]