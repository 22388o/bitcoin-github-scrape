[
  {
    "sha": "0dcac51049cdd924a50d62629757effc8d542046",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZGNhYzUxMDQ5Y2RkOTI0YTUwZDYyNjI5NzU3ZWZmYzhkNTQyMDQ2",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-12-02T00:52:08Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-12-03T17:12:31Z"
      },
      "message": "wallet_keypool_topup.py: Test for all keypool address types",
      "tree": {
        "sha": "1690db2ccbaf9e1ded7eec3f0c5e08c9e6810768",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1690db2ccbaf9e1ded7eec3f0c5e08c9e6810768"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0dcac51049cdd924a50d62629757effc8d542046",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dcac51049cdd924a50d62629757effc8d542046",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0dcac51049cdd924a50d62629757effc8d542046",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dcac51049cdd924a50d62629757effc8d542046/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "384967f311b4c6b1d6c797f7821d25feb26bafbf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/384967f311b4c6b1d6c797f7821d25feb26bafbf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/384967f311b4c6b1d6c797f7821d25feb26bafbf"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 39,
      "deletions": 24
    },
    "files": [
      {
        "sha": "b7c8d3098d2b5e6eae899e33c7994848ea6b3632",
        "filename": "test/functional/wallet_keypool_topup.py",
        "status": "modified",
        "additions": 39,
        "deletions": 24,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dcac51049cdd924a50d62629757effc8d542046/test/functional/wallet_keypool_topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dcac51049cdd924a50d62629757effc8d542046/test/functional/wallet_keypool_topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool_topup.py?ref=0dcac51049cdd924a50d62629757effc8d542046",
        "patch": "@@ -24,8 +24,8 @@\n class KeypoolRestoreTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 2\n-        self.extra_args = [[], ['-keypool=100']]\n+        self.num_nodes = 4\n+        self.extra_args = [[], ['-keypool=100'], ['-keypool=100'], ['-keypool=100']]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n@@ -40,32 +40,47 @@ def run_test(self):\n         shutil.copyfile(wallet_path, wallet_backup_path)\n         self.start_node(1, self.extra_args[1])\n         connect_nodes_bi(self.nodes, 0, 1)\n+        connect_nodes_bi(self.nodes, 0, 2)\n+        connect_nodes_bi(self.nodes, 0, 3)\n \n-        self.log.info(\"Generate keys for wallet\")\n-        for _ in range(90):\n-            addr_oldpool = self.nodes[1].getnewaddress()\n-        for _ in range(20):\n-            addr_extpool = self.nodes[1].getnewaddress()\n+        for i, output_type in enumerate([\"legacy\", \"p2sh-segwit\", \"bech32\"]):\n \n-        self.log.info(\"Send funds to wallet\")\n-        self.nodes[0].sendtoaddress(addr_oldpool, 10)\n-        self.nodes[0].generate(1)\n-        self.nodes[0].sendtoaddress(addr_extpool, 5)\n-        self.nodes[0].generate(1)\n-        sync_blocks(self.nodes)\n+            self.log.info(\"Generate keys for wallet with address type: {}\".format(output_type))\n+            idx = i+1\n+            for _ in range(90):\n+                addr_oldpool = self.nodes[idx].getnewaddress(address_type=output_type)\n+            for _ in range(20):\n+                addr_extpool = self.nodes[idx].getnewaddress(address_type=output_type)\n \n-        self.log.info(\"Restart node with wallet backup\")\n-        self.stop_node(1)\n-        shutil.copyfile(wallet_backup_path, wallet_path)\n-        self.start_node(1, self.extra_args[1])\n-        connect_nodes_bi(self.nodes, 0, 1)\n-        self.sync_all()\n+            # Make sure we're creating the outputs we expect\n+            address_details = self.nodes[idx].validateaddress(addr_extpool)\n+            if i == 0:\n+                assert(not address_details[\"isscript\"] and not address_details[\"iswitness\"])\n+            elif i == 1:\n+                assert(address_details[\"isscript\"] and not address_details[\"iswitness\"])\n+            else:\n+                assert(not address_details[\"isscript\"] and address_details[\"iswitness\"])\n+\n+\n+            self.log.info(\"Send funds to wallet\")\n+            self.nodes[0].sendtoaddress(addr_oldpool, 10)\n+            self.nodes[0].generate(1)\n+            self.nodes[0].sendtoaddress(addr_extpool, 5)\n+            self.nodes[0].generate(1)\n+            sync_blocks(self.nodes)\n+\n+            self.log.info(\"Restart node with wallet backup\")\n+            self.stop_node(idx)\n+            shutil.copyfile(wallet_backup_path, wallet_path)\n+            self.start_node(idx, self.extra_args[idx])\n+            connect_nodes_bi(self.nodes, 0, idx)\n+            self.sync_all()\n \n-        self.log.info(\"Verify keypool is restored and balance is correct\")\n-        assert_equal(self.nodes[1].getbalance(), 15)\n-        assert_equal(self.nodes[1].listtransactions()[0]['category'], \"receive\")\n-        # Check that we have marked all keys up to the used keypool key as used\n-        assert_equal(self.nodes[1].getaddressinfo(self.nodes[1].getnewaddress())['hdkeypath'], \"m/0'/0'/110'\")\n+            self.log.info(\"Verify keypool is restored and balance is correct\")\n+            assert_equal(self.nodes[idx].getbalance(), 15)\n+            assert_equal(self.nodes[idx].listtransactions()[0]['category'], \"receive\")\n+            # Check that we have marked all keys up to the used keypool key as used\n+            assert_equal(self.nodes[idx].getaddressinfo(self.nodes[idx].getnewaddress())['hdkeypath'], \"m/0'/0'/110'\")\n \n \n if __name__ == '__main__':"
      }
    ]
  }
]