[
  {
    "sha": "172213be5b174243dc501c1103ad5fe2fee67a16",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzIyMTNiZTViMTc0MjQzZGM1MDFjMTEwM2FkNWZlMmZlZTY3YTE2",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-18T19:19:13Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-09T20:43:10Z"
      },
      "message": "Add GetNewDestination to CWallet to fetch new destinations\n\nInstead of having the same multiple lines of code everywhere\nthat new destinations are fetched, introduce GetNewDestination as\na member function of CWallet which does the key fetching, label\nsetting, script generation, and destination generation.",
      "tree": {
        "sha": "2f890eb657ffa7b95ff6fb7e04b58a58c4ba081f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2f890eb657ffa7b95ff6fb7e04b58a58c4ba081f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/172213be5b174243dc501c1103ad5fe2fee67a16",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/172213be5b174243dc501c1103ad5fe2fee67a16",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/172213be5b174243dc501c1103ad5fe2fee67a16",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/172213be5b174243dc501c1103ad5fe2fee67a16/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0853d8d2fd3cd19c3aea495f228222c7a8536e08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0853d8d2fd3cd19c3aea495f228222c7a8536e08",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0853d8d2fd3cd19c3aea495f228222c7a8536e08"
      }
    ],
    "stats": {
      "total": 93,
      "additions": 52,
      "deletions": 41
    },
    "files": [
      {
        "sha": "93374ea825afbf8321ea54ad4aa06d55e1e6f3ce",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/172213be5b174243dc501c1103ad5fe2fee67a16/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/172213be5b174243dc501c1103ad5fe2fee67a16/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=172213be5b174243dc501c1103ad5fe2fee67a16",
        "patch": "@@ -140,9 +140,11 @@ class WalletImpl : public Wallet\n     void abortRescan() override { m_wallet->AbortRescan(); }\n     bool backupWallet(const std::string& filename) override { return m_wallet->BackupWallet(filename); }\n     std::string getWalletName() override { return m_wallet->GetName(); }\n-    bool getKeyFromPool(bool internal, CPubKey& pub_key) override\n+    bool getNewDestination(const OutputType type, const std::string label, CTxDestination& dest) override\n     {\n-        return m_wallet->GetKeyFromPool(pub_key, internal);\n+        LOCK(m_wallet->cs_wallet);\n+        std::string error;\n+        return m_wallet->GetNewDestination(type, label, dest, error);\n     }\n     bool getPubKey(const CKeyID& address, CPubKey& pub_key) override { return m_wallet->GetPubKey(address, pub_key); }\n     bool getPrivKey(const CKeyID& address, CKey& key) override { return m_wallet->GetKey(address, key); }"
      },
      {
        "sha": "25815d85325a162fd84a0980ee0a6cfe471487f2",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/172213be5b174243dc501c1103ad5fe2fee67a16/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/172213be5b174243dc501c1103ad5fe2fee67a16/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=172213be5b174243dc501c1103ad5fe2fee67a16",
        "patch": "@@ -76,8 +76,8 @@ class Wallet\n     //! Get wallet name.\n     virtual std::string getWalletName() = 0;\n \n-    // Get key from pool.\n-    virtual bool getKeyFromPool(bool internal, CPubKey& pub_key) = 0;\n+    // Get a new address.\n+    virtual bool getNewDestination(const OutputType type, const std::string label, CTxDestination& dest) = 0;\n \n     //! Get public key.\n     virtual bool getPubKey(const CKeyID& address, CPubKey& pub_key) = 0;"
      },
      {
        "sha": "29423db3d033039b37d81463e186dba6256668da",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 9,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/172213be5b174243dc501c1103ad5fe2fee67a16/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/172213be5b174243dc501c1103ad5fe2fee67a16/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=172213be5b174243dc501c1103ad5fe2fee67a16",
        "patch": "@@ -358,12 +358,15 @@ QString AddressTableModel::addRow(const QString &type, const QString &label, con\n                 return QString();\n             }\n         }\n+\n+        // Add entry\n+        walletModel->wallet().setAddressBook(DecodeDestination(strAddress), strLabel, \"send\");\n     }\n     else if(type == Receive)\n     {\n         // Generate a new address to associate with given label\n-        CPubKey newKey;\n-        if(!walletModel->wallet().getKeyFromPool(false /* internal */, newKey))\n+        CTxDestination dest;\n+        if(!walletModel->wallet().getNewDestination(address_type, strLabel, dest))\n         {\n             WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n             if(!ctx.isValid())\n@@ -372,23 +375,18 @@ QString AddressTableModel::addRow(const QString &type, const QString &label, con\n                 editStatus = WALLET_UNLOCK_FAILURE;\n                 return QString();\n             }\n-            if(!walletModel->wallet().getKeyFromPool(false /* internal */, newKey))\n+            if(!walletModel->wallet().getNewDestination(address_type, strLabel, dest))\n             {\n                 editStatus = KEY_GENERATION_FAILURE;\n                 return QString();\n             }\n         }\n-        walletModel->wallet().learnRelatedScripts(newKey, address_type);\n-        strAddress = EncodeDestination(GetDestinationForKey(newKey, address_type));\n+        strAddress = EncodeDestination(dest);\n     }\n     else\n     {\n         return QString();\n     }\n-\n-    // Add entry\n-    walletModel->wallet().setAddressBook(DecodeDestination(strAddress), strLabel,\n-                           (type == Send ? \"send\" : \"receive\"));\n     return QString::fromStdString(strAddress);\n }\n "
      },
      {
        "sha": "345db7acde7b4fd87acac18380933d1c98597e91",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/172213be5b174243dc501c1103ad5fe2fee67a16/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/172213be5b174243dc501c1103ad5fe2fee67a16/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=172213be5b174243dc501c1103ad5fe2fee67a16",
        "patch": "@@ -666,16 +666,14 @@ void PaymentServer::fetchPaymentACK(WalletModel* walletModel, const SendCoinsRec\n     payment.add_transactions(transaction.data(), transaction.size());\n \n     // Create a new refund address, or re-use:\n-    CPubKey newKey;\n-    if (walletModel->wallet().getKeyFromPool(false /* internal */, newKey)) {\n+    CTxDestination dest;\n+    const OutputType change_type = walletModel->wallet().getDefaultChangeType() != OutputType::CHANGE_AUTO ? walletModel->wallet().getDefaultChangeType() : walletModel->wallet().getDefaultAddressType();\n+    if (walletModel->wallet().getNewDestination(change_type, \"\", dest)) {\n         // BIP70 requests encode the scriptPubKey directly, so we are not restricted to address\n         // types supported by the receiver. As a result, we choose the address format we also\n         // use for change. Despite an actual payment and not change, this is a close match:\n         // it's the output type we use subject to privacy issues, but not restricted by what\n         // other software supports.\n-        const OutputType change_type = walletModel->wallet().getDefaultChangeType() != OutputType::CHANGE_AUTO ? walletModel->wallet().getDefaultChangeType() : walletModel->wallet().getDefaultAddressType();\n-        walletModel->wallet().learnRelatedScripts(newKey, change_type);\n-        CTxDestination dest = GetDestinationForKey(newKey, change_type);\n         std::string label = tr(\"Refund from %1\").arg(recipient.authenticatedMerchant).toStdString();\n         walletModel->wallet().setAddressBook(dest, label, \"refund\");\n "
      },
      {
        "sha": "44afba1a020c0219c1fbb0c0c1118e171404c215",
        "filename": "src/test/util.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 8,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/172213be5b174243dc501c1103ad5fe2fee67a16/src/test/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/172213be5b174243dc501c1103ad5fe2fee67a16/src/test/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util.cpp?ref=172213be5b174243dc501c1103ad5fe2fee67a16",
        "patch": "@@ -25,14 +25,9 @@ const std::string ADDRESS_BCRT1_UNSPENDABLE = \"bcrt1qqqqqqqqqqqqqqqqqqqqqqqqqqqq\n std::string getnewaddress(CWallet& w)\n {\n     constexpr auto output_type = OutputType::BECH32;\n-\n-    CPubKey new_key;\n-    if (!w.GetKeyFromPool(new_key)) assert(false);\n-\n-    w.LearnRelatedScripts(new_key, output_type);\n-    const auto dest = GetDestinationForKey(new_key, output_type);\n-\n-    w.SetAddressBook(dest, /* label */ \"\", \"receive\");\n+    CTxDestination dest;\n+    std::string error;\n+    if (!w.GetNewDestination(output_type, \"\", dest, error)) assert(false);\n \n     return EncodeDestination(dest);\n }"
      },
      {
        "sha": "1801493f54882e1557dab5a77623b72b009dd258",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 12,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/172213be5b174243dc501c1103ad5fe2fee67a16/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/172213be5b174243dc501c1103ad5fe2fee67a16/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=172213be5b174243dc501c1103ad5fe2fee67a16",
        "patch": "@@ -185,19 +185,11 @@ static UniValue getnewaddress(const JSONRPCRequest& request)\n         }\n     }\n \n-    if (!pwallet->IsLocked()) {\n-        pwallet->TopUpKeyPool();\n-    }\n-\n-    // Generate a new key that is added to wallet\n-    CPubKey newKey;\n-    if (!pwallet->GetKeyFromPool(newKey)) {\n-        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n+    CTxDestination dest;\n+    std::string error;\n+    if (!pwallet->GetNewDestination(output_type, label, dest, error)) {\n+        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, error);\n     }\n-    pwallet->LearnRelatedScripts(newKey, output_type);\n-    CTxDestination dest = GetDestinationForKey(newKey, output_type);\n-\n-    pwallet->SetAddressBook(dest, label, \"receive\");\n \n     return EncodeDestination(dest);\n }"
      },
      {
        "sha": "afbd8a5fbabb3156c2718d2a3573b02740ba4a25",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/172213be5b174243dc501c1103ad5fe2fee67a16/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/172213be5b174243dc501c1103ad5fe2fee67a16/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=172213be5b174243dc501c1103ad5fe2fee67a16",
        "patch": "@@ -466,8 +466,9 @@ BOOST_FIXTURE_TEST_CASE(wallet_disableprivkeys, TestChain100Setup)\n     wallet->SetMinVersion(FEATURE_LATEST);\n     wallet->SetWalletFlag(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n     BOOST_CHECK(!wallet->TopUpKeyPool(1000));\n-    CPubKey pubkey;\n-    BOOST_CHECK(!wallet->GetKeyFromPool(pubkey, false));\n+    CTxDestination dest;\n+    std::string error;\n+    BOOST_CHECK(!wallet->GetNewDestination(OutputType::BECH32, \"\", dest, error));\n }\n \n // Explicit calculation which is used to test the wallet constant"
      },
      {
        "sha": "7a7ff2b6cb01f819f7080b84190d635607ba3688",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/172213be5b174243dc501c1103ad5fe2fee67a16/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/172213be5b174243dc501c1103ad5fe2fee67a16/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=172213be5b174243dc501c1103ad5fe2fee67a16",
        "patch": "@@ -3513,6 +3513,27 @@ bool CWallet::GetKeyFromPool(CPubKey& result, bool internal)\n     return true;\n }\n \n+bool CWallet::GetNewDestination(const OutputType type, const std::string label, CTxDestination& dest, std::string& error)\n+{\n+    LOCK(cs_wallet);\n+    error.clear();\n+    if (!IsLocked()) {\n+        TopUpKeyPool();\n+    }\n+\n+    // Generate a new key that is added to wallet\n+    CPubKey new_key;\n+    if (!GetKeyFromPool(new_key)) {\n+        error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+        return false;\n+    }\n+    LearnRelatedScripts(new_key, type);\n+    dest = GetDestinationForKey(new_key, type);\n+\n+    SetAddressBook(dest, label, \"receive\");\n+    return true;\n+}\n+\n static int64_t GetOldestKeyTimeInPool(const std::set<int64_t>& setKeyPool, WalletBatch& batch) {\n     if (setKeyPool.empty()) {\n         return GetTime();"
      },
      {
        "sha": "09c2ce37969a60d81c653e1ff42213bc18cdfdb2",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/172213be5b174243dc501c1103ad5fe2fee67a16/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/172213be5b174243dc501c1103ad5fe2fee67a16/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=172213be5b174243dc501c1103ad5fe2fee67a16",
        "patch": "@@ -815,6 +815,9 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n      */\n     uint256 m_last_block_processed GUARDED_BY(cs_wallet);\n \n+    //! Fetches a key from the keypool\n+    bool GetKeyFromPool(CPubKey &key, bool internal = false);\n+\n public:\n     /*\n      * Main wallet lock.\n@@ -1110,7 +1113,6 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     bool ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal);\n     void KeepKey(int64_t nIndex);\n     void ReturnKey(int64_t nIndex, bool fInternal, const CPubKey& pubkey);\n-    bool GetKeyFromPool(CPubKey &key, bool internal = false);\n     int64_t GetOldestKeyPoolTime();\n     /**\n      * Marks all keys in the keypool up to and including reserve_key as used.\n@@ -1123,6 +1125,8 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n \n     std::set<CTxDestination> GetLabelAddresses(const std::string& label) const;\n \n+    bool GetNewDestination(const OutputType type, const std::string label, CTxDestination& dest, std::string& error);\n+\n     isminetype IsMine(const CTxIn& txin) const;\n     /**\n      * Returns amount of debit if the input matches the"
      }
    ]
  },
  {
    "sha": "33d13edd2bda0af90660e275ea4fa96ca9896f2a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozM2QxM2VkZDJiZGEwYWY5MDY2MGUyNzVlYTRmYTk2Y2E5ODk2ZjJh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-18T19:48:20Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-09T20:43:10Z"
      },
      "message": "Replace CReserveKey with ReserveDestinatoin\n\nInstead of reserving keys, reserve destinations which are backed by keys",
      "tree": {
        "sha": "8667304dc05305283b8311575fae897b281e65a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8667304dc05305283b8311575fae897b281e65a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/33d13edd2bda0af90660e275ea4fa96ca9896f2a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33d13edd2bda0af90660e275ea4fa96ca9896f2a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/33d13edd2bda0af90660e275ea4fa96ca9896f2a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33d13edd2bda0af90660e275ea4fa96ca9896f2a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "172213be5b174243dc501c1103ad5fe2fee67a16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/172213be5b174243dc501c1103ad5fe2fee67a16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/172213be5b174243dc501c1103ad5fe2fee67a16"
      }
    ],
    "stats": {
      "total": 147,
      "additions": 73,
      "deletions": 74
    },
    "files": [
      {
        "sha": "4a97ee0c21c6f7622f65f535e1717f2d475144d5",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33d13edd2bda0af90660e275ea4fa96ca9896f2a/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33d13edd2bda0af90660e275ea4fa96ca9896f2a/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=33d13edd2bda0af90660e275ea4fa96ca9896f2a",
        "patch": "@@ -36,7 +36,7 @@ namespace {\n class PendingWalletTxImpl : public PendingWalletTx\n {\n public:\n-    explicit PendingWalletTxImpl(CWallet& wallet) : m_wallet(wallet), m_key(&wallet) {}\n+    explicit PendingWalletTxImpl(CWallet& wallet) : m_wallet(wallet), m_dest(&wallet) {}\n \n     const CTransaction& get() override { return *m_tx; }\n \n@@ -47,7 +47,7 @@ class PendingWalletTxImpl : public PendingWalletTx\n         auto locked_chain = m_wallet.chain().lock();\n         LOCK(m_wallet.cs_wallet);\n         CValidationState state;\n-        if (!m_wallet.CommitTransaction(m_tx, std::move(value_map), std::move(order_form), m_key, state)) {\n+        if (!m_wallet.CommitTransaction(m_tx, std::move(value_map), std::move(order_form), m_dest, state)) {\n             reject_reason = state.GetRejectReason();\n             return false;\n         }\n@@ -56,7 +56,7 @@ class PendingWalletTxImpl : public PendingWalletTx\n \n     CTransactionRef m_tx;\n     CWallet& m_wallet;\n-    CReserveKey m_key;\n+    ReserveDestination m_dest;\n };\n \n //! Construct wallet tx struct.\n@@ -238,7 +238,7 @@ class WalletImpl : public Wallet\n         auto locked_chain = m_wallet->chain().lock();\n         LOCK(m_wallet->cs_wallet);\n         auto pending = MakeUnique<PendingWalletTxImpl>(*m_wallet);\n-        if (!m_wallet->CreateTransaction(*locked_chain, recipients, pending->m_tx, pending->m_key, fee, change_pos,\n+        if (!m_wallet->CreateTransaction(*locked_chain, recipients, pending->m_tx, pending->m_dest, fee, change_pos,\n                 fail_reason, coin_control, sign)) {\n             return {};\n         }"
      },
      {
        "sha": "0d07ae860c442b50b48fa4210d7f3c4c27de2963",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33d13edd2bda0af90660e275ea4fa96ca9896f2a/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33d13edd2bda0af90660e275ea4fa96ca9896f2a/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=33d13edd2bda0af90660e275ea4fa96ca9896f2a",
        "patch": "@@ -272,17 +272,17 @@ Result CreateRateBumpTransaction(CWallet* wallet, const uint256& txid, const CCo\n     new_coin_control.m_min_depth = 1;\n \n     CTransactionRef tx_new = MakeTransactionRef();\n-    CReserveKey reservekey(wallet);\n+    ReserveDestination reservedest(wallet);\n     CAmount fee_ret;\n     int change_pos_in_out = -1; // No requested location for change\n     std::string fail_reason;\n-    if (!wallet->CreateTransaction(*locked_chain, recipients, tx_new, reservekey, fee_ret, change_pos_in_out, fail_reason, new_coin_control, false)) {\n+    if (!wallet->CreateTransaction(*locked_chain, recipients, tx_new, reservedest, fee_ret, change_pos_in_out, fail_reason, new_coin_control, false)) {\n         errors.push_back(\"Unable to create transaction: \" + fail_reason);\n         return Result::WALLET_ERROR;\n     }\n \n     // If change key hasn't been ReturnKey'ed by this point, we take it out of keypool\n-    reservekey.KeepKey();\n+    reservedest.KeepDestination();\n \n     // Write back new fee if successful\n     new_fee = fee_ret;\n@@ -330,9 +330,9 @@ Result CommitTransaction(CWallet* wallet, const uint256& txid, CMutableTransacti\n     mapValue_t mapValue = oldWtx.mapValue;\n     mapValue[\"replaces_txid\"] = oldWtx.GetHash().ToString();\n \n-    CReserveKey reservekey(wallet);\n+    ReserveDestination reservedest(wallet);\n     CValidationState state;\n-    if (!wallet->CommitTransaction(tx, std::move(mapValue), oldWtx.vOrderForm, reservekey, state)) {\n+    if (!wallet->CommitTransaction(tx, std::move(mapValue), oldWtx.vOrderForm, reservedest, state)) {\n         // NOTE: CommitTransaction never returns false, so this should never happen.\n         errors.push_back(strprintf(\"The transaction was rejected: %s\", FormatStateMessage(state)));\n         return Result::WALLET_ERROR;"
      },
      {
        "sha": "40ad69f61ca95c68c4887c7272c8de7dce977a29",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 14,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33d13edd2bda0af90660e275ea4fa96ca9896f2a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33d13edd2bda0af90660e275ea4fa96ca9896f2a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=33d13edd2bda0af90660e275ea4fa96ca9896f2a",
        "patch": "@@ -237,16 +237,12 @@ static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n         }\n     }\n \n-    CReserveKey reservekey(pwallet);\n-    CPubKey vchPubKey;\n-    if (!reservekey.GetReservedKey(vchPubKey, true))\n+    ReserveDestination reservedest(pwallet);\n+    CTxDestination dest;\n+    if (!reservedest.GetReservedDestination(output_type, dest, true))\n         throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n \n-    reservekey.KeepKey();\n-\n-    pwallet->LearnRelatedScripts(vchPubKey, output_type);\n-    CTxDestination dest = GetDestinationForKey(vchPubKey, output_type);\n-\n+    reservedest.KeepDestination();\n     return EncodeDestination(dest);\n }\n \n@@ -313,21 +309,21 @@ static CTransactionRef SendMoney(interfaces::Chain::Lock& locked_chain, CWallet\n     CScript scriptPubKey = GetScriptForDestination(address);\n \n     // Create and send the transaction\n-    CReserveKey reservekey(pwallet);\n+    ReserveDestination reservedest(pwallet);\n     CAmount nFeeRequired;\n     std::string strError;\n     std::vector<CRecipient> vecSend;\n     int nChangePosRet = -1;\n     CRecipient recipient = {scriptPubKey, nValue, fSubtractFeeFromAmount};\n     vecSend.push_back(recipient);\n     CTransactionRef tx;\n-    if (!pwallet->CreateTransaction(locked_chain, vecSend, tx, reservekey, nFeeRequired, nChangePosRet, strError, coin_control)) {\n+    if (!pwallet->CreateTransaction(locked_chain, vecSend, tx, reservedest, nFeeRequired, nChangePosRet, strError, coin_control)) {\n         if (!fSubtractFeeFromAmount && nValue + nFeeRequired > curBalance)\n             strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s\", FormatMoney(nFeeRequired));\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n     CValidationState state;\n-    if (!pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */, reservekey, state)) {\n+    if (!pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */, reservedest, state)) {\n         strError = strprintf(\"Error: The transaction was rejected! Reason given: %s\", FormatStateMessage(state));\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n@@ -921,16 +917,16 @@ static UniValue sendmany(const JSONRPCRequest& request)\n     std::shuffle(vecSend.begin(), vecSend.end(), FastRandomContext());\n \n     // Send\n-    CReserveKey keyChange(pwallet);\n+    ReserveDestination changedest(pwallet);\n     CAmount nFeeRequired = 0;\n     int nChangePosRet = -1;\n     std::string strFailReason;\n     CTransactionRef tx;\n-    bool fCreated = pwallet->CreateTransaction(*locked_chain, vecSend, tx, keyChange, nFeeRequired, nChangePosRet, strFailReason, coin_control);\n+    bool fCreated = pwallet->CreateTransaction(*locked_chain, vecSend, tx, changedest, nFeeRequired, nChangePosRet, strFailReason, coin_control);\n     if (!fCreated)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n     CValidationState state;\n-    if (!pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */, keyChange, state)) {\n+    if (!pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */, changedest, state)) {\n         strFailReason = strprintf(\"Transaction commit failed:: %s\", FormatStateMessage(state));\n         throw JSONRPCError(RPC_WALLET_ERROR, strFailReason);\n     }"
      },
      {
        "sha": "a72212679a80f62a17133c14e974f02bbd93fca3",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33d13edd2bda0af90660e275ea4fa96ca9896f2a/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33d13edd2bda0af90660e275ea4fa96ca9896f2a/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=33d13edd2bda0af90660e275ea4fa96ca9896f2a",
        "patch": "@@ -363,17 +363,17 @@ class ListCoinsTestingSetup : public TestChain100Setup\n     CWalletTx& AddTx(CRecipient recipient)\n     {\n         CTransactionRef tx;\n-        CReserveKey reservekey(wallet.get());\n+        ReserveDestination reservedest(wallet.get());\n         CAmount fee;\n         int changePos = -1;\n         std::string error;\n         CCoinControl dummy;\n         {\n             auto locked_chain = m_chain->lock();\n-            BOOST_CHECK(wallet->CreateTransaction(*locked_chain, {recipient}, tx, reservekey, fee, changePos, error, dummy));\n+            BOOST_CHECK(wallet->CreateTransaction(*locked_chain, {recipient}, tx, reservedest, fee, changePos, error, dummy));\n         }\n         CValidationState state;\n-        BOOST_CHECK(wallet->CommitTransaction(tx, {}, {}, reservekey, state));\n+        BOOST_CHECK(wallet->CommitTransaction(tx, {}, {}, reservedest, state));\n         CMutableTransaction blocktx;\n         {\n             LOCK(wallet->cs_wallet);"
      },
      {
        "sha": "4f632266b3c4843cafa8e7d3eb5d95e67a064350",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 20,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33d13edd2bda0af90660e275ea4fa96ca9896f2a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33d13edd2bda0af90660e275ea4fa96ca9896f2a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=33d13edd2bda0af90660e275ea4fa96ca9896f2a",
        "patch": "@@ -2609,17 +2609,17 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n     auto locked_chain = chain().lock();\n     LOCK(cs_wallet);\n \n-    CReserveKey reservekey(this);\n+    ReserveDestination reservedest(this);\n     CTransactionRef tx_new;\n-    if (!CreateTransaction(*locked_chain, vecSend, tx_new, reservekey, nFeeRet, nChangePosInOut, strFailReason, coinControl, false)) {\n+    if (!CreateTransaction(*locked_chain, vecSend, tx_new, reservedest, nFeeRet, nChangePosInOut, strFailReason, coinControl, false)) {\n         return false;\n     }\n \n     if (nChangePosInOut != -1) {\n         tx.vout.insert(tx.vout.begin() + nChangePosInOut, tx_new->vout[nChangePosInOut]);\n         // We don't have the normal Create/Commit cycle, and don't want to risk\n         // reusing change, so just remove the key from the keypool here.\n-        reservekey.KeepKey();\n+        reservedest.KeepDestination();\n     }\n \n     // Copy output sizes from new transaction; they may have had the fee\n@@ -2730,7 +2730,7 @@ OutputType CWallet::TransactionChangeType(OutputType change_type, const std::vec\n     return m_default_address_type;\n }\n \n-bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std::vector<CRecipient>& vecSend, CTransactionRef& tx, CReserveKey& reservekey, CAmount& nFeeRet,\n+bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std::vector<CRecipient>& vecSend, CTransactionRef& tx, ReserveDestination& reservedest, CAmount& nFeeRet,\n                          int& nChangePosInOut, std::string& strFailReason, const CCoinControl& coin_control, bool sign)\n {\n     CAmount nValue = 0;\n@@ -2771,7 +2771,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n             CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n \n             // Create change script that will be used if we need change\n-            // TODO: pass in scriptChange instead of reservekey so\n+            // TODO: pass in scriptChange instead of reservedest so\n             // change transaction isn't always pay-to-bitcoin-address\n             CScript scriptChange;\n \n@@ -2791,19 +2791,16 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                     strFailReason = _(\"Can't generate a change-address key. No keys in the internal keypool and can't generate any keys.\");\n                     return false;\n                 }\n-                CPubKey vchPubKey;\n-                bool ret;\n-                ret = reservekey.GetReservedKey(vchPubKey, true);\n+                CTxDestination dest;\n+                const OutputType change_type = TransactionChangeType(coin_control.m_change_type ? *coin_control.m_change_type : m_default_change_type, vecSend);\n+                bool ret = reservedest.GetReservedDestination(change_type, dest, true);\n                 if (!ret)\n                 {\n-                    strFailReason = _(\"Keypool ran out, please call keypoolrefill first\");\n+                    strFailReason = \"Keypool ran out, please call keypoolrefill first\";\n                     return false;\n                 }\n \n-                const OutputType change_type = TransactionChangeType(coin_control.m_change_type ? *coin_control.m_change_type : m_default_change_type, vecSend);\n-\n-                LearnRelatedScripts(vchPubKey, change_type);\n-                scriptChange = GetScriptForDestination(GetDestinationForKey(vchPubKey, change_type));\n+                scriptChange = GetScriptForDestination(dest);\n             }\n             CTxOut change_prototype_txout(0, scriptChange);\n             coin_selection_params.change_output_size = GetSerializeSize(change_prototype_txout);\n@@ -3024,7 +3021,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n             }\n         }\n \n-        if (nChangePosInOut == -1) reservekey.ReturnKey(); // Return any reserved key if we don't have change\n+        if (nChangePosInOut == -1) reservedest.ReturnDestination(); // Return any reserved address if we don't have change\n \n         // Shuffle selected coins and fill in final vin\n         txNew.vin.clear();\n@@ -3097,7 +3094,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n /**\n  * Call after CreateTransaction unless you want to abort\n  */\n-bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm, CReserveKey& reservekey, CValidationState& state)\n+bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm, ReserveDestination& reservedest, CValidationState& state)\n {\n     {\n         auto locked_chain = chain().lock();\n@@ -3112,7 +3109,7 @@ bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::ve\n         WalletLogPrintf(\"CommitTransaction:\\n%s\", wtxNew.tx->ToString()); /* Continued */\n         {\n             // Take key pair from key pool so it won't be used again\n-            reservekey.KeepKey();\n+            reservedest.KeepDestination();\n \n             // Add tx to wallet, because if it has change it's also ours,\n             // otherwise just for transaction history.\n@@ -3713,7 +3710,7 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n     return result;\n }\n \n-bool CReserveKey::GetReservedKey(CPubKey& pubkey, bool internal)\n+bool ReserveDestination::GetReservedDestination(const OutputType type, CTxDestination& dest, bool internal)\n {\n     if (!pwallet->CanGetAddresses(internal)) {\n         return false;\n@@ -3729,25 +3726,29 @@ bool CReserveKey::GetReservedKey(CPubKey& pubkey, bool internal)\n         fInternal = keypool.fInternal;\n     }\n     assert(vchPubKey.IsValid());\n-    pubkey = vchPubKey;\n+    pwallet->LearnRelatedScripts(vchPubKey, type);\n+    address = GetDestinationForKey(vchPubKey, type);\n+    dest = address;\n     return true;\n }\n \n-void CReserveKey::KeepKey()\n+void ReserveDestination::KeepDestination()\n {\n     if (nIndex != -1)\n         pwallet->KeepKey(nIndex);\n     nIndex = -1;\n     vchPubKey = CPubKey();\n+    address = CNoDestination();\n }\n \n-void CReserveKey::ReturnKey()\n+void ReserveDestination::ReturnDestination()\n {\n     if (nIndex != -1) {\n         pwallet->ReturnKey(nIndex, fInternal, vchPubKey);\n     }\n     nIndex = -1;\n     vchPubKey = CPubKey();\n+    address = CNoDestination();\n }\n \n void CWallet::MarkReserveKeysAsUsed(int64_t keypool_id)"
      },
      {
        "sha": "f1a3c760a9a3afd05a33a127d8f5821d76186f74",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 30,
        "deletions": 28,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33d13edd2bda0af90660e275ea4fa96ca9896f2a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33d13edd2bda0af90660e275ea4fa96ca9896f2a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=33d13edd2bda0af90660e275ea4fa96ca9896f2a",
        "patch": "@@ -85,11 +85,11 @@ static constexpr size_t DUMMY_NESTED_P2WPKH_INPUT_SIZE = 91;\n \n class CCoinControl;\n class COutput;\n-class CReserveKey;\n class CScript;\n class CWalletTx;\n struct FeeCalculation;\n enum class FeeEstimateMode;\n+class ReserveDestination;\n \n /** (client) version numbers for particular wallet features */\n enum WalletFeature\n@@ -234,55 +234,57 @@ class CKeyPool\n     }\n };\n \n-/** A wrapper to reserve a key from a wallet keypool\n+/** A wrapper to reserve an address from a wallet\n  *\n- * CReserveKey is used to reserve a key from the keypool. It is passed around\n+ * ReserveDestination is used to reserve an address. It is passed around\n  * during the CreateTransaction/CommitTransaction procedure.\n  *\n- * Instantiating a CReserveKey does not reserve a keypool key. To do so,\n- * GetReservedKey() needs to be called on the object. Once a key has been\n- * reserved, call KeepKey() on the CReserveKey object to make sure it is not\n- * returned to the keypool. Call ReturnKey() to return the key to the keypool\n- * so it can be re-used (for example, if the key was used in a new transaction\n+ * Instantiating a ReserveDestination does not reserve an address. To do so,\n+ * GetReservedDestination() needs to be called on the object. Once an address has been\n+ * reserved, call KeepDestination() on the ReserveDestination object to make sure it is not\n+ * returned. Call ReturnDestination() to return the address so it can be re-used (for\n+ * example, if the address was used in a new transaction\n  * and that transaction was not completed and needed to be aborted).\n  *\n- * If a key is reserved and KeepKey() is not called, then the key will be\n- * returned to the keypool when the CReserveObject goes out of scope.\n+ * If an address is reserved and KeepDestination() is not called, then the address will be\n+ * returned when the ReserveDestination goes out of scope.\n  */\n-class CReserveKey\n+class ReserveDestination\n {\n protected:\n-    //! The wallet to reserve the keypool key from\n+    //! The wallet to reserve from\n     CWallet* pwallet;\n-    //! The index of the key in the keypool\n+    //! The index of the address's key in the keypool\n     int64_t nIndex{-1};\n-    //! The public key\n+    //! The public key for the address\n     CPubKey vchPubKey;\n+    //! The destination\n+    CTxDestination address;\n     //! Whether this is from the internal (change output) keypool\n     bool fInternal{false};\n \n public:\n-    //! Construct a CReserveKey object. This does NOT reserve a key from the keypool yet\n-    explicit CReserveKey(CWallet* pwalletIn)\n+    //! Construct a ReserveDestination object. This does NOT reserve an address yet\n+    explicit ReserveDestination(CWallet* pwalletIn)\n     {\n         pwallet = pwalletIn;\n     }\n \n-    CReserveKey(const CReserveKey&) = delete;\n-    CReserveKey& operator=(const CReserveKey&) = delete;\n+    ReserveDestination(const ReserveDestination&) = delete;\n+    ReserveDestination& operator=(const ReserveDestination&) = delete;\n \n     //! Destructor. If a key has been reserved and not KeepKey'ed, it will be returned to the keypool\n-    ~CReserveKey()\n+    ~ReserveDestination()\n     {\n-        ReturnKey();\n+        ReturnDestination();\n     }\n \n-    //! Reserve a key from the keypool\n-    bool GetReservedKey(CPubKey &pubkey, bool internal = false);\n-    //! Return a key to the keypool\n-    void ReturnKey();\n-    //! Keep the key. Do not return it to the keypool when this object goes out of scope\n-    void KeepKey();\n+    //! Reserve an address\n+    bool GetReservedDestination(const OutputType type, CTxDestination& pubkey, bool internal);\n+    //! Return reserved address\n+    void ReturnDestination();\n+    //! Keep the address. Do not return it's key to the keypool when this object goes out of scope\n+    void KeepDestination();\n };\n \n /** Address book data */\n@@ -1056,9 +1058,9 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n      * selected by SelectCoins(); Also create the change output, when needed\n      * @note passing nChangePosInOut as -1 will result in setting a random position\n      */\n-    bool CreateTransaction(interfaces::Chain::Lock& locked_chain, const std::vector<CRecipient>& vecSend, CTransactionRef& tx, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosInOut,\n+    bool CreateTransaction(interfaces::Chain::Lock& locked_chain, const std::vector<CRecipient>& vecSend, CTransactionRef& tx, ReserveDestination& reservedest, CAmount& nFeeRet, int& nChangePosInOut,\n                            std::string& strFailReason, const CCoinControl& coin_control, bool sign = true);\n-    bool CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm, CReserveKey& reservekey, CValidationState& state);\n+    bool CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm, ReserveDestination& reservedest, CValidationState& state);\n \n     bool DummySignTx(CMutableTransaction &txNew, const std::set<CTxOut> &txouts, bool use_max_sig = false) const\n     {"
      }
    ]
  },
  {
    "sha": "8e7f930828a9f8f9be1c90ff45e3fdfef1980eaf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZTdmOTMwODI4YTlmOGY5YmUxYzkwZmY0NWUzZmRmZWYxOTgwZWFm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-18T19:49:02Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-09T20:43:10Z"
      },
      "message": "Add GetNewChangeDestination for getting new change Destinations\n\nAdds a GetNewChangeDestination that has the same objective as GetNewDestination",
      "tree": {
        "sha": "2bb460aa84c7d489e68364fa16776a9785ebb383",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2bb460aa84c7d489e68364fa16776a9785ebb383"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8e7f930828a9f8f9be1c90ff45e3fdfef1980eaf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e7f930828a9f8f9be1c90ff45e3fdfef1980eaf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8e7f930828a9f8f9be1c90ff45e3fdfef1980eaf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e7f930828a9f8f9be1c90ff45e3fdfef1980eaf/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "33d13edd2bda0af90660e275ea4fa96ca9896f2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33d13edd2bda0af90660e275ea4fa96ca9896f2a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/33d13edd2bda0af90660e275ea4fa96ca9896f2a"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 22,
      "deletions": 9
    },
    "files": [
      {
        "sha": "23900cbd67cf96117062fe1c5d52fae3746a6c2a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 9,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e7f930828a9f8f9be1c90ff45e3fdfef1980eaf/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e7f930828a9f8f9be1c90ff45e3fdfef1980eaf/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=8e7f930828a9f8f9be1c90ff45e3fdfef1980eaf",
        "patch": "@@ -226,23 +226,18 @@ static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: This wallet has no available keys\");\n     }\n \n-    if (!pwallet->IsLocked()) {\n-        pwallet->TopUpKeyPool();\n-    }\n-\n     OutputType output_type = pwallet->m_default_change_type != OutputType::CHANGE_AUTO ? pwallet->m_default_change_type : pwallet->m_default_address_type;\n     if (!request.params[0].isNull()) {\n         if (!ParseOutputType(request.params[0].get_str(), output_type)) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[0].get_str()));\n         }\n     }\n \n-    ReserveDestination reservedest(pwallet);\n     CTxDestination dest;\n-    if (!reservedest.GetReservedDestination(output_type, dest, true))\n-        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n-\n-    reservedest.KeepDestination();\n+    std::string error;\n+    if (!pwallet->GetNewChangeDestination(output_type, dest, error)) {\n+        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, error);\n+    }\n     return EncodeDestination(dest);\n }\n "
      },
      {
        "sha": "108f4d6795ab6881845a532179a092008da6bda9",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e7f930828a9f8f9be1c90ff45e3fdfef1980eaf/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e7f930828a9f8f9be1c90ff45e3fdfef1980eaf/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8e7f930828a9f8f9be1c90ff45e3fdfef1980eaf",
        "patch": "@@ -3531,6 +3531,23 @@ bool CWallet::GetNewDestination(const OutputType type, const std::string label,\n     return true;\n }\n \n+bool CWallet::GetNewChangeDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    error.clear();\n+    if (!IsLocked()) {\n+        TopUpKeyPool();\n+    }\n+\n+    ReserveDestination reservedest(this);\n+    if (!reservedest.GetReservedDestination(type, dest, true)) {\n+        error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+        return false;\n+    }\n+\n+    reservedest.KeepDestination();\n+    return true;\n+}\n+\n static int64_t GetOldestKeyTimeInPool(const std::set<int64_t>& setKeyPool, WalletBatch& batch) {\n     if (setKeyPool.empty()) {\n         return GetTime();"
      },
      {
        "sha": "8a0665b19637ddb666be4b1eb5ec59c7121aa11e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e7f930828a9f8f9be1c90ff45e3fdfef1980eaf/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e7f930828a9f8f9be1c90ff45e3fdfef1980eaf/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=8e7f930828a9f8f9be1c90ff45e3fdfef1980eaf",
        "patch": "@@ -1128,6 +1128,7 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     std::set<CTxDestination> GetLabelAddresses(const std::string& label) const;\n \n     bool GetNewDestination(const OutputType type, const std::string label, CTxDestination& dest, std::string& error);\n+    bool GetNewChangeDestination(const OutputType type, CTxDestination& dest, std::string& error);\n \n     isminetype IsMine(const CTxIn& txin) const;\n     /**"
      }
    ]
  }
]