[
  {
    "sha": "5f47f07042f78ef0edc787101b9f0496573b6851",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjQ3ZjA3MDQyZjc4ZWYwZWRjNzg3MTAxYjlmMDQ5NjU3M2I2ODUx",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-10-08T09:39:50Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-01-15T21:10:38Z"
      },
      "message": "Add missing locks in tests",
      "tree": {
        "sha": "cf8da5e2a00160607259947c0631c98e58879ac9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf8da5e2a00160607259947c0631c98e58879ac9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f47f07042f78ef0edc787101b9f0496573b6851",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f47f07042f78ef0edc787101b9f0496573b6851",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f47f07042f78ef0edc787101b9f0496573b6851",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f47f07042f78ef0edc787101b9f0496573b6851/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7c84209bb0aafa9c8e79d0bf5f1d4b64f0ed303",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7c84209bb0aafa9c8e79d0bf5f1d4b64f0ed303",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7c84209bb0aafa9c8e79d0bf5f1d4b64f0ed303"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 60,
      "deletions": 23
    },
    "files": [
      {
        "sha": "ea422ba48ac0dee8f9bd888424eb024322a165ff",
        "filename": "src/bench/block_assemble.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 7,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f47f07042f78ef0edc787101b9f0496573b6851/src/bench/block_assemble.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f47f07042f78ef0edc787101b9f0496573b6851/src/bench/block_assemble.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/block_assemble.cpp?ref=5f47f07042f78ef0edc787101b9f0496573b6851",
        "patch": "@@ -30,7 +30,10 @@ static std::shared_ptr<CBlock> PrepareBlock(const CScript& coinbase_scriptPubKey\n             .CreateNewBlock(coinbase_scriptPubKey)\n             ->block);\n \n-    block->nTime = ::chainActive.Tip()->GetMedianTimePast() + 1;\n+    {\n+        LOCK(cs_main);\n+        block->nTime = ::chainActive.Tip()->GetMedianTimePast() + 1;\n+    }\n     block->hashMerkleRoot = BlockMerkleRoot(*block);\n \n     return block;\n@@ -73,19 +76,25 @@ static void AssembleBlock(benchmark::State& state)\n     boost::thread_group thread_group;\n     CScheduler scheduler;\n     {\n-        ::pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n-        ::pcoinsdbview.reset(new CCoinsViewDB(1 << 23, true));\n-        ::pcoinsTip.reset(new CCoinsViewCache(pcoinsdbview.get()));\n+        {\n+            LOCK(cs_main);\n+            ::pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n+            ::pcoinsdbview.reset(new CCoinsViewDB(1 << 23, true));\n+            ::pcoinsTip.reset(new CCoinsViewCache(pcoinsdbview.get()));\n+        }\n \n         const CChainParams& chainparams = Params();\n         thread_group.create_thread(std::bind(&CScheduler::serviceQueue, &scheduler));\n         GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n         LoadGenesisBlock(chainparams);\n         CValidationState state;\n         ActivateBestChain(state, chainparams);\n-        assert(::chainActive.Tip() != nullptr);\n-        const bool witness_enabled{IsWitnessEnabled(::chainActive.Tip(), chainparams.GetConsensus())};\n-        assert(witness_enabled);\n+        {\n+            LOCK(cs_main);\n+            assert(::chainActive.Tip() != nullptr);\n+            const bool witness_enabled{IsWitnessEnabled(::chainActive.Tip(), chainparams.GetConsensus())};\n+            assert(witness_enabled);\n+        }\n     }\n \n     // Collect some loose transactions that spend the coinbases of our mined blocks"
      },
      {
        "sha": "a69b19a800b2e27219e3d973b113f79b03675c60",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 6,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f47f07042f78ef0edc787101b9f0496573b6851/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f47f07042f78ef0edc787101b9f0496573b6851/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=5f47f07042f78ef0edc787101b9f0496573b6851",
        "patch": "@@ -66,26 +66,38 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n \n     // Test 1: block with both of those transactions should be rejected.\n     block = CreateAndProcessBlock(spends, scriptPubKey);\n-    BOOST_CHECK(chainActive.Tip()->GetBlockHash() != block.GetHash());\n+    {\n+        LOCK(cs_main);\n+        BOOST_CHECK(chainActive.Tip()->GetBlockHash() != block.GetHash());\n+    }\n \n     // Test 2: ... and should be rejected if spend1 is in the memory pool\n     BOOST_CHECK(ToMemPool(spends[0]));\n     block = CreateAndProcessBlock(spends, scriptPubKey);\n-    BOOST_CHECK(chainActive.Tip()->GetBlockHash() != block.GetHash());\n+    {\n+        LOCK(cs_main);\n+        BOOST_CHECK(chainActive.Tip()->GetBlockHash() != block.GetHash());\n+    }\n     mempool.clear();\n \n     // Test 3: ... and should be rejected if spend2 is in the memory pool\n     BOOST_CHECK(ToMemPool(spends[1]));\n     block = CreateAndProcessBlock(spends, scriptPubKey);\n-    BOOST_CHECK(chainActive.Tip()->GetBlockHash() != block.GetHash());\n+    {\n+        LOCK(cs_main);\n+        BOOST_CHECK(chainActive.Tip()->GetBlockHash() != block.GetHash());\n+    }\n     mempool.clear();\n \n     // Final sanity test: first spend in mempool, second in block, that's OK:\n     std::vector<CMutableTransaction> oneSpend;\n     oneSpend.push_back(spends[0]);\n     BOOST_CHECK(ToMemPool(spends[1]));\n     block = CreateAndProcessBlock(oneSpend, scriptPubKey);\n-    BOOST_CHECK(chainActive.Tip()->GetBlockHash() == block.GetHash());\n+    {\n+        LOCK(cs_main);\n+        BOOST_CHECK(chainActive.Tip()->GetBlockHash() == block.GetHash());\n+    }\n     // spends[1] should have been removed from the mempool when the\n     // block with spends[0] is accepted:\n     BOOST_CHECK_EQUAL(mempool.size(), 0U);\n@@ -219,11 +231,10 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n     CBlock block;\n \n     block = CreateAndProcessBlock({spend_tx}, p2pk_scriptPubKey);\n+    LOCK(cs_main);\n     BOOST_CHECK(chainActive.Tip()->GetBlockHash() == block.GetHash());\n     BOOST_CHECK(pcoinsTip->GetBestBlock() == block.GetHash());\n \n-    LOCK(cs_main);\n-\n     // Test P2SH: construct a transaction that is valid without P2SH, and\n     // then test validity with P2SH.\n     {"
      },
      {
        "sha": "b1549bab85a468e6791db7e75d7171c991a6f676",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f47f07042f78ef0edc787101b9f0496573b6851/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f47f07042f78ef0edc787101b9f0496573b6851/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=5f47f07042f78ef0edc787101b9f0496573b6851",
        "patch": "@@ -181,6 +181,7 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n \n     UnregisterValidationInterface(&sub);\n \n+    LOCK(cs_main);\n     BOOST_CHECK_EQUAL(sub.m_expected_tip, chainActive.Tip()->GetBlockHash());\n }\n "
      },
      {
        "sha": "a9722ae4fea96a3be46d80168f6d758c68bbcb53",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f47f07042f78ef0edc787101b9f0496573b6851/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f47f07042f78ef0edc787101b9f0496573b6851/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=5f47f07042f78ef0edc787101b9f0496573b6851",
        "patch": "@@ -122,8 +122,7 @@ inline std::vector<OutputGroup>& GroupCoins(const std::vector<COutput>& coins)\n // Branch and bound coin selection tests\n BOOST_AUTO_TEST_CASE(bnb_search_test)\n {\n-\n-    LOCK(testWallet.cs_wallet);\n+    LOCK2(cs_main, testWallet.cs_wallet);\n \n     // Setup\n     std::vector<CInputCoin> utxo_pool;\n@@ -271,7 +270,7 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n     CAmount nValueRet;\n     bool bnb_used;\n \n-    LOCK(testWallet.cs_wallet);\n+    LOCK2(cs_main, testWallet.cs_wallet);\n \n     // test multiple times to allow for differences in the shuffle order\n     for (int i = 0; i < RUN_TESTS; i++)\n@@ -550,7 +549,7 @@ BOOST_AUTO_TEST_CASE(ApproximateBestSubset)\n     CAmount nValueRet;\n     bool bnb_used;\n \n-    LOCK(testWallet.cs_wallet);\n+    LOCK2(cs_main, testWallet.cs_wallet);\n \n     empty_wallet();\n \n@@ -569,6 +568,8 @@ BOOST_AUTO_TEST_CASE(ApproximateBestSubset)\n // Tests that with the ideal conditions, the coin selector will always be able to find a solution that can pay the target value\n BOOST_AUTO_TEST_CASE(SelectCoins_test)\n {\n+    LOCK(cs_main);\n+\n     // Random generator stuff\n     std::default_random_engine generator;\n     std::exponential_distribution<double> distribution (100);"
      },
      {
        "sha": "1ebb14372e760ad13159b6a2731a7341a5e73b89",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 6,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f47f07042f78ef0edc787101b9f0496573b6851/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f47f07042f78ef0edc787101b9f0496573b6851/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=5f47f07042f78ef0edc787101b9f0496573b6851",
        "patch": "@@ -40,10 +40,18 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n \n     // Cap last block file size, and mine new block in a new block file.\n     const CBlockIndex* const null_block = nullptr;\n-    CBlockIndex* oldTip = chainActive.Tip();\n+    CBlockIndex* oldTip;\n+    {\n+        LOCK(cs_main);\n+        oldTip = chainActive.Tip();\n+    }\n     GetBlockFileInfo(oldTip->GetBlockPos().nFile)->nSize = MAX_BLOCKFILE_SIZE;\n     CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n-    CBlockIndex* newTip = chainActive.Tip();\n+    CBlockIndex* newTip;\n+    {\n+        LOCK(cs_main);\n+        newTip = chainActive.Tip();\n+    }\n \n     auto locked_chain = chain->lock();\n \n@@ -176,7 +184,13 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n \n     // Create two blocks with same timestamp to verify that importwallet rescan\n     // will pick up both blocks, not just the first.\n-    const int64_t BLOCK_TIME = chainActive.Tip()->GetBlockTimeMax() + 5;\n+    int64_t blockTimeMax;\n+    {\n+        LOCK(cs_main);\n+        blockTimeMax = chainActive.Tip()->GetBlockTimeMax();\n+    }\n+\n+    const int64_t BLOCK_TIME = blockTimeMax + 5;\n     SetMockTime(BLOCK_TIME);\n     m_coinbase_txns.emplace_back(CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\n     m_coinbase_txns.emplace_back(CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\n@@ -188,7 +202,6 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n     m_coinbase_txns.emplace_back(CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\n \n     auto locked_chain = chain->lock();\n-\n     std::string backup_file = (SetDataDir(\"importwallet_rescan\") / \"wallet.backup\").string();\n \n     // Import key into wallet and call dumpwallet to create backup file.\n@@ -369,10 +382,12 @@ class ListCoinsTestingSetup : public TestChain100Setup\n             blocktx = CMutableTransaction(*wallet->mapWallet.at(tx->GetHash()).tx);\n         }\n         CreateAndProcessBlock({CMutableTransaction(blocktx)}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n-        LOCK(wallet->cs_wallet);\n         auto it = wallet->mapWallet.find(tx->GetHash());\n         BOOST_CHECK(it != wallet->mapWallet.end());\n-        it->second.SetMerkleBranch(chainActive.Tip(), 1);\n+        {\n+            LOCK(cs_main);\n+            it->second.SetMerkleBranch(chainActive.Tip(), 1);\n+        }\n         return it->second;\n     }\n "
      }
    ]
  },
  {
    "sha": "f2ce4650ba358010731500022cb6c4488a30946f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMmNlNDY1MGJhMzU4MDEwNzMxNTAwMDIyY2I2YzQ0ODhhMzA5NDZm",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-10-08T09:40:03Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-01-15T21:10:38Z"
      },
      "message": "Add missing locks",
      "tree": {
        "sha": "1ba65e976636203588e0510a22e70d0d3fcc6a39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1ba65e976636203588e0510a22e70d0d3fcc6a39"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2ce4650ba358010731500022cb6c4488a30946f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2ce4650ba358010731500022cb6c4488a30946f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f2ce4650ba358010731500022cb6c4488a30946f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2ce4650ba358010731500022cb6c4488a30946f/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f47f07042f78ef0edc787101b9f0496573b6851",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f47f07042f78ef0edc787101b9f0496573b6851",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f47f07042f78ef0edc787101b9f0496573b6851"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 44,
      "deletions": 17
    },
    "files": [
      {
        "sha": "72abb635c82b63d0d4d9a36d1220b73268fae400",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 8,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2ce4650ba358010731500022cb6c4488a30946f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2ce4650ba358010731500022cb6c4488a30946f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f2ce4650ba358010731500022cb6c4488a30946f",
        "patch": "@@ -218,8 +218,11 @@ void Shutdown(InitInterfaces& interfaces)\n     }\n \n     // FlushStateToDisk generates a ChainStateFlushed callback, which we should avoid missing\n-    if (pcoinsTip != nullptr) {\n-        FlushStateToDisk();\n+    {\n+        LOCK(cs_main);\n+        if (pcoinsTip != nullptr) {\n+            FlushStateToDisk();\n+        }\n     }\n \n     // After there are no more peers/RPC left to give us new data which may generate\n@@ -649,7 +652,10 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n             LoadExternalBlockFile(chainparams, file, &pos);\n             nFile++;\n         }\n-        pblocktree->WriteReindexing(false);\n+        {\n+            LOCK(cs_main);\n+            pblocktree->WriteReindexing(false);\n+        }\n         fReindex = false;\n         LogPrintf(\"Reindexing finished\\n\");\n         // To avoid ending up in a situation without genesis block, re-try initializing (no-op if reindexing worked):\n@@ -1641,11 +1647,13 @@ bool AppInitMain(InitInterfaces& interfaces)\n     }\n \n     // Either install a handler to notify us when genesis activates, or set fHaveGenesis directly.\n-    // No locking, as this happens before any background thread is started.\n-    if (chainActive.Tip() == nullptr) {\n-        uiInterface.NotifyBlockTip_connect(BlockNotifyGenesisWait);\n-    } else {\n-        fHaveGenesis = true;\n+    {\n+        LOCK(cs_main);\n+        if (chainActive.Tip() == nullptr) {\n+            uiInterface.NotifyBlockTip_connect(BlockNotifyGenesisWait);\n+        } else {\n+            fHaveGenesis = true;\n+        }\n     }\n \n     if (gArgs.IsArgSet(\"-blocknotify\"))"
      },
      {
        "sha": "ef139a239c35ccdafad69bb1a03f14ec8aa74d86",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2ce4650ba358010731500022cb6c4488a30946f/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2ce4650ba358010731500022cb6c4488a30946f/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=f2ce4650ba358010731500022cb6c4488a30946f",
        "patch": "@@ -926,8 +926,7 @@ void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std:\n     }\n \n     connman->ForEachNode([this, &pcmpctblock, pindex, &msgMaker, fWitnessEnabled, &hashBlock](CNode* pnode) {\n-        AssertLockHeld(cs_main);\n-\n+        LOCK(cs_main);\n         // TODO: Avoid the repeated-serialization here\n         if (pnode->nVersion < INVALID_CB_NO_BAN_VERSION || pnode->fDisconnect)\n             return;"
      },
      {
        "sha": "033fc107ba8b1abdb9f24af9d61d00dea62e647c",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 4,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2ce4650ba358010731500022cb6c4488a30946f/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2ce4650ba358010731500022cb6c4488a30946f/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=f2ce4650ba358010731500022cb6c4488a30946f",
        "patch": "@@ -522,7 +522,10 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n         // serialize data\n         // use exact same output as mentioned in Bip64\n         CDataStream ssGetUTXOResponse(SER_NETWORK, PROTOCOL_VERSION);\n-        ssGetUTXOResponse << chainActive.Height() << chainActive.Tip()->GetBlockHash() << bitmap << outs;\n+        {\n+            LOCK(cs_main);\n+            ssGetUTXOResponse << chainActive.Height() << chainActive.Tip()->GetBlockHash() << bitmap << outs;\n+        }\n         std::string ssGetUTXOResponseString = ssGetUTXOResponse.str();\n \n         req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n@@ -532,7 +535,10 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n \n     case RetFormat::HEX: {\n         CDataStream ssGetUTXOResponse(SER_NETWORK, PROTOCOL_VERSION);\n-        ssGetUTXOResponse << chainActive.Height() << chainActive.Tip()->GetBlockHash() << bitmap << outs;\n+        {\n+            LOCK(cs_main);\n+            ssGetUTXOResponse << chainActive.Height() << chainActive.Tip()->GetBlockHash() << bitmap << outs;\n+        }\n         std::string strHex = HexStr(ssGetUTXOResponse.begin(), ssGetUTXOResponse.end()) + \"\\n\";\n \n         req->WriteHeader(\"Content-Type\", \"text/plain\");\n@@ -545,8 +551,11 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n \n         // pack in some essentials\n         // use more or less the same output as mentioned in Bip64\n-        objGetUTXOResponse.pushKV(\"chainHeight\", chainActive.Height());\n-        objGetUTXOResponse.pushKV(\"chaintipHash\", chainActive.Tip()->GetBlockHash().GetHex());\n+        {\n+            LOCK(cs_main);\n+            objGetUTXOResponse.pushKV(\"chainHeight\", chainActive.Height());\n+            objGetUTXOResponse.pushKV(\"chaintipHash\", chainActive.Tip()->GetBlockHash().GetHex());\n+        }\n         objGetUTXOResponse.pushKV(\"bitmap\", bitmapStringRepresentation);\n \n         UniValue utxos(UniValue::VARR);"
      },
      {
        "sha": "99193ca0c5122fb90accfe9fdee1f0a16c607b39",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2ce4650ba358010731500022cb6c4488a30946f/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2ce4650ba358010731500022cb6c4488a30946f/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=f2ce4650ba358010731500022cb6c4488a30946f",
        "patch": "@@ -1029,7 +1029,12 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n \n     CCoinsStats stats;\n     FlushStateToDisk();\n-    if (GetUTXOStats(pcoinsdbview.get(), stats)) {\n+    CCoinsView *currentView;\n+    {\n+        LOCK(cs_main);\n+        currentView = pcoinsdbview.get();\n+    }\n+    if (GetUTXOStats(currentView, stats)) {\n         ret.pushKV(\"height\", (int64_t)stats.nHeight);\n         ret.pushKV(\"bestblock\", stats.hashBlock.GetHex());\n         ret.pushKV(\"transactions\", (int64_t)stats.nTransactions);"
      },
      {
        "sha": "9a1aed39a4550a14a24cdbed7e195ffcf6780402",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2ce4650ba358010731500022cb6c4488a30946f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2ce4650ba358010731500022cb6c4488a30946f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=f2ce4650ba358010731500022cb6c4488a30946f",
        "patch": "@@ -1357,6 +1357,7 @@ void InitScriptExecutionCache() {\n     // nMaxCacheSize is unsigned. If -maxsigcachesize is set to zero,\n     // setup_bytes creates the minimum possible cache (2 elements).\n     size_t nMaxCacheSize = std::min(std::max((int64_t)0, gArgs.GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n+    LOCK(cs_main);\n     size_t nElems = scriptExecutionCache.setup_bytes(nMaxCacheSize);\n     LogPrintf(\"Using %zu MiB out of %zu/2 requested for script execution cache, able to store %zu elements\\n\",\n             (nElems*sizeof(uint256)) >>20, (nMaxCacheSize*2)>>20, nElems);\n@@ -2206,7 +2207,10 @@ void FlushStateToDisk() {\n \n void PruneAndFlush() {\n     CValidationState state;\n-    fCheckForPruning = true;\n+    {\n+        LOCK(cs_LastBlockFile);\n+        fCheckForPruning = true;\n+    }\n     const CChainParams& chainparams = Params();\n     if (!FlushStateToDisk(chainparams, state, FlushStateMode::NONE)) {\n         LogPrintf(\"%s: failed to flush state (%s)\\n\", __func__, FormatStateMessage(state));\n@@ -3895,6 +3899,7 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams) EXCLUSIVE_LOCKS_RE\n     if (!g_chainstate.LoadBlockIndex(chainparams.GetConsensus(), *pblocktree))\n         return false;\n \n+    LOCK(cs_LastBlockFile);\n     // Load block file info\n     pblocktree->ReadLastBlockFile(nLastBlockFile);\n     vinfoBlockFile.resize(nLastBlockFile + 1);\n@@ -4288,6 +4293,7 @@ bool RewindBlockIndex(const CChainParams& params) {\n }\n \n void CChainState::UnloadBlockIndex() {\n+    LOCK(cs_nBlockSequenceId);\n     nBlockSequenceId = 1;\n     m_failed_blocks.clear();\n     setBlockIndexCandidates.clear();\n@@ -4305,6 +4311,7 @@ void UnloadBlockIndex()\n     mempool.clear();\n     mapBlocksUnlinked.clear();\n     vinfoBlockFile.clear();\n+    LOCK(cs_LastBlockFile);\n     nLastBlockFile = 0;\n     setDirtyBlockIndex.clear();\n     setDirtyFileInfo.clear();"
      },
      {
        "sha": "72dab446306963e281950381a67a0b61f94ba35e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2ce4650ba358010731500022cb6c4488a30946f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2ce4650ba358010731500022cb6c4488a30946f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f2ce4650ba358010731500022cb6c4488a30946f",
        "patch": "@@ -2669,7 +2669,6 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n     CMutableTransaction txNew;\n \n     txNew.nLockTime = GetLocktimeForNewTransaction(locked_chain);\n-\n     FeeCalculation feeCalc;\n     CAmount nFeeNeeded;\n     int nBytes;"
      }
    ]
  },
  {
    "sha": "a04dd77fe8b7b69b5ff6a06052750133985d0f43",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMDRkZDc3ZmU4YjdiNjliNWZmNmEwNjA1Mjc1MDEzMzk4NWQwZjQz",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-10-08T09:38:17Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-01-15T21:11:08Z"
      },
      "message": "Add locking annotations",
      "tree": {
        "sha": "143d45f0f0917cd8c0d7c5c63240524fbd2e7b47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/143d45f0f0917cd8c0d7c5c63240524fbd2e7b47"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a04dd77fe8b7b69b5ff6a06052750133985d0f43",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a04dd77fe8b7b69b5ff6a06052750133985d0f43",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a04dd77fe8b7b69b5ff6a06052750133985d0f43",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a04dd77fe8b7b69b5ff6a06052750133985d0f43/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2ce4650ba358010731500022cb6c4488a30946f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2ce4650ba358010731500022cb6c4488a30946f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2ce4650ba358010731500022cb6c4488a30946f"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 23,
      "deletions": 23
    },
    "files": [
      {
        "sha": "45b2d2a33e243d4c7b442e5ee891f8de4de038de",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a04dd77fe8b7b69b5ff6a06052750133985d0f43/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a04dd77fe8b7b69b5ff6a06052750133985d0f43/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=a04dd77fe8b7b69b5ff6a06052750133985d0f43",
        "patch": "@@ -46,7 +46,7 @@ unsigned int ParseConfirmTarget(const UniValue& value)\n  * or from the last difficulty change if 'lookup' is nonpositive.\n  * If 'height' is nonnegative, compute the estimate at the time when a given block was found.\n  */\n-static UniValue GetNetworkHashPS(int lookup, int height) {\n+static UniValue GetNetworkHashPS(int lookup, int height) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     CBlockIndex *pb = chainActive.Tip();\n \n     if (height >= 0 && height < chainActive.Height())"
      },
      {
        "sha": "a542f881340f4a1a5192a467dc5e06c60aec1606",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a04dd77fe8b7b69b5ff6a06052750133985d0f43/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a04dd77fe8b7b69b5ff6a06052750133985d0f43/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=a04dd77fe8b7b69b5ff6a06052750133985d0f43",
        "patch": "@@ -82,7 +82,7 @@ struct {\n     {2, 0xbbbeb305}, {2, 0xfe1c810a},\n };\n \n-static CBlockIndex CreateBlockIndex(int nHeight)\n+static CBlockIndex CreateBlockIndex(int nHeight) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     CBlockIndex index;\n     index.nHeight = nHeight;"
      },
      {
        "sha": "f5b0faa1e32bcefdd400bf5494245440e2e6a37f",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a04dd77fe8b7b69b5ff6a06052750133985d0f43/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a04dd77fe8b7b69b5ff6a06052750133985d0f43/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=a04dd77fe8b7b69b5ff6a06052750133985d0f43",
        "patch": "@@ -114,7 +114,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n // should fail.\n // Capture this interaction with the upgraded_nop argument: set it when evaluating\n // any script flag that is implemented as an upgraded NOP code.\n-static void ValidateCheckInputsForAllFlags(const CTransaction &tx, uint32_t failing_flags, bool add_to_cache)\n+static void ValidateCheckInputsForAllFlags(const CTransaction &tx, uint32_t failing_flags, bool add_to_cache) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     PrecomputedTransactionData txdata(tx);\n     // If we add many more flags, this loop can get too expensive, but we can"
      },
      {
        "sha": "ec70c307458cce5356cc72a571db9dadf3d016b7",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a04dd77fe8b7b69b5ff6a06052750133985d0f43/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a04dd77fe8b7b69b5ff6a06052750133985d0f43/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=a04dd77fe8b7b69b5ff6a06052750133985d0f43",
        "patch": "@@ -118,7 +118,7 @@ class CChainState {\n      */\n     CCriticalSection cs_nBlockSequenceId;\n     /** Blocks loaded from disk are assigned id 0, so start the counter at 1. */\n-    int32_t nBlockSequenceId = 1;\n+    int32_t nBlockSequenceId GUARDED_BY(cs_nBlockSequenceId) = 1;\n     /** Decreasing counter (used by subsequent preciousblock calls). */\n     int32_t nBlockReverseSequenceId = -1;\n     /** chainwork for the last block that preciousblock has been applied to. */\n@@ -158,7 +158,7 @@ class CChainState {\n \n     bool LoadBlockIndex(const Consensus::Params& consensus_params, CBlockTreeDB& blocktree) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n-    bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock);\n+    bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock) LOCKS_EXCLUDED(cs_main);\n \n     /**\n      * If a block header hasn't already been seen, call CheckBlockHeader on it, ensure\n@@ -268,12 +268,12 @@ namespace {\n \n     CCriticalSection cs_LastBlockFile;\n     std::vector<CBlockFileInfo> vinfoBlockFile;\n-    int nLastBlockFile = 0;\n+    int nLastBlockFile GUARDED_BY(cs_LastBlockFile) = 0;\n     /** Global flag to indicate we should check to see if there are\n      *  block/undo files that should be deleted.  Set on startup\n      *  or if we allocate more file space when we're in prune mode\n      */\n-    bool fCheckForPruning = false;\n+    bool fCheckForPruning GUARDED_BY(cs_LastBlockFile) = false;\n \n     /** Dirty block index entries. */\n     std::set<CBlockIndex*> setDirtyBlockIndex;\n@@ -444,7 +444,7 @@ bool CheckSequenceLocks(const CTxMemPool& pool, const CTransaction& tx, int flag\n // Returns the script flags which should be checked for a given block\n static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& chainparams);\n \n-static void LimitMempoolSize(CTxMemPool& pool, size_t limit, unsigned long age) {\n+static void LimitMempoolSize(CTxMemPool& pool, size_t limit, unsigned long age) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     int expired = pool.Expire(GetTime() - age);\n     if (expired != 0) {\n         LogPrint(BCLog::MEMPOOL, \"Expired %i transactions from the memory pool\\n\", expired);\n@@ -992,7 +992,7 @@ static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPo\n \n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n                         bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept)\n+                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     const CChainParams& chainparams = Params();\n     return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, pfMissingInputs, GetTime(), plTxnReplaced, bypass_limits, nAbsurdFee, test_accept);\n@@ -1350,7 +1350,7 @@ int GetSpendHeight(const CCoinsViewCache& inputs)\n }\n \n \n-static CuckooCache::cache<uint256, SignatureCacheHasher> scriptExecutionCache;\n+static CuckooCache::cache<uint256, SignatureCacheHasher> scriptExecutionCache GUARDED_BY(cs_main);\n static uint256 scriptExecutionCacheNonce(GetRandHash());\n \n void InitScriptExecutionCache() {\n@@ -2235,7 +2235,7 @@ static void AppendWarning(std::string& res, const std::string& warn)\n }\n \n /** Check warning conditions and do some notifications on new chain tip set. */\n-void static UpdateTip(const CBlockIndex *pindexNew, const CChainParams& chainParams) {\n+void static UpdateTip(const CBlockIndex *pindexNew, const CChainParams& chainParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     // New best block\n     mempool.AddTransactionsUpdated(1);\n \n@@ -2862,7 +2862,7 @@ bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& c\n     return true;\n }\n \n-bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex) {\n+bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     return g_chainstate.InvalidateBlock(state, chainparams, pindex);\n }\n \n@@ -3587,7 +3587,7 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n     return true;\n }\n \n-bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot)\n+bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     assert(pindexPrev && pindexPrev == chainActive.Tip());\n@@ -3629,7 +3629,7 @@ uint64_t CalculateCurrentUsage()\n }\n \n /* Prune a block file (modify associated database entries)*/\n-void PruneOneBlockFile(const int fileNumber)\n+void PruneOneBlockFile(const int fileNumber) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     LOCK(cs_LastBlockFile);\n \n@@ -3948,7 +3948,7 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams) EXCLUSIVE_LOCKS_RE\n     return true;\n }\n \n-bool LoadChainTip(const CChainParams& chainparams)\n+bool LoadChainTip(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n \n@@ -4273,7 +4273,7 @@ bool CChainState::RewindBlockIndex(const CChainParams& params)\n     return true;\n }\n \n-bool RewindBlockIndex(const CChainParams& params) {\n+bool RewindBlockIndex(const CChainParams& params) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     if (!g_chainstate.RewindBlockIndex(params)) {\n         return false;\n     }\n@@ -4329,7 +4329,7 @@ void UnloadBlockIndex()\n     g_chainstate.UnloadBlockIndex();\n }\n \n-bool LoadBlockIndex(const CChainParams& chainparams)\n+bool LoadBlockIndex(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     // Load block index from databases\n     bool needs_init = fReindex;"
      },
      {
        "sha": "4e1aa48fd41109c1e1cda14e9743d630451aa42f",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a04dd77fe8b7b69b5ff6a06052750133985d0f43/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a04dd77fe8b7b69b5ff6a06052750133985d0f43/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=a04dd77fe8b7b69b5ff6a06052750133985d0f43",
        "patch": "@@ -151,7 +151,7 @@ extern CBlockPolicyEstimator feeEstimator;\n extern CTxMemPool mempool;\n extern std::atomic_bool g_is_mempool_loaded;\n typedef std::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n-extern BlockMap& mapBlockIndex;\n+extern BlockMap& mapBlockIndex GUARDED_BY(cs_main);\n extern uint64_t nLastBlockTx;\n extern uint64_t nLastBlockWeight;\n extern const std::string strMessageMagic;\n@@ -456,16 +456,16 @@ bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, C\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** The currently-connected chain of blocks (protected by cs_main). */\n-extern CChain& chainActive;\n+extern CChain& chainActive GUARDED_BY(cs_main);\n \n /** Global variable that points to the coins database (protected by cs_main) */\n-extern std::unique_ptr<CCoinsViewDB> pcoinsdbview;\n+extern std::unique_ptr<CCoinsViewDB> pcoinsdbview GUARDED_BY(cs_main);\n \n /** Global variable that points to the active CCoinsView (protected by cs_main) */\n-extern std::unique_ptr<CCoinsViewCache> pcoinsTip;\n+extern std::unique_ptr<CCoinsViewCache> pcoinsTip GUARDED_BY(cs_main);\n \n /** Global variable that points to the active block tree (protected by cs_main) */\n-extern std::unique_ptr<CBlockTreeDB> pblocktree;\n+extern std::unique_ptr<CBlockTreeDB> pblocktree GUARDED_BY(cs_main);\n \n /**\n  * Return the spend height, which is one more than the inputs.GetBestBlock()."
      },
      {
        "sha": "6c25e14319a36ee16c5f377c6acc0b40d1d23fd6",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a04dd77fe8b7b69b5ff6a06052750133985d0f43/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a04dd77fe8b7b69b5ff6a06052750133985d0f43/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=a04dd77fe8b7b69b5ff6a06052750133985d0f43",
        "patch": "@@ -891,7 +891,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);\n     bool EncryptWallet(const SecureString& strWalletPassphrase);\n \n-    void GetKeyBirthTimes(interfaces::Chain::Lock& locked_chain, std::map<CTxDestination, int64_t> &mapKeyBirth) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void GetKeyBirthTimes(interfaces::Chain::Lock& locked_chain, std::map<CTxDestination, int64_t> &mapKeyBirth) const EXCLUSIVE_LOCKS_REQUIRED(cs_main, cs_wallet);\n     unsigned int ComputeTimeSmart(const CWalletTx& wtx) const;\n \n     /**"
      }
    ]
  }
]