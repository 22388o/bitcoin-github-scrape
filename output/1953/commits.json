[
  {
    "sha": "faff50d129b6d4b9e6397ac989218e83a26ae692",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWZmNTBkMTI5YjZkNGI5ZTYzOTdhYzk4OTIxOGU4M2EyNmFlNjky",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2012-10-24T05:41:52Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2012-10-24T06:13:03Z"
      },
      "message": "Fixes a race condition in CreateNewBlock and a future null deref on testnet.\n\nCreateNewBlock was reading pindexBest at the start before taking the lock\nso it was possible to have the the block content not match the prevheader\nand this can also trigger a newly added assert in ConnectBlock.\n\nI noticed this during a code review after twobitcoins reported that ab91bf39\n(BIP30 for all blocks) could cause a null dereference on a modified node\nthat mined during the IBD, or on testnet when it reached heights 91842 and\n91880 due to CreateNewBlock calling ConnectBlock with pindex->phashBlock NULL.",
      "tree": {
        "sha": "45b7bdc6a35e44ffd248d6797c35243c15f05560",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45b7bdc6a35e44ffd248d6797c35243c15f05560"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faff50d129b6d4b9e6397ac989218e83a26ae692",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faff50d129b6d4b9e6397ac989218e83a26ae692",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faff50d129b6d4b9e6397ac989218e83a26ae692",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faff50d129b6d4b9e6397ac989218e83a26ae692/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "675a39fc4f24f9e0c9947e311a39efb6b7261c20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/675a39fc4f24f9e0c9947e311a39efb6b7261c20",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/675a39fc4f24f9e0c9947e311a39efb6b7261c20"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "08188f376adadcdd5c823553df9959230eed24fe",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faff50d129b6d4b9e6397ac989218e83a26ae692/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faff50d129b6d4b9e6397ac989218e83a26ae692/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=faff50d129b6d4b9e6397ac989218e83a26ae692",
        "patch": "@@ -1558,7 +1558,8 @@ bool CBlock::ConnectBlock(CBlockIndex* pindex, CCoinsViewCache &view, bool fJust\n     // Now that the whole chain is irreversibly beyond that time it is applied to all blocks except the\n     // two in the chain that violate it. This prevents exploiting the issue against nodes in their\n     // initial block download.\n-    bool fEnforceBIP30 = !((pindex->nHeight==91842 && pindex->GetBlockHash() == uint256(\"0x00000000000a4d0a398161ffc163c503763b1f4360639393e0e4c8e300e0caec\")) ||\n+    bool fEnforceBIP30 = (!pindex->phashBlock) || // Enforce on CreateNewBlock invocations which don't have a hash.\n+                          !((pindex->nHeight==91842 && pindex->GetBlockHash() == uint256(\"0x00000000000a4d0a398161ffc163c503763b1f4360639393e0e4c8e300e0caec\")) ||\n                            (pindex->nHeight==91880 && pindex->GetBlockHash() == uint256(\"0x00000000000743f190a18c5577a3c2d2a1f610ae9601ac046a38084ccb7cd721\")));\n     if (fEnforceBIP30) {\n         for (unsigned int i=0; i<vtx.size(); i++) {\n@@ -3750,7 +3751,6 @@ CScript scriptDummy(std::vector<unsigned char>(pszDummy, pszDummy + sizeof(pszDu\n \n CBlock* CreateNewBlock(CReserveKey& reservekey)\n {\n-    CBlockIndex* pindexPrev = pindexBest;\n \n     // Create new block\n     auto_ptr<CBlock> pblock(new CBlock());\n@@ -3795,6 +3795,7 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n     int64 nFees = 0;\n     {\n         LOCK2(cs_main, mempool.cs);\n+        CBlockIndex* pindexPrev = pindexBest;\n         CCoinsViewCache view(*pcoinsTip, true);\n \n         // Priority order to process transactions"
      }
    ]
  }
]