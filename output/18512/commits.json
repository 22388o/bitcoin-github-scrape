[
  {
    "sha": "1479007a335ab43af46f527d0543e254fc2a8e86",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDc5MDA3YTMzNWFiNDNhZjQ2ZjUyN2QwNTQzZTI1NGZjMmE4ZTg2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-04-03T01:22:04Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-04-08T23:26:06Z"
      },
      "message": "Introduce Instruction enum in asmap",
      "tree": {
        "sha": "3c0a7345aa2b9e20e01341fc272d0814bdbc9640",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c0a7345aa2b9e20e01341fc272d0814bdbc9640"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1479007a335ab43af46f527d0543e254fc2a8e86",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1479007a335ab43af46f527d0543e254fc2a8e86",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1479007a335ab43af46f527d0543e254fc2a8e86",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1479007a335ab43af46f527d0543e254fc2a8e86/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "661bd5dea3d080cd79f15c7703fc6ab577a1aa0c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/661bd5dea3d080cd79f15c7703fc6ab577a1aa0c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/661bd5dea3d080cd79f15c7703fc6ab577a1aa0c"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 16,
      "deletions": 7
    },
    "files": [
      {
        "sha": "2ffd61820346b4cfef4664a697fb144d7452aa03",
        "filename": "src/util/asmap.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 7,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1479007a335ab43af46f527d0543e254fc2a8e86/src/util/asmap.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1479007a335ab43af46f527d0543e254fc2a8e86/src/util/asmap.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/asmap.cpp?ref=1479007a335ab43af46f527d0543e254fc2a8e86",
        "patch": "@@ -36,10 +36,18 @@ uint32_t DecodeBits(std::vector<bool>::const_iterator& bitpos, const std::vector\n     return -1;\n }\n \n+enum class Instruction : uint32_t\n+{\n+    RETURN = 0,\n+    JUMP = 1,\n+    MATCH = 2,\n+    DEFAULT = 3,\n+};\n+\n const std::vector<uint8_t> TYPE_BIT_SIZES{0, 0, 1};\n-uint32_t DecodeType(std::vector<bool>::const_iterator& bitpos, const std::vector<bool>::const_iterator& endpos)\n+Instruction DecodeType(std::vector<bool>::const_iterator& bitpos, const std::vector<bool>::const_iterator& endpos)\n {\n-    return DecodeBits(bitpos, endpos, 0, TYPE_BIT_SIZES);\n+    return Instruction(DecodeBits(bitpos, endpos, 0, TYPE_BIT_SIZES));\n }\n \n const std::vector<uint8_t> ASN_BIT_SIZES{15, 16, 17, 18, 19, 20, 21, 22, 23, 24};\n@@ -70,20 +78,21 @@ uint32_t Interpret(const std::vector<bool> &asmap, const std::vector<bool> &ip)\n     const std::vector<bool>::const_iterator endpos = asmap.end();\n     uint8_t bits = ip.size();\n     uint32_t default_asn = 0;\n-    uint32_t opcode, jump, match, matchlen;\n+    uint32_t jump, match, matchlen;\n+    Instruction opcode;\n     while (pos != endpos) {\n         opcode = DecodeType(pos, endpos);\n-        if (opcode == 0) {\n+        if (opcode == Instruction::RETURN) {\n             return DecodeASN(pos, endpos);\n-        } else if (opcode == 1) {\n+        } else if (opcode == Instruction::JUMP) {\n             jump = DecodeJump(pos, endpos);\n             if (bits == 0) break;\n             if (ip[ip.size() - bits]) {\n                 if (jump >= endpos - pos) break;\n                 pos += jump;\n             }\n             bits--;\n-        } else if (opcode == 2) {\n+        } else if (opcode == Instruction::MATCH) {\n             match = DecodeMatch(pos, endpos);\n             matchlen = CountBits(match) - 1;\n             for (uint32_t bit = 0; bit < matchlen; bit++) {\n@@ -93,7 +102,7 @@ uint32_t Interpret(const std::vector<bool> &asmap, const std::vector<bool> &ip)\n                 }\n                 bits--;\n             }\n-        } else if (opcode == 3) {\n+        } else if (opcode == Instruction::DEFAULT) {\n             default_asn = DecodeASN(pos, endpos);\n         } else {\n             break;"
      }
    ]
  },
  {
    "sha": "2b3dbfa5a63cb5a6625ec00294ebd933800f0255",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYjNkYmZhNWE2M2NiNWE2NjI1ZWMwMDI5NGViZDkzMzgwMGYwMjU1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-04-03T17:43:38Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-04-08T23:26:06Z"
      },
      "message": "Deal with decoding failures explicitly in asmap Interpret",
      "tree": {
        "sha": "ea49a5820ac02ed8172fc2f36bd000a9dd38e910",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea49a5820ac02ed8172fc2f36bd000a9dd38e910"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b3dbfa5a63cb5a6625ec00294ebd933800f0255",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b3dbfa5a63cb5a6625ec00294ebd933800f0255",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2b3dbfa5a63cb5a6625ec00294ebd933800f0255",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b3dbfa5a63cb5a6625ec00294ebd933800f0255/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1479007a335ab43af46f527d0543e254fc2a8e86",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1479007a335ab43af46f527d0543e254fc2a8e86",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1479007a335ab43af46f527d0543e254fc2a8e86"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 11,
      "deletions": 4
    },
    "files": [
      {
        "sha": "5b21d01f3ac5bc0f3d50e54bd1c9c643d859abf5",
        "filename": "src/util/asmap.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b3dbfa5a63cb5a6625ec00294ebd933800f0255/src/util/asmap.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b3dbfa5a63cb5a6625ec00294ebd933800f0255/src/util/asmap.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/asmap.cpp?ref=2b3dbfa5a63cb5a6625ec00294ebd933800f0255",
        "patch": "@@ -8,6 +8,8 @@\n \n namespace {\n \n+constexpr uint32_t INVALID = 0xFFFFFFFF;\n+\n uint32_t DecodeBits(std::vector<bool>::const_iterator& bitpos, const std::vector<bool>::const_iterator& endpos, uint8_t minval, const std::vector<uint8_t> &bit_sizes)\n {\n     uint32_t val = minval;\n@@ -25,15 +27,15 @@ uint32_t DecodeBits(std::vector<bool>::const_iterator& bitpos, const std::vector\n             val += (1 << *bit_sizes_it);\n         } else {\n             for (int b = 0; b < *bit_sizes_it; b++) {\n-                if (bitpos == endpos) break;\n+                if (bitpos == endpos) return INVALID; // Reached EOF in mantissa\n                 bit = *bitpos;\n                 bitpos++;\n                 val += bit << (*bit_sizes_it - 1 - b);\n             }\n             return val;\n         }\n     }\n-    return -1;\n+    return INVALID; // Reached EOF in exponent\n }\n \n enum class Instruction : uint32_t\n@@ -83,9 +85,12 @@ uint32_t Interpret(const std::vector<bool> &asmap, const std::vector<bool> &ip)\n     while (pos != endpos) {\n         opcode = DecodeType(pos, endpos);\n         if (opcode == Instruction::RETURN) {\n-            return DecodeASN(pos, endpos);\n+            default_asn = DecodeASN(pos, endpos);\n+            if (default_asn == INVALID) break; // ASN straddles EOF\n+            return default_asn;\n         } else if (opcode == Instruction::JUMP) {\n             jump = DecodeJump(pos, endpos);\n+            if (jump == INVALID) break; // Jump offset straddles EOF\n             if (bits == 0) break;\n             if (ip[ip.size() - bits]) {\n                 if (jump >= endpos - pos) break;\n@@ -94,6 +99,7 @@ uint32_t Interpret(const std::vector<bool> &asmap, const std::vector<bool> &ip)\n             bits--;\n         } else if (opcode == Instruction::MATCH) {\n             match = DecodeMatch(pos, endpos);\n+            if (match == INVALID) break; // Match bits straddle EOF\n             matchlen = CountBits(match) - 1;\n             for (uint32_t bit = 0; bit < matchlen; bit++) {\n                 if (bits == 0) break;\n@@ -104,8 +110,9 @@ uint32_t Interpret(const std::vector<bool> &asmap, const std::vector<bool> &ip)\n             }\n         } else if (opcode == Instruction::DEFAULT) {\n             default_asn = DecodeASN(pos, endpos);\n+            if (default_asn == INVALID) break; // ASN straddles EOF\n         } else {\n-            break;\n+            break; // Instruction straddles EOF\n         }\n     }\n     return 0; // 0 is not a valid ASN"
      }
    ]
  },
  {
    "sha": "5feefbe6e7b6cdd809eba4074d41dc95a7035f7e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZmVlZmJlNmU3YjZjZGQ4MDllYmE0MDc0ZDQxZGM5NWE3MDM1Zjdl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-04-03T01:17:55Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-04-08T23:26:06Z"
      },
      "message": "Improve asmap Interpret checks and document failures",
      "tree": {
        "sha": "86b3b8ce9c7165daede3a8ecf01b43bde2604cf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/86b3b8ce9c7165daede3a8ecf01b43bde2604cf3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5feefbe6e7b6cdd809eba4074d41dc95a7035f7e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5feefbe6e7b6cdd809eba4074d41dc95a7035f7e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5feefbe6e7b6cdd809eba4074d41dc95a7035f7e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5feefbe6e7b6cdd809eba4074d41dc95a7035f7e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2b3dbfa5a63cb5a6625ec00294ebd933800f0255",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b3dbfa5a63cb5a6625ec00294ebd933800f0255",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2b3dbfa5a63cb5a6625ec00294ebd933800f0255"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "e428ec8138fd1ad7e47d52f884fe21ccfc2b21f9",
        "filename": "src/util/asmap.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5feefbe6e7b6cdd809eba4074d41dc95a7035f7e/src/util/asmap.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5feefbe6e7b6cdd809eba4074d41dc95a7035f7e/src/util/asmap.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/asmap.cpp?ref=5feefbe6e7b6cdd809eba4074d41dc95a7035f7e",
        "patch": "@@ -91,18 +91,18 @@ uint32_t Interpret(const std::vector<bool> &asmap, const std::vector<bool> &ip)\n         } else if (opcode == Instruction::JUMP) {\n             jump = DecodeJump(pos, endpos);\n             if (jump == INVALID) break; // Jump offset straddles EOF\n-            if (bits == 0) break;\n+            if (bits == 0) break; // No input bits left\n+            if (jump >= endpos - pos) break; // Jumping past EOF\n             if (ip[ip.size() - bits]) {\n-                if (jump >= endpos - pos) break;\n                 pos += jump;\n             }\n             bits--;\n         } else if (opcode == Instruction::MATCH) {\n             match = DecodeMatch(pos, endpos);\n             if (match == INVALID) break; // Match bits straddle EOF\n             matchlen = CountBits(match) - 1;\n+            if (bits < matchlen) break; // Not enough input bits\n             for (uint32_t bit = 0; bit < matchlen; bit++) {\n-                if (bits == 0) break;\n                 if ((ip[ip.size() - bits]) != ((match >> (matchlen - 1 - bit)) & 1)) {\n                     return default_asn;\n                 }\n@@ -115,5 +115,6 @@ uint32_t Interpret(const std::vector<bool> &asmap, const std::vector<bool> &ip)\n             break; // Instruction straddles EOF\n         }\n     }\n+    // Reached EOF without RETURN, or aborted (see any of the breaks above).\n     return 0; // 0 is not a valid ASN\n }"
      }
    ]
  },
  {
    "sha": "fffd8dca2de39ad4a683f0dce57cdca55ed2f600",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZmZkOGRjYTJkZTM5YWQ0YTY4M2YwZGNlNTdjZGNhNTVlZDJmNjAw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-04-03T01:18:08Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-04-08T23:26:06Z"
      },
      "message": "Add asmap sanity checker",
      "tree": {
        "sha": "e86de83adca4ce10b1a46c8f25aa8d4f2bc8f522",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e86de83adca4ce10b1a46c8f25aa8d4f2bc8f522"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fffd8dca2de39ad4a683f0dce57cdca55ed2f600",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fffd8dca2de39ad4a683f0dce57cdca55ed2f600",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fffd8dca2de39ad4a683f0dce57cdca55ed2f600",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fffd8dca2de39ad4a683f0dce57cdca55ed2f600/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5feefbe6e7b6cdd809eba4074d41dc95a7035f7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5feefbe6e7b6cdd809eba4074d41dc95a7035f7e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5feefbe6e7b6cdd809eba4074d41dc95a7035f7e"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 70,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b22ad6d641adf4276b98fff4dcc3247d691ae010",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fffd8dca2de39ad4a683f0dce57cdca55ed2f600/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fffd8dca2de39ad4a683f0dce57cdca55ed2f600/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=fffd8dca2de39ad4a683f0dce57cdca55ed2f600",
        "patch": "@@ -644,5 +644,9 @@ std::vector<bool> CAddrMan::DecodeAsmap(fs::path path)\n             bits.push_back((cur_byte >> bit) & 1);\n         }\n     }\n+    if (!SanityCheckASMap(bits)) {\n+        LogPrintf(\"Sanity check of asmap file %s failed\\n\", path);\n+        return {};\n+    }\n     return bits;\n }"
      },
      {
        "sha": "e0b27b1d7c00fc78ab912b5e820e0fb36ca64a8a",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fffd8dca2de39ad4a683f0dce57cdca55ed2f600/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fffd8dca2de39ad4a683f0dce57cdca55ed2f600/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=fffd8dca2de39ad4a683f0dce57cdca55ed2f600",
        "patch": "@@ -894,3 +894,8 @@ bool operator<(const CSubNet& a, const CSubNet& b)\n {\n     return (a.network < b.network || (a.network == b.network && memcmp(a.netmask, b.netmask, 16) < 0));\n }\n+\n+bool SanityCheckASMap(const std::vector<bool>& asmap)\n+{\n+    return SanityCheckASMap(asmap, 128); // For IP address lookups, the input is 128 bits\n+}"
      },
      {
        "sha": "ec06a588bf575c0aa4ebf6fd39c48a7405ea175d",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fffd8dca2de39ad4a683f0dce57cdca55ed2f600/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fffd8dca2de39ad4a683f0dce57cdca55ed2f600/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=fffd8dca2de39ad4a683f0dce57cdca55ed2f600",
        "patch": "@@ -180,4 +180,6 @@ class CService : public CNetAddr\n         }\n };\n \n+bool SanityCheckASMap(const std::vector<bool>& asmap);\n+\n #endif // BITCOIN_NETADDRESS_H"
      },
      {
        "sha": "5c3652f89b0052ae5b0c116b17d527b5b15fbe62",
        "filename": "src/util/asmap.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 0,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fffd8dca2de39ad4a683f0dce57cdca55ed2f600/src/util/asmap.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fffd8dca2de39ad4a683f0dce57cdca55ed2f600/src/util/asmap.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/asmap.cpp?ref=fffd8dca2de39ad4a683f0dce57cdca55ed2f600",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <map>\n #include <vector>\n #include <assert.h>\n #include <crypto/common.h>\n@@ -118,3 +119,56 @@ uint32_t Interpret(const std::vector<bool> &asmap, const std::vector<bool> &ip)\n     // Reached EOF without RETURN, or aborted (see any of the breaks above).\n     return 0; // 0 is not a valid ASN\n }\n+\n+bool SanityCheckASMap(const std::vector<bool>& asmap, int bits)\n+{\n+    const std::vector<bool>::const_iterator begin = asmap.begin(), endpos = asmap.end();\n+    std::vector<bool>::const_iterator pos = begin;\n+    std::vector<std::pair<uint32_t, int>> jumps; // All future positions we may jump to (bit offset in asmap -> bits to consume left)\n+    jumps.reserve(bits);\n+    while (pos != endpos) {\n+        uint32_t offset = pos - begin;\n+        if (!jumps.empty() && offset >= jumps.back().first) return false; // There was a jump into the middle of the previous instruction\n+        Instruction opcode = DecodeType(pos, endpos);\n+        if (opcode == Instruction::RETURN) {\n+            uint32_t asn = DecodeASN(pos, endpos);\n+            if (asn == INVALID) return false; // ASN straddles EOF\n+            if (jumps.empty()) {\n+                // Nothing to execute anymore\n+                if (endpos - pos > 7) return false; // Excessive padding\n+                while (pos != endpos) {\n+                    if (*pos) return false; // Nonzero padding bit\n+                    ++pos;\n+                }\n+                return true; // Sanely reached EOF\n+            } else {\n+                // Continue by pretending we jumped to the next instruction\n+                offset = pos - begin;\n+                if (offset != jumps.back().first) return false; // Unreachable code\n+                bits = jumps.back().second; // Restore the number of bits we would have had left after this jump\n+                jumps.pop_back();\n+            }\n+        } else if (opcode == Instruction::JUMP) {\n+            uint32_t jump = DecodeJump(pos, endpos);\n+            if (jump == INVALID) return false; // Jump offset straddles EOF\n+            if (jump > endpos - pos) return false; // Jump out of range\n+            if (bits == 0) return false; // Consuming bits past the end of the input\n+            --bits;\n+            uint32_t jump_offset = pos - begin + jump;\n+            if (!jumps.empty() && jump_offset >= jumps.back().first) return false; // Intersecting jumps\n+            jumps.emplace_back(jump_offset, bits);\n+        } else if (opcode == Instruction::MATCH) {\n+            uint32_t match = DecodeMatch(pos, endpos);\n+            if (match == INVALID) return false; // Match bits straddle EOF\n+            int matchlen = CountBits(match) - 1;\n+            if (bits < matchlen) return false; // Consuming bits past the end of the input\n+            bits -= matchlen;\n+        } else if (opcode == Instruction::DEFAULT) {\n+            uint32_t asn = DecodeASN(pos, endpos);\n+            if (asn == INVALID) return false; // ASN straddles EOF\n+        } else {\n+            return false; // Instruction straddles EOF\n+        }\n+    }\n+    return false; // Reached EOF without RETURN instruction\n+}"
      },
      {
        "sha": "b31e639bb5d7187853302b9a014b1f9d48b75f89",
        "filename": "src/util/asmap.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fffd8dca2de39ad4a683f0dce57cdca55ed2f600/src/util/asmap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fffd8dca2de39ad4a683f0dce57cdca55ed2f600/src/util/asmap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/asmap.h?ref=fffd8dca2de39ad4a683f0dce57cdca55ed2f600",
        "patch": "@@ -5,6 +5,11 @@\n #ifndef BITCOIN_UTIL_ASMAP_H\n #define BITCOIN_UTIL_ASMAP_H\n \n+#include <stdint.h>\n+#include <vector>\n+\n uint32_t Interpret(const std::vector<bool> &asmap, const std::vector<bool> &ip);\n \n+bool SanityCheckASMap(const std::vector<bool>& asmap, int bits);\n+\n #endif // BITCOIN_UTIL_ASMAP_H"
      }
    ]
  },
  {
    "sha": "c81aefc5377888c7ac4f29f570249fd6c2fdb352",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODFhZWZjNTM3Nzg4OGM3YWM0ZjI5ZjU3MDI0OWZkNmMyZmRiMzUy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-04-03T18:09:21Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-04-08T23:26:06Z"
      },
      "message": "Add additional effiency checks to sanity checker",
      "tree": {
        "sha": "22637ef997d456dd3e0af585bf7010f02c68b9c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22637ef997d456dd3e0af585bf7010f02c68b9c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c81aefc5377888c7ac4f29f570249fd6c2fdb352",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c81aefc5377888c7ac4f29f570249fd6c2fdb352",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c81aefc5377888c7ac4f29f570249fd6c2fdb352",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c81aefc5377888c7ac4f29f570249fd6c2fdb352/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fffd8dca2de39ad4a683f0dce57cdca55ed2f600",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fffd8dca2de39ad4a683f0dce57cdca55ed2f600",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fffd8dca2de39ad4a683f0dce57cdca55ed2f600"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5f3f53c3936002e2614f55d63c662fe13953dcc3",
        "filename": "src/util/asmap.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c81aefc5377888c7ac4f29f570249fd6c2fdb352/src/util/asmap.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c81aefc5377888c7ac4f29f570249fd6c2fdb352/src/util/asmap.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/asmap.cpp?ref=c81aefc5377888c7ac4f29f570249fd6c2fdb352",
        "patch": "@@ -126,11 +126,14 @@ bool SanityCheckASMap(const std::vector<bool>& asmap, int bits)\n     std::vector<bool>::const_iterator pos = begin;\n     std::vector<std::pair<uint32_t, int>> jumps; // All future positions we may jump to (bit offset in asmap -> bits to consume left)\n     jumps.reserve(bits);\n+    Instruction prevopcode = Instruction::JUMP;\n+    bool had_incomplete_match = false;\n     while (pos != endpos) {\n         uint32_t offset = pos - begin;\n         if (!jumps.empty() && offset >= jumps.back().first) return false; // There was a jump into the middle of the previous instruction\n         Instruction opcode = DecodeType(pos, endpos);\n         if (opcode == Instruction::RETURN) {\n+            if (prevopcode == Instruction::DEFAULT) return false; // There should not be any RETURN immediately after a DEFAULT (could be combined into just RETURN)\n             uint32_t asn = DecodeASN(pos, endpos);\n             if (asn == INVALID) return false; // ASN straddles EOF\n             if (jumps.empty()) {\n@@ -147,6 +150,7 @@ bool SanityCheckASMap(const std::vector<bool>& asmap, int bits)\n                 if (offset != jumps.back().first) return false; // Unreachable code\n                 bits = jumps.back().second; // Restore the number of bits we would have had left after this jump\n                 jumps.pop_back();\n+                prevopcode = Instruction::JUMP;\n             }\n         } else if (opcode == Instruction::JUMP) {\n             uint32_t jump = DecodeJump(pos, endpos);\n@@ -157,15 +161,22 @@ bool SanityCheckASMap(const std::vector<bool>& asmap, int bits)\n             uint32_t jump_offset = pos - begin + jump;\n             if (!jumps.empty() && jump_offset >= jumps.back().first) return false; // Intersecting jumps\n             jumps.emplace_back(jump_offset, bits);\n+            prevopcode = Instruction::JUMP;\n         } else if (opcode == Instruction::MATCH) {\n             uint32_t match = DecodeMatch(pos, endpos);\n             if (match == INVALID) return false; // Match bits straddle EOF\n             int matchlen = CountBits(match) - 1;\n+            if (prevopcode != Instruction::MATCH) had_incomplete_match = false;\n+            if (matchlen < 8 && had_incomplete_match) return false; // Within a sequence of matches only at most one should be incomplete\n+            had_incomplete_match = (matchlen < 8);\n             if (bits < matchlen) return false; // Consuming bits past the end of the input\n             bits -= matchlen;\n+            prevopcode = Instruction::MATCH;\n         } else if (opcode == Instruction::DEFAULT) {\n+            if (prevopcode == Instruction::DEFAULT) return false; // There should not be two successive DEFAULTs (they could be combined into one)\n             uint32_t asn = DecodeASN(pos, endpos);\n             if (asn == INVALID) return false; // ASN straddles EOF\n+            prevopcode = Instruction::DEFAULT;\n         } else {\n             return false; // Instruction straddles EOF\n         }"
      }
    ]
  },
  {
    "sha": "7cf97fda154ba837933eb05be5aeecfb69a06641",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Y2Y5N2ZkYTE1NGJhODM3OTMzZWIwNWJlNWFlZWNmYjY5YTA2NjQx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-04-03T20:32:34Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-04-08T23:26:06Z"
      },
      "message": "Make asmap Interpreter errors fatal and fuzz test it",
      "tree": {
        "sha": "90f13a695239d6d3c8561880304cda37e32625fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/90f13a695239d6d3c8561880304cda37e32625fa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7cf97fda154ba837933eb05be5aeecfb69a06641",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cf97fda154ba837933eb05be5aeecfb69a06641",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7cf97fda154ba837933eb05be5aeecfb69a06641",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cf97fda154ba837933eb05be5aeecfb69a06641/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c81aefc5377888c7ac4f29f570249fd6c2fdb352",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c81aefc5377888c7ac4f29f570249fd6c2fdb352",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c81aefc5377888c7ac4f29f570249fd6c2fdb352"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 34,
      "deletions": 13
    },
    "files": [
      {
        "sha": "ea56277eacff36201617b165d0daa1b10e4a5bf7",
        "filename": "src/test/fuzz/asmap.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 12,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cf97fda154ba837933eb05be5aeecfb69a06641/src/test/fuzz/asmap.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cf97fda154ba837933eb05be5aeecfb69a06641/src/test/fuzz/asmap.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/asmap.cpp?ref=7cf97fda154ba837933eb05be5aeecfb69a06641",
        "patch": "@@ -3,26 +3,47 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <netaddress.h>\n-#include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n \n #include <cstdint>\n #include <vector>\n \n+//! asmap code that consumes nothing\n+static const std::vector<bool> IPV6_PREFIX_ASMAP = {};\n+\n+//! asmap code that consumes the 96 prefix bits of ::ffff:0/96 (IPv4-in-IPv6 map)\n+static const std::vector<bool> IPV4_PREFIX_ASMAP = {\n+    true, true, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, // Match 0x00\n+    true, true, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, // Match 0x00\n+    true, true, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, // Match 0x00\n+    true, true, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, // Match 0x00\n+    true, true, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, // Match 0x00\n+    true, true, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, // Match 0x00\n+    true, true, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, // Match 0x00\n+    true, true, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, // Match 0x00\n+    true, true, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, // Match 0x00\n+    true, true, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, // Match 0x00\n+    true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, // Match 0xFF\n+    true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true // Match 0xFF\n+};\n+\n void test_one_input(const std::vector<uint8_t>& buffer)\n {\n-    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n-    const Network network = fuzzed_data_provider.PickValueInArray({NET_IPV4, NET_IPV6});\n-    if (fuzzed_data_provider.remaining_bytes() < 16) {\n-        return;\n-    }\n-    CNetAddr net_addr;\n-    net_addr.SetRaw(network, fuzzed_data_provider.ConsumeBytes<uint8_t>(16).data());\n-    std::vector<bool> asmap;\n-    for (const char cur_byte : fuzzed_data_provider.ConsumeRemainingBytes<char>()) {\n-        for (int bit = 0; bit < 8; ++bit) {\n-            asmap.push_back((cur_byte >> bit) & 1);\n+    // Encoding: [7 bits: asmap size] [1 bit: ipv6?] [3-130 bytes: asmap] [4 or 16 bytes: addr]\n+    if (buffer.size() < 1 + 3 + 4) return;\n+    int asmap_size = 3 + (buffer[0] & 127);\n+    bool ipv6 = buffer[0] & 128;\n+    int addr_size = ipv6 ? 16 : 4;\n+    if (buffer.size() < size_t(1 + asmap_size + addr_size)) return;\n+    std::vector<bool> asmap = ipv6 ? IPV6_PREFIX_ASMAP : IPV4_PREFIX_ASMAP;\n+    asmap.reserve(asmap.size() + 8 * asmap_size);\n+    for (int i = 0; i < asmap_size; ++i) {\n+        for (int j = 0; j < 8; ++j) {\n+            asmap.push_back((buffer[1 + i] >> j) & 1);\n         }\n     }\n+    if (!SanityCheckASMap(asmap)) return;\n+    CNetAddr net_addr;\n+    net_addr.SetRaw(ipv6 ? NET_IPV6 : NET_IPV4, buffer.data() + 1 + asmap_size);\n     (void)net_addr.GetMappedAS(asmap);\n }"
      },
      {
        "sha": "f24a382d6e84835658c772d37a4fd7cef6d336eb",
        "filename": "src/util/asmap.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cf97fda154ba837933eb05be5aeecfb69a06641/src/util/asmap.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cf97fda154ba837933eb05be5aeecfb69a06641/src/util/asmap.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/asmap.cpp?ref=7cf97fda154ba837933eb05be5aeecfb69a06641",
        "patch": "@@ -116,7 +116,7 @@ uint32_t Interpret(const std::vector<bool> &asmap, const std::vector<bool> &ip)\n             break; // Instruction straddles EOF\n         }\n     }\n-    // Reached EOF without RETURN, or aborted (see any of the breaks above).\n+    assert(false); // Reached EOF without RETURN, or aborted (see any of the breaks above) - should have been caught by SanityCheckASMap below\n     return 0; // 0 is not a valid ASN\n }\n "
      }
    ]
  },
  {
    "sha": "748977690e0519110cda9628162a7ccf73a5934b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDg5Nzc2OTBlMDUxOTExMGNkYTk2MjgxNjJhN2NjZjczYTU5MzRi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-04-04T01:42:20Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-04-08T23:26:06Z"
      },
      "message": "Add asmap_direct fuzzer that tests Interpreter directly",
      "tree": {
        "sha": "fc1cc571536af29c68513568e1f4f8a43efad554",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc1cc571536af29c68513568e1f4f8a43efad554"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/748977690e0519110cda9628162a7ccf73a5934b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/748977690e0519110cda9628162a7ccf73a5934b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/748977690e0519110cda9628162a7ccf73a5934b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/748977690e0519110cda9628162a7ccf73a5934b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7cf97fda154ba837933eb05be5aeecfb69a06641",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cf97fda154ba837933eb05be5aeecfb69a06641",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7cf97fda154ba837933eb05be5aeecfb69a06641"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 53,
      "deletions": 0
    },
    "files": [
      {
        "sha": "65a6e10abd8879ff6e2bb5b12c69d11eb053e325",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/748977690e0519110cda9628162a7ccf73a5934b/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/748977690e0519110cda9628162a7ccf73a5934b/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=748977690e0519110cda9628162a7ccf73a5934b",
        "patch": "@@ -9,6 +9,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/address_deserialize \\\n   test/fuzz/addrman_deserialize \\\n   test/fuzz/asmap \\\n+  test/fuzz/asmap_direct \\\n   test/fuzz/banentry_deserialize \\\n   test/fuzz/base_encode_decode \\\n   test/fuzz/bech32 \\\n@@ -322,6 +323,12 @@ test_fuzz_asmap_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_asmap_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_asmap_SOURCES = test/fuzz/asmap.cpp\n \n+test_fuzz_asmap_direct_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_asmap_direct_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_asmap_direct_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_asmap_direct_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_asmap_direct_SOURCES = test/fuzz/asmap_direct.cpp\n+\n test_fuzz_banentry_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBANENTRY_DESERIALIZE=1\n test_fuzz_banentry_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_banentry_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)"
      },
      {
        "sha": "790f80237d1f0977191d33b214d77d6ee66a9909",
        "filename": "src/test/fuzz/asmap_direct.cpp",
        "status": "added",
        "additions": 46,
        "deletions": 0,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/748977690e0519110cda9628162a7ccf73a5934b/src/test/fuzz/asmap_direct.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/748977690e0519110cda9628162a7ccf73a5934b/src/test/fuzz/asmap_direct.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/asmap_direct.cpp?ref=748977690e0519110cda9628162a7ccf73a5934b",
        "patch": "@@ -0,0 +1,46 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/asmap.h>\n+#include <test/fuzz/fuzz.h>\n+\n+#include <cstdint>\n+#include <vector>\n+\n+#include <assert.h>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    // Encoding: [asmap using 1 bit / byte] 0xFF [addr using 1 bit / byte]\n+    bool have_sep = false;\n+    size_t sep_pos;\n+    for (size_t pos = 0; pos < buffer.size(); ++pos) {\n+        uint8_t x = buffer[pos];\n+        if ((x & 0xFE) == 0) continue;\n+        if (x == 0xFF) {\n+            if (have_sep) return;\n+            have_sep = true;\n+            sep_pos = pos;\n+        } else {\n+            return;\n+        }\n+    }\n+    if (!have_sep) return; // Needs exactly 1 separator\n+    if (buffer.size() - sep_pos - 1 > 128) return; // At most 128 bits in IP address\n+\n+    // Checks on asmap\n+    std::vector<bool> asmap(buffer.begin(), buffer.begin() + sep_pos);\n+    if (SanityCheckASMap(asmap, buffer.size() - 1 - sep_pos)) {\n+        // Verify that for valid asmaps, no prefix (except up to 7 zero padding bits) is valid.\n+        std::vector<bool> asmap_prefix = asmap;\n+        while (!asmap_prefix.empty() && asmap_prefix.size() + 7 > asmap.size() && asmap_prefix.back() == false) asmap_prefix.pop_back();\n+        while (!asmap_prefix.empty()) {\n+            asmap_prefix.pop_back();\n+            assert(!SanityCheckASMap(asmap_prefix, buffer.size() - 1 - sep_pos));\n+        }\n+        // No address input should trigger assertions in interpreter\n+        std::vector<bool> addr(buffer.begin() + sep_pos + 1, buffer.end());\n+        (void)Interpret(asmap, addr);\n+    }\n+}"
      }
    ]
  }
]