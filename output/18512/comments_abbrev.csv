sipa,2020-04-03 02:23:40,cc @naumenkogs.,https://github.com/bitcoin/bitcoin/pull/18512#issuecomment-608193711,608193711,
sipa,2020-04-03 03:27:59,"~~@practicalswift There may be opportunity to fuzz here: if SanityCheckASMap succeeds, then no input to Interpret should return 0.~~\n\nEDIT: Oh no, 0 can mean no match or error; it's still possible to reach no match.",https://github.com/bitcoin/bitcoin/pull/18512#issuecomment-608209420,608209420,
DrahtBot,2020-04-03 08:48:54,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18573 ([RFC] bitcoin-asmap utility by sipa)\n\nIf you consider this pull request important, please also help to review th",https://github.com/bitcoin/bitcoin/pull/18512#issuecomment-608314551,608314551,
MarcoFalke,2020-04-03 13:30:17,"Would be nice to have the new code covered by some tests. Maybe the fuzzers?\n\n\n```diff\ndiff --git a/src/test/fuzz/asmap.cpp b/src/test/fuzz/asmap.cpp\nindex 7f3eef79a1..1ab5459b12 100644\n--- a/src/test/fuzz/asmap.cpp\n+++ b/src/test/fuzz/asmap.cpp\n@@ -25,4 +25,5 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         }\n     }\n     (void)net_addr.GetMappedAS(asmap);",https://github.com/bitcoin/bitcoin/pull/18512#issuecomment-608434486,608434486,
naumenkogs,2020-04-03 14:52:39,"Code review ACK 47192230486e9305abb7c1ce882a515cdfb0a8b5\nTested: did some bit-flipping and saw that sanity check does not pass anymore.\n\nThank you for working on this.",https://github.com/bitcoin/bitcoin/pull/18512#issuecomment-608482116,608482116,
sipa,2020-04-03 20:40:38,"A few changes:\n* I've split out the changes into more commits\n* Made it an error to reach EOF without a RETURN instruction\n* Made the sanity checker slightly more tolerant (it now supports multiple jumps to the same location, a potential optimization that buildmap.py doesn't currently use).\n* Added a commit that makes failures in the Interpreter assertion failures, and adds a fuzz tester t",https://github.com/bitcoin/bitcoin/pull/18512#issuecomment-608648071,608648071,
naumenkogs,2020-04-04 13:16:13,"Using gcc 9.2.1, AFL 2.5.2, got this at compilation for fuzzing:\n```\nlibbitcoin_util.a(libbitcoin_util_a-threadinterrupt.o): In function `UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::~UniqueLock()':\n/home/gleb/bitcoin/src/./sync.h:169: undefined reference to `LeaveCritical()'\nlibbitcoin_util.a(libbitcoin_util_a-threadinterrupt.o): In function `UniqueLock<Annotated",https://github.com/bitcoin/bitcoin/pull/18512#issuecomment-609026916,609026916,
MarcoFalke,2020-04-04 13:24:39,@naumenkogs have you run `make distclean`?,https://github.com/bitcoin/bitcoin/pull/18512#issuecomment-609027949,609027949,
practicalswift,2020-04-04 13:47:20,"Concept ACK\n\nThanks a lot for adding a fuzzing harness!",https://github.com/bitcoin/bitcoin/pull/18512#issuecomment-609031214,609031214,
naumenkogs,2020-04-04 13:50:26,"@MarcoFalke\nThis helped.\n\n@sipa \nWith the latest code, the map I generated with ``truncate -s 1M wrong_asmap`` seems to be valid. I don't think that's correct behavior?",https://github.com/bitcoin/bitcoin/pull/18512#issuecomment-609031585,609031585,
sipa,2020-04-04 18:11:59,"@naumenkogs Nice catch. `DecodeBits` wasn't returning failure when EOF occurred in the mantissa bits. Should be fixed now. I believe it should be impossible to take a valid asmap and truncate it, and having it still be acceptable.",https://github.com/bitcoin/bitcoin/pull/18512#issuecomment-609068168,609068168,
naumenkogs,2020-04-04 23:04:21,ACK 906e031,https://github.com/bitcoin/bitcoin/pull/18512#issuecomment-609101491,609101491,
sipa,2020-04-06 22:14:09,Now added an extra check that verifies that no truncation of a valid asmap remains valid.,https://github.com/bitcoin/bitcoin/pull/18512#issuecomment-610064825,610064825,
hebasto,2020-04-17 17:25:19,"@sipa\nMind addressing a compiler warning issue on ARM 32-bit platforms: d0b10ed97a37c18a1750c776d6930378b64a5db9 from #18686 ?",https://github.com/bitcoin/bitcoin/pull/18512#issuecomment-615369421,615369421,
practicalswift,2020-04-25 05:59:58,"ACK 748977690e0519110cda9628162a7ccf73a5934b modulo feedback below.\n\n@sipa, would it be possible to make it so that the existing coverage-increasing inputs to `src/test/fuzz/asmap` are not invalidated by the merge of this PR? The [qa-assets inputs](https://github.com/bitcoin-core/qa-assets) achieve very comprehensive coverage for `asmap` thanks to previous fuzzing efforts. It would be nice to ",https://github.com/bitcoin/bitcoin/pull/18512#issuecomment-619327372,619327372,
jonatack,2020-04-26 13:05:45,"nit: Perhaps use a switch statement for the opcode conditionals, here and in `SanityCheckASMap`, to make explicit the nature of the operation (testing a single value against a set of scoped enumerations) and possibly generate better code with a jump table instead of repeatedly checking individual values.",https://github.com/bitcoin/bitcoin/pull/18512#discussion_r415306573,415306573,src/util/asmap.cpp
jonatack,2020-04-26 13:08:05,"nit suggestion:\n```diff\n+    size_t bits = buffer.size() - sep_pos - 1;\n-    if (buffer.size() - sep_pos - 1 > 128) return; // At most 128 bits in IP address\n+    if (bits > 128) return; // At most 128 bits in IP address\n \n     // Checks on asmap\n     std::vector<bool> asmap(buffer.begin(), buffer.begin() + sep_pos);\n-    if (SanityCheckASMap(asmap, buffer.size() - 1 - sep_pos)) {",https://github.com/bitcoin/bitcoin/pull/18512#discussion_r415307013,415307013,src/test/fuzz/asmap_direct.cpp
jonatack,2020-04-26 13:14:09,"nit suggestion:\n```diff\n-    bool have_sep = false;\n+    int separators{0};\n     size_t sep_pos;\n     for (size_t pos = 0; pos < buffer.size(); ++pos) {\n         uint8_t x = buffer[pos];\n         if ((x & 0xFE) == 0) continue;\n         if (x == 0xFF) {\n-            if (have_sep) return;\n-            have_sep = true;\n+            if (separators != 0) return;\n+            sep",https://github.com/bitcoin/bitcoin/pull/18512#discussion_r415308168,415308168,src/test/fuzz/asmap_direct.cpp
fjahr,2020-05-01 18:07:43,@jonatack Even in your code the only values the variable can have is 0 and 1. Why would you want to use an int instead of a bool then?,https://github.com/bitcoin/bitcoin/pull/18512#discussion_r418664572,418664572,src/test/fuzz/asmap_direct.cpp
jonatack,2020-05-01 18:23:27,"My thoughts were (a) a sanity check is better than just eyeballing code, not only for now but also future changes, and (b) a check for exactly one is more strongly verified when a state of more than one is also tested.\n",https://github.com/bitcoin/bitcoin/pull/18512#discussion_r418671458,418671458,src/test/fuzz/asmap_direct.cpp
fjahr,2020-05-01 18:31:42,nit: It's a bit inconsistent that this function has `ASMap` in it while `DecodeAsmap` for example has `Asmap`.,https://github.com/bitcoin/bitcoin/pull/18512#discussion_r418675330,418675330,src/util/asmap.cpp
