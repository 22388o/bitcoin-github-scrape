[
  {
    "sha": "52cbce287a0d9b3184fd3aee9d4f1186fd2dd7da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MmNiY2UyODdhMGQ5YjMxODRmZDNhZWU5ZDRmMTE4NmZkMmRkN2Rh",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-04-15T23:53:45Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-05-05T17:22:24Z"
      },
      "message": "net: don't import std namespace\n\nThis file is about to be broken up into chunks and moved around. Drop the\nnamespace now rather than requiring other files to use it.",
      "tree": {
        "sha": "413debe6005a9e340df5d9358e4e6300d71635dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/413debe6005a9e340df5d9358e4e6300d71635dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/52cbce287a0d9b3184fd3aee9d4f1186fd2dd7da",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52cbce287a0d9b3184fd3aee9d4f1186fd2dd7da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/52cbce287a0d9b3184fd3aee9d4f1186fd2dd7da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52cbce287a0d9b3184fd3aee9d4f1186fd2dd7da/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "006cdf64dc93239c05202b1a81d538ecda1e6c2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/006cdf64dc93239c05202b1a81d538ecda1e6c2a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/006cdf64dc93239c05202b1a81d538ecda1e6c2a"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 31,
      "deletions": 32
    },
    "files": [
      {
        "sha": "8ae31e715e36b0b1c4a42fc8e8e63747bdde82dd",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 32,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52cbce287a0d9b3184fd3aee9d4f1186fd2dd7da/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52cbce287a0d9b3184fd3aee9d4f1186fd2dd7da/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=52cbce287a0d9b3184fd3aee9d4f1186fd2dd7da",
        "patch": "@@ -56,7 +56,6 @@\n #endif\n #endif\n \n-using namespace std;\n \n namespace {\n     const int MAX_OUTBOUND_CONNECTIONS = 8;\n@@ -78,7 +77,7 @@ bool fDiscover = true;\n bool fListen = true;\n uint64_t nLocalServices = NODE_NETWORK;\n CCriticalSection cs_mapLocalHost;\n-map<CNetAddr, LocalServiceInfo> mapLocalHost;\n+std::map<CNetAddr, LocalServiceInfo> mapLocalHost;\n static bool vfLimited[NET_MAX] = {};\n static CNode* pnodeLocalHost = NULL;\n uint64_t nLocalHostNonce = 0;\n@@ -88,20 +87,20 @@ int nMaxConnections = DEFAULT_MAX_PEER_CONNECTIONS;\n bool fAddressesInitialized = false;\n std::string strSubVersion;\n \n-vector<CNode*> vNodes;\n+std::vector<CNode*> vNodes;\n CCriticalSection cs_vNodes;\n-map<uint256, CTransaction> mapRelay;\n-deque<pair<int64_t, uint256> > vRelayExpiration;\n+std::map<uint256, CTransaction> mapRelay;\n+std::deque<std::pair<int64_t, uint256> > vRelayExpiration;\n CCriticalSection cs_mapRelay;\n limitedmap<uint256, int64_t> mapAlreadyAskedFor(MAX_INV_SZ);\n \n-static deque<string> vOneShots;\n+static std::deque<std::string> vOneShots;\n CCriticalSection cs_vOneShots;\n \n-set<CNetAddr> setservAddNodeAddresses;\n+std::set<CNetAddr> setservAddNodeAddresses;\n CCriticalSection cs_setservAddNodeAddresses;\n \n-vector<std::string> vAddedNodes;\n+std::vector<std::string> vAddedNodes;\n CCriticalSection cs_vAddedNodes;\n \n NodeId nLastNodeId = 0;\n@@ -135,7 +134,7 @@ bool GetLocal(CService& addr, const CNetAddr *paddrPeer)\n     int nBestReachability = -1;\n     {\n         LOCK(cs_mapLocalHost);\n-        for (map<CNetAddr, LocalServiceInfo>::iterator it = mapLocalHost.begin(); it != mapLocalHost.end(); it++)\n+        for (std::map<CNetAddr, LocalServiceInfo>::iterator it = mapLocalHost.begin(); it != mapLocalHost.end(); it++)\n         {\n             int nScore = (*it).second.nScore;\n             int nReachability = (*it).first.GetReachabilityFrom(paddrPeer);\n@@ -796,7 +795,7 @@ void SocketSendData(CNode *pnode)\n     pnode->vSendMsg.erase(pnode->vSendMsg.begin(), it);\n }\n \n-static list<CNode*> vNodesDisconnected;\n+static std::list<CNode*> vNodesDisconnected;\n \n class CNodeRef {\n public:\n@@ -1045,7 +1044,7 @@ void ThreadSocketHandler()\n         {\n             LOCK(cs_vNodes);\n             // Disconnect unused nodes\n-            vector<CNode*> vNodesCopy = vNodes;\n+            std::vector<CNode*> vNodesCopy = vNodes;\n             BOOST_FOREACH(CNode* pnode, vNodesCopy)\n             {\n                 if (pnode->fDisconnect ||\n@@ -1069,7 +1068,7 @@ void ThreadSocketHandler()\n         }\n         {\n             // Delete disconnected nodes\n-            list<CNode*> vNodesDisconnectedCopy = vNodesDisconnected;\n+            std::list<CNode*> vNodesDisconnectedCopy = vNodesDisconnected;\n             BOOST_FOREACH(CNode* pnode, vNodesDisconnectedCopy)\n             {\n                 // wait until threads are done using it\n@@ -1120,7 +1119,7 @@ void ThreadSocketHandler()\n \n         BOOST_FOREACH(const ListenSocket& hListenSocket, vhListenSocket) {\n             FD_SET(hListenSocket.socket, &fdsetRecv);\n-            hSocketMax = max(hSocketMax, hListenSocket.socket);\n+            hSocketMax = std::max(hSocketMax, hListenSocket.socket);\n             have_fds = true;\n         }\n \n@@ -1131,7 +1130,7 @@ void ThreadSocketHandler()\n                 if (pnode->hSocket == INVALID_SOCKET)\n                     continue;\n                 FD_SET(pnode->hSocket, &fdsetError);\n-                hSocketMax = max(hSocketMax, pnode->hSocket);\n+                hSocketMax = std::max(hSocketMax, pnode->hSocket);\n                 have_fds = true;\n \n                 // Implement the following logic:\n@@ -1198,7 +1197,7 @@ void ThreadSocketHandler()\n         //\n         // Service each socket\n         //\n-        vector<CNode*> vNodesCopy;\n+        std::vector<CNode*> vNodesCopy;\n         {\n             LOCK(cs_vNodes);\n             vNodesCopy = vNodes;\n@@ -1355,7 +1354,7 @@ void ThreadMapPort()\n             }\n         }\n \n-        string strDesc = \"Bitcoin \" + FormatFullVersion();\n+        std::string strDesc = \"Bitcoin \" + FormatFullVersion();\n \n         try {\n             while (true) {\n@@ -1441,7 +1440,7 @@ void ThreadDNSAddressSeed()\n         }\n     }\n \n-    const vector<CDNSSeedData> &vSeeds = Params().DNSSeeds();\n+    const std::vector<CDNSSeedData> &vSeeds = Params().DNSSeeds();\n     int found = 0;\n \n     LogPrintf(\"Loading addresses from DNS seeds (could take a while)\\n\");\n@@ -1450,8 +1449,8 @@ void ThreadDNSAddressSeed()\n         if (HaveNameProxy()) {\n             AddOneShot(seed.host);\n         } else {\n-            vector<CNetAddr> vIPs;\n-            vector<CAddress> vAdd;\n+            std::vector<CNetAddr> vIPs;\n+            std::vector<CAddress> vAdd;\n             if (LookupHost(seed.host.c_str(), vIPs, 0, true))\n             {\n                 BOOST_FOREACH(const CNetAddr& ip, vIPs)\n@@ -1508,7 +1507,7 @@ void DumpData()\n \n void static ProcessOneShot()\n {\n-    string strDest;\n+    std::string strDest;\n     {\n         LOCK(cs_vOneShots);\n         if (vOneShots.empty())\n@@ -1574,7 +1573,7 @@ void ThreadOpenConnections()\n         // Only connect out to one peer per network group (/16 for IPv4).\n         // Do this here so we don't have to critsect vNodes inside mapAddresses critsect.\n         int nOutbound = 0;\n-        set<vector<unsigned char> > setConnected;\n+        std::set<std::vector<unsigned char> > setConnected;\n         {\n             LOCK(cs_vNodes);\n             BOOST_FOREACH(CNode* pnode, vNodes) {\n@@ -1632,7 +1631,7 @@ void ThreadOpenAddedConnections()\n \n     if (HaveNameProxy()) {\n         while(true) {\n-            list<string> lAddresses(0);\n+            std::list<std::string> lAddresses(0);\n             {\n                 LOCK(cs_vAddedNodes);\n                 BOOST_FOREACH(const std::string& strAddNode, vAddedNodes)\n@@ -1650,16 +1649,16 @@ void ThreadOpenAddedConnections()\n \n     for (unsigned int i = 0; true; i++)\n     {\n-        list<string> lAddresses(0);\n+        std::list<std::string> lAddresses(0);\n         {\n             LOCK(cs_vAddedNodes);\n             BOOST_FOREACH(const std::string& strAddNode, vAddedNodes)\n                 lAddresses.push_back(strAddNode);\n         }\n \n-        list<vector<CService> > lservAddressesToAdd(0);\n+        std::list<std::vector<CService> > lservAddressesToAdd(0);\n         BOOST_FOREACH(const std::string& strAddNode, lAddresses) {\n-            vector<CService> vservNode(0);\n+            std::vector<CService> vservNode(0);\n             if(Lookup(strAddNode.c_str(), vservNode, Params().GetDefaultPort(), fNameLookup, 0))\n             {\n                 lservAddressesToAdd.push_back(vservNode);\n@@ -1675,7 +1674,7 @@ void ThreadOpenAddedConnections()\n         {\n             LOCK(cs_vNodes);\n             BOOST_FOREACH(CNode* pnode, vNodes)\n-                for (list<vector<CService> >::iterator it = lservAddressesToAdd.begin(); it != lservAddressesToAdd.end(); it++)\n+                for (std::list<std::vector<CService> >::iterator it = lservAddressesToAdd.begin(); it != lservAddressesToAdd.end(); it++)\n                     BOOST_FOREACH(const CService& addrNode, *(it))\n                         if (pnode->addr == addrNode)\n                         {\n@@ -1684,7 +1683,7 @@ void ThreadOpenAddedConnections()\n                             break;\n                         }\n         }\n-        BOOST_FOREACH(vector<CService>& vserv, lservAddressesToAdd)\n+        BOOST_FOREACH(std::vector<CService>& vserv, lservAddressesToAdd)\n         {\n             CSemaphoreGrant grant(*semOutbound);\n             OpenNetworkConnection(CAddress(vserv[i % vserv.size()]), &grant);\n@@ -1732,7 +1731,7 @@ void ThreadMessageHandler()\n     SetThreadPriority(THREAD_PRIORITY_BELOW_NORMAL);\n     while (true)\n     {\n-        vector<CNode*> vNodesCopy;\n+        std::vector<CNode*> vNodesCopy;\n         {\n             LOCK(cs_vNodes);\n             vNodesCopy = vNodes;\n@@ -1792,7 +1791,7 @@ void ThreadMessageHandler()\n \n \n \n-bool BindListenPort(const CService &addrBind, string& strError, bool fWhitelisted)\n+bool BindListenPort(const CService &addrBind, std::string& strError, bool fWhitelisted)\n {\n     strError = \"\";\n     int nOne = 1;\n@@ -1900,7 +1899,7 @@ void static Discover(boost::thread_group& threadGroup)\n     char pszHostName[256] = \"\";\n     if (gethostname(pszHostName, sizeof(pszHostName)) != SOCKET_ERROR)\n     {\n-        vector<CNetAddr> vaddr;\n+        std::vector<CNetAddr> vaddr;\n         if (LookupHost(pszHostName, vaddr, 0, true))\n         {\n             BOOST_FOREACH (const CNetAddr &addr, vaddr)\n@@ -2300,7 +2299,7 @@ bool CAddrDB::Read(CAddrMan& addr)\n     // Don't try to resize to a negative number if file is small\n     if (fileSize >= sizeof(uint256))\n         dataSize = fileSize - sizeof(uint256);\n-    vector<unsigned char> vchData;\n+    std::vector<unsigned char> vchData;\n     vchData.resize(dataSize);\n     uint256 hashIn;\n \n@@ -2580,7 +2579,7 @@ bool CBanDB::Read(banmap_t& banSet)\n     // Don't try to resize to a negative number if file is small\n     if (fileSize >= sizeof(uint256))\n         dataSize = fileSize - sizeof(uint256);\n-    vector<unsigned char> vchData;\n+    std::vector<unsigned char> vchData;\n     vchData.resize(dataSize);\n     uint256 hashIn;\n "
      }
    ]
  },
  {
    "sha": "9faa4902cd32af9742b7ffcc163725bff226da1f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZmFhNDkwMmNkMzJhZjk3NDJiN2ZmY2MxNjM3MjViZmYyMjZkYTFm",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-04-16T00:01:40Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-05-05T17:22:24Z"
      },
      "message": "net: remove unused set",
      "tree": {
        "sha": "34208d35f4eba026c867144e950ddfc541df538b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/34208d35f4eba026c867144e950ddfc541df538b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9faa4902cd32af9742b7ffcc163725bff226da1f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9faa4902cd32af9742b7ffcc163725bff226da1f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9faa4902cd32af9742b7ffcc163725bff226da1f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9faa4902cd32af9742b7ffcc163725bff226da1f/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "52cbce287a0d9b3184fd3aee9d4f1186fd2dd7da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52cbce287a0d9b3184fd3aee9d4f1186fd2dd7da",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/52cbce287a0d9b3184fd3aee9d4f1186fd2dd7da"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 0,
      "deletions": 10
    },
    "files": [
      {
        "sha": "771d9e862499f1f597ed6163f6c397b33e03ebf0",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9faa4902cd32af9742b7ffcc163725bff226da1f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9faa4902cd32af9742b7ffcc163725bff226da1f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=9faa4902cd32af9742b7ffcc163725bff226da1f",
        "patch": "@@ -97,9 +97,6 @@ limitedmap<uint256, int64_t> mapAlreadyAskedFor(MAX_INV_SZ);\n static std::deque<std::string> vOneShots;\n CCriticalSection cs_vOneShots;\n \n-std::set<CNetAddr> setservAddNodeAddresses;\n-CCriticalSection cs_setservAddNodeAddresses;\n-\n std::vector<std::string> vAddedNodes;\n CCriticalSection cs_vAddedNodes;\n \n@@ -1660,14 +1657,7 @@ void ThreadOpenAddedConnections()\n         BOOST_FOREACH(const std::string& strAddNode, lAddresses) {\n             std::vector<CService> vservNode(0);\n             if(Lookup(strAddNode.c_str(), vservNode, Params().GetDefaultPort(), fNameLookup, 0))\n-            {\n                 lservAddressesToAdd.push_back(vservNode);\n-                {\n-                    LOCK(cs_setservAddNodeAddresses);\n-                    BOOST_FOREACH(const CService& serv, vservNode)\n-                        setservAddNodeAddresses.insert(serv);\n-                }\n-            }\n         }\n         // Attempt to connect to each IP for each addnode entry until at least one is successful per addnode entry\n         // (keeping in mind that addnode entries can have many IPs if fNameLookup)"
      }
    ]
  },
  {
    "sha": "563f375cdeae3e67a57d8a7187362a4706c33748",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NjNmMzc1Y2RlYWUzZTY3YTU3ZDhhNzE4NzM2MmE0NzA2YzMzNzQ4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-04-16T00:03:18Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-05-05T17:22:25Z"
      },
      "message": "net: use the exposed GetNodeSignals() rather than g_signals directly",
      "tree": {
        "sha": "4ab341937a944cf5a4b1bcfb3a42d041e01cc269",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ab341937a944cf5a4b1bcfb3a42d041e01cc269"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/563f375cdeae3e67a57d8a7187362a4706c33748",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/563f375cdeae3e67a57d8a7187362a4706c33748",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/563f375cdeae3e67a57d8a7187362a4706c33748",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/563f375cdeae3e67a57d8a7187362a4706c33748/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9faa4902cd32af9742b7ffcc163725bff226da1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9faa4902cd32af9742b7ffcc163725bff226da1f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9faa4902cd32af9742b7ffcc163725bff226da1f"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d6034953cff7e50968e18ec1faadaea64625e7a1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/563f375cdeae3e67a57d8a7187362a4706c33748/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/563f375cdeae3e67a57d8a7187362a4706c33748/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=563f375cdeae3e67a57d8a7187362a4706c33748",
        "patch": "@@ -439,7 +439,7 @@ void CNode::CloseSocketDisconnect()\n \n void CNode::PushVersion()\n {\n-    int nBestHeight = g_signals.GetHeight().get_value_or(0);\n+    int nBestHeight = GetNodeSignals().GetHeight().get_value_or(0);\n \n     int64_t nTime = (fInbound ? GetAdjustedTime() : GetTime());\n     CAddress addrYou = (addr.IsRoutable() && !IsProxy(addr) ? addr : CAddress(CService(\"0.0.0.0\",0)));\n@@ -1742,7 +1742,7 @@ void ThreadMessageHandler()\n                 TRY_LOCK(pnode->cs_vRecvMsg, lockRecv);\n                 if (lockRecv)\n                 {\n-                    if (!g_signals.ProcessMessages(pnode))\n+                    if (!GetNodeSignals().ProcessMessages(pnode))\n                         pnode->CloseSocketDisconnect();\n \n                     if (pnode->nSendSize < SendBufferSize())\n@@ -1760,7 +1760,7 @@ void ThreadMessageHandler()\n             {\n                 TRY_LOCK(pnode->cs_vSend, lockSend);\n                 if (lockSend)\n-                    g_signals.SendMessages(pnode);\n+                    GetNodeSignals().SendMessages(pnode);\n             }\n             boost::this_thread::interruption_point();\n         }"
      }
    ]
  },
  {
    "sha": "cca221fd211f63b338bd90afc505bd4a22a01d5d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjY2EyMjFmZDIxMWY2M2IzMzhiZDkwYWZjNTA1YmQ0YTIyYTAxZDVk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-04-18T19:58:19Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-05-05T17:22:25Z"
      },
      "message": "net: Drop CNodeRef for AttemptToEvictConnection\n\nLocking for each operation here is unnecessary, and solves the wrong problem.\nAdditionally, it introduces a problem when cs_vNodes is held in an owning\nclass, to which invididual CNodeRefs won't have access.\n\nThese should be weak pointers anyway, once vNodes contain shared pointers.\n\nRather than using a refcounting class, use a 3-step process instead.\n\n1. Lock vNodes long enough to snapshot the fields necessary for comparing\n2. Unlock and do the comparison\n3. Re-lock and mark the resulting node for disconnection if it still exists",
      "tree": {
        "sha": "77251487128281ca0b18042bd30828f02a6edf73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77251487128281ca0b18042bd30828f02a6edf73"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cca221fd211f63b338bd90afc505bd4a22a01d5d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cca221fd211f63b338bd90afc505bd4a22a01d5d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cca221fd211f63b338bd90afc505bd4a22a01d5d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cca221fd211f63b338bd90afc505bd4a22a01d5d/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "563f375cdeae3e67a57d8a7187362a4706c33748",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/563f375cdeae3e67a57d8a7187362a4706c33748",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/563f375cdeae3e67a57d8a7187362a4706c33748"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 31,
      "deletions": 53
    },
    "files": [
      {
        "sha": "41e657fba37199b43401d0ba3deab4df54b974d7",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 53,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cca221fd211f63b338bd90afc505bd4a22a01d5d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cca221fd211f63b338bd90afc505bd4a22a01d5d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=cca221fd211f63b338bd90afc505bd4a22a01d5d",
        "patch": "@@ -794,51 +794,22 @@ void SocketSendData(CNode *pnode)\n \n static std::list<CNode*> vNodesDisconnected;\n \n-class CNodeRef {\n-public:\n-    CNodeRef(CNode *pnode) : _pnode(pnode) {\n-        LOCK(cs_vNodes);\n-        _pnode->AddRef();\n-    }\n-\n-    ~CNodeRef() {\n-        LOCK(cs_vNodes);\n-        _pnode->Release();\n-    }\n-\n-    CNode& operator *() const {return *_pnode;};\n-    CNode* operator ->() const {return _pnode;};\n-\n-    CNodeRef& operator =(const CNodeRef& other)\n-    {\n-        if (this != &other) {\n-            LOCK(cs_vNodes);\n-\n-            _pnode->Release();\n-            _pnode = other._pnode;\n-            _pnode->AddRef();\n-        }\n-        return *this;\n-    }\n-\n-    CNodeRef(const CNodeRef& other):\n-        _pnode(other._pnode)\n-    {\n-        LOCK(cs_vNodes);\n-        _pnode->AddRef();\n-    }\n-private:\n-    CNode *_pnode;\n+struct NodeEvictionCandidate\n+{\n+    NodeId id;\n+    int64_t nTimeConnected;\n+    int64_t nMinPingUsecTime;\n+    CAddress addr;\n };\n \n-static bool ReverseCompareNodeMinPingTime(const CNodeRef &a, const CNodeRef &b)\n+static bool ReverseCompareNodeMinPingTime(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)\n {\n-    return a->nMinPingUsecTime > b->nMinPingUsecTime;\n+    return a.nMinPingUsecTime > b.nMinPingUsecTime;\n }\n \n-static bool ReverseCompareNodeTimeConnected(const CNodeRef &a, const CNodeRef &b)\n+static bool ReverseCompareNodeTimeConnected(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)\n {\n-    return a->nTimeConnected > b->nTimeConnected;\n+    return a.nTimeConnected > b.nTimeConnected;\n }\n \n class CompareNetGroupKeyed\n@@ -851,14 +822,14 @@ class CompareNetGroupKeyed\n         GetRandBytes(vchSecretKey.data(), vchSecretKey.size());\n     }\n \n-    bool operator()(const CNodeRef &a, const CNodeRef &b)\n+    bool operator()(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)\n     {\n         std::vector<unsigned char> vchGroupA, vchGroupB;\n         CSHA256 hashA, hashB;\n         std::vector<unsigned char> vchA(32), vchB(32);\n \n-        vchGroupA = a->addr.GetGroup();\n-        vchGroupB = b->addr.GetGroup();\n+        vchGroupA = a.addr.GetGroup();\n+        vchGroupB = b.addr.GetGroup();\n \n         hashA.Write(begin_ptr(vchGroupA), vchGroupA.size());\n         hashB.Write(begin_ptr(vchGroupB), vchGroupB.size());\n@@ -882,7 +853,7 @@ class CompareNetGroupKeyed\n  *   simultaneously better at all of them than honest peers.\n  */\n static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n-    std::vector<CNodeRef> vEvictionCandidates;\n+    std::vector<NodeEvictionCandidate> vEvictionCandidates;\n     {\n         LOCK(cs_vNodes);\n \n@@ -893,7 +864,8 @@ static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n                 continue;\n             if (node->fDisconnect)\n                 continue;\n-            vEvictionCandidates.push_back(CNodeRef(node));\n+            NodeEvictionCandidate candidate = {node->id, node->nTimeConnected, node->nMinPingUsecTime, node->addr};\n+            vEvictionCandidates.push_back(candidate);\n         }\n     }\n \n@@ -928,16 +900,16 @@ static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n     std::vector<unsigned char> naMostConnections;\n     unsigned int nMostConnections = 0;\n     int64_t nMostConnectionsTime = 0;\n-    std::map<std::vector<unsigned char>, std::vector<CNodeRef> > mapAddrCounts;\n-    BOOST_FOREACH(const CNodeRef &node, vEvictionCandidates) {\n-        mapAddrCounts[node->addr.GetGroup()].push_back(node);\n-        int64_t grouptime = mapAddrCounts[node->addr.GetGroup()][0]->nTimeConnected;\n-        size_t groupsize = mapAddrCounts[node->addr.GetGroup()].size();\n+    std::map<std::vector<unsigned char>, std::vector<NodeEvictionCandidate> > mapAddrCounts;\n+    BOOST_FOREACH(const NodeEvictionCandidate &node, vEvictionCandidates) {\n+        mapAddrCounts[node.addr.GetGroup()].push_back(node);\n+        int64_t grouptime = mapAddrCounts[node.addr.GetGroup()][0].nTimeConnected;\n+        size_t groupsize = mapAddrCounts[node.addr.GetGroup()].size();\n \n         if (groupsize > nMostConnections || (groupsize == nMostConnections && grouptime > nMostConnectionsTime)) {\n             nMostConnections = groupsize;\n             nMostConnectionsTime = grouptime;\n-            naMostConnections = node->addr.GetGroup();\n+            naMostConnections = node.addr.GetGroup();\n         }\n     }\n \n@@ -952,9 +924,15 @@ static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n             return false;\n \n     // Disconnect from the network group with the most connections\n-    vEvictionCandidates[0]->fDisconnect = true;\n-\n-    return true;\n+    NodeId evicted = vEvictionCandidates.front().id;\n+    LOCK(cs_vNodes);\n+    for(std::vector<CNode*>::const_iterator it(vNodes.begin()); it != vNodes.end(); ++it) {\n+        if ((*it)->GetId() == evicted) {\n+            (*it)->fDisconnect = true;\n+            return true;\n+        }\n+    }\n+    return false;\n }\n \n static void AcceptConnection(const ListenSocket& hListenSocket) {"
      }
    ]
  },
  {
    "sha": "8b8f87714df8c1e0868e6411c8f09c838ea736ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YjhmODc3MTRkZjhjMWUwODY4ZTY0MTFjOGYwOWM4MzhlYTczNmFi",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-04-18T21:02:43Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-05-10T16:28:22Z"
      },
      "message": "net: make Ban/Unban/ClearBan functionality consistent\n\n- Ban/Unban/ClearBan call uiInterface.BannedListChanged() as necessary\n- Ban/Unban/ClearBan sync to disk if the operation is user-invoked\n- Mark node for disconnection automatically when banning\n- Lock cs_vNodes while setting disconnected\n- Don't spin in a tight loop while setting disconnected",
      "tree": {
        "sha": "292bad34b25e28719d7537877243bf4c76dfc8dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/292bad34b25e28719d7537877243bf4c76dfc8dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b8f87714df8c1e0868e6411c8f09c838ea736ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b8f87714df8c1e0868e6411c8f09c838ea736ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8b8f87714df8c1e0868e6411c8f09c838ea736ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b8f87714df8c1e0868e6411c8f09c838ea736ab/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cca221fd211f63b338bd90afc505bd4a22a01d5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cca221fd211f63b338bd90afc505bd4a22a01d5d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cca221fd211f63b338bd90afc505bd4a22a01d5d"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 33,
      "deletions": 26
    },
    "files": [
      {
        "sha": "3f953a72d5fad0453aec0b66a2f22568309db288",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 12,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b8f87714df8c1e0868e6411c8f09c838ea736ab/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b8f87714df8c1e0868e6411c8f09c838ea736ab/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=8b8f87714df8c1e0868e6411c8f09c838ea736ab",
        "patch": "@@ -463,9 +463,13 @@ bool CNode::setBannedIsDirty;\n \n void CNode::ClearBanned()\n {\n-    LOCK(cs_setBanned);\n-    setBanned.clear();\n-    setBannedIsDirty = true;\n+    {\n+        LOCK(cs_setBanned);\n+        setBanned.clear();\n+        setBannedIsDirty = true;\n+    }\n+    DumpBanlist(); //store banlist to disk\n+    uiInterface.BannedListChanged();\n }\n \n bool CNode::IsBanned(CNetAddr ip)\n@@ -516,11 +520,25 @@ void CNode::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t banti\n     }\n     banEntry.nBanUntil = (sinceUnixEpoch ? 0 : GetTime() )+bantimeoffset;\n \n-    LOCK(cs_setBanned);\n-    if (setBanned[subNet].nBanUntil < banEntry.nBanUntil)\n-        setBanned[subNet] = banEntry;\n-\n-    setBannedIsDirty = true;\n+    {\n+        LOCK(cs_setBanned);\n+        if (setBanned[subNet].nBanUntil < banEntry.nBanUntil) {\n+            setBanned[subNet] = banEntry;\n+            setBannedIsDirty = true;\n+        }\n+        else\n+            return;\n+    }\n+    uiInterface.BannedListChanged();\n+    {\n+        LOCK(cs_vNodes);\n+        BOOST_FOREACH(CNode* pnode, vNodes) {\n+            if (subNet.Match((CNetAddr)pnode->addr))\n+                pnode->fDisconnect = true;\n+        }\n+    }\n+    if(banReason == BanReasonManuallyAdded)\n+        DumpBanlist(); //store banlist to disk immediately if user requested ban\n }\n \n bool CNode::Unban(const CNetAddr &addr) {\n@@ -529,13 +547,15 @@ bool CNode::Unban(const CNetAddr &addr) {\n }\n \n bool CNode::Unban(const CSubNet &subNet) {\n-    LOCK(cs_setBanned);\n-    if (setBanned.erase(subNet))\n     {\n+        LOCK(cs_setBanned);\n+        if (!setBanned.erase(subNet))\n+            return false;\n         setBannedIsDirty = true;\n-        return true;\n     }\n-    return false;\n+    uiInterface.BannedListChanged();\n+    DumpBanlist(); //store banlist to disk immediately\n+    return true;\n }\n \n void CNode::GetBanned(banmap_t &banMap)"
      },
      {
        "sha": "18552f0736acd6c3bb8897129a4d95ebae51f168",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b8f87714df8c1e0868e6411c8f09c838ea736ab/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b8f87714df8c1e0868e6411c8f09c838ea736ab/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=8b8f87714df8c1e0868e6411c8f09c838ea736ab",
        "patch": "@@ -885,15 +885,13 @@ void RPCConsole::banSelectedNode(int bantime)\n     // Get currently selected peer address\n     QString strNode = GUIUtil::getEntryData(ui->peerWidget, 0, PeerTableModel::Address);\n     // Find possible nodes, ban it and clear the selected node\n-    if (CNode *bannedNode = FindNode(strNode.toStdString())) {\n+    if (FindNode(strNode.toStdString())) {\n         std::string nStr = strNode.toStdString();\n         std::string addr;\n         int port = 0;\n         SplitHostPort(nStr, port, addr);\n \n         CNode::Ban(CNetAddr(addr), BanReasonManuallyAdded, bantime);\n-        bannedNode->fDisconnect = true;\n-        DumpBanlist();\n \n         clearSelectedNode();\n         clientModel->getBanTableModel()->refresh();\n@@ -912,7 +910,6 @@ void RPCConsole::unbanSelectedNode()\n     if (possibleSubnet.IsValid())\n     {\n         CNode::Unban(possibleSubnet);\n-        DumpBanlist();\n         clientModel->getBanTableModel()->refresh();\n     }\n }"
      },
      {
        "sha": "e09af89656832ddf493064ab23a418d79b340d22",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b8f87714df8c1e0868e6411c8f09c838ea736ab/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b8f87714df8c1e0868e6411c8f09c838ea736ab/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=8b8f87714df8c1e0868e6411c8f09c838ea736ab",
        "patch": "@@ -565,20 +565,12 @@ UniValue setban(const UniValue& params, bool fHelp)\n             absolute = true;\n \n         isSubnet ? CNode::Ban(subNet, BanReasonManuallyAdded, banTime, absolute) : CNode::Ban(netAddr, BanReasonManuallyAdded, banTime, absolute);\n-\n-        //disconnect possible nodes\n-        while(CNode *bannedNode = (isSubnet ? FindNode(subNet) : FindNode(netAddr)))\n-            bannedNode->fDisconnect = true;\n     }\n     else if(strCommand == \"remove\")\n     {\n         if (!( isSubnet ? CNode::Unban(subNet) : CNode::Unban(netAddr) ))\n             throw JSONRPCError(RPC_MISC_ERROR, \"Error: Unban failed\");\n     }\n-\n-    DumpBanlist(); //store banlist to disk\n-    uiInterface.BannedListChanged();\n-\n     return NullUniValue;\n }\n \n@@ -624,8 +616,6 @@ UniValue clearbanned(const UniValue& params, bool fHelp)\n                             );\n \n     CNode::ClearBanned();\n-    DumpBanlist(); //store banlist to disk\n-    uiInterface.BannedListChanged();\n \n     return NullUniValue;\n }"
      }
    ]
  },
  {
    "sha": "e9ed6206b32a05547dfa4bfa1e090044ddad7c82",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOWVkNjIwNmIzMmEwNTU0N2RmYTRiZmExZTA5MDA0NGRkYWQ3Yzgy",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-04-18T21:59:31Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-05-10T16:28:22Z"
      },
      "message": "net: No need to export DumpBanlist",
      "tree": {
        "sha": "571b85e0f52fa333692c780ff347a51402a9cc12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/571b85e0f52fa333692c780ff347a51402a9cc12"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9ed6206b32a05547dfa4bfa1e090044ddad7c82",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9ed6206b32a05547dfa4bfa1e090044ddad7c82",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e9ed6206b32a05547dfa4bfa1e090044ddad7c82",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9ed6206b32a05547dfa4bfa1e090044ddad7c82/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b8f87714df8c1e0868e6411c8f09c838ea736ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b8f87714df8c1e0868e6411c8f09c838ea736ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b8f87714df8c1e0868e6411c8f09c838ea736ab"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 20,
      "deletions": 22
    },
    "files": [
      {
        "sha": "f5aa6abde85d9caf8cace36b6587df8f4f45f18d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9ed6206b32a05547dfa4bfa1e090044ddad7c82/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9ed6206b32a05547dfa4bfa1e090044ddad7c82/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=e9ed6206b32a05547dfa4bfa1e090044ddad7c82",
        "patch": "@@ -422,6 +422,26 @@ CNode* ConnectNode(CAddress addrConnect, const char *pszDest)\n     return NULL;\n }\n \n+static void DumpBanlist()\n+{\n+    CNode::SweepBanned(); // clean unused entries (if bantime has expired)\n+\n+    if (!CNode::BannedSetIsDirty())\n+        return;\n+\n+    int64_t nStart = GetTimeMillis();\n+\n+    CBanDB bandb;\n+    banmap_t banmap;\n+    CNode::SetBannedSetDirty(false);\n+    CNode::GetBanned(banmap);\n+    if (!bandb.Write(banmap))\n+        CNode::SetBannedSetDirty(true);\n+\n+    LogPrint(\"net\", \"Flushed %d banned node ips/subnets to banlist.dat  %dms\\n\",\n+        banmap.size(), GetTimeMillis() - nStart);\n+}\n+\n void CNode::CloseSocketDisconnect()\n {\n     fDisconnect = true;\n@@ -2607,26 +2627,6 @@ bool CBanDB::Read(banmap_t& banSet)\n     return true;\n }\n \n-void DumpBanlist()\n-{\n-    CNode::SweepBanned(); // clean unused entries (if bantime has expired)\n-\n-    if (!CNode::BannedSetIsDirty())\n-        return;\n-\n-    int64_t nStart = GetTimeMillis();\n-\n-    CBanDB bandb;\n-    banmap_t banmap;\n-    CNode::SetBannedSetDirty(false);\n-    CNode::GetBanned(banmap);\n-    if (!bandb.Write(banmap))\n-        CNode::SetBannedSetDirty(true);\n-\n-    LogPrint(\"net\", \"Flushed %d banned node ips/subnets to banlist.dat  %dms\\n\",\n-        banmap.size(), GetTimeMillis() - nStart);\n-}\n-\n int64_t PoissonNextSend(int64_t nNow, int average_interval_seconds) {\n     return nNow + (int64_t)(log1p(GetRand(1ULL << 48) * -0.0000000000000035527136788 /* -1/2^48 */) * average_interval_seconds * -1000000.0 + 0.5);\n }"
      },
      {
        "sha": "167dc36a53ad500269f2d94d27301d620fc1c486",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9ed6206b32a05547dfa4bfa1e090044ddad7c82/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9ed6206b32a05547dfa4bfa1e090044ddad7c82/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=e9ed6206b32a05547dfa4bfa1e090044ddad7c82",
        "patch": "@@ -807,8 +807,6 @@ class CBanDB\n     bool Read(banmap_t& banSet);\n };\n \n-void DumpBanlist();\n-\n /** Return a timestamp in the future (in microseconds) for exponentially distributed events. */\n int64_t PoissonNextSend(int64_t nNow, int average_interval_seconds);\n "
      }
    ]
  },
  {
    "sha": "5d5e7a097a87e0fe6efb5e2d622daadc10c2ad79",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDVlN2EwOTdhODdlMGZlNmVmYjVlMmQ2MjJkYWFkYzEwYzJhZDc5",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-04-16T18:46:14Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-05-10T16:28:23Z"
      },
      "message": "net: No need to export ConnectNode",
      "tree": {
        "sha": "adaab809bf6c65ded537f8291a717bbb8cafd149",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/adaab809bf6c65ded537f8291a717bbb8cafd149"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d5e7a097a87e0fe6efb5e2d622daadc10c2ad79",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d5e7a097a87e0fe6efb5e2d622daadc10c2ad79",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d5e7a097a87e0fe6efb5e2d622daadc10c2ad79",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d5e7a097a87e0fe6efb5e2d622daadc10c2ad79/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e9ed6206b32a05547dfa4bfa1e090044ddad7c82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9ed6206b32a05547dfa4bfa1e090044ddad7c82",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e9ed6206b32a05547dfa4bfa1e090044ddad7c82"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "70df27573ee7956f4a0bc53434e64a1ceeda9b0e",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d5e7a097a87e0fe6efb5e2d622daadc10c2ad79/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d5e7a097a87e0fe6efb5e2d622daadc10c2ad79/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=5d5e7a097a87e0fe6efb5e2d622daadc10c2ad79",
        "patch": "@@ -83,7 +83,6 @@ CNode* FindNode(const CNetAddr& ip);\n CNode* FindNode(const CSubNet& subNet);\n CNode* FindNode(const std::string& addrName);\n CNode* FindNode(const CService& ip);\n-CNode* ConnectNode(CAddress addrConnect, const char *pszDest = NULL);\n bool OpenNetworkConnection(const CAddress& addrConnect, CSemaphoreGrant *grantOutbound = NULL, const char *strDest = NULL, bool fOneShot = false);\n void MapPort(bool fUseUPnP);\n unsigned short GetListenPort();"
      }
    ]
  }
]