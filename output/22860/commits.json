[
  {
    "sha": "fa1b08eb1413d547b5e322f20e6907b2f827a162",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTFiMDhlYjE0MTNkNTQ3YjVlMzIyZjIwZTY5MDdiMmY4MjdhMTYy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-09-02T07:42:52Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-09-02T07:40:07Z"
      },
      "message": "test: Always clear reject reason in IsStandard tx test",
      "tree": {
        "sha": "368501116279af56b797b85508ac12889938f383",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/368501116279af56b797b85508ac12889938f383"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa1b08eb1413d547b5e322f20e6907b2f827a162",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhyWAv/WTgmsngY11JNYi7Ap4EqM+wW8VGti3HmI2ufGNPjLnRjgmZGeAqkcsab\nmivjhK3B7U8iOrX1cYIuwXrCyFn4EdZ2CnaIxNy1VOc3AVUZ7PatvrXknlDyB5Fn\nGbWUDti74p1ZI33TvdpJYZh4TNhuwi2uJLfE0kTwV4BFdaNB1PVLyiG86jJnwLfj\nWCAjnsAqWJBEYSGcsuwlElAJ9Zqiyq6R/4w9+Jor7JLCyW4TYVV6pt8Te9VdOdE8\nYEjr9x+fM6svcYFRislTIFGi0RcGMQCZT4iCQpA4R6TnGwVaLAD/vUpbwFoOBIxL\n5EkKY8b2II6dZvd5gmD/+bsbAemoe/UUqaQECcTw19Z4RVverWrqR6soGwG3N3gM\npwo9uSb3miVtHf66NaRr7rmf2gcmzoVXBHlFkyAlWlxnrr6quLFfJEkrZGsmhS5L\nUerdosxdPgoVfJb2Kit0mEAvgr1uFonUJrCHNrjWfNHF+hKRU8hFU/9AYJK7dVfb\nmxzdSfWI\n=xI7C\n-----END PGP SIGNATURE-----",
        "payload": "tree 368501116279af56b797b85508ac12889938f383\nparent 6bf706a0560df0794f9fd6550e4792e439162dc1\nauthor MarcoFalke <falke.marco@gmail.com> 1630568572 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1630568407 +0200\n\ntest: Always clear reject reason in IsStandard tx test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1b08eb1413d547b5e322f20e6907b2f827a162",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa1b08eb1413d547b5e322f20e6907b2f827a162",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1b08eb1413d547b5e322f20e6907b2f827a162/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6bf706a0560df0794f9fd6550e4792e439162dc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bf706a0560df0794f9fd6550e4792e439162dc1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6bf706a0560df0794f9fd6550e4792e439162dc1"
      }
    ],
    "stats": {
      "total": 120,
      "additions": 49,
      "deletions": 71
    },
    "files": [
      {
        "sha": "24029ea02eb0c021d4deb587df3fdbee54a96dd7",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 71,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1b08eb1413d547b5e322f20e6907b2f827a162/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1b08eb1413d547b5e322f20e6907b2f827a162/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=fa1b08eb1413d547b5e322f20e6907b2f827a162",
        "patch": "@@ -765,130 +765,116 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     key.MakeNewKey(true);\n     t.vout[0].scriptPubKey = GetScriptForDestination(PKHash(key.GetPubKey()));\n \n-    std::string reason;\n-    BOOST_CHECK(IsStandardTx(CTransaction(t), reason));\n+    constexpr auto CheckIsStandard = [](const auto& t) {\n+        std::string reason;\n+        BOOST_CHECK(IsStandardTx(CTransaction(t), reason));\n+        BOOST_CHECK(reason.empty());\n+    };\n+    constexpr auto CheckIsNotStandard = [](const auto& t, const std::string& reason_in) {\n+        std::string reason;\n+        BOOST_CHECK(!IsStandardTx(CTransaction(t), reason));\n+        BOOST_CHECK_EQUAL(reason_in, reason);\n+    };\n+\n+    CheckIsStandard(t);\n \n     // Check dust with default relay fee:\n-    CAmount nDustThreshold = 182 * dustRelayFee.GetFeePerK()/1000;\n+    CAmount nDustThreshold = 182 * dustRelayFee.GetFeePerK() / 1000;\n     BOOST_CHECK_EQUAL(nDustThreshold, 546);\n     // dust:\n     t.vout[0].nValue = nDustThreshold - 1;\n-    reason.clear();\n-    BOOST_CHECK(!IsStandardTx(CTransaction(t), reason));\n-    BOOST_CHECK_EQUAL(reason, \"dust\");\n+    CheckIsNotStandard(t, \"dust\");\n     // not dust:\n     t.vout[0].nValue = nDustThreshold;\n-    BOOST_CHECK(IsStandardTx(CTransaction(t), reason));\n+    CheckIsStandard(t);\n \n     // Disallowed nVersion\n     t.nVersion = -1;\n-    reason.clear();\n-    BOOST_CHECK(!IsStandardTx(CTransaction(t), reason));\n-    BOOST_CHECK_EQUAL(reason, \"version\");\n+    CheckIsNotStandard(t, \"version\");\n \n     t.nVersion = 0;\n-    reason.clear();\n-    BOOST_CHECK(!IsStandardTx(CTransaction(t), reason));\n-    BOOST_CHECK_EQUAL(reason, \"version\");\n+    CheckIsNotStandard(t, \"version\");\n \n     t.nVersion = 3;\n-    reason.clear();\n-    BOOST_CHECK(!IsStandardTx(CTransaction(t), reason));\n-    BOOST_CHECK_EQUAL(reason, \"version\");\n+    CheckIsNotStandard(t, \"version\");\n \n     // Allowed nVersion\n     t.nVersion = 1;\n-    BOOST_CHECK(IsStandardTx(CTransaction(t), reason));\n+    CheckIsStandard(t);\n \n     t.nVersion = 2;\n-    BOOST_CHECK(IsStandardTx(CTransaction(t), reason));\n+    CheckIsStandard(t);\n \n     // Check dust with odd relay fee to verify rounding:\n     // nDustThreshold = 182 * 3702 / 1000\n     dustRelayFee = CFeeRate(3702);\n     // dust:\n     t.vout[0].nValue = 673 - 1;\n-    reason.clear();\n-    BOOST_CHECK(!IsStandardTx(CTransaction(t), reason));\n-    BOOST_CHECK_EQUAL(reason, \"dust\");\n+    CheckIsNotStandard(t, \"dust\");\n     // not dust:\n     t.vout[0].nValue = 673;\n-    BOOST_CHECK(IsStandardTx(CTransaction(t), reason));\n+    CheckIsStandard(t);\n     dustRelayFee = CFeeRate(DUST_RELAY_TX_FEE);\n \n     t.vout[0].scriptPubKey = CScript() << OP_1;\n-    reason.clear();\n-    BOOST_CHECK(!IsStandardTx(CTransaction(t), reason));\n-    BOOST_CHECK_EQUAL(reason, \"scriptpubkey\");\n+    CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // MAX_OP_RETURN_RELAY-byte TxoutType::NULL_DATA (standard)\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY, t.vout[0].scriptPubKey.size());\n-    BOOST_CHECK(IsStandardTx(CTransaction(t), reason));\n+    CheckIsStandard(t);\n \n     // MAX_OP_RETURN_RELAY+1-byte TxoutType::NULL_DATA (non-standard)\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY + 1, t.vout[0].scriptPubKey.size());\n-    reason.clear();\n-    BOOST_CHECK(!IsStandardTx(CTransaction(t), reason));\n-    BOOST_CHECK_EQUAL(reason, \"scriptpubkey\");\n+    CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // Data payload can be encoded in any way...\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"\");\n-    BOOST_CHECK(IsStandardTx(CTransaction(t), reason));\n+    CheckIsStandard(t);\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"00\") << ParseHex(\"01\");\n-    BOOST_CHECK(IsStandardTx(CTransaction(t), reason));\n+    CheckIsStandard(t);\n     // OP_RESERVED *is* considered to be a PUSHDATA type opcode by IsPushOnly()!\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RESERVED << -1 << 0 << ParseHex(\"01\") << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16;\n-    BOOST_CHECK(IsStandardTx(CTransaction(t), reason));\n+    CheckIsStandard(t);\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << 0 << ParseHex(\"01\") << 2 << ParseHex(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n-    BOOST_CHECK(IsStandardTx(CTransaction(t), reason));\n+    CheckIsStandard(t);\n \n     // ...so long as it only contains PUSHDATA's\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RETURN;\n-    reason.clear();\n-    BOOST_CHECK(!IsStandardTx(CTransaction(t), reason));\n-    BOOST_CHECK_EQUAL(reason, \"scriptpubkey\");\n+    CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // TxoutType::NULL_DATA w/o PUSHDATA\n     t.vout.resize(1);\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN;\n-    BOOST_CHECK(IsStandardTx(CTransaction(t), reason));\n+    CheckIsStandard(t);\n \n     // Only one TxoutType::NULL_DATA permitted in all cases\n     t.vout.resize(2);\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n     t.vout[0].nValue = 0;\n     t.vout[1].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n     t.vout[1].nValue = 0;\n-    reason.clear();\n-    BOOST_CHECK(!IsStandardTx(CTransaction(t), reason));\n-    BOOST_CHECK_EQUAL(reason, \"multi-op-return\");\n+    CheckIsNotStandard(t, \"multi-op-return\");\n \n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n     t.vout[1].scriptPubKey = CScript() << OP_RETURN;\n-    reason.clear();\n-    BOOST_CHECK(!IsStandardTx(CTransaction(t), reason));\n-    BOOST_CHECK_EQUAL(reason, \"multi-op-return\");\n+    CheckIsNotStandard(t, \"multi-op-return\");\n \n     t.vout[0].scriptPubKey = CScript() << OP_RETURN;\n     t.vout[1].scriptPubKey = CScript() << OP_RETURN;\n-    reason.clear();\n-    BOOST_CHECK(!IsStandardTx(CTransaction(t), reason));\n-    BOOST_CHECK_EQUAL(reason, \"multi-op-return\");\n+    CheckIsNotStandard(t, \"multi-op-return\");\n \n     // Check large scriptSig (non-standard if size is >1650 bytes)\n     t.vout.resize(1);\n     t.vout[0].nValue = MAX_MONEY;\n     t.vout[0].scriptPubKey = GetScriptForDestination(PKHash(key.GetPubKey()));\n     // OP_PUSHDATA2 with len (3 bytes) + data (1647 bytes) = 1650 bytes\n     t.vin[0].scriptSig = CScript() << std::vector<unsigned char>(1647, 0); // 1650\n-    BOOST_CHECK(IsStandardTx(CTransaction(t), reason));\n+    CheckIsStandard(t);\n \n     t.vin[0].scriptSig = CScript() << std::vector<unsigned char>(1648, 0); // 1651\n-    reason.clear();\n-    BOOST_CHECK(!IsStandardTx(CTransaction(t), reason));\n-    BOOST_CHECK_EQUAL(reason, \"scriptsig-size\");\n+    CheckIsNotStandard(t, \"scriptsig-size\");\n \n     // Check scriptSig format (non-standard if there are any other ops than just PUSHs)\n     t.vin[0].scriptSig = CScript()\n@@ -897,7 +883,7 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n         << std::vector<unsigned char>(235, 0)     // OP_PUSHDATA1 x [...x bytes...]\n         << std::vector<unsigned char>(1234, 0)    // OP_PUSHDATA2 x [...x bytes...]\n         << OP_9;\n-    BOOST_CHECK(IsStandardTx(CTransaction(t), reason));\n+    CheckIsStandard(t);\n \n     const std::vector<unsigned char> non_push_ops = { // arbitrary set of non-push operations\n         OP_NOP, OP_VERIFY, OP_IF, OP_ROT, OP_3DUP, OP_SIZE, OP_EQUAL, OP_ADD, OP_SUB,\n@@ -917,11 +903,10 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n         // replace current push-op with each non-push-op\n         for (auto op : non_push_ops) {\n             t.vin[0].scriptSig[index] = op;\n-            BOOST_CHECK(!IsStandardTx(CTransaction(t), reason));\n-            BOOST_CHECK_EQUAL(reason, \"scriptsig-not-pushonly\");\n+            CheckIsNotStandard(t, \"scriptsig-not-pushonly\");\n         }\n         t.vin[0].scriptSig[index] = orig_op; // restore op\n-        BOOST_CHECK(IsStandardTx(CTransaction(t), reason));\n+        CheckIsStandard(t);\n     }\n \n     // Check tx-size (non-standard if transaction weight is > MAX_STANDARD_TX_WEIGHT)\n@@ -934,53 +919,46 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     //                      ===============================\n     //                                total: 400000 vbytes\n     BOOST_CHECK_EQUAL(GetTransactionWeight(CTransaction(t)), 400000);\n-    BOOST_CHECK(IsStandardTx(CTransaction(t), reason));\n+    CheckIsStandard(t);\n \n     // increase output size by one byte, so we end up with 400004 vbytes\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << std::vector<unsigned char>(20, 0); // output size: 31 bytes\n     BOOST_CHECK_EQUAL(GetTransactionWeight(CTransaction(t)), 400004);\n-    reason.clear();\n-    BOOST_CHECK(!IsStandardTx(CTransaction(t), reason));\n-    BOOST_CHECK_EQUAL(reason, \"tx-size\");\n+    CheckIsNotStandard(t, \"tx-size\");\n \n     // Check bare multisig (standard if policy flag fIsBareMultisigStd is set)\n     fIsBareMultisigStd = true;\n     t.vout[0].scriptPubKey = GetScriptForMultisig(1, {key.GetPubKey()}); // simple 1-of-1\n     t.vin.resize(1);\n     t.vin[0].scriptSig = CScript() << std::vector<unsigned char>(65, 0);\n-    BOOST_CHECK(IsStandardTx(CTransaction(t), reason));\n+    CheckIsStandard(t);\n \n     fIsBareMultisigStd = false;\n-    reason.clear();\n-    BOOST_CHECK(!IsStandardTx(CTransaction(t), reason));\n-    BOOST_CHECK_EQUAL(reason, \"bare-multisig\");\n+    CheckIsNotStandard(t, \"bare-multisig\");\n     fIsBareMultisigStd = DEFAULT_PERMIT_BAREMULTISIG;\n \n     // Check P2WPKH outputs dust threshold\n     t.vout[0].scriptPubKey = CScript() << OP_0 << ParseHex(\"ffffffffffffffffffffffffffffffffffffffff\");\n     t.vout[0].nValue = 294;\n-    BOOST_CHECK(IsStandardTx(CTransaction(t), reason));\n+    CheckIsStandard(t);\n     t.vout[0].nValue = 293;\n-    BOOST_CHECK(!IsStandardTx(CTransaction(t), reason));\n-    BOOST_CHECK_EQUAL(reason, \"dust\");\n+    CheckIsNotStandard(t, \"dust\");\n \n     // Check P2WSH outputs dust threshold\n     t.vout[0].scriptPubKey = CScript() << OP_0 << ParseHex(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n     t.vout[0].nValue = 330;\n-    BOOST_CHECK(IsStandardTx(CTransaction(t), reason));\n+    CheckIsStandard(t);\n     t.vout[0].nValue = 329;\n-    BOOST_CHECK(!IsStandardTx(CTransaction(t), reason));\n-    BOOST_CHECK_EQUAL(reason, \"dust\");\n+    CheckIsNotStandard(t, \"dust\");\n \n     // Check future Witness Program versions dust threshold\n     for (int op = OP_2; op <= OP_16; op += 1) {\n         t.vout[0].scriptPubKey = CScript() << (opcodetype)op << ParseHex(\"ffff\");\n         t.vout[0].nValue = 240;\n-        BOOST_CHECK(IsStandardTx(CTransaction(t), reason));\n+        CheckIsStandard(t);\n \n         t.vout[0].nValue = 239;\n-        BOOST_CHECK(!IsStandardTx(CTransaction(t), reason));\n-        BOOST_CHECK_EQUAL(reason, \"dust\");\n+        CheckIsNotStandard(t, \"dust\");\n     }\n }\n "
      }
    ]
  }
]