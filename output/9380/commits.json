[
  {
    "sha": "daec955fd68bd0da036a5b446b54ffb01108adcd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYWVjOTU1ZmQ2OGJkMGRhMDM2YTViNDQ2YjU0ZmZiMDExMDhhZGNk",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-12-13T16:51:51Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-04T18:24:19Z"
      },
      "message": "Introduce -blockmintxfee",
      "tree": {
        "sha": "bb6fd4c8f21fa9f4399409dd463d27485ad4fc52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb6fd4c8f21fa9f4399409dd463d27485ad4fc52"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/daec955fd68bd0da036a5b446b54ffb01108adcd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/daec955fd68bd0da036a5b446b54ffb01108adcd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/daec955fd68bd0da036a5b446b54ffb01108adcd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/daec955fd68bd0da036a5b446b54ffb01108adcd/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "123ea7362478cfe801341e8fecade030a903ad3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/123ea7362478cfe801341e8fecade030a903ad3d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/123ea7362478cfe801341e8fecade030a903ad3d"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 21,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b0c045da1524416e6635b828bd5acde5558254c2",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/daec955fd68bd0da036a5b446b54ffb01108adcd/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/daec955fd68bd0da036a5b446b54ffb01108adcd/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=daec955fd68bd0da036a5b446b54ffb01108adcd",
        "patch": "@@ -476,6 +476,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-blockmaxweight=<n>\", strprintf(_(\"Set maximum BIP141 block weight (default: %d)\"), DEFAULT_BLOCK_MAX_WEIGHT));\n     strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", strprintf(_(\"Set maximum block size in bytes (default: %d)\"), DEFAULT_BLOCK_MAX_SIZE));\n     strUsage += HelpMessageOpt(\"-blockprioritysize=<n>\", strprintf(_(\"Set maximum size of high-priority/low-fee transactions in bytes (default: %d)\"), DEFAULT_BLOCK_PRIORITY_SIZE));\n+    strUsage += HelpMessageOpt(\"-blockmintxfee=<amt>\", strprintf(_(\"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)\"), CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-blockversion=<n>\", \"Override block version to test forking scenarios\");\n \n@@ -970,6 +971,15 @@ bool AppInitParameterInteraction()\n         ::minRelayTxFee = CFeeRate(n);\n     }\n \n+    // Sanity check argument for min fee for including tx in block\n+    // TODO: Harmonize which arguments need sanity checking and where that happens\n+    if (IsArgSet(\"-blockmintxfee\"))\n+    {\n+        CAmount n = 0;\n+        if (!ParseMoney(GetArg(\"-blockmintxfee\", \"\"), n))\n+            return InitError(AmountErrMsg(\"blockmintxfee\", GetArg(\"-blockmintxfee\", \"\")));\n+    }\n+\n     fRequireStandard = !GetBoolArg(\"-acceptnonstdtxn\", !chainparams.RequireStandard());\n     if (chainparams.RequireStandard() && !fRequireStandard)\n         return InitError(strprintf(\"acceptnonstdtxn is not currently supported for %s chain\", chainparams.NetworkIDString()));"
      },
      {
        "sha": "acded9416891355b114cb47124be29804c531945",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/daec955fd68bd0da036a5b446b54ffb01108adcd/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/daec955fd68bd0da036a5b446b54ffb01108adcd/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=daec955fd68bd0da036a5b446b54ffb01108adcd",
        "patch": "@@ -95,12 +95,18 @@ BlockAssembler::BlockAssembler(const CChainParams& _chainparams)\n             nBlockMaxWeight = nBlockMaxSize * WITNESS_SCALE_FACTOR;\n         }\n     }\n+    if (IsArgSet(\"-blockmintxfee\")) {\n+        CAmount n = 0;\n+        ParseMoney(GetArg(\"-blockmintxfee\", \"\"), n);\n+        blockMinFeeRate = CFeeRate(n);\n+    } else {\n+        blockMinFeeRate = CFeeRate(DEFAULT_BLOCK_MIN_TX_FEE);\n+    }\n \n     // Limit weight to between 4K and MAX_BLOCK_WEIGHT-4K for sanity:\n     nBlockMaxWeight = std::max((unsigned int)4000, std::min((unsigned int)(MAX_BLOCK_WEIGHT-4000), nBlockMaxWeight));\n     // Limit size to between 1K and MAX_BLOCK_SERIALIZED_SIZE-1K for sanity:\n     nBlockMaxSize = std::max((unsigned int)1000, std::min((unsigned int)(MAX_BLOCK_SERIALIZED_SIZE-1000), nBlockMaxSize));\n-\n     // Whether we need to account for byte usage (in addition to weight usage)\n     fNeedSizeAccounting = (nBlockMaxSize < MAX_BLOCK_SERIALIZED_SIZE-1000);\n }\n@@ -460,7 +466,7 @@ void BlockAssembler::addPackageTxs()\n             packageSigOpsCost = modit->nSigOpCostWithAncestors;\n         }\n \n-        if (packageFees < ::minRelayTxFee.GetFee(packageSize)) {\n+        if (packageFees < blockMinFeeRate.GetFee(packageSize)) {\n             // Everything else we might consider has a lower fee rate\n             return;\n         }"
      },
      {
        "sha": "3ba92b16b8e03f539dc7bcff84b0a7d8cc0de4e2",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/daec955fd68bd0da036a5b446b54ffb01108adcd/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/daec955fd68bd0da036a5b446b54ffb01108adcd/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=daec955fd68bd0da036a5b446b54ffb01108adcd",
        "patch": "@@ -143,6 +143,7 @@ class BlockAssembler\n     bool fIncludeWitness;\n     unsigned int nBlockMaxWeight, nBlockMaxSize;\n     bool fNeedSizeAccounting;\n+    CFeeRate blockMinFeeRate;\n \n     // Information on the current status of the block\n     uint64_t nBlockWeight;"
      },
      {
        "sha": "5c6a7b1865bb8094dafcf8a77a1ec6f2bc38bf96",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/daec955fd68bd0da036a5b446b54ffb01108adcd/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/daec955fd68bd0da036a5b446b54ffb01108adcd/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=daec955fd68bd0da036a5b446b54ffb01108adcd",
        "patch": "@@ -20,6 +20,8 @@ static const unsigned int DEFAULT_BLOCK_MAX_SIZE = 750000;\n static const unsigned int DEFAULT_BLOCK_PRIORITY_SIZE = 0;\n /** Default for -blockmaxweight, which controls the range of block weights the mining code will create **/\n static const unsigned int DEFAULT_BLOCK_MAX_WEIGHT = 3000000;\n+/** Default for -blockmintxfee, which sets the minimum feerate for a transaction in blocks created by mining code **/\n+static const unsigned int DEFAULT_BLOCK_MIN_TX_FEE = 1000;\n /** The maximum weight for transactions we're willing to relay/mine */\n static const unsigned int MAX_STANDARD_TX_WEIGHT = 400000;\n /** Maximum number of signature check operations in an IsStandard() P2SH script */"
      }
    ]
  },
  {
    "sha": "7b1add3c28aae8caf2e1517f15cd953eacbb4931",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YjFhZGQzYzI4YWFlOGNhZjJlMTUxN2YxNWNkOTUzZWFjYmI0OTMx",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-12-13T18:43:35Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-16T13:39:03Z"
      },
      "message": "Introduce -incrementalrelayfee",
      "tree": {
        "sha": "275ed3876e984eaa5ffa35ac2780dfc6fb420b78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/275ed3876e984eaa5ffa35ac2780dfc6fb420b78"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b1add3c28aae8caf2e1517f15cd953eacbb4931",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b1add3c28aae8caf2e1517f15cd953eacbb4931",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7b1add3c28aae8caf2e1517f15cd953eacbb4931",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b1add3c28aae8caf2e1517f15cd953eacbb4931/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "daec955fd68bd0da036a5b446b54ffb01108adcd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/daec955fd68bd0da036a5b446b54ffb01108adcd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/daec955fd68bd0da036a5b446b54ffb01108adcd"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 24,
      "deletions": 11
    },
    "files": [
      {
        "sha": "f3a3a1d276a89b22bdc894e98ca63bf181ae86d7",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 1,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b1add3c28aae8caf2e1517f15cd953eacbb4931/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b1add3c28aae8caf2e1517f15cd953eacbb4931/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7b1add3c28aae8caf2e1517f15cd953eacbb4931",
        "patch": "@@ -465,8 +465,10 @@ std::string HelpMessage(HelpMessageMode mode)\n     AppendParamsHelpMessages(strUsage, showDebug);\n \n     strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n-    if (showDebug)\n+    if (showDebug) {\n         strUsage += HelpMessageOpt(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !Params(CBaseChainParams::TESTNET).RequireStandard()));\n+        strUsage += HelpMessageOpt(\"-incrementalrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define cost of relay, used for mempool limiting and BIP 125 replacement. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_INCREMENTAL_RELAY_FEE)));\n+    }\n     strUsage += HelpMessageOpt(\"-bytespersigop\", strprintf(_(\"Equivalent bytes per sigop in transactions for relay and mining (default: %u)\"), DEFAULT_BYTES_PER_SIGOP));\n     strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), DEFAULT_ACCEPT_DATACARRIER));\n     strUsage += HelpMessageOpt(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY));\n@@ -923,6 +925,15 @@ bool AppInitParameterInteraction()\n     int64_t nMempoolSizeMin = GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n     if (nMempoolSizeMax < 0 || nMempoolSizeMax < nMempoolSizeMin)\n         return InitError(strprintf(_(\"-maxmempool must be at least %d MB\"), std::ceil(nMempoolSizeMin / 1000000.0)));\n+    // incremental relay fee sets the minimimum feerate increase necessary for BIP 125 replacement in the mempool\n+    // and the amount the mempool min fee increases above the feerate of txs evicted due to mempool limiting.\n+    if (IsArgSet(\"-incrementalrelayfee\"))\n+    {\n+        CAmount n = 0;\n+        if (!ParseMoney(GetArg(\"-incrementalrelayfee\", \"\"), n))\n+            return InitError(AmountErrMsg(\"incrementalrelayfee\", GetArg(\"-incrementalrelayfee\", \"\")));\n+        incrementalRelayFee = CFeeRate(n);\n+    }\n \n     // -par=0 means autodetect, but nScriptCheckThreads==0 means no concurrency\n     nScriptCheckThreads = GetArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS);\n@@ -969,6 +980,10 @@ bool AppInitParameterInteraction()\n             return InitError(AmountErrMsg(\"minrelaytxfee\", GetArg(\"-minrelaytxfee\", \"\")));\n         // High fee check is done afterward in CWallet::ParameterInteraction()\n         ::minRelayTxFee = CFeeRate(n);\n+    } else if (incrementalRelayFee > ::minRelayTxFee) {\n+        // Allow only setting incrementalRelayFee to control both\n+        ::minRelayTxFee = incrementalRelayFee;\n+        LogPrintf(\"Increasing minrelaytxfee to %s to match incrementalrelayfee\\n\",::minRelayTxFee.ToString());\n     }\n \n     // Sanity check argument for min fee for including tx in block"
      },
      {
        "sha": "4dacd6b545d569769228aff93c477ebaa1e257fb",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b1add3c28aae8caf2e1517f15cd953eacbb4931/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b1add3c28aae8caf2e1517f15cd953eacbb4931/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=7b1add3c28aae8caf2e1517f15cd953eacbb4931",
        "patch": "@@ -206,6 +206,7 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n+CFeeRate incrementalRelayFee = CFeeRate(DEFAULT_INCREMENTAL_RELAY_FEE);\n unsigned int nBytesPerSigOp = DEFAULT_BYTES_PER_SIGOP;\n \n int64_t GetVirtualTransactionSize(int64_t nWeight, int64_t nSigOpCost)"
      },
      {
        "sha": "039122a59e7628fc0f7650657fea856f0ccfe116",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b1add3c28aae8caf2e1517f15cd953eacbb4931/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b1add3c28aae8caf2e1517f15cd953eacbb4931/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=7b1add3c28aae8caf2e1517f15cd953eacbb4931",
        "patch": "@@ -30,6 +30,8 @@ static const unsigned int MAX_P2SH_SIGOPS = 15;\n static const unsigned int MAX_STANDARD_TX_SIGOPS_COST = MAX_BLOCK_SIGOPS_COST/5;\n /** Default for -maxmempool, maximum megabytes of mempool memory usage */\n static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;\n+/** Default for -incrementalrelayfee, which sets the minimum feerate increase for mempool limiting or BIP 125 replacement **/\n+static const unsigned int DEFAULT_INCREMENTAL_RELAY_FEE = 1000;\n /** Default for -bytespersigop */\n static const unsigned int DEFAULT_BYTES_PER_SIGOP = 20;\n /** The maximum number of witness stack items in a standard P2WSH script */\n@@ -85,6 +87,7 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n      */\n bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n \n+extern CFeeRate incrementalRelayFee;\n extern unsigned int nBytesPerSigOp;\n \n /** Compute the virtual transaction size (weight reinterpreted as bytes). */"
      },
      {
        "sha": "c6eaf661da2b9c1abc2616ae3cfeb93338a48605",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b1add3c28aae8caf2e1517f15cd953eacbb4931/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b1add3c28aae8caf2e1517f15cd953eacbb4931/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=7b1add3c28aae8caf2e1517f15cd953eacbb4931",
        "patch": "@@ -359,7 +359,6 @@ CTxMemPool::CTxMemPool(const CFeeRate& _minReasonableRelayFee) :\n     nCheckFrequency = 0;\n \n     minerPolicyEstimator = new CBlockPolicyEstimator(_minReasonableRelayFee);\n-    minReasonableRelayFee = _minReasonableRelayFee;\n }\n \n CTxMemPool::~CTxMemPool()\n@@ -1077,12 +1076,12 @@ CFeeRate CTxMemPool::GetMinFee(size_t sizelimit) const {\n         rollingMinimumFeeRate = rollingMinimumFeeRate / pow(2.0, (time - lastRollingFeeUpdate) / halflife);\n         lastRollingFeeUpdate = time;\n \n-        if (rollingMinimumFeeRate < (double)minReasonableRelayFee.GetFeePerK() / 2) {\n+        if (rollingMinimumFeeRate < (double)incrementalRelayFee.GetFeePerK() / 2) {\n             rollingMinimumFeeRate = 0;\n             return CFeeRate(0);\n         }\n     }\n-    return std::max(CFeeRate(rollingMinimumFeeRate), minReasonableRelayFee);\n+    return std::max(CFeeRate(rollingMinimumFeeRate), incrementalRelayFee);\n }\n \n void CTxMemPool::trackPackageRemoved(const CFeeRate& rate) {\n@@ -1106,7 +1105,7 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<uint256>* pvNoSpendsRe\n         // to have 0 fee). This way, we don't allow txn to enter mempool with feerate\n         // equal to txn which were removed with no block in between.\n         CFeeRate removed(it->GetModFeesWithDescendants(), it->GetSizeWithDescendants());\n-        removed += minReasonableRelayFee;\n+        removed += incrementalRelayFee;\n         trackPackageRemoved(removed);\n         maxFeeRateRemoved = std::max(maxFeeRateRemoved, removed);\n "
      },
      {
        "sha": "359babee55b395207bc4ca0a919107201e61f324",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b1add3c28aae8caf2e1517f15cd953eacbb4931/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b1add3c28aae8caf2e1517f15cd953eacbb4931/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=7b1add3c28aae8caf2e1517f15cd953eacbb4931",
        "patch": "@@ -425,8 +425,6 @@ class CTxMemPool\n     uint64_t totalTxSize;      //!< sum of all mempool tx' byte sizes\n     uint64_t cachedInnerUsage; //!< sum of dynamic memory usage of all the map elements (NOT the maps themselves)\n \n-    CFeeRate minReasonableRelayFee;\n-\n     mutable int64_t lastRollingFeeUpdate;\n     mutable bool blockSinceLastRollingFeeBump;\n     mutable double rollingMinimumFeeRate; //!< minimum fee to get into the pool, decreases exponentially\n@@ -505,9 +503,6 @@ class CTxMemPool\n     std::map<uint256, std::pair<double, CAmount> > mapDeltas;\n \n     /** Create a new CTxMemPool.\n-     *  minReasonableRelayFee should be a feerate which is, roughly, somewhere\n-     *  around what it \"costs\" to relay a transaction around the network and\n-     *  below which we would reasonably say a transaction has 0-effective-fee.\n      */\n     CTxMemPool(const CFeeRate& _minReasonableRelayFee);\n     ~CTxMemPool();\n@@ -591,7 +586,7 @@ class CTxMemPool\n \n     /** The minimum fee to get into the mempool, which may itself not be enough\n       *  for larger-sized transactions.\n-      *  The minReasonableRelayFee constructor arg is used to bound the time it\n+      *  The incrementalRelayFee policy variable is used to bound the time it\n       *  takes the fee rate to go back down all the way to 0. When the feerate\n       *  would otherwise be half of this, it is set to 0 instead.\n       */"
      }
    ]
  },
  {
    "sha": "eb30d1a5b215c6dd3763d7f7948f2dd8cb61f6bf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjMwZDFhNWIyMTVjNmRkMzc2M2Q3Zjc5NDhmMmRkOGNiNjFmNmJm",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-12-13T21:19:17Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-16T13:40:40Z"
      },
      "message": "Introduce -dustrelayfee",
      "tree": {
        "sha": "4145415de105b56023c630c9da4e421971793981",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4145415de105b56023c630c9da4e421971793981"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb30d1a5b215c6dd3763d7f7948f2dd8cb61f6bf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb30d1a5b215c6dd3763d7f7948f2dd8cb61f6bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb30d1a5b215c6dd3763d7f7948f2dd8cb61f6bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb30d1a5b215c6dd3763d7f7948f2dd8cb61f6bf/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7b1add3c28aae8caf2e1517f15cd953eacbb4931",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b1add3c28aae8caf2e1517f15cd953eacbb4931",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7b1add3c28aae8caf2e1517f15cd953eacbb4931"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 37,
      "deletions": 17
    },
    "files": [
      {
        "sha": "20c204a5c5b8ed0c811406bd2e997e4f3d492ab4",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb30d1a5b215c6dd3763d7f7948f2dd8cb61f6bf/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb30d1a5b215c6dd3763d7f7948f2dd8cb61f6bf/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=eb30d1a5b215c6dd3763d7f7948f2dd8cb61f6bf",
        "patch": "@@ -468,6 +468,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     if (showDebug) {\n         strUsage += HelpMessageOpt(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !Params(CBaseChainParams::TESTNET).RequireStandard()));\n         strUsage += HelpMessageOpt(\"-incrementalrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define cost of relay, used for mempool limiting and BIP 125 replacement. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_INCREMENTAL_RELAY_FEE)));\n+        strUsage += HelpMessageOpt(\"-dustrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to defined dust, the value of an output such that it will cost about 1/3 of its value in fees at this fee rate to spend it. (default: %s)\", CURRENCY_UNIT, FormatMoney(DUST_RELAY_TX_FEE)));\n     }\n     strUsage += HelpMessageOpt(\"-bytespersigop\", strprintf(_(\"Equivalent bytes per sigop in transactions for relay and mining (default: %u)\"), DEFAULT_BYTES_PER_SIGOP));\n     strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), DEFAULT_ACCEPT_DATACARRIER));\n@@ -995,6 +996,16 @@ bool AppInitParameterInteraction()\n             return InitError(AmountErrMsg(\"blockmintxfee\", GetArg(\"-blockmintxfee\", \"\")));\n     }\n \n+    // Feerate used to define dust.  Shouldn't be changed lightly as old\n+    // implementations may inadvertently create non-standard transactions\n+    if (IsArgSet(\"-dustrelayfee\"))\n+    {\n+        CAmount n = 0;\n+        if (!ParseMoney(GetArg(\"-dustrelayfee\", \"\"), n) || 0 == n)\n+            return InitError(AmountErrMsg(\"dustrelayfee\", GetArg(\"-dustrelayfee\", \"\")));\n+        dustRelayFee = CFeeRate(n);\n+    }\n+\n     fRequireStandard = !GetBoolArg(\"-acceptnonstdtxn\", !chainparams.RequireStandard());\n     if (chainparams.RequireStandard() && !fRequireStandard)\n         return InitError(strprintf(\"acceptnonstdtxn is not currently supported for %s chain\", chainparams.NetworkIDString()));"
      },
      {
        "sha": "ec398f6627f192c6db8835b289f078329f9042eb",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb30d1a5b215c6dd3763d7f7948f2dd8cb61f6bf/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb30d1a5b215c6dd3763d7f7948f2dd8cb61f6bf/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=eb30d1a5b215c6dd3763d7f7948f2dd8cb61f6bf",
        "patch": "@@ -105,7 +105,7 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason, const bool witnes\n         else if ((whichType == TX_MULTISIG) && (!fIsBareMultisigStd)) {\n             reason = \"bare-multisig\";\n             return false;\n-        } else if (txout.IsDust(::minRelayTxFee)) {\n+        } else if (txout.IsDust(dustRelayFee)) {\n             reason = \"dust\";\n             return false;\n         }\n@@ -207,6 +207,7 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n }\n \n CFeeRate incrementalRelayFee = CFeeRate(DEFAULT_INCREMENTAL_RELAY_FEE);\n+CFeeRate dustRelayFee = CFeeRate(DUST_RELAY_TX_FEE);\n unsigned int nBytesPerSigOp = DEFAULT_BYTES_PER_SIGOP;\n \n int64_t GetVirtualTransactionSize(int64_t nWeight, int64_t nSigOpCost)"
      },
      {
        "sha": "9b1323ac26f38966f4afbff39d6bdb272b4f6c59",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb30d1a5b215c6dd3763d7f7948f2dd8cb61f6bf/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb30d1a5b215c6dd3763d7f7948f2dd8cb61f6bf/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=eb30d1a5b215c6dd3763d7f7948f2dd8cb61f6bf",
        "patch": "@@ -40,6 +40,12 @@ static const unsigned int MAX_STANDARD_P2WSH_STACK_ITEMS = 100;\n static const unsigned int MAX_STANDARD_P2WSH_STACK_ITEM_SIZE = 80;\n /** The maximum size of a standard witnessScript */\n static const unsigned int MAX_STANDARD_P2WSH_SCRIPT_SIZE = 3600;\n+/** Min feerate for defining dust. Historically this has been the same as the\n+ * minRelayTxFee, however changing the dust limit changes which transactions are\n+ * standard and should be done with care and ideally rarely. It makes sense to\n+ * only increase the dust limit after prior releases were already not creating\n+ * outputs below the new threshold */\n+static const unsigned int DUST_RELAY_TX_FEE = 1000;\n /**\n  * Standard script verification flags that standard transactions will comply\n  * with. However scripts violating these flags may still be present in valid\n@@ -88,6 +94,7 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n \n extern CFeeRate incrementalRelayFee;\n+extern CFeeRate dustRelayFee;\n extern unsigned int nBytesPerSigOp;\n \n /** Compute the virtual transaction size (weight reinterpreted as bytes). */"
      },
      {
        "sha": "f8aba70d92fcc074a4ccb9eab7bd18d260262d09",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb30d1a5b215c6dd3763d7f7948f2dd8cb61f6bf/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb30d1a5b215c6dd3763d7f7948f2dd8cb61f6bf/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=eb30d1a5b215c6dd3763d7f7948f2dd8cb61f6bf",
        "patch": "@@ -15,7 +15,8 @@\n \n #include \"wallet/coincontrol.h\"\n #include \"init.h\"\n-#include \"validation.h\" // For minRelayTxFee\n+#include \"policy/policy.h\"\n+#include \"validation.h\" // For mempool\n #include \"wallet/wallet.h\"\n \n #include <boost/assign/list_of.hpp> // for 'map_list_of()'\n@@ -432,7 +433,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         {\n             CTxOut txout(amount, (CScript)std::vector<unsigned char>(24, 0));\n             txDummy.vout.push_back(txout);\n-            if (txout.IsDust(::minRelayTxFee))\n+            if (txout.IsDust(dustRelayFee))\n                fDust = true;\n         }\n     }\n@@ -545,10 +546,10 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n             if (nChange > 0 && nChange < MIN_CHANGE)\n             {\n                 CTxOut txout(nChange, (CScript)std::vector<unsigned char>(24, 0));\n-                if (txout.IsDust(::minRelayTxFee))\n+                if (txout.IsDust(dustRelayFee))\n                 {\n                     if (CoinControlDialog::fSubtractFeeFromAmount) // dust-change will be raised until no dust\n-                        nChange = txout.GetDustThreshold(::minRelayTxFee);\n+                        nChange = txout.GetDustThreshold(dustRelayFee);\n                     else\n                     {\n                         nPayFee += nChange;"
      },
      {
        "sha": "de6e09b8b0758b139407fea5b75026df544a81d5",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb30d1a5b215c6dd3763d7f7948f2dd8cb61f6bf/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb30d1a5b215c6dd3763d7f7948f2dd8cb61f6bf/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=eb30d1a5b215c6dd3763d7f7948f2dd8cb61f6bf",
        "patch": "@@ -11,7 +11,7 @@\n \n #include \"primitives/transaction.h\"\n #include \"init.h\"\n-#include \"validation.h\" // For minRelayTxFee\n+#include \"policy/policy.h\"\n #include \"protocol.h\"\n #include \"script/script.h\"\n #include \"script/standard.h\"\n@@ -257,7 +257,7 @@ bool isDust(const QString& address, const CAmount& amount)\n     CTxDestination dest = CBitcoinAddress(address.toStdString()).Get();\n     CScript script = GetScriptForDestination(dest);\n     CTxOut txOut(amount, script);\n-    return txOut.IsDust(::minRelayTxFee);\n+    return txOut.IsDust(dustRelayFee);\n }\n \n QString HtmlEscape(const QString& str, bool fMultiLine)"
      },
      {
        "sha": "688e8123af8aeae9112602b2583476b0ca10b2c6",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb30d1a5b215c6dd3763d7f7948f2dd8cb61f6bf/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb30d1a5b215c6dd3763d7f7948f2dd8cb61f6bf/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=eb30d1a5b215c6dd3763d7f7948f2dd8cb61f6bf",
        "patch": "@@ -10,7 +10,7 @@\n \n #include \"base58.h\"\n #include \"chainparams.h\"\n-#include \"validation.h\" // For minRelayTxFee\n+#include \"policy/policy.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n #include \"wallet/wallet.h\"\n@@ -582,7 +582,7 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n \n         // Extract and check amounts\n         CTxOut txOut(sendingTo.second, sendingTo.first);\n-        if (txOut.IsDust(::minRelayTxFee)) {\n+        if (txOut.IsDust(dustRelayFee)) {\n             Q_EMIT message(tr(\"Payment request error\"), tr(\"Requested payment amount of %1 is too small (considered dust).\")\n                 .arg(BitcoinUnits::formatWithUnit(optionsModel->getDisplayUnit(), sendingTo.second)),\n                 CClientUIInterface::MSG_ERROR);"
      },
      {
        "sha": "53a2de1ce0cd613ec5351a09e4991c34bbf4da4f",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb30d1a5b215c6dd3763d7f7948f2dd8cb61f6bf/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb30d1a5b215c6dd3763d7f7948f2dd8cb61f6bf/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=eb30d1a5b215c6dd3763d7f7948f2dd8cb61f6bf",
        "patch": "@@ -692,7 +692,7 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     BOOST_CHECK(IsStandardTx(t, reason));\n \n     // Check dust with default relay fee:\n-    CAmount nDustThreshold = 182 * minRelayTxFee.GetFeePerK()/1000 * 3;\n+    CAmount nDustThreshold = 182 * dustRelayFee.GetFeePerK()/1000 * 3;\n     BOOST_CHECK_EQUAL(nDustThreshold, 546);\n     // dust:\n     t.vout[0].nValue = nDustThreshold - 1;\n@@ -703,14 +703,14 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n \n     // Check dust with odd relay fee to verify rounding:\n     // nDustThreshold = 182 * 1234 / 1000 * 3\n-    minRelayTxFee = CFeeRate(1234);\n+    dustRelayFee = CFeeRate(1234);\n     // dust:\n     t.vout[0].nValue = 672 - 1;\n     BOOST_CHECK(!IsStandardTx(t, reason));\n     // not dust:\n     t.vout[0].nValue = 672;\n     BOOST_CHECK(IsStandardTx(t, reason));\n-    minRelayTxFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);\n+    dustRelayFee = CFeeRate(DUST_RELAY_TX_FEE);\n \n     t.vout[0].scriptPubKey = CScript() << OP_1;\n     BOOST_CHECK(!IsStandardTx(t, reason));"
      },
      {
        "sha": "5f442fd21e0ffea7d4d9fed148837c1279d530c2",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb30d1a5b215c6dd3763d7f7948f2dd8cb61f6bf/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb30d1a5b215c6dd3763d7f7948f2dd8cb61f6bf/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=eb30d1a5b215c6dd3763d7f7948f2dd8cb61f6bf",
        "patch": "@@ -2335,7 +2335,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                         }\n                     }\n \n-                    if (txout.IsDust(::minRelayTxFee))\n+                    if (txout.IsDust(dustRelayFee))\n                     {\n                         if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n                         {\n@@ -2413,16 +2413,16 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                     // We do not move dust-change to fees, because the sender would end up paying more than requested.\n                     // This would be against the purpose of the all-inclusive feature.\n                     // So instead we raise the change and deduct from the recipient.\n-                    if (nSubtractFeeFromAmount > 0 && newTxOut.IsDust(::minRelayTxFee))\n+                    if (nSubtractFeeFromAmount > 0 && newTxOut.IsDust(dustRelayFee))\n                     {\n-                        CAmount nDust = newTxOut.GetDustThreshold(::minRelayTxFee) - newTxOut.nValue;\n+                        CAmount nDust = newTxOut.GetDustThreshold(dustRelayFee) - newTxOut.nValue;\n                         newTxOut.nValue += nDust; // raise change until no more dust\n                         for (unsigned int i = 0; i < vecSend.size(); i++) // subtract from first recipient\n                         {\n                             if (vecSend[i].fSubtractFeeFromAmount)\n                             {\n                                 txNew.vout[i].nValue -= nDust;\n-                                if (txNew.vout[i].IsDust(::minRelayTxFee))\n+                                if (txNew.vout[i].IsDust(dustRelayFee))\n                                 {\n                                     strFailReason = _(\"The transaction amount is too small to send after the fee has been deducted\");\n                                     return false;\n@@ -2434,7 +2434,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n \n                     // Never create dust outputs; if we would, just\n                     // add the dust to the fee.\n-                    if (newTxOut.IsDust(::minRelayTxFee))\n+                    if (newTxOut.IsDust(dustRelayFee))\n                     {\n                         nChangePosInOut = -1;\n                         nFeeRet += nChange;"
      }
    ]
  }
]