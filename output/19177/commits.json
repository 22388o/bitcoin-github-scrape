[
  {
    "sha": "57890abf2c7919eddfec36178b1136cd44ffe883",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Nzg5MGFiZjJjNzkxOWVkZGZlYzM2MTc4YjExMzZjZDQ0ZmZlODgz",
    "commit": {
      "author": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-06-04T15:49:09Z"
      },
      "committer": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-06-08T04:54:43Z"
      },
      "message": "Remove two unneeded tests\n\nTest 1 is a duplicate of test_size() later in the file.  Inexplicably,\nthis test does not work on macOS, whereas test_size() does.\n\nTest 2 is problematic for two reasons.  First, it always fails with an\ninvalid checksum, which is probably not what was intended.  Second, it's\nnot defined at this layer what the behavior should be.  Hypothetically,\nif this test was fixed so that it gave messages with valid checksums,\nthen the message would pass successfully thought the network layer and\nfail only in the processing layer.  A priori the network layer has no\nidea what the size of a message \"actually\" is.\n\nThe \"Why does behavior change at 78 bytes\" is because of the following:\n\nprint(len(node.p2p.build_message(msg))) # 125\n=> Payload size = 125 - 24 = 101\nIf we take 77 bytes, then there are 101 - 77 = 24 left\nThat's exactly the size of a header\nSo, bitcoind deserializes the header and rejects it for some other reason\n(Almost always an invalid size (too large))\nBut, if we take 78 bytes, then there are 101 - 78 = 23 left\nThat's not enough to fill a header, so the socket stays open waiting for\nmore data.  That's why we sometimes have to push additional data in\norder for the peer to disconnect.\n\nAdditionally, both of these tests use the \"conn\" variable.  For fun, go\nlook at where it's declared.  (Hint: test_large_inv().  Don't we all\nlove python's idea of scope?)",
      "tree": {
        "sha": "07d9c7370e0fe9478722698271e75d3c919b5f4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07d9c7370e0fe9478722698271e75d3c919b5f4a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/57890abf2c7919eddfec36178b1136cd44ffe883",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57890abf2c7919eddfec36178b1136cd44ffe883",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/57890abf2c7919eddfec36178b1136cd44ffe883",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57890abf2c7919eddfec36178b1136cd44ffe883/comments",
    "author": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b3091b2be7d1e5ab86d7380a884d4f23a5e9c9b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3091b2be7d1e5ab86d7380a884d4f23a5e9c9b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b3091b2be7d1e5ab86d7380a884d4f23a5e9c9b7"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 0,
      "deletions": 86
    },
    "files": [
      {
        "sha": "244a5a136dde7512658b8e02f097ddf1c83c64b4",
        "filename": "test/functional/p2p_invalid_messages.py",
        "status": "modified",
        "additions": 0,
        "deletions": 86,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57890abf2c7919eddfec36178b1136cd44ffe883/test/functional/p2p_invalid_messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57890abf2c7919eddfec36178b1136cd44ffe883/test/functional/p2p_invalid_messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_messages.py?ref=57890abf2c7919eddfec36178b1136cd44ffe883",
        "patch": "@@ -5,7 +5,6 @@\n \"\"\"Test node responses to invalid network messages.\"\"\"\n import asyncio\n import struct\n-import sys\n \n from test_framework.messages import (\n     CBlockHeader,\n@@ -50,11 +49,6 @@ def run_test(self):\n          . Test msg header\n         0. Send a bunch of large (4MB) messages of an unrecognized type. Check to see\n            that it isn't an effective DoS against the node.\n-\n-        1. Send an oversized (4MB+) message and check that we're disconnected.\n-\n-        2. Send a few messages with an incorrect data size in the header, ensure the\n-           messages are ignored.\n         \"\"\"\n         self.test_magic_bytes()\n         self.test_checksum()\n@@ -95,66 +89,6 @@ def run_test(self):\n         node.p2p.sync_with_ping(timeout=400)\n         assert node.p2p.is_connected\n \n-        #\n-        # 1.\n-        #\n-        # Send an oversized message, ensure we're disconnected.\n-        #\n-        # Under macOS this test is skipped due to an unexpected error code\n-        # returned from the closing socket which python/asyncio does not\n-        # yet know how to handle.\n-        #\n-        if sys.platform != 'darwin':\n-            msg_over_size = msg_unrecognized(str_data=\"b\" * (valid_data_limit + 1))\n-            assert len(msg_over_size.serialize()) == (msg_limit + 1)\n-\n-            # An unknown message type (or *any* message type) over\n-            # MAX_PROTOCOL_MESSAGE_LENGTH should result in a disconnect.\n-            node.p2p.send_message(msg_over_size)\n-            node.p2p.wait_for_disconnect(timeout=4)\n-\n-            node.disconnect_p2ps()\n-            conn = node.add_p2p_connection(P2PDataStore())\n-            conn.wait_for_verack()\n-        else:\n-            self.log.info(\"Skipping test p2p_invalid_messages/1 (oversized message) under macOS\")\n-\n-        #\n-        # 2.\n-        #\n-        # Send messages with an incorrect data size in the header.\n-        #\n-        actual_size = 100\n-        msg = msg_unrecognized(str_data=\"b\" * actual_size)\n-\n-        # TODO: handle larger-than cases. I haven't been able to pin down what behavior to expect.\n-        for wrong_size in (2, 77, 78, 79):\n-            self.log.info(\"Sending a message with incorrect size of {}\".format(wrong_size))\n-\n-            # Unmodified message should submit okay.\n-            node.p2p.send_and_ping(msg)\n-\n-            # A message lying about its data size results in a disconnect when the incorrect\n-            # data size is less than the actual size.\n-            #\n-            # TODO: why does behavior change at 78 bytes?\n-            #\n-            node.p2p.send_raw_message(self._tweak_msg_data_size(msg, wrong_size))\n-\n-            # For some reason unknown to me, we sometimes have to push additional data to the\n-            # peer in order for it to realize a disconnect.\n-            try:\n-                node.p2p.send_message(msg_ping(nonce=123123))\n-            except IOError:\n-                pass\n-\n-            node.p2p.wait_for_disconnect(timeout=10)\n-            node.disconnect_p2ps()\n-            node.add_p2p_connection(P2PDataStore())\n-\n-        # Node is still up.\n-        conn = node.add_p2p_connection(P2PDataStore())\n-\n     def test_magic_bytes(self):\n         conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n \n@@ -225,26 +159,6 @@ def test_large_inv(self):\n             conn.send_and_ping(msg)\n         self.nodes[0].disconnect_p2ps()\n \n-    def _tweak_msg_data_size(self, message, wrong_size):\n-        \"\"\"\n-        Return a raw message based on another message but with an incorrect data size in\n-        the message header.\n-        \"\"\"\n-        raw_msg = self.node.p2p.build_message(message)\n-\n-        bad_size_bytes = struct.pack(\"<I\", wrong_size)\n-        num_header_bytes_before_size = 4 + 12\n-\n-        # Replace the correct data size in the message with an incorrect one.\n-        raw_msg_with_wrong_size = (\n-            raw_msg[:num_header_bytes_before_size] +\n-            bad_size_bytes +\n-            raw_msg[(num_header_bytes_before_size + len(bad_size_bytes)):]\n-        )\n-        assert len(raw_msg) == len(raw_msg_with_wrong_size)\n-\n-        return raw_msg_with_wrong_size\n-\n \n if __name__ == '__main__':\n     InvalidMessagesTest().main()"
      }
    ]
  },
  {
    "sha": "ff1e7b884447a5ba10553b2d964625f94e255bdc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjFlN2I4ODQ0NDdhNWJhMTA1NTNiMmQ5NjQ2MjVmOTRlMjU1YmRj",
    "commit": {
      "author": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-06-04T15:52:23Z"
      },
      "committer": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-06-08T04:54:52Z"
      },
      "message": "Move size limits to module-global\n\nAs well, this renames those variables to match PEP8 and this clears up\nthe comment relating to VALID_DATA_LIMIT.\n\nAdmittedly, this commit is mainly to make the following ones cleaner.",
      "tree": {
        "sha": "f6e671bcc8debe60221d7558ead5b9dd09822808",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6e671bcc8debe60221d7558ead5b9dd09822808"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff1e7b884447a5ba10553b2d964625f94e255bdc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff1e7b884447a5ba10553b2d964625f94e255bdc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff1e7b884447a5ba10553b2d964625f94e255bdc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff1e7b884447a5ba10553b2d964625f94e255bdc/comments",
    "author": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "57890abf2c7919eddfec36178b1136cd44ffe883",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57890abf2c7919eddfec36178b1136cd44ffe883",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57890abf2c7919eddfec36178b1136cd44ffe883"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "38e823df47129a3366cb25411147df5ee1901404",
        "filename": "test/functional/p2p_invalid_messages.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff1e7b884447a5ba10553b2d964625f94e255bdc/test/functional/p2p_invalid_messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff1e7b884447a5ba10553b2d964625f94e255bdc/test/functional/p2p_invalid_messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_messages.py?ref=ff1e7b884447a5ba10553b2d964625f94e255bdc",
        "patch": "@@ -23,6 +23,8 @@\n )\n from test_framework.test_framework import BitcoinTestFramework\n \n+MSG_LIMIT = 4 * 1000 * 1000  # 4MB, per MAX_PROTOCOL_MESSAGE_LENGTH\n+VALID_DATA_LIMIT = MSG_LIMIT - 5  # Account for the 5-byte length prefix\n \n class msg_unrecognized:\n     \"\"\"Nonsensical message. Modeled after similar types in test_framework.messages.\"\"\"\n@@ -61,17 +63,15 @@ def run_test(self):\n         node.add_p2p_connection(P2PDataStore())\n         conn2 = node.add_p2p_connection(P2PDataStore())\n \n-        msg_limit = 4 * 1000 * 1000  # 4MB, per MAX_PROTOCOL_MESSAGE_LENGTH\n-        valid_data_limit = msg_limit - 5  # Account for the 4-byte length prefix\n \n         #\n         # 0.\n         #\n         # Send as large a message as is valid, ensure we aren't disconnected but\n         # also can't exhaust resources.\n         #\n-        msg_at_size = msg_unrecognized(str_data=\"b\" * valid_data_limit)\n-        assert len(msg_at_size.serialize()) == msg_limit\n+        msg_at_size = msg_unrecognized(str_data=\"b\" * VALID_DATA_LIMIT)\n+        assert len(msg_at_size.serialize()) == MSG_LIMIT\n \n         self.log.info(\"Sending a bunch of large, junk messages to test memory exhaustion. May take a bit...\")\n "
      }
    ]
  },
  {
    "sha": "5c4648d17ba18e4194959963994cc6b37053f127",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YzQ2NDhkMTdiYTE4ZTQxOTQ5NTk5NjM5OTRjYzZiMzcwNTNmMTI3",
    "commit": {
      "author": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-06-04T17:06:17Z"
      },
      "committer": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-06-08T04:55:34Z"
      },
      "message": "Fix \"invalid message size\" test\n\nThis test originally made a message with an invalid stated length, and\nan invalid checksum.  This was because only the header was changed, but\nthe checksum stayed the same.  This was fine for now because we check\nthe header first to see if it has a valid stated size, and we disconnect\nif it does not, so we never end up checking for the checksum.  If this\nbehavior was to change, this test would become a problem.  (Indeed I\ndiscovered this when playing around with this behavior).  By instead\ncreating a message with an oversized payload from the start, we create a\nmessage with an invalid stated length but a valid checksum, as intended.\n\nAdditionally, this takes advantage to the newly module-global\nVALID_DATA_LIMIT as opposed to the magic 0x02000000.  Yes, 4MB < 32MiB,\nbut at the moment when receiving a message we check both, so this makes\nthe test tighter.",
      "tree": {
        "sha": "023fd4e638e8990352f8966de267ca7945532f44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/023fd4e638e8990352f8966de267ca7945532f44"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c4648d17ba18e4194959963994cc6b37053f127",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c4648d17ba18e4194959963994cc6b37053f127",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5c4648d17ba18e4194959963994cc6b37053f127",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c4648d17ba18e4194959963994cc6b37053f127/comments",
    "author": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff1e7b884447a5ba10553b2d964625f94e255bdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff1e7b884447a5ba10553b2d964625f94e255bdc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff1e7b884447a5ba10553b2d964625f94e255bdc"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 3,
      "deletions": 8
    },
    "files": [
      {
        "sha": "b15d2ffd2e297baec6e7127211637fedc781e905",
        "filename": "test/functional/p2p_invalid_messages.py",
        "status": "modified",
        "additions": 3,
        "deletions": 8,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c4648d17ba18e4194959963994cc6b37053f127/test/functional/p2p_invalid_messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c4648d17ba18e4194959963994cc6b37053f127/test/functional/p2p_invalid_messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_messages.py?ref=5c4648d17ba18e4194959963994cc6b37053f127",
        "patch": "@@ -4,7 +4,6 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test node responses to invalid network messages.\"\"\"\n import asyncio\n-import struct\n \n from test_framework.messages import (\n     CBlockHeader,\n@@ -123,13 +122,9 @@ def test_checksum(self):\n     def test_size(self):\n         conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n         with self.nodes[0].assert_debug_log(['']):\n-            msg = conn.build_message(msg_unrecognized(str_data=\"d\"))\n-            cut_len = (\n-                4 +  # magic\n-                12  # msgtype\n-            )\n-            # modify len to MAX_SIZE + 1\n-            msg = msg[:cut_len] + struct.pack(\"<I\", 0x02000000 + 1) + msg[cut_len + 4:]\n+            # Create a message with oversized payload\n+            msg = msg_unrecognized(str_data=\"d\"*(VALID_DATA_LIMIT + 1))\n+            msg = conn.build_message(msg)\n             self.nodes[0].p2p.send_raw_message(msg)\n             conn.wait_for_disconnect(timeout=1)\n             self.nodes[0].disconnect_p2ps()"
      }
    ]
  },
  {
    "sha": "af2a145e575f23c64909e6cf1fb323c603bda7ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZjJhMTQ1ZTU3NWYyM2M2NDkwOWU2Y2YxZmIzMjNjNjAzYmRhN2Nh",
    "commit": {
      "author": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-06-04T17:06:29Z"
      },
      "committer": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-06-08T12:52:39Z"
      },
      "message": "Refactor resource exhaustion test\n\nThis is a simple refactor of the specified test.  It is now brought in\nline with the rest of the tests in the module.  This should make things\neasier to debug, as all of the tests are now grouped together at the\ntop.",
      "tree": {
        "sha": "a410a346d882a8a5e12f8af6811a035f34d50436",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a410a346d882a8a5e12f8af6811a035f34d50436"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/af2a145e575f23c64909e6cf1fb323c603bda7ca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af2a145e575f23c64909e6cf1fb323c603bda7ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/af2a145e575f23c64909e6cf1fb323c603bda7ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af2a145e575f23c64909e6cf1fb323c603bda7ca/comments",
    "author": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c4648d17ba18e4194959963994cc6b37053f127",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c4648d17ba18e4194959963994cc6b37053f127",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c4648d17ba18e4194959963994cc6b37053f127"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 24,
      "deletions": 36
    },
    "files": [
      {
        "sha": "771fac08cafd1f27066dacd3d60741168934d282",
        "filename": "test/functional/p2p_invalid_messages.py",
        "status": "modified",
        "additions": 24,
        "deletions": 36,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af2a145e575f23c64909e6cf1fb323c603bda7ca/test/functional/p2p_invalid_messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af2a145e575f23c64909e6cf1fb323c603bda7ca/test/functional/p2p_invalid_messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_messages.py?ref=af2a145e575f23c64909e6cf1fb323c603bda7ca",
        "patch": "@@ -46,47 +46,12 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n \n     def run_test(self):\n-        \"\"\"\n-         . Test msg header\n-        0. Send a bunch of large (4MB) messages of an unrecognized type. Check to see\n-           that it isn't an effective DoS against the node.\n-        \"\"\"\n         self.test_magic_bytes()\n         self.test_checksum()\n         self.test_size()\n         self.test_msgtype()\n         self.test_large_inv()\n-\n-        node = self.nodes[0]\n-        self.node = node\n-        node.add_p2p_connection(P2PDataStore())\n-        conn2 = node.add_p2p_connection(P2PDataStore())\n-\n-\n-        #\n-        # 0.\n-        #\n-        # Send as large a message as is valid, ensure we aren't disconnected but\n-        # also can't exhaust resources.\n-        #\n-        msg_at_size = msg_unrecognized(str_data=\"b\" * VALID_DATA_LIMIT)\n-        assert len(msg_at_size.serialize()) == MSG_LIMIT\n-\n-        self.log.info(\"Sending a bunch of large, junk messages to test memory exhaustion. May take a bit...\")\n-\n-        # Run a bunch of times to test for memory exhaustion.\n-        for _ in range(80):\n-            node.p2p.send_message(msg_at_size)\n-\n-        # Check that, even though the node is being hammered by nonsense from one\n-        # connection, it can still service other peers in a timely way.\n-        for _ in range(20):\n-            conn2.sync_with_ping(timeout=2)\n-\n-        # Peer 1, despite serving up a bunch of nonsense, should still be connected.\n-        self.log.info(\"Waiting for node to drop junk messages.\")\n-        node.p2p.sync_with_ping(timeout=400)\n-        assert node.p2p.is_connected\n+        self.test_resource_exhaustion()\n \n     def test_magic_bytes(self):\n         conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n@@ -154,6 +119,29 @@ def test_large_inv(self):\n             conn.send_and_ping(msg)\n         self.nodes[0].disconnect_p2ps()\n \n+    def test_resource_exhaustion(self):\n+        conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n+        conn2 = self.nodes[0].add_p2p_connection(P2PDataStore())\n+        msg_at_size = msg_unrecognized(str_data=\"b\" * VALID_DATA_LIMIT)\n+        assert len(msg_at_size.serialize()) == MSG_LIMIT\n+\n+        self.log.info(\"Sending a bunch of large, junk messages to test memory exhaustion. May take a bit...\")\n+\n+        # Run a bunch of times to test for memory exhaustion.\n+        for _ in range(80):\n+            conn.send_message(msg_at_size)\n+\n+        # Check that, even though the node is being hammered by nonsense from one\n+        # connection, it can still service other peers in a timely way.\n+        for _ in range(20):\n+            conn2.sync_with_ping(timeout=2)\n+\n+        # Peer 1, despite being served up a bunch of nonsense, should still be connected.\n+        self.log.info(\"Waiting for node to drop junk messages.\")\n+        conn.sync_with_ping(timeout=400)\n+        assert conn.is_connected\n+        self.nodes[0].disconnect_p2ps()\n+\n \n if __name__ == '__main__':\n     InvalidMessagesTest().main()"
      }
    ]
  }
]