jnewbery,2020-06-05 22:00:36,"@MarcoFalke \n> We should test the following cases:\n>\n> 1. header indicates size a, but payload is of size a-1\n> 2. header indicates size a, but payload is of size a+1\n\nThese aren't strictly header errors. In (1), the message won't finish being read, because the deserializer is waiting for another byte. When the following message is received:\n- the first byte of the header will be rea",https://github.com/bitcoin/bitcoin/pull/19177#issuecomment-639849481,639849481,
troygiorshev,2020-06-08 05:00:47,Rebased and made suggested changes.  Will continue thinking about what the correct test should be for a malicious indicated size.,https://github.com/bitcoin/bitcoin/pull/19177#issuecomment-640367311,640367311,
MarcoFalke,2020-06-08 12:59:48,"I don't see the downside of having a test that does:\n\n* Send a corrupt msg with wrongly indicates size (off by one in either way)\n* Send a valid msg and observe a disconnect\n\nIt should be possible to write such a test in 5-10 lines of python. Is there any reason I am missing that such a test would be inappropriate?",https://github.com/bitcoin/bitcoin/pull/19177#issuecomment-640587418,640587418,
troygiorshev,2020-06-08 17:03:13,"Regarding the situation where the payload is too large, consider the following test.  A node can not tell the difference between these two ""messages"", they're equivalent.  As opposed to testing for an oversized payload, we should test separately for:\n- Checking that a node responds well to a message with an invalid checksum\n- Checking that a node responds well to <24 bytes of complete junk\n",https://github.com/bitcoin/bitcoin/pull/19177#issuecomment-640753373,640753373,
troygiorshev,2020-06-08 21:00:31,"Just for fun, I'll point out that we wont *always* disconnect on a corrupted payload size.  I've made a proof of concept where the corruption neither results in a disconnect nor a misalignment.  All it needs is two normal bitcoin messages and two single bit flips (one in the first message's payload size, and the other in the second message's command).  It can be found [here](https://github.com/tro",https://github.com/bitcoin/bitcoin/pull/19177#issuecomment-640884009,640884009,
DrahtBot,2020-06-10 02:12:59,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19107 (p2p: Refactor, move all header verification into the network layer, without changing behavior by troygiorshev)\n\n",https://github.com/bitcoin/bitcoin/pull/19177#issuecomment-641677494,641677494,
jnewbery,2020-06-12 15:13:47,"ACK af2a145e575f23c64909e6cf1fb323c603bda7ca\n\nThis is a good change and removes a lot of confused and confusing test code that isn't testing what it purports to.\n\nFuture PRs could clean this test further:\n\n- the ""resource_exhaustion"" test should be removed/renamed from resource exhaustion. This was originally added to verify that receiving large messages wouldn't result in memory blowu",https://github.com/bitcoin/bitcoin/pull/19177#issuecomment-643327490,643327490,
MarcoFalke,2020-06-12 17:32:15,"> all of the previous large messages have been processed already.\n\nI don't think this is true. At least on travis the test failed when the ping was sent on a different connection. See https://github.com/bitcoin/bitcoin/pull/19177#discussion_r436611239",https://github.com/bitcoin/bitcoin/pull/19177#issuecomment-643398276,643398276,
jnewbery,2020-06-12 18:22:47,"> I don't think this is true. At least on travis the test failed when the ping was sent on a different connection. See #19177 (comment)\n\nYou're right. I was wrong. When I run this locally, the message sending appears to be serial because bitcoind is able to keep up with the messages as quickly as they're delivered. When bitcoind is running more slowly, such as under sanitizers, it can't keep u",https://github.com/bitcoin/bitcoin/pull/19177#issuecomment-643421068,643421068,
MarcoFalke,2020-06-12 18:33:43,"\n> I don't think we necessarily need to test this, because invalid headers are tested elsewhere.\n\nWhere?\n\nIn general, I still don't understand why it is ok to remove test coverage without any replacement. We have never done this in the past and I don't see why this pull should be an exception. Don't get me wrong, I like the cleanups here and I'd like to see it merged, but I think this sh",https://github.com/bitcoin/bitcoin/pull/19177#issuecomment-643425662,643425662,
MarcoFalke,2020-06-12 19:21:50,"Sorry, false alarm. The ""red"" line will only become ""blue"" when the socket buffer is filled in two chunks or more. This might happen non-deterministically based on network-congestion on the test machine and has nothing to do with the changes in this pull request.",https://github.com/bitcoin/bitcoin/pull/19177#issuecomment-643444544,643444544,
MarcoFalke,2020-06-12 19:29:33,"re-ACK af2a145e57 üç¶\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-ACK af2a145e57 üç¶\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiFBwv+KRk8EKRDiTcHW/1+SbEEwKl26fup1QVoLiueaW5IWuwuG6k/vgx0ZIIA\nSIUVmXEXgJ/wJ+8oWtT6rR/ulh5i1S6vR38d0o1HYg6vR",https://github.com/bitcoin/bitcoin/pull/19177#issuecomment-643447810,643447810,
jnewbery,2020-06-13 02:57:35,"> I can't see any reason for launching a new async task to test the magic bytes. Why not just send a message with invalid magic bytes using send_raw_message?\n\nDone in #19264 ",https://github.com/bitcoin/bitcoin/pull/19177#issuecomment-643558615,643558615,
MarcoFalke,2020-06-05 14:55:08,"in commit 793aa7a2e74460bdb504e8f9e2c642b6e607015c:\n\nThe comment is incorrect. MAX_SIZE is not equal to VALID_DATA_LIMIT",https://github.com/bitcoin/bitcoin/pull/19177#discussion_r435976663,435976663,test/functional/p2p_invalid_messages.py
MarcoFalke,2020-06-05 14:56:40,"in commit 271949980d:\n\n```suggestion\n            conn.send_message(msg_at_size)\n```",https://github.com/bitcoin/bitcoin/pull/19177#discussion_r435977663,435977663,test/functional/p2p_invalid_messages.py
MarcoFalke,2020-06-05 14:57:12,"```suggestion\n        assert conn.p2p.is_connected\n```\n\nSame",https://github.com/bitcoin/bitcoin/pull/19177#discussion_r435978014,435978014,test/functional/p2p_invalid_messages.py
troygiorshev,2020-06-08 04:42:09,Done,https://github.com/bitcoin/bitcoin/pull/19177#discussion_r436453926,436453926,test/functional/p2p_invalid_messages.py
troygiorshev,2020-06-08 04:42:15,Done,https://github.com/bitcoin/bitcoin/pull/19177#discussion_r436453944,436453944,test/functional/p2p_invalid_messages.py
troygiorshev,2020-06-08 04:42:53,"Ok, agreed.  No need to introduce an undefined term.",https://github.com/bitcoin/bitcoin/pull/19177#discussion_r436454102,436454102,test/functional/p2p_invalid_messages.py
MarcoFalke,2020-06-08 10:52:54,"conn is now the same peer, previously it was a different one. Why?\nAlso the test fails because of this.",https://github.com/bitcoin/bitcoin/pull/19177#discussion_r436611239,436611239,test/functional/p2p_invalid_messages.py
troygiorshev,2020-06-08 12:53:06,"fixed, thanks",https://github.com/bitcoin/bitcoin/pull/19177#discussion_r436669219,436669219,test/functional/p2p_invalid_messages.py
